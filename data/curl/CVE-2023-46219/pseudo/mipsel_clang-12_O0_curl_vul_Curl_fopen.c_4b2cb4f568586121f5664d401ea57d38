int __fastcall Curl_fopen(Curl_easy *data, const char *filename, FILE **fh, char **tempname)
{
  int v4; // $v0
  FILE *v5; // $v0
  char v7[32]; // [sp+18h] [+18h] BYREF
  int v8; // [sp+38h] [+38h]
  int v9; // [sp+3Ch] [+3Ch]
  int v10; // [sp+BCh] [+BCh]
  char v11[24]; // [sp+C0h] [+C0h] BYREF
  __mode_t v12; // [sp+D8h] [+D8h]
  int v13; // [sp+E0h] [+E0h]
  int v14; // [sp+E4h] [+E4h]
  const char *v15; // [sp+160h] [+160h]
  char v16[12]; // [sp+164h] [+164h] BYREF
  int v17; // [sp+170h] [+170h]
  char **v18; // [sp+174h] [+174h]
  FILE **v19; // [sp+178h] [+178h]
  const char *v20; // [sp+17Ch] [+17Ch]
  Curl_easy *v21; // [sp+180h] [+180h]

  v21 = data;
  v20 = filename;
  v19 = fh;
  v18 = tempname;
  v17 = 23;
  v15 = 0;
  v10 = -1;
  *tempname = 0;
  if ( stat64(v20, v11) == -1 || (v12 & 0xF000) != 0x8000 )
  {
    v4 = ((int (__fastcall *)(const char *, const char *))fopen64)(v20, "w");
    *v19 = (FILE *)v4;
    if ( *v19 )
      return 0;
  }
  else
  {
    v17 = ((int (__fastcall *)(Curl_easy *, char *, int))Curl_rand_hex)(v21, v16, 9);
    if ( !v17 )
    {
      v15 = (const char *)curl_maprintf("%s.%s.tmp", v20, v16);
      if ( v15 )
      {
        v17 = 23;
        v10 = open64(v15, 1281, 384);
        if ( v10 != -1
          && (((int (__fastcall *)(int, char *))fstat64)(v10, v7) == -1
           || v8 != v13
           || v9 != v14
           || fchmod(v10, v12) != -1) )
        {
          v5 = fdopen(v10, "w");
          *v19 = v5;
          if ( *v19 )
          {
            *v18 = (char *)v15;
            return 0;
          }
        }
      }
      else
      {
        v17 = 27;
      }
    }
  }
  if ( v10 != -1 )
  {
    close(v10);
    unlink(v15);
  }
  Curl_cfree(v15);
  *v18 = 0;
  return v17;
}
