CURLcode __fastcall Curl_fopen(Curl_easy *data, const char *filename, FILE **fh, char **tempname)
{
  FILE *v6; // rax
  char *v7; // rbx
  CURLcode v8; // ebp
  const char *v9; // rax
  int v10; // eax
  int v11; // ebp
  FILE *v12; // rax
  stat sb; // [rsp+8h] [rbp-170h] BYREF
  stat nsb; // [rsp+98h] [rbp-E0h] BYREF
  unsigned __int8 randsuffix[9]; // [rsp+12Fh] [rbp-49h] BYREF
  unsigned __int64 v17; // [rsp+138h] [rbp-40h]

  v17 = __readfsqword(0x28u);
  *tempname = 0LL;
  if ( stat_0(filename, &sb) != -1 && (sb.st_mode & 0xF000) == 0x8000 )
  {
    v7 = 0LL;
    v8 = (unsigned int)Curl_rand_hex(data, randsuffix, 9LL);
    if ( v8 )
    {
LABEL_17:
      Curl_cfree(v7);
      *tempname = 0LL;
      return v8;
    }
    v9 = (const char *)curl_maprintf("%s.%s.tmp", filename, (const char *)randsuffix);
    v7 = (char *)v9;
    if ( !v9 )
    {
      v8 = CURLE_OUT_OF_MEMORY;
      goto LABEL_17;
    }
    v10 = open(v9, 193, 384LL);
    v11 = v10;
    if ( v10 != -1 )
    {
      if ( fstat(v10, &nsb) == -1 || nsb.st_uid != sb.st_uid || nsb.st_gid != sb.st_gid || fchmod(v11, sb.st_mode) != -1 )
      {
        v12 = fdopen(v11, "w");
        *fh = v12;
        if ( v12 )
        {
          *tempname = v7;
          return 0;
        }
      }
      close(v11);
      unlink(v7);
    }
LABEL_16:
    v8 = CURLE_WRITE_ERROR;
    goto LABEL_17;
  }
  v6 = fopen(filename, "w");
  *fh = v6;
  v7 = (char *)v6;
  if ( !v6 )
    goto LABEL_16;
  return 0;
}
