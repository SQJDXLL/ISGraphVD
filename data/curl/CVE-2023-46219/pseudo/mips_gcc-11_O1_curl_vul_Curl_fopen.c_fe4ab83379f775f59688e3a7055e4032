int __fastcall Curl_fopen(Curl_easy *data, const char *filename, FILE **fh, char **tempname)
{
  char *v8; // $s0
  int v9; // $s3
  int v11; // $v0
  int v12; // $v0
  int v13; // $s4
  CURLcode (*v14)(Curl_easy *, const char *, FILE **, char **); // $a1
  FILE *v15; // $v0
  int v16; // $v0
  stat sb; // [sp+18h] [-150h] BYREF
  stat nsb; // [sp+B8h] [-B0h] BYREF
  unsigned __int8 randsuffix[9]; // [sp+158h] [-10h] BYREF

  *tempname = 0;
  if ( stat64(filename, &sb) != -1 && (sb.st_mode & 0xF000) == 0x8000 )
  {
    v9 = Curl_rand_hex(data, randsuffix, 9);
    if ( v9 )
    {
      v8 = 0;
      goto LABEL_8;
    }
    v11 = curl_maprintf("%s.%s.tmp", filename, randsuffix);
    v8 = (char *)v11;
    if ( !v11 )
    {
      v9 = 27;
      goto LABEL_8;
    }
    v12 = open64(v11, 1281, 384);
    v13 = v12;
    if ( v12 == -1 )
    {
      v9 = 23;
      goto LABEL_8;
    }
    if ( fstat64(v12, &nsb) != -1 && nsb.st_uid == sb.st_uid )
    {
      v14 = Curl_fopen;
      if ( nsb.st_gid == sb.st_gid )
      {
        v16 = fchmod(v13, sb.st_mode);
        v14 = (CURLcode (*)(Curl_easy *, const char *, FILE **, char **))MEMORY[0x82C8];
        if ( v16 == -1 )
        {
LABEL_18:
          close(v13);
          unlink(v8);
          v9 = 23;
          goto LABEL_8;
        }
      }
    }
    else
    {
      v14 = Curl_fopen;
    }
    v15 = fdopen(v13, (const char *)v14 + (__int16)&_LC0);
    *fh = v15;
    if ( v15 )
    {
      *tempname = v8;
      return v9;
    }
    goto LABEL_18;
  }
  v8 = (char *)fopen64(filename, MEMORY[0x82C8] + (__int16)&_LC0);
  *fh = (FILE *)v8;
  v9 = 0;
  if ( !v8 )
  {
    v9 = 23;
LABEL_8:
    Curl_cfree(v8);
    *tempname = 0;
  }
  return v9;
}
