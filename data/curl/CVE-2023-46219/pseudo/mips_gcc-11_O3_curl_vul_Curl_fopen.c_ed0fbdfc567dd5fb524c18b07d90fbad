int __fastcall Curl_fopen(Curl_easy *data, const char *filename, FILE **fh, char **tempname)
{
  int v4; // $v0
  char *v9; // $s0
  int v10; // $s3
  int v12; // $v0
  int v13; // $v0
  int v14; // $v0
  int v15; // $a0
  CURLcode (*v16)(Curl_easy *, const char *, FILE **, char **); // $a1
  FILE *v17; // $v0
  int v18; // $v0
  int fd; // [sp+1Ch] [-154h]
  int fda; // [sp+1Ch] [-154h]
  stat sb; // [sp+20h] [-150h] BYREF
  stat nsb; // [sp+C0h] [-B0h] BYREF
  unsigned __int8 randsuffix[9]; // [sp+160h] [-10h] BYREF
  int v24; // [sp+16Ch] [-4h]

  v4 = _stack_chk_guard;
  *tempname = 0;
  v24 = v4;
  if ( stat64(filename, &sb) != -1 && (sb.st_mode & 0xF000) == 0x8000 )
  {
    v10 = Curl_rand_hex(data, randsuffix, 9);
    if ( v10 )
    {
      v9 = 0;
LABEL_14:
      Curl_cfree(v9);
      *tempname = 0;
      return v10;
    }
    v12 = curl_maprintf("%s.%s.tmp", filename, randsuffix);
    v9 = (char *)v12;
    if ( !v12 )
    {
      v10 = 27;
      goto LABEL_14;
    }
    v13 = open64(v12, 1281, 384);
    if ( v13 == -1 )
    {
LABEL_15:
      v10 = 23;
      goto LABEL_14;
    }
    fd = v13;
    v14 = fstat64(v13, &nsb);
    v15 = fd;
    if ( v14 != -1 && nsb.st_uid == sb.st_uid )
    {
      v16 = Curl_fopen;
      if ( nsb.st_gid != sb.st_gid )
      {
LABEL_11:
        fda = v15;
        v17 = fdopen(v15, (const char *)v16 + (__int16)&_LC0);
        v15 = fda;
        *fh = v17;
        if ( v17 )
        {
          *tempname = v9;
          return v10;
        }
        goto LABEL_18;
      }
      v18 = fchmod(fd, sb.st_mode);
      v15 = fd;
      if ( v18 == -1 )
      {
LABEL_18:
        v10 = 23;
        close(v15);
        unlink(v9);
        goto LABEL_14;
      }
    }
    v16 = (CURLcode (*)(Curl_easy *, const char *, FILE **, char **))MEMORY[0x8298];
    goto LABEL_11;
  }
  v9 = (char *)fopen64(filename, &_LC0);
  v10 = 0;
  *fh = (FILE *)v9;
  if ( !v9 )
    goto LABEL_15;
  return v10;
}
