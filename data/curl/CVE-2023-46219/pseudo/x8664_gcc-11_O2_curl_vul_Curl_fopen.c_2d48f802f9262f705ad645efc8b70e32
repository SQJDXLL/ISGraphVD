CURLcode __fastcall Curl_fopen(Curl_easy *data, const char *filename, FILE **fh, char **tempname)
{
  FILE *v6; // rax
  char *v7; // rbp
  CURLcode v8; // r14d
  const char *v10; // rax
  int v11; // eax
  int v12; // r13d
  FILE *v13; // rax
  stat sb; // [rsp+0h] [rbp-178h] BYREF
  stat nsb; // [rsp+90h] [rbp-E8h] BYREF
  unsigned __int8 randsuffix[9]; // [rsp+12Fh] [rbp-49h] BYREF
  unsigned __int64 v17; // [rsp+138h] [rbp-40h]

  v17 = __readfsqword(0x28u);
  *tempname = 0LL;
  if ( stat_0(filename, &sb) != -1 && (sb.st_mode & 0xF000) == 0x8000 )
  {
    v7 = 0LL;
    v8 = (unsigned int)Curl_rand_hex(data, randsuffix, 9LL);
    if ( v8 == CURLE_OK )
    {
      v10 = (const char *)curl_maprintf("%s.%s.tmp", filename, (const char *)randsuffix);
      v7 = (char *)v10;
      if ( !v10 )
      {
        v8 = CURLE_OUT_OF_MEMORY;
        goto LABEL_16;
      }
      v11 = open(v10, 193, 384LL);
      v12 = v11;
      if ( v11 == -1 )
        goto LABEL_17;
      if ( fstat(v11, &nsb) == -1 || nsb.st_uid != sb.st_uid || nsb.st_gid != sb.st_gid || fchmod(v12, sb.st_mode) != -1 )
      {
        v13 = fdopen(v12, "w");
        *fh = v13;
        if ( v13 )
        {
          *tempname = v7;
          return v8;
        }
      }
      v8 = CURLE_WRITE_ERROR;
      close(v12);
      unlink(v7);
    }
LABEL_16:
    Curl_cfree(v7);
    *tempname = 0LL;
    return v8;
  }
  v6 = fopen(filename, "w");
  *fh = v6;
  v7 = (char *)v6;
  if ( !v6 )
  {
LABEL_17:
    v8 = CURLE_WRITE_ERROR;
    goto LABEL_16;
  }
  return 0;
}
