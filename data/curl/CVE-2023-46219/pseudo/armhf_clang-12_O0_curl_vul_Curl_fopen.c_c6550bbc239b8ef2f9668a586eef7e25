CURLcode __cdecl Curl_fopen(Curl_easy *data, const char *filename, FILE **fh, char **tempname)
{
  FILE *v4; // r0
  FILE *v5; // r0
  _DWORD v7[27]; // [sp+0h] [bp-108h] BYREF
  int fd; // [sp+6Ch] [bp-9Ch]
  char v9[16]; // [sp+70h] [bp-98h] BYREF
  __mode_t mode; // [sp+80h] [bp-88h]
  int v11; // [sp+88h] [bp-80h]
  int v12; // [sp+8Ch] [bp-7Ch]
  char *tempstore; // [sp+D8h] [bp-30h]
  unsigned __int8 randsuffix[9]; // [sp+DFh] [bp-29h] BYREF
  CURLcode result; // [sp+E8h] [bp-20h]
  char **tempnamea; // [sp+ECh] [bp-1Ch]
  FILE **fha; // [sp+F0h] [bp-18h]
  const char *filenamea; // [sp+F4h] [bp-14h]
  Curl_easy *dataa; // [sp+F8h] [bp-10h]

  dataa = data;
  filenamea = filename;
  fha = fh;
  tempnamea = tempname;
  result = CURLE_WRITE_ERROR;
  tempstore = 0;
  fd = -1;
  *tempname = 0;
  if ( stat64(filenamea, v9) != -1 && (mode & 0xF000) == 0x8000 )
  {
    result = Curl_rand_hex(dataa, randsuffix, 9);
    if ( result == CURLE_OK )
    {
      tempstore = (char *)curl_maprintf("%s.%s.tmp", filenamea, (const char *)randsuffix);
      if ( tempstore )
      {
        result = CURLE_WRITE_ERROR;
        fd = open64(tempstore, 193, 384);
        if ( fd != -1 && (fstat64(fd, v7) == -1 || v7[6] != v11 || v7[7] != v12 || fchmod(fd, mode) != -1) )
        {
          v5 = fdopen(fd, "w");
          *fha = v5;
          if ( *fha )
          {
            *tempnamea = tempstore;
            return 0;
          }
        }
      }
      else
      {
        result = CURLE_OUT_OF_MEMORY;
      }
    }
  }
  else
  {
    v4 = (FILE *)fopen64(filenamea, "w");
    *fha = v4;
    if ( *fha )
      return 0;
  }
  if ( fd != -1 )
  {
    close(fd);
    unlink(tempstore);
  }
  ((void (__fastcall *)(char *))*Curl_cfree)(tempstore);
  *tempnamea = 0;
  return result;
}
