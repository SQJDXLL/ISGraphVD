CURLcode __cdecl Curl_fopen(Curl_easy *data, const char *filename, FILE **fh, char **tempname)
{
  FILE *v4; // rax
  FILE *v5; // rax
  stat nsb; // [rsp+8h] [rbp-168h] BYREF
  int fd; // [rsp+9Ch] [rbp-D4h]
  stat sb; // [rsp+A0h] [rbp-D0h] BYREF
  char *tempstore; // [rsp+130h] [rbp-40h]
  unsigned __int8 randsuffix[9]; // [rsp+13Bh] [rbp-35h] BYREF
  CURLcode result; // [rsp+144h] [rbp-2Ch]
  char **tempnamea; // [rsp+148h] [rbp-28h]
  FILE **fha; // [rsp+150h] [rbp-20h]
  const char *filenamea; // [rsp+158h] [rbp-18h]
  Curl_easy *dataa; // [rsp+160h] [rbp-10h]

  dataa = data;
  filenamea = filename;
  fha = fh;
  tempnamea = tempname;
  result = CURLE_WRITE_ERROR;
  tempstore = 0LL;
  fd = -1;
  *tempname = 0LL;
  if ( stat_0(filenamea, &sb) != -1 && (sb.st_mode & 0xF000) == 0x8000 )
  {
    result = (unsigned int)Curl_rand_hex(dataa, randsuffix, 9LL);
    if ( result == CURLE_OK )
    {
      tempstore = (char *)curl_maprintf("%s.%s.tmp", filenamea, (const char *)randsuffix);
      if ( tempstore )
      {
        result = CURLE_WRITE_ERROR;
        fd = open(tempstore, 193, 384LL);
        if ( fd != -1
          && (fstat(fd, &nsb) == -1 || nsb.st_uid != sb.st_uid
                                    || nsb.st_gid != sb.st_gid
                                    || fchmod(fd, sb.st_mode) != -1) )
        {
          v5 = fdopen(fd, "w");
          *fha = v5;
          if ( *fha )
          {
            *tempnamea = tempstore;
            return 0;
          }
        }
      }
      else
      {
        result = CURLE_OUT_OF_MEMORY;
      }
    }
  }
  else
  {
    v4 = fopen(filenamea, "w");
    *fha = v4;
    if ( *fha )
      return 0;
  }
  if ( fd != -1 )
  {
    close(fd);
    unlink(tempstore);
  }
  Curl_cfree(tempstore);
  *tempnamea = 0LL;
  return result;
}
