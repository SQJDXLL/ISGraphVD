CURLcode __fastcall Curl_fopen(Curl_easy *data, const char *filename, FILE **fh, char **tempname)
{
  FILE *v6; // rax
  char *v7; // rbx
  int v9; // eax
  const char *v10; // rax
  int v11; // eax
  int v12; // ebp
  FILE *v13; // rax
  CURLcode v14; // [rsp+Ch] [rbp-16Ch]
  stat sb; // [rsp+10h] [rbp-168h] BYREF
  stat nsb; // [rsp+A0h] [rbp-D8h] BYREF
  unsigned __int8 randsuffix[9]; // [rsp+13Fh] [rbp-39h] BYREF
  unsigned __int64 v18; // [rsp+148h] [rbp-30h]

  v18 = __readfsqword(0x28u);
  *tempname = 0LL;
  if ( stat_0(filename, &sb) == -1 || (sb.st_mode & 0xF000) != 0x8000 )
  {
    v6 = fopen(filename, "w");
    *fh = v6;
    v7 = (char *)v6;
    if ( v6 )
      return 0;
LABEL_16:
    v9 = 23;
    goto LABEL_15;
  }
  v7 = 0LL;
  v9 = Curl_rand_hex(data, randsuffix, 9LL);
  if ( !v9 )
  {
    v10 = (const char *)curl_maprintf("%s.%s.tmp", filename, (const char *)randsuffix);
    v7 = (char *)v10;
    if ( !v10 )
    {
      v9 = 27;
      goto LABEL_15;
    }
    v11 = open(v10, 193, 384LL);
    v12 = v11;
    if ( v11 == -1 )
      goto LABEL_16;
    if ( fstat(v11, &nsb) == -1 || nsb.st_uid != sb.st_uid || nsb.st_gid != sb.st_gid || fchmod(v12, sb.st_mode) != -1 )
    {
      v13 = fdopen(v12, "w");
      *fh = v13;
      if ( v13 )
      {
        *tempname = v7;
        return 0;
      }
    }
    close(v12);
    unlink(v7);
    v9 = 23;
  }
LABEL_15:
  v14 = v9;
  Curl_cfree(v7);
  *tempname = 0LL;
  return v14;
}
