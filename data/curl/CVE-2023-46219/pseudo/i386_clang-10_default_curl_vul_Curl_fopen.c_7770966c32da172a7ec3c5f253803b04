CURLcode __cdecl Curl_fopen(Curl_easy *data, const char *filename, FILE **fh, const char **tempname)
{
  __mode_t v4; // ebp
  int v5; // eax
  const char *v6; // esi
  CURLcode v7; // edi
  FILE *v8; // ecx
  CURLcode result; // eax
  int v10; // eax
  int v11; // eax
  int v12; // ebp
  FILE *v13; // ecx
  int v14; // [esp+8h] [ebp-E4h]
  char v15[9]; // [esp+Fh] [ebp-DDh] BYREF
  char v16[16]; // [esp+18h] [ebp-D4h] BYREF
  __mode_t mode; // [esp+28h] [ebp-C4h]
  int v18; // [esp+30h] [ebp-BCh]
  int v19; // [esp+34h] [ebp-B8h]
  char v20[24]; // [esp+78h] [ebp-74h] BYREF
  int v21; // [esp+90h] [ebp-5Ch]
  int v22; // [esp+94h] [ebp-58h]

  *tempname = 0;
  if ( stat64(filename, v16) == -1 || (v4 = mode, (mode & 0xF000) != 0x8000) )
  {
    v8 = (FILE *)fopen64(filename, "w");
    *fh = v8;
    result = CURLE_OK;
    if ( v8 )
      return result;
    v7 = CURLE_WRITE_ERROR;
    goto LABEL_7;
  }
  v5 = Curl_rand_hex(data, v15, 9);
  v6 = 0;
  if ( v5 )
  {
    v7 = v5;
    goto LABEL_8;
  }
  v10 = curl_maprintf("%s.%s.tmp", filename, v15);
  if ( !v10 )
  {
    v7 = CURLE_OUT_OF_MEMORY;
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  v6 = (const char *)v10;
  v11 = open64(v10, 193, 384);
  v7 = CURLE_WRITE_ERROR;
  if ( v11 != -1 )
  {
    v14 = v11;
    if ( fstat64(v11, v20) != -1 && v21 == v18 && v22 == v19 && fchmod(v14, v4) == -1 )
    {
      v12 = v14;
    }
    else
    {
      v12 = v14;
      v13 = fdopen(v14, "w");
      *fh = v13;
      result = CURLE_OK;
      if ( v13 )
        goto LABEL_9;
    }
    close(v12);
    unlink(v6);
  }
LABEL_8:
  Curl_cfree(v6);
  v6 = 0;
  result = v7;
LABEL_9:
  *tempname = v6;
  return result;
}
