CURLcode __cdecl Curl_fopen(Curl_easy *data, const char *filename, FILE **fh, char **tempname)
{
  int v4; // r0
  FILE *v5; // r0
  void (__fastcall **v7)(char *); // [sp+4h] [bp-13Ch]
  char v8[24]; // [sp+18h] [bp-128h] BYREF
  int v9; // [sp+30h] [bp-110h]
  int v10; // [sp+34h] [bp-10Ch]
  char *v11; // [sp+80h] [bp-C0h]
  int fd; // [sp+84h] [bp-BCh]
  char v13[16]; // [sp+88h] [bp-B8h] BYREF
  __mode_t mode; // [sp+98h] [bp-A8h]
  int v15; // [sp+A0h] [bp-A0h]
  int v16; // [sp+A4h] [bp-9Ch]
  char *tempstore; // [sp+F0h] [bp-50h]
  unsigned __int8 randbuf[41]; // [sp+F7h] [bp-49h] BYREF
  CURLcode result; // [sp+120h] [bp-20h]
  char **tempnamea; // [sp+124h] [bp-1Ch]
  FILE **fha; // [sp+128h] [bp-18h]
  const char *filenamea; // [sp+12Ch] [bp-14h]
  Curl_easy *dataa; // [sp+130h] [bp-10h]

  dataa = data;
  filenamea = filename;
  fha = fh;
  tempnamea = tempname;
  result = CURLE_WRITE_ERROR;
  tempstore = 0;
  fd = -1;
  *tempname = 0;
  v11 = dirslash(filenamea);
  if ( v11 )
  {
    *fha = (FILE *)fopen64(filenamea, "w");
    if ( *fha )
    {
      v4 = fileno(*fha);
      if ( fstat64(v4, v13) == -1 || (mode & 0xF000) != 0x8000 )
      {
        ((void (__fastcall *)(char *))*Curl_cfree)(v11);
        return 0;
      }
      fclose(*fha);
      *fha = 0;
      result = Curl_rand_alnum(dataa, randbuf, 41);
      if ( result == CURLE_OK )
      {
        tempstore = (char *)curl_maprintf("%s%s.tmp", v11, (const char *)randbuf);
        if ( tempstore )
        {
          result = CURLE_WRITE_ERROR;
          fd = open64(tempstore, 193, 384);
          if ( fd != -1 && (fstat64(fd, v8) == -1 || v9 != v15 || v10 != v16 || fchmod(fd, mode) != -1) )
          {
            v5 = fdopen(fd, "w");
            *fha = v5;
            if ( *fha )
            {
              ((void (__fastcall *)(char *))*Curl_cfree)(v11);
              *tempnamea = tempstore;
              return 0;
            }
          }
        }
        else
        {
          result = CURLE_OUT_OF_MEMORY;
        }
      }
    }
  }
  if ( fd != -1 )
  {
    close(fd);
    unlink(tempstore);
  }
  v7 = (void (__fastcall **)(char *))Curl_cfree;
  ((void (__fastcall *)(char *))*Curl_cfree)(tempstore);
  (*v7)(v11);
  return result;
}
