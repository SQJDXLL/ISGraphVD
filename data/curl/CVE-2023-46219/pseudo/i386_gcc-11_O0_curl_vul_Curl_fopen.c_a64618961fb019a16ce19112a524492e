CURLcode __cdecl Curl_fopen(Curl_easy *data, const char *filename, FILE **fh, char **tempname)
{
  int result; // [esp+14h] [ebp-E4h]
  char *tempstore; // [esp+18h] [ebp-E0h]
  int fd; // [esp+1Ch] [ebp-DCh]
  stat sb; // [esp+20h] [ebp-D8h] BYREF
  stat nsb; // [esp+80h] [ebp-78h] BYREF
  unsigned __int8 randsuffix[9]; // [esp+E3h] [ebp-15h] BYREF
  unsigned int v11; // [esp+ECh] [ebp-Ch]

  v11 = __readgsdword(0x14u);
  result = 23;
  tempstore = 0;
  fd = -1;
  *tempname = 0;
  if ( stat64(filename, &sb) != -1 && (sb.st_mode & 0xF000) == 0x8000 )
  {
    result = Curl_rand_hex(data, randsuffix, 9);
    if ( !result )
    {
      tempstore = (char *)curl_maprintf("%s.%s.tmp", filename, randsuffix);
      if ( tempstore )
      {
        result = 23;
        fd = open64(tempstore, 193, 384);
        if ( fd != -1
          && (fstat64(fd, &nsb) == -1
           || nsb.st_uid != sb.st_uid
           || nsb.st_gid != sb.st_gid
           || fchmod(fd, sb.st_mode) != -1) )
        {
          *fh = fdopen(fd, "w");
          if ( *fh )
          {
            *tempname = tempstore;
            return 0;
          }
        }
      }
      else
      {
        result = 27;
      }
    }
  }
  else
  {
    *fh = (FILE *)fopen64(filename, "w");
    if ( *fh )
      return 0;
  }
  if ( fd != -1 )
  {
    close(fd);
    unlink(tempstore);
  }
  Curl_cfree(tempstore);
  *tempname = 0;
  return result;
}
