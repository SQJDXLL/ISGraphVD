CURLcode __fastcall Curl_fopen(Curl_easy *data, const char *filename, FILE **fh, char **tempname)
{
  char *v8; // r4
  CURLcode v9; // r7
  int v11; // r0
  int v12; // r0
  int v13; // r9
  FILE *v14; // r0
  stat sb; // [sp+0h] [bp-100h] BYREF
  stat nsb; // [sp+68h] [bp-98h] BYREF
  unsigned __int8 randsuffix[9]; // [sp+D0h] [bp-30h] BYREF

  *tempname = 0;
  if ( stat64(filename, &sb) != -1 && (sb.st_mode & 0xF000) == 0x8000 )
  {
    v9 = Curl_rand_hex(data, randsuffix, 9);
    if ( v9 )
    {
      v8 = 0;
    }
    else
    {
      v11 = curl_maprintf("%s.%s.tmp", filename, (const char *)randsuffix);
      v8 = (char *)v11;
      if ( v11 )
      {
        v12 = open64(v11, 193, 384);
        v13 = v12;
        if ( v12 == -1 )
        {
          v9 = CURLE_WRITE_ERROR;
        }
        else
        {
          if ( fstat64(v12, &nsb) == -1
            || nsb.st_uid != sb.st_uid
            || nsb.st_gid != sb.st_gid
            || fchmod(v13, sb.st_mode) != -1 )
          {
            v14 = fdopen(v13, "w");
            *fh = v14;
            if ( v14 )
            {
              *tempname = v8;
              return v9;
            }
          }
          close(v13);
          unlink(v8);
          v9 = CURLE_WRITE_ERROR;
        }
      }
      else
      {
        v9 = CURLE_OUT_OF_MEMORY;
      }
    }
    goto LABEL_10;
  }
  v8 = (char *)fopen64(filename, "w");
  *fh = (FILE *)v8;
  if ( !v8 )
  {
    v9 = CURLE_WRITE_ERROR;
LABEL_10:
    Curl_cfree(v8);
    *tempname = 0;
    return v9;
  }
  return 0;
}
