CURLcode __fastcall Curl_fopen(Curl_easy *data, const char *filename, FILE **fh, char **tempname)
{
  __mode_t st_mode; // r12d
  CURLcode v7; // eax
  CURLcode v8; // ebp
  FILE *v9; // rcx
  CURLcode result; // eax
  char *v11; // rbx
  const char *v12; // rax
  int v13; // eax
  int v14; // r13d
  FILE *v15; // rcx
  char v16[9]; // [rsp+Fh] [rbp-159h] BYREF
  struct stat buf; // [rsp+18h] [rbp-150h] BYREF
  struct stat v18; // [rsp+A8h] [rbp-C0h] BYREF

  *tempname = 0LL;
  if ( stat_0(filename, &buf) == -1 || (st_mode = buf.st_mode, (buf.st_mode & 0xF000) != 0x8000) )
  {
    v9 = fopen(filename, "w");
    *fh = v9;
    result = CURLE_OK;
    if ( v9 )
      return result;
    v8 = CURLE_WRITE_ERROR;
    goto LABEL_7;
  }
  v7 = (unsigned int)Curl_rand_hex(data, v16, 9LL);
  if ( v7 )
  {
    v8 = v7;
LABEL_7:
    v11 = 0LL;
    goto LABEL_8;
  }
  v12 = (const char *)curl_maprintf("%s.%s.tmp", filename, v16);
  if ( !v12 )
  {
    v8 = CURLE_OUT_OF_MEMORY;
    goto LABEL_7;
  }
  v11 = (char *)v12;
  v13 = open(v12, 193, 384LL);
  v8 = CURLE_WRITE_ERROR;
  if ( v13 != -1 )
  {
    v14 = v13;
    if ( fstat(v13, &v18) == -1 || v18.st_uid != buf.st_uid || v18.st_gid != buf.st_gid || fchmod(v14, st_mode) != -1 )
    {
      v15 = fdopen(v14, "w");
      *fh = v15;
      result = CURLE_OK;
      if ( v15 )
        goto LABEL_9;
    }
    close(v14);
    unlink(v11);
  }
LABEL_8:
  Curl_cfree(v11);
  v11 = 0LL;
  result = v8;
LABEL_9:
  *tempname = v11;
  return result;
}
