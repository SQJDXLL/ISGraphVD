CURLcode __fastcall Curl_fopen(Curl_easy *data, const char *filename, FILE **fh, char **tempname)
{
  char *v8; // r5
  __mode_t v9; // r4
  int v10; // r0
  int v11; // r7
  CURLcode v12; // r8
  FILE *v13; // r0
  CURLcode result; // r0
  int v15; // r0
  int v16; // r0
  FILE *v17; // r1
  _DWORD v18[26]; // [sp+0h] [bp-100h] BYREF
  char v19[16]; // [sp+68h] [bp-98h] BYREF
  __mode_t v20; // [sp+78h] [bp-88h]
  int v21; // [sp+80h] [bp-80h]
  int v22; // [sp+84h] [bp-7Ch]
  unsigned __int8 randsuffix[9]; // [sp+D7h] [bp-29h] BYREF

  v8 = 0;
  *tempname = 0;
  if ( stat64(filename, v19) == -1 || (v9 = v20, (v20 & 0xF000) != 0x8000) )
  {
    v13 = (FILE *)fopen64(filename, "w");
    *fh = v13;
    if ( v13 )
      return 0;
    v11 = -1;
    v12 = CURLE_WRITE_ERROR;
  }
  else
  {
    v10 = Curl_rand_hex(data, randsuffix, 9);
    v11 = -1;
    v8 = 0;
    if ( v10 )
    {
      v12 = v10;
    }
    else
    {
      v15 = curl_maprintf("%s.%s.tmp", filename, (const char *)randsuffix);
      if ( v15 )
      {
        v8 = (char *)v15;
        v16 = open64(v15, 193, 384);
        v12 = CURLE_WRITE_ERROR;
        if ( v16 != -1 )
        {
          v11 = v16;
          if ( fstat64(v16, v18) == -1 || v18[6] != v21 || v18[7] != v22 || fchmod(v11, v9) != -1 )
          {
            v17 = fdopen(v11, "w");
            *fh = v17;
            result = CURLE_OK;
            if ( v17 )
              goto LABEL_21;
          }
          goto fail;
        }
      }
      else
      {
        v12 = CURLE_OUT_OF_MEMORY;
        v8 = 0;
      }
      v11 = -1;
    }
  }
fail:
  if ( v11 != -1 )
  {
    close(v11);
    unlink(v8);
  }
  ((void (__fastcall *)(char *))*Curl_cfree)(v8);
  v8 = 0;
  result = v12;
LABEL_21:
  *tempname = v8;
  return result;
}
