CURLcode __fastcall Curl_fopen(Curl_easy *data, const char *filename, FILE **fh, char **tempname)
{
  int v8; // $s2
  __mode_t v9; // $s6
  int v10; // $v0
  char *v11; // $s3
  CURLcode v12; // $s5
  FILE *v13; // $v0
  CURLcode result; // $v0
  int v15; // $v0
  int v16; // $v0
  FILE *v17; // $v0
  bool v18; // dc
  char v19[32]; // [sp+10h] [-14Ch] BYREF
  int v20; // [sp+30h] [-12Ch]
  int v21; // [sp+34h] [-128h]
  char v22[24]; // [sp+B0h] [-ACh] BYREF
  __mode_t v23; // [sp+C8h] [-94h]
  int v24; // [sp+D0h] [-8Ch]
  int v25; // [sp+D4h] [-88h]
  char v26[12]; // [sp+150h] [-Ch] BYREF

  *tempname = 0;
  v8 = -1;
  if ( stat64(filename, v22) == -1 || (v9 = v23, (v23 & 0xF000) != 0x8000) )
  {
    v13 = (FILE *)fopen64(filename, "w");
    *fh = v13;
    v11 = 0;
    if ( v13 )
      return 0;
    v12 = CURLE_WRITE_ERROR;
  }
  else
  {
    v10 = Curl_rand_hex(data, v26, 9);
    v8 = -1;
    v11 = 0;
    if ( v10 )
    {
      v12 = v10;
    }
    else
    {
      v15 = curl_maprintf("%s.%s.tmp", filename, v26);
      if ( v15 )
      {
        v11 = (char *)v15;
        v16 = open64(v15, 1281, 384);
        v12 = CURLE_WRITE_ERROR;
        if ( v16 == -1 )
        {
          v8 = -1;
        }
        else
        {
          v8 = v16;
          if ( fstat64(v16, v19) == -1 || v20 != v24 || v21 != v25 || fchmod(v8, v9) != -1 )
          {
            v17 = fdopen(v8, "w");
            *fh = v17;
            v18 = v17 != 0;
            result = CURLE_OK;
            if ( v18 )
              goto LABEL_11;
          }
        }
      }
      else
      {
        v12 = CURLE_OUT_OF_MEMORY;
        v11 = 0;
      }
    }
  }
  if ( v8 != -1 )
  {
    close(v8);
    unlink(v11);
  }
  Curl_cfree(v11);
  v11 = 0;
  result = v12;
LABEL_11:
  *tempname = v11;
  return result;
}
