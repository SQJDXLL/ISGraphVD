CURLcode __fastcall Curl_fopen(Curl_easy *data, const char *filename, FILE **fh, char **tempname)
{
  int v4; // $v0
  FILE *v9; // $s0
  CURLcode result; // $v0
  int v11; // $v0
  int v12; // $v0
  int v13; // $v0
  int v14; // $s3
  CURLcode (*v15)(Curl_easy *, const char *, FILE **, char **); // $a1
  FILE *v16; // $v0
  CURLcode v17; // [sp+1Ch] [-154h]
  stat sb; // [sp+20h] [-150h] BYREF
  stat nsb; // [sp+C0h] [-B0h] BYREF
  unsigned __int8 randsuffix[9]; // [sp+160h] [-10h] BYREF
  int v21; // [sp+16Ch] [-4h]

  v4 = _stack_chk_guard;
  *tempname = 0;
  v21 = v4;
  if ( stat64(filename, &sb) == -1 || (sb.st_mode & 0xF000) != 0x8000 )
  {
    v9 = (FILE *)fopen64(filename, &_LC0);
    *fh = v9;
    if ( v9 )
      return 0;
LABEL_16:
    v11 = 23;
    goto LABEL_14;
  }
  v11 = Curl_rand_hex(data, randsuffix, 9);
  if ( !v11 )
  {
    v12 = curl_maprintf("%s.%s.tmp", filename, randsuffix);
    v9 = (FILE *)v12;
    if ( !v12 )
    {
      v11 = 27;
      goto LABEL_14;
    }
    v13 = open64(v12, 1281, 384);
    v14 = v13;
    if ( v13 == -1 )
      goto LABEL_16;
    if ( fstat64(v13, &nsb) != -1 && nsb.st_uid == sb.st_uid )
    {
      v15 = Curl_fopen;
      if ( nsb.st_gid != sb.st_gid )
      {
LABEL_11:
        v16 = fdopen(v14, (const char *)v15 + (__int16)&_LC0);
        *fh = v16;
        if ( v16 )
        {
          *tempname = (char *)v9;
          return 0;
        }
        goto LABEL_19;
      }
      if ( fchmod(v14, sb.st_mode) == -1 )
      {
LABEL_19:
        close(v14);
        unlink((const char *)v9);
        v11 = 23;
        goto LABEL_14;
      }
    }
    v15 = (CURLcode (*)(Curl_easy *, const char *, FILE **, char **))MEMORY[0x8298];
    goto LABEL_11;
  }
  v9 = 0;
LABEL_14:
  v17 = v11;
  Curl_cfree(v9);
  result = v17;
  *tempname = 0;
  return result;
}
