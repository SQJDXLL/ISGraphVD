Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        int a5,
        int a6,
        int badcookie_0a,
        int noexpireb,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  time_t v13; // $v0
  char *v14; // $s6
  bool v15; // dc
  Cookie *v16; // $s0
  int v17; // $s2
  size_t v18; // $s7
  int v19; // $v0
  void (*v20)(Cookie *); // $t9
  const char *v21; // $s1
  unsigned __int8 prefix; // $v0
  int v23; // $v0
  CookieInfo *v24; // $v0
  char *v25; // $v1
  void (*v26)(Cookie *); // $t9
  bool running; // $v1
  CookieInfo *v28; // $a0
  int lastct; // $v0
  size_t v30; // $v0
  Cookie **v31; // $s5
  Cookie *v32; // $fp
  int livecookie; // $s3
  Cookie *v34; // $s2
  Cookie *v35; // $s1
  char *v36; // $a0
  char *v37; // $a1
  Cookie *next; // $s7
  char *v39; // $a0
  char *v40; // $a1
  int creationtime; // $v0
  Cookie *v42; // $a1
  void (__fastcall *v43)(char *); // $t9
  char *v44; // $a0
  void (*v45)(Cookie *); // $a2
  Cookie *v46; // $v0
  Cookie *v47; // $a0
  Cookie *v48; // $t1
  char *v49; // $t0
  char *v50; // $a3
  char *v51; // $a1
  const char *v52; // $a2
  char *v53; // $v0
  char *v54; // $v0
  int v55; // $a2
  unsigned int v56; // $a1
  int v57; // $v0
  size_t v58; // $fp
  _BYTE *v59; // $s5
  size_t v60; // $v0
  char *v61; // $s1
  char *v62; // $v0
  int v63; // $v0
  void (*v64)(Cookie *); // $t9
  _BOOL4 v65; // $v0
  void (*v66)(Cookie *); // $t3
  int v67; // $v0
  curl_off_t expires; // $v0
  time_t v69; // $a2
  int v70; // $a0
  time_t v71; // $a0
  unsigned int v72; // $a0
  int v73; // $v0
  unsigned int v74; // $v0
  _BYTE *v76; // $v0
  const char *v77; // $v0
  int is_ipnum; // $s2
  const char *v79; // $s6
  int v80; // $v0
  void (*v81)(Cookie *); // $a2
  int v82; // $v0
  const char *v83; // $s2
  char *value; // $s6
  int v85; // $v0
  char *name; // $v1
  int v87; // $v0
  char *v88; // $v0
  char *v89; // $a0
  char *v90; // $a1
  const char *spath; // $s6
  char *v92; // $s7
  char *v93; // $v0
  size_t v94; // $a2
  size_t v95; // $s7
  const char *v96; // $s6
  int v97; // $v0
  char *v98; // $a0
  char *v99; // $a1
  char *v100; // $a0
  char *v101; // $a1
  char *v102; // $a0
  char *v103; // $a1
  char *v104; // $a0
  char *v105; // $a1
  __int64 v106; // $v0
  CookieInfo *v107; // $a0
  char *v108; // $v0
  char *v109; // $v0
  const char *v110; // $s2
  int v111; // $v0
  size_t v112; // $s1
  char *v113; // $a0
  char *v114; // $v0
  int v115; // $v0
  int v116; // $v0
  char *v117; // $v1
  void *v118; // $v0
  int v119; // $v0
  char v120[4]; // [sp+30h] [-B8h] BYREF
  void (*v121)(Cookie *); // [sp+34h] [-B4h]
  CookieInfo *ca; // [sp+38h] [-B0h]
  _DWORD *v123; // [sp+3Ch] [-ACh]
  const char *v124; // [sp+40h] [-A8h]
  const char *v125; // [sp+44h] [-A4h]
  _BOOL4 v126; // [sp+48h] [-A0h]
  const char *v127; // [sp+4Ch] [-9Ch]
  time_t now; // [sp+50h] [-98h]
  const char *v129; // [sp+54h] [-94h]
  const char *v130; // [sp+58h] [-90h]
  int badcookie; // [sp+5Ch] [-8Ch]
  char *tok_buf; // [sp+60h] [-88h] BYREF
  char date[128]; // [sp+64h] [-84h] BYREF
  int v134; // [sp+E4h] [-4h]

  v125 = domain;
  v123 = &_stack_chk_guard;
  v127 = path;
  v126 = secure;
  ca = c;
  v14 = (char *)lineptr;
  v13 = time(0u);
  v15 = data->req.setcookies >= 0x32u;
  now = v13;
  if ( v15 )
    goto LABEL_122;
  v16 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v16 )
    goto LABEL_122;
  if ( !httpheader )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v14 = (char *)(lineptr + 10);
      v16->httponly = 1;
    }
    if ( *v14 != 35 )
    {
      v53 = strchr(v14, 13);
      if ( v53 )
        *v53 = 0;
      v54 = strchr(v14, 10);
      if ( v54 )
        *v54 = 0;
      if ( strtok_r(v14, "\t", &tok_buf) )
      {
        v121 = freecookie;
        if ( !v126 )
        {
          v124 = "TRUE";
          __asm { jr      $v0 }
        }
        v124 = "TRUE";
        __asm { jr      $v0 }
      }
      goto LABEL_155;
    }
LABEL_239:
    Curl_cfree(v16);
    goto LABEL_122;
  }
  if ( strlen(lineptr) >= 0x1389 )
    goto LABEL_239;
  v17 = *lineptr;
  v124 = (const char *)freecookie;
  v129 = "path";
  badcookie = 0;
  v130 = "domain";
  if ( v17 )
    goto LABEL_6;
LABEL_65:
  v18 = strcspn(v14, ";\t\r\n=");
  if ( !v18 )
  {
LABEL_12:
    v19 = badcookie;
    goto LABEL_13;
  }
  while ( 1 )
  {
    v55 = (int)&v14[v18];
    do
    {
      v56 = v18--;
      v57 = v14[v18];
      if ( v57 != 32 && v57 != 9 )
      {
        v18 = v56;
        if ( *(_BYTE *)v55 == 61 )
        {
LABEL_71:
          v59 = (_BYTE *)(v55 + 1);
          v121 = (void (*)(Cookie *))v55;
          v60 = strcspn((const char *)(v55 + 1), v124 + 0x3994);
          v58 = v60;
          v61 = &v59[v60];
          if ( v60 )
          {
            v56 = 9;
            v62 = (char *)v121 + v60;
            while ( 1 )
            {
              v63 = *v62;
              if ( v63 != 32 && v63 != 9 )
                break;
              --v58;
              v62 = (char *)v121 + v58;
              if ( !v58 )
              {
                v64 = (void (*)(Cookie *))MEMORY[0xBDC0];
                if ( v18 >= 0xFFF )
                  goto LABEL_119;
                v65 = v18 < 7;
                goto LABEL_78;
              }
            }
            v56 = 9;
            while ( 1 )
            {
              v73 = (char)*v59;
              if ( v73 != 32 && v73 != 9 )
                break;
              --v58;
              ++v59;
              if ( !v58 )
              {
                v64 = (void (*)(Cookie *))MEMORY[0xBDC0];
                if ( v18 < 0xFFF )
                {
                  v74 = v18;
                  goto LABEL_117;
                }
LABEL_119:
                ((void (__fastcall *)(Cookie *, unsigned int))((char *)v64 + (__int16)freecookie))(v16, v56);
LABEL_120:
                if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x100000) != 0 )
                  Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v18, v58);
                goto LABEL_122;
              }
            }
            if ( memchr(v59, 9, v58) )
            {
              freecookie(v16);
              if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x100000) != 0 )
                Curl_infof(data, "cookie contains TAB, dropping");
              goto LABEL_122;
            }
            if ( v18 < 0xFFF )
            {
              v74 = v58 + v18;
              if ( v58 >= 0xFFF )
              {
                ((void (__fastcall *)(Cookie *, unsigned int))(MEMORY[0xBDC0] + (__int16)freecookie))(v16, v56);
                goto LABEL_120;
              }
LABEL_117:
              v15 = v74 < 0x1001;
              v65 = v18 < 7;
              if ( v15 )
              {
LABEL_78:
                v66 = (void (*)(Cookie *))httpheader;
                if ( !v65 )
                {
LABEL_90:
                  if ( v17 == 95 && v14[1] == 95 )
                  {
                    v121 = v66;
                    v85 = curl_strnequal("__Secure-", v14, 9);
                    v66 = v121;
                    if ( v85 )
                    {
                      name = v16->name;
                      v16->prefix |= 1u;
                      if ( !name )
                        goto LABEL_144;
                      goto LABEL_92;
                    }
                    v116 = curl_strnequal("__Host-", v14, 7);
                    v66 = v121;
                    if ( v116 )
                    {
                      v117 = v16->name;
                      v16->prefix |= 2u;
                      if ( !v117 )
                        goto LABEL_144;
                      goto LABEL_92;
                    }
                  }
                  if ( !v16->name )
                    goto LABEL_144;
LABEL_92:
                  if ( !v58 )
                  {
                    if ( v18 == 8 )
                    {
                      if ( curl_strnequal("httponly", v14, 8) )
                        v16->httponly = 1;
                      goto LABEL_96;
                    }
                    if ( !v66 )
                      goto LABEL_96;
                  }
                  if ( v18 != 7 || curl_strnequal("version", v14, 7) )
                    goto LABEL_96;
                  if ( !curl_strnequal("max-age", v14, 7) )
                  {
                    if ( curl_strnequal("expires", v14, 7) && !v16->expires && v58 < 0x80 )
                    {
                      v118 = memcpy(date, v59, v58);
                      v120[v58 + 0x34] = 0;
                      v119 = Curl_getdate_capped(v118);
                      if ( v119 )
                      {
                        if ( v119 >> 0x1F == -1 )
                        {
                          LODWORD(v16->expires) = 0;
                          HIDWORD(v16->expires) = 0;
                        }
                        else
                        {
                          v16->expires = v119;
                        }
                      }
                      else
                      {
                        LODWORD(v16->expires) = 1;
                        HIDWORD(v16->expires) = 0;
                      }
                    }
                    goto LABEL_96;
                  }
                  if ( *v59 == 34 )
                    ++v59;
                  v67 = curlx_strtoofft(v59, 0, 10, &v16->expires);
                  if ( v67 != 1 )
                  {
                    if ( v67 == 2 )
                      goto LABEL_282;
                    if ( v67 )
                      goto LABEL_96;
                    expires = v16->expires;
                    if ( !expires )
                    {
LABEL_282:
                      LODWORD(v16->expires) = 1;
                      HIDWORD(v16->expires) = 0;
                      v17 = *v61;
                      v14 = v61;
                      goto LABEL_97;
                    }
                    v69 = now >> 0x1F;
                    v70 = 0x7FFFFFFF - (now >> 0x1F);
                    if ( v70 >= SHIDWORD(expires) )
                    {
                      v15 = HIDWORD(expires) != v70;
                      v71 = now;
                      if ( v15 || (v71 = now, ~now >= (unsigned int)expires) )
                      {
                        v72 = expires + v71;
                        LODWORD(v16->expires) = v72;
                        HIDWORD(v16->expires) = (v72 < (unsigned int)expires) + HIDWORD(expires) + v69;
                        v17 = *v61;
                        v14 = v61;
                        goto LABEL_97;
                      }
                    }
                  }
                  LODWORD(v16->expires) = -1;
                  HIDWORD(v16->expires) = 0x7FFFFFFF;
                  v17 = *v61;
                  v14 = v61;
                  goto LABEL_97;
                }
LABEL_79:
                if ( !v16->name )
                  goto LABEL_144;
                goto LABEL_80;
              }
            }
          }
          else
          {
            v66 = (void (*)(Cookie *))httpheader;
            if ( v18 < 0xFFF )
            {
              v59 += v60;
LABEL_89:
              if ( v18 >= 7 )
                goto LABEL_90;
              goto LABEL_79;
            }
          }
        }
        else
        {
          v66 = 0;
          if ( v56 < 0xFFF )
          {
            v61 = (char *)v55;
            v59 = 0;
            v58 = 0;
            goto LABEL_89;
          }
          v58 = 0;
        }
        v64 = freecookie;
        goto LABEL_119;
      }
    }
    while ( v18 );
    v58 = 0;
    if ( *(_BYTE *)v55 == 61 )
      goto LABEL_71;
    v61 = (char *)v55;
    v59 = 0;
    v66 = 0;
    if ( !v16->name )
    {
LABEL_144:
      if ( !v66 )
        goto LABEL_155;
      v121 = (void (*)(Cookie *))&Curl_cfree;
      Curl_cfree(0);
      v80 = Curl_memdup(v14, v18 + 1);
      v16->name = (char *)v80;
      v81 = v121;
      if ( v80 )
        *(_BYTE *)(v80 + v18) = 0;
      (*(void (__fastcall **)(char *))v81)(v16->value);
      v82 = Curl_memdup(v59, v58 + 1);
      v16->value = (char *)v82;
      if ( v82 )
        *(_BYTE *)(v82 + v58) = 0;
      v83 = v16->name;
      v20 = (void (*)(Cookie *))MEMORY[0xBDC0];
      if ( !v83 )
        goto LABEL_156;
      value = v16->value;
      if ( !value )
        goto LABEL_155;
      if ( value[strcspn(v16->value, badoctets_0)] || v83[strcspn(v83, badoctets_0)] )
      {
        v20 = (void (*)(Cookie *))MEMORY[0xBDC0];
        if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x100000) != 0 )
        {
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
          goto LABEL_155;
        }
        goto LABEL_156;
      }
      goto LABEL_96;
    }
LABEL_80:
    if ( v58 )
    {
      if ( v18 == 4 )
        goto LABEL_164;
      if ( v18 != 6 || !curl_strnequal(v130, v14, 6) )
        goto LABEL_96;
      if ( *v59 == 46 )
      {
        ++v59;
        --v58;
      }
      if ( v58 == 9 && curl_strnequal(v59, "localhost", 9) )
      {
        v77 = v125;
      }
      else
      {
        v76 = memchr(v59, 46, v58);
        if ( !v76 || (v15 = v58 - (v76 - v59) >= 2, v77 = v125, !v15) )
        {
          is_ipnum = Curl_host_is_ipnum(&_LC1);
          v125 = (const char *)&_LC1;
          if ( !is_ipnum )
            goto LABEL_193;
          goto LABEL_138;
        }
      }
      if ( !v77 )
      {
        is_ipnum = Curl_host_is_ipnum(v59);
        goto LABEL_197;
      }
      is_ipnum = Curl_host_is_ipnum(v77);
      if ( !is_ipnum )
      {
LABEL_193:
        v95 = strlen(v125);
        if ( v95 >= v58 )
        {
          v96 = &v125[v95 - v58];
          if ( curl_strnequal(v59, v96, v58) )
          {
            if ( v58 == v95 || *(v96 - 1) == 46 )
            {
LABEL_197:
              Curl_cfree(v16->domain);
              v97 = Curl_memdup(v59, v58 + 1);
              v16->domain = (char *)v97;
              if ( v97 )
              {
                *(_BYTE *)(v97 + v58) = 0;
                v20 = (void (*)(Cookie *))MEMORY[0xBDC0];
                if ( !v16->domain )
                  goto LABEL_156;
                if ( !is_ipnum )
                  v16->tailmatch = 1;
                goto LABEL_96;
              }
              goto LABEL_155;
            }
          }
        }
LABEL_140:
        if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x100000) != 0 )
          Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v59);
        v17 = *v61;
        v14 = v61;
        badcookie = httpheader;
        goto LABEL_97;
      }
LABEL_138:
      v79 = v125;
      if ( !strncmp(v59, v125, v58) && strlen(v79) == v58 )
        goto LABEL_197;
      goto LABEL_140;
    }
    if ( v18 == 6 )
    {
      v121 = v66;
      if ( !curl_strnequal("secure", v14, 6) )
      {
        if ( v121 )
          curl_strnequal("domain", v14, 6);
        goto LABEL_96;
      }
      if ( v126 || !ca->running )
      {
        v16->secure = 1;
        v17 = *v61;
        v14 = v61;
        goto LABEL_97;
      }
LABEL_155:
      v20 = freecookie;
      goto LABEL_156;
    }
    if ( !v66 || v18 != 4 )
      goto LABEL_96;
LABEL_164:
    if ( curl_strnequal(v129, v14, 4) )
    {
      Curl_cfree(v16->path);
      v87 = Curl_memdup(v59, v58 + 1);
      v16->path = (char *)v87;
      if ( !v87 )
        goto LABEL_155;
      *(_BYTE *)(v87 + v58) = 0;
      v20 = (void (*)(Cookie *))MEMORY[0xBDC0];
      if ( !v16->path )
        goto LABEL_156;
      Curl_cfree(v16->spath);
      v88 = sanitize_cookie_path(v16->path);
      v16->spath = v88;
      if ( !v88 )
      {
        v20 = (void (*)(Cookie *))MEMORY[0xBDC0];
        goto LABEL_156;
      }
    }
LABEL_96:
    v17 = *v61;
    v14 = v61;
LABEL_97:
    v19 = badcookie;
    if ( !v17 )
      break;
    do
    {
      while ( v17 == 32 || v17 == 9 )
      {
        v17 = *++v14;
        if ( !v17 )
          goto LABEL_12;
      }
      v19 = badcookie;
      if ( v17 != 59 )
        goto LABEL_13;
      do
      {
        v17 = *++v14;
        if ( !v17 )
          goto LABEL_65;
LABEL_6:
        ;
      }
      while ( v17 == 32 || v17 == 9 );
      v18 = strcspn(v14, ";\t\r\n=");
    }
    while ( !v18 );
  }
LABEL_13:
  v20 = (void (*)(Cookie *))MEMORY[0xBDC0];
  if ( v19 )
    goto LABEL_156;
  if ( !v16->domain )
  {
    if ( v125 )
    {
      v115 = Curl_cstrdup(v125);
      v16->domain = (char *)v115;
      if ( !v115 )
      {
        v20 = freecookie;
        goto LABEL_156;
      }
    }
  }
  v21 = v127;
  if ( !v16->path && v127 )
  {
    v108 = strchr(v127, 63);
    v109 = v108 ? (char *)Curl_memrchr(v21, 47, v108 - v21) : strrchr(v21, 47);
    if ( v109 )
    {
      v110 = v127;
      v111 = v109 - v127;
      v112 = v111 + 1;
      v113 = (char *)Curl_cmalloc(v111 + 2);
      v16->path = v113;
      if ( !v113 )
        goto LABEL_155;
      memcpy(v113, v110, v112);
      v16->path[v112] = 0;
      v114 = sanitize_cookie_path(v16->path);
      v16->spath = v114;
      if ( !v114 )
      {
        v20 = freecookie;
        goto LABEL_156;
      }
    }
  }
  v20 = (void (*)(Cookie *))MEMORY[0xBDC0];
  if ( !v16->name )
    goto LABEL_156;
  ++data->req.setcookies;
  prefix = v16->prefix;
  if ( (prefix & 1) != 0 )
  {
    v23 = prefix & 2;
    if ( !v16->secure )
      goto LABEL_155;
    v15 = v23 == 0;
    v24 = ca;
    if ( !v15 )
    {
LABEL_20:
      v25 = v16->path;
      v20 = (void (*)(Cookie *))MEMORY[0xBDC0];
      if ( !v25 )
        goto LABEL_156;
      v26 = (void (*)(Cookie *))(MEMORY[0xBDC0] + (__int16)freecookie);
      if ( *v25 != 47 )
        goto LABEL_157;
      if ( v25[1] )
        goto LABEL_155;
      v24 = ca;
      if ( v16->tailmatch )
        goto LABEL_155;
    }
  }
  else
  {
    v15 = (prefix & 2) == 0;
    v24 = ca;
    if ( !v15 )
    {
      if ( !v16->secure )
      {
        ((void (__fastcall *)(Cookie *))(MEMORY[0xBDC0] + (__int16)freecookie))(v16);
        goto LABEL_122;
      }
      goto LABEL_20;
    }
  }
  running = v24->running;
  v28 = ca;
  if ( !running && v24->newsession )
  {
    v20 = (void (*)(Cookie *))MEMORY[0xBDC0];
    if ( !v16->expires )
      goto LABEL_156;
    v28 = ca;
  }
  lastct = v28->lastct;
  v16->livecookie = running;
  v28->lastct = ++lastct;
  v16->creationtime = lastct;
  if ( !noexpire )
    remove_expired(v28);
  v30 = cookiehash(v16->domain);
  v31 = &ca->cookies[v30];
  v32 = *v31;
  if ( !*v31 )
  {
    if ( ca->running )
    {
      v34 = v16;
      if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x100000) != 0 )
      {
        next = 0;
        livecookie = 0;
        v52 = "Added";
        goto LABEL_232;
      }
    }
    else
    {
      v34 = v16;
    }
    goto LABEL_260;
  }
  livecookie = 0;
  v34 = 0;
  v35 = 0;
  if ( !v126 )
  {
    while ( 1 )
    {
      if ( !curl_strequal(v32->name, v16->name) )
        goto LABEL_170;
      v89 = v32->domain;
      v90 = v16->domain;
      if ( v89 )
      {
        if ( !v90 || !curl_strequal(v89, v90) )
          goto LABEL_170;
      }
      else if ( v90 )
      {
        goto LABEL_170;
      }
      spath = v32->spath;
      if ( spath )
      {
        v92 = v16->spath;
        if ( v92 )
        {
          if ( v32->secure && !v16->secure )
          {
            v93 = strchr(spath + 1, 47);
            v94 = v93 ? v93 - spath : strlen(spath);
            if ( curl_strnequal(spath, v92, v94) )
            {
              v20 = (void (*)(Cookie *))MEMORY[0xBDC0];
              if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x100000) != 0 )
              {
                Curl_infof(
                  data,
                  "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                  v16->name,
                  v16->domain);
                goto LABEL_155;
              }
LABEL_156:
              v26 = (void (*)(Cookie *))((char *)v20 + (__int16)freecookie);
LABEL_157:
              v26(v16);
LABEL_122:
              v34 = 0;
              goto LABEL_123;
            }
          }
        }
      }
LABEL_170:
      if ( v35 || !curl_strequal(v32->name, v16->name) )
        goto LABEL_171;
      v98 = v32->domain;
      v99 = v16->domain;
      if ( !v98 )
      {
        if ( !v99 )
        {
          v100 = v32->spath;
          goto LABEL_211;
        }
LABEL_209:
        v15 = livecookie == 0;
        livecookie = 0;
        if ( v15 )
          goto LABEL_171;
        goto LABEL_210;
      }
      if ( !v99 || !curl_strequal(v98, v99) || v16->tailmatch != v32->tailmatch )
        goto LABEL_209;
LABEL_210:
      v100 = v32->spath;
LABEL_211:
      v101 = v16->spath;
      if ( v100 )
      {
        if ( !v101 || !curl_strequal(v100, v101) )
        {
          livecookie = 0;
          goto LABEL_171;
        }
        v100 = v32->spath;
        v101 = v16->spath;
      }
      livecookie = 0;
      if ( (v101 == 0) == (v100 == 0) )
      {
        livecookie = v16->livecookie;
        v34 = v32;
        if ( v16->livecookie )
        {
          v35 = v16;
        }
        else
        {
          v20 = (void (*)(Cookie *))MEMORY[0xBDC0];
          if ( v32->livecookie )
            goto LABEL_156;
          v35 = v16;
          livecookie = 1;
        }
      }
LABEL_171:
      next = v32;
      if ( !v32->next )
        goto LABEL_45;
      v32 = v32->next;
    }
  }
  while ( 2 )
  {
    if ( curl_strequal(v32->name, v16->name) )
    {
      v36 = v32->domain;
      if ( v36 )
      {
        v37 = v16->domain;
        if ( v37 )
          curl_strequal(v36, v37);
      }
    }
    if ( !v35 )
    {
      if ( !curl_strequal(v32->name, v16->name) )
      {
LABEL_202:
        next = v32;
        if ( !v32->next )
          goto LABEL_45;
        v32 = v32->next;
        continue;
      }
      v102 = v32->domain;
      v103 = v16->domain;
      if ( v102 )
      {
        if ( v103 && curl_strequal(v102, v103) && v32->tailmatch == v16->tailmatch )
        {
LABEL_220:
          v104 = v32->spath;
          goto LABEL_221;
        }
      }
      else if ( !v103 )
      {
        v104 = v32->spath;
LABEL_221:
        v105 = v16->spath;
        if ( v104 )
        {
          if ( !v105 || !curl_strequal(v104, v105) )
          {
            livecookie = 0;
            goto LABEL_202;
          }
          v104 = v32->spath;
          v105 = v16->spath;
        }
        livecookie = 0;
        if ( (v104 == 0) == (v105 == 0) )
        {
          livecookie = v16->livecookie;
          v34 = v32;
          if ( !v16->livecookie )
          {
            v20 = freecookie;
            if ( v32->livecookie )
              goto LABEL_156;
            livecookie = v126;
          }
          v35 = v16;
        }
        goto LABEL_202;
      }
      v15 = livecookie == 0;
      livecookie = 0;
      if ( v15 )
        goto LABEL_202;
      goto LABEL_220;
    }
    break;
  }
  next = v32->next;
  if ( !v32->next )
  {
    next = v32;
LABEL_46:
    creationtime = v34->creationtime;
    v42 = v34->next;
    v43 = (void (__fastcall *)(char *))Curl_cfree;
    v44 = v34->name;
    v121 = (void (*)(Cookie *))&Curl_cfree;
    v35->creationtime = creationtime;
    v35->next = v42;
    v43(v44);
    (*(void (__fastcall **)(char *))v121)(v34->value);
    (*(void (__fastcall **)(char *))v121)(v34->domain);
    (*(void (__fastcall **)(char *))v121)(v34->path);
    (*(void (__fastcall **)(char *))v121)(v34->spath);
    v45 = v121;
    v46 = v35;
    v47 = v34;
    do
    {
      v48 = v46->next;
      v49 = v46->name;
      v50 = v46->value;
      v51 = v46->path;
      v46 = (Cookie *)((char *)v46 + 16);
      v47->next = v48;
      v47->name = v49;
      v47->value = v50;
      v47->path = v51;
      v47 = (Cookie *)((char *)v47 + 16);
    }
    while ( v46 != &v35[1] );
    (*(void (__fastcall **)(Cookie *))v45)(v35);
    goto LABEL_49;
  }
  while ( 1 )
  {
    if ( curl_strequal(next->name, v16->name) )
    {
      v39 = next->domain;
      if ( v39 )
      {
        v40 = v16->domain;
        if ( v40 )
          curl_strequal(v39, v40);
      }
    }
    if ( !next->next )
      break;
    next = next->next;
  }
LABEL_45:
  if ( v35 )
    goto LABEL_46;
  v34 = v16;
LABEL_49:
  if ( ca->running && (*(_DWORD *)(&data->set.connect_only + 2) & 0x100000) != 0 )
  {
    if ( livecookie )
      v52 = "Replaced";
    else
      v52 = "Added";
LABEL_232:
    Curl_infof(
      data,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
      v52,
      v34->name,
      v34->value,
      v34->domain,
      v34->path,
      v34->expires);
    if ( !livecookie )
    {
      if ( next )
      {
LABEL_234:
        next->next = v34;
        goto LABEL_235;
      }
LABEL_260:
      *v31 = v34;
LABEL_235:
      ++ca->numcookies;
    }
  }
  else if ( !livecookie )
  {
    goto LABEL_234;
  }
  HIDWORD(v106) = v34->expires;
  LODWORD(v106) = HIDWORD(v34->expires);
  if ( v106 && __SPAIR64__(v106, HIDWORD(v106)) < ca->next_expiration )
  {
    v107 = ca;
    LODWORD(ca->next_expiration) = HIDWORD(v106);
    HIDWORD(v107->next_expiration) = v106;
  }
LABEL_123:
  if ( v134 != *v123 )
    _stack_chk_fail();
  return v34;
}
