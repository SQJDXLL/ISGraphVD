// local variable allocation has failed, the output may be wrong!
Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v8; // x0
  char is_ipnum; // w0
  int v10; // w0
  __int64 v11; // x0
  __int64 v12; // x0
  char *v13; // x0
  __int64 v14; // x0
  _BOOL4 v15; // w8
  __int64 v16; // x0
  char *v17; // x0
  __int64 v18; // x0
  __int64 v19; // x0
  __int64 v20; // x0
  __int64 v21; // x0
  __int64 v22; // x0
  int v23; // w8
  int v24; // w0
  const char *v25; // x2
  char *v26; // x9
  char v28; // [xsp+14h] [xbp-1FCh]
  bool v29; // [xsp+18h] [xbp-1F8h]
  bool v30; // [xsp+1Ch] [xbp-1F4h]
  bool v31; // [xsp+4Ch] [xbp-1C4h]
  bool v32; // [xsp+50h] [xbp-1C0h]
  bool v33; // [xsp+54h] [xbp-1BCh]
  bool v34; // [xsp+58h] [xbp-1B8h]
  bool v35; // [xsp+5Ch] [xbp-1B4h]
  bool v36; // [xsp+60h] [xbp-1B0h]
  bool v37; // [xsp+64h] [xbp-1ACh]
  bool v38; // [xsp+68h] [xbp-1A8h]
  char *v39; // [xsp+80h] [xbp-190h]
  size_t v40; // [xsp+88h] [xbp-188h]
  char v41; // [xsp+93h] [xbp-17Dh]
  int i; // [xsp+94h] [xbp-17Ch]
  char *save_ptr; // [xsp+98h] [xbp-178h] BYREF
  char *v44; // [xsp+A0h] [xbp-170h]
  char *s2; // [xsp+A8h] [xbp-168h]
  size_t n; // [xsp+B0h] [xbp-160h]
  char *v47; // [xsp+B8h] [xbp-158h]
  char *v48; // [xsp+C0h] [xbp-150h]
  _BYTE dest[128]; // [xsp+C8h] [xbp-148h] BYREF
  __int64 v50; // [xsp+148h] [xbp-C8h]
  int v51; // [xsp+150h] [xbp-C0h]
  char v52; // [xsp+157h] [xbp-B9h]
  __int64 v53; // [xsp+158h] [xbp-B8h]
  const char *v54; // [xsp+160h] [xbp-B0h]
  const char *maxage; // [xsp+168h] [xbp-A8h]
  size_t offt; // [xsp+170h] [xbp-A0h]
  const char *valuep; // [xsp+178h] [xbp-98h]
  const char *namep; // [xsp+180h] [xbp-90h]
  const char *j; // [xsp+188h] [xbp-88h] OVERLAPPED
  size_t nlen; // [xsp+190h] [xbp-80h]
  size_t vlen; // [xsp+198h] [xbp-78h]
  size_t linelength; // [xsp+1A0h] [xbp-70h]
  const char *ptr; // [xsp+1A8h] [xbp-68h]
  size_t myhash; // [xsp+1B0h] [xbp-60h]
  Cookie *v65; // [xsp+1B8h] [xbp-58h] OVERLAPPED
  time_t now; // [xsp+1C0h] [xbp-50h]
  Cookie *replace_clist; // [xsp+1C8h] [xbp-48h]
  Cookie *replace_co; // [xsp+1D0h] [xbp-40h]
  Cookie *lastc; // [xsp+1D8h] [xbp-38h]
  Cookie *co; // [xsp+1E0h] [xbp-30h]
  Cookie *clist; // [xsp+1E8h] [xbp-28h]
  bool v72; // [xsp+1F6h] [xbp-1Ah]
  bool securea; // [xsp+1F7h] [xbp-19h]
  const char *patha; // [xsp+1F8h] [xbp-18h]
  const char *domaina; // [xsp+200h] [xbp-10h]

  domaina = (const char *)data;
  patha = (const char *)c;
  securea = httpheader;
  v72 = noexpire;
  clist = (Cookie *)lineptr;
  co = (Cookie *)domain;
  lastc = (Cookie *)path;
  HIBYTE(replace_co) = secure;
  v65 = 0LL;
  myhash = 0LL;
  ptr = 0LL;
  linelength = time(0uLL);
  HIWORD(vlen) = 0;
  if ( *((unsigned __int8 *)domaina + 402) >= 0x32u )
    return 0LL;
  now = Curl_ccalloc(1LL, 72LL);
  if ( !now )
    return 0LL;
  if ( !securea )
  {
    save_ptr = 0LL;
    if ( !strncmp((const char *)clist, "#HttpOnly_", 0xAuLL) )
    {
      clist = (Cookie *)((char *)clist + 0xA);
      *(_BYTE *)(now + 59) = 1;
    }
    if ( LOBYTE(clist->next) != 0x23 )
    {
      s2 = strchr((const char *)clist, 13);
      if ( s2 )
        *s2 = 0;
      s2 = strchr((const char *)clist, 10);
      if ( s2 )
        *s2 = 0;
      v44 = strtok_r((char *)clist, "\t", &save_ptr);
      s2 = v44;
      for ( i = 0; ; ++i )
      {
        v28 = 0;
        if ( s2 )
          v28 = BYTE6(vlen) ^ 1;
        if ( (v28 & 1) == 0 )
          break;
        switch ( i )
        {
          case 0:
            if ( *s2 == 0x2E )
              ++s2;
            v14 = Curl_cstrdup(s2);
            *(_QWORD *)(now + 40) = v14;
            if ( !*(_QWORD *)(now + 40) )
              BYTE6(vlen) = 1;
            break;
          case 1:
            v15 = curl_strequal(s2, "TRUE") != 0;
            *(_BYTE *)(now + 56) = v15;
            break;
          case 2:
            if ( !strcmp("TRUE", s2) || !strcmp("FALSE", s2) )
            {
              v18 = Curl_cstrdup("/");
              *(_QWORD *)(now + 24) = v18;
              if ( !*(_QWORD *)(now + 24) )
                BYTE6(vlen) = 1;
              v19 = Curl_cstrdup("/");
              *(_QWORD *)(now + 32) = v19;
              if ( !*(_QWORD *)(now + 32) )
                BYTE6(vlen) = 1;
              ++i;
              goto LABEL_202;
            }
            v16 = Curl_cstrdup(s2);
            *(_QWORD *)(now + 24) = v16;
            if ( *(_QWORD *)(now + 24) )
            {
              v17 = sanitize_cookie_path(*(const char **)(now + 24));
              *(_QWORD *)(now + 32) = v17;
              if ( !*(_QWORD *)(now + 32) )
                BYTE6(vlen) = 1;
            }
            else
            {
              BYTE6(vlen) = 1;
            }
            break;
          case 3:
LABEL_202:
            *(_BYTE *)(now + 57) = 0;
            if ( (unsigned int)curl_strequal(s2, "TRUE") )
            {
              if ( (HIBYTE(replace_co) & 1) != 0 || (patha[520] & 1) != 0 )
                *(_BYTE *)(now + 57) = 1;
              else
                BYTE6(vlen) = 1;
            }
            break;
          case 4:
            if ( (unsigned int)curlx_strtoofft(s2, 0LL, 10LL, now + 0x30) )
              BYTE6(vlen) = 1;
            break;
          case 5:
            v20 = Curl_cstrdup(s2);
            *(_QWORD *)(now + 8) = v20;
            if ( *(_QWORD *)(now + 8) )
            {
              if ( (unsigned int)curl_strnequal("__Secure-", *(_QWORD *)(now + 8), 9LL) )
              {
                *(_BYTE *)(now + 64) |= 1u;
              }
              else if ( (unsigned int)curl_strnequal("__Host-", *(_QWORD *)(now + 8), 7LL) )
              {
                *(_BYTE *)(now + 64) |= 2u;
              }
            }
            else
            {
              BYTE6(vlen) = 1;
            }
            break;
          case 6:
            v21 = Curl_cstrdup(s2);
            *(_QWORD *)(now + 16) = v21;
            if ( !*(_QWORD *)(now + 16) )
              BYTE6(vlen) = 1;
            break;
          default:
            break;
        }
        s2 = strtok_r(0uLL, "\t", &save_ptr);
      }
      if ( i == 6 )
      {
        v22 = Curl_cstrdup(&unk_348E);
        *(_QWORD *)(now + 16) = v22;
        if ( *(_QWORD *)(now + 16) )
          i = 7;
        else
          BYTE6(vlen) = 1;
      }
      if ( (vlen & 0x1000000000000LL) == 0 && i != 7 )
        BYTE6(vlen) = 1;
      if ( (vlen & 0x1000000000000LL) == 0 )
        goto LABEL_230;
LABEL_289:
      freecookie((Cookie *)now);
      return 0LL;
    }
LABEL_174:
    Curl_cfree(now);
    return 0LL;
  }
  namep = (const char *)strlen((const char *)clist);
  if ( (unsigned __int64)namep > 0x1388 )
    goto LABEL_174;
  for ( j = (const char *)clist; ; ++j )
  {
    while ( 1 )
    {
      v38 = 0;
      if ( *j )
      {
        v37 = 1;
        if ( *j != 0x20 )
          v37 = *j == 9;
        v38 = v37;
      }
      if ( !v38 )
        break;
      ++j;
    }
    offt = strcspn(j, ";\t\r\n=");
    if ( !offt )
      goto LABEL_142;
    HIWORD(maxage) = 0;
    v54 = j;
    j += offt;
    while ( 1 )
    {
      v36 = 0;
      if ( offt )
      {
        v35 = 1;
        if ( v54[offt - 1] != 0x20 )
          v35 = v54[offt - 1] == 9;
        v36 = v35;
      }
      if ( !v36 )
        break;
      --offt;
    }
    if ( *j == 0x3D )
    {
      valuep = (const char *)strcspn(++j, ";\r\n");
      v53 = (__int64)j;
      BYTE6(maxage) = 1;
      j = &valuep[(_QWORD)j];
      while ( 1 )
      {
        v34 = 0;
        if ( valuep )
        {
          v33 = 1;
          if ( valuep[v53 + 0xFFFFFFFFLL] != 0x20 )
            v33 = valuep[v53 + 0xFFFFFFFFLL] == 9;
          v34 = v33;
        }
        if ( !v34 )
          break;
        --valuep;
      }
      while ( 1 )
      {
        v32 = 0;
        if ( valuep )
        {
          v31 = 1;
          if ( *(_BYTE *)v53 != 0x20 )
            v31 = *(_BYTE *)v53 == 9;
          v32 = v31;
        }
        if ( !v32 )
          break;
        ++v53;
        --valuep;
      }
      if ( memchr((const void *)v53, 9, (size_t)valuep) )
      {
        freecookie((Cookie *)now);
        if ( domaina && ((*(_QWORD *)(domaina + 0xA4A) >> 0x1D) & 1) != 0 )
          Curl_infof(domaina, "cookie contains TAB, dropping");
        return 0LL;
      }
    }
    else
    {
      v53 = 0LL;
      valuep = 0LL;
    }
    if ( offt >= 0xFFF || (unsigned __int64)valuep >= 0xFFF || (unsigned __int64)&valuep[offt] > 0x1000 )
    {
      freecookie((Cookie *)now);
      if ( domaina && ((*(_QWORD *)(domaina + 0xA4A) >> 0x1D) & 1) != 0 )
        Curl_infof(domaina, "oversized cookie dropped, name/val %zu + %zu bytes", offt, (size_t)valuep);
      return 0LL;
    }
    if ( offt >= 7 && *v54 == 0x5F && v54[1] == 0x5F )
    {
      if ( (unsigned int)curl_strnequal("__Secure-", v54, 9LL) )
      {
        *(_BYTE *)(now + 64) |= 1u;
      }
      else if ( (unsigned int)curl_strnequal("__Host-", v54, 7LL) )
      {
        *(_BYTE *)(now + 64) |= 2u;
      }
    }
    if ( !*(_QWORD *)(now + 8) )
      break;
    if ( !valuep )
    {
      HIBYTE(maxage) = 1;
      if ( offt == 6 && (unsigned int)curl_strnequal("secure", v54, 6LL) )
      {
        if ( (HIBYTE(replace_co) & 1) == 0 && (patha[520] & 1) != 0 )
        {
          BYTE6(vlen) = 1;
          goto LABEL_150;
        }
        *(_BYTE *)(now + 57) = 1;
      }
      else if ( offt == 8 && (unsigned int)curl_strnequal("httponly", v54, 8LL) )
      {
        *(_BYTE *)(now + 59) = 1;
      }
      else if ( (BYTE6(maxage) & 1) != 0 )
      {
        HIBYTE(maxage) = 0;
      }
    }
LABEL_83:
    if ( (HIBYTE(maxage) & 1) == 0 )
    {
      if ( offt == 4 && (unsigned int)curl_strnequal("path", v54, 4LL) )
      {
        strstore((char **)(now + 0x18), (const char *)v53, (size_t)valuep);
        if ( !*(_QWORD *)(now + 24) )
        {
          BYTE6(vlen) = 1;
          goto LABEL_150;
        }
        Curl_cfree(*(_QWORD *)(now + 32));
        v8 = sanitize_cookie_path(*(const char **)(now + 24));
        *(_QWORD *)(now + 32) = v8;
        if ( !*(_QWORD *)(now + 32) )
        {
          BYTE6(vlen) = 1;
          goto LABEL_150;
        }
      }
      else if ( offt == 6 && (unsigned int)curl_strnequal("domain", v54, 6LL) && valuep )
      {
        if ( *(_BYTE *)v53 == 46 )
        {
          ++v53;
          --valuep;
        }
        if ( bad_domain((const char *)v53, (size_t)valuep) )
          co = (Cookie *)":";
        if ( co )
          is_ipnum = Curl_host_is_ipnum(co);
        else
          is_ipnum = Curl_host_is_ipnum(v53);
        v52 = is_ipnum & 1;
        if ( !co
          || (v52 & 1) != 0
          && !strncmp((const char *)v53, (const char *)co, (size_t)valuep)
          && valuep == (const char *)strlen((const char *)co)
          || (v52 & 1) == 0 && cookie_tailmatch((const char *)v53, (size_t)valuep, (const char *)co) )
        {
          strstore((char **)(now + 0x28), (const char *)v53, (size_t)valuep);
          if ( !*(_QWORD *)(now + 40) )
          {
            BYTE6(vlen) = 1;
            goto LABEL_150;
          }
          if ( (v52 & 1) == 0 )
            *(_BYTE *)(now + 56) = 1;
        }
        else
        {
          BYTE6(vlen) = 1;
          if ( domaina && ((*(_QWORD *)(domaina + 0xA4A) >> 0x1D) & 1) != 0 )
            Curl_infof(domaina, "skipped cookie with bad tailmatch domain: %s", (const char *)v53);
        }
      }
      else if ( offt != 7 || !(unsigned int)curl_strnequal("version", v54, 7LL) )
      {
        if ( offt == 7 && (unsigned int)curl_strnequal("max-age", v54, 7LL) )
        {
          v50 = v53;
          if ( *(_BYTE *)v53 == 0x22 )
            v10 = curlx_strtoofft(v50 + 1, 0LL, 10LL, now + 0x30);
          else
            v10 = curlx_strtoofft(v50, 0LL, 10LL, now + 0x30);
          v51 = v10;
          if ( v10 )
          {
            if ( v10 == 1 )
            {
              *(_QWORD *)(now + 48) = 0x7FFFFFFFFFFFFFFFLL;
            }
            else if ( v10 == 2 )
            {
              *(_QWORD *)(now + 48) = 1LL;
            }
          }
          else if ( *(_QWORD *)(now + 48) )
          {
            if ( (signed __int64)(0x7FFFFFFFFFFFFFFFLL - linelength) < *(_QWORD *)(now + 48) )
              *(_QWORD *)(now + 48) = 0x7FFFFFFFFFFFFFFFLL;
            else
              *(_QWORD *)(now + 48) += linelength;
          }
          else
          {
            *(_QWORD *)(now + 48) = 1LL;
          }
        }
        else if ( offt == 7
               && (unsigned int)curl_strnequal("expires", v54, 7LL)
               && !*(_QWORD *)(now + 48)
               && (unsigned __int64)valuep < 0x80 )
        {
          memcpy(dest, (const void *)v53, (size_t)valuep);
          dest[(_QWORD)valuep] = 0;
          *(_QWORD *)(now + 48) = Curl_getdate_capped();
          if ( *(_QWORD *)(now + 48) )
          {
            if ( *(__int64 *)(now + 48) < 0 )
              *(_QWORD *)(now + 48) = 0LL;
          }
          else
          {
            *(_QWORD *)(now + 48) = 1LL;
          }
        }
      }
    }
    while ( 1 )
    {
LABEL_142:
      v30 = 0;
      if ( *j )
      {
        v29 = 1;
        if ( *j != 0x20 )
          v29 = *j == 9;
        v30 = v29;
      }
      if ( !v30 )
        break;
      ++j;
    }
    if ( *j != 0x3B )
      goto LABEL_150;
  }
  if ( (BYTE6(maxage) & 1) == 0 )
  {
    BYTE6(vlen) = 1;
    goto LABEL_150;
  }
  strstore((char **)(now + 8), v54, offt);
  strstore((char **)(now + 0x10), (const char *)v53, (size_t)valuep);
  HIBYTE(maxage) = 1;
  if ( !*(_QWORD *)(now + 8) || !*(_QWORD *)(now + 16) )
  {
    BYTE6(vlen) = 1;
    goto LABEL_150;
  }
  if ( !invalid_octets(*(const char **)(now + 16)) && !invalid_octets(*(const char **)(now + 8)) )
    goto LABEL_83;
  if ( domaina && ((*(_QWORD *)(domaina + 0xA4A) >> 0x1D) & 1) != 0 )
    Curl_infof(domaina, "invalid octets in name/value, cookie dropped");
  BYTE6(vlen) = 1;
LABEL_150:
  if ( (vlen & 0x1000000000000LL) == 0 && !*(_QWORD *)(now + 40) )
  {
    if ( co )
    {
      v11 = Curl_cstrdup(co);
      *(_QWORD *)(now + 40) = v11;
      if ( !*(_QWORD *)(now + 40) )
        BYTE6(vlen) = 1;
    }
  }
  if ( (vlen & 0x1000000000000LL) == 0 && !*(_QWORD *)(now + 24) && lastc )
  {
    v48 = strchr((const char *)lastc, 63);
    v47 = v48 ? (char *)Curl_memrchr(lastc, 47LL, v48 - (char *)lastc) : strrchr((const char *)lastc, 47);
    if ( v47 )
    {
      n = v47 - (char *)lastc + 1;
      v12 = Curl_cmalloc(v47 - (char *)lastc + 2);
      *(_QWORD *)(now + 24) = v12;
      if ( *(_QWORD *)(now + 24) )
      {
        memcpy(*(void **)(now + 24), lastc, n);
        *(_BYTE *)(*(_QWORD *)(now + 24) + n) = 0;
        v13 = sanitize_cookie_path(*(const char **)(now + 24));
        *(_QWORD *)(now + 32) = v13;
        if ( !*(_QWORD *)(now + 32) )
          BYTE6(vlen) = 1;
      }
      else
      {
        BYTE6(vlen) = 1;
      }
    }
  }
  if ( (vlen & 0x1000000000000LL) != 0 || !*(_QWORD *)(now + 8) )
  {
    freecookie((Cookie *)now);
    return 0LL;
  }
  ++domaina[402];
LABEL_230:
  if ( (*(_BYTE *)(now + 64) & 1) != 0 && (*(_BYTE *)(now + 57) & 1) == 0
    || (*(_BYTE *)(now + 64) & 2) != 0
    && ((*(_BYTE *)(now + 57) & 1) == 0
     || !*(_QWORD *)(now + 24)
     || strcmp(*(const char **)(now + 24), "/")
     || (*(_BYTE *)(now + 56) & 1) != 0)
    || (patha[520] & 1) == 0 && (patha[521] & 1) != 0 && !*(_QWORD *)(now + 48) )
  {
    goto LABEL_289;
  }
  *(_BYTE *)(now + 58) = patha[520] & 1;
  v23 = *((_DWORD *)patha + 129) + 1;
  *((_DWORD *)patha + 129) = v23;
  *(_DWORD *)(now + 60) = v23;
  if ( !v72 )
    remove_expired((CookieInfo *)patha);
  nlen = cookiehash(*(const char *const *)(now + 40));
  for ( replace_clist = *(Cookie **)&patha[8 * nlen]; replace_clist; replace_clist = replace_clist->next )
  {
    if ( (unsigned int)curl_strequal(replace_clist->name, *(_QWORD *)(now + 8)) )
    {
      v41 = 0;
      if ( replace_clist->domain && *(_QWORD *)(now + 40) )
      {
        if ( (unsigned int)curl_strequal(replace_clist->domain, *(_QWORD *)(now + 40)) )
          v41 = 1;
      }
      else if ( !replace_clist->domain && !*(_QWORD *)(now + 40) )
      {
        v41 = 1;
      }
      if ( (v41 & 1) != 0
        && replace_clist->spath
        && *(_QWORD *)(now + 32)
        && replace_clist->secure
        && (*(_BYTE *)(now + 57) & 1) == 0
        && (HIBYTE(replace_co) & 1) == 0 )
      {
        v39 = strchr((const char *)replace_clist->spath + 1, 47);
        if ( v39 )
        {
          v24 = curl_strnequal(replace_clist->spath, *(_QWORD *)(now + 32), v39 - replace_clist->spath);
        }
        else
        {
          v40 = strlen(replace_clist->spath);
          v24 = curl_strnequal(replace_clist->spath, *(_QWORD *)(now + 32), v40);
        }
        if ( v24 )
        {
          if ( domaina && ((*(_QWORD *)(domaina + 0xA4A) >> 0x1D) & 1) != 0 )
            Curl_infof(
              domaina,
              "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
              *(const char **)(now + 8),
              *(const char **)(now + 40));
          goto LABEL_289;
        }
      }
    }
    if ( !myhash && (unsigned int)curl_strequal(replace_clist->name, *(_QWORD *)(now + 8)) )
    {
      if ( replace_clist->domain && *(_QWORD *)(now + 40) )
      {
        if ( (unsigned int)curl_strequal(replace_clist->domain, *(_QWORD *)(now + 40))
          && replace_clist->tailmatch == (*(_BYTE *)(now + 56) & 1) )
        {
          HIBYTE(vlen) = 1;
        }
      }
      else if ( !replace_clist->domain && !*(_QWORD *)(now + 40) )
      {
        HIBYTE(vlen) = 1;
      }
      if ( (vlen & 0x100000000000000LL) != 0 )
      {
        if ( replace_clist->spath
          && *(_QWORD *)(now + 32)
          && !(unsigned int)curl_strequal(replace_clist->spath, *(_QWORD *)(now + 32)) )
        {
          HIBYTE(vlen) = 0;
        }
        else if ( (replace_clist->spath == 0LL) != (*(_QWORD *)(now + 32) == 0LL) )
        {
          HIBYTE(vlen) = 0;
        }
      }
      if ( (vlen & 0x100000000000000LL) != 0 && (*(_BYTE *)(now + 58) & 1) == 0 && replace_clist->livecookie )
        goto LABEL_289;
      if ( (vlen & 0x100000000000000LL) != 0 )
      {
        myhash = now;
        ptr = (const char *)replace_clist;
      }
    }
    v65 = replace_clist;
  }
  if ( myhash )
  {
    now = myhash;
    replace_clist = (Cookie *)ptr;
    *(_QWORD *)myhash = *(_QWORD *)ptr;
    *(_DWORD *)(now + 60) = replace_clist->creationtime;
    Curl_cfree(replace_clist->name);
    Curl_cfree(replace_clist->value);
    Curl_cfree(replace_clist->domain);
    Curl_cfree(replace_clist->path);
    Curl_cfree(replace_clist->spath);
    memcpy(replace_clist, (const void *)now, sizeof(Cookie));
    Curl_cfree(now);
    now = (time_t)replace_clist;
  }
  if ( (patha[520] & 1) != 0 && domaina && ((*(_QWORD *)(domaina + 0xA4A) >> 0x1D) & 1) != 0 )
  {
    if ( (vlen & 0x100000000000000LL) != 0 )
      v25 = "Replaced";
    else
      v25 = "Added";
    Curl_infof(
      domaina,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
      v25,
      *(const char **)(now + 8),
      *(const char **)(now + 16),
      *(const char **)(now + 40),
      *(const char **)(now + 24),
      *(_QWORD *)(now + 48));
  }
  if ( (vlen & 0x100000000000000LL) == 0 )
  {
    if ( v65 )
      v26 = (char *)v65;
    else
      v26 = (char *)&patha[8 * nlen];
    *(_QWORD *)v26 = now;
    ++*((_DWORD *)patha + 128);
  }
  if ( *(_QWORD *)(now + 48) && *(_QWORD *)(now + 48) < *((_QWORD *)patha + 63) )
    *((_QWORD *)patha + 63) = *(_QWORD *)(now + 48);
  return (Cookie *)now;
}
