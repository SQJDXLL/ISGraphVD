Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        const char *httpheader,
        int noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  int v12; // r0
  char *v13; // r4
  Cookie *v14; // r4
  char *v15; // r0
  char *v16; // r0
  char *v17; // r0
  const char *v18; // r10
  int v19; // r8
  int v20; // r9
  const char *v21; // r0
  int v22; // r0
  const char *v23; // r0
  char *v24; // r0
  _BOOL4 v25; // r0
  int v26; // r1
  int v27; // r5
  int v28; // r0
  char *v29; // r0
  int v30; // r0
  int v31; // r6
  char *i; // r10
  int v33; // r6
  bool v34; // zf
  size_t v35; // r0
  size_t v36; // r0
  int v37; // r1
  bool v38; // zf
  int v39; // r0
  bool v40; // zf
  size_t v41; // r8
  const char *v42; // r4
  size_t v43; // r9
  const char *v44; // r0
  int v45; // r1
  bool v46; // zf
  unsigned __int8 *v47; // r0
  const char *v48; // r7
  int v49; // r1
  bool v50; // zf
  bool v51; // cc
  Cookie *v52; // r1
  unsigned __int8 v53; // r0
  char *v54; // r0
  const char *v55; // r0
  const char *v56; // r7
  bool v57; // zf
  const char *v58; // r0
  int v59; // r0
  int v60; // r0
  bool v61; // zf
  const char *v62; // r7
  const char *v63; // r0
  int is_ipnum; // r0
  int v65; // r6
  _BOOL4 v66; // r0
  int v67; // r2
  int v68; // r0
  char v69; // r6
  bool v70; // zf
  int v71; // r0
  char *v72; // r0
  char *v73; // r0
  int v74; // r4
  char *v75; // r0
  size_t v76; // r4
  char *v77; // r0
  CookieInfo *v78; // r6
  int v79; // r0
  Cookie *next; // r0
  Cookie *v81; // r7
  Cookie *v82; // r9
  int v83; // r10
  Cookie *v84; // r8
  char *v85; // r0
  char *v86; // r1
  _BOOL4 v87; // r0
  bool v88; // zf
  int v89; // r0
  char *v90; // r0
  int v91; // r1
  int v92; // r0
  char *spath; // r4
  bool v94; // zf
  bool v95; // zf
  char *v96; // r0
  size_t v97; // r2
  char *v98; // r0
  bool v99; // zf
  const char *v100; // r0
  bool v101; // zf
  char *name; // r0
  int creationtime; // r2
  void (__fastcall **v105)(char *); // r4
  char *v106; // r2
  char *value; // r3
  char *v108; // r4
  char *v109; // r5
  char *v110; // r6
  int expires_high; // r2
  int v112; // r3
  int v113; // r4
  int v114; // r5
  int v115; // r6
  bool v116; // zf
  __int64 expires; // r0
  curl_off_t *p_next_expiration; // r6
  unsigned int next_expiration; // t1
  const char *v120; // r2
  curl_off_t v121; // [sp+1Ch] [bp-DCh]
  char **p_domain; // [sp+24h] [bp-D4h]
  curl_off_t *p_expires; // [sp+28h] [bp-D0h]
  char **str; // [sp+2Ch] [bp-CCh]
  char **p_value; // [sp+30h] [bp-C8h]
  int v127; // [sp+38h] [bp-C0h]
  char v128; // [sp+3Ch] [bp-BCh]
  CookieInfo *cookies; // [sp+40h] [bp-B8h]
  char **p_name; // [sp+44h] [bp-B4h]
  time_t v131; // [sp+4Ch] [bp-ACh]
  size_t v132; // [sp+4Ch] [bp-ACh]
  Curl_easy *v133; // [sp+50h] [bp-A8h]
  Cookie *v134; // [sp+54h] [bp-A4h]
  char *save_ptr[40]; // [sp+58h] [bp-A0h] BYREF

  v131 = time(0u);
  v133 = data;
  if ( data->req.setcookies > 0x31u )
    return 0;
  v12 = ((int (__fastcall *)(int, int))*Curl_ccalloc)(1, 48);
  if ( !v12 )
    return 0;
  v134 = (Cookie *)v12;
  v13 = (char *)lineptr;
  if ( !httpheader )
  {
    save_ptr[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v134->httponly = 1;
      v13 = (char *)(lineptr + 0xA);
    }
    if ( *v13 == 35 )
    {
      ((void (__fastcall *)(Cookie *))*Curl_cfree)(v134);
      return 0;
    }
    v15 = strchr(v13, 13);
    if ( v15 )
      *v15 = 0;
    v16 = strchr(v13, 10);
    if ( v16 )
      *v16 = 0;
    cookies = c;
    v17 = strtok_r(v13, "\t", save_ptr);
    if ( v17 )
    {
      v18 = v17;
      httpheader = "\t";
      v19 = 0;
      v20 = 0;
      do
      {
        switch ( v19 )
        {
          case 0:
            v21 = v18 + 1;
            if ( *v18 != 46 )
              v21 = v18;
            v22 = ((int (__fastcall *)(const char *))*Curl_cstrdup)(v21);
            v134->domain = (char *)v22;
            goto LABEL_32;
          case 1:
            v134->tailmatch = curl_strequal(v18, "TRUE") != 0;
            break;
          case 2:
            if ( !strcmp("TRUE", v18) || !strcmp("FALSE", v18) )
            {
              v27 = ((int (__fastcall *)(const char *))*Curl_cstrdup)("/");
              v134->path = (char *)v27;
              v28 = ((int (__fastcall *)(const char *))*Curl_cstrdup)("/");
              v134->spath = (char *)v28;
              v20 |= v27 == 0 || v28 == 0;
              ++v19;
              httpheader = "\t";
LABEL_35:
              v134->secure = 0;
              if ( curl_strequal(v18, "TRUE") )
              {
                if ( secure || c->running )
                  v134->secure = 1;
                else
LABEL_39:
                  v20 = 1;
              }
            }
            else
            {
              v23 = (const char *)((int (__fastcall *)(const char *))*Curl_cstrdup)(v18);
              v134->path = (char *)v23;
              if ( v23 )
              {
                v24 = sanitize_cookie_path(v23);
                v134->spath = v24;
                v20 |= v24 == 0;
              }
              else
              {
                v20 = 1;
              }
              httpheader = "\t";
            }
            break;
          case 3:
            goto LABEL_35;
          case 4:
            v25 = curlx_strtoofft(v18, 0, 10, &v134->expires) != 0;
            goto LABEL_33;
          case 5:
            v26 = ((int (__fastcall *)(const char *))*Curl_cstrdup)(v18);
            v134->name = (char *)v26;
            if ( !v26 )
              goto LABEL_39;
            if ( curl_strnequal("__Secure-", v26, 9) )
            {
              v134->prefix |= 1u;
            }
            else
            {
              if ( curl_strnequal("__Host-", v134->name, 7) )
                v134->prefix |= 2u;
              httpheader = "\t";
            }
            break;
          case 6:
            v22 = ((int (__fastcall *)(const char *))*Curl_cstrdup)(v18);
            v134->value = (char *)v22;
LABEL_32:
            v25 = v22 == 0;
LABEL_33:
            v20 |= v25;
            break;
          default:
            break;
        }
        v29 = strtok_r(0u, "\t", save_ptr);
        ++v19;
        if ( !v29 )
          break;
        v18 = v29;
      }
      while ( (v20 & 1) == 0 );
      if ( v19 == 6 )
      {
        v30 = ((int (__fastcall *)(void *))*Curl_cstrdup)(&L_str_22);
        v14 = v134;
        v134->value = (char *)v30;
        LOBYTE(v20) = v20 | (v30 == 0);
        v19 = (v30 != 0) + 6;
LABEL_205:
        v70 = (v20 & 1) == 0;
        if ( (v20 & 1) == 0 )
          v70 = v19 == 7;
        if ( v70 )
          goto LABEL_228;
LABEL_296:
        freecookie(v14);
        return 0;
      }
    }
    else
    {
      LOBYTE(v20) = 0;
      v19 = 0;
    }
    v14 = v134;
    goto LABEL_205;
  }
  cookies = c;
  if ( strlen(lineptr) > 0x1388 )
  {
    v14 = v134;
    ((void (__fastcall *)(Cookie *))*Curl_cfree)(v134);
    goto LABEL_226;
  }
  v127 = noexpire;
  p_value = &v134->value;
  p_domain = &v134->domain;
  p_expires = &v134->expires;
  str = &v134->path;
  p_name = &v134->name;
  v128 = 0;
  do
  {
    for ( i = v13; ; ++i )
    {
      v33 = (unsigned __int8)*i;
      v34 = v33 == 32;
      if ( v33 != 32 )
        v34 = v33 == 9;
      if ( !v34 )
        break;
    }
    v35 = strcspn(i, ";\t\r\n=");
    if ( !v35 )
    {
      v13 = i;
      goto LABEL_69;
    }
    httpheader = (const char *)v35;
    v13 = &i[v35];
    v36 = v35 - 1;
    do
    {
      v37 = (unsigned __int8)i[v36];
      v38 = v37 == 32;
      if ( v37 != 32 )
        v38 = v37 == 9;
      if ( !v38 )
      {
        v41 = v36 + 1;
        goto LABEL_78;
      }
      --v36;
    }
    while ( v36 != -1 );
    v41 = 0;
LABEL_78:
    if ( *v13 == 61 )
    {
      v42 = &httpheader[(_DWORD)i + 1];
      v43 = strcspn(v42, ";\r\n");
      v44 = &httpheader[v43];
      if ( v43 )
      {
        while ( 1 )
        {
          v45 = (unsigned __int8)httpheader[(_DWORD)i + v43];
          v46 = v45 == 32;
          if ( v45 != 32 )
            v46 = v45 == 9;
          if ( !v46 )
            break;
          if ( !--v43 )
          {
            v43 = 0;
            break;
          }
        }
      }
      v47 = (unsigned __int8 *)&v44[(_DWORD)i];
      if ( v43 )
      {
        v48 = &httpheader[v43 + 1 + (_DWORD)i];
        while ( 1 )
        {
          v49 = *(unsigned __int8 *)v42;
          v50 = v49 == 32;
          if ( v49 != 32 )
            v50 = v49 == 9;
          if ( !v50 )
            break;
          --v43;
          ++v42;
          if ( !v43 )
          {
            v43 = 0;
            goto LABEL_96;
          }
        }
      }
      v48 = v42;
LABEL_96:
      v13 = (char *)(v47 + 1);
      if ( memchr(v48, 9, v43) )
      {
        freecookie(v134);
        v31 = 1;
        if ( v133 && (*((_BYTE *)&v133->set + 1337) & 0x20) != 0 )
          Curl_infof(v133, "cookie contains TAB, dropping");
        goto LABEL_51;
      }
      httpheader = (_BYTE *)(Curl_cookie_loadfiles + 1);
    }
    else
    {
      v43 = 0;
      httpheader = 0;
      v48 = 0;
    }
    v51 = v41 > 0xFFE;
    if ( v41 <= 0xFFE )
      v51 = v43 > 0xFFE;
    if ( !v51 && v43 + v41 <= 0x1000 )
    {
      if ( v33 == 95 && v41 >= 7 && i[1] == 95 )
      {
        if ( curl_strnequal("__Secure-", i, 9) )
        {
          v52 = v134;
          v53 = v134->prefix | 1;
        }
        else
        {
          if ( !curl_strnequal("__Host-", i, 7) )
            goto LABEL_117;
          v52 = v134;
          v53 = v134->prefix | 2;
        }
        v52->prefix = v53;
      }
LABEL_117:
      if ( !*p_name )
      {
        v31 = 6;
        if ( httpheader )
        {
          httpheader = (const char *)&v134->name;
          strstore(p_name, i, v41);
          strstore(p_value, v48, v43);
          v56 = *p_name;
          v57 = *p_name == 0;
          if ( *p_name )
          {
            v55 = *p_value;
            v57 = *p_value == 0;
          }
          if ( !v57 )
          {
            if ( !invalid_octets(v55) && !invalid_octets(v56) )
              goto LABEL_50;
            if ( v133 && (*((_BYTE *)&v133->set + 1337) & 0x20) != 0 )
              Curl_infof(v133, "invalid octets in name/value, cookie dropped");
          }
        }
        goto LABEL_131;
      }
      if ( !v43 )
      {
        if ( v41 == 8 )
        {
          if ( curl_strnequal("httponly", i, 8) )
          {
            v134->httponly = 1;
            goto LABEL_50;
          }
        }
        else if ( v41 == 6 && curl_strnequal("secure", i, 6) )
        {
          if ( !secure && cookies->running )
          {
            v31 = 6;
LABEL_131:
            v128 = 1;
            goto LABEL_51;
          }
          v134->secure = 1;
          goto LABEL_50;
        }
        if ( !httpheader )
          goto LABEL_50;
      }
      if ( v41 != 7 )
      {
        if ( v41 != 6 )
        {
          if ( v41 != 4 )
            goto LABEL_50;
          if ( !curl_strnequal("path", i, 4) )
            goto LABEL_50;
          httpheader = (const char *)&v134->path;
          strstore(str, v48, v43);
          v31 = 6;
          if ( *str )
          {
            httpheader = (const char *)v134;
            ((void (__fastcall *)(char *))*Curl_cfree)(v134->spath);
            v54 = sanitize_cookie_path(v134->path);
            v134->spath = v54;
            if ( v54 )
              goto LABEL_50;
          }
          goto LABEL_131;
        }
        v60 = curl_strnequal("domain", i, 6);
        v61 = v43 == 0;
        if ( v43 )
          v61 = v60 == 0;
        if ( v61 )
          goto LABEL_50;
        httpheader = v48 + 1;
        if ( *v48 == 46 )
          --v43;
        else
          httpheader = v48;
        v62 = domain;
        if ( bad_domain(httpheader, v43) )
          v62 = ":";
        v63 = httpheader;
        if ( v62 )
          v63 = v62;
        is_ipnum = Curl_host_is_ipnum(v63);
        v65 = is_ipnum;
        domain = v62;
        if ( !v62 )
          goto LABEL_169;
        if ( !is_ipnum )
          goto LABEL_326;
        if ( !strncmp(httpheader, v62, v43) && v43 == strlen(v62) )
          goto LABEL_169;
        if ( !v65 )
        {
LABEL_326:
          if ( cookie_tailmatch(httpheader, v43, v62) )
          {
LABEL_169:
            strstore(p_domain, httpheader, v43);
            v66 = *p_domain == 0;
            v67 = v65 | v66;
            v31 = 0;
            if ( !*p_domain )
              v31 = 6;
            if ( v67 )
            {
              v128 |= v66;
            }
            else
            {
              v134->tailmatch = 1;
              v31 = 0;
            }
LABEL_189:
            if ( !v31 )
              v31 = 0;
            goto LABEL_51;
          }
        }
        v31 = 0;
        v128 = 1;
        if ( v133 && (*((_BYTE *)&v133->set + 1337) & 0x20) != 0 )
          Curl_infof(v133, "skipped cookie with bad tailmatch domain: %s", httpheader);
        goto LABEL_189;
      }
      if ( curl_strnequal("version", i, 7) )
      {
LABEL_50:
        v31 = 0;
        goto LABEL_51;
      }
      if ( !curl_strnequal("max-age", i, 7) )
      {
        httpheader = (const char *)&v134->expires;
        if ( !curl_strnequal("expires", i, 7) || v43 > 0x7F || *p_expires )
          goto LABEL_50;
        memcpy(save_ptr, v48, v43);
        *((_BYTE *)save_ptr + v43) = 0;
        v68 = Curl_getdate_capped(save_ptr);
        *p_expires = v68;
        if ( v68 )
        {
          if ( v68 > -1 )
            goto LABEL_50;
          *(_DWORD *)p_expires = 0;
        }
        else
        {
          *(_DWORD *)p_expires = 1;
        }
        HIDWORD(v134->expires) = 0;
        goto LABEL_50;
      }
      v58 = v48 + 1;
      if ( *v48 != 34 )
        v58 = v48;
      httpheader = (const char *)&v134->expires;
      v59 = curlx_strtoofft(v58, 0, 10, p_expires);
      if ( v59 )
      {
        if ( v59 != 2 )
        {
          if ( v59 != 1 )
            goto LABEL_50;
LABEL_194:
          *(_DWORD *)p_expires = -1;
          HIDWORD(v134->expires) = 0x7FFFFFFF;
          goto LABEL_50;
        }
      }
      else if ( *p_expires )
      {
        LODWORD(v121) = ~v131;
        HIDWORD(v121) = 0x7FFFFFFF - (v131 >> 0x1F);
        if ( v121 >= *p_expires )
        {
          *p_expires += v131;
          goto LABEL_50;
        }
        goto LABEL_194;
      }
      *(_DWORD *)p_expires = 1;
      HIDWORD(v134->expires) = 0;
      goto LABEL_50;
    }
    freecookie(v134);
    v31 = 1;
    if ( v133 && (*((_BYTE *)&v133->set + 1337) & 0x20) != 0 )
      Curl_infof(v133, "oversized cookie dropped, name/val %zu + %zu bytes", v41, v43);
LABEL_51:
    if ( v31 )
      break;
    while ( 1 )
    {
LABEL_69:
      v39 = (unsigned __int8)*v13;
      v40 = v39 == 32;
      if ( v39 != 32 )
        v40 = v39 == 9;
      if ( !v40 )
        break;
      ++v13;
    }
    if ( v39 == 59 )
      ++v13;
    v31 = v39 - 0x3B;
    if ( v39 != 0x3B )
      v31 = 6;
  }
  while ( !v31 );
  if ( v31 == 6 )
  {
    v69 = v128;
    if ( (v128 & 1) != 0 )
    {
      noexpire = v127;
      httpheader = path;
    }
    else
    {
      httpheader = path;
      if ( domain )
      {
        noexpire = v127;
        if ( !v134->domain )
        {
          v71 = ((int (__fastcall *)(const char *))*Curl_cstrdup)(domain);
          v134->domain = (char *)v71;
          v69 = v128 | (v71 == 0);
        }
      }
      else
      {
        noexpire = v127;
      }
    }
    if ( (v69 & 1) != 0
      || !httpheader
      || v134->path
      || ((v72 = strchr(httpheader, 63)) == 0 ? (v73 = strrchr(httpheader, 47)) : (v73 = (char *)Curl_memrchr(
                                                                                                   httpheader,
                                                                                                   47,
                                                                                                   v72 - httpheader)),
          !v73) )
    {
LABEL_214:
      if ( (v69 & 1) != 0 || !v134->name )
        goto LABEL_225;
      ++v133->req.setcookies;
      v31 = 0;
      v14 = v134;
    }
    else
    {
      v74 = v73 - httpheader;
      v75 = (char *)((int (__fastcall *)(int))*Curl_cmalloc)(v73 - httpheader + 2);
      v134->path = v75;
      if ( v75 )
      {
        v76 = v74 + 1;
        memcpy(v75, httpheader, v76);
        httpheader = (const char *)v134;
        v134->path[v76] = 0;
        v77 = sanitize_cookie_path(v134->path);
        v134->spath = v77;
        v69 |= v77 == 0;
        goto LABEL_214;
      }
LABEL_225:
      v14 = v134;
      freecookie(v134);
LABEL_226:
      v31 = 1;
    }
  }
  else
  {
    v14 = v134;
    noexpire = v127;
  }
  if ( v31 )
    return 0;
LABEL_228:
  if ( (v14->prefix & 1) != 0 && !v14->secure )
    goto LABEL_296;
  if ( (v14->prefix & 2) != 0 )
  {
    v100 = (const char *)v14->secure;
    v101 = v100 == 0;
    if ( v14->secure )
    {
      v100 = v14->path;
      v101 = v100 == 0;
    }
    if ( v101 || strcmp(v100, "/") || v14->tailmatch )
      goto LABEL_296;
  }
  v78 = cookies;
  if ( !cookies->running && cookies->newsession && !v14->expires )
    goto LABEL_296;
  v14->livecookie = cookies->running;
  v79 = cookies->lastct + 1;
  cookies->lastct = v79;
  v14->creationtime = v79;
  if ( !noexpire )
    remove_expired(cookies);
  v132 = cookiehash(v14->domain);
  next = cookies->cookies[v132];
  if ( next )
  {
    v81 = 0;
    v82 = 0;
    v83 = 0;
    while ( 2 )
    {
      v84 = next;
      if ( !curl_strequal(next->name, v14->name) )
        goto LABEL_251;
      v85 = v84->domain;
      if ( v85 )
      {
        v86 = v134->domain;
        if ( v86 )
        {
          v87 = curl_strequal(v85, v86) != 0;
          goto LABEL_245;
        }
        goto LABEL_249;
      }
      v87 = v134->domain == 0;
LABEL_245:
      v88 = !v87;
      if ( v87 )
      {
        httpheader = v84->spath;
        v88 = httpheader == 0;
      }
      if ( v88 )
        goto LABEL_249;
      spath = v134->spath;
      v94 = spath == 0;
      if ( spath )
        v94 = !v84->secure;
      if ( v94 )
        goto LABEL_249;
      v95 = !v134->secure;
      if ( !v134->secure )
        v95 = secure == 0;
      if ( !v95 )
      {
LABEL_249:
        v89 = 0;
      }
      else
      {
        v96 = strchr(httpheader + 1, 47);
        if ( v96 )
          v97 = v96 - httpheader;
        else
          v97 = strlen(httpheader);
        if ( curl_strnequal(httpheader, spath, v97) )
        {
          if ( v133 && (*((_BYTE *)&v133->set + 1337) & 0x20) != 0 )
            Curl_infof(
              v133,
              "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
              v134->name,
              v134->domain);
          freecookie(v134);
          v89 = 1;
        }
        else
        {
          v89 = 0;
        }
        if ( !v89 )
          v89 = 0;
      }
      v14 = v134;
      if ( v89 )
        return 0;
LABEL_251:
      if ( !v81 )
      {
        if ( curl_strequal(v84->name, v14->name) )
        {
          v90 = v84->domain;
          if ( v90 )
          {
            v91 = (int)v14->domain;
            if ( v91 && curl_strequal(v90, v91) )
            {
              v92 = v84->tailmatch - v14->tailmatch;
              goto LABEL_269;
            }
          }
          else
          {
            v92 = (int)v14->domain;
LABEL_269:
            v91 = -v92;
            v83 |= v92 == 0;
          }
          if ( (v83 & 1) != 0 )
          {
            v98 = v84->spath;
            v99 = v98 == 0;
            if ( v98 )
            {
              v91 = (int)v14->spath;
              v99 = v91 == 0;
            }
            if ( !v99 && !curl_strequal(v98, v91) )
            {
              v83 = 0;
LABEL_236:
              v81 = (Cookie *)(v83 & 1);
              if ( (v83 & 1) != 0 )
              {
                v82 = v84;
                v81 = v14;
              }
              goto LABEL_238;
            }
            v83 &= (v84->spath != 0) ^ (v14->spath == 0);
          }
          if ( (v83 & 1) != 0 && !v14->livecookie && v84->livecookie )
            goto LABEL_296;
          goto LABEL_236;
        }
        v81 = 0;
      }
LABEL_238:
      next = v84->next;
      if ( !v84->next )
        goto LABEL_302;
      continue;
    }
  }
  LOBYTE(v83) = 0;
  v82 = 0;
  v81 = 0;
  v84 = 0;
LABEL_302:
  if ( v81 )
  {
    name = v82->name;
    creationtime = v82->creationtime;
    v81->next = v82->next;
    v81->creationtime = creationtime;
    v105 = (void (__fastcall **)(char *))Curl_cfree;
    ((void (__fastcall *)(char *))*Curl_cfree)(name);
    (*v105)(v82->value);
    (*v105)(v82->domain);
    (*v105)(v82->path);
    (*v105)(v82->spath);
    v106 = v81->name;
    value = v81->value;
    v108 = v81->path;
    v109 = v81->spath;
    v110 = v81->domain;
    v82->next = v81->next;
    v82->name = v106;
    v82->value = value;
    v82->path = v108;
    v82->spath = v109;
    v82->domain = v110;
    expires_high = HIDWORD(v81->expires);
    v112 = *(_DWORD *)&v81->tailmatch;
    v113 = v81->creationtime;
    v114 = *(_DWORD *)&v81->prefix;
    v115 = *((_DWORD *)&v81->prefix + 1);
    LODWORD(v82->expires) = v81->expires;
    HIDWORD(v82->expires) = expires_high;
    *(_DWORD *)&v82->tailmatch = v112;
    v82->creationtime = v113;
    *(_DWORD *)&v82->prefix = v114;
    *((_DWORD *)&v82->prefix + 1) = v115;
    v78 = cookies;
    ((void (__fastcall *)(Cookie *))*Curl_cfree)(v81);
    v14 = v82;
  }
  v116 = v133 == 0;
  if ( v133 )
    v116 = !v78->running;
  if ( !v116 && (*((_BYTE *)&v133->set + 1337) & 0x20) != 0 )
  {
    v120 = "Added";
    if ( (v83 & 1) != 0 )
      v120 = "Replaced";
    Curl_infof(
      v133,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
      v120,
      v14->name,
      v14->value,
      v14->domain,
      v14->path,
      v14->expires);
  }
  if ( (v83 & 1) == 0 )
  {
    if ( v84 )
      v84->next = v14;
    else
      v78->cookies[v132] = v14;
    ++v78->numcookies;
  }
  expires = v14->expires;
  if ( expires )
  {
    next_expiration = v78->next_expiration;
    p_next_expiration = &v78->next_expiration;
    if ( expires < __SPAIR64__(*((_DWORD *)p_next_expiration + 1), next_expiration) )
      *p_next_expiration = expires;
  }
  return v14;
}
