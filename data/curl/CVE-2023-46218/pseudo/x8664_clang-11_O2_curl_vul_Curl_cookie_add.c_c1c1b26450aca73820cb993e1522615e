Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  __int64 v10; // r12
  time_t v11; // rax
  __int64 v12; // r14
  __int64 v13; // rax
  __int64 v14; // rbx
  const char *v15; // r12
  char *i; // rbx
  char v17; // r15
  size_t v18; // rax
  size_t v19; // rcx
  unsigned __int64 v20; // rbp
  char v21; // al
  size_t v22; // r14
  size_t v23; // rax
  size_t v24; // rdx
  size_t v25; // r13
  size_t v26; // r14
  const char *v27; // rax
  char v28; // cl
  const char *v29; // r12
  __int64 j; // rcx
  char v31; // dl
  size_t v32; // r14
  char v33; // r12
  _QWORD *v34; // r15
  __int64 v35; // rax
  const char *v36; // rax
  _BYTE *v37; // rbx
  size_t v38; // rax
  size_t v39; // rbp
  __int64 v40; // rax
  __int64 v41; // rax
  const char *v42; // rbx
  __int64 v43; // rbp
  char v44; // al
  const char *v45; // rdi
  int v46; // eax
  int v47; // eax
  const char *v48; // rbx
  size_t v49; // r14
  _BYTE *v50; // rax
  const char *v51; // rbp
  char is_ipnum; // r12
  const char *v53; // rdi
  size_t v54; // rax
  size_t v55; // r12
  const char *v56; // r15
  __int64 v57; // rax
  __int64 v58; // rax
  __int64 v59; // rax
  __int64 v60; // rax
  char v61; // cl
  __int64 v62; // rax
  char *v63; // rax
  char *v64; // rax
  char *v65; // rax
  const char *v66; // rbp
  int v67; // r15d
  char v68; // r14
  __int64 v69; // rax
  __int64 v70; // rax
  const char *v71; // rax
  _BYTE *v72; // rbp
  size_t v73; // rax
  size_t v74; // rbx
  __int64 v75; // rax
  __int64 v76; // rax
  __int64 v77; // rbx
  __int64 v78; // rax
  __int64 v79; // rax
  char v80; // al
  char *v81; // rax
  __int64 v82; // rax
  _BOOL4 v83; // r15d
  char v84; // al
  char v85; // r14
  __int64 v86; // rbx
  const char *v87; // rbp
  __int64 v88; // rax
  char *v89; // rax
  char *v90; // rax
  signed __int64 v91; // rbx
  void *v92; // rax
  size_t v93; // rbx
  const char *v94; // rax
  _BYTE *v95; // rbx
  size_t v96; // rax
  size_t v97; // rbp
  __int64 v98; // rax
  char v99; // al
  char v100; // al
  bool running; // al
  int v102; // eax
  time_t v103; // rax
  CookieInfo *v104; // rcx
  time_t v105; // r15
  curl_off_t next_expiration; // rax
  size_t v107; // rax
  CookieInfo *v108; // rcx
  size_t v109; // rbp
  Cookie *next; // rax
  __int64 v111; // r13
  Cookie *v112; // r14
  char *v113; // rdi
  __int64 v114; // rsi
  const char *spath; // r15
  __int64 v116; // rbx
  char *v117; // rax
  size_t v118; // rax
  char *v119; // rdi
  __int64 v120; // rsi
  __int64 v121; // rbx
  bool v122; // zf
  char *v123; // rdi
  __int64 v124; // rsi
  _QWORD *v125; // rdi
  const char *v126; // rdi
  __int128 v127; // xmm0
  __int128 v128; // xmm1
  __int128 v129; // xmm2
  char v131; // r15
  char *v132; // rax
  Cookie *v133; // rbx
  Cookie **v134; // r13
  Cookie *v135; // r14
  Cookie *v136; // rbp
  curl_off_t expires; // rax
  Cookie **p_next; // rax
  const char *v139; // rdx
  Cookie **v140; // rax
  curl_off_t v141; // rax
  __int64 v142; // [rsp+0h] [rbp-108h]
  const char *s; // [rsp+8h] [rbp-100h]
  void *sa; // [rsp+8h] [rbp-100h]
  void *sb; // [rsp+8h] [rbp-100h]
  char *sc; // [rsp+8h] [rbp-100h]
  char v149; // [rsp+24h] [rbp-E4h]
  __int64 *v152; // [rsp+38h] [rbp-D0h]
  __int64 v153; // [rsp+40h] [rbp-C8h]
  __int64 v154; // [rsp+48h] [rbp-C0h]
  char *dest[23]; // [rsp+50h] [rbp-B8h] BYREF

  v10 = 0LL;
  v11 = time(0LL);
  if ( data->req.setcookies > 0x31u )
    return (Cookie *)v10;
  v12 = v11;
  v13 = Curl_ccalloc(1LL, 72LL);
  if ( !v13 )
    return 0LL;
  v14 = v13;
  v142 = v13;
  if ( !httpheader )
  {
    dest[0] = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 10;
      *(_BYTE *)(v14 + 59) = 1;
      if ( *lineptr == 35 )
        goto LABEL_142;
    }
    else if ( *lineptr == 35 )
    {
      goto LABEL_142;
    }
    v63 = strchr(lineptr, 13);
    if ( v63 )
      *v63 = 0;
    v64 = strchr(lineptr, 10);
    if ( v64 )
      *v64 = 0;
    v65 = strtok_r(lineptr, "\t", dest);
    if ( !v65 )
      goto LABEL_313;
    v66 = v65;
    sa = (void *)(v14 + 48);
    v67 = 0;
    v68 = 0;
    while ( 1 )
    {
      switch ( v67 )
      {
        case 0:
          if ( *v66 == 46 )
            ++v66;
          v69 = Curl_cstrdup(v66);
          *(_QWORD *)(v14 + 40) = v69;
          if ( !v69 )
            v68 = 1;
          v67 = 0;
          goto LABEL_199;
        case 1:
          *(_BYTE *)(v14 + 56) = (unsigned int)curl_strequal(v66, "TRUE") != 0;
          v67 = 1;
          goto LABEL_199;
        case 2:
          if ( !strcmp("TRUE", v66) || !strcmp("FALSE", v66) )
          {
            v77 = Curl_cstrdup("/");
            *(_QWORD *)(v142 + 24) = v77;
            v78 = Curl_cstrdup("/");
            if ( !v78 )
              v68 = 1;
            v122 = v77 == 0;
            v14 = v142;
            *(_QWORD *)(v142 + 32) = v78;
            if ( v122 )
              v68 = 1;
            goto LABEL_183;
          }
          v70 = Curl_cstrdup(v66);
          *(_QWORD *)(v14 + 24) = v70;
          v67 = 2;
          if ( !v70 )
            goto LABEL_187;
          v71 = (const char *)Curl_cstrdup(v70);
          if ( !v71 )
          {
            v72 = 0LL;
            goto LABEL_196;
          }
          v72 = v71;
          v73 = strlen(v71);
          v74 = v73;
          if ( *v72 == 34 )
          {
            memmove(v72, v72 + 1, v73);
            --v74;
          }
          if ( v74 )
          {
            if ( v72[v74 - 1] == 34 )
              v72[--v74] = 0;
            if ( *v72 == 47 )
            {
              if ( v74 && v72[v74 - 1] == 47 )
                v72[v74 - 1] = 0;
              goto LABEL_195;
            }
LABEL_192:
            Curl_cfree(v72);
            v79 = Curl_memdup("/", 2LL);
            if ( v79 )
            {
              v72 = (_BYTE *)v79;
              *(_BYTE *)(v79 + 1) = 0;
            }
            else
            {
              v72 = 0LL;
            }
            goto LABEL_195;
          }
          if ( *v72 != 47 )
            goto LABEL_192;
LABEL_195:
          v14 = v142;
LABEL_196:
          *(_QWORD *)(v14 + 32) = v72;
          v80 = 1;
          if ( v72 )
            v80 = v68;
          v68 = v80;
LABEL_199:
          v81 = strtok_r(0LL, "\t", dest);
          ++v67;
          if ( !v81 || (v66 = v81, (v68 & 1) != 0) )
          {
            if ( v67 == 6 )
            {
              v82 = Curl_cstrdup(&L_str_22);
              *(_QWORD *)(v14 + 16) = v82;
              v122 = v82 == 0;
              v83 = v82 == 0;
              v84 = v68;
              v68 = 1;
              if ( !v122 )
                v68 = v84;
              v67 = v83 ^ 7;
            }
            if ( (v68 & 1) == 0 && v67 == 7 )
              goto LABEL_249;
            goto LABEL_313;
          }
          break;
        case 3:
LABEL_183:
          *(_BYTE *)(v14 + 57) = 0;
          v67 = 3;
          if ( (unsigned int)curl_strequal(v66, "TRUE") )
          {
            if ( !secure && !c->running )
              goto LABEL_187;
            *(_BYTE *)(v14 + 57) = 1;
          }
          goto LABEL_199;
        case 4:
          if ( (unsigned int)curlx_strtoofft(v66, 0LL, 10LL, sa) )
            v68 = 1;
          v67 = 4;
          goto LABEL_199;
        case 5:
          v75 = Curl_cstrdup(v66);
          *(_QWORD *)(v14 + 8) = v75;
          v67 = 5;
          if ( v75 )
          {
            if ( (unsigned int)curl_strnequal("__Secure-", v75, 9LL) )
            {
              *(_BYTE *)(v14 + 64) |= 1u;
            }
            else if ( (unsigned int)curl_strnequal("__Host-", *(_QWORD *)(v14 + 8), 7LL) )
            {
              *(_BYTE *)(v14 + 64) |= 2u;
            }
          }
          else
          {
LABEL_187:
            v68 = 1;
          }
          goto LABEL_199;
        case 6:
          v76 = Curl_cstrdup(v66);
          *(_QWORD *)(v14 + 16) = v76;
          if ( !v76 )
            v68 = 1;
          v67 = 6;
          goto LABEL_199;
        default:
          goto LABEL_199;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_142:
    Curl_cfree(v14);
    return 0LL;
  }
  v152 = (__int64 *)(v14 + 48);
  v153 = 0x7FFFFFFFFFFFFFFFLL - v12;
  v149 = 0;
  v154 = v12;
  while ( 1 )
  {
    v15 = lineptr + 1;
    for ( i = lineptr; ; ++i )
    {
      v17 = *i;
      if ( *i != 32 && v17 != 9 )
        break;
      ++v15;
    }
    v18 = strcspn(i, ";\t\r\n=");
    if ( !v18 )
    {
      lineptr = i;
      goto LABEL_69;
    }
    v19 = v18;
    lineptr = &i[v18];
    v20 = v18;
    do
    {
      v21 = i[v20 - 1];
      if ( v21 != 32 && v21 != 9 )
      {
        if ( *lineptr != 61 )
          goto LABEL_28;
LABEL_16:
        s = &i[v19 + 1];
        v22 = v19;
        v23 = strcspn(s, ";\r\n");
        v24 = v22;
        v25 = v22 + v23;
        if ( v23 )
        {
          v26 = v23;
          v27 = &v15[v25];
          while ( 1 )
          {
            v28 = *(v27 - 1);
            if ( v28 != 32 && v28 != 9 )
              break;
            --v26;
            --v27;
            if ( !v26 )
              goto LABEL_29;
          }
          v29 = &v15[v24];
          for ( j = 0LL; j != v26; ++j )
          {
            v31 = v29[j];
            if ( v31 != 32 && v31 != 9 )
            {
              v32 = v26 - j;
              s = &v29[j];
              goto LABEL_30;
            }
          }
          v32 = 0LL;
          s = v27;
        }
        else
        {
LABEL_29:
          v32 = 0LL;
        }
LABEL_30:
        if ( !memchr(s, 9, v32) )
        {
          lineptr = &i[v25 + 1];
          v33 = 1;
          goto LABEL_32;
        }
        Curl_cfree(*(_QWORD *)(v142 + 40));
        Curl_cfree(*(_QWORD *)(v142 + 24));
        Curl_cfree(*(_QWORD *)(v142 + 32));
        Curl_cfree(*(_QWORD *)(v142 + 8));
        Curl_cfree(*(_QWORD *)(v142 + 16));
        Curl_cfree(v142);
        if ( (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
        {
          v10 = 0LL;
          Curl_infof(data, "cookie contains TAB, dropping");
          return (Cookie *)v10;
        }
        return 0LL;
      }
      --v20;
    }
    while ( v20 );
    v20 = 0LL;
    if ( *lineptr == 61 )
      goto LABEL_16;
LABEL_28:
    v32 = 0LL;
    v33 = 0;
    s = 0LL;
LABEL_32:
    if ( v20 > 0xFFE || v32 > 0xFFE || v32 + v20 >= 0x1001 )
    {
      Curl_cfree(*(_QWORD *)(v142 + 40));
      Curl_cfree(*(_QWORD *)(v142 + 24));
      Curl_cfree(*(_QWORD *)(v142 + 32));
      Curl_cfree(*(_QWORD *)(v142 + 8));
      Curl_cfree(*(_QWORD *)(v142 + 16));
      Curl_cfree(v142);
      if ( (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
      {
        v10 = 0LL;
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v20, v32);
        return (Cookie *)v10;
      }
      return 0LL;
    }
    if ( v17 == 95 && v20 >= 7 && i[1] == 95 )
    {
      if ( (unsigned int)curl_strnequal("__Secure-", i, 9LL) )
      {
        *(_BYTE *)(v142 + 64) |= 1u;
      }
      else if ( (unsigned int)curl_strnequal("__Host-", i, 7LL) )
      {
        *(_BYTE *)(v142 + 64) |= 2u;
      }
    }
    if ( !*(_QWORD *)(v142 + 8) )
    {
      v34 = (_QWORD *)v142;
      if ( v33 )
      {
        Curl_cfree(0LL);
        v40 = Curl_memdup(i, v20 + 1);
        *(_QWORD *)(v142 + 8) = v40;
        if ( v40 )
          *(_BYTE *)(v40 + v20) = 0;
        Curl_cfree(*(_QWORD *)(v142 + 16));
        v41 = Curl_memdup(s, v32 + 1);
        *(_QWORD *)(v142 + 16) = v41;
        if ( v41 )
          *(_BYTE *)(v41 + v32) = 0;
        v42 = *(const char **)(v142 + 8);
        if ( v42 )
        {
          v43 = *(_QWORD *)(v142 + 16);
          if ( v43 )
          {
            if ( !*(_BYTE *)(v43 + strcspn(*(const char **)(v142 + 16), &invalid_octets_badoctets))
              && !v42[strcspn(v42, &invalid_octets_badoctets)] )
            {
              goto LABEL_69;
            }
            v34 = (_QWORD *)v142;
            if ( (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
              Curl_infof(data, "invalid octets in name/value, cookie dropped");
          }
        }
      }
      goto LABEL_302;
    }
    if ( v32 )
      goto LABEL_44;
    if ( v20 == 8 )
    {
      if ( !(unsigned int)curl_strnequal("httponly", i, 8LL) )
        goto LABEL_102;
      *(_BYTE *)(v142 + 59) = 1;
      goto LABEL_69;
    }
    if ( v20 == 6 && (unsigned int)curl_strnequal("secure", i, 6LL) )
    {
      v34 = (_QWORD *)v142;
      if ( secure || !c->running )
      {
        *(_BYTE *)(v142 + 57) = 1;
        goto LABEL_69;
      }
LABEL_302:
      Curl_cfree(v34[5]);
      Curl_cfree(v34[3]);
      Curl_cfree(v34[4]);
      Curl_cfree(v34[1]);
      Curl_cfree(v34[2]);
      v125 = v34;
LABEL_303:
      Curl_cfree(v125);
      return 0LL;
    }
LABEL_102:
    if ( !v33 )
      goto LABEL_69;
LABEL_44:
    if ( v20 != 7 )
      break;
    if ( (unsigned int)curl_strnequal("version", i, 7LL) )
      goto LABEL_69;
    if ( (unsigned int)curl_strnequal("max-age", i, 7LL) )
    {
      v45 = s + 1;
      if ( *s != 34 )
        v45 = s;
      v46 = curlx_strtoofft(v45, 0LL, 10LL, v152);
      if ( v46 )
      {
        if ( v46 == 2 )
        {
          *v152 = 1LL;
          goto LABEL_69;
        }
        if ( v46 != 1 )
          goto LABEL_69;
      }
      else
      {
        v62 = *v152;
        if ( !*v152 )
        {
          *v152 = 1LL;
          goto LABEL_69;
        }
        if ( v153 >= v62 )
        {
          *v152 = v154 + v62;
          goto LABEL_69;
        }
      }
      *v152 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_69;
    }
    if ( (unsigned int)curl_strnequal("expires", i, 7LL) && v32 <= 0x7F && !*v152 )
    {
      memcpy(dest, s, v32);
      *((_BYTE *)dest + v32) = 0;
      v58 = Curl_getdate_capped(dest);
      *v152 = v58;
      if ( v58 )
      {
        if ( v58 < 0 )
          *v152 = 0LL;
      }
      else
      {
        *v152 = 1LL;
      }
    }
    do
    {
      do
LABEL_69:
        v44 = *lineptr++;
      while ( v44 == 32 );
    }
    while ( v44 == 9 );
    if ( v44 != 59 )
      goto LABEL_208;
  }
  if ( v20 != 6 )
  {
    if ( v20 != 4 || !(unsigned int)curl_strnequal("path", i, 4LL) )
      goto LABEL_69;
    v34 = (_QWORD *)v142;
    Curl_cfree(*(_QWORD *)(v142 + 24));
    v35 = Curl_memdup(s, v32 + 1);
    *(_QWORD *)(v142 + 24) = v35;
    if ( !v35 )
      goto LABEL_302;
    *(_BYTE *)(v35 + v32) = 0;
    if ( !*(_QWORD *)(v142 + 24) )
      goto LABEL_302;
    Curl_cfree(*(_QWORD *)(v142 + 32));
    v36 = (const char *)Curl_cstrdup(*(_QWORD *)(v142 + 24));
    if ( v36 )
    {
      v37 = v36;
      v38 = strlen(v36);
      v39 = v38;
      if ( *v37 == 34 )
      {
        memmove(v37, v37 + 1, v38);
        --v39;
      }
      if ( v39 )
      {
        if ( v37[v39 - 1] == 34 )
          v37[--v39] = 0;
        if ( *v37 == 47 )
        {
          if ( v39 && v37[v39 - 1] == 47 )
            v37[v39 - 1] = 0;
LABEL_118:
          *(_QWORD *)(v142 + 32) = v37;
          goto LABEL_69;
        }
      }
      else if ( *v37 == 47 )
      {
        goto LABEL_118;
      }
      Curl_cfree(v37);
      v57 = Curl_memdup("/", 2LL);
      if ( v57 )
      {
        v37 = (_BYTE *)v57;
        *(_BYTE *)(v57 + 1) = 0;
        goto LABEL_118;
      }
    }
    v34 = (_QWORD *)v142;
    *(_QWORD *)(v142 + 32) = 0LL;
    goto LABEL_302;
  }
  v47 = curl_strnequal("domain", i, 6LL);
  if ( !v32 || !v47 )
    goto LABEL_69;
  v48 = s + 1;
  if ( *s != 46 )
    v48 = s;
  v49 = v32 - (*s == 46);
  if ( v49 == 9 && (unsigned int)curl_strnequal(v48, "localhost", 9LL)
    || (v50 = memchr(v48, 46, v49)) != 0LL && (unsigned __int64)(&v48[v49] - v50) > 1 )
  {
    v53 = domain;
    if ( !domain )
      v53 = v48;
    is_ipnum = Curl_host_is_ipnum(v53);
    if ( !domain )
    {
      domain = 0LL;
      goto LABEL_126;
    }
    v51 = domain;
    if ( is_ipnum )
      goto LABEL_96;
  }
  else
  {
    v51 = ":";
    if ( (unsigned __int8)Curl_host_is_ipnum(":") )
    {
LABEL_96:
      domain = v51;
      if ( strncmp(v48, v51, v49) )
        goto LABEL_113;
      is_ipnum = 1;
      if ( v49 != strlen(v51) )
        goto LABEL_113;
      goto LABEL_126;
    }
  }
  v54 = strlen(v51);
  domain = v51;
  if ( v54 < v49
    || (v55 = v54, v56 = &v51[v54 - v49], !(unsigned int)curl_strnequal(v48, v56, v49))
    || v55 != v49 && *(v56 - 1) != 46 )
  {
LABEL_113:
    v149 = 1;
    if ( (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
      Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v48);
    goto LABEL_69;
  }
  is_ipnum = 0;
LABEL_126:
  v34 = (_QWORD *)v142;
  Curl_cfree(*(_QWORD *)(v142 + 40));
  v59 = Curl_memdup(v48, v49 + 1);
  *(_QWORD *)(v142 + 40) = v59;
  if ( !v59 )
    goto LABEL_302;
  *(_BYTE *)(v59 + v49) = 0;
  v60 = *(_QWORD *)(v142 + 40);
  v61 = v149;
  if ( !v60 )
    v61 = 1;
  if ( !((v60 == 0) | (unsigned __int8)is_ipnum) )
  {
    *(_BYTE *)(v142 + 56) = 1;
    goto LABEL_69;
  }
  v149 = v61;
  if ( v60 )
    goto LABEL_69;
LABEL_208:
  v85 = v149;
  if ( (v149 & 1) != 0 )
  {
    v86 = v142;
    v87 = path;
  }
  else
  {
    v86 = v142;
    v87 = path;
    if ( domain )
    {
      if ( !*(_QWORD *)(v142 + 40) )
      {
        v88 = Curl_cstrdup(domain);
        *(_QWORD *)(v142 + 40) = v88;
        v85 = 1;
        if ( v88 )
          v85 = v149;
      }
    }
  }
  if ( (v85 & 1) != 0 || !v87 || *(_QWORD *)(v86 + 24) )
    goto LABEL_246;
  v89 = strchr(v87, 63);
  v90 = v89 ? (char *)Curl_memrchr(v87, 47LL, v89 - v87) : strrchr(v87, 47);
  if ( !v90 )
    goto LABEL_246;
  v91 = v90 - v87;
  v92 = (void *)Curl_cmalloc(v90 - v87 + 2);
  v34 = (_QWORD *)v142;
  *(_QWORD *)(v142 + 24) = v92;
  if ( !v92 )
    goto LABEL_302;
  v93 = v91 + 1;
  memcpy(v92, path, v93);
  *(_BYTE *)(*(_QWORD *)(v142 + 24) + v93) = 0;
  v94 = (const char *)Curl_cstrdup(*(_QWORD *)(v142 + 24));
  if ( !v94 )
  {
LABEL_243:
    v95 = 0LL;
    goto LABEL_244;
  }
  v95 = v94;
  v96 = strlen(v94);
  v97 = v96;
  if ( *v95 == 34 )
  {
    memmove(v95, v95 + 1, v96);
    --v97;
  }
  if ( !v97 )
  {
    if ( *v95 == 47 )
      goto LABEL_244;
    goto LABEL_241;
  }
  if ( v95[v97 - 1] == 34 )
    v95[--v97] = 0;
  if ( *v95 != 47 )
  {
LABEL_241:
    Curl_cfree(v95);
    v98 = Curl_memdup("/", 2LL);
    if ( v98 )
    {
      v95 = (_BYTE *)v98;
      *(_BYTE *)(v98 + 1) = 0;
      goto LABEL_244;
    }
    goto LABEL_243;
  }
  if ( v97 && v95[v97 - 1] == 47 )
    v95[v97 - 1] = 0;
LABEL_244:
  *(_QWORD *)(v142 + 32) = v95;
  v99 = v85;
  v85 = 1;
  if ( v95 )
    v85 = v99;
LABEL_246:
  v34 = (_QWORD *)v142;
  if ( (v85 & 1) != 0 || !*(_QWORD *)(v142 + 8) )
    goto LABEL_302;
  ++data->req.setcookies;
  v14 = v142;
LABEL_249:
  v100 = *(_BYTE *)(v14 + 64);
  if ( (v100 & 1) != 0 && !*(_BYTE *)(v14 + 57)
    || (v100 & 2) != 0
    && (!*(_BYTE *)(v14 + 57) || (v126 = *(const char **)(v14 + 24)) == 0LL || strcmp(v126, "/") || *(_BYTE *)(v14 + 56))
    || !(running = c->running) && c->newsession && !*(_QWORD *)(v14 + 48) )
  {
LABEL_313:
    Curl_cfree(*(_QWORD *)(v14 + 40));
    Curl_cfree(*(_QWORD *)(v14 + 24));
    Curl_cfree(*(_QWORD *)(v14 + 32));
    Curl_cfree(*(_QWORD *)(v14 + 8));
    Curl_cfree(*(_QWORD *)(v14 + 16));
    Curl_cfree(v14);
    return 0LL;
  }
  *(_BYTE *)(v14 + 58) = running;
  v102 = c->lastct + 1;
  c->lastct = v102;
  *(_DWORD *)(v14 + 60) = v102;
  if ( !noexpire )
  {
    v103 = time(0LL);
    v104 = c;
    v105 = v103;
    next_expiration = c->next_expiration;
    if ( v105 >= next_expiration || next_expiration == 0x7FFFFFFFFFFFFFFFLL )
    {
      c->next_expiration = 0x7FFFFFFFFFFFFFFFLL;
      v132 = 0LL;
      do
      {
        sc = v132;
        v133 = v104->cookies[(_QWORD)v132];
        if ( v133 )
        {
          v134 = &v104->cookies[(_QWORD)v132];
          v135 = 0LL;
          do
          {
            while ( 1 )
            {
              v136 = v133;
              v133 = v133->next;
              expires = v136->expires;
              if ( !expires || expires >= v105 )
                break;
              p_next = &v135->next;
              if ( !v135 )
                p_next = v134;
              *p_next = v133;
              --v104->numcookies;
              Curl_cfree(v136->domain);
              Curl_cfree(v136->path);
              Curl_cfree(v136->spath);
              Curl_cfree(v136->name);
              Curl_cfree(v136->value);
              Curl_cfree(v136);
              v104 = c;
              if ( !v133 )
                goto LABEL_318;
            }
            if ( expires && expires < v104->next_expiration )
              v104->next_expiration = expires;
            v135 = v136;
          }
          while ( v133 );
        }
LABEL_318:
        v132 = sc + 1;
      }
      while ( sc != (char *)&loc_3E );
    }
  }
  v10 = v142;
  v107 = cookiehash(*(const char *const *)(v142 + 40));
  v108 = c;
  v109 = v107;
  next = c->cookies[v107];
  if ( !next )
  {
    v112 = 0LL;
    v131 = 0;
    goto LABEL_333;
  }
  v111 = 0LL;
  v10 = 0LL;
  sb = 0LL;
  while ( 2 )
  {
    v112 = next;
    if ( (unsigned int)curl_strequal(next->name, *(_QWORD *)(v142 + 8)) )
    {
      v113 = v112->domain;
      v114 = *(_QWORD *)(v142 + 40);
      if ( v113 )
      {
        if ( v114 && (unsigned int)curl_strequal(v113, v114) )
        {
LABEL_265:
          spath = v112->spath;
          if ( spath )
          {
            v116 = *(_QWORD *)(v142 + 32);
            if ( v116 )
            {
              if ( v112->secure && !*(_BYTE *)(v142 + 57) && !secure )
              {
                v117 = strchr(spath + 1, 47);
                v118 = v117 ? v117 - spath : strlen(spath);
                if ( (unsigned int)curl_strnequal(spath, v116, v118) )
                {
                  if ( data && (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
                    Curl_infof(
                      data,
                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                      *(const char **)(v142 + 8),
                      *(const char **)(v142 + 40));
LABEL_301:
                  Curl_cfree(*(_QWORD *)(v142 + 40));
                  Curl_cfree(*(_QWORD *)(v142 + 24));
                  Curl_cfree(*(_QWORD *)(v142 + 32));
                  Curl_cfree(*(_QWORD *)(v142 + 8));
                  Curl_cfree(*(_QWORD *)(v142 + 16));
                  v125 = (_QWORD *)v142;
                  goto LABEL_303;
                }
              }
            }
          }
        }
      }
      else if ( !v114 )
      {
        goto LABEL_265;
      }
    }
    if ( !v111 )
    {
      if ( !(unsigned int)curl_strequal(v112->name, *(_QWORD *)(v142 + 8)) )
        goto LABEL_290;
      v119 = v112->domain;
      v120 = *(_QWORD *)(v142 + 40);
      if ( v119 )
      {
        v121 = (__int64)sb;
        if ( !v120 || !(unsigned int)curl_strequal(v119, v120) )
          goto LABEL_280;
        v122 = v112->tailmatch == *(_BYTE *)(v142 + 56);
      }
      else
      {
        v122 = v120 == 0;
        LOBYTE(v121) = (_BYTE)sb;
      }
      v121 = (unsigned __int8)v121;
      if ( v122 )
        v121 = 1LL;
LABEL_280:
      if ( (v121 & 1) == 0 )
      {
        sb = (void *)v121;
        v111 = 0LL;
        goto LABEL_260;
      }
      v123 = v112->spath;
      if ( v123 )
      {
        v124 = *(_QWORD *)(v142 + 32);
        if ( v124 )
        {
          if ( !(unsigned int)curl_strequal(v123, v124) )
          {
            sb = 0LL;
            v111 = 0LL;
            goto LABEL_260;
          }
          v123 = v112->spath;
        }
      }
      else
      {
        v123 = 0LL;
      }
      v111 = v142;
      v121 = (unsigned __int8)v121;
      if ( (v123 != 0LL) == (*(_QWORD *)(v142 + 32) == 0LL) )
        v121 = 0LL;
      sb = (void *)v121;
      if ( (v121 & 1) != 0 )
      {
        if ( *(_BYTE *)(v142 + 58) )
        {
          v10 = (__int64)v112;
        }
        else
        {
          v10 = (__int64)v112;
          if ( v112->livecookie )
            goto LABEL_301;
        }
        goto LABEL_260;
      }
LABEL_290:
      v111 = 0LL;
    }
LABEL_260:
    next = v112->next;
    if ( v112->next )
      continue;
    break;
  }
  if ( v111 )
  {
    *(_QWORD *)v111 = *(_QWORD *)v10;
    *(_DWORD *)(v111 + 60) = *(_DWORD *)(v10 + 60);
    Curl_cfree(*(_QWORD *)(v10 + 8));
    Curl_cfree(*(_QWORD *)(v10 + 16));
    Curl_cfree(*(_QWORD *)(v10 + 40));
    Curl_cfree(*(_QWORD *)(v10 + 24));
    Curl_cfree(*(_QWORD *)(v10 + 32));
    *(_QWORD *)(v10 + 64) = *(_QWORD *)(v111 + 64);
    v127 = *(_OWORD *)v111;
    v128 = *(_OWORD *)(v111 + 16);
    v129 = *(_OWORD *)(v111 + 32);
    *(_OWORD *)(v10 + 48) = *(_OWORD *)(v111 + 48);
    *(_OWORD *)(v10 + 32) = v129;
    *(_OWORD *)(v10 + 16) = v128;
    *(_OWORD *)v10 = v127;
    Curl_cfree(v111);
  }
  else
  {
    v10 = v142;
  }
  v108 = c;
  v131 = (char)sb;
LABEL_333:
  if ( data && v108->running && (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
  {
    v139 = "Replaced";
    if ( (v131 & 1) == 0 )
      v139 = "Added";
    Curl_infof(
      data,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
      v139,
      *(const char **)(v10 + 8),
      *(const char **)(v10 + 16),
      *(const char **)(v10 + 40),
      *(const char **)(v10 + 24),
      *(_QWORD *)(v10 + 48));
    v108 = c;
  }
  if ( (v131 & 1) == 0 )
  {
    v140 = &v108->cookies[v109];
    if ( v112 )
      v140 = &v112->next;
    *v140 = (Cookie *)v10;
    ++v108->numcookies;
  }
  v141 = *(_QWORD *)(v10 + 48);
  if ( v141 && v141 < v108->next_expiration )
    v108->next_expiration = v141;
  return (Cookie *)v10;
}
