Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        const char *domain,
        char *path,
        bool secure)
{
  Cookie *v8; // ebp
  int v9; // eax
  int v10; // esi
  const char *v11; // ecx
  const char *v12; // ebp
  const char *i; // esi
  size_t v14; // eax
  unsigned int v15; // edi
  char v16; // dl
  size_t v17; // eax
  size_t v18; // ecx
  const char *v19; // edx
  const char *v20; // ebp
  char v21; // cl
  size_t v22; // ebp
  const char *v23; // edx
  const char *v24; // ebp
  int v25; // eax
  size_t v26; // edi
  _DWORD *v27; // ebp
  int v28; // eax
  const char *v29; // eax
  char *v30; // edi
  size_t v31; // eax
  size_t v32; // esi
  int v33; // eax
  int v34; // eax
  const char *v35; // esi
  const char *v36; // edi
  size_t v37; // eax
  char v38; // al
  const char *v39; // ebp
  int v40; // eax
  const char *v41; // edi
  const char *v42; // edi
  int v43; // eax
  const char *v44; // esi
  size_t v45; // ebp
  _BYTE *v46; // eax
  const char *v47; // ebp
  size_t v48; // eax
  char v49; // cl
  const char *v50; // ebp
  int v51; // eax
  _DWORD *v52; // esi
  const char *v53; // eax
  int v54; // eax
  const char *v55; // eax
  char is_ipnum; // al
  size_t v57; // eax
  const char *v58; // ebp
  int v59; // eax
  int v60; // eax
  char v61; // di
  int v62; // eax
  char v63; // cl
  unsigned int v64; // eax
  unsigned int v65; // ecx
  char *v66; // edi
  char *v67; // eax
  char *v68; // eax
  char *v69; // eax
  const char *v70; // ebp
  int v71; // edx
  int v72; // ecx
  unsigned __int8 v73; // di
  int v74; // edi
  int v75; // eax
  const char *v76; // eax
  char *v77; // edi
  size_t v78; // eax
  size_t v79; // ebp
  char v80; // di
  int v81; // eax
  int v82; // ecx
  int v83; // edi
  int v84; // eax
  char v85; // di
  int v86; // eax
  int v87; // ecx
  int v88; // edi
  int v89; // eax
  int v90; // edi
  CookieInfo *v91; // eax
  int v92; // eax
  int v93; // ecx
  int v94; // eax
  char *v95; // eax
  int v96; // edi
  int v97; // eax
  _DWORD *v98; // edi
  char v99; // al
  char *v100; // esi
  int v101; // eax
  char v102; // cl
  const char *v103; // edi
  char v104; // si
  char *v105; // eax
  char *v106; // eax
  int v107; // edi
  void *v108; // eax
  size_t v109; // edi
  const char *v110; // eax
  char *v111; // edi
  size_t v112; // eax
  size_t v113; // ebp
  char v114; // al
  int v115; // eax
  char v116; // cl
  char v117; // al
  bool running; // al
  int v119; // eax
  unsigned int next_expiration; // eax
  unsigned int next_expiration_high; // ecx
  Cookie *next; // eax
  Cookie *v123; // edi
  Cookie *v124; // esi
  char *v125; // eax
  int v126; // ecx
  const char *spath; // ebp
  char *v128; // eax
  size_t v129; // eax
  char *v130; // eax
  int v131; // ecx
  bool v132; // zf
  int v133; // eax
  char *v134; // eax
  char *v135; // ecx
  int v136; // eax
  __int64 v138; // xmm0_8
  CookieInfo *v139; // edi
  char v140; // al
  int v141; // eax
  CookieInfo *v142; // edi
  Cookie *v143; // esi
  Cookie *v144; // ebp
  curl_off_t v145; // rax
  int expires_high; // ecx
  Cookie **p_next; // eax
  const char *v148; // ecx
  Cookie **v149; // eax
  curl_off_t v150; // rax
  int v151; // ecx
  size_t n; // [esp+8h] [ebp-E4h]
  char v153; // [esp+2Ch] [ebp-C0h]
  const char *v154; // [esp+2Ch] [ebp-C0h]
  int v155; // [esp+2Ch] [ebp-C0h]
  unsigned __int8 v156; // [esp+2Ch] [ebp-C0h]
  int v157; // [esp+2Ch] [ebp-C0h]
  Cookie *v158; // [esp+2Ch] [ebp-C0h]
  int v159; // [esp+30h] [ebp-BCh]
  const char *s; // [esp+34h] [ebp-B8h]
  const char *sa; // [esp+34h] [ebp-B8h]
  const char *sb; // [esp+34h] [ebp-B8h]
  const char *sc; // [esp+34h] [ebp-B8h]
  size_t sd; // [esp+34h] [ebp-B8h]
  time_t se; // [esp+34h] [ebp-B8h]
  int sf; // [esp+34h] [ebp-B8h]
  char sg; // [esp+34h] [ebp-B8h]
  size_t s_4; // [esp+38h] [ebp-B4h]
  size_t s_4a; // [esp+38h] [ebp-B4h]
  size_t s_4b; // [esp+38h] [ebp-B4h]
  int s_4c; // [esp+38h] [ebp-B4h]
  size_t s_4d; // [esp+38h] [ebp-B4h]
  size_t v173; // [esp+3Ch] [ebp-B0h]
  size_t v174; // [esp+3Ch] [ebp-B0h]
  char v175; // [esp+3Ch] [ebp-B0h]
  int v176; // [esp+3Ch] [ebp-B0h]
  const char *v178; // [esp+40h] [ebp-ACh]
  time_t v179; // [esp+44h] [ebp-A8h]
  int v180; // [esp+44h] [ebp-A8h]
  Cookie **v181; // [esp+44h] [ebp-A8h]
  char v182; // [esp+48h] [ebp-A4h]
  _DWORD *v183; // [esp+4Ch] [ebp-A0h]
  __int64 v184; // [esp+54h] [ebp-98h]
  char *dest[36]; // [esp+5Ch] [ebp-90h] BYREF

  v8 = 0;
  v179 = time(0);
  if ( data->req.setcookies > 0x31u )
    return v8;
  v9 = Curl_ccalloc(1, 44);
  if ( !v9 )
    return v8;
  v10 = v9;
  v159 = v9;
  if ( !httpheader )
  {
    dest[0] = 0;
    v66 = lineptr;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v66 = lineptr + 10;
      *(_BYTE *)(v10 + 35) = 1;
      if ( lineptr[10] == 35 )
        goto LABEL_148;
    }
    else if ( *lineptr == 35 )
    {
      goto LABEL_148;
    }
    v67 = strchr(v66, 13);
    if ( v67 )
      *v67 = 0;
    v68 = strchr(v66, 10);
    if ( v68 )
      *v68 = 0;
    v69 = strtok_r(v66, "\t", dest);
    if ( !v69 )
      goto LABEL_218;
    v70 = v69;
    v71 = 0;
    v72 = 0;
    s_4c = v10 + 24;
    while ( 1 )
    {
      switch ( v71 )
      {
        case 0:
          v73 = v72;
          if ( *v70 == 46 )
            ++v70;
          v92 = Curl_cstrdup(v70);
          *(_DWORD *)(v10 + 20) = v92;
          v93 = v73;
          if ( !v92 )
            v93 = 1;
          v74 = 0;
          v155 = v93;
          goto LABEL_210;
        case 1:
          v155 = v72;
          v74 = 1;
          *(_BYTE *)(v10 + 32) = curl_strequal(v70, "TRUE") != 0;
          goto LABEL_210;
        case 2:
          v156 = v72;
          if ( !strcmp("TRUE", v70) || !strcmp("FALSE", v70) )
          {
            v88 = Curl_cstrdup("/");
            *(_DWORD *)(v159 + 12) = v88;
            v10 = v159;
            v89 = Curl_cstrdup("/");
            *(_DWORD *)(v159 + 16) = v89;
            v72 = v156;
            if ( !v89 )
              v72 = 1;
            if ( !v88 )
              v72 = 1;
            goto LABEL_183;
          }
          v75 = Curl_cstrdup(v70);
          *(_DWORD *)(v10 + 12) = v75;
          if ( !v75 )
          {
            v94 = 1;
            goto LABEL_209;
          }
          v76 = (const char *)Curl_cstrdup(v75);
          if ( !v76 )
            goto LABEL_206;
          v77 = (char *)v76;
          v78 = strlen(v76);
          v79 = v78;
          if ( *v77 == 34 )
          {
            memmove(v77, v77 + 1, v78);
            --v79;
          }
          if ( v79 )
          {
            if ( v77[v79 - 1] == 34 )
              v77[--v79] = 0;
          }
          else
          {
            v79 = 0;
          }
          if ( *v77 == 47 )
          {
            LOBYTE(v94) = v156;
            if ( v79 && v77[v79 - 1] == 47 )
              v77[v79 - 1] = 0;
          }
          else
          {
            Curl_cfree(v77);
            v94 = Curl_memdup("/", 2);
            if ( v94 )
            {
              v77 = (char *)v94;
              *(_BYTE *)(v94 + 1) = 0;
              LOBYTE(v94) = v156;
            }
            else
            {
LABEL_206:
              LOBYTE(v94) = v156;
              v77 = 0;
            }
          }
          v94 = (unsigned __int8)v94;
          *(_DWORD *)(v10 + 16) = v77;
          if ( !v77 )
            v94 = 1;
LABEL_209:
          v155 = v94;
          v74 = 2;
LABEL_210:
          v95 = strtok_r(0, "\t", dest);
          v72 = v155;
          v96 = v74 + 1;
          v71 = v96;
          if ( (v155 & 1) != 0 || (v70 = v95) == 0 )
          {
            if ( v96 == 6 )
            {
              v97 = Curl_cstrdup(&L_str_22);
              *(_DWORD *)(v10 + 8) = v97;
              LOBYTE(v72) = 1;
              if ( v97 )
                LOBYTE(v72) = v155;
              v71 = (v97 == 0) ^ 7;
            }
            if ( (v72 & 1) == 0 && v71 == 7 )
              goto LABEL_265;
LABEL_218:
            v98 = (_DWORD *)v10;
LABEL_219:
            Curl_cfree(v98[5]);
            Curl_cfree(v98[3]);
            Curl_cfree(v98[4]);
            Curl_cfree(v98[1]);
            Curl_cfree(v98[2]);
            Curl_cfree(v98);
            return 0;
          }
          break;
        case 3:
LABEL_183:
          *(_BYTE *)(v10 + 33) = 0;
          v90 = v72;
          if ( !curl_strequal(v70, "TRUE") )
            goto LABEL_187;
          if ( secure || (v91 = c, c->running) )
          {
            *(_BYTE *)(v10 + 33) = 1;
LABEL_187:
            v155 = v90;
            v74 = 3;
          }
          else
          {
            LOBYTE(v91) = 1;
            v74 = 3;
            v155 = (int)v91;
          }
          goto LABEL_210;
        case 4:
          v80 = v72;
          v81 = curlx_strtoofft(v70, 0, 10, s_4c);
          LOBYTE(v82) = v80;
          v74 = 4;
          v82 = (unsigned __int8)v82;
          if ( v81 )
            v82 = 1;
          v155 = v82;
          goto LABEL_210;
        case 5:
          v83 = v72;
          v84 = Curl_cstrdup(v70);
          *(_DWORD *)(v10 + 4) = v84;
          if ( v84 )
          {
            v155 = v83;
            if ( curl_strnequal("__Secure-", v84, 9) )
            {
              *(_BYTE *)(v10 + 40) |= 1u;
              v74 = 5;
            }
            else
            {
              if ( curl_strnequal("__Host-", *(_DWORD *)(v10 + 4), 7) )
                *(_BYTE *)(v10 + 40) |= 2u;
              v74 = 5;
            }
          }
          else
          {
            v74 = 5;
            v155 = 1;
          }
          goto LABEL_210;
        case 6:
          v85 = v72;
          v86 = Curl_cstrdup(v70);
          LOBYTE(v87) = v85;
          *(_DWORD *)(v10 + 8) = v86;
          v74 = 6;
          v87 = (unsigned __int8)v87;
          if ( !v86 )
            v87 = 1;
          v155 = v87;
          goto LABEL_210;
        default:
          v155 = v72;
          v74 = v71;
          goto LABEL_210;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_148:
    Curl_cfree(v10);
    return v8;
  }
  v182 = 0;
  v183 = (_DWORD *)(v10 + 24);
  LODWORD(v184) = ~v179;
  v11 = lineptr;
  HIDWORD(v184) = 0x7FFFFFFF - (v179 >> 31);
  do
  {
    v12 = v11 + 1;
    for ( i = v11; *i == 32 || *i == 9; ++i )
      ++v12;
    v153 = *i;
    v14 = strcspn(i, ";\t\r\n=");
    if ( !v14 )
    {
      v11 = i;
      goto LABEL_67;
    }
    v11 = &i[v14];
    v15 = v14;
    while ( 1 )
    {
      v16 = i[v15 - 1];
      if ( v16 != 32 && v16 != 9 )
        break;
      if ( !--v15 )
      {
        v15 = 0;
        if ( *v11 != 61 )
          goto LABEL_28;
        goto LABEL_16;
      }
    }
    if ( *v11 != 61 )
    {
LABEL_28:
      v22 = 0;
      v23 = 0;
      v175 = 0;
      goto LABEL_34;
    }
LABEL_16:
    v173 = v14;
    s = &i[v14 + 1];
    v17 = strcspn(s, ";\r\n");
    v18 = v17 + v173;
    v174 = v17 + v173;
    if ( v17 )
    {
      v19 = s;
      v20 = &v12[v18];
      while ( 1 )
      {
        v21 = *(v20 - 1);
        if ( v21 != 32 && v21 != 9 )
          break;
        --v17;
        --v20;
        if ( !v17 )
          goto LABEL_31;
      }
      while ( *v19 == 32 || *v19 == 9 )
      {
        ++v19;
        if ( !--v17 )
        {
          v19 = v20;
          goto LABEL_31;
        }
      }
    }
    else
    {
      v19 = s;
LABEL_31:
      v17 = 0;
    }
    s_4 = v17;
    v24 = v19;
    if ( memchr(v19, 9, v17) )
    {
      Curl_cfree(*(_DWORD *)(v159 + 20));
      Curl_cfree(*(_DWORD *)(v159 + 12));
      Curl_cfree(*(_DWORD *)(v159 + 16));
      Curl_cfree(*(_DWORD *)(v159 + 4));
      Curl_cfree(*(_DWORD *)(v159 + 8));
      Curl_cfree(v159);
      v8 = 0;
      if ( (*((_BYTE *)&data->set + 1326) & 0x10) != 0 )
        Curl_infof(data, "cookie contains TAB, dropping", n);
      return v8;
    }
    v23 = v24;
    v22 = s_4;
    v11 = &i[v174 + 1];
    v175 = 1;
LABEL_34:
    if ( v15 > 0xFFE || v22 > 0xFFE || v22 + v15 >= 0x1001 )
    {
      Curl_cfree(*(_DWORD *)(v159 + 20));
      Curl_cfree(*(_DWORD *)(v159 + 12));
      Curl_cfree(*(_DWORD *)(v159 + 16));
      Curl_cfree(*(_DWORD *)(v159 + 4));
      Curl_cfree(*(_DWORD *)(v159 + 8));
      Curl_cfree(v159);
      v8 = 0;
      if ( (*((_BYTE *)&data->set + 1326) & 0x10) != 0 )
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v15);
      return v8;
    }
    v132 = v153 == 95;
    v154 = v11;
    if ( v132 && v15 >= 7 && i[1] == 95 )
    {
      sa = v23;
      if ( curl_strnequal("__Secure-", i, 9) )
      {
        *(_BYTE *)(v159 + 40) |= 1u;
        v11 = v154;
        v23 = sa;
      }
      else
      {
        v25 = curl_strnequal("__Host-", i, 7);
        v11 = v154;
        v23 = sa;
        if ( v25 )
          *(_BYTE *)(v159 + 40) |= 2u;
      }
    }
    if ( *(_DWORD *)(v159 + 4) )
    {
      if ( !v22 )
      {
        if ( v15 == 8 )
        {
          v50 = v23;
          v51 = curl_strnequal("httponly", i, 8);
          v23 = v50;
          v22 = 0;
          if ( v51 )
          {
            v11 = v154;
            *(_BYTE *)(v159 + 35) = 1;
            goto LABEL_67;
          }
        }
        else if ( v15 == 6 )
        {
          v39 = v23;
          v40 = curl_strnequal("secure", i, 6);
          v23 = v39;
          v22 = 0;
          if ( v40 )
          {
            v27 = (_DWORD *)v159;
            if ( !secure && c->running )
              goto LABEL_317;
            v11 = v154;
            *(_BYTE *)(v159 + 33) = 1;
            goto LABEL_67;
          }
        }
        v11 = v154;
        if ( !v175 )
          goto LABEL_67;
      }
      if ( v15 != 7 )
      {
        if ( v15 != 6 )
        {
          if ( v15 == 4 )
          {
            sb = v23;
            if ( curl_strnequal("path", i, 4) )
            {
              v26 = v22;
              v27 = (_DWORD *)v159;
              Curl_cfree(*(_DWORD *)(v159 + 12));
              v28 = Curl_memdup(sb, v26 + 1);
              *(_DWORD *)(v159 + 12) = v28;
              if ( !v28 )
                goto LABEL_317;
              *(_BYTE *)(v28 + v26) = 0;
              if ( !*(_DWORD *)(v159 + 12) )
                goto LABEL_317;
              Curl_cfree(*(_DWORD *)(v159 + 16));
              v29 = (const char *)Curl_cstrdup(*(_DWORD *)(v159 + 12));
              if ( !v29 )
                goto LABEL_248;
              v30 = (char *)v29;
              v31 = strlen(v29);
              v32 = v31;
              if ( *v30 == 34 )
              {
                memmove(v30, v30 + 1, v31);
                --v32;
              }
              if ( v32 )
              {
                if ( v30[v32 - 1] == 34 )
                  v30[--v32] = 0;
              }
              else
              {
                v32 = 0;
              }
              if ( *v30 == 47 )
              {
                v11 = v154;
                if ( v32 && v30[v32 - 1] == 47 )
                  v30[v32 - 1] = 0;
                *(_DWORD *)(v159 + 16) = v30;
              }
              else
              {
                Curl_cfree(v30);
                v59 = Curl_memdup("/", 2);
                v27 = (_DWORD *)v159;
                if ( !v59 )
                {
LABEL_248:
                  v27[4] = 0;
                  goto LABEL_317;
                }
                v11 = v154;
                *(_BYTE *)(v59 + 1) = 0;
                *(_DWORD *)(v159 + 16) = v59;
              }
            }
            else
            {
              v11 = v154;
            }
          }
          goto LABEL_67;
        }
        v42 = v23;
        v43 = curl_strnequal("domain", i, 6);
        if ( !v22 )
        {
          v11 = v154;
          goto LABEL_67;
        }
        if ( !v43 )
        {
          v11 = v154;
          goto LABEL_67;
        }
        v44 = v42 + 1;
        if ( *v42 != 46 )
          v44 = v42;
        v45 = v22 - (*v42 == 46);
        s_4b = v45;
        if ( v45 == 9 && curl_strnequal(v44, "localhost", 9)
          || (v46 = memchr(v44, 46, v45)) != 0 && (unsigned int)(&v44[v45] - v46) > 1 )
        {
          v47 = domain;
          v55 = v44;
          if ( domain )
            v55 = domain;
          is_ipnum = Curl_host_is_ipnum(v55);
          v49 = is_ipnum;
          if ( domain )
          {
            if ( !is_ipnum )
              goto LABEL_107;
LABEL_88:
            if ( strncmp(v44, v47, s_4b) )
              goto LABEL_141;
            v48 = strlen(v47);
            v49 = 1;
            if ( s_4b != v48 )
              goto LABEL_141;
          }
          else
          {
            v47 = 0;
          }
        }
        else
        {
          v47 = ":";
          if ( (unsigned __int8)Curl_host_is_ipnum(":") )
            goto LABEL_88;
LABEL_107:
          v57 = strlen(v47);
          if ( v57 < s_4b )
            goto LABEL_141;
          v178 = v47;
          sd = v57;
          v58 = &v47[v57 - s_4b];
          if ( !curl_strnequal(v44, v58, s_4b) || sd != s_4b && *(v58 - 1) != 46 )
          {
            v47 = v178;
LABEL_141:
            domain = v47;
            v182 = 1;
            if ( (*((_BYTE *)&data->set + 1326) & 0x10) != 0 )
              Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v44);
            v11 = v154;
            goto LABEL_67;
          }
          v47 = v178;
          v49 = 0;
        }
        domain = v47;
        v27 = (_DWORD *)v159;
        v61 = v49;
        Curl_cfree(*(_DWORD *)(v159 + 20));
        v62 = Curl_memdup(v44, s_4b + 1);
        *(_DWORD *)(v159 + 20) = v62;
        if ( !v62 )
          goto LABEL_317;
        *(_BYTE *)(v62 + s_4b) = 0;
        v63 = v182;
        if ( !*(_DWORD *)(v159 + 20) )
          v63 = 1;
        if ( (*(_DWORD *)(v159 + 20) == 0) | (unsigned __int8)v61 )
        {
          v182 = v63;
          v11 = v154;
          if ( !*(_DWORD *)(v159 + 20) )
            break;
        }
        else
        {
          v11 = v154;
          *(_BYTE *)(v159 + 32) = 1;
        }
        goto LABEL_67;
      }
      v41 = v23;
      if ( curl_strnequal("version", i, 7) )
      {
        v11 = v154;
        goto LABEL_67;
      }
      if ( curl_strnequal("max-age", i, 7) )
      {
        v52 = v183;
        v53 = v41 + 1;
        if ( *v41 != 34 )
          v53 = v41;
        v54 = curlx_strtoofft(v53, 0, 10, v183);
        if ( !v54 )
        {
          v64 = *v183;
          v65 = v183[1];
          if ( *(_QWORD *)v183 )
          {
            if ( v184 >= __SPAIR64__(v65, v64) )
            {
              *(_QWORD *)v183 = v179 + __PAIR64__(v65, v64);
              v11 = v154;
            }
            else
            {
              v11 = v154;
              *v183 = -1;
              v183[1] = 0x7FFFFFFF;
            }
            goto LABEL_67;
          }
LABEL_139:
          v52[1] = 0;
          *v52 = 1;
          v11 = v154;
          goto LABEL_67;
        }
        if ( v54 == 2 )
          goto LABEL_139;
        v11 = v154;
        if ( v54 == 1 )
        {
          *v183 = -1;
          v183[1] = 0x7FFFFFFF;
        }
      }
      else if ( curl_strnequal("expires", i, 7) )
      {
        v52 = v183;
        v11 = v154;
        if ( v22 > 0x7F || *(_QWORD *)v183 )
          goto LABEL_67;
        memcpy(dest, v41, v22);
        *((_BYTE *)dest + v22) = 0;
        v60 = Curl_getdate_capped(dest);
        *(_QWORD *)v183 = v60;
        if ( !v60 )
          goto LABEL_139;
        v11 = v154;
        if ( v60 < 0 )
        {
          v183[1] = 0;
          *v183 = 0;
        }
      }
      else
      {
        v11 = v154;
      }
    }
    else
    {
      s_4a = v22;
      v27 = (_DWORD *)v159;
      if ( !v175 )
        goto LABEL_317;
      sc = v23;
      Curl_cfree(0);
      v33 = Curl_memdup(i, v15 + 1);
      *(_DWORD *)(v159 + 4) = v33;
      if ( v33 )
        *(_BYTE *)(v33 + v15) = 0;
      Curl_cfree(*(_DWORD *)(v159 + 8));
      v34 = Curl_memdup(sc, s_4a + 1);
      *(_DWORD *)(v159 + 8) = v34;
      if ( v34 )
        *(_BYTE *)(v34 + s_4a) = 0;
      v35 = *(const char **)(v159 + 4);
      if ( !v35 )
        goto LABEL_317;
      v36 = *(const char **)(v159 + 8);
      if ( !v36 )
        goto LABEL_317;
      if ( v36[strcspn(v36, invalid_octets_badoctets)]
        || (v37 = strcspn(v35, invalid_octets_badoctets), v11 = v154, v35[v37]) )
      {
        v27 = (_DWORD *)v159;
        if ( (*((_BYTE *)&data->set + 1326) & 0x10) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped", n);
LABEL_317:
        Curl_cfree(v27[5]);
        Curl_cfree(v27[3]);
        Curl_cfree(v27[4]);
        Curl_cfree(v27[1]);
        Curl_cfree(v27[2]);
        Curl_cfree(v27);
        return 0;
      }
    }
    do
    {
      do
LABEL_67:
        v38 = *v11++;
      while ( v38 == 32 );
    }
    while ( v38 == 9 );
  }
  while ( v38 == 59 );
  v99 = v182;
  if ( (v182 & 1) != 0 )
  {
    v27 = (_DWORD *)v159;
    v100 = path;
  }
  else
  {
    v27 = (_DWORD *)v159;
    v100 = path;
    if ( domain && !*(_DWORD *)(v159 + 20) )
    {
      v101 = Curl_cstrdup(domain);
      *(_DWORD *)(v159 + 20) = v101;
      v102 = 1;
      if ( v101 )
        v102 = v182;
      v99 = v102;
    }
  }
  if ( (v99 & 1) != 0 || !v100 || v27[3] )
    goto LABEL_262;
  v103 = v100;
  v104 = v99;
  v105 = strchr(v103, 63);
  if ( v105 )
    v106 = (char *)Curl_memrchr(v103, 47, v105 - v103);
  else
    v106 = strrchr(v103, 47);
  if ( !v106 )
  {
    v99 = v104;
    goto LABEL_262;
  }
  v107 = v106 - path;
  v108 = (void *)Curl_cmalloc(v106 - path + 2);
  v27[3] = v108;
  if ( !v108 )
    goto LABEL_317;
  v109 = v107 + 1;
  memcpy(v108, path, v109);
  *(_BYTE *)(v27[3] + v109) = 0;
  v110 = (const char *)Curl_cstrdup(v27[3]);
  if ( !v110 )
    goto LABEL_257;
  v111 = (char *)v110;
  v112 = strlen(v110);
  v113 = v112;
  if ( *v111 == 34 )
  {
    memmove(v111, v111 + 1, v112);
    --v113;
  }
  if ( v113 )
  {
    if ( v111[v113 - 1] == 34 )
      v111[--v113] = 0;
  }
  else
  {
    v113 = 0;
  }
  if ( *v111 != 47 )
  {
    Curl_cfree(v111);
    v115 = Curl_memdup("/", 2);
    v27 = (_DWORD *)v159;
    if ( v115 )
    {
      v111 = (char *)v115;
      *(_BYTE *)(v115 + 1) = 0;
LABEL_258:
      v114 = v104;
      goto LABEL_259;
    }
LABEL_257:
    v111 = 0;
    goto LABEL_258;
  }
  v114 = v104;
  if ( v113 && v111[v113 - 1] == 47 )
    v111[v113 - 1] = 0;
  v27 = (_DWORD *)v159;
LABEL_259:
  v116 = 1;
  v27[4] = v111;
  if ( v111 )
    v116 = v114;
  v99 = v116;
LABEL_262:
  v27 = (_DWORD *)v159;
  if ( (v99 & 1) != 0 || !*(_DWORD *)(v159 + 4) )
    goto LABEL_317;
  v10 = v159;
  ++data->req.setcookies;
LABEL_265:
  v117 = *(_BYTE *)(v10 + 40);
  v8 = 0;
  if ( (v117 & 1) != 0 && !*(_BYTE *)(v10 + 33)
    || (v117 & 2) != 0
    && (!*(_BYTE *)(v10 + 33)
     || !*(_DWORD *)(v10 + 12)
     || strcmp(*(const char **)(v10 + 12), "/")
     || *(_BYTE *)(v10 + 32))
    || !(running = c->running) && c->newsession && !*(_QWORD *)(v10 + 24) )
  {
    Curl_cfree(*(_DWORD *)(v10 + 20));
    Curl_cfree(*(_DWORD *)(v10 + 12));
    Curl_cfree(*(_DWORD *)(v10 + 16));
    Curl_cfree(*(_DWORD *)(v10 + 4));
    Curl_cfree(*(_DWORD *)(v10 + 8));
    Curl_cfree(v10);
    return v8;
  }
  *(_BYTE *)(v10 + 34) = running;
  v119 = c->lastct + 1;
  c->lastct = v119;
  *(_DWORD *)(v10 + 36) = v119;
  if ( !noexpire )
  {
    se = time(0);
    next_expiration = c->next_expiration;
    next_expiration_high = HIDWORD(c->next_expiration);
    if ( se >= __SPAIR64__(next_expiration_high, next_expiration)
      || !(~next_expiration | next_expiration_high ^ 0x7FFFFFFF) )
    {
      c->next_expiration = 0x7FFFFFFFFFFFFFFFLL;
      v141 = 0;
      do
      {
        v142 = c;
        v176 = v141;
        v143 = c->cookies[v141];
        if ( v143 )
        {
          v158 = 0;
          v181 = &c->cookies[v141];
          do
          {
            while ( 1 )
            {
              v144 = v143;
              v143 = v143->next;
              LODWORD(v145) = v144->expires;
              expires_high = HIDWORD(v144->expires);
              if ( !v144->expires )
                break;
              HIDWORD(v145) = HIDWORD(v144->expires);
              if ( v145 >= se )
                break;
              p_next = &v158->next;
              if ( !v158 )
                p_next = v181;
              *p_next = v143;
              --v142->numcookies;
              Curl_cfree(v144->domain);
              Curl_cfree(v144->path);
              Curl_cfree(v144->spath);
              Curl_cfree(v144->name);
              Curl_cfree(v144->value);
              Curl_cfree(v144);
              v142 = c;
              if ( !v143 )
                goto LABEL_332;
            }
            if ( expires_high | (unsigned int)v145 )
            {
              HIDWORD(v145) = HIDWORD(v144->expires);
              if ( v145 < v142->next_expiration )
              {
                LODWORD(v142->next_expiration) = v145;
                HIDWORD(v142->next_expiration) = expires_high;
              }
            }
            v158 = v144;
          }
          while ( v143 );
        }
LABEL_332:
        v141 = v176 + 1;
      }
      while ( v176 != 62 );
    }
  }
  v8 = (Cookie *)v159;
  s_4d = cookiehash(*(const char *const *)(v159 + 20));
  next = c->cookies[s_4d];
  if ( !next )
  {
    v139 = c;
    v124 = 0;
    v140 = 0;
    goto LABEL_347;
  }
  v123 = 0;
  v157 = 0;
  sf = 0;
  while ( 2 )
  {
    v124 = next;
    if ( curl_strequal(next->name, *(_DWORD *)(v159 + 4)) )
    {
      v125 = v124->domain;
      v126 = *(_DWORD *)(v159 + 20);
      if ( v125 )
      {
        if ( v126 && curl_strequal(v125, *(_DWORD *)(v159 + 20)) )
        {
LABEL_281:
          spath = v124->spath;
          if ( spath && *(_DWORD *)(v159 + 16) && v124->secure && !*(_BYTE *)(v159 + 33) && !secure )
          {
            v180 = *(_DWORD *)(v159 + 16);
            v128 = strchr(spath + 1, 47);
            v129 = v128 ? v128 - spath : strlen(spath);
            if ( curl_strnequal(spath, v180, v129) )
            {
              if ( data && (*((_BYTE *)&data->set + 1326) & 0x10) != 0 )
                Curl_infof(
                  data,
                  "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                  *(_DWORD *)(v159 + 4));
LABEL_316:
              v98 = (_DWORD *)v159;
              goto LABEL_219;
            }
          }
        }
      }
      else if ( !v126 )
      {
        goto LABEL_281;
      }
    }
    if ( !v157 )
    {
      v157 = 0;
      if ( curl_strequal(v124->name, *(_DWORD *)(v159 + 4)) )
      {
        v130 = v124->domain;
        v131 = *(_DWORD *)(v159 + 20);
        if ( !v130 )
        {
          v132 = v131 == 0;
          goto LABEL_295;
        }
        if ( v131 && curl_strequal(v130, *(_DWORD *)(v159 + 20)) )
        {
          v132 = v124->tailmatch == *(_BYTE *)(v159 + 32);
LABEL_295:
          v133 = (unsigned __int8)sf;
          if ( v132 )
            v133 = 1;
        }
        else
        {
          v133 = sf;
        }
        sf = v133;
        if ( (v133 & 1) != 0 )
        {
          v134 = v124->spath;
          v135 = 0;
          v157 = 0;
          if ( v134 )
          {
            if ( !*(_DWORD *)(v159 + 16) )
            {
              v135 = v124->spath;
              goto LABEL_303;
            }
            if ( curl_strequal(v134, *(_DWORD *)(v159 + 16)) )
            {
              v135 = v124->spath;
              goto LABEL_303;
            }
            sf = 0;
            v157 = 0;
          }
          else
          {
LABEL_303:
            v136 = (unsigned __int8)sf;
            if ( (v135 == 0) != (*(_DWORD *)(v159 + 16) == 0) )
              v136 = 0;
            sf = v136;
            if ( (v136 & 1) != 0 )
            {
              if ( *(_BYTE *)(v159 + 34) )
              {
                v123 = v124;
                v157 = v159;
              }
              else
              {
                v123 = v124;
                v157 = v159;
                if ( v124->livecookie )
                  goto LABEL_316;
              }
            }
          }
        }
      }
    }
    next = v124->next;
    if ( v124->next )
      continue;
    break;
  }
  if ( v157 )
  {
    *(_DWORD *)v157 = v123->next;
    *(_DWORD *)(v157 + 36) = v123->creationtime;
    Curl_cfree(v123->name);
    Curl_cfree(v123->value);
    Curl_cfree(v123->domain);
    Curl_cfree(v123->path);
    Curl_cfree(v123->spath);
    *(_DWORD *)&v123->prefix = *(_DWORD *)(v157 + 40);
    *(_QWORD *)&v123->tailmatch = *(_QWORD *)(v157 + 32);
    v123->expires = *(_QWORD *)(v157 + 24);
    *(_QWORD *)&v123->spath = *(_QWORD *)(v157 + 16);
    v138 = *(_QWORD *)v157;
    *(_QWORD *)&v123->value = *(_QWORD *)(v157 + 8);
    *(_QWORD *)&v123->next = v138;
    Curl_cfree(v157);
    v8 = v123;
  }
  else
  {
    v8 = (Cookie *)v159;
  }
  v139 = c;
  v140 = sf;
LABEL_347:
  if ( data )
  {
    if ( v139->running )
    {
      sg = v140;
      if ( (*((_BYTE *)&data->set + 1326) & 0x10) != 0 )
      {
        v148 = "Replaced";
        if ( (v140 & 1) == 0 )
          v148 = "Added";
        v139 = c;
        Curl_infof(data, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld", v148);
        v140 = sg;
      }
    }
  }
  if ( (v140 & 1) == 0 )
  {
    v149 = &v139->cookies[s_4d];
    if ( v124 )
      v149 = &v124->next;
    *v149 = v8;
    ++v139->numcookies;
  }
  LODWORD(v150) = v8->expires;
  v151 = HIDWORD(v8->expires);
  if ( v8->expires )
  {
    HIDWORD(v150) = HIDWORD(v8->expires);
    if ( v150 < v139->next_expiration )
    {
      LODWORD(v139->next_expiration) = v150;
      HIDWORD(v139->next_expiration) = v151;
    }
  }
  return v8;
}
