Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  time_t v12; // r7
  int v13; // r0
  char *v14; // r11
  int v15; // r8
  char *v16; // r8
  int v17; // r4
  bool v18; // zf
  bool v19; // zf
  size_t v20; // r0
  size_t v21; // r6
  char *v22; // r2
  size_t v23; // r0
  int v24; // r1
  bool v25; // zf
  char *v26; // r8
  int v27; // r1
  bool v28; // zf
  bool v29; // zf
  unsigned int v30; // r10
  size_t v31; // r5
  char *v32; // r7
  size_t v33; // r0
  size_t v34; // r9
  int v35; // r1
  bool v36; // zf
  char *v37; // r0
  bool v38; // cc
  char v39; // r0
  char *v40; // r1
  int v41; // r2
  int v42; // r3
  bool v43; // zf
  int v44; // r0
  const char *v45; // r0
  char *v46; // r6
  size_t v47; // r7
  const char *v48; // r6
  const char *v49; // r5
  int v50; // r0
  void (__fastcall *v51)(_DWORD); // r1
  int v52; // r0
  bool v53; // zf
  _DWORD *v54; // r4
  char *v55; // r0
  int v56; // r0
  int v57; // r0
  bool v58; // zf
  char *v59; // r10
  _BYTE *v60; // r0
  const char *v61; // r7
  const char *v62; // r0
  int is_ipnum; // r0
  int v64; // r6
  size_t v65; // r0
  size_t v66; // r11
  const char *v67; // r6
  const char *v68; // r0
  bool v69; // zf
  int v70; // r0
  int v71; // r0
  int v72; // r0
  int v73; // r0
  char *v74; // r0
  char *v75; // r0
  char *v76; // r0
  const char *v77; // r5
  int v78; // r9
  int (**v79)(void); // r7
  int v80; // r6
  const char *v81; // r0
  int v82; // r0
  int v83; // r0
  const char *v84; // r0
  char *v85; // r5
  size_t v86; // r6
  size_t v87; // r0
  int v88; // r0
  char v89; // r0
  int v90; // r0
  int v91; // r0
  int (*v92)(void); // r1
  int v93; // r6
  int v94; // r0
  char *v95; // r0
  size_t v96; // r6
  void (__fastcall **v97)(int); // r5
  int v99; // r0
  bool v100; // zf
  void (__fastcall **v101)(int); // r4
  CookieInfo *v102; // r3
  int v103; // r0
  int v104; // r8
  time_t v105; // r9
  curl_off_t *p_next_expiration; // r11
  int next_expiration_high; // r1
  Cookie *v108; // r4
  size_t v109; // r0
  CookieInfo *v110; // r6
  Cookie *next; // r0
  Cookie **v112; // r9
  Cookie *v113; // r11
  char v114; // r10
  Cookie *v115; // r5
  char *v116; // r0
  int v117; // r1
  const char *spath; // r6
  int v119; // r8
  bool v120; // zf
  bool v121; // zf
  char *v122; // r0
  size_t v123; // r2
  char *v124; // r0
  int v125; // r1
  char v126; // r0
  int v127; // r0
  char *v128; // r0
  int v129; // r1
  bool v130; // zf
  void (__fastcall **v131)(int); // r4
  const char *v132; // r0
  bool v133; // zf
  void (__fastcall **v134)(int); // r4
  void (__fastcall **v135)(int); // r5
  int creationtime; // r2
  char *name; // r0
  void (__fastcall **v138)(Cookie **); // r8
  char *v139; // r2
  char *v140; // r3
  char *v141; // r4
  char *v142; // r6
  char *v143; // r7
  Cookie *v144; // r2
  Cookie *v145; // r3
  int v146; // r4
  Cookie *v147; // r6
  Cookie *v148; // r7
  bool v149; // zf
  __int64 v150; // r0
  curl_off_t *v151; // r6
  unsigned int next_expiration; // t1
  int v153; // r0
  char *v154; // r0
  char *v155; // r0
  _DWORD *v156; // r5
  Cookie *v157; // r4
  Cookie **p_next; // r7
  Cookie *v159; // r6
  curl_off_t expires; // r0
  int v161; // r2
  int v162; // r3
  CookieInfo *v163; // r1
  const char *v164; // r2
  void (__fastcall **v165)(int); // r5
  int v166; // r4
  void *v167; // r0
  const char *v168; // r0
  char *v169; // r5
  size_t v170; // r6
  size_t v171; // r0
  int v172; // r0
  __int64 v173; // [sp+1Ch] [bp-D4h]
  _DWORD *v174; // [sp+24h] [bp-CCh]
  char *v175; // [sp+28h] [bp-C8h]
  char v176; // [sp+2Ch] [bp-C4h]
  int v178; // [sp+34h] [bp-BCh]
  Curl_easy *v179; // [sp+38h] [bp-B8h]
  Curl_easy *v180; // [sp+38h] [bp-B8h]
  Curl_easy *v181; // [sp+38h] [bp-B8h]
  time_t v182; // [sp+3Ch] [bp-B4h]
  int v183; // [sp+40h] [bp-B0h]
  size_t v184; // [sp+40h] [bp-B0h]
  int v185; // [sp+44h] [bp-ACh]
  CookieInfo *v186; // [sp+48h] [bp-A8h]
  char *dest[41]; // [sp+4Ch] [bp-A4h] BYREF

  v12 = time(0u);
  if ( data->req.setcookies > 0x31u )
    return 0;
  v13 = ((int (__fastcall *)(int, int))*Curl_ccalloc)(1, 48);
  if ( !v13 )
    return 0;
  v14 = (char *)lineptr;
  v15 = v13;
  v182 = v12;
  v178 = noexpire;
  v186 = c;
  v185 = v13;
  if ( !httpheader )
  {
    dest[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v14 = (char *)(lineptr + 0xA);
      *(_BYTE *)(v15 + 35) = 1;
    }
    if ( *v14 == 35 )
      goto LABEL_156;
    v74 = strchr(v14, 13);
    v180 = data;
    if ( v74 )
      *v74 = 0;
    v75 = strchr(v14, 10);
    if ( v75 )
      *v75 = 0;
    v76 = strtok_r(v14, "\t", dest);
    if ( !v76 )
      goto LABEL_212;
    v77 = v76;
    v78 = 0;
    v79 = (int (**)(void))Curl_cstrdup;
    while ( 1 )
    {
      v80 = 0;
      switch ( v78 )
      {
        case 0:
          v81 = v77 + 1;
          if ( *v77 != 46 )
            v81 = v77;
          v82 = ((int (__fastcall *)(const char *))*v79)(v81);
          *(_DWORD *)(v15 + 20) = v82;
          v78 = 0;
          v80 = v82 == 0;
          goto LABEL_197;
        case 1:
          v78 = 1;
          v80 = 0;
          *(_BYTE *)(v15 + 32) = curl_strequal(v77, "TRUE") != 0;
          goto LABEL_197;
        case 2:
          if ( !strcmp("TRUE", v77) || !strcmp("FALSE", v77) )
          {
            v91 = ((int (__fastcall *)(const char *))*v79)("/");
            v92 = *v79;
            v93 = v91;
            *(_DWORD *)(v15 + 12) = v91;
            v94 = ((int (__fastcall *)(const char *))v92)("/");
            *(_DWORD *)(v15 + 16) = v94;
            v80 = v93 == 0 || v94 == 0;
            goto LABEL_188;
          }
          v83 = ((int (__fastcall *)(const char *))*v79)(v77);
          v78 = 2;
          *(_DWORD *)(v15 + 12) = v83;
          if ( !v83 )
            goto LABEL_192;
          v84 = (const char *)(*v79)();
          if ( !v84 )
          {
            v85 = 0;
            goto LABEL_203;
          }
          v85 = (char *)v84;
          v86 = strlen(v84);
          if ( *v85 == 34 )
            memmove(v85, v85 + 1, v86--);
          if ( !v86 )
          {
            if ( *v85 == 47 )
              goto LABEL_203;
LABEL_202:
            ((void (__fastcall *)(char *))*Curl_cfree)(v85);
            v85 = (char *)Curl_strndup("/", 1);
            goto LABEL_203;
          }
          v87 = v86 - 1;
          if ( v85[v86 - 1] == 34 )
          {
            --v86;
            v85[v87] = 0;
          }
          if ( *v85 != 47 )
            goto LABEL_202;
          if ( v86 && v85[v86 - 1] == 47 )
            v85[v86 - 1] = 0;
LABEL_203:
          *(_DWORD *)(v15 + 16) = v85;
          v80 = v85 == 0;
LABEL_197:
          v95 = strtok_r(0u, "\t", dest);
          ++v78;
          if ( v80 || (v77 = v95) == 0 )
          {
            if ( v78 == 6 )
            {
              v99 = ((int (__fastcall *)(void *))*v79)(&L_str_22);
              v78 = 7;
              *(_DWORD *)(v15 + 8) = v99;
              v80 |= v99 == 0;
              if ( !v99 )
                v78 = 6;
            }
            v100 = v80 == 0;
            if ( !v80 )
              v100 = v78 == 7;
            if ( v100 )
            {
              data = v180;
              goto LABEL_215;
            }
LABEL_212:
            v101 = (void (__fastcall **)(int))Curl_cfree;
            ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v15 + 20));
            (*v101)(*(_DWORD *)(v15 + 12));
            (*v101)(*(_DWORD *)(v15 + 16));
            (*v101)(*(_DWORD *)(v15 + 4));
            (*v101)(*(_DWORD *)(v15 + 8));
            (*v101)(v15);
            return 0;
          }
          break;
        case 3:
LABEL_188:
          *(_BYTE *)(v15 + 33) = 0;
          v78 = 3;
          if ( curl_strequal(v77, "TRUE") )
          {
            if ( !secure && !v186->running )
              goto LABEL_192;
            *(_BYTE *)(v15 + 33) = 1;
          }
          goto LABEL_197;
        case 4:
          v78 = 4;
          v80 = curlx_strtoofft(v77, 0, 10, v15 + 0x18) != 0;
          goto LABEL_197;
        case 5:
          v88 = ((int (__fastcall *)(const char *))*v79)(v77);
          v78 = 5;
          *(_DWORD *)(v15 + 4) = v88;
          if ( v88 )
          {
            if ( curl_strnequal("__Secure-", v88, 9) )
            {
              v89 = *(_BYTE *)(v15 + 40) | 1;
            }
            else
            {
              if ( !curl_strnequal("__Host-", *(_DWORD *)(v15 + 4), 7) )
                goto LABEL_196;
              v89 = *(_BYTE *)(v15 + 40) | 2;
            }
            *(_BYTE *)(v15 + 40) = v89;
            v80 = 0;
          }
          else
          {
LABEL_192:
            v80 = 1;
          }
          goto LABEL_197;
        case 6:
          v90 = ((int (__fastcall *)(const char *))*v79)(v77);
          v78 = 6;
          *(_DWORD *)(v15 + 8) = v90;
          v80 = v90 == 0;
          goto LABEL_197;
        default:
LABEL_196:
          v80 = 0;
          goto LABEL_197;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_156:
    ((void (__fastcall *)(int))*Curl_cfree)(v15);
    return 0;
  }
  v179 = data;
  HIDWORD(v173) = 0x7FFFFFFF - (v12 >> 0x1F);
  v175 = (char *)&data->set + 1334;
  LODWORD(v173) = ~v12;
  v174 = (_DWORD *)(v15 + 0x18);
  v176 = 0;
  while ( 1 )
  {
    v16 = v14 + 1;
    v17 = (unsigned __int8)*v14;
    v18 = v17 == 32;
    if ( v17 != 32 )
      v18 = v17 == 9;
    if ( v18 )
    {
      do
      {
        ++v16;
        v17 = (unsigned __int8)*++v14;
        v19 = v17 == 32;
        if ( v17 != 32 )
          v19 = v17 == 9;
      }
      while ( v19 );
    }
    v20 = strcspn(v14, ";\t\r\n=");
    if ( !v20 )
    {
      v26 = v14;
      goto LABEL_22;
    }
    v21 = v20;
    v22 = &v14[v20];
    v23 = v20 - 1;
    do
    {
      v24 = (unsigned __int8)v14[v23];
      v25 = v24 == 32;
      if ( v24 != 32 )
        v25 = v24 == 9;
      if ( !v25 )
      {
        v30 = v23 + 1;
        goto LABEL_31;
      }
      --v23;
    }
    while ( v23 != -1 );
    v30 = 0;
LABEL_31:
    v31 = 0;
    v32 = 0;
    v183 = (unsigned __int8)*v22;
    if ( v183 == 61 )
    {
      v33 = strcspn(&v14[v21 + 1], ";\r\n");
      v34 = v21 + v33;
      if ( v33 )
      {
        v32 = &v16[v34];
        while ( 1 )
        {
          v35 = (unsigned __int8)*(v32 - 1);
          v36 = v35 == 32;
          if ( v35 != 32 )
            v36 = v35 == 9;
          if ( !v36 )
            break;
          --v33;
          --v32;
          if ( !v33 )
            goto LABEL_39;
        }
        v40 = &v16[v21];
        v41 = 0;
        while ( 1 )
        {
          v42 = (unsigned __int8)v40[v41];
          v43 = v42 == 32;
          if ( v42 != 32 )
            v43 = v42 == 9;
          if ( !v43 )
            break;
          if ( v33 == ++v41 )
            goto LABEL_40;
        }
        v31 = v33 - v41;
        v32 = &v40[v41];
      }
      else
      {
LABEL_39:
        v32 = &v14[v21 + 1];
LABEL_40:
        v31 = 0;
      }
      if ( memchr(v32, 9, v31) )
      {
        v165 = (void (__fastcall **)(int))Curl_cfree;
        ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v185 + 20));
        (*v165)(*(_DWORD *)(v185 + 12));
        (*v165)(*(_DWORD *)(v185 + 16));
        (*v165)(*(_DWORD *)(v185 + 4));
        (*v165)(*(_DWORD *)(v185 + 8));
        (*v165)(v185);
        if ( (v175[3] & 0x20) != 0 )
        {
          Curl_infof(v179, "cookie contains TAB, dropping");
          return 0;
        }
        return 0;
      }
      v37 = &v14[v34];
      data = v179;
      v22 = v37 + 1;
    }
    v38 = v30 > 0xFFE;
    if ( v30 <= 0xFFE )
      v38 = v31 > 0xFFE;
    if ( v38 || v31 + v30 > 0x1000 )
    {
      v96 = v31;
      v97 = (void (__fastcall **)(int))Curl_cfree;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v185 + 20));
      (*v97)(*(_DWORD *)(v185 + 12));
      (*v97)(*(_DWORD *)(v185 + 16));
      (*v97)(*(_DWORD *)(v185 + 4));
      (*v97)(*(_DWORD *)(v185 + 8));
      (*v97)(v185);
      if ( (v175[3] & 0x20) != 0 )
      {
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v30, v96);
        return 0;
      }
      return 0;
    }
    v26 = v22;
    if ( v17 == 95 && v30 >= 7 && v14[1] == 95 )
    {
      if ( curl_strnequal("__Secure-", v14, 9) )
      {
        v39 = *(_BYTE *)(v185 + 40) | 1;
      }
      else
      {
        if ( !curl_strnequal("__Host-", v14, 7) )
          goto LABEL_61;
        v39 = *(_BYTE *)(v185 + 40) | 2;
      }
      *(_BYTE *)(v185 + 40) = v39;
    }
LABEL_61:
    if ( !*(_DWORD *)(v185 + 4) )
    {
      if ( v183 != 61 )
        goto LABEL_278;
      v48 = (const char *)v31;
      v49 = (const char *)Curl_cfree;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(0);
      v50 = Curl_strndup(v14, v30);
      v51 = *(void (__fastcall **)(_DWORD))v49;
      *(_DWORD *)(v185 + 4) = v50;
      v51(*(_DWORD *)(v185 + 8));
      v52 = Curl_strndup(v32, v48);
      v53 = v52 == 0;
      *(_DWORD *)(v185 + 8) = v52;
      if ( v52 )
      {
        v48 = (const char *)v52;
        v49 = *(const char **)(v185 + 4);
        v53 = v49 == 0;
      }
      if ( v53 )
        goto LABEL_278;
      if ( v48[strcspn(v48, invalid_octets_badoctets)] || v49[strcspn(v49, invalid_octets_badoctets)] )
      {
        if ( (v175[3] & 0x20) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
        goto LABEL_278;
      }
      goto LABEL_22;
    }
    if ( !v31 )
    {
      if ( v30 == 8 )
      {
        if ( curl_strnequal("httponly", v14, 8) )
        {
          *(_BYTE *)(v185 + 35) = 1;
          goto LABEL_22;
        }
      }
      else if ( v30 == 6 && curl_strnequal("secure", v14, 6) )
      {
        if ( !secure && v186->running )
          goto LABEL_278;
        *(_BYTE *)(v185 + 33) = 1;
        goto LABEL_22;
      }
      if ( v183 != 61 )
        goto LABEL_22;
    }
    if ( v30 != 7 )
      break;
    if ( !curl_strnequal("version", v14, 7) )
    {
      if ( curl_strnequal("max-age", v14, 7) )
      {
        v54 = v174;
        v55 = v32 + 1;
        if ( *v32 != 34 )
          v55 = v32;
        v56 = curlx_strtoofft(v55, 0, 10, v174);
        switch ( v56 )
        {
          case 0:
            if ( !*(_QWORD *)v174 )
            {
LABEL_149:
              *v174 = 1;
              v174[1] = 0;
              break;
            }
            if ( v173 >= *(_QWORD *)v174 )
            {
              *(_QWORD *)v174 += v182;
              break;
            }
LABEL_147:
            *v174 = -1;
            v72 = 0x7FFFFFFF;
LABEL_148:
            v54[1] = v72;
            break;
          case 2:
            goto LABEL_149;
          case 1:
            goto LABEL_147;
        }
      }
      else
      {
        if ( !curl_strnequal("expires", v14, 7) )
          goto LABEL_22;
        v54 = v174;
        if ( v31 > 0x7F || *(_QWORD *)v174 )
          goto LABEL_22;
        memcpy(dest, v32, v31);
        *((_BYTE *)dest + v31) = 0;
        v71 = Curl_getdate_capped(dest);
        *(_QWORD *)v174 = v71;
        if ( !v71 )
        {
          *v174 = 1;
          v174[1] = 0;
          goto LABEL_22;
        }
        if ( v71 <= -1 )
        {
          v72 = 0;
          *v174 = 0;
          goto LABEL_148;
        }
      }
    }
LABEL_22:
    v14 = v26 + 1;
    v27 = (unsigned __int8)*v26;
    v28 = v27 == 32;
    if ( v27 != 32 )
      v28 = v27 == 9;
    if ( v28 )
    {
      do
      {
        v27 = (unsigned __int8)*v14++;
        v29 = v27 == 32;
        if ( v27 != 32 )
          v29 = v27 == 9;
      }
      while ( v29 );
    }
    if ( v27 != 59 )
      goto LABEL_277;
  }
  if ( v30 != 6 )
  {
    if ( v30 == 4 && curl_strnequal("path", v14, 4) )
    {
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v185 + 12));
      v44 = Curl_strndup(v32, v31);
      *(_DWORD *)(v185 + 12) = v44;
      if ( !v44 )
        goto LABEL_278;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v185 + 16));
      v45 = (const char *)((int (__fastcall *)(_DWORD))*Curl_cstrdup)(*(_DWORD *)(v185 + 12));
      if ( !v45 )
      {
        *(_DWORD *)(v185 + 16) = 0;
        goto LABEL_278;
      }
      v46 = (char *)v45;
      v47 = strlen(v45);
      if ( *v46 == 34 )
        memmove(v46, v46 + 1, v47--);
      if ( v47 )
      {
        if ( v46[v47 - 1] == 34 )
          v46[--v47] = 0;
        if ( *v46 != 47 )
        {
LABEL_126:
          ((void (__fastcall *)(char *))*Curl_cfree)(v46);
          v70 = Curl_strndup("/", 1);
          *(_DWORD *)(v185 + 16) = v70;
          if ( !v70 )
            goto LABEL_278;
          goto LABEL_22;
        }
        if ( v47 && v46[v47 - 1] == 47 )
          v46[v47 - 1] = 0;
      }
      else if ( *v46 != 47 )
      {
        goto LABEL_126;
      }
      *(_DWORD *)(v185 + 16) = v46;
    }
    goto LABEL_22;
  }
  v57 = curl_strnequal("domain", v14, 6);
  v58 = v31 == 0;
  if ( v31 )
    v58 = v57 == 0;
  if ( v58 )
    goto LABEL_22;
  v59 = v32 + 1;
  if ( *v32 == 46 )
    --v31;
  else
    v59 = v32;
  if ( v31 != 9 || !curl_strnequal(v59, "localhost", 9) )
  {
    v60 = memchr(v59, 46, v31);
    if ( !v60 || (unsigned int)(&v59[v31] - v60) <= 1 )
    {
      v61 = ":";
      if ( !Curl_host_is_ipnum(":") )
        goto LABEL_114;
LABEL_129:
      if ( strncmp(v59, v61, v31) )
        goto LABEL_131;
      v64 = 1;
      if ( v31 != strlen(v61) )
        goto LABEL_131;
      goto LABEL_140;
    }
  }
  v61 = domain;
  v62 = domain;
  if ( !domain )
    v62 = v59;
  is_ipnum = Curl_host_is_ipnum(v62);
  v64 = is_ipnum;
  if ( !domain )
  {
    v61 = 0;
    goto LABEL_140;
  }
  if ( is_ipnum )
    goto LABEL_129;
LABEL_114:
  v65 = strlen(v61);
  if ( v65 < v31 )
    goto LABEL_131;
  v66 = v65;
  v67 = &v61[v65 - v31];
  if ( !curl_strnequal(v59, v67, v31) )
    goto LABEL_131;
  v68 = v67;
  v69 = v66 == v31;
  v64 = 0;
  if ( v66 != v31 )
    v69 = *(v68 - 1) == 46;
  if ( !v69 )
  {
LABEL_131:
    domain = v61;
    v176 = 1;
    if ( (v175[3] & 0x20) != 0 )
      Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v59);
    goto LABEL_22;
  }
LABEL_140:
  ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v185 + 20));
  v73 = Curl_strndup(v59, v31);
  *(_DWORD *)(v185 + 20) = v73;
  domain = v61;
  if ( !v64 && v73 )
  {
    *(_BYTE *)(v185 + 32) = 1;
    goto LABEL_22;
  }
  if ( v73 )
  {
    v176 |= v73 == 0;
    goto LABEL_22;
  }
  v176 = 1;
LABEL_277:
  if ( (v176 & 1) != 0
    || domain
    && !*(_DWORD *)(v185 + 20)
    && (v153 = ((int (__fastcall *)(const char *))*Curl_cstrdup)(domain), (*(_DWORD *)(v185 + 20) = v153) == 0) )
  {
LABEL_278:
    v135 = (void (__fastcall **)(int))Curl_cfree;
    ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v185 + 20));
    (*v135)(*(_DWORD *)(v185 + 12));
    (*v135)(*(_DWORD *)(v185 + 16));
    (*v135)(*(_DWORD *)(v185 + 4));
    (*v135)(*(_DWORD *)(v185 + 8));
    (*v135)(v185);
    return 0;
  }
  if ( !path || *(_DWORD *)(v185 + 12) )
    goto LABEL_352;
  v154 = strchr(path, 63);
  v155 = v154 ? (char *)Curl_memrchr(path, 47, v154 - path) : strrchr(path, 47);
  if ( !v155 )
    goto LABEL_352;
  v166 = v155 - path;
  v167 = (void *)((int (__fastcall *)(int))*Curl_cmalloc)(v155 - path + 2);
  *(_DWORD *)(v185 + 12) = v167;
  if ( !v167 )
    goto LABEL_278;
  memcpy(v167, path, v166 + 1);
  *(_BYTE *)(*(_DWORD *)(v185 + 12) + v166 + 1) = 0;
  v168 = (const char *)((int (__fastcall *)(_DWORD))*Curl_cstrdup)(*(_DWORD *)(v185 + 12));
  if ( !v168 )
  {
    *(_DWORD *)(v185 + 16) = 0;
    goto LABEL_278;
  }
  v169 = (char *)v168;
  v170 = strlen(v168);
  if ( *v169 == 34 )
    memmove(v169, v169 + 1, v170--);
  if ( !v170 )
  {
    if ( *v169 == 47 )
      goto LABEL_350;
    goto LABEL_351;
  }
  v171 = v170 - 1;
  if ( v169[v170 - 1] == 34 )
  {
    --v170;
    v169[v171] = 0;
  }
  if ( *v169 != 47 )
  {
LABEL_351:
    ((void (__fastcall *)(char *))*Curl_cfree)(v169);
    v172 = Curl_strndup("/", 1);
    *(_DWORD *)(v185 + 16) = v172;
    if ( !v172 )
      goto LABEL_278;
    goto LABEL_352;
  }
  if ( v170 && v169[v170 - 1] == 47 )
    v169[v170 - 1] = 0;
LABEL_350:
  *(_DWORD *)(v185 + 16) = v169;
LABEL_352:
  if ( !*(_DWORD *)(v185 + 4) )
    goto LABEL_278;
  v15 = v185;
  ++data->req.setcookies;
LABEL_215:
  if ( (*(_BYTE *)(v15 + 40) & 1) != 0 && !*(_BYTE *)(v15 + 33) )
    goto LABEL_276;
  if ( (*(_BYTE *)(v15 + 40) & 2) != 0 )
  {
    v132 = (const char *)*(unsigned __int8 *)(v15 + 33);
    v133 = v132 == 0;
    if ( *(_BYTE *)(v15 + 33) )
    {
      v132 = *(const char **)(v15 + 12);
      v133 = v132 == 0;
    }
    if ( v133 || strcmp(v132, "/") || *(_BYTE *)(v15 + 32) )
      goto LABEL_276;
  }
  v102 = v186;
  if ( !v186->running && v186->newsession && !*(_QWORD *)(v15 + 24) )
  {
LABEL_276:
    v134 = (void (__fastcall **)(int))Curl_cfree;
    ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v15 + 20));
    (*v134)(*(_DWORD *)(v15 + 12));
    (*v134)(*(_DWORD *)(v15 + 16));
    (*v134)(*(_DWORD *)(v15 + 4));
    (*v134)(*(_DWORD *)(v15 + 8));
    (*v134)(v15);
    return 0;
  }
  *(_BYTE *)(v15 + 34) = v186->running;
  v181 = data;
  v103 = v102->lastct + 1;
  v102->lastct = v103;
  *(_DWORD *)(v15 + 36) = v103;
  if ( !v178 )
  {
    v104 = 0;
    v105 = time(0u);
    p_next_expiration = &v186->next_expiration;
    next_expiration_high = HIDWORD(v186->next_expiration);
    if ( (v105 >> 0x1F) - (next_expiration_high + !__CFSHR__(v105, 0x1F)) < 0 == __OFSUB__(
                                                                                   v105 >> 0x1F,
                                                                                   next_expiration_high,
                                                                                   __CFSHR__(v105, 0x1F))
      || !(~LODWORD(v186->next_expiration) | next_expiration_high ^ 0x7FFFFFFF) )
    {
      *(_DWORD *)p_next_expiration = -1;
      *((_DWORD *)p_next_expiration + 1) = 0x7FFFFFFF;
      v156 = (_DWORD *)Curl_cfree;
      do
      {
        v157 = v186->cookies[v104];
        if ( v157 )
        {
          p_next = 0;
          do
          {
            while ( 1 )
            {
              v159 = v157;
              v157 = v157->next;
              expires = v159->expires;
              v161 = expires | HIDWORD(expires);
              if ( !expires )
                break;
              v162 = (unsigned __int64)(expires - v105) >> 32;
              if ( expires >= v105 )
                break;
              v163 = v186;
              if ( p_next )
                *p_next = v157;
              else
                v186->cookies[v104] = v157;
              --v163->numcookies;
              ((void (__fastcall *)(char *, _DWORD, int, int))*v156)(v159->domain, *v156, v161, v162);
              ((void (__fastcall *)(char *))*v156)(v159->path);
              ((void (__fastcall *)(char *))*v156)(v159->spath);
              ((void (__fastcall *)(char *))*v156)(v159->name);
              ((void (__fastcall *)(char *))*v156)(v159->value);
              ((void (__fastcall *)(Cookie *))*v156)(v159);
              if ( !v157 )
                goto LABEL_311;
            }
            if ( expires && expires < *p_next_expiration )
              *p_next_expiration = expires;
            p_next = &v159->next;
          }
          while ( v157 );
        }
LABEL_311:
        ++v104;
      }
      while ( v104 != 63 );
    }
  }
  v108 = (Cookie *)v185;
  v109 = cookiehash(*(const char *const *)(v185 + 20));
  v110 = v186;
  v184 = v109;
  next = v186->cookies[v109];
  if ( !next )
  {
    v115 = 0;
    v114 = 0;
    goto LABEL_286;
  }
  v112 = 0;
  v113 = 0;
  v114 = 0;
  while ( 2 )
  {
    v115 = next;
    if ( curl_strequal(next->name, *(_DWORD *)(v185 + 4)) )
    {
      v116 = v115->domain;
      v117 = *(_DWORD *)(v185 + 20);
      if ( v116 )
      {
        if ( v117 && curl_strequal(v116, v117) )
        {
LABEL_232:
          spath = v115->spath;
          if ( spath )
          {
            v119 = *(_DWORD *)(v185 + 16);
            v120 = v119 == 0;
            if ( v119 )
              v120 = !v115->secure;
            if ( !v120 )
            {
              v121 = *(_BYTE *)(v185 + 33) == 0;
              if ( !*(_BYTE *)(v185 + 33) )
                v121 = secure == 0;
              if ( v121 )
              {
                v122 = strchr(spath + 1, 47);
                v123 = v122 ? v122 - spath : strlen(spath);
                if ( curl_strnequal(spath, v119, v123) )
                {
                  v130 = v181 == 0;
                  if ( v181 )
                    v130 = (*((_BYTE *)&v181->set + 1337) & 0x20) == 0;
                  if ( !v130 )
                    Curl_infof(
                      v181,
                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                      *(const char **)(v185 + 4),
                      *(const char **)(v185 + 20));
LABEL_271:
                  v131 = (void (__fastcall **)(int))Curl_cfree;
                  ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v185 + 20));
                  (*v131)(*(_DWORD *)(v185 + 12));
                  (*v131)(*(_DWORD *)(v185 + 16));
                  (*v131)(*(_DWORD *)(v185 + 4));
                  (*v131)(*(_DWORD *)(v185 + 8));
                  (*v131)(v185);
                  return 0;
                }
              }
            }
          }
        }
      }
      else if ( !v117 )
      {
        goto LABEL_232;
      }
    }
    if ( !v112 )
    {
      if ( curl_strequal(v115->name, *(_DWORD *)(v185 + 4)) )
      {
        v124 = v115->domain;
        v125 = *(_DWORD *)(v185 + 20);
        if ( v124 )
        {
          if ( v125 && curl_strequal(v124, v125) )
          {
            v126 = v114 | (*(_BYTE *)(v185 + 32)
                         - v115->tailmatch
                         + (v115->tailmatch == *(unsigned __int8 *)(v185 + 32))
                         + v115->tailmatch
                         - *(_BYTE *)(v185 + 32));
            v114 = 0;
            if ( (v126 & 1) == 0 )
              goto LABEL_256;
          }
          else
          {
            v112 = 0;
            if ( (v114 & 1) == 0 )
            {
              v114 = 0;
              goto LABEL_227;
            }
          }
LABEL_251:
          v128 = v115->spath;
          v129 = *(_DWORD *)(v185 + 16);
          if ( !v128 )
          {
            v114 = 0;
            v112 = 0;
            if ( v129 )
              goto LABEL_227;
            goto LABEL_260;
          }
          if ( v129 )
          {
            if ( curl_strequal(v128, v129) )
            {
              v114 = 0;
              v112 = 0;
              if ( (v115->spath != 0) == (*(_DWORD *)(v185 + 16) == 0) )
                goto LABEL_227;
              goto LABEL_260;
            }
          }
          else if ( *(_DWORD *)(v185 + 16) )
          {
LABEL_260:
            v114 = 1;
            if ( *(_BYTE *)(v185 + 34) )
            {
              v113 = v115;
              v112 = (Cookie **)v185;
            }
            else
            {
              v113 = v115;
              v112 = (Cookie **)v185;
              if ( v115->livecookie )
                goto LABEL_271;
            }
            goto LABEL_227;
          }
          v114 = 0;
          v112 = 0;
          goto LABEL_227;
        }
        v127 = (unsigned __int8)(v114 | (v125 == 0));
        v114 = 0;
        if ( (v127 & 1) != 0 )
          goto LABEL_251;
      }
LABEL_256:
      v112 = 0;
    }
LABEL_227:
    next = v115->next;
    if ( v115->next )
      continue;
    break;
  }
  if ( v112 )
  {
    creationtime = v113->creationtime;
    name = v113->name;
    *v112 = v113->next;
    v112[9] = (Cookie *)creationtime;
    v138 = (void (__fastcall **)(Cookie **))Curl_cfree;
    ((void (__fastcall *)(char *))*Curl_cfree)(name);
    (*v138)((Cookie **)v113->value);
    (*v138)((Cookie **)v113->domain);
    (*v138)((Cookie **)v113->path);
    (*v138)((Cookie **)v113->spath);
    v139 = (char *)v112[1];
    v140 = (char *)v112[2];
    v141 = (char *)v112[3];
    v142 = (char *)v112[4];
    v143 = (char *)v112[5];
    v113->next = *v112;
    v113->name = v139;
    v113->value = v140;
    v113->path = v141;
    v113->spath = v142;
    v113->domain = v143;
    v144 = v112[7];
    v145 = v112[8];
    v146 = (int)v112[9];
    v147 = v112[10];
    v148 = v112[11];
    LODWORD(v113->expires) = v112[6];
    HIDWORD(v113->expires) = v144;
    *(_DWORD *)&v113->tailmatch = v145;
    v113->creationtime = v146;
    *(_DWORD *)&v113->prefix = v147;
    *((_DWORD *)&v113->prefix + 1) = v148;
    (*v138)(v112);
    v108 = v113;
  }
  v110 = v186;
LABEL_286:
  if ( !v181 )
    goto LABEL_291;
  v149 = !v110->running;
  if ( v110->running )
    v149 = (*((_BYTE *)&v181->set + 1337) & 0x20) == 0;
  if ( v149 )
  {
LABEL_291:
    if ( (v114 & 1) != 0 )
      goto LABEL_296;
LABEL_292:
    if ( v115 )
      v115->next = v108;
    else
      v110->cookies[v184] = v108;
    ++v110->numcookies;
    goto LABEL_296;
  }
  v164 = "Added";
  if ( (v114 & 1) != 0 )
    v164 = "Replaced";
  Curl_infof(
    v181,
    "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
    v164,
    v108->name,
    v108->value,
    v108->domain,
    v108->path,
    v108->expires);
  if ( (v114 & 1) == 0 )
    goto LABEL_292;
LABEL_296:
  v150 = v108->expires;
  if ( v150 )
  {
    next_expiration = v110->next_expiration;
    v151 = &v110->next_expiration;
    if ( v150 < __SPAIR64__(*((_DWORD *)v151 + 1), next_expiration) )
      *v151 = v150;
  }
  return v108;
}
