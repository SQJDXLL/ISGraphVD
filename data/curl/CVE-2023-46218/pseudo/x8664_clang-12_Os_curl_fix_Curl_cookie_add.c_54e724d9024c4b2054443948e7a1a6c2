Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  Cookie *v10; // r13
  time_t v11; // rax
  __int64 v12; // rax
  const char *v13; // r13
  char *i; // rbx
  char v15; // bp
  size_t v16; // rax
  size_t v17; // rdx
  unsigned __int64 v18; // r12
  char v19; // al
  size_t v20; // r15
  size_t v21; // r14
  size_t v22; // rax
  size_t v23; // rdx
  size_t v24; // r14
  size_t v25; // r15
  const char *v26; // rax
  char v27; // cl
  const char *v28; // r13
  __int64 v29; // rcx
  char v30; // dl
  __int64 v31; // rax
  char *v32; // rax
  const char *v33; // rax
  const char *name; // rbx
  char v35; // cl
  int v36; // eax
  char *v37; // rdi
  __int64 *v38; // rbx
  int v39; // eax
  int v40; // eax
  const char *v41; // rbx
  size_t v42; // r15
  _BYTE *v43; // rax
  const char *v44; // rdi
  char is_ipnum; // r12
  const char *v46; // rbp
  __int64 v47; // rax
  __int64 v48; // rax
  __int64 v49; // rax
  char *v50; // rax
  char *v51; // rax
  char *v52; // rax
  const char *v53; // r12
  int v54; // ebp
  char v55; // r14
  __int64 v56; // rax
  const char *v57; // rax
  char *v58; // rax
  __int64 v59; // rax
  __int64 v60; // rax
  __int64 v61; // rbp
  __int64 v62; // rax
  char *v63; // rax
  __int64 v64; // rax
  _BOOL4 v65; // ebp
  char v66; // al
  char v67; // bl
  const char *v68; // rbp
  __int64 v69; // rax
  char *v70; // rax
  char v71; // r14
  char *v72; // rax
  signed __int64 v73; // rbx
  char *v74; // rax
  size_t v75; // rbx
  char *v76; // rax
  unsigned __int8 prefix; // al
  CookieInfo *v78; // rbx
  bool running; // al
  int v80; // eax
  Cookie *next; // rax
  Cookie *v82; // rbx
  char v83; // r14
  Cookie *v84; // rbp
  char *v85; // rdi
  char *v86; // rsi
  const char *spath; // r15
  char *v88; // r12
  char *v89; // rax
  size_t v90; // rax
  char *v91; // rdi
  char *v92; // rsi
  bool v93; // zf
  char *v94; // rdi
  char *v95; // rsi
  const char *v96; // rdi
  const char *v98; // rdx
  Cookie **p_next; // rax
  curl_off_t expires; // rax
  Cookie *v101; // rdi
  Cookie *v102; // [rsp+8h] [rbp-110h]
  char v103; // [rsp+17h] [rbp-101h]
  size_t hostnamea; // [rsp+18h] [rbp-100h]
  char *s; // [rsp+28h] [rbp-F0h]
  char v109; // [rsp+38h] [rbp-E0h]
  __int64 *p_expires; // [rsp+48h] [rbp-D0h]
  time_t v112; // [rsp+50h] [rbp-C8h]
  __int64 v113; // [rsp+58h] [rbp-C0h]
  char *dest[23]; // [rsp+60h] [rbp-B8h] BYREF

  v10 = 0LL;
  v11 = time(0LL);
  if ( data->req.setcookies > 0x31u )
    return v10;
  v112 = v11;
  v12 = Curl_ccalloc(1LL, 72LL);
  if ( !v12 )
    return 0LL;
  v10 = (Cookie *)v12;
  v102 = (Cookie *)v12;
  if ( !httpheader )
  {
    dest[0] = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 10;
      v10->httponly = 1;
    }
    if ( *lineptr != 35 )
    {
      v50 = strchr(lineptr, 13);
      if ( v50 )
        *v50 = 0;
      v51 = strchr(lineptr, 10);
      if ( v51 )
        *v51 = 0;
      v52 = strtok_r(lineptr, "\t", dest);
      if ( !v52 )
        goto LABEL_252;
      v53 = v52;
      v54 = 0;
      v55 = 0;
      do
      {
        switch ( v54 )
        {
          case 0:
            if ( *v53 == 46 )
              ++v53;
            v56 = Curl_cstrdup(v53);
            v102->domain = (char *)v56;
            if ( !v56 )
              v55 = 1;
            v54 = 0;
            break;
          case 1:
            v102->tailmatch = (unsigned int)curl_strequal(v53, "TRUE") != 0;
            v54 = 1;
            break;
          case 2:
            if ( !strcmp("TRUE", v53) || !strcmp("FALSE", v53) )
            {
              v61 = Curl_cstrdup("/");
              v102->path = (char *)v61;
              v62 = Curl_cstrdup("/");
              if ( !v62 )
                v55 = 1;
              v102->spath = (char *)v62;
              if ( !v61 )
                v55 = 1;
              goto LABEL_151;
            }
            v57 = (const char *)Curl_cstrdup(v53);
            v102->path = (char *)v57;
            v54 = 2;
            if ( v57 )
            {
              v58 = sanitize_cookie_path(v57);
              v102->spath = v58;
              if ( !v58 )
                v55 = 1;
            }
            else
            {
              v55 = 1;
            }
            break;
          case 3:
LABEL_151:
            v102->secure = 0;
            v54 = 3;
            if ( (unsigned int)curl_strequal(v53, "TRUE") )
            {
              if ( !secure && !c->running )
                goto LABEL_155;
              v102->secure = 1;
            }
            break;
          case 4:
            if ( (unsigned int)curlx_strtoofft(v53, 0LL, 10LL, &v10->expires) )
              v55 = 1;
            v54 = 4;
            break;
          case 5:
            v59 = Curl_cstrdup(v53);
            v102->name = (char *)v59;
            v54 = 5;
            if ( v59 )
            {
              if ( (unsigned int)curl_strnequal("__Secure-", v59, 9LL) )
              {
                v102->prefix |= 1u;
              }
              else if ( (unsigned int)curl_strnequal("__Host-", v102->name, 7LL) )
              {
                v102->prefix |= 2u;
              }
            }
            else
            {
LABEL_155:
              v55 = 1;
            }
            break;
          case 6:
            v60 = Curl_cstrdup(v53);
            v102->value = (char *)v60;
            if ( !v60 )
              v55 = 1;
            v54 = 6;
            break;
          default:
            break;
        }
        v63 = strtok_r(0LL, "\t", dest);
        ++v54;
        if ( !v63 )
          break;
        v53 = v63;
      }
      while ( (v55 & 1) == 0 );
      if ( v54 == 6 )
      {
        v64 = Curl_cstrdup(&L_str_22);
        v10 = v102;
        v102->value = (char *)v64;
        v93 = v64 == 0;
        v65 = v64 == 0;
        v66 = v55;
        v55 = 1;
        if ( !v93 )
          v55 = v66;
        v54 = v65 ^ 7;
      }
      else
      {
        v10 = v102;
      }
      if ( (v55 & 1) != 0 || v54 != 7 )
        goto LABEL_252;
      goto LABEL_195;
    }
LABEL_118:
    Curl_cfree(v10);
    return 0LL;
  }
  if ( strlen(lineptr) > 0x1388 )
    goto LABEL_118;
  p_expires = &v10->expires;
  v113 = 0x7FFFFFFFFFFFFFFFLL - v112;
  v109 = 0;
  while ( 1 )
  {
    v13 = lineptr + 1;
    for ( i = lineptr; ; ++i )
    {
      v15 = *i;
      if ( *i != 32 && v15 != 9 )
        break;
      ++v13;
    }
    v16 = strcspn(i, ";\t\r\n=");
    if ( !v16 )
    {
      lineptr = i;
      v10 = v102;
      goto LABEL_55;
    }
    v17 = v16;
    lineptr = &i[v16];
    v18 = v16;
    while ( 1 )
    {
      v19 = i[v18 - 1];
      if ( v19 != 32 && v19 != 9 )
        break;
      if ( !--v18 )
      {
        v18 = 0LL;
        break;
      }
    }
    v20 = 0LL;
    s = 0LL;
    v103 = *lineptr;
    if ( *lineptr == 61 )
      break;
LABEL_25:
    if ( v18 > 0xFFE || v20 > 0xFFE || v20 + v18 >= 0x1001 )
    {
      freecookie(v102);
      if ( (*((_BYTE *)&data->set + 2229) & 0x20) == 0 )
        return 0LL;
      v10 = 0LL;
      Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v18, v20);
      return v10;
    }
    v10 = v102;
    if ( v15 == 95 && v18 >= 7 && i[1] == 95 )
    {
      if ( (unsigned int)curl_strnequal("__Secure-", i, 9LL) )
      {
        v102->prefix |= 1u;
      }
      else if ( (unsigned int)curl_strnequal("__Host-", i, 7LL) )
      {
        v102->prefix |= 2u;
      }
    }
    if ( !v102->name )
    {
      if ( v103 != 61 )
        goto LABEL_252;
      Curl_cfree(0LL);
      v102->name = (char *)Curl_strndup(i, v18);
      Curl_cfree(v102->value);
      v33 = (const char *)Curl_strndup(s, v20);
      v102->value = (char *)v33;
      if ( !v33 )
        goto LABEL_252;
      name = v102->name;
      if ( !name )
        goto LABEL_252;
      if ( v33[strcspn(v33, &invalid_octets_badoctets)] || name[strcspn(name, &invalid_octets_badoctets)] )
      {
        if ( (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
        goto LABEL_252;
      }
      do
      {
        do
LABEL_55:
          v35 = *lineptr++;
        while ( v35 == 32 );
      }
      while ( v35 == 9 );
      v36 = 0;
      if ( v35 == 59 )
        goto LABEL_58;
LABEL_165:
      v67 = v109;
      if ( (v109 & 1) != 0 )
      {
        v68 = path;
      }
      else
      {
        v68 = path;
        if ( domain )
        {
          if ( !v10->domain )
          {
            v69 = Curl_cstrdup(domain);
            v10->domain = (char *)v69;
            v67 = 1;
            if ( v69 )
              v67 = v109;
          }
        }
      }
      if ( (v67 & 1) == 0 && v68 && !v10->path )
      {
        v70 = strchr(v68, 63);
        v71 = v67;
        v72 = v70 ? (char *)Curl_memrchr(v68, 47LL, v70 - v68) : strrchr(v68, 47);
        if ( v72 )
        {
          v73 = v72 - v68;
          v74 = (char *)Curl_cmalloc(v72 - v68 + 2);
          v10->path = v74;
          if ( !v74 )
            goto LABEL_252;
          v75 = v73 + 1;
          memcpy(v74, path, v75);
          v10->path[v75] = 0;
          v76 = sanitize_cookie_path(v10->path);
          v10->spath = v76;
          v67 = 1;
          if ( v76 )
            v67 = v71;
        }
      }
      if ( (v67 & 1) == 0 && v10->name )
      {
        ++data->req.setcookies;
LABEL_195:
        prefix = v10->prefix;
        if ( (prefix & 1) != 0 && !v10->secure )
          goto LABEL_252;
        if ( (prefix & 2) != 0 )
        {
          if ( !v10->secure )
            goto LABEL_252;
          v96 = v10->path;
          if ( !v96 || strcmp(v96, "/") || v10->tailmatch )
            goto LABEL_252;
        }
        v78 = c;
        running = c->running;
        if ( !running && c->newsession && !v10->expires )
          goto LABEL_252;
        v10->livecookie = running;
        v80 = c->lastct + 1;
        c->lastct = v80;
        v10->creationtime = v80;
        if ( !noexpire )
          remove_expired(c);
        hostnamea = cookiehash(v10->domain);
        next = c->cookies[hostnamea];
        if ( !next )
        {
          v84 = 0LL;
          v83 = 0;
LABEL_259:
          if ( data && v78->running && (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
          {
            v98 = "Replaced";
            if ( (v83 & 1) == 0 )
              v98 = "Added";
            Curl_infof(
              data,
              "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
              v98,
              v10->name,
              v10->value,
              v10->domain,
              v10->path,
              v10->expires);
          }
          if ( (v83 & 1) == 0 )
          {
            p_next = &v78->cookies[hostnamea];
            if ( v84 )
              p_next = &v84->next;
            *p_next = v10;
            ++v78->numcookies;
          }
          expires = v10->expires;
          if ( expires && expires < v78->next_expiration )
            v78->next_expiration = expires;
          return v10;
        }
        v82 = 0LL;
        v10 = 0LL;
        v83 = 0;
        while ( 1 )
        {
          v84 = next;
          if ( !(unsigned int)curl_strequal(next->name, v102->name) )
            goto LABEL_218;
          v85 = v84->domain;
          v86 = v102->domain;
          if ( v85 )
          {
            if ( !v86 || !(unsigned int)curl_strequal(v85, v86) )
              goto LABEL_218;
          }
          else if ( v86 )
          {
            goto LABEL_218;
          }
          spath = v84->spath;
          if ( spath )
          {
            v88 = v102->spath;
            if ( v88 )
            {
              if ( v84->secure && !v102->secure && !secure )
              {
                v89 = strchr(spath + 1, 47);
                v90 = v89 ? v89 - spath : strlen(spath);
                if ( (unsigned int)curl_strnequal(spath, v88, v90) )
                {
                  if ( data && (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
                    Curl_infof(
                      data,
                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                      v102->name,
                      v102->domain);
                  v101 = v102;
LABEL_253:
                  freecookie(v101);
                  return 0LL;
                }
              }
            }
          }
LABEL_218:
          if ( !v82 )
          {
            if ( (unsigned int)curl_strequal(v84->name, v102->name) )
            {
              v91 = v84->domain;
              v92 = v102->domain;
              if ( !v91 )
              {
                v93 = v92 == 0LL;
                goto LABEL_225;
              }
              if ( v92 && (unsigned int)curl_strequal(v91, v92) )
              {
                v93 = v84->tailmatch == v102->tailmatch;
LABEL_225:
                if ( v93 )
                  v83 = 1;
              }
              if ( (v83 & 1) != 0 )
              {
                v94 = v84->spath;
                if ( !v94 )
                {
                  v94 = 0LL;
                  goto LABEL_233;
                }
                v95 = v102->spath;
                if ( v95 )
                {
                  if ( (unsigned int)curl_strequal(v94, v95) )
                  {
                    v94 = v84->spath;
                    goto LABEL_233;
                  }
                  v83 = 0;
                }
                else
                {
LABEL_233:
                  v82 = v102;
                  if ( (v94 != 0LL) == (v102->spath == 0LL) )
                    v83 = 0;
                  if ( (v83 & 1) != 0 )
                  {
                    if ( v102->livecookie )
                    {
                      v10 = v84;
                    }
                    else
                    {
                      v10 = v84;
                      if ( v84->livecookie )
                      {
                        v101 = v102;
                        goto LABEL_253;
                      }
                    }
                    goto LABEL_242;
                  }
                }
              }
            }
            v82 = 0LL;
          }
LABEL_242:
          next = v84->next;
          if ( !v84->next )
          {
            if ( v82 )
            {
              v82->next = v10->next;
              v82->creationtime = v10->creationtime;
              Curl_cfree(v10->name);
              Curl_cfree(v10->value);
              Curl_cfree(v10->domain);
              Curl_cfree(v10->path);
              Curl_cfree(v10->spath);
              qmemcpy(v10, v82, sizeof(Cookie));
              Curl_cfree(v82);
            }
            else
            {
              v10 = v102;
            }
            v78 = c;
            goto LABEL_259;
          }
        }
      }
LABEL_252:
      v101 = v10;
      goto LABEL_253;
    }
    if ( v20 )
      goto LABEL_43;
    if ( v18 == 8 )
    {
      if ( (unsigned int)curl_strnequal("httponly", i, 8LL) )
      {
        v102->httponly = 1;
        goto LABEL_55;
      }
    }
    else if ( v18 == 6 && (unsigned int)curl_strnequal("secure", i, 6LL) )
    {
      if ( !secure && c->running )
        goto LABEL_252;
      v102->secure = 1;
      goto LABEL_55;
    }
    if ( v103 != 61 )
      goto LABEL_55;
LABEL_43:
    if ( v18 == 7 )
    {
      if ( (unsigned int)curl_strnequal("version", i, 7LL) )
        goto LABEL_55;
      if ( (unsigned int)curl_strnequal("max-age", i, 7LL) )
      {
        v37 = s + 1;
        if ( *s != 34 )
          v37 = s;
        v38 = p_expires;
        v39 = curlx_strtoofft(v37, 0LL, 10LL, p_expires);
        if ( v39 )
        {
          if ( v39 != 2 )
          {
            if ( v39 != 1 )
              goto LABEL_55;
            goto LABEL_112;
          }
        }
        else
        {
          v49 = *p_expires;
          if ( *p_expires )
          {
            if ( v113 >= v49 )
            {
              *p_expires = v112 + v49;
              goto LABEL_55;
            }
LABEL_112:
            *p_expires = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_55;
          }
        }
      }
      else
      {
        if ( !(unsigned int)curl_strnequal("expires", i, 7LL) )
          goto LABEL_55;
        v38 = p_expires;
        if ( v20 > 0x7F || *p_expires )
          goto LABEL_55;
        memcpy(dest, s, v20);
        *((_BYTE *)dest + v20) = 0;
        v47 = Curl_getdate_capped(dest);
        *p_expires = v47;
        if ( v47 )
        {
          if ( v47 < 0 )
            *p_expires = 0LL;
          goto LABEL_55;
        }
      }
      *v38 = 1LL;
      goto LABEL_55;
    }
    if ( v18 != 6 )
    {
      if ( v18 == 4 )
      {
        if ( (unsigned int)curl_strnequal("path", i, 4LL) )
        {
          Curl_cfree(v102->path);
          v31 = Curl_strndup(s, v20);
          v102->path = (char *)v31;
          if ( !v31 )
            goto LABEL_252;
          Curl_cfree(v102->spath);
          v32 = sanitize_cookie_path(v102->path);
          v102->spath = v32;
          if ( !v32 )
            goto LABEL_252;
        }
      }
      goto LABEL_55;
    }
    v40 = curl_strnequal("domain", i, 6LL);
    if ( !v20 || !v40 )
      goto LABEL_55;
    v41 = s + 1;
    if ( *s != 46 )
      v41 = s;
    v42 = v20 - (*s == 46);
    if ( v42 == 9 && (unsigned int)curl_strnequal(v41, "localhost", 9LL)
      || (v43 = memchr(v41, 46, v42)) != 0LL && (unsigned __int64)(&v41[v42] - v43) > 1 )
    {
      v44 = domain;
      if ( !domain )
        v44 = v41;
      is_ipnum = Curl_host_is_ipnum(v44);
      if ( !domain )
      {
        domain = 0LL;
        goto LABEL_105;
      }
      v46 = domain;
      if ( !is_ipnum )
      {
LABEL_86:
        domain = v46;
        if ( !cookie_tailmatch(v41, v42, v46) )
          goto LABEL_96;
        is_ipnum = 0;
        goto LABEL_105;
      }
    }
    else
    {
      v46 = ":";
      if ( !(unsigned __int8)Curl_host_is_ipnum(":") )
        goto LABEL_86;
    }
    domain = v46;
    if ( strncmp(v41, v46, v42) || (is_ipnum = 1, v42 != strlen(v46)) )
    {
LABEL_96:
      v109 = 1;
      if ( (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
        Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v41);
      goto LABEL_55;
    }
LABEL_105:
    Curl_cfree(v102->domain);
    v48 = Curl_strndup(v41, v42);
    v102->domain = (char *)v48;
    if ( !is_ipnum && v48 )
    {
      v102->tailmatch = 1;
      goto LABEL_55;
    }
    if ( v48 )
      goto LABEL_55;
    v36 = 6;
    v109 = 1;
LABEL_58:
    if ( v36 )
      goto LABEL_165;
  }
  s = &i[v17 + 1];
  v21 = v17;
  v22 = strcspn(s, ";\r\n");
  v23 = v21;
  v24 = v22 + v21;
  if ( v22 )
  {
    v25 = v22;
    v26 = &v13[v24];
    while ( 1 )
    {
      v27 = *(v26 - 1);
      if ( v27 != 32 && v27 != 9 )
        break;
      --v25;
      --v26;
      if ( !v25 )
        goto LABEL_22;
    }
    v28 = &v13[v23];
    v29 = 0LL;
    while ( 1 )
    {
      v30 = v28[v29];
      if ( v30 != 32 && v30 != 9 )
        break;
      if ( v25 == ++v29 )
      {
        v20 = 0LL;
        s = (char *)v26;
        goto LABEL_23;
      }
    }
    v20 = v25 - v29;
    s = (char *)&v28[v29];
  }
  else
  {
LABEL_22:
    v20 = 0LL;
  }
LABEL_23:
  if ( !memchr(s, 9, v20) )
  {
    lineptr = &i[v24 + 1];
    goto LABEL_25;
  }
  freecookie(v102);
  if ( (*((_BYTE *)&data->set + 2229) & 0x20) == 0 )
    return 0LL;
  v10 = 0LL;
  Curl_infof(data, "cookie contains TAB, dropping");
  return v10;
}
