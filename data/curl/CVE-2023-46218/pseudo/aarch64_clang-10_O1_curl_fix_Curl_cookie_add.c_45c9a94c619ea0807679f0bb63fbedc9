Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  int v8; // wzr
  Cookie **v17; // x0
  unsigned int setcookies; // w8
  Cookie *v19; // x23
  __int64 v20; // x0
  Cookie *v21; // x21
  const char *i; // x27
  int v23; // w25
  size_t v24; // x0
  size_t v25; // x26
  const char *v26; // x22
  size_t v27; // x28
  int v28; // w8
  const char *v29; // x24
  size_t v30; // x19
  const char *j; // x8
  int v32; // w9
  const char *v33; // x26
  int v34; // w8
  int v35; // w8
  int v36; // w24
  unsigned __int8 v37; // w8
  char *v38; // x0
  const char *v39; // x19
  int v40; // w0
  const char *v41; // x24
  size_t v42; // x19
  const char *v43; // x25
  const char *v44; // x0
  char is_ipnum; // w26
  const char *v46; // x0
  int v47; // w0
  int v48; // w8
  bool v49; // zf
  __int64 v50; // x0
  __int64 v51; // x8
  char *v52; // x0
  char *v53; // x0
  char *v54; // x0
  const char *v55; // x28
  int v56; // w27
  int v57; // w25
  const char *v58; // x0
  char *v59; // x0
  const char *v60; // x0
  _BOOL4 v61; // w8
  __int64 v62; // x0
  __int64 v63; // x0
  int v64; // w25
  __int64 v65; // x0
  char *v66; // x0
  char v67; // w23
  char *v68; // x22
  __int64 v69; // x0
  __int64 v70; // x0
  char *v71; // x0
  char *v72; // x0
  signed __int64 v73; // x19
  char *v74; // x0
  size_t v75; // x19
  char *v76; // x0
  int v77; // w8
  Cookie *next; // x8
  CookieInfo *v79; // x26
  bool v80; // w19
  Cookie *v81; // x22
  int v82; // w27
  Cookie *v83; // x28
  char *v84; // x0
  char *v85; // x1
  const char *spath; // x24
  char *v87; // x25
  char *v88; // x0
  size_t v89; // x2
  int v90; // w8
  char *v91; // x0
  char *v92; // x1
  bool v93; // zf
  int v94; // w8
  char *v95; // x0
  char *v96; // x1
  const char *v97; // x0
  __int128 v99; // q0
  __int128 v100; // q1
  __int128 v101; // q2
  const char *v102; // x2
  Cookie **p_next; // x8
  curl_off_t expires; // x8
  __int64 v105; // [xsp+0h] [xbp-F0h]
  curl_off_t *v106; // [xsp+8h] [xbp-E8h]
  char **p_domain; // [xsp+10h] [xbp-E0h]
  char **str; // [xsp+18h] [xbp-D8h]
  char *s; // [xsp+20h] [xbp-D0h]
  char **p_value; // [xsp+28h] [xbp-C8h]
  bool v111; // [xsp+30h] [xbp-C0h]
  char v112; // [xsp+34h] [xbp-BCh]
  CookieInfo *cookies; // [xsp+38h] [xbp-B8h]
  bool v114; // [xsp+44h] [xbp-ACh]
  bool v115; // [xsp+44h] [xbp-ACh]
  char *s2; // [xsp+48h] [xbp-A8h]
  char **p_name; // [xsp+50h] [xbp-A0h]
  Cookie **p_expires; // [xsp+60h] [xbp-90h]
  char *dest[17]; // [xsp+68h] [xbp-88h] BYREF

  v17 = (Cookie **)time(0uLL);
  setcookies = data->req.setcookies;
  v19 = 0LL;
  p_expires = v17;
  if ( setcookies > 0x31 )
    return v19;
  s2 = (char *)domain;
  v20 = Curl_ccalloc(1LL, 72LL);
  if ( !v20 )
    return 0LL;
  v21 = (Cookie *)v20;
  if ( !httpheader )
  {
    dest[0] = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 0xA;
      v21->httponly = 1;
    }
    if ( *lineptr == 35 )
    {
      Curl_cfree(v21);
    }
    else
    {
      v52 = strchr(lineptr, 13);
      if ( v52 )
        *v52 = 0;
      v53 = strchr(lineptr, 10);
      if ( v53 )
        *v53 = 0;
      v115 = secure;
      v54 = strtok_r((char *)lineptr, "\t", dest);
      if ( v54 )
      {
        v55 = v54;
        v56 = 0;
        v57 = 0;
        p_expires = (Cookie **)&v21->expires;
        while ( 2 )
        {
          switch ( v56 )
          {
            case 0:
              if ( *v55 == 46 )
                v58 = v55 + 1;
              else
                v58 = v55;
              v59 = (char *)Curl_cstrdup(v58);
              v21->domain = v59;
              goto LABEL_169;
            case 1:
              v21->tailmatch = (unsigned int)curl_strequal(v55, "TRUE") != 0;
              goto LABEL_177;
            case 2:
              if ( !strcmp("TRUE", v55) || !strcmp("FALSE", v55) )
              {
                v63 = Curl_cstrdup("/");
                v21->path = (char *)v63;
                v64 = v57 | (v63 == 0);
                v65 = Curl_cstrdup("/");
                v57 = v64 | (v65 == 0);
                ++v56;
                v21->spath = (char *)v65;
LABEL_172:
                v21->secure = 0;
                if ( (unsigned int)curl_strequal(v55, "TRUE") )
                {
                  if ( v115 || c->running )
                  {
                    v21->secure = 1;
                    goto LABEL_177;
                  }
LABEL_176:
                  v57 = 1;
                }
              }
              else
              {
                v60 = (const char *)Curl_cstrdup(v55);
                v21->path = (char *)v60;
                if ( !v60 )
                  goto LABEL_176;
                v59 = sanitize_cookie_path(v60);
                v21->spath = v59;
LABEL_169:
                v61 = v59 == 0LL;
LABEL_170:
                v57 |= v61;
              }
LABEL_177:
              v66 = strtok_r(0uLL, "\t", dest);
              ++v56;
              if ( !v66 )
                goto LABEL_187;
              v55 = v66;
              if ( (v57 & 1) != 0 )
                goto LABEL_187;
              continue;
            case 3:
              goto LABEL_172;
            case 4:
              v61 = curlx_strtoofft(v55, 0LL, 10LL, p_expires) != 0;
              goto LABEL_170;
            case 5:
              v62 = Curl_cstrdup(v55);
              v21->name = (char *)v62;
              if ( !v62 )
                goto LABEL_176;
              if ( (unsigned int)curl_strnequal("__Secure-", v62, 9LL) )
              {
                v21->prefix |= 1u;
              }
              else if ( (unsigned int)curl_strnequal("__Host-", v21->name, 7LL) )
              {
                v21->prefix |= 2u;
              }
              goto LABEL_177;
            case 6:
              v59 = (char *)Curl_cstrdup(v55);
              v21->value = v59;
              goto LABEL_169;
            default:
              goto LABEL_177;
          }
        }
      }
      LOBYTE(v57) = 0;
      v56 = 0;
LABEL_187:
      if ( v56 == 6 )
      {
        v69 = Curl_cstrdup(&unk_23ED);
        LOBYTE(v57) = v57 | (v69 == 0);
        if ( v69 )
          v56 = 7;
        v21->value = (char *)v69;
      }
      if ( (v57 & 1) == 0 && v56 == 7 )
      {
        secure = v115;
        goto LABEL_213;
      }
LABEL_281:
      freecookie(v21);
    }
    return 0LL;
  }
  if ( strlen(lineptr) > 0x1388 )
  {
    Curl_cfree(v21);
    goto LABEL_211;
  }
  p_name = &v21->name;
  str = &v21->path;
  s = (char *)path;
  v106 = &v21->expires;
  p_domain = &v21->domain;
  p_value = &v21->value;
  v111 = noexpire;
  v112 = 0;
  v114 = secure;
  cookies = c;
  v105 = 0x7FFFFFFFFFFFFFFFLL - (_QWORD)p_expires;
  do
  {
    for ( i = lineptr; ; ++i )
    {
      v23 = *(unsigned __int8 *)i;
      if ( v23 != 32 && v23 != 9 )
        break;
    }
    v24 = strcspn(i, ";\t\r\n=");
    if ( !v24 )
      goto LABEL_119;
    v25 = v24;
    v26 = &i[v24];
    v27 = v24;
    do
    {
      v28 = (unsigned __int8)i[v27 - 1];
      if ( v28 != 32 && v28 != 9 )
        break;
      --v27;
    }
    while ( v27 );
    if ( *v26 == 61 )
    {
      v29 = &i[v24 + 1];
      v30 = strcspn(v29, ";\r\n");
      for ( j = &i[v25 + v30]; v30; --v30 )
      {
        v32 = (unsigned __int8)i[v25 + v30];
        if ( v32 != 32 && v32 != 9 )
          break;
      }
      v26 = j + 1;
      if ( v30 )
      {
        v33 = &i[v25 + 1 + v30];
        while ( 1 )
        {
          v34 = *(unsigned __int8 *)v29;
          if ( v34 != 32 && v34 != 9 )
            break;
          --v30;
          ++v29;
          if ( !v30 )
            goto LABEL_33;
        }
      }
      v33 = v29;
LABEL_33:
      if ( memchr(v33, 9, v30) )
      {
        freecookie(v21);
        if ( data && (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
        {
          Curl_infof(data, "cookie contains TAB, dropping");
          v35 = 1;
          goto LABEL_116;
        }
LABEL_49:
        v35 = 1;
        goto LABEL_116;
      }
      v36 = 1;
      if ( v27 > 0xFFE )
      {
LABEL_47:
        freecookie(v21);
        if ( !data || (*((_BYTE *)&data->set + 2229) & 0x20) == 0 )
          goto LABEL_49;
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v27, v30);
        v35 = 1;
        goto LABEL_116;
      }
    }
    else
    {
      v30 = 0LL;
      v36 = 0;
      v33 = 0LL;
      if ( v27 > 0xFFE )
        goto LABEL_47;
    }
    if ( v30 > 0xFFE || v30 + v27 > 0x1000 )
      goto LABEL_47;
    if ( v23 == 95 && v27 >= 7 && i[1] == 95 )
    {
      if ( (unsigned int)curl_strnequal("__Secure-", i, 9LL) )
      {
        v37 = v21->prefix | 1;
      }
      else
      {
        if ( !(unsigned int)curl_strnequal("__Host-", i, 7LL) )
          goto LABEL_54;
        v37 = v21->prefix | 2;
      }
      v21->prefix = v37;
    }
LABEL_54:
    if ( !*p_name )
    {
      if ( !v36 )
        goto LABEL_76;
      strstore(p_name, i, v27);
      strstore(p_value, v33, v30);
      v39 = *p_name;
      if ( !*p_name || !*p_value )
        goto LABEL_76;
      if ( invalid_octets(*p_value) || invalid_octets(v39) )
      {
        if ( data && (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
LABEL_76:
        v35 = 6;
        v112 = 1;
        goto LABEL_116;
      }
      goto LABEL_115;
    }
    if ( !v30 )
    {
      if ( v27 == 8 )
      {
        if ( (unsigned int)curl_strnequal("httponly", i, 8LL) )
        {
          v21->httponly = 1;
          goto LABEL_115;
        }
      }
      else if ( v27 == 6 && (unsigned int)curl_strnequal("secure", i, 6LL) )
      {
        if ( !v114 && cookies->running )
          goto LABEL_76;
        v21->secure = 1;
        goto LABEL_115;
      }
      if ( !v36 )
        goto LABEL_115;
    }
    if ( v27 == 7 )
    {
      if ( (unsigned int)curl_strnequal("version", i, 7LL) )
        goto LABEL_115;
      if ( !(unsigned int)curl_strnequal("max-age", i, 7LL) )
      {
        if ( (unsigned int)curl_strnequal("expires", i, 7LL) && v30 <= 0x7F && !v21->expires )
        {
          memcpy(dest, v33, v30);
          *((_BYTE *)dest + v30) = 0;
          v50 = Curl_getdate_capped(dest);
          v21->expires = v50;
          if ( v50 )
          {
            if ( (v50 & 0x8000000000000000LL) != 0 )
              v21->expires = 0LL;
          }
          else
          {
            v21->expires = 1LL;
          }
        }
        goto LABEL_115;
      }
      if ( *v33 == 34 )
        v46 = v33 + 1;
      else
        v46 = v33;
      v47 = curlx_strtoofft(v46, 0LL, 10LL, v106);
      if ( v47 )
      {
        if ( v47 != 2 )
        {
          if ( v47 == 1 )
LABEL_144:
            *v106 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_115:
          v35 = 0;
          goto LABEL_116;
        }
      }
      else
      {
        v51 = *v106;
        if ( *v106 )
        {
          if ( v105 >= v51 )
          {
            *v106 = (curl_off_t)p_expires + v51;
            goto LABEL_115;
          }
          goto LABEL_144;
        }
      }
      *v106 = 1LL;
      goto LABEL_115;
    }
    if ( v27 != 6 )
    {
      if ( v27 == 4 )
      {
        if ( (unsigned int)curl_strnequal("path", i, 4LL) )
        {
          strstore(str, v33, v30);
          if ( !*str )
            goto LABEL_76;
          Curl_cfree(v21->spath);
          v38 = sanitize_cookie_path(v21->path);
          v21->spath = v38;
          if ( !v38 )
            goto LABEL_76;
        }
      }
      goto LABEL_115;
    }
    v40 = curl_strnequal("domain", i, 6LL);
    if ( !v30 || !v40 )
      goto LABEL_115;
    if ( *v33 == 46 )
      v41 = v33 + 1;
    else
      v41 = v33;
    v42 = v30 - (*v33 == 46);
    v43 = s2;
    if ( bad_domain(v41, v42) )
      v43 = ":";
    if ( v43 )
      v44 = v43;
    else
      v44 = v41;
    is_ipnum = Curl_host_is_ipnum(v44);
    s2 = (char *)v43;
    if ( !v43 )
      goto LABEL_94;
    if ( (is_ipnum & 1) != 0 )
    {
      if ( !strncmp(v41, v43, v42) && v42 == strlen(v43) )
        goto LABEL_94;
      if ( (is_ipnum & 1) != 0 )
        goto LABEL_135;
    }
    if ( !cookie_tailmatch(v41, v42, v43) )
    {
LABEL_135:
      if ( data && (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
        Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v41);
      v35 = 0;
      v112 = 1;
      if ( !v8 )
        goto LABEL_115;
      goto LABEL_116;
    }
LABEL_94:
    strstore(p_domain, v41, v42);
    if ( *p_domain )
      v35 = 0;
    else
      v35 = 6;
    if ( is_ipnum & 1 | (*p_domain == 0LL) )
    {
      v112 |= *p_domain == 0LL;
      if ( v35 )
        goto LABEL_116;
      goto LABEL_115;
    }
    v35 = 0;
    v21->tailmatch = 1;
    if ( !v8 )
      goto LABEL_115;
LABEL_116:
    i = v26;
    if ( v35 )
      break;
LABEL_119:
    while ( 1 )
    {
      v48 = *(unsigned __int8 *)i;
      if ( v48 != 32 && v48 != 9 )
        break;
      ++i;
    }
    v49 = v48 == 59;
    if ( v48 == 59 )
      v35 = 0;
    else
      v35 = 6;
    if ( v49 )
      lineptr = i + 1;
    else
      lineptr = i;
  }
  while ( !v35 );
  if ( v35 == 6 )
  {
    c = cookies;
    noexpire = v111;
    v67 = v112;
    if ( (v112 & 1) != 0 )
    {
      secure = v114;
      v68 = s;
    }
    else
    {
      v68 = s;
      if ( s2 )
      {
        secure = v114;
        if ( !v21->domain )
        {
          v70 = Curl_cstrdup(s2);
          v67 = v112 | (v70 == 0);
          v21->domain = (char *)v70;
        }
      }
      else
      {
        secure = v114;
      }
    }
    if ( (v67 & 1) != 0
      || !v68
      || v21->path
      || ((v71 = strchr(v68, 63)) == 0LL ? (v72 = strrchr(v68, 47)) : (v72 = (char *)Curl_memrchr(v68, 47LL, v71 - v68)),
          !v72) )
    {
LABEL_207:
      if ( (v67 & 1) != 0 || !v21->name )
        goto LABEL_210;
      v35 = 0;
      ++data->req.setcookies;
    }
    else
    {
      v73 = v72 - v68;
      v74 = (char *)Curl_cmalloc(v72 - v68 + 2);
      v21->path = v74;
      if ( v74 )
      {
        v75 = v73 + 1;
        memcpy(v74, v68, v75);
        v21->path[v75] = 0;
        v76 = sanitize_cookie_path(v21->path);
        v67 |= v76 == 0LL;
        v21->spath = v76;
        goto LABEL_207;
      }
LABEL_210:
      freecookie(v21);
LABEL_211:
      v35 = 1;
    }
  }
  else
  {
    c = cookies;
    secure = v114;
    noexpire = v111;
  }
  if ( v35 )
    return 0LL;
LABEL_213:
  if ( (v21->prefix & 1) != 0 && !v21->secure )
    goto LABEL_281;
  if ( (v21->prefix & 2) != 0 )
  {
    if ( !v21->secure )
      goto LABEL_281;
    v97 = v21->path;
    if ( !v97 || strcmp(v97, "/") || v21->tailmatch )
      goto LABEL_281;
  }
  if ( !c->running && c->newsession && !v21->expires )
    goto LABEL_281;
  v21->livecookie = c->running;
  v77 = c->lastct + 1;
  c->lastct = v77;
  v21->creationtime = v77;
  if ( !noexpire )
    remove_expired(c);
  p_expires = &c->cookies[cookiehash(v21->domain)];
  next = *p_expires;
  v79 = c;
  if ( *p_expires )
  {
    v80 = secure;
    v81 = 0LL;
    v19 = 0LL;
    v82 = 0;
    while ( 2 )
    {
      v83 = next;
      if ( !(unsigned int)curl_strequal(next->name, v21->name) )
        goto LABEL_251;
      v84 = v83->domain;
      if ( v84 )
      {
        v85 = v21->domain;
        if ( !v85 || !(unsigned int)curl_strequal(v84, v85) )
          goto LABEL_249;
      }
      else if ( v21->domain )
      {
        goto LABEL_249;
      }
      spath = v83->spath;
      if ( !spath )
        goto LABEL_249;
      v87 = v21->spath;
      if ( !v87 || !v83->secure || v21->secure || v80 )
        goto LABEL_249;
      v88 = strchr(spath + 1, 47);
      v89 = v88 ? v88 - spath : strlen(spath);
      if ( (unsigned int)curl_strnequal(spath, v87, v89) )
      {
        if ( data && (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
          Curl_infof(
            data,
            "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
            v21->name,
            v21->domain);
        freecookie(v21);
        v90 = 1;
      }
      else
      {
        v90 = 0;
      }
      if ( !v90 )
LABEL_249:
        v90 = 0;
      if ( v90 )
        return 0LL;
LABEL_251:
      if ( !v81 )
      {
        if ( (unsigned int)curl_strequal(v83->name, v21->name) )
        {
          v91 = v83->domain;
          if ( v91 )
          {
            v92 = v21->domain;
            if ( v92 && (unsigned int)curl_strequal(v91, v92) )
            {
              v93 = v83->tailmatch == v21->tailmatch;
              goto LABEL_260;
            }
          }
          else
          {
            v93 = v21->domain == 0LL;
LABEL_260:
            v94 = v93;
            v82 |= v94;
          }
          if ( (v82 & 1) != 0 )
          {
            v95 = v83->spath;
            if ( !v95 || (v96 = v21->spath) == 0LL || (unsigned int)curl_strequal(v95, v96) )
            {
              v82 &= (v83->spath != 0LL) ^ (v21->spath == 0LL);
              goto LABEL_269;
            }
            v82 = 0;
          }
          else
          {
LABEL_269:
            if ( (v82 & 1) != 0 && !v21->livecookie && v83->livecookie )
              goto LABEL_281;
          }
          if ( (v82 & 1) != 0 )
            v19 = v83;
          if ( (v82 & 1) != 0 )
            v81 = v21;
          else
            v81 = 0LL;
          goto LABEL_226;
        }
        v81 = 0LL;
      }
LABEL_226:
      next = v83->next;
      if ( !v83->next )
        goto LABEL_285;
      continue;
    }
  }
  LOBYTE(v82) = 0;
  v19 = 0LL;
  v81 = 0LL;
  v83 = 0LL;
LABEL_285:
  if ( v81 )
  {
    v81->next = v19->next;
    v81->creationtime = v19->creationtime;
    Curl_cfree(v19->name);
    Curl_cfree(v19->value);
    Curl_cfree(v19->domain);
    Curl_cfree(v19->path);
    Curl_cfree(v19->spath);
    *(_OWORD *)&v19->next = *(_OWORD *)&v81->next;
    v100 = *(_OWORD *)&v81->spath;
    v99 = *(_OWORD *)&v81->expires;
    v101 = *(_OWORD *)&v81->value;
    *(_QWORD *)&v19->prefix = *(_QWORD *)&v81->prefix;
    *(_OWORD *)&v19->spath = v100;
    *(_OWORD *)&v19->expires = v99;
    *(_OWORD *)&v19->value = v101;
    Curl_cfree(v81);
  }
  else
  {
    v19 = v21;
  }
  if ( data && v79->running && (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
  {
    if ( (v82 & 1) != 0 )
      v102 = "Replaced";
    else
      v102 = "Added";
    Curl_infof(
      data,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
      v102,
      v19->name,
      v19->value,
      v19->domain,
      v19->path,
      v19->expires);
  }
  if ( (v82 & 1) == 0 )
  {
    p_next = p_expires;
    if ( v83 )
      p_next = &v83->next;
    *p_next = v19;
    ++v79->numcookies;
  }
  expires = v19->expires;
  if ( expires && expires < v79->next_expiration )
    v79->next_expiration = expires;
  return v19;
}
