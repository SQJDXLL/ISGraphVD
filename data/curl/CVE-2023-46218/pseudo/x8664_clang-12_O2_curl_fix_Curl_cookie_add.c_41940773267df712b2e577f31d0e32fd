Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  __int64 v10; // r15
  time_t v11; // rax
  __int64 v12; // rdi
  __int64 v13; // rbp
  const char *v14; // rbp
  char *i; // rbx
  char v16; // r15
  size_t v17; // rax
  size_t v18; // rdx
  __int64 v19; // r13
  unsigned __int64 v20; // r12
  char v21; // al
  size_t v22; // r14
  size_t v23; // r14
  size_t v24; // rax
  size_t v25; // rdx
  size_t v26; // r13
  size_t v27; // r14
  const char *v28; // rax
  char v29; // cl
  const char *v30; // rbp
  __int64 j; // rcx
  char v32; // dl
  __int64 v33; // rax
  const char *v34; // rax
  char *v35; // rbx
  size_t v36; // rax
  size_t v37; // rbp
  const char *v38; // rax
  const char *v39; // rbx
  __int64 v40; // rbp
  char v41; // cl
  const char *v42; // rdi
  _QWORD *v43; // rbx
  int v44; // eax
  int v45; // eax
  const char *v46; // rbx
  size_t v47; // r14
  _BYTE *v48; // rax
  const char *v49; // rbp
  const char *v50; // rdi
  char is_ipnum; // r15
  size_t v52; // rax
  const char *v53; // rcx
  __int64 v54; // rax
  __int64 v55; // rax
  size_t v56; // rbp
  const char *v57; // r12
  size_t v58; // r15
  __int64 v59; // rax
  __int64 v60; // rax
  char *v61; // rax
  char *v62; // rax
  char *v63; // rax
  const char *v64; // rbx
  int v65; // r12d
  char v66; // r14
  __int64 v67; // rax
  __int64 v68; // rax
  const char *v69; // rax
  char *v70; // rbx
  size_t v71; // rax
  size_t v72; // rbp
  __int64 v73; // rax
  __int64 v74; // rax
  __int64 v75; // rbp
  __int64 v76; // rax
  char v77; // al
  char *v78; // rax
  __int64 v79; // rax
  _BOOL4 v80; // r12d
  char v81; // al
  char v82; // bl
  const char *v83; // r12
  __int64 v84; // rax
  char *v85; // rax
  char *v86; // rax
  char v87; // r15
  signed __int64 v88; // r14
  void *v89; // rax
  size_t v90; // r14
  __int64 v91; // rbp
  const char *v92; // rax
  char *v93; // rbx
  size_t v94; // rax
  size_t v95; // rbp
  char v96; // r14
  char v97; // al
  CookieInfo *v98; // rcx
  bool running; // al
  int v100; // eax
  time_t v101; // rax
  CookieInfo *v102; // rcx
  time_t v103; // r15
  curl_off_t next_expiration; // rax
  size_t v105; // rax
  CookieInfo *v106; // rcx
  Cookie *next; // rax
  __int64 v108; // r12
  char v109; // bp
  Cookie *v110; // r14
  char *v111; // rdi
  __int64 v112; // rsi
  const char *spath; // r13
  __int64 v114; // rbx
  char *v115; // rax
  size_t v116; // rax
  char *v117; // rdi
  __int64 v118; // rsi
  bool v119; // zf
  char *v120; // rdi
  __int64 v121; // rsi
  const char *v122; // rdi
  int v123; // eax
  __int128 v124; // xmm0
  __int128 v125; // xmm1
  __int128 v126; // xmm2
  Curl_easy *v128; // rdi
  char *v129; // rax
  Cookie *v130; // rbx
  Cookie **v131; // r13
  Cookie *v132; // r14
  Cookie *v133; // rbp
  curl_off_t expires; // rax
  Cookie **p_next; // rax
  const char *v136; // rdx
  Cookie **v137; // rax
  curl_off_t v138; // rax
  __int64 v139; // [rsp+0h] [rbp-108h]
  char v140; // [rsp+Fh] [rbp-F9h]
  size_t s2a; // [rsp+10h] [rbp-F8h]
  char *s2b; // [rsp+10h] [rbp-F8h]
  const char *s; // [rsp+28h] [rbp-E0h]
  char v147; // [rsp+30h] [rbp-D8h]
  __int64 *v149; // [rsp+38h] [rbp-D0h]
  time_t v150; // [rsp+40h] [rbp-C8h]
  __int64 v151; // [rsp+48h] [rbp-C0h]
  char *dest[23]; // [rsp+50h] [rbp-B8h] BYREF

  v10 = 0LL;
  v11 = time(0LL);
  if ( data->req.setcookies > 0x31u )
    return (Cookie *)v10;
  v150 = v11;
  v139 = Curl_ccalloc(1LL, 72LL);
  if ( !v139 )
    return 0LL;
  if ( !httpheader )
  {
    dest[0] = 0LL;
    v13 = v139;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 10;
      *(_BYTE *)(v139 + 59) = 1;
      if ( *lineptr == 35 )
        goto LABEL_8;
    }
    else if ( *lineptr == 35 )
    {
LABEL_8:
      v12 = v139;
LABEL_9:
      Curl_cfree(v12);
      return 0LL;
    }
    v61 = strchr(lineptr, 13);
    if ( v61 )
      *v61 = 0;
    v62 = strchr(lineptr, 10);
    if ( v62 )
      *v62 = 0;
    v63 = strtok_r(lineptr, "\t", dest);
    if ( !v63 )
      goto LABEL_307;
    v64 = v63;
    v65 = 0;
    v66 = 0;
    while ( 1 )
    {
      switch ( v65 )
      {
        case 0:
          if ( *v64 == 46 )
            ++v64;
          v67 = Curl_cstrdup(v64);
          *(_QWORD *)(v13 + 40) = v67;
          if ( !v67 )
            v66 = 1;
          v65 = 0;
          goto LABEL_195;
        case 1:
          *(_BYTE *)(v13 + 56) = (unsigned int)curl_strequal(v64, "TRUE") != 0;
          v65 = 1;
          goto LABEL_195;
        case 2:
          if ( !strcmp("TRUE", v64) || !strcmp("FALSE", v64) )
          {
            v75 = Curl_cstrdup("/");
            *(_QWORD *)(v139 + 24) = v75;
            v76 = Curl_cstrdup("/");
            if ( !v76 )
              v66 = 1;
            v119 = v75 == 0;
            v13 = v139;
            *(_QWORD *)(v139 + 32) = v76;
            if ( v119 )
              v66 = 1;
            goto LABEL_181;
          }
          v68 = Curl_cstrdup(v64);
          *(_QWORD *)(v13 + 24) = v68;
          v65 = 2;
          if ( !v68 )
            goto LABEL_185;
          v69 = (const char *)Curl_cstrdup(v68);
          if ( !v69 )
          {
            v70 = 0LL;
            goto LABEL_192;
          }
          v70 = (char *)v69;
          v71 = strlen(v69);
          v72 = v71;
          if ( *v70 == 34 )
          {
            memmove(v70, v70 + 1, v71);
            --v72;
          }
          if ( v72 )
          {
            if ( v70[v72 - 1] == 34 )
              v70[--v72] = 0;
            if ( *v70 == 47 )
            {
              if ( v72 && v70[v72 - 1] == 47 )
                v70[v72 - 1] = 0;
              goto LABEL_191;
            }
LABEL_190:
            Curl_cfree(v70);
            v70 = (char *)Curl_strndup("/", 1LL);
            goto LABEL_191;
          }
          if ( *v70 != 47 )
            goto LABEL_190;
LABEL_191:
          v13 = v139;
LABEL_192:
          *(_QWORD *)(v13 + 32) = v70;
          v77 = 1;
          if ( v70 )
            v77 = v66;
          v66 = v77;
LABEL_195:
          v78 = strtok_r(0LL, "\t", dest);
          ++v65;
          if ( !v78 || (v64 = v78, (v66 & 1) != 0) )
          {
            if ( v65 == 6 )
            {
              v79 = Curl_cstrdup(&L_str_22);
              *(_QWORD *)(v13 + 16) = v79;
              v119 = v79 == 0;
              v80 = v79 == 0;
              v81 = v66;
              v66 = 1;
              if ( !v119 )
                v66 = v81;
              v65 = v80 ^ 7;
            }
            if ( (v66 & 1) == 0 && v65 == 7 )
              goto LABEL_245;
            goto LABEL_307;
          }
          break;
        case 3:
LABEL_181:
          *(_BYTE *)(v13 + 57) = 0;
          v65 = 3;
          if ( (unsigned int)curl_strequal(v64, "TRUE") )
          {
            if ( !secure && !c->running )
              goto LABEL_185;
            *(_BYTE *)(v13 + 57) = 1;
          }
          goto LABEL_195;
        case 4:
          if ( (unsigned int)curlx_strtoofft(v64, 0LL, 10LL, v139 + 48) )
            v66 = 1;
          v65 = 4;
          goto LABEL_195;
        case 5:
          v73 = Curl_cstrdup(v64);
          *(_QWORD *)(v13 + 8) = v73;
          v65 = 5;
          if ( v73 )
          {
            if ( (unsigned int)curl_strnequal("__Secure-", v73, 9LL) )
            {
              *(_BYTE *)(v13 + 64) |= 1u;
            }
            else if ( (unsigned int)curl_strnequal("__Host-", *(_QWORD *)(v13 + 8), 7LL) )
            {
              *(_BYTE *)(v13 + 64) |= 2u;
            }
          }
          else
          {
LABEL_185:
            v66 = 1;
          }
          goto LABEL_195;
        case 6:
          v74 = Curl_cstrdup(v64);
          *(_QWORD *)(v13 + 16) = v74;
          if ( !v74 )
            v66 = 1;
          v65 = 6;
          goto LABEL_195;
        default:
          goto LABEL_195;
      }
    }
  }
  v12 = v139;
  if ( strlen(lineptr) > 0x1388 )
    goto LABEL_9;
  v149 = (__int64 *)(v139 + 48);
  v151 = 0x7FFFFFFFFFFFFFFFLL - v150;
  v147 = 0;
  while ( 1 )
  {
    v14 = lineptr + 1;
    for ( i = lineptr; ; ++i )
    {
      v16 = *i;
      if ( *i != 32 && v16 != 9 )
        break;
      ++v14;
    }
    v17 = strcspn(i, ";\t\r\n=");
    if ( !v17 )
    {
      v19 = (__int64)i;
      goto LABEL_69;
    }
    v18 = v17;
    v19 = (__int64)&i[v17];
    v20 = v17;
    while ( 1 )
    {
      v21 = i[v20 - 1];
      if ( v21 != 32 && v21 != 9 )
        break;
      if ( !--v20 )
      {
        v20 = 0LL;
        break;
      }
    }
    v22 = 0LL;
    s = 0LL;
    v140 = *(_BYTE *)v19;
    if ( *(_BYTE *)v19 == 61 )
    {
      s = &i[v18 + 1];
      v23 = v18;
      v24 = strcspn(s, ";\r\n");
      v25 = v23;
      v26 = v23 + v24;
      if ( v24 )
      {
        v27 = v24;
        v28 = &v14[v26];
        while ( 1 )
        {
          v29 = *(v28 - 1);
          if ( v29 != 32 && v29 != 9 )
            break;
          --v27;
          --v28;
          if ( !v27 )
            goto LABEL_34;
        }
        v30 = &v14[v25];
        for ( j = 0LL; j != v27; ++j )
        {
          v32 = v30[j];
          if ( v32 != 32 && v32 != 9 )
          {
            v22 = v27 - j;
            s = &v30[j];
            goto LABEL_35;
          }
        }
        v22 = 0LL;
        s = v28;
      }
      else
      {
LABEL_34:
        v22 = 0LL;
      }
LABEL_35:
      if ( memchr(s, 9, v22) )
      {
        Curl_cfree(*(_QWORD *)(v139 + 40));
        Curl_cfree(*(_QWORD *)(v139 + 24));
        Curl_cfree(*(_QWORD *)(v139 + 32));
        Curl_cfree(*(_QWORD *)(v139 + 8));
        Curl_cfree(*(_QWORD *)(v139 + 16));
        Curl_cfree(v139);
        if ( (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
        {
          v10 = 0LL;
          Curl_infof(data, "cookie contains TAB, dropping");
          return (Cookie *)v10;
        }
        return 0LL;
      }
      v19 = (__int64)&i[v26 + 1];
    }
    if ( v20 > 0xFFE || v22 > 0xFFE || v22 + v20 >= 0x1001 )
    {
      Curl_cfree(*(_QWORD *)(v139 + 40));
      Curl_cfree(*(_QWORD *)(v139 + 24));
      Curl_cfree(*(_QWORD *)(v139 + 32));
      Curl_cfree(*(_QWORD *)(v139 + 8));
      Curl_cfree(*(_QWORD *)(v139 + 16));
      Curl_cfree(v139);
      if ( (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
      {
        v10 = 0LL;
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v20, v22);
        return (Cookie *)v10;
      }
      return 0LL;
    }
    if ( v16 == 95 && v20 >= 7 && i[1] == 95 )
    {
      if ( (unsigned int)curl_strnequal("__Secure-", i, 9LL) )
      {
        *(_BYTE *)(v139 + 64) |= 1u;
      }
      else if ( (unsigned int)curl_strnequal("__Host-", i, 7LL) )
      {
        *(_BYTE *)(v139 + 64) |= 2u;
      }
    }
    if ( !*(_QWORD *)(v139 + 8) )
    {
      if ( v140 != 61 )
        goto LABEL_297;
      Curl_cfree(0LL);
      *(_QWORD *)(v139 + 8) = Curl_strndup(i, v20);
      Curl_cfree(*(_QWORD *)(v139 + 16));
      v38 = (const char *)Curl_strndup(s, v22);
      *(_QWORD *)(v139 + 16) = v38;
      if ( !v38 )
        goto LABEL_297;
      v39 = *(const char **)(v139 + 8);
      if ( !v39 )
        goto LABEL_297;
      if ( v38[strcspn(v38, &invalid_octets_badoctets)] || v39[strcspn(v39, &invalid_octets_badoctets)] )
      {
        if ( (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
LABEL_297:
        Curl_cfree(*(_QWORD *)(v139 + 40));
        Curl_cfree(*(_QWORD *)(v139 + 24));
        Curl_cfree(*(_QWORD *)(v139 + 32));
        Curl_cfree(*(_QWORD *)(v139 + 8));
        Curl_cfree(*(_QWORD *)(v139 + 16));
        Curl_cfree(v139);
        return 0LL;
      }
      goto LABEL_69;
    }
    if ( !v22 )
    {
      if ( v20 == 8 )
      {
        if ( (unsigned int)curl_strnequal("httponly", i, 8LL) )
        {
          *(_BYTE *)(v139 + 59) = 1;
          goto LABEL_69;
        }
      }
      else if ( v20 == 6 && (unsigned int)curl_strnequal("secure", i, 6LL) )
      {
        if ( !secure && c->running )
          goto LABEL_297;
        *(_BYTE *)(v139 + 57) = 1;
        goto LABEL_69;
      }
      if ( v140 != 61 )
        goto LABEL_69;
    }
    if ( v20 != 7 )
      break;
    if ( (unsigned int)curl_strnequal("version", i, 7LL) )
      goto LABEL_69;
    if ( !(unsigned int)curl_strnequal("max-age", i, 7LL) )
    {
      if ( !(unsigned int)curl_strnequal("expires", i, 7LL) )
        goto LABEL_69;
      v43 = (_QWORD *)(v139 + 48);
      if ( v22 > 0x7F || *v149 )
        goto LABEL_69;
      memcpy(dest, s, v22);
      *((_BYTE *)dest + v22) = 0;
      v55 = Curl_getdate_capped(dest);
      *v149 = v55;
      if ( v55 )
      {
        if ( v55 < 0 )
          *v149 = 0LL;
        goto LABEL_69;
      }
LABEL_134:
      *v43 = 1LL;
      goto LABEL_69;
    }
    v42 = s + 1;
    if ( *s != 34 )
      v42 = s;
    v43 = (_QWORD *)(v139 + 48);
    v44 = curlx_strtoofft(v42, 0LL, 10LL, v149);
    if ( v44 )
    {
      if ( v44 != 2 )
      {
        if ( v44 != 1 )
          goto LABEL_69;
LABEL_133:
        *v149 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_69;
      }
      goto LABEL_134;
    }
    v60 = *v149;
    if ( !*v149 )
      goto LABEL_134;
    if ( v151 < v60 )
      goto LABEL_133;
    *v149 = v150 + v60;
LABEL_69:
    lineptr = (char *)(v19 + 1);
    v40 = v139;
    while ( 1 )
    {
      v41 = *(lineptr - 1);
      if ( v41 != 32 && v41 != 9 )
        break;
      ++lineptr;
    }
    if ( v41 != 59 )
      goto LABEL_204;
  }
  if ( v20 != 6 )
  {
    if ( v20 == 4 && (unsigned int)curl_strnequal("path", i, 4LL) )
    {
      Curl_cfree(*(_QWORD *)(v139 + 24));
      v33 = Curl_strndup(s, v22);
      *(_QWORD *)(v139 + 24) = v33;
      if ( !v33 )
        goto LABEL_297;
      Curl_cfree(*(_QWORD *)(v139 + 32));
      v34 = (const char *)Curl_cstrdup(*(_QWORD *)(v139 + 24));
      if ( !v34 )
      {
        *(_QWORD *)(v139 + 32) = 0LL;
        goto LABEL_297;
      }
      v35 = (char *)v34;
      v36 = strlen(v34);
      v37 = v36;
      if ( *v35 == 34 )
      {
        memmove(v35, v35 + 1, v36);
        --v37;
      }
      if ( v37 )
      {
        if ( v35[v37 - 1] == 34 )
          v35[--v37] = 0;
        if ( *v35 != 47 )
        {
LABEL_114:
          Curl_cfree(v35);
          v54 = Curl_strndup("/", 1LL);
          *(_QWORD *)(v139 + 32) = v54;
          if ( !v54 )
            goto LABEL_297;
          goto LABEL_69;
        }
        if ( v37 && v35[v37 - 1] == 47 )
          v35[v37 - 1] = 0;
      }
      else if ( *v35 != 47 )
      {
        goto LABEL_114;
      }
      *(_QWORD *)(v139 + 32) = v35;
    }
    goto LABEL_69;
  }
  v45 = curl_strnequal("domain", i, 6LL);
  if ( !v22 || !v45 )
    goto LABEL_69;
  v46 = s + 1;
  if ( *s != 46 )
    v46 = s;
  v47 = v22 - (*s == 46);
  if ( v47 == 9 && (unsigned int)curl_strnequal(v46, "localhost", 9LL)
    || (v48 = memchr(v46, 46, v47)) != 0LL && (unsigned __int64)(&v46[v47] - v48) > 1 )
  {
    v49 = domain;
    v50 = domain;
    if ( !domain )
      v50 = v46;
    is_ipnum = Curl_host_is_ipnum(v50);
    if ( domain )
    {
      if ( !is_ipnum )
        goto LABEL_101;
LABEL_109:
      if ( strncmp(v46, v49, v47) )
        goto LABEL_138;
      is_ipnum = 1;
      if ( v47 != strlen(v49) )
        goto LABEL_138;
    }
    else
    {
      v49 = 0LL;
    }
  }
  else
  {
    v49 = ":";
    if ( (unsigned __int8)Curl_host_is_ipnum(":") )
      goto LABEL_109;
LABEL_101:
    v52 = strlen(v49);
    v53 = v49;
    if ( v52 < v47 )
      goto LABEL_138;
    v56 = v52;
    v57 = v53;
    v58 = (size_t)&v53[v52 - v47];
    if ( !(unsigned int)curl_strnequal(v46, v58, v47) )
    {
      v49 = v57;
LABEL_138:
      domain = v49;
      v147 = 1;
      if ( (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
        Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v46);
      goto LABEL_69;
    }
    if ( v56 == v47 )
    {
      is_ipnum = 0;
      v49 = v57;
    }
    else
    {
      v49 = v57;
      if ( *(_BYTE *)(v58 - 1) != 46 )
        goto LABEL_138;
      is_ipnum = 0;
    }
  }
  domain = v49;
  Curl_cfree(*(_QWORD *)(v139 + 40));
  v59 = Curl_strndup(v46, v47);
  *(_QWORD *)(v139 + 40) = v59;
  if ( !is_ipnum && v59 )
  {
    *(_BYTE *)(v139 + 56) = 1;
    goto LABEL_69;
  }
  if ( v59 )
    goto LABEL_69;
  v147 = 1;
  v40 = v139;
LABEL_204:
  v82 = v147;
  if ( (v147 & 1) != 0 )
  {
    v83 = path;
  }
  else
  {
    v83 = path;
    if ( domain )
    {
      if ( !*(_QWORD *)(v40 + 40) )
      {
        v84 = Curl_cstrdup(domain);
        *(_QWORD *)(v40 + 40) = v84;
        v82 = 1;
        if ( v84 )
          v82 = v147;
      }
    }
  }
  if ( (v82 & 1) != 0 || !v83 || *(_QWORD *)(v40 + 24) )
    goto LABEL_242;
  v85 = strchr(v83, 63);
  v86 = v85 ? (char *)Curl_memrchr(v83, 47LL, v85 - v83) : strrchr(v83, 47);
  if ( !v86 )
    goto LABEL_242;
  v87 = v82;
  v88 = v86 - v83;
  v89 = (void *)Curl_cmalloc(v86 - v83 + 2);
  *(_QWORD *)(v40 + 24) = v89;
  if ( !v89 )
    goto LABEL_297;
  v90 = v88 + 1;
  memcpy(v89, path, v90);
  v91 = v139;
  *(_BYTE *)(*(_QWORD *)(v139 + 24) + v90) = 0;
  v92 = (const char *)Curl_cstrdup(*(_QWORD *)(v139 + 24));
  if ( !v92 )
  {
    v93 = 0LL;
    v96 = v87;
    goto LABEL_240;
  }
  v93 = (char *)v92;
  v94 = strlen(v92);
  v95 = v94;
  v96 = v87;
  if ( *v93 == 34 )
  {
    memmove(v93, v93 + 1, v94);
    --v95;
  }
  if ( !v95 )
  {
    if ( *v93 == 47 )
      goto LABEL_239;
    goto LABEL_238;
  }
  if ( v93[v95 - 1] == 34 )
    v93[--v95] = 0;
  if ( *v93 != 47 )
  {
LABEL_238:
    Curl_cfree(v93);
    v93 = (char *)Curl_strndup("/", 1LL);
    goto LABEL_239;
  }
  if ( v95 && v93[v95 - 1] == 47 )
    v93[v95 - 1] = 0;
LABEL_239:
  v91 = v139;
LABEL_240:
  *(_QWORD *)(v91 + 32) = v93;
  v119 = v93 == 0LL;
  v82 = 1;
  if ( !v119 )
    v82 = v96;
LABEL_242:
  if ( (v82 & 1) != 0 || !*(_QWORD *)(v139 + 8) )
    goto LABEL_297;
  ++data->req.setcookies;
  v13 = v139;
LABEL_245:
  v97 = *(_BYTE *)(v13 + 64);
  v98 = c;
  if ( (v97 & 1) != 0 && !*(_BYTE *)(v13 + 57)
    || (v97 & 2) != 0
    && (!*(_BYTE *)(v13 + 57)
     || (v122 = *(const char **)(v13 + 24)) == 0LL
     || (v123 = strcmp(v122, "/"), v98 = c, v123)
     || *(_BYTE *)(v13 + 56))
    || !(running = v98->running) && v98->newsession && !*(_QWORD *)(v13 + 48) )
  {
LABEL_307:
    Curl_cfree(*(_QWORD *)(v13 + 40));
    Curl_cfree(*(_QWORD *)(v13 + 24));
    Curl_cfree(*(_QWORD *)(v13 + 32));
    Curl_cfree(*(_QWORD *)(v13 + 8));
    Curl_cfree(*(_QWORD *)(v13 + 16));
    Curl_cfree(v13);
    return 0LL;
  }
  *(_BYTE *)(v13 + 58) = running;
  v100 = v98->lastct + 1;
  v98->lastct = v100;
  *(_DWORD *)(v13 + 60) = v100;
  if ( !noexpire )
  {
    v101 = time(0LL);
    v102 = c;
    v103 = v101;
    next_expiration = c->next_expiration;
    if ( v103 >= next_expiration || next_expiration == 0x7FFFFFFFFFFFFFFFLL )
    {
      c->next_expiration = 0x7FFFFFFFFFFFFFFFLL;
      v129 = 0LL;
      do
      {
        s2b = v129;
        v130 = v102->cookies[(_QWORD)v129];
        if ( v130 )
        {
          v131 = &v102->cookies[(_QWORD)v129];
          v132 = 0LL;
          do
          {
            while ( 1 )
            {
              v133 = v130;
              v130 = v130->next;
              expires = v133->expires;
              if ( !expires || expires >= v103 )
                break;
              p_next = &v132->next;
              if ( !v132 )
                p_next = v131;
              *p_next = v130;
              --v102->numcookies;
              Curl_cfree(v133->domain);
              Curl_cfree(v133->path);
              Curl_cfree(v133->spath);
              Curl_cfree(v133->name);
              Curl_cfree(v133->value);
              Curl_cfree(v133);
              v102 = c;
              if ( !v130 )
                goto LABEL_312;
            }
            if ( expires && expires < v102->next_expiration )
              v102->next_expiration = expires;
            v132 = v133;
          }
          while ( v130 );
        }
LABEL_312:
        v129 = s2b + 1;
      }
      while ( s2b != (char *)&loc_3E );
    }
  }
  v10 = v139;
  v105 = cookiehash(*(const char *const *)(v139 + 40));
  v106 = c;
  s2a = v105;
  next = c->cookies[v105];
  if ( !next )
  {
    v110 = 0LL;
    v109 = 0;
    v128 = data;
    goto LABEL_327;
  }
  v108 = 0LL;
  v10 = 0LL;
  v109 = 0;
  while ( 2 )
  {
    v110 = next;
    if ( (unsigned int)curl_strequal(next->name, *(_QWORD *)(v139 + 8)) )
    {
      v111 = v110->domain;
      v112 = *(_QWORD *)(v139 + 40);
      if ( v111 )
      {
        if ( v112 && (unsigned int)curl_strequal(v111, v112) )
        {
LABEL_261:
          spath = v110->spath;
          if ( spath )
          {
            v114 = *(_QWORD *)(v139 + 32);
            if ( v114 )
            {
              if ( v110->secure && !*(_BYTE *)(v139 + 57) && !secure )
              {
                v115 = strchr(spath + 1, 47);
                v116 = v115 ? v115 - spath : strlen(spath);
                if ( (unsigned int)curl_strnequal(spath, v114, v116) )
                {
                  v13 = v139;
                  if ( data && (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
                    Curl_infof(
                      data,
                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                      *(const char **)(v139 + 8),
                      *(const char **)(v139 + 40));
                  goto LABEL_307;
                }
              }
            }
          }
        }
      }
      else if ( !v112 )
      {
        goto LABEL_261;
      }
    }
    if ( v108 )
      goto LABEL_256;
    if ( !(unsigned int)curl_strequal(v110->name, *(_QWORD *)(v139 + 8)) )
    {
      v108 = 0LL;
      goto LABEL_256;
    }
    v117 = v110->domain;
    v118 = *(_QWORD *)(v139 + 40);
    if ( !v117 )
    {
      v119 = v118 == 0;
      goto LABEL_275;
    }
    if ( v118 && (unsigned int)curl_strequal(v117, v118) )
    {
      v119 = v110->tailmatch == *(_BYTE *)(v139 + 56);
LABEL_275:
      if ( v119 )
        v109 = 1;
    }
    if ( (v109 & 1) == 0 )
      goto LABEL_286;
    v120 = v110->spath;
    if ( v120 )
    {
      v121 = *(_QWORD *)(v139 + 32);
      if ( v121 )
      {
        if ( !(unsigned int)curl_strequal(v120, v121) )
        {
          v109 = 0;
          v108 = 0LL;
          goto LABEL_256;
        }
        v120 = v110->spath;
      }
    }
    else
    {
      v120 = 0LL;
    }
    v108 = v139;
    if ( (v120 != 0LL) == (*(_QWORD *)(v139 + 32) == 0LL) )
      v109 = 0;
    if ( (v109 & 1) == 0 )
    {
LABEL_286:
      v108 = 0LL;
      goto LABEL_256;
    }
    if ( *(_BYTE *)(v139 + 58) )
    {
      v10 = (__int64)v110;
    }
    else
    {
      v10 = (__int64)v110;
      if ( v110->livecookie )
      {
        v13 = v139;
        goto LABEL_307;
      }
    }
LABEL_256:
    next = v110->next;
    if ( v110->next )
      continue;
    break;
  }
  if ( v108 )
  {
    *(_QWORD *)v108 = *(_QWORD *)v10;
    *(_DWORD *)(v108 + 60) = *(_DWORD *)(v10 + 60);
    Curl_cfree(*(_QWORD *)(v10 + 8));
    Curl_cfree(*(_QWORD *)(v10 + 16));
    Curl_cfree(*(_QWORD *)(v10 + 40));
    Curl_cfree(*(_QWORD *)(v10 + 24));
    Curl_cfree(*(_QWORD *)(v10 + 32));
    *(_QWORD *)(v10 + 64) = *(_QWORD *)(v108 + 64);
    v124 = *(_OWORD *)v108;
    v125 = *(_OWORD *)(v108 + 16);
    v126 = *(_OWORD *)(v108 + 32);
    *(_OWORD *)(v10 + 48) = *(_OWORD *)(v108 + 48);
    *(_OWORD *)(v10 + 32) = v126;
    *(_OWORD *)(v10 + 16) = v125;
    *(_OWORD *)v10 = v124;
    Curl_cfree(v108);
  }
  else
  {
    v10 = v139;
  }
  v128 = data;
  v106 = c;
LABEL_327:
  if ( v128 && v106->running && (*((_BYTE *)&v128->set + 2229) & 0x20) != 0 )
  {
    v136 = "Replaced";
    if ( (v109 & 1) == 0 )
      v136 = "Added";
    Curl_infof(
      v128,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
      v136,
      *(const char **)(v10 + 8),
      *(const char **)(v10 + 16),
      *(const char **)(v10 + 40),
      *(const char **)(v10 + 24),
      *(_QWORD *)(v10 + 48));
    v106 = c;
  }
  if ( (v109 & 1) == 0 )
  {
    v137 = &v106->cookies[s2a];
    if ( v110 )
      v137 = &v110->next;
    *v137 = (Cookie *)v10;
    ++v106->numcookies;
  }
  v138 = *(_QWORD *)(v10 + 48);
  if ( v138 && v138 < v106->next_expiration )
    v106->next_expiration = v138;
  return (Cookie *)v10;
}
