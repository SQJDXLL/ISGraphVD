Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  _BOOL4 v10; // w20
  Cookie *v12; // x25
  Cookie *v13; // x22
  size_t v14; // x20
  size_t v15; // x21
  int v16; // w0
  _BOOL4 v18; // w19
  const char *v19; // x23
  bool v21; // cc
  _BOOL4 v22; // w19
  _BYTE *v23; // x0
  char v24; // w0
  const char *name; // x19
  char *value; // x20
  int v27; // w0
  const char *v29; // x22
  int v30; // t1
  bool v31; // zf
  char *v33; // x0
  const char *v34; // x0
  int v35; // w0
  curl_off_t v36; // x1
  __int64 v37; // x0
  __int64 v39; // x0
  int v40; // w26
  __int64 v42; // x0
  char *v43; // x0
  char *v44; // x0
  signed __int64 v45; // x0
  size_t v46; // x19
  char *v47; // x0
  char *v48; // x0
  char *v49; // x0
  char *v50; // x0
  char *v51; // x20
  int v52; // w19
  _BOOL4 v53; // w21
  char *v54; // x0
  __int64 v55; // x0
  __int64 v56; // x0
  const char *v57; // x0
  char *v58; // x0
  __int64 v59; // x26
  __int64 v60; // x0
  __int64 v61; // x1
  Cookie *v62; // x19
  char *v63; // x0
  char *v64; // x1
  const char *spath; // x21
  char *v66; // x24
  char *v67; // x0
  size_t v68; // x2
  char *v69; // x0
  char *v70; // x1
  char *v71; // x0
  char *v72; // x1
  int livecookie; // w23
  Cookie *v74; // x20
  __int128 v75; // q1
  __int128 v76; // q1
  curl_off_t expires; // x0
  const char *v78; // x2
  int is_ipnum; // w19
  __int64 v81; // x0
  const char *v83; // x0
  int v84; // w0
  size_t v85; // x26
  size_t v86; // x1
  _BOOL4 httpheadera; // [xsp+78h] [xbp+78h]
  _BOOL4 securea; // [xsp+7Ch] [xbp+7Ch]
  time_t now; // [xsp+88h] [xbp+88h]
  _BOOL4 noexpirea; // [xsp+98h] [xbp+98h]
  _BOOL4 badcookie; // [xsp+9Ch] [xbp+9Ch]
  char *tok_buf; // [xsp+A0h] [xbp+A0h] BYREF
  char date[128]; // [xsp+A8h] [xbp+A8h] BYREF

  v10 = httpheader;
  httpheadera = httpheader;
  noexpirea = noexpire;
  securea = secure;
  now = time(0uLL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  v12 = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !v12 )
    return 0LL;
  if ( !v10 )
  {
    tok_buf = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 0xA;
      v12->httponly = 1;
    }
    if ( *lineptr == 35 )
    {
      Curl_cfree(v12);
      return 0LL;
    }
    v49 = strchr(lineptr, 13);
    if ( v49 )
      *v49 = 0;
    v50 = strchr(lineptr, 10);
    if ( v50 )
      *v50 = 0;
    v51 = strtok_r((char *)lineptr, "\t", &tok_buf);
    if ( !v51 )
      goto LABEL_198;
    v52 = 0;
    while ( v52 != 3 )
    {
      if ( v52 > 3 )
      {
        if ( v52 == 5 )
        {
          v61 = Curl_cstrdup(v51);
          v12->name = (char *)v61;
          if ( !v61 )
            goto LABEL_271;
          if ( (unsigned int)curl_strnequal("__Secure-", v61, 9LL) )
          {
            v12->prefix |= 1u;
            v53 = httpheadera;
          }
          else
          {
            v53 = httpheadera;
            if ( (unsigned int)curl_strnequal("__Host-", v12->name, 7LL) )
              v12->prefix |= 2u;
          }
        }
        else if ( v52 == 6 )
        {
          v56 = Curl_cstrdup(v51);
          v12->value = (char *)v56;
          if ( !v56 )
            goto LABEL_271;
          v53 = httpheadera;
        }
        else
        {
          v53 = httpheadera;
          if ( v52 == 4 )
          {
            if ( (unsigned int)curlx_strtoofft(v51, 0LL, 10LL, &v12->expires) )
              goto LABEL_271;
            v53 = httpheadera;
          }
        }
      }
      else if ( v52 == 1 )
      {
        v12->tailmatch = (unsigned int)curl_strequal(v51, "TRUE") != 0;
        v53 = httpheadera;
      }
      else if ( v52 == 2 )
      {
        if ( !strcmp("TRUE", v51) || !strcmp("FALSE", v51) )
        {
          v59 = Curl_cstrdup("/");
          v12->path = (char *)v59;
          v60 = Curl_cstrdup("/");
          v12->spath = (char *)v60;
          v53 = 1;
          if ( v60 )
            v53 = v59 == 0;
LABEL_186:
          v12->secure = 0;
          if ( (unsigned int)curl_strequal(v51, "TRUE") )
          {
            if ( !securea && !c->running )
            {
              v52 = 3;
LABEL_271:
              strtok_r(0uLL, "\t", &tok_buf);
              v53 = 1;
              if ( v52 == 5 )
              {
LABEL_272:
                v81 = Curl_cstrdup(&unk_2400);
                v12->value = (char *)v81;
                if ( v81 )
                {
                  v52 = 7;
                  goto LABEL_274;
                }
              }
LABEL_198:
              freecookie(v12);
              return 0LL;
            }
            v12->secure = 1;
            v52 = 3;
          }
          else
          {
            v52 = 3;
          }
          goto LABEL_173;
        }
        v57 = (const char *)Curl_cstrdup(v51);
        v12->path = (char *)v57;
        if ( !v57 )
          goto LABEL_271;
        v58 = sanitize_cookie_path(v57);
        v12->spath = v58;
        if ( !v58 )
          goto LABEL_271;
        v53 = httpheadera;
      }
      else
      {
        v53 = httpheadera;
        if ( !v52 )
        {
          if ( *v51 == 46 )
            v54 = v51 + 1;
          else
            v54 = v51;
          v55 = Curl_cstrdup(v54);
          v12->domain = (char *)v55;
          if ( !v55 )
            goto LABEL_271;
          v53 = httpheadera;
        }
      }
LABEL_173:
      v51 = strtok_r(0uLL, "\t", &tok_buf);
      ++v52;
      if ( v51 == 0LL || v53 )
      {
        if ( v52 == 6 )
          goto LABEL_272;
LABEL_274:
        if ( v53 || v52 != 7 )
          goto LABEL_198;
LABEL_279:
        if ( (v12->prefix & 1) != 0 )
        {
          if ( v12->secure )
          {
            if ( (v12->prefix & 2) != 0 )
              goto LABEL_282;
LABEL_285:
            if ( c->running || !c->newsession || v12->expires )
            {
              v12->livecookie = c->running;
              v84 = c->lastct + 1;
              c->lastct = v84;
              v12->creationtime = v84;
              if ( !noexpirea )
                remove_expired(c);
              v85 = cookiehash(v12->domain);
              v62 = c->cookies[v85];
              if ( v62 )
              {
                livecookie = 0;
                v13 = 0LL;
                v74 = 0LL;
                while ( 1 )
                {
                  if ( !(unsigned int)curl_strequal(v62->name, v12->name) )
                    goto LABEL_206;
                  v63 = v62->domain;
                  if ( v63 )
                  {
                    v64 = v12->domain;
                    if ( !v64 || !(unsigned int)curl_strequal(v63, v64) )
                      goto LABEL_206;
                  }
                  else if ( v12->domain )
                  {
                    goto LABEL_206;
                  }
                  spath = v62->spath;
                  if ( spath )
                  {
                    v66 = v12->spath;
                    if ( v66 )
                    {
                      if ( v62->secure && !v12->secure && !securea )
                      {
                        v67 = strchr(spath + 1, 47);
                        v68 = v67 ? v67 - spath : strlen(spath);
                        if ( (unsigned int)curl_strnequal(spath, v66, v68) )
                        {
                          if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
                            Curl_infof(
                              data,
                              "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                              v12->name,
                              v12->domain);
                          goto LABEL_222;
                        }
                      }
                    }
                  }
LABEL_206:
                  if ( v74 || !(unsigned int)curl_strequal(v62->name, v12->name) )
                    goto LABEL_207;
                  v69 = v62->domain;
                  if ( v69 )
                  {
                    v70 = v12->domain;
                    if ( !v70 || !(unsigned int)curl_strequal(v69, v70) || v62->tailmatch != v12->tailmatch )
                    {
LABEL_231:
                      if ( !livecookie )
                        goto LABEL_207;
                    }
                  }
                  else if ( v12->domain )
                  {
                    goto LABEL_231;
                  }
                  v71 = v62->spath;
                  if ( !v71 )
                    goto LABEL_235;
                  v72 = v12->spath;
                  if ( !v72 )
                  {
                    v74 = 0LL;
                    livecookie = 0;
                    goto LABEL_207;
                  }
                  if ( !(unsigned int)curl_strequal(v71, v72) )
                  {
                    livecookie = 0;
                  }
                  else
                  {
LABEL_235:
                    if ( (v12->spath == 0LL) == (v62->spath == 0LL) )
                    {
                      livecookie = v12->livecookie;
                      if ( v12->livecookie )
                      {
                        v13 = v62;
                        v74 = v12;
                      }
                      else
                      {
                        if ( v62->livecookie )
                          goto LABEL_222;
                        v13 = v62;
                        v74 = v12;
                        livecookie = 1;
                      }
                    }
                    else
                    {
                      livecookie = 0;
                    }
                  }
LABEL_207:
                  if ( !v62->next )
                  {
                    if ( v74 )
                    {
                      v74->next = v13->next;
                      v74->creationtime = v13->creationtime;
                      Curl_cfree(v13->name);
                      Curl_cfree(v13->value);
                      Curl_cfree(v13->domain);
                      Curl_cfree(v13->path);
                      Curl_cfree(v13->spath);
                      v75 = *(_OWORD *)&v74->value;
                      *(_OWORD *)&v13->next = *(_OWORD *)&v74->next;
                      *(_OWORD *)&v13->value = v75;
                      v76 = *(_OWORD *)&v74->expires;
                      *(_OWORD *)&v13->spath = *(_OWORD *)&v74->spath;
                      *(_OWORD *)&v13->expires = v76;
                      *(_QWORD *)&v13->prefix = *(_QWORD *)&v74->prefix;
                      Curl_cfree(v74);
                    }
                    else
                    {
                      v13 = v12;
                    }
                    if ( !c->running )
                      goto LABEL_247;
                    goto LABEL_253;
                  }
                  v62 = v62->next;
                }
              }
              v13 = v12;
              if ( !c->running )
              {
LABEL_293:
                c->cookies[v85] = v13;
                goto LABEL_259;
              }
              v13 = v12;
              livecookie = 0;
LABEL_253:
              if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
              {
                v78 = "Added";
                if ( livecookie )
                  v78 = "Replaced";
                Curl_infof(
                  data,
                  "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
                  v78,
                  v13->name,
                  v13->value,
                  v13->domain,
                  v13->path,
                  v13->expires);
              }
LABEL_247:
              if ( !livecookie )
              {
                if ( !v62 )
                  goto LABEL_293;
                v62->next = v13;
LABEL_259:
                ++c->numcookies;
              }
              expires = v13->expires;
              if ( expires && expires < c->next_expiration )
                c->next_expiration = expires;
              return v13;
            }
          }
        }
        else
        {
          if ( (v12->prefix & 2) == 0 )
            goto LABEL_285;
          if ( v12->secure )
          {
LABEL_282:
            v83 = v12->path;
            if ( v83 && !strcmp(v83, "/") && !v12->tailmatch )
              goto LABEL_285;
          }
        }
LABEL_222:
        freecookie(v12);
        return 0LL;
      }
    }
    v53 = httpheadera;
    goto LABEL_186;
  }
  badcookie = 0;
  if ( strlen(lineptr) > 0x1388 )
  {
    Curl_cfree(v12);
    return 0LL;
  }
  while ( 1 )
  {
    v40 = *(unsigned __int8 *)lineptr;
    if ( !*lineptr )
      break;
    if ( v40 == 32 || v40 == 9 )
    {
      ++lineptr;
    }
    else
    {
      v14 = strcspn(lineptr, ";\t\r\n=");
      if ( v14 )
        goto LABEL_298;
      v27 = *(unsigned __int8 *)lineptr;
      v29 = lineptr;
LABEL_76:
      while ( v27 == 32 || v27 == 9 )
      {
        v30 = *(unsigned __int8 *)++v29;
        v27 = v30;
        if ( !v30 )
          goto LABEL_82;
      }
      if ( v27 != 59 )
        goto LABEL_82;
      lineptr = v29 + 1;
    }
  }
  v14 = strcspn(lineptr, ";\t\r\n=");
  if ( !v14 )
  {
LABEL_82:
    if ( !badcookie )
    {
      v31 = v12->domain || domain == 0LL;
      if ( v31 || (v42 = Curl_cstrdup(domain), (v12->domain = (char *)v42) != 0LL) )
      {
        if ( v12->path || path == 0LL )
          goto LABEL_307;
        v43 = strchr(path, 63);
        v44 = v43 ? (char *)Curl_memrchr(path, 47LL, v43 - path) : strrchr(path, 47);
        if ( !v44 )
          goto LABEL_307;
        v45 = v44 - path;
        v46 = v45 + 1;
        v47 = (char *)Curl_cmalloc(v45 + 2);
        v12->path = v47;
        if ( v47 )
        {
          memcpy(v47, path, v46);
          v12->path[v46] = 0;
          v48 = sanitize_cookie_path(v12->path);
          v12->spath = v48;
          if ( v48 )
          {
LABEL_307:
            if ( v12->name )
            {
              ++data->req.setcookies;
              goto LABEL_279;
            }
          }
        }
      }
    }
LABEL_67:
    freecookie(v12);
    return 0LL;
  }
LABEL_298:
  v29 = &lineptr[v14];
  do
  {
    v86 = v14--;
    v18 = lineptr[v14] == 32 || lineptr[v14] == 9;
    if ( !v18 )
    {
      if ( *v29 == 61 )
      {
        v14 = v86;
        goto LABEL_302;
      }
      v14 = v86;
      v19 = 0LL;
      v15 = 0LL;
LABEL_24:
      if ( v14 > 0xFFE || v15 > 0xFFE )
        goto LABEL_53;
      goto LABEL_28;
    }
  }
  while ( v14 );
  if ( *v29 != 61 )
  {
    v15 = 0LL;
    v19 = 0LL;
    v18 = 0;
LABEL_28:
    if ( v15 + v14 <= 0x1000 )
    {
      v21 = v40 == 95 && v14 > 6;
      if ( v21 && lineptr[1] == 95 )
      {
        if ( (unsigned int)curl_strnequal("__Secure-", lineptr, 9LL) )
        {
          v12->prefix |= 1u;
        }
        else if ( (unsigned int)curl_strnequal("__Host-", lineptr, 7LL) )
        {
          v12->prefix |= 2u;
        }
      }
      if ( !v12->name )
      {
        if ( !v18 )
          goto LABEL_67;
        strstore(&v12->name, lineptr, v14);
        strstore(&v12->value, v19, v15);
        name = v12->name;
        if ( !name )
          goto LABEL_67;
        value = v12->value;
        if ( !value )
          goto LABEL_67;
        if ( value[strcspn(v12->value, badoctets_0)] || name[strcspn(name, badoctets_0)] )
        {
          if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
            Curl_infof(data, "invalid octets in name/value, cookie dropped");
          goto LABEL_67;
        }
        goto LABEL_75;
      }
      if ( !v15 )
      {
        if ( v14 == 6 )
        {
          if ( (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
          {
            if ( !securea && c->running )
              goto LABEL_67;
            v12->secure = 1;
            goto LABEL_75;
          }
          if ( !v18 )
          {
LABEL_75:
            v27 = *(unsigned __int8 *)v29;
            if ( *v29 )
              goto LABEL_76;
            goto LABEL_82;
          }
          goto LABEL_39;
        }
        if ( v14 == 8 )
        {
          if ( (unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
          {
            v12->httponly = 1;
            goto LABEL_75;
          }
          if ( !v18 )
            goto LABEL_75;
LABEL_74:
          if ( v14 == 7 && !(unsigned int)curl_strnequal("version", lineptr, 7LL) )
          {
            if ( (unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
            {
              if ( *v19 == 34 )
                v34 = v19 + 1;
              else
                v34 = v19;
              v35 = curlx_strtoofft(v34, 0LL, 10LL, &v12->expires);
              switch ( v35 )
              {
                case 1:
                  v12->expires = 0x7FFFFFFFFFFFFFFFLL;
                  break;
                case 2:
                  v12->expires = 1LL;
                  break;
                case 0:
                  v36 = v12->expires;
                  if ( v36 )
                  {
                    v37 = 0x7FFFFFFFFFFFFFFFLL;
                    if ( v36 <= 0x7FFFFFFFFFFFFFFFLL - now )
                      v37 = v36 + now;
                    v12->expires = v37;
                  }
                  else
                  {
                    v12->expires = 1LL;
                  }
                  break;
              }
            }
            else if ( (unsigned int)curl_strnequal("expires", lineptr, 7LL) )
            {
              if ( v15 <= 0x7F && v12->expires == 0 )
              {
                memcpy(date, v19, v15);
                date[v15] = 0;
                v39 = Curl_getdate_capped(date);
                if ( v39 )
                {
                  if ( v39 < 0 )
                    v39 = 0LL;
                  v12->expires = v39;
                }
                else
                {
                  v12->expires = 1LL;
                }
              }
            }
          }
          goto LABEL_75;
        }
        if ( !v18 )
          goto LABEL_75;
      }
      if ( v14 == 4 )
      {
        if ( (unsigned int)curl_strnequal("path", lineptr, 4LL) )
        {
          strstore(&v12->path, v19, v15);
          if ( !v12->path )
            goto LABEL_67;
          Curl_cfree(v12->spath);
          v33 = sanitize_cookie_path(v12->path);
          v12->spath = v33;
          if ( !v33 )
            goto LABEL_67;
        }
        goto LABEL_75;
      }
LABEL_39:
      if ( v14 == 6 )
      {
        v22 = (unsigned int)curl_strnequal("domain", lineptr, 6LL) != 0 && v15 != 0;
        if ( !v22 )
          goto LABEL_75;
        if ( *v19 == 46 )
        {
          ++v19;
          --v15;
        }
        if ( v15 == 9 && (unsigned int)curl_strnequal(v19, "localhost", 9LL)
          || (v23 = memchr(v19, 46, v15)) != 0LL && v15 - (v23 - v19) > 1 )
        {
          if ( !domain )
          {
            is_ipnum = (unsigned __int8)Curl_host_is_ipnum(v19);
            strstore(&v12->domain, v19, v15);
            if ( !v12->domain )
              goto LABEL_67;
            if ( is_ipnum )
              goto LABEL_75;
            goto LABEL_104;
          }
          v24 = Curl_host_is_ipnum(domain);
        }
        else
        {
          domain = ":";
          v24 = Curl_host_is_ipnum(":");
        }
        if ( v24 )
        {
          if ( !strncmp(v19, domain, v15) && strlen(domain) == v15 )
          {
            strstore(&v12->domain, v19, v15);
            if ( !v12->domain )
              goto LABEL_67;
            goto LABEL_75;
          }
          goto LABEL_51;
        }
        if ( !cookie_tailmatch(v19, v15, domain) )
        {
LABEL_51:
          badcookie = v22;
          if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
          {
            Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v19);
            badcookie = v22;
          }
          goto LABEL_75;
        }
        strstore(&v12->domain, v19, v15);
        if ( !v12->domain )
          goto LABEL_67;
LABEL_104:
        v12->tailmatch = 1;
        goto LABEL_75;
      }
      goto LABEL_74;
    }
LABEL_53:
    freecookie(v12);
    v13 = 0LL;
    if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
      Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v14, v15);
    return v13;
  }
LABEL_302:
  v19 = v29 + 1;
  v15 = strcspn(v29 + 1, ";\r\n");
  v29 += v15 + 1;
  while ( 2 )
  {
    if ( !v15 )
    {
      v18 = httpheadera;
      goto LABEL_24;
    }
    v16 = (unsigned __int8)v19[v15 - 1];
    if ( v16 == 32 || v16 == 9 )
    {
      --v15;
      continue;
    }
    break;
  }
  while ( 1 )
  {
    v18 = *v19 == 32 || *v19 == 9;
    if ( !v18 )
      break;
    ++v19;
    if ( !--v15 )
      goto LABEL_24;
  }
  if ( !memchr(v19, 9, v15) )
  {
    v18 = httpheadera;
    goto LABEL_24;
  }
  freecookie(v12);
  v13 = 0LL;
  if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
    Curl_infof(data, "cookie contains TAB, dropping");
  return v13;
}
