Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  _BOOL4 v9; // ebp
  Cookie *v10; // rbx
  char v11; // bp
  const char *v12; // rsi
  size_t v13; // rax
  __int64 v14; // rdx
  __int64 v15; // rcx
  unsigned __int64 v16; // r15
  bool v17; // al
  _BYTE *v18; // r13
  size_t v19; // rax
  size_t v20; // r12
  char v21; // al
  _BYTE *v22; // rax
  char *v23; // rax
  char *v24; // rax
  __int64 v25; // rdx
  char *v26; // r8
  _BOOL8 v27; // rcx
  int v28; // ebp
  char *v29; // rax
  unsigned __int8 prefix; // al
  Cookie *v31; // r14
  int v33; // eax
  __int64 v34; // rax
  char *value; // rdi
  const char *v36; // rax
  const char *name; // r12
  __int64 v38; // rax
  char *v39; // rax
  int v40; // eax
  curl_off_t expires; // rax
  int v42; // ebp
  size_t v43; // rax
  size_t v44; // rbp
  size_t v45; // r14
  __int64 v46; // rax
  __int64 v47; // rax
  __int64 v48; // rbp
  char v49; // r14
  void *v50; // rsi
  int v51; // eax
  const char *v52; // r8
  __int64 (__fastcall *v53)(const char *); // r15
  int v54; // eax
  const char *v55; // rax
  char *v56; // rax
  char *v57; // r15
  bool v58; // r15
  __int64 v59; // rax
  __int64 v60; // rbp
  bool v61; // r15
  int v62; // ecx
  bool v63; // dl
  int v64; // ebp
  __int64 v65; // rax
  __int64 v66; // rdx
  __int64 v67; // rax
  char *v68; // rsi
  int v69; // eax
  char *v70; // r8
  __int64 (__fastcall *v71)(char *); // r15
  int v72; // eax
  __int64 v73; // rax
  __int64 v74; // r15
  __int64 v75; // rdx
  __int64 v76; // rcx
  __int64 v77; // rax
  __int64 v78; // rax
  __int64 v79; // rax
  bool v80; // r15
  __int64 v81; // rax
  __int64 v82; // r15
  __int64 v83; // rdx
  __int64 v84; // rcx
  __int64 v85; // rax
  __int64 v86; // rax
  char *v87; // rax
  bool running; // al
  __int64 v89; // rdx
  char *spath; // rcx
  size_t v91; // r12
  Cookie *v92; // r13
  char livecookie; // bp
  __m128i *v94; // r15
  Cookie *next; // rax
  char *v96; // rdi
  char *v97; // rsi
  char *v98; // rdi
  char *v99; // rsi
  char *v100; // rdi
  char *v101; // rsi
  char *v102; // rdi
  const char *v103; // rdx
  const char *v104; // rax
  const char *v105; // r9
  const char *v106; // r8
  const char *v107; // rcx
  curl_off_t v108; // rax
  int v109; // eax
  char is_ipnum; // bp
  __int64 v111; // rax
  __int64 v112; // rax
  char *v113; // rax
  const char *v114; // rcx
  void *v115; // r8
  size_t v116; // rdx
  const char *v117; // rax
  char *v118; // rax
  const char *v119; // rdi
  size_t v120; // rax
  int v121; // eax
  char *v122; // rax
  char *v123; // rbp
  signed __int64 v124; // rbp
  char *v125; // rax
  char *v126; // rax
  __int64 v127; // rax
  char *v128; // rdi
  __int64 v129; // rax
  __int64 v130; // rax
  bool v131; // zf
  __int64 v132; // rax
  bool v133; // bp
  bool v134; // bp
  const char *ptr; // [rsp+8h] [rbp-120h]
  _BOOL4 ptra; // [rsp+8h] [rbp-120h]
  const char *ptrb; // [rsp+8h] [rbp-120h]
  bool ptrc; // [rsp+8h] [rbp-120h]
  const char *ptrd; // [rsp+8h] [rbp-120h]
  char ptrf; // [rsp+8h] [rbp-120h]
  int ptrg; // [rsp+8h] [rbp-120h]
  const char *ptre; // [rsp+8h] [rbp-120h]
  const char *ptrh; // [rsp+8h] [rbp-120h]
  char *s2; // [rsp+10h] [rbp-118h]
  unsigned __int8 s2a; // [rsp+10h] [rbp-118h]
  char *s2b; // [rsp+10h] [rbp-118h]
  char *s2c; // [rsp+10h] [rbp-118h]
  unsigned __int8 s2d; // [rsp+10h] [rbp-118h]
  char *s2e; // [rsp+10h] [rbp-118h]
  bool s2f; // [rsp+10h] [rbp-118h]
  char *s2g; // [rsp+10h] [rbp-118h]
  _BOOL4 httpheaderb; // [rsp+1Ch] [rbp-10Ch]
  time_t now; // [rsp+40h] [rbp-E8h]
  bool badcookie; // [rsp+4Fh] [rbp-D9h]
  char *tok_buf; // [rsp+58h] [rbp-D0h] BYREF
  char date[128]; // [rsp+60h] [rbp-C8h] BYREF
  unsigned __int64 v162; // [rsp+E8h] [rbp-40h]

  v9 = httpheader;
  v162 = __readfsqword(0x28u);
  now = time(0LL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  v10 = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !v10 )
    return 0LL;
  if ( v9 )
  {
    badcookie = 0;
    if ( strlen(lineptr) <= 0x1388 )
    {
      v11 = *lineptr;
      if ( *lineptr )
      {
        while ( 1 )
        {
          if ( v11 != 32 && v11 != 9 )
          {
            v12 = ";\t\r\n=";
            v13 = strcspn(lineptr, ";\t\r\n=");
            v16 = v13;
            if ( v13 )
              goto LABEL_16;
LABEL_11:
            while ( v11 == 32 || v11 == 9 )
            {
              v11 = *++lineptr;
              if ( !v11 )
                goto LABEL_73;
            }
            if ( v11 != 59 )
              break;
          }
          v11 = *++lineptr;
          if ( !v11 )
            goto LABEL_15;
        }
LABEL_73:
        if ( badcookie )
          goto LABEL_82;
        if ( !v10->domain )
        {
          if ( domain )
          {
            v127 = Curl_cstrdup(domain, v12, v14, v15);
            v10->domain = (char *)v127;
            if ( !v127 )
              goto LABEL_82;
          }
        }
        if ( !v10->path && path )
        {
          v122 = strchr(path, 63);
          v123 = v122 ? (char *)Curl_memrchr(path, 47LL, v122 - path) : strrchr(path, 47);
          if ( v123 )
          {
            v124 = v123 - path;
            v125 = (char *)Curl_cmalloc(v124 + 2);
            v10->path = v125;
            if ( !v125 )
              goto LABEL_82;
            memcpy(v125, path, v124 + 1);
            v10->path[v124 + 1] = 0;
            v126 = sanitize_cookie_path(v10->path);
            v10->spath = v126;
            if ( !v126 )
              goto LABEL_82;
          }
        }
        if ( !v10->name )
          goto LABEL_82;
        ++data->req.setcookies;
        prefix = v10->prefix;
        if ( (prefix & 1) != 0 )
          goto LABEL_185;
        goto LABEL_80;
      }
LABEL_15:
      v12 = ";\t\r\n=";
      v13 = strcspn(lineptr, ";\t\r\n=");
      v16 = v13;
      if ( !v13 )
        goto LABEL_73;
LABEL_16:
      v14 = (__int64)&lineptr[v16];
      while ( 1 )
      {
        v12 = (const char *)v16--;
        v15 = (unsigned __int8)lineptr[v16];
        v17 = (_BYTE)v15 == 32;
        LOBYTE(v15) = (_BYTE)v15 == 9;
        LOBYTE(v13) = v15 | v17;
        if ( !(_BYTE)v13 )
          break;
        if ( !v16 )
        {
          if ( *(_BYTE *)v14 == 61 )
            goto LABEL_20;
          if ( v10->name )
          {
LABEL_98:
            v11 = *(_BYTE *)v14;
            lineptr = (const char *)v14;
            goto LABEL_72;
          }
LABEL_82:
          freecookie(v10);
          return 0LL;
        }
      }
      v15 = (unsigned int)v13;
      v16 = (unsigned __int64)v12;
      if ( *(_BYTE *)v14 == 61 )
      {
LABEL_20:
        v18 = (_BYTE *)(v14 + 1);
        v12 = ";\r\n";
        s2 = (char *)v14;
        v19 = strcspn((const char *)(v14 + 1), ";\r\n");
        v14 = (__int64)s2;
        v20 = v19;
        ptr = &v18[v19];
        if ( v19 )
        {
          while ( 1 )
          {
            while ( 1 )
            {
              v21 = s2[v20];
              if ( v21 != 32 )
                break;
              if ( !--v20 )
                goto LABEL_26;
            }
            if ( v21 != 9 )
              break;
            if ( !--v20 )
              goto LABEL_26;
          }
          while ( *v18 == 32 || *v18 == 9 )
          {
            ++v18;
            if ( !--v20 )
              goto LABEL_59;
          }
          v12 = (_BYTE *)&loc_9;
          if ( memchr(v18, 9, v20) )
          {
            freecookie(v10);
            if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
              Curl_infof(data, "cookie contains TAB, dropping");
            return 0LL;
          }
LABEL_59:
          if ( v16 <= 0xFFE && v20 <= 0xFFE && v16 + v20 <= 0x1000 )
          {
            v15 = httpheader;
            goto LABEL_63;
          }
LABEL_253:
          freecookie(v10);
          if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
            Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v16, v20);
          return 0LL;
        }
LABEL_26:
        if ( v16 <= 0xFFE )
        {
          v15 = httpheader;
          v20 = 0LL;
          if ( v16 > 6 )
          {
LABEL_64:
            if ( v11 == 95 && lineptr[1] == 95 )
            {
              v12 = lineptr;
              s2a = v15;
              v33 = curl_strnequal("__Secure-", lineptr, 9LL);
              v15 = s2a;
              if ( v33 )
              {
                v10->prefix |= 1u;
                if ( !v10->name )
                  goto LABEL_88;
                goto LABEL_66;
              }
              v12 = lineptr;
              v121 = curl_strnequal("__Host-", lineptr, 7LL);
              v15 = s2a;
              if ( v121 )
              {
                v10->prefix |= 2u;
                if ( !v10->name )
                  goto LABEL_88;
                goto LABEL_66;
              }
            }
            if ( v10->name )
            {
LABEL_66:
              if ( v20 )
                goto LABEL_69;
              if ( v16 == 8 )
              {
                v12 = lineptr;
                if ( (unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
                {
                  lineptr = ptr;
                  v10->httponly = 1;
                  v11 = *ptr;
                  goto LABEL_72;
                }
                goto LABEL_93;
              }
              if ( (_BYTE)v15 )
              {
LABEL_69:
                if ( v16 != 7 )
                  goto LABEL_70;
                v12 = lineptr;
                if ( !(unsigned int)curl_strnequal("version", lineptr, 7LL) )
                {
                  if ( (unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
                  {
                    v12 = 0LL;
                    v40 = curlx_strtoofft(&v18[*v18 == 34], 0LL, 10LL, &v10->expires);
                    switch ( v40 )
                    {
                      case 1:
                        lineptr = ptr;
                        v10->expires = 0x7FFFFFFFFFFFFFFFLL;
                        v11 = *ptr;
                        goto LABEL_72;
                      case 2:
LABEL_314:
                        lineptr = ptr;
                        v10->expires = 1LL;
                        v11 = *ptr;
                        goto LABEL_72;
                      case 0:
                        expires = v10->expires;
                        if ( expires )
                        {
                          v14 = 0x7FFFFFFFFFFFFFFFLL;
                          v15 = 0x7FFFFFFFFFFFFFFFLL - now;
                          lineptr = ptr;
                          if ( expires <= 0x7FFFFFFFFFFFFFFFLL - now )
                            v10->expires = now + expires;
                          else
                            v10->expires = 0x7FFFFFFFFFFFFFFFLL;
                          v11 = *ptr;
                          goto LABEL_72;
                        }
                        goto LABEL_314;
                    }
                  }
                  else
                  {
                    v12 = lineptr;
                    if ( (unsigned int)curl_strnequal("expires", lineptr, 7LL) && !v10->expires && v20 <= 0x7F )
                    {
                      v12 = v18;
                      v128 = date;
                      if ( v20 >= 8 )
                      {
                        qmemcpy(date, v18, 8 * (v20 >> 3));
                        v12 = &v18[8 * (v20 >> 3)];
                        v128 = &date[8 * (v20 >> 3)];
                      }
                      v129 = 0LL;
                      if ( (v20 & 4) != 0 )
                      {
                        *(_DWORD *)v128 = *(_DWORD *)v12;
                        v129 = 4LL;
                      }
                      if ( (v20 & 2) != 0 )
                      {
                        *(_WORD *)&v128[v129] = *(_WORD *)&v12[v129];
                        v129 += 2LL;
                      }
                      if ( (v20 & 1) != 0 )
                        v128[v129] = v12[v129];
                      date[v20] = 0;
                      v130 = Curl_getdate_capped(date, v12);
                      v14 = 0LL;
                      v131 = v130 == 0;
                      if ( v130 >= 0 )
                        v14 = v130;
                      v132 = 1LL;
                      if ( !v131 )
                        v132 = v14;
                      v10->expires = v132;
                    }
                  }
                }
              }
LABEL_93:
              lineptr = ptr;
              v11 = *ptr;
LABEL_72:
              if ( v11 )
                goto LABEL_11;
              goto LABEL_73;
            }
LABEL_88:
            if ( !(_BYTE)v15 )
              goto LABEL_82;
            Curl_cfree(0LL);
            v34 = Curl_strndup(lineptr, v16);
            value = v10->value;
            v10->name = (char *)v34;
            Curl_cfree(value);
            v36 = (const char *)Curl_strndup(v18, v20);
            name = v10->name;
            v10->value = (char *)v36;
            if ( !v36 || !name )
              goto LABEL_82;
            if ( v36[strcspn(v36, &badoctets_0)] || (v12 = &badoctets_0, name[strcspn(name, &badoctets_0)]) )
            {
              if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
                Curl_infof(data, "invalid octets in name/value, cookie dropped");
              goto LABEL_82;
            }
            goto LABEL_93;
          }
LABEL_28:
          if ( !v10->name )
            goto LABEL_88;
          if ( v20 )
          {
            if ( v16 != 4 )
            {
              if ( v16 != 6 )
              {
LABEL_70:
                lineptr = ptr;
                v29 = (char *)ptr;
LABEL_71:
                v11 = *v29;
                goto LABEL_72;
              }
              v12 = lineptr;
              if ( !(unsigned int)curl_strnequal("domain", lineptr, 6LL) )
                goto LABEL_93;
              if ( *v18 == 46 )
              {
                ++v18;
                --v20;
              }
              if ( v20 == 9 && (v12 = "localhost", (unsigned int)curl_strnequal(v18, "localhost", 9LL))
                || (v12 = (_BYTE *)(&loc_2C + 2), (v22 = memchr(v18, 46, v20)) != 0LL) && v20 - (v22 - v18) > 1 )
              {
                if ( !domain )
                {
                  is_ipnum = Curl_host_is_ipnum(v18);
                  Curl_cfree(v10->domain);
                  v12 = (const char *)v20;
                  v111 = Curl_strndup(v18, v20);
                  v10->domain = (char *)v111;
                  if ( !v111 )
                    goto LABEL_82;
                  if ( is_ipnum )
                    goto LABEL_93;
                  goto LABEL_258;
                }
                if ( (unsigned __int8)Curl_host_is_ipnum(domain) )
                  goto LABEL_39;
              }
              else
              {
                domain = (const char *)&LC1;
                if ( (unsigned __int8)Curl_host_is_ipnum(&LC1) )
                {
LABEL_39:
                  v12 = domain;
                  if ( !strncmp(v18, domain, v20) && strlen(domain) == v20 )
                  {
                    Curl_cfree(v10->domain);
                    v12 = (const char *)v20;
                    v112 = Curl_strndup(v18, v20);
                    v10->domain = (char *)v112;
                    if ( !v112 )
                      goto LABEL_82;
                    goto LABEL_93;
                  }
LABEL_41:
                  if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
                  {
                    v12 = "skipped cookie with bad tailmatch domain: %s";
                    Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v18);
                  }
                  lineptr = ptr;
                  v11 = *ptr;
                  badcookie = httpheader;
                  goto LABEL_72;
                }
              }
              v43 = strlen(domain);
              v44 = v43;
              if ( v43 < v20 )
                goto LABEL_41;
              v45 = v43 - v20;
              v12 = &domain[v43 - v20];
              if ( !(unsigned int)curl_strnequal(v18, v12, v20) || v20 != v44 && domain[v45 - 1] != 46 )
                goto LABEL_41;
              Curl_cfree(v10->domain);
              v12 = (const char *)v20;
              v46 = Curl_strndup(v18, v20);
              v10->domain = (char *)v46;
              if ( !v46 )
                goto LABEL_82;
LABEL_258:
              v10->tailmatch = 1;
              goto LABEL_93;
            }
          }
          else
          {
            v14 = (__int64)ptr;
            if ( v16 == 6 )
            {
              v12 = lineptr;
              s2d = v15;
              v109 = curl_strnequal("secure", lineptr, 6LL);
              v15 = s2d;
              if ( v109 )
              {
                if ( secure || !c->running )
                {
                  lineptr = ptr;
                  v10->secure = 1;
                  v11 = *ptr;
                  goto LABEL_72;
                }
                goto LABEL_82;
              }
              if ( s2d )
              {
                v12 = lineptr;
                curl_strnequal("domain", lineptr, 6LL);
              }
              goto LABEL_93;
            }
            if ( !(_BYTE)v15 )
              goto LABEL_98;
            if ( v16 != 4 )
            {
              lineptr = ptr;
              v29 = (char *)ptr;
              goto LABEL_71;
            }
          }
          v12 = lineptr;
          if ( (unsigned int)curl_strnequal("path", lineptr, 4LL) )
          {
            Curl_cfree(v10->path);
            v12 = (const char *)v20;
            v38 = Curl_strndup(v18, v20);
            v10->path = (char *)v38;
            if ( v38 )
            {
              Curl_cfree(v10->spath);
              v39 = sanitize_cookie_path(v10->path);
              v10->spath = v39;
              if ( v39 )
              {
                lineptr = ptr;
                v11 = *ptr;
                goto LABEL_72;
              }
            }
            goto LABEL_82;
          }
          goto LABEL_93;
        }
      }
      else if ( (unsigned __int64)v12 <= 0xFFE )
      {
        ptr = (const char *)v14;
        v18 = 0LL;
        v20 = 0LL;
LABEL_63:
        if ( v16 > 6 )
          goto LABEL_64;
        goto LABEL_28;
      }
      v20 = 0LL;
      goto LABEL_253;
    }
LABEL_255:
    Curl_cfree(v10);
    return 0LL;
  }
  tok_buf = 0LL;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
  {
    v10->httponly = 1;
    lineptr += 10;
  }
  if ( *lineptr == 35 )
    goto LABEL_255;
  v23 = strchr(lineptr, 13);
  if ( v23 )
    *v23 = 0;
  v24 = strchr(lineptr, 10);
  if ( v24 )
    *v24 = 0;
  v26 = strtok_r((char *)lineptr, "\t", &tok_buf);
  if ( !v26 )
    goto LABEL_82;
  v27 = 0LL;
  if ( secure )
  {
    ptra = v9;
    v42 = 0;
    while ( 2 )
    {
      switch ( v42 )
      {
        case 0:
          v67 = Curl_cstrdup(&v26[*v26 == 46], "\t", v25, v27);
          v10->domain = (char *)v67;
          v48 = v67;
          v49 = v67 != 0;
          v26 = strtok_r(0LL, "\t", &tok_buf);
          if ( v26 && v49 )
            goto LABEL_155;
LABEL_326:
          v62 = 1;
          v63 = v48 == 0;
          break;
        case 1:
LABEL_155:
          v10->tailmatch = (unsigned int)curl_strequal(v26, "TRUE", v25, v27) != 0;
          v26 = strtok_r(0LL, "\t", &tok_buf);
          if ( v26 )
            goto LABEL_156;
          v133 = ptra;
LABEL_322:
          v63 = v133;
          v62 = 2;
          v49 = 1;
          break;
        case 2:
LABEL_156:
          v68 = v26;
          s2b = v26;
          v69 = strcmp("TRUE", v26);
          v70 = s2b;
          v71 = (__int64 (__fastcall *)(char *))Curl_cstrdup;
          if ( v69 && (v68 = s2b, v72 = strcmp("FALSE", s2b), v70 = s2b, v72) )
          {
            v117 = (const char *)v71(s2b);
            v10->path = (char *)v117;
            if ( !v117 )
              goto LABEL_180;
            v118 = sanitize_cookie_path(v117);
            v10->spath = v118;
            v57 = v118;
            s2f = v118 != 0LL;
            v49 = v118 != 0LL;
            v26 = strtok_r(0LL, "\t", &tok_buf);
            if ( !v26 || !(v27 = s2f) )
            {
LABEL_328:
              v62 = 3;
              v63 = v57 == 0LL;
              break;
            }
            v58 = httpheader;
          }
          else
          {
            s2c = v70;
            v73 = v71("/");
            v10->path = (char *)v73;
            v74 = v73;
            v77 = Curl_cstrdup("/", v68, v75, v76);
            v26 = s2c;
            v10->spath = (char *)v77;
            if ( !v77 )
            {
              v10->secure = 0;
              if ( (unsigned int)curl_strequal(s2c, "TRUE", v25, v27) )
                v10->secure = 1;
LABEL_180:
              strtok_r(0LL, "\t", &tok_buf);
              goto LABEL_82;
            }
            v58 = v74 == 0;
          }
LABEL_160:
          v10->secure = 0;
          if ( (unsigned int)curl_strequal(v26, "TRUE", v25, v27) )
            v10->secure = 1;
          v49 = !v58;
          v26 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v26 || !v49 )
          {
LABEL_330:
            v63 = v58;
            v62 = 4;
            break;
          }
LABEL_164:
          v64 = curlx_strtoofft(v26, 0LL, 10LL, &v10->expires);
          v49 = v64 == 0;
          v26 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v26 || v64 )
          {
LABEL_329:
            v62 = 5;
            v63 = v64 != 0;
            break;
          }
LABEL_166:
          v78 = Curl_cstrdup(v26, "\t", v25, v27);
          v10->name = (char *)v78;
          if ( !v78 )
          {
LABEL_181:
            strtok_r(0LL, "\t", &tok_buf);
            v66 = 1LL;
            goto LABEL_182;
          }
          if ( (unsigned int)curl_strnequal("__Secure-", v78, 9LL) )
          {
            v10->prefix |= 1u;
          }
          else if ( (unsigned int)curl_strnequal("__Host-", v10->name, 7LL) )
          {
            v10->prefix |= 2u;
          }
          v26 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v26 )
          {
            v66 = ptra;
            goto LABEL_182;
          }
LABEL_170:
          v79 = Curl_cstrdup(v26, "\t", v25, v27);
          v10->value = (char *)v79;
          v60 = v79;
          v80 = v79 != 0;
          v49 = v79 != 0;
          if ( !strtok_r(0LL, "\t", &tok_buf) || !v80 )
          {
LABEL_335:
            v62 = 7;
            v63 = v60 == 0;
            break;
          }
          if ( !strtok_r(0LL, "\t", &tok_buf) )
          {
            v134 = ptra;
            goto LABEL_332;
          }
          v42 = 8;
LABEL_174:
          ++v42;
          v26 = strtok_r(0LL, "\t", &tok_buf);
          if ( v26 )
            continue;
          v62 = v42;
          v49 = secure;
          v63 = ptra;
          break;
        case 3:
          v58 = httpheader;
          goto LABEL_160;
        case 4:
          goto LABEL_164;
        case 5:
          goto LABEL_166;
        case 6:
          goto LABEL_170;
        default:
          goto LABEL_174;
      }
      break;
    }
LABEL_323:
    if ( v62 != 7 && v49 )
      goto LABEL_82;
    goto LABEL_183;
  }
  httpheaderb = v9;
  v28 = 0;
  while ( 2 )
  {
    switch ( v28 )
    {
      case 0:
        v47 = Curl_cstrdup(&v26[*v26 == 46], "\t", v25, v27);
        v10->domain = (char *)v47;
        v48 = v47;
        v49 = v47 != 0;
        v26 = strtok_r(0LL, "\t", &tok_buf);
        if ( !v26 || !v49 )
          goto LABEL_326;
        goto LABEL_127;
      case 1:
LABEL_127:
        v10->tailmatch = (unsigned int)curl_strequal(v26, "TRUE", v25, v27) != 0;
        v26 = strtok_r(0LL, "\t", &tok_buf);
        if ( v26 )
          goto LABEL_128;
        v133 = httpheaderb;
        goto LABEL_322;
      case 2:
LABEL_128:
        v50 = v26;
        ptrb = v26;
        v51 = strcmp("TRUE", v26);
        v52 = ptrb;
        v53 = (__int64 (__fastcall *)(const char *))Curl_cstrdup;
        if ( v51 && (v50 = (void *)ptrb, v54 = strcmp("FALSE", ptrb), v52 = ptrb, v54) )
        {
          v55 = (const char *)v53(ptrb);
          v10->path = (char *)v55;
          if ( !v55 )
            goto LABEL_180;
          v56 = sanitize_cookie_path(v55);
          v10->spath = v56;
          v57 = v56;
          ptrc = v56 != 0LL;
          v49 = v56 != 0LL;
          v26 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v26 )
            goto LABEL_328;
          v27 = ptrc;
          if ( !ptrc )
            goto LABEL_328;
          v58 = secure;
        }
        else
        {
          ptrd = v52;
          v81 = v53("/");
          v10->path = (char *)v81;
          v82 = v81;
          v85 = Curl_cstrdup("/", v50, v83, v84);
          v26 = (char *)ptrd;
          v10->spath = (char *)v85;
          if ( !v85 )
          {
            v10->secure = 0;
            if ( !(unsigned int)curl_strequal(ptrd, "TRUE", v25, v27) )
              goto LABEL_180;
            v58 = 1;
            goto LABEL_142;
          }
          v58 = v82 == 0;
        }
LABEL_141:
        v10->secure = 0;
        if ( !(unsigned int)curl_strequal(v26, "TRUE", v25, v27) )
          goto LABEL_144;
LABEL_142:
        if ( !c->running )
          goto LABEL_180;
        v10->secure = 1;
LABEL_144:
        v49 = !v58;
        v26 = strtok_r(0LL, "\t", &tok_buf);
        if ( !v26 || !v49 )
          goto LABEL_330;
LABEL_146:
        v64 = curlx_strtoofft(v26, 0LL, 10LL, &v10->expires);
        v49 = v64 == 0;
        v26 = strtok_r(0LL, "\t", &tok_buf);
        if ( !v26 || v64 )
          goto LABEL_329;
LABEL_148:
        v65 = Curl_cstrdup(v26, "\t", v25, v27);
        v10->name = (char *)v65;
        if ( !v65 )
          goto LABEL_181;
        if ( (unsigned int)curl_strnequal("__Secure-", v65, 9LL) )
        {
          v10->prefix |= 1u;
        }
        else if ( (unsigned int)curl_strnequal("__Host-", v10->name, 7LL) )
        {
          v10->prefix |= 2u;
        }
        v26 = strtok_r(0LL, "\t", &tok_buf);
        if ( v26 )
        {
LABEL_134:
          v59 = Curl_cstrdup(v26, "\t", v25, v27);
          v10->value = (char *)v59;
          v60 = v59;
          v61 = v59 != 0;
          v49 = v59 != 0;
          if ( !strtok_r(0LL, "\t", &tok_buf) || !v61 )
            goto LABEL_335;
          if ( !strtok_r(0LL, "\t", &tok_buf) )
          {
            v134 = httpheaderb;
LABEL_332:
            v63 = v134;
            v62 = 8;
            v49 = 1;
            goto LABEL_323;
          }
          v28 = 8;
LABEL_138:
          ++v28;
          v26 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v26 )
          {
            v62 = v28;
            v49 = 1;
            v63 = 0;
            goto LABEL_323;
          }
          continue;
        }
        v66 = httpheaderb;
LABEL_182:
        ptrf = v66;
        v86 = Curl_cstrdup(&LC24, "\t", v66, v27);
        v63 = ptrf;
        v10->value = (char *)v86;
        if ( !v86 )
          goto LABEL_82;
LABEL_183:
        if ( v63 )
          goto LABEL_82;
        prefix = v10->prefix;
        if ( (prefix & 1) != 0 )
        {
LABEL_185:
          if ( !v10->secure )
            goto LABEL_82;
          if ( (prefix & 2) != 0 )
            goto LABEL_187;
          goto LABEL_191;
        }
LABEL_80:
        if ( (prefix & 2) != 0 )
        {
          if ( !v10->secure )
            goto LABEL_82;
LABEL_187:
          v87 = v10->path;
          if ( !v87 || *v87 != 47 || v87[1] || v10->tailmatch )
            goto LABEL_82;
        }
LABEL_191:
        running = c->running;
        if ( !running && c->newsession && !v10->expires )
          goto LABEL_82;
        v10->livecookie = running;
        ptrg = c->lastct;
        c->lastct = ptrg + 1;
        v10->creationtime = ptrg + 1;
        if ( !noexpire )
          remove_expired(c);
        v91 = cookiehash(v10->domain);
        v92 = c->cookies[v91];
        if ( !v92 )
        {
          if ( c->running && (*(&data->set.connect_only + 4) & 0x20) != 0 )
          {
            v104 = v10->path;
            v105 = v10->domain;
            v31 = v10;
            livecookie = 0;
            v106 = v10->value;
            v107 = v10->name;
            v103 = "Added";
            goto LABEL_231;
          }
          v31 = v10;
          goto LABEL_274;
        }
        livecookie = 0;
        v31 = 0LL;
        v94 = 0LL;
        while ( 2 )
        {
          if ( (unsigned int)curl_strequal(v92->name, v10->name, v89, spath) )
          {
            v96 = v92->domain;
            v97 = v10->domain;
            if ( v96 )
            {
              if ( v97 && (unsigned int)curl_strequal(v96, v97, v89, spath) )
              {
LABEL_204:
                spath = v92->spath;
                if ( spath )
                {
                  ptre = v10->spath;
                  if ( ptre )
                  {
                    if ( v92->secure && !v10->secure && !secure )
                    {
                      s2e = v92->spath;
                      v113 = strchr(spath + 1, 47);
                      v114 = s2e;
                      v115 = (void *)ptre;
                      if ( v113 )
                      {
                        v116 = v113 - s2e;
                      }
                      else
                      {
                        v119 = s2e;
                        s2g = (char *)ptre;
                        ptrh = v114;
                        v120 = strlen(v119);
                        v115 = s2g;
                        v114 = ptrh;
                        v116 = v120;
                      }
                      if ( (unsigned int)curl_strnequal(v114, v115, v116) )
                      {
                        if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
                          Curl_infof(
                            data,
                            "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                            v10->name,
                            v10->domain);
                        goto LABEL_82;
                      }
                    }
                  }
                }
              }
            }
            else if ( !v97 )
            {
              goto LABEL_204;
            }
          }
          if ( v94 || !(unsigned int)curl_strequal(v92->name, v10->name, v89, spath) )
            goto LABEL_198;
          v98 = v92->domain;
          v99 = v10->domain;
          if ( v98 )
          {
            if ( !v99 || !(unsigned int)curl_strequal(v98, v99, v89, spath) || v92->tailmatch != v10->tailmatch )
              goto LABEL_215;
          }
          else if ( v99 )
          {
LABEL_215:
            if ( !livecookie )
              goto LABEL_224;
          }
          v100 = v92->spath;
          v101 = v10->spath;
          if ( !v100 )
          {
LABEL_220:
            LOBYTE(v89) = v100 == 0LL;
            if ( (v100 == 0LL) != (v10->spath == 0LL) )
              goto LABEL_224;
            livecookie = v10->livecookie;
            if ( livecookie )
            {
              v31 = v92;
              v94 = (__m128i *)v10;
            }
            else
            {
              if ( v92->livecookie )
                goto LABEL_82;
              v31 = v92;
              v94 = (__m128i *)v10;
              livecookie = 1;
            }
LABEL_198:
            next = v92->next;
            if ( !v92->next )
              goto LABEL_225;
LABEL_199:
            v92 = next;
            continue;
          }
          break;
        }
        if ( v101 && (unsigned int)curl_strequal(v100, v101, v89, spath) )
        {
          v100 = v92->spath;
          goto LABEL_220;
        }
LABEL_224:
        next = v92->next;
        livecookie = 0;
        if ( v92->next )
          goto LABEL_199;
LABEL_225:
        if ( v94 )
        {
          v102 = v31->name;
          v94->m128i_i64[0] = (__int64)v31->next;
          v94[3].m128i_i32[3] = v31->creationtime;
          Curl_cfree(v102);
          Curl_cfree(v31->value);
          Curl_cfree(v31->domain);
          Curl_cfree(v31->path);
          Curl_cfree(v31->spath);
          *(__m128i *)&v31->next = _mm_loadu_si128(v94);
          *(__m128i *)&v31->value = _mm_loadu_si128(v94 + 1);
          *(__m128i *)&v31->spath = _mm_loadu_si128(v94 + 2);
          *(__m128i *)&v31->expires = _mm_loadu_si128(v94 + 3);
          *(_QWORD *)&v31->prefix = v94[4].m128i_i64[0];
          Curl_cfree(v94);
        }
        else
        {
          v31 = v10;
        }
        if ( !c->running || (*(&data->set.connect_only + 4) & 0x20) == 0 )
        {
          if ( livecookie )
            goto LABEL_232;
          goto LABEL_238;
        }
        v103 = "Added";
        v104 = v31->path;
        v105 = v31->domain;
        v106 = v31->value;
        v107 = v31->name;
        if ( livecookie )
          v103 = "Replaced";
LABEL_231:
        Curl_infof(
          data,
          "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
          v103,
          v107,
          v106,
          v105,
          v104,
          v31->expires);
        if ( !livecookie )
        {
          if ( !v92 )
          {
LABEL_274:
            c->cookies[v91] = v31;
            goto LABEL_239;
          }
LABEL_238:
          v92->next = v31;
LABEL_239:
          ++c->numcookies;
        }
LABEL_232:
        v108 = v31->expires;
        if ( v108 && v108 < c->next_expiration )
          c->next_expiration = v108;
        return v31;
      case 3:
        v58 = secure;
        goto LABEL_141;
      case 4:
        goto LABEL_146;
      case 5:
        goto LABEL_148;
      case 6:
        goto LABEL_134;
      default:
        goto LABEL_138;
    }
  }
}
