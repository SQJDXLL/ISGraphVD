Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  Cookie *v11; // r12
  time_t v12; // rax
  __int64 v13; // rax
  const char *v14; // r15
  char *i; // rbx
  char v16; // r12
  size_t v17; // rax
  size_t v18; // rdx
  unsigned __int64 v19; // rbp
  char v20; // al
  size_t v21; // r13
  size_t v22; // r14
  size_t v23; // rax
  size_t v24; // rdx
  size_t v25; // r14
  size_t v26; // r13
  const char *v27; // rax
  char v28; // cl
  const char *v29; // r15
  __int64 v30; // rcx
  char v31; // dl
  __int64 v32; // rax
  char *v33; // rax
  __int64 v34; // rax
  __int64 v35; // rax
  const char *name; // rbx
  char *value; // rbp
  char v38; // al
  __int64 v39; // rdi
  __int64 *v40; // rbx
  int v41; // eax
  int v42; // eax
  const char *v43; // rbx
  size_t v44; // r13
  _BYTE *v45; // rax
  const char *v46; // rdi
  char is_ipnum; // r15
  const char *v48; // rbp
  __int64 v49; // rax
  __int64 v50; // rax
  char *v51; // rax
  char v52; // cl
  __int64 v53; // rax
  char *v54; // rax
  char *v55; // rax
  char *v56; // rax
  const char *v57; // r13
  int v58; // ebp
  char v59; // r14
  __int64 v60; // rax
  const char *v61; // rax
  char *v62; // rax
  __int64 v63; // rax
  __int64 v64; // rax
  __int64 v65; // rbp
  __int64 v66; // rax
  char *v67; // rax
  __int64 v68; // rax
  _BOOL4 v69; // ebp
  char v70; // al
  Curl_easy *v71; // r15
  char v72; // bl
  const char *v73; // rbp
  __int64 v74; // rax
  char *v75; // rax
  char v76; // r14
  char *v77; // rax
  signed __int64 v78; // rbx
  char *v79; // rax
  size_t v80; // rbx
  char *v81; // rax
  unsigned __int8 prefix; // al
  CookieInfo *v83; // rbx
  bool running; // al
  int v85; // eax
  size_t v86; // r13
  Cookie *next; // rax
  Cookie *v88; // r13
  char v89; // r14
  Cookie *v90; // rbp
  char *v91; // rdi
  char *v92; // rsi
  const char *spath; // r15
  char *v94; // rbx
  char *v95; // rax
  size_t v96; // rax
  char *v97; // rdi
  char *v98; // rsi
  bool v99; // zf
  char *v100; // rdi
  char *v101; // rsi
  const char *v102; // rdi
  const char *v104; // rdx
  Cookie **p_next; // rax
  curl_off_t expires; // rax
  Cookie *v107; // rdi
  Cookie *v108; // [rsp+8h] [rbp-110h]
  _BYTE v109[9]; // [rsp+17h] [rbp-101h]
  void *s; // [rsp+18h] [rbp-100h]
  Curl_easy *v112; // [rsp+20h] [rbp-F8h]
  CookieInfo *cookies; // [rsp+28h] [rbp-F0h]
  bool v115; // [rsp+3Ch] [rbp-DCh]
  char v116; // [rsp+40h] [rbp-D8h]
  __int64 *p_expires; // [rsp+48h] [rbp-D0h]
  time_t v118; // [rsp+50h] [rbp-C8h]
  __int64 v119; // [rsp+58h] [rbp-C0h]
  char *dest[23]; // [rsp+60h] [rbp-B8h] BYREF

  v11 = 0LL;
  v12 = time(0LL);
  if ( data->req.setcookies > 0x31u )
    return v11;
  v118 = v12;
  v13 = Curl_ccalloc(1LL, 72LL);
  if ( !v13 )
    return 0LL;
  v11 = (Cookie *)v13;
  v108 = (Cookie *)v13;
  if ( !httpheader )
  {
    dest[0] = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 10;
      v11->httponly = 1;
    }
    if ( *lineptr != 35 )
    {
      v54 = strchr(lineptr, 13);
      if ( v54 )
        *v54 = 0;
      v115 = noexpire;
      cookies = c;
      v55 = strchr(lineptr, 10);
      if ( v55 )
        *v55 = 0;
      v56 = strtok_r(lineptr, "\t", dest);
      if ( !v56 )
        goto LABEL_258;
      v57 = v56;
      v58 = 0;
      v59 = 0;
      do
      {
        switch ( v58 )
        {
          case 0:
            if ( *v57 == 46 )
              ++v57;
            v60 = Curl_cstrdup(v57);
            v108->domain = (char *)v60;
            if ( !v60 )
              v59 = 1;
            v58 = 0;
            break;
          case 1:
            v108->tailmatch = (unsigned int)curl_strequal(v57, "TRUE") != 0;
            v58 = 1;
            break;
          case 2:
            if ( !strcmp("TRUE", v57) || !strcmp("FALSE", v57) )
            {
              v65 = Curl_cstrdup("/");
              v108->path = (char *)v65;
              v66 = Curl_cstrdup("/");
              if ( !v66 )
                v59 = 1;
              v108->spath = (char *)v66;
              if ( !v65 )
                v59 = 1;
              goto LABEL_157;
            }
            v61 = (const char *)Curl_cstrdup(v57);
            v108->path = (char *)v61;
            v58 = 2;
            if ( v61 )
            {
              v62 = sanitize_cookie_path(v61);
              v108->spath = v62;
              if ( !v62 )
                v59 = 1;
            }
            else
            {
              v59 = 1;
            }
            break;
          case 3:
LABEL_157:
            v108->secure = 0;
            v58 = 3;
            if ( (unsigned int)curl_strequal(v57, "TRUE") )
            {
              if ( !secure && !c->running )
                goto LABEL_161;
              v108->secure = 1;
            }
            break;
          case 4:
            if ( (unsigned int)curlx_strtoofft(v57, 0LL, 10LL, &v11->expires) )
              v59 = 1;
            v58 = 4;
            break;
          case 5:
            v63 = Curl_cstrdup(v57);
            v108->name = (char *)v63;
            v58 = 5;
            if ( v63 )
            {
              if ( (unsigned int)curl_strnequal("__Secure-", v63, 9LL) )
              {
                v108->prefix |= 1u;
              }
              else if ( (unsigned int)curl_strnequal("__Host-", v108->name, 7LL) )
              {
                v108->prefix |= 2u;
              }
            }
            else
            {
LABEL_161:
              v59 = 1;
            }
            break;
          case 6:
            v64 = Curl_cstrdup(v57);
            v108->value = (char *)v64;
            if ( !v64 )
              v59 = 1;
            v58 = 6;
            break;
          default:
            break;
        }
        v67 = strtok_r(0LL, "\t", dest);
        ++v58;
        if ( !v67 )
          break;
        v57 = v67;
      }
      while ( (v59 & 1) == 0 );
      if ( v58 == 6 )
      {
        v68 = Curl_cstrdup(&L_str_22);
        v11 = v108;
        v108->value = (char *)v68;
        v99 = v68 == 0;
        v69 = v68 == 0;
        v70 = v59;
        v59 = 1;
        if ( !v99 )
          v59 = v70;
        v58 = v69 ^ 7;
      }
      else
      {
        v11 = v108;
      }
      if ( (v59 & 1) != 0 || v58 != 7 )
        goto LABEL_258;
      v71 = data;
      goto LABEL_201;
    }
LABEL_124:
    Curl_cfree(v11);
    return 0LL;
  }
  if ( strlen(lineptr) > 0x1388 )
    goto LABEL_124;
  v115 = noexpire;
  cookies = c;
  p_expires = &v11->expires;
  v119 = 0x7FFFFFFFFFFFFFFFLL - v118;
  v116 = 0;
  while ( 1 )
  {
    v14 = lineptr + 1;
    for ( i = lineptr; ; ++i )
    {
      v16 = *i;
      if ( *i != 32 && v16 != 9 )
        break;
      ++v14;
    }
    v17 = strcspn(i, ";\t\r\n=");
    if ( !v17 )
    {
      lineptr = i;
      v11 = v108;
      goto LABEL_60;
    }
    v18 = v17;
    lineptr = &i[v17];
    v19 = v17;
    while ( 1 )
    {
      v20 = i[v19 - 1];
      if ( v20 != 32 && v20 != 9 )
        break;
      if ( !--v19 )
      {
        v19 = 0LL;
        break;
      }
    }
    v21 = 0LL;
    v109[8] = 0;
    *(_QWORD *)v109 = (unsigned __int8)*lineptr;
    if ( v109[0] == 61 )
      break;
LABEL_25:
    if ( v19 > 0xFFE || v21 > 0xFFE || v19 + v21 >= 0x1001 )
    {
      freecookie(v108);
      if ( (*((_BYTE *)&data->set + 2238) & 0x10) == 0 )
        return 0LL;
      v11 = 0LL;
      Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v19, v21);
      return v11;
    }
    v99 = v16 == 95;
    v11 = v108;
    if ( v99 && v19 >= 7 && i[1] == 95 )
    {
      if ( (unsigned int)curl_strnequal("__Secure-", i, 9LL) )
      {
        v108->prefix |= 1u;
      }
      else if ( (unsigned int)curl_strnequal("__Host-", i, 7LL) )
      {
        v108->prefix |= 2u;
      }
    }
    if ( !v108->name )
    {
      if ( v109[0] != 61 )
        goto LABEL_258;
      Curl_cfree(0LL);
      v34 = Curl_memdup(i, v19 + 1);
      v108->name = (char *)v34;
      if ( v34 )
        *(_BYTE *)(v34 + v19) = 0;
      Curl_cfree(v108->value);
      v35 = Curl_memdup(*(_QWORD *)&v109[1], v21 + 1);
      v108->value = (char *)v35;
      if ( v35 )
        *(_BYTE *)(v35 + v21) = 0;
      name = v108->name;
      if ( !name )
        goto LABEL_258;
      value = v108->value;
      if ( !value )
        goto LABEL_258;
      if ( value[strcspn(v108->value, &invalid_octets_badoctets)] || name[strcspn(name, &invalid_octets_badoctets)] )
      {
        if ( (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
        goto LABEL_258;
      }
      goto LABEL_60;
    }
    if ( !v21 )
    {
      if ( v19 == 8 )
      {
        if ( (unsigned int)curl_strnequal("httponly", i, 8LL) )
        {
          v108->httponly = 1;
          goto LABEL_60;
        }
      }
      else if ( v19 == 6 && (unsigned int)curl_strnequal("secure", i, 6LL) )
      {
        if ( !secure && c->running )
          goto LABEL_258;
        v108->secure = 1;
        goto LABEL_60;
      }
      if ( v109[0] != 61 )
        goto LABEL_60;
    }
    if ( v19 == 7 )
    {
      if ( !(unsigned int)curl_strnequal("version", i, 7LL) )
      {
        if ( (unsigned int)curl_strnequal("max-age", i, 7LL) )
        {
          v39 = *(_QWORD *)&v109[1] + 1LL;
          if ( **(_BYTE **)&v109[1] != 34 )
            v39 = *(_QWORD *)&v109[1];
          v40 = p_expires;
          v41 = curlx_strtoofft(v39, 0LL, 10LL, p_expires);
          switch ( v41 )
          {
            case 0:
              v53 = *p_expires;
              if ( !*p_expires )
                goto LABEL_119;
              if ( v119 >= v53 )
              {
                *p_expires = v118 + v53;
                goto LABEL_60;
              }
LABEL_118:
              *p_expires = 0x7FFFFFFFFFFFFFFFLL;
              goto LABEL_60;
            case 2:
              goto LABEL_119;
            case 1:
              goto LABEL_118;
          }
        }
        else if ( (unsigned int)curl_strnequal("expires", i, 7LL) )
        {
          v40 = p_expires;
          if ( v21 <= 0x7F && !*p_expires )
          {
            memcpy(dest, *(const void **)&v109[1], v21);
            *((_BYTE *)dest + v21) = 0;
            v49 = Curl_getdate_capped(dest);
            *p_expires = v49;
            if ( v49 )
            {
              if ( v49 < 0 )
                *p_expires = 0LL;
              goto LABEL_60;
            }
LABEL_119:
            *v40 = 1LL;
            goto LABEL_60;
          }
        }
      }
    }
    else
    {
      if ( v19 != 6 )
      {
        if ( v19 == 4 )
        {
          if ( (unsigned int)curl_strnequal("path", i, 4LL) )
          {
            Curl_cfree(v108->path);
            v32 = Curl_memdup(*(_QWORD *)&v109[1], v21 + 1);
            v108->path = (char *)v32;
            if ( !v32 )
              goto LABEL_258;
            *(_BYTE *)(v32 + v21) = 0;
            if ( !v108->path )
              goto LABEL_258;
            Curl_cfree(v108->spath);
            v33 = sanitize_cookie_path(v108->path);
            v108->spath = v33;
            if ( !v33 )
              goto LABEL_258;
          }
        }
        goto LABEL_60;
      }
      v42 = curl_strnequal("domain", i, 6LL);
      if ( v21 && v42 )
      {
        v43 = (const char *)(*(_QWORD *)&v109[1] + 1LL);
        if ( **(_BYTE **)&v109[1] != 46 )
          v43 = *(const char **)&v109[1];
        v44 = v21 - (**(_BYTE **)&v109[1] == 46);
        if ( v44 == 9 && (unsigned int)curl_strnequal(v43, "localhost", 9LL)
          || (v45 = memchr(v43, 46, v44)) != 0LL && (unsigned __int64)(&v43[v44] - v45) > 1 )
        {
          v46 = domain;
          if ( !domain )
            v46 = v43;
          is_ipnum = Curl_host_is_ipnum(v46);
          if ( !domain )
          {
            domain = 0LL;
LABEL_109:
            Curl_cfree(v108->domain);
            v50 = Curl_memdup(v43, v44 + 1);
            v108->domain = (char *)v50;
            if ( !v50 )
              goto LABEL_258;
            *(_BYTE *)(v50 + v44) = 0;
            v51 = v108->domain;
            v52 = v116;
            if ( !v51 )
              v52 = 1;
            if ( (v51 == 0LL) | (unsigned __int8)is_ipnum )
            {
              v116 = v52;
              if ( !v51 )
                goto LABEL_175;
            }
            else
            {
              v108->tailmatch = 1;
            }
            goto LABEL_60;
          }
          v48 = domain;
          if ( !is_ipnum )
          {
LABEL_90:
            domain = v48;
            if ( cookie_tailmatch(v43, v44, v48) )
            {
              is_ipnum = 0;
              goto LABEL_109;
            }
            goto LABEL_100;
          }
        }
        else
        {
          v48 = ":";
          if ( !(unsigned __int8)Curl_host_is_ipnum(":") )
            goto LABEL_90;
        }
        domain = v48;
        if ( !strncmp(v43, v48, v44) )
        {
          is_ipnum = 1;
          if ( v44 == strlen(v48) )
            goto LABEL_109;
        }
LABEL_100:
        v116 = 1;
        if ( (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
          Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v43);
        goto LABEL_60;
      }
    }
    do
    {
      do
LABEL_60:
        v38 = *lineptr++;
      while ( v38 == 32 );
    }
    while ( v38 == 9 );
    if ( v38 != 59 )
    {
LABEL_175:
      v72 = v116;
      if ( (v116 & 1) != 0 )
      {
        v73 = path;
      }
      else
      {
        v73 = path;
        if ( domain )
        {
          if ( !v11->domain )
          {
            v74 = Curl_cstrdup(domain);
            v11->domain = (char *)v74;
            v72 = 1;
            if ( v74 )
              v72 = v116;
          }
        }
      }
      if ( (v72 & 1) == 0 && v73 && !v11->path )
      {
        v75 = strchr(v73, 63);
        v76 = v72;
        v77 = v75 ? (char *)Curl_memrchr(v73, 47LL, v75 - v73) : strrchr(v73, 47);
        if ( v77 )
        {
          v78 = v77 - v73;
          v79 = (char *)Curl_cmalloc(v77 - v73 + 2);
          v11->path = v79;
          if ( !v79 )
            goto LABEL_258;
          v80 = v78 + 1;
          memcpy(v79, path, v80);
          v11->path[v80] = 0;
          v81 = sanitize_cookie_path(v11->path);
          v11->spath = v81;
          v72 = 1;
          if ( v81 )
            v72 = v76;
        }
      }
      if ( (v72 & 1) == 0 && v11->name )
      {
        v71 = data;
        ++data->req.setcookies;
LABEL_201:
        prefix = v11->prefix;
        if ( (prefix & 1) != 0 && !v11->secure )
          goto LABEL_258;
        if ( (prefix & 2) != 0 )
        {
          if ( !v11->secure )
            goto LABEL_258;
          v102 = v11->path;
          if ( !v102 || strcmp(v102, "/") || v11->tailmatch )
            goto LABEL_258;
        }
        v83 = cookies;
        running = cookies->running;
        if ( !running && cookies->newsession && !v11->expires )
          goto LABEL_258;
        v11->livecookie = running;
        v85 = cookies->lastct + 1;
        cookies->lastct = v85;
        v11->creationtime = v85;
        if ( !v115 )
          remove_expired(cookies);
        v86 = cookiehash(v11->domain);
        next = cookies->cookies[v86];
        if ( !next )
        {
          v90 = 0LL;
          v89 = 0;
LABEL_265:
          if ( v71 && v83->running && (*((_BYTE *)&v71->set + 2238) & 0x10) != 0 )
          {
            v104 = "Replaced";
            if ( (v89 & 1) == 0 )
              v104 = "Added";
            Curl_infof(
              v71,
              "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
              v104,
              v11->name,
              v11->value,
              v11->domain,
              v11->path,
              v11->expires);
          }
          if ( (v89 & 1) == 0 )
          {
            p_next = &v83->cookies[v86];
            if ( v90 )
              p_next = &v90->next;
            *p_next = v11;
            ++v83->numcookies;
          }
          expires = v11->expires;
          if ( expires && expires < v83->next_expiration )
            v83->next_expiration = expires;
          return v11;
        }
        s = (void *)v86;
        v112 = v71;
        v88 = 0LL;
        v11 = 0LL;
        v89 = 0;
        while ( 1 )
        {
          v90 = next;
          if ( !(unsigned int)curl_strequal(next->name, v108->name) )
            goto LABEL_224;
          v91 = v90->domain;
          v92 = v108->domain;
          if ( v91 )
          {
            if ( !v92 || !(unsigned int)curl_strequal(v91, v92) )
              goto LABEL_224;
          }
          else if ( v92 )
          {
            goto LABEL_224;
          }
          spath = v90->spath;
          if ( spath )
          {
            v94 = v108->spath;
            if ( v94 )
            {
              if ( v90->secure && !v108->secure && !secure )
              {
                v95 = strchr(spath + 1, 47);
                v96 = v95 ? v95 - spath : strlen(spath);
                if ( (unsigned int)curl_strnequal(spath, v94, v96) )
                {
                  if ( v112 && (*((_BYTE *)&v112->set + 2238) & 0x10) != 0 )
                    Curl_infof(
                      v112,
                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                      v108->name,
                      v108->domain);
                  v107 = v108;
LABEL_259:
                  freecookie(v107);
                  return 0LL;
                }
              }
            }
          }
LABEL_224:
          if ( !v88 )
          {
            if ( (unsigned int)curl_strequal(v90->name, v108->name) )
            {
              v97 = v90->domain;
              v98 = v108->domain;
              if ( !v97 )
              {
                v99 = v98 == 0LL;
                goto LABEL_231;
              }
              if ( v98 && (unsigned int)curl_strequal(v97, v98) )
              {
                v99 = v90->tailmatch == v108->tailmatch;
LABEL_231:
                if ( v99 )
                  v89 = 1;
              }
              if ( (v89 & 1) != 0 )
              {
                v100 = v90->spath;
                if ( !v100 )
                {
                  v100 = 0LL;
                  goto LABEL_239;
                }
                v101 = v108->spath;
                if ( v101 )
                {
                  if ( (unsigned int)curl_strequal(v100, v101) )
                  {
                    v100 = v90->spath;
                    goto LABEL_239;
                  }
                  v89 = 0;
                }
                else
                {
LABEL_239:
                  v88 = v108;
                  if ( (v100 != 0LL) == (v108->spath == 0LL) )
                    v89 = 0;
                  if ( (v89 & 1) != 0 )
                  {
                    if ( v108->livecookie )
                    {
                      v11 = v90;
                    }
                    else
                    {
                      v11 = v90;
                      if ( v90->livecookie )
                      {
                        v107 = v108;
                        goto LABEL_259;
                      }
                    }
                    goto LABEL_248;
                  }
                }
              }
            }
            v88 = 0LL;
          }
LABEL_248:
          next = v90->next;
          if ( !v90->next )
          {
            if ( v88 )
            {
              v88->next = v11->next;
              v88->creationtime = v11->creationtime;
              Curl_cfree(v11->name);
              Curl_cfree(v11->value);
              Curl_cfree(v11->domain);
              Curl_cfree(v11->path);
              Curl_cfree(v11->spath);
              qmemcpy(v11, v88, sizeof(Cookie));
              Curl_cfree(v88);
            }
            else
            {
              v11 = v108;
            }
            v71 = v112;
            v83 = cookies;
            v86 = (size_t)s;
            goto LABEL_265;
          }
        }
      }
LABEL_258:
      v107 = v11;
      goto LABEL_259;
    }
  }
  *(_QWORD *)&v109[1] = &i[v18 + 1];
  v22 = v18;
  v23 = strcspn(*(const char **)&v109[1], ";\r\n");
  v24 = v22;
  v25 = v23 + v22;
  if ( v23 )
  {
    v26 = v23;
    v27 = &v14[v25];
    while ( 1 )
    {
      v28 = *(v27 - 1);
      if ( v28 != 32 && v28 != 9 )
        break;
      --v26;
      --v27;
      if ( !v26 )
        goto LABEL_22;
    }
    v29 = &v14[v24];
    v30 = 0LL;
    while ( 1 )
    {
      v31 = v29[v30];
      if ( v31 != 32 && v31 != 9 )
        break;
      if ( v26 == ++v30 )
      {
        v21 = 0LL;
        *(_QWORD *)&v109[1] = v27;
        goto LABEL_23;
      }
    }
    v21 = v26 - v30;
    *(_QWORD *)&v109[1] = &v29[v30];
  }
  else
  {
LABEL_22:
    v21 = 0LL;
  }
LABEL_23:
  if ( !memchr(*(const void **)&v109[1], 9, v21) )
  {
    lineptr = &i[v25 + 1];
    goto LABEL_25;
  }
  freecookie(v108);
  if ( (*((_BYTE *)&data->set + 2238) & 0x10) == 0 )
    return 0LL;
  v11 = 0LL;
  Curl_infof(data, "cookie contains TAB, dropping");
  return v11;
}
