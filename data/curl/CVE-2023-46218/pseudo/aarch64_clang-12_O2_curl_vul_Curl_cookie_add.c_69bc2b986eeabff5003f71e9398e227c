Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        const char *domain,
        char *path,
        bool secure)
{
  time_t v15; // x0
  unsigned int setcookies; // w8
  __int64 v17; // x28
  __int64 v18; // x0
  __int64 v19; // x19
  const char *j; // x25
  int v21; // w26
  size_t v22; // x0
  size_t v23; // x28
  const char *v24; // x20
  unsigned __int64 v25; // x22
  int v26; // w8
  const char *v27; // x21
  int v28; // w24
  const char *v29; // x23
  size_t v30; // x0
  size_t v31; // x20
  const char *v32; // x8
  int v33; // w9
  __int64 k; // x9
  int v35; // w11
  size_t v36; // x28
  char v37; // w8
  __int64 v38; // x0
  const char *v39; // x0
  _BYTE *v40; // x22
  size_t v41; // x23
  size_t v42; // x8
  __int64 v43; // x0
  __int64 v44; // x0
  const char *v45; // x22
  __int64 v46; // x23
  int v47; // w0
  _BOOL8 v48; // x9
  const char *v49; // x22
  size_t v50; // x23
  _BYTE *v51; // x0
  const char *v52; // x0
  char is_ipnum; // w27
  size_t v54; // x0
  const char *v55; // x28
  size_t v56; // x27
  _QWORD *v57; // x22
  const char *v58; // x0
  int v59; // w0
  __int64 v60; // x0
  __int64 v61; // x8
  __int64 v62; // x0
  int v63; // w8
  __int64 v64; // x0
  __int64 v65; // x8
  char *v66; // x0
  char *v67; // x0
  char *v68; // x0
  const char *v69; // x22
  int v70; // w20
  char v71; // w23
  const char *v72; // x0
  __int64 v73; // x0
  __int64 v74; // x0
  const char *v75; // x0
  _BYTE *v76; // x22
  size_t v77; // x23
  size_t v78; // x8
  __int64 v79; // x0
  char v80; // w8
  __int64 v81; // x0
  __int64 v82; // x0
  bool v83; // w20
  __int64 v84; // x0
  __int64 v85; // x0
  char *v86; // x0
  __int64 v87; // x0
  char v88; // w8
  __int64 v89; // x0
  char *v90; // x0
  char *v91; // x0
  signed __int64 v92; // x20
  void *v93; // x0
  const char *v94; // x0
  _BYTE *v95; // x22
  size_t v96; // x23
  size_t v97; // x8
  __int64 v98; // x0
  int v99; // w8
  time_t v100; // x0
  curl_off_t next_expiration; // x8
  time_t v102; // x22
  Cookie **v103; // x20
  Cookie *next; // x8
  __int64 v105; // x22
  int v106; // w26
  Cookie *v107; // x25
  char *v108; // x0
  __int64 v109; // x1
  const char *spath; // x23
  __int64 v111; // x24
  char *v112; // x0
  size_t v113; // x2
  char *v114; // x0
  __int64 v115; // x1
  bool v116; // zf
  int v117; // w8
  char *v118; // x0
  __int64 v119; // x1
  const char *v120; // x0
  __int128 v121; // q0
  __int128 v122; // q1
  __int128 v123; // q2
  Cookie **v124; // x8
  curl_off_t v125; // x8
  __int64 i; // x20
  Cookie *v127; // x26
  Cookie *v128; // x27
  Cookie *v129; // x23
  curl_off_t expires; // x8
  Cookie **p_next; // x8
  const char *v132; // x2
  __int64 v134; // [xsp+8h] [xbp-D8h]
  char *s; // [xsp+10h] [xbp-D0h]
  __int64 *v136; // [xsp+18h] [xbp-C8h]
  char v137; // [xsp+24h] [xbp-BCh]
  bool v138; // [xsp+34h] [xbp-ACh]
  CookieInfo *v139; // [xsp+38h] [xbp-A8h]
  Curl_easy *v140; // [xsp+40h] [xbp-A0h]
  time_t v142; // [xsp+50h] [xbp-90h]
  char *dest[17]; // [xsp+58h] [xbp-88h] BYREF

  v15 = time(0uLL);
  setcookies = data->req.setcookies;
  v17 = 0LL;
  v142 = v15;
  if ( setcookies > 0x31 )
    return (Cookie *)v17;
  v140 = data;
  v18 = Curl_ccalloc(1LL, 72LL);
  if ( !v18 )
    return 0LL;
  v19 = v18;
  if ( !httpheader )
  {
    dest[0] = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 0xA;
      *(_BYTE *)(v19 + 59) = 1;
    }
    if ( *lineptr == 35 )
      goto LABEL_147;
    v66 = strchr(lineptr, 13);
    if ( v66 )
      *v66 = 0;
    v138 = secure;
    v67 = strchr(lineptr, 10);
    if ( v67 )
      *v67 = 0;
    v68 = strtok_r(lineptr, "\t", dest);
    if ( !v68 )
      goto LABEL_207;
    v69 = v68;
    v70 = 0;
    while ( 1 )
    {
      v71 = 0;
      switch ( v70 )
      {
        case 0:
          if ( *v69 == 46 )
            v72 = v69 + 1;
          else
            v72 = v69;
          v73 = Curl_cstrdup(v72);
          v70 = 0;
          *(_QWORD *)(v19 + 40) = v73;
          v71 = v73 == 0;
          goto LABEL_195;
        case 1:
          v71 = 0;
          *(_BYTE *)(v19 + 56) = (unsigned int)curl_strequal(v69, "TRUE") != 0;
          v70 = 1;
          goto LABEL_195;
        case 2:
          if ( !strcmp("TRUE", v69) || !strcmp("FALSE", v69) )
          {
            v82 = Curl_cstrdup("/");
            *(_QWORD *)(v19 + 24) = v82;
            v83 = v82 == 0;
            v84 = Curl_cstrdup("/");
            v71 = v83 || v84 == 0;
            *(_QWORD *)(v19 + 32) = v84;
            goto LABEL_179;
          }
          v74 = Curl_cstrdup(v69);
          *(_QWORD *)(v19 + 24) = v74;
          if ( !v74 )
          {
            v70 = 2;
            v71 = 1;
            goto LABEL_195;
          }
          v75 = (const char *)Curl_cstrdup(v74);
          v76 = v75;
          if ( !v75 )
            goto LABEL_194;
          v77 = strlen(v75);
          if ( *v76 == 34 )
            memmove(v76, v76 + 1, v77--);
          if ( v77 )
          {
            v78 = v77 - 1;
            if ( v76[v77 - 1] == 34 )
            {
              --v77;
              v76[v78] = 0;
            }
            if ( *v76 != 47 )
            {
LABEL_192:
              Curl_cfree(v76);
              v85 = Curl_memdup("/", 2LL);
              v76 = (_BYTE *)v85;
              if ( v85 )
                *(_BYTE *)(v85 + 1) = 0;
              goto LABEL_194;
            }
            if ( v77 && v76[v77 - 1] == 47 )
              v76[v77 - 1] = 0;
          }
          else if ( *v76 != 47 )
          {
            goto LABEL_192;
          }
LABEL_194:
          *(_QWORD *)(v19 + 32) = v76;
          v71 = v76 == 0LL;
          v70 = 2;
LABEL_195:
          v86 = strtok_r(0uLL, "\t", dest);
          ++v70;
          if ( (v71 & 1) != 0 || (v69 = v86) == 0LL )
          {
            if ( v70 == 6 )
            {
              v87 = Curl_cstrdup(&unk_2A29);
              v71 |= v87 == 0;
              if ( v87 )
                v70 = 7;
              else
                v70 = 6;
              *(_QWORD *)(v19 + 16) = v87;
            }
            if ( (v71 & 1) == 0 && v70 == 7 )
            {
              v88 = *(_BYTE *)(v19 + 64);
              if ( (v88 & 1) != 0 )
              {
LABEL_205:
                if ( !*(_BYTE *)(v19 + 57) )
                  goto LABEL_335;
              }
LABEL_241:
              if ( (v88 & 2) != 0 )
              {
                if ( !*(_BYTE *)(v19 + 57) )
                  goto LABEL_335;
                v120 = *(const char **)(v19 + 24);
                if ( !v120 || strcmp(v120, "/") || *(_BYTE *)(v19 + 56) )
                  goto LABEL_335;
              }
              if ( !c->running && c->newsession && !*(_QWORD *)(v19 + 48) )
                goto LABEL_335;
              *(_BYTE *)(v19 + 58) = c->running;
              v99 = c->lastct + 1;
              c->lastct = v99;
              *(_DWORD *)(v19 + 60) = v99;
              if ( !noexpire )
              {
                v100 = time(0uLL);
                next_expiration = c->next_expiration;
                v102 = v100;
                if ( v100 >= next_expiration || next_expiration == 0x7FFFFFFFFFFFFFFFLL )
                {
                  c->next_expiration = 0x7FFFFFFFFFFFFFFFLL;
                  for ( i = 0LL; i != 63; ++i )
                  {
                    v127 = c->cookies[i];
                    if ( v127 )
                    {
                      v128 = 0LL;
                      do
                      {
                        while ( 1 )
                        {
                          v129 = v127;
                          expires = v127->expires;
                          v127 = v127->next;
                          if ( !expires || expires >= v102 )
                            break;
                          if ( v128 )
                            p_next = &v128->next;
                          else
                            p_next = &c->cookies[i];
                          *p_next = v127;
                          --c->numcookies;
                          Curl_cfree(v129->domain);
                          Curl_cfree(v129->path);
                          Curl_cfree(v129->spath);
                          Curl_cfree(v129->name);
                          Curl_cfree(v129->value);
                          Curl_cfree(v129);
                          if ( !v127 )
                            goto LABEL_315;
                        }
                        if ( expires && expires < c->next_expiration )
                          c->next_expiration = expires;
                        v128 = v129;
                      }
                      while ( v127 );
                    }
LABEL_315:
                    ;
                  }
                }
              }
              v103 = &c->cookies[cookiehash(*(const char *const *)(v19 + 40))];
              next = *v103;
              if ( *v103 )
              {
                v105 = 0LL;
                v17 = 0LL;
                v106 = 0;
                while ( 1 )
                {
                  v107 = next;
                  if ( !(unsigned int)curl_strequal(next->name, *(_QWORD *)(v19 + 8)) )
                    goto LABEL_249;
                  v108 = v107->domain;
                  v109 = *(_QWORD *)(v19 + 40);
                  if ( v108 )
                  {
                    if ( !v109 || !(unsigned int)curl_strequal(v108, v109) )
                      goto LABEL_249;
                  }
                  else if ( v109 )
                  {
                    goto LABEL_249;
                  }
                  spath = v107->spath;
                  if ( spath )
                  {
                    v111 = *(_QWORD *)(v19 + 32);
                    if ( v111 )
                    {
                      if ( v107->secure && !*(_BYTE *)(v19 + 57) && !v138 )
                      {
                        v112 = strchr(spath + 1, 47);
                        v113 = v112 ? v112 - spath : strlen(spath);
                        if ( (unsigned int)curl_strnequal(spath, v111, v113) )
                        {
                          if ( v140 && (*((_BYTE *)&v140->set + 2238) & 0x10) != 0 )
                            Curl_infof(
                              v140,
                              "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                              *(const char **)(v19 + 8),
                              *(const char **)(v19 + 40));
                          goto LABEL_335;
                        }
                      }
                    }
                  }
LABEL_249:
                  if ( !v105 )
                  {
                    if ( (unsigned int)curl_strequal(v107->name, *(_QWORD *)(v19 + 8)) )
                    {
                      v114 = v107->domain;
                      v115 = *(_QWORD *)(v19 + 40);
                      if ( v114 )
                      {
                        if ( v115 && (unsigned int)curl_strequal(v114, v115) )
                        {
                          v116 = v107->tailmatch == *(unsigned __int8 *)(v19 + 56);
                          goto LABEL_270;
                        }
                        if ( (v106 & 1) == 0 )
                        {
LABEL_280:
                          v106 = 0;
                          goto LABEL_281;
                        }
                      }
                      else
                      {
                        v116 = v115 == 0;
LABEL_270:
                        v117 = v116;
                        if ( ((v106 | v117) & 1) == 0 )
                          goto LABEL_280;
                      }
                      v118 = v107->spath;
                      v119 = *(_QWORD *)(v19 + 32);
                      if ( v118 )
                      {
                        if ( v119 )
                        {
                          if ( (unsigned int)curl_strequal(v118, v119)
                            && (v107->spath != 0LL) != (*(_QWORD *)(v19 + 32) == 0LL) )
                          {
LABEL_283:
                            if ( !*(_BYTE *)(v19 + 58) && v107->livecookie )
                              goto LABEL_335;
                            v106 = 1;
                            v17 = (__int64)v107;
                            v105 = v19;
                            goto LABEL_250;
                          }
                        }
                        else if ( *(_QWORD *)(v19 + 32) )
                        {
                          goto LABEL_283;
                        }
                      }
                      else if ( !v119 )
                      {
                        goto LABEL_283;
                      }
                      goto LABEL_280;
                    }
LABEL_281:
                    v105 = 0LL;
                  }
LABEL_250:
                  next = v107->next;
                  if ( !v107->next )
                  {
                    if ( !v105 )
                      goto LABEL_302;
                    *(_QWORD *)v105 = *(_QWORD *)v17;
                    *(_DWORD *)(v105 + 60) = *(_DWORD *)(v17 + 60);
                    Curl_cfree(*(_QWORD *)(v17 + 8));
                    Curl_cfree(*(_QWORD *)(v17 + 16));
                    Curl_cfree(*(_QWORD *)(v17 + 40));
                    Curl_cfree(*(_QWORD *)(v17 + 24));
                    Curl_cfree(*(_QWORD *)(v17 + 32));
                    *(_OWORD *)v17 = *(_OWORD *)v105;
                    v122 = *(_OWORD *)(v105 + 0x20);
                    v121 = *(_OWORD *)(v105 + 48);
                    v123 = *(_OWORD *)(v105 + 16);
                    *(_QWORD *)(v17 + 64) = *(_QWORD *)(v105 + 64);
                    *(_OWORD *)(v17 + 0x20) = v122;
                    *(_OWORD *)(v17 + 48) = v121;
                    *(_OWORD *)(v17 + 16) = v123;
                    Curl_cfree(v105);
                    goto LABEL_303;
                  }
                }
              }
              v107 = 0LL;
              LOBYTE(v106) = 0;
LABEL_302:
              v17 = v19;
LABEL_303:
              if ( v140 && c->running && (*((_BYTE *)&v140->set + 2238) & 0x10) != 0 )
              {
                if ( (v106 & 1) != 0 )
                  v132 = "Replaced";
                else
                  v132 = "Added";
                Curl_infof(
                  v140,
                  "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
                  v132,
                  *(const char **)(v17 + 8),
                  *(const char **)(v17 + 16),
                  *(const char **)(v17 + 0x28),
                  *(const char **)(v17 + 24),
                  *(_QWORD *)(v17 + 48));
                if ( (v106 & 1) == 0 )
                {
LABEL_307:
                  if ( v107 )
                    v124 = &v107->next;
                  else
                    v124 = v103;
                  *v124 = (Cookie *)v17;
                  ++c->numcookies;
                }
              }
              else if ( (v106 & 1) == 0 )
              {
                goto LABEL_307;
              }
              v125 = *(_QWORD *)(v17 + 48);
              if ( v125 && v125 < c->next_expiration )
                c->next_expiration = v125;
              return (Cookie *)v17;
            }
LABEL_207:
            Curl_cfree(*(_QWORD *)(v19 + 40));
            Curl_cfree(*(_QWORD *)(v19 + 24));
            Curl_cfree(*(_QWORD *)(v19 + 32));
            Curl_cfree(*(_QWORD *)(v19 + 8));
            Curl_cfree(*(_QWORD *)(v19 + 16));
            Curl_cfree(v19);
            return 0LL;
          }
          break;
        case 3:
LABEL_179:
          *(_BYTE *)(v19 + 57) = 0;
          if ( !(unsigned int)curl_strequal(v69, "TRUE") )
            goto LABEL_183;
          if ( v138 || c->running )
          {
            *(_BYTE *)(v19 + 57) = 1;
LABEL_183:
            v70 = 3;
          }
          else
          {
            v70 = 3;
            v71 = 1;
          }
          goto LABEL_195;
        case 4:
          v71 = (unsigned int)curlx_strtoofft(v69, 0LL, 10LL, v19 + 0x30) != 0;
          v70 = 4;
          goto LABEL_195;
        case 5:
          v79 = Curl_cstrdup(v69);
          *(_QWORD *)(v19 + 8) = v79;
          if ( !v79 )
          {
            v70 = 5;
            v71 = 1;
            goto LABEL_195;
          }
          if ( (unsigned int)curl_strnequal("__Secure-", v79, 9LL) )
          {
            v71 = 0;
            v80 = *(_BYTE *)(v19 + 64) | 1;
LABEL_187:
            *(_BYTE *)(v19 + 64) = v80;
            v70 = 5;
            goto LABEL_195;
          }
          v71 = 0;
          if ( (unsigned int)curl_strnequal("__Host-", *(_QWORD *)(v19 + 8), 7LL) )
          {
            v80 = *(_BYTE *)(v19 + 64) | 2;
            goto LABEL_187;
          }
          v70 = 5;
          goto LABEL_195;
        case 6:
          v81 = Curl_cstrdup(v69);
          v71 = v81 == 0;
          v70 = 6;
          *(_QWORD *)(v19 + 16) = v81;
          goto LABEL_195;
        default:
          goto LABEL_195;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_147:
    Curl_cfree(v19);
    return 0LL;
  }
  s = path;
  v136 = (__int64 *)(v19 + 0x30);
  v138 = secure;
  v137 = 0;
  v139 = c;
  v134 = 0x7FFFFFFFFFFFFFFFLL - v142;
  while ( 1 )
  {
    for ( j = lineptr + 1; ; ++j )
    {
      v21 = (unsigned __int8)*lineptr;
      if ( v21 != 32 && v21 != 9 )
        break;
      ++lineptr;
    }
    v22 = strcspn(lineptr, ";\t\r\n=");
    if ( !v22 )
    {
      v24 = lineptr;
      goto LABEL_126;
    }
    v23 = v22;
    v24 = &lineptr[v22];
    v25 = v22;
    do
    {
      v26 = (unsigned __int8)lineptr[v25 - 1];
      if ( v26 != 32 && v26 != 9 )
        break;
      --v25;
    }
    while ( v25 );
    v27 = domain;
    v28 = *(unsigned __int8 *)v24;
    if ( v28 == 61 )
    {
      v29 = &lineptr[v22 + 1];
      v30 = strcspn(v29, ";\r\n");
      v31 = v23 + v30;
      if ( v30 )
      {
        v32 = &j[v31];
        while ( 1 )
        {
          v33 = *((unsigned __int8 *)v32 - 1);
          if ( v33 != 32 && v33 != 9 )
            break;
          --v30;
          --v32;
          if ( !v30 )
            goto LABEL_28;
        }
        for ( k = 0LL; k != v30; ++k )
        {
          v35 = (unsigned __int8)j[v23 + k];
          if ( v35 != 32 && v35 != 9 )
          {
            v29 = &j[v23 + k];
            v36 = v30 - k;
            goto LABEL_29;
          }
        }
        v36 = 0LL;
        v29 = v32;
      }
      else
      {
LABEL_28:
        v36 = 0LL;
      }
LABEL_29:
      if ( memchr(v29, 9, v36) )
      {
        Curl_cfree(*(_QWORD *)(v19 + 40));
        Curl_cfree(*(_QWORD *)(v19 + 24));
        Curl_cfree(*(_QWORD *)(v19 + 32));
        Curl_cfree(*(_QWORD *)(v19 + 8));
        Curl_cfree(*(_QWORD *)(v19 + 16));
        Curl_cfree(v19);
        if ( (*((_BYTE *)&v140->set + 2238) & 0x10) != 0 )
          Curl_infof(v140, "cookie contains TAB, dropping");
        return 0LL;
      }
      v24 = &lineptr[v31 + 1];
    }
    else
    {
      v36 = 0LL;
      v29 = 0LL;
    }
    if ( v25 > 0xFFE || v36 > 0xFFE || v36 + v25 > 0x1000 )
    {
      Curl_cfree(*(_QWORD *)(v19 + 40));
      Curl_cfree(*(_QWORD *)(v19 + 24));
      Curl_cfree(*(_QWORD *)(v19 + 32));
      Curl_cfree(*(_QWORD *)(v19 + 8));
      Curl_cfree(*(_QWORD *)(v19 + 16));
      Curl_cfree(v19);
      if ( (*((_BYTE *)&v140->set + 2238) & 0x10) != 0 )
        Curl_infof(v140, "oversized cookie dropped, name/val %zu + %zu bytes", v25, v36);
      return 0LL;
    }
    if ( v21 == 95 && v25 >= 7 && lineptr[1] == 95 )
    {
      if ( (unsigned int)curl_strnequal("__Secure-", lineptr, 9LL) )
      {
        v37 = *(_BYTE *)(v19 + 64) | 1;
      }
      else
      {
        if ( !(unsigned int)curl_strnequal("__Host-", lineptr, 7LL) )
          goto LABEL_42;
        v37 = *(_BYTE *)(v19 + 64) | 2;
      }
      *(_BYTE *)(v19 + 64) = v37;
    }
LABEL_42:
    if ( !*(_QWORD *)(v19 + 8) )
      break;
    if ( !v36 )
    {
      if ( v25 == 8 )
      {
        if ( (unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
        {
          *(_BYTE *)(v19 + 59) = 1;
LABEL_101:
          domain = v27;
          c = v139;
          goto LABEL_126;
        }
      }
      else if ( v25 == 6 && (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
      {
        domain = v27;
        c = v139;
        if ( !v138 && v139->running )
          goto LABEL_335;
        *(_BYTE *)(v19 + 57) = 1;
        goto LABEL_126;
      }
      if ( v28 != 61 )
        goto LABEL_101;
    }
    if ( v25 == 7 )
    {
      domain = v27;
      if ( (unsigned int)curl_strnequal("version", lineptr, 7LL) )
      {
        c = v139;
        goto LABEL_126;
      }
      if ( (unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
      {
        v57 = (_QWORD *)(v19 + 0x30);
        if ( *v29 == 34 )
          v58 = v29 + 1;
        else
          v58 = v29;
        v59 = curlx_strtoofft(v58, 0LL, 10LL, v136);
        if ( v59 )
        {
          c = v139;
          if ( v59 != 2 )
          {
            if ( v59 != 1 )
              goto LABEL_126;
LABEL_141:
            *v136 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_126;
          }
          goto LABEL_142;
        }
        v65 = *v136;
        c = v139;
        if ( !*v136 )
          goto LABEL_142;
        if ( v134 < v65 )
          goto LABEL_141;
        *v136 = v65 + v142;
      }
      else
      {
        c = v139;
        if ( (unsigned int)curl_strnequal("expires", lineptr, 7LL) )
        {
          v57 = (_QWORD *)(v19 + 0x30);
          if ( v36 <= 0x7F && !*v136 )
          {
            memcpy(dest, v29, v36);
            *((_BYTE *)dest + v36) = 0;
            v64 = Curl_getdate_capped(dest);
            *v136 = v64;
            if ( v64 )
            {
              if ( (v64 & 0x8000000000000000LL) != 0 )
                *v136 = 0LL;
              goto LABEL_126;
            }
LABEL_142:
            *v57 = 1LL;
          }
        }
      }
    }
    else
    {
      domain = v27;
      if ( v25 == 6 )
      {
        v47 = curl_strnequal("domain", lineptr, 6LL);
        c = v139;
        if ( v36 && v47 )
        {
          v48 = *(unsigned __int8 *)v29 == 46;
          if ( *v29 == 46 )
            v49 = v29 + 1;
          else
            v49 = v29;
          v50 = v36 - v48;
          if ( v36 - v48 == 9 && (unsigned int)curl_strnequal(v49, "localhost", 9LL)
            || (v51 = memchr(v49, 46, v50)) != 0LL && (unsigned __int64)(&v49[v50] - v51) > 1 )
          {
            if ( domain )
              v52 = domain;
            else
              v52 = v49;
            is_ipnum = Curl_host_is_ipnum(v52);
            if ( !domain )
              goto LABEL_115;
            if ( (is_ipnum & 1) == 0 )
              goto LABEL_93;
LABEL_112:
            if ( !strncmp(v49, domain, v50) && v50 == strlen(domain) )
            {
              is_ipnum = 1;
LABEL_115:
              Curl_cfree(*(_QWORD *)(v19 + 40));
              v60 = Curl_memdup(v49, v50 + 1);
              *(_QWORD *)(v19 + 40) = v60;
              if ( !v60 )
                goto LABEL_335;
              *(_BYTE *)(v60 + v50) = 0;
              v61 = *(_QWORD *)(v19 + 40);
              if ( is_ipnum & 1 | (v61 == 0) )
              {
                if ( !v61 )
                  goto LABEL_335;
                v137 |= v61 == 0;
              }
              else
              {
                *(_BYTE *)(v19 + 56) = 1;
              }
              goto LABEL_126;
            }
          }
          else
          {
            domain = ":";
            if ( (Curl_host_is_ipnum(":") & 1) != 0 )
              goto LABEL_112;
LABEL_93:
            v54 = strlen(domain);
            if ( v54 >= v50 )
            {
              v55 = &domain[v54 - v50];
              v56 = v54;
              if ( (unsigned int)curl_strnequal(v49, v55, v50) )
              {
                if ( v56 == v50 || *(v55 - 1) == 46 )
                {
                  is_ipnum = 0;
                  goto LABEL_115;
                }
              }
            }
          }
          if ( (*((_BYTE *)&v140->set + 2238) & 0x10) != 0 )
            Curl_infof(v140, "skipped cookie with bad tailmatch domain: %s", v49);
          v137 = 1;
        }
      }
      else
      {
        c = v139;
        if ( v25 == 4 && (unsigned int)curl_strnequal("path", lineptr, 4LL) )
        {
          Curl_cfree(*(_QWORD *)(v19 + 24));
          v38 = Curl_memdup(v29, v36 + 1);
          *(_QWORD *)(v19 + 24) = v38;
          if ( !v38 )
            goto LABEL_335;
          *(_BYTE *)(v38 + v36) = 0;
          if ( !*(_QWORD *)(v19 + 24) )
            goto LABEL_335;
          Curl_cfree(*(_QWORD *)(v19 + 32));
          v39 = (const char *)Curl_cstrdup(*(_QWORD *)(v19 + 24));
          if ( !v39 )
            goto LABEL_334;
          v40 = v39;
          v41 = strlen(v39);
          if ( *v40 == 34 )
            memmove(v40, v40 + 1, v41--);
          if ( v41 )
          {
            v42 = v41 - 1;
            if ( v40[v41 - 1] == 34 )
            {
              --v41;
              v40[v42] = 0;
            }
            if ( *v40 == 47 )
            {
              if ( v41 && v40[v41 - 1] == 47 )
                v40[v41 - 1] = 0;
              goto LABEL_125;
            }
          }
          else if ( *v40 == 47 )
          {
LABEL_125:
            *(_QWORD *)(v19 + 32) = v40;
            goto LABEL_126;
          }
          Curl_cfree(v40);
          v62 = Curl_memdup("/", 2LL);
          if ( !v62 )
            goto LABEL_334;
          v40 = (_BYTE *)v62;
          *(_BYTE *)(v62 + 1) = 0;
          goto LABEL_125;
        }
      }
    }
LABEL_126:
    for ( lineptr = (char *)(v24 + 1); ; ++lineptr )
    {
      v63 = (unsigned __int8)*(lineptr - 1);
      if ( v63 != 32 && v63 != 9 )
        break;
    }
    if ( v63 != 59 )
    {
      if ( (v137 & 1) != 0 )
        goto LABEL_335;
      if ( domain )
      {
        if ( !*(_QWORD *)(v19 + 40) )
        {
          v89 = Curl_cstrdup(domain);
          *(_QWORD *)(v19 + 40) = v89;
          if ( !v89 )
            goto LABEL_335;
        }
      }
      if ( !s
        || *(_QWORD *)(v19 + 24)
        || ((v90 = strchr(s, 63)) == 0LL ? (v91 = strrchr(s, 47)) : (v91 = (char *)Curl_memrchr(s, 47LL, v90 - s)), !v91) )
      {
LABEL_239:
        if ( !*(_QWORD *)(v19 + 8) )
          goto LABEL_335;
        ++v140->req.setcookies;
        v88 = *(_BYTE *)(v19 + 64);
        if ( (v88 & 1) != 0 )
          goto LABEL_205;
        goto LABEL_241;
      }
      v92 = v91 - s;
      v93 = (void *)Curl_cmalloc(v91 - s + 2);
      *(_QWORD *)(v19 + 24) = v93;
      if ( !v93 )
        goto LABEL_335;
      memcpy(v93, s, v92 + 1);
      *(_BYTE *)(*(_QWORD *)(v19 + 24) + v92 + 1) = 0;
      v94 = (const char *)Curl_cstrdup(*(_QWORD *)(v19 + 24));
      if ( v94 )
      {
        v95 = v94;
        v96 = strlen(v94);
        if ( *v95 == 34 )
          memmove(v95, v95 + 1, v96--);
        if ( v96 )
        {
          v97 = v96 - 1;
          if ( v95[v96 - 1] == 34 )
          {
            --v96;
            v95[v97] = 0;
          }
          if ( *v95 == 47 )
          {
            if ( v96 && v95[v96 - 1] == 47 )
              v95[v96 - 1] = 0;
            goto LABEL_238;
          }
        }
        else if ( *v95 == 47 )
        {
LABEL_238:
          *(_QWORD *)(v19 + 32) = v95;
          goto LABEL_239;
        }
        Curl_cfree(v95);
        v98 = Curl_memdup("/", 2LL);
        if ( v98 )
        {
          v95 = (_BYTE *)v98;
          *(_BYTE *)(v98 + 1) = 0;
          goto LABEL_238;
        }
      }
LABEL_334:
      *(_QWORD *)(v19 + 32) = 0LL;
      goto LABEL_335;
    }
  }
  v116 = v28 == 61;
  domain = v27;
  c = v139;
  if ( !v116 )
    goto LABEL_335;
  Curl_cfree(0LL);
  v43 = Curl_memdup(lineptr, v25 + 1);
  *(_QWORD *)(v19 + 8) = v43;
  if ( v43 )
    *(_BYTE *)(v43 + v25) = 0;
  Curl_cfree(*(_QWORD *)(v19 + 16));
  v44 = Curl_memdup(v29, v36 + 1);
  *(_QWORD *)(v19 + 16) = v44;
  if ( v44 )
    *(_BYTE *)(v44 + v36) = 0;
  v45 = *(const char **)(v19 + 8);
  if ( !v45 )
    goto LABEL_335;
  v46 = *(_QWORD *)(v19 + 16);
  if ( !v46 )
    goto LABEL_335;
  if ( !*(_BYTE *)(v46 + strcspn(*(const char **)(v19 + 16), invalid_octets_badoctets))
    && !v45[strcspn(v45, invalid_octets_badoctets)] )
  {
    goto LABEL_126;
  }
  if ( (*((_BYTE *)&v140->set + 2238) & 0x10) != 0 )
    Curl_infof(v140, "invalid octets in name/value, cookie dropped");
LABEL_335:
  Curl_cfree(*(_QWORD *)(v19 + 40));
  Curl_cfree(*(_QWORD *)(v19 + 24));
  Curl_cfree(*(_QWORD *)(v19 + 32));
  Curl_cfree(*(_QWORD *)(v19 + 8));
  Curl_cfree(*(_QWORD *)(v19 + 16));
  Curl_cfree(v19);
  return 0LL;
}
