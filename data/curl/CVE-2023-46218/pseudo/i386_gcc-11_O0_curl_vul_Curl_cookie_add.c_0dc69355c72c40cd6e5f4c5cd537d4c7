Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  const char *v9; // eax
  const char *v10; // eax
  char *v11; // eax
  int v12; // eax
  char *v13; // eax
  char *v14; // eax
  char *v15; // eax
  char *v16; // eax
  char *v17; // eax
  char *v18; // eax
  char *v19; // eax
  const char *v20; // eax
  int expires_high; // edx
  int v22; // [esp-8h] [ebp-160h]
  int v23; // [esp-8h] [ebp-160h]
  char *lineptra; // [esp+3Ch] [ebp-11Ch]
  bool replace_old; // [esp+56h] [ebp-102h]
  bool badcookie; // [esp+57h] [ebp-101h]
  bool done; // [esp+58h] [ebp-100h]
  bool sep; // [esp+59h] [ebp-FFh]
  bool matching_domains; // [esp+5Ah] [ebp-FEh]
  char is_ip; // [esp+5Bh] [ebp-FDh]
  char *tok_buf; // [esp+5Ch] [ebp-FCh] BYREF
  Cookie *clist; // [esp+60h] [ebp-F8h]
  Cookie *co; // [esp+64h] [ebp-F4h]
  Cookie *lastc; // [esp+68h] [ebp-F0h]
  Cookie *replace_co; // [esp+6Ch] [ebp-ECh]
  Cookie *replace_clist; // [esp+70h] [ebp-E8h]
  const char *ptr; // [esp+74h] [ebp-E4h]
  size_t vlen; // [esp+78h] [ebp-E0h]
  size_t nlen; // [esp+7Ch] [ebp-DCh]
  const char *valuep; // [esp+80h] [ebp-D8h]
  char *endslash; // [esp+84h] [ebp-D4h]
  char *ptr_0; // [esp+88h] [ebp-D0h]
  int fields; // [esp+8Ch] [ebp-CCh]
  size_t cllen; // [esp+90h] [ebp-C8h]
  time_t now; // [esp+94h] [ebp-C4h]
  char *firstptr; // [esp+98h] [ebp-C0h]
  size_t linelength; // [esp+9Ch] [ebp-BCh]
  const char *namep; // [esp+A0h] [ebp-B8h]
  const char *maxage; // [esp+A4h] [ebp-B4h]
  CURLofft offt; // [esp+A8h] [ebp-B0h]
  char *queryp; // [esp+ACh] [ebp-ACh]
  size_t pathlen; // [esp+B0h] [ebp-A8h]
  size_t myhash; // [esp+B4h] [ebp-A4h]
  const char *sep_0; // [esp+B8h] [ebp-A0h]
  char date[128]; // [esp+BCh] [ebp-9Ch] BYREF
  unsigned int v57; // [esp+13Ch] [ebp-1Ch]

  lineptra = (char *)lineptr;
  v57 = __readgsdword(0x14u);
  lastc = 0;
  replace_co = 0;
  replace_clist = 0;
  now = time(0);
  replace_old = 0;
  badcookie = 0;
  if ( data->req.setcookies > 0x31u )
    return 0;
  co = (Cookie *)Curl_ccalloc(1, 44);
  if ( !co )
    return 0;
  if ( !httpheader )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      lineptra = (char *)(lineptr + 10);
      co->httponly = 1;
    }
    if ( *lineptra != 35 )
    {
      ptr_0 = strchr(lineptra, 13);
      if ( ptr_0 )
        *ptr_0 = 0;
      ptr_0 = strchr(lineptra, 10);
      if ( ptr_0 )
        *ptr_0 = 0;
      firstptr = strtok_r(lineptra, "\t", &tok_buf);
      ptr_0 = firstptr;
      fields = 0;
      while ( ptr_0 && !badcookie )
      {
        switch ( fields )
        {
          case 0:
            if ( *ptr_0 == 46 )
              ++ptr_0;
            v11 = (char *)Curl_cstrdup(ptr_0);
            co->domain = v11;
            if ( !co->domain )
              badcookie = 1;
            break;
          case 1:
            v12 = curl_strequal(ptr_0, "TRUE");
            co->tailmatch = v12 != 0;
            break;
          case 2:
            if ( !strcmp("TRUE", ptr_0) || !strcmp("FALSE", ptr_0) )
            {
              v15 = (char *)Curl_cstrdup("/");
              co->path = v15;
              if ( !co->path )
                badcookie = 1;
              v16 = (char *)Curl_cstrdup("/");
              co->spath = v16;
              if ( !co->spath )
                badcookie = 1;
              ++fields;
              goto _L197;
            }
            v13 = (char *)Curl_cstrdup(ptr_0);
            co->path = v13;
            if ( co->path )
            {
              v14 = sanitize_cookie_path(co->path);
              co->spath = v14;
              if ( !co->spath )
                badcookie = 1;
            }
            else
            {
              badcookie = 1;
            }
            break;
          case 3:
_L197:
            co->secure = 0;
            if ( curl_strequal(ptr_0, "TRUE") )
            {
              if ( secure || c->running )
                co->secure = 1;
              else
                badcookie = 1;
            }
            break;
          case 4:
            if ( curlx_strtoofft(ptr_0, 0, 10, &co->expires) )
              badcookie = 1;
            break;
          case 5:
            v17 = (char *)Curl_cstrdup(ptr_0);
            co->name = v17;
            if ( co->name )
            {
              if ( curl_strnequal("__Secure-", co->name, 9) )
              {
                co->prefix |= 1u;
              }
              else if ( curl_strnequal("__Host-", co->name, 7) )
              {
                co->prefix |= 2u;
              }
            }
            else
            {
              badcookie = 1;
            }
            break;
          case 6:
            v18 = (char *)Curl_cstrdup(ptr_0);
            co->value = v18;
            if ( !co->value )
              badcookie = 1;
            break;
          default:
            break;
        }
        ptr_0 = strtok_r(0, "\t", &tok_buf);
        ++fields;
      }
      if ( fields == 6 )
      {
        v19 = (char *)Curl_cstrdup(&unk_8003A2D);
        co->value = v19;
        if ( co->value )
          ++fields;
        else
          badcookie = 1;
      }
      if ( !badcookie && fields != 7 )
        badcookie = 1;
      if ( !badcookie )
        goto LABEL_210;
      goto LABEL_265;
    }
    goto LABEL_7;
  }
  linelength = strlen(lineptr);
  if ( linelength > 0x1388 )
  {
LABEL_7:
    Curl_cfree(co);
    return 0;
  }
  for ( ptr = lineptr; ; ++ptr )
  {
    while ( *ptr && (*ptr == 32 || *ptr == 9) )
      ++ptr;
    nlen = strcspn(ptr, ";\t\r\n=");
    if ( !nlen )
      goto LABEL_133;
    done = 0;
    sep = 0;
    namep = ptr;
    ptr += nlen;
    while ( nlen && (namep[nlen - 1] == 32 || namep[nlen - 1] == 9) )
      --nlen;
    if ( *ptr == 61 )
    {
      vlen = strcspn(++ptr, ";\r\n");
      valuep = ptr;
      sep = 1;
      ptr += vlen;
      while ( vlen && (valuep[vlen - 1] == 32 || valuep[vlen - 1] == 9) )
        --vlen;
      while ( vlen && (*valuep == 32 || *valuep == 9) )
      {
        ++valuep;
        --vlen;
      }
      if ( memchr(valuep, 9, vlen) )
      {
        freecookie(co);
        if ( data )
        {
          if ( (data->set.gap52B[3] & 0x10) != 0 )
            Curl_infof(data, "cookie contains TAB, dropping", v22);
        }
        return 0;
      }
    }
    else
    {
      valuep = 0;
      vlen = 0;
    }
    if ( nlen > 0xFFE || vlen > 0xFFE || nlen + vlen > 0x1000 )
    {
      freecookie(co);
      if ( data && (data->set.gap52B[3] & 0x10) != 0 )
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", nlen);
      return 0;
    }
    if ( nlen > 6 && *namep == 95 && namep[1] == 95 )
    {
      if ( curl_strnequal("__Secure-", namep, 9) )
      {
        co->prefix |= 1u;
      }
      else if ( curl_strnequal("__Host-", namep, 7) )
      {
        co->prefix |= 2u;
      }
    }
    if ( !co->name )
      break;
    if ( !vlen )
    {
      done = 1;
      if ( nlen == 6 && curl_strnequal("secure", namep, 6) )
      {
        if ( !secure && c->running )
        {
          badcookie = 1;
          goto LABEL_138;
        }
        co->secure = 1;
      }
      else if ( nlen == 8 && curl_strnequal("httponly", namep, 8) )
      {
        co->httponly = 1;
      }
      else if ( sep )
      {
        done = 0;
      }
    }
LABEL_74:
    if ( !done )
    {
      if ( nlen == 4 && curl_strnequal("path", namep, 4) )
      {
        strstore(&co->path, valuep, vlen);
        if ( !co->path )
        {
          badcookie = 1;
          goto LABEL_138;
        }
        Curl_cfree(co->spath);
        co->spath = sanitize_cookie_path(co->path);
        if ( !co->spath )
        {
          badcookie = 1;
          goto LABEL_138;
        }
      }
      else if ( nlen == 6 && curl_strnequal("domain", namep, 6) && vlen )
      {
        if ( *valuep == 46 )
        {
          ++valuep;
          --vlen;
        }
        if ( bad_domain(valuep, vlen) )
          domain = ":";
        if ( domain )
          v9 = domain;
        else
          v9 = valuep;
        is_ip = Curl_host_is_ipnum(v9);
        if ( !domain
          || is_ip && !strncmp(valuep, domain, vlen) && vlen == strlen(domain)
          || is_ip != 1 && cookie_tailmatch(valuep, vlen, domain) )
        {
          strstore(&co->domain, valuep, vlen);
          if ( !co->domain )
          {
            badcookie = 1;
            goto LABEL_138;
          }
          if ( is_ip != 1 )
            co->tailmatch = 1;
        }
        else
        {
          badcookie = 1;
          if ( data && (data->set.gap52B[3] & 0x10) != 0 )
            Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", valuep);
        }
      }
      else if ( nlen != 7 || !curl_strnequal("version", namep, 7) )
      {
        if ( nlen == 7 && curl_strnequal("max-age", namep, 7) )
        {
          maxage = valuep;
          if ( *valuep == 34 )
            v10 = maxage + 1;
          else
            v10 = maxage;
          offt = curlx_strtoofft(v10, 0, 10, &co->expires);
          if ( offt == CURL_OFFT_INVAL )
          {
            co->expires = 1LL;
          }
          else if ( (unsigned int)offt <= CURL_OFFT_INVAL )
          {
            if ( offt )
            {
              co->expires = 0x7FFFFFFFFFFFFFFFLL;
            }
            else if ( co->expires )
            {
              if ( 0x7FFFFFFFFFFFFFFFLL - now >= co->expires )
                co->expires += now;
              else
                co->expires = 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              co->expires = 1LL;
            }
          }
        }
        else if ( nlen == 7 && curl_strnequal("expires", namep, 7) && !co->expires && vlen <= 0x7F )
        {
          memcpy(date, valuep, vlen);
          date[vlen] = 0;
          co->expires = Curl_getdate_capped(date);
          if ( co->expires )
          {
            if ( co->expires < 0 )
              co->expires = 0LL;
          }
          else
          {
            co->expires = 1LL;
          }
        }
      }
    }
LABEL_133:
    while ( *ptr && (*ptr == 32 || *ptr == 9) )
      ++ptr;
    if ( *ptr != 59 )
      goto LABEL_138;
  }
  if ( !sep )
  {
    badcookie = 1;
    goto LABEL_138;
  }
  strstore(&co->name, namep, nlen);
  strstore(&co->value, valuep, vlen);
  done = 1;
  if ( !co->name || !co->value )
  {
    badcookie = 1;
    goto LABEL_138;
  }
  if ( !invalid_octets(co->value) && !invalid_octets(co->name) )
    goto LABEL_74;
  if ( data && (data->set.gap52B[3] & 0x10) != 0 )
    Curl_infof(data, "invalid octets in name/value, cookie dropped", v23);
  badcookie = 1;
LABEL_138:
  if ( !badcookie && !co->domain )
  {
    if ( domain )
    {
      co->domain = (char *)Curl_cstrdup(domain);
      if ( !co->domain )
        badcookie = 1;
    }
  }
  if ( !badcookie && !co->path && path )
  {
    queryp = strchr(path, 63);
    endslash = queryp ? (char *)Curl_memrchr(path, 47, queryp - path) : strrchr(path, 47);
    if ( endslash )
    {
      pathlen = endslash - path + 1;
      co->path = (char *)Curl_cmalloc(endslash - path + 2);
      if ( co->path )
      {
        memcpy(co->path, path, pathlen);
        co->path[pathlen] = 0;
        co->spath = sanitize_cookie_path(co->path);
        if ( !co->spath )
          badcookie = 1;
      }
      else
      {
        badcookie = 1;
      }
    }
  }
  if ( badcookie || !co->name )
  {
    freecookie(co);
    return 0;
  }
  ++data->req.setcookies;
LABEL_210:
  if ( ((co->prefix & 1) == 0 || co->secure)
    && ((co->prefix & 2) == 0 || co->secure && co->path && !strcmp(co->path, "/") && !co->tailmatch)
    && (c->running || !c->newsession || co->expires) )
  {
    co->livecookie = c->running;
    co->creationtime = ++c->lastct;
    if ( !noexpire )
      remove_expired(c);
    myhash = cookiehash(co->domain);
    for ( clist = c->cookies[myhash]; ; clist = clist->next )
    {
      if ( !clist )
      {
        if ( replace_co )
        {
          co = replace_co;
          clist = replace_clist;
          replace_co->next = replace_clist->next;
          co->creationtime = clist->creationtime;
          Curl_cfree(clist->name);
          Curl_cfree(clist->value);
          Curl_cfree(clist->domain);
          Curl_cfree(clist->path);
          Curl_cfree(clist->spath);
          *clist = *co;
          Curl_cfree(co);
          co = clist;
        }
        if ( c->running && data && (data->set.gap52B[3] & 0x10) != 0 )
        {
          if ( replace_old )
            v20 = "Replaced";
          else
            v20 = "Added";
          Curl_infof(data, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld", v20);
        }
        if ( !replace_old )
        {
          if ( lastc )
            lastc->next = co;
          else
            c->cookies[myhash] = co;
          ++c->numcookies;
        }
        if ( co->expires && co->expires < c->next_expiration )
        {
          expires_high = HIDWORD(co->expires);
          LODWORD(c->next_expiration) = co->expires;
          HIDWORD(c->next_expiration) = expires_high;
        }
        return co;
      }
      if ( curl_strequal(clist->name, co->name) )
      {
        matching_domains = 0;
        if ( clist->domain && co->domain )
        {
          matching_domains = curl_strequal(clist->domain, co->domain) != 0;
        }
        else if ( !clist->domain && !co->domain )
        {
          matching_domains = 1;
        }
        if ( matching_domains && clist->spath && co->spath && clist->secure && !co->secure && !secure )
        {
          sep_0 = strchr((const char *)clist->spath + 1, 47);
          cllen = sep_0 ? sep_0 - clist->spath : strlen(clist->spath);
          if ( curl_strnequal(clist->spath, co->spath, cllen) )
            break;
        }
      }
      if ( !replace_co && curl_strequal(clist->name, co->name) )
      {
        if ( clist->domain && co->domain )
        {
          if ( curl_strequal(clist->domain, co->domain) && clist->tailmatch == co->tailmatch )
            replace_old = 1;
        }
        else if ( !clist->domain && !co->domain )
        {
          replace_old = 1;
        }
        if ( replace_old )
        {
          if ( clist->spath && co->spath && !curl_strequal(clist->spath, co->spath) )
          {
            replace_old = 0;
          }
          else if ( (clist->spath == 0) != (co->spath == 0) )
          {
            replace_old = 0;
          }
        }
        if ( replace_old && !co->livecookie && clist->livecookie )
          goto LABEL_265;
        if ( replace_old )
        {
          replace_co = co;
          replace_clist = clist;
        }
      }
      lastc = clist;
    }
    if ( data && (data->set.gap52B[3] & 0x10) != 0 )
      Curl_infof(data, "cookie '%s' for domain '%s' dropped, would overlay an existing cookie", co->name);
  }
LABEL_265:
  freecookie(co);
  return 0;
}
