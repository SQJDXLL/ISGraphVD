Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  const char *v9; // x0
  const char *v10; // x0
  char *v11; // x0
  bool v12; // w0
  char *v13; // x0
  char *v14; // x0
  char *v15; // x0
  char *v16; // x0
  char *v17; // x0
  char *v18; // x0
  char *v19; // x0
  Cookie *v20; // x0
  Cookie *v21; // x1
  __int128 v22; // q1
  __int128 v23; // q1
  const char *v24; // x0
  bool replace_old; // [xsp+4Ah] [xbp+4Ah]
  bool badcookie; // [xsp+4Bh] [xbp+4Bh]
  bool done; // [xsp+4Ch] [xbp+4Ch]
  bool sep; // [xsp+4Dh] [xbp+4Dh]
  bool matching_domains; // [xsp+4Eh] [xbp+4Eh]
  char is_ip; // [xsp+4Fh] [xbp+4Fh]
  int fields; // [xsp+50h] [xbp+50h]
  CURLofft offt; // [xsp+54h] [xbp+54h]
  char *tok_buf; // [xsp+58h] [xbp+58h] BYREF
  Cookie *clist; // [xsp+60h] [xbp+60h]
  Cookie *co; // [xsp+68h] [xbp+68h]
  Cookie *lastc; // [xsp+70h] [xbp+70h]
  Cookie *replace_co; // [xsp+78h] [xbp+78h]
  Cookie *replace_clist; // [xsp+80h] [xbp+80h]
  const char *ptr; // [xsp+88h] [xbp+88h]
  size_t vlen; // [xsp+90h] [xbp+90h]
  size_t nlen; // [xsp+98h] [xbp+98h]
  const char *valuep; // [xsp+A0h] [xbp+A0h]
  char *endslash; // [xsp+A8h] [xbp+A8h]
  char *ptr_0; // [xsp+B0h] [xbp+B0h]
  size_t cllen; // [xsp+B8h] [xbp+B8h]
  time_t now; // [xsp+C0h] [xbp+C0h]
  char *firstptr; // [xsp+C8h] [xbp+C8h]
  size_t linelength; // [xsp+D0h] [xbp+D0h]
  const char *namep; // [xsp+D8h] [xbp+D8h]
  const char *maxage; // [xsp+E0h] [xbp+E0h]
  char *queryp; // [xsp+E8h] [xbp+E8h]
  size_t pathlen; // [xsp+F0h] [xbp+F0h]
  size_t myhash; // [xsp+F8h] [xbp+F8h]
  const char *sep_0; // [xsp+100h] [xbp+100h]
  char date[128]; // [xsp+108h] [xbp+108h] BYREF

  lastc = 0LL;
  replace_co = 0LL;
  replace_clist = 0LL;
  now = time(0uLL);
  replace_old = 0;
  badcookie = 0;
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  co = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !co )
    return 0LL;
  if ( !httpheader )
  {
    tok_buf = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 0xA;
      co->httponly = 1;
    }
    if ( *lineptr == 35 )
      goto LABEL_7;
    ptr_0 = strchr(lineptr, 13);
    if ( ptr_0 )
      *ptr_0 = 0;
    ptr_0 = strchr(lineptr, 10);
    if ( ptr_0 )
      *ptr_0 = 0;
    firstptr = strtok_r((char *)lineptr, "\t", &tok_buf);
    ptr_0 = firstptr;
    for ( fields = 0; ; ++fields )
    {
      if ( !ptr_0 || badcookie )
      {
        if ( fields == 6 )
        {
          v19 = (char *)Curl_cstrdup(&unk_39D0);
          co->value = v19;
          if ( co->value )
            fields = 7;
          else
            badcookie = 1;
        }
        if ( !badcookie && fields != 7 )
          badcookie = 1;
        if ( !badcookie )
          goto LABEL_218;
        goto LABEL_274;
      }
      if ( fields == 6 )
      {
        v18 = (char *)Curl_cstrdup(ptr_0);
        co->value = v18;
        if ( !co->value )
          badcookie = 1;
      }
      else
      {
        if ( fields > 6 )
          goto LABEL_206;
        if ( fields == 5 )
        {
          v17 = (char *)Curl_cstrdup(ptr_0);
          co->name = v17;
          if ( co->name )
          {
            if ( (unsigned int)curl_strnequal("__Secure-", co->name, 9LL) )
            {
              co->prefix |= 1u;
            }
            else if ( (unsigned int)curl_strnequal("__Host-", co->name, 7LL) )
            {
              co->prefix |= 2u;
            }
          }
          else
          {
            badcookie = 1;
          }
        }
        else if ( fields == 4 )
        {
          if ( (unsigned int)curlx_strtoofft(ptr_0, 0LL, 10LL, &co->expires) )
            badcookie = 1;
        }
        else
        {
          if ( fields != 3 )
          {
            if ( fields != 2 )
            {
              if ( fields )
              {
                if ( fields == 1 )
                {
                  v12 = (unsigned int)curl_strequal(ptr_0, "TRUE") != 0;
                  co->tailmatch = v12;
                }
              }
              else
              {
                if ( *ptr_0 == 46 )
                  ++ptr_0;
                v11 = (char *)Curl_cstrdup(ptr_0);
                co->domain = v11;
                if ( !co->domain )
                  badcookie = 1;
              }
              goto LABEL_206;
            }
            if ( strcmp("TRUE", ptr_0) && strcmp("FALSE", ptr_0) )
            {
              v13 = (char *)Curl_cstrdup(ptr_0);
              co->path = v13;
              if ( co->path )
              {
                v14 = sanitize_cookie_path(co->path);
                co->spath = v14;
                if ( !co->spath )
                  badcookie = 1;
              }
              else
              {
                badcookie = 1;
              }
              goto LABEL_206;
            }
            v15 = (char *)Curl_cstrdup("/");
            co->path = v15;
            if ( !co->path )
              badcookie = 1;
            v16 = (char *)Curl_cstrdup("/");
            co->spath = v16;
            if ( !co->spath )
              badcookie = 1;
            fields = 3;
          }
          co->secure = 0;
          if ( (unsigned int)curl_strequal(ptr_0, "TRUE") )
          {
            if ( secure || c->running )
              co->secure = 1;
            else
              badcookie = 1;
          }
        }
      }
LABEL_206:
      ptr_0 = strtok_r(0uLL, "\t", &tok_buf);
    }
  }
  linelength = strlen(lineptr);
  if ( linelength > 0x1388 )
  {
LABEL_7:
    Curl_cfree(co);
    return 0LL;
  }
  for ( ptr = lineptr; ; ++ptr )
  {
    while ( *ptr && (*ptr == 32 || *ptr == 9) )
      ++ptr;
    nlen = strcspn(ptr, ";\t\r\n=");
    if ( !nlen )
      goto LABEL_133;
    done = 0;
    sep = 0;
    namep = ptr;
    ptr += nlen;
    while ( nlen && (namep[nlen - 1] == 32 || namep[nlen - 1] == 9) )
      --nlen;
    if ( *ptr == 61 )
    {
      vlen = strcspn(++ptr, ";\r\n");
      valuep = ptr;
      sep = 1;
      ptr += vlen;
      while ( vlen && (valuep[vlen - 1] == 32 || valuep[vlen - 1] == 9) )
        --vlen;
      while ( vlen && (*valuep == 32 || *valuep == 9) )
      {
        ++valuep;
        --vlen;
      }
      if ( memchr(valuep, 9, vlen) )
      {
        freecookie(co);
        if ( data )
        {
          if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
            Curl_infof(data, "cookie contains TAB, dropping");
        }
        return 0LL;
      }
    }
    else
    {
      valuep = 0LL;
      vlen = 0LL;
    }
    if ( nlen > 0xFFE || vlen > 0xFFE || nlen + vlen > 0x1000 )
    {
      freecookie(co);
      if ( data && (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", nlen, vlen);
      return 0LL;
    }
    if ( nlen > 6 && *namep == 95 && namep[1] == 95 )
    {
      if ( (unsigned int)curl_strnequal("__Secure-", namep, 9LL) )
      {
        co->prefix |= 1u;
      }
      else if ( (unsigned int)curl_strnequal("__Host-", namep, 7LL) )
      {
        co->prefix |= 2u;
      }
    }
    if ( !co->name )
      break;
    if ( !vlen )
    {
      done = 1;
      if ( nlen == 6 && (unsigned int)curl_strnequal("secure", namep, 6LL) )
      {
        if ( !secure && c->running )
        {
          badcookie = 1;
          goto LABEL_138;
        }
        co->secure = 1;
      }
      else if ( nlen == 8 && (unsigned int)curl_strnequal("httponly", namep, 8LL) )
      {
        co->httponly = 1;
      }
      else if ( sep )
      {
        done = 0;
      }
    }
LABEL_74:
    if ( !done )
    {
      if ( nlen == 4 && (unsigned int)curl_strnequal("path", namep, 4LL) )
      {
        strstore(&co->path, valuep, vlen);
        if ( !co->path )
        {
          badcookie = 1;
          goto LABEL_138;
        }
        Curl_cfree(co->spath);
        co->spath = sanitize_cookie_path(co->path);
        if ( !co->spath )
        {
          badcookie = 1;
          goto LABEL_138;
        }
      }
      else if ( nlen == 6 && (unsigned int)curl_strnequal("domain", namep, 6LL) && vlen )
      {
        if ( *valuep == 46 )
        {
          ++valuep;
          --vlen;
        }
        if ( bad_domain(valuep, vlen) )
          domain = ":";
        if ( domain )
          v9 = domain;
        else
          v9 = valuep;
        is_ip = Curl_host_is_ipnum(v9);
        if ( !domain
          || is_ip && !strncmp(valuep, domain, vlen) && vlen == strlen(domain)
          || is_ip != 1 && cookie_tailmatch(valuep, vlen, domain) )
        {
          strstore(&co->domain, valuep, vlen);
          if ( !co->domain )
          {
            badcookie = 1;
            goto LABEL_138;
          }
          if ( is_ip != 1 )
            co->tailmatch = 1;
        }
        else
        {
          badcookie = 1;
          if ( data && (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
            Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", valuep);
        }
      }
      else if ( nlen != 7 || !(unsigned int)curl_strnequal("version", namep, 7LL) )
      {
        if ( nlen == 7 && (unsigned int)curl_strnequal("max-age", namep, 7LL) )
        {
          maxage = valuep;
          if ( *valuep == 34 )
            v10 = maxage + 1;
          else
            v10 = maxage;
          offt = (unsigned int)curlx_strtoofft(v10, 0LL, 10LL, &co->expires);
          if ( offt == CURL_OFFT_INVAL )
          {
            co->expires = 1LL;
          }
          else if ( (unsigned int)offt <= CURL_OFFT_INVAL )
          {
            if ( offt )
            {
              co->expires = 0x7FFFFFFFFFFFFFFFLL;
            }
            else if ( co->expires )
            {
              if ( 0x7FFFFFFFFFFFFFFFLL - now >= co->expires )
                co->expires += now;
              else
                co->expires = 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              co->expires = 1LL;
            }
          }
        }
        else if ( nlen == 7 && (unsigned int)curl_strnequal("expires", namep, 7LL) && !co->expires && vlen <= 0x7F )
        {
          memcpy(date, valuep, vlen);
          date[vlen] = 0;
          co->expires = Curl_getdate_capped(date);
          if ( co->expires )
          {
            if ( co->expires < 0 )
              co->expires = 0LL;
          }
          else
          {
            co->expires = 1LL;
          }
        }
      }
    }
LABEL_133:
    while ( *ptr && (*ptr == 32 || *ptr == 9) )
      ++ptr;
    if ( *ptr != 59 )
      goto LABEL_138;
  }
  if ( !sep )
  {
    badcookie = 1;
    goto LABEL_138;
  }
  strstore(&co->name, namep, nlen);
  strstore(&co->value, valuep, vlen);
  done = 1;
  if ( !co->name || !co->value )
  {
    badcookie = 1;
    goto LABEL_138;
  }
  if ( !invalid_octets(co->value) && !invalid_octets(co->name) )
    goto LABEL_74;
  if ( data && (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
    Curl_infof(data, "invalid octets in name/value, cookie dropped");
  badcookie = 1;
LABEL_138:
  if ( !badcookie && !co->domain )
  {
    if ( domain )
    {
      co->domain = (char *)Curl_cstrdup(domain);
      if ( !co->domain )
        badcookie = 1;
    }
  }
  if ( !badcookie && !co->path && path )
  {
    queryp = strchr(path, 63);
    endslash = queryp ? (char *)Curl_memrchr(path, 47LL, queryp - path) : strrchr(path, 47);
    if ( endslash )
    {
      pathlen = endslash - path + 1;
      co->path = (char *)Curl_cmalloc(endslash - path + 2);
      if ( co->path )
      {
        memcpy(co->path, path, pathlen);
        co->path[pathlen] = 0;
        co->spath = sanitize_cookie_path(co->path);
        if ( !co->spath )
          badcookie = 1;
      }
      else
      {
        badcookie = 1;
      }
    }
  }
  if ( badcookie || !co->name )
  {
    freecookie(co);
    return 0LL;
  }
  ++data->req.setcookies;
LABEL_218:
  if ( ((co->prefix & 1) == 0 || co->secure)
    && ((co->prefix & 2) == 0 || co->secure && co->path && !strcmp(co->path, "/") && !co->tailmatch)
    && (c->running || !c->newsession || co->expires) )
  {
    co->livecookie = c->running;
    co->creationtime = ++c->lastct;
    if ( !noexpire )
      remove_expired(c);
    myhash = cookiehash(co->domain);
    for ( clist = c->cookies[myhash]; ; clist = clist->next )
    {
      if ( !clist )
      {
        if ( replace_co )
        {
          co = replace_co;
          clist = replace_clist;
          replace_co->next = replace_clist->next;
          co->creationtime = clist->creationtime;
          Curl_cfree(clist->name);
          Curl_cfree(clist->value);
          Curl_cfree(clist->domain);
          Curl_cfree(clist->path);
          Curl_cfree(clist->spath);
          v20 = clist;
          v21 = co;
          v22 = *(_OWORD *)&co->value;
          *(_OWORD *)&clist->next = *(_OWORD *)&co->next;
          *(_OWORD *)&v20->value = v22;
          v23 = *(_OWORD *)&v21->expires;
          *(_OWORD *)&v20->spath = *(_OWORD *)&v21->spath;
          *(_OWORD *)&v20->expires = v23;
          *(_QWORD *)&v20->prefix = *(_QWORD *)&v21->prefix;
          Curl_cfree(co);
          co = clist;
        }
        if ( c->running && data && (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
        {
          if ( replace_old )
            v24 = "Replaced";
          else
            v24 = "Added";
          Curl_infof(
            data,
            "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
            v24,
            co->name,
            co->value,
            co->domain,
            co->path,
            co->expires);
        }
        if ( !replace_old )
        {
          if ( lastc )
            lastc->next = co;
          else
            c->cookies[myhash] = co;
          ++c->numcookies;
        }
        if ( co->expires && co->expires < c->next_expiration )
          c->next_expiration = co->expires;
        return co;
      }
      if ( (unsigned int)curl_strequal(clist->name, co->name) )
      {
        matching_domains = 0;
        if ( clist->domain && co->domain )
        {
          if ( (unsigned int)curl_strequal(clist->domain, co->domain) )
            matching_domains = 1;
        }
        else if ( !clist->domain && !co->domain )
        {
          matching_domains = 1;
        }
        if ( matching_domains && clist->spath && co->spath && clist->secure && !co->secure && !secure )
        {
          sep_0 = strchr((const char *)clist->spath + 1, 47);
          cllen = sep_0 ? sep_0 - clist->spath : strlen(clist->spath);
          if ( (unsigned int)curl_strnequal(clist->spath, co->spath, cllen) )
            break;
        }
      }
      if ( !replace_co && (unsigned int)curl_strequal(clist->name, co->name) )
      {
        if ( clist->domain && co->domain )
        {
          if ( (unsigned int)curl_strequal(clist->domain, co->domain) && clist->tailmatch == co->tailmatch )
            replace_old = 1;
        }
        else if ( !clist->domain && !co->domain )
        {
          replace_old = 1;
        }
        if ( replace_old )
        {
          if ( clist->spath && co->spath && !(unsigned int)curl_strequal(clist->spath, co->spath) )
          {
            replace_old = 0;
          }
          else if ( (clist->spath == 0LL) != (co->spath == 0LL) )
          {
            replace_old = 0;
          }
        }
        if ( replace_old && !co->livecookie && clist->livecookie )
          goto LABEL_274;
        if ( replace_old )
        {
          replace_co = co;
          replace_clist = clist;
        }
      }
      lastc = clist;
    }
    if ( data && (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
      Curl_infof(data, "cookie '%s' for domain '%s' dropped, would overlay an existing cookie", co->name, co->domain);
  }
LABEL_274:
  freecookie(co);
  return 0LL;
}
