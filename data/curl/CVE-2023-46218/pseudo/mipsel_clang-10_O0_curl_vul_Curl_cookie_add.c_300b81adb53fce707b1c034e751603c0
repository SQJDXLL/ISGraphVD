Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v12; // $v0
  char v13; // $v0
  int v14; // $v0
  Cookie *v15; // $at
  Cookie *v16; // $at
  Cookie *v17; // $at
  int v18; // $v0
  int expires_high; // $v1
  int v20; // $a1
  _BOOL4 v21; // $v0
  Cookie *v22; // $at
  int v23; // $v0
  Cookie *v24; // $at
  Cookie *v25; // $at
  int v26; // $v0
  int v27; // $v0
  char *v28; // $v0
  int v29; // $v0
  int v30; // $v0
  const char *v31; // $v1
  int v32; // $at
  int next_expiration_high; // $v1
  int v34; // $a1
  _BOOL4 v35; // $at
  int expires; // $v0
  CookieInfo *v37; // $v1
  char v39; // [sp+9Ch] [+9Ch]
  bool v40; // [sp+B4h] [+B4h]
  bool v41; // [sp+B8h] [+B8h]
  unsigned int v42; // [sp+DCh] [+DCh]
  bool v43; // [sp+114h] [+114h]
  bool v44; // [sp+118h] [+118h]
  bool v45; // [sp+11Ch] [+11Ch]
  bool v46; // [sp+120h] [+120h]
  bool v47; // [sp+124h] [+124h]
  bool v48; // [sp+128h] [+128h]
  bool v49; // [sp+12Ch] [+12Ch]
  bool v50; // [sp+130h] [+130h]
  char *v51; // [sp+150h] [+150h]
  size_t v52; // [sp+154h] [+154h]
  char v53; // [sp+158h] [+158h]
  int v54; // [sp+160h] [+160h] BYREF
  char *v55; // [sp+164h] [+164h]
  char *v56; // [sp+168h] [+168h]
  size_t v57; // [sp+16Ch] [+16Ch]
  int v58; // [sp+170h] [+170h]
  int v59; // [sp+174h] [+174h]
  char v60[128]; // [sp+178h] [+178h] BYREF
  const char *v61; // [sp+1F8h] [+1F8h]
  int v62; // [sp+1FCh] [+1FCh]
  char v63; // [sp+200h] [+200h]
  const char *v64; // [sp+204h] [+204h]
  const char *v65; // [sp+208h] [+208h]
  char v66; // [sp+20Ch] [+20Ch]
  char v67; // [sp+210h] [+210h]
  unsigned int v68; // [sp+214h] [+214h]
  unsigned int v69; // [sp+218h] [+218h]
  size_t v70; // [sp+21Ch] [+21Ch]
  const char *i; // [sp+220h] [+220h]
  size_t v72; // [sp+224h] [+224h]
  char v73; // [sp+228h] [+228h]
  char v74; // [sp+22Ch] [+22Ch]
  time_t v75; // [sp+230h] [+230h]
  Cookie *v76; // [sp+234h] [+234h]
  Cookie *v77; // [sp+238h] [+238h]
  Cookie **p_next; // [sp+23Ch] [+23Ch]
  Cookie *v79; // [sp+240h] [+240h]
  Cookie *j; // [sp+244h] [+244h]
  bool v81; // [sp+248h] [+248h]
  bool v82; // [sp+24Ch] [+24Ch]
  bool v83; // [sp+250h] [+250h]
  CookieInfo *v84; // [sp+254h] [+254h]
  Curl_easy *v85; // [sp+258h] [+258h]

  v85 = data;
  v84 = c;
  v83 = httpheader;
  v82 = noexpire;
  v81 = secure;
  p_next = 0;
  v77 = 0;
  v76 = 0;
  v75 = time(0u);
  v74 = 0;
  v73 = 0;
  if ( v85->req.setcookies >= 0x32u )
    return 0;
  v79 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v79 )
    return 0;
  if ( !v83 )
  {
    v54 = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 10) )
    {
      lineptr += 10;
      v79->httponly = 1;
    }
    if ( *lineptr == 0x23 )
      goto LABEL_7;
    v56 = strchr(lineptr, 13);
    if ( v56 )
      *v56 = 0;
    v56 = strchr(lineptr, 10);
    if ( v56 )
      *v56 = 0;
    v55 = strtok_r((char *)lineptr, "\t", (char **)&v54);
    v56 = v55;
    v39 = 0;
    if ( v55 )
      v39 = ~v73;
    if ( (v39 & 1) != 0 )
      JUMPOUT(0x22C8);
    if ( (v73 & 1) == 0 )
      v73 = 1;
    if ( (v73 & 1) == 0 )
      goto LABEL_188;
LABEL_247:
    freecookie(v79);
    return 0;
  }
  v70 = strlen(lineptr);
  if ( v70 > 0x1388 )
  {
LABEL_7:
    Curl_cfree(v79);
    return 0;
  }
  for ( i = lineptr; ; ++i )
  {
    while ( 1 )
    {
      v50 = 0;
      if ( *i )
      {
        v49 = 1;
        if ( *i != 0x20 )
          v49 = *i == 9;
        v50 = v49;
      }
      if ( !v50 )
        break;
      ++i;
    }
    v68 = strcspn(i, ";\t\r\n=");
    if ( !v68 )
      goto LABEL_144;
    v67 = 0;
    v66 = 0;
    v65 = i;
    i += v68;
    while ( 1 )
    {
      v48 = 0;
      if ( v68 )
      {
        v47 = 1;
        if ( v65[v68 - 1] != 0x20 )
          v47 = v65[v68 - 1] == 9;
        v48 = v47;
      }
      if ( !v48 )
        break;
      --v68;
    }
    if ( *i != 0x3D )
    {
      v64 = 0;
      v69 = 0;
    }
    else
    {
      v69 = strcspn(++i, ";\r\n");
      v64 = i;
      v66 = 1;
      i += v69;
      while ( 1 )
      {
        v46 = 0;
        if ( v69 )
        {
          v45 = 1;
          if ( v64[v69 - 1] != 0x20 )
            v45 = v64[v69 - 1] == 9;
          v46 = v45;
        }
        if ( !v46 )
          break;
        --v69;
      }
      while ( 1 )
      {
        v44 = 0;
        if ( v69 )
        {
          v43 = 1;
          if ( *v64 != 0x20 )
            v43 = *v64 == 9;
          v44 = v43;
        }
        if ( !v44 )
          break;
        ++v64;
        --v69;
      }
      if ( (int)memchr(v64, 9, v69) )
      {
        freecookie(v79);
        if ( v85 && ((*(_DWORD *)((char *)&v85->set + 1335) >> 0x1C) & 1) != 0 )
          ((void (__fastcall *)(Curl_easy *, const char *))Curl_infof)(v85, "cookie contains TAB, dropping");
        return 0;
      }
    }
    if ( v68 >= 0xFFF || v69 >= 0xFFF || v68 + v69 > 0x1000 )
    {
      freecookie(v79);
      if ( v85 && ((*(_DWORD *)((char *)&v85->set + 1335) >> 0x1C) & 1) != 0 )
        ((void (__fastcall *)(Curl_easy *, const char *, unsigned int, unsigned int))Curl_infof)(
          v85,
          "oversized cookie dropped, name/val %zu + %zu bytes",
          v68,
          v69);
      return 0;
    }
    if ( v68 >= 7 && *v65 == 0x5F && v65[1] == 0x5F )
    {
      if ( ((int (__fastcall *)(const char *, const char *, int))curl_strnequal)("__Secure-", v65, 9) )
      {
        v79->prefix |= 1u;
      }
      else if ( ((int (__fastcall *)(const char *, const char *, int))curl_strnequal)("__Host-", v65, 7) )
      {
        v79->prefix |= 2u;
      }
    }
    if ( !v79->name )
      break;
    if ( !v69 )
    {
      v67 = 1;
      if ( v68 != 6 || !((int (__fastcall *)(const char *, const char *, int))curl_strnequal)("secure", v65, 6) )
      {
        if ( v68 != 8 || !((int (__fastcall *)(const char *, const char *, int))curl_strnequal)("httponly", v65, 8) )
        {
          if ( (v66 & 1) != 0 )
            v67 = 0;
        }
        else
        {
          v79->httponly = 1;
        }
      }
      else
      {
        if ( !v81 && v84->running )
        {
          v73 = 1;
          goto LABEL_152;
        }
        v79->secure = 1;
      }
    }
LABEL_83:
    if ( (v67 & 1) == 0 )
    {
      if ( v68 != 4 || !((int (__fastcall *)(const char *, const char *, int))curl_strnequal)("path", v65, 4) )
      {
        if ( v68 == 6 && ((int (__fastcall *)(const char *, const char *, int))curl_strnequal)("domain", v65, 6) && v69 )
        {
          if ( *v64 == 0x2E )
          {
            ++v64;
            --v69;
          }
          if ( (((int (__fastcall *)(const char *, unsigned int))bad_domain)(v64, v69) & 1) == 1 )
            domain = ":";
          if ( domain )
            v13 = ((int (__fastcall *)(const char *))Curl_host_is_ipnum)(domain);
          else
            v13 = ((int (__fastcall *)(const char *))Curl_host_is_ipnum)(v64);
          v63 = v13 & 1;
          if ( domain
            && ((v63 & 1) == 0 || strncmp(v64, domain, v69) || (v42 = v69, v42 ^ strlen(domain)))
            && ((v63 & 1) != 0
             || (((int (__fastcall *)(const char *, unsigned int, const char *))cookie_tailmatch)(v64, v69, domain) & 1) != 1) )
          {
            v73 = 1;
            if ( v85 && ((*(_DWORD *)((char *)&v85->set + 1335) >> 0x1C) & 1) != 0 )
              ((void (__fastcall *)(Curl_easy *, const char *, const char *))Curl_infof)(
                v85,
                "skipped cookie with bad tailmatch domain: %s",
                v64);
          }
          else
          {
            strstore(&v79->domain, v64, v69);
            if ( !v79->domain )
            {
              v73 = 1;
              goto LABEL_152;
            }
            if ( (v63 & 1) == 0 )
              v79->tailmatch = 1;
          }
        }
        else if ( v68 != 7 || !((int (__fastcall *)(const char *, const char *, int))curl_strnequal)("version", v65, 7) )
        {
          if ( v68 != 7 || !((int (__fastcall *)(const char *, const char *, int))curl_strnequal)("max-age", v65, 7) )
          {
            if ( v68 == 7
              && ((int (__fastcall *)(const char *, const char *, int))curl_strnequal)("expires", v65, 7)
              && !v79->expires
              && v69 < 0x80 )
            {
              memcpy(v60, v64, v69);
              v60[v69] = 0;
              v23 = ((int (__fastcall *)(char *))Curl_getdate_capped)(v60);
              v79->expires = v23;
              if ( v79->expires )
              {
                if ( v79->expires < 0 )
                {
                  v25 = v79;
                  HIDWORD(v79->expires) = 0;
                  LODWORD(v25->expires) = 0;
                }
              }
              else
              {
                v24 = v79;
                LODWORD(v79->expires) = 1;
                HIDWORD(v24->expires) = 0;
              }
            }
          }
          else
          {
            v61 = v64;
            if ( *v64 != 0x22 )
              v14 = ((int (__fastcall *)(const char *, _DWORD, int, curl_off_t *))curlx_strtoofft)(
                      v61,
                      0,
                      10,
                      &v79->expires);
            else
              v14 = ((int (__fastcall *)(const char *, _DWORD, int, curl_off_t *))curlx_strtoofft)(
                      v61 + 1,
                      0,
                      10,
                      &v79->expires);
            v62 = v14;
            if ( v14 )
            {
              if ( v14 == 1 )
              {
                v15 = v79;
                LODWORD(v79->expires) = -1;
                HIDWORD(v15->expires) = 0x7FFFFFFF;
              }
              else if ( v14 == 2 )
              {
                v16 = v79;
                LODWORD(v79->expires) = 1;
                HIDWORD(v16->expires) = 0;
              }
            }
            else if ( v79->expires )
            {
              v18 = 0x7FFFFFFF - (v75 >> 0x1F);
              expires_high = HIDWORD(v79->expires);
              v20 = v18 ^ expires_high;
              v21 = v18 >= expires_high;
              if ( !v20 )
                v21 = (unsigned int)~v75 >= LODWORD(v79->expires);
              if ( v21 )
              {
                v79->expires += v75;
              }
              else
              {
                v22 = v79;
                LODWORD(v79->expires) = -1;
                HIDWORD(v22->expires) = 0x7FFFFFFF;
              }
            }
            else
            {
              v17 = v79;
              LODWORD(v79->expires) = 1;
              HIDWORD(v17->expires) = 0;
            }
          }
        }
      }
      else
      {
        strstore(&v79->path, v64, v69);
        if ( !v79->path )
        {
          v73 = 1;
          goto LABEL_152;
        }
        Curl_cfree(v79->spath);
        v12 = sanitize_cookie_path(v79->path);
        v79->spath = v12;
        if ( !v79->spath )
        {
          v73 = 1;
          goto LABEL_152;
        }
      }
    }
    while ( 1 )
    {
LABEL_144:
      v41 = 0;
      if ( *i )
      {
        v40 = 1;
        if ( *i != 0x20 )
          v40 = *i == 9;
        v41 = v40;
      }
      if ( !v41 )
        break;
      ++i;
    }
    if ( *i != 0x3B )
      goto LABEL_152;
  }
  if ( (v66 & 1) == 0 )
  {
    v73 = 1;
    goto LABEL_152;
  }
  strstore(&v79->name, v65, v68);
  strstore(&v79->value, v64, v69);
  v67 = 1;
  if ( !v79->name || !v79->value )
  {
    v73 = 1;
    goto LABEL_152;
  }
  if ( !invalid_octets(v79->value) && !invalid_octets(v79->name) )
    goto LABEL_83;
  if ( v85 && ((*(_DWORD *)((char *)&v85->set + 1335) >> 0x1C) & 1) != 0 )
    ((void (__fastcall *)(Curl_easy *, const char *))Curl_infof)(v85, "invalid octets in name/value, cookie dropped");
  v73 = 1;
LABEL_152:
  if ( (v73 & 1) == 0 && !v79->domain )
  {
    if ( domain )
    {
      v26 = Curl_cstrdup(domain);
      v79->domain = (char *)v26;
      if ( !v79->domain )
        v73 = 1;
    }
  }
  if ( (v73 & 1) == 0 && !v79->path && path )
  {
    v59 = (int)strchr(path, 63);
    v58 = v59 ? ((int (__fastcall *)(const char *, int, int))Curl_memrchr)(path, 47, v59 - (_DWORD)path) : (int)strrchr(path, 47);
    if ( v58 )
    {
      v57 = v58 - (_DWORD)path + 1;
      v27 = Curl_cmalloc(v58 - (_DWORD)path + 2);
      v79->path = (char *)v27;
      if ( v79->path )
      {
        memcpy(v79->path, path, v57);
        v79->path[v57] = 0;
        v28 = sanitize_cookie_path(v79->path);
        v79->spath = v28;
        if ( !v79->spath )
          v73 = 1;
      }
      else
      {
        v73 = 1;
      }
    }
  }
  if ( (v73 & 1) != 0 || !v79->name )
  {
    freecookie(v79);
    return 0;
  }
  ++v85->req.setcookies;
LABEL_188:
  if ( (v79->prefix & 1) != 0 && !v79->secure
    || (v79->prefix & 2) != 0 && (!v79->secure || !v79->path || strcmp(v79->path, "/") || v79->tailmatch)
    || !v84->running && v84->newsession && !v79->expires )
  {
    goto LABEL_247;
  }
  v79->livecookie = v84->running;
  v29 = v84->lastct + 1;
  v84->lastct = v29;
  v79->creationtime = v29;
  if ( !v82 )
    remove_expired(v84);
  v72 = cookiehash(v79->domain);
  for ( j = v84->cookies[v72]; j; j = j->next )
  {
    if ( ((int (__fastcall *)(char *, char *))curl_strequal)(j->name, v79->name) )
    {
      v53 = 0;
      if ( j->domain && v79->domain )
      {
        if ( ((int (__fastcall *)(char *, char *))curl_strequal)(j->domain, v79->domain) )
          v53 = 1;
      }
      else if ( !j->domain && !v79->domain )
      {
        v53 = 1;
      }
      if ( (v53 & 1) != 0 && j->spath && v79->spath && j->secure && !v79->secure && !v81 )
      {
        v51 = strchr((const char *)j->spath + 1, 47);
        if ( v51 )
        {
          v30 = ((int (__fastcall *)(char *, char *, int))curl_strnequal)(j->spath, v79->spath, v51 - j->spath);
        }
        else
        {
          v52 = strlen(j->spath);
          v30 = ((int (__fastcall *)(char *, char *, size_t))curl_strnequal)(j->spath, v79->spath, v52);
        }
        if ( v30 )
        {
          if ( v85 && ((*(_DWORD *)((char *)&v85->set + 1335) >> 0x1C) & 1) != 0 )
            ((void (__fastcall *)(Curl_easy *, const char *, char *, char *))Curl_infof)(
              v85,
              "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
              v79->name,
              v79->domain);
          goto LABEL_247;
        }
      }
    }
    if ( !v77 && ((int (__fastcall *)(char *, char *))curl_strequal)(j->name, v79->name) )
    {
      if ( j->domain && v79->domain )
      {
        if ( ((int (__fastcall *)(char *, char *))curl_strequal)(j->domain, v79->domain)
          && j->tailmatch == v79->tailmatch )
        {
          v74 = 1;
        }
      }
      else if ( !j->domain && !v79->domain )
      {
        v74 = 1;
      }
      if ( (v74 & 1) != 0 )
      {
        if ( j->spath && v79->spath && !((int (__fastcall *)(char *, char *))curl_strequal)(j->spath, v79->spath) )
        {
          v74 = 0;
        }
        else if ( (j->spath == 0) != (v79->spath == 0) )
        {
          v74 = 0;
        }
      }
      if ( (v74 & 1) != 0 && !v79->livecookie && j->livecookie )
        goto LABEL_247;
      if ( (v74 & 1) != 0 )
      {
        v77 = v79;
        v76 = j;
      }
    }
    p_next = &j->next;
  }
  if ( v77 )
  {
    v79 = v77;
    j = v76;
    v77->next = v76->next;
    v79->creationtime = j->creationtime;
    Curl_cfree(j->name);
    Curl_cfree(j->value);
    Curl_cfree(j->domain);
    Curl_cfree(j->path);
    Curl_cfree(j->spath);
    memcpy(j, v79, sizeof(Cookie));
    Curl_cfree(v79);
    v79 = j;
  }
  if ( v84->running && v85 && ((*(_DWORD *)((char *)&v85->set + 1335) >> 0x1C) & 1) != 0 )
  {
    v31 = "Added";
    if ( (v74 & 1) != 0 )
      v31 = "Replaced";
    ((void (__fastcall *)(Curl_easy *, const char *, const char *, char *))Curl_infof)(
      v85,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
      v31,
      v79->name);
  }
  if ( (v74 & 1) == 0 )
  {
    if ( p_next )
      *p_next = v79;
    else
      v84->cookies[v72] = v79;
    ++v84->numcookies;
  }
  if ( v79->expires )
  {
    v32 = HIDWORD(v79->expires);
    next_expiration_high = HIDWORD(v84->next_expiration);
    v34 = v32 ^ next_expiration_high;
    v35 = v32 >= next_expiration_high;
    if ( !v34 )
      v35 = LODWORD(v79->expires) >= LODWORD(v84->next_expiration);
    if ( !v35 )
    {
      expires = v79->expires;
      v37 = v84;
      HIDWORD(v84->next_expiration) = HIDWORD(v79->expires);
      LODWORD(v37->next_expiration) = expires;
    }
  }
  return v79;
}
