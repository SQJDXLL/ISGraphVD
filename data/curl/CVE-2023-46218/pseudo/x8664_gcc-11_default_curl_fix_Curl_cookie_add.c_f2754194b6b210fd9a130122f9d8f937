Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  Cookie *v10; // rbp
  size_t v11; // r15
  char v12; // r12
  const char *v13; // rcx
  size_t v14; // rsi
  _BYTE *v15; // rbx
  size_t v16; // r13
  _BOOL8 v17; // rax
  bool v18; // r9
  __int64 v19; // rax
  char *v20; // rax
  char *v21; // rbx
  signed __int64 v22; // rbx
  char *v23; // rax
  char *v24; // rax
  unsigned __int8 prefix; // al
  char *v26; // rax
  bool running; // al
  size_t v28; // r14
  Cookie *v29; // r15
  char livecookie; // bl
  __m128i *v31; // r12
  char *v32; // rdi
  char *v33; // rsi
  char *spath; // r8
  char *v35; // rdi
  char *v36; // rsi
  char *v37; // rdi
  char *v38; // rsi
  __int64 v39; // rax
  char *v40; // rax
  char *v41; // r8
  int v42; // eax
  const char *v43; // r8
  __int64 (__fastcall *v44)(const char *); // rdx
  __int64 v45; // rax
  __int64 v46; // rax
  bool v47; // bl
  char *v49; // rax
  char *v50; // rax
  int v51; // ebx
  bool v52; // dl
  char *v53; // rax
  char *v54; // rax
  __int64 v55; // rax
  __int64 v56; // rax
  bool v57; // bl
  char *v58; // rax
  bool v59; // r12
  _BYTE *v60; // rax
  __int64 v61; // rax
  char is_ipnum; // r12
  __int64 v63; // rax
  __int64 v64; // rax
  char *v65; // rax
  int v66; // eax
  __int64 v67; // rax
  char *value; // rdi
  const char *v69; // rax
  const char *name; // r13
  int v71; // eax
  curl_off_t expires; // rax
  void *v73; // rax
  __int64 v74; // rax
  __int64 v75; // rdx
  bool v76; // zf
  __int64 v77; // rax
  int v78; // eax
  const char *v79; // rax
  char *v80; // rax
  char *v81; // rdi
  const char *v82; // rdx
  const char *v83; // rax
  const char *v84; // r9
  const char *v85; // r8
  const char *v86; // rcx
  curl_off_t v87; // rax
  size_t v88; // rcx
  Cookie *v89; // r13
  char *v90; // rax
  const char *v91; // r8
  const char *v92; // r9
  char *v93; // rdx
  __int64 v94; // rax
  const char *v95; // rdi
  size_t v96; // rax
  int v97; // eax
  __int64 v98; // rax
  const char *ptr; // [rsp+8h] [rbp-120h]
  int ptre; // [rsp+8h] [rbp-120h]
  const char *ptra; // [rsp+8h] [rbp-120h]
  const char *ptrf; // [rsp+8h] [rbp-120h]
  const char *ptrb; // [rsp+8h] [rbp-120h]
  const char *ptrc; // [rsp+8h] [rbp-120h]
  int ptrg; // [rsp+8h] [rbp-120h]
  const char *ptrh; // [rsp+8h] [rbp-120h]
  const char *ptrd; // [rsp+8h] [rbp-120h]
  const char *ptri; // [rsp+8h] [rbp-120h]
  const char *sep; // [rsp+10h] [rbp-118h]
  __int64 sepa; // [rsp+10h] [rbp-118h]
  bool sepb; // [rsp+10h] [rbp-118h]
  bool sepc; // [rsp+10h] [rbp-118h]
  __int64 (__fastcall *sepd)(const char *); // [rsp+10h] [rbp-118h]
  char *sepe; // [rsp+10h] [rbp-118h]
  const char *sepf; // [rsp+10h] [rbp-118h]
  time_t now; // [rsp+30h] [rbp-F8h]
  bool badcookie; // [rsp+47h] [rbp-E1h]
  char *tok_buf; // [rsp+58h] [rbp-D0h] BYREF
  char date[128]; // [rsp+60h] [rbp-C8h] BYREF
  unsigned __int64 v125; // [rsp+E8h] [rbp-40h]

  v125 = __readfsqword(0x28u);
  now = time(0LL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  v10 = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !v10 )
    return 0LL;
  if ( httpheader )
  {
    badcookie = 0;
    if ( strlen(lineptr) > 0x1388 )
    {
      v89 = 0LL;
      Curl_cfree(v10);
      return v89;
    }
    while ( 1 )
    {
      v12 = *lineptr;
      if ( !*lineptr )
        break;
      if ( v12 == 32 || v12 == 9 )
        goto LABEL_10;
      v11 = strcspn(lineptr, ";\t\r\n=");
      if ( v11 )
        goto LABEL_13;
LABEL_9:
      if ( v12 != 59 )
        goto LABEL_37;
LABEL_10:
      ++lineptr;
    }
    v11 = strcspn(lineptr, ";\t\r\n=");
    if ( !v11 )
      goto LABEL_37;
LABEL_13:
    v13 = &lineptr[v11];
    do
    {
      v14 = v11--;
      if ( lineptr[v11] != 9 && lineptr[v11] != 32 )
      {
        v18 = 0;
        if ( *v13 != 61 )
        {
          ptr = v13;
          LOBYTE(v17) = 0;
          v11 = v14;
          v15 = 0LL;
          v16 = 0LL;
          goto LABEL_22;
        }
        v11 = v14;
        goto LABEL_17;
      }
    }
    while ( v11 );
    if ( *v13 != 61 )
    {
      if ( !v10->name )
        goto LABEL_100;
      ptr = v13;
      goto LABEL_32;
    }
LABEL_17:
    v15 = v13 + 1;
    sep = v13;
    v16 = strcspn(v13 + 1, ";\r\n");
    ptr = &v15[v16];
    while ( v16 )
    {
      LOBYTE(v17) = sep[v16] == 9 || sep[v16] == 32;
      if ( !v17 )
      {
        while ( 1 )
        {
          v52 = *v15 == 9 || *v15 == 32;
          if ( !v52 )
            break;
          ++v15;
          if ( !--v16 )
          {
            v18 = v52;
            goto LABEL_22;
          }
        }
        if ( !memchr(v15, 9, v16) )
        {
          v18 = httpheader;
          v17 = v16 > 0xFFE;
          goto LABEL_22;
        }
        freecookie(v10);
        if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
        {
          v89 = 0LL;
          Curl_infof(data, "cookie contains TAB, dropping");
          return v89;
        }
        return 0LL;
      }
      --v16;
    }
    v18 = httpheader;
    LOBYTE(v17) = 0;
LABEL_22:
    if ( v11 > 0xFFE || v17 || v16 + v11 > 0x1000 )
    {
      freecookie(v10);
      if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
      {
        v88 = v16;
        v89 = 0LL;
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v11, v88);
        return v89;
      }
      return 0LL;
    }
    if ( v12 == 95 && v11 > 6 && lineptr[1] == 95 )
    {
      sepc = v18;
      v66 = curl_strnequal("__Secure-", lineptr, 9LL);
      v18 = sepc;
      if ( v66 )
      {
        v10->prefix |= 1u;
      }
      else
      {
        v97 = curl_strnequal("__Host-", lineptr, 7LL);
        v18 = sepc;
        if ( v97 )
          v10->prefix |= 2u;
      }
    }
    if ( !v10->name )
    {
      if ( !v18 )
        goto LABEL_100;
      Curl_cfree(0LL);
      v67 = Curl_strndup(lineptr, v11);
      value = v10->value;
      v10->name = (char *)v67;
      Curl_cfree(value);
      v69 = (const char *)Curl_strndup(v15, v16);
      name = v10->name;
      v10->value = (char *)v69;
      if ( !v69 || !name )
        goto LABEL_100;
      if ( v69[strcspn(v69, &badoctets_0)] || name[strcspn(name, &badoctets_0)] )
      {
        if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
        goto LABEL_100;
      }
      goto LABEL_32;
    }
    if ( v16 )
    {
      if ( v11 != 4 )
        goto LABEL_30;
    }
    else
    {
      if ( v11 == 6 )
      {
        sepb = v18;
        if ( (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
        {
          if ( !secure && c->running )
            goto LABEL_100;
          v10->secure = 1;
          lineptr = ptr;
          goto LABEL_33;
        }
        if ( !sepb )
          goto LABEL_32;
LABEL_135:
        v59 = (unsigned int)curl_strnequal("domain", lineptr, 6LL) != 0 && v16 != 0;
        if ( !v59 )
          goto LABEL_32;
        if ( *v15 == 46 )
        {
          ++v15;
          --v16;
        }
        if ( v16 == 9 && (unsigned int)curl_strnequal(v15, "localhost", 9LL)
          || (v60 = memchr(v15, 46, v16)) != 0LL && v16 - (v60 - v15) > 1 )
        {
          if ( !domain )
          {
            is_ipnum = Curl_host_is_ipnum(v15);
            Curl_cfree(v10->domain);
            v63 = Curl_strndup(v15, v16);
            v10->domain = (char *)v63;
            if ( !v63 )
              goto LABEL_100;
            if ( is_ipnum )
              goto LABEL_32;
            goto LABEL_149;
          }
        }
        else
        {
          domain = ":";
        }
        if ( (unsigned __int8)Curl_host_is_ipnum(domain) )
        {
          if ( strncmp(v15, domain, v16) || strlen(domain) != v16 )
          {
LABEL_145:
            lineptr = ptr;
            badcookie = v59;
            if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
              Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v15);
            goto LABEL_33;
          }
          Curl_cfree(v10->domain);
          v94 = Curl_strndup(v15, v16);
          v10->domain = (char *)v94;
          if ( !v94 )
            goto LABEL_100;
          goto LABEL_32;
        }
        if ( !cookie_tailmatch(v15, v16, domain) )
          goto LABEL_145;
        Curl_cfree(v10->domain);
        v61 = Curl_strndup(v15, v16);
        v10->domain = (char *)v61;
        if ( !v61 )
          goto LABEL_100;
LABEL_149:
        v10->tailmatch = 1;
        lineptr = ptr;
        goto LABEL_33;
      }
      if ( v11 == 8 )
      {
        if ( (unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
        {
          v10->httponly = 1;
          lineptr = ptr;
          goto LABEL_33;
        }
        goto LABEL_32;
      }
      if ( !v18 )
      {
LABEL_32:
        lineptr = ptr;
LABEL_33:
        v12 = *ptr;
        if ( !*ptr )
        {
LABEL_37:
          if ( !badcookie )
          {
            if ( v10->domain || !domain || (v19 = Curl_cstrdup(domain), (v10->domain = (char *)v19) != 0LL) )
            {
              if ( v10->path || !path )
                goto LABEL_266;
              v20 = strchr(path, 63);
              v21 = v20 ? (char *)Curl_memrchr(path, 47LL, v20 - path) : strrchr(path, 47);
              if ( !v21
                || (v22 = v21 - path, v23 = (char *)Curl_cmalloc(v22 + 2), (v10->path = v23) != 0LL)
                && (memcpy(v23, path, v22 + 1),
                    v10->path[v22 + 1] = 0,
                    v24 = sanitize_cookie_path(v10->path),
                    (v10->spath = v24) != 0LL) )
              {
LABEL_266:
                if ( v10->name )
                {
                  ++data->req.setcookies;
                  goto LABEL_50;
                }
              }
            }
          }
          goto LABEL_100;
        }
        while ( v12 == 32 || v12 == 9 )
        {
          v12 = *++lineptr;
          if ( !v12 )
            goto LABEL_37;
        }
        goto LABEL_9;
      }
      if ( v11 != 4 )
      {
LABEL_30:
        if ( v11 != 6 )
        {
          if ( v11 == 7 && !(unsigned int)curl_strnequal("version", lineptr, 7LL) )
          {
            if ( (unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
            {
              v71 = curlx_strtoofft(&v15[*v15 == 34], 0LL, 10LL, &v10->expires);
              switch ( v71 )
              {
                case 1:
                  goto LABEL_246;
                case 2:
LABEL_242:
                  v10->expires = 1LL;
                  lineptr = ptr;
                  goto LABEL_33;
                case 0:
                  expires = v10->expires;
                  if ( expires )
                  {
                    if ( expires <= 0x7FFFFFFFFFFFFFFFLL - now )
                    {
                      lineptr = ptr;
                      v10->expires = now + expires;
                      goto LABEL_33;
                    }
LABEL_246:
                    lineptr = ptr;
                    v10->expires = 0x7FFFFFFFFFFFFFFFLL;
                    goto LABEL_33;
                  }
                  goto LABEL_242;
              }
            }
            else if ( (unsigned int)curl_strnequal("expires", lineptr, 7LL) && !v10->expires && v16 <= 0x7F )
            {
              v73 = memcpy(date, v15, v16);
              date[v16] = 0;
              v74 = Curl_getdate_capped(v73);
              v75 = 0LL;
              v76 = v74 == 0;
              if ( v74 >= 0 )
                v75 = v74;
              v77 = 1LL;
              if ( !v76 )
                v77 = v75;
              v10->expires = v77;
            }
          }
          goto LABEL_32;
        }
        goto LABEL_135;
      }
    }
    if ( (unsigned int)curl_strnequal("path", lineptr, 4LL) )
    {
      Curl_cfree(v10->path);
      v64 = Curl_strndup(v15, v16);
      v10->path = (char *)v64;
      if ( !v64 )
        goto LABEL_100;
      Curl_cfree(v10->spath);
      v65 = sanitize_cookie_path(v10->path);
      v10->spath = v65;
      if ( !v65 )
        goto LABEL_100;
    }
    goto LABEL_32;
  }
  tok_buf = 0LL;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
  {
    v10->httponly = 1;
    lineptr += 10;
  }
  if ( *lineptr == 35 )
  {
    Curl_cfree(v10);
    return 0LL;
  }
  v49 = strchr(lineptr, 13);
  if ( v49 )
    *v49 = 0;
  v50 = strchr(lineptr, 10);
  if ( v50 )
    *v50 = 0;
  v51 = 0;
  v41 = strtok_r((char *)lineptr, "\t", &tok_buf);
  if ( !v41 )
    goto LABEL_100;
  while ( 2 )
  {
    switch ( v51 )
    {
      case 0:
        v39 = Curl_cstrdup(&v41[*v41 == 46]);
        v10->domain = (char *)v39;
        ptrf = (const char *)v39;
        v40 = strtok_r(0LL, "\t", &tok_buf);
        v41 = v40;
        if ( !ptrf || !v40 )
          goto LABEL_100;
        goto LABEL_92;
      case 1:
LABEL_92:
        v10->tailmatch = (unsigned int)curl_strequal(v41, "TRUE") != 0;
        v41 = strtok_r(0LL, "\t", &tok_buf);
        if ( v41 )
          goto LABEL_93;
        goto LABEL_100;
      case 2:
LABEL_93:
        ptrb = v41;
        v42 = strcmp("TRUE", v41);
        v43 = ptrb;
        v44 = (__int64 (__fastcall *)(const char *))Curl_cstrdup;
        if ( v42
          && (sepd = (__int64 (__fastcall *)(const char *))Curl_cstrdup,
              v78 = strcmp("FALSE", ptrb),
              v43 = ptrb,
              v44 = sepd,
              v78) )
        {
          v79 = (const char *)sepd(ptrb);
          v10->path = (char *)v79;
          if ( !v79 )
            goto LABEL_99;
          v80 = sanitize_cookie_path(v79);
          v10->spath = v80;
          ptrd = v80;
          v41 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v41 || !ptrd )
            goto LABEL_100;
LABEL_116:
          v47 = httpheader;
        }
        else
        {
          ptrc = v43;
          v45 = v44("/");
          v10->path = (char *)v45;
          sepa = v45;
          v46 = Curl_cstrdup("/");
          v41 = (char *)ptrc;
          v10->spath = (char *)v46;
          if ( !v46 )
          {
            v10->secure = 0;
            if ( !(unsigned int)curl_strequal(ptrc, "TRUE") )
              goto LABEL_99;
            v47 = 1;
            goto LABEL_97;
          }
          v47 = sepa == 0;
        }
        v10->secure = 0;
        if ( !(unsigned int)curl_strequal(v41, "TRUE") )
          goto LABEL_118;
LABEL_97:
        if ( !secure && !c->running )
        {
LABEL_99:
          strtok_r(0LL, "\t", &tok_buf);
          goto LABEL_100;
        }
        v10->secure = 1;
LABEL_118:
        v53 = strtok_r(0LL, "\t", &tok_buf);
        v41 = v53;
        if ( v47 || !v53 )
          goto LABEL_100;
LABEL_120:
        ptrg = curlx_strtoofft(v41, 0LL, 10LL, &v10->expires);
        v54 = strtok_r(0LL, "\t", &tok_buf);
        v41 = v54;
        if ( ptrg || !v54 )
        {
LABEL_100:
          freecookie(v10);
          return 0LL;
        }
LABEL_122:
        v55 = Curl_cstrdup(v41);
        v10->name = (char *)v55;
        if ( !v55 )
        {
          strtok_r(0LL, "\t", &tok_buf);
          v10->value = (char *)Curl_cstrdup(&LC0);
          freecookie(v10);
          return 0LL;
        }
        if ( (unsigned int)curl_strnequal("__Secure-", v55, 9LL) )
        {
          v10->prefix |= 1u;
        }
        else if ( (unsigned int)curl_strnequal("__Host-", v10->name, 7LL) )
        {
          v10->prefix |= 2u;
        }
        v41 = strtok_r(0LL, "\t", &tok_buf);
        if ( v41 )
        {
LABEL_126:
          v56 = Curl_cstrdup(v41);
          v10->value = (char *)v56;
          v57 = v56 == 0;
          ptrh = (const char *)v56;
          v58 = strtok_r(0LL, "\t", &tok_buf);
          if ( !ptrh || !v58 )
          {
            if ( v57 )
              goto LABEL_100;
            prefix = v10->prefix;
            if ( (prefix & 1) == 0 )
              goto LABEL_203;
LABEL_51:
            if ( !v10->secure )
              goto LABEL_100;
            if ( (prefix & 2) != 0 )
            {
LABEL_53:
              v26 = v10->path;
              if ( !v26 || *v26 != 47 || v26[1] || v10->tailmatch )
                goto LABEL_100;
            }
            goto LABEL_57;
          }
          v51 = 7;
LABEL_129:
          ++v51;
          v41 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v41 )
            goto LABEL_100;
          continue;
        }
        v98 = Curl_cstrdup(&LC0);
        v10->value = (char *)v98;
        if ( !v98 )
          goto LABEL_100;
LABEL_50:
        prefix = v10->prefix;
        if ( (prefix & 1) != 0 )
          goto LABEL_51;
LABEL_203:
        if ( (prefix & 2) != 0 )
        {
          if ( !v10->secure )
            goto LABEL_100;
          goto LABEL_53;
        }
LABEL_57:
        running = c->running;
        if ( !running && c->newsession && !v10->expires )
          goto LABEL_100;
        v10->livecookie = running;
        ptre = c->lastct;
        c->lastct = ptre + 1;
        v10->creationtime = ptre + 1;
        if ( !noexpire )
          remove_expired(c);
        v28 = cookiehash(v10->domain);
        v29 = c->cookies[v28];
        if ( !v29 )
        {
          if ( c->running && (*(&data->set.connect_only + 4) & 0x20) != 0 )
          {
            v83 = v10->path;
            v84 = v10->domain;
            v89 = v10;
            livecookie = 0;
            v85 = v10->value;
            v86 = v10->name;
            v82 = "Added";
            goto LABEL_218;
          }
          v89 = v10;
LABEL_220:
          c->cookies[v28] = v89;
          goto LABEL_223;
        }
        livecookie = 0;
        v89 = 0LL;
        v31 = 0LL;
        while ( 2 )
        {
          if ( (unsigned int)curl_strequal(v29->name, v10->name) )
          {
            v32 = v29->domain;
            v33 = v10->domain;
            if ( v32 )
            {
              if ( v33 && (unsigned int)curl_strequal(v32, v33) )
              {
LABEL_70:
                spath = v29->spath;
                if ( spath )
                {
                  ptra = v10->spath;
                  if ( ptra )
                  {
                    if ( v29->secure && !v10->secure && !secure )
                    {
                      sepe = v29->spath;
                      v90 = strchr(spath + 1, 47);
                      v91 = sepe;
                      v92 = ptra;
                      if ( v90 )
                      {
                        v93 = (char *)(v90 - sepe);
                      }
                      else
                      {
                        v95 = sepe;
                        sepf = ptra;
                        ptri = v91;
                        v96 = strlen(v95);
                        v92 = sepf;
                        v91 = ptri;
                        v93 = (char *)v96;
                      }
                      if ( (unsigned int)curl_strnequal(v91, v92, v93) )
                      {
                        if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
                          Curl_infof(
                            data,
                            "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                            v10->name,
                            v10->domain);
                        goto LABEL_100;
                      }
                    }
                  }
                }
              }
            }
            else if ( !v33 )
            {
              goto LABEL_70;
            }
          }
          if ( v31 || !(unsigned int)curl_strequal(v29->name, v10->name) )
            goto LABEL_64;
          v35 = v29->domain;
          v36 = v10->domain;
          if ( !v35 )
          {
            if ( v36 )
              goto LABEL_81;
LABEL_82:
            v37 = v29->spath;
            v38 = v10->spath;
            if ( v37 )
            {
              if ( !v38 )
              {
                v31 = 0LL;
                livecookie = 0;
                goto LABEL_64;
              }
              if ( !(unsigned int)curl_strequal(v37, v38) )
                goto LABEL_227;
              v37 = v29->spath;
            }
            if ( (v37 == 0LL) == (v10->spath == 0LL) )
            {
              livecookie = v10->livecookie;
              if ( livecookie )
              {
                v89 = v29;
                v31 = (__m128i *)v10;
              }
              else
              {
                if ( v29->livecookie )
                  goto LABEL_100;
                v89 = v29;
                v31 = (__m128i *)v10;
                livecookie = 1;
              }
              goto LABEL_64;
            }
LABEL_227:
            livecookie = 0;
            goto LABEL_64;
          }
          if ( v36 && (unsigned int)curl_strequal(v35, v36) && v29->tailmatch == v10->tailmatch )
            goto LABEL_82;
LABEL_81:
          if ( livecookie )
            goto LABEL_82;
LABEL_64:
          if ( v29->next )
          {
            v29 = v29->next;
            continue;
          }
          break;
        }
        if ( v31 )
        {
          v81 = v89->name;
          v31->m128i_i64[0] = (__int64)v89->next;
          v31[3].m128i_i32[3] = v89->creationtime;
          Curl_cfree(v81);
          Curl_cfree(v89->value);
          Curl_cfree(v89->domain);
          Curl_cfree(v89->path);
          Curl_cfree(v89->spath);
          *(__m128i *)&v89->next = _mm_loadu_si128(v31);
          *(__m128i *)&v89->value = _mm_loadu_si128(v31 + 1);
          *(__m128i *)&v89->spath = _mm_loadu_si128(v31 + 2);
          *(__m128i *)&v89->expires = _mm_loadu_si128(v31 + 3);
          *(_QWORD *)&v89->prefix = v31[4].m128i_i64[0];
          Curl_cfree(v31);
        }
        else
        {
          v89 = v10;
        }
        if ( !c->running || (*(&data->set.connect_only + 4) & 0x20) == 0 )
        {
          if ( livecookie )
            goto LABEL_224;
          goto LABEL_222;
        }
        v82 = "Replaced";
        v83 = v89->path;
        v84 = v89->domain;
        v85 = v89->value;
        v86 = v89->name;
        if ( !livecookie )
          v82 = "Added";
LABEL_218:
        Curl_infof(
          data,
          "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
          v82,
          v86,
          v85,
          v84,
          v83,
          v89->expires);
        if ( !livecookie )
        {
          if ( !v29 )
            goto LABEL_220;
LABEL_222:
          v29->next = v89;
LABEL_223:
          ++c->numcookies;
        }
LABEL_224:
        v87 = v89->expires;
        if ( v87 && v87 < c->next_expiration )
          c->next_expiration = v87;
        return v89;
      case 3:
        goto LABEL_116;
      case 4:
        goto LABEL_120;
      case 5:
        goto LABEL_122;
      case 6:
        goto LABEL_126;
      default:
        goto LABEL_129;
    }
  }
}
