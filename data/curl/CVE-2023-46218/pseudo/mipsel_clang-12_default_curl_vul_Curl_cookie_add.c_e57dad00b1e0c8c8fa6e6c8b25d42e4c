Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  int v16; // $s3
  time_t v17; // $v0
  int v18; // $v0
  int v19; // $s1
  char *k; // $s5
  char *i; // $s1
  int v22; // $s2
  size_t v23; // $v0
  size_t v24; // $s4
  char *v25; // $s7
  unsigned int v26; // $s6
  int v27; // $v0
  unsigned int v28; // $v1
  const char *v29; // $fp
  const char *v30; // $s7
  size_t v31; // $v0
  size_t v32; // $a3
  unsigned int v33; // $a2
  int v34; // $v1
  char *v35; // $a0
  int j; // $v1
  int v37; // $a2
  size_t v38; // $s1
  unsigned int v39; // $s7
  unsigned int v40; // $s2
  int v41; // $v0
  unsigned int v42; // $s6
  int v43; // $v0
  char *v44; // $v0
  unsigned int v45; // $s4
  int v46; // $v0
  int v47; // $v0
  const char *v48; // $s2
  int v49; // $s5
  int v50; // $v0
  int v51; // $v0
  size_t v52; // $s1
  int v53; // $v0
  unsigned int v54; // $s2
  int v55; // $v0
  int v56; // $v0
  size_t v57; // $s2
  _BYTE *v58; // $v0
  const char *v59; // $s5
  const char *v60; // $a0
  int v61; // $v0
  int v62; // $s4
  size_t v63; // $v0
  const char *v64; // $v1
  size_t v65; // $s5
  size_t v66; // $s6
  int v67; // $v0
  int v68; // $v0
  int v69; // $v0
  int v70; // $v1
  _BOOL4 v71; // $v0
  int v72; // $v0
  unsigned int v73; // $v1
  _BOOL4 v74; // $a1
  char *v75; // $v0
  char *v76; // $v0
  int v77; // $at
  int v78; // $s0
  __int64 v79; // $s2
  int next_expiration_high; // $v0
  _BOOL4 v81; // $a0
  unsigned int next_expiration; // $v1
  Cookie *v83; // $s1
  Cookie **v84; // $s0
  Cookie *next; // $v0
  Cookie **v86; // $s2
  Cookie *v87; // $s7
  char v88; // $s6
  Cookie *v89; // $s3
  int v90; // $a1
  const char *spath; // $s4
  int v92; // $s5
  char *v93; // $v0
  size_t v94; // $a2
  int v95; // $a1
  int v96; // $at
  bool v97; // dc
  int v98; // $at
  int v99; // $a1
  int v100; // $v0
  char *v101; // $v0
  int v102; // $v0
  const char *v103; // $a0
  Cookie *v104; // $at
  Cookie *v105; // $v0
  Cookie *v106; // $v1
  Cookie *v107; // $a0
  char *v108; // $a1
  char *v109; // $a2
  char *v110; // $a3
  Cookie *v111; // $t0
  Cookie *v112; // $s2
  Cookie **v113; // $s7
  Cookie *v114; // $fp
  Cookie **p_next; // $s1
  Cookie *v116; // $s4
  __int64 v117; // $v0
  _BOOL4 v118; // $a2
  int v119; // $at
  _BOOL4 v120; // $a1
  const char *v121; // $a2
  __int64 v122; // $v0
  int v123; // $at
  _BOOL4 v124; // $a1
  int v125; // $s0
  void *v126; // $v0
  char *v127; // $v0
  int v129; // [sp+34h] [-BCh]
  unsigned int *v130; // [sp+3Ch] [-B4h]
  char v131; // [sp+44h] [-ACh]
  Curl_easy *v133; // [sp+4Ch] [-A4h]
  int v134; // [sp+50h] [-A0h]
  int v135; // [sp+58h] [-98h]
  int v136; // [sp+5Ch] [-94h]
  int v137; // [sp+64h] [-8Ch]
  CookieInfo *v138; // [sp+68h] [-88h]
  char *v139[32]; // [sp+70h] [-80h] BYREF

  v16 = 0;
  v17 = time(0u);
  if ( data->req.setcookies >= 0x32u )
    return (Cookie *)v16;
  v135 = v17;
  v138 = c;
  v18 = Curl_ccalloc(1, 48);
  if ( !v18 )
    return (Cookie *)v16;
  v19 = v18;
  v134 = noexpire;
  k = (char *)lineptr;
  v137 = v18;
  if ( !httpheader )
  {
    v139[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      *(_BYTE *)(v19 + 35) = 1;
      k = (char *)(lineptr + 10);
    }
    if ( *k == 35 )
      goto LABEL_5;
    v75 = strchr(k, 13);
    if ( v75 )
      *v75 = 0;
    v76 = strchr(k, 10);
    if ( v76 )
      *v76 = 0;
    if ( strtok_r(k, "\t", v139) )
      JUMPOUT(0x121C);
LABEL_216:
    Curl_cfree(*(_DWORD *)(v19 + 20));
    Curl_cfree(*(_DWORD *)(v19 + 12));
    Curl_cfree(*(_DWORD *)(v19 + 16));
    Curl_cfree(*(_DWORD *)(v19 + 4));
    Curl_cfree(*(_DWORD *)(v19 + 8));
    Curl_cfree(v19);
    return (Cookie *)v16;
  }
  if ( strlen(lineptr) >= 0x1389 )
  {
LABEL_5:
    Curl_cfree(v19);
    return (Cookie *)v16;
  }
  v133 = data;
  v129 = 0x7FFFFFFF - (v135 >> 31);
  v130 = (unsigned int *)(v19 + 0x18);
  v131 = 0;
  do
  {
    for ( i = k + 1; ; ++i )
    {
      v22 = (unsigned __int8)*k;
      if ( v22 != 32 && v22 != 9 )
        break;
      ++k;
    }
    v23 = strcspn(k, ";\t\r\n=");
    if ( !v23 )
    {
      v25 = k;
      goto LABEL_68;
    }
    v24 = v23;
    v25 = &k[v23];
    v26 = v23;
    while ( 1 )
    {
      v27 = (unsigned __int8)k[v26 - 1];
      if ( v27 != 32 && v27 != 9 )
        break;
      if ( !--v26 )
      {
        v26 = 0;
        break;
      }
    }
    v28 = 0;
    v29 = 0;
    v136 = (unsigned __int8)*v25;
    if ( v136 == 61 )
    {
      v30 = &k[v24 + 1];
      v31 = strcspn(v30, ";\r\n");
      v32 = v24 + v31;
      v33 = 0;
      if ( v31 )
      {
        v29 = &i[v32];
        while ( 1 )
        {
          v34 = *((unsigned __int8 *)v29 - 1);
          if ( v34 != 32 && v34 != 9 )
            break;
          --v31;
          --v29;
          if ( !v31 )
          {
            v38 = v32;
            v29 = v30;
            goto LABEL_37;
          }
        }
        v35 = &i[v24];
        for ( j = 0; j != v31; ++j )
        {
          v37 = (unsigned __int8)v35[j];
          if ( v37 != 32 && v37 != 9 )
          {
            v38 = v32;
            v33 = v31 - j;
            v29 = &v35[j];
            goto LABEL_37;
          }
        }
        v38 = v32;
        v33 = 0;
      }
      else
      {
        v38 = v24 + v31;
        v29 = v30;
      }
LABEL_37:
      v39 = v33;
      if ( ((int (__fastcall *)(const char *, int))memchr)(v29, 9) )
      {
        Curl_cfree(*(_DWORD *)(v137 + 20));
        Curl_cfree(*(_DWORD *)(v137 + 12));
        Curl_cfree(*(_DWORD *)(v137 + 16));
        Curl_cfree(*(_DWORD *)(v137 + 4));
        Curl_cfree(*(_DWORD *)(v137 + 8));
        Curl_cfree(v137);
        v16 = 0;
        if ( (*((_BYTE *)&data->set + 1338) & 0x10) == 0 )
          return (Cookie *)v16;
        goto LABEL_204;
      }
      v28 = v39;
      v25 = &k[v38 + 1];
    }
    if ( v26 >= 0xFFF || v28 >= 0xFFF || v28 + v26 >= 0x1001 )
    {
      Curl_cfree(*(_DWORD *)(v137 + 20));
      Curl_cfree(*(_DWORD *)(v137 + 12));
      Curl_cfree(*(_DWORD *)(v137 + 16));
      Curl_cfree(*(_DWORD *)(v137 + 4));
      Curl_cfree(*(_DWORD *)(v137 + 8));
      Curl_cfree(v137);
      v16 = 0;
      if ( (*((_BYTE *)&data->set + 1338) & 0x10) == 0 )
        return (Cookie *)v16;
LABEL_204:
      ((void (*)(void))Curl_infof)();
      return (Cookie *)v16;
    }
    if ( v22 == 95 && v26 >= 7 && k[1] == 95 )
    {
      v40 = v28;
      if ( curl_strnequal("__Secure-", k, 9) )
      {
        *(_BYTE *)(v137 + 40) |= 1u;
        v28 = v40;
      }
      else
      {
        v41 = curl_strnequal("__Host-", k, 7);
        v28 = v40;
        if ( v41 )
          *(_BYTE *)(v137 + 40) |= 2u;
      }
    }
    if ( *(_DWORD *)(v137 + 4) )
    {
      if ( !v28 )
      {
        if ( v26 == 8 )
        {
          v67 = curl_strnequal("httponly", k, 8);
          v28 = 0;
          if ( v67 )
          {
            *(_BYTE *)(v137 + 35) = 1;
            goto LABEL_68;
          }
        }
        else if ( v26 == 6 )
        {
          v51 = curl_strnequal("secure", k, 6);
          v28 = 0;
          if ( v51 )
          {
            if ( !secure && v138->running )
              goto LABEL_268;
            *(_BYTE *)(v137 + 33) = 1;
            goto LABEL_68;
          }
        }
        if ( v136 != 61 )
          goto LABEL_68;
      }
      switch ( v26 )
      {
        case 7u:
          v52 = v28;
          if ( !curl_strnequal("version", k, 7) )
          {
            if ( curl_strnequal("max-age", k, 7) )
            {
              if ( *v29 == 0x22 )
                ++v29;
              v53 = ((int (__fastcall *)(const char *, _DWORD, int, unsigned int *))curlx_strtoofft)(v29, 0, 10, v130);
              if ( v53 )
              {
                if ( v53 == 2 )
                {
                  *v130 = 1;
                  v130[1] = 0;
                }
                else if ( v53 == 1 )
                {
                  *v130 = -1;
                  v130[1] = 0x7FFFFFFF;
                }
              }
              else
              {
                v72 = v130[1];
                v73 = *v130;
                if ( *(_QWORD *)v130 )
                {
                  v74 = v129 >= v72;
                  if ( v129 == v72 )
                    v74 = ~v135 >= v73;
                  if ( v74 )
                  {
                    *v130 = v73 + v135;
                    v130[1] = v72 + (v135 >> 31) + __CFADD__(v73, v135);
                  }
                  else
                  {
                    *v130 = -1;
                    v130[1] = 0x7FFFFFFF;
                  }
                }
                else
                {
                  *v130 = 1;
                  v130[1] = 0;
                }
              }
            }
            else if ( curl_strnequal("expires", k, 7) && v52 < 0x80 && !*(_QWORD *)v130 )
            {
              memcpy(v139, v29, v52);
              *((_BYTE *)v139 + v52) = 0;
              v68 = ((int (__fastcall *)(char **))Curl_getdate_capped)(v139);
              *(_QWORD *)v130 = v68;
              if ( v68 )
              {
                if ( v68 < 0 )
                {
                  v130[1] = 0;
                  *v130 = 0;
                }
              }
              else
              {
                *v130 = 1;
                v130[1] = 0;
              }
            }
          }
          break;
        case 6u:
          v54 = v28;
          v55 = curl_strnequal("domain", k, 6);
          if ( !v54 || !v55 )
            break;
          v56 = *(unsigned __int8 *)v29;
          if ( v56 == 0x2E )
            ++v29;
          v57 = (__PAIR64__(v54, v56 ^ 0x2Eu) - 1) >> 32;
          if ( v57 == 9 && curl_strnequal(v29, "localhost", 9)
            || (v58 = (_BYTE *)memchr(v29, 46, v57)) != 0 && (unsigned int)(&v29[v57] - v58) >= 2 )
          {
            v59 = domain;
            v60 = domain;
            if ( !domain )
              v60 = v29;
            v61 = ((int (__fastcall *)(const char *))Curl_host_is_ipnum)(v60);
            v62 = v61;
            if ( domain )
            {
              if ( !v61 )
                goto LABEL_100;
LABEL_110:
              domain = v59;
              if ( strncmp(v29, v59, v57) || (v62 = 1, v57 != strlen(v59)) )
              {
LABEL_112:
                v131 = 1;
                if ( (*((_BYTE *)&data->set + 1338) & 0x10) != 0 )
                  Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v29);
                break;
              }
            }
            else
            {
              domain = 0;
            }
          }
          else
          {
            v59 = ":";
            if ( ((int (__fastcall *)(const char *))Curl_host_is_ipnum)(v59) )
              goto LABEL_110;
LABEL_100:
            v63 = strlen(v59);
            v64 = v59;
            domain = v59;
            if ( v63 < v57 )
              goto LABEL_112;
            v65 = v63;
            v66 = (size_t)&v64[v63 - v57];
            if ( !curl_strnequal(v29, v66, v57) )
              goto LABEL_112;
            v62 = 0;
            if ( v65 != v57 && *(_BYTE *)(v66 - 1) != 46 )
              goto LABEL_112;
          }
          Curl_cfree(*(_DWORD *)(v137 + 20));
          v69 = ((int (__fastcall *)(const char *, size_t))Curl_memdup)(v29, v57 + 1);
          *(_DWORD *)(v137 + 20) = v69;
          if ( !v69 )
            goto LABEL_268;
          *(_BYTE *)(v69 + v57) = 0;
          v70 = *(_DWORD *)(v137 + 20);
          v71 = v70 == 0;
          if ( v62 | v71 )
          {
            if ( !v70 )
              goto LABEL_268;
            v131 |= v71;
          }
          else
          {
            *(_BYTE *)(v137 + 32) = 1;
          }
          break;
        case 4u:
          v42 = v28;
          if ( curl_strnequal("path", k, 4) )
          {
            Curl_cfree(*(_DWORD *)(v137 + 12));
            v43 = ((int (__fastcall *)(const char *, unsigned int))Curl_memdup)(v29, v42 + 1);
            *(_DWORD *)(v137 + 12) = v43;
            if ( !v43 )
              goto LABEL_268;
            *(_BYTE *)(v43 + v42) = 0;
            if ( !*(_DWORD *)(v137 + 12) )
              goto LABEL_268;
            Curl_cfree(*(_DWORD *)(v137 + 16));
            v44 = sanitize_cookie_path(*(const char **)(v137 + 12));
            *(_DWORD *)(v137 + 16) = v44;
            if ( !v44 )
              goto LABEL_268;
          }
          break;
      }
    }
    else
    {
      if ( v136 != 61 )
        goto LABEL_268;
      v45 = v28;
      Curl_cfree(0);
      v46 = ((int (__fastcall *)(char *, unsigned int))Curl_memdup)(k, v26 + 1);
      *(_DWORD *)(v137 + 4) = v46;
      if ( v46 )
        *(_BYTE *)(v46 + v26) = 0;
      Curl_cfree(*(_DWORD *)(v137 + 8));
      v47 = ((int (__fastcall *)(const char *, unsigned int))Curl_memdup)(v29, v45 + 1);
      *(_DWORD *)(v137 + 8) = v47;
      if ( v47 )
        *(_BYTE *)(v47 + v45) = 0;
      v48 = *(const char **)(v137 + 4);
      if ( !v48 )
        goto LABEL_268;
      v49 = *(_DWORD *)(v137 + 8);
      if ( !v49 )
        goto LABEL_268;
      if ( *(_BYTE *)(v49 + strcspn(*(const char **)(v137 + 8), invalid_octets_badoctets))
        || v48[strcspn(v48, invalid_octets_badoctets)] )
      {
        if ( (*((_BYTE *)&data->set + 1338) & 0x10) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
        goto LABEL_268;
      }
    }
LABEL_68:
    for ( k = v25 + 1; ; ++k )
    {
      v50 = (unsigned __int8)*(k - 1);
      if ( v50 != 32 && v50 != 9 )
        break;
    }
  }
  while ( v50 == 59 );
  if ( (v131 & 1) != 0 )
    goto LABEL_268;
  if ( domain )
  {
    if ( !*(_DWORD *)(v137 + 20) )
    {
      v100 = Curl_cstrdup(domain);
      *(_DWORD *)(v137 + 20) = v100;
      if ( !v100 )
        goto LABEL_268;
    }
  }
  if ( path && !*(_DWORD *)(v137 + 12) )
  {
    v101 = strchr(path, 63);
    v102 = v101 ? ((int (__fastcall *)(const char *, int, int))Curl_memrchr)(path, 47, v101 - path) : (int)strrchr(path, 47);
    if ( v102 )
    {
      v125 = v102 - (_DWORD)path;
      v126 = (void *)Curl_cmalloc(v102 - (_DWORD)path + 2);
      *(_DWORD *)(v137 + 12) = v126;
      if ( !v126 )
        goto LABEL_268;
      memcpy(v126, path, v125 + 1);
      *(_BYTE *)(*(_DWORD *)(v137 + 12) + v125 + 1) = 0;
      v127 = sanitize_cookie_path(*(const char **)(v137 + 12));
      *(_DWORD *)(v137 + 16) = v127;
      if ( !v127 )
        goto LABEL_268;
    }
  }
  if ( !*(_DWORD *)(v137 + 4) )
  {
LABEL_268:
    Curl_cfree(*(_DWORD *)(v137 + 20));
    Curl_cfree(*(_DWORD *)(v137 + 12));
    Curl_cfree(*(_DWORD *)(v137 + 16));
    Curl_cfree(*(_DWORD *)(v137 + 4));
    Curl_cfree(*(_DWORD *)(v137 + 8));
    Curl_cfree(v137);
    return 0;
  }
  ++v133->req.setcookies;
  v19 = v137;
  v16 = 0;
  if ( (*(_BYTE *)(v137 + 40) & 1) != 0 && !*(_BYTE *)(v137 + 33) )
    goto LABEL_216;
  if ( (*(_BYTE *)(v137 + 40) & 2) != 0
    && (!*(_BYTE *)(v137 + 33) || (v103 = *(const char **)(v137 + 12)) == 0
                               || strcmp(v103, "/")
                               || *(_BYTE *)(v137 + 32))
    || !v138->running && v138->newsession && !*(_QWORD *)(v137 + 24) )
  {
    Curl_cfree(*(_DWORD *)(v137 + 20));
    Curl_cfree(*(_DWORD *)(v137 + 12));
    Curl_cfree(*(_DWORD *)(v137 + 16));
    Curl_cfree(*(_DWORD *)(v137 + 4));
    Curl_cfree(*(_DWORD *)(v137 + 8));
    Curl_cfree(v137);
    return (Cookie *)v16;
  }
  *(_BYTE *)(v137 + 34) = v138->running;
  v77 = v138->lastct + 1;
  v138->lastct = v77;
  *(_DWORD *)(v137 + 36) = v77;
  if ( !v134 )
  {
    v78 = 0;
    v79 = time(0u);
    next_expiration_high = HIDWORD(v138->next_expiration);
    v81 = SHIDWORD(v79) >= next_expiration_high;
    next_expiration = v138->next_expiration;
    if ( next_expiration_high == HIDWORD(v79) )
      v81 = (unsigned int)v79 >= next_expiration;
    if ( v81 || !(~next_expiration | next_expiration_high ^ 0x7FFFFFFF) )
    {
      LODWORD(v138->next_expiration) = -1;
      HIDWORD(v138->next_expiration) = 0x7FFFFFFF;
      do
      {
        v113 = &v138->cookies[v78];
        v114 = *v113;
        if ( *v113 )
        {
          p_next = 0;
          do
          {
            v116 = v114;
            LODWORD(v117) = HIDWORD(v114->expires);
            HIDWORD(v117) = v114->expires;
            v114 = v114->next;
            if ( !v117 )
              goto LABEL_239;
            v118 = (int)v117 >= SHIDWORD(v79);
            if ( (unsigned int)v117 == HIDWORD(v79) )
              v118 = HIDWORD(v117) >= (unsigned int)v79;
            if ( v118 )
            {
LABEL_239:
              if ( v117 )
              {
                v119 = HIDWORD(v138->next_expiration);
                v120 = (int)v117 >= v119;
                if ( (unsigned int)v117 == v119 )
                  v120 = HIDWORD(v117) >= LODWORD(v138->next_expiration);
                if ( !v120 )
                {
                  LODWORD(v138->next_expiration) = HIDWORD(v117);
                  HIDWORD(v138->next_expiration) = v117;
                }
                p_next = &v116->next;
              }
              else
              {
                p_next = &v116->next;
              }
            }
            else
            {
              if ( p_next )
                *p_next = v114;
              else
                *v113 = v114;
              --v138->numcookies;
              Curl_cfree(v116->domain);
              Curl_cfree(v116->path);
              Curl_cfree(v116->spath);
              Curl_cfree(v116->name);
              Curl_cfree(v116->value);
              Curl_cfree(v116);
            }
          }
          while ( v114 );
        }
        ++v78;
      }
      while ( v78 != 63 );
    }
  }
  v83 = (Cookie *)v137;
  v84 = &v138->cookies[cookiehash(*(const char *const *)(v137 + 20))];
  next = *v84;
  if ( !*v84 )
  {
    v89 = 0;
    v88 = 0;
    goto LABEL_221;
  }
  v86 = 0;
  v87 = 0;
  v88 = 0;
  while ( 2 )
  {
    v89 = next;
    if ( ((int (__fastcall *)(char *, _DWORD))curl_strequal)(next->name, *(_DWORD *)(v137 + 4)) )
    {
      v90 = *(_DWORD *)(v137 + 20);
      if ( v89->domain )
      {
        if ( v90 && curl_strequal() )
        {
LABEL_160:
          spath = v89->spath;
          if ( spath )
          {
            v92 = *(_DWORD *)(v137 + 16);
            if ( v92 )
            {
              if ( v89->secure && !*(_BYTE *)(v137 + 33) && !secure )
              {
                v93 = strchr(spath + 1, 47);
                v94 = v93 ? v93 - spath : strlen(spath);
                if ( curl_strnequal(spath, v92, v94) )
                {
                  if ( v133 && (*((_BYTE *)&v133->set + 1338) & 0x10) != 0 )
                    ((void (*)(void))Curl_infof)();
                  goto LABEL_268;
                }
              }
            }
          }
        }
      }
      else if ( !v90 )
      {
        goto LABEL_160;
      }
    }
    if ( !v86 )
    {
      if ( !((int (__fastcall *)(char *, _DWORD))curl_strequal)(v89->name, *(_DWORD *)(v137 + 4)) )
      {
        v86 = 0;
        goto LABEL_155;
      }
      v95 = *(_DWORD *)(v137 + 20);
      if ( v89->domain )
      {
        if ( v95 && curl_strequal() )
        {
          v96 = v88 & 1 | (v89->tailmatch == *(unsigned __int8 *)(v137 + 32));
          v88 = 0;
          if ( !v96 )
          {
            v86 = 0;
            goto LABEL_155;
          }
        }
        else
        {
          v97 = (v88 & 1) != 0;
          v88 = 0;
          if ( !v97 )
          {
            v86 = 0;
            goto LABEL_155;
          }
        }
      }
      else
      {
        v98 = v88 & 1 | (v95 == 0);
        v88 = 0;
        if ( !v98 )
        {
          v86 = 0;
          goto LABEL_155;
        }
      }
      v99 = *(_DWORD *)(v137 + 16);
      if ( v89->spath )
      {
        if ( v99 )
        {
          if ( !curl_strequal() )
          {
            v88 = 0;
            v86 = 0;
            goto LABEL_155;
          }
          v88 = 0;
          v86 = 0;
          if ( (v89->spath != 0) == (*(_DWORD *)(v137 + 16) == 0) )
            goto LABEL_155;
        }
        else if ( !*(_DWORD *)(v137 + 16) )
        {
          v88 = 0;
          v86 = 0;
          goto LABEL_155;
        }
      }
      else
      {
        v88 = 0;
        v86 = 0;
        if ( v99 )
          goto LABEL_155;
      }
      v88 = 1;
      if ( *(_BYTE *)(v137 + 34) )
      {
        v87 = v89;
        v86 = (Cookie **)v137;
      }
      else
      {
        v87 = v89;
        v86 = (Cookie **)v137;
        if ( v89->livecookie )
          goto LABEL_268;
      }
    }
LABEL_155:
    next = v89->next;
    if ( v89->next )
      continue;
    break;
  }
  if ( v86 )
  {
    *v86 = v87->next;
    v86[9] = (Cookie *)v87->creationtime;
    Curl_cfree(v87->name);
    Curl_cfree(v87->value);
    Curl_cfree(v87->domain);
    Curl_cfree(v87->path);
    Curl_cfree(v87->spath);
    v104 = v86[7];
    v105 = v86[8];
    v106 = v86[9];
    v107 = v86[10];
    v108 = (char *)v86[3];
    v109 = (char *)v86[4];
    v110 = (char *)v86[5];
    v111 = v86[6];
    *((_DWORD *)&v87->prefix + 1) = v86[11];
    *(_DWORD *)&v87->prefix = v107;
    v87->creationtime = (int)v106;
    *(_DWORD *)&v87->tailmatch = v105;
    HIDWORD(v87->expires) = v104;
    LODWORD(v87->expires) = v111;
    v87->domain = v110;
    v87->spath = v109;
    v87->path = v108;
    v87->value = (char *)v86[2];
    v87->name = (char *)v86[1];
    v87->next = *v86;
    Curl_cfree(v86);
    v83 = v87;
  }
LABEL_221:
  if ( v133 && v138->running && (*((_BYTE *)&v133->set + 1338) & 0x10) != 0 )
  {
    v112 = v83;
    v121 = "Added";
    if ( (v88 & 1) != 0 )
      v121 = "Replaced";
    Curl_infof(v133, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld", v121, v83->name);
    if ( (v88 & 1) == 0 )
    {
LABEL_250:
      if ( v89 )
        v89->next = v112;
      else
        *v84 = v112;
      ++v138->numcookies;
    }
  }
  else
  {
    v112 = v83;
    if ( (v88 & 1) == 0 )
      goto LABEL_250;
  }
  LODWORD(v122) = HIDWORD(v112->expires);
  HIDWORD(v122) = v112->expires;
  if ( !v122 )
    return v112;
  v123 = HIDWORD(v138->next_expiration);
  v124 = (int)v122 >= v123;
  if ( (unsigned int)v122 == v123 )
    v124 = HIDWORD(v122) >= LODWORD(v138->next_expiration);
  if ( !v124 )
  {
    LODWORD(v138->next_expiration) = HIDWORD(v122);
    HIDWORD(v138->next_expiration) = v122;
  }
  return v112;
}
