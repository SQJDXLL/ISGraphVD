Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  _BOOL4 v8; // r8
  char *v10; // r7
  time_t v11; // r0
  unsigned int setcookies; // r3
  Cookie *v13; // r9
  int v14; // r10
  bool v15; // zf
  size_t v16; // r6
  int v17; // t1
  bool v18; // zf
  char *v19; // r2
  char *v20; // r3
  int v21; // r5
  int v22; // t1
  unsigned int v23; // r1
  bool v24; // zf
  size_t v25; // r5
  unsigned __int8 *v26; // r11
  size_t v27; // r0
  size_t v28; // r8
  char *v29; // r1
  int v30; // r3
  int v31; // t1
  bool v32; // zf
  unsigned __int8 *v33; // r2
  int v34; // r3
  int v35; // t1
  bool v36; // zf
  bool v37; // cc
  char *v38; // r3
  _BOOL4 v39; // r3
  _BOOL4 v40; // r3
  unsigned __int8 prefix; // r3
  unsigned int v42; // r6
  char *v44; // r0
  char *v45; // r0
  char *v46; // r0
  char *v47; // r8
  int v48; // r4
  int v49; // r0
  void (__fastcall *v50)(char *); // r2
  const char *v51; // r0
  const char *name; // r6
  bool v53; // zf
  char *v54; // r7
  _BYTE *v55; // r0
  int v56; // r0
  const char *v57; // r5
  int v58; // r0
  char *v59; // r0
  int v60; // r0
  unsigned int expires; // r3
  unsigned int expires_high; // r1
  int v63; // r12
  int v64; // r2
  unsigned int v65; // kr04_4
  char *v66; // r3
  int v67; // r4
  char *v68; // r10
  size_t v69; // r0
  size_t v70; // r5
  const char *v71; // r6
  int v72; // r0
  int v73; // r0
  char *v74; // r1
  int v75; // r4
  char v76; // r5
  char *v77; // r0
  int v78; // r3
  int v79; // r0
  char v80; // r3
  int v81; // r0
  int (__fastcall *v82)(void *); // r4
  const char *v83; // r0
  char *v84; // r4
  char *v85; // r0
  int v86; // r3
  _BOOL4 v87; // r4
  char *v88; // r0
  int v89; // r3
  int v90; // r4
  char *v91; // r0
  _BOOL4 v92; // r3
  int v93; // r0
  int v94; // r4
  int v95; // r3
  int v96; // r10
  char *v97; // r0
  int v98; // r3
  int v99; // r0
  char v100; // r3
  int v101; // r0
  int (__fastcall *v102)(char *); // r4
  int v103; // r0
  int (__fastcall *v104)(void *); // r2
  int v105; // r4
  int v106; // r5
  char *v107; // r1
  char *v108; // r0
  int v109; // r3
  char *v110; // r0
  _BOOL4 v111; // r3
  int v112; // r0
  int v113; // r3
  int v114; // r0
  int (__fastcall *v115)(void *); // r2
  int v116; // r4
  int v117; // r0
  int v118; // r0
  char *v119; // r3
  _BOOL4 v120; // r2
  CookieInfo *v121; // r2
  int v122; // r3
  size_t v123; // r0
  unsigned int v124; // r4
  size_t v125; // r10
  int livecookie; // r7
  Cookie *v127; // r5
  unsigned int v128; // r3
  int v129; // r0
  char *v130; // r1
  const char *v131; // r8
  char *spath; // r11
  int v133; // r0
  char *v134; // r1
  int v135; // r0
  char *v136; // r1
  char *value; // r2
  char *v138; // r3
  void (__fastcall *v139)(Cookie *); // r8
  char *v140; // r1
  int v141; // r2
  int v142; // r3
  int creationtime; // r1
  int v144; // r2
  int v145; // r3
  const char *v146; // r2
  int v147; // r0
  char *v148; // r1
  __int64 v149; // r2
  Curl_easy *v150; // r12
  int is_ipnum; // r5
  int v152; // r0
  int v153; // r0
  char *v154; // r0
  size_t v155; // r2
  const char *v156; // r0
  char *v157; // r0
  int v158; // r3
  int v159; // r5
  char *v160; // r1
  char *v161; // r0
  char *v162; // r3
  int v163; // r3
  size_t v164; // r5
  char *v165; // r0
  char *v166; // r0
  int v167; // r0
  bool v168; // zf
  void *v169; // r0
  int v170; // r0
  char *v171; // r1
  int v172; // [sp+0h] [bp-100h] BYREF
  char *delim; // [sp+18h] [bp-E8h]
  const char *httpheadera; // [sp+1Ch] [bp-E4h]
  CookieInfo *ca; // [sp+20h] [bp-E0h]
  _BOOL4 v176; // [sp+24h] [bp-DCh]
  Curl_easy *dataa; // [sp+28h] [bp-D8h]
  Curl_easy *v178; // [sp+30h] [bp-D0h]
  const char *noexpirea; // [sp+34h] [bp-CCh]
  time_t now; // [sp+38h] [bp-C8h]
  _BOOL4 v181; // [sp+3Ch] [bp-C4h]
  int v182; // [sp+40h] [bp-C0h]
  const char *badcookie; // [sp+44h] [bp-BCh]
  char *reject; // [sp+48h] [bp-B8h]
  _BOOL4 v185; // [sp+4Ch] [bp-B4h]
  char *tok_buf; // [sp+50h] [bp-B0h] BYREF
  char date[128]; // [sp+54h] [bp-ACh] BYREF

  v176 = httpheader;
  v8 = httpheader;
  v181 = noexpire;
  v178 = data;
  dataa = (Curl_easy *)c;
  noexpirea = domain;
  now = secure;
  v10 = (char *)lineptr;
  v11 = time(0u);
  setcookies = data->req.setcookies;
  v182 = v11;
  if ( setcookies > 0x31 )
    return 0;
  v13 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v13 )
    return 0;
  if ( v8 )
  {
    if ( strlen(lineptr) <= (unsigned int)&loc_1388 )
    {
      v14 = *(unsigned __int8 *)lineptr;
      httpheadera = ";\t\r\n=";
      reject = (char *)&badoctets_0;
      badcookie = "path";
      v185 = 0;
      if ( v14 )
        goto LABEL_6;
LABEL_17:
      v16 = strcspn(v10, httpheadera);
      if ( !v16 )
      {
LABEL_55:
        if ( v185 )
          goto LABEL_66;
        v39 = v13->domain == 0;
        if ( !noexpirea )
          v39 = 0;
        if ( v39 )
        {
          v167 = Curl_cstrdup(noexpirea);
          v13->domain = (char *)v167;
          if ( !v167 )
            goto LABEL_66;
        }
        v40 = v13->path == 0;
        if ( !path )
          v40 = 0;
        if ( v40 )
        {
          v161 = strchr(path, 63);
          v162 = v161 ? (char *)Curl_memrchr(path, 47, v161 - path) : strrchr(path, 47);
          if ( v162 )
          {
            v163 = v162 - path;
            v164 = v163 + 1;
            v165 = (char *)Curl_cmalloc(v163 + 2);
            v13->path = v165;
            if ( !v165 )
              goto LABEL_66;
            memcpy(v165, path, v164);
            v13->path[v164] = 0;
            v166 = sanitize_cookie_path(v13->path);
            v13->spath = v166;
            if ( !v166 )
              goto LABEL_66;
          }
        }
        if ( !v13->name )
          goto LABEL_66;
        ++v178->req.setcookies;
        prefix = v13->prefix;
        if ( (prefix & 1) != 0 )
          goto LABEL_232;
        goto LABEL_64;
      }
      while ( 1 )
      {
        v19 = &v10[v16];
        v20 = &v10[v16];
        while ( 1 )
        {
          v22 = (unsigned __int8)*--v20;
          v21 = v22;
          v23 = v16;
          v24 = v22 == 9;
          if ( v22 != 9 )
            v24 = v21 == 32;
          v25 = v24;
          --v16;
          if ( !v24 )
            break;
          if ( !v16 )
          {
            if ( *v19 == 61 )
              goto LABEL_28;
            if ( v13->name )
            {
LABEL_110:
              v14 = (unsigned __int8)*v19;
              v10 = v19;
              goto LABEL_54;
            }
LABEL_66:
            freecookie(v13);
            return 0;
          }
        }
        if ( *v19 == 61 )
        {
          v16 = v23;
LABEL_28:
          v26 = (unsigned __int8 *)(v19 + 1);
          ca = (CookieInfo *)v19;
          v27 = strcspn(v19 + 1, ";\r\n");
          v28 = v27;
          delim = (char *)&v26[v27];
          if ( v27 )
          {
            v29 = (char *)ca->cookies + v27 + 1;
            do
            {
              v31 = (unsigned __int8)*--v29;
              v30 = v31;
              v32 = v31 == 9;
              if ( v31 != 9 )
                v32 = v30 == 32;
              if ( !v32 )
              {
                v33 = v26;
                while ( 1 )
                {
                  v26 = v33;
                  v35 = *v33++;
                  v34 = v35;
                  v36 = v35 == 9;
                  if ( v35 != 9 )
                    v36 = v34 == 32;
                  if ( !v36 )
                    break;
                  if ( !--v28 )
                  {
                    v26 = v33;
LABEL_40:
                    v37 = v28 > 0xFFE;
                    if ( v28 <= 0xFFE )
                      v37 = v16 > 0xFFE;
                    if ( !v37 && v16 + v28 <= 0x1000 )
                    {
                      v25 = v176;
                      goto LABEL_45;
                    }
LABEL_306:
                    freecookie(v13);
                    if ( (*(&v178->set.connect_only + 4) & 0x20) != 0 )
                      Curl_infof(v178, "oversized cookie dropped, name/val %zu + %zu bytes", v16, v28);
                    return 0;
                  }
                }
                if ( !memchr(v26, 9, v28) )
                  goto LABEL_40;
                freecookie(v13);
                if ( (*(&v178->set.connect_only + 4) & 0x20) != 0 )
                  Curl_infof(v178, "cookie contains TAB, dropping");
                return 0;
              }
              --v28;
            }
            while ( v28 );
          }
          if ( v16 > 0xFFE )
          {
            v28 = 0;
            goto LABEL_306;
          }
          v25 = v176;
          v28 = 0;
        }
        else
        {
          v16 = v23;
          if ( v23 > 0xFFE )
          {
            v28 = v25;
            goto LABEL_306;
          }
          v26 = (unsigned __int8 *)v25;
          v28 = v25;
          delim = v19;
        }
LABEL_45:
        if ( v16 <= 6 )
        {
          if ( !v13->name )
            goto LABEL_83;
          if ( v28 )
          {
            if ( v16 != 4 )
            {
              if ( v16 != 6 )
              {
LABEL_52:
                v10 = delim;
                v38 = delim;
LABEL_53:
                v14 = (unsigned __int8)*v38;
                goto LABEL_54;
              }
              if ( !curl_strnequal("domain", v10, 6) )
                goto LABEL_89;
              if ( *v26 == 46 )
              {
                --v28;
                ++v26;
              }
              if ( v28 == 9 && curl_strnequal(v26, "localhost", 9)
                || (v55 = memchr(v26, 46, v28)) != 0 && v28 - (v55 - v26) > 1 )
              {
                if ( !noexpirea )
                {
                  is_ipnum = Curl_host_is_ipnum(v26);
                  Curl_cfree(v13->domain);
                  v152 = Curl_strndup(v26, v28);
                  v13->domain = (char *)v152;
                  if ( !v152 )
                    goto LABEL_66;
                  if ( is_ipnum )
                    goto LABEL_89;
                  goto LABEL_311;
                }
                if ( !Curl_host_is_ipnum(noexpirea) )
                  goto LABEL_134;
LABEL_104:
                v57 = noexpirea;
                if ( !strncmp((const char *)v26, noexpirea, v28) && strlen(v57) == v28 )
                {
                  Curl_cfree(v13->domain);
                  v153 = Curl_strndup(v26, v28);
                  v13->domain = (char *)v153;
                  if ( !v153 )
                    goto LABEL_66;
LABEL_89:
                  v10 = delim;
                  v14 = (unsigned __int8)*delim;
                  goto LABEL_54;
                }
              }
              else
              {
                v56 = Curl_host_is_ipnum(&LC1);
                noexpirea = (const char *)&LC1;
                if ( v56 )
                  goto LABEL_104;
LABEL_134:
                v69 = strlen(noexpirea);
                v70 = v69;
                if ( v28 <= v69 )
                {
                  v71 = &noexpirea[v69 - v28];
                  if ( curl_strnequal(v26, v71, v28) )
                  {
                    if ( v28 == v70 || *(v71 - 1) == 46 )
                    {
                      Curl_cfree(v13->domain);
                      v72 = Curl_strndup(v26, v28);
                      v13->domain = (char *)v72;
                      if ( !v72 )
                        goto LABEL_66;
LABEL_311:
                      v13->tailmatch = 1;
                      v14 = (unsigned __int8)*delim;
                      v10 = delim;
                      goto LABEL_54;
                    }
                  }
                }
              }
              if ( (*(&v178->set.connect_only + 4) & 0x20) != 0 )
                Curl_infof(v178, "skipped cookie with bad tailmatch domain: %s", (const char *)v26);
              v10 = delim;
              v14 = (unsigned __int8)*delim;
              v185 = v176;
              goto LABEL_54;
            }
            goto LABEL_113;
          }
          v19 = delim;
          if ( v16 != 6 )
          {
            if ( !v25 )
              goto LABEL_110;
            if ( v16 != 4 )
            {
              v10 = delim;
              v38 = delim;
              goto LABEL_53;
            }
LABEL_113:
            if ( !curl_strnequal(badcookie, v10, 4) )
              goto LABEL_89;
            Curl_cfree(v13->path);
            v58 = Curl_strndup(v26, v28);
            v13->path = (char *)v58;
            if ( !v58 )
              goto LABEL_66;
            Curl_cfree(v13->spath);
            v59 = sanitize_cookie_path(v13->path);
            v13->spath = v59;
            if ( !v59 )
              goto LABEL_66;
            v10 = delim;
            v14 = (unsigned __int8)*delim;
            goto LABEL_54;
          }
          if ( !curl_strnequal("secure", v10, 6) )
          {
            if ( v25 )
              curl_strnequal("domain", v10, 6);
            goto LABEL_89;
          }
          if ( !now && *(&dataa->req.writer_stack_depth + 1) )
            goto LABEL_66;
          v13->secure = 1;
          v14 = (unsigned __int8)*delim;
          v10 = delim;
          goto LABEL_54;
        }
        if ( v14 == 95 && v10[1] == 95 )
        {
          if ( curl_strnequal("__Secure-", v10, 9) )
          {
            v13->prefix |= 1u;
            if ( !v13->name )
              goto LABEL_83;
            goto LABEL_48;
          }
          if ( curl_strnequal("__Host-", v10, 7) )
          {
            v13->prefix |= 2u;
            if ( !v13->name )
            {
LABEL_83:
              if ( !v25 )
                goto LABEL_66;
              Curl_cfree(0);
              v49 = Curl_strndup(v10, v16);
              v50 = (void (__fastcall *)(char *))Curl_cfree;
              v13->name = (char *)v49;
              v50(v13->value);
              v51 = (const char *)Curl_strndup(v26, v28);
              name = v13->name;
              v53 = name == 0;
              if ( name )
                v53 = v51 == 0;
              v13->value = (char *)v51;
              if ( v53 )
                goto LABEL_66;
              v54 = reject;
              if ( v51[strcspn(v51, reject)] || name[strcspn(name, v54)] )
              {
                if ( (*(&v178->set.connect_only + 4) & 0x20) != 0 )
                  Curl_infof(v178, "invalid octets in name/value, cookie dropped");
                goto LABEL_66;
              }
              goto LABEL_89;
            }
            goto LABEL_48;
          }
        }
        if ( !v13->name )
          goto LABEL_83;
LABEL_48:
        if ( !v28 )
        {
          if ( v16 == 8 )
          {
            if ( !curl_strnequal("httponly", v10, 8) )
              goto LABEL_89;
            v13->httponly = 1;
            v14 = (unsigned __int8)*delim;
            v10 = delim;
            goto LABEL_54;
          }
          if ( !v25 )
            goto LABEL_89;
        }
        if ( v16 != 7 )
          goto LABEL_52;
        if ( curl_strnequal("version", v10, 7) )
          goto LABEL_89;
        if ( !curl_strnequal("max-age", v10, 7) )
        {
          if ( curl_strnequal("expires", v10, 7) )
          {
            v168 = v28 == 127;
            if ( v28 <= 0x7F )
              v168 = v13->expires == 0;
            if ( v168 )
            {
              v169 = memcpy(date, v26, v28);
              *((_BYTE *)&v172 + v28 + 0x54) = 0;
              v170 = Curl_getdate_capped(v169);
              if ( v170 )
              {
                if ( v170 >> 31 == -1 )
                  v13->expires = 0LL;
                else
                  v13->expires = v170;
              }
              else
              {
                v13->expires = 1LL;
              }
            }
          }
          goto LABEL_89;
        }
        if ( *v26 == 34 )
          ++v26;
        v60 = curlx_strtoofft(v26, 0, 10, &v13->expires);
        if ( v60 == 1 )
        {
LABEL_338:
          v160 = delim;
          v13->expires = 0x7FFFFFFFFFFFFFFFLL;
          v10 = v160;
          v38 = v160;
          goto LABEL_53;
        }
        if ( v60 == 2 )
          goto LABEL_370;
        if ( v60 )
          goto LABEL_89;
        expires = v13->expires;
        expires_high = HIDWORD(v13->expires);
        if ( !v13->expires )
        {
LABEL_370:
          v171 = delim;
          v13->expires = 1LL;
          v14 = (unsigned __int8)*v171;
          v10 = v171;
        }
        else
        {
          v63 = v182;
          v64 = v182 >> 31;
          if ( __SPAIR64__(0x7FFFFFFF - (v182 >> 0x1F), ~v182) < __SPAIR64__(expires_high, expires) )
            goto LABEL_338;
          v65 = v13->expires;
          LODWORD(v13->expires) = expires + v182;
          v66 = delim;
          HIDWORD(v13->expires) = (__PAIR64__(v64, v65) + __PAIR64__(expires_high, v63)) >> 32;
          v10 = v66;
          v14 = (unsigned __int8)*v66;
        }
LABEL_54:
        if ( !v14 )
          goto LABEL_55;
        while ( 1 )
        {
LABEL_12:
          v18 = v14 == 9;
          if ( v14 != 9 )
            v18 = v14 == 32;
          if ( !v18 )
            break;
          v17 = (unsigned __int8)*++v10;
          v14 = v17;
          if ( !v17 )
            goto LABEL_55;
        }
        if ( v14 != 59 )
          goto LABEL_55;
        do
        {
          v14 = (unsigned __int8)*++v10;
          if ( !v14 )
            goto LABEL_17;
LABEL_6:
          v15 = v14 == 9;
          if ( v14 != 9 )
            v15 = v14 == 32;
        }
        while ( v15 );
        v16 = strcspn(v10, ";\t\r\n=");
        if ( !v16 )
          goto LABEL_12;
      }
    }
LABEL_308:
    Curl_cfree(v13);
    return 0;
  }
  tok_buf = (char *)v176;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
  {
    v10 = (char *)(lineptr + 0xA);
    v13->httponly = 1;
  }
  if ( *v10 == 35 )
    goto LABEL_308;
  v44 = strchr(v10, 13);
  if ( v44 )
    *v44 = 0;
  v45 = strchr(v10, 10);
  if ( v45 )
    *v45 = 0;
  v46 = strtok_r(v10, "\t", &tok_buf);
  v47 = v46;
  if ( !v46 )
    goto LABEL_66;
  if ( !now )
  {
    v48 = 0;
    delim = "\t";
    while ( 2 )
    {
      switch ( v48 )
      {
        case 0:
          if ( *v47 == 46 )
            ++v47;
          v73 = Curl_cstrdup(v47);
          v74 = delim;
          v75 = v73;
          v76 = v73;
          v13->domain = (char *)v73;
          if ( v73 )
            v76 = 1;
          v77 = strtok_r(0u, v74, &tok_buf);
          if ( v77 )
            v78 = v76 & 1;
          else
            v78 = 0;
          v47 = v77;
          if ( !v78 )
            goto LABEL_380;
          goto LABEL_148;
        case 1:
LABEL_148:
          v79 = curl_strequal(v47, "TRUE");
          v80 = v79;
          if ( v79 )
            v80 = 1;
          v13->tailmatch = v80;
          v47 = strtok_r(0u, "\t", &tok_buf);
          if ( v47 )
            goto LABEL_151;
          goto LABEL_377;
        case 2:
LABEL_151:
          v81 = strcmp("TRUE", v47);
          v82 = (int (__fastcall *)(void *))Curl_cstrdup;
          if ( !v81 || !strcmp("FALSE", v47) )
          {
            httpheadera = LC0;
            v114 = v82(LC0);
            v115 = (int (__fastcall *)(void *))Curl_cstrdup;
            v116 = v114;
            v13->path = (char *)v114;
            v117 = v115(LC0);
            v13->spath = (char *)v117;
            if ( !v117 )
            {
              v13->secure = 0;
              if ( !curl_strequal(v47, "TRUE") )
                goto LABEL_369;
              v87 = 1;
              goto LABEL_298;
            }
            v87 = v116 == 0;
          }
          else
          {
            v83 = (const char *)v82(v47);
            v13->path = (char *)v83;
            if ( !v83 )
              goto LABEL_369;
            v84 = sanitize_cookie_path(v83);
            v76 = (char)v84;
            v13->spath = v84;
            if ( v84 )
              v76 = 1;
            v85 = strtok_r(0u, "\t", &tok_buf);
            if ( v85 )
              v86 = v76 & 1;
            else
              v86 = 0;
            v47 = v85;
            if ( !v86 )
              goto LABEL_328;
LABEL_160:
            v87 = 0;
          }
          v13->secure = 0;
          if ( !curl_strequal(v47, "TRUE") )
          {
            v76 = !v87;
            goto LABEL_163;
          }
LABEL_298:
          if ( !*(&dataa->req.writer_stack_depth + 1) )
            goto LABEL_369;
          v76 = !v87;
          v13->secure = 1;
LABEL_163:
          v88 = strtok_r(0u, "\t", &tok_buf);
          if ( v88 )
            v89 = v76 & 1;
          else
            v89 = 0;
          v47 = v88;
          if ( !v89 )
            goto LABEL_379;
LABEL_167:
          v90 = curlx_strtoofft(v47, 0, 10, &v13->expires);
          v91 = strtok_r(0u, "\t", &tok_buf);
          v76 = v90 == 0;
          if ( v91 )
            v92 = v90 == 0;
          else
            v92 = 0;
          v47 = v91;
          if ( !v92 )
            goto LABEL_378;
LABEL_171:
          v93 = Curl_cstrdup(v47);
          v13->name = (char *)v93;
          if ( !v93 )
            goto LABEL_228;
          if ( curl_strnequal("__Secure-", v93, 9) )
          {
            v13->prefix |= 1u;
          }
          else if ( curl_strnequal("__Host-", v13->name, 7) )
          {
            v13->prefix |= 2u;
          }
          v47 = strtok_r(0u, "\t", &tok_buf);
          if ( !v47 )
            goto LABEL_175;
LABEL_176:
          v94 = Curl_cstrdup(v47);
          v76 = v94;
          v13->value = (char *)v94;
          if ( v94 )
            v76 = 1;
          if ( strtok_r(0u, "\t", &tok_buf) )
            v95 = v76 & 1;
          else
            v95 = 0;
          if ( !v95 )
            goto LABEL_385;
          if ( !strtok_r(0u, "\t", &tok_buf) )
            goto LABEL_384;
          v48 = 8;
LABEL_184:
          ++v48;
          v47 = strtok_r(0u, "\t", &tok_buf);
          if ( v47 )
            continue;
          v96 = v48;
          v76 = 1;
          v87 = 0;
          break;
        case 3:
          goto LABEL_160;
        case 4:
          goto LABEL_167;
        case 5:
          goto LABEL_171;
        case 6:
          goto LABEL_176;
        default:
          goto LABEL_184;
      }
      goto LABEL_329;
    }
  }
  v67 = 0;
  v68 = v46;
  delim = "TRUE";
  while ( 2 )
  {
    switch ( v67 )
    {
      case 0:
        if ( *v68 == 46 )
          ++v68;
        v75 = Curl_cstrdup(v68);
        v76 = v75;
        v13->domain = (char *)v75;
        if ( v75 )
          v76 = 1;
        v97 = strtok_r(0u, "\t", &tok_buf);
        if ( v97 )
          v98 = v76 & 1;
        else
          v98 = 0;
        v68 = v97;
        if ( v98 )
          goto LABEL_194;
LABEL_380:
        v96 = 1;
        v87 = v75 == 0;
        goto LABEL_329;
      case 1:
LABEL_194:
        v99 = curl_strequal(v68, "TRUE");
        v100 = v99;
        if ( v99 )
          v100 = 1;
        v13->tailmatch = v100;
        v68 = strtok_r(0u, "\t", &tok_buf);
        if ( v68 )
          goto LABEL_197;
LABEL_377:
        v87 = 0;
        v96 = 2;
        v76 = 1;
        goto LABEL_329;
      case 2:
LABEL_197:
        v101 = strcmp("TRUE", v68);
        v102 = (int (__fastcall *)(char *))Curl_cstrdup;
        if ( v101 && strcmp("FALSE", v68) )
        {
          v156 = (const char *)v102(v68);
          v13->path = (char *)v156;
          if ( !v156 )
            goto LABEL_369;
          v84 = sanitize_cookie_path(v156);
          v76 = (char)v84;
          v13->spath = v84;
          if ( v84 )
            v76 = 1;
          v157 = strtok_r(0u, "\t", &tok_buf);
          if ( v157 )
            v158 = v76 & 1;
          else
            v158 = 0;
          v68 = v157;
          if ( !v158 )
          {
LABEL_328:
            v96 = 3;
            v87 = v84 == 0;
LABEL_329:
            if ( v96 == 7 )
              v159 = 0;
            else
              v159 = v76 & 1;
            if ( v159 )
              goto LABEL_66;
            goto LABEL_230;
          }
LABEL_227:
          v87 = 0;
        }
        else
        {
          httpheadera = LC0;
          v103 = v102(LC0);
          v104 = (int (__fastcall *)(void *))Curl_cstrdup;
          v105 = v103;
          v13->path = (char *)v103;
          v106 = v104(LC0);
          v13->spath = (char *)v106;
          if ( !v106 )
          {
            v13->secure = 0;
            if ( curl_strequal(v68, "TRUE") )
            {
              v13->secure = 1;
              strtok_r(0u, "\t", &tok_buf);
              goto LABEL_66;
            }
LABEL_369:
            strtok_r(0u, "\t", &tok_buf);
            goto LABEL_66;
          }
          v87 = v105 == 0;
        }
        v107 = delim;
        v13->secure = 0;
        v76 = !v87;
        if ( curl_strequal(v68, v107) )
          v13->secure = 1;
        v108 = strtok_r(0u, "\t", &tok_buf);
        if ( v108 )
          v109 = v76 & 1;
        else
          v109 = 0;
        v68 = v108;
        if ( !v109 )
        {
LABEL_379:
          v96 = 4;
          goto LABEL_329;
        }
LABEL_207:
        v90 = curlx_strtoofft(v68, 0, 10, &v13->expires);
        v110 = strtok_r(0u, "\t", &tok_buf);
        v76 = v90 == 0;
        if ( v110 )
          v111 = v90 == 0;
        else
          v111 = 0;
        v68 = v110;
        if ( !v111 )
        {
LABEL_378:
          v87 = v90 != 0;
          v96 = 5;
          goto LABEL_329;
        }
LABEL_211:
        v112 = Curl_cstrdup(v68);
        v13->name = (char *)v112;
        if ( !v112 )
        {
LABEL_228:
          strtok_r(0u, "\t", &tok_buf);
          v87 = 1;
          goto LABEL_229;
        }
        if ( curl_strnequal("__Secure-", v112, 9) )
        {
          v13->prefix |= 1u;
        }
        else if ( curl_strnequal("__Host-", v13->name, 7) )
        {
          v13->prefix |= 2u;
        }
        v68 = strtok_r(0u, "\t", &tok_buf);
        if ( v68 )
        {
LABEL_215:
          v94 = Curl_cstrdup(v68);
          v76 = v94;
          v13->value = (char *)v94;
          if ( v94 )
            v76 = 1;
          if ( strtok_r(0u, "\t", &tok_buf) )
            v113 = v76 & 1;
          else
            v113 = 0;
          if ( !v113 )
          {
LABEL_385:
            v96 = 7;
            v87 = v94 == 0;
            goto LABEL_329;
          }
          if ( !strtok_r(0u, "\t", &tok_buf) )
          {
LABEL_384:
            v87 = 0;
            v96 = 8;
            v76 = 1;
            goto LABEL_329;
          }
          v67 = 8;
LABEL_223:
          ++v67;
          v68 = strtok_r(0u, "\t", &tok_buf);
          if ( !v68 )
          {
            v76 = now;
            v96 = v67;
            v87 = 0;
            goto LABEL_329;
          }
          continue;
        }
LABEL_175:
        v87 = 0;
LABEL_229:
        v118 = Curl_cstrdup(&LC24);
        v13->value = (char *)v118;
        if ( !v118 )
          goto LABEL_66;
LABEL_230:
        if ( v87 )
          goto LABEL_66;
        prefix = v13->prefix;
        if ( (prefix & 1) != 0 )
        {
LABEL_232:
          if ( !v13->secure )
            goto LABEL_66;
          if ( (prefix & 2) != 0 )
            goto LABEL_234;
          goto LABEL_238;
        }
LABEL_64:
        if ( (prefix & 2) != 0 )
        {
          if ( !v13->secure )
            goto LABEL_66;
LABEL_234:
          v119 = v13->path;
          if ( !v119 || *v119 != 47 || v119[1] || v13->tailmatch )
            goto LABEL_66;
        }
LABEL_238:
        if ( !*(&dataa->req.writer_stack_depth + 1) && *(&dataa->req.writer_stack_depth + 2) && !v13->expires )
          goto LABEL_66;
        v120 = v181;
        v13->livecookie = *(&dataa->req.writer_stack_depth + 1);
        v15 = !v120;
        v121 = (CookieInfo *)dataa;
        v122 = *(_DWORD *)dataa->req.fread_eof + 1;
        *(_DWORD *)dataa->req.fread_eof = v122;
        v13->creationtime = v122;
        if ( v15 )
          remove_expired(v121);
        v123 = cookiehash(v13->domain);
        v124 = *(&dataa->magic + v123);
        v125 = v123;
        if ( !v124 )
        {
          if ( *(&dataa->req.writer_stack_depth + 1) )
          {
            v42 = (unsigned int)v13;
            if ( (*(&v178->set.connect_only + 4) & 0x20) != 0 )
            {
              livecookie = *(&dataa->magic + v123);
              v146 = "Added";
LABEL_335:
              Curl_infof(
                v178,
                "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
                v146,
                *(const char **)(v42 + 4),
                *(const char **)(v42 + 8),
                *(const char **)(v42 + 20),
                *(const char **)(v42 + 12),
                *(_QWORD *)(v42 + 0x18));
              if ( livecookie )
                goto LABEL_284;
              if ( v124 )
                goto LABEL_282;
            }
          }
          else
          {
            v42 = (unsigned int)v13;
          }
          *(&dataa->magic + v125) = v42;
          goto LABEL_283;
        }
        livecookie = 0;
        v42 = 0;
        v127 = 0;
        while ( 2 )
        {
          if ( curl_strequal(*(_DWORD *)(v124 + 4), v13->name) )
          {
            v129 = *(_DWORD *)(v124 + 20);
            v130 = v13->domain;
            if ( v129 )
            {
              if ( v130 && curl_strequal(v129, v130) )
              {
LABEL_251:
                v131 = *(const char **)(v124 + 16);
                if ( v131 )
                {
                  spath = v13->spath;
                  if ( spath )
                  {
                    if ( *(_BYTE *)(v124 + 33) && !(now | v13->secure) )
                    {
                      v154 = strchr(v131 + 1, 47);
                      v155 = v154 ? v154 - v131 : strlen(v131);
                      if ( curl_strnequal(v131, spath, v155) )
                      {
                        if ( (*(&v178->set.connect_only + 4) & 0x20) != 0 )
                          Curl_infof(
                            v178,
                            "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                            v13->name,
                            v13->domain);
                        goto LABEL_66;
                      }
                    }
                  }
                }
              }
            }
            else if ( !v130 )
            {
              goto LABEL_251;
            }
          }
          if ( v127 || !curl_strequal(*(_DWORD *)(v124 + 4), v13->name) )
          {
LABEL_245:
            v128 = *(_DWORD *)v124;
            if ( !*(_DWORD *)v124 )
              break;
            goto LABEL_246;
          }
          v133 = *(_DWORD *)(v124 + 20);
          v134 = v13->domain;
          if ( v133 )
          {
            if ( !v134 || !curl_strequal(v133, v134) || *(unsigned __int8 *)(v124 + 32) != v13->tailmatch )
            {
LABEL_261:
              if ( !livecookie )
                goto LABEL_262;
            }
          }
          else if ( v134 )
          {
            goto LABEL_261;
          }
          v147 = *(_DWORD *)(v124 + 16);
          v148 = v13->spath;
          if ( !v147 )
          {
LABEL_277:
            if ( (v147 == 0) != (v148 == 0) )
              goto LABEL_262;
            livecookie = v13->livecookie;
            if ( v13->livecookie )
            {
              v42 = v124;
              v127 = v13;
            }
            else
            {
              if ( *(_BYTE *)(v124 + 34) )
                goto LABEL_66;
              v42 = v124;
              v127 = v13;
              livecookie = 1;
            }
            goto LABEL_245;
          }
          if ( v148 && curl_strequal(v147, v148) )
          {
            v147 = *(_DWORD *)(v124 + 16);
            v148 = v13->spath;
            goto LABEL_277;
          }
LABEL_262:
          v128 = *(_DWORD *)v124;
          livecookie = 0;
          if ( *(_DWORD *)v124 )
          {
LABEL_246:
            v124 = v128;
            continue;
          }
          break;
        }
        if ( v127 )
        {
          v127->next = *(Cookie **)v42;
          v135 = *(_DWORD *)(v42 + 4);
          v127->creationtime = *(_DWORD *)(v42 + 36);
          Curl_cfree(v135);
          Curl_cfree(*(_DWORD *)(v42 + 8));
          Curl_cfree(*(_DWORD *)(v42 + 20));
          Curl_cfree(*(_DWORD *)(v42 + 12));
          Curl_cfree(*(_DWORD *)(v42 + 16));
          v136 = v127->name;
          value = v127->value;
          v138 = v127->path;
          v139 = (void (__fastcall *)(Cookie *))Curl_cfree;
          *(_DWORD *)v42 = v127->next;
          *(_DWORD *)(v42 + 4) = v136;
          *(_DWORD *)(v42 + 8) = value;
          *(_DWORD *)(v42 + 12) = v138;
          v140 = v127->domain;
          v141 = v127->expires;
          v142 = HIDWORD(v127->expires);
          *(_DWORD *)(v42 + 16) = v127->spath;
          *(_DWORD *)(v42 + 20) = v140;
          *(_DWORD *)(v42 + 24) = v141;
          *(_DWORD *)(v42 + 28) = v142;
          creationtime = v127->creationtime;
          v144 = *(_DWORD *)&v127->prefix;
          v145 = *((_DWORD *)&v127->prefix + 1);
          *(_DWORD *)(v42 + 32) = *(_DWORD *)&v127->tailmatch;
          *(_DWORD *)(v42 + 36) = creationtime;
          *(_DWORD *)(v42 + 40) = v144;
          *(_DWORD *)(v42 + 44) = v145;
          v139(v127);
        }
        else
        {
          v42 = (unsigned int)v13;
        }
        if ( *(&dataa->req.writer_stack_depth + 1) && (*(&v178->set.connect_only + 4) & 0x20) != 0 )
        {
          if ( livecookie )
            v146 = "Replaced";
          else
            v146 = "Added";
          goto LABEL_335;
        }
        if ( livecookie )
          goto LABEL_284;
LABEL_282:
        *(_DWORD *)v124 = v42;
LABEL_283:
        ++dataa->req.doh;
LABEL_284:
        v149 = *(_QWORD *)(v42 + 0x18);
        if ( v149 )
        {
          v150 = dataa;
          if ( v149 < *(_QWORD *)&dataa->req.upload_fromhere )
          {
            dataa->req.upload_fromhere = (char *)v149;
            v150->req.p.file = (FILEPROTO *)HIDWORD(v149);
          }
        }
        return (Cookie *)v42;
      case 3:
        goto LABEL_227;
      case 4:
        goto LABEL_207;
      case 5:
        goto LABEL_211;
      case 6:
        goto LABEL_215;
      default:
        goto LABEL_223;
    }
  }
}
