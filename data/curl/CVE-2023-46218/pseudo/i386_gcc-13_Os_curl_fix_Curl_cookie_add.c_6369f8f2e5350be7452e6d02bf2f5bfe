Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  size_t value; // edi
  const char *v9; // esi
  int v10; // ecx
  char v11; // al
  size_t v12; // eax
  const char *v13; // edx
  char v14; // cl
  size_t v15; // eax
  size_t v16; // ecx
  char v17; // al
  const char *v18; // eax
  const char *name; // esi
  char *v20; // eax
  size_t v21; // edx
  _BYTE *v22; // eax
  _BYTE *v23; // eax
  const char *v24; // eax
  char is_ipnum; // al
  char v26; // si
  int v27; // ecx
  int v28; // eax
  int v29; // esi
  Cookie *v30; // eax
  char v31; // al
  int v32; // eax
  char *v33; // eax
  int v34; // edx
  char *v35; // eax
  size_t v36; // eax
  char *v37; // eax
  char *v38; // eax
  char *v39; // eax
  char *v40; // eax
  int v41; // esi
  char *v42; // edx
  char *v43; // eax
  int v44; // ecx
  char *v45; // eax
  int v46; // eax
  char *v47; // edx
  int (__cdecl *v48)(char *); // edi
  int v49; // eax
  const char *v50; // eax
  int v51; // eax
  bool v52; // di
  int v53; // eax
  int v54; // edx
  int v55; // eax
  unsigned __int8 prefix; // al
  const char *v57; // eax
  bool running; // al
  Cookie *v59; // eax
  int v60; // eax
  Cookie *v61; // esi
  int spath; // eax
  char *v63; // edx
  char *v64; // eax
  int v65; // edx
  size_t v66; // eax
  int v67; // ecx
  char *v68; // edx
  bool v69; // zf
  char *v70; // edx
  const char *v71; // eax
  unsigned int expires; // edx
  unsigned int expires_high; // eax
  char *v75; // [esp-10h] [ebp-F8h]
  Curl_easy *v76; // [esp-8h] [ebp-F0h]
  Curl_easy *v77; // [esp-4h] [ebp-ECh]
  int now; // [esp+Ch] [ebp-DCh]
  bool badcookie; // [esp+11h] [ebp-D7h]
  char v80; // [esp+13h] [ebp-D5h]
  const char *sep; // [esp+14h] [ebp-D4h]
  bool sepa; // [esp+14h] [ebp-D4h]
  const char *v83; // [esp+18h] [ebp-D0h]
  size_t myhash; // [esp+1Ch] [ebp-CCh]
  Cookie *lastcb; // [esp+20h] [ebp-C8h]
  Cookie *lastc; // [esp+20h] [ebp-C8h]
  Cookie *lastca; // [esp+20h] [ebp-C8h]
  char *ptra; // [esp+24h] [ebp-C4h]
  char *ptrb; // [esp+24h] [ebp-C4h]
  char ptrc; // [esp+24h] [ebp-C4h]
  size_t vlen; // [esp+30h] [ebp-B8h]
  size_t vlena; // [esp+30h] [ebp-B8h]
  __int64 vlenb; // [esp+30h] [ebp-B8h]
  size_t vlenc; // [esp+30h] [ebp-B8h]
  Cookie *vlend; // [esp+30h] [ebp-B8h]
  _BYTE *pathlen; // [esp+38h] [ebp-B0h]
  unsigned int pathlena; // [esp+38h] [ebp-B0h]
  Cookie *pathlenb; // [esp+38h] [ebp-B0h]
  Cookie *co; // [esp+3Ch] [ebp-ACh]
  char *tok_buf; // [esp+48h] [ebp-A0h] BYREF
  char date[128]; // [esp+4Ch] [ebp-9Ch] BYREF
  unsigned int v103; // [esp+CCh] [ebp-1Ch]

  value = httpheader;
  v9 = lineptr;
  v103 = __readgsdword(0x14u);
  now = time(0);
  if ( data->req.setcookies > 0x31u )
    return 0;
  co = (Cookie *)Curl_ccalloc(1, 44, v10, v10);
  if ( !co )
    return 0;
  if ( httpheader )
  {
    badcookie = 0;
    if ( strlen(lineptr) <= 0x1388 )
    {
      while ( 1 )
      {
        v11 = *v9;
        v80 = *v9;
        if ( !*v9 || v11 != 32 && v11 != 9 )
        {
          v12 = strcspn(v9, ";\t\r\n=");
          v13 = &v9[v12];
          if ( !v12 )
          {
            v83 = v9;
            goto LABEL_122;
          }
          while ( 1 )
          {
            value = v12--;
            v14 = v9[v12];
            if ( v14 != 32 && v14 != 9 )
              break;
            if ( !v12 )
            {
              value = 0;
              break;
            }
          }
          if ( *v13 == 61 )
          {
            sep = v13;
            pathlen = v13 + 1;
            v15 = strcspn(v13 + 1, ";\r\n");
            v13 = sep;
            vlena = v15;
            v16 = v15;
            v83 = &pathlen[v15];
            while ( 1 )
            {
              if ( !vlena )
                goto LABEL_35;
              v17 = sep[vlena];
              if ( v17 != 32 && v17 != 9 )
                break;
              --vlena;
            }
            while ( 1 )
            {
              if ( !vlena )
                goto LABEL_35;
              if ( *pathlen != 32 && *pathlen != 9 )
                break;
              ++pathlen;
              --vlena;
            }
            if ( memchr(pathlen, 9, vlena) )
            {
              freecookie(co);
              if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
              {
                v77 = data;
                v76 = data;
                v18 = "cookie contains TAB, dropping";
                goto LABEL_41;
              }
              return 0;
            }
LABEL_35:
            sepa = httpheader;
          }
          else
          {
            v16 = 0;
            v83 = v13;
            pathlen = 0;
            sepa = 0;
            vlena = 0;
          }
          if ( value > 0xFFE || vlena > 0xFFE || value + vlena > 0x1000 )
          {
            freecookie(co);
            if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
            {
              v77 = (Curl_easy *)vlena;
              v18 = "oversized cookie dropped, name/val %zu + %zu bytes";
              v76 = (Curl_easy *)value;
LABEL_41:
              Curl_infof(data, v18, v76, v77);
            }
            return 0;
          }
          if ( v80 == 95 && value > 6 && v9[1] == 95 )
          {
            if ( curl_strnequal("__Secure-", v9, 9, v13) )
            {
              co->prefix |= 1u;
            }
            else if ( curl_strnequal("__Host-", v9, 7, 0) )
            {
              co->prefix |= 2u;
            }
          }
          if ( !co->name )
          {
            if ( sepa )
            {
              strstore(&co->name, v9, value);
              strstore(&co->value, pathlen, vlena);
              name = co->name;
              if ( name )
              {
                value = (size_t)co->value;
                if ( value )
                {
                  if ( !*(_BYTE *)(value + strcspn((const char *)value, badoctets_0))
                    && !name[strcspn(name, badoctets_0)] )
                  {
                    goto LABEL_122;
                  }
                  if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
                    Curl_infof(data, "invalid octets in name/value, cookie dropped", data, data);
                }
              }
            }
            goto LABEL_215;
          }
          if ( vlena )
          {
            if ( value == 4 )
            {
LABEL_69:
              if ( !curl_strnequal("path", v9, 4, v16) )
                goto LABEL_122;
              strstore(&co->path, pathlen, vlena);
              if ( co->path )
              {
                Curl_cfree(co->spath);
                v20 = sanitize_cookie_path(co->path);
                co->spath = v20;
                if ( v20 )
                  goto LABEL_122;
              }
              goto LABEL_215;
            }
            if ( value == 6 )
            {
LABEL_74:
              LOBYTE(v21) = (vlena != 0) & (curl_strnequal("domain", v9, 6, v13) != 0);
              value = v21;
              if ( !(_BYTE)v21 )
                goto LABEL_122;
              v22 = pathlen;
              if ( *pathlen == 46 )
              {
                ++pathlen;
                --vlena;
              }
              if ( vlena == 9 && curl_strnequal(pathlen, "localhost", 9, v22)
                || (v23 = memchr(pathlen, 46, vlena)) != 0 && vlena - (v23 - pathlen) > 1 )
              {
                v24 = domain;
                if ( !domain )
                  v24 = pathlen;
              }
              else
              {
                v24 = ":";
                domain = ":";
              }
              is_ipnum = Curl_host_is_ipnum(v24);
              v26 = is_ipnum;
              if ( domain )
              {
                if ( is_ipnum )
                {
                  if ( !strncmp(pathlen, domain, vlena) && strlen(domain) == vlena )
                    goto LABEL_87;
                }
                else if ( cookie_tailmatch(pathlen, vlena, domain) )
                {
                  goto LABEL_87;
                }
                badcookie = value;
                if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
                  Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", pathlen, data);
                goto LABEL_122;
              }
LABEL_87:
              strstore(&co->domain, pathlen, vlena);
              if ( co->domain )
              {
                if ( !v26 )
                  co->tailmatch = 1;
                goto LABEL_122;
              }
LABEL_215:
              v59 = co;
LABEL_216:
              freecookie(v59);
              return 0;
            }
LABEL_100:
            if ( value != 7 || curl_strnequal("version", v9, 7, co) )
              goto LABEL_122;
            if ( curl_strnequal("max-age", v9, 7, 7) )
            {
              if ( *pathlen == 34 )
                ++pathlen;
              v28 = curlx_strtoofft(pathlen, 0, 10, &co->expires);
              if ( v28 == 1 )
                goto LABEL_110;
              if ( v28 != 2 )
              {
                if ( v28 )
                  goto LABEL_122;
                vlenb = co->expires;
                if ( vlenb )
                {
                  value = now >> 31;
                  if ( 0x7FFFFFFFFFFFFFFFLL - now >= vlenb )
                  {
                    co->expires = now + vlenb;
                    goto LABEL_122;
                  }
LABEL_110:
                  LODWORD(co->expires) = -1;
                  HIDWORD(co->expires) = 0x7FFFFFFF;
                  goto LABEL_122;
                }
              }
LABEL_116:
              v30 = co;
              LODWORD(co->expires) = 1;
            }
            else
            {
              if ( !curl_strnequal("expires", v9, 7, v27) || co->expires || vlena > 0x7F )
                goto LABEL_122;
              qmemcpy(date, pathlen, vlena);
              date[vlena] = 0;
              v29 = Curl_getdate_capped(date);
              value = v29 >> 31;
              if ( !v29 )
                goto LABEL_116;
              v30 = co;
              if ( v29 >> 31 != -1 )
              {
                LODWORD(co->expires) = v29;
                HIDWORD(co->expires) = value;
                goto LABEL_122;
              }
              LODWORD(co->expires) = 0;
            }
            value = 0;
            HIDWORD(v30->expires) = 0;
            goto LABEL_122;
          }
          if ( value == 6 )
          {
            if ( curl_strnequal("secure", v9, 6, co) )
            {
              if ( secure || !c->running )
              {
                co->secure = 1;
                goto LABEL_122;
              }
              goto LABEL_215;
            }
            if ( !sepa )
              goto LABEL_122;
            goto LABEL_74;
          }
          if ( value != 8 )
          {
            if ( !sepa )
              goto LABEL_122;
            if ( value == 4 )
              goto LABEL_69;
            goto LABEL_100;
          }
          if ( curl_strnequal("httponly", v9, 8, 8) )
            co->httponly = 1;
          while ( 1 )
          {
LABEL_122:
            v31 = *v83;
            if ( !*v83 )
              goto LABEL_128;
            if ( v31 != 32 && v31 != 9 )
              break;
            ++v83;
          }
          if ( v31 != 59 )
          {
LABEL_128:
            if ( badcookie )
              goto LABEL_215;
            if ( !co->domain )
            {
              if ( domain )
              {
                v32 = Curl_cstrdup(domain);
                co->domain = (char *)v32;
                if ( !v32 )
                  goto LABEL_215;
              }
            }
            if ( !co->path )
            {
              if ( path )
              {
                v33 = strchr(path, 63);
                if ( v33 )
                {
                  value = (size_t)path;
                  v35 = (char *)Curl_memrchr(path, 47, v33 - path, v34);
                }
                else
                {
                  v35 = strrchr(path, 47);
                }
                if ( v35 )
                {
                  v36 = v35 - path;
                  pathlena = v36 + 1;
                  vlenc = v36;
                  v37 = (char *)Curl_cmalloc(v36 + 2);
                  co->path = v37;
                  if ( !v37 )
                    goto LABEL_215;
                  qmemcpy(v37, path, pathlena);
                  value = (size_t)&v37[pathlena];
                  co->path[vlenc + 1] = 0;
                  v38 = sanitize_cookie_path(co->path);
                  co->spath = v38;
                  if ( !v38 )
                    goto LABEL_215;
                }
              }
            }
            if ( !co->name )
              goto LABEL_215;
            ++data->req.setcookies;
            goto LABEL_182;
          }
          v9 = v83;
        }
        ++v9;
      }
    }
LABEL_9:
    Curl_cfree(co);
    return 0;
  }
  tok_buf = 0;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
  {
    v9 = lineptr + 10;
    co->httponly = 1;
  }
  if ( *v9 == 35 )
    goto LABEL_9;
  v39 = strchr(v9, 13);
  if ( v39 )
    *v39 = 0;
  v40 = strchr(v9, 10);
  if ( v40 )
    *v40 = 0;
  v75 = (char *)v9;
  v41 = 0;
  v42 = strtok_r(v75, "\t", &tok_buf);
  v43 = (char *)&Curl_cstrdup;
  while ( 1 )
  {
    v44 = value ^ 1;
    LOBYTE(vlen) = (value ^ 1) & (v42 != 0);
    if ( !(_BYTE)vlen )
      break;
    switch ( v41 )
    {
      case 0:
        if ( *v42 == 46 )
          ++v42;
        v45 = (char *)Curl_cstrdup(v42);
        co->domain = v45;
        goto LABEL_175;
      case 1:
        LOBYTE(v43) = (value ^ 1) & (v42 != 0);
        co->tailmatch = curl_strequal(v42, "TRUE", v43, v43) != 0;
        goto LABEL_176;
      case 2:
        ptra = v42;
        v46 = strcmp("TRUE", v42);
        v47 = ptra;
        v48 = (int (__cdecl *)(char *))Curl_cstrdup;
        if ( v46 && (v49 = strcmp("FALSE", ptra), v47 = ptra, v49) )
        {
          v50 = (const char *)v48(ptra);
          co->path = (char *)v50;
          if ( v50 )
          {
            v45 = sanitize_cookie_path(v50);
            co->spath = v45;
LABEL_175:
            LOBYTE(vlen) = v45 == 0;
          }
        }
        else
        {
          lastcb = (Cookie *)v47;
          ptrb = (char *)v48("/");
          co->path = ptrb;
          v51 = Curl_cstrdup("/");
          v44 = (int)co;
          v52 = vlen;
          v42 = (char *)lastcb;
          co->spath = (char *)v51;
          if ( v51 )
          {
            v44 = (int)ptrb;
            v52 = ptrb == 0;
          }
LABEL_163:
          co->secure = 0;
          if ( !curl_strequal(v42, "TRUE", v44, v44) )
            goto LABEL_164;
          if ( secure || (v41 = 3, c->running) )
          {
            co->secure = 1;
LABEL_164:
            v41 = 3;
            LOBYTE(vlen) = v52;
          }
        }
LABEL_177:
        ++v41;
        v43 = strtok_r(0, "\t", &tok_buf);
        value = vlen;
        v42 = v43;
        break;
      case 3:
        v52 = httpheader;
        goto LABEL_163;
      case 4:
        LOBYTE(vlen) = curlx_strtoofft(v42, 0, 10, &co->expires) != 0;
        goto LABEL_177;
      case 5:
        v53 = Curl_cstrdup(v42);
        co->name = (char *)v53;
        if ( !v53 )
          goto LABEL_177;
        if ( curl_strnequal("__Secure-", v53, 9, v54) )
        {
          co->prefix |= 1u;
        }
        else if ( curl_strnequal("__Host-", co->name, 7, co) )
        {
          co->prefix |= 2u;
        }
LABEL_176:
        LOBYTE(vlen) = httpheader;
        goto LABEL_177;
      case 6:
        v45 = (char *)Curl_cstrdup(v42);
        co->value = v45;
        goto LABEL_175;
      default:
        goto LABEL_176;
    }
  }
  if ( v41 == 6 )
  {
    v41 = 7;
    v55 = Curl_cstrdup(&LC1);
    co->value = (char *)v55;
    if ( !v55 )
      goto LABEL_215;
  }
  if ( v41 != 7 || (_BYTE)value )
    goto LABEL_215;
LABEL_182:
  prefix = co->prefix;
  if ( (prefix & 1) != 0 )
  {
    value = (size_t)co;
    if ( !co->secure )
      goto LABEL_193;
  }
  if ( (prefix & 2) != 0 )
  {
    if ( !co->secure )
      goto LABEL_215;
    v57 = co->path;
    if ( !v57 || strcmp(v57, "/") || co->tailmatch )
      goto LABEL_215;
  }
  running = c->running;
  if ( !running )
  {
    value = (size_t)c;
    if ( c->newsession && !HIDWORD(co->expires) )
    {
      value = (size_t)co;
      if ( !LODWORD(co->expires) )
      {
LABEL_193:
        v59 = (Cookie *)value;
        goto LABEL_216;
      }
    }
  }
  co->livecookie = running;
  v60 = c->lastct + 1;
  c->lastct = v60;
  co->creationtime = v60;
  if ( !noexpire )
    remove_expired(c);
  ptrc = 0;
  myhash = cookiehash(co->domain);
  v61 = c->cookies[myhash];
  spath = 0;
  vlend = 0;
  pathlenb = 0;
  lastc = 0;
  while ( v61 )
  {
    spath = curl_strequal(v61->name, co->name, spath, spath);
    if ( !spath )
      goto LABEL_198;
    v63 = v61->domain;
    spath = (int)co->domain;
    if ( v63 )
    {
      if ( !spath )
        goto LABEL_198;
      spath = curl_strequal(v63, spath, value, value);
      if ( !spath )
        goto LABEL_198;
    }
    else if ( spath )
    {
      goto LABEL_198;
    }
    value = (size_t)v61->spath;
    if ( value )
    {
      spath = (int)co->spath;
      lastca = (Cookie *)spath;
      if ( spath )
      {
        if ( v61->secure )
        {
          spath = (int)co;
          if ( !co->secure && !secure )
          {
            v64 = strchr((const char *)(value + 1), 47);
            v66 = v64 ? (size_t)&v64[-value] : strlen((const char *)value);
            spath = curl_strnequal(value, lastca, v66, v65);
            if ( spath )
            {
              if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
                Curl_infof(
                  data,
                  "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                  co->name,
                  co->domain);
              goto LABEL_215;
            }
          }
        }
      }
    }
LABEL_198:
    if ( pathlenb )
      goto LABEL_199;
    spath = curl_strequal(v61->name, co->name, spath, spath);
    if ( !spath )
      goto LABEL_199;
    v68 = v61->domain;
    spath = (int)co->domain;
    if ( v68 )
    {
      if ( !spath || (spath = curl_strequal(v68, spath, value, value)) == 0 )
      {
LABEL_221:
        if ( !ptrc )
          goto LABEL_222;
        goto LABEL_226;
      }
      spath = (int)co;
      LOBYTE(spath) = co->tailmatch;
      v69 = v61->tailmatch == (unsigned __int8)spath;
    }
    else
    {
      v69 = spath == 0;
    }
    if ( !v69 )
      goto LABEL_221;
LABEL_226:
    spath = (int)v61->spath;
    v70 = co->spath;
    if ( spath && (!v70 || (spath = curl_strequal(spath, v70, v67, v67)) == 0)
      || (spath = (int)co, LOBYTE(spath) = co->spath == 0, (v61->spath == 0) != (_BYTE)spath) )
    {
LABEL_222:
      ptrc = 0;
      goto LABEL_199;
    }
    ptrc = co->livecookie;
    if ( ptrc )
    {
      spath = (int)co;
      vlend = v61;
      pathlenb = co;
    }
    else
    {
      if ( v61->livecookie )
        goto LABEL_215;
      spath = (int)co;
      vlend = v61;
      ptrc = 1;
      pathlenb = co;
    }
LABEL_199:
    lastc = v61;
    v61 = v61->next;
  }
  if ( pathlenb )
  {
    pathlenb->next = vlend->next;
    pathlenb->creationtime = vlend->creationtime;
    Curl_cfree(vlend->name);
    Curl_cfree(vlend->value);
    Curl_cfree(vlend->domain);
    Curl_cfree(vlend->path);
    Curl_cfree(vlend->spath);
    qmemcpy(vlend, pathlenb, sizeof(Cookie));
    Curl_cfree(pathlenb);
    co = vlend;
  }
  if ( c->running && (*(&data->set.connect_only + 4) & 0x20) != 0 )
  {
    v71 = "Added";
    if ( ptrc )
      v71 = "Replaced";
    Curl_infof(data, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld", v71, co->name);
  }
  if ( !ptrc )
  {
    if ( lastc )
      lastc->next = co;
    else
      c->cookies[myhash] = co;
    ++c->numcookies;
  }
  expires = co->expires;
  expires_high = HIDWORD(co->expires);
  if ( (expires_high || expires) && __SPAIR64__(expires_high, expires) < c->next_expiration )
  {
    LODWORD(c->next_expiration) = expires;
    HIDWORD(c->next_expiration) = expires_high;
  }
  return co;
}
