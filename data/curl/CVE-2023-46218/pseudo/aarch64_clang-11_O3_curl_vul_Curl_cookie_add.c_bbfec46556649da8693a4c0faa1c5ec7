Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        const char *domain,
        char *path,
        bool secure)
{
  time_t v16; // x0
  unsigned int setcookies; // w8
  __int64 v18; // x28
  __int64 v19; // x0
  __int64 v20; // x19
  const char *j; // x26
  int v22; // w24
  size_t v23; // x0
  size_t v24; // x28
  const char *v25; // x20
  unsigned __int64 v26; // x22
  int v27; // w8
  const char *v28; // x23
  size_t v29; // x0
  size_t v30; // x20
  const char *v31; // x8
  int v32; // w9
  __int64 k; // x9
  int v34; // w11
  size_t v35; // x28
  int v36; // w26
  char v37; // w8
  __int64 v38; // x0
  const char *v39; // x0
  _BYTE *v40; // x22
  size_t v41; // x23
  size_t v42; // x8
  __int64 v43; // x0
  __int64 v44; // x0
  const char *v45; // x22
  __int64 v46; // x23
  int v47; // w8
  _QWORD *v48; // x22
  const char *v49; // x0
  int v50; // w0
  int v51; // w0
  _BOOL8 v52; // x9
  const char *v53; // x22
  size_t v54; // x23
  _BYTE *v55; // x0
  char is_ipnum; // w27
  const char *v57; // x0
  size_t v58; // x0
  const char *v59; // x28
  size_t v60; // x27
  __int64 v61; // x0
  __int64 v62; // x8
  __int64 v63; // x0
  __int64 v64; // x0
  __int64 v65; // x8
  int v66; // t1
  char *v67; // x0
  char *v68; // x0
  char *v69; // x0
  const char *v70; // x22
  int v71; // w23
  int v72; // w28
  const char *v73; // x0
  __int64 v74; // x0
  __int64 v75; // x0
  const char *v76; // x0
  _BYTE *v77; // x22
  size_t v78; // x23
  size_t v79; // x8
  __int64 v80; // x0
  char v81; // w8
  __int64 v82; // x0
  __int64 v83; // x0
  int v84; // w23
  __int64 v85; // x0
  __int64 v86; // x0
  char *v87; // x0
  __int64 v88; // x0
  bool v89; // w20
  char v90; // w8
  __int64 v91; // x0
  char *v92; // x0
  char *v93; // x0
  signed __int64 v94; // x20
  void *v95; // x0
  const char *v96; // x0
  _BYTE *v97; // x22
  size_t v98; // x23
  size_t v99; // x8
  __int64 v100; // x0
  int v101; // w8
  time_t v102; // x0
  curl_off_t next_expiration; // x8
  time_t v104; // x22
  Cookie **v105; // x20
  Cookie *next; // x8
  __int64 v107; // x22
  int v108; // w26
  Cookie *v109; // x25
  char *v110; // x0
  __int64 v111; // x1
  const char *spath; // x23
  __int64 v113; // x24
  char *v114; // x0
  size_t v115; // x2
  char *v116; // x0
  __int64 v117; // x1
  bool v118; // zf
  int v119; // w8
  char *v120; // x0
  __int64 v121; // x1
  const char *v122; // x0
  __int128 v123; // q0
  __int128 v124; // q1
  __int128 v125; // q2
  Cookie **v126; // x8
  curl_off_t v127; // x8
  __int64 i; // x20
  Cookie *v129; // x26
  Cookie *v130; // x27
  Cookie *v131; // x23
  curl_off_t expires; // x8
  Cookie **p_next; // x8
  const char *v134; // x2
  __int64 v136; // [xsp+8h] [xbp-C8h]
  char *s; // [xsp+10h] [xbp-C0h]
  __int64 *v138; // [xsp+18h] [xbp-B8h]
  char v139; // [xsp+24h] [xbp-ACh]
  bool v140; // [xsp+30h] [xbp-A0h]
  bool v141; // [xsp+30h] [xbp-A0h]
  bool v142; // [xsp+34h] [xbp-9Ch]
  Curl_easy *v143; // [xsp+38h] [xbp-98h]
  time_t v144; // [xsp+40h] [xbp-90h]
  char *dest[17]; // [xsp+48h] [xbp-88h] BYREF

  v16 = time(0uLL);
  setcookies = data->req.setcookies;
  v18 = 0LL;
  v144 = v16;
  if ( setcookies > 0x31 )
    return (Cookie *)v18;
  v143 = data;
  v19 = Curl_ccalloc(1LL, 72LL);
  if ( !v19 )
    return 0LL;
  v20 = v19;
  if ( !httpheader )
  {
    dest[0] = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      *(_BYTE *)(v20 + 59) = 1;
      v66 = (unsigned __int8)lineptr[10];
      lineptr += 10;
      if ( v66 == 35 )
        goto LABEL_143;
    }
    else if ( *lineptr == 35 )
    {
      goto LABEL_143;
    }
    v67 = strchr(lineptr, 13);
    if ( v67 )
      *v67 = 0;
    v142 = secure;
    v68 = strchr(lineptr, 10);
    if ( v68 )
      *v68 = 0;
    v69 = strtok_r(lineptr, "\t", dest);
    if ( !v69 )
      goto LABEL_204;
    v141 = noexpire;
    v70 = v69;
    v71 = 0;
    v72 = 0;
    while ( 1 )
    {
      switch ( v71 )
      {
        case 0:
          if ( *v70 == 46 )
            v73 = v70 + 1;
          else
            v73 = v70;
          v74 = Curl_cstrdup(v73);
          v71 = 0;
          *(_QWORD *)(v20 + 40) = v74;
          v72 |= v74 == 0;
          goto LABEL_192;
        case 1:
          *(_BYTE *)(v20 + 56) = (unsigned int)curl_strequal(v70, "TRUE") != 0;
          v71 = 1;
          goto LABEL_192;
        case 2:
          if ( !strcmp("TRUE", v70) || !strcmp("FALSE", v70) )
          {
            v83 = Curl_cstrdup("/");
            *(_QWORD *)(v20 + 24) = v83;
            v84 = v72 | (v83 == 0);
            v85 = Curl_cstrdup("/");
            v72 = v84 | (v85 == 0);
            *(_QWORD *)(v20 + 32) = v85;
            goto LABEL_176;
          }
          v75 = Curl_cstrdup(v70);
          *(_QWORD *)(v20 + 24) = v75;
          if ( !v75 )
          {
            v71 = 2;
            v72 = 1;
            goto LABEL_192;
          }
          v76 = (const char *)Curl_cstrdup(v75);
          v77 = v76;
          if ( !v76 )
            goto LABEL_191;
          v78 = strlen(v76);
          if ( *v77 == 34 )
            memmove(v77, v77 + 1, v78--);
          if ( v78 )
          {
            v79 = v78 - 1;
            if ( v77[v78 - 1] == 34 )
            {
              --v78;
              v77[v79] = 0;
            }
            if ( *v77 != 47 )
            {
LABEL_189:
              Curl_cfree(v77);
              v86 = Curl_memdup("/", 2LL);
              v77 = (_BYTE *)v86;
              if ( v86 )
                *(_BYTE *)(v86 + 1) = 0;
              goto LABEL_191;
            }
            if ( v78 && v77[v78 - 1] == 47 )
              v77[v78 - 1] = 0;
          }
          else if ( *v77 != 47 )
          {
            goto LABEL_189;
          }
LABEL_191:
          *(_QWORD *)(v20 + 32) = v77;
          v72 |= v77 == 0LL;
          v71 = 2;
LABEL_192:
          v87 = strtok_r(0uLL, "\t", dest);
          ++v71;
          if ( !v87 || (v70 = v87, (v72 & 1) != 0) )
          {
            if ( v71 == 6 )
            {
              v88 = Curl_cstrdup(&unk_2A45);
              LOBYTE(v72) = v72 | (v88 == 0);
              if ( v88 )
                v71 = 7;
              else
                v71 = 6;
              *(_QWORD *)(v20 + 16) = v88;
            }
            v89 = v141;
            if ( (v72 & 1) == 0 && v71 == 7 )
            {
              v90 = *(_BYTE *)(v20 + 64);
              if ( (v90 & 1) != 0 )
              {
LABEL_202:
                if ( !*(_BYTE *)(v20 + 57) )
                  goto LABEL_332;
              }
LABEL_238:
              if ( (v90 & 2) != 0 )
              {
                if ( !*(_BYTE *)(v20 + 57) )
                  goto LABEL_332;
                v122 = *(const char **)(v20 + 24);
                if ( !v122 || strcmp(v122, "/") || *(_BYTE *)(v20 + 56) )
                  goto LABEL_332;
              }
              if ( !c->running && c->newsession && !*(_QWORD *)(v20 + 48) )
                goto LABEL_332;
              *(_BYTE *)(v20 + 58) = c->running;
              v101 = c->lastct + 1;
              c->lastct = v101;
              *(_DWORD *)(v20 + 60) = v101;
              if ( !v89 )
              {
                v102 = time(0uLL);
                next_expiration = c->next_expiration;
                v104 = v102;
                if ( v102 >= next_expiration || next_expiration == 0x7FFFFFFFFFFFFFFFLL )
                {
                  c->next_expiration = 0x7FFFFFFFFFFFFFFFLL;
                  for ( i = 0LL; i != 63; ++i )
                  {
                    v129 = c->cookies[i];
                    if ( v129 )
                    {
                      v130 = 0LL;
                      do
                      {
                        while ( 1 )
                        {
                          v131 = v129;
                          expires = v129->expires;
                          v129 = v129->next;
                          if ( !expires || expires >= v104 )
                            break;
                          if ( v130 )
                            p_next = &v130->next;
                          else
                            p_next = &c->cookies[i];
                          *p_next = v129;
                          --c->numcookies;
                          Curl_cfree(v131->domain);
                          Curl_cfree(v131->path);
                          Curl_cfree(v131->spath);
                          Curl_cfree(v131->name);
                          Curl_cfree(v131->value);
                          Curl_cfree(v131);
                          if ( !v129 )
                            goto LABEL_312;
                        }
                        if ( expires && expires < c->next_expiration )
                          c->next_expiration = expires;
                        v130 = v131;
                      }
                      while ( v129 );
                    }
LABEL_312:
                    ;
                  }
                }
              }
              v105 = &c->cookies[cookiehash(*(const char *const *)(v20 + 40))];
              next = *v105;
              if ( *v105 )
              {
                v107 = 0LL;
                v18 = 0LL;
                v108 = 0;
                while ( 1 )
                {
                  v109 = next;
                  if ( !(unsigned int)curl_strequal(next->name, *(_QWORD *)(v20 + 8)) )
                    goto LABEL_246;
                  v110 = v109->domain;
                  v111 = *(_QWORD *)(v20 + 40);
                  if ( v110 )
                  {
                    if ( !v111 || !(unsigned int)curl_strequal(v110, v111) )
                      goto LABEL_246;
                  }
                  else if ( v111 )
                  {
                    goto LABEL_246;
                  }
                  spath = v109->spath;
                  if ( spath )
                  {
                    v113 = *(_QWORD *)(v20 + 32);
                    if ( v113 )
                    {
                      if ( v109->secure && !*(_BYTE *)(v20 + 57) && !v142 )
                      {
                        v114 = strchr(spath + 1, 47);
                        v115 = v114 ? v114 - spath : strlen(spath);
                        if ( (unsigned int)curl_strnequal(spath, v113, v115) )
                        {
                          if ( v143 && (*((_BYTE *)&v143->set + 2238) & 0x10) != 0 )
                            Curl_infof(
                              v143,
                              "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                              *(const char **)(v20 + 8),
                              *(const char **)(v20 + 40));
                          goto LABEL_332;
                        }
                      }
                    }
                  }
LABEL_246:
                  if ( !v107 )
                  {
                    if ( (unsigned int)curl_strequal(v109->name, *(_QWORD *)(v20 + 8)) )
                    {
                      v116 = v109->domain;
                      v117 = *(_QWORD *)(v20 + 40);
                      if ( v116 )
                      {
                        if ( v117 && (unsigned int)curl_strequal(v116, v117) )
                        {
                          v118 = v109->tailmatch == *(unsigned __int8 *)(v20 + 56);
                          goto LABEL_267;
                        }
                        if ( (v108 & 1) == 0 )
                        {
LABEL_277:
                          v108 = 0;
                          goto LABEL_278;
                        }
                      }
                      else
                      {
                        v118 = v117 == 0;
LABEL_267:
                        v119 = v118;
                        if ( ((v108 | v119) & 1) == 0 )
                          goto LABEL_277;
                      }
                      v120 = v109->spath;
                      v121 = *(_QWORD *)(v20 + 32);
                      if ( v120 )
                      {
                        if ( v121 )
                        {
                          if ( (unsigned int)curl_strequal(v120, v121)
                            && (v109->spath != 0LL) != (*(_QWORD *)(v20 + 32) == 0LL) )
                          {
LABEL_280:
                            if ( !*(_BYTE *)(v20 + 58) && v109->livecookie )
                              goto LABEL_332;
                            v108 = 1;
                            v18 = (__int64)v109;
                            v107 = v20;
                            goto LABEL_247;
                          }
                        }
                        else if ( *(_QWORD *)(v20 + 32) )
                        {
                          goto LABEL_280;
                        }
                      }
                      else if ( !v121 )
                      {
                        goto LABEL_280;
                      }
                      goto LABEL_277;
                    }
LABEL_278:
                    v107 = 0LL;
                  }
LABEL_247:
                  next = v109->next;
                  if ( !v109->next )
                  {
                    if ( !v107 )
                      goto LABEL_299;
                    *(_QWORD *)v107 = *(_QWORD *)v18;
                    *(_DWORD *)(v107 + 60) = *(_DWORD *)(v18 + 60);
                    Curl_cfree(*(_QWORD *)(v18 + 8));
                    Curl_cfree(*(_QWORD *)(v18 + 16));
                    Curl_cfree(*(_QWORD *)(v18 + 40));
                    Curl_cfree(*(_QWORD *)(v18 + 24));
                    Curl_cfree(*(_QWORD *)(v18 + 32));
                    *(_OWORD *)v18 = *(_OWORD *)v107;
                    v124 = *(_OWORD *)(v107 + 0x20);
                    v123 = *(_OWORD *)(v107 + 48);
                    v125 = *(_OWORD *)(v107 + 16);
                    *(_QWORD *)(v18 + 64) = *(_QWORD *)(v107 + 64);
                    *(_OWORD *)(v18 + 0x20) = v124;
                    *(_OWORD *)(v18 + 48) = v123;
                    *(_OWORD *)(v18 + 16) = v125;
                    Curl_cfree(v107);
                    goto LABEL_300;
                  }
                }
              }
              v109 = 0LL;
              LOBYTE(v108) = 0;
LABEL_299:
              v18 = v20;
LABEL_300:
              if ( v143 && c->running && (*((_BYTE *)&v143->set + 2238) & 0x10) != 0 )
              {
                if ( (v108 & 1) != 0 )
                  v134 = "Replaced";
                else
                  v134 = "Added";
                Curl_infof(
                  v143,
                  "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
                  v134,
                  *(const char **)(v18 + 8),
                  *(const char **)(v18 + 16),
                  *(const char **)(v18 + 0x28),
                  *(const char **)(v18 + 24),
                  *(_QWORD *)(v18 + 48));
                if ( (v108 & 1) == 0 )
                {
LABEL_304:
                  if ( v109 )
                    v126 = &v109->next;
                  else
                    v126 = v105;
                  *v126 = (Cookie *)v18;
                  ++c->numcookies;
                }
              }
              else if ( (v108 & 1) == 0 )
              {
                goto LABEL_304;
              }
              v127 = *(_QWORD *)(v18 + 48);
              if ( v127 && v127 < c->next_expiration )
                c->next_expiration = v127;
              return (Cookie *)v18;
            }
LABEL_204:
            Curl_cfree(*(_QWORD *)(v20 + 40));
            Curl_cfree(*(_QWORD *)(v20 + 24));
            Curl_cfree(*(_QWORD *)(v20 + 32));
            Curl_cfree(*(_QWORD *)(v20 + 8));
            Curl_cfree(*(_QWORD *)(v20 + 16));
            Curl_cfree(v20);
            return 0LL;
          }
          break;
        case 3:
LABEL_176:
          *(_BYTE *)(v20 + 57) = 0;
          if ( !(unsigned int)curl_strequal(v70, "TRUE") )
            goto LABEL_180;
          if ( secure || c->running )
          {
            *(_BYTE *)(v20 + 57) = 1;
LABEL_180:
            v71 = 3;
          }
          else
          {
            v71 = 3;
            v72 = 1;
          }
          goto LABEL_192;
        case 4:
          v72 |= (unsigned int)curlx_strtoofft(v70, 0LL, 10LL, v20 + 0x30) != 0;
          v71 = 4;
          goto LABEL_192;
        case 5:
          v80 = Curl_cstrdup(v70);
          *(_QWORD *)(v20 + 8) = v80;
          if ( !v80 )
          {
            v71 = 5;
            v72 = 1;
            goto LABEL_192;
          }
          if ( (unsigned int)curl_strnequal("__Secure-", v80, 9LL) )
          {
            v81 = *(_BYTE *)(v20 + 64) | 1;
LABEL_184:
            *(_BYTE *)(v20 + 64) = v81;
            v71 = 5;
            goto LABEL_192;
          }
          if ( (unsigned int)curl_strnequal("__Host-", *(_QWORD *)(v20 + 8), 7LL) )
          {
            v81 = *(_BYTE *)(v20 + 64) | 2;
            goto LABEL_184;
          }
          v71 = 5;
          goto LABEL_192;
        case 6:
          v82 = Curl_cstrdup(v70);
          v72 |= v82 == 0;
          v71 = 6;
          *(_QWORD *)(v20 + 16) = v82;
          goto LABEL_192;
        default:
          goto LABEL_192;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_143:
    Curl_cfree(v20);
    return 0LL;
  }
  s = path;
  v138 = (__int64 *)(v20 + 0x30);
  v140 = noexpire;
  v142 = secure;
  v139 = 0;
  v136 = 0x7FFFFFFFFFFFFFFFLL - v144;
  while ( 1 )
  {
    for ( j = lineptr + 1; ; ++j )
    {
      v22 = (unsigned __int8)*lineptr;
      if ( v22 != 32 && v22 != 9 )
        break;
      ++lineptr;
    }
    v23 = strcspn(lineptr, ";\t\r\n=");
    if ( !v23 )
    {
      v25 = lineptr;
      goto LABEL_69;
    }
    v24 = v23;
    v25 = &lineptr[v23];
    v26 = v23;
    do
    {
      v27 = (unsigned __int8)lineptr[v26 - 1];
      if ( v27 != 32 && v27 != 9 )
        break;
      --v26;
    }
    while ( v26 );
    if ( *v25 == 61 )
    {
      v28 = &lineptr[v23 + 1];
      v29 = strcspn(v28, ";\r\n");
      v30 = v24 + v29;
      if ( v29 )
      {
        v31 = &j[v30];
        while ( 1 )
        {
          v32 = *((unsigned __int8 *)v31 - 1);
          if ( v32 != 32 && v32 != 9 )
            break;
          --v29;
          --v31;
          if ( !v29 )
            goto LABEL_28;
        }
        for ( k = 0LL; k != v29; ++k )
        {
          v34 = (unsigned __int8)j[v24 + k];
          if ( v34 != 32 && v34 != 9 )
          {
            v28 = &j[v24 + k];
            v35 = v29 - k;
            goto LABEL_29;
          }
        }
        v35 = 0LL;
        v28 = v31;
      }
      else
      {
LABEL_28:
        v35 = 0LL;
      }
LABEL_29:
      if ( memchr(v28, 9, v35) )
      {
        Curl_cfree(*(_QWORD *)(v20 + 40));
        Curl_cfree(*(_QWORD *)(v20 + 24));
        Curl_cfree(*(_QWORD *)(v20 + 32));
        Curl_cfree(*(_QWORD *)(v20 + 8));
        Curl_cfree(*(_QWORD *)(v20 + 16));
        Curl_cfree(v20);
        if ( (*((_BYTE *)&v143->set + 2238) & 0x10) != 0 )
          Curl_infof(v143, "cookie contains TAB, dropping");
        return 0LL;
      }
      v25 = &lineptr[v30 + 1];
      v36 = 1;
    }
    else
    {
      v35 = 0LL;
      v36 = 0;
      v28 = 0LL;
    }
    if ( v26 > 0xFFE || v35 > 0xFFE || v35 + v26 > 0x1000 )
    {
      Curl_cfree(*(_QWORD *)(v20 + 40));
      Curl_cfree(*(_QWORD *)(v20 + 24));
      Curl_cfree(*(_QWORD *)(v20 + 32));
      Curl_cfree(*(_QWORD *)(v20 + 8));
      Curl_cfree(*(_QWORD *)(v20 + 16));
      Curl_cfree(v20);
      if ( (*((_BYTE *)&v143->set + 2238) & 0x10) != 0 )
        Curl_infof(v143, "oversized cookie dropped, name/val %zu + %zu bytes", v26, v35);
      return 0LL;
    }
    if ( v22 == 95 && v26 >= 7 && lineptr[1] == 95 )
    {
      if ( (unsigned int)curl_strnequal("__Secure-", lineptr, 9LL) )
      {
        v37 = *(_BYTE *)(v20 + 64) | 1;
      }
      else
      {
        if ( !(unsigned int)curl_strnequal("__Host-", lineptr, 7LL) )
          goto LABEL_42;
        v37 = *(_BYTE *)(v20 + 64) | 2;
      }
      *(_BYTE *)(v20 + 64) = v37;
    }
LABEL_42:
    if ( !*(_QWORD *)(v20 + 8) )
      break;
    if ( v35 )
      goto LABEL_44;
    if ( v26 == 8 )
    {
      if ( (unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
      {
        *(_BYTE *)(v20 + 59) = 1;
        goto LABEL_69;
      }
    }
    else if ( v26 == 6 && (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
    {
      if ( !v142 && c->running )
        goto LABEL_332;
      *(_BYTE *)(v20 + 57) = 1;
      goto LABEL_69;
    }
    if ( v36 )
    {
LABEL_44:
      if ( v26 == 7 )
      {
        if ( (unsigned int)curl_strnequal("version", lineptr, 7LL) )
          goto LABEL_69;
        if ( (unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
        {
          v48 = (_QWORD *)(v20 + 0x30);
          if ( *v28 == 34 )
            v49 = v28 + 1;
          else
            v49 = v28;
          v50 = curlx_strtoofft(v49, 0LL, 10LL, v138);
          if ( v50 )
          {
            if ( v50 != 2 )
            {
              if ( v50 != 1 )
                goto LABEL_69;
LABEL_138:
              *v138 = 0x7FFFFFFFFFFFFFFFLL;
              goto LABEL_69;
            }
            goto LABEL_139;
          }
          v65 = *v138;
          if ( !*v138 )
            goto LABEL_139;
          if ( v136 < v65 )
            goto LABEL_138;
          *v138 = v65 + v144;
        }
        else if ( (unsigned int)curl_strnequal("expires", lineptr, 7LL) )
        {
          v48 = (_QWORD *)(v20 + 0x30);
          if ( v35 <= 0x7F && !*v138 )
          {
            memcpy(dest, v28, v35);
            *((_BYTE *)dest + v35) = 0;
            v64 = Curl_getdate_capped(dest);
            *v138 = v64;
            if ( v64 )
            {
              if ( (v64 & 0x8000000000000000LL) != 0 )
                *v138 = 0LL;
              goto LABEL_69;
            }
LABEL_139:
            *v48 = 1LL;
          }
        }
      }
      else if ( v26 == 6 )
      {
        v51 = curl_strnequal("domain", lineptr, 6LL);
        if ( v35 && v51 )
        {
          v52 = *(unsigned __int8 *)v28 == 46;
          if ( *v28 == 46 )
            v53 = v28 + 1;
          else
            v53 = v28;
          v54 = v35 - v52;
          if ( v35 - v52 == 9 && (unsigned int)curl_strnequal(v53, "localhost", 9LL)
            || (v55 = memchr(v53, 46, v54)) != 0LL && (unsigned __int64)(&v53[v54] - v55) > 1 )
          {
            if ( domain )
              v57 = domain;
            else
              v57 = v53;
            is_ipnum = Curl_host_is_ipnum(v57);
            if ( !domain )
              goto LABEL_118;
            if ( (is_ipnum & 1) != 0 )
              goto LABEL_100;
          }
          else
          {
            domain = ":";
            if ( (Curl_host_is_ipnum(":") & 1) != 0 )
            {
LABEL_100:
              if ( !strncmp(v53, domain, v54) && v54 == strlen(domain) )
              {
                is_ipnum = 1;
                goto LABEL_118;
              }
LABEL_122:
              if ( (*((_BYTE *)&v143->set + 2238) & 0x10) != 0 )
                Curl_infof(v143, "skipped cookie with bad tailmatch domain: %s", v53);
              v139 = 1;
              goto LABEL_69;
            }
          }
          v58 = strlen(domain);
          if ( v58 >= v54 )
          {
            v59 = &domain[v58 - v54];
            v60 = v58;
            if ( (unsigned int)curl_strnequal(v53, v59, v54) )
            {
              if ( v60 == v54 || *(v59 - 1) == 46 )
              {
                is_ipnum = 0;
LABEL_118:
                Curl_cfree(*(_QWORD *)(v20 + 40));
                v61 = Curl_memdup(v53, v54 + 1);
                *(_QWORD *)(v20 + 40) = v61;
                if ( !v61 )
                  goto LABEL_332;
                *(_BYTE *)(v61 + v54) = 0;
                v62 = *(_QWORD *)(v20 + 40);
                if ( is_ipnum & 1 | (v62 == 0) )
                {
                  if ( !v62 )
                    goto LABEL_332;
                  v139 |= v62 == 0;
                }
                else
                {
                  *(_BYTE *)(v20 + 56) = 1;
                }
                goto LABEL_69;
              }
            }
          }
          goto LABEL_122;
        }
      }
      else if ( v26 == 4 && (unsigned int)curl_strnequal("path", lineptr, 4LL) )
      {
        Curl_cfree(*(_QWORD *)(v20 + 24));
        v38 = Curl_memdup(v28, v35 + 1);
        *(_QWORD *)(v20 + 24) = v38;
        if ( !v38 )
          goto LABEL_332;
        *(_BYTE *)(v38 + v35) = 0;
        if ( !*(_QWORD *)(v20 + 24) )
          goto LABEL_332;
        Curl_cfree(*(_QWORD *)(v20 + 32));
        v39 = (const char *)Curl_cstrdup(*(_QWORD *)(v20 + 24));
        if ( !v39 )
          goto LABEL_331;
        v40 = v39;
        v41 = strlen(v39);
        if ( *v40 == 34 )
          memmove(v40, v40 + 1, v41--);
        if ( v41 )
        {
          v42 = v41 - 1;
          if ( v40[v41 - 1] == 34 )
          {
            --v41;
            v40[v42] = 0;
          }
          if ( *v40 == 47 )
          {
            if ( v41 && v40[v41 - 1] == 47 )
            {
              v40[v41 - 1] = 0;
              *(_QWORD *)(v20 + 32) = v40;
              goto LABEL_69;
            }
            goto LABEL_128;
          }
LABEL_126:
          Curl_cfree(v40);
          v63 = Curl_memdup("/", 2LL);
          if ( !v63 )
            goto LABEL_331;
          v40 = (_BYTE *)v63;
          *(_BYTE *)(v63 + 1) = 0;
        }
        else if ( *v40 != 47 )
        {
          goto LABEL_126;
        }
LABEL_128:
        *(_QWORD *)(v20 + 32) = v40;
      }
    }
LABEL_69:
    for ( lineptr = (char *)(v25 + 1); ; ++lineptr )
    {
      v47 = (unsigned __int8)*(lineptr - 1);
      if ( v47 != 32 && v47 != 9 )
        break;
    }
    if ( v47 != 59 )
    {
      if ( (v139 & 1) != 0 )
        goto LABEL_332;
      if ( domain )
      {
        if ( !*(_QWORD *)(v20 + 40) )
        {
          v91 = Curl_cstrdup(domain);
          *(_QWORD *)(v20 + 40) = v91;
          if ( !v91 )
            goto LABEL_332;
        }
      }
      if ( !s
        || *(_QWORD *)(v20 + 24)
        || ((v92 = strchr(s, 63)) == 0LL ? (v93 = strrchr(s, 47)) : (v93 = (char *)Curl_memrchr(s, 47LL, v92 - s)), !v93) )
      {
LABEL_236:
        if ( !*(_QWORD *)(v20 + 8) )
          goto LABEL_332;
        v89 = v140;
        ++v143->req.setcookies;
        v90 = *(_BYTE *)(v20 + 64);
        if ( (v90 & 1) != 0 )
          goto LABEL_202;
        goto LABEL_238;
      }
      v94 = v93 - s;
      v95 = (void *)Curl_cmalloc(v93 - s + 2);
      *(_QWORD *)(v20 + 24) = v95;
      if ( !v95 )
        goto LABEL_332;
      memcpy(v95, s, v94 + 1);
      *(_BYTE *)(*(_QWORD *)(v20 + 24) + v94 + 1) = 0;
      v96 = (const char *)Curl_cstrdup(*(_QWORD *)(v20 + 24));
      if ( v96 )
      {
        v97 = v96;
        v98 = strlen(v96);
        if ( *v97 == 34 )
          memmove(v97, v97 + 1, v98--);
        if ( v98 )
        {
          v99 = v98 - 1;
          if ( v97[v98 - 1] == 34 )
          {
            --v98;
            v97[v99] = 0;
          }
          if ( *v97 == 47 )
          {
            if ( v98 && v97[v98 - 1] == 47 )
              v97[v98 - 1] = 0;
            goto LABEL_235;
          }
        }
        else if ( *v97 == 47 )
        {
LABEL_235:
          *(_QWORD *)(v20 + 32) = v97;
          goto LABEL_236;
        }
        Curl_cfree(v97);
        v100 = Curl_memdup("/", 2LL);
        if ( v100 )
        {
          v97 = (_BYTE *)v100;
          *(_BYTE *)(v100 + 1) = 0;
          goto LABEL_235;
        }
      }
LABEL_331:
      *(_QWORD *)(v20 + 32) = 0LL;
      goto LABEL_332;
    }
  }
  if ( !v36 )
    goto LABEL_332;
  Curl_cfree(0LL);
  v43 = Curl_memdup(lineptr, v26 + 1);
  *(_QWORD *)(v20 + 8) = v43;
  if ( v43 )
    *(_BYTE *)(v43 + v26) = 0;
  Curl_cfree(*(_QWORD *)(v20 + 16));
  v44 = Curl_memdup(v28, v35 + 1);
  *(_QWORD *)(v20 + 16) = v44;
  if ( v44 )
    *(_BYTE *)(v44 + v35) = 0;
  v45 = *(const char **)(v20 + 8);
  if ( !v45 )
    goto LABEL_332;
  v46 = *(_QWORD *)(v20 + 16);
  if ( !v46 )
    goto LABEL_332;
  if ( !*(_BYTE *)(v46 + strcspn(*(const char **)(v20 + 16), invalid_octets_badoctets))
    && !v45[strcspn(v45, invalid_octets_badoctets)] )
  {
    goto LABEL_69;
  }
  if ( (*((_BYTE *)&v143->set + 2238) & 0x10) != 0 )
    Curl_infof(v143, "invalid octets in name/value, cookie dropped");
LABEL_332:
  Curl_cfree(*(_QWORD *)(v20 + 40));
  Curl_cfree(*(_QWORD *)(v20 + 24));
  Curl_cfree(*(_QWORD *)(v20 + 32));
  Curl_cfree(*(_QWORD *)(v20 + 8));
  Curl_cfree(*(_QWORD *)(v20 + 16));
  Curl_cfree(v20);
  return 0LL;
}
