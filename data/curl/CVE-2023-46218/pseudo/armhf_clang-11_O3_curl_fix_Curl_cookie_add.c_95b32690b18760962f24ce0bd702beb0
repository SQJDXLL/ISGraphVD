Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  time_t v12; // r5
  int v13; // r0
  char *v14; // r11
  int v15; // r9
  _QWORD *v16; // r0
  Curl_easy *v17; // r9
  char *v18; // r8
  int v19; // r4
  bool v20; // zf
  bool v21; // zf
  size_t v22; // r0
  size_t v23; // r6
  char *v24; // r2
  size_t v25; // r0
  int v26; // r1
  bool v27; // zf
  unsigned int v28; // r10
  char *v29; // r8
  const char *v30; // r6
  int v31; // r5
  char *v32; // r7
  int v33; // r1
  bool v34; // zf
  bool v35; // zf
  size_t v36; // r0
  size_t v37; // r9
  int v38; // r1
  bool v39; // zf
  char *v40; // r0
  bool v41; // cc
  char v42; // r0
  char *v43; // r1
  int v44; // r2
  int v45; // r3
  bool v46; // zf
  int v47; // r0
  const char *v48; // r0
  char *v49; // r6
  size_t v50; // r7
  const char *v51; // r5
  int v52; // r0
  void (__fastcall *v53)(_DWORD); // r1
  int v54; // r0
  bool v55; // zf
  _DWORD *v56; // r4
  char *v57; // r0
  int v58; // r0
  int v59; // r0
  bool v60; // zf
  const char *v61; // r10
  const char *v62; // r0
  const char *v63; // r7
  size_t v64; // r0
  const char *v65; // r1
  int v66; // r6
  const char *v67; // r11
  int v68; // r0
  const char *v69; // r0
  int is_ipnum; // r0
  size_t v71; // r0
  size_t v72; // r5
  int v73; // r11
  const char *v74; // r0
  int v75; // r1
  bool v76; // zf
  int v77; // r0
  int v78; // r0
  int v79; // r0
  char *v80; // r0
  char *v81; // r0
  char *v82; // r0
  const char *v83; // r6
  int v84; // r11
  int v85; // r10
  int (**v86)(void); // r4
  const char *v87; // r0
  int v88; // r0
  _BOOL4 v89; // r0
  int v90; // r0
  const char *v91; // r0
  char *v92; // r6
  size_t v93; // r5
  size_t v94; // r0
  int v95; // r0
  int v96; // r0
  int v97; // r0
  int (*v98)(void); // r1
  int v99; // r5
  int v100; // r0
  char *v101; // r0
  void (__fastcall **v102)(int); // r5
  int v104; // r0
  Curl_easy *v105; // r5
  bool v106; // zf
  void (__fastcall **v107)(int); // r4
  void (__fastcall **v108)(int); // r5
  int v109; // r0
  char *v110; // r0
  char *v111; // r0
  void (__fastcall **v112)(int); // r5
  int v113; // r4
  void *v114; // r0
  const char *v115; // r0
  char *v116; // r5
  size_t v117; // r6
  size_t v118; // r0
  int v119; // r0
  CookieInfo *v120; // r3
  int v121; // r0
  int v122; // r8
  time_t v123; // r9
  curl_off_t *p_next_expiration; // r11
  int next_expiration_high; // r1
  Cookie *v126; // r4
  size_t v127; // r0
  CookieInfo *v128; // r6
  Cookie *next; // r0
  Cookie **v130; // r9
  Cookie *v131; // r11
  char v132; // r10
  Cookie *v133; // r5
  char *v134; // r0
  int v135; // r1
  const char *spath; // r6
  int v137; // r8
  bool v138; // zf
  bool v139; // zf
  char *v140; // r0
  size_t v141; // r2
  char *v142; // r0
  int v143; // r1
  char v144; // r0
  int v145; // r0
  char *v146; // r0
  int v147; // r1
  bool v148; // zf
  void (__fastcall **v149)(int); // r4
  const char *v150; // r0
  bool v151; // zf
  void (__fastcall **v152)(int); // r4
  int creationtime; // r2
  char *name; // r0
  void (__fastcall **v155)(Cookie **); // r8
  char *v156; // r2
  char *v157; // r3
  char *v158; // r4
  char *v159; // r6
  char *v160; // r7
  Cookie *v161; // r2
  Cookie *v162; // r3
  int v163; // r4
  Cookie *v164; // r6
  Cookie *v165; // r7
  bool v166; // zf
  __int64 v167; // r0
  curl_off_t *v168; // r6
  unsigned int next_expiration; // t1
  _DWORD *v170; // r5
  Cookie *v171; // r4
  Cookie **p_next; // r7
  Cookie *v173; // r6
  curl_off_t expires; // r0
  int v175; // r2
  int v176; // r3
  CookieInfo *v177; // r1
  const char *v178; // r2
  __int64 v179; // [sp+20h] [bp-D0h]
  _QWORD *v180; // [sp+28h] [bp-C8h]
  char *v181; // [sp+2Ch] [bp-C4h]
  char v182; // [sp+30h] [bp-C0h]
  int v184; // [sp+38h] [bp-B8h]
  time_t v185; // [sp+3Ch] [bp-B4h]
  size_t v186; // [sp+3Ch] [bp-B4h]
  Curl_easy *v187; // [sp+40h] [bp-B0h]
  Curl_easy *v188; // [sp+40h] [bp-B0h]
  int v189; // [sp+44h] [bp-ACh]
  CookieInfo *v190; // [sp+48h] [bp-A8h]
  char *dest[41]; // [sp+4Ch] [bp-A4h] BYREF

  v12 = time(0u);
  if ( data->req.setcookies > 0x31u )
    return 0;
  v13 = ((int (__fastcall *)(int, int))*Curl_ccalloc)(1, 48);
  if ( !v13 )
    return 0;
  v14 = (char *)lineptr;
  v15 = v13;
  v185 = v12;
  v184 = noexpire;
  v190 = c;
  v189 = v13;
  if ( !httpheader )
  {
    dest[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v14 = (char *)(lineptr + 0xA);
      *(_BYTE *)(v15 + 35) = 1;
    }
    if ( *v14 == 35 )
      goto LABEL_156;
    v80 = strchr(v14, 13);
    if ( v80 )
      *v80 = 0;
    v81 = strchr(v14, 10);
    if ( v81 )
      *v81 = 0;
    v82 = strtok_r(v14, "\t", dest);
    if ( !v82 )
      goto LABEL_212;
    v83 = v82;
    v84 = 0;
    v85 = 0;
    v86 = (int (**)(void))Curl_cstrdup;
    while ( 1 )
    {
      switch ( v84 )
      {
        case 0:
          v87 = v83 + 1;
          if ( *v83 != 46 )
            v87 = v83;
          v88 = ((int (__fastcall *)(const char *))*v86)(v87);
          *(_DWORD *)(v15 + 20) = v88;
          v84 = 0;
          v89 = v88 == 0;
          goto LABEL_187;
        case 1:
          v84 = 1;
          *(_BYTE *)(v15 + 32) = curl_strequal(v83, "TRUE") != 0;
          goto LABEL_196;
        case 2:
          if ( !strcmp("TRUE", v83) || !strcmp("FALSE", v83) )
          {
            v97 = ((int (__fastcall *)(const char *))*v86)("/");
            v98 = *v86;
            v99 = v97;
            *(_DWORD *)(v15 + 12) = v97;
            v100 = ((int (__fastcall *)(const char *))v98)("/");
            *(_DWORD *)(v15 + 16) = v100;
            v85 |= v99 == 0 || v100 == 0;
LABEL_189:
            *(_BYTE *)(v15 + 33) = 0;
            v84 = 3;
            if ( curl_strequal(v83, "TRUE") )
            {
              if ( secure || v190->running )
              {
                *(_BYTE *)(v15 + 33) = 1;
                goto LABEL_196;
              }
LABEL_193:
              v85 = 1;
              goto LABEL_196;
            }
            goto LABEL_196;
          }
          v90 = ((int (__fastcall *)(const char *))*v86)(v83);
          v84 = 2;
          *(_DWORD *)(v15 + 12) = v90;
          if ( !v90 )
            goto LABEL_193;
          v91 = (const char *)(*v86)();
          if ( !v91 )
          {
            v92 = 0;
            goto LABEL_202;
          }
          v92 = (char *)v91;
          v93 = strlen(v91);
          if ( *v92 == 34 )
            memmove(v92, v92 + 1, v93--);
          if ( !v93 )
          {
            if ( *v92 == 47 )
              goto LABEL_202;
LABEL_201:
            ((void (__fastcall *)(char *))*Curl_cfree)(v92);
            v92 = (char *)Curl_strndup("/", 1);
            goto LABEL_202;
          }
          v94 = v93 - 1;
          if ( v92[v93 - 1] == 34 )
          {
            --v93;
            v92[v94] = 0;
          }
          if ( *v92 != 47 )
            goto LABEL_201;
          if ( v93 && v92[v93 - 1] == 47 )
            v92[v93 - 1] = 0;
LABEL_202:
          *(_DWORD *)(v15 + 16) = v92;
          v89 = v92 == 0;
LABEL_187:
          v85 |= v89;
LABEL_196:
          v101 = strtok_r(0u, "\t", dest);
          ++v84;
          if ( !v101 || (v83 = v101, (v85 & 1) != 0) )
          {
            if ( v84 == 6 )
            {
              v104 = ((int (__fastcall *)(void *))*v86)(&L_str_22);
              v84 = 7;
              *(_DWORD *)(v15 + 8) = v104;
              LOBYTE(v85) = v85 | (v104 == 0);
              if ( !v104 )
                v84 = 6;
            }
            v105 = data;
            v106 = (v85 & 1) == 0;
            if ( (v85 & 1) == 0 )
              v106 = v84 == 7;
            if ( v106 )
              goto LABEL_248;
LABEL_212:
            v107 = (void (__fastcall **)(int))Curl_cfree;
            ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v15 + 20));
            (*v107)(*(_DWORD *)(v15 + 12));
            (*v107)(*(_DWORD *)(v15 + 16));
            (*v107)(*(_DWORD *)(v15 + 4));
            (*v107)(*(_DWORD *)(v15 + 8));
            (*v107)(v15);
            return 0;
          }
          break;
        case 3:
          goto LABEL_189;
        case 4:
          v84 = 4;
          v89 = curlx_strtoofft(v83, 0, 10, v15 + 0x18) != 0;
          goto LABEL_187;
        case 5:
          v95 = ((int (__fastcall *)(const char *))*v86)(v83);
          v84 = 5;
          *(_DWORD *)(v15 + 4) = v95;
          if ( !v95 )
            goto LABEL_193;
          if ( curl_strnequal("__Secure-", v95, 9) )
          {
            *(_BYTE *)(v15 + 40) |= 1u;
          }
          else if ( curl_strnequal("__Host-", *(_DWORD *)(v15 + 4), 7) )
          {
            *(_BYTE *)(v15 + 40) |= 2u;
          }
          goto LABEL_196;
        case 6:
          v96 = ((int (__fastcall *)(const char *))*v86)(v83);
          *(_DWORD *)(v15 + 8) = v96;
          v84 = 6;
          v89 = v96 == 0;
          goto LABEL_187;
        default:
          goto LABEL_196;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_156:
    ((void (__fastcall *)(int))*Curl_cfree)(v15);
    return 0;
  }
  v187 = data;
  HIDWORD(v179) = 0x7FFFFFFF - (v12 >> 0x1F);
  v181 = (char *)&data->set + 1334;
  LODWORD(v179) = ~v12;
  v16 = (_QWORD *)(v15 + 0x18);
  v17 = data;
  v180 = v16;
  v182 = 0;
  while ( 1 )
  {
    v18 = v14 + 1;
    v19 = (unsigned __int8)*v14;
    v20 = v19 == 32;
    if ( v19 != 32 )
      v20 = v19 == 9;
    if ( v20 )
    {
      do
      {
        ++v18;
        v19 = (unsigned __int8)*++v14;
        v21 = v19 == 32;
        if ( v19 != 32 )
          v21 = v19 == 9;
      }
      while ( v21 );
    }
    v22 = strcspn(v14, ";\t\r\n=");
    if ( !v22 )
    {
      v29 = v14;
      goto LABEL_23;
    }
    v23 = v22;
    v24 = &v14[v22];
    v25 = v22 - 1;
    while ( 1 )
    {
      v26 = (unsigned __int8)v14[v25];
      v27 = v26 == 32;
      if ( v26 != 32 )
        v27 = v26 == 9;
      if ( !v27 )
        break;
      if ( --v25 == -1 )
      {
        v28 = 0;
        if ( *v24 != 61 )
          goto LABEL_21;
LABEL_33:
        v36 = strcspn(&v14[v23 + 1], ";\r\n");
        v37 = v23 + v36;
        if ( v36 )
        {
          v32 = &v18[v37];
          while ( 1 )
          {
            v38 = (unsigned __int8)*(v32 - 1);
            v39 = v38 == 32;
            if ( v38 != 32 )
              v39 = v38 == 9;
            if ( !v39 )
              break;
            --v36;
            --v32;
            if ( !v36 )
              goto LABEL_40;
          }
          v43 = &v18[v23];
          v44 = 0;
          while ( 1 )
          {
            v45 = (unsigned __int8)v43[v44];
            v46 = v45 == 32;
            if ( v45 != 32 )
              v46 = v45 == 9;
            if ( !v46 )
              break;
            if ( v36 == ++v44 )
              goto LABEL_41;
          }
          v30 = (const char *)(v36 - v44);
          v32 = &v43[v44];
        }
        else
        {
LABEL_40:
          v32 = &v14[v23 + 1];
LABEL_41:
          v30 = 0;
        }
        if ( !memchr(v32, 9, (size_t)v30) )
        {
          v40 = &v14[v37];
          v17 = v187;
          v31 = 1;
          v29 = v40 + 1;
          goto LABEL_44;
        }
        v112 = (void (__fastcall **)(int))Curl_cfree;
        ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v189 + 20));
        (*v112)(*(_DWORD *)(v189 + 12));
        (*v112)(*(_DWORD *)(v189 + 16));
        (*v112)(*(_DWORD *)(v189 + 4));
        (*v112)(*(_DWORD *)(v189 + 8));
        (*v112)(v189);
        if ( (v181[3] & 0x20) != 0 )
        {
          Curl_infof(v187, "cookie contains TAB, dropping");
          return 0;
        }
        return 0;
      }
    }
    v28 = v25 + 1;
    if ( *v24 == 61 )
      goto LABEL_33;
LABEL_21:
    v29 = v24;
    v30 = 0;
    v31 = 0;
    v32 = 0;
LABEL_44:
    v41 = v28 > 0xFFE;
    if ( v28 <= 0xFFE )
      v41 = (unsigned int)v30 > 0xFFE;
    if ( v41 || (unsigned int)&v30[v28] > 0x1000 )
    {
      v102 = (void (__fastcall **)(int))Curl_cfree;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v189 + 20));
      (*v102)(*(_DWORD *)(v189 + 12));
      (*v102)(*(_DWORD *)(v189 + 16));
      (*v102)(*(_DWORD *)(v189 + 4));
      (*v102)(*(_DWORD *)(v189 + 8));
      (*v102)(v189);
      if ( (v181[3] & 0x20) != 0 )
        Curl_infof(v17, "oversized cookie dropped, name/val %zu + %zu bytes", v28, (size_t)v30);
      return 0;
    }
    if ( v19 == 95 && v28 >= 7 && v14[1] == 95 )
    {
      if ( curl_strnequal("__Secure-", v14, 9) )
      {
        v42 = *(_BYTE *)(v189 + 40) | 1;
      }
      else
      {
        if ( !curl_strnequal("__Host-", v14, 7) )
          goto LABEL_62;
        v42 = *(_BYTE *)(v189 + 40) | 2;
      }
      *(_BYTE *)(v189 + 40) = v42;
    }
LABEL_62:
    if ( !*(_DWORD *)(v189 + 4) )
    {
      if ( !v31 )
        goto LABEL_215;
      v51 = (const char *)Curl_cfree;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(0);
      v52 = Curl_strndup(v14, v28);
      v53 = *(void (__fastcall **)(_DWORD))v51;
      *(_DWORD *)(v189 + 4) = v52;
      v53(*(_DWORD *)(v189 + 8));
      v54 = Curl_strndup(v32, v30);
      v55 = v54 == 0;
      *(_DWORD *)(v189 + 8) = v54;
      if ( v54 )
      {
        v30 = (const char *)v54;
        v51 = *(const char **)(v189 + 4);
        v55 = v51 == 0;
      }
      if ( v55 )
        goto LABEL_215;
      if ( v30[strcspn(v30, invalid_octets_badoctets)] || v51[strcspn(v51, invalid_octets_badoctets)] )
      {
        if ( (v181[3] & 0x20) != 0 )
          Curl_infof(v17, "invalid octets in name/value, cookie dropped");
        goto LABEL_215;
      }
      goto LABEL_23;
    }
    if ( !v30 )
    {
      if ( v28 == 8 )
      {
        if ( curl_strnequal("httponly", v14, 8) )
        {
          *(_BYTE *)(v189 + 35) = 1;
          goto LABEL_23;
        }
      }
      else if ( v28 == 6 && curl_strnequal("secure", v14, 6) )
      {
        if ( !secure && v190->running )
          goto LABEL_215;
        *(_BYTE *)(v189 + 33) = 1;
        goto LABEL_23;
      }
      if ( !v31 )
        goto LABEL_23;
    }
    if ( v28 != 7 )
      break;
    if ( !curl_strnequal("version", v14, 7) )
    {
      if ( curl_strnequal("max-age", v14, 7) )
      {
        v56 = v180;
        v57 = v32 + 1;
        if ( *v32 != 34 )
          v57 = v32;
        v58 = curlx_strtoofft(v57, 0, 10, v180);
        switch ( v58 )
        {
          case 0:
            if ( !*v180 )
              goto LABEL_150;
            if ( v179 >= *v180 )
            {
              *v180 += v185;
              break;
            }
LABEL_148:
            *(_DWORD *)v180 = -1;
            v78 = 0x7FFFFFFF;
LABEL_149:
            v56[1] = v78;
            break;
          case 2:
            goto LABEL_150;
          case 1:
            goto LABEL_148;
        }
      }
      else
      {
        if ( !curl_strnequal("expires", v14, 7) )
          goto LABEL_23;
        v56 = v180;
        if ( (unsigned int)v30 > 0x7F || *v180 )
          goto LABEL_23;
        memcpy(dest, v32, (size_t)v30);
        *((_BYTE *)dest + (_DWORD)v30) = 0;
        v77 = Curl_getdate_capped(dest);
        *v180 = v77;
        if ( !v77 )
        {
LABEL_150:
          *v56 = 1;
          v56[1] = 0;
          goto LABEL_23;
        }
        if ( v77 <= -1 )
        {
          v78 = 0;
          *(_DWORD *)v180 = 0;
          goto LABEL_149;
        }
      }
    }
LABEL_23:
    v14 = v29 + 1;
    v33 = (unsigned __int8)*v29;
    v34 = v33 == 32;
    if ( v33 != 32 )
      v34 = v33 == 9;
    if ( v34 )
    {
      do
      {
        v33 = (unsigned __int8)*v14++;
        v35 = v33 == 32;
        if ( v33 != 32 )
          v35 = v33 == 9;
      }
      while ( v35 );
    }
    if ( v33 != 59 )
      goto LABEL_214;
  }
  if ( v28 != 6 )
  {
    if ( v28 == 4 && curl_strnequal("path", v14, 4) )
    {
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v189 + 12));
      v47 = Curl_strndup(v32, v30);
      *(_DWORD *)(v189 + 12) = v47;
      if ( !v47 )
        goto LABEL_215;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v189 + 16));
      v48 = (const char *)((int (__fastcall *)(_DWORD))*Curl_cstrdup)(*(_DWORD *)(v189 + 12));
      if ( !v48 )
      {
        *(_DWORD *)(v189 + 16) = 0;
        goto LABEL_215;
      }
      v49 = (char *)v48;
      v50 = strlen(v48);
      if ( *v49 == 34 )
        memmove(v49, v49 + 1, v50--);
      if ( v50 )
      {
        if ( v49[v50 - 1] == 34 )
          v49[--v50] = 0;
        if ( *v49 != 47 )
        {
LABEL_121:
          ((void (__fastcall *)(char *))*Curl_cfree)(v49);
          v68 = Curl_strndup("/", 1);
          *(_DWORD *)(v189 + 16) = v68;
          if ( !v68 )
            goto LABEL_215;
          goto LABEL_23;
        }
        if ( v50 && v49[v50 - 1] == 47 )
          v49[v50 - 1] = 0;
      }
      else if ( *v49 != 47 )
      {
        goto LABEL_121;
      }
      *(_DWORD *)(v189 + 16) = v49;
    }
    goto LABEL_23;
  }
  v59 = curl_strnequal("domain", v14, 6);
  v60 = v30 == 0;
  if ( v30 )
    v60 = v59 == 0;
  if ( v60 )
    goto LABEL_23;
  v61 = v32 + 1;
  if ( *v32 == 46 )
    --v30;
  else
    v61 = v32;
  if ( v30 == (_BYTE *)&loc_8 + 1 && curl_strnequal(v61, "localhost", 9)
    || (v62 = (const char *)memchr(v61, 46, (size_t)v30)) != 0 && (unsigned int)(&v61[(_DWORD)v30] - v62) > 1 )
  {
    v63 = domain;
    v67 = v30;
    v69 = domain;
    if ( !domain )
      v69 = v61;
    is_ipnum = Curl_host_is_ipnum(v69);
    v66 = is_ipnum;
    if ( domain )
    {
      v30 = v67;
      if ( !is_ipnum )
        goto LABEL_127;
LABEL_112:
      if ( strncmp(v61, v63, (size_t)v30) )
        goto LABEL_132;
      v64 = strlen(v63);
      v65 = v30;
      v66 = 1;
      v67 = v65;
      if ( v65 != (const char *)v64 )
        goto LABEL_132;
    }
    else
    {
      v63 = 0;
    }
  }
  else
  {
    v63 = ":";
    if ( Curl_host_is_ipnum(":") )
      goto LABEL_112;
LABEL_127:
    v71 = strlen(v63);
    if ( v71 < (unsigned int)v30 )
      goto LABEL_132;
    v72 = v71;
    v73 = &v63[v71] - v30;
    if ( !curl_strnequal(v61, v73, v30) )
      goto LABEL_132;
    v74 = v30;
    v75 = v73;
    v66 = 0;
    v76 = v72 == (_DWORD)v74;
    v67 = v74;
    if ( (const char *)v72 != v74 )
      v76 = *(_BYTE *)(v75 - 1) == 46;
    if ( !v76 )
    {
LABEL_132:
      domain = v63;
      v182 = 1;
      if ( (v181[3] & 0x20) != 0 )
        Curl_infof(v17, "skipped cookie with bad tailmatch domain: %s", v61);
      goto LABEL_23;
    }
  }
  ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v189 + 20));
  v79 = Curl_strndup(v61, v67);
  *(_DWORD *)(v189 + 20) = v79;
  domain = v63;
  if ( !v66 && v79 )
  {
    *(_BYTE *)(v189 + 32) = 1;
    goto LABEL_23;
  }
  if ( v79 )
  {
    v182 |= v79 == 0;
    goto LABEL_23;
  }
  v182 = 1;
LABEL_214:
  if ( (v182 & 1) != 0
    || domain
    && !*(_DWORD *)(v189 + 20)
    && (v109 = ((int (__fastcall *)(const char *))*Curl_cstrdup)(domain), (*(_DWORD *)(v189 + 20) = v109) == 0) )
  {
LABEL_215:
    v108 = (void (__fastcall **)(int))Curl_cfree;
    ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v189 + 20));
    (*v108)(*(_DWORD *)(v189 + 12));
    (*v108)(*(_DWORD *)(v189 + 16));
    (*v108)(*(_DWORD *)(v189 + 4));
    (*v108)(*(_DWORD *)(v189 + 8));
    (*v108)(v189);
    return 0;
  }
  if ( !path || *(_DWORD *)(v189 + 12) )
    goto LABEL_246;
  v110 = strchr(path, 63);
  v111 = v110 ? (char *)Curl_memrchr(path, 47, v110 - path) : strrchr(path, 47);
  if ( !v111 )
    goto LABEL_246;
  v113 = v111 - path;
  v114 = (void *)((int (__fastcall *)(int))*Curl_cmalloc)(v111 - path + 2);
  *(_DWORD *)(v189 + 12) = v114;
  if ( !v114 )
    goto LABEL_215;
  memcpy(v114, path, v113 + 1);
  *(_BYTE *)(*(_DWORD *)(v189 + 12) + v113 + 1) = 0;
  v115 = (const char *)((int (__fastcall *)(_DWORD))*Curl_cstrdup)(*(_DWORD *)(v189 + 12));
  if ( !v115 )
  {
    *(_DWORD *)(v189 + 16) = 0;
    goto LABEL_215;
  }
  v116 = (char *)v115;
  v117 = strlen(v115);
  if ( *v116 == 34 )
    memmove(v116, v116 + 1, v117--);
  if ( !v117 )
  {
    if ( *v116 == 47 )
      goto LABEL_244;
    goto LABEL_245;
  }
  v118 = v117 - 1;
  if ( v116[v117 - 1] == 34 )
  {
    --v117;
    v116[v118] = 0;
  }
  if ( *v116 != 47 )
  {
LABEL_245:
    ((void (__fastcall *)(char *))*Curl_cfree)(v116);
    v119 = Curl_strndup("/", 1);
    *(_DWORD *)(v189 + 16) = v119;
    if ( !v119 )
      goto LABEL_215;
    goto LABEL_246;
  }
  if ( v117 && v116[v117 - 1] == 47 )
    v116[v117 - 1] = 0;
LABEL_244:
  *(_DWORD *)(v189 + 16) = v116;
LABEL_246:
  if ( !*(_DWORD *)(v189 + 4) )
    goto LABEL_215;
  v105 = v17;
  ++v17->req.setcookies;
  v15 = v189;
LABEL_248:
  if ( (*(_BYTE *)(v15 + 40) & 1) != 0 && !*(_BYTE *)(v15 + 33) )
    goto LABEL_309;
  if ( (*(_BYTE *)(v15 + 40) & 2) != 0 )
  {
    v150 = (const char *)*(unsigned __int8 *)(v15 + 33);
    v151 = v150 == 0;
    if ( *(_BYTE *)(v15 + 33) )
    {
      v150 = *(const char **)(v15 + 12);
      v151 = v150 == 0;
    }
    if ( v151 || strcmp(v150, "/") || *(_BYTE *)(v15 + 32) )
      goto LABEL_309;
  }
  v120 = v190;
  if ( !v190->running && v190->newsession && !*(_QWORD *)(v15 + 24) )
  {
LABEL_309:
    v152 = (void (__fastcall **)(int))Curl_cfree;
    ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v15 + 20));
    (*v152)(*(_DWORD *)(v15 + 12));
    (*v152)(*(_DWORD *)(v15 + 16));
    (*v152)(*(_DWORD *)(v15 + 4));
    (*v152)(*(_DWORD *)(v15 + 8));
    (*v152)(v15);
    return 0;
  }
  *(_BYTE *)(v15 + 34) = v190->running;
  v188 = v105;
  v121 = v120->lastct + 1;
  v120->lastct = v121;
  *(_DWORD *)(v15 + 36) = v121;
  if ( !v184 )
  {
    v122 = 0;
    v123 = time(0u);
    p_next_expiration = &v190->next_expiration;
    next_expiration_high = HIDWORD(v190->next_expiration);
    if ( (v123 >> 0x1F) - (next_expiration_high + !__CFSHR__(v123, 0x1F)) < 0 == __OFSUB__(
                                                                                   v123 >> 0x1F,
                                                                                   next_expiration_high,
                                                                                   __CFSHR__(v123, 0x1F))
      || !(~LODWORD(v190->next_expiration) | next_expiration_high ^ 0x7FFFFFFF) )
    {
      *(_DWORD *)p_next_expiration = -1;
      *((_DWORD *)p_next_expiration + 1) = 0x7FFFFFFF;
      v170 = (_DWORD *)Curl_cfree;
      do
      {
        v171 = v190->cookies[v122];
        if ( v171 )
        {
          p_next = 0;
          do
          {
            while ( 1 )
            {
              v173 = v171;
              v171 = v171->next;
              expires = v173->expires;
              v175 = expires | HIDWORD(expires);
              if ( !expires )
                break;
              v176 = (unsigned __int64)(expires - v123) >> 32;
              if ( expires >= v123 )
                break;
              v177 = v190;
              if ( p_next )
                *p_next = v171;
              else
                v190->cookies[v122] = v171;
              --v177->numcookies;
              ((void (__fastcall *)(char *, _DWORD, int, int))*v170)(v173->domain, *v170, v175, v176);
              ((void (__fastcall *)(char *))*v170)(v173->path);
              ((void (__fastcall *)(char *))*v170)(v173->spath);
              ((void (__fastcall *)(char *))*v170)(v173->name);
              ((void (__fastcall *)(char *))*v170)(v173->value);
              ((void (__fastcall *)(Cookie *))*v170)(v173);
              if ( !v171 )
                goto LABEL_335;
            }
            if ( expires && expires < *p_next_expiration )
              *p_next_expiration = expires;
            p_next = &v173->next;
          }
          while ( v171 );
        }
LABEL_335:
        ++v122;
      }
      while ( v122 != 63 );
    }
  }
  v126 = (Cookie *)v189;
  v127 = cookiehash(*(const char *const *)(v189 + 20));
  v128 = v190;
  v186 = v127;
  next = v190->cookies[v127];
  if ( !next )
  {
    v133 = 0;
    v132 = 0;
    goto LABEL_317;
  }
  v130 = 0;
  v131 = 0;
  v132 = 0;
  while ( 2 )
  {
    v133 = next;
    if ( curl_strequal(next->name, *(_DWORD *)(v189 + 4)) )
    {
      v134 = v133->domain;
      v135 = *(_DWORD *)(v189 + 20);
      if ( v134 )
      {
        if ( v135 && curl_strequal(v134, v135) )
        {
LABEL_265:
          spath = v133->spath;
          if ( spath )
          {
            v137 = *(_DWORD *)(v189 + 16);
            v138 = v137 == 0;
            if ( v137 )
              v138 = !v133->secure;
            if ( !v138 )
            {
              v139 = *(_BYTE *)(v189 + 33) == 0;
              if ( !*(_BYTE *)(v189 + 33) )
                v139 = secure == 0;
              if ( v139 )
              {
                v140 = strchr(spath + 1, 47);
                v141 = v140 ? v140 - spath : strlen(spath);
                if ( curl_strnequal(spath, v137, v141) )
                {
                  v148 = v188 == 0;
                  if ( v188 )
                    v148 = (*((_BYTE *)&v188->set + 1337) & 0x20) == 0;
                  if ( !v148 )
                    Curl_infof(
                      v188,
                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                      *(const char **)(v189 + 4),
                      *(const char **)(v189 + 20));
LABEL_304:
                  v149 = (void (__fastcall **)(int))Curl_cfree;
                  ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v189 + 20));
                  (*v149)(*(_DWORD *)(v189 + 12));
                  (*v149)(*(_DWORD *)(v189 + 16));
                  (*v149)(*(_DWORD *)(v189 + 4));
                  (*v149)(*(_DWORD *)(v189 + 8));
                  (*v149)(v189);
                  return 0;
                }
              }
            }
          }
        }
      }
      else if ( !v135 )
      {
        goto LABEL_265;
      }
    }
    if ( !v130 )
    {
      if ( curl_strequal(v133->name, *(_DWORD *)(v189 + 4)) )
      {
        v142 = v133->domain;
        v143 = *(_DWORD *)(v189 + 20);
        if ( v142 )
        {
          if ( v143 && curl_strequal(v142, v143) )
          {
            v144 = v132 | (*(_BYTE *)(v189 + 32)
                         - v133->tailmatch
                         + (v133->tailmatch == *(unsigned __int8 *)(v189 + 32))
                         + v133->tailmatch
                         - *(_BYTE *)(v189 + 32));
            v132 = 0;
            if ( (v144 & 1) == 0 )
              goto LABEL_289;
          }
          else
          {
            v130 = 0;
            if ( (v132 & 1) == 0 )
            {
              v132 = 0;
              goto LABEL_260;
            }
          }
LABEL_284:
          v146 = v133->spath;
          v147 = *(_DWORD *)(v189 + 16);
          if ( !v146 )
          {
            v132 = 0;
            v130 = 0;
            if ( v147 )
              goto LABEL_260;
            goto LABEL_293;
          }
          if ( v147 )
          {
            if ( curl_strequal(v146, v147) )
            {
              v132 = 0;
              v130 = 0;
              if ( (v133->spath != 0) == (*(_DWORD *)(v189 + 16) == 0) )
                goto LABEL_260;
              goto LABEL_293;
            }
          }
          else if ( *(_DWORD *)(v189 + 16) )
          {
LABEL_293:
            v132 = 1;
            if ( *(_BYTE *)(v189 + 34) )
            {
              v131 = v133;
              v130 = (Cookie **)v189;
            }
            else
            {
              v131 = v133;
              v130 = (Cookie **)v189;
              if ( v133->livecookie )
                goto LABEL_304;
            }
            goto LABEL_260;
          }
          v132 = 0;
          v130 = 0;
          goto LABEL_260;
        }
        v145 = (unsigned __int8)(v132 | (v143 == 0));
        v132 = 0;
        if ( (v145 & 1) != 0 )
          goto LABEL_284;
      }
LABEL_289:
      v130 = 0;
    }
LABEL_260:
    next = v133->next;
    if ( v133->next )
      continue;
    break;
  }
  if ( v130 )
  {
    creationtime = v131->creationtime;
    name = v131->name;
    *v130 = v131->next;
    v130[9] = (Cookie *)creationtime;
    v155 = (void (__fastcall **)(Cookie **))Curl_cfree;
    ((void (__fastcall *)(char *))*Curl_cfree)(name);
    (*v155)((Cookie **)v131->value);
    (*v155)((Cookie **)v131->domain);
    (*v155)((Cookie **)v131->path);
    (*v155)((Cookie **)v131->spath);
    v156 = (char *)v130[1];
    v157 = (char *)v130[2];
    v158 = (char *)v130[3];
    v159 = (char *)v130[4];
    v160 = (char *)v130[5];
    v131->next = *v130;
    v131->name = v156;
    v131->value = v157;
    v131->path = v158;
    v131->spath = v159;
    v131->domain = v160;
    v161 = v130[7];
    v162 = v130[8];
    v163 = (int)v130[9];
    v164 = v130[10];
    v165 = v130[11];
    LODWORD(v131->expires) = v130[6];
    HIDWORD(v131->expires) = v161;
    *(_DWORD *)&v131->tailmatch = v162;
    v131->creationtime = v163;
    *(_DWORD *)&v131->prefix = v164;
    *((_DWORD *)&v131->prefix + 1) = v165;
    (*v155)(v130);
    v126 = v131;
  }
  v128 = v190;
LABEL_317:
  if ( !v188 )
    goto LABEL_322;
  v166 = !v128->running;
  if ( v128->running )
    v166 = (*((_BYTE *)&v188->set + 1337) & 0x20) == 0;
  if ( v166 )
  {
LABEL_322:
    if ( (v132 & 1) != 0 )
      goto LABEL_327;
LABEL_323:
    if ( v133 )
      v133->next = v126;
    else
      v128->cookies[v186] = v126;
    ++v128->numcookies;
    goto LABEL_327;
  }
  v178 = "Added";
  if ( (v132 & 1) != 0 )
    v178 = "Replaced";
  Curl_infof(
    v188,
    "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
    v178,
    v126->name,
    v126->value,
    v126->domain,
    v126->path,
    v126->expires);
  if ( (v132 & 1) == 0 )
    goto LABEL_323;
LABEL_327:
  v167 = v126->expires;
  if ( v167 )
  {
    next_expiration = v128->next_expiration;
    v168 = &v128->next_expiration;
    if ( v167 < __SPAIR64__(*((_DWORD *)v168 + 1), next_expiration) )
      *v168 = v167;
  }
  return v126;
}
