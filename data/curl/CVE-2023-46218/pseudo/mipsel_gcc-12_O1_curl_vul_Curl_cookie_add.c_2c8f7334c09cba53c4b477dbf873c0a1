Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v13; // $s4
  Cookie *v14; // $s5
  Cookie *v15; // $s2
  unsigned int v16; // $a0
  size_t v17; // $s0
  int v18; // $v0
  const char *v19; // $s3
  size_t v20; // $s2
  size_t v21; // $v0
  int v22; // $v1
  int v23; // $v0
  int v24; // $s6
  size_t v25; // $a2
  _BYTE *v26; // $v0
  bool v27; // dc
  int v28; // $v0
  const char *v29; // $v0
  int is_ipnum; // $s0
  const char *v31; // $s4
  size_t v32; // $v0
  size_t v33; // $a2
  Curl_easy *v34; // $v0
  const char *name; // $s2
  Cookie *v36; // $a0
  char *value; // $s0
  int v38; // $v0
  char *v39; // $v0
  int v40; // $v0
  int v41; // $v0
  curl_off_t expires; // $v0
  time_t v43; // $a2
  int v44; // $a0
  time_t v45; // $a0
  unsigned int v46; // $a0
  int v47; // $v0
  char *v48; // $s1
  int v49; // $s7
  const char *v50; // $s0
  int v51; // $v0
  char *v52; // $a2
  char *v53; // $v0
  const char *v54; // $s1
  int v55; // $v0
  size_t v56; // $s0
  char *v57; // $a0
  char *v58; // $v0
  char *v59; // $v0
  char *v60; // $v0
  CookieInfo *v61; // $v1
  const char *v62; // $a0
  int v63; // $v0
  Cookie *v64; // $a0
  void (*v65)(Cookie *); // $t9
  CookieInfo *v66; // $v1
  int v67; // $v0
  size_t v68; // $v0
  Cookie **v69; // $s7
  Cookie *v70; // $s0
  int livecookie; // $s6
  Cookie *v72; // $s1
  char *v73; // $a0
  char *v74; // $a1
  const char *spath; // $s3
  char *v76; // $s4
  char *v77; // $v0
  size_t v78; // $a2
  char *v79; // $a0
  char *v80; // $a1
  char *v81; // $a0
  char *v82; // $a1
  Cookie *v83; // $v0
  Cookie *v84; // $v1
  char *v85; // $a2
  char *v86; // $a1
  char *v87; // $a0
  Curl_easy *v88; // $v0
  __int64 v89; // $v0
  CookieInfo *v90; // $a0
  const char *v91; // $a2
  char *v93; // $s6
  char v94[4]; // [sp+30h] [-B8h] BYREF
  CookieInfo *ca; // [sp+34h] [-B4h]
  void (*v96)(Cookie *); // [sp+38h] [-B0h]
  Curl_easy *dataa; // [sp+3Ch] [-ACh]
  const char *domain_0; // [sp+40h] [-A8h]
  _BOOL4 v99; // [sp+44h] [-A4h]
  const char *v100; // [sp+48h] [-A0h]
  time_t now; // [sp+4Ch] [-9Ch]
  void (*v102)(Cookie *); // [sp+50h] [-98h]
  void (*v103)(char **, const char *, size_t); // [sp+54h] [-94h]
  const char *v104; // [sp+58h] [-90h]
  int badcookie; // [sp+5Ch] [-8Ch]
  char *tok_buf; // [sp+60h] [-88h] BYREF
  char date[128]; // [sp+64h] [-84h] BYREF

  dataa = data;
  ca = c;
  v13 = (char *)lineptr;
  domain_0 = domain;
  v100 = path;
  v99 = secure;
  now = time(0u);
  if ( data->req.setcookies >= 0x32u )
    return 0;
  v14 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v14 )
    return 0;
  if ( httpheader )
  {
    if ( strlen(lineptr) < 0x1389 )
    {
      badcookie = 0;
      v102 = freecookie;
      v104 = "path";
      v103 = strstore;
      v96 = freecookie;
      while ( 1 )
      {
        while ( 1 )
        {
          v49 = *v13;
          if ( *v13 )
            break;
          v17 = strcspn(v13, ";\t\r\n=");
          if ( !v17 )
            goto LABEL_126;
LABEL_257:
          v93 = &v13[v17];
          do
          {
            v16 = v17--;
            v18 = v13[v17];
            if ( v18 != 32 && v18 != 9 )
            {
              v17 = v16;
              if ( *v93 == 61 )
              {
                v19 = v93 + 1;
                goto LABEL_253;
              }
              v48 = v93;
              if ( v16 < 0xFFF )
              {
                v19 = 0;
                v24 = 0;
                v20 = 0;
                goto LABEL_24;
              }
              v17 = v16;
              v20 = 0;
              goto LABEL_54;
            }
          }
          while ( v17 );
          v20 = 0;
          if ( *v93 != 61 )
          {
            v48 = v93;
            v19 = 0;
            v24 = 0;
            goto LABEL_24;
          }
          v19 = v93 + 1;
LABEL_253:
          v21 = strcspn(v19, (const char *)v96 + 0x33E4);
          v48 = (char *)&v19[v21];
          if ( !v21 )
          {
LABEL_249:
            v24 = httpheader;
            if ( v17 < 0xFFF )
            {
              v20 = 0;
              goto LABEL_24;
            }
            v20 = 0;
LABEL_54:
            freecookie(v14);
            if ( (*(_DWORD *)(&dataa->set.connect_only + 2) & 0x100000) != 0 )
              Curl_infof(dataa, "oversized cookie dropped, name/val %zu + %zu bytes", v17, v20);
            return 0;
          }
          while ( 1 )
          {
            v20 = v21--;
            v22 = v93[v21 + 1];
            if ( v22 != 32 && v22 != 9 )
              break;
            if ( !v21 )
              goto LABEL_249;
          }
          while ( 2 )
          {
            v23 = *v19;
            if ( v23 == 32 )
            {
              --v20;
LABEL_18:
              ++v19;
              if ( !v20 )
                goto LABEL_22;
              continue;
            }
            break;
          }
          --v20;
          if ( v23 == 9 )
            goto LABEL_18;
          if ( memchr(v19, 9, ++v20) )
          {
            freecookie(v14);
            if ( (*(_DWORD *)(&dataa->set.connect_only + 2) & 0x100000) != 0 )
              Curl_infof(dataa, "cookie contains TAB, dropping");
            return 0;
          }
LABEL_22:
          if ( v17 >= 0xFFF )
            goto LABEL_54;
          v24 = httpheader;
          if ( v20 >= 0xFFF )
            goto LABEL_54;
LABEL_24:
          if ( v20 + v17 >= 0x1001 )
            goto LABEL_54;
          if ( v17 >= 7 && v49 == 95 && v13[1] == 95 )
          {
            if ( curl_strnequal("__Secure-", v13, 9) )
            {
              v14->prefix |= 1u;
            }
            else if ( curl_strnequal("__Host-", v13, 7) )
            {
              v14->prefix |= 2u;
            }
          }
          if ( !v14->name )
          {
            if ( !v24 )
              goto LABEL_69;
            v103(&v14->name, v13, v17);
            v103(&v14->value, v19, v20);
            name = v14->name;
            v36 = v14;
            if ( name )
            {
              value = v14->value;
              if ( value )
              {
                if ( !value[strcspn(v14->value, badoctets_0)] && !name[strcspn(name, badoctets_0)] )
                  goto LABEL_79;
                if ( (*(_DWORD *)(&dataa->set.connect_only + 2) & 0x100000) != 0 )
                {
                  Curl_infof(dataa, "invalid octets in name/value, cookie dropped");
                  v36 = v14;
                  goto LABEL_70;
                }
                goto LABEL_69;
              }
            }
            goto LABEL_70;
          }
          if ( v20 )
            goto LABEL_32;
          if ( v17 == 6 )
          {
            if ( curl_strnequal("secure", v13, 6) )
            {
              if ( v99 || !ca->running )
              {
                v14->secure = 1;
                goto LABEL_79;
              }
              goto LABEL_69;
            }
            if ( !v24 )
            {
              v38 = *v48;
              goto LABEL_80;
            }
LABEL_33:
            if ( v17 == 6 )
            {
              if ( !curl_strnequal((char *)v102 + 0x349C, v13, 6) || !v20 )
                goto LABEL_79;
              if ( *v19 == 46 )
              {
                ++v19;
                --v20;
              }
              if ( v20 != 9 )
              {
                v25 = v20;
                goto LABEL_40;
              }
              v40 = curl_strnequal(v19, "localhost", 9);
              v25 = 9;
              if ( v40 )
              {
                v29 = domain_0;
LABEL_42:
                if ( v29 )
                  goto LABEL_43;
                is_ipnum = Curl_host_is_ipnum(v19);
                v33 = v20;
LABEL_239:
                strstore(&v14->domain, v19, v33);
                v36 = v14;
                if ( v14->domain )
                {
                  if ( !is_ipnum )
                    v14->tailmatch = 1;
                  goto LABEL_79;
                }
LABEL_70:
                freecookie(v36);
                return 0;
              }
LABEL_40:
              v26 = memchr(v19, 46, v25);
              v27 = v26 == 0;
              v28 = v26 - v19;
              if ( v27 )
              {
                domain_0 = ":";
              }
              else
              {
                v27 = v20 - v28 < 2;
                v29 = domain_0;
                if ( !v27 )
                  goto LABEL_42;
                domain_0 = ":";
              }
LABEL_43:
              is_ipnum = Curl_host_is_ipnum(domain_0);
              if ( is_ipnum )
              {
                v31 = domain_0;
                if ( !strncmp(v19, domain_0, v20) )
                {
                  v32 = strlen(v31);
                  v33 = v20;
                  if ( v32 == v20 )
                    goto LABEL_239;
                }
                v34 = dataa;
              }
              else
              {
                v27 = !cookie_tailmatch(v19, v20, domain_0);
                v34 = dataa;
                if ( !v27 )
                {
                  strstore(&v14->domain, v19, v20);
                  if ( v14->domain )
                  {
                    v14->tailmatch = 1;
                    goto LABEL_79;
                  }
                  goto LABEL_69;
                }
              }
              if ( (*(_DWORD *)(&v34->set.connect_only + 2) & 0x100000) != 0 )
                Curl_infof(dataa, "skipped cookie with bad tailmatch domain: %s", v19);
              badcookie = httpheader;
              goto LABEL_79;
            }
LABEL_78:
            if ( v17 == 7 && !curl_strnequal("version", v13, 7) )
            {
              if ( curl_strnequal("max-age", v13, 7) )
              {
                if ( *v19 == 34 )
                  ++v19;
                v41 = curlx_strtoofft(v19, 0, 10, &v14->expires);
                switch ( v41 )
                {
                  case 1:
                    LODWORD(v14->expires) = -1;
                    HIDWORD(v14->expires) = 0x7FFFFFFF;
                    break;
                  case 2:
                    LODWORD(v14->expires) = 1;
                    HIDWORD(v14->expires) = 0;
                    break;
                  case 0:
                    expires = v14->expires;
                    if ( expires )
                    {
                      v43 = now >> 0x1F;
                      v44 = 0x7FFFFFFF - (now >> 0x1F);
                      if ( v44 >= SHIDWORD(expires)
                        && ((v27 = HIDWORD(expires) != v44, v45 = now, v27) || (v45 = now, ~now >= (unsigned int)expires)) )
                      {
                        v46 = expires + v45;
                        LODWORD(v14->expires) = v46;
                        HIDWORD(v14->expires) = (v46 < (unsigned int)expires) + HIDWORD(expires) + v43;
                      }
                      else
                      {
                        LODWORD(v14->expires) = -1;
                        HIDWORD(v14->expires) = 0x7FFFFFFF;
                      }
                    }
                    else
                    {
                      LODWORD(v14->expires) = 1;
                      HIDWORD(v14->expires) = 0;
                    }
                    break;
                }
              }
              else if ( curl_strnequal("expires", v13, 7) && !v14->expires && v20 < 0x80 )
              {
                memcpy(date, v19, v20);
                v94[v20 + 0x34] = 0;
                v47 = Curl_getdate_capped(date);
                if ( v47 )
                {
                  if ( v47 >> 0x1F == -1 )
                  {
                    LODWORD(v14->expires) = 0;
                    HIDWORD(v14->expires) = 0;
                  }
                  else
                  {
                    v14->expires = v47;
                  }
                }
                else
                {
                  LODWORD(v14->expires) = 1;
                  HIDWORD(v14->expires) = 0;
                }
              }
            }
            goto LABEL_79;
          }
          if ( v17 == 8 )
          {
            if ( curl_strnequal("httponly", v13, 8) )
            {
              v14->httponly = 1;
              goto LABEL_79;
            }
            if ( !v24 )
              goto LABEL_79;
            goto LABEL_78;
          }
          if ( !v24 )
            goto LABEL_79;
LABEL_32:
          if ( v17 != 4 )
            goto LABEL_33;
          if ( curl_strnequal(v104, v13, 4) )
          {
            strstore(&v14->path, v19, v20);
            if ( v14->path )
            {
              Curl_cfree(v14->spath);
              v39 = sanitize_cookie_path(v14->path);
              v14->spath = v39;
              if ( !v39 )
              {
                v36 = v14;
                goto LABEL_70;
              }
              goto LABEL_79;
            }
LABEL_69:
            v36 = v14;
            goto LABEL_70;
          }
LABEL_79:
          v38 = *v48;
LABEL_80:
          if ( !v38 )
            goto LABEL_126;
LABEL_118:
          while ( 2 )
          {
            if ( v38 == 32 )
            {
              ++v48;
LABEL_117:
              v38 = *v48;
              if ( !*v48 )
                goto LABEL_126;
              continue;
            }
            break;
          }
          ++v48;
          if ( v38 == 9 )
            goto LABEL_117;
          v13 = v48;
          if ( v38 != 59 )
          {
LABEL_126:
            v36 = v14;
            if ( badcookie )
              goto LABEL_70;
            if ( !v14->domain )
            {
              if ( domain_0 )
              {
                v51 = Curl_cstrdup(domain_0);
                v14->domain = (char *)v51;
                if ( !v51 )
                {
                  v36 = v14;
                  goto LABEL_70;
                }
              }
            }
            v50 = v100;
            if ( !v14->path && v100 )
            {
              v52 = strchr(v100, 63);
              v53 = v52 ? (char *)Curl_memrchr(v100, 47, v52 - v100) : strrchr(v50, 47);
              v54 = v100;
              if ( v53 )
              {
                v55 = v53 - v100;
                v56 = v55 + 1;
                v57 = (char *)Curl_cmalloc(v55 + 2);
                v14->path = v57;
                if ( !v57 )
                  goto LABEL_69;
                memcpy(v57, v54, v56);
                v14->path[v56] = 0;
                v58 = sanitize_cookie_path(v14->path);
                v14->spath = v58;
                if ( !v58 )
                {
                  v36 = v14;
                  goto LABEL_70;
                }
              }
            }
            if ( !v14->name )
              goto LABEL_69;
            ++dataa->req.setcookies;
            if ( (v14->prefix & 1) != 0 )
            {
              if ( !v14->secure )
              {
LABEL_191:
                freecookie(v14);
                return 0;
              }
              v61 = ca;
              if ( (v14->prefix & 2) != 0 )
                goto LABEL_155;
LABEL_159:
              if ( !v61->running && v61->newsession )
              {
                v36 = v14;
                if ( !v14->expires )
                  goto LABEL_70;
              }
              v14->livecookie = v61->running;
              v66 = ca;
              v67 = ca->lastct + 1;
              ca->lastct = v67;
              v14->creationtime = v67;
              if ( !noexpire )
                remove_expired(v66);
              v68 = cookiehash(v14->domain);
              v69 = &ca->cookies[v68];
              v70 = *v69;
              livecookie = 0;
              if ( *v69 )
              {
                v15 = 0;
                v72 = 0;
                while ( 1 )
                {
                  if ( !curl_strequal(v70->name, v14->name) )
                    goto LABEL_174;
                  v73 = v70->domain;
                  if ( v73 )
                  {
                    v74 = v14->domain;
                    if ( !v74 || !curl_strequal(v73, v74) )
                      goto LABEL_174;
                  }
                  else if ( v14->domain )
                  {
                    goto LABEL_174;
                  }
                  spath = v70->spath;
                  if ( spath )
                  {
                    v76 = v14->spath;
                    if ( v76 )
                    {
                      if ( v70->secure && !v14->secure && !v99 )
                      {
                        v77 = strchr(spath + 1, 47);
                        v78 = v77 ? v77 - spath : strlen(spath);
                        if ( curl_strnequal(spath, v76, v78) )
                        {
                          if ( (*(_DWORD *)(&dataa->set.connect_only + 2) & 0x100000) != 0 )
                            Curl_infof(
                              dataa,
                              "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                              v14->name,
                              v14->domain);
                          goto LABEL_191;
                        }
                      }
                    }
                  }
LABEL_174:
                  if ( v72 || !curl_strequal(v70->name, v14->name) )
                    goto LABEL_175;
                  v79 = v70->domain;
                  if ( !v79 )
                  {
                    if ( v14->domain )
                    {
LABEL_200:
                      if ( !livecookie )
                        goto LABEL_175;
                    }
                    v81 = v70->spath;
                    goto LABEL_202;
                  }
                  v80 = v14->domain;
                  if ( !v80 || !curl_strequal(v79, v80) || v70->tailmatch != v14->tailmatch )
                    goto LABEL_200;
                  v81 = v70->spath;
LABEL_202:
                  if ( v81 )
                  {
                    v82 = v14->spath;
                    if ( !v82 )
                    {
                      v72 = 0;
                      livecookie = 0;
                      goto LABEL_175;
                    }
                    livecookie = 0;
                    if ( !curl_strequal(v81, v82) )
                      goto LABEL_175;
                  }
                  livecookie = 0;
                  if ( (v70->spath == 0) == (v14->spath == 0) )
                  {
                    livecookie = v14->livecookie;
                    if ( v14->livecookie )
                    {
                      v15 = v70;
                      v72 = v14;
                    }
                    else
                    {
                      livecookie = 1;
                      if ( v70->livecookie )
                        goto LABEL_191;
                      v15 = v70;
                      v72 = v14;
                    }
                  }
LABEL_175:
                  if ( !v70->next )
                  {
                    if ( v72 )
                    {
                      v72->next = v15->next;
                      v72->creationtime = v15->creationtime;
                      Curl_cfree(v15->name);
                      Curl_cfree(v15->value);
                      Curl_cfree(v15->domain);
                      Curl_cfree(v15->path);
                      Curl_cfree(v15->spath);
                      v83 = v72;
                      v84 = v15;
                      do
                      {
                        v85 = v83->name;
                        v86 = v83->value;
                        v87 = v83->path;
                        v84->next = v83->next;
                        v84->name = v85;
                        v84->value = v86;
                        v84->path = v87;
                        v83 = (Cookie *)((char *)v83 + 16);
                        v84 = (Cookie *)((char *)v84 + 16);
                      }
                      while ( v83 != &v72[1] );
                      Curl_cfree(v72);
                    }
                    else
                    {
                      v15 = v14;
                    }
                    v88 = dataa;
                    if ( !ca->running )
                      goto LABEL_217;
                    goto LABEL_228;
                  }
                  v70 = v70->next;
                }
              }
              v88 = dataa;
              if ( !ca->running )
              {
                v15 = v14;
LABEL_246:
                *v69 = v15;
                goto LABEL_220;
              }
              v15 = v14;
LABEL_228:
              if ( (*(_DWORD *)(&v88->set.connect_only + 2) & 0x100000) != 0 )
              {
                if ( livecookie )
                  v91 = "Replaced";
                else
                  v91 = "Added";
                Curl_infof(
                  dataa,
                  "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
                  v91,
                  v15->name,
                  v15->value,
                  v15->domain,
                  v15->path,
                  v15->expires);
              }
LABEL_217:
              if ( !livecookie )
              {
                if ( !v70 )
                  goto LABEL_246;
                v70->next = v15;
LABEL_220:
                ++ca->numcookies;
              }
              HIDWORD(v89) = v15->expires;
              LODWORD(v89) = HIDWORD(v15->expires);
              if ( v89 )
              {
                v90 = ca;
                if ( (int)v89 < SHIDWORD(ca->next_expiration)
                  || HIDWORD(ca->next_expiration) == (_DWORD)v89
                  && (v90 = ca, HIDWORD(v89) < LODWORD(ca->next_expiration)) )
                {
                  LODWORD(v90->next_expiration) = HIDWORD(v89);
                  HIDWORD(v90->next_expiration) = v89;
                }
              }
              return v15;
            }
            v61 = ca;
            if ( (v14->prefix & 2) == 0 )
              goto LABEL_159;
            if ( !v14->secure )
            {
LABEL_169:
              v64 = v14;
              goto LABEL_170;
            }
LABEL_155:
            v62 = v14->path;
            if ( !v62 )
              goto LABEL_169;
            v63 = strcmp(v62, "/");
            v64 = v14;
            if ( v63 )
            {
LABEL_170:
              v65 = freecookie;
            }
            else
            {
              v65 = (void (*)(Cookie *))MEMORY[0xB7B0];
              if ( !v14->tailmatch )
              {
                v61 = ca;
                goto LABEL_159;
              }
            }
            ((void (*)(Cookie *))((char *)v65 + (__int16)freecookie))(v64);
            return 0;
          }
        }
        if ( v49 != 32 && v49 != 9 )
        {
          v17 = strcspn(v13, ";\t\r\n=");
          if ( !v17 )
          {
            v38 = *v13;
            v48 = v13;
            goto LABEL_118;
          }
          goto LABEL_257;
        }
        ++v13;
      }
    }
LABEL_6:
    Curl_cfree(v14);
    return 0;
  }
  tok_buf = 0;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
  {
    v13 = (char *)(lineptr + 10);
    v14->httponly = 1;
  }
  if ( *v13 == 35 )
    goto LABEL_6;
  v59 = strchr(v13, 13);
  if ( v59 )
    *v59 = 0;
  v60 = strchr(v13, 10);
  if ( v60 )
    *v60 = 0;
  if ( strtok_r(v13, "\t", &tok_buf) )
    __asm { jr      $v0 }
  freecookie(v14);
  return 0;
}
