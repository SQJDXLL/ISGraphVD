Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        char *domain,
        char *path,
        bool secure)
{
  time_t v16; // x0
  Cookie *v17; // x28
  time_t v18; // x26
  __int64 v19; // x0
  Cookie *v20; // x21
  const char *v21; // x25
  char *i; // x27
  int v23; // w19
  size_t v24; // x0
  size_t v25; // x23
  unsigned __int64 v26; // x22
  int v27; // w8
  int v28; // w24
  const char *v29; // x28
  size_t v30; // x0
  size_t v31; // x20
  const char *v32; // x8
  int v33; // w9
  size_t v34; // x23
  unsigned __int8 v35; // w8
  __int64 v36; // x9
  int v37; // w11
  __int64 v38; // x0
  char *v39; // x0
  const char *v40; // x0
  const char *name; // x22
  int v42; // w8
  curl_off_t *v43; // x19
  const char *v44; // x0
  int v45; // w0
  int v46; // w0
  size_t v47; // x23
  const char *v48; // x22
  _BYTE *v49; // x0
  char *v50; // x19
  char *v51; // x0
  char is_ipnum; // w27
  char *v53; // x19
  int v54; // w0
  __int64 v55; // x0
  __int64 v56; // x0
  curl_off_t v57; // x8
  char *v58; // x0
  char *v59; // x0
  char *v60; // x0
  const char *v61; // x22
  int v62; // w28
  char v63; // w19
  const char *v64; // x0
  __int64 v65; // x0
  const char *v66; // x0
  char *v67; // x0
  __int64 v68; // x0
  unsigned __int8 v69; // w8
  __int64 v70; // x0
  __int64 v71; // x0
  bool v72; // w19
  __int64 v73; // x0
  char *v74; // x0
  __int64 v75; // x0
  Curl_easy *v76; // x27
  __int64 v77; // x0
  char *v78; // x0
  char *v79; // x0
  signed __int64 v80; // x19
  char *v81; // x0
  char *v82; // x0
  int v83; // w8
  size_t v84; // x0
  char *v85; // x20
  Cookie *next; // x8
  Cookie *v87; // x20
  int v88; // w26
  Cookie *v89; // x25
  char *v90; // x0
  char *v91; // x1
  const char *spath; // x22
  char *v93; // x23
  char *v94; // x0
  size_t v95; // x2
  char *v96; // x0
  char *v97; // x1
  bool v98; // zf
  int v99; // w8
  char *v100; // x0
  char *v101; // x1
  const char *v102; // x0
  char *v104; // x8
  curl_off_t expires; // x8
  const char *v106; // x2
  curl_off_t *p_expires; // [xsp+8h] [xbp-C8h]
  char *s; // [xsp+10h] [xbp-C0h]
  char *v109; // [xsp+18h] [xbp-B8h]
  char v110; // [xsp+20h] [xbp-B0h]
  bool v111; // [xsp+24h] [xbp-ACh]
  Curl_easy *v112; // [xsp+28h] [xbp-A8h]
  Curl_easy *v113; // [xsp+28h] [xbp-A8h]
  CookieInfo *cookies; // [xsp+30h] [xbp-A0h]
  bool v115; // [xsp+3Ch] [xbp-94h]
  char *hostname; // [xsp+40h] [xbp-90h]
  char *dest[17]; // [xsp+48h] [xbp-88h] BYREF

  v16 = time(0uLL);
  v17 = 0LL;
  if ( data->req.setcookies > 0x31u )
    return v17;
  hostname = domain;
  v18 = v16;
  v19 = Curl_ccalloc(1LL, 72LL);
  if ( !v19 )
    return 0LL;
  v20 = (Cookie *)v19;
  if ( !httpheader )
  {
    dest[0] = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 0xA;
      v20->httponly = 1;
    }
    if ( *lineptr == 35 )
      goto LABEL_124;
    v58 = strchr(lineptr, 13);
    if ( v58 )
      *v58 = 0;
    v111 = noexpire;
    v115 = secure;
    cookies = c;
    v59 = strchr(lineptr, 10);
    if ( v59 )
      *v59 = 0;
    v60 = strtok_r(lineptr, "\t", dest);
    if ( !v60 )
      goto LABEL_249;
    v113 = data;
    v61 = v60;
    v62 = 0;
    while ( 1 )
    {
      v63 = 0;
      switch ( v62 )
      {
        case 0:
          if ( *v61 == 46 )
            v64 = v61 + 1;
          else
            v64 = v61;
          v65 = Curl_cstrdup(v64);
          v62 = 0;
          v20->domain = (char *)v65;
          v63 = v65 == 0;
          goto LABEL_160;
        case 1:
          v63 = 0;
          v20->tailmatch = (unsigned int)curl_strequal(v61, "TRUE") != 0;
          v62 = 1;
          goto LABEL_160;
        case 2:
          if ( !strcmp("TRUE", v61) || !strcmp("FALSE", v61) )
          {
            v71 = Curl_cstrdup("/");
            v20->path = (char *)v71;
            v72 = v71 == 0;
            v73 = Curl_cstrdup("/");
            v63 = v72 || v73 == 0;
            v20->spath = (char *)v73;
            goto LABEL_147;
          }
          v66 = (const char *)Curl_cstrdup(v61);
          v20->path = (char *)v66;
          if ( !v66 )
          {
            v62 = 2;
            goto LABEL_159;
          }
          v67 = sanitize_cookie_path(v66);
          v20->spath = v67;
          v63 = v67 == 0LL;
          v62 = 2;
          goto LABEL_160;
        case 3:
LABEL_147:
          v20->secure = 0;
          if ( (unsigned int)curl_strequal(v61, "TRUE") )
          {
            if ( !secure && !c->running )
            {
              v62 = 3;
              goto LABEL_159;
            }
            v20->secure = 1;
          }
          v62 = 3;
          goto LABEL_160;
        case 4:
          v63 = (unsigned int)curlx_strtoofft(v61, 0LL, 10LL, &v20->expires) != 0;
          v62 = 4;
          goto LABEL_160;
        case 5:
          v68 = Curl_cstrdup(v61);
          v20->name = (char *)v68;
          if ( !v68 )
          {
            v62 = 5;
LABEL_159:
            v63 = 1;
            goto LABEL_160;
          }
          if ( (unsigned int)curl_strnequal("__Secure-", v68, 9LL) )
          {
            v63 = 0;
            v69 = v20->prefix | 1;
LABEL_155:
            v20->prefix = v69;
            goto LABEL_156;
          }
          v63 = 0;
          if ( (unsigned int)curl_strnequal("__Host-", v20->name, 7LL) )
          {
            v69 = v20->prefix | 2;
            goto LABEL_155;
          }
LABEL_156:
          v62 = 5;
LABEL_160:
          v74 = strtok_r(0uLL, "\t", dest);
          ++v62;
          if ( (v63 & 1) != 0 || (v61 = v74) == 0LL )
          {
            if ( v62 == 6 )
            {
              v75 = Curl_cstrdup(&unk_2131);
              v63 |= v75 == 0;
              if ( v75 )
                v62 = 7;
              else
                v62 = 6;
              v20->value = (char *)v75;
            }
            v76 = v113;
            if ( (v63 & 1) != 0 || v62 != 7 )
              goto LABEL_249;
LABEL_190:
            if ( (v20->prefix & 1) != 0 && !v20->secure )
              goto LABEL_249;
            if ( (v20->prefix & 2) != 0 )
            {
              if ( !v20->secure )
                goto LABEL_249;
              v102 = v20->path;
              if ( !v102 || strcmp(v102, "/") || v20->tailmatch )
                goto LABEL_249;
            }
            if ( !cookies->running && cookies->newsession && !v20->expires )
              goto LABEL_249;
            v20->livecookie = cookies->running;
            v83 = cookies->lastct + 1;
            cookies->lastct = v83;
            v20->creationtime = v83;
            if ( !v111 )
              remove_expired(cookies);
            v84 = cookiehash(v20->domain);
            v85 = (char *)&cookies->cookies[v84];
            next = *(Cookie **)v85;
            if ( *(_QWORD *)v85 )
            {
              hostname = (char *)&cookies->cookies[v84];
              v87 = 0LL;
              v17 = 0LL;
              v88 = 0;
              while ( 1 )
              {
                v89 = next;
                if ( !(unsigned int)curl_strequal(next->name, v20->name) )
                  goto LABEL_213;
                v90 = v89->domain;
                v91 = v20->domain;
                if ( v90 )
                {
                  if ( !v91 || !(unsigned int)curl_strequal(v90, v91) )
                    goto LABEL_213;
                }
                else if ( v91 )
                {
                  goto LABEL_213;
                }
                spath = v89->spath;
                if ( spath )
                {
                  v93 = v20->spath;
                  if ( v93 )
                  {
                    if ( v89->secure && !v20->secure && !v115 )
                    {
                      v94 = strchr(spath + 1, 47);
                      v95 = v94 ? v94 - spath : strlen(spath);
                      if ( (unsigned int)curl_strnequal(spath, v93, v95) )
                      {
                        if ( v76 && (*((_BYTE *)&v76->set + 2229) & 0x20) != 0 )
                          Curl_infof(
                            v76,
                            "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                            v20->name,
                            v20->domain);
                        goto LABEL_249;
                      }
                    }
                  }
                }
LABEL_213:
                if ( !v87 )
                {
                  if ( (unsigned int)curl_strequal(v89->name, v20->name) )
                  {
                    v96 = v89->domain;
                    v97 = v20->domain;
                    if ( v96 )
                    {
                      if ( v97 && (unsigned int)curl_strequal(v96, v97) )
                      {
                        v98 = v89->tailmatch == v20->tailmatch;
                        goto LABEL_222;
                      }
                      if ( (v88 & 1) == 0 )
                      {
LABEL_232:
                        v88 = 0;
                        goto LABEL_233;
                      }
                    }
                    else
                    {
                      v98 = v97 == 0LL;
LABEL_222:
                      v99 = v98;
                      if ( ((v88 | v99) & 1) == 0 )
                        goto LABEL_232;
                    }
                    v100 = v89->spath;
                    v101 = v20->spath;
                    if ( v100 )
                    {
                      if ( v101 )
                      {
                        if ( (unsigned int)curl_strequal(v100, v101) && (v89->spath != 0LL) != (v20->spath == 0LL) )
                        {
LABEL_237:
                          if ( !v20->livecookie && v89->livecookie )
                            goto LABEL_249;
                          v88 = 1;
                          v17 = v89;
                          v87 = v20;
                          goto LABEL_234;
                        }
                      }
                      else if ( v20->spath )
                      {
                        goto LABEL_237;
                      }
                    }
                    else if ( !v101 )
                    {
                      goto LABEL_237;
                    }
                    goto LABEL_232;
                  }
LABEL_233:
                  v87 = 0LL;
                }
LABEL_234:
                next = v89->next;
                if ( !v89->next )
                {
                  if ( v87 )
                  {
                    v87->next = v17->next;
                    v87->creationtime = v17->creationtime;
                    Curl_cfree(v17->name);
                    Curl_cfree(v17->value);
                    Curl_cfree(v17->domain);
                    Curl_cfree(v17->path);
                    Curl_cfree(v17->spath);
                    memcpy(v17, v87, sizeof(Cookie));
                    Curl_cfree(v87);
                  }
                  else
                  {
                    v17 = v20;
                  }
                  v85 = hostname;
                  goto LABEL_255;
                }
              }
            }
            v89 = 0LL;
            LOBYTE(v88) = 0;
            v17 = v20;
LABEL_255:
            if ( v76 && cookies->running && (*((_BYTE *)&v76->set + 2229) & 0x20) != 0 )
            {
              if ( (v88 & 1) != 0 )
                v106 = "Replaced";
              else
                v106 = "Added";
              Curl_infof(
                v76,
                "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
                v106,
                v17->name,
                v17->value,
                v17->domain,
                v17->path,
                v17->expires);
              if ( (v88 & 1) == 0 )
              {
LABEL_259:
                if ( v89 )
                  v104 = (char *)v89;
                else
                  v104 = v85;
                *(_QWORD *)v104 = v17;
                ++cookies->numcookies;
              }
            }
            else if ( (v88 & 1) == 0 )
            {
              goto LABEL_259;
            }
            expires = v17->expires;
            if ( expires && expires < cookies->next_expiration )
              cookies->next_expiration = expires;
            return v17;
          }
          break;
        case 6:
          v70 = Curl_cstrdup(v61);
          v63 = v70 == 0;
          v62 = 6;
          v20->value = (char *)v70;
          goto LABEL_160;
        default:
          goto LABEL_160;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_124:
    Curl_cfree(v20);
    return 0LL;
  }
  p_expires = &v20->expires;
  s = path;
  v109 = (char *)&data->set + 0x8B2;
  v110 = 0;
  v111 = noexpire;
  v115 = secure;
  v112 = data;
  cookies = c;
  while ( 1 )
  {
    v21 = lineptr + 1;
    for ( i = lineptr; ; ++i )
    {
      v23 = (unsigned __int8)*i;
      if ( v23 != 32 && v23 != 9 )
        break;
      ++v21;
    }
    v24 = strcspn(i, ";\t\r\n=");
    if ( !v24 )
    {
      lineptr = i;
      goto LABEL_56;
    }
    v25 = v24;
    lineptr = &i[v24];
    v26 = v24;
    do
    {
      v27 = (unsigned __int8)i[v26 - 1];
      if ( v27 != 32 && v27 != 9 )
        break;
      --v26;
    }
    while ( v26 );
    v28 = (unsigned __int8)*lineptr;
    if ( v28 != 61 )
    {
      v34 = 0LL;
      v29 = 0LL;
      goto LABEL_26;
    }
    v29 = &i[v24 + 1];
    v30 = strcspn(v29, ";\r\n");
    v31 = v25 + v30;
    if ( v30 )
    {
      v32 = &v21[v31];
      while ( 1 )
      {
        v33 = *((unsigned __int8 *)v32 - 1);
        if ( v33 != 32 && v33 != 9 )
          break;
        --v30;
        --v32;
        if ( !v30 )
          goto LABEL_21;
      }
      v36 = 0LL;
      while ( 1 )
      {
        v37 = (unsigned __int8)v21[v25 + v36];
        if ( v37 != 32 && v37 != 9 )
          break;
        if ( v30 == ++v36 )
        {
          v34 = 0LL;
          v29 = v32;
          goto LABEL_22;
        }
      }
      v29 = &v21[v25 + v36];
      v34 = v30 - v36;
    }
    else
    {
LABEL_21:
      v34 = 0LL;
    }
LABEL_22:
    if ( memchr(v29, 9, v34) )
      break;
    lineptr = &i[v31 + 1];
LABEL_26:
    if ( v26 > 0xFFE || v34 > 0xFFE || v34 + v26 > 0x1000 )
    {
      freecookie(v20);
      if ( (v109[3] & 0x20) != 0 )
        Curl_infof(v112, "oversized cookie dropped, name/val %zu + %zu bytes", v26, v34);
      return 0LL;
    }
    if ( v23 == 95 && v26 >= 7 && i[1] == 95 )
    {
      if ( (unsigned int)curl_strnequal("__Secure-", i, 9LL) )
      {
        v35 = v20->prefix | 1;
      }
      else
      {
        if ( !(unsigned int)curl_strnequal("__Host-", i, 7LL) )
          goto LABEL_42;
        v35 = v20->prefix | 2;
      }
      v20->prefix = v35;
    }
LABEL_42:
    if ( !v20->name )
    {
      if ( v28 != 61 )
        goto LABEL_249;
      Curl_cfree(0LL);
      v20->name = (char *)Curl_strndup(i, v26);
      Curl_cfree(v20->value);
      v40 = (const char *)Curl_strndup(v29, v34);
      v20->value = (char *)v40;
      if ( !v40 )
        goto LABEL_249;
      name = v20->name;
      if ( !name )
        goto LABEL_249;
      if ( v40[strcspn(v40, invalid_octets_badoctets)] || name[strcspn(name, invalid_octets_badoctets)] )
      {
        if ( (v109[3] & 0x20) != 0 )
          Curl_infof(v112, "invalid octets in name/value, cookie dropped");
LABEL_249:
        freecookie(v20);
        return 0LL;
      }
      goto LABEL_56;
    }
    if ( !v34 )
    {
      if ( v26 == 8 )
      {
        if ( (unsigned int)curl_strnequal("httponly", i, 8LL) )
        {
          v20->httponly = 1;
          goto LABEL_56;
        }
      }
      else if ( v26 == 6 && (unsigned int)curl_strnequal("secure", i, 6LL) )
      {
        if ( !v115 && cookies->running )
          goto LABEL_249;
        v20->secure = 1;
        goto LABEL_56;
      }
      if ( v28 != 61 )
        goto LABEL_56;
    }
    if ( v26 == 7 )
    {
      if ( !(unsigned int)curl_strnequal("version", i, 7LL) )
      {
        if ( (unsigned int)curl_strnequal("max-age", i, 7LL) )
        {
          v43 = &v20->expires;
          if ( *v29 == 34 )
            v44 = v29 + 1;
          else
            v44 = v29;
          v45 = curlx_strtoofft(v44, 0LL, 10LL, p_expires);
          switch ( v45 )
          {
            case 0:
              v57 = *p_expires;
              if ( !*p_expires )
                goto LABEL_118;
              if ( 0x7FFFFFFFFFFFFFFFLL - v18 >= v57 )
              {
                *p_expires = v57 + v18;
                goto LABEL_56;
              }
LABEL_117:
              *p_expires = 0x7FFFFFFFFFFFFFFFLL;
              goto LABEL_56;
            case 2:
              goto LABEL_118;
            case 1:
              goto LABEL_117;
          }
        }
        else if ( (unsigned int)curl_strnequal("expires", i, 7LL) )
        {
          v43 = &v20->expires;
          if ( v34 <= 0x7F && !*p_expires )
          {
            memcpy(dest, v29, v34);
            *((_BYTE *)dest + v34) = 0;
            v55 = Curl_getdate_capped(dest);
            *p_expires = v55;
            if ( v55 )
            {
              if ( (v55 & 0x8000000000000000LL) != 0 )
                *p_expires = 0LL;
              goto LABEL_56;
            }
LABEL_118:
            *v43 = 1LL;
            goto LABEL_56;
          }
        }
      }
    }
    else
    {
      if ( v26 != 6 )
      {
        if ( v26 == 4 )
        {
          if ( (unsigned int)curl_strnequal("path", i, 4LL) )
          {
            Curl_cfree(v20->path);
            v38 = Curl_strndup(v29, v34);
            v20->path = (char *)v38;
            if ( !v38 )
              goto LABEL_249;
            Curl_cfree(v20->spath);
            v39 = sanitize_cookie_path(v20->path);
            v20->spath = v39;
            if ( !v39 )
              goto LABEL_249;
          }
        }
        goto LABEL_56;
      }
      v46 = curl_strnequal("domain", i, 6LL);
      if ( v34 && v46 )
      {
        v47 = v34 - (*v29 == 46);
        if ( *v29 == 46 )
          v48 = v29 + 1;
        else
          v48 = v29;
        if ( v47 == 9 && (unsigned int)curl_strnequal(v48, "localhost", 9LL)
          || (v49 = memchr(v48, 46, v47)) != 0LL && (unsigned __int64)(&v48[v47] - v49) > 1 )
        {
          v50 = hostname;
          if ( hostname )
            v51 = hostname;
          else
            v51 = (char *)v48;
          is_ipnum = Curl_host_is_ipnum(v51);
          if ( v50 )
          {
            v53 = hostname;
            if ( (is_ipnum & 1) == 0 )
              goto LABEL_89;
LABEL_97:
            v54 = strncmp(v48, v53, v47);
            hostname = v53;
            if ( v54 || v47 != strlen(v53) )
            {
LABEL_100:
              if ( (v109[3] & 0x20) != 0 )
                Curl_infof(v112, "skipped cookie with bad tailmatch domain: %s", v48);
              v110 = 1;
              goto LABEL_56;
            }
            is_ipnum = 1;
          }
          else
          {
            hostname = 0LL;
          }
        }
        else
        {
          v53 = ":";
          if ( (Curl_host_is_ipnum(":") & 1) != 0 )
            goto LABEL_97;
LABEL_89:
          hostname = v53;
          if ( !cookie_tailmatch(v48, v47, v53) )
            goto LABEL_100;
          is_ipnum = 0;
        }
        Curl_cfree(v20->domain);
        v56 = Curl_strndup(v48, v47);
        v20->domain = (char *)v56;
        if ( (is_ipnum & 1) != 0 || !v56 )
        {
          if ( !v56 )
          {
            v110 = 1;
LABEL_170:
            if ( (v110 & 1) != 0 )
              goto LABEL_249;
            if ( hostname )
            {
              if ( !v20->domain )
              {
                v77 = Curl_cstrdup(hostname);
                v20->domain = (char *)v77;
                if ( !v77 )
                  goto LABEL_249;
              }
            }
            if ( s && !v20->path )
            {
              v78 = strchr(s, 63);
              v79 = v78 ? (char *)Curl_memrchr(s, 47LL, v78 - s) : strrchr(s, 47);
              if ( v79 )
              {
                v80 = v79 - s;
                v81 = (char *)Curl_cmalloc(v79 - s + 2);
                v20->path = v81;
                if ( !v81 )
                  goto LABEL_249;
                memcpy(v81, s, v80 + 1);
                v20->path[v80 + 1] = 0;
                v82 = sanitize_cookie_path(v20->path);
                v20->spath = v82;
                if ( !v82 )
                  goto LABEL_249;
              }
            }
            if ( !v20->name )
              goto LABEL_249;
            v76 = v112;
            ++v112->req.setcookies;
            goto LABEL_190;
          }
          v110 |= v56 == 0;
        }
        else
        {
          v20->tailmatch = 1;
        }
        goto LABEL_56;
      }
    }
    do
    {
      do
LABEL_56:
        v42 = (unsigned __int8)*lineptr++;
      while ( v42 == 32 );
    }
    while ( v42 == 9 );
    if ( v42 != 59 )
      goto LABEL_170;
  }
  freecookie(v20);
  if ( (v109[3] & 0x20) != 0 )
    Curl_infof(v112, "cookie contains TAB, dropping");
  return 0LL;
}
