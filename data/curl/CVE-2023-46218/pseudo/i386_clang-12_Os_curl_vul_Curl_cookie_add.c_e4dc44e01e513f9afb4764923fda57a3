Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  time_t v8; // eax
  char *v9; // ebp
  int v10; // edi
  int v11; // eax
  int v12; // esi
  char *v13; // edi
  const char *v14; // ecx
  const char *v15; // esi
  const char *i; // ebp
  size_t v17; // eax
  unsigned int v18; // edi
  char v19; // dl
  unsigned int v20; // edx
  size_t v21; // eax
  char *v22; // ecx
  char *v23; // edx
  char v24; // cl
  size_t v25; // eax
  unsigned int v26; // esi
  bool v27; // zf
  char *v28; // esi
  int v29; // ecx
  char v30; // bl
  int v31; // eax
  int v32; // eax
  char *v33; // eax
  int v34; // eax
  int v35; // eax
  const char *v36; // esi
  const char *v37; // edi
  size_t v38; // eax
  int v39; // eax
  size_t v40; // esi
  char *v41; // eax
  int v42; // eax
  unsigned int v43; // esi
  int v44; // eax
  unsigned int v45; // ecx
  char *v46; // esi
  _BOOL4 v47; // eax
  size_t v48; // ebp
  _BYTE *v49; // eax
  const char *v50; // edi
  const char *v51; // eax
  char is_ipnum; // al
  char v53; // cl
  Curl_easy *v54; // esi
  int v55; // eax
  int v56; // eax
  int v57; // eax
  int v58; // eax
  char v59; // cl
  size_t v60; // eax
  unsigned int v61; // eax
  unsigned int v62; // ecx
  char v63; // al
  char *v64; // eax
  char *v65; // eax
  char *v66; // eax
  const char *v67; // esi
  int v68; // edi
  int v69; // edx
  int v70; // eax
  int v71; // eax
  const char *v72; // eax
  char *v73; // eax
  int v74; // eax
  int v75; // eax
  int v76; // eax
  int v77; // eax
  int v78; // eax
  int v79; // eax
  int v80; // ecx
  CookieInfo *v81; // eax
  char *v82; // eax
  int v83; // eax
  char v84; // al
  int v85; // esi
  int v86; // eax
  unsigned int v87; // esi
  char v88; // bp
  char *v89; // eax
  char *v90; // eax
  int v91; // esi
  void *v92; // eax
  size_t v93; // esi
  char *v94; // eax
  char v95; // al
  bool running; // al
  int v97; // eax
  Cookie *next; // eax
  int v99; // ebp
  char *v100; // esi
  Cookie *v101; // edi
  char *v102; // eax
  int v103; // ecx
  const char *spath; // esi
  char *v105; // eax
  size_t v106; // eax
  char *v107; // eax
  int v108; // ecx
  int v109; // eax
  char *v110; // eax
  char *v111; // ecx
  int v112; // eax
  const char *v113; // eax
  __int128 v115; // xmm0
  const char *v116; // ecx
  Cookie **p_next; // eax
  curl_off_t v118; // rax
  int v119; // ecx
  int v120; // [esp-10h] [ebp-DCh]
  size_t v121; // [esp-Ch] [ebp-D8h]
  const char *v122; // [esp-8h] [ebp-D4h]
  int v123; // [esp-4h] [ebp-D0h]
  Cookie *v124; // [esp+0h] [ebp-CCh]
  char v125; // [esp+8h] [ebp-C4h]
  const char *v126; // [esp+8h] [ebp-C4h]
  int v127; // [esp+8h] [ebp-C4h]
  int v128; // [esp+8h] [ebp-C4h]
  int v129; // [esp+Ch] [ebp-C0h]
  char *s1; // [esp+10h] [ebp-BCh]
  char *s1a; // [esp+10h] [ebp-BCh]
  char *s1b; // [esp+10h] [ebp-BCh]
  char *s1c; // [esp+10h] [ebp-BCh]
  char *v134; // [esp+14h] [ebp-B8h]
  unsigned int v135; // [esp+14h] [ebp-B8h]
  unsigned int v136; // [esp+14h] [ebp-B8h]
  unsigned int v137; // [esp+14h] [ebp-B8h]
  char v138; // [esp+14h] [ebp-B8h]
  size_t v139; // [esp+14h] [ebp-B8h]
  char v140; // [esp+18h] [ebp-B4h]
  int v141; // [esp+18h] [ebp-B4h]
  int v142; // [esp+18h] [ebp-B4h]
  char v143; // [esp+1Ch] [ebp-B0h]
  const char *s; // [esp+24h] [ebp-A8h]
  unsigned int *v146; // [esp+28h] [ebp-A4h]
  int v147; // [esp+2Ch] [ebp-A0h]
  __int64 v148; // [esp+34h] [ebp-98h]
  char *dest[36]; // [esp+3Ch] [ebp-90h] BYREF

  v123 = 134218447;
  v8 = time(0);
  v9 = 0;
  if ( data->req.setcookies > 0x31u )
    return (Cookie *)v9;
  v10 = v8;
  v11 = Curl_ccalloc(1, 44);
  if ( !v11 )
    return (Cookie *)v9;
  v12 = v11;
  v147 = v10;
  v129 = v11;
  if ( httpheader )
  {
    v9 = 0;
    if ( strlen(lineptr) > 0x1388 )
    {
      Curl_cfree(v12);
      return (Cookie *)v9;
    }
    v146 = (unsigned int *)(v12 + 24);
    HIDWORD(v148) = 0x7FFFFFFF - (v10 >> 31);
    v143 = 0;
    v14 = lineptr;
    while ( 1 )
    {
      v15 = v14 + 1;
      for ( i = v14; *i == 32 || *i == 9; ++i )
        ++v15;
      v125 = *i;
      v17 = strcspn(i, ";\t\r\n=");
      if ( v17 )
      {
        v14 = &i[v17];
        v18 = v17;
        while ( 1 )
        {
          v19 = i[v18 - 1];
          if ( v19 != 32 && v19 != 9 )
            break;
          if ( !--v18 )
          {
            v18 = 0;
            break;
          }
        }
        v20 = 0;
        s1 = 0;
        v140 = *v14;
        if ( *v14 == 61 )
        {
          s1a = (char *)v17;
          s = &i[v17 + 1];
          v21 = strcspn(s, ";\r\n");
          v134 = &s1a[v21];
          if ( v21 )
          {
            v22 = &s1a[v21 + (_DWORD)v15];
            while ( 1 )
            {
              v23 = v22;
              v24 = *(v22 - 1);
              if ( v24 != 32 && v24 != 9 )
                break;
              --v21;
              v22 = v23 - 1;
              if ( !v21 )
                goto LABEL_27;
            }
            v28 = (char *)&v15[(_DWORD)s1a];
            v29 = 0;
            while ( 1 )
            {
              v30 = v28[v29];
              if ( v30 != 32 && v30 != 9 )
                break;
              if ( v21 == ++v29 )
                goto LABEL_28;
            }
            v25 = v21 - v29;
            v23 = &v28[v29];
          }
          else
          {
LABEL_27:
            v23 = (char *)s;
LABEL_28:
            v25 = 0;
          }
          v26 = v25;
          s1 = v23;
          if ( memchr(v23, 9, v25) )
          {
            freecookie(v124);
            v9 = 0;
            if ( (*((_BYTE *)&data->set + 1326) & 0x10) != 0 )
              Curl_infof(data, "cookie contains TAB, dropping", v122, v123);
            return (Cookie *)v9;
          }
          v14 = &i[(_DWORD)v134 + 1];
          v20 = v26;
        }
        if ( v18 > 0xFFE || v20 > 0xFFE || v20 + v18 >= 0x1001 )
        {
          v87 = v20;
          freecookie(v124);
          v9 = 0;
          if ( (*((_BYTE *)&data->set + 1326) & 0x10) != 0 )
            Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v18, v87);
          return (Cookie *)v9;
        }
        v27 = v125 == 95;
        v126 = v14;
        if ( v27 && v18 >= 7 && i[1] == 95 )
        {
          v135 = v20;
          if ( curl_strnequal("__Secure-", i, 9) )
          {
            *(_BYTE *)(v129 + 40) |= 1u;
            v14 = v126;
            v20 = v135;
          }
          else
          {
            v31 = curl_strnequal("__Host-", i, 7);
            v14 = v126;
            v20 = v135;
            if ( v31 )
              *(_BYTE *)(v129 + 40) |= 2u;
          }
        }
        if ( !*(_DWORD *)(v129 + 4) )
        {
          if ( v140 != 61 )
            goto LABEL_267;
          v137 = v20;
          Curl_cfree(0);
          v34 = Curl_memdup(i, v18 + 1);
          *(_DWORD *)(v129 + 4) = v34;
          if ( v34 )
            *(_BYTE *)(v34 + v18) = 0;
          Curl_cfree(*(_DWORD *)(v129 + 8));
          v35 = Curl_memdup(s1, v137 + 1);
          *(_DWORD *)(v129 + 8) = v35;
          if ( v35 )
            *(_BYTE *)(v35 + v137) = 0;
          v36 = *(const char **)(v129 + 4);
          if ( !v36 )
            goto LABEL_267;
          v37 = *(const char **)(v129 + 8);
          if ( !v37 )
            goto LABEL_267;
          if ( v37[strcspn(v37, invalid_octets_badoctets)]
            || (v38 = strcspn(v36, invalid_octets_badoctets), v14 = v126, v36[v38]) )
          {
            if ( (*((_BYTE *)&data->set + 1326) & 0x10) != 0 )
              Curl_infof(data, "invalid octets in name/value, cookie dropped", v122, v123);
            goto LABEL_267;
          }
          goto LABEL_126;
        }
        if ( !v20 )
        {
          if ( v18 == 8 )
          {
            v55 = curl_strnequal("httponly", i, 8);
            v20 = 0;
            v14 = v126;
            if ( v55 )
            {
              *(_BYTE *)(v129 + 35) = 1;
              goto LABEL_126;
            }
          }
          else if ( v18 == 6 )
          {
            v39 = curl_strnequal("secure", i, 6);
            v20 = 0;
            v14 = v126;
            if ( v39 )
            {
              if ( !secure && c->running )
                goto LABEL_267;
              *(_BYTE *)(v129 + 33) = 1;
              goto LABEL_126;
            }
          }
          if ( v140 != 61 )
            goto LABEL_126;
        }
        switch ( v18 )
        {
          case 7u:
            v40 = v20;
            if ( curl_strnequal("version", i, 7) )
              goto LABEL_125;
            if ( curl_strnequal("max-age", i, 7) )
            {
              v41 = s1 + 1;
              if ( *s1 != 34 )
                v41 = s1;
              v42 = curlx_strtoofft(v41, 0, 10, v146);
              if ( v42 )
              {
                if ( v42 != 2 )
                {
                  v14 = v126;
                  if ( v42 == 1 )
                  {
                    *v146 = -1;
                    v146[1] = 0x7FFFFFFF;
                  }
                  goto LABEL_126;
                }
LABEL_124:
                v146[1] = 0;
                *v146 = 1;
              }
              else
              {
                v61 = *v146;
                v62 = v146[1];
                if ( !*(_QWORD *)v146 )
                  goto LABEL_124;
                LODWORD(v148) = ~v147;
                if ( v148 >= __SPAIR64__(v62, v61) )
                {
                  *(_QWORD *)v146 = v147 + __PAIR64__(v62, v61);
                }
                else
                {
                  *v146 = -1;
                  v146[1] = 0x7FFFFFFF;
                }
              }
LABEL_125:
              v14 = v126;
              goto LABEL_126;
            }
            if ( !curl_strnequal("expires", i, 7) )
              goto LABEL_125;
            v14 = v126;
            if ( v40 <= 0x7F && !*(_QWORD *)v146 )
            {
              memcpy(dest, s1, v40);
              *((_BYTE *)dest + v40) = 0;
              v56 = Curl_getdate_capped(dest);
              *(_QWORD *)v146 = v56;
              if ( v56 )
              {
                v14 = v126;
                if ( v56 < 0 )
                {
                  v146[1] = 0;
                  *v146 = 0;
                }
                goto LABEL_126;
              }
              v146[1] = 0;
              *v146 = 1;
              goto LABEL_125;
            }
            break;
          case 6u:
            v43 = v20;
            v44 = curl_strnequal("domain", i, 6);
            if ( !v43 || !v44 )
              goto LABEL_125;
            v45 = v43;
            v46 = s1 + 1;
            v47 = *s1 == 46;
            if ( *s1 != 46 )
              v46 = s1;
            v48 = v45 - v47;
            s1b = v46;
            if ( v45 - v47 == 9 && curl_strnequal(v46, "localhost", 9)
              || (v49 = memchr(v46, 46, v48)) != 0 && (unsigned int)(&v46[v48] - v49) > 1 )
            {
              v50 = domain;
              v51 = domain;
              if ( !domain )
                v51 = v46;
              is_ipnum = Curl_host_is_ipnum(v51);
              v53 = is_ipnum;
              v54 = data;
              if ( domain )
              {
                if ( !is_ipnum )
                  goto LABEL_93;
LABEL_101:
                if ( strncmp(s1b, v50, v48) )
                {
                  v54 = data;
                  goto LABEL_119;
                }
                v60 = strlen(v50);
                v53 = 1;
                v54 = data;
                if ( v48 != v60 )
                {
LABEL_119:
                  domain = v50;
                  v143 = 1;
                  if ( (*((_BYTE *)&v54->set + 1326) & 0x10) != 0 )
                    Curl_infof(v54, "skipped cookie with bad tailmatch domain: %s", s1b, v123);
                  goto LABEL_125;
                }
              }
              else
              {
                v50 = 0;
              }
            }
            else
            {
              v50 = ":";
              v54 = data;
              if ( (unsigned __int8)Curl_host_is_ipnum(":") )
                goto LABEL_101;
LABEL_93:
              if ( !cookie_tailmatch(v50, v121, v122) )
                goto LABEL_119;
              v53 = 0;
            }
            v138 = v53;
            domain = v50;
            Curl_cfree(*(_DWORD *)(v129 + 20));
            v57 = Curl_memdup(s1b, v48 + 1);
            *(_DWORD *)(v129 + 20) = v57;
            if ( !v57 )
              goto LABEL_267;
            *(_BYTE *)(v57 + v48) = 0;
            v58 = *(_DWORD *)(v129 + 20);
            v59 = v143;
            if ( !v58 )
              v59 = 1;
            if ( (v58 == 0) | (unsigned __int8)v138 )
            {
              v143 = v59;
              v14 = v126;
              if ( !v58 )
                goto LABEL_186;
              goto LABEL_126;
            }
            *(_BYTE *)(v129 + 32) = 1;
            goto LABEL_125;
          case 4u:
            v136 = v20;
            if ( curl_strnequal("path", i, 4) )
            {
              Curl_cfree(*(_DWORD *)(v129 + 12));
              v32 = Curl_memdup(s1, v136 + 1);
              *(_DWORD *)(v129 + 12) = v32;
              if ( !v32 )
                goto LABEL_267;
              *(_BYTE *)(v32 + v136) = 0;
              if ( !*(_DWORD *)(v129 + 12) )
                goto LABEL_267;
              Curl_cfree(*(_DWORD *)(v129 + 16));
              v33 = sanitize_cookie_path(*(const char **)(v129 + 12));
              v14 = v126;
              *(_DWORD *)(v129 + 16) = v33;
              if ( !v33 )
                goto LABEL_267;
              goto LABEL_126;
            }
            goto LABEL_125;
        }
      }
      else
      {
        v14 = i;
      }
      do
      {
        do
LABEL_126:
          v63 = *v14++;
        while ( v63 == 32 );
      }
      while ( v63 == 9 );
      if ( v63 != 59 )
      {
LABEL_186:
        v84 = v143;
        if ( (v143 & 1) != 0 )
        {
          v85 = v129;
        }
        else
        {
          v85 = v129;
          if ( domain )
          {
            if ( !*(_DWORD *)(v129 + 20) )
            {
              v86 = Curl_cstrdup(domain);
              *(_DWORD *)(v129 + 20) = v86;
              v27 = v86 == 0;
              v84 = v143;
              if ( v27 )
                v84 = 1;
            }
          }
        }
        if ( (v84 & 1) == 0 && path && !*(_DWORD *)(v85 + 12) )
        {
          v88 = v84;
          v89 = strchr(path, 63);
          if ( v89 )
            v90 = (char *)Curl_memrchr(path, 47, v89 - path);
          else
            v90 = strrchr(path, 47);
          if ( v90 )
          {
            v91 = v90 - path;
            v92 = (void *)Curl_cmalloc(v90 - path + 2);
            *(_DWORD *)(v129 + 12) = v92;
            if ( !v92 )
              goto LABEL_267;
            v93 = v91 + 1;
            memcpy(v92, path, v93);
            *(_BYTE *)(*(_DWORD *)(v129 + 12) + v93) = 0;
            v94 = sanitize_cookie_path(*(const char **)(v129 + 12));
            *(_DWORD *)(v129 + 16) = v94;
            v27 = v94 == 0;
            v84 = v88;
            if ( v27 )
              v84 = 1;
          }
          else
          {
            v84 = v88;
          }
        }
        if ( (v84 & 1) == 0 && *(_DWORD *)(v129 + 4) )
        {
          ++data->req.setcookies;
          v9 = 0;
          goto LABEL_214;
        }
LABEL_267:
        freecookie(v124);
        return 0;
      }
    }
  }
  dest[0] = 0;
  v13 = lineptr;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
  {
    v13 = lineptr + 10;
    *(_BYTE *)(v12 + 35) = 1;
  }
  if ( *v13 == 35 )
  {
    Curl_cfree(v12);
    return 0;
  }
  v64 = strchr(v13, 13);
  v9 = 0;
  if ( v64 )
    *v64 = 0;
  v65 = strchr(v13, 10);
  if ( v65 )
    *v65 = 0;
  v66 = strtok_r(v13, "\t", dest);
  if ( !v66 )
    goto LABEL_273;
  v67 = v66;
  v68 = 0;
  v69 = 0;
  do
  {
    v127 = v69;
    switch ( v68 )
    {
      case 0:
        if ( *v67 == 46 )
          ++v67;
        v70 = Curl_cstrdup(v67);
        *(_DWORD *)(v129 + 20) = v70;
        v27 = v70 == 0;
        v71 = (unsigned __int8)v127;
        if ( v27 )
          v71 = 1;
        v127 = v71;
        v68 = 0;
        break;
      case 1:
        *(_BYTE *)(v129 + 32) = curl_strequal(v67, "TRUE") != 0;
        v68 = 1;
        break;
      case 2:
        if ( !strcmp("TRUE", v67) || !strcmp("FALSE", v67) )
        {
          v141 = Curl_cstrdup("/");
          *(_DWORD *)(v129 + 12) = v141;
          v79 = Curl_cstrdup("/");
          v80 = (unsigned __int8)v127;
          if ( !v79 )
            v80 = 1;
          *(_DWORD *)(v129 + 16) = v79;
          if ( !v141 )
            v80 = 1;
          v127 = v80;
          v9 = 0;
          goto LABEL_165;
        }
        v72 = (const char *)Curl_cstrdup(v67);
        *(_DWORD *)(v129 + 12) = v72;
        if ( v72 )
        {
          v73 = sanitize_cookie_path(v72);
          *(_DWORD *)(v129 + 16) = v73;
          v27 = v73 == 0;
          v74 = (unsigned __int8)v127;
          if ( v27 )
            v74 = 1;
          v127 = v74;
        }
        else
        {
          v127 = 1;
        }
        v9 = 0;
        v68 = 2;
        break;
      case 3:
LABEL_165:
        *(_BYTE *)(v129 + 33) = 0;
        if ( curl_strequal(v67, "TRUE") )
        {
          if ( secure || (v81 = c, c->running) )
          {
            *(_BYTE *)(v129 + 33) = 1;
          }
          else
          {
            LOBYTE(v81) = 1;
            v127 = (int)v81;
          }
        }
        v68 = 3;
        break;
      case 4:
        v27 = curlx_strtoofft(v67, 0, 10, v129 + 24) == 0;
        v75 = (unsigned __int8)v127;
        if ( !v27 )
          v75 = 1;
        v127 = v75;
        v68 = 4;
        break;
      case 5:
        v76 = Curl_cstrdup(v67);
        *(_DWORD *)(v129 + 4) = v76;
        if ( v76 )
        {
          if ( curl_strnequal("__Secure-", v76, 9) )
          {
            *(_BYTE *)(v129 + 40) |= 1u;
          }
          else if ( curl_strnequal("__Host-", *(_DWORD *)(v129 + 4), 7) )
          {
            *(_BYTE *)(v129 + 40) |= 2u;
          }
        }
        else
        {
          v127 = 1;
        }
        v9 = 0;
        v68 = 5;
        break;
      case 6:
        v77 = Curl_cstrdup(v67);
        *(_DWORD *)(v129 + 8) = v77;
        v27 = v77 == 0;
        v78 = (unsigned __int8)v127;
        if ( v27 )
          v78 = 1;
        v127 = v78;
        v68 = 6;
        break;
      default:
        break;
    }
    v82 = strtok_r(0, "\t", dest);
    ++v68;
    v69 = v127;
    if ( !v82 )
      break;
    v67 = v82;
  }
  while ( (v127 & 1) == 0 );
  if ( v68 == 6 )
  {
    v83 = Curl_cstrdup(&L_str_22);
    LOBYTE(v69) = v127;
    *(_DWORD *)(v129 + 8) = v83;
    if ( !v83 )
      LOBYTE(v69) = 1;
    v68 = (v83 == 0) ^ 7;
  }
  if ( (v69 & 1) != 0 || v68 != 7 )
  {
LABEL_273:
    freecookie(v124);
    return (Cookie *)v9;
  }
LABEL_214:
  v95 = *(_BYTE *)(v129 + 40);
  if ( (v95 & 1) != 0 && !*(_BYTE *)(v129 + 33) )
    goto LABEL_273;
  if ( (v95 & 2) != 0 )
  {
    if ( !*(_BYTE *)(v129 + 33) )
      goto LABEL_273;
    v113 = *(const char **)(v129 + 12);
    if ( !v113 || strcmp(v113, "/") || *(_BYTE *)(v129 + 32) )
      goto LABEL_273;
  }
  running = c->running;
  if ( !running && c->newsession && !*(_QWORD *)(v129 + 24) )
    goto LABEL_273;
  *(_BYTE *)(v129 + 34) = running;
  v97 = c->lastct + 1;
  c->lastct = v97;
  *(_DWORD *)(v129 + 36) = v97;
  if ( !noexpire )
    remove_expired((CookieInfo *)v124);
  v139 = cookiehash(*(const char *const *)(v129 + 20));
  next = c->cookies[v139];
  if ( next )
  {
    v99 = 0;
    s1c = 0;
    v128 = 0;
    v100 = (char *)v129;
    while ( 1 )
    {
      v101 = next;
      if ( !curl_strequal(next->name, *((_DWORD *)v100 + 1)) )
        goto LABEL_237;
      v102 = v101->domain;
      v103 = *(_DWORD *)(v129 + 20);
      if ( v102 )
      {
        if ( !v103 || !curl_strequal(v102, *(_DWORD *)(v129 + 20)) )
          goto LABEL_237;
      }
      else if ( v103 )
      {
        goto LABEL_237;
      }
      spath = v101->spath;
      if ( spath && *(_DWORD *)(v129 + 16) && v101->secure && !*(_BYTE *)(v129 + 33) && !secure )
      {
        v142 = *(_DWORD *)(v129 + 16);
        v105 = strchr(spath + 1, 47);
        v106 = v105 ? v105 - spath : strlen(spath);
        if ( curl_strnequal(spath, v142, v106) )
        {
          if ( data && (*((_BYTE *)&data->set + 1326) & 0x10) != 0 )
            Curl_infof(
              data,
              "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
              *(_DWORD *)(v129 + 4),
              *(_DWORD *)(v129 + 20));
          goto LABEL_267;
        }
      }
LABEL_237:
      if ( v99 )
      {
        v100 = (char *)v129;
      }
      else
      {
        v100 = (char *)v129;
        v99 = 0;
        if ( curl_strequal(v101->name, *(_DWORD *)(v129 + 4)) )
        {
          v107 = v101->domain;
          v108 = *(_DWORD *)(v129 + 20);
          if ( v107 )
          {
            if ( v108 )
            {
              if ( curl_strequal(v107, v108) )
              {
                v109 = (unsigned __int8)v128;
                if ( v101->tailmatch == *(_BYTE *)(v129 + 32) )
                  v109 = 1;
              }
              else
              {
                v109 = v128;
              }
            }
            else
            {
              v109 = v128;
            }
          }
          else
          {
            v109 = (unsigned __int8)v128;
            if ( !v108 )
              v109 = 1;
          }
          v128 = v109;
          if ( (v109 & 1) != 0 )
          {
            v110 = v101->spath;
            v99 = 0;
            v111 = 0;
            if ( !v110 )
              goto LABEL_259;
            if ( !*(_DWORD *)(v129 + 16) )
            {
              v111 = v101->spath;
LABEL_259:
              v112 = (unsigned __int8)v128;
              if ( (v111 != 0) == (*(_DWORD *)(v129 + 16) == 0) )
                v112 = 0;
              v128 = v112;
              if ( (v112 & 1) != 0 )
              {
                if ( *(_BYTE *)(v129 + 34) )
                {
                  s1c = (char *)v101;
                  v99 = v129;
                }
                else
                {
                  s1c = (char *)v101;
                  v99 = v129;
                  if ( v101->livecookie )
                    goto LABEL_267;
                }
              }
              goto LABEL_239;
            }
            if ( curl_strequal(v110, *(_DWORD *)(v129 + 16)) )
            {
              v111 = v101->spath;
              goto LABEL_259;
            }
            v128 = 0;
            v99 = 0;
          }
        }
      }
LABEL_239:
      next = v101->next;
      if ( !v101->next )
      {
        if ( v99 )
        {
          *(_DWORD *)v99 = *(_DWORD *)s1c;
          *(_DWORD *)(v99 + 36) = *((_DWORD *)s1c + 9);
          Curl_cfree(*((_DWORD *)s1c + 1));
          Curl_cfree(*((_DWORD *)s1c + 2));
          Curl_cfree(*((_DWORD *)s1c + 5));
          Curl_cfree(*((_DWORD *)s1c + 3));
          Curl_cfree(*((_DWORD *)s1c + 4));
          *(_OWORD *)(s1c + 28) = *(_OWORD *)(v99 + 28);
          v115 = *(_OWORD *)v99;
          *((_OWORD *)s1c + 1) = *(_OWORD *)(v99 + 16);
          *(_OWORD *)s1c = v115;
          v120 = v99;
          v9 = s1c;
          Curl_cfree(v120);
        }
        else
        {
          v9 = v100;
        }
        goto LABEL_282;
      }
    }
  }
  v9 = (char *)v129;
  v101 = 0;
  LOBYTE(v128) = 0;
LABEL_282:
  if ( data && c->running && (*((_BYTE *)&data->set + 1326) & 0x10) != 0 )
  {
    v116 = "Replaced";
    if ( (v128 & 1) == 0 )
      v116 = "Added";
    Curl_infof(data, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld", v116, *((_DWORD *)v9 + 1));
  }
  if ( (v128 & 1) == 0 )
  {
    p_next = &c->cookies[v139];
    if ( v101 )
      p_next = &v101->next;
    *p_next = (Cookie *)v9;
    ++c->numcookies;
  }
  LODWORD(v118) = *((_DWORD *)v9 + 6);
  v119 = *((_DWORD *)v9 + 7);
  if ( *((_QWORD *)v9 + 3) )
  {
    HIDWORD(v118) = *((_DWORD *)v9 + 7);
    if ( v118 < c->next_expiration )
    {
      LODWORD(c->next_expiration) = v118;
      HIDWORD(c->next_expiration) = v119;
    }
  }
  return (Cookie *)v9;
}
