Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v13; // $s2
  Cookie *v17; // $s0
  int v18; // $a3
  size_t v19; // $v0
  unsigned int v20; // $fp
  const char *v21; // $a3
  const char *v22; // $a2
  unsigned int v23; // $a0
  int v24; // $v0
  _BYTE *v25; // $s3
  size_t v26; // $s1
  int v27; // $v0
  _BOOL4 v28; // $v0
  int v29; // $v0
  void *v30; // $v0
  const char *v31; // $t0
  int v32; // $v0
  int v33; // $a3
  int v34; // $a3
  int v35; // $v0
  curl_off_t expires; // $v0
  int v37; // $v0
  int v38; // $v1
  int v39; // $v0
  char *name; // $a0
  const char *v41; // $s1
  char *value; // $s2
  void (*v43)(Cookie *); // $t9
  char *v44; // $v0
  int v45; // $a3
  int v46; // $a3
  _BYTE *v47; // $v0
  int v48; // $v0
  int is_ipnum; // $s2
  int v50; // $a2
  int v51; // $a0
  bool v52; // dc
  int v53; // $a0
  unsigned int v54; // $a0
  void *v55; // $v0
  int v56; // $v0
  char *v57; // $v0
  char *v58; // $v0
  int v59; // $v0
  size_t v60; // $s1
  char *v61; // $a0
  char *v62; // $v0
  const char *v63; // $a0
  int lastct; // $v0
  void (*v65)(Cookie *); // $t9
  Cookie **v66; // $s6
  Cookie *v67; // $fp
  int livecookie; // $s3
  Cookie *v69; // $s1
  Cookie *v70; // $s2
  Cookie **p_next; // $s7
  void (__fastcall *v72)(char *); // $t9
  char *v73; // $a0
  const char *v74; // $a2
  __int64 v75; // $v0
  int v76; // $v0
  char *v77; // $v0
  char *v78; // $v0
  char *v79; // $a0
  char *v80; // $a1
  const char *spath; // $s7
  char *v82; // $a0
  char *v83; // $a1
  char *v84; // $v0
  int v85; // $a3
  size_t v86; // $a2
  char *v87; // $a0
  char *v88; // $a1
  char *v89; // $v1
  char v91[4]; // [sp+30h] [-B8h] BYREF
  char *s; // [sp+34h] [-B4h]
  const char *ptr; // [sp+38h] [-B0h]
  int fields; // [sp+3Ch] [-ACh]
  _BOOL4 v95; // [sp+40h] [-A8h]
  int badcookie; // [sp+44h] [-A4h]
  void (*v97)(char **, const char *, size_t); // [sp+48h] [-A0h]
  _DWORD *v98; // [sp+4Ch] [-9Ch]
  char *reject; // [sp+50h] [-98h]
  void (*v100)(Cookie *); // [sp+54h] [-94h]
  const char *v101; // [sp+58h] [-90h]
  const char *v102; // [sp+5Ch] [-8Ch]
  char *tok_buf; // [sp+60h] [-88h] BYREF
  char date[128]; // [sp+64h] [-84h] BYREF
  int v105; // [sp+E4h] [-4h]

  s = (char *)path;
  v95 = secure;
  v98 = &_stack_chk_guard;
  v13 = (char *)lineptr;
  fields = time(0u);
  if ( data->req.setcookies >= 0x32u )
    goto LABEL_182;
  v17 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v17 )
    goto LABEL_182;
  if ( !httpheader )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v13 = (char *)(lineptr + 10);
      v17->httponly = 1;
    }
    if ( *v13 != 35 )
    {
      v77 = strchr(v13, 13);
      if ( v77 )
        *v77 = 0;
      v78 = strchr(v13, 10);
      if ( v78 )
        *v78 = 0;
      ptr = (const char *)&off_3020;
      s = "TRUE";
      if ( strtok_r(v13, "\t", &tok_buf) )
        __asm { jr      $v0 }
      ((void (__fastcall *)(Cookie *))(MEMORY[0xB100] + (__int16)freecookie))(v17);
      goto LABEL_182;
    }
    goto LABEL_181;
  }
  badcookie = 0;
  if ( strlen(lineptr) >= 0x1389 )
  {
LABEL_181:
    Curl_cfree(v17);
    goto LABEL_182;
  }
  reject = ";\t\r\n=";
  v97 = strstore;
  v100 = freecookie;
  while ( 2 )
  {
    while ( 1 )
    {
      v18 = *v13;
      if ( !*v13 || v18 != 32 && v18 != 9 )
        break;
      ++v13;
    }
    ptr = (const char *)*v13;
    v19 = strcspn(v13, reject);
    v20 = v19;
    if ( !v19 )
    {
      ptr = v13;
      goto LABEL_130;
    }
    v21 = ptr;
    v22 = &v13[v19];
    v23 = v19;
    while ( 1 )
    {
      v24 = v13[--v20];
      if ( v24 != 32 && v24 != 9 )
        break;
      v23 = v20;
      if ( !v20 )
        goto LABEL_16;
    }
    v20 = v23;
LABEL_16:
    if ( *v22 != 61 )
    {
      v31 = 0;
      if ( v20 >= 0xFFF )
      {
        v26 = 0;
        goto LABEL_55;
      }
      ptr = v22;
      v25 = 0;
      v26 = 0;
      goto LABEL_33;
    }
    v25 = v22 + 1;
    v102 = ptr;
    v101 = v22;
    v26 = strcspn(v22 + 1, ";\r\n");
    v21 = v102;
    ptr = &v25[v26];
    while ( v26 )
    {
      v27 = v101[v26];
      if ( v27 != 32 && v27 != 9 )
        break;
      --v26;
    }
    while ( 1 )
    {
      v28 = v20 < 0xFFF;
      if ( !v26 )
        goto LABEL_53;
      v29 = (char)*v25;
      if ( v29 == 32 )
      {
        ++v25;
        goto LABEL_24;
      }
      ++v25;
      if ( v29 != 9 )
        break;
LABEL_24:
      --v26;
    }
    --v25;
    v101 = v102;
    v30 = memchr(v25, 9, v26);
    v21 = v101;
    if ( v30 )
    {
      freecookie(v17);
      if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
        Curl_infof(data, "cookie contains TAB, dropping");
      goto LABEL_182;
    }
    v28 = v26 < 0xFFF;
    if ( v20 >= 0xFFF )
    {
LABEL_55:
      freecookie(v17);
      if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v20, v26);
      goto LABEL_182;
    }
LABEL_53:
    if ( !v28 )
      goto LABEL_55;
    v31 = (const char *)httpheader;
    if ( v20 + v26 >= 0x1001 )
      goto LABEL_55;
LABEL_33:
    if ( v20 >= 7 )
    {
      if ( v21 == (_BYTE *)&loc_5C + 3 && v13[1] == 95 )
      {
        v101 = v31;
        v32 = curl_strnequal("__Secure-", v13, 9, 95);
        v31 = v101;
        if ( v32 )
        {
          v17->prefix |= 1u;
          goto LABEL_38;
        }
        v39 = curl_strnequal("__Host-", v13, 7, v21);
        name = v17->name;
        v31 = v101;
        if ( v39 )
          v17->prefix |= 2u;
        if ( !name )
        {
LABEL_61:
          if ( v31 )
          {
            v97(&v17->name, v13, v20);
            v97(&v17->value, v25, v26);
            v41 = v17->name;
            if ( v41 )
            {
              value = v17->value;
              if ( value )
              {
                if ( !value[strcspn(v17->value, badoctets_0)] && !v41[strcspn(v41, badoctets_0)] )
                  goto LABEL_130;
                if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
                {
                  Curl_infof(data, "invalid octets in name/value, cookie dropped");
                  goto LABEL_68;
                }
              }
            }
          }
          goto LABEL_104;
        }
      }
      else
      {
LABEL_38:
        if ( !v17->name )
          goto LABEL_61;
      }
      if ( !v26 )
      {
        if ( v20 == 8 )
        {
          if ( curl_strnequal("httponly", v13, 8, v21) )
            v17->httponly = 1;
          goto LABEL_130;
        }
        if ( !v31 )
          goto LABEL_130;
      }
      if ( v20 != 7 || curl_strnequal("version", v13, 7, v21) )
        goto LABEL_130;
      if ( curl_strnequal("max-age", v13, 7, v33) )
      {
        if ( *v25 == 34 )
          ++v25;
        v35 = curlx_strtoofft(v25, 0, 10, &v17->expires);
        if ( v35 != 1 )
        {
          if ( v35 == 2 )
            goto LABEL_49;
          if ( v35 )
            goto LABEL_130;
          expires = v17->expires;
          if ( !expires )
            goto LABEL_49;
          v50 = fields >> 0x1F;
          v51 = 0x7FFFFFFF - (fields >> 0x1F);
          if ( v51 >= SHIDWORD(expires) )
          {
            v52 = HIDWORD(expires) != v51;
            v53 = fields;
            if ( !v52 )
            {
              if ( ~fields < (unsigned int)expires )
                goto LABEL_120;
              v53 = fields;
            }
            v54 = expires + v53;
            LODWORD(v17->expires) = v54;
            HIDWORD(v17->expires) = (v54 < (unsigned int)expires) + HIDWORD(expires) + v50;
            goto LABEL_130;
          }
        }
LABEL_120:
        v37 = -1;
        v38 = 0x7FFFFFFF;
      }
      else
      {
        if ( !curl_strnequal("expires", v13, 7, v34) || v17->expires || v26 >= 0x80 )
          goto LABEL_130;
        v55 = memcpy(date, v25, v26);
        v91[v26 + 0x34] = 0;
        v37 = Curl_getdate_capped(v55);
        v38 = v37 >> 0x1F;
        if ( v37 )
        {
          if ( v37 >= 0 )
            goto LABEL_51;
          v37 = 0;
        }
        else
        {
LABEL_49:
          v37 = 1;
        }
        v38 = 0;
      }
LABEL_51:
      LODWORD(v17->expires) = v37;
      HIDWORD(v17->expires) = v38;
      goto LABEL_130;
    }
    if ( !v17->name )
      goto LABEL_61;
    if ( v26 )
    {
      if ( v20 == 4 )
        goto LABEL_74;
      if ( v20 != 6 || !curl_strnequal("domain", v13, 6, v21) )
        goto LABEL_130;
      if ( *v25 == 46 )
      {
        ++v25;
        --v26;
      }
      if ( v26 == 9 && curl_strnequal(v25, "localhost", 9, v46)
        || (v47 = memchr(v25, 46, v26)) != 0 && v26 - (v47 - v25) >= 2 )
      {
        if ( !domain )
        {
          is_ipnum = Curl_host_is_ipnum(v25);
          strstore(&v17->domain, v25, v26);
          if ( !v17->domain )
            goto LABEL_104;
          if ( is_ipnum )
            goto LABEL_130;
          goto LABEL_100;
        }
        v48 = Curl_host_is_ipnum(domain);
      }
      else
      {
        v48 = Curl_host_is_ipnum(":");
        domain = ":";
      }
      if ( v48 )
      {
        if ( !strncmp(v25, domain, v26) && strlen(domain) == v26 )
        {
          strstore(&v17->domain, v25, v26);
          v44 = v17->domain;
          goto LABEL_77;
        }
      }
      else if ( cookie_tailmatch(v25, v26, domain) )
      {
        strstore(&v17->domain, v25, v26);
        if ( !v17->domain )
          goto LABEL_104;
LABEL_100:
        v17->tailmatch = 1;
        goto LABEL_130;
      }
      if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
        Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v25);
      badcookie = httpheader;
      goto LABEL_130;
    }
    if ( v20 == 6 )
    {
      v101 = v31;
      if ( !curl_strnequal("secure", v13, 6, v21) )
      {
        if ( v101 )
          curl_strnequal("domain", v13, 6, v45);
        goto LABEL_130;
      }
      if ( v95 || !c->running )
      {
        v17->secure = 1;
        goto LABEL_130;
      }
      goto LABEL_104;
    }
    if ( !v31 || v20 != 4 )
      goto LABEL_130;
LABEL_74:
    if ( !curl_strnequal((char *)v100 + 0x2DEC, v13, 4, v21) )
      goto LABEL_130;
    strstore(&v17->path, v25, v26);
    if ( !v17->path )
      goto LABEL_104;
    Curl_cfree(v17->spath);
    v44 = sanitize_cookie_path(v17->path);
    v17->spath = v44;
LABEL_77:
    if ( !v44 )
    {
      ((void (__fastcall *)(Cookie *))(MEMORY[0xB100] + (__int16)freecookie))(v17);
      goto LABEL_182;
    }
    while ( 1 )
    {
LABEL_130:
      v56 = *ptr;
      if ( !*ptr )
        goto LABEL_136;
      if ( v56 != 32 && v56 != 9 )
        break;
      ++ptr;
    }
    if ( v56 == 59 )
    {
      v13 = (char *)(ptr + 1);
      continue;
    }
    break;
  }
LABEL_136:
  v43 = (void (*)(Cookie *))MEMORY[0xB100];
  if ( badcookie )
    goto LABEL_105;
  if ( !v17->domain )
  {
    if ( domain )
    {
      v76 = Curl_cstrdup(domain);
      v17->domain = (char *)v76;
      if ( !v76 )
      {
        v43 = (void (*)(Cookie *))MEMORY[0xB100];
        goto LABEL_105;
      }
    }
  }
  if ( !v17->path && s )
  {
    v57 = strchr(s, 63);
    v58 = v57 ? (char *)Curl_memrchr(s, 47, v57 - s) : strrchr(s, 47);
    if ( v58 )
    {
      v59 = v58 - s;
      v60 = v59 + 1;
      v61 = (char *)Curl_cmalloc(v59 + 2);
      v17->path = v61;
      if ( !v61
        || (memcpy(v61, s, v60), v17->path[v60] = 0, v62 = sanitize_cookie_path(v17->path), (v17->spath = v62) == 0) )
      {
LABEL_104:
        v43 = freecookie;
        goto LABEL_105;
      }
    }
  }
  v43 = (void (*)(Cookie *))MEMORY[0xB100];
  if ( !v17->name )
    goto LABEL_105;
  ++data->req.setcookies;
  if ( (v17->prefix & 1) != 0 )
  {
    v43 = (void (*)(Cookie *))MEMORY[0xB100];
    if ( !v17->secure )
      goto LABEL_105;
  }
  if ( (v17->prefix & 2) != 0 )
  {
    v43 = (void (*)(Cookie *))MEMORY[0xB100];
    if ( !v17->secure )
      goto LABEL_105;
    v63 = v17->path;
    if ( !v63 )
      goto LABEL_105;
    if ( strcmp(v63, "/") )
      goto LABEL_104;
    v43 = (void (*)(Cookie *))MEMORY[0xB100];
    if ( v17->tailmatch )
      goto LABEL_105;
  }
  if ( !c->running && c->newsession )
  {
    v43 = (void (*)(Cookie *))MEMORY[0xB100];
    if ( !v17->expires )
      goto LABEL_105;
  }
  lastct = c->lastct;
  v17->livecookie = c->running;
  c->lastct = ++lastct;
  v17->creationtime = lastct;
  v65 = freecookie;
  if ( !noexpire )
  {
    remove_expired(c);
    v65 = (void (*)(Cookie *))MEMORY[0xB100];
  }
  v66 = &c->cookies[((int (__fastcall *)(char *))((char *)v65 + (__int16)cookiehash))(v17->domain)];
  v67 = *v66;
  livecookie = 0;
  v69 = 0;
  v70 = 0;
  p_next = 0;
  while ( 2 )
  {
    if ( !v67 )
    {
      if ( v70 )
      {
        v70->next = v69->next;
        v72 = (void (__fastcall *)(char *))Curl_cfree;
        v73 = v69->name;
        v70->creationtime = v69->creationtime;
        v72(v73);
        Curl_cfree(v69->value);
        Curl_cfree(v69->domain);
        Curl_cfree(v69->path);
        Curl_cfree(v69->spath);
        memcpy(v69, v70, sizeof(Cookie));
        Curl_cfree(v70);
        v17 = v69;
      }
      if ( c->running && (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
      {
        if ( livecookie )
          v74 = "Replaced";
        else
          v74 = "Added";
        Curl_infof(
          data,
          "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
          v74,
          v17->name,
          v17->value,
          v17->domain,
          v17->path,
          v17->expires);
      }
      if ( !livecookie )
      {
        if ( p_next )
          *p_next = v17;
        else
          *v66 = v17;
        ++c->numcookies;
      }
      HIDWORD(v75) = v17->expires;
      LODWORD(v75) = HIDWORD(v17->expires);
      if ( v75 && __SPAIR64__(v75, HIDWORD(v75)) < c->next_expiration )
      {
        LODWORD(c->next_expiration) = HIDWORD(v75);
        HIDWORD(c->next_expiration) = v75;
      }
      goto LABEL_183;
    }
    if ( !curl_strequal(v67->name, v17->name) )
      goto LABEL_198;
    v79 = v67->domain;
    v80 = v17->domain;
    if ( v79 )
    {
      if ( v80 && curl_strequal(v79, v80) )
      {
        spath = v67->spath;
        goto LABEL_197;
      }
      goto LABEL_198;
    }
    if ( v80 )
      goto LABEL_198;
    spath = v67->spath;
LABEL_197:
    if ( !spath )
      goto LABEL_198;
    s = v17->spath;
    if ( !s || !v67->secure || v17->secure || v95 )
      goto LABEL_198;
    v84 = strchr(spath + 1, 47);
    v86 = v84 - spath;
    if ( !v84 )
      v86 = strlen(spath);
    if ( !curl_strnequal(spath, s, v86, v85) )
    {
LABEL_198:
      if ( v70 || !curl_strequal(v67->name, v17->name) )
        goto LABEL_204;
      v82 = v67->domain;
      v83 = v17->domain;
      if ( v82 )
      {
        if ( v83 && curl_strequal(v82, v83) && v67->tailmatch == v17->tailmatch )
        {
LABEL_218:
          v87 = v67->spath;
LABEL_219:
          v88 = v17->spath;
          if ( !v87 )
          {
            v89 = v67->spath;
            goto LABEL_221;
          }
          if ( v88 && curl_strequal(v87, v88) )
          {
            v89 = v67->spath;
LABEL_221:
            livecookie = 0;
            if ( (v89 == 0) == (v17->spath == 0) )
            {
              livecookie = v17->livecookie;
              if ( v17->livecookie )
              {
                v69 = v67;
                v70 = v17;
              }
              else
              {
                v69 = v67;
                if ( v67->livecookie )
                  goto LABEL_104;
                v70 = v17;
                livecookie = 1;
              }
            }
            goto LABEL_204;
          }
          goto LABEL_203;
        }
      }
      else if ( !v83 )
      {
        v87 = v67->spath;
        goto LABEL_219;
      }
      if ( !livecookie )
      {
LABEL_203:
        livecookie = 0;
LABEL_204:
        p_next = &v67->next;
        v67 = v67->next;
        continue;
      }
      goto LABEL_218;
    }
    break;
  }
  if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) == 0 )
    goto LABEL_104;
  Curl_infof(data, "cookie '%s' for domain '%s' dropped, would overlay an existing cookie", v17->name, v17->domain);
LABEL_68:
  v43 = (void (*)(Cookie *))MEMORY[0xB100];
LABEL_105:
  ((void (*)(Cookie *))((char *)v43 + (__int16)freecookie))(v17);
LABEL_182:
  v17 = 0;
LABEL_183:
  if ( v105 != *v98 )
    _stack_chk_fail();
  return v17;
}
