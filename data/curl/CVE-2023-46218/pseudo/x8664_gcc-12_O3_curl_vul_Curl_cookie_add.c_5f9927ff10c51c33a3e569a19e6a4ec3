Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  Cookie *v10; // rbp
  const char *i; // r13
  char v12; // bl
  size_t v13; // r15
  const char *v14; // r14
  const char *v15; // rdx
  size_t v16; // rax
  const char *v17; // r9
  size_t v18; // r12
  char v19; // cl
  bool v20; // cl
  bool v21; // al
  unsigned __int8 prefix; // al
  char *v23; // rax
  bool running; // al
  size_t v25; // rax
  char *v26; // rcx
  CookieInfo *v27; // rdx
  Cookie *v28; // r12
  char livecookie; // bl
  Cookie *v30; // r14
  __m128i *v31; // r15
  Cookie *next; // rax
  char *v33; // rdi
  char *v34; // rsi
  const char *spath; // r13
  char *v36; // rdi
  char *v37; // rsi
  char *v38; // rdi
  char *v39; // rsi
  char *v40; // rax
  char *v41; // rax
  char *v42; // rax
  __int64 v43; // rax
  char *v44; // rax
  __int64 v45; // rdx
  char v46; // r15
  char *v47; // rax
  int v48; // eax
  const char *v49; // rcx
  char *v50; // rdx
  int v51; // eax
  const char *v52; // rax
  char *v53; // rax
  char *v54; // rax
  void *v55; // rcx
  char *v56; // rdx
  __int64 v57; // rax
  __int64 v58; // rax
  __int64 v59; // rcx
  char *v60; // rax
  char *v61; // rax
  bool v62; // r14
  __int64 v63; // rax
  char *v64; // rdi
  __int64 v65; // rax
  __int64 v66; // rbx
  int v68; // eax
  const char *v69; // r9
  _BYTE *v70; // rax
  char v71; // al
  const char *v72; // r9
  char v73; // bl
  int v74; // eax
  const char *v75; // r9
  size_t v76; // rax
  __int64 v77; // rax
  int v78; // eax
  char v79; // al
  size_t v80; // rax
  size_t v81; // r15
  size_t v82; // r13
  int v83; // eax
  int v84; // eax
  __int64 v85; // rax
  __int64 v86; // rax
  const char *name; // rbx
  char *value; // r12
  __int64 v89; // rax
  char *v90; // rax
  int v91; // eax
  curl_off_t expires; // rax
  char *v93; // rdi
  const char *v94; // rdx
  const char *v95; // rax
  const char *v96; // r9
  const char *v97; // r8
  const char *v98; // rcx
  curl_off_t v99; // rax
  char is_ipnum; // al
  __int64 v101; // rax
  char *v102; // rax
  char *v103; // rcx
  size_t v104; // rdx
  size_t v105; // rax
  char *v106; // rax
  char *v107; // rbx
  signed __int64 v108; // rbx
  char *v109; // rax
  char *v110; // rax
  __int64 v111; // rax
  const char *v112; // rsi
  char *v113; // rdi
  __int64 v114; // rax
  __int64 v115; // rax
  __int64 v116; // rdx
  bool v117; // zf
  __int64 v118; // rax
  int v119; // eax
  int v120; // eax
  int ptrg; // [rsp+8h] [rbp-120h]
  char *ptra; // [rsp+8h] [rbp-120h]
  bool ptrb; // [rsp+8h] [rbp-120h]
  char *ptrc; // [rsp+8h] [rbp-120h]
  char *ptrd; // [rsp+8h] [rbp-120h]
  char *ptre; // [rsp+8h] [rbp-120h]
  int ptrf; // [rsp+8h] [rbp-120h]
  const char *maxagen; // [rsp+10h] [rbp-118h]
  size_t maxage; // [rsp+10h] [rbp-118h]
  const char *maxagea; // [rsp+10h] [rbp-118h]
  const char *maxageb; // [rsp+10h] [rbp-118h]
  const char *maxagec; // [rsp+10h] [rbp-118h]
  const char *maxaged; // [rsp+10h] [rbp-118h]
  bool maxagee; // [rsp+10h] [rbp-118h]
  const char *maxagef; // [rsp+10h] [rbp-118h]
  const char *maxageg; // [rsp+10h] [rbp-118h]
  const char *maxageh; // [rsp+10h] [rbp-118h]
  const char *maxageo; // [rsp+10h] [rbp-118h]
  const char *maxagep; // [rsp+10h] [rbp-118h]
  const char *maxageq; // [rsp+10h] [rbp-118h]
  const char *maxagei; // [rsp+10h] [rbp-118h]
  bool maxagej; // [rsp+10h] [rbp-118h]
  const char *maxagek; // [rsp+10h] [rbp-118h]
  const char *maxagel; // [rsp+10h] [rbp-118h]
  const char *maxagem; // [rsp+10h] [rbp-118h]
  const char *maxager; // [rsp+10h] [rbp-118h]
  const char *v148; // [rsp+18h] [rbp-110h]
  const char *v149; // [rsp+18h] [rbp-110h]
  time_t now; // [rsp+40h] [rbp-E8h]
  bool badcookie; // [rsp+4Fh] [rbp-D9h]
  char *tok_buf; // [rsp+58h] [rbp-D0h] BYREF
  char date[128]; // [rsp+60h] [rbp-C8h] BYREF
  unsigned __int64 v158; // [rsp+E8h] [rbp-40h]

  v158 = __readfsqword(0x28u);
  now = time(0LL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  v10 = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !v10 )
    return 0LL;
  if ( httpheader )
  {
    badcookie = 0;
    if ( strlen(lineptr) <= 0x1388 )
    {
      for ( i = lineptr; ; ++i )
      {
        v12 = *i;
        if ( !*i )
          break;
LABEL_7:
        if ( v12 != 32 && v12 != 9 )
        {
          v13 = strcspn(i, ";\t\r\n=");
          if ( !v13 )
          {
            v14 = i;
            goto LABEL_12;
          }
          goto LABEL_17;
        }
      }
      while ( 1 )
      {
        v13 = strcspn(i, ";\t\r\n=");
        if ( !v13 )
        {
LABEL_40:
          if ( !badcookie )
          {
            if ( v10->domain || !domain || (v111 = Curl_cstrdup(domain), (v10->domain = (char *)v111) != 0LL) )
            {
              if ( v10->path || !path )
                goto LABEL_290;
              v106 = strchr(path, 63);
              v107 = v106 ? (char *)Curl_memrchr(path, 47LL, v106 - path) : strrchr(path, 47);
              if ( !v107
                || (v108 = v107 - path, v109 = (char *)Curl_cmalloc(v108 + 2), (v10->path = v109) != 0LL)
                && (memcpy(v109, path, v108 + 1),
                    v10->path[v108 + 1] = 0,
                    v110 = sanitize_cookie_path(v10->path),
                    (v10->spath = v110) != 0LL) )
              {
LABEL_290:
                if ( v10->name )
                {
                  ++data->req.setcookies;
                  goto LABEL_47;
                }
              }
            }
          }
LABEL_119:
          freecookie(v10);
          return 0LL;
        }
LABEL_17:
        v15 = &i[v13];
        while ( v13 )
        {
          if ( i[v13 - 1] != 9 && i[v13 - 1] != 32 )
          {
            v20 = 0;
            if ( *v15 != 61 )
            {
              v21 = 0;
              v14 = v15;
              v17 = 0LL;
              v18 = 0LL;
              goto LABEL_28;
            }
            goto LABEL_22;
          }
          --v13;
        }
        if ( *v15 != 61 )
        {
          v14 = v15;
          v18 = 0LL;
          v20 = 0;
          v17 = 0LL;
LABEL_132:
          if ( !v10->name )
            goto LABEL_167;
          if ( v18 )
          {
            if ( v13 == 4 )
              goto LABEL_180;
            if ( v13 != 6 )
              goto LABEL_38;
            maxagef = v17;
            v68 = curl_strnequal("domain", i, 6LL);
            v69 = maxagef;
            if ( !v68 )
              goto LABEL_38;
            if ( *maxagef == 46 )
            {
              v69 = maxagef + 1;
              --v18;
            }
            if ( v18 == 9 && (maxagep = v69, v78 = curl_strnequal(v69, "localhost", 9LL), v69 = maxagep, v78)
              || (maxageg = v69, v70 = memchr(v69, 46, v18), v69 = maxageg, v70) && v18 - (v70 - maxageg) > 1 )
            {
              if ( !domain )
              {
                maxager = v69;
                is_ipnum = Curl_host_is_ipnum(v69);
                v75 = maxager;
                v73 = is_ipnum;
LABEL_150:
                maxageo = v75;
                Curl_cfree(v10->domain);
                v77 = Curl_memdup(maxageo, v18 + 1);
                v10->domain = (char *)v77;
                if ( !v77 )
                  goto LABEL_119;
                *(_BYTE *)(v77 + v18) = 0;
                if ( !v10->domain )
                  goto LABEL_119;
                if ( !v73 )
                  v10->tailmatch = 1;
LABEL_38:
                v12 = *v14;
                goto LABEL_39;
              }
              maxageq = v69;
              v79 = Curl_host_is_ipnum(domain);
              v72 = maxageq;
              v73 = v79;
              if ( !v79 )
                goto LABEL_157;
LABEL_148:
              maxageh = v72;
              v74 = strncmp(v72, domain, v18);
              v75 = maxageh;
              if ( !v74 )
              {
                v76 = strlen(domain);
                v75 = maxageh;
                if ( v76 == v18 )
                  goto LABEL_150;
              }
            }
            else
            {
              v71 = Curl_host_is_ipnum(&LC1);
              domain = (const char *)&LC1;
              v72 = maxageg;
              v73 = v71;
              if ( v71 )
                goto LABEL_148;
LABEL_157:
              maxagei = v72;
              v80 = strlen(domain);
              v75 = maxagei;
              v81 = v80;
              if ( v80 >= v18 )
              {
                v82 = v80 - v18;
                v83 = curl_strnequal(maxagei, &domain[v80 - v18], v18);
                v75 = maxagei;
                if ( v83 )
                {
                  if ( v18 == v81 || domain[v82 - 1] == 46 )
                    goto LABEL_150;
                }
              }
            }
            if ( (data->set.gap8BB[3] & 0x10) != 0 )
              Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v75);
            v12 = *v14;
            badcookie = httpheader;
            goto LABEL_39;
          }
          if ( v13 != 6 )
          {
            if ( v20 && v13 == 4 )
            {
LABEL_180:
              maxagel = v17;
              if ( (unsigned int)curl_strnequal("path", i, 4LL) )
              {
                Curl_cfree(v10->path);
                v89 = Curl_memdup(maxagel, v18 + 1);
                v10->path = (char *)v89;
                if ( !v89 )
                  goto LABEL_119;
                *(_BYTE *)(v89 + v18) = 0;
                if ( !v10->path )
                  goto LABEL_119;
                Curl_cfree(v10->spath);
                v90 = sanitize_cookie_path(v10->path);
                v10->spath = v90;
                if ( !v90 )
                  goto LABEL_119;
              }
            }
            goto LABEL_38;
          }
          maxagee = v20;
          if ( !(unsigned int)curl_strnequal("secure", i, 6LL) )
          {
            if ( maxagee )
              curl_strnequal("domain", i, 6LL);
            goto LABEL_38;
          }
          if ( !secure && c->running )
            goto LABEL_119;
          v10->secure = 1;
          v12 = *v14;
          goto LABEL_39;
        }
LABEL_22:
        v148 = v15;
        maxagen = v15 + 1;
        v16 = strcspn(v15 + 1, ";\r\n");
        v17 = maxagen;
        v18 = v16;
        v14 = &maxagen[v16];
        while ( 1 )
        {
          if ( !v18 )
          {
            v20 = httpheader;
            v21 = 0;
            goto LABEL_28;
          }
          v19 = v148[v18];
          if ( v19 != 32 && v19 != 9 )
            break;
          --v18;
        }
        while ( *v17 == 32 || *v17 == 9 )
        {
          ++v17;
          if ( !--v18 )
            goto LABEL_127;
        }
        maxaged = v17;
        if ( memchr(v17, 9, v18) )
        {
          freecookie(v10);
          if ( (data->set.gap8BB[3] & 0x10) != 0 )
            Curl_infof(data, "cookie contains TAB, dropping");
          return 0LL;
        }
        v17 = maxaged;
LABEL_127:
        v20 = httpheader;
        v21 = v18 > 0xFFE;
LABEL_28:
        if ( v13 > 0xFFE || v21 || v18 + v13 > 0x1000 )
        {
          freecookie(v10);
          if ( (data->set.gap8BB[3] & 0x10) != 0 )
            Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v13, v18);
          return 0LL;
        }
        if ( v13 <= 6 )
          goto LABEL_132;
        if ( v12 == 95 && i[1] == 95 )
        {
          v149 = v17;
          maxagej = v20;
          v84 = curl_strnequal("__Secure-", i, 9LL);
          v20 = maxagej;
          v17 = v149;
          if ( v84 )
          {
            v10->prefix |= 1u;
            if ( !v10->name )
              goto LABEL_167;
            goto LABEL_34;
          }
          v119 = curl_strnequal("__Host-", i, 7LL);
          v20 = maxagej;
          v17 = v149;
          if ( v119 )
          {
            v10->prefix |= 2u;
            if ( !v10->name )
            {
LABEL_167:
              maxagek = v17;
              if ( !v20 )
                goto LABEL_119;
              Curl_cfree(0LL);
              v85 = Curl_memdup(i, v13 + 1);
              v10->name = (char *)v85;
              if ( v85 )
                *(_BYTE *)(v85 + v13) = 0;
              Curl_cfree(v10->value);
              v86 = Curl_memdup(maxagek, v18 + 1);
              v10->value = (char *)v86;
              if ( v86 )
                *(_BYTE *)(v86 + v18) = 0;
              name = v10->name;
              if ( !name )
                goto LABEL_119;
              value = v10->value;
              if ( !value )
                goto LABEL_119;
              if ( value[strcspn(v10->value, &badoctets_0)] || name[strcspn(name, &badoctets_0)] )
              {
                if ( (data->set.gap8BB[3] & 0x10) != 0 )
                  Curl_infof(data, "invalid octets in name/value, cookie dropped");
                goto LABEL_119;
              }
              goto LABEL_38;
            }
            goto LABEL_34;
          }
        }
        if ( !v10->name )
          goto LABEL_167;
LABEL_34:
        if ( !v18 )
        {
          if ( v13 == 8 )
          {
            if ( !(unsigned int)curl_strnequal("httponly", i, 8LL) )
              goto LABEL_38;
            v10->httponly = 1;
            v12 = *v14;
            goto LABEL_39;
          }
          if ( !v20 )
            goto LABEL_38;
        }
        if ( v13 != 7 )
          goto LABEL_38;
        maxagem = v17;
        if ( (unsigned int)curl_strnequal("version", i, 7LL) )
          goto LABEL_38;
        if ( !(unsigned int)curl_strnequal("max-age", i, 7LL) )
        {
          if ( (unsigned int)curl_strnequal("expires", i, 7LL) && !v10->expires && v18 <= 0x7F )
          {
            v112 = maxagem;
            v113 = date;
            if ( v18 >= 8 )
            {
              qmemcpy(date, maxagem, 8 * (v18 >> 3));
              v112 = &maxagem[8 * (v18 >> 3)];
              v113 = &date[8 * (v18 >> 3)];
            }
            v114 = 0LL;
            if ( (v18 & 4) != 0 )
            {
              *(_DWORD *)v113 = *(_DWORD *)v112;
              v114 = 4LL;
            }
            if ( (v18 & 2) != 0 )
            {
              *(_WORD *)&v113[v114] = *(_WORD *)&v112[v114];
              v114 += 2LL;
            }
            if ( (v18 & 1) != 0 )
              v113[v114] = v112[v114];
            date[v18] = 0;
            v115 = Curl_getdate_capped(date, v112);
            v116 = 0LL;
            v117 = v115 == 0;
            if ( v115 >= 0 )
              v116 = v115;
            v118 = 1LL;
            if ( !v117 )
              v118 = v116;
            v10->expires = v118;
          }
          goto LABEL_38;
        }
        v91 = curlx_strtoofft(&maxagem[*maxagem == 34], 0LL, 10LL, &v10->expires);
        if ( v91 == 1 )
        {
          v10->expires = 0x7FFFFFFFFFFFFFFFLL;
          v12 = *v14;
        }
        else
        {
          if ( v91 == 2 )
            goto LABEL_240;
          if ( v91 )
            goto LABEL_38;
          expires = v10->expires;
          if ( !expires )
          {
LABEL_240:
            v10->expires = 1LL;
            v12 = *v14;
          }
          else
          {
            if ( expires <= 0x7FFFFFFFFFFFFFFFLL - now )
              v10->expires = now + expires;
            else
              v10->expires = 0x7FFFFFFFFFFFFFFFLL;
            v12 = *v14;
          }
        }
LABEL_39:
        if ( !v12 )
          goto LABEL_40;
LABEL_12:
        while ( v12 == 32 || v12 == 9 )
        {
          v12 = *++v14;
          if ( !v12 )
            goto LABEL_40;
        }
        if ( v12 != 59 )
          goto LABEL_40;
        v12 = v14[1];
        i = v14 + 1;
        if ( v12 )
          goto LABEL_7;
      }
    }
LABEL_224:
    Curl_cfree(v10);
    return 0LL;
  }
  tok_buf = 0LL;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
  {
    v10->httponly = 1;
    lineptr += 10;
  }
  if ( *lineptr == 35 )
    goto LABEL_224;
  v40 = strchr(lineptr, 13);
  if ( v40 )
    *v40 = 0;
  v41 = strchr(lineptr, 10);
  if ( v41 )
    *v41 = 0;
  v42 = strtok_r((char *)lineptr, "\t", &tok_buf);
  if ( !v42 )
    goto LABEL_119;
  v43 = Curl_cstrdup(&v42[*v42 == 46]);
  v10->domain = (char *)v43;
  maxagea = (const char *)v43;
  ptrb = v43 != 0;
  v44 = strtok_r(0LL, "\t", &tok_buf);
  v46 = ptrb && v44 != 0LL;
  if ( !v46 )
  {
    v46 = ptrb;
    v120 = 1;
    v62 = maxagea == 0LL;
    goto LABEL_279;
  }
  v10->tailmatch = (unsigned int)curl_strequal(v44, "TRUE", v45, maxagea) != 0;
  v47 = strtok_r(0LL, "\t", &tok_buf);
  if ( !v47 )
  {
    v62 = 0;
    v120 = 2;
    goto LABEL_279;
  }
  ptrc = v47;
  v48 = strcmp("TRUE", v47);
  v49 = (const char *)Curl_cstrdup;
  v50 = ptrc;
  if ( v48 && (maxageb = (const char *)Curl_cstrdup, v51 = strcmp("FALSE", ptrc), v50 = ptrc, v49 = maxageb, v51) )
  {
    v52 = (const char *)((__int64 (__fastcall *)(char *))maxageb)(ptrc);
    v10->path = (char *)v52;
    if ( !v52 )
      goto LABEL_210;
    v53 = sanitize_cookie_path(v52);
    v10->spath = v53;
    v46 = v53 != 0LL;
    ptrd = v53;
    v54 = strtok_r(0LL, "\t", &tok_buf);
    v55 = ptrd;
    v56 = v54;
    if ( !v54 || !v46 )
    {
      v120 = 3;
      v62 = ptrd == 0LL;
      goto LABEL_279;
    }
    v46 = httpheader;
  }
  else
  {
    ptre = v50;
    v57 = ((__int64 (__fastcall *)(void *))v49)(&LC0);
    v10->path = (char *)v57;
    maxagec = (const char *)v57;
    v58 = Curl_cstrdup(&LC0);
    v56 = ptre;
    v10->spath = (char *)v58;
    if ( !v58 )
    {
      v10->secure = 0;
      if ( !(unsigned int)curl_strequal(ptre, "TRUE", ptre, v59) )
        goto LABEL_210;
      goto LABEL_106;
    }
    v55 = (void *)maxagec;
    v46 = maxagec == 0LL;
  }
  v10->secure = 0;
  if ( (unsigned int)curl_strequal(v56, "TRUE", v56, v55) )
  {
LABEL_106:
    if ( secure || c->running )
    {
      v10->secure = 1;
      goto LABEL_109;
    }
LABEL_210:
    strtok_r(0LL, "\t", &tok_buf);
    goto LABEL_119;
  }
LABEL_109:
  v60 = strtok_r(0LL, "\t", &tok_buf);
  if ( !v60 || v46 == 1 )
  {
    v62 = v46;
    v120 = 4;
    v46 ^= 1u;
    goto LABEL_279;
  }
  ptrf = curlx_strtoofft(v60, 0LL, 10LL, &v10->expires);
  v46 = ptrf == 0;
  v61 = strtok_r(0LL, "\t", &tok_buf);
  v62 = ptrf == 0 && v61 != 0LL;
  if ( !v62 )
  {
    v120 = 5;
    v62 = ptrf != 0;
    goto LABEL_279;
  }
  v63 = Curl_cstrdup(v61);
  v10->name = (char *)v63;
  if ( v63 )
  {
    if ( (unsigned int)curl_strnequal("__Secure-", v63, 9LL) )
    {
      v10->prefix |= 1u;
    }
    else if ( (unsigned int)curl_strnequal("__Host-", v10->name, 7LL) )
    {
      v10->prefix |= 2u;
    }
    v64 = strtok_r(0LL, "\t", &tok_buf);
    if ( v64 )
    {
      v65 = Curl_cstrdup(v64);
      v10->value = (char *)v65;
      v66 = v65;
      v46 = v65 != 0;
      if ( strtok_r(0LL, "\t", &tok_buf) && v46 )
      {
        while ( strtok_r(0LL, "\t", &tok_buf) )
          ;
        goto LABEL_119;
      }
      v120 = 7;
      v62 = v66 == 0;
LABEL_279:
      if ( v120 != 7 && v46 )
        goto LABEL_119;
      goto LABEL_227;
    }
    v62 = httpheader;
  }
  else
  {
    strtok_r(0LL, "\t", &tok_buf);
  }
  v101 = Curl_cstrdup(&LC24);
  v10->value = (char *)v101;
  if ( !v101 )
    goto LABEL_119;
LABEL_227:
  if ( v62 )
    goto LABEL_119;
LABEL_47:
  prefix = v10->prefix;
  if ( (prefix & 1) != 0 )
  {
    if ( !v10->secure )
      goto LABEL_119;
    if ( (prefix & 2) != 0 )
      goto LABEL_50;
  }
  else if ( (prefix & 2) != 0 )
  {
    if ( !v10->secure )
      goto LABEL_119;
LABEL_50:
    v23 = v10->path;
    if ( !v23 || *v23 != 47 || v23[1] || v10->tailmatch )
      goto LABEL_119;
  }
  running = c->running;
  if ( !running && c->newsession && !v10->expires )
    goto LABEL_119;
  v10->livecookie = running;
  ptrg = c->lastct;
  c->lastct = ptrg + 1;
  v10->creationtime = ptrg + 1;
  if ( !noexpire )
    remove_expired(c);
  v25 = cookiehash(v10->domain);
  v27 = c;
  maxage = v25;
  v28 = c->cookies[v25];
  if ( !v28 )
  {
    if ( c->running && (data->set.gap8BB[3] & 0x10) != 0 )
    {
      v95 = v10->path;
      v96 = v10->domain;
      v30 = v10;
      livecookie = 0;
      v97 = v10->value;
      v98 = v10->name;
      v94 = "Added";
      goto LABEL_205;
    }
    v30 = v10;
    goto LABEL_239;
  }
  livecookie = 0;
  v30 = 0LL;
  v31 = 0LL;
  while ( 1 )
  {
    if ( !(unsigned int)curl_strequal(v28->name, v10->name, v27, v26) )
      goto LABEL_72;
    v33 = v28->domain;
    v34 = v10->domain;
    if ( v33 )
    {
      if ( !v34 || !(unsigned int)curl_strequal(v33, v34, v27, v26) )
        goto LABEL_72;
    }
    else if ( v34 )
    {
      goto LABEL_72;
    }
    spath = v28->spath;
    if ( spath )
    {
      v26 = v10->spath;
      ptra = v26;
      if ( v26 )
      {
        if ( v28->secure && !v10->secure && !secure )
        {
          v102 = strchr(spath + 1, 47);
          v103 = ptra;
          if ( v102 )
          {
            v104 = v102 - spath;
          }
          else
          {
            v105 = strlen(spath);
            v103 = ptra;
            v104 = v105;
          }
          if ( (unsigned int)curl_strnequal(spath, v103, v104) )
          {
            if ( (data->set.gap8BB[3] & 0x10) != 0 )
              Curl_infof(
                data,
                "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                v10->name,
                v10->domain);
            goto LABEL_119;
          }
        }
      }
    }
LABEL_72:
    if ( v31 || !(unsigned int)curl_strequal(v28->name, v10->name, v27, v26) )
      goto LABEL_61;
    v36 = v28->domain;
    v37 = v10->domain;
    if ( v36 )
    {
      if ( v37 && (unsigned int)curl_strequal(v36, v37, v27, v26) && v28->tailmatch == v10->tailmatch )
        goto LABEL_79;
    }
    else if ( !v37 )
    {
      goto LABEL_79;
    }
    if ( !livecookie )
      goto LABEL_198;
LABEL_79:
    v38 = v28->spath;
    v39 = v10->spath;
    if ( v38 )
      break;
LABEL_83:
    LOBYTE(v27) = v38 == 0LL;
    if ( (v38 == 0LL) != (v10->spath == 0LL) )
      goto LABEL_198;
    livecookie = v10->livecookie;
    if ( livecookie )
    {
      v30 = v28;
      v31 = (__m128i *)v10;
    }
    else
    {
      if ( v28->livecookie )
        goto LABEL_119;
      v30 = v28;
      v31 = (__m128i *)v10;
      livecookie = 1;
    }
LABEL_61:
    next = v28->next;
    if ( !v28->next )
      goto LABEL_199;
LABEL_62:
    v28 = next;
  }
  if ( v39 && (unsigned int)curl_strequal(v38, v39, v27, v26) )
  {
    v38 = v28->spath;
    goto LABEL_83;
  }
LABEL_198:
  next = v28->next;
  livecookie = 0;
  if ( v28->next )
    goto LABEL_62;
LABEL_199:
  if ( v31 )
  {
    v93 = v30->name;
    v31->m128i_i64[0] = (__int64)v30->next;
    v31[3].m128i_i32[3] = v30->creationtime;
    Curl_cfree(v93);
    Curl_cfree(v30->value);
    Curl_cfree(v30->domain);
    Curl_cfree(v30->path);
    Curl_cfree(v30->spath);
    *(__m128i *)&v30->next = _mm_loadu_si128(v31);
    *(__m128i *)&v30->value = _mm_loadu_si128(v31 + 1);
    *(__m128i *)&v30->spath = _mm_loadu_si128(v31 + 2);
    *(__m128i *)&v30->expires = _mm_loadu_si128(v31 + 3);
    *(_QWORD *)&v30->prefix = v31[4].m128i_i64[0];
    Curl_cfree(v31);
  }
  else
  {
    v30 = v10;
  }
  if ( !c->running || (data->set.gap8BB[3] & 0x10) == 0 )
  {
    if ( livecookie )
      goto LABEL_206;
    goto LABEL_215;
  }
  v94 = "Replaced";
  v95 = v30->path;
  v96 = v30->domain;
  v97 = v30->value;
  v98 = v30->name;
  if ( !livecookie )
    v94 = "Added";
LABEL_205:
  Curl_infof(data, "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld", v94, v98, v97, v96, v95, v30->expires);
  if ( !livecookie )
  {
    if ( !v28 )
    {
LABEL_239:
      c->cookies[maxage] = v30;
      goto LABEL_216;
    }
LABEL_215:
    v28->next = v30;
LABEL_216:
    ++c->numcookies;
  }
LABEL_206:
  v99 = v30->expires;
  if ( v99 && v99 < c->next_expiration )
    c->next_expiration = v99;
  return v30;
}
