Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  time_t v8; // eax
  Cookie *v9; // edi
  int v10; // eax
  int v11; // edi
  const char *v12; // edx
  const char *v13; // esi
  const char *i; // ebp
  size_t v15; // eax
  unsigned int v16; // edi
  char v17; // al
  unsigned int v18; // ecx
  size_t v19; // eax
  size_t v20; // ecx
  const char *v21; // edx
  char v22; // cl
  const char *v23; // eax
  const char *v24; // esi
  int v25; // ecx
  char v26; // dl
  unsigned int v27; // esi
  unsigned int v28; // esi
  int v29; // eax
  int v30; // eax
  char *v31; // eax
  const char *v32; // eax
  const char *v33; // esi
  size_t v34; // eax
  int v35; // eax
  unsigned int v36; // esi
  const char *v37; // eax
  _DWORD *v38; // esi
  int v39; // eax
  unsigned int v40; // esi
  int v41; // eax
  const char *v42; // ebp
  _BOOL4 v43; // eax
  _BYTE *v44; // eax
  const char *v45; // eax
  char is_ipnum; // cl
  const char *v47; // eax
  Curl_easy *v48; // esi
  int v49; // edi
  int v50; // eax
  const char *v51; // esi
  const char *v52; // ebp
  size_t v53; // ecx
  bool v54; // cc
  size_t v55; // ebp
  int v56; // eax
  size_t v57; // eax
  char v58; // si
  int v59; // eax
  int v60; // eax
  const char *v61; // esi
  unsigned int v62; // eax
  unsigned int v63; // ecx
  char v64; // cl
  char *v65; // esi
  char *v66; // eax
  char *v67; // eax
  char *v68; // eax
  const char *v69; // esi
  int v70; // ebp
  int v71; // edx
  int v72; // eax
  int v73; // eax
  const char *v74; // eax
  char *v75; // eax
  int v76; // eax
  int v77; // eax
  int v78; // eax
  int v79; // eax
  int v80; // eax
  int v81; // edi
  int v82; // eax
  int v83; // ecx
  CookieInfo *v84; // eax
  char *v85; // eax
  int v86; // eax
  char v87; // al
  int v88; // eax
  char v89; // bp
  char *v90; // eax
  char *v91; // eax
  int v92; // esi
  void *v93; // eax
  size_t v94; // esi
  char *v95; // eax
  char v96; // al
  bool running; // al
  int v98; // eax
  Cookie *next; // eax
  int v100; // ebp
  Cookie *v101; // edi
  char *v102; // eax
  int v103; // ecx
  const char *spath; // esi
  char *v105; // eax
  size_t v106; // eax
  char *v107; // eax
  int v108; // ecx
  bool v109; // zf
  int v110; // eax
  char *v111; // eax
  char *v112; // ecx
  int v113; // eax
  const char *v114; // eax
  __int128 v115; // xmm0
  Cookie *v116; // ebp
  Cookie **p_next; // eax
  curl_off_t v119; // rax
  int expires_high; // ecx
  const char *v121; // [esp-10h] [ebp-DCh]
  int v122; // [esp-10h] [ebp-DCh]
  size_t v123; // [esp-Ch] [ebp-D8h]
  const char *v124; // [esp-8h] [ebp-D4h]
  Cookie *v125; // [esp+0h] [ebp-CCh]
  char v126; // [esp+8h] [ebp-C4h]
  const char *v127; // [esp+8h] [ebp-C4h]
  int v128; // [esp+8h] [ebp-C4h]
  int v129; // [esp+8h] [ebp-C4h]
  int v130; // [esp+Ch] [ebp-C0h]
  const char *s; // [esp+10h] [ebp-BCh]
  const char *sa; // [esp+10h] [ebp-BCh]
  const char *sb; // [esp+10h] [ebp-BCh]
  Cookie *sc; // [esp+10h] [ebp-BCh]
  size_t n; // [esp+14h] [ebp-B8h]
  size_t na; // [esp+14h] [ebp-B8h]
  size_t ne; // [esp+14h] [ebp-B8h]
  size_t nb; // [esp+14h] [ebp-B8h]
  size_t nc; // [esp+14h] [ebp-B8h]
  size_t nd; // [esp+14h] [ebp-B8h]
  char v141; // [esp+1Bh] [ebp-B1h]
  char v143; // [esp+20h] [ebp-ACh]
  int v144; // [esp+24h] [ebp-A8h]
  int v145; // [esp+24h] [ebp-A8h]
  _DWORD *v146; // [esp+28h] [ebp-A4h]
  __int64 v147; // [esp+30h] [ebp-9Ch]
  size_t v148; // [esp+38h] [ebp-94h]
  char *dest[36]; // [esp+3Ch] [ebp-90h] BYREF

  v8 = time(0);
  v9 = 0;
  if ( data->req.setcookies > 0x31u )
    return v9;
  v144 = v8;
  v10 = Curl_ccalloc(1, 44);
  if ( !v10 )
    return 0;
  v11 = v10;
  v130 = v10;
  if ( httpheader )
  {
    if ( strlen(lineptr) <= 0x1388 )
    {
      v146 = (_DWORD *)(v11 + 24);
      v143 = 0;
      v12 = lineptr;
      while ( 1 )
      {
        v13 = v12 + 1;
        for ( i = v12; *i == 32 || *i == 9; ++i )
          ++v13;
        v126 = *i;
        v15 = strcspn(i, ";\t\r\n=");
        if ( !v15 )
        {
          v12 = i;
          goto LABEL_113;
        }
        v12 = &i[v15];
        n = v15;
        v16 = v15;
        while ( 1 )
        {
          v17 = i[v16 - 1];
          if ( v17 != 32 && v17 != 9 )
            break;
          if ( !--v16 )
          {
            v16 = 0;
            break;
          }
        }
        v18 = 0;
        s = 0;
        v141 = *v12;
        if ( *v12 == 61 )
        {
          sa = &i[n + 1];
          v19 = strcspn(sa, ";\r\n");
          v20 = 0;
          v148 = n + v19;
          if ( v19 )
          {
            v21 = &v13[n + v19];
            while ( 1 )
            {
              v22 = *(v21 - 1);
              if ( v22 != 32 && v22 != 9 )
                break;
              --v19;
              --v21;
              if ( !v19 )
              {
                v23 = &i[n + 1];
                v20 = 0;
                goto LABEL_30;
              }
            }
            sa = v21;
            v24 = &v13[n];
            v25 = 0;
            while ( 1 )
            {
              v26 = v24[v25];
              if ( v26 != 32 && v26 != 9 )
                break;
              if ( v19 == ++v25 )
              {
                v20 = 0;
                goto LABEL_29;
              }
            }
            v51 = &v24[v25];
            v20 = v19 - v25;
            v23 = v51;
          }
          else
          {
LABEL_29:
            v23 = sa;
          }
LABEL_30:
          v27 = v20;
          s = v23;
          if ( memchr(v23, 9, v20) )
          {
            freecookie(v125);
            v9 = 0;
            if ( (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
              Curl_infof(data, "cookie contains TAB, dropping");
            return v9;
          }
          v12 = &i[v148 + 1];
          v18 = v27;
        }
        if ( v16 > 0xFFE || v18 > 0xFFE || v18 + v16 >= 0x1001 )
        {
          freecookie(v125);
          if ( (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
            Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes");
          return 0;
        }
        v109 = v126 == 95;
        v127 = v12;
        if ( v109 && v16 >= 7 && i[1] == 95 )
        {
          v28 = v18;
          if ( curl_strnequal("__Secure-", i, 9) )
          {
            *(_BYTE *)(v130 + 40) |= 1u;
            v12 = v127;
            v18 = v28;
          }
          else
          {
            v29 = curl_strnequal("__Host-", i, 7);
            v12 = v127;
            v18 = v28;
            if ( v29 )
              *(_BYTE *)(v130 + 40) |= 2u;
          }
        }
        if ( !*(_DWORD *)(v130 + 4) )
        {
          if ( v141 != 61 )
            goto LABEL_264;
          ne = v18;
          Curl_cfree(0);
          *(_DWORD *)(v130 + 4) = Curl_strndup(i, v16);
          Curl_cfree(*(_DWORD *)(v130 + 8));
          v32 = (const char *)Curl_strndup(s, ne);
          *(_DWORD *)(v130 + 8) = v32;
          if ( !v32 )
            goto LABEL_264;
          v33 = *(const char **)(v130 + 4);
          if ( !v33 )
            goto LABEL_264;
          if ( v32[strcspn(v32, invalid_octets_badoctets)]
            || (v34 = strcspn(v33, invalid_octets_badoctets), v12 = v127, v33[v34]) )
          {
            if ( (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
              Curl_infof(data, "invalid octets in name/value, cookie dropped");
            goto LABEL_264;
          }
          goto LABEL_113;
        }
        if ( !v18 )
        {
          if ( v16 == 8 )
          {
            v50 = curl_strnequal("httponly", i, 8);
            v18 = 0;
            v12 = v127;
            if ( v50 )
            {
              *(_BYTE *)(v130 + 35) = 1;
              goto LABEL_113;
            }
          }
          else if ( v16 == 6 )
          {
            v35 = curl_strnequal("secure", i, 6);
            v18 = 0;
            v12 = v127;
            if ( v35 )
            {
              if ( !secure && c->running )
                goto LABEL_264;
              *(_BYTE *)(v130 + 33) = 1;
              goto LABEL_113;
            }
          }
          if ( v141 != 61 )
            goto LABEL_113;
        }
        if ( v16 != 7 )
          break;
        v36 = v18;
        if ( curl_strnequal("version", i, 7) )
          goto LABEL_112;
        if ( curl_strnequal("max-age", i, 7) )
        {
          v37 = s + 1;
          if ( *s != 34 )
            v37 = s;
          v38 = v146;
          v39 = curlx_strtoofft(v37, 0, 10, v146);
          if ( !v39 )
          {
            v62 = *v146;
            v63 = v146[1];
            if ( *(_QWORD *)v146 )
            {
              LODWORD(v147) = ~v144;
              HIDWORD(v147) = 0x7FFFFFFF - (v144 >> 31);
              if ( v147 >= __SPAIR64__(v63, v62) )
              {
                *(_QWORD *)v146 = v144 + __PAIR64__(v63, v62);
              }
              else
              {
                *v146 = -1;
                v146[1] = 0x7FFFFFFF;
              }
            }
            else
            {
LABEL_111:
              v38[1] = 0;
              *v38 = 1;
            }
LABEL_112:
            v12 = v127;
            goto LABEL_113;
          }
          if ( v39 == 2 )
            goto LABEL_111;
          v12 = v127;
          if ( v39 == 1 )
          {
            *v146 = -1;
            v146[1] = 0x7FFFFFFF;
          }
        }
        else
        {
          if ( !curl_strnequal("expires", i, 7) )
            goto LABEL_112;
          v53 = v36;
          v54 = v36 <= 0x7F;
          v38 = v146;
          v12 = v127;
          if ( !v54 || *(_QWORD *)v146 )
            goto LABEL_113;
          v55 = v53;
          memcpy(dest, s, v53);
          *((_BYTE *)dest + v55) = 0;
          v56 = Curl_getdate_capped(dest);
          *(_QWORD *)v146 = v56;
          if ( !v56 )
            goto LABEL_111;
          v12 = v127;
          if ( v56 < 0 )
          {
            v146[1] = 0;
            *v146 = 0;
          }
        }
LABEL_113:
        ++v12;
        v49 = v130;
        v61 = path;
        while ( 1 )
        {
          v64 = *(v12 - 1);
          if ( v64 != 32 && v64 != 9 )
            break;
          ++v12;
        }
        v60 = 0;
        if ( v64 != 59 )
        {
LABEL_179:
          v87 = v143;
          if ( (v143 & 1) == 0 )
          {
            if ( domain )
            {
              if ( !*(_DWORD *)(v49 + 20) )
              {
                v88 = Curl_cstrdup(domain);
                *(_DWORD *)(v49 + 20) = v88;
                v109 = v88 == 0;
                v87 = v143;
                if ( v109 )
                  v87 = 1;
              }
            }
          }
          if ( (v87 & 1) == 0 && v61 && !*(_DWORD *)(v49 + 12) )
          {
            v89 = v87;
            v90 = strchr(v61, 63);
            if ( v90 )
              v91 = (char *)Curl_memrchr(v61, 47, v90 - v61);
            else
              v91 = strrchr(v61, 47);
            if ( v91 )
            {
              v92 = v91 - path;
              v93 = (void *)Curl_cmalloc(v91 - path + 2);
              *(_DWORD *)(v49 + 12) = v93;
              if ( !v93 )
                goto LABEL_264;
              v94 = v92 + 1;
              memcpy(v93, path, v94);
              *(_BYTE *)(*(_DWORD *)(v130 + 12) + v94) = 0;
              v95 = sanitize_cookie_path(*(const char **)(v130 + 12));
              *(_DWORD *)(v130 + 16) = v95;
              v109 = v95 == 0;
              v87 = v89;
              if ( v109 )
                v87 = 1;
            }
            else
            {
              v87 = v89;
            }
          }
          if ( (v87 & 1) == 0 && *(_DWORD *)(v130 + 4) )
          {
            ++data->req.setcookies;
            v11 = v130;
            goto LABEL_205;
          }
LABEL_264:
          freecookie(v125);
          return 0;
        }
LABEL_118:
        if ( v60 )
          goto LABEL_179;
      }
      if ( v16 != 6 )
      {
        if ( v16 == 4 )
        {
          na = v18;
          if ( !curl_strnequal("path", i, 4) )
            goto LABEL_112;
          Curl_cfree(*(_DWORD *)(v130 + 12));
          v30 = Curl_strndup(s, na);
          *(_DWORD *)(v130 + 12) = v30;
          if ( !v30 )
            goto LABEL_264;
          Curl_cfree(*(_DWORD *)(v130 + 16));
          v31 = sanitize_cookie_path(*(const char **)(v130 + 12));
          v12 = v127;
          *(_DWORD *)(v130 + 16) = v31;
          if ( !v31 )
            goto LABEL_264;
        }
        goto LABEL_113;
      }
      v40 = v18;
      v41 = curl_strnequal("domain", i, 6);
      if ( !v40 || !v41 )
        goto LABEL_112;
      v42 = s + 1;
      v43 = *s == 46;
      if ( *s != 46 )
        v42 = s;
      nb = v40 - v43;
      if ( v40 - v43 == 9 && curl_strnequal(v42, "localhost", 9)
        || (v44 = memchr(v42, 46, nb)) != 0 && (unsigned int)(&v42[nb] - v44) > 1 )
      {
        v45 = domain;
        if ( !domain )
          v45 = v42;
        is_ipnum = Curl_host_is_ipnum(v45);
        v47 = domain;
        v48 = data;
        v49 = v130;
        if ( !domain )
        {
          domain = 0;
LABEL_101:
          v58 = is_ipnum;
          Curl_cfree(*(_DWORD *)(v49 + 20));
          v59 = Curl_strndup(v42, nb);
          *(_DWORD *)(v49 + 20) = v59;
          if ( !v58 && v59 )
          {
            *(_BYTE *)(v49 + 32) = 1;
            goto LABEL_112;
          }
          v12 = v127;
          if ( !v59 )
          {
            v60 = 6;
            v143 = 1;
            v61 = path;
            goto LABEL_118;
          }
          goto LABEL_113;
        }
        if ( !is_ipnum )
        {
LABEL_83:
          domain = v47;
          if ( !cookie_tailmatch(v47, v123, v124) )
            goto LABEL_104;
          is_ipnum = 0;
          goto LABEL_101;
        }
      }
      else
      {
        v109 = (unsigned __int8)Curl_host_is_ipnum(":") == 0;
        v47 = ":";
        v48 = data;
        v49 = v130;
        if ( v109 )
          goto LABEL_83;
      }
      sb = v42;
      v121 = v42;
      v52 = v47;
      domain = v47;
      if ( strncmp(v121, v47, nb) )
      {
        v48 = data;
LABEL_104:
        v143 = 1;
        if ( (*((_BYTE *)&v48->set + 1321) & 0x20) != 0 )
          Curl_infof(v48, "skipped cookie with bad tailmatch domain: %s");
        goto LABEL_112;
      }
      v57 = strlen(v52);
      is_ipnum = 1;
      v42 = sb;
      v48 = data;
      if ( nb != v57 )
        goto LABEL_104;
      goto LABEL_101;
    }
LABEL_124:
    Curl_cfree(v11);
    return 0;
  }
  dest[0] = 0;
  v65 = lineptr;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
  {
    v65 = lineptr + 10;
    *(_BYTE *)(v11 + 35) = 1;
  }
  if ( *v65 == 35 )
    goto LABEL_124;
  v66 = strchr(v65, 13);
  if ( v66 )
    *v66 = 0;
  v67 = strchr(v65, 10);
  if ( v67 )
    *v67 = 0;
  v68 = strtok_r(v65, "\t", dest);
  if ( !v68 )
    goto LABEL_264;
  v69 = v68;
  nc = v11 + 24;
  v70 = 0;
  v71 = 0;
  do
  {
    v128 = v71;
    switch ( v70 )
    {
      case 0:
        if ( *v69 == 46 )
          ++v69;
        v72 = Curl_cstrdup(v69);
        *(_DWORD *)(v11 + 20) = v72;
        v109 = v72 == 0;
        v73 = (unsigned __int8)v128;
        if ( v109 )
          v73 = 1;
        v128 = v73;
        v70 = 0;
        break;
      case 1:
        *(_BYTE *)(v11 + 32) = curl_strequal(v69, "TRUE") != 0;
        v70 = 1;
        break;
      case 2:
        if ( !strcmp("TRUE", v69) || !strcmp("FALSE", v69) )
        {
          v81 = Curl_cstrdup("/");
          *(_DWORD *)(v130 + 12) = v81;
          v82 = Curl_cstrdup("/");
          v83 = (unsigned __int8)v128;
          if ( !v82 )
            v83 = 1;
          v109 = v81 == 0;
          v11 = v130;
          *(_DWORD *)(v130 + 16) = v82;
          if ( v109 )
            v83 = 1;
          v128 = v83;
          goto LABEL_158;
        }
        v74 = (const char *)Curl_cstrdup(v69);
        *(_DWORD *)(v11 + 12) = v74;
        if ( v74 )
        {
          v75 = sanitize_cookie_path(v74);
          *(_DWORD *)(v11 + 16) = v75;
          v109 = v75 == 0;
          v76 = (unsigned __int8)v128;
          if ( v109 )
            v76 = 1;
        }
        else
        {
          v76 = 1;
        }
        v128 = v76;
        v70 = 2;
        break;
      case 3:
LABEL_158:
        *(_BYTE *)(v11 + 33) = 0;
        if ( curl_strequal(v69, "TRUE") )
        {
          if ( secure || (v84 = c, c->running) )
          {
            *(_BYTE *)(v11 + 33) = 1;
          }
          else
          {
            LOBYTE(v84) = 1;
            v128 = (int)v84;
          }
        }
        v70 = 3;
        break;
      case 4:
        v109 = curlx_strtoofft(v69, 0, 10, nc) == 0;
        v77 = (unsigned __int8)v128;
        if ( !v109 )
          v77 = 1;
        v128 = v77;
        v70 = 4;
        break;
      case 5:
        v78 = Curl_cstrdup(v69);
        *(_DWORD *)(v11 + 4) = v78;
        if ( v78 )
        {
          if ( curl_strnequal("__Secure-", v78, 9) )
          {
            *(_BYTE *)(v11 + 40) |= 1u;
          }
          else if ( curl_strnequal("__Host-", *(_DWORD *)(v11 + 4), 7) )
          {
            *(_BYTE *)(v11 + 40) |= 2u;
          }
        }
        else
        {
          v128 = 1;
        }
        v70 = 5;
        break;
      case 6:
        v79 = Curl_cstrdup(v69);
        *(_DWORD *)(v11 + 8) = v79;
        v109 = v79 == 0;
        v80 = (unsigned __int8)v128;
        if ( v109 )
          v80 = 1;
        v128 = v80;
        v70 = 6;
        break;
      default:
        break;
    }
    v85 = strtok_r(0, "\t", dest);
    ++v70;
    v71 = v128;
    if ( !v85 )
      break;
    v69 = v85;
  }
  while ( (v128 & 1) == 0 );
  if ( v70 == 6 )
  {
    v86 = Curl_cstrdup(&L_str_22);
    LOBYTE(v71) = v128;
    *(_DWORD *)(v11 + 8) = v86;
    if ( !v86 )
      LOBYTE(v71) = 1;
    v70 = (v86 == 0) ^ 7;
  }
  if ( (v71 & 1) != 0 || v70 != 7 )
    goto LABEL_264;
LABEL_205:
  v96 = *(_BYTE *)(v11 + 40);
  if ( (v96 & 1) != 0 && !*(_BYTE *)(v11 + 33) )
    goto LABEL_264;
  if ( (v96 & 2) != 0 )
  {
    if ( !*(_BYTE *)(v11 + 33) )
      goto LABEL_264;
    v114 = *(const char **)(v11 + 12);
    if ( !v114 || strcmp(v114, "/") || *(_BYTE *)(v11 + 32) )
      goto LABEL_264;
  }
  running = c->running;
  if ( !running && c->newsession && !*(_QWORD *)(v11 + 24) )
    goto LABEL_264;
  *(_BYTE *)(v11 + 34) = running;
  v98 = c->lastct + 1;
  c->lastct = v98;
  *(_DWORD *)(v11 + 36) = v98;
  if ( !noexpire )
    remove_expired((CookieInfo *)v125);
  nd = cookiehash(*(const char *const *)(v11 + 20));
  next = c->cookies[nd];
  if ( next )
  {
    v100 = 0;
    sc = 0;
    v129 = 0;
    while ( 1 )
    {
      v101 = next;
      if ( !curl_strequal(next->name, *(_DWORD *)(v130 + 4)) )
        goto LABEL_228;
      v102 = v101->domain;
      v103 = *(_DWORD *)(v130 + 20);
      if ( v102 )
      {
        if ( !v103 || !curl_strequal(v102, *(_DWORD *)(v130 + 20)) )
          goto LABEL_228;
      }
      else if ( v103 )
      {
        goto LABEL_228;
      }
      spath = v101->spath;
      if ( spath && *(_DWORD *)(v130 + 16) && v101->secure && !*(_BYTE *)(v130 + 33) && !secure )
      {
        v145 = *(_DWORD *)(v130 + 16);
        v105 = strchr(spath + 1, 47);
        v106 = v105 ? v105 - spath : strlen(spath);
        if ( curl_strnequal(spath, v145, v106) )
        {
          if ( data && (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
            Curl_infof(data, "cookie '%s' for domain '%s' dropped, would overlay an existing cookie");
          goto LABEL_264;
        }
      }
LABEL_228:
      if ( v100 )
        goto LABEL_229;
      v100 = 0;
      if ( !curl_strequal(v101->name, *(_DWORD *)(v130 + 4)) )
        goto LABEL_229;
      v107 = v101->domain;
      v108 = *(_DWORD *)(v130 + 20);
      if ( v107 )
      {
        if ( !v108 || !curl_strequal(v107, *(_DWORD *)(v130 + 20)) )
        {
          v110 = v129;
          goto LABEL_240;
        }
        v109 = v101->tailmatch == *(_BYTE *)(v130 + 32);
      }
      else
      {
        v109 = v108 == 0;
      }
      v110 = (unsigned __int8)v129;
      if ( v109 )
        v110 = 1;
LABEL_240:
      v129 = v110;
      if ( (v110 & 1) != 0 )
      {
        v111 = v101->spath;
        v100 = 0;
        v112 = 0;
        if ( !v111 )
          goto LABEL_246;
        if ( !*(_DWORD *)(v130 + 16) )
        {
          v112 = v101->spath;
LABEL_246:
          v113 = (unsigned __int8)v129;
          if ( (v112 != 0) == (*(_DWORD *)(v130 + 16) == 0) )
            v113 = 0;
          v129 = v113;
          if ( (v113 & 1) != 0 )
          {
            if ( *(_BYTE *)(v130 + 34) )
            {
              sc = v101;
              v100 = v130;
            }
            else
            {
              sc = v101;
              v100 = v130;
              if ( v101->livecookie )
                goto LABEL_264;
            }
          }
          goto LABEL_229;
        }
        if ( curl_strequal(v111, *(_DWORD *)(v130 + 16)) )
        {
          v112 = v101->spath;
          goto LABEL_246;
        }
        v129 = 0;
        v100 = 0;
      }
LABEL_229:
      next = v101->next;
      if ( !v101->next )
      {
        if ( v100 )
        {
          *(_DWORD *)v100 = sc->next;
          *(_DWORD *)(v100 + 36) = sc->creationtime;
          Curl_cfree(sc->name);
          Curl_cfree(sc->value);
          Curl_cfree(sc->domain);
          Curl_cfree(sc->path);
          Curl_cfree(sc->spath);
          *(_OWORD *)((char *)&sc->expires + 4) = *(_OWORD *)(v100 + 28);
          v115 = *(_OWORD *)v100;
          *(_OWORD *)&sc->spath = *(_OWORD *)(v100 + 16);
          *(_OWORD *)&sc->next = v115;
          v122 = v100;
          v116 = sc;
          Curl_cfree(v122);
        }
        else
        {
          v116 = (Cookie *)v130;
        }
        goto LABEL_269;
      }
    }
  }
  v116 = (Cookie *)v11;
  v101 = 0;
  LOBYTE(v129) = 0;
LABEL_269:
  if ( data && c->running && (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
    Curl_infof(data, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld");
  if ( (v129 & 1) == 0 )
  {
    p_next = &c->cookies[nd];
    if ( v101 )
      p_next = &v101->next;
    *p_next = v116;
    ++c->numcookies;
  }
  v9 = v116;
  LODWORD(v119) = v116->expires;
  expires_high = HIDWORD(v116->expires);
  if ( v116->expires )
  {
    HIDWORD(v119) = HIDWORD(v116->expires);
    if ( v119 < c->next_expiration )
    {
      LODWORD(c->next_expiration) = v119;
      HIDWORD(c->next_expiration) = expires_high;
    }
  }
  return v9;
}
