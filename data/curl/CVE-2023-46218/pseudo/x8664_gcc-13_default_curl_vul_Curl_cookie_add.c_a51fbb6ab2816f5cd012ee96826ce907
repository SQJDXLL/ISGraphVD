Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  Cookie *v10; // rbx
  char v11; // bp
  const char *v12; // rsi
  __int64 v13; // rdx
  size_t v14; // r15
  _BYTE *v15; // r13
  size_t v16; // rax
  size_t v17; // r12
  char v18; // al
  char v19; // cl
  _BYTE *v20; // rax
  char is_ipnum; // bp
  __int64 v22; // rax
  char *v23; // rax
  char *v24; // rax
  char *v25; // rdi
  int v26; // r14d
  char *v27; // rax
  curl_off_t *p_expires; // rdx
  char *v29; // r8
  __int64 v30; // rax
  __int64 v31; // r14
  char v32; // r13
  void *v33; // rsi
  int v34; // eax
  const char *v35; // r8
  __int64 (__fastcall *v36)(const char *); // r15
  int v37; // eax
  const char *v38; // rax
  char *v39; // rax
  char *v40; // r15
  bool v41; // r15
  __int64 v42; // rax
  __int64 v43; // r15
  __int64 v44; // rdx
  __int64 v45; // rax
  int v46; // r14d
  __int64 v47; // rax
  __int64 v48; // rax
  __int64 v49; // r14
  bool v50; // r15
  unsigned __int8 prefix; // al
  Cookie *v52; // r14
  int v54; // eax
  __int64 v55; // rax
  __int64 v56; // rax
  const char *name; // rbp
  char *value; // r12
  __int64 v59; // rax
  char *v60; // rax
  int v61; // eax
  curl_off_t expires; // rax
  __int64 v63; // rax
  char *v64; // rax
  bool running; // al
  __int64 v66; // rdx
  size_t v67; // r12
  Cookie *v68; // r13
  char livecookie; // bp
  __m128i *v70; // r15
  Cookie *next; // rax
  char *v72; // rdi
  char *v73; // rsi
  char *spath; // rcx
  char *v75; // rdi
  char *v76; // rsi
  char *v77; // rdi
  char *v78; // rsi
  char *v79; // rdi
  const char *v80; // rdx
  const char *v81; // rax
  const char *v82; // r9
  const char *v83; // r8
  const char *v84; // rcx
  curl_off_t v85; // rax
  char *v86; // rax
  const char *v87; // rcx
  void *v88; // r8
  size_t v89; // rdx
  const char *v90; // rdi
  size_t v91; // rax
  char *v92; // rax
  char *v93; // rbp
  signed __int64 v94; // rbp
  char *v95; // rax
  char *v96; // rax
  __int64 v97; // rax
  int v98; // eax
  char *v99; // rdi
  __int64 v100; // rax
  __int64 v101; // rax
  bool v102; // zf
  __int64 v103; // rax
  const char *ptr; // [rsp+0h] [rbp-118h]
  const char *ptra; // [rsp+0h] [rbp-118h]
  bool ptrb; // [rsp+0h] [rbp-118h]
  const char *ptrc; // [rsp+0h] [rbp-118h]
  int ptre; // [rsp+0h] [rbp-118h]
  const char *ptrd; // [rsp+0h] [rbp-118h]
  const char *ptrf; // [rsp+0h] [rbp-118h]
  char *s; // [rsp+8h] [rbp-110h]
  char sa; // [rsp+8h] [rbp-110h]
  char sb; // [rsp+8h] [rbp-110h]
  char *sc; // [rsp+8h] [rbp-110h]
  char *sd; // [rsp+8h] [rbp-110h]
  time_t now; // [rsp+30h] [rbp-E8h]
  char httpheadera; // [rsp+3Dh] [rbp-DBh]
  bool badcookie; // [rsp+3Fh] [rbp-D9h]
  char *tok_buf; // [rsp+48h] [rbp-D0h] BYREF
  char date[128]; // [rsp+50h] [rbp-C8h] BYREF
  unsigned __int64 v125; // [rsp+D8h] [rbp-40h]

  httpheadera = httpheader;
  v125 = __readfsqword(0x28u);
  now = time(0LL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  v10 = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !v10 )
    return 0LL;
  if ( httpheader )
  {
    badcookie = 0;
    if ( strlen(lineptr) <= 0x1388 )
    {
      v11 = *lineptr;
      if ( *lineptr )
      {
        while ( 1 )
        {
          if ( v11 != 32 && v11 != 9 )
          {
            v12 = ";\t\r\n=";
            v14 = strcspn(lineptr, ";\t\r\n=");
            if ( v14 )
              goto LABEL_16;
LABEL_11:
            while ( v11 == 32 || v11 == 9 )
            {
              v11 = *++lineptr;
              if ( !v11 )
                goto LABEL_99;
            }
            if ( v11 != 59 )
              break;
          }
          v11 = *++lineptr;
          if ( !v11 )
            goto LABEL_15;
        }
LABEL_99:
        if ( badcookie )
          goto LABEL_108;
        if ( !v10->domain )
        {
          if ( domain )
          {
            v97 = Curl_cstrdup(domain, v12, v13);
            v10->domain = (char *)v97;
            if ( !v97 )
              goto LABEL_108;
          }
        }
        if ( !v10->path && path )
        {
          v92 = strchr(path, 63);
          v93 = v92 ? (char *)Curl_memrchr(path, 47LL, v92 - path) : strrchr(path, 47);
          if ( v93 )
          {
            v94 = v93 - path;
            v95 = (char *)Curl_cmalloc(v94 + 2);
            v10->path = v95;
            if ( !v95 )
              goto LABEL_108;
            memcpy(v95, path, v94 + 1);
            v10->path[v94 + 1] = 0;
            v96 = sanitize_cookie_path(v10->path);
            v10->spath = v96;
            if ( !v96 )
              goto LABEL_108;
          }
        }
        if ( !v10->name )
          goto LABEL_108;
        ++data->req.setcookies;
        prefix = v10->prefix;
        if ( (prefix & 1) != 0 )
          goto LABEL_159;
        goto LABEL_106;
      }
LABEL_15:
      v12 = ";\t\r\n=";
      v14 = strcspn(lineptr, ";\t\r\n=");
      if ( !v14 )
        goto LABEL_99;
LABEL_16:
      v13 = (__int64)&lineptr[v14];
      while ( 1 )
      {
        v12 = (const char *)v14--;
        if ( lineptr[v14] != 9 && lineptr[v14] != 32 )
          break;
        if ( !v14 )
        {
          if ( *(_BYTE *)v13 == 61 )
            goto LABEL_20;
          if ( v10->name )
          {
LABEL_122:
            v11 = *(_BYTE *)v13;
            lineptr = (const char *)v13;
            goto LABEL_98;
          }
LABEL_108:
          freecookie(v10);
          return 0LL;
        }
      }
      v19 = 0;
      v14 = (size_t)v12;
      if ( *(_BYTE *)v13 == 61 )
      {
LABEL_20:
        v15 = (_BYTE *)(v13 + 1);
        v12 = ";\r\n";
        s = (char *)v13;
        v16 = strcspn((const char *)(v13 + 1), ";\r\n");
        v13 = (__int64)s;
        v17 = v16;
        ptr = &v15[v16];
        if ( v16 )
        {
          while ( 1 )
          {
            while ( 1 )
            {
              v18 = s[v17];
              if ( v18 != 32 )
                break;
              if ( !--v17 )
                goto LABEL_26;
            }
            if ( v18 != 9 )
              break;
            if ( !--v17 )
              goto LABEL_26;
          }
          while ( *v15 == 32 || *v15 == 9 )
          {
            ++v15;
            if ( !--v17 )
              goto LABEL_86;
          }
          v12 = (_BYTE *)&loc_9;
          if ( memchr(v15, 9, v17) )
          {
            freecookie(v10);
            if ( (data->set.gap8BB[3] & 0x10) != 0 )
              Curl_infof(data, "cookie contains TAB, dropping");
            return 0LL;
          }
LABEL_86:
          if ( v14 <= 0xFFE && v17 <= 0xFFE && v17 + v14 <= 0x1000 )
          {
            v19 = httpheadera;
            goto LABEL_90;
          }
LABEL_229:
          freecookie(v10);
          if ( (data->set.gap8BB[3] & 0x10) != 0 )
            Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v14, v17);
          return 0LL;
        }
LABEL_26:
        if ( v14 <= 0xFFE )
        {
          v19 = httpheadera;
          v17 = 0LL;
          if ( v14 > 6 )
          {
LABEL_91:
            if ( v11 == 95 && lineptr[1] == 95 )
            {
              v12 = lineptr;
              sa = v19;
              v54 = curl_strnequal("__Secure-", lineptr, 9LL);
              v19 = sa;
              if ( v54 )
              {
                v10->prefix |= 1u;
                if ( !v10->name )
                  goto LABEL_126;
                goto LABEL_93;
              }
              v12 = lineptr;
              v98 = curl_strnequal("__Host-", lineptr, 7LL);
              v19 = sa;
              if ( v98 )
              {
                v10->prefix |= 2u;
                if ( !v10->name )
                {
LABEL_126:
                  if ( !v19 )
                    goto LABEL_108;
                  Curl_cfree(0LL);
                  v55 = Curl_memdup(lineptr, v14 + 1);
                  v10->name = (char *)v55;
                  if ( v55 )
                    *(_BYTE *)(v55 + v14) = 0;
                  Curl_cfree(v10->value);
                  v56 = Curl_memdup(v15, v17 + 1);
                  v10->value = (char *)v56;
                  if ( v56 )
                    *(_BYTE *)(v56 + v17) = 0;
                  name = v10->name;
                  if ( !name )
                    goto LABEL_108;
                  value = v10->value;
                  if ( !value )
                    goto LABEL_108;
                  if ( value[strcspn(v10->value, &badoctets_0)]
                    || (v12 = &badoctets_0, name[strcspn(name, &badoctets_0)]) )
                  {
                    if ( (data->set.gap8BB[3] & 0x10) != 0 )
                      Curl_infof(data, "invalid octets in name/value, cookie dropped");
                    goto LABEL_108;
                  }
                  goto LABEL_45;
                }
                goto LABEL_93;
              }
            }
            if ( !v10->name )
              goto LABEL_126;
LABEL_93:
            if ( v17 )
              goto LABEL_96;
            if ( v14 == 8 )
            {
              v12 = lineptr;
              if ( (unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
              {
                lineptr = ptr;
                v10->httponly = 1;
                v11 = *ptr;
                goto LABEL_98;
              }
              goto LABEL_45;
            }
            if ( v19 )
            {
LABEL_96:
              if ( v14 != 7 )
                goto LABEL_97;
              v12 = lineptr;
              if ( !(unsigned int)curl_strnequal("version", lineptr, 7LL) )
              {
                if ( (unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
                {
                  v12 = 0LL;
                  v61 = curlx_strtoofft(&v15[*v15 == 34], 0LL, 10LL, &v10->expires);
                  switch ( v61 )
                  {
                    case 1:
                      lineptr = ptr;
                      v10->expires = 0x7FFFFFFFFFFFFFFFLL;
                      v11 = *ptr;
                      goto LABEL_98;
                    case 2:
LABEL_274:
                      lineptr = ptr;
                      v10->expires = 1LL;
                      v11 = *ptr;
                      goto LABEL_98;
                    case 0:
                      expires = v10->expires;
                      if ( expires )
                      {
                        v13 = 0x7FFFFFFFFFFFFFFFLL;
                        if ( expires <= 0x7FFFFFFFFFFFFFFFLL - now )
                        {
                          v13 = now;
                          lineptr = ptr;
                          v10->expires = now + expires;
                        }
                        else
                        {
                          lineptr = ptr;
                          v10->expires = 0x7FFFFFFFFFFFFFFFLL;
                        }
                        v11 = *lineptr;
                        goto LABEL_98;
                      }
                      goto LABEL_274;
                  }
                }
                else
                {
                  v12 = lineptr;
                  if ( (unsigned int)curl_strnequal("expires", lineptr, 7LL) && !v10->expires && v17 <= 0x7F )
                  {
                    v12 = v15;
                    v99 = date;
                    if ( v17 >= 8 )
                    {
                      qmemcpy(date, v15, 8 * (v17 >> 3));
                      v12 = &v15[8 * (v17 >> 3)];
                      v99 = &date[8 * (v17 >> 3)];
                    }
                    v100 = 0LL;
                    if ( (v17 & 4) != 0 )
                    {
                      *(_DWORD *)v99 = *(_DWORD *)v12;
                      v100 = 4LL;
                    }
                    if ( (v17 & 2) != 0 )
                    {
                      *(_WORD *)&v99[v100] = *(_WORD *)&v12[v100];
                      v100 += 2LL;
                    }
                    if ( (v17 & 1) != 0 )
                      v99[v100] = v12[v100];
                    date[v17] = 0;
                    v101 = Curl_getdate_capped(date, v12);
                    v13 = 0LL;
                    v102 = v101 == 0;
                    if ( v101 >= 0 )
                      v13 = v101;
                    v103 = 1LL;
                    if ( !v102 )
                      v103 = v13;
                    v10->expires = v103;
                  }
                }
              }
            }
LABEL_45:
            lineptr = ptr;
            v11 = *ptr;
            goto LABEL_98;
          }
LABEL_28:
          if ( !v10->name )
            goto LABEL_126;
          if ( v17 )
          {
            if ( v14 != 4 )
            {
              if ( v14 == 6 )
              {
                v12 = lineptr;
                if ( !(unsigned int)curl_strnequal("domain", lineptr, 6LL) )
                  goto LABEL_45;
                if ( *v15 == 46 )
                {
                  ++v15;
                  --v17;
                }
                if ( v17 == 9 && (unsigned int)curl_strnequal(v15, "localhost", 9LL)
                  || (v20 = memchr(v15, 46, v17)) != 0LL && v17 - (v20 - v15) > 1 )
                {
                  if ( !domain )
                  {
                    is_ipnum = Curl_host_is_ipnum(v15);
                    goto LABEL_41;
                  }
                  is_ipnum = Curl_host_is_ipnum(domain);
                  if ( is_ipnum )
                    goto LABEL_39;
                }
                else
                {
                  domain = ":";
                  is_ipnum = Curl_host_is_ipnum(":");
                  if ( is_ipnum )
                  {
LABEL_39:
                    v12 = domain;
                    if ( !strncmp(v15, domain, v17) && strlen(domain) == v17 )
                      goto LABEL_41;
LABEL_118:
                    if ( (data->set.gap8BB[3] & 0x10) != 0 )
                    {
                      v12 = "skipped cookie with bad tailmatch domain: %s";
                      Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v15);
                    }
                    lineptr = ptr;
                    v11 = *ptr;
                    badcookie = httpheadera;
                    goto LABEL_98;
                  }
                }
                v12 = (const char *)v17;
                if ( !cookie_tailmatch(v15, v17, domain) )
                  goto LABEL_118;
LABEL_41:
                Curl_cfree(v10->domain);
                v12 = (const char *)(v17 + 1);
                v22 = Curl_memdup(v15, v17 + 1);
                v10->domain = (char *)v22;
                if ( !v22 )
                  goto LABEL_108;
                *(_BYTE *)(v22 + v17) = 0;
                if ( !v10->domain )
                  goto LABEL_108;
                if ( !is_ipnum )
                  v10->tailmatch = 1;
                goto LABEL_45;
              }
LABEL_97:
              lineptr = ptr;
              v11 = *ptr;
LABEL_98:
              if ( v11 )
                goto LABEL_11;
              goto LABEL_99;
            }
          }
          else
          {
            v13 = (__int64)ptr;
            if ( v14 == 6 )
            {
              v12 = lineptr;
              sb = v19;
              if ( (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
              {
                if ( secure || !c->running )
                {
                  lineptr = ptr;
                  v10->secure = 1;
                  v11 = *ptr;
                  goto LABEL_98;
                }
                goto LABEL_108;
              }
              if ( sb )
              {
                v12 = lineptr;
                curl_strnequal("domain", lineptr, 6LL);
              }
              goto LABEL_45;
            }
            if ( !v19 )
              goto LABEL_122;
            if ( v14 != 4 )
              goto LABEL_97;
          }
          v12 = lineptr;
          if ( (unsigned int)curl_strnequal("path", lineptr, 4LL) )
          {
            Curl_cfree(v10->path);
            v12 = (const char *)(v17 + 1);
            v59 = Curl_memdup(v15, v17 + 1);
            v10->path = (char *)v59;
            if ( !v59 )
              goto LABEL_108;
            *(_BYTE *)(v59 + v17) = 0;
            if ( !v10->path )
              goto LABEL_108;
            Curl_cfree(v10->spath);
            v60 = sanitize_cookie_path(v10->path);
            v10->spath = v60;
            if ( !v60 )
              goto LABEL_108;
          }
          goto LABEL_45;
        }
      }
      else if ( (unsigned __int64)v12 <= 0xFFE )
      {
        ptr = (const char *)v13;
        v15 = 0LL;
        v17 = 0LL;
LABEL_90:
        if ( v14 > 6 )
          goto LABEL_91;
        goto LABEL_28;
      }
      v17 = 0LL;
      goto LABEL_229;
    }
LABEL_231:
    Curl_cfree(v10);
    return 0LL;
  }
  tok_buf = 0LL;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
  {
    v10->httponly = 1;
    lineptr += 10;
  }
  if ( *lineptr == 35 )
    goto LABEL_231;
  v23 = strchr(lineptr, 13);
  if ( v23 )
    *v23 = 0;
  v24 = strchr(lineptr, 10);
  if ( v24 )
    *v24 = 0;
  v25 = (char *)lineptr;
  v26 = 0;
  v27 = strtok_r(v25, "\t", &tok_buf);
  p_expires = &v10->expires;
  v29 = v27;
  if ( !v27 )
    goto LABEL_108;
  while ( 2 )
  {
    switch ( v26 )
    {
      case 0:
        v30 = Curl_cstrdup(&v29[*v29 == 46], "\t", p_expires);
        v10->domain = (char *)v30;
        v31 = v30;
        v32 = v30 != 0;
        v29 = strtok_r(0LL, "\t", &tok_buf);
        if ( v29 && v32 )
          goto LABEL_57;
        v102 = v31 == 0;
        v26 = 1;
        httpheadera = v102;
        goto LABEL_282;
      case 1:
LABEL_57:
        v10->tailmatch = (unsigned int)curl_strequal(v29, "TRUE", p_expires) != 0;
        v29 = strtok_r(0LL, "\t", &tok_buf);
        if ( v29 )
          goto LABEL_58;
        v26 = 2;
        goto LABEL_288;
      case 2:
LABEL_58:
        v33 = v29;
        ptra = v29;
        v34 = strcmp("TRUE", v29);
        v35 = ptra;
        v36 = (__int64 (__fastcall *)(const char *))Curl_cstrdup;
        if ( v34 && (v33 = (void *)ptra, v37 = strcmp("FALSE", ptra), v35 = ptra, v37) )
        {
          v38 = (const char *)v36(ptra);
          v10->path = (char *)v38;
          if ( !v38 )
            goto LABEL_213;
          v39 = sanitize_cookie_path(v38);
          v10->spath = v39;
          v40 = v39;
          ptrb = v39 != 0LL;
          v32 = v39 != 0LL;
          v29 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v29 || !ptrb )
          {
            v26 = 3;
            httpheadera = v40 == 0LL;
            goto LABEL_282;
          }
          v41 = httpheadera;
        }
        else
        {
          ptrc = v35;
          v42 = v36("/");
          v10->path = (char *)v42;
          v43 = v42;
          v45 = Curl_cstrdup("/", v33, v44);
          v29 = (char *)ptrc;
          v10->spath = (char *)v45;
          if ( !v45 )
          {
            v10->secure = 0;
            if ( !(unsigned int)curl_strequal(ptrc, "TRUE", p_expires) )
              goto LABEL_213;
            v41 = 1;
            goto LABEL_67;
          }
          v41 = v43 == 0;
        }
LABEL_66:
        v10->secure = 0;
        if ( !(unsigned int)curl_strequal(v29, "TRUE", p_expires) )
          goto LABEL_70;
LABEL_67:
        if ( !secure && !c->running )
        {
LABEL_213:
          strtok_r(0LL, "\t", &tok_buf);
          goto LABEL_108;
        }
        v10->secure = 1;
LABEL_70:
        v32 = !v41;
        v29 = strtok_r(0LL, "\t", &tok_buf);
        if ( !v29 || !v32 )
        {
          httpheadera = v41;
          v26 = 4;
          goto LABEL_282;
        }
LABEL_72:
        v46 = curlx_strtoofft(v29, 0LL, 10LL, &v10->expires);
        v32 = v46 == 0;
        v29 = strtok_r(0LL, "\t", &tok_buf);
        if ( !v29 || v46 )
        {
          v102 = v46 == 0;
          v26 = 5;
          httpheadera = !v102;
          goto LABEL_282;
        }
LABEL_74:
        v47 = Curl_cstrdup(v29, "\t", p_expires);
        v10->name = (char *)v47;
        if ( v47 )
        {
          if ( (unsigned int)curl_strnequal("__Secure-", v47, 9LL) )
          {
            v10->prefix |= 1u;
          }
          else if ( (unsigned int)curl_strnequal("__Host-", v10->name, 7LL) )
          {
            v10->prefix |= 2u;
          }
          v29 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v29 )
            goto LABEL_156;
LABEL_78:
          v48 = Curl_cstrdup(v29, "\t", p_expires);
          v10->value = (char *)v48;
          v49 = v48;
          v50 = v48 != 0;
          v32 = (v48 != 0) & (strtok_r(0LL, "\t", &tok_buf) != 0LL);
          if ( !v32 )
          {
            v102 = v49 == 0;
            v32 = v50;
            v26 = 7;
            httpheadera = v102;
            goto LABEL_282;
          }
          v26 = 8;
          if ( !strtok_r(0LL, "\t", &tok_buf) )
            goto LABEL_282;
LABEL_80:
          ++v26;
          v29 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v29 )
          {
LABEL_288:
            v32 = 1;
LABEL_282:
            if ( v26 != 7 && v32 )
              goto LABEL_108;
            goto LABEL_157;
          }
          continue;
        }
        strtok_r(0LL, "\t", &tok_buf);
        httpheadera = 1;
LABEL_156:
        v63 = Curl_cstrdup(&LC0, "\t", p_expires);
        v10->value = (char *)v63;
        if ( !v63 )
          goto LABEL_108;
LABEL_157:
        if ( httpheadera )
          goto LABEL_108;
        prefix = v10->prefix;
        if ( (prefix & 1) != 0 )
        {
LABEL_159:
          if ( !v10->secure )
            goto LABEL_108;
          if ( (prefix & 2) != 0 )
            goto LABEL_161;
          goto LABEL_165;
        }
LABEL_106:
        if ( (prefix & 2) != 0 )
        {
          if ( !v10->secure )
            goto LABEL_108;
LABEL_161:
          v64 = v10->path;
          if ( !v64 || *v64 != 47 || v64[1] || v10->tailmatch )
            goto LABEL_108;
        }
LABEL_165:
        running = c->running;
        if ( !running && c->newsession && !v10->expires )
          goto LABEL_108;
        v10->livecookie = running;
        ptre = c->lastct;
        c->lastct = ptre + 1;
        v10->creationtime = ptre + 1;
        if ( !noexpire )
          remove_expired(c);
        v67 = cookiehash(v10->domain);
        v68 = c->cookies[v67];
        if ( !v68 )
        {
          if ( c->running && (data->set.gap8BB[3] & 0x10) != 0 )
          {
            v81 = v10->path;
            v82 = v10->domain;
            v52 = v10;
            livecookie = 0;
            v83 = v10->value;
            v84 = v10->name;
            v80 = "Added";
            goto LABEL_205;
          }
          v52 = v10;
          goto LABEL_242;
        }
        livecookie = 0;
        v52 = 0LL;
        v70 = 0LL;
        while ( 2 )
        {
          if ( (unsigned int)curl_strequal(v68->name, v10->name, v66) )
          {
            v72 = v68->domain;
            v73 = v10->domain;
            if ( v72 )
            {
              if ( v73 && (unsigned int)curl_strequal(v72, v73, v66) )
              {
LABEL_178:
                spath = v68->spath;
                if ( spath )
                {
                  ptrd = v10->spath;
                  if ( ptrd )
                  {
                    if ( v68->secure && !v10->secure && !secure )
                    {
                      sc = v68->spath;
                      v86 = strchr(spath + 1, 47);
                      v87 = sc;
                      v88 = (void *)ptrd;
                      if ( v86 )
                      {
                        v89 = v86 - sc;
                      }
                      else
                      {
                        v90 = sc;
                        sd = (char *)ptrd;
                        ptrf = v87;
                        v91 = strlen(v90);
                        v88 = sd;
                        v87 = ptrf;
                        v89 = v91;
                      }
                      if ( (unsigned int)curl_strnequal(v87, v88, v89) )
                      {
                        if ( (data->set.gap8BB[3] & 0x10) != 0 )
                          Curl_infof(
                            data,
                            "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                            v10->name,
                            v10->domain);
                        goto LABEL_108;
                      }
                    }
                  }
                }
              }
            }
            else if ( !v73 )
            {
              goto LABEL_178;
            }
          }
          if ( v70 || !(unsigned int)curl_strequal(v68->name, v10->name, v66) )
            goto LABEL_172;
          v75 = v68->domain;
          v76 = v10->domain;
          if ( v75 )
          {
            if ( !v76 || !(unsigned int)curl_strequal(v75, v76, v66) || v68->tailmatch != v10->tailmatch )
              goto LABEL_189;
          }
          else if ( v76 )
          {
LABEL_189:
            if ( !livecookie )
              goto LABEL_198;
          }
          v77 = v68->spath;
          v78 = v10->spath;
          if ( !v77 )
          {
LABEL_194:
            LOBYTE(v66) = v77 == 0LL;
            if ( (v77 == 0LL) != (v10->spath == 0LL) )
              goto LABEL_198;
            livecookie = v10->livecookie;
            if ( livecookie )
            {
              v52 = v68;
              v70 = (__m128i *)v10;
            }
            else
            {
              if ( v68->livecookie )
                goto LABEL_108;
              v52 = v68;
              v70 = (__m128i *)v10;
              livecookie = 1;
            }
LABEL_172:
            next = v68->next;
            if ( !v68->next )
              goto LABEL_199;
LABEL_173:
            v68 = next;
            continue;
          }
          break;
        }
        if ( v78 && (unsigned int)curl_strequal(v77, v78, v66) )
        {
          v77 = v68->spath;
          goto LABEL_194;
        }
LABEL_198:
        next = v68->next;
        livecookie = 0;
        if ( v68->next )
          goto LABEL_173;
LABEL_199:
        if ( v70 )
        {
          v79 = v52->name;
          v70->m128i_i64[0] = (__int64)v52->next;
          v70[3].m128i_i32[3] = v52->creationtime;
          Curl_cfree(v79);
          Curl_cfree(v52->value);
          Curl_cfree(v52->domain);
          Curl_cfree(v52->path);
          Curl_cfree(v52->spath);
          *(__m128i *)&v52->next = _mm_loadu_si128(v70);
          *(__m128i *)&v52->value = _mm_loadu_si128(v70 + 1);
          *(__m128i *)&v52->spath = _mm_loadu_si128(v70 + 2);
          *(__m128i *)&v52->expires = _mm_loadu_si128(v70 + 3);
          *(_QWORD *)&v52->prefix = v70[4].m128i_i64[0];
          Curl_cfree(v70);
        }
        else
        {
          v52 = v10;
        }
        if ( !c->running || (data->set.gap8BB[3] & 0x10) == 0 )
        {
          if ( livecookie )
            goto LABEL_206;
          goto LABEL_217;
        }
        v80 = "Added";
        v81 = v52->path;
        v82 = v52->domain;
        v83 = v52->value;
        v84 = v52->name;
        if ( livecookie )
          v80 = "Replaced";
LABEL_205:
        Curl_infof(
          data,
          "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
          v80,
          v84,
          v83,
          v82,
          v81,
          v52->expires);
        if ( !livecookie )
        {
          if ( !v68 )
          {
LABEL_242:
            c->cookies[v67] = v52;
            goto LABEL_218;
          }
LABEL_217:
          v68->next = v52;
LABEL_218:
          ++c->numcookies;
        }
LABEL_206:
        v85 = v52->expires;
        if ( v85 && v85 < c->next_expiration )
          c->next_expiration = v85;
        return v52;
      case 3:
        v41 = httpheadera;
        goto LABEL_66;
      case 4:
        goto LABEL_72;
      case 5:
        goto LABEL_74;
      case 6:
        goto LABEL_78;
      default:
        goto LABEL_80;
    }
  }
}
