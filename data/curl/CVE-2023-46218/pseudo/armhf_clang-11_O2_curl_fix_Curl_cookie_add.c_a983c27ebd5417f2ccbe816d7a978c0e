Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  int v12; // r8
  time_t v13; // r5
  int v14; // r0
  char *j; // r11
  int v16; // r9
  _QWORD *v17; // r0
  Curl_easy *v18; // r9
  char *i; // r8
  int v20; // r4
  bool v21; // zf
  size_t v22; // r0
  size_t v23; // r6
  char *v24; // r2
  size_t v25; // r0
  int v26; // r1
  bool v27; // zf
  char *v28; // r8
  int v29; // r1
  bool v30; // zf
  unsigned int v31; // r10
  size_t v32; // r0
  size_t v33; // r9
  char *v34; // r7
  int v35; // r1
  bool v36; // zf
  const char *v37; // r6
  char *v38; // r0
  int v39; // r5
  bool v40; // cc
  char v41; // r0
  char *v42; // r1
  int v43; // r2
  int v44; // r3
  bool v45; // zf
  int v46; // r0
  const char *v47; // r0
  char *v48; // r6
  size_t v49; // r7
  const char *v50; // r5
  int v51; // r0
  void (__fastcall *v52)(_DWORD); // r1
  int v53; // r0
  bool v54; // zf
  _DWORD *v55; // r4
  char *v56; // r0
  int v57; // r0
  int v58; // r0
  bool v59; // zf
  const char *v60; // r10
  const char *v61; // r0
  const char *v62; // r7
  size_t v63; // r0
  const char *v64; // r1
  int v65; // r6
  const char *v66; // r11
  int v67; // r0
  const char *v68; // r0
  int is_ipnum; // r0
  size_t v70; // r0
  size_t v71; // r5
  int v72; // r11
  const char *v73; // r0
  int v74; // r1
  bool v75; // zf
  int v76; // r0
  int v77; // r0
  int v78; // r0
  char *v79; // r0
  char *v80; // r0
  char *v81; // r0
  const char *v82; // r6
  int v83; // r11
  int v84; // r10
  int (**v85)(void); // r4
  const char *v86; // r0
  int v87; // r0
  bool v88; // cf
  int v89; // r1
  int v90; // r0
  const char *v91; // r0
  char *v92; // r6
  size_t v93; // r5
  size_t v94; // r0
  int v95; // r0
  int v96; // r0
  int v97; // r0
  int (*v98)(void); // r1
  int v99; // r5
  int v100; // r0
  char *v101; // r0
  void (__fastcall **v102)(int); // r5
  int v103; // r0
  Curl_easy *v104; // r5
  bool v105; // zf
  void (__fastcall **v106)(int); // r4
  void (__fastcall **v108)(int); // r5
  int v109; // r0
  char *v110; // r0
  char *v111; // r0
  void (__fastcall **v112)(int); // r5
  int v113; // r4
  void *v114; // r0
  const char *v115; // r0
  char *v116; // r5
  size_t v117; // r6
  size_t v118; // r0
  int v119; // r0
  CookieInfo *v120; // r3
  int v121; // r0
  int v122; // r8
  time_t v123; // r9
  curl_off_t *p_next_expiration; // r11
  int next_expiration_high; // r1
  Cookie *v126; // r4
  size_t v127; // r0
  CookieInfo *v128; // r6
  Cookie *next; // r0
  Cookie **v130; // r9
  Cookie *v131; // r11
  char v132; // r10
  Cookie *v133; // r5
  char *v134; // r0
  int v135; // r1
  const char *spath; // r6
  int v137; // r8
  bool v138; // zf
  bool v139; // zf
  char *v140; // r0
  size_t v141; // r2
  char *v142; // r0
  int v143; // r1
  char v144; // r0
  char v145; // r0
  char *v146; // r0
  int v147; // r1
  bool v148; // zf
  void (__fastcall **v149)(int); // r4
  const char *v150; // r0
  bool v151; // zf
  void (__fastcall **v152)(int); // r4
  int creationtime; // r2
  char *name; // r0
  void (__fastcall **v155)(Cookie **); // r8
  char *v156; // r2
  char *v157; // r3
  char *v158; // r4
  char *v159; // r6
  char *v160; // r7
  Cookie *v161; // r2
  Cookie *v162; // r3
  int v163; // r4
  Cookie *v164; // r6
  Cookie *v165; // r7
  bool v166; // zf
  __int64 v167; // r0
  curl_off_t *v168; // r6
  unsigned int next_expiration; // t1
  _DWORD *v170; // r5
  Cookie *v171; // r4
  Cookie **p_next; // r7
  Cookie *v173; // r6
  curl_off_t expires; // r0
  int v175; // r2
  int v176; // r3
  CookieInfo *v177; // r1
  const char *v178; // r2
  __int64 v179; // [sp+20h] [bp-D0h]
  _QWORD *v180; // [sp+28h] [bp-C8h]
  char *v181; // [sp+2Ch] [bp-C4h]
  char v182; // [sp+30h] [bp-C0h]
  int v184; // [sp+38h] [bp-B8h]
  time_t v185; // [sp+3Ch] [bp-B4h]
  size_t v186; // [sp+3Ch] [bp-B4h]
  Curl_easy *v187; // [sp+40h] [bp-B0h]
  Curl_easy *v188; // [sp+40h] [bp-B0h]
  int v189; // [sp+44h] [bp-ACh]
  CookieInfo *v190; // [sp+48h] [bp-A8h]
  char *dest[41]; // [sp+4Ch] [bp-A4h] BYREF

  v12 = 0;
  v13 = time(0u);
  if ( data->req.setcookies > 0x31u )
    return (Cookie *)v12;
  v14 = ((int (__fastcall *)(int, int))*Curl_ccalloc)(1, 48);
  if ( !v14 )
    return (Cookie *)v12;
  j = (char *)lineptr;
  v16 = v14;
  v185 = v13;
  v184 = noexpire;
  v190 = c;
  v189 = v14;
  if ( !httpheader )
  {
    dest[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      j = (char *)(lineptr + 0xA);
      *(_BYTE *)(v16 + 35) = 1;
    }
    if ( *j == 35 )
      goto LABEL_154;
    v79 = strchr(j, 13);
    if ( v79 )
      *v79 = 0;
    v80 = strchr(j, 10);
    if ( v80 )
      *v80 = 0;
    v81 = strtok_r(j, "\t", dest);
    if ( !v81 )
    {
LABEL_210:
      v106 = (void (__fastcall **)(int))Curl_cfree;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v16 + 20));
      (*v106)(*(_DWORD *)(v16 + 12));
      (*v106)(*(_DWORD *)(v16 + 16));
      (*v106)(*(_DWORD *)(v16 + 4));
      (*v106)(*(_DWORD *)(v16 + 8));
      (*v106)(v16);
      return 0;
    }
    v82 = v81;
    v83 = 0;
    v84 = 0;
    v85 = (int (**)(void))Curl_cstrdup;
    while ( 1 )
    {
      switch ( v83 )
      {
        case 0:
          v86 = v82 + 1;
          if ( *v82 != 46 )
            v86 = v82;
          v87 = ((int (__fastcall *)(const char *))*v85)(v86);
          v88 = v87 == 0;
          v89 = -v87;
          *(_DWORD *)(v16 + 20) = v87;
          v83 = 0;
          goto LABEL_185;
        case 1:
          v83 = 1;
          *(_BYTE *)(v16 + 32) = curl_strequal(v82, "TRUE") != 0;
          goto LABEL_195;
        case 2:
          if ( !strcmp("TRUE", v82) || !strcmp("FALSE", v82) )
          {
            v97 = ((int (__fastcall *)(const char *))*v85)("/");
            v98 = *v85;
            v99 = v97;
            *(_DWORD *)(v16 + 12) = v97;
            v100 = ((int (__fastcall *)(const char *))v98)("/");
            *(_DWORD *)(v16 + 16) = v100;
            v84 |= v99 == 0 || v100 == 0;
LABEL_188:
            *(_BYTE *)(v16 + 33) = 0;
            v83 = 3;
            if ( curl_strequal(v82, "TRUE") )
            {
              if ( secure || v190->running )
              {
                *(_BYTE *)(v16 + 33) = 1;
                goto LABEL_195;
              }
LABEL_192:
              v84 = 1;
              goto LABEL_195;
            }
            goto LABEL_195;
          }
          v90 = ((int (__fastcall *)(const char *))*v85)(v82);
          v83 = 2;
          *(_DWORD *)(v16 + 12) = v90;
          if ( !v90 )
            goto LABEL_192;
          v91 = (const char *)(*v85)();
          if ( !v91 )
          {
            v92 = 0;
            goto LABEL_201;
          }
          v92 = (char *)v91;
          v93 = strlen(v91);
          if ( *v92 == 34 )
            memmove(v92, v92 + 1, v93--);
          if ( !v93 )
          {
            if ( *v92 == 47 )
              goto LABEL_201;
LABEL_200:
            ((void (__fastcall *)(char *))*Curl_cfree)(v92);
            v92 = (char *)Curl_strndup("/", 1);
            goto LABEL_201;
          }
          v94 = v93 - 1;
          if ( v92[v93 - 1] == 34 )
          {
            --v93;
            v92[v94] = 0;
          }
          if ( *v92 != 47 )
            goto LABEL_200;
          if ( v93 && v92[v93 - 1] == 47 )
            v92[v93 - 1] = 0;
LABEL_201:
          *(_DWORD *)(v16 + 16) = v92;
          v95 = v92 == 0;
LABEL_186:
          v84 |= v95;
LABEL_195:
          v101 = strtok_r(0u, "\t", dest);
          ++v83;
          if ( !v101 || (v82 = v101, (v84 & 1) != 0) )
          {
            if ( v83 == 6 )
            {
              v103 = ((int (__fastcall *)(void *))*v85)(&L_str_22);
              v83 = 7;
              *(_DWORD *)(v16 + 8) = v103;
              LOBYTE(v84) = v84 | (v103 == 0);
              if ( !v103 )
                v83 = 6;
            }
            v104 = data;
            v105 = (v84 & 1) == 0;
            if ( (v84 & 1) == 0 )
              v105 = v83 == 7;
            if ( !v105 )
              goto LABEL_210;
LABEL_247:
            v12 = 0;
            if ( (*(_BYTE *)(v16 + 40) & 1) != 0 && !*(_BYTE *)(v16 + 33) )
              goto LABEL_308;
            if ( (*(_BYTE *)(v16 + 40) & 2) != 0 )
            {
              v150 = (const char *)*(unsigned __int8 *)(v16 + 33);
              v151 = v150 == 0;
              if ( *(_BYTE *)(v16 + 33) )
              {
                v150 = *(const char **)(v16 + 12);
                v151 = v150 == 0;
              }
              if ( v151 || strcmp(v150, "/") || *(_BYTE *)(v16 + 32) )
                goto LABEL_308;
            }
            v120 = v190;
            if ( !v190->running && v190->newsession && !*(_QWORD *)(v16 + 24) )
            {
LABEL_308:
              v152 = (void (__fastcall **)(int))Curl_cfree;
              ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v16 + 20));
              (*v152)(*(_DWORD *)(v16 + 12));
              (*v152)(*(_DWORD *)(v16 + 16));
              (*v152)(*(_DWORD *)(v16 + 4));
              (*v152)(*(_DWORD *)(v16 + 8));
              (*v152)(v16);
              return (Cookie *)v12;
            }
            *(_BYTE *)(v16 + 34) = v190->running;
            v188 = v104;
            v121 = v120->lastct + 1;
            v120->lastct = v121;
            *(_DWORD *)(v16 + 36) = v121;
            if ( !v184 )
            {
              v122 = 0;
              v123 = time(0u);
              p_next_expiration = &v190->next_expiration;
              next_expiration_high = HIDWORD(v190->next_expiration);
              if ( (v123 >> 0x1F) - (next_expiration_high + !__CFSHR__(v123, 0x1F)) < 0 == __OFSUB__(
                                                                                             v123 >> 0x1F,
                                                                                             next_expiration_high,
                                                                                             __CFSHR__(v123, 0x1F))
                || !(~LODWORD(v190->next_expiration) | next_expiration_high ^ 0x7FFFFFFF) )
              {
                *(_DWORD *)p_next_expiration = -1;
                *((_DWORD *)p_next_expiration + 1) = 0x7FFFFFFF;
                v170 = (_DWORD *)Curl_cfree;
                do
                {
                  v171 = v190->cookies[v122];
                  if ( v171 )
                  {
                    p_next = 0;
                    do
                    {
                      while ( 1 )
                      {
                        v173 = v171;
                        v171 = v171->next;
                        expires = v173->expires;
                        v175 = expires | HIDWORD(expires);
                        if ( !expires )
                          break;
                        v176 = (unsigned __int64)(expires - v123) >> 32;
                        if ( expires >= v123 )
                          break;
                        v177 = v190;
                        if ( p_next )
                          *p_next = v171;
                        else
                          v190->cookies[v122] = v171;
                        --v177->numcookies;
                        ((void (__fastcall *)(char *, _DWORD, int, int))*v170)(v173->domain, *v170, v175, v176);
                        ((void (__fastcall *)(char *))*v170)(v173->path);
                        ((void (__fastcall *)(char *))*v170)(v173->spath);
                        ((void (__fastcall *)(char *))*v170)(v173->name);
                        ((void (__fastcall *)(char *))*v170)(v173->value);
                        ((void (__fastcall *)(Cookie *))*v170)(v173);
                        if ( !v171 )
                          goto LABEL_334;
                      }
                      if ( expires && expires < *p_next_expiration )
                        *p_next_expiration = expires;
                      p_next = &v173->next;
                    }
                    while ( v171 );
                  }
LABEL_334:
                  ++v122;
                }
                while ( v122 != 63 );
              }
            }
            v126 = (Cookie *)v189;
            v127 = cookiehash(*(const char *const *)(v189 + 20));
            v128 = v190;
            v186 = v127;
            next = v190->cookies[v127];
            if ( !next )
            {
              v133 = 0;
              v132 = 0;
              goto LABEL_316;
            }
            v130 = 0;
            v131 = 0;
            v132 = 0;
            while ( 2 )
            {
              v133 = next;
              if ( curl_strequal(next->name, *(_DWORD *)(v189 + 4)) )
              {
                v134 = v133->domain;
                v135 = *(_DWORD *)(v189 + 20);
                if ( v134 )
                {
                  if ( v135 && curl_strequal(v134, v135) )
                  {
LABEL_264:
                    spath = v133->spath;
                    if ( spath )
                    {
                      v137 = *(_DWORD *)(v189 + 16);
                      v138 = v137 == 0;
                      if ( v137 )
                        v138 = !v133->secure;
                      if ( !v138 )
                      {
                        v139 = *(_BYTE *)(v189 + 33) == 0;
                        if ( !*(_BYTE *)(v189 + 33) )
                          v139 = secure == 0;
                        if ( v139 )
                        {
                          v140 = strchr(spath + 1, 47);
                          v141 = v140 ? v140 - spath : strlen(spath);
                          if ( curl_strnequal(spath, v137, v141) )
                          {
                            v148 = v188 == 0;
                            if ( v188 )
                              v148 = (*((_BYTE *)&v188->set + 1337) & 0x20) == 0;
                            if ( !v148 )
                              Curl_infof(
                                v188,
                                "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                                *(const char **)(v189 + 4),
                                *(const char **)(v189 + 20));
LABEL_303:
                            v149 = (void (__fastcall **)(int))Curl_cfree;
                            ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v189 + 20));
                            (*v149)(*(_DWORD *)(v189 + 12));
                            (*v149)(*(_DWORD *)(v189 + 16));
                            (*v149)(*(_DWORD *)(v189 + 4));
                            (*v149)(*(_DWORD *)(v189 + 8));
                            (*v149)(v189);
                            return 0;
                          }
                        }
                      }
                    }
                  }
                }
                else if ( !v135 )
                {
                  goto LABEL_264;
                }
              }
              if ( v130 )
              {
LABEL_259:
                next = v133->next;
                if ( !v133->next )
                {
                  if ( v130 )
                  {
                    creationtime = v131->creationtime;
                    name = v131->name;
                    *v130 = v131->next;
                    v130[9] = (Cookie *)creationtime;
                    v155 = (void (__fastcall **)(Cookie **))Curl_cfree;
                    ((void (__fastcall *)(char *))*Curl_cfree)(name);
                    (*v155)((Cookie **)v131->value);
                    (*v155)((Cookie **)v131->domain);
                    (*v155)((Cookie **)v131->path);
                    (*v155)((Cookie **)v131->spath);
                    v156 = (char *)v130[1];
                    v157 = (char *)v130[2];
                    v158 = (char *)v130[3];
                    v159 = (char *)v130[4];
                    v160 = (char *)v130[5];
                    v131->next = *v130;
                    v131->name = v156;
                    v131->value = v157;
                    v131->path = v158;
                    v131->spath = v159;
                    v131->domain = v160;
                    v161 = v130[7];
                    v162 = v130[8];
                    v163 = (int)v130[9];
                    v164 = v130[10];
                    v165 = v130[11];
                    LODWORD(v131->expires) = v130[6];
                    HIDWORD(v131->expires) = v161;
                    *(_DWORD *)&v131->tailmatch = v162;
                    v131->creationtime = v163;
                    *(_DWORD *)&v131->prefix = v164;
                    *((_DWORD *)&v131->prefix + 1) = v165;
                    (*v155)(v130);
                    v126 = v131;
                  }
                  v128 = v190;
LABEL_316:
                  if ( !v188 )
                    goto LABEL_321;
                  v166 = !v128->running;
                  if ( v128->running )
                    v166 = (*((_BYTE *)&v188->set + 1337) & 0x20) == 0;
                  if ( v166 )
                  {
LABEL_321:
                    if ( (v132 & 1) != 0 )
                      goto LABEL_326;
                  }
                  else
                  {
                    v178 = "Added";
                    if ( (v132 & 1) != 0 )
                      v178 = "Replaced";
                    Curl_infof(
                      v188,
                      "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
                      v178,
                      v126->name,
                      v126->value,
                      v126->domain,
                      v126->path,
                      v126->expires);
                    if ( (v132 & 1) != 0 )
                    {
LABEL_326:
                      v167 = v126->expires;
                      if ( v167 )
                      {
                        next_expiration = v128->next_expiration;
                        v168 = &v128->next_expiration;
                        if ( v167 < __SPAIR64__(*((_DWORD *)v168 + 1), next_expiration) )
                          *v168 = v167;
                      }
                      return v126;
                    }
                  }
                  if ( v133 )
                    v133->next = v126;
                  else
                    v128->cookies[v186] = v126;
                  ++v128->numcookies;
                  goto LABEL_326;
                }
                continue;
              }
              break;
            }
            if ( curl_strequal(v133->name, *(_DWORD *)(v189 + 4)) )
            {
              v142 = v133->domain;
              v143 = *(_DWORD *)(v189 + 20);
              if ( v142 )
              {
                if ( v143 && curl_strequal(v142, v143) )
                {
                  v144 = *(_BYTE *)(v189 + 32)
                       - v133->tailmatch
                       + (v133->tailmatch == *(unsigned __int8 *)(v189 + 32))
                       + v133->tailmatch
                       - *(_BYTE *)(v189 + 32);
                  goto LABEL_282;
                }
                v130 = 0;
                if ( (v132 & 1) == 0 )
                {
                  v132 = 0;
                  goto LABEL_259;
                }
LABEL_283:
                v146 = v133->spath;
                v147 = *(_DWORD *)(v189 + 16);
                if ( !v146 )
                {
                  v132 = 0;
                  v130 = 0;
                  if ( v147 )
                    goto LABEL_259;
                  goto LABEL_292;
                }
                if ( v147 )
                {
                  if ( curl_strequal(v146, v147) )
                  {
                    v132 = 0;
                    v130 = 0;
                    if ( (v133->spath != 0) == (*(_DWORD *)(v189 + 16) == 0) )
                      goto LABEL_259;
                    goto LABEL_292;
                  }
                }
                else if ( *(_DWORD *)(v189 + 16) )
                {
LABEL_292:
                  v132 = 1;
                  if ( *(_BYTE *)(v189 + 34) )
                  {
                    v131 = v133;
                    v130 = (Cookie **)v189;
                  }
                  else
                  {
                    v131 = v133;
                    v130 = (Cookie **)v189;
                    if ( v133->livecookie )
                      goto LABEL_303;
                  }
                  goto LABEL_259;
                }
                v132 = 0;
                v130 = 0;
                goto LABEL_259;
              }
              v144 = v143 == 0;
LABEL_282:
              v145 = v132 | v144;
              v132 = 0;
              if ( (v145 & 1) != 0 )
                goto LABEL_283;
            }
            v130 = 0;
            goto LABEL_259;
          }
          break;
        case 3:
          goto LABEL_188;
        case 4:
          v83 = 4;
          v95 = curlx_strtoofft(v82, 0, 10, v16 + 0x18) != 0;
          goto LABEL_186;
        case 5:
          v96 = ((int (__fastcall *)(const char *))*v85)(v82);
          v83 = 5;
          *(_DWORD *)(v16 + 4) = v96;
          if ( !v96 )
            goto LABEL_192;
          if ( curl_strnequal("__Secure-", v96, 9) )
          {
            *(_BYTE *)(v16 + 40) |= 1u;
          }
          else if ( curl_strnequal("__Host-", *(_DWORD *)(v16 + 4), 7) )
          {
            *(_BYTE *)(v16 + 40) |= 2u;
          }
          goto LABEL_195;
        case 6:
          v87 = ((int (__fastcall *)(const char *))*v85)(v82);
          v88 = v87 == 0;
          v89 = -v87;
          *(_DWORD *)(v16 + 8) = v87;
          v83 = 6;
LABEL_185:
          v95 = v89 + v88 + v87;
          goto LABEL_186;
        default:
          goto LABEL_195;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_154:
    ((void (__fastcall *)(int))*Curl_cfree)(v16);
    return 0;
  }
  v187 = data;
  HIDWORD(v179) = 0x7FFFFFFF - (v13 >> 0x1F);
  v181 = (char *)&data->set + 1334;
  LODWORD(v179) = ~v13;
  v17 = (_QWORD *)(v16 + 0x18);
  v18 = data;
  v180 = v17;
  v182 = 0;
  while ( 1 )
  {
    for ( i = j + 1; ; ++i )
    {
      v20 = (unsigned __int8)*j;
      v21 = v20 == 32;
      if ( v20 != 32 )
        v21 = v20 == 9;
      if ( !v21 )
        break;
      ++j;
    }
    v22 = strcspn(j, ";\t\r\n=");
    if ( !v22 )
    {
      v28 = j;
      goto LABEL_21;
    }
    v23 = v22;
    v24 = &j[v22];
    v25 = v22 - 1;
    do
    {
      v26 = (unsigned __int8)j[v25];
      v27 = v26 == 32;
      if ( v26 != 32 )
        v27 = v26 == 9;
      if ( !v27 )
      {
        v31 = v25 + 1;
        goto LABEL_29;
      }
      --v25;
    }
    while ( v25 != -1 );
    v31 = 0;
LABEL_29:
    if ( *v24 == 61 )
      break;
    v28 = v24;
    v37 = 0;
    v39 = 0;
    v34 = 0;
LABEL_42:
    v40 = v31 > 0xFFE;
    if ( v31 <= 0xFFE )
      v40 = (unsigned int)v37 > 0xFFE;
    if ( v40 || (unsigned int)&v37[v31] > 0x1000 )
    {
      v102 = (void (__fastcall **)(int))Curl_cfree;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v189 + 20));
      (*v102)(*(_DWORD *)(v189 + 12));
      (*v102)(*(_DWORD *)(v189 + 16));
      (*v102)(*(_DWORD *)(v189 + 4));
      (*v102)(*(_DWORD *)(v189 + 8));
      (*v102)(v189);
      v12 = 0;
      if ( (v181[3] & 0x20) != 0 )
        Curl_infof(v18, "oversized cookie dropped, name/val %zu + %zu bytes", v31, (size_t)v37);
      return (Cookie *)v12;
    }
    if ( v20 == 95 && v31 >= 7 && j[1] == 95 )
    {
      if ( curl_strnequal("__Secure-", j, 9) )
      {
        v41 = *(_BYTE *)(v189 + 40) | 1;
      }
      else
      {
        if ( !curl_strnequal("__Host-", j, 7) )
          goto LABEL_60;
        v41 = *(_BYTE *)(v189 + 40) | 2;
      }
      *(_BYTE *)(v189 + 40) = v41;
    }
LABEL_60:
    if ( !*(_DWORD *)(v189 + 4) )
    {
      if ( !v39 )
        goto LABEL_214;
      v50 = (const char *)Curl_cfree;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(0);
      v51 = Curl_strndup(j, v31);
      v52 = *(void (__fastcall **)(_DWORD))v50;
      *(_DWORD *)(v189 + 4) = v51;
      v52(*(_DWORD *)(v189 + 8));
      v53 = Curl_strndup(v34, v37);
      v54 = v53 == 0;
      *(_DWORD *)(v189 + 8) = v53;
      if ( v53 )
      {
        v37 = (const char *)v53;
        v50 = *(const char **)(v189 + 4);
        v54 = v50 == 0;
      }
      if ( v54 )
        goto LABEL_214;
      if ( v37[strcspn(v37, invalid_octets_badoctets)] || v50[strcspn(v50, invalid_octets_badoctets)] )
      {
        if ( (v181[3] & 0x20) != 0 )
          Curl_infof(v18, "invalid octets in name/value, cookie dropped");
        goto LABEL_214;
      }
      goto LABEL_21;
    }
    if ( v37 )
      goto LABEL_62;
    if ( v31 == 8 )
    {
      if ( curl_strnequal("httponly", j, 8) )
      {
        *(_BYTE *)(v189 + 35) = 1;
        goto LABEL_21;
      }
    }
    else if ( v31 == 6 && curl_strnequal("secure", j, 6) )
    {
      if ( !secure && v190->running )
        goto LABEL_214;
      *(_BYTE *)(v189 + 33) = 1;
      goto LABEL_21;
    }
    if ( v39 )
    {
LABEL_62:
      if ( v31 != 7 )
      {
        if ( v31 != 6 )
        {
          if ( v31 == 4 && curl_strnequal("path", j, 4) )
          {
            ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v189 + 12));
            v46 = Curl_strndup(v34, v37);
            *(_DWORD *)(v189 + 12) = v46;
            if ( !v46 )
              goto LABEL_214;
            ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v189 + 16));
            v47 = (const char *)((int (__fastcall *)(_DWORD))*Curl_cstrdup)(*(_DWORD *)(v189 + 12));
            if ( !v47 )
            {
              *(_DWORD *)(v189 + 16) = 0;
              goto LABEL_214;
            }
            v48 = (char *)v47;
            v49 = strlen(v47);
            if ( *v48 == 34 )
              memmove(v48, v48 + 1, v49--);
            if ( v49 )
            {
              if ( v48[v49 - 1] == 34 )
                v48[--v49] = 0;
              if ( *v48 != 47 )
              {
LABEL_119:
                ((void (__fastcall *)(char *))*Curl_cfree)(v48);
                v67 = Curl_strndup("/", 1);
                *(_DWORD *)(v189 + 16) = v67;
                if ( !v67 )
                  goto LABEL_214;
                goto LABEL_21;
              }
              if ( v49 && v48[v49 - 1] == 47 )
                v48[v49 - 1] = 0;
            }
            else if ( *v48 != 47 )
            {
              goto LABEL_119;
            }
            *(_DWORD *)(v189 + 16) = v48;
          }
          goto LABEL_21;
        }
        v58 = curl_strnequal("domain", j, 6);
        v59 = v37 == 0;
        if ( v37 )
          v59 = v58 == 0;
        if ( v59 )
          goto LABEL_21;
        v60 = v34 + 1;
        if ( *v34 == 46 )
          --v37;
        else
          v60 = v34;
        if ( v37 == (_BYTE *)&loc_8 + 1 && curl_strnequal(v60, "localhost", 9)
          || (v61 = (const char *)memchr(v60, 46, (size_t)v37)) != 0 && (unsigned int)(&v60[(_DWORD)v37] - v61) > 1 )
        {
          v62 = domain;
          v66 = v37;
          v68 = domain;
          if ( !domain )
            v68 = v60;
          is_ipnum = Curl_host_is_ipnum(v68);
          v65 = is_ipnum;
          if ( !domain )
          {
            v62 = 0;
LABEL_139:
            ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v189 + 20));
            v78 = Curl_strndup(v60, v66);
            *(_DWORD *)(v189 + 20) = v78;
            domain = v62;
            if ( !v65 && v78 )
            {
              *(_BYTE *)(v189 + 32) = 1;
              goto LABEL_21;
            }
            if ( !v78 )
            {
              v182 = 1;
LABEL_213:
              if ( (v182 & 1) == 0 )
              {
                if ( !domain
                  || *(_DWORD *)(v189 + 20)
                  || (v109 = ((int (__fastcall *)(const char *))*Curl_cstrdup)(domain),
                      (*(_DWORD *)(v189 + 20) = v109) != 0) )
                {
                  if ( !path || *(_DWORD *)(v189 + 12) )
                    goto LABEL_245;
                  v110 = strchr(path, 63);
                  v111 = v110 ? (char *)Curl_memrchr(path, 47, v110 - path) : strrchr(path, 47);
                  if ( !v111 )
                    goto LABEL_245;
                  v113 = v111 - path;
                  v114 = (void *)((int (__fastcall *)(int))*Curl_cmalloc)(v111 - path + 2);
                  *(_DWORD *)(v189 + 12) = v114;
                  if ( !v114 )
                    goto LABEL_214;
                  memcpy(v114, path, v113 + 1);
                  *(_BYTE *)(*(_DWORD *)(v189 + 12) + v113 + 1) = 0;
                  v115 = (const char *)((int (__fastcall *)(_DWORD))*Curl_cstrdup)(*(_DWORD *)(v189 + 12));
                  if ( !v115 )
                  {
                    *(_DWORD *)(v189 + 16) = 0;
                    goto LABEL_214;
                  }
                  v116 = (char *)v115;
                  v117 = strlen(v115);
                  if ( *v116 == 34 )
                    memmove(v116, v116 + 1, v117--);
                  if ( v117 )
                  {
                    v118 = v117 - 1;
                    if ( v116[v117 - 1] == 34 )
                    {
                      --v117;
                      v116[v118] = 0;
                    }
                    if ( *v116 == 47 )
                    {
                      if ( v117 && v116[v117 - 1] == 47 )
                        v116[v117 - 1] = 0;
LABEL_243:
                      *(_DWORD *)(v189 + 16) = v116;
LABEL_245:
                      if ( !*(_DWORD *)(v189 + 4) )
                        goto LABEL_214;
                      v104 = v18;
                      ++v18->req.setcookies;
                      v16 = v189;
                      goto LABEL_247;
                    }
                  }
                  else if ( *v116 == 47 )
                  {
                    goto LABEL_243;
                  }
                  ((void (__fastcall *)(char *))*Curl_cfree)(v116);
                  v119 = Curl_strndup("/", 1);
                  *(_DWORD *)(v189 + 16) = v119;
                  if ( !v119 )
                    goto LABEL_214;
                  goto LABEL_245;
                }
              }
LABEL_214:
              v108 = (void (__fastcall **)(int))Curl_cfree;
              ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v189 + 20));
              (*v108)(*(_DWORD *)(v189 + 12));
              (*v108)(*(_DWORD *)(v189 + 16));
              (*v108)(*(_DWORD *)(v189 + 4));
              (*v108)(*(_DWORD *)(v189 + 8));
              (*v108)(v189);
              return 0;
            }
            v182 |= v78 == 0;
            goto LABEL_21;
          }
          v37 = v66;
          if ( is_ipnum )
          {
LABEL_110:
            if ( strncmp(v60, v62, (size_t)v37) )
              goto LABEL_130;
            v63 = strlen(v62);
            v64 = v37;
            v65 = 1;
            v66 = v64;
            if ( v64 != (const char *)v63 )
              goto LABEL_130;
            goto LABEL_139;
          }
        }
        else
        {
          v62 = ":";
          if ( Curl_host_is_ipnum(":") )
            goto LABEL_110;
        }
        v70 = strlen(v62);
        if ( v70 < (unsigned int)v37 )
          goto LABEL_130;
        v71 = v70;
        v72 = &v62[v70] - v37;
        if ( !curl_strnequal(v60, v72, v37) )
          goto LABEL_130;
        v73 = v37;
        v74 = v72;
        v65 = 0;
        v75 = v71 == (_DWORD)v73;
        v66 = v73;
        if ( (const char *)v71 != v73 )
          v75 = *(_BYTE *)(v74 - 1) == 46;
        if ( !v75 )
        {
LABEL_130:
          domain = v62;
          v182 = 1;
          if ( (v181[3] & 0x20) != 0 )
            Curl_infof(v18, "skipped cookie with bad tailmatch domain: %s", v60);
          goto LABEL_21;
        }
        goto LABEL_139;
      }
      if ( curl_strnequal("version", j, 7) )
        goto LABEL_21;
      if ( !curl_strnequal("max-age", j, 7) )
      {
        if ( !curl_strnequal("expires", j, 7) )
          goto LABEL_21;
        v55 = v180;
        if ( (unsigned int)v37 > 0x7F || *v180 )
          goto LABEL_21;
        memcpy(dest, v34, (size_t)v37);
        *((_BYTE *)dest + (_DWORD)v37) = 0;
        v76 = Curl_getdate_capped(dest);
        *v180 = v76;
        if ( v76 )
        {
          if ( v76 > -1 )
            goto LABEL_21;
          v77 = 0;
          *(_DWORD *)v180 = 0;
          goto LABEL_147;
        }
LABEL_148:
        *v55 = 1;
        v55[1] = 0;
        goto LABEL_21;
      }
      v55 = v180;
      v56 = v34 + 1;
      if ( *v34 != 34 )
        v56 = v34;
      v57 = curlx_strtoofft(v56, 0, 10, v180);
      if ( v57 )
      {
        if ( v57 != 2 )
        {
          if ( v57 != 1 )
            goto LABEL_21;
LABEL_146:
          *(_DWORD *)v180 = -1;
          v77 = 0x7FFFFFFF;
LABEL_147:
          v55[1] = v77;
          goto LABEL_21;
        }
        goto LABEL_148;
      }
      if ( !*v180 )
        goto LABEL_148;
      if ( v179 < *v180 )
        goto LABEL_146;
      *v180 += v185;
    }
LABEL_21:
    for ( j = v28 + 1; ; ++j )
    {
      v29 = (unsigned __int8)*(j - 1);
      v30 = v29 == 32;
      if ( v29 != 32 )
        v30 = v29 == 9;
      if ( !v30 )
        break;
    }
    if ( v29 != 59 )
      goto LABEL_213;
  }
  v32 = strcspn(&j[v23 + 1], ";\r\n");
  v33 = v23 + v32;
  if ( v32 )
  {
    v34 = &i[v33];
    while ( 1 )
    {
      v35 = (unsigned __int8)*(v34 - 1);
      v36 = v35 == 32;
      if ( v35 != 32 )
        v36 = v35 == 9;
      if ( !v36 )
        break;
      --v32;
      --v34;
      if ( !v32 )
        goto LABEL_37;
    }
    v42 = &i[v23];
    v43 = 0;
    while ( 1 )
    {
      v44 = (unsigned __int8)v42[v43];
      v45 = v44 == 32;
      if ( v44 != 32 )
        v45 = v44 == 9;
      if ( !v45 )
        break;
      if ( v32 == ++v43 )
        goto LABEL_38;
    }
    v37 = (const char *)(v32 - v43);
    v34 = &v42[v43];
  }
  else
  {
LABEL_37:
    v34 = &j[v23 + 1];
LABEL_38:
    v37 = 0;
  }
  if ( !memchr(v34, 9, (size_t)v37) )
  {
    v38 = &j[v33];
    v18 = v187;
    v39 = 1;
    v28 = v38 + 1;
    goto LABEL_42;
  }
  v112 = (void (__fastcall **)(int))Curl_cfree;
  ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v189 + 20));
  (*v112)(*(_DWORD *)(v189 + 12));
  (*v112)(*(_DWORD *)(v189 + 16));
  (*v112)(*(_DWORD *)(v189 + 4));
  (*v112)(*(_DWORD *)(v189 + 8));
  (*v112)(v189);
  v12 = 0;
  if ( (v181[3] & 0x20) != 0 )
    Curl_infof(v187, "cookie contains TAB, dropping");
  return (Cookie *)v12;
}
