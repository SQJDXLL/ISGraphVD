Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  int v12; // r10
  time_t v13; // r6
  Curl_easy *spath; // r5
  Cookie *v15; // r0
  Cookie *v16; // r7
  char *v17; // r10
  char *i; // r9
  int v19; // r6
  bool v20; // zf
  size_t v21; // r0
  size_t v22; // r4
  size_t v23; // r0
  int v24; // r1
  bool v25; // zf
  size_t v26; // r11
  int v27; // r2
  size_t v28; // r8
  const char *v29; // r7
  size_t v30; // r0
  int v31; // r1
  bool v32; // zf
  int v33; // r2
  int v34; // r1
  bool v35; // zf
  int v36; // r6
  bool v37; // cc
  int v38; // r4
  int v39; // r0
  char *v40; // r0
  const char *v41; // r4
  int v42; // r4
  int v43; // r0
  bool v44; // zf
  int v45; // r0
  bool v46; // zf
  const char *v47; // r4
  int v48; // r0
  const char *v49; // r0
  int v50; // r0
  Curl_easy *v51; // r9
  const char *v52; // r4
  const char *v53; // r6
  const char *v54; // r0
  int is_ipnum; // r0
  int v56; // r5
  char *v57; // r0
  _BOOL4 v58; // r1
  int v59; // r4
  int v60; // r0
  int v61; // r0
  char *v62; // r0
  char *v63; // r0
  char *v64; // r0
  const char *v65; // r11
  int (__fastcall **v66)(const char *); // r9
  int v67; // r5
  int v68; // r6
  const char *v69; // r0
  char *v70; // r0
  char *v71; // r0
  Cookie *v72; // r4
  char *v73; // r0
  char *v74; // r0
  Cookie *v75; // r4
  char *v76; // r0
  char *v77; // r5
  Cookie *v78; // r4
  int v79; // r0
  char *v80; // r0
  char *v81; // r0
  Curl_easy *v82; // r0
  char v83; // r4
  const char *v84; // r6
  bool v85; // zf
  int v86; // r0
  char *v87; // r0
  char *v88; // r0
  int v89; // r9
  char *v90; // r0
  size_t v91; // r9
  char *v92; // r0
  int v93; // r0
  Curl_easy *v94; // r11
  Cookie *next; // r0
  Cookie *v96; // r8
  Cookie *v97; // r10
  int v98; // r9
  Cookie *v99; // r6
  char *v100; // r0
  char *v101; // r1
  _BOOL4 v102; // r0
  bool v103; // zf
  char *v104; // r0
  int v105; // r1
  int v106; // r0
  char *v107; // r4
  bool v108; // zf
  bool v109; // zf
  char *v110; // r0
  size_t v111; // r2
  char *v112; // r0
  bool v113; // zf
  const char *v114; // r0
  bool v115; // zf
  char *name; // r0
  int creationtime; // r2
  void (__fastcall **v118)(Cookie *); // r11
  char *v119; // r2
  char *value; // r3
  char *v121; // r4
  char *v122; // r5
  char *v123; // r7
  int expires_high; // r2
  int v125; // r3
  int v126; // r4
  int v127; // r5
  int v128; // r7
  Curl_easy *v129; // r5
  bool v130; // zf
  const char *v131; // r2
  CookieInfo *v132; // r1
  curl_off_t expires; // r0
  curl_off_t v135; // [sp+1Ch] [bp-E4h]
  char **p_domain; // [sp+24h] [bp-DCh]
  curl_off_t *v137; // [sp+28h] [bp-D8h]
  char **str; // [sp+2Ch] [bp-D4h]
  char **p_value; // [sp+30h] [bp-D0h]
  char v141; // [sp+38h] [bp-C8h]
  int v142; // [sp+3Ch] [bp-C4h]
  time_t v143; // [sp+40h] [bp-C0h]
  char **p_name; // [sp+44h] [bp-BCh]
  char *v145; // [sp+48h] [bp-B8h]
  CookieInfo *cookies; // [sp+4Ch] [bp-B4h]
  curl_off_t *p_expires; // [sp+50h] [bp-B0h]
  Curl_easy *v148; // [sp+54h] [bp-ACh]
  Cookie *v149; // [sp+58h] [bp-A8h]
  char *dest[41]; // [sp+5Ch] [bp-A4h] BYREF

  v12 = 0;
  v13 = time(0u);
  if ( data->req.setcookies > 0x31u )
    return (Cookie *)v12;
  spath = data;
  v15 = (Cookie *)((int (__fastcall *)(int, int))*Curl_ccalloc)(1, 48);
  if ( !v15 )
    return (Cookie *)v12;
  v16 = v15;
  v143 = v13;
  v17 = (char *)lineptr;
  v148 = spath;
  v149 = v15;
  if ( !httpheader )
  {
    dest[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v16->httponly = 1;
      v17 = (char *)(lineptr + 0xA);
    }
    if ( *v17 == 35 )
    {
      ((void (__fastcall *)(Cookie *))*Curl_cfree)(v16);
      return 0;
    }
    v62 = strchr(v17, 13);
    if ( v62 )
      *v62 = 0;
    v63 = strchr(v17, 10);
    if ( v63 )
      *v63 = 0;
    cookies = c;
    v64 = strtok_r(v17, "\t", dest);
    if ( v64 )
    {
      v65 = v64;
      p_expires = &v149->expires;
      v66 = (int (__fastcall **)(const char *))Curl_cstrdup;
      v67 = 0;
      v68 = 0;
      do
      {
        switch ( v67 )
        {
          case 0:
            v69 = v65 + 1;
            if ( *v65 != 46 )
              v69 = v65;
            v70 = (char *)(*v66)(v69);
            v149->domain = v70;
            v68 |= v70 == 0;
            v67 = 0;
            break;
          case 1:
            v149->tailmatch = curl_strequal(v65, "TRUE") != 0;
            v67 = 1;
            break;
          case 2:
            if ( !strcmp("TRUE", v65) || !strcmp("FALSE", v65) )
            {
              v77 = (char *)(*v66)("/");
              v78 = v149;
              v149->path = v77;
              v79 = (*v66)("/");
              v78->spath = (char *)v79;
              v68 |= v77 == 0 || v79 == 0;
              goto LABEL_183;
            }
            v71 = (char *)(*v66)(v65);
            v72 = v149;
            v149->path = v71;
            v67 = 2;
            if ( !v71 )
              goto LABEL_187;
            v73 = sanitize_cookie_path(v71);
            v72->spath = v73;
            v68 |= v73 == 0;
            break;
          case 3:
LABEL_183:
            v149->secure = 0;
            v67 = 3;
            if ( curl_strequal(v65, "TRUE") )
            {
              if ( !secure && !cookies->running )
                goto LABEL_187;
              v149->secure = 1;
            }
            break;
          case 4:
            v68 |= curlx_strtoofft(v65, 0, 10, p_expires) != 0;
            v67 = 4;
            break;
          case 5:
            v74 = (char *)(*v66)(v65);
            v75 = v149;
            v149->name = v74;
            v67 = 5;
            if ( v74 )
            {
              if ( curl_strnequal("__Secure-", v74, 9) )
              {
                v75->prefix |= 1u;
              }
              else if ( curl_strnequal("__Host-", v75->name, 7) )
              {
                v75->prefix |= 2u;
              }
            }
            else
            {
LABEL_187:
              v68 = 1;
            }
            break;
          case 6:
            v76 = (char *)(*v66)(v65);
            v149->value = v76;
            v68 |= v76 == 0;
            v67 = 6;
            break;
          default:
            break;
        }
        v80 = strtok_r(0u, "\t", dest);
        ++v67;
        if ( (v68 & 1) != 0 )
          break;
        v65 = v80;
      }
      while ( v80 );
      if ( v67 == 6 )
      {
        v81 = (char *)((int (__fastcall *)(void *))*Curl_cstrdup)(&L_str_22);
        v16 = v149;
        v149->value = v81;
        LOBYTE(v68) = v68 | (v81 == 0);
        v67 = 7;
        if ( !v81 )
          v67 = 6;
        v82 = v148;
        goto LABEL_202;
      }
    }
    else
    {
      LOBYTE(v68) = 0;
      v67 = 0;
    }
    v82 = v148;
    v16 = v149;
LABEL_202:
    v85 = (v68 & 1) == 0;
    if ( (v68 & 1) == 0 )
      v85 = v67 == 7;
    if ( v85 )
    {
      spath = v82;
      goto LABEL_227;
    }
LABEL_205:
    freecookie(v16);
    return 0;
  }
  cookies = c;
  if ( strlen(lineptr) > 0x1388 )
  {
    ((void (__fastcall *)(Cookie *))*Curl_cfree)(v16);
    goto LABEL_224;
  }
  v142 = noexpire;
  HIDWORD(v135) = 0x7FFFFFFF - (v13 >> 0x1F);
  v145 = (char *)&spath->set + 1334;
  LODWORD(v135) = ~v13;
  p_value = &v16->value;
  p_domain = &v16->domain;
  v137 = &v16->expires;
  str = &v16->path;
  p_name = &v16->name;
  v141 = 0;
  do
  {
    for ( i = v17; ; ++i )
    {
      v19 = (unsigned __int8)*i;
      v20 = v19 == 32;
      if ( v19 != 32 )
        v20 = v19 == 9;
      if ( !v20 )
        break;
    }
    v21 = strcspn(i, ";\t\r\n=");
    if ( !v21 )
    {
      v17 = i;
      goto LABEL_92;
    }
    v22 = v21;
    v17 = &i[v21];
    v23 = v21 - 1;
    do
    {
      v24 = (unsigned __int8)i[v23];
      v25 = v24 == 32;
      if ( v24 != 32 )
        v25 = v24 == 9;
      if ( !v25 )
      {
        v26 = v23 + 1;
        goto LABEL_27;
      }
      --v23;
    }
    while ( v23 != -1 );
    v26 = 0;
LABEL_27:
    v27 = (unsigned __int8)*v17;
    v28 = 0;
    v29 = 0;
    if ( v27 == 61 )
    {
      v29 = &i[v22 + 1];
      v30 = strcspn(v29, ";\r\n");
      v28 = v30;
      if ( v30 )
      {
        while ( 1 )
        {
          v31 = (unsigned __int8)i[v22 + v28];
          v32 = v31 == 32;
          if ( v31 != 32 )
            v32 = v31 == 9;
          if ( !v32 )
            break;
          if ( !--v28 )
          {
            v28 = 0;
            break;
          }
        }
      }
      if ( v28 )
      {
        v33 = (int)&i[v22 + 1 + v28];
        while ( 1 )
        {
          v34 = *(unsigned __int8 *)v29;
          v35 = v34 == 32;
          if ( v34 != 32 )
            v35 = v34 == 9;
          if ( !v35 )
            break;
          --v28;
          ++v29;
          if ( !v28 )
          {
            v28 = 0;
            v29 = (const char *)v33;
            break;
          }
        }
      }
      v17 = &i[v22 + 1 + v30];
      spath = v148;
      if ( memchr(v29, 9, v28) )
      {
        v16 = v149;
        freecookie(v149);
        v36 = 1;
        if ( v148 && (v145[3] & 0x20) != 0 )
          Curl_infof(v148, "cookie contains TAB, dropping");
        goto LABEL_89;
      }
      v27 = 61;
    }
    v37 = v26 > 0xFFE;
    if ( v26 <= 0xFFE )
      v37 = v28 > 0xFFE;
    if ( v37 || v28 + v26 > 0x1000 )
    {
      freecookie(v149);
      v36 = 1;
      if ( spath && (v145[3] & 0x20) != 0 )
        Curl_infof(spath, "oversized cookie dropped, name/val %zu + %zu bytes", v26, v28);
      goto LABEL_88;
    }
    if ( v19 == 95 && v26 >= 7 && i[1] == 95 )
    {
      v38 = v27;
      if ( curl_strnequal("__Secure-", i, 9) )
      {
        v149->prefix |= 1u;
        v27 = v38;
      }
      else
      {
        v39 = curl_strnequal("__Host-", i, 7);
        v27 = v38;
        if ( v39 )
          v149->prefix |= 2u;
      }
    }
    if ( !*p_name )
    {
      v36 = 6;
      if ( v27 != 61 )
        goto LABEL_87;
      strstore(p_name, i, v26);
      strstore(p_value, v29, v28);
      v41 = *p_name;
      if ( !*p_name )
        goto LABEL_87;
      v16 = v149;
      if ( !*p_value )
        goto LABEL_80;
      if ( invalid_octets(*p_value) || invalid_octets(v41) )
      {
        if ( spath && (v145[3] & 0x20) != 0 )
          Curl_infof(spath, "invalid octets in name/value, cookie dropped");
LABEL_80:
        v141 = 1;
        goto LABEL_89;
      }
      goto LABEL_139;
    }
    if ( !v28 )
    {
      if ( v26 == 8 )
      {
        v59 = v27;
        v60 = curl_strnequal("httponly", i, 8);
        v27 = v59;
        if ( v60 )
        {
          v16 = v149;
          v149->httponly = 1;
          goto LABEL_139;
        }
      }
      else if ( v26 == 6 )
      {
        v42 = v27;
        if ( curl_strnequal("secure", i, 6) )
        {
          if ( secure || !cookies->running )
          {
            v16 = v149;
            v149->secure = 1;
            goto LABEL_139;
          }
          v36 = 6;
LABEL_87:
          v141 = 1;
LABEL_88:
          v16 = v149;
          goto LABEL_89;
        }
        v27 = v42;
      }
      if ( v27 != 61 )
        goto LABEL_138;
    }
    if ( v26 == 7 )
    {
      if ( curl_strnequal("version", i, 7) )
      {
LABEL_138:
        v16 = v149;
        goto LABEL_139;
      }
      v47 = v29;
      v48 = curl_strnequal("max-age", i, 7);
      v16 = v149;
      if ( !v48 )
      {
        if ( !curl_strnequal("expires", i, 7) || v28 > 0x7F || *v137 )
          goto LABEL_139;
        memcpy(dest, v47, v28);
        *((_BYTE *)dest + v28) = 0;
        v61 = Curl_getdate_capped(dest);
        *v137 = v61;
        if ( v61 )
        {
          if ( v61 > -1 )
            goto LABEL_139;
          *(_DWORD *)v137 = 0;
        }
        else
        {
          *(_DWORD *)v137 = 1;
        }
        *((_DWORD *)v137 + 1) = 0;
        goto LABEL_139;
      }
      v49 = v47 + 1;
      if ( *v47 != 34 )
        v49 = v47;
      v50 = curlx_strtoofft(v49, 0, 10, v137);
      if ( v50 )
      {
        if ( v50 != 2 )
        {
          if ( v50 == 1 )
          {
LABEL_157:
            *(_DWORD *)v137 = -1;
            *((_DWORD *)v137 + 1) = 0x7FFFFFFF;
          }
LABEL_139:
          v36 = 0;
          goto LABEL_89;
        }
      }
      else if ( *v137 )
      {
        if ( v135 >= *v137 )
        {
          *v137 += v143;
          goto LABEL_139;
        }
        goto LABEL_157;
      }
      *(_DWORD *)v137 = 1;
      *((_DWORD *)v137 + 1) = 0;
      goto LABEL_139;
    }
    if ( v26 != 6 )
    {
      if ( v26 == 4 && curl_strnequal("path", i, 4) )
      {
        strstore(str, v29, v28);
        v36 = 6;
        if ( !*str )
          goto LABEL_87;
        v16 = v149;
        ((void (__fastcall *)(char *))*Curl_cfree)(v149->spath);
        v40 = sanitize_cookie_path(v16->path);
        v16->spath = v40;
        if ( !v40 )
          goto LABEL_80;
        goto LABEL_139;
      }
      goto LABEL_138;
    }
    v45 = curl_strnequal("domain", i, 6);
    v46 = v28 == 0;
    if ( v28 )
      v46 = v45 == 0;
    if ( v46 )
      goto LABEL_138;
    v51 = spath;
    v52 = v29 + 1;
    if ( *v29 == 46 )
      --v28;
    else
      v52 = v29;
    v53 = domain;
    if ( bad_domain(v52, v28) )
      v53 = ":";
    v54 = v53;
    if ( !v53 )
      v54 = v52;
    is_ipnum = Curl_host_is_ipnum(v54);
    v56 = is_ipnum;
    domain = v53;
    if ( !v53 )
      goto LABEL_128;
    if ( is_ipnum )
    {
      if ( !strncmp(v52, v53, v28) && v28 == strlen(v53) )
        goto LABEL_128;
      if ( v56 )
        goto LABEL_146;
    }
    if ( !cookie_tailmatch(v52, v28, v53) )
    {
LABEL_146:
      v36 = 0;
      v141 = 1;
      spath = v51;
      v16 = v149;
      if ( v51 && (v145[3] & 0x20) != 0 )
        Curl_infof(v51, "skipped cookie with bad tailmatch domain: %s", v52);
      v57 = (_BYTE *)(Curl_cookie_loadfiles + 1);
      goto LABEL_152;
    }
LABEL_128:
    strstore(p_domain, v52, v28);
    v57 = *p_domain;
    v58 = *p_domain == 0;
    v36 = 0;
    if ( *p_domain )
      v57 = (_BYTE *)(Curl_cookie_loadfiles + 1);
    else
      v36 = 6;
    v16 = v149;
    if ( v56 | v58 )
    {
      v141 |= v58;
    }
    else
    {
      v57 = (_BYTE *)(Curl_cookie_loadfiles + 1);
      v149->tailmatch = 1;
      v36 = 0;
    }
    spath = v51;
LABEL_152:
    if ( v57 )
      v36 = 0;
LABEL_89:
    if ( v36 )
      break;
    while ( 1 )
    {
LABEL_92:
      v43 = (unsigned __int8)*v17;
      v44 = v43 == 32;
      if ( v43 != 32 )
        v44 = v43 == 9;
      if ( !v44 )
        break;
      ++v17;
    }
    if ( v43 == 59 )
      ++v17;
    v36 = v43 - 0x3B;
    if ( v43 != 0x3B )
      v36 = 6;
  }
  while ( !v36 );
  if ( v36 == 6 )
  {
    v83 = v141;
    if ( (v141 & 1) != 0 )
    {
      noexpire = v142;
      v84 = path;
    }
    else
    {
      v84 = path;
      if ( domain )
      {
        noexpire = v142;
        if ( !v16->domain )
        {
          v86 = ((int (__fastcall *)(const char *))*Curl_cstrdup)(domain);
          v16->domain = (char *)v86;
          v83 = v141 | (v86 == 0);
        }
      }
      else
      {
        noexpire = v142;
      }
    }
    if ( (v83 & 1) != 0
      || !v84
      || v16->path
      || ((v87 = strchr(v84, 63)) == 0 ? (v88 = strrchr(v84, 47)) : (v88 = (char *)Curl_memrchr(v84, 47, v87 - v84)),
          !v88) )
    {
LABEL_212:
      if ( (v83 & 1) != 0 || !v16->name )
        goto LABEL_223;
      ++spath->req.setcookies;
      v36 = 0;
    }
    else
    {
      v89 = v88 - v84;
      v90 = (char *)((int (__fastcall *)(int))*Curl_cmalloc)(v88 - v84 + 2);
      v16->path = v90;
      if ( v90 )
      {
        v91 = v89 + 1;
        memcpy(v90, v84, v91);
        v16->path[v91] = 0;
        v92 = sanitize_cookie_path(v16->path);
        v16->spath = v92;
        v83 |= v92 == 0;
        goto LABEL_212;
      }
LABEL_223:
      freecookie(v16);
LABEL_224:
      v36 = 1;
    }
  }
  else
  {
    noexpire = v142;
  }
  if ( v36 )
    return 0;
LABEL_227:
  v12 = 0;
  if ( (v16->prefix & 1) != 0 && !v16->secure )
    goto LABEL_286;
  if ( (v16->prefix & 2) != 0 )
  {
    v114 = (const char *)v16->secure;
    v115 = v114 == 0;
    if ( v16->secure )
    {
      v114 = v16->path;
      v115 = v114 == 0;
    }
    if ( v115 || strcmp(v114, "/") || v16->tailmatch )
      goto LABEL_286;
  }
  if ( !cookies->running && cookies->newsession && !v16->expires )
  {
LABEL_286:
    freecookie(v16);
    return (Cookie *)v12;
  }
  v16->livecookie = cookies->running;
  v93 = cookies->lastct + 1;
  cookies->lastct = v93;
  v16->creationtime = v93;
  if ( !noexpire )
    remove_expired(cookies);
  v94 = spath;
  v149 = (Cookie *)cookiehash(v16->domain);
  next = cookies->cookies[(_DWORD)v149];
  if ( next )
  {
    v96 = 0;
    v97 = 0;
    v98 = 0;
    while ( 1 )
    {
      v99 = next;
      if ( curl_strequal(next->name, v16->name) )
      {
        v100 = v99->domain;
        if ( v100 )
        {
          v101 = v16->domain;
          if ( !v101 )
            goto LABEL_247;
          v102 = curl_strequal(v100, v101) != 0;
        }
        else
        {
          v102 = v16->domain == 0;
        }
        v103 = !v102;
        if ( v102 )
        {
          spath = (Curl_easy *)v99->spath;
          v103 = spath == 0;
        }
        if ( !v103 )
        {
          v107 = v16->spath;
          v108 = v107 == 0;
          if ( v107 )
            v108 = !v99->secure;
          if ( !v108 )
          {
            v109 = !v16->secure;
            if ( !v16->secure )
              v109 = secure == 0;
            if ( v109 )
            {
              v110 = strchr((const char *)&spath->magic + 1, 47);
              v111 = v110 ? v110 - (char *)spath : strlen((const char *)spath);
              if ( curl_strnequal(spath, v107, v111) )
              {
                if ( v94 && (*((_BYTE *)&v94->set + 1337) & 0x20) != 0 )
                  Curl_infof(
                    v94,
                    "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                    v16->name,
                    v16->domain);
                goto LABEL_205;
              }
            }
          }
        }
      }
LABEL_247:
      if ( v96 )
        goto LABEL_236;
      v96 = 0;
      if ( !curl_strequal(v99->name, v16->name) )
        goto LABEL_236;
      v104 = v99->domain;
      if ( !v104 )
      {
        v106 = (int)v16->domain;
        goto LABEL_264;
      }
      v105 = (int)v16->domain;
      if ( v105 && curl_strequal(v104, v105) )
      {
        v106 = v99->tailmatch - v16->tailmatch;
LABEL_264:
        v105 = -v106;
        v98 |= v106 == 0;
      }
      if ( (v98 & 1) != 0 )
      {
        v112 = v99->spath;
        v113 = v112 == 0;
        if ( v112 )
        {
          v105 = (int)v16->spath;
          v113 = v105 == 0;
        }
        if ( !v113 && !curl_strequal(v112, v105) )
        {
          v98 = 0;
          goto LABEL_236;
        }
        v98 &= (v99->spath != 0) ^ (v16->spath == 0);
      }
      if ( (v98 & 1) != 0 )
      {
        if ( v16->livecookie )
        {
          v97 = v99;
          v96 = v16;
        }
        else
        {
          v97 = v99;
          v96 = v16;
          if ( v99->livecookie )
            goto LABEL_205;
        }
      }
LABEL_236:
      next = v99->next;
      if ( !v99->next )
        goto LABEL_291;
    }
  }
  LOBYTE(v98) = 0;
  v97 = 0;
  v96 = 0;
  v99 = 0;
LABEL_291:
  if ( v96 )
  {
    name = v97->name;
    creationtime = v97->creationtime;
    v96->next = v97->next;
    v96->creationtime = creationtime;
    v118 = (void (__fastcall **)(Cookie *))Curl_cfree;
    ((void (__fastcall *)(char *))*Curl_cfree)(name);
    (*v118)((Cookie *)v97->value);
    (*v118)((Cookie *)v97->domain);
    (*v118)((Cookie *)v97->path);
    (*v118)((Cookie *)v97->spath);
    v119 = v96->name;
    value = v96->value;
    v121 = v96->path;
    v122 = v96->spath;
    v123 = v96->domain;
    v97->next = v96->next;
    v97->name = v119;
    v97->value = value;
    v97->path = v121;
    v97->spath = v122;
    v97->domain = v123;
    expires_high = HIDWORD(v96->expires);
    v125 = *(_DWORD *)&v96->tailmatch;
    v126 = v96->creationtime;
    v127 = *(_DWORD *)&v96->prefix;
    v128 = *((_DWORD *)&v96->prefix + 1);
    LODWORD(v97->expires) = v96->expires;
    HIDWORD(v97->expires) = expires_high;
    *(_DWORD *)&v97->tailmatch = v125;
    v97->creationtime = v126;
    *(_DWORD *)&v97->prefix = v127;
    *((_DWORD *)&v97->prefix + 1) = v128;
    v129 = v148;
    (*v118)(v96);
    v16 = v97;
  }
  else
  {
    v129 = v94;
  }
  if ( v129 )
  {
    v130 = !cookies->running;
    if ( cookies->running )
      v130 = (*((_BYTE *)&v129->set + 1337) & 0x20) == 0;
    if ( !v130 )
    {
      v131 = "Added";
      if ( (v98 & 1) != 0 )
        v131 = "Replaced";
      Curl_infof(
        v129,
        "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
        v131,
        v16->name,
        v16->value,
        v16->domain,
        v16->path,
        v16->expires);
    }
  }
  if ( (v98 & 1) == 0 )
  {
    if ( v99 )
    {
      v99->next = v16;
      v132 = cookies;
    }
    else
    {
      v132 = cookies;
      cookies->cookies[(_DWORD)v149] = v16;
    }
    ++v132->numcookies;
  }
  expires = v16->expires;
  if ( expires && expires < cookies->next_expiration )
    cookies->next_expiration = expires;
  return v16;
}
