Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  Cookie *v11; // r12
  time_t v12; // rax
  __int64 v13; // rax
  const char *v14; // r15
  char *i; // rbx
  char v16; // r12
  size_t v17; // rax
  size_t v18; // rcx
  unsigned __int64 v19; // rbp
  char v20; // al
  size_t v21; // r14
  size_t v22; // rax
  size_t v23; // rdx
  size_t v24; // r14
  size_t v25; // r13
  const char *v26; // rax
  char v27; // cl
  size_t v28; // r13
  char v29; // r15
  const char *v30; // r15
  __int64 v31; // rcx
  char v32; // dl
  __int64 v33; // rax
  char *v34; // rax
  __int64 v35; // rax
  __int64 v36; // rax
  const char *name; // rbx
  char *value; // rbp
  char v39; // al
  char *v40; // rdi
  __int64 *v41; // rbx
  int v42; // eax
  int v43; // eax
  const char *v44; // rbx
  size_t v45; // r13
  _BYTE *v46; // rax
  const char *v47; // rbp
  char is_ipnum; // r15
  const char *v49; // rdi
  __int64 v50; // rax
  __int64 v51; // rax
  char *v52; // rax
  char v53; // cl
  __int64 v54; // rax
  char *v55; // rax
  char *v56; // rax
  char *v57; // rax
  const char *v58; // r13
  int v59; // ebp
  char v60; // r14
  __int64 v61; // rax
  const char *v62; // rax
  char *v63; // rax
  __int64 v64; // rax
  __int64 v65; // rax
  __int64 v66; // rbp
  __int64 v67; // rax
  char *v68; // rax
  __int64 v69; // rax
  _BOOL4 v70; // ebp
  char v71; // al
  Curl_easy *v72; // r15
  char v73; // bl
  const char *v74; // rbp
  __int64 v75; // rax
  char *v76; // rax
  char v77; // r14
  char *v78; // rax
  signed __int64 v79; // rbx
  char *v80; // rax
  size_t v81; // rbx
  char *v82; // rax
  unsigned __int8 prefix; // al
  CookieInfo *v84; // rbx
  bool running; // al
  int v86; // eax
  size_t v87; // r13
  Cookie *next; // rax
  Cookie *v89; // r13
  char v90; // r14
  Cookie *v91; // rbp
  char *v92; // rdi
  char *v93; // rsi
  const char *spath; // r15
  char *v95; // rbx
  char *v96; // rax
  size_t v97; // rax
  char *v98; // rdi
  char *v99; // rsi
  bool v100; // zf
  char *v101; // rdi
  char *v102; // rsi
  const char *v103; // rdi
  const char *v105; // rdx
  Cookie **p_next; // rax
  curl_off_t expires; // rax
  Cookie *v108; // rdi
  Cookie *v109; // [rsp+0h] [rbp-108h]
  char *s; // [rsp+8h] [rbp-100h]
  void *sa; // [rsp+8h] [rbp-100h]
  Curl_easy *v113; // [rsp+10h] [rbp-F8h]
  CookieInfo *cookies; // [rsp+18h] [rbp-F0h]
  bool v116; // [rsp+2Ch] [rbp-DCh]
  char v117; // [rsp+30h] [rbp-D8h]
  __int64 *p_expires; // [rsp+38h] [rbp-D0h]
  time_t v119; // [rsp+40h] [rbp-C8h]
  __int64 v120; // [rsp+48h] [rbp-C0h]
  char *dest[23]; // [rsp+50h] [rbp-B8h] BYREF

  v11 = 0LL;
  v12 = time(0LL);
  if ( data->req.setcookies > 0x31u )
    return v11;
  v119 = v12;
  v13 = Curl_ccalloc(1LL, 72LL);
  if ( !v13 )
    return 0LL;
  v11 = (Cookie *)v13;
  v109 = (Cookie *)v13;
  if ( !httpheader )
  {
    dest[0] = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 10;
      v11->httponly = 1;
    }
    if ( *lineptr != 35 )
    {
      v55 = strchr(lineptr, 13);
      if ( v55 )
        *v55 = 0;
      v116 = noexpire;
      cookies = c;
      v56 = strchr(lineptr, 10);
      if ( v56 )
        *v56 = 0;
      v57 = strtok_r(lineptr, "\t", dest);
      if ( !v57 )
        goto LABEL_260;
      v58 = v57;
      v59 = 0;
      v60 = 0;
      do
      {
        switch ( v59 )
        {
          case 0:
            if ( *v58 == 46 )
              ++v58;
            v61 = Curl_cstrdup(v58);
            v109->domain = (char *)v61;
            if ( !v61 )
              v60 = 1;
            v59 = 0;
            break;
          case 1:
            v109->tailmatch = (unsigned int)curl_strequal(v58, "TRUE") != 0;
            v59 = 1;
            break;
          case 2:
            if ( !strcmp("TRUE", v58) || !strcmp("FALSE", v58) )
            {
              v66 = Curl_cstrdup("/");
              v109->path = (char *)v66;
              v67 = Curl_cstrdup("/");
              if ( !v67 )
                v60 = 1;
              v109->spath = (char *)v67;
              if ( !v66 )
                v60 = 1;
              goto LABEL_159;
            }
            v62 = (const char *)Curl_cstrdup(v58);
            v109->path = (char *)v62;
            v59 = 2;
            if ( v62 )
            {
              v63 = sanitize_cookie_path(v62);
              v109->spath = v63;
              if ( !v63 )
                v60 = 1;
            }
            else
            {
              v60 = 1;
            }
            break;
          case 3:
LABEL_159:
            v109->secure = 0;
            v59 = 3;
            if ( (unsigned int)curl_strequal(v58, "TRUE") )
            {
              if ( !secure && !c->running )
                goto LABEL_163;
              v109->secure = 1;
            }
            break;
          case 4:
            if ( (unsigned int)curlx_strtoofft(v58, 0LL, 10LL, &v11->expires) )
              v60 = 1;
            v59 = 4;
            break;
          case 5:
            v64 = Curl_cstrdup(v58);
            v109->name = (char *)v64;
            v59 = 5;
            if ( v64 )
            {
              if ( (unsigned int)curl_strnequal("__Secure-", v64, 9LL) )
              {
                v109->prefix |= 1u;
              }
              else if ( (unsigned int)curl_strnequal("__Host-", v109->name, 7LL) )
              {
                v109->prefix |= 2u;
              }
            }
            else
            {
LABEL_163:
              v60 = 1;
            }
            break;
          case 6:
            v65 = Curl_cstrdup(v58);
            v109->value = (char *)v65;
            if ( !v65 )
              v60 = 1;
            v59 = 6;
            break;
          default:
            break;
        }
        v68 = strtok_r(0LL, "\t", dest);
        ++v59;
        if ( !v68 )
          break;
        v58 = v68;
      }
      while ( (v60 & 1) == 0 );
      if ( v59 == 6 )
      {
        v69 = Curl_cstrdup(&L_str_22);
        v11 = v109;
        v109->value = (char *)v69;
        v100 = v69 == 0;
        v70 = v69 == 0;
        v71 = v60;
        v60 = 1;
        if ( !v100 )
          v60 = v71;
        v59 = v70 ^ 7;
      }
      else
      {
        v11 = v109;
      }
      if ( (v60 & 1) != 0 || v59 != 7 )
        goto LABEL_260;
      v72 = data;
      goto LABEL_203;
    }
LABEL_126:
    Curl_cfree(v11);
    return 0LL;
  }
  if ( strlen(lineptr) > 0x1388 )
    goto LABEL_126;
  v116 = noexpire;
  cookies = c;
  p_expires = &v11->expires;
  v120 = 0x7FFFFFFFFFFFFFFFLL - v119;
  v117 = 0;
  while ( 1 )
  {
    v14 = lineptr + 1;
    for ( i = lineptr; ; ++i )
    {
      v16 = *i;
      if ( *i != 32 && v16 != 9 )
        break;
      ++v14;
    }
    v17 = strcspn(i, ";\t\r\n=");
    if ( !v17 )
    {
      lineptr = i;
      v11 = v109;
      goto LABEL_61;
    }
    v18 = v17;
    lineptr = &i[v17];
    v19 = v17;
    while ( 1 )
    {
      v20 = i[v19 - 1];
      if ( v20 != 32 && v20 != 9 )
        break;
      if ( !--v19 )
      {
        v19 = 0LL;
        break;
      }
    }
    if ( *lineptr == 61 )
      break;
    v28 = 0LL;
    v29 = 0;
    s = 0LL;
LABEL_27:
    if ( v19 > 0xFFE || v28 > 0xFFE || v19 + v28 >= 0x1001 )
    {
      freecookie(v109);
      if ( (*((_BYTE *)&data->set + 2238) & 0x10) == 0 )
        return 0LL;
      v11 = 0LL;
      Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v19, v28);
      return v11;
    }
    v100 = v16 == 95;
    v11 = v109;
    if ( v100 && v19 >= 7 && i[1] == 95 )
    {
      if ( (unsigned int)curl_strnequal("__Secure-", i, 9LL) )
      {
        v109->prefix |= 1u;
      }
      else if ( (unsigned int)curl_strnequal("__Host-", i, 7LL) )
      {
        v109->prefix |= 2u;
      }
    }
    if ( !v109->name )
    {
      if ( !v29 )
        goto LABEL_260;
      Curl_cfree(0LL);
      v35 = Curl_memdup(i, v19 + 1);
      v109->name = (char *)v35;
      if ( v35 )
        *(_BYTE *)(v35 + v19) = 0;
      Curl_cfree(v109->value);
      v36 = Curl_memdup(s, v28 + 1);
      v109->value = (char *)v36;
      if ( v36 )
        *(_BYTE *)(v36 + v28) = 0;
      name = v109->name;
      if ( !name )
        goto LABEL_260;
      value = v109->value;
      if ( !value )
        goto LABEL_260;
      if ( value[strcspn(v109->value, &invalid_octets_badoctets)] || name[strcspn(name, &invalid_octets_badoctets)] )
      {
        if ( (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
        goto LABEL_260;
      }
      goto LABEL_61;
    }
    if ( !v28 )
    {
      if ( v19 == 8 )
      {
        if ( (unsigned int)curl_strnequal("httponly", i, 8LL) )
        {
          v109->httponly = 1;
          goto LABEL_61;
        }
      }
      else if ( v19 == 6 && (unsigned int)curl_strnequal("secure", i, 6LL) )
      {
        if ( !secure && c->running )
          goto LABEL_260;
        v109->secure = 1;
        goto LABEL_61;
      }
      if ( !v29 )
        goto LABEL_61;
    }
    if ( v19 == 7 )
    {
      if ( !(unsigned int)curl_strnequal("version", i, 7LL) )
      {
        if ( (unsigned int)curl_strnequal("max-age", i, 7LL) )
        {
          v40 = s + 1;
          if ( *s != 34 )
            v40 = s;
          v41 = p_expires;
          v42 = curlx_strtoofft(v40, 0LL, 10LL, p_expires);
          switch ( v42 )
          {
            case 0:
              v54 = *p_expires;
              if ( !*p_expires )
                goto LABEL_121;
              if ( v120 >= v54 )
              {
                *p_expires = v119 + v54;
                goto LABEL_61;
              }
LABEL_120:
              *p_expires = 0x7FFFFFFFFFFFFFFFLL;
              goto LABEL_61;
            case 2:
              goto LABEL_121;
            case 1:
              goto LABEL_120;
          }
        }
        else if ( (unsigned int)curl_strnequal("expires", i, 7LL) )
        {
          v41 = p_expires;
          if ( v28 <= 0x7F && !*p_expires )
          {
            memcpy(dest, s, v28);
            *((_BYTE *)dest + v28) = 0;
            v50 = Curl_getdate_capped(dest);
            *p_expires = v50;
            if ( v50 )
            {
              if ( v50 < 0 )
                *p_expires = 0LL;
              goto LABEL_61;
            }
LABEL_121:
            *v41 = 1LL;
            goto LABEL_61;
          }
        }
      }
    }
    else
    {
      if ( v19 != 6 )
      {
        if ( v19 == 4 )
        {
          if ( (unsigned int)curl_strnequal("path", i, 4LL) )
          {
            Curl_cfree(v109->path);
            v33 = Curl_memdup(s, v28 + 1);
            v109->path = (char *)v33;
            if ( !v33 )
              goto LABEL_260;
            *(_BYTE *)(v33 + v28) = 0;
            if ( !v109->path )
              goto LABEL_260;
            Curl_cfree(v109->spath);
            v34 = sanitize_cookie_path(v109->path);
            v109->spath = v34;
            if ( !v34 )
              goto LABEL_260;
          }
        }
        goto LABEL_61;
      }
      v43 = curl_strnequal("domain", i, 6LL);
      if ( v28 && v43 )
      {
        v44 = s + 1;
        if ( *s != 46 )
          v44 = s;
        v45 = v28 - (*s == 46);
        if ( v45 == 9 && (unsigned int)curl_strnequal(v44, "localhost", 9LL)
          || (v46 = memchr(v44, 46, v45)) != 0LL && (unsigned __int64)(&v44[v45] - v46) > 1 )
        {
          v49 = domain;
          if ( !domain )
            v49 = v44;
          is_ipnum = Curl_host_is_ipnum(v49);
          if ( !domain )
          {
            domain = 0LL;
LABEL_111:
            Curl_cfree(v109->domain);
            v51 = Curl_memdup(v44, v45 + 1);
            v109->domain = (char *)v51;
            if ( !v51 )
              goto LABEL_260;
            *(_BYTE *)(v51 + v45) = 0;
            v52 = v109->domain;
            v53 = v117;
            if ( !v52 )
              v53 = 1;
            if ( (v52 == 0LL) | (unsigned __int8)is_ipnum )
            {
              v117 = v53;
              if ( !v52 )
                goto LABEL_177;
            }
            else
            {
              v109->tailmatch = 1;
            }
            goto LABEL_61;
          }
          v47 = domain;
          if ( !is_ipnum )
            goto LABEL_100;
LABEL_88:
          domain = v47;
          if ( !strncmp(v44, v47, v45) )
          {
            is_ipnum = 1;
            if ( v45 == strlen(v47) )
              goto LABEL_111;
          }
        }
        else
        {
          v47 = ":";
          if ( (unsigned __int8)Curl_host_is_ipnum(":") )
            goto LABEL_88;
LABEL_100:
          domain = v47;
          if ( cookie_tailmatch(v44, v45, v47) )
          {
            is_ipnum = 0;
            goto LABEL_111;
          }
        }
        v117 = 1;
        if ( (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
          Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v44);
        goto LABEL_61;
      }
    }
    do
    {
      do
LABEL_61:
        v39 = *lineptr++;
      while ( v39 == 32 );
    }
    while ( v39 == 9 );
    if ( v39 != 59 )
    {
LABEL_177:
      v73 = v117;
      if ( (v117 & 1) != 0 )
      {
        v74 = path;
      }
      else
      {
        v74 = path;
        if ( domain )
        {
          if ( !v11->domain )
          {
            v75 = Curl_cstrdup(domain);
            v11->domain = (char *)v75;
            v73 = 1;
            if ( v75 )
              v73 = v117;
          }
        }
      }
      if ( (v73 & 1) == 0 && v74 && !v11->path )
      {
        v76 = strchr(v74, 63);
        v77 = v73;
        v78 = v76 ? (char *)Curl_memrchr(v74, 47LL, v76 - v74) : strrchr(v74, 47);
        if ( v78 )
        {
          v79 = v78 - v74;
          v80 = (char *)Curl_cmalloc(v78 - v74 + 2);
          v11->path = v80;
          if ( !v80 )
            goto LABEL_260;
          v81 = v79 + 1;
          memcpy(v80, path, v81);
          v11->path[v81] = 0;
          v82 = sanitize_cookie_path(v11->path);
          v11->spath = v82;
          v73 = 1;
          if ( v82 )
            v73 = v77;
        }
      }
      if ( (v73 & 1) == 0 && v11->name )
      {
        v72 = data;
        ++data->req.setcookies;
LABEL_203:
        prefix = v11->prefix;
        if ( (prefix & 1) != 0 && !v11->secure )
          goto LABEL_260;
        if ( (prefix & 2) != 0 )
        {
          if ( !v11->secure )
            goto LABEL_260;
          v103 = v11->path;
          if ( !v103 || strcmp(v103, "/") || v11->tailmatch )
            goto LABEL_260;
        }
        v84 = cookies;
        running = cookies->running;
        if ( !running && cookies->newsession && !v11->expires )
          goto LABEL_260;
        v11->livecookie = running;
        v86 = cookies->lastct + 1;
        cookies->lastct = v86;
        v11->creationtime = v86;
        if ( !v116 )
          remove_expired(cookies);
        v87 = cookiehash(v11->domain);
        next = cookies->cookies[v87];
        if ( !next )
        {
          v91 = 0LL;
          v90 = 0;
LABEL_267:
          if ( v72 && v84->running && (*((_BYTE *)&v72->set + 2238) & 0x10) != 0 )
          {
            v105 = "Replaced";
            if ( (v90 & 1) == 0 )
              v105 = "Added";
            Curl_infof(
              v72,
              "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
              v105,
              v11->name,
              v11->value,
              v11->domain,
              v11->path,
              v11->expires);
          }
          if ( (v90 & 1) == 0 )
          {
            p_next = &v84->cookies[v87];
            if ( v91 )
              p_next = &v91->next;
            *p_next = v11;
            ++v84->numcookies;
          }
          expires = v11->expires;
          if ( expires && expires < v84->next_expiration )
            v84->next_expiration = expires;
          return v11;
        }
        sa = (void *)v87;
        v113 = v72;
        v89 = 0LL;
        v11 = 0LL;
        v90 = 0;
        while ( 1 )
        {
          v91 = next;
          if ( !(unsigned int)curl_strequal(next->name, v109->name) )
            goto LABEL_226;
          v92 = v91->domain;
          v93 = v109->domain;
          if ( v92 )
          {
            if ( !v93 || !(unsigned int)curl_strequal(v92, v93) )
              goto LABEL_226;
          }
          else if ( v93 )
          {
            goto LABEL_226;
          }
          spath = v91->spath;
          if ( spath )
          {
            v95 = v109->spath;
            if ( v95 )
            {
              if ( v91->secure && !v109->secure && !secure )
              {
                v96 = strchr(spath + 1, 47);
                v97 = v96 ? v96 - spath : strlen(spath);
                if ( (unsigned int)curl_strnequal(spath, v95, v97) )
                {
                  if ( v113 && (*((_BYTE *)&v113->set + 2238) & 0x10) != 0 )
                    Curl_infof(
                      v113,
                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                      v109->name,
                      v109->domain);
                  v108 = v109;
LABEL_261:
                  freecookie(v108);
                  return 0LL;
                }
              }
            }
          }
LABEL_226:
          if ( !v89 )
          {
            if ( (unsigned int)curl_strequal(v91->name, v109->name) )
            {
              v98 = v91->domain;
              v99 = v109->domain;
              if ( !v98 )
              {
                v100 = v99 == 0LL;
                goto LABEL_233;
              }
              if ( v99 && (unsigned int)curl_strequal(v98, v99) )
              {
                v100 = v91->tailmatch == v109->tailmatch;
LABEL_233:
                if ( v100 )
                  v90 = 1;
              }
              if ( (v90 & 1) != 0 )
              {
                v101 = v91->spath;
                if ( !v101 )
                {
                  v101 = 0LL;
                  goto LABEL_241;
                }
                v102 = v109->spath;
                if ( v102 )
                {
                  if ( (unsigned int)curl_strequal(v101, v102) )
                  {
                    v101 = v91->spath;
                    goto LABEL_241;
                  }
                  v90 = 0;
                }
                else
                {
LABEL_241:
                  v89 = v109;
                  if ( (v101 != 0LL) == (v109->spath == 0LL) )
                    v90 = 0;
                  if ( (v90 & 1) != 0 )
                  {
                    if ( v109->livecookie )
                    {
                      v11 = v91;
                    }
                    else
                    {
                      v11 = v91;
                      if ( v91->livecookie )
                      {
                        v108 = v109;
                        goto LABEL_261;
                      }
                    }
                    goto LABEL_250;
                  }
                }
              }
            }
            v89 = 0LL;
          }
LABEL_250:
          next = v91->next;
          if ( !v91->next )
          {
            if ( v89 )
            {
              v89->next = v11->next;
              v89->creationtime = v11->creationtime;
              Curl_cfree(v11->name);
              Curl_cfree(v11->value);
              Curl_cfree(v11->domain);
              Curl_cfree(v11->path);
              Curl_cfree(v11->spath);
              qmemcpy(v11, v89, sizeof(Cookie));
              Curl_cfree(v89);
            }
            else
            {
              v11 = v109;
            }
            v72 = v113;
            v84 = cookies;
            v87 = (size_t)sa;
            goto LABEL_267;
          }
        }
      }
LABEL_260:
      v108 = v11;
      goto LABEL_261;
    }
  }
  s = &i[v18 + 1];
  v21 = v18;
  v22 = strcspn(s, ";\r\n");
  v23 = v21;
  v24 = v22 + v21;
  if ( v22 )
  {
    v25 = v22;
    v26 = &v14[v24];
    while ( 1 )
    {
      v27 = *(v26 - 1);
      if ( v27 != 32 && v27 != 9 )
        break;
      --v25;
      --v26;
      if ( !v25 )
        goto LABEL_22;
    }
    v30 = &v14[v23];
    v31 = 0LL;
    while ( 1 )
    {
      v32 = v30[v31];
      if ( v32 != 32 && v32 != 9 )
        break;
      if ( v25 == ++v31 )
      {
        v28 = 0LL;
        s = (char *)v26;
        goto LABEL_23;
      }
    }
    v28 = v25 - v31;
    s = (char *)&v30[v31];
  }
  else
  {
LABEL_22:
    v28 = 0LL;
  }
LABEL_23:
  if ( !memchr(s, 9, v28) )
  {
    lineptr = &i[v24 + 1];
    v29 = 1;
    goto LABEL_27;
  }
  freecookie(v109);
  if ( (*((_BYTE *)&data->set + 2238) & 0x10) == 0 )
    return 0LL;
  v11 = 0LL;
  Curl_infof(data, "cookie contains TAB, dropping");
  return v11;
}
