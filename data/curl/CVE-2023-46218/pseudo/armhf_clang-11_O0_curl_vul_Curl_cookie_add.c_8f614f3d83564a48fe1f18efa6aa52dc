Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v8; // r0
  char is_ipnum; // r0
  CURLofft v10; // r0
  int v11; // r0
  char *v12; // r0
  char *v13; // r0
  char *v14; // r0
  char *v15; // r0
  bool v16; // r0
  char *v17; // r0
  char *v18; // r0
  char *v19; // r0
  char *v20; // r0
  char *v21; // r0
  char *v22; // r0
  char *v23; // r0
  int v24; // r1
  int v25; // r0
  Cookie *v26; // r0
  curl_off_t *p_expires; // r1
  char *name; // r3
  char *value; // r4
  char *v30; // r5
  char *spath; // r12
  char *v32; // lr
  char *v33; // r3
  char *v34; // r4
  char *v35; // r5
  char *v36; // r12
  char *v37; // lr
  const char *v38; // r3
  int expires; // r1
  CookieInfo *v40; // r2
  void (__fastcall **v42)(char *); // [sp+1Ch] [bp-1B4h]
  bool v43; // [sp+40h] [bp-190h]
  bool v44; // [sp+54h] [bp-17Ch]
  bool v45; // [sp+58h] [bp-178h]
  bool v46; // [sp+78h] [bp-158h]
  bool v47; // [sp+7Ch] [bp-154h]
  bool v48; // [sp+80h] [bp-150h]
  bool v49; // [sp+84h] [bp-14Ch]
  bool v50; // [sp+88h] [bp-148h]
  bool v51; // [sp+8Ch] [bp-144h]
  bool v52; // [sp+90h] [bp-140h]
  bool v53; // [sp+94h] [bp-13Ch]
  char *v54; // [sp+B8h] [bp-118h]
  size_t v55; // [sp+BCh] [bp-114h]
  char v56; // [sp+C3h] [bp-10Dh]
  int i; // [sp+C4h] [bp-10Ch]
  char *save_ptr; // [sp+C8h] [bp-108h] BYREF
  char *v59; // [sp+CCh] [bp-104h]
  char *s2; // [sp+D0h] [bp-100h]
  size_t n; // [sp+D4h] [bp-FCh]
  char *v62; // [sp+D8h] [bp-F8h]
  char *v63; // [sp+DCh] [bp-F4h]
  char dest[128]; // [sp+E0h] [bp-F0h] BYREF
  const char *maxage; // [sp+160h] [bp-70h]
  CURLofft offt; // [sp+164h] [bp-6Ch]
  bool is_ip; // [sp+16Bh] [bp-65h]
  const char *valuep; // [sp+16Ch] [bp-64h]
  const char *namep; // [sp+170h] [bp-60h]
  bool sep; // [sp+176h] [bp-5Ah]
  bool done; // [sp+177h] [bp-59h]
  size_t nlen; // [sp+178h] [bp-58h]
  size_t vlen; // [sp+17Ch] [bp-54h]
  size_t linelength; // [sp+180h] [bp-50h]
  const char *ptr; // [sp+184h] [bp-4Ch]
  size_t myhash; // [sp+188h] [bp-48h]
  bool badcookie; // [sp+18Eh] [bp-42h]
  bool replace_old; // [sp+18Fh] [bp-41h]
  time_t now; // [sp+190h] [bp-40h]
  Cookie *replace_clist; // [sp+194h] [bp-3Ch]
  Cookie *replace_co; // [sp+198h] [bp-38h]
  Cookie *lastc; // [sp+19Ch] [bp-34h]
  Cookie *co; // [sp+1A0h] [bp-30h]
  Cookie *clist; // [sp+1A4h] [bp-2Ch]
  bool securea; // [sp+1A9h] [bp-27h]
  bool noexpirea; // [sp+1AAh] [bp-26h]
  bool httpheadera; // [sp+1ABh] [bp-25h]
  CookieInfo *ca; // [sp+1ACh] [bp-24h]
  Curl_easy *dataa; // [sp+1B0h] [bp-20h]

  dataa = data;
  ca = c;
  httpheadera = httpheader;
  noexpirea = noexpire;
  securea = secure;
  lastc = 0;
  replace_co = 0;
  replace_clist = 0;
  now = time(0u);
  replace_old = 0;
  badcookie = 0;
  if ( dataa->req.setcookies >= 0x32u )
    return 0;
  co = (Cookie *)((int (__fastcall *)(int, int))*Curl_ccalloc)(1, 48);
  if ( !co )
    return 0;
  if ( !httpheadera )
  {
    save_ptr = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      lineptr += 0xA;
      co->httponly = 1;
    }
    if ( *lineptr == 35 )
      goto LABEL_7;
    s2 = strchr(lineptr, 13);
    if ( s2 )
      *s2 = 0;
    s2 = strchr(lineptr, 10);
    if ( s2 )
      *s2 = 0;
    v59 = strtok_r((char *)lineptr, "\t", &save_ptr);
    s2 = v59;
    for ( i = 0; ; ++i )
    {
      v43 = 0;
      if ( s2 )
        v43 = !badcookie;
      if ( !v43 )
        break;
      switch ( i )
      {
        case 0:
          if ( *s2 == 46 )
            ++s2;
          v15 = (char *)((int (__fastcall *)(char *))*Curl_cstrdup)(s2);
          co->domain = v15;
          if ( !co->domain )
            badcookie = 1;
          break;
        case 1:
          v16 = curl_strequal(s2, "TRUE") != 0;
          co->tailmatch = v16;
          break;
        case 2:
          if ( !strcmp("TRUE", s2) || !strcmp("FALSE", s2) )
          {
            v19 = (char *)((int (__fastcall *)(const char *))*Curl_cstrdup)("/");
            co->path = v19;
            if ( !co->path )
              badcookie = 1;
            v20 = (char *)((int (__fastcall *)(const char *))*Curl_cstrdup)("/");
            co->spath = v20;
            if ( !co->spath )
              badcookie = 1;
            ++i;
            goto LABEL_201;
          }
          v17 = (char *)((int (__fastcall *)(char *))*Curl_cstrdup)(s2);
          co->path = v17;
          if ( co->path )
          {
            v18 = sanitize_cookie_path(co->path);
            co->spath = v18;
            if ( !co->spath )
              badcookie = 1;
          }
          else
          {
            badcookie = 1;
          }
          break;
        case 3:
LABEL_201:
          co->secure = 0;
          if ( curl_strequal(s2, "TRUE") )
          {
            if ( securea || ca->running )
              co->secure = 1;
            else
              badcookie = 1;
          }
          break;
        case 4:
          if ( curlx_strtoofft(s2, 0, 10, &co->expires) )
            badcookie = 1;
          break;
        case 5:
          v21 = (char *)((int (__fastcall *)(char *))*Curl_cstrdup)(s2);
          co->name = v21;
          if ( co->name )
          {
            if ( curl_strnequal("__Secure-", co->name, 9) )
            {
              co->prefix |= 1u;
            }
            else if ( curl_strnequal("__Host-", co->name, 7) )
            {
              co->prefix |= 2u;
            }
          }
          else
          {
            badcookie = 1;
          }
          break;
        case 6:
          v22 = (char *)((int (__fastcall *)(char *))*Curl_cstrdup)(s2);
          co->value = v22;
          if ( !co->value )
            badcookie = 1;
          break;
        default:
          break;
      }
      s2 = strtok_r(0u, "\t", &save_ptr);
    }
    if ( i == 6 )
    {
      v23 = (char *)((int (__fastcall *)(void *))*Curl_cstrdup)(&L_str_22);
      co->value = v23;
      if ( co->value )
        i = 7;
      else
        badcookie = 1;
    }
    if ( !badcookie && i != 7 )
      badcookie = 1;
    if ( !badcookie )
      goto LABEL_229;
LABEL_288:
    freecookie(co);
    return 0;
  }
  linelength = strlen(lineptr);
  if ( linelength >= 0x1389 )
  {
LABEL_7:
    ((void (__fastcall *)(Cookie *))*Curl_cfree)(co);
    return 0;
  }
  for ( ptr = lineptr; ; ++ptr )
  {
    while ( 1 )
    {
      v53 = 0;
      if ( *ptr )
      {
        v52 = 1;
        if ( *ptr != 32 )
          v52 = *ptr == 9;
        v53 = v52;
      }
      if ( !v53 )
        break;
      ++ptr;
    }
    nlen = strcspn(ptr, ";\t\r\n=");
    if ( !nlen )
      goto LABEL_142;
    done = 0;
    sep = 0;
    namep = ptr;
    ptr += nlen;
    while ( 1 )
    {
      v51 = 0;
      if ( nlen )
      {
        v50 = 1;
        if ( namep[nlen - 1] != 32 )
          v50 = namep[nlen - 1] == 9;
        v51 = v50;
      }
      if ( !v51 )
        break;
      --nlen;
    }
    if ( *ptr == 61 )
    {
      vlen = strcspn(++ptr, ";\r\n");
      valuep = ptr;
      sep = 1;
      ptr += vlen;
      while ( 1 )
      {
        v49 = 0;
        if ( vlen )
        {
          v48 = 1;
          if ( valuep[vlen - 1] != 32 )
            v48 = valuep[vlen - 1] == 9;
          v49 = v48;
        }
        if ( !v49 )
          break;
        --vlen;
      }
      while ( 1 )
      {
        v47 = 0;
        if ( vlen )
        {
          v46 = 1;
          if ( *valuep != 32 )
            v46 = *valuep == 9;
          v47 = v46;
        }
        if ( !v47 )
          break;
        ++valuep;
        --vlen;
      }
      if ( memchr(valuep, 9, vlen) )
      {
        freecookie(co);
        if ( dataa && ((*((unsigned __int8 *)&dataa->set + 1338) >> 4) & 1) != 0 )
          Curl_infof(dataa, "cookie contains TAB, dropping");
        return 0;
      }
    }
    else
    {
      valuep = 0;
      vlen = 0;
    }
    if ( nlen > 0xFFE || vlen > 0xFFE || nlen + vlen > 0x1000 )
    {
      freecookie(co);
      if ( dataa && ((*((unsigned __int8 *)&dataa->set + 1338) >> 4) & 1) != 0 )
        Curl_infof(dataa, "oversized cookie dropped, name/val %zu + %zu bytes", nlen, vlen);
      return 0;
    }
    if ( nlen >= 7 && *namep == 95 && namep[1] == 95 )
    {
      if ( curl_strnequal("__Secure-", namep, 9) )
      {
        co->prefix |= 1u;
      }
      else if ( curl_strnequal("__Host-", namep, 7) )
      {
        co->prefix |= 2u;
      }
    }
    if ( !co->name )
      break;
    if ( !vlen )
    {
      done = 1;
      if ( nlen == 6 && curl_strnequal("secure", namep, 6) )
      {
        if ( !securea && ca->running )
        {
          badcookie = 1;
          goto LABEL_150;
        }
        co->secure = 1;
      }
      else if ( nlen == 8 && curl_strnequal("httponly", namep, 8) )
      {
        co->httponly = 1;
      }
      else if ( sep )
      {
        done = 0;
      }
    }
LABEL_83:
    if ( !done )
    {
      if ( nlen == 4 && curl_strnequal("path", namep, 4) )
      {
        strstore(&co->path, valuep, vlen);
        if ( !co->path )
        {
          badcookie = 1;
          goto LABEL_150;
        }
        ((void (__fastcall *)(char *))*Curl_cfree)(co->spath);
        v8 = sanitize_cookie_path(co->path);
        co->spath = v8;
        if ( !co->spath )
        {
          badcookie = 1;
          goto LABEL_150;
        }
      }
      else if ( nlen == 6 && curl_strnequal("domain", namep, 6) && vlen )
      {
        if ( *valuep == 46 )
        {
          ++valuep;
          --vlen;
        }
        if ( bad_domain(valuep, vlen) )
          domain = ":";
        if ( domain )
          is_ipnum = Curl_host_is_ipnum(domain);
        else
          is_ipnum = Curl_host_is_ipnum(valuep);
        is_ip = is_ipnum;
        if ( !domain
          || is_ip && !strncmp(valuep, domain, vlen) && vlen == strlen(domain)
          || !is_ip && cookie_tailmatch(valuep, vlen, domain) )
        {
          strstore(&co->domain, valuep, vlen);
          if ( !co->domain )
          {
            badcookie = 1;
            goto LABEL_150;
          }
          if ( !is_ip )
            co->tailmatch = 1;
        }
        else
        {
          badcookie = 1;
          if ( dataa && ((*((unsigned __int8 *)&dataa->set + 1338) >> 4) & 1) != 0 )
            Curl_infof(dataa, "skipped cookie with bad tailmatch domain: %s", valuep);
        }
      }
      else if ( nlen != 7 || !curl_strnequal("version", namep, 7) )
      {
        if ( nlen == 7 && curl_strnequal("max-age", namep, 7) )
        {
          maxage = valuep;
          if ( *valuep == 34 )
            v10 = curlx_strtoofft(maxage + 1, 0, 10, &co->expires);
          else
            v10 = curlx_strtoofft(maxage, 0, 10, &co->expires);
          offt = v10;
          if ( v10 )
          {
            if ( v10 == CURL_OFFT_FLOW )
            {
              co->expires = 0x7FFFFFFFFFFFFFFFLL;
            }
            else if ( v10 == CURL_OFFT_INVAL )
            {
              co->expires = 1LL;
            }
          }
          else if ( co->expires )
          {
            if ( __SPAIR64__(0x7FFFFFFF - (now >> 0x1F), ~now) < co->expires )
              co->expires = 0x7FFFFFFFFFFFFFFFLL;
            else
              co->expires += now;
          }
          else
          {
            co->expires = 1LL;
          }
        }
        else if ( nlen == 7 && curl_strnequal("expires", namep, 7) && !co->expires && vlen <= 0x7F )
        {
          memcpy(dest, valuep, vlen);
          dest[vlen] = 0;
          v11 = Curl_getdate_capped(dest);
          co->expires = v11;
          if ( co->expires )
          {
            if ( SHIDWORD(co->expires) <= -1 )
              co->expires = 0LL;
          }
          else
          {
            co->expires = 1LL;
          }
        }
      }
    }
    while ( 1 )
    {
LABEL_142:
      v45 = 0;
      if ( *ptr )
      {
        v44 = 1;
        if ( *ptr != 32 )
          v44 = *ptr == 9;
        v45 = v44;
      }
      if ( !v45 )
        break;
      ++ptr;
    }
    if ( *ptr != 59 )
      goto LABEL_150;
  }
  if ( !sep )
  {
    badcookie = 1;
    goto LABEL_150;
  }
  strstore(&co->name, namep, nlen);
  strstore(&co->value, valuep, vlen);
  done = 1;
  if ( !co->name || !co->value )
  {
    badcookie = 1;
    goto LABEL_150;
  }
  if ( !invalid_octets(co->value) && !invalid_octets(co->name) )
    goto LABEL_83;
  if ( dataa && ((*((unsigned __int8 *)&dataa->set + 1338) >> 4) & 1) != 0 )
    Curl_infof(dataa, "invalid octets in name/value, cookie dropped");
  badcookie = 1;
LABEL_150:
  if ( !badcookie && !co->domain )
  {
    if ( domain )
    {
      v12 = (char *)((int (__fastcall *)(const char *))*Curl_cstrdup)(domain);
      co->domain = v12;
      if ( !co->domain )
        badcookie = 1;
    }
  }
  if ( !badcookie && !co->path && path )
  {
    v63 = strchr(path, 63);
    v62 = v63 ? (char *)Curl_memrchr(path, 47, v63 - path) : strrchr(path, 47);
    if ( v62 )
    {
      n = v62 - path + 1;
      v13 = (char *)((int (__fastcall *)(int))*Curl_cmalloc)(v62 - path + 2);
      co->path = v13;
      if ( co->path )
      {
        memcpy(co->path, path, n);
        co->path[n] = 0;
        v14 = sanitize_cookie_path(co->path);
        co->spath = v14;
        if ( !co->spath )
          badcookie = 1;
      }
      else
      {
        badcookie = 1;
      }
    }
  }
  if ( badcookie || !co->name )
  {
    freecookie(co);
    return 0;
  }
  ++dataa->req.setcookies;
LABEL_229:
  if ( (co->prefix & 1) != 0 && !co->secure
    || (co->prefix & 2) != 0 && (!co->secure || !co->path || strcmp(co->path, "/") || co->tailmatch)
    || !ca->running && ca->newsession && !co->expires )
  {
    goto LABEL_288;
  }
  co->livecookie = ca->running;
  v24 = ca->lastct + 1;
  ca->lastct = v24;
  co->creationtime = v24;
  if ( !noexpirea )
    remove_expired(ca);
  myhash = cookiehash(co->domain);
  for ( clist = ca->cookies[myhash]; clist; clist = clist->next )
  {
    if ( curl_strequal(clist->name, co->name) )
    {
      v56 = 0;
      if ( clist->domain && co->domain )
      {
        if ( curl_strequal(clist->domain, co->domain) )
          v56 = 1;
      }
      else if ( !clist->domain && !co->domain )
      {
        v56 = 1;
      }
      if ( (v56 & 1) != 0 && clist->spath && co->spath && clist->secure && !co->secure && !securea )
      {
        v54 = strchr((const char *)clist->spath + 1, 47);
        if ( v54 )
        {
          v25 = curl_strnequal(clist->spath, co->spath, v54 - clist->spath);
        }
        else
        {
          v55 = strlen(clist->spath);
          v25 = curl_strnequal(clist->spath, co->spath, v55);
        }
        if ( v25 )
        {
          if ( dataa && ((*((unsigned __int8 *)&dataa->set + 1338) >> 4) & 1) != 0 )
            Curl_infof(
              dataa,
              "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
              co->name,
              co->domain);
          goto LABEL_288;
        }
      }
    }
    if ( !replace_co && curl_strequal(clist->name, co->name) )
    {
      if ( clist->domain && co->domain )
      {
        if ( curl_strequal(clist->domain, co->domain) && clist->tailmatch == co->tailmatch )
          replace_old = 1;
      }
      else if ( !clist->domain && !co->domain )
      {
        replace_old = 1;
      }
      if ( replace_old )
      {
        if ( clist->spath && co->spath && !curl_strequal(clist->spath, co->spath) )
        {
          replace_old = 0;
        }
        else if ( (clist->spath == 0) != (co->spath == 0) )
        {
          replace_old = 0;
        }
      }
      if ( replace_old && !co->livecookie && clist->livecookie )
        goto LABEL_288;
      if ( replace_old )
      {
        replace_co = co;
        replace_clist = clist;
      }
    }
    lastc = clist;
  }
  if ( replace_co )
  {
    co = replace_co;
    clist = replace_clist;
    replace_co->next = replace_clist->next;
    co->creationtime = clist->creationtime;
    v42 = (void (__fastcall **)(char *))Curl_cfree;
    ((void (__fastcall *)(char *))*Curl_cfree)(clist->name);
    (*v42)(clist->value);
    (*v42)(clist->domain);
    (*v42)(clist->path);
    (*v42)(clist->spath);
    v26 = clist;
    name = co->name;
    value = co->value;
    v30 = co->path;
    spath = co->spath;
    v32 = co->domain;
    p_expires = &co->expires;
    clist->next = co->next;
    v26->name = name;
    v26->value = value;
    v26->path = v30;
    v26->spath = spath;
    v26->domain = v32;
    v26 = (Cookie *)((char *)v26 + 24);
    v33 = (char *)*((_DWORD *)p_expires + 1);
    v34 = (char *)*((_DWORD *)p_expires + 2);
    v35 = (char *)*((_DWORD *)p_expires + 3);
    v36 = (char *)*((_DWORD *)p_expires + 4);
    v37 = (char *)*((_DWORD *)p_expires + 5);
    v26->next = *(Cookie **)p_expires;
    v26->name = v33;
    v26->value = v34;
    v26->path = v35;
    v26->spath = v36;
    v26->domain = v37;
    (*v42)((char *)co);
    co = clist;
  }
  if ( ca->running && dataa && ((*((unsigned __int8 *)&dataa->set + 1338) >> 4) & 1) != 0 )
  {
    v38 = "Added";
    if ( replace_old )
      v38 = "Replaced";
    Curl_infof(
      dataa,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
      v38,
      co->name,
      co->value,
      co->domain,
      co->path,
      co->expires);
  }
  if ( !replace_old )
  {
    if ( lastc )
      lastc->next = co;
    else
      ca->cookies[myhash] = co;
    ++ca->numcookies;
  }
  if ( co->expires && co->expires < ca->next_expiration )
  {
    expires = co->expires;
    v40 = ca;
    HIDWORD(ca->next_expiration) = HIDWORD(co->expires);
    LODWORD(v40->next_expiration) = expires;
  }
  return co;
}
