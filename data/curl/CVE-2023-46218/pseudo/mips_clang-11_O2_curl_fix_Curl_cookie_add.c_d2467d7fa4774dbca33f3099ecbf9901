Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  int v16; // $s3
  time_t v17; // $v0
  int v18; // $v0
  int v19; // $s1
  char *k; // $s5
  char *i; // $s1
  int v22; // $s6
  size_t v23; // $v0
  size_t v24; // $s4
  char *v25; // $s7
  unsigned int v26; // $s2
  int v27; // $v0
  const char *v28; // $s7
  size_t v29; // $v0
  size_t v30; // $a3
  unsigned int v31; // $a2
  const char *v32; // $fp
  int v33; // $v1
  char *v34; // $a0
  int j; // $v1
  int v36; // $a2
  size_t v37; // $s1
  unsigned int v38; // $v1
  int v39; // $s4
  unsigned int v40; // $s7
  unsigned int v41; // $s7
  int v42; // $v0
  unsigned int v43; // $s6
  int v44; // $v0
  const char *v45; // $v0
  char *v46; // $s2
  size_t v47; // $s4
  char *v48; // $v1
  unsigned int v49; // $s6
  const char *v50; // $v0
  const char *v51; // $s2
  int v52; // $v1
  int v53; // $v0
  size_t v54; // $s2
  int v55; // $v0
  unsigned int v56; // $s2
  int v57; // $v0
  int v58; // $v0
  size_t v59; // $s2
  _BYTE *v60; // $v0
  const char *v61; // $s5
  int v62; // $s4
  int v63; // $v0
  const char *v64; // $a0
  int v65; // $v0
  size_t v66; // $v0
  const char *v67; // $v1
  size_t v68; // $s5
  size_t v69; // $s6
  int v70; // $v0
  int v71; // $v0
  int v72; // $v0
  int v73; // $v0
  unsigned int v74; // $v1
  _BOOL4 v75; // $a0
  char *v76; // $v0
  char *v77; // $v0
  int v78; // $at
  int v79; // $s0
  time_t v80; // $s2
  int v81; // $s3
  int next_expiration_high; // $v0
  _BOOL4 v83; // $a0
  unsigned int next_expiration; // $v1
  Cookie *v85; // $s1
  Cookie **v86; // $s0
  Cookie *next; // $v0
  Cookie **v88; // $s2
  Cookie *v89; // $s7
  char v90; // $s6
  Cookie *v91; // $s3
  int v92; // $a1
  const char *spath; // $s4
  int v94; // $s5
  char *v95; // $v0
  size_t v96; // $a2
  int v97; // $a1
  int v98; // $at
  bool v99; // dc
  int v100; // $at
  int v101; // $a1
  int v102; // $v0
  char *v103; // $v0
  int v104; // $v0
  const char *v105; // $a0
  Cookie *v106; // $at
  Cookie *v107; // $v0
  Cookie *v108; // $v1
  Cookie *v109; // $a0
  char *v110; // $a1
  char *v111; // $a2
  char *v112; // $a3
  Cookie *v113; // $t0
  Cookie *v114; // $s2
  Cookie **v115; // $s7
  Cookie *v116; // $fp
  Cookie **p_next; // $s1
  Cookie *v118; // $s4
  curl_off_t expires; // $v1
  _BOOL4 v120; // $a1
  int v121; // $at
  _BOOL4 v122; // $a1
  const char *v123; // $a2
  int v124; // $s0
  void *v125; // $v0
  const char *v126; // $v0
  char *v127; // $s2
  size_t v128; // $s4
  char *v129; // $v1
  curl_off_t v130; // $v1
  int v131; // $at
  _BOOL4 v132; // $a1
  int v133; // $v0
  int v135; // [sp+34h] [-BCh]
  int *v136; // [sp+3Ch] [-B4h]
  char v137; // [sp+47h] [-A9h]
  char *v139; // [sp+4Ch] [-A4h]
  Curl_easy *v140; // [sp+50h] [-A0h]
  int v141; // [sp+54h] [-9Ch]
  int v142; // [sp+5Ch] [-94h]
  int v143; // [sp+64h] [-8Ch]
  CookieInfo *v144; // [sp+68h] [-88h]
  char *v145[32]; // [sp+70h] [-80h] BYREF

  v16 = 0;
  v17 = time(0u);
  if ( data->req.setcookies >= 0x32u )
    return (Cookie *)v16;
  v142 = v17;
  v144 = c;
  v18 = Curl_ccalloc(1, 48);
  if ( !v18 )
    return (Cookie *)v16;
  v19 = v18;
  v141 = noexpire;
  k = (char *)lineptr;
  v143 = v18;
  if ( !httpheader )
  {
    v145[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      *(_BYTE *)(v19 + 35) = 1;
      k = (char *)(lineptr + 10);
    }
    if ( *k != 35 )
    {
      v76 = strchr(k, 13);
      if ( v76 )
        *v76 = 0;
      v77 = strchr(k, 10);
      if ( v77 )
        *v77 = 0;
      if ( strtok_r(k, "\t", v145) )
        JUMPOUT(0x1318);
      Curl_cfree(*(_DWORD *)(v19 + 20));
      Curl_cfree(*(_DWORD *)(v19 + 12));
      Curl_cfree(*(_DWORD *)(v19 + 16));
      Curl_cfree(*(_DWORD *)(v19 + 4));
      Curl_cfree(*(_DWORD *)(v19 + 8));
      Curl_cfree(v19);
      return (Cookie *)v16;
    }
LABEL_5:
    Curl_cfree(v19);
    return (Cookie *)v16;
  }
  if ( strlen(lineptr) >= 0x1389 )
    goto LABEL_5;
  v140 = data;
  v135 = 0x7FFFFFFF - (v142 >> 0x1F);
  v136 = (int *)(v19 + 0x18);
  v137 = 0;
  do
  {
    for ( i = k + 1; ; ++i )
    {
      v22 = (unsigned __int8)*k;
      if ( v22 != 32 && v22 != 9 )
        break;
      ++k;
    }
    v23 = strcspn(k, ";\t\r\n=");
    if ( !v23 )
    {
      v25 = k;
      goto LABEL_72;
    }
    v24 = v23;
    v25 = &k[v23];
    v26 = v23;
    while ( 1 )
    {
      v27 = (unsigned __int8)k[v26 - 1];
      if ( v27 != 32 && v27 != 9 )
        break;
      if ( !--v26 )
      {
        v26 = 0;
        break;
      }
    }
    if ( *v25 == 61 )
    {
      v28 = &k[v24 + 1];
      v29 = strcspn(v28, ";\r\n");
      v30 = v24 + v29;
      v31 = 0;
      if ( v29 )
      {
        v32 = &i[v30];
        while ( 1 )
        {
          v33 = *((unsigned __int8 *)v32 - 1);
          if ( v33 != 32 && v33 != 9 )
            break;
          --v29;
          --v32;
          if ( !v29 )
          {
            v37 = v30;
            v32 = v28;
            goto LABEL_38;
          }
        }
        v34 = &i[v24];
        for ( j = 0; j != v29; ++j )
        {
          v36 = (unsigned __int8)v34[j];
          if ( v36 != 32 && v36 != 9 )
          {
            v37 = v30;
            v31 = v29 - j;
            v32 = &v34[j];
            goto LABEL_38;
          }
        }
        v37 = v30;
        v31 = 0;
      }
      else
      {
        v37 = v24 + v29;
        v32 = v28;
      }
LABEL_38:
      v40 = v31;
      if ( ((int (__fastcall *)(const char *, int))memchr)(v32, 9) )
      {
        Curl_cfree(*(_DWORD *)(v143 + 20));
        Curl_cfree(*(_DWORD *)(v143 + 12));
        Curl_cfree(*(_DWORD *)(v143 + 16));
        Curl_cfree(*(_DWORD *)(v143 + 4));
        Curl_cfree(*(_DWORD *)(v143 + 8));
        Curl_cfree(v143);
        v16 = 0;
        if ( (*((_BYTE *)&data->set + 1337) & 4) != 0 )
          ((void (*)(void))Curl_infof)();
        return (Cookie *)v16;
      }
      v39 = 1;
      v38 = v40;
      v25 = &k[v37 + 1];
    }
    else
    {
      v38 = 0;
      v39 = 0;
      v32 = 0;
    }
    if ( v26 >= 0xFFF || v38 >= 0xFFF || v38 + v26 >= 0x1001 )
    {
      Curl_cfree(*(_DWORD *)(v143 + 20));
      Curl_cfree(*(_DWORD *)(v143 + 12));
      Curl_cfree(*(_DWORD *)(v143 + 16));
      Curl_cfree(*(_DWORD *)(v143 + 4));
      Curl_cfree(*(_DWORD *)(v143 + 8));
      Curl_cfree(v143);
      if ( (*((_BYTE *)&data->set + 1337) & 4) != 0 )
        ((void (*)(void))Curl_infof)();
      return 0;
    }
    if ( v22 == 95 && v26 >= 7 && k[1] == 95 )
    {
      v139 = v25;
      v41 = v38;
      if ( curl_strnequal("__Secure-", k, 9) )
      {
        *(_BYTE *)(v143 + 40) |= 1u;
        v38 = v41;
        v25 = v139;
      }
      else
      {
        v42 = curl_strnequal("__Host-", k, 7);
        v38 = v41;
        v25 = v139;
        if ( v42 )
          *(_BYTE *)(v143 + 40) |= 2u;
      }
    }
    if ( *(_DWORD *)(v143 + 4) )
    {
      if ( !v38 )
      {
        if ( v26 == 8 )
        {
          v63 = curl_strnequal("httponly", k, 8);
          v38 = 0;
          if ( v63 )
          {
            *(_BYTE *)(v143 + 35) = 1;
            goto LABEL_72;
          }
        }
        else if ( v26 == 6 )
        {
          v53 = curl_strnequal("secure", k, 6);
          v38 = 0;
          if ( v53 )
          {
            if ( !secure && v144->running )
              goto LABEL_292;
            *(_BYTE *)(v143 + 33) = 1;
            goto LABEL_72;
          }
        }
        if ( !v39 )
          goto LABEL_72;
      }
      if ( v26 == 7 )
      {
        v54 = v38;
        if ( !curl_strnequal("version", k, 7) )
        {
          if ( curl_strnequal("max-age", k, 7) )
          {
            if ( *v32 == 0x22 )
              ++v32;
            v55 = ((int (__fastcall *)(const char *, _DWORD, int, int *))curlx_strtoofft)(v32, 0, 10, v136);
            if ( v55 )
            {
              if ( v55 == 2 )
              {
                v136[1] = 1;
                *v136 = 0;
              }
              else if ( v55 == 1 )
              {
                v136[1] = -1;
                *v136 = 0x7FFFFFFF;
              }
            }
            else
            {
              v73 = *v136;
              v74 = v136[1];
              if ( *(_QWORD *)v136 )
              {
                v75 = v135 >= v73;
                if ( v135 == v73 )
                  v75 = ~v142 >= v74;
                if ( v75 )
                {
                  v136[1] = v74 + v142;
                  *v136 = v73 + (v142 >> 0x1F) + __CFADD__(v74, v142);
                }
                else
                {
                  v136[1] = -1;
                  *v136 = 0x7FFFFFFF;
                }
              }
              else
              {
                v136[1] = 1;
                *v136 = 0;
              }
            }
          }
          else if ( curl_strnequal("expires", k, 7) && v54 < 0x80 && !*(_QWORD *)v136 )
          {
            memcpy(v145, v32, v54);
            *((_BYTE *)v145 + v54) = 0;
            v71 = ((int (__fastcall *)(char **))Curl_getdate_capped)(v145);
            *(_QWORD *)v136 = v71;
            if ( v71 )
            {
              if ( v71 < 0 )
              {
                v136[1] = 0;
                *v136 = 0;
              }
            }
            else
            {
              v136[1] = 1;
              *v136 = 0;
            }
          }
        }
        goto LABEL_72;
      }
      if ( v26 == 6 )
      {
        v56 = v38;
        v57 = curl_strnequal("domain", k, 6);
        if ( !v56 || !v57 )
          goto LABEL_72;
        v58 = *(unsigned __int8 *)v32;
        if ( v58 == 0x2E )
          ++v32;
        v59 = (__PAIR64__(v56, v58 ^ 0x2Eu) - 1) >> 32;
        if ( v59 == 9 && curl_strnequal(v32, "localhost", 9)
          || (v60 = (_BYTE *)memchr(v32, 46, v59)) != 0 && (unsigned int)(&v32[v59] - v60) >= 2 )
        {
          v61 = domain;
          v64 = domain;
          if ( !domain )
            v64 = v32;
          v65 = ((int (__fastcall *)(const char *))Curl_host_is_ipnum)(v64);
          v62 = v65;
          if ( domain )
          {
            if ( !v65 )
              goto LABEL_112;
LABEL_101:
            domain = v61;
            if ( strncmp(v32, v61, v59) )
              goto LABEL_116;
            v62 = 1;
            if ( v59 != strlen(v61) )
              goto LABEL_116;
          }
          else
          {
            domain = 0;
          }
        }
        else
        {
          v61 = ":";
          if ( ((int (__fastcall *)(const char *))Curl_host_is_ipnum)(v61) )
            goto LABEL_101;
LABEL_112:
          v66 = strlen(v61);
          v67 = v61;
          domain = v61;
          if ( v66 < v59
            || (v68 = v66, v69 = (size_t)&v67[v66 - v59], !curl_strnequal(v32, v69, v59))
            || (v62 = 0, v68 != v59) && *(_BYTE *)(v69 - 1) != 46 )
          {
LABEL_116:
            v137 = 1;
            if ( (*((_BYTE *)&data->set + 1337) & 4) != 0 )
              Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v32);
            goto LABEL_72;
          }
        }
        Curl_cfree(*(_DWORD *)(v143 + 20));
        v72 = Curl_strndup(v32, v59);
        *(_DWORD *)(v143 + 20) = v72;
        if ( v62 || !v72 )
        {
          if ( !v72 )
            goto LABEL_292;
          v137 |= v72 == 0;
        }
        else
        {
          *(_BYTE *)(v143 + 32) = 1;
        }
        goto LABEL_72;
      }
      if ( v26 != 4 )
        goto LABEL_72;
      v43 = v38;
      if ( !curl_strnequal("path", k, 4) )
        goto LABEL_72;
      Curl_cfree(*(_DWORD *)(v143 + 12));
      v44 = Curl_strndup(v32, v43);
      *(_DWORD *)(v143 + 12) = v44;
      if ( !v44 )
        goto LABEL_292;
      Curl_cfree(*(_DWORD *)(v143 + 16));
      v45 = (const char *)Curl_cstrdup(*(_DWORD *)(v143 + 12));
      if ( !v45 )
      {
        *(_DWORD *)(v143 + 16) = 0;
        goto LABEL_292;
      }
      v46 = (char *)v45;
      v47 = strlen(v45);
      if ( *v46 == 34 )
        memmove(v46, v46 + 1, v47--);
      if ( v47 )
      {
        v48 = &v46[v47 - 1];
        if ( *v48 == 34 )
        {
          *v48 = 0;
          --v47;
        }
        if ( *v46 == 47 )
        {
          if ( v47 && v46[v47 - 1] == 47 )
            v46[v47 - 1] = 0;
LABEL_119:
          *(_DWORD *)(v143 + 16) = v46;
          goto LABEL_72;
        }
      }
      else if ( *v46 == 47 )
      {
        goto LABEL_119;
      }
      Curl_cfree(v46);
      v70 = Curl_strndup("/", 1);
      *(_DWORD *)(v143 + 16) = v70;
      if ( !v70 )
        goto LABEL_292;
    }
    else
    {
      if ( !v39 )
        goto LABEL_292;
      v49 = v38;
      Curl_cfree(0);
      *(_DWORD *)(v143 + 4) = Curl_strndup(k, v26);
      Curl_cfree(*(_DWORD *)(v143 + 8));
      v50 = (const char *)Curl_strndup(v32, v49);
      *(_DWORD *)(v143 + 8) = v50;
      if ( !v50 )
        goto LABEL_292;
      v51 = *(const char **)(v143 + 4);
      if ( !v51 )
        goto LABEL_292;
      if ( v50[strcspn(v50, invalid_octets_badoctets)] || v51[strcspn(v51, invalid_octets_badoctets)] )
      {
        if ( (*((_BYTE *)&data->set + 1337) & 4) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
        goto LABEL_292;
      }
    }
LABEL_72:
    for ( k = v25 + 1; ; ++k )
    {
      v52 = (unsigned __int8)*(k - 1);
      if ( v52 != 32 && v52 != 9 )
        break;
    }
  }
  while ( v52 == 59 );
  if ( (v137 & 1) != 0 )
    goto LABEL_292;
  if ( domain )
  {
    if ( !*(_DWORD *)(v143 + 20) )
    {
      v102 = Curl_cstrdup(domain);
      *(_DWORD *)(v143 + 20) = v102;
      if ( !v102 )
        goto LABEL_292;
    }
  }
  if ( !path || *(_DWORD *)(v143 + 12) )
    goto LABEL_290;
  v103 = strchr(path, 63);
  v104 = v103 ? ((int (__fastcall *)(const char *, int, int))Curl_memrchr)(path, 47, v103 - path) : (int)strrchr(path, 47);
  if ( !v104 )
    goto LABEL_290;
  v124 = v104 - (_DWORD)path;
  v125 = (void *)Curl_cmalloc(v104 - (_DWORD)path + 2);
  *(_DWORD *)(v143 + 12) = v125;
  if ( !v125 )
  {
LABEL_292:
    Curl_cfree(*(_DWORD *)(v143 + 20));
    Curl_cfree(*(_DWORD *)(v143 + 12));
    Curl_cfree(*(_DWORD *)(v143 + 16));
    Curl_cfree(*(_DWORD *)(v143 + 4));
    Curl_cfree(*(_DWORD *)(v143 + 8));
    Curl_cfree(v143);
    return 0;
  }
  memcpy(v125, path, v124 + 1);
  *(_BYTE *)(*(_DWORD *)(v143 + 12) + v124 + 1) = 0;
  v126 = (const char *)Curl_cstrdup(*(_DWORD *)(v143 + 12));
  if ( !v126 )
  {
    *(_DWORD *)(v143 + 16) = 0;
    goto LABEL_292;
  }
  v127 = (char *)v126;
  v128 = strlen(v126);
  if ( *v127 == 34 )
    memmove(v127, v127 + 1, v128--);
  if ( !v128 )
  {
    if ( *v127 == 47 )
      goto LABEL_288;
    goto LABEL_289;
  }
  v129 = &v127[v128 - 1];
  if ( *v129 == 34 )
  {
    *v129 = 0;
    --v128;
  }
  if ( *v127 != 47 )
  {
LABEL_289:
    Curl_cfree(v127);
    v133 = Curl_strndup("/", 1);
    *(_DWORD *)(v143 + 16) = v133;
    if ( !v133 )
      goto LABEL_292;
    goto LABEL_290;
  }
  if ( v128 && v127[v128 - 1] == 47 )
    v127[v128 - 1] = 0;
LABEL_288:
  *(_DWORD *)(v143 + 16) = v127;
LABEL_290:
  if ( !*(_DWORD *)(v143 + 4) )
    goto LABEL_292;
  ++v140->req.setcookies;
  v16 = 0;
  if ( (*(_BYTE *)(v143 + 40) & 1) != 0 && !*(_BYTE *)(v143 + 33)
    || (*(_BYTE *)(v143 + 40) & 2) != 0
    && (!*(_BYTE *)(v143 + 33) || (v105 = *(const char **)(v143 + 12)) == 0
                               || strcmp(v105, "/")
                               || *(_BYTE *)(v143 + 32))
    || !v144->running && v144->newsession && !*(_QWORD *)(v143 + 24) )
  {
    Curl_cfree(*(_DWORD *)(v143 + 20));
    Curl_cfree(*(_DWORD *)(v143 + 12));
    Curl_cfree(*(_DWORD *)(v143 + 16));
    Curl_cfree(*(_DWORD *)(v143 + 4));
    Curl_cfree(*(_DWORD *)(v143 + 8));
    Curl_cfree(v143);
    return (Cookie *)v16;
  }
  *(_BYTE *)(v143 + 34) = v144->running;
  v78 = v144->lastct + 1;
  v144->lastct = v78;
  *(_DWORD *)(v143 + 36) = v78;
  if ( !v141 )
  {
    v79 = 0;
    v80 = time(0u);
    v81 = v80 >> 0x1F;
    next_expiration_high = HIDWORD(v144->next_expiration);
    v83 = v80 >> 0x1F >= next_expiration_high;
    next_expiration = v144->next_expiration;
    if ( next_expiration_high == v80 >> 0x1F )
      v83 = v80 >= next_expiration;
    if ( v83 || !(~next_expiration | next_expiration_high ^ 0x7FFFFFFF) )
    {
      LODWORD(v144->next_expiration) = -1;
      HIDWORD(v144->next_expiration) = 0x7FFFFFFF;
      do
      {
        v115 = &v144->cookies[v79];
        v116 = *v115;
        if ( *v115 )
        {
          p_next = 0;
          do
          {
            v118 = v116;
            expires = v116->expires;
            v116 = v116->next;
            if ( !expires )
              goto LABEL_249;
            v120 = SHIDWORD(expires) >= v81;
            if ( HIDWORD(expires) == v81 )
              v120 = (unsigned int)expires >= v80;
            if ( v120 )
            {
LABEL_249:
              if ( expires )
              {
                v121 = HIDWORD(v144->next_expiration);
                v122 = SHIDWORD(expires) >= v121;
                if ( HIDWORD(expires) == v121 )
                  v122 = (unsigned int)expires >= LODWORD(v144->next_expiration);
                if ( !v122 )
                  v144->next_expiration = expires;
                p_next = &v118->next;
              }
              else
              {
                p_next = &v118->next;
              }
            }
            else
            {
              if ( p_next )
                *p_next = v116;
              else
                *v115 = v116;
              --v144->numcookies;
              Curl_cfree(v118->domain);
              Curl_cfree(v118->path);
              Curl_cfree(v118->spath);
              Curl_cfree(v118->name);
              Curl_cfree(v118->value);
              Curl_cfree(v118);
            }
          }
          while ( v116 );
        }
        ++v79;
      }
      while ( v79 != 63 );
    }
  }
  v85 = (Cookie *)v143;
  v86 = &v144->cookies[cookiehash(*(const char *const *)(v143 + 20))];
  next = *v86;
  if ( !*v86 )
  {
    v91 = 0;
    v90 = 0;
    goto LABEL_231;
  }
  v88 = 0;
  v89 = 0;
  v90 = 0;
  while ( 2 )
  {
    v91 = next;
    if ( ((int (__fastcall *)(char *, _DWORD))curl_strequal)(next->name, *(_DWORD *)(v143 + 4)) )
    {
      v92 = *(_DWORD *)(v143 + 20);
      if ( v91->domain )
      {
        if ( v92 && curl_strequal() )
        {
LABEL_169:
          spath = v91->spath;
          if ( spath )
          {
            v94 = *(_DWORD *)(v143 + 16);
            if ( v94 )
            {
              if ( v91->secure && !*(_BYTE *)(v143 + 33) && !secure )
              {
                v95 = strchr(spath + 1, 47);
                v96 = v95 ? v95 - spath : strlen(spath);
                if ( curl_strnequal(spath, v94, v96) )
                {
                  if ( v140 && (*((_BYTE *)&v140->set + 1337) & 4) != 0 )
                    ((void (*)(void))Curl_infof)();
                  goto LABEL_292;
                }
              }
            }
          }
        }
      }
      else if ( !v92 )
      {
        goto LABEL_169;
      }
    }
    if ( !v88 )
    {
      if ( !((int (__fastcall *)(char *, _DWORD))curl_strequal)(v91->name, *(_DWORD *)(v143 + 4)) )
      {
        v88 = 0;
        goto LABEL_164;
      }
      v97 = *(_DWORD *)(v143 + 20);
      if ( v91->domain )
      {
        if ( v97 && curl_strequal() )
        {
          v98 = v90 & 1 | (v91->tailmatch == *(unsigned __int8 *)(v143 + 32));
          v90 = 0;
          if ( !v98 )
          {
            v88 = 0;
            goto LABEL_164;
          }
        }
        else
        {
          v99 = (v90 & 1) != 0;
          v90 = 0;
          if ( !v99 )
          {
            v88 = 0;
            goto LABEL_164;
          }
        }
      }
      else
      {
        v100 = v90 & 1 | (v97 == 0);
        v90 = 0;
        if ( !v100 )
        {
          v88 = 0;
          goto LABEL_164;
        }
      }
      v101 = *(_DWORD *)(v143 + 16);
      if ( v91->spath )
      {
        if ( v101 )
        {
          if ( !curl_strequal() )
          {
            v90 = 0;
            v88 = 0;
            goto LABEL_164;
          }
          v90 = 0;
          v88 = 0;
          if ( (v91->spath != 0) == (*(_DWORD *)(v143 + 16) == 0) )
            goto LABEL_164;
        }
        else if ( !*(_DWORD *)(v143 + 16) )
        {
          v90 = 0;
          v88 = 0;
          goto LABEL_164;
        }
      }
      else
      {
        v90 = 0;
        v88 = 0;
        if ( v101 )
          goto LABEL_164;
      }
      v90 = 1;
      if ( *(_BYTE *)(v143 + 34) )
      {
        v89 = v91;
        v88 = (Cookie **)v143;
      }
      else
      {
        v89 = v91;
        v88 = (Cookie **)v143;
        if ( v91->livecookie )
          goto LABEL_292;
      }
    }
LABEL_164:
    next = v91->next;
    if ( v91->next )
      continue;
    break;
  }
  if ( v88 )
  {
    *v88 = v89->next;
    v88[9] = (Cookie *)v89->creationtime;
    Curl_cfree(v89->name);
    Curl_cfree(v89->value);
    Curl_cfree(v89->domain);
    Curl_cfree(v89->path);
    Curl_cfree(v89->spath);
    v106 = v88[7];
    v107 = v88[8];
    v108 = v88[9];
    v109 = v88[10];
    v110 = (char *)v88[3];
    v111 = (char *)v88[4];
    v112 = (char *)v88[5];
    v113 = v88[6];
    *((_DWORD *)&v89->prefix + 1) = v88[11];
    *(_DWORD *)&v89->prefix = v109;
    v89->creationtime = (int)v108;
    *(_DWORD *)&v89->tailmatch = v107;
    LODWORD(v89->expires) = v106;
    HIDWORD(v89->expires) = v113;
    v89->domain = v112;
    v89->spath = v111;
    v89->path = v110;
    v89->value = (char *)v88[2];
    v89->name = (char *)v88[1];
    v89->next = *v88;
    Curl_cfree(v88);
    v85 = v89;
  }
LABEL_231:
  if ( v140 && v144->running && (*((_BYTE *)&v140->set + 1337) & 4) != 0 )
  {
    v114 = v85;
    v123 = "Added";
    if ( (v90 & 1) != 0 )
      v123 = "Replaced";
    Curl_infof(v140, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld", v123, v85->name);
    if ( (v90 & 1) == 0 )
    {
LABEL_260:
      if ( v91 )
        v91->next = v114;
      else
        *v86 = v114;
      ++v144->numcookies;
    }
  }
  else
  {
    v114 = v85;
    if ( (v90 & 1) == 0 )
      goto LABEL_260;
  }
  v130 = v114->expires;
  if ( !v130 )
    return v114;
  v131 = HIDWORD(v144->next_expiration);
  v132 = SHIDWORD(v130) >= v131;
  if ( HIDWORD(v130) == v131 )
    v132 = (unsigned int)v130 >= LODWORD(v144->next_expiration);
  if ( !v132 )
    v144->next_expiration = v130;
  return v114;
}
