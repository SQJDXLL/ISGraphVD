Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  time_t v16; // x0
  unsigned int setcookies; // w8
  __int64 v18; // x28
  __int64 v19; // x0
  __int64 v20; // x19
  const char *j; // x26
  int v22; // w24
  size_t v23; // x0
  size_t v24; // x28
  const char *v25; // x20
  unsigned __int64 v26; // x22
  int v27; // w8
  const char *v28; // x23
  size_t v29; // x0
  size_t v30; // x20
  const char *v31; // x8
  int v32; // w9
  __int64 k; // x9
  int v34; // w11
  size_t v35; // x28
  int v36; // w26
  char v37; // w8
  __int64 v38; // x0
  const char *v39; // x0
  char *v40; // x22
  size_t v41; // x23
  size_t v42; // x8
  __int64 v43; // x0
  __int64 v44; // x0
  const char *v45; // x22
  __int64 v46; // x23
  int v47; // w8
  _QWORD *v48; // x22
  const char *v49; // x0
  int v50; // w0
  int v51; // w0
  _BOOL8 v52; // x9
  const char *v53; // x22
  size_t v54; // x23
  _BYTE *v55; // x0
  char is_ipnum; // w27
  __int64 v57; // x0
  const char *v58; // x0
  size_t v59; // x0
  const char *v60; // x28
  size_t v61; // x27
  __int64 v62; // x0
  __int64 v63; // x8
  __int64 v64; // x0
  __int64 v65; // x8
  char *v66; // x0
  char *v67; // x0
  char *v68; // x0
  const char *v69; // x22
  int v70; // w23
  int v71; // w28
  const char *v72; // x0
  __int64 v73; // x0
  __int64 v74; // x0
  const char *v75; // x0
  _BYTE *v76; // x22
  size_t v77; // x23
  size_t v78; // x8
  __int64 v79; // x0
  char v80; // w8
  __int64 v81; // x0
  __int64 v82; // x0
  int v83; // w23
  __int64 v84; // x0
  __int64 v85; // x0
  char *v86; // x0
  __int64 v87; // x0
  bool v88; // w20
  char v89; // w8
  __int64 v90; // x0
  char *v91; // x0
  char *v92; // x0
  signed __int64 v93; // x20
  void *v94; // x0
  const char *v95; // x0
  _BYTE *v96; // x22
  size_t v97; // x23
  size_t v98; // x8
  __int64 v99; // x0
  int v100; // w8
  time_t v101; // x0
  curl_off_t next_expiration; // x8
  time_t v103; // x22
  Cookie **v104; // x20
  Cookie *next; // x8
  __int64 v106; // x22
  int v107; // w26
  Cookie *v108; // x25
  char *v109; // x0
  __int64 v110; // x1
  const char *spath; // x23
  __int64 v112; // x24
  char *v113; // x0
  size_t v114; // x2
  char *v115; // x0
  __int64 v116; // x1
  bool v117; // zf
  int v118; // w8
  char *v119; // x0
  __int64 v120; // x1
  const char *v121; // x0
  __int128 v122; // q0
  __int128 v123; // q1
  __int128 v124; // q2
  const char *v125; // x2
  Cookie **v126; // x8
  curl_off_t v127; // x8
  __int64 i; // x20
  Cookie *v129; // x26
  Cookie *v130; // x27
  Cookie *v131; // x23
  curl_off_t expires; // x8
  Cookie **p_next; // x8
  __int64 v135; // [xsp+8h] [xbp-C8h]
  char *s; // [xsp+10h] [xbp-C0h]
  __int64 *v137; // [xsp+18h] [xbp-B8h]
  char v138; // [xsp+24h] [xbp-ACh]
  bool v139; // [xsp+30h] [xbp-A0h]
  bool v140; // [xsp+30h] [xbp-A0h]
  bool v141; // [xsp+34h] [xbp-9Ch]
  Curl_easy *v142; // [xsp+38h] [xbp-98h]
  time_t v143; // [xsp+40h] [xbp-90h]
  char *dest[17]; // [xsp+48h] [xbp-88h] BYREF

  v16 = time(0uLL);
  setcookies = data->req.setcookies;
  v18 = 0LL;
  v143 = v16;
  if ( setcookies > 0x31 )
    return (Cookie *)v18;
  v142 = data;
  v19 = Curl_ccalloc(1LL, 72LL);
  if ( !v19 )
    return 0LL;
  v20 = v19;
  if ( !httpheader )
  {
    dest[0] = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 0xA;
      *(_BYTE *)(v20 + 59) = 1;
      if ( *lineptr == 35 )
        goto LABEL_142;
    }
    else if ( *lineptr == 35 )
    {
      goto LABEL_142;
    }
    v66 = strchr(lineptr, 13);
    if ( v66 )
      *v66 = 0;
    v141 = secure;
    v67 = strchr(lineptr, 10);
    if ( v67 )
      *v67 = 0;
    v68 = strtok_r((char *)lineptr, "\t", dest);
    if ( !v68 )
      goto LABEL_202;
    v140 = noexpire;
    v69 = v68;
    v70 = 0;
    v71 = 0;
    while ( 1 )
    {
      switch ( v70 )
      {
        case 0:
          if ( *v69 == 46 )
            v72 = v69 + 1;
          else
            v72 = v69;
          v73 = Curl_cstrdup(v72);
          v70 = 0;
          *(_QWORD *)(v20 + 40) = v73;
          v71 |= v73 == 0;
          goto LABEL_190;
        case 1:
          *(_BYTE *)(v20 + 56) = (unsigned int)curl_strequal(v69, "TRUE") != 0;
          v70 = 1;
          goto LABEL_190;
        case 2:
          if ( !strcmp("TRUE", v69) || !strcmp("FALSE", v69) )
          {
            v82 = Curl_cstrdup("/");
            *(_QWORD *)(v20 + 24) = v82;
            v83 = v71 | (v82 == 0);
            v84 = Curl_cstrdup("/");
            v71 = v83 | (v84 == 0);
            *(_QWORD *)(v20 + 32) = v84;
            goto LABEL_175;
          }
          v74 = Curl_cstrdup(v69);
          *(_QWORD *)(v20 + 24) = v74;
          if ( v74 )
          {
            v75 = (const char *)Curl_cstrdup(v74);
            v76 = v75;
            if ( v75 )
            {
              v77 = strlen(v75);
              if ( *v76 == 34 )
                memmove(v76, v76 + 1, v77--);
              if ( v77 )
              {
                v78 = v77 - 1;
                if ( v76[v77 - 1] == 34 )
                {
                  --v77;
                  v76[v78] = 0;
                }
              }
              if ( *v76 == 47 )
              {
                if ( v77 && v76[v77 - 1] == 47 )
                  v76[v77 - 1] = 0;
              }
              else
              {
                Curl_cfree(v76);
                v85 = Curl_memdup("/", 2LL);
                v76 = (_BYTE *)v85;
                if ( v85 )
                  *(_BYTE *)(v85 + 1) = 0;
              }
            }
            *(_QWORD *)(v20 + 32) = v76;
            v71 |= v76 == 0LL;
            v70 = 2;
          }
          else
          {
            v70 = 2;
            v71 = 1;
          }
          goto LABEL_190;
        case 3:
LABEL_175:
          *(_BYTE *)(v20 + 57) = 0;
          if ( !(unsigned int)curl_strequal(v69, "TRUE") )
            goto LABEL_179;
          if ( secure || c->running )
          {
            *(_BYTE *)(v20 + 57) = 1;
LABEL_179:
            v70 = 3;
          }
          else
          {
            v70 = 3;
            v71 = 1;
          }
          goto LABEL_190;
        case 4:
          v71 |= (unsigned int)curlx_strtoofft(v69, 0LL, 10LL, v20 + 0x30) != 0;
          v70 = 4;
          goto LABEL_190;
        case 5:
          v79 = Curl_cstrdup(v69);
          *(_QWORD *)(v20 + 8) = v79;
          if ( !v79 )
          {
            v70 = 5;
            v71 = 1;
            goto LABEL_190;
          }
          if ( (unsigned int)curl_strnequal("__Secure-", v79, 9LL) )
          {
            v80 = *(_BYTE *)(v20 + 64) | 1;
LABEL_183:
            *(_BYTE *)(v20 + 64) = v80;
            v70 = 5;
            goto LABEL_190;
          }
          if ( (unsigned int)curl_strnequal("__Host-", *(_QWORD *)(v20 + 8), 7LL) )
          {
            v80 = *(_BYTE *)(v20 + 64) | 2;
            goto LABEL_183;
          }
          v70 = 5;
LABEL_190:
          v86 = strtok_r(0uLL, "\t", dest);
          ++v70;
          if ( !v86 || (v69 = v86, (v71 & 1) != 0) )
          {
            if ( v70 == 6 )
            {
              v87 = Curl_cstrdup(&unk_2A11);
              LOBYTE(v71) = v71 | (v87 == 0);
              if ( v87 )
                v70 = 7;
              else
                v70 = 6;
              *(_QWORD *)(v20 + 16) = v87;
            }
            v88 = v140;
            if ( (v71 & 1) == 0 && v70 == 7 )
            {
              v89 = *(_BYTE *)(v20 + 64);
              if ( (v89 & 1) != 0 )
              {
LABEL_200:
                if ( !*(_BYTE *)(v20 + 57) )
                  goto LABEL_328;
              }
LABEL_235:
              if ( (v89 & 2) != 0 )
              {
                if ( !*(_BYTE *)(v20 + 57) )
                  goto LABEL_328;
                v121 = *(const char **)(v20 + 24);
                if ( !v121 || strcmp(v121, "/") || *(_BYTE *)(v20 + 56) )
                  goto LABEL_328;
              }
              if ( !c->running && c->newsession && !*(_QWORD *)(v20 + 48) )
                goto LABEL_328;
              *(_BYTE *)(v20 + 58) = c->running;
              v100 = c->lastct + 1;
              c->lastct = v100;
              *(_DWORD *)(v20 + 60) = v100;
              if ( !v88 )
              {
                v101 = time(0uLL);
                next_expiration = c->next_expiration;
                v103 = v101;
                if ( v101 >= next_expiration || next_expiration == 0x7FFFFFFFFFFFFFFFLL )
                {
                  c->next_expiration = 0x7FFFFFFFFFFFFFFFLL;
                  for ( i = 0LL; i != 63; ++i )
                  {
                    v129 = c->cookies[i];
                    if ( v129 )
                    {
                      v130 = 0LL;
                      do
                      {
                        while ( 1 )
                        {
                          v131 = v129;
                          expires = v129->expires;
                          v129 = v129->next;
                          if ( !expires || expires >= v103 )
                            break;
                          if ( v130 )
                            p_next = &v130->next;
                          else
                            p_next = &c->cookies[i];
                          *p_next = v129;
                          --c->numcookies;
                          Curl_cfree(v131->domain);
                          Curl_cfree(v131->path);
                          Curl_cfree(v131->spath);
                          Curl_cfree(v131->name);
                          Curl_cfree(v131->value);
                          Curl_cfree(v131);
                          if ( !v129 )
                            goto LABEL_313;
                        }
                        if ( expires && expires < c->next_expiration )
                          c->next_expiration = expires;
                        v130 = v131;
                      }
                      while ( v129 );
                    }
LABEL_313:
                    ;
                  }
                }
              }
              v104 = &c->cookies[cookiehash(*(const char *const *)(v20 + 40))];
              next = *v104;
              if ( !*v104 )
              {
                v108 = 0LL;
                LOBYTE(v107) = 0;
LABEL_296:
                v18 = v20;
LABEL_297:
                if ( v142 && c->running && (*((_BYTE *)&v142->set + 2238) & 0x10) != 0 )
                {
                  if ( (v107 & 1) != 0 )
                    v125 = "Replaced";
                  else
                    v125 = "Added";
                  Curl_infof(
                    v142,
                    "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
                    v125,
                    *(const char **)(v18 + 8),
                    *(const char **)(v18 + 16),
                    *(const char **)(v18 + 0x28),
                    *(const char **)(v18 + 24),
                    *(_QWORD *)(v18 + 48));
                }
                if ( (v107 & 1) == 0 )
                {
                  if ( v108 )
                    v126 = &v108->next;
                  else
                    v126 = v104;
                  *v126 = (Cookie *)v18;
                  ++c->numcookies;
                }
                v127 = *(_QWORD *)(v18 + 48);
                if ( v127 && v127 < c->next_expiration )
                  c->next_expiration = v127;
                return (Cookie *)v18;
              }
              v106 = 0LL;
              v18 = 0LL;
              v107 = 0;
              while ( 2 )
              {
                v108 = next;
                if ( (unsigned int)curl_strequal(next->name, *(_QWORD *)(v20 + 8)) )
                {
                  v109 = v108->domain;
                  v110 = *(_QWORD *)(v20 + 40);
                  if ( v109 )
                  {
                    if ( v110 && (unsigned int)curl_strequal(v109, v110) )
                    {
LABEL_249:
                      spath = v108->spath;
                      if ( spath )
                      {
                        v112 = *(_QWORD *)(v20 + 32);
                        if ( v112 )
                        {
                          if ( v108->secure && !*(_BYTE *)(v20 + 57) && !v141 )
                          {
                            v113 = strchr(spath + 1, 47);
                            v114 = v113 ? v113 - spath : strlen(spath);
                            if ( (unsigned int)curl_strnequal(spath, v112, v114) )
                            {
                              if ( v142 && (*((_BYTE *)&v142->set + 2238) & 0x10) != 0 )
                                Curl_infof(
                                  v142,
                                  "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                                  *(const char **)(v20 + 8),
                                  *(const char **)(v20 + 40));
                              goto LABEL_328;
                            }
                          }
                        }
                      }
                    }
                  }
                  else if ( !v110 )
                  {
                    goto LABEL_249;
                  }
                }
                if ( v106 )
                {
LABEL_244:
                  next = v108->next;
                  if ( !v108->next )
                  {
                    if ( !v106 )
                      goto LABEL_296;
                    *(_QWORD *)v106 = *(_QWORD *)v18;
                    *(_DWORD *)(v106 + 60) = *(_DWORD *)(v18 + 60);
                    Curl_cfree(*(_QWORD *)(v18 + 8));
                    Curl_cfree(*(_QWORD *)(v18 + 16));
                    Curl_cfree(*(_QWORD *)(v18 + 40));
                    Curl_cfree(*(_QWORD *)(v18 + 24));
                    Curl_cfree(*(_QWORD *)(v18 + 32));
                    *(_OWORD *)v18 = *(_OWORD *)v106;
                    v123 = *(_OWORD *)(v106 + 0x20);
                    v122 = *(_OWORD *)(v106 + 48);
                    v124 = *(_OWORD *)(v106 + 16);
                    *(_QWORD *)(v18 + 64) = *(_QWORD *)(v106 + 64);
                    *(_OWORD *)(v18 + 0x20) = v123;
                    *(_OWORD *)(v18 + 48) = v122;
                    *(_OWORD *)(v18 + 16) = v124;
                    Curl_cfree(v106);
                    goto LABEL_297;
                  }
                  continue;
                }
                break;
              }
              if ( (unsigned int)curl_strequal(v108->name, *(_QWORD *)(v20 + 8)) )
              {
                v115 = v108->domain;
                v116 = *(_QWORD *)(v20 + 40);
                if ( v115 )
                {
                  if ( v116 && (unsigned int)curl_strequal(v115, v116) )
                  {
                    v117 = v108->tailmatch == *(unsigned __int8 *)(v20 + 56);
                    goto LABEL_264;
                  }
                  if ( (v107 & 1) == 0 )
                  {
LABEL_274:
                    v107 = 0;
                    goto LABEL_275;
                  }
                }
                else
                {
                  v117 = v116 == 0;
LABEL_264:
                  v118 = v117;
                  if ( ((v107 | v118) & 1) == 0 )
                    goto LABEL_274;
                }
                v119 = v108->spath;
                v120 = *(_QWORD *)(v20 + 32);
                if ( v119 )
                {
                  if ( v120 )
                  {
                    if ( !(unsigned int)curl_strequal(v119, v120)
                      || (v108->spath != 0LL) == (*(_QWORD *)(v20 + 32) == 0LL) )
                    {
                      goto LABEL_274;
                    }
                  }
                  else if ( !*(_QWORD *)(v20 + 32) )
                  {
                    goto LABEL_274;
                  }
                }
                else if ( v120 )
                {
                  goto LABEL_274;
                }
                if ( !*(_BYTE *)(v20 + 58) && v108->livecookie )
                  goto LABEL_328;
                v107 = 1;
                v18 = (__int64)v108;
                v106 = v20;
                goto LABEL_244;
              }
LABEL_275:
              v106 = 0LL;
              goto LABEL_244;
            }
LABEL_202:
            Curl_cfree(*(_QWORD *)(v20 + 40));
            Curl_cfree(*(_QWORD *)(v20 + 24));
            Curl_cfree(*(_QWORD *)(v20 + 32));
            Curl_cfree(*(_QWORD *)(v20 + 8));
            Curl_cfree(*(_QWORD *)(v20 + 16));
            Curl_cfree(v20);
            return 0LL;
          }
          break;
        case 6:
          v81 = Curl_cstrdup(v69);
          v71 |= v81 == 0;
          v70 = 6;
          *(_QWORD *)(v20 + 16) = v81;
          goto LABEL_190;
        default:
          goto LABEL_190;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_142:
    Curl_cfree(v20);
    return 0LL;
  }
  s = (char *)path;
  v137 = (__int64 *)(v20 + 0x30);
  v139 = noexpire;
  v141 = secure;
  v138 = 0;
  v135 = 0x7FFFFFFFFFFFFFFFLL - v143;
  while ( 1 )
  {
    for ( j = lineptr + 1; ; ++j )
    {
      v22 = *(unsigned __int8 *)lineptr;
      if ( v22 != 32 && v22 != 9 )
        break;
      ++lineptr;
    }
    v23 = strcspn(lineptr, ";\t\r\n=");
    if ( !v23 )
    {
      v25 = lineptr;
      goto LABEL_70;
    }
    v24 = v23;
    v25 = &lineptr[v23];
    v26 = v23;
    do
    {
      v27 = (unsigned __int8)lineptr[v26 - 1];
      if ( v27 != 32 && v27 != 9 )
        break;
      --v26;
    }
    while ( v26 );
    if ( *v25 == 61 )
    {
      v28 = &lineptr[v23 + 1];
      v29 = strcspn(v28, ";\r\n");
      v30 = v24 + v29;
      if ( v29 )
      {
        v31 = &j[v30];
        while ( 1 )
        {
          v32 = *((unsigned __int8 *)v31 - 1);
          if ( v32 != 32 && v32 != 9 )
            break;
          --v29;
          --v31;
          if ( !v29 )
            goto LABEL_28;
        }
        for ( k = 0LL; k != v29; ++k )
        {
          v34 = (unsigned __int8)j[v24 + k];
          if ( v34 != 32 && v34 != 9 )
          {
            v28 = &j[v24 + k];
            v35 = v29 - k;
            goto LABEL_29;
          }
        }
        v35 = 0LL;
        v28 = v31;
      }
      else
      {
LABEL_28:
        v35 = 0LL;
      }
LABEL_29:
      if ( memchr(v28, 9, v35) )
      {
        Curl_cfree(*(_QWORD *)(v20 + 40));
        Curl_cfree(*(_QWORD *)(v20 + 24));
        Curl_cfree(*(_QWORD *)(v20 + 32));
        Curl_cfree(*(_QWORD *)(v20 + 8));
        Curl_cfree(*(_QWORD *)(v20 + 16));
        Curl_cfree(v20);
        if ( (*((_BYTE *)&v142->set + 2238) & 0x10) != 0 )
          Curl_infof(v142, "cookie contains TAB, dropping");
        return 0LL;
      }
      v25 = &lineptr[v30 + 1];
      v36 = 1;
    }
    else
    {
      v35 = 0LL;
      v36 = 0;
      v28 = 0LL;
    }
    if ( v26 > 0xFFE || v35 > 0xFFE || v35 + v26 > 0x1000 )
    {
      Curl_cfree(*(_QWORD *)(v20 + 40));
      Curl_cfree(*(_QWORD *)(v20 + 24));
      Curl_cfree(*(_QWORD *)(v20 + 32));
      Curl_cfree(*(_QWORD *)(v20 + 8));
      Curl_cfree(*(_QWORD *)(v20 + 16));
      Curl_cfree(v20);
      if ( (*((_BYTE *)&v142->set + 2238) & 0x10) != 0 )
        Curl_infof(v142, "oversized cookie dropped, name/val %zu + %zu bytes", v26, v35);
      return 0LL;
    }
    if ( v22 == 95 && v26 >= 7 && lineptr[1] == 95 )
    {
      if ( (unsigned int)curl_strnequal("__Secure-", lineptr, 9LL) )
      {
        v37 = *(_BYTE *)(v20 + 64) | 1;
      }
      else
      {
        if ( !(unsigned int)curl_strnequal("__Host-", lineptr, 7LL) )
          goto LABEL_42;
        v37 = *(_BYTE *)(v20 + 64) | 2;
      }
      *(_BYTE *)(v20 + 64) = v37;
    }
LABEL_42:
    if ( !*(_QWORD *)(v20 + 8) )
      break;
    if ( v35 )
      goto LABEL_44;
    if ( v26 == 8 )
    {
      if ( (unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
      {
        *(_BYTE *)(v20 + 59) = 1;
        goto LABEL_70;
      }
    }
    else if ( v26 == 6 && (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
    {
      if ( !v141 && c->running )
        goto LABEL_328;
      *(_BYTE *)(v20 + 57) = 1;
      goto LABEL_70;
    }
    if ( v36 )
    {
LABEL_44:
      if ( v26 == 7 )
      {
        if ( (unsigned int)curl_strnequal("version", lineptr, 7LL) )
          goto LABEL_70;
        if ( (unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
        {
          v48 = (_QWORD *)(v20 + 0x30);
          if ( *v28 == 34 )
            v49 = v28 + 1;
          else
            v49 = v28;
          v50 = curlx_strtoofft(v49, 0LL, 10LL, v137);
          if ( v50 )
          {
            if ( v50 != 2 )
            {
              if ( v50 != 1 )
                goto LABEL_70;
LABEL_137:
              *v137 = 0x7FFFFFFFFFFFFFFFLL;
              goto LABEL_70;
            }
            goto LABEL_138;
          }
          v65 = *v137;
          if ( !*v137 )
            goto LABEL_138;
          if ( v135 < v65 )
            goto LABEL_137;
          *v137 = v65 + v143;
        }
        else if ( (unsigned int)curl_strnequal("expires", lineptr, 7LL) )
        {
          v48 = (_QWORD *)(v20 + 0x30);
          if ( v35 <= 0x7F && !*v137 )
          {
            memcpy(dest, v28, v35);
            *((_BYTE *)dest + v35) = 0;
            v64 = Curl_getdate_capped(dest);
            *v137 = v64;
            if ( v64 )
            {
              if ( (v64 & 0x8000000000000000LL) != 0 )
                *v137 = 0LL;
              goto LABEL_70;
            }
LABEL_138:
            *v48 = 1LL;
          }
        }
      }
      else
      {
        if ( v26 != 6 )
        {
          if ( v26 == 4 && (unsigned int)curl_strnequal("path", lineptr, 4LL) )
          {
            Curl_cfree(*(_QWORD *)(v20 + 24));
            v38 = Curl_memdup(v28, v35 + 1);
            *(_QWORD *)(v20 + 24) = v38;
            if ( !v38 )
              goto LABEL_328;
            *(_BYTE *)(v38 + v35) = 0;
            if ( !*(_QWORD *)(v20 + 24) )
              goto LABEL_328;
            Curl_cfree(*(_QWORD *)(v20 + 32));
            v39 = (const char *)Curl_cstrdup(*(_QWORD *)(v20 + 24));
            if ( !v39 )
              goto LABEL_327;
            v40 = (char *)v39;
            v41 = strlen(v39);
            if ( *v40 == 34 )
              memmove(v40, v40 + 1, v41--);
            if ( v41 )
            {
              v42 = v41 - 1;
              if ( v40[v41 - 1] == 34 )
              {
                --v41;
                v40[v42] = 0;
              }
            }
            if ( *v40 == 47 )
            {
              if ( v41 && v40[v41 - 1] == 47 )
                v40[v41 - 1] = 0;
              *(_QWORD *)(v20 + 32) = v40;
            }
            else
            {
              Curl_cfree(v40);
              v57 = Curl_memdup("/", 2LL);
              if ( !v57 )
                goto LABEL_327;
              *(_BYTE *)(v57 + 1) = 0;
              *(_QWORD *)(v20 + 32) = v57;
            }
          }
          goto LABEL_70;
        }
        v51 = curl_strnequal("domain", lineptr, 6LL);
        if ( v35 && v51 )
        {
          v52 = *(unsigned __int8 *)v28 == 46;
          if ( *v28 == 46 )
            v53 = v28 + 1;
          else
            v53 = v28;
          v54 = v35 - v52;
          if ( v35 - v52 == 9 && (unsigned int)curl_strnequal(v53, "localhost", 9LL)
            || (v55 = memchr(v53, 46, v54)) != 0LL && (unsigned __int64)(&v53[v54] - v55) > 1 )
          {
            if ( domain )
              v58 = domain;
            else
              v58 = v53;
            is_ipnum = Curl_host_is_ipnum(v58);
            if ( !domain )
              goto LABEL_121;
            if ( (is_ipnum & 1) != 0 )
              goto LABEL_101;
          }
          else
          {
            domain = ":";
            if ( (Curl_host_is_ipnum(":") & 1) != 0 )
            {
LABEL_101:
              if ( !strncmp(v53, domain, v54) && v54 == strlen(domain) )
              {
                is_ipnum = 1;
                goto LABEL_121;
              }
LABEL_125:
              if ( (*((_BYTE *)&v142->set + 2238) & 0x10) != 0 )
                Curl_infof(v142, "skipped cookie with bad tailmatch domain: %s", v53);
              v138 = 1;
              goto LABEL_70;
            }
          }
          v59 = strlen(domain);
          if ( v59 >= v54 )
          {
            v60 = &domain[v59 - v54];
            v61 = v59;
            if ( (unsigned int)curl_strnequal(v53, v60, v54) )
            {
              if ( v61 == v54 || *(v60 - 1) == 46 )
              {
                is_ipnum = 0;
LABEL_121:
                Curl_cfree(*(_QWORD *)(v20 + 40));
                v62 = Curl_memdup(v53, v54 + 1);
                *(_QWORD *)(v20 + 40) = v62;
                if ( !v62 )
                  goto LABEL_328;
                *(_BYTE *)(v62 + v54) = 0;
                v63 = *(_QWORD *)(v20 + 40);
                if ( is_ipnum & 1 | (v63 == 0) )
                {
                  if ( !v63 )
                    goto LABEL_328;
                  v138 |= v63 == 0;
                }
                else
                {
                  *(_BYTE *)(v20 + 56) = 1;
                }
                goto LABEL_70;
              }
            }
          }
          goto LABEL_125;
        }
      }
    }
LABEL_70:
    for ( lineptr = v25 + 1; ; ++lineptr )
    {
      v47 = *((unsigned __int8 *)lineptr - 1);
      if ( v47 != 32 && v47 != 9 )
        break;
    }
    if ( v47 != 59 )
    {
      if ( (v138 & 1) != 0 )
        goto LABEL_328;
      if ( domain )
      {
        if ( !*(_QWORD *)(v20 + 40) )
        {
          v90 = Curl_cstrdup(domain);
          *(_QWORD *)(v20 + 40) = v90;
          if ( !v90 )
            goto LABEL_328;
        }
      }
      if ( !s
        || *(_QWORD *)(v20 + 24)
        || ((v91 = strchr(s, 63)) == 0LL ? (v92 = strrchr(s, 47)) : (v92 = (char *)Curl_memrchr(s, 47LL, v91 - s)), !v92) )
      {
LABEL_233:
        if ( !*(_QWORD *)(v20 + 8) )
          goto LABEL_328;
        v88 = v139;
        ++v142->req.setcookies;
        v89 = *(_BYTE *)(v20 + 64);
        if ( (v89 & 1) != 0 )
          goto LABEL_200;
        goto LABEL_235;
      }
      v93 = v92 - s;
      v94 = (void *)Curl_cmalloc(v92 - s + 2);
      *(_QWORD *)(v20 + 24) = v94;
      if ( !v94 )
        goto LABEL_328;
      memcpy(v94, s, v93 + 1);
      *(_BYTE *)(*(_QWORD *)(v20 + 24) + v93 + 1) = 0;
      v95 = (const char *)Curl_cstrdup(*(_QWORD *)(v20 + 24));
      if ( v95 )
      {
        v96 = v95;
        v97 = strlen(v95);
        if ( *v96 == 34 )
          memmove(v96, v96 + 1, v97--);
        if ( v97 )
        {
          v98 = v97 - 1;
          if ( v96[v97 - 1] == 34 )
          {
            --v97;
            v96[v98] = 0;
          }
        }
        if ( *v96 == 47 )
        {
          if ( v97 && v96[v97 - 1] == 47 )
            v96[v97 - 1] = 0;
          goto LABEL_232;
        }
        Curl_cfree(v96);
        v99 = Curl_memdup("/", 2LL);
        if ( v99 )
        {
          v96 = (_BYTE *)v99;
          *(_BYTE *)(v99 + 1) = 0;
LABEL_232:
          *(_QWORD *)(v20 + 32) = v96;
          goto LABEL_233;
        }
      }
LABEL_327:
      *(_QWORD *)(v20 + 32) = 0LL;
      goto LABEL_328;
    }
  }
  if ( !v36 )
    goto LABEL_328;
  Curl_cfree(0LL);
  v43 = Curl_memdup(lineptr, v26 + 1);
  *(_QWORD *)(v20 + 8) = v43;
  if ( v43 )
    *(_BYTE *)(v43 + v26) = 0;
  Curl_cfree(*(_QWORD *)(v20 + 16));
  v44 = Curl_memdup(v28, v35 + 1);
  *(_QWORD *)(v20 + 16) = v44;
  if ( v44 )
    *(_BYTE *)(v44 + v35) = 0;
  v45 = *(const char **)(v20 + 8);
  if ( !v45 )
    goto LABEL_328;
  v46 = *(_QWORD *)(v20 + 16);
  if ( !v46 )
    goto LABEL_328;
  if ( !*(_BYTE *)(v46 + strcspn(*(const char **)(v20 + 16), invalid_octets_badoctets))
    && !v45[strcspn(v45, invalid_octets_badoctets)] )
  {
    goto LABEL_70;
  }
  if ( (*((_BYTE *)&v142->set + 2238) & 0x10) != 0 )
    Curl_infof(v142, "invalid octets in name/value, cookie dropped");
LABEL_328:
  Curl_cfree(*(_QWORD *)(v20 + 40));
  Curl_cfree(*(_QWORD *)(v20 + 24));
  Curl_cfree(*(_QWORD *)(v20 + 32));
  Curl_cfree(*(_QWORD *)(v20 + 8));
  Curl_cfree(*(_QWORD *)(v20 + 16));
  Curl_cfree(v20);
  return 0LL;
}
