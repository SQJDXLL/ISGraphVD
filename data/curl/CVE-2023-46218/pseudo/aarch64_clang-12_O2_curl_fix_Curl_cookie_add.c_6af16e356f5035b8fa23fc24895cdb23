Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        char *domain,
        char *path,
        bool secure)
{
  time_t v16; // x0
  __int64 v17; // x28
  __int64 v18; // x0
  __int64 v19; // x19
  const char *v20; // x26
  char *j; // x27
  int v22; // w25
  size_t v23; // x0
  size_t v24; // x28
  unsigned __int64 v25; // x23
  int v26; // w8
  int v27; // w24
  char *v28; // x20
  size_t v29; // x0
  size_t v30; // x22
  const char *v31; // x8
  int v32; // w9
  __int64 k; // x9
  int v34; // w11
  size_t v35; // x28
  char v36; // w8
  __int64 v37; // x0
  const char *v38; // x0
  char *v39; // x20
  size_t v40; // x23
  size_t v41; // x8
  const char *v42; // x0
  const char *v43; // x20
  int v44; // w8
  char *v45; // x0
  int v46; // w0
  int v47; // w0
  size_t v48; // x23
  _BYTE *v49; // x0
  char *v50; // x0
  char is_ipnum; // w27
  const char *v52; // x25
  size_t v53; // x0
  Curl_easy *v54; // x24
  __int64 v55; // x0
  __int64 v56; // x0
  const char *v57; // x28
  size_t v58; // x27
  __int64 v59; // x0
  __int64 v60; // x8
  char *v61; // x0
  char *v62; // x0
  char *v63; // x0
  const char *v64; // x20
  int v65; // w23
  char v66; // w22
  const char *v67; // x0
  __int64 v68; // x0
  __int64 v69; // x0
  const char *v70; // x0
  char *v71; // x20
  size_t v72; // x22
  size_t v73; // x8
  __int64 v74; // x0
  char v75; // w8
  __int64 v76; // x0
  __int64 v77; // x0
  bool v78; // w22
  __int64 v79; // x0
  char *v80; // x0
  __int64 v81; // x0
  Curl_easy *v82; // x20
  bool v83; // w24
  __int64 v84; // x0
  char *v85; // x0
  char *v86; // x0
  signed __int64 v87; // x20
  void *v88; // x0
  size_t v89; // x20
  const char *v90; // x0
  char *v91; // x20
  size_t v92; // x22
  size_t v93; // x8
  __int64 v94; // x0
  int v95; // w8
  time_t v96; // x0
  curl_off_t next_expiration; // x8
  time_t v98; // x20
  Cookie **v99; // x24
  Cookie *next; // x8
  Curl_easy *v101; // x27
  __int64 v102; // x20
  int v103; // w26
  Cookie *v104; // x25
  char *v105; // x0
  __int64 v106; // x1
  const char *spath; // x22
  __int64 v108; // x23
  char *v109; // x0
  size_t v110; // x2
  char *v111; // x0
  __int64 v112; // x1
  bool v113; // zf
  int v114; // w8
  char *v115; // x0
  __int64 v116; // x1
  const char *v117; // x0
  __int128 v118; // q0
  __int128 v119; // q1
  __int128 v120; // q2
  Cookie **v122; // x8
  curl_off_t v123; // x8
  __int64 i; // x23
  Cookie *v125; // x26
  Cookie *v126; // x27
  Cookie *v127; // x22
  curl_off_t expires; // x8
  Cookie **p_next; // x8
  const char *v130; // x2
  __int64 v131; // [xsp+8h] [xbp-D8h]
  __int64 *v132; // [xsp+10h] [xbp-D0h]
  char *v133; // [xsp+18h] [xbp-C8h]
  char *v134; // [xsp+20h] [xbp-C0h]
  char v135; // [xsp+2Ch] [xbp-B4h]
  char *s; // [xsp+30h] [xbp-B0h]
  bool v137; // [xsp+3Ch] [xbp-A4h]
  Curl_easy *v138; // [xsp+40h] [xbp-A0h]
  Curl_easy *v139; // [xsp+40h] [xbp-A0h]
  Curl_easy *v140; // [xsp+40h] [xbp-A0h]
  bool v141; // [xsp+4Ch] [xbp-94h]
  time_t v142; // [xsp+50h] [xbp-90h]
  char *dest[17]; // [xsp+58h] [xbp-88h] BYREF

  v16 = time(0uLL);
  v17 = 0LL;
  if ( data->req.setcookies > 0x31u )
    return (Cookie *)v17;
  v142 = v16;
  v18 = Curl_ccalloc(1LL, 72LL);
  if ( !v18 )
    return 0LL;
  v19 = v18;
  if ( !httpheader )
  {
    dest[0] = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 0xA;
      *(_BYTE *)(v19 + 59) = 1;
    }
    if ( *lineptr == 35 )
      goto LABEL_141;
    v61 = strchr(lineptr, 13);
    if ( v61 )
      *v61 = 0;
    v62 = strchr(lineptr, 10);
    if ( v62 )
      *v62 = 0;
    v63 = strtok_r(lineptr, "\t", dest);
    if ( !v63 )
      goto LABEL_197;
    v141 = secure;
    v139 = data;
    v64 = v63;
    v65 = 0;
    while ( 1 )
    {
      v66 = 0;
      switch ( v65 )
      {
        case 0:
          if ( *v64 == 46 )
            v67 = v64 + 1;
          else
            v67 = v64;
          v68 = Curl_cstrdup(v67);
          v65 = 0;
          *(_QWORD *)(v19 + 40) = v68;
          v66 = v68 == 0;
          goto LABEL_188;
        case 1:
          v66 = 0;
          *(_BYTE *)(v19 + 56) = (unsigned int)curl_strequal(v64, "TRUE") != 0;
          v65 = 1;
          goto LABEL_188;
        case 2:
          if ( !strcmp("TRUE", v64) || !strcmp("FALSE", v64) )
          {
            v77 = Curl_cstrdup("/");
            *(_QWORD *)(v19 + 24) = v77;
            v78 = v77 == 0;
            v79 = Curl_cstrdup("/");
            v66 = v78 || v79 == 0;
            *(_QWORD *)(v19 + 32) = v79;
            goto LABEL_173;
          }
          v69 = Curl_cstrdup(v64);
          *(_QWORD *)(v19 + 24) = v69;
          if ( !v69 )
          {
            v65 = 2;
            v66 = 1;
            goto LABEL_188;
          }
          v70 = (const char *)Curl_cstrdup(v69);
          v71 = (char *)v70;
          if ( !v70 )
            goto LABEL_187;
          v72 = strlen(v70);
          if ( *v71 == 34 )
            memmove(v71, v71 + 1, v72--);
          if ( v72 )
          {
            v73 = v72 - 1;
            if ( v71[v72 - 1] == 34 )
            {
              --v72;
              v71[v73] = 0;
            }
            if ( *v71 == 47 )
            {
              if ( v72 && v71[v72 - 1] == 47 )
                v71[v72 - 1] = 0;
              goto LABEL_187;
            }
LABEL_186:
            Curl_cfree(v71);
            v71 = (char *)Curl_strndup("/", 1LL);
            goto LABEL_187;
          }
          if ( *v71 != 47 )
            goto LABEL_186;
LABEL_187:
          *(_QWORD *)(v19 + 32) = v71;
          v66 = v71 == 0LL;
          v65 = 2;
LABEL_188:
          v80 = strtok_r(0uLL, "\t", dest);
          ++v65;
          if ( (v66 & 1) != 0 || (v64 = v80) == 0LL )
          {
            if ( v65 == 6 )
            {
              v81 = Curl_cstrdup(&unk_2A21);
              v66 |= v81 == 0;
              if ( v81 )
                v65 = 7;
              else
                v65 = 6;
              *(_QWORD *)(v19 + 16) = v81;
            }
            v82 = v139;
            v83 = noexpire;
            if ( (v66 & 1) != 0 || v65 != 7 )
            {
LABEL_197:
              Curl_cfree(*(_QWORD *)(v19 + 40));
              Curl_cfree(*(_QWORD *)(v19 + 24));
              Curl_cfree(*(_QWORD *)(v19 + 32));
              Curl_cfree(*(_QWORD *)(v19 + 8));
              Curl_cfree(*(_QWORD *)(v19 + 16));
              Curl_cfree(v19);
              return 0LL;
            }
LABEL_231:
            if ( (*(_BYTE *)(v19 + 64) & 1) != 0 && !*(_BYTE *)(v19 + 57) )
              goto LABEL_292;
            if ( (*(_BYTE *)(v19 + 64) & 2) != 0 )
            {
              if ( !*(_BYTE *)(v19 + 57) )
                goto LABEL_292;
              v117 = *(const char **)(v19 + 24);
              if ( !v117 || strcmp(v117, "/") || *(_BYTE *)(v19 + 56) )
                goto LABEL_292;
            }
            if ( !c->running && c->newsession && !*(_QWORD *)(v19 + 48) )
              goto LABEL_292;
            *(_BYTE *)(v19 + 58) = c->running;
            v140 = v82;
            v95 = c->lastct + 1;
            c->lastct = v95;
            *(_DWORD *)(v19 + 60) = v95;
            if ( !v83 )
            {
              v96 = time(0uLL);
              next_expiration = c->next_expiration;
              v98 = v96;
              if ( v96 >= next_expiration || next_expiration == 0x7FFFFFFFFFFFFFFFLL )
              {
                c->next_expiration = 0x7FFFFFFFFFFFFFFFLL;
                for ( i = 0LL; i != 63; ++i )
                {
                  v125 = c->cookies[i];
                  if ( v125 )
                  {
                    v126 = 0LL;
                    do
                    {
                      while ( 1 )
                      {
                        v127 = v125;
                        expires = v125->expires;
                        v125 = v125->next;
                        if ( !expires || expires >= v98 )
                          break;
                        if ( v126 )
                          p_next = &v126->next;
                        else
                          p_next = &c->cookies[i];
                        *p_next = v125;
                        --c->numcookies;
                        Curl_cfree(v127->domain);
                        Curl_cfree(v127->path);
                        Curl_cfree(v127->spath);
                        Curl_cfree(v127->name);
                        Curl_cfree(v127->value);
                        Curl_cfree(v127);
                        if ( !v125 )
                          goto LABEL_309;
                      }
                      if ( expires && expires < c->next_expiration )
                        c->next_expiration = expires;
                      v126 = v127;
                    }
                    while ( v125 );
                  }
LABEL_309:
                  ;
                }
              }
            }
            v99 = &c->cookies[cookiehash(*(const char *const *)(v19 + 40))];
            next = *v99;
            if ( *v99 )
            {
              v101 = v140;
              v102 = 0LL;
              v17 = 0LL;
              v103 = 0;
              while ( 1 )
              {
                v104 = next;
                if ( !(unsigned int)curl_strequal(next->name, *(_QWORD *)(v19 + 8)) )
                  goto LABEL_241;
                v105 = v104->domain;
                v106 = *(_QWORD *)(v19 + 40);
                if ( v105 )
                {
                  if ( !v106 || !(unsigned int)curl_strequal(v105, v106) )
                    goto LABEL_241;
                }
                else if ( v106 )
                {
                  goto LABEL_241;
                }
                spath = v104->spath;
                if ( spath )
                {
                  v108 = *(_QWORD *)(v19 + 32);
                  if ( v108 )
                  {
                    if ( v104->secure && !*(_BYTE *)(v19 + 57) && !v141 )
                    {
                      v109 = strchr(spath + 1, 47);
                      v110 = v109 ? v109 - spath : strlen(spath);
                      if ( (unsigned int)curl_strnequal(spath, v108, v110) )
                      {
                        if ( v140 && (*((_BYTE *)&v140->set + 2229) & 0x20) != 0 )
                          Curl_infof(
                            v140,
                            "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                            *(const char **)(v19 + 8),
                            *(const char **)(v19 + 40));
                        goto LABEL_292;
                      }
                    }
                  }
                }
LABEL_241:
                if ( !v102 )
                {
                  if ( (unsigned int)curl_strequal(v104->name, *(_QWORD *)(v19 + 8)) )
                  {
                    v111 = v104->domain;
                    v112 = *(_QWORD *)(v19 + 40);
                    if ( v111 )
                    {
                      if ( v112 && (unsigned int)curl_strequal(v111, v112) )
                      {
                        v113 = v104->tailmatch == *(unsigned __int8 *)(v19 + 56);
                        goto LABEL_262;
                      }
                      if ( (v103 & 1) == 0 )
                      {
LABEL_272:
                        v103 = 0;
                        goto LABEL_273;
                      }
                    }
                    else
                    {
                      v113 = v112 == 0;
LABEL_262:
                      v114 = v113;
                      if ( ((v103 | v114) & 1) == 0 )
                        goto LABEL_272;
                    }
                    v115 = v104->spath;
                    v116 = *(_QWORD *)(v19 + 32);
                    if ( v115 )
                    {
                      if ( v116 )
                      {
                        if ( (unsigned int)curl_strequal(v115, v116)
                          && (v104->spath != 0LL) != (*(_QWORD *)(v19 + 32) == 0LL) )
                        {
LABEL_275:
                          if ( !*(_BYTE *)(v19 + 58) && v104->livecookie )
                            goto LABEL_292;
                          v103 = 1;
                          v17 = (__int64)v104;
                          v102 = v19;
                          goto LABEL_242;
                        }
                      }
                      else if ( *(_QWORD *)(v19 + 32) )
                      {
                        goto LABEL_275;
                      }
                    }
                    else if ( !v116 )
                    {
                      goto LABEL_275;
                    }
                    goto LABEL_272;
                  }
LABEL_273:
                  v102 = 0LL;
                }
LABEL_242:
                next = v104->next;
                if ( !v104->next )
                {
                  if ( !v102 )
                    goto LABEL_296;
                  *(_QWORD *)v102 = *(_QWORD *)v17;
                  *(_DWORD *)(v102 + 60) = *(_DWORD *)(v17 + 60);
                  Curl_cfree(*(_QWORD *)(v17 + 8));
                  Curl_cfree(*(_QWORD *)(v17 + 16));
                  Curl_cfree(*(_QWORD *)(v17 + 40));
                  Curl_cfree(*(_QWORD *)(v17 + 24));
                  Curl_cfree(*(_QWORD *)(v17 + 32));
                  *(_OWORD *)v17 = *(_OWORD *)v102;
                  v119 = *(_OWORD *)(v102 + 0x20);
                  v118 = *(_OWORD *)(v102 + 48);
                  v120 = *(_OWORD *)(v102 + 16);
                  *(_QWORD *)(v17 + 64) = *(_QWORD *)(v102 + 64);
                  *(_OWORD *)(v17 + 0x20) = v119;
                  *(_OWORD *)(v17 + 48) = v118;
                  *(_OWORD *)(v17 + 16) = v120;
                  Curl_cfree(v102);
                  goto LABEL_297;
                }
              }
            }
            v101 = v140;
            v104 = 0LL;
            LOBYTE(v103) = 0;
LABEL_296:
            v17 = v19;
LABEL_297:
            if ( v101 && c->running && (*((_BYTE *)&v101->set + 2229) & 0x20) != 0 )
            {
              if ( (v103 & 1) != 0 )
                v130 = "Replaced";
              else
                v130 = "Added";
              Curl_infof(
                v101,
                "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
                v130,
                *(const char **)(v17 + 8),
                *(const char **)(v17 + 16),
                *(const char **)(v17 + 0x28),
                *(const char **)(v17 + 24),
                *(_QWORD *)(v17 + 48));
              if ( (v103 & 1) == 0 )
              {
LABEL_301:
                if ( v104 )
                  v122 = &v104->next;
                else
                  v122 = v99;
                *v122 = (Cookie *)v17;
                ++c->numcookies;
              }
            }
            else if ( (v103 & 1) == 0 )
            {
              goto LABEL_301;
            }
            v123 = *(_QWORD *)(v17 + 48);
            if ( v123 && v123 < c->next_expiration )
              c->next_expiration = v123;
            return (Cookie *)v17;
          }
          break;
        case 3:
LABEL_173:
          *(_BYTE *)(v19 + 57) = 0;
          if ( !(unsigned int)curl_strequal(v64, "TRUE") )
            goto LABEL_177;
          if ( secure || c->running )
          {
            *(_BYTE *)(v19 + 57) = 1;
LABEL_177:
            v65 = 3;
          }
          else
          {
            v65 = 3;
            v66 = 1;
          }
          goto LABEL_188;
        case 4:
          v66 = (unsigned int)curlx_strtoofft(v64, 0LL, 10LL, v19 + 0x30) != 0;
          v65 = 4;
          goto LABEL_188;
        case 5:
          v74 = Curl_cstrdup(v64);
          *(_QWORD *)(v19 + 8) = v74;
          if ( !v74 )
          {
            v65 = 5;
            v66 = 1;
            goto LABEL_188;
          }
          if ( (unsigned int)curl_strnequal("__Secure-", v74, 9LL) )
          {
            v66 = 0;
            v75 = *(_BYTE *)(v19 + 64) | 1;
LABEL_181:
            *(_BYTE *)(v19 + 64) = v75;
            v65 = 5;
            goto LABEL_188;
          }
          v66 = 0;
          if ( (unsigned int)curl_strnequal("__Host-", *(_QWORD *)(v19 + 8), 7LL) )
          {
            v75 = *(_BYTE *)(v19 + 64) | 2;
            goto LABEL_181;
          }
          v65 = 5;
          goto LABEL_188;
        case 6:
          v76 = Curl_cstrdup(v64);
          v66 = v76 == 0;
          v65 = 6;
          *(_QWORD *)(v19 + 16) = v76;
          goto LABEL_188;
        default:
          goto LABEL_188;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_141:
    Curl_cfree(v19);
    return 0LL;
  }
  v132 = (__int64 *)(v19 + 0x30);
  v133 = path;
  v134 = (char *)&data->set + 0x8B2;
  s = domain;
  v137 = noexpire;
  v141 = secure;
  v135 = 0;
  v138 = data;
  v131 = 0x7FFFFFFFFFFFFFFFLL - v142;
  while ( 1 )
  {
    v20 = lineptr + 1;
    for ( j = lineptr; ; ++j )
    {
      v22 = (unsigned __int8)*j;
      if ( v22 != 32 && v22 != 9 )
        break;
      ++v20;
    }
    v23 = strcspn(j, ";\t\r\n=");
    if ( !v23 )
    {
      lineptr = j;
      goto LABEL_64;
    }
    v24 = v23;
    lineptr = &j[v23];
    v25 = v23;
    do
    {
      v26 = (unsigned __int8)j[v25 - 1];
      if ( v26 != 32 && v26 != 9 )
        break;
      --v25;
    }
    while ( v25 );
    v27 = (unsigned __int8)*lineptr;
    if ( v27 == 61 )
      break;
    v35 = 0LL;
    v28 = 0LL;
LABEL_31:
    if ( v25 > 0xFFE || v35 > 0xFFE || v35 + v25 > 0x1000 )
    {
      Curl_cfree(*(_QWORD *)(v19 + 40));
      Curl_cfree(*(_QWORD *)(v19 + 24));
      Curl_cfree(*(_QWORD *)(v19 + 32));
      Curl_cfree(*(_QWORD *)(v19 + 8));
      Curl_cfree(*(_QWORD *)(v19 + 16));
      Curl_cfree(v19);
      if ( (v134[3] & 0x20) != 0 )
        Curl_infof(v138, "oversized cookie dropped, name/val %zu + %zu bytes", v25, v35);
      return 0LL;
    }
    if ( v22 == 95 && v25 >= 7 && j[1] == 95 )
    {
      if ( (unsigned int)curl_strnequal("__Secure-", j, 9LL) )
      {
        v36 = *(_BYTE *)(v19 + 64) | 1;
      }
      else
      {
        if ( !(unsigned int)curl_strnequal("__Host-", j, 7LL) )
          goto LABEL_42;
        v36 = *(_BYTE *)(v19 + 64) | 2;
      }
      *(_BYTE *)(v19 + 64) = v36;
    }
LABEL_42:
    if ( !*(_QWORD *)(v19 + 8) )
    {
      if ( v27 != 61 )
        goto LABEL_292;
      Curl_cfree(0LL);
      *(_QWORD *)(v19 + 8) = Curl_strndup(j, v25);
      Curl_cfree(*(_QWORD *)(v19 + 16));
      v42 = (const char *)Curl_strndup(v28, v35);
      *(_QWORD *)(v19 + 16) = v42;
      if ( !v42 )
        goto LABEL_292;
      v43 = *(const char **)(v19 + 8);
      if ( !v43 )
        goto LABEL_292;
      if ( v42[strcspn(v42, invalid_octets_badoctets)] || v43[strcspn(v43, invalid_octets_badoctets)] )
      {
        if ( (v134[3] & 0x20) != 0 )
          Curl_infof(v138, "invalid octets in name/value, cookie dropped");
        goto LABEL_292;
      }
      goto LABEL_64;
    }
    if ( !v35 )
    {
      if ( v25 == 8 )
      {
        if ( (unsigned int)curl_strnequal("httponly", j, 8LL) )
        {
          *(_BYTE *)(v19 + 59) = 1;
          goto LABEL_64;
        }
      }
      else if ( v25 == 6 && (unsigned int)curl_strnequal("secure", j, 6LL) )
      {
        if ( !v141 && c->running )
          goto LABEL_292;
        *(_BYTE *)(v19 + 57) = 1;
        goto LABEL_64;
      }
      if ( v27 != 61 )
        goto LABEL_64;
    }
    if ( v25 != 7 )
    {
      if ( v25 != 6 )
      {
        if ( v25 == 4 && (unsigned int)curl_strnequal("path", j, 4LL) )
        {
          Curl_cfree(*(_QWORD *)(v19 + 24));
          v37 = Curl_strndup(v28, v35);
          *(_QWORD *)(v19 + 24) = v37;
          if ( !v37 )
            goto LABEL_292;
          Curl_cfree(*(_QWORD *)(v19 + 32));
          v38 = (const char *)Curl_cstrdup(*(_QWORD *)(v19 + 24));
          if ( !v38 )
            goto LABEL_225;
          v39 = (char *)v38;
          v40 = strlen(v38);
          if ( *v39 == 34 )
            memmove(v39, v39 + 1, v40--);
          if ( v40 )
          {
            v41 = v40 - 1;
            if ( v39[v40 - 1] == 34 )
            {
              --v40;
              v39[v41] = 0;
            }
            if ( *v39 != 47 )
            {
LABEL_109:
              Curl_cfree(v39);
              v55 = Curl_strndup("/", 1LL);
              *(_QWORD *)(v19 + 32) = v55;
              if ( !v55 )
                goto LABEL_292;
              goto LABEL_64;
            }
            if ( v40 && v39[v40 - 1] == 47 )
              v39[v40 - 1] = 0;
          }
          else if ( *v39 != 47 )
          {
            goto LABEL_109;
          }
          *(_QWORD *)(v19 + 32) = v39;
        }
        goto LABEL_64;
      }
      v47 = curl_strnequal("domain", j, 6LL);
      if ( !v35 || !v47 )
        goto LABEL_64;
      v48 = v35 - (*v28 == 46);
      if ( *v28 == 46 )
        ++v28;
      if ( v48 != 9 || !(unsigned int)curl_strnequal(v28, "localhost", 9LL) )
      {
        v49 = memchr(v28, 46, v48);
        if ( !v49 || (unsigned __int64)(&v28[v48] - v49) <= 1 )
        {
          v52 = ":";
          if ( (Curl_host_is_ipnum(":") & 1) != 0 )
            goto LABEL_104;
LABEL_96:
          v53 = strlen(v52);
          if ( v53 >= v48 )
          {
            v57 = &v52[v53 - v48];
            v58 = v53;
            s = (char *)v52;
            if ( (unsigned int)curl_strnequal(v28, v57, v48) && (v58 == v48 || *(v57 - 1) == 46) )
            {
              is_ipnum = 0;
              goto LABEL_122;
            }
            v54 = v138;
          }
          else
          {
            v54 = v138;
          }
LABEL_132:
          s = (char *)v52;
          if ( (v134[3] & 0x20) != 0 )
            Curl_infof(v54, "skipped cookie with bad tailmatch domain: %s", v28);
          v135 = 1;
          goto LABEL_64;
        }
      }
      if ( s )
        v50 = s;
      else
        v50 = v28;
      is_ipnum = Curl_host_is_ipnum(v50);
      if ( s )
      {
        v52 = s;
        if ( (is_ipnum & 1) == 0 )
          goto LABEL_96;
LABEL_104:
        v54 = v138;
        if ( strncmp(v28, v52, v48) || v48 != strlen(v52) )
          goto LABEL_132;
        s = (char *)v52;
        is_ipnum = 1;
      }
      else
      {
        s = 0LL;
      }
LABEL_122:
      Curl_cfree(*(_QWORD *)(v19 + 40));
      v59 = Curl_strndup(v28, v48);
      *(_QWORD *)(v19 + 40) = v59;
      if ( (is_ipnum & 1) == 0 && v59 )
      {
        *(_BYTE *)(v19 + 56) = 1;
        goto LABEL_64;
      }
      if ( v59 )
      {
        v135 |= v59 == 0;
        goto LABEL_64;
      }
      v135 = 1;
LABEL_198:
      if ( (v135 & 1) != 0
        || s && !*(_QWORD *)(v19 + 40) && (v84 = Curl_cstrdup(s), (*(_QWORD *)(v19 + 40) = v84) == 0LL) )
      {
LABEL_292:
        Curl_cfree(*(_QWORD *)(v19 + 40));
        Curl_cfree(*(_QWORD *)(v19 + 24));
        Curl_cfree(*(_QWORD *)(v19 + 32));
        Curl_cfree(*(_QWORD *)(v19 + 8));
        Curl_cfree(*(_QWORD *)(v19 + 16));
        Curl_cfree(v19);
        return 0LL;
      }
      if ( !v133 || *(_QWORD *)(v19 + 24) )
        goto LABEL_229;
      v85 = strchr(v133, 63);
      v86 = v85 ? (char *)Curl_memrchr(v133, 47LL, v85 - v133) : strrchr(v133, 47);
      if ( !v86 )
        goto LABEL_229;
      v87 = v86 - v133;
      v88 = (void *)Curl_cmalloc(v86 - v133 + 2);
      *(_QWORD *)(v19 + 24) = v88;
      if ( !v88 )
        goto LABEL_292;
      v89 = v87 + 1;
      memcpy(v88, v133, v89);
      *(_BYTE *)(*(_QWORD *)(v19 + 24) + v89) = 0;
      v90 = (const char *)Curl_cstrdup(*(_QWORD *)(v19 + 24));
      if ( !v90 )
      {
LABEL_225:
        *(_QWORD *)(v19 + 32) = 0LL;
        goto LABEL_292;
      }
      v91 = (char *)v90;
      v92 = strlen(v90);
      if ( *v91 == 34 )
        memmove(v91, v91 + 1, v92--);
      if ( v92 )
      {
        v93 = v92 - 1;
        if ( v91[v92 - 1] == 34 )
        {
          --v92;
          v91[v93] = 0;
        }
        if ( *v91 == 47 )
        {
          if ( v92 && v91[v92 - 1] == 47 )
            v91[v92 - 1] = 0;
LABEL_227:
          *(_QWORD *)(v19 + 32) = v91;
LABEL_229:
          if ( !*(_QWORD *)(v19 + 8) )
            goto LABEL_292;
          v82 = v138;
          v83 = v137;
          ++v138->req.setcookies;
          goto LABEL_231;
        }
      }
      else if ( *v91 == 47 )
      {
        goto LABEL_227;
      }
      Curl_cfree(v91);
      v94 = Curl_strndup("/", 1LL);
      *(_QWORD *)(v19 + 32) = v94;
      if ( !v94 )
        goto LABEL_292;
      goto LABEL_229;
    }
    if ( !(unsigned int)curl_strnequal("version", j, 7LL) )
    {
      if ( !(unsigned int)curl_strnequal("max-age", j, 7LL) )
      {
        if ( (unsigned int)curl_strnequal("expires", j, 7LL) && v35 <= 0x7F && !*v132 )
        {
          memcpy(dest, v28, v35);
          *((_BYTE *)dest + v35) = 0;
          v56 = Curl_getdate_capped(dest);
          *v132 = v56;
          if ( v56 )
          {
            if ( (v56 & 0x8000000000000000LL) != 0 )
              *v132 = 0LL;
          }
          else
          {
            *v132 = 1LL;
          }
        }
        goto LABEL_64;
      }
      if ( *v28 == 34 )
        v45 = v28 + 1;
      else
        v45 = v28;
      v46 = curlx_strtoofft(v45, 0LL, 10LL, v132);
      switch ( v46 )
      {
        case 0:
          v60 = *v132;
          if ( !*v132 )
          {
LABEL_130:
            *v132 = 1LL;
            goto LABEL_64;
          }
          if ( v131 >= v60 )
          {
            *v132 = v60 + v142;
            goto LABEL_64;
          }
LABEL_129:
          *v132 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_64;
        case 2:
          goto LABEL_130;
        case 1:
          goto LABEL_129;
      }
    }
    do
    {
      do
LABEL_64:
        v44 = (unsigned __int8)*lineptr++;
      while ( v44 == 32 );
    }
    while ( v44 == 9 );
    if ( v44 != 59 )
      goto LABEL_198;
  }
  v28 = &j[v23 + 1];
  v29 = strcspn(v28, ";\r\n");
  v30 = v24 + v29;
  if ( v29 )
  {
    v31 = &v20[v30];
    while ( 1 )
    {
      v32 = *((unsigned __int8 *)v31 - 1);
      if ( v32 != 32 && v32 != 9 )
        break;
      --v29;
      --v31;
      if ( !v29 )
        goto LABEL_28;
    }
    for ( k = 0LL; k != v29; ++k )
    {
      v34 = (unsigned __int8)v20[v24 + k];
      if ( v34 != 32 && v34 != 9 )
      {
        v28 = (char *)&v20[v24 + k];
        v35 = v29 - k;
        goto LABEL_29;
      }
    }
    v35 = 0LL;
    v28 = (char *)v31;
  }
  else
  {
LABEL_28:
    v35 = 0LL;
  }
LABEL_29:
  if ( !memchr(v28, 9, v35) )
  {
    lineptr = &j[v30 + 1];
    goto LABEL_31;
  }
  Curl_cfree(*(_QWORD *)(v19 + 40));
  Curl_cfree(*(_QWORD *)(v19 + 24));
  Curl_cfree(*(_QWORD *)(v19 + 32));
  Curl_cfree(*(_QWORD *)(v19 + 8));
  Curl_cfree(*(_QWORD *)(v19 + 16));
  Curl_cfree(v19);
  if ( (v134[3] & 0x20) != 0 )
    Curl_infof(v138, "cookie contains TAB, dropping");
  return 0LL;
}
