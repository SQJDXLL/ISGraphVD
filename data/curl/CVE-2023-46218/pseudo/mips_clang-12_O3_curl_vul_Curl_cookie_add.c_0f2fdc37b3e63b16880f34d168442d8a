Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  Cookie *v16; // $s3
  time_t v17; // $v0
  int v18; // $v0
  int v19; // $s5
  char *k; // $s5
  int v21; // $s1
  char *i; // $s1
  int v23; // $s2
  size_t v24; // $v0
  size_t v25; // $s4
  char *v26; // $v1
  unsigned int v27; // $s6
  int v28; // $v0
  size_t v29; // $s7
  char *v30; // $fp
  size_t v31; // $v0
  int v32; // $v1
  char *v33; // $a0
  _DWORD *v34; // $s1
  int j; // $v1
  int v36; // $a2
  char *v37; // $s7
  size_t v38; // $s4
  int v39; // $v0
  size_t v40; // $s4
  const char *v41; // $v0
  char *v42; // $s2
  size_t v43; // $s4
  char *v44; // $v1
  int v45; // $v0
  int v46; // $v0
  const char *v47; // $s2
  int v48; // $s5
  const char *v49; // $s4
  int v50; // $v0
  int v51; // $v0
  size_t v52; // $s2
  _BYTE *v53; // $v0
  const char *v54; // $s5
  const char *v55; // $a0
  int is_ipnum; // $v0
  int v57; // $s4
  size_t v58; // $v0
  const char *v59; // $v1
  size_t v60; // $s5
  size_t v61; // $s4
  size_t v62; // $v0
  int v63; // $v0
  int v64; // $v0
  int v65; // $v0
  int v66; // $v0
  int v67; // $v1
  _BOOL4 v68; // $v0
  int v69; // $v0
  unsigned int v70; // $v1
  _BOOL4 v71; // $a0
  int v72; // $v0
  int v73; // $v0
  int v74; // $s1
  char *v75; // $v0
  int v76; // $v0
  char *v77; // $v0
  char *v78; // $v0
  int v79; // $at
  int v80; // $s0
  time_t v81; // $s2
  int v82; // $s3
  int next_expiration_high; // $v0
  _BOOL4 v84; // $a0
  unsigned int next_expiration; // $v1
  Cookie *v86; // $s1
  Cookie **v87; // $s0
  Cookie *next; // $v0
  Cookie **v89; // $s2
  Cookie *v90; // $s7
  char v91; // $s6
  Cookie *v92; // $s3
  int v93; // $a1
  const char *spath; // $s4
  int v95; // $s5
  char *v96; // $v0
  size_t v97; // $a2
  int v98; // $a1
  int v99; // $at
  bool v100; // dc
  int v101; // $at
  int v102; // $a1
  const char *v103; // $a0
  Cookie *v104; // $at
  Cookie *v105; // $v0
  Cookie *v106; // $v1
  char *v107; // $a1
  char *v108; // $a2
  char *v109; // $a3
  Cookie *v110; // $t0
  Cookie *v111; // $t1
  Cookie *v112; // $s2
  Cookie **v113; // $s7
  Cookie *v114; // $fp
  Cookie **p_next; // $s1
  curl_off_t expires; // $v1
  Cookie *v117; // $s4
  _BOOL4 v118; // $a1
  int v119; // $at
  _BOOL4 v120; // $a1
  const char *v121; // $a2
  curl_off_t v122; // $v1
  int v123; // $at
  _BOOL4 v124; // $a1
  int v125; // $s0
  void *v126; // $v0
  const char *v127; // $v0
  char *v128; // $s2
  size_t v129; // $s4
  char *v130; // $v1
  int v131; // $v0
  int v133; // [sp+30h] [-C0h]
  int *v134; // [sp+3Ch] [-B4h]
  char v135; // [sp+43h] [-ADh]
  Curl_easy *v137; // [sp+48h] [-A8h]
  int v138; // [sp+4Ch] [-A4h]
  int v139; // [sp+50h] [-A0h]
  int v140; // [sp+58h] [-98h]
  int v141; // [sp+60h] [-90h]
  size_t v142; // [sp+60h] [-90h]
  int v143; // [sp+64h] [-8Ch]
  CookieInfo *v144; // [sp+68h] [-88h]
  char *v145[32]; // [sp+70h] [-80h] BYREF

  v16 = 0;
  v17 = time(0u);
  if ( data->req.setcookies >= 0x32u )
    return v16;
  v144 = c;
  v19 = v17;
  v18 = Curl_ccalloc(1, 48);
  if ( !v18 )
    return v16;
  v139 = v19;
  k = (char *)lineptr;
  v21 = v18;
  v138 = noexpire;
  v143 = v18;
  if ( !httpheader )
  {
    v145[0] = 0;
    if ( strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      if ( *lineptr == 35 )
        goto LABEL_5;
    }
    else
    {
      k = (char *)(lineptr + 10);
      *(_BYTE *)(v21 + 35) = 1;
      if ( lineptr[10] == 35 )
        goto LABEL_5;
    }
    v77 = strchr(k, 13);
    if ( v77 )
      *v77 = 0;
    v78 = strchr(k, 10);
    if ( v78 )
      *v78 = 0;
    if ( strtok_r(k, "\t", v145) )
      JUMPOUT(0x1468);
LABEL_237:
    Curl_cfree(*(_DWORD *)(v21 + 20));
    Curl_cfree(*(_DWORD *)(v21 + 12));
    Curl_cfree(*(_DWORD *)(v21 + 16));
    Curl_cfree(*(_DWORD *)(v21 + 4));
    Curl_cfree(*(_DWORD *)(v21 + 8));
    Curl_cfree(v21);
    return v16;
  }
  if ( strlen(lineptr) >= 0x1389 )
  {
LABEL_5:
    Curl_cfree(v21);
    return v16;
  }
  v137 = data;
  v133 = 0x7FFFFFFF - (v139 >> 0x1F);
  v134 = (int *)(v21 + 0x18);
  v135 = 0;
  do
  {
    for ( i = k + 1; ; ++i )
    {
      v23 = (unsigned __int8)*k;
      if ( v23 != 32 && v23 != 9 )
        break;
      ++k;
    }
    v24 = strcspn(k, ";\t\r\n=");
    if ( !v24 )
    {
      v37 = k;
      goto LABEL_150;
    }
    v25 = v24;
    v26 = &k[v24];
    v27 = v24;
    while ( 1 )
    {
      v28 = (unsigned __int8)k[v27 - 1];
      if ( v28 != 32 && v28 != 9 )
        break;
      if ( !--v27 )
      {
        v27 = 0;
        break;
      }
    }
    v29 = 0;
    v30 = 0;
    v141 = (int)v26;
    v140 = (unsigned __int8)*v26;
    if ( v140 == 61 )
    {
      v31 = strcspn(&k[v25 + 1], ";\r\n");
      v142 = v25 + v31;
      if ( v31 )
      {
        v30 = &i[v25 + v31];
        while ( 1 )
        {
          v32 = (unsigned __int8)*(v30 - 1);
          if ( v32 != 32 && v32 != 9 )
            break;
          --v31;
          --v30;
          if ( !v31 )
          {
            v34 = (_DWORD *)v143;
            v30 = &k[v25 + 1];
            v29 = 0;
            goto LABEL_36;
          }
        }
        v33 = &i[v25];
        v34 = (_DWORD *)v143;
        for ( j = 0; j != v31; ++j )
        {
          v36 = (unsigned __int8)v33[j];
          if ( v36 != 32 && v36 != 9 )
          {
            v29 = v31 - j;
            v30 = &v33[j];
            goto LABEL_36;
          }
        }
        v29 = 0;
      }
      else
      {
        v34 = (_DWORD *)v143;
        v30 = &k[v25 + 1];
        v29 = 0;
      }
LABEL_36:
      if ( memchr(v30, 9, v29) )
      {
        Curl_cfree(v34[5]);
        Curl_cfree(v34[3]);
        Curl_cfree(v34[4]);
        Curl_cfree(v34[1]);
        Curl_cfree(v34[2]);
        Curl_cfree(v34);
        v16 = 0;
        if ( (*((_BYTE *)&data->set + 1338) & 8) != 0 )
          Curl_infof(data, "cookie contains TAB, dropping");
        return v16;
      }
      v141 = (int)&k[v142 + 1];
    }
    v38 = v29;
    if ( v27 >= 0xFFF || v29 >= 0xFFF || v29 + v27 >= 0x1001 )
    {
      Curl_cfree(*(_DWORD *)(v143 + 20));
      Curl_cfree(*(_DWORD *)(v143 + 12));
      Curl_cfree(*(_DWORD *)(v143 + 16));
      Curl_cfree(*(_DWORD *)(v143 + 4));
      Curl_cfree(*(_DWORD *)(v143 + 8));
      Curl_cfree(v143);
      v16 = 0;
      if ( (*((_BYTE *)&data->set + 1338) & 8) != 0 )
        ((void (__fastcall *)(Curl_easy *, const char *, unsigned int, size_t))Curl_infof)(
          data,
          "oversized cookie dropped, name/val %zu + %zu bytes",
          v27,
          v29);
      return v16;
    }
    if ( v23 == 95 && v27 >= 7 && k[1] == 95 )
    {
      if ( curl_strnequal("__Secure-", k, 9) )
      {
        *(_BYTE *)(v143 + 40) |= 1u;
      }
      else if ( curl_strnequal("__Host-", k, 7) )
      {
        *(_BYTE *)(v143 + 40) |= 2u;
      }
    }
    if ( *(_DWORD *)(v143 + 4) )
    {
      if ( !v29 )
      {
        if ( v27 == 8 )
        {
          if ( curl_strnequal("httponly", k, 8) )
          {
            v37 = (char *)v141;
            *(_BYTE *)(v143 + 35) = 1;
            goto LABEL_150;
          }
        }
        else if ( v27 == 6 && curl_strnequal("secure", k, 6) )
        {
          v37 = (char *)v141;
          if ( !secure && v144->running )
            goto LABEL_302;
          *(_BYTE *)(v143 + 33) = 1;
          goto LABEL_150;
        }
        if ( v140 != 61 )
        {
          v37 = (char *)v141;
          goto LABEL_150;
        }
      }
      if ( v27 == 7 )
      {
        v37 = (char *)v141;
        if ( !curl_strnequal("version", k, 7) )
        {
          if ( curl_strnequal("max-age", k, 7) )
          {
            if ( *v30 == 0x22 )
              ++v30;
            v63 = ((int (__fastcall *)(char *, _DWORD, int, int *))curlx_strtoofft)(v30, 0, 10, v134);
            if ( v63 )
            {
              if ( v63 == 2 )
              {
                *v134 = 0;
                v134[1] = 1;
              }
              else if ( v63 == 1 )
              {
                v134[1] = -1;
                *v134 = 0x7FFFFFFF;
              }
            }
            else
            {
              v69 = *v134;
              v70 = v134[1];
              if ( *(_QWORD *)v134 )
              {
                v71 = v133 >= v69;
                if ( v133 == v69 )
                  v71 = ~v139 >= v70;
                if ( v71 )
                {
                  v134[1] = v70 + v139;
                  *v134 = v69 + (v139 >> 0x1F) + __CFADD__(v70, v139);
                }
                else
                {
                  v134[1] = -1;
                  *v134 = 0x7FFFFFFF;
                }
              }
              else
              {
                *v134 = 0;
                v134[1] = 1;
              }
            }
          }
          else if ( curl_strnequal("expires", k, 7) && v38 < 0x80 && !*(_QWORD *)v134 )
          {
            memcpy(v145, v30, v38);
            *((_BYTE *)v145 + v38) = 0;
            v65 = ((int (__fastcall *)(char **))Curl_getdate_capped)(v145);
            *(_QWORD *)v134 = v65;
            if ( v65 )
            {
              if ( v65 < 0 )
              {
                v134[1] = 0;
                *v134 = 0;
              }
            }
            else
            {
              *v134 = 0;
              v134[1] = 1;
            }
          }
        }
        goto LABEL_150;
      }
      if ( v27 == 6 )
      {
        v50 = curl_strnequal("domain", k, 6);
        if ( !v29 )
        {
          v37 = (char *)v141;
          goto LABEL_150;
        }
        v37 = (char *)v141;
        if ( !v50 )
          goto LABEL_150;
        v51 = (unsigned __int8)*v30;
        if ( v51 == 0x2E )
          ++v30;
        v52 = (__PAIR64__(v38, v51 ^ 0x2Eu) - 1) >> 32;
        if ( v52 == 9 && curl_strnequal(v30, "localhost", 9)
          || (v53 = memchr(v30, 46, v52)) != 0 && (unsigned int)(&v30[v52] - v53) >= 2 )
        {
          v54 = domain;
          v55 = domain;
          if ( !domain )
            v55 = v30;
          is_ipnum = Curl_host_is_ipnum(v55);
          v57 = is_ipnum;
          if ( domain )
          {
            if ( !is_ipnum )
              goto LABEL_97;
LABEL_118:
            domain = v54;
            if ( strncmp(v30, v54, v52) || (v57 = 1, v52 != strlen(v54)) )
            {
LABEL_120:
              v135 = 1;
              if ( (*((_BYTE *)&data->set + 1338) & 8) != 0 )
                ((void (__fastcall *)(Curl_easy *, const char *, char *))Curl_infof)(
                  data,
                  "skipped cookie with bad tailmatch domain: %s",
                  v30);
              goto LABEL_150;
            }
          }
          else
          {
            domain = 0;
          }
        }
        else
        {
          v54 = ":";
          if ( Curl_host_is_ipnum(v54) )
            goto LABEL_118;
LABEL_97:
          v58 = strlen(v54);
          v59 = v54;
          domain = v54;
          if ( v58 < v52 )
            goto LABEL_120;
          v60 = v58;
          v61 = (size_t)&v59[v58 - v52];
          if ( !curl_strnequal(v30, v61, v52) )
            goto LABEL_120;
          v62 = v61;
          v57 = 0;
          if ( v60 != v52 && *(_BYTE *)(v62 - 1) != 46 )
            goto LABEL_120;
        }
        Curl_cfree(*(_DWORD *)(v143 + 20));
        v66 = Curl_memdup(v30, v52 + 1);
        *(_DWORD *)(v143 + 20) = v66;
        if ( !v66 )
          goto LABEL_302;
        *(_BYTE *)(v66 + v52) = 0;
        v67 = *(_DWORD *)(v143 + 20);
        v68 = v67 == 0;
        if ( v57 | v68 )
        {
          if ( !v67 )
            goto LABEL_302;
          v135 |= v68;
        }
        else
        {
          *(_BYTE *)(v143 + 32) = 1;
        }
        goto LABEL_150;
      }
      if ( v27 != 4 )
      {
        v37 = (char *)v141;
        goto LABEL_150;
      }
      if ( !curl_strnequal("path", k, 4) )
      {
        v37 = (char *)v141;
        goto LABEL_150;
      }
      Curl_cfree(*(_DWORD *)(v143 + 12));
      v40 = v29;
      v39 = Curl_memdup(v30, v29 + 1);
      v37 = (char *)v141;
      *(_DWORD *)(v143 + 12) = v39;
      if ( !v39 )
        goto LABEL_302;
      *(_BYTE *)(v39 + v40) = 0;
      if ( !*(_DWORD *)(v143 + 12) )
        goto LABEL_302;
      Curl_cfree(*(_DWORD *)(v143 + 16));
      v41 = (const char *)Curl_cstrdup(*(_DWORD *)(v143 + 12));
      if ( !v41 )
        goto LABEL_294;
      v42 = (char *)v41;
      v43 = strlen(v41);
      if ( *v42 == 34 )
        memmove(v42, v42 + 1, v43--);
      if ( v43 )
      {
        v44 = &v42[v43 - 1];
        if ( *v44 == 34 )
        {
          --v43;
          *v44 = 0;
        }
        if ( *v42 == 47 )
        {
          if ( v43 )
          {
            if ( v42[v43 - 1] == 47 )
              v42[v43 - 1] = 0;
            *(_DWORD *)(v143 + 16) = v42;
          }
          else
          {
            *(_DWORD *)(v143 + 16) = v42;
          }
          goto LABEL_150;
        }
      }
      else if ( *v42 == 47 )
      {
        *(_DWORD *)(v143 + 16) = v42;
        goto LABEL_150;
      }
      Curl_cfree(v42);
      v64 = Curl_memdup("/", 2);
      if ( !v64 )
      {
LABEL_294:
        *(_DWORD *)(v143 + 16) = 0;
        goto LABEL_302;
      }
      *(_BYTE *)(v64 + 1) = 0;
      *(_DWORD *)(v143 + 16) = v64;
    }
    else
    {
      v37 = (char *)v141;
      if ( v140 != 61 )
        goto LABEL_302;
      Curl_cfree(0);
      v45 = Curl_memdup(k, v27 + 1);
      *(_DWORD *)(v143 + 4) = v45;
      if ( v45 )
        *(_BYTE *)(v45 + v27) = 0;
      Curl_cfree(*(_DWORD *)(v143 + 8));
      v46 = Curl_memdup(v30, v38 + 1);
      *(_DWORD *)(v143 + 8) = v46;
      if ( v46 )
        *(_BYTE *)(v46 + v38) = 0;
      v47 = *(const char **)(v143 + 4);
      if ( !v47 )
        goto LABEL_302;
      v48 = *(_DWORD *)(v143 + 8);
      if ( !v48 )
        goto LABEL_302;
      v49 = (const char *)&invalid_octets_badoctets;
      if ( *(_BYTE *)(v48 + strcspn(*(const char **)(v143 + 8), v49)) || v47[strcspn(v47, v49)] )
      {
        if ( (*((_BYTE *)&data->set + 1338) & 8) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
        goto LABEL_302;
      }
    }
LABEL_150:
    for ( k = v37 + 1; ; ++k )
    {
      v72 = (unsigned __int8)*(k - 1);
      if ( v72 != 32 && v72 != 9 )
        break;
    }
  }
  while ( v72 == 59 );
  if ( (v135 & 1) != 0 )
    goto LABEL_302;
  if ( domain )
  {
    if ( !*(_DWORD *)(v143 + 20) )
    {
      v73 = Curl_cstrdup(domain);
      *(_DWORD *)(v143 + 20) = v73;
      if ( !v73 )
        goto LABEL_302;
    }
  }
  v74 = v143;
  if ( !path || *(_DWORD *)(v143 + 12) )
    goto LABEL_299;
  v75 = strchr(path, 63);
  v76 = v75 ? ((int (__fastcall *)(const char *, int, int))Curl_memrchr)(path, 47, v75 - path) : (int)strrchr(path, 47);
  if ( !v76 )
    goto LABEL_299;
  v125 = v76 - (_DWORD)path;
  v126 = (void *)Curl_cmalloc(v76 - (_DWORD)path + 2);
  *(_DWORD *)(v143 + 12) = v126;
  if ( !v126 )
  {
LABEL_302:
    Curl_cfree(*(_DWORD *)(v143 + 20));
    Curl_cfree(*(_DWORD *)(v143 + 12));
    Curl_cfree(*(_DWORD *)(v143 + 16));
    Curl_cfree(*(_DWORD *)(v143 + 4));
    Curl_cfree(*(_DWORD *)(v143 + 8));
    Curl_cfree(v143);
    return 0;
  }
  memcpy(v126, path, v125 + 1);
  v74 = v143;
  *(_BYTE *)(*(_DWORD *)(v143 + 12) + v125 + 1) = 0;
  v127 = (const char *)Curl_cstrdup(*(_DWORD *)(v143 + 12));
  if ( !v127 )
  {
LABEL_301:
    *(_DWORD *)(v143 + 16) = 0;
    goto LABEL_302;
  }
  v128 = (char *)v127;
  v129 = strlen(v127);
  if ( *v128 == 34 )
    memmove(v128, v128 + 1, v129--);
  if ( !v129 )
  {
    if ( *v128 == 47 )
      goto LABEL_298;
LABEL_296:
    Curl_cfree(v128);
    v131 = Curl_memdup("/", 2);
    if ( v131 )
    {
      v128 = (char *)v131;
      *(_BYTE *)(v131 + 1) = 0;
      goto LABEL_298;
    }
    goto LABEL_301;
  }
  v130 = &v128[v129 - 1];
  if ( *v130 == 34 )
  {
    --v129;
    *v130 = 0;
  }
  if ( *v128 != 47 )
    goto LABEL_296;
  if ( v129 && v128[v129 - 1] == 47 )
    v128[v129 - 1] = 0;
LABEL_298:
  *(_DWORD *)(v143 + 16) = v128;
LABEL_299:
  if ( !*(_DWORD *)(v74 + 4) )
    goto LABEL_302;
  v21 = v143;
  v16 = 0;
  ++v137->req.setcookies;
  if ( (*(_BYTE *)(v143 + 40) & 1) != 0 && !*(_BYTE *)(v143 + 33) )
    goto LABEL_237;
  if ( (*(_BYTE *)(v143 + 40) & 2) != 0
    && (!*(_BYTE *)(v143 + 33) || (v103 = *(const char **)(v143 + 12)) == 0
                               || strcmp(v103, "/")
                               || *(_BYTE *)(v143 + 32))
    || !v144->running && v144->newsession && !*(_QWORD *)(v143 + 24) )
  {
    Curl_cfree(*(_DWORD *)(v143 + 20));
    Curl_cfree(*(_DWORD *)(v143 + 12));
    Curl_cfree(*(_DWORD *)(v143 + 16));
    Curl_cfree(*(_DWORD *)(v143 + 4));
    Curl_cfree(*(_DWORD *)(v143 + 8));
    Curl_cfree(v143);
    return v16;
  }
  *(_BYTE *)(v143 + 34) = v144->running;
  v79 = v144->lastct + 1;
  v144->lastct = v79;
  *(_DWORD *)(v143 + 36) = v79;
  if ( !v138 )
  {
    v80 = 0;
    v81 = time(0u);
    v82 = v81 >> 0x1F;
    next_expiration_high = HIDWORD(v144->next_expiration);
    v84 = v81 >> 0x1F >= next_expiration_high;
    next_expiration = v144->next_expiration;
    if ( next_expiration_high == v81 >> 0x1F )
      v84 = v81 >= next_expiration;
    if ( v84 || !(~next_expiration | next_expiration_high ^ 0x7FFFFFFF) )
    {
      LODWORD(v144->next_expiration) = -1;
      HIDWORD(v144->next_expiration) = 0x7FFFFFFF;
      do
      {
        v113 = &v144->cookies[v80];
        v114 = *v113;
        if ( *v113 )
        {
          p_next = 0;
          do
          {
            expires = v114->expires;
            v117 = v114;
            v114 = v114->next;
            if ( !expires )
              goto LABEL_260;
            v118 = SHIDWORD(expires) >= v82;
            if ( HIDWORD(expires) == v82 )
              v118 = (unsigned int)expires >= v81;
            if ( v118 )
            {
LABEL_260:
              if ( expires )
              {
                v119 = HIDWORD(v144->next_expiration);
                v120 = SHIDWORD(expires) >= v119;
                if ( HIDWORD(expires) == v119 )
                  v120 = (unsigned int)expires >= LODWORD(v144->next_expiration);
                p_next = &v117->next;
                if ( !v120 )
                  v144->next_expiration = expires;
              }
              else
              {
                p_next = &v117->next;
              }
            }
            else
            {
              if ( p_next )
                *p_next = v114;
              else
                *v113 = v114;
              --v144->numcookies;
              Curl_cfree(v117->domain);
              Curl_cfree(v117->path);
              Curl_cfree(v117->spath);
              Curl_cfree(v117->name);
              Curl_cfree(v117->value);
              Curl_cfree(v117);
            }
          }
          while ( v114 );
        }
        ++v80;
      }
      while ( v80 != 63 );
    }
  }
  v86 = (Cookie *)v143;
  v87 = &v144->cookies[cookiehash(*(const char *const *)(v143 + 20))];
  next = *v87;
  if ( !*v87 )
  {
    v92 = 0;
    v91 = 0;
    goto LABEL_242;
  }
  v89 = 0;
  v90 = 0;
  v91 = 0;
  while ( 2 )
  {
    v92 = next;
    if ( ((int (__fastcall *)(char *, _DWORD))curl_strequal)(next->name, *(_DWORD *)(v143 + 4)) )
    {
      v93 = *(_DWORD *)(v143 + 20);
      if ( v92->domain )
      {
        if ( v93 && ((int (*)(void))curl_strequal)() )
        {
LABEL_189:
          spath = v92->spath;
          if ( spath )
          {
            v95 = *(_DWORD *)(v143 + 16);
            if ( v95 )
            {
              if ( v92->secure && !*(_BYTE *)(v143 + 33) && !secure )
              {
                v96 = strchr(spath + 1, 47);
                v97 = v96 ? v96 - spath : strlen(spath);
                if ( curl_strnequal(spath, v95, v97) )
                {
                  if ( v137 && (*((_BYTE *)&v137->set + 1338) & 8) != 0 )
                    ((void (__fastcall *)(Curl_easy *, const char *, _DWORD, _DWORD))Curl_infof)(
                      v137,
                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                      *(_DWORD *)(v143 + 4),
                      *(_DWORD *)(v143 + 20));
                  goto LABEL_302;
                }
              }
            }
          }
        }
      }
      else if ( !v93 )
      {
        goto LABEL_189;
      }
    }
    if ( !v89 )
    {
      if ( !((int (__fastcall *)(char *, _DWORD))curl_strequal)(v92->name, *(_DWORD *)(v143 + 4)) )
      {
        v89 = 0;
        goto LABEL_184;
      }
      v98 = *(_DWORD *)(v143 + 20);
      if ( v92->domain )
      {
        if ( v98 && ((int (*)(void))curl_strequal)() )
        {
          v99 = v91 & 1 | (v92->tailmatch == *(unsigned __int8 *)(v143 + 32));
          v91 = 0;
          if ( !v99 )
          {
            v89 = 0;
            goto LABEL_184;
          }
        }
        else
        {
          v100 = (v91 & 1) != 0;
          v91 = 0;
          if ( !v100 )
          {
            v89 = 0;
            goto LABEL_184;
          }
        }
      }
      else
      {
        v101 = v91 & 1 | (v98 == 0);
        v91 = 0;
        if ( !v101 )
        {
          v89 = 0;
          goto LABEL_184;
        }
      }
      v102 = *(_DWORD *)(v143 + 16);
      if ( v92->spath )
      {
        if ( v102 )
        {
          if ( !((int (*)(void))curl_strequal)() )
          {
            v91 = 0;
            v89 = 0;
            goto LABEL_184;
          }
          v91 = 0;
          v89 = 0;
          if ( (v92->spath != 0) == (*(_DWORD *)(v143 + 16) == 0) )
            goto LABEL_184;
        }
        else if ( !*(_DWORD *)(v143 + 16) )
        {
          v91 = 0;
          v89 = 0;
          goto LABEL_184;
        }
      }
      else
      {
        v91 = 0;
        v89 = 0;
        if ( v102 )
          goto LABEL_184;
      }
      v91 = 1;
      if ( *(_BYTE *)(v143 + 34) )
      {
        v90 = v92;
        v89 = (Cookie **)v143;
      }
      else
      {
        v90 = v92;
        v89 = (Cookie **)v143;
        if ( v92->livecookie )
          goto LABEL_302;
      }
    }
LABEL_184:
    next = v92->next;
    if ( v92->next )
      continue;
    break;
  }
  if ( v89 )
  {
    *v89 = v90->next;
    v89[9] = (Cookie *)v90->creationtime;
    Curl_cfree(v90->name);
    Curl_cfree(v90->value);
    Curl_cfree(v90->domain);
    Curl_cfree(v90->path);
    Curl_cfree(v90->spath);
    v104 = v89[7];
    v105 = v89[8];
    v106 = v89[9];
    v107 = (char *)v89[3];
    v108 = (char *)v89[4];
    v109 = (char *)v89[5];
    v110 = v89[6];
    v111 = v89[11];
    *(_DWORD *)&v90->prefix = v89[10];
    *((_DWORD *)&v90->prefix + 1) = v111;
    v90->creationtime = (int)v106;
    *(_DWORD *)&v90->tailmatch = v105;
    LODWORD(v90->expires) = v104;
    HIDWORD(v90->expires) = v110;
    v90->domain = v109;
    v90->spath = v108;
    v90->path = v107;
    v90->value = (char *)v89[2];
    v90->name = (char *)v89[1];
    v90->next = *v89;
    Curl_cfree(v89);
    v86 = v90;
  }
LABEL_242:
  if ( v137 && v144->running && (*((_BYTE *)&v137->set + 1338) & 8) != 0 )
  {
    v112 = v86;
    v121 = "Added";
    if ( (v91 & 1) != 0 )
      v121 = "Replaced";
    ((void (__fastcall *)(Curl_easy *, const char *, const char *, char *))Curl_infof)(
      v137,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
      v121,
      v86->name);
    if ( (v91 & 1) == 0 )
    {
LABEL_270:
      if ( v92 )
        v92->next = v112;
      else
        *v87 = v112;
      ++v144->numcookies;
    }
  }
  else
  {
    v112 = v86;
    if ( (v91 & 1) == 0 )
      goto LABEL_270;
  }
  v122 = v112->expires;
  if ( !v122 )
    return v112;
  v123 = HIDWORD(v144->next_expiration);
  v124 = SHIDWORD(v122) >= v123;
  if ( HIDWORD(v122) == v123 )
    v124 = (unsigned int)v122 >= LODWORD(v144->next_expiration);
  v16 = v112;
  if ( !v124 )
    v144->next_expiration = v122;
  return v16;
}
