Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v8; // ebp
  Cookie *v9; // ebp
  size_t v10; // edi
  size_t v11; // eax
  char v12; // cl
  size_t v13; // edx
  const char *v14; // eax
  const char *v15; // esi
  const char *name; // ebp
  const char *value; // edi
  char v18; // al
  char *v19; // eax
  int v20; // eax
  int v21; // eax
  unsigned int expires; // edi
  unsigned int expires_high; // ebp
  char v24; // al
  int v25; // eax
  char *v26; // eax
  char *v27; // eax
  int v28; // esi
  size_t v29; // edi
  char *v30; // eax
  char *v31; // eax
  char *v32; // eax
  char *v33; // eax
  char *v34; // esi
  int v35; // edi
  int v36; // eax
  const char *v37; // eax
  char *v38; // eax
  int v39; // edi
  int v40; // eax
  int v41; // eax
  int v42; // eax
  Cookie *v43; // esi
  char *v44; // eax
  char *spath; // ecx
  char *v46; // eax
  size_t v47; // eax
  char *v48; // eax
  char *v49; // eax
  Cookie *v50; // edi
  unsigned int v51; // edx
  unsigned int v52; // eax
  char v54; // al
  bool v55; // di
  _BYTE *v56; // eax
  char is_ipnum; // di
  int v58; // eax
  unsigned __int8 prefix; // al
  const char *v60; // eax
  bool running; // al
  size_t v62; // ecx
  Cookie *co; // [esp+1Ch] [ebp-F0h]
  __int64 ptr; // [esp+20h] [ebp-ECh]
  bool ptra; // [esp+20h] [ebp-ECh]
  char ptrb; // [esp+20h] [ebp-ECh]
  const char *ptrd; // [esp+20h] [ebp-ECh]
  const char *ptrc; // [esp+20h] [ebp-ECh]
  char lastc; // [esp+28h] [ebp-E4h]
  Cookie *lastca; // [esp+28h] [ebp-E4h]
  Cookie *lastcb; // [esp+28h] [ebp-E4h]
  size_t nlen; // [esp+2Ch] [ebp-E0h]
  Cookie *nlena; // [esp+2Ch] [ebp-E0h]
  const char *maxage; // [esp+30h] [ebp-DCh]
  size_t maxagea; // [esp+30h] [ebp-DCh]
  char *reject; // [esp+34h] [ebp-D8h]
  bool sep; // [esp+38h] [ebp-D4h]
  int now; // [esp+54h] [ebp-B8h]
  bool v80; // [esp+58h] [ebp-B4h]
  char *tok_buf; // [esp+68h] [ebp-A4h] BYREF
  char date[128]; // [esp+6Ch] [ebp-A0h] BYREF
  unsigned int v83; // [esp+ECh] [ebp-20h]

  v8 = (char *)lineptr;
  v83 = __readgsdword(0x14u);
  now = time(0);
  if ( data->req.setcookies > 0x31u )
    return 0;
  co = (Cookie *)Curl_ccalloc(1, 44);
  if ( !co )
    return 0;
  if ( !httpheader )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v8 = (char *)(lineptr + 10);
      co->httponly = 1;
    }
    if ( *v8 != 35 )
    {
      v32 = strchr(v8, 13);
      if ( v32 )
        *v32 = 0;
      v33 = strchr(v8, 10);
      if ( v33 )
        *v33 = 0;
      v34 = strtok_r(v8, "\t", &tok_buf);
      if ( !v34 )
        goto LABEL_143;
      v35 = 0;
      while ( 1 )
      {
        switch ( v35 )
        {
          case 0:
            v36 = Curl_cstrdup(&v34[*v34 == 46]);
            co->domain = (char *)v36;
            if ( !v36 )
              goto LABEL_238;
            ptra = httpheader;
            goto LABEL_115;
          case 1:
            co->tailmatch = curl_strequal(v34, "TRUE") != 0;
            ptra = httpheader;
            goto LABEL_115;
          case 2:
            if ( !strcmp("TRUE", v34) || !strcmp("FALSE", v34) )
            {
              v39 = Curl_cstrdup("/");
              co->path = (char *)v39;
              v40 = Curl_cstrdup("/");
              co->spath = (char *)v40;
              ptra = 1;
              if ( v40 )
                ptra = v39 == 0;
LABEL_126:
              co->secure = 0;
              if ( curl_strequal(v34, "TRUE") )
              {
                if ( !secure && !c->running )
                {
                  v35 = 3;
LABEL_238:
                  strtok_r(0, "\t", &tok_buf);
                  ptra = 1;
                  if ( v35 == 5 )
                  {
LABEL_239:
                    v58 = Curl_cstrdup(&LC1);
                    co->value = (char *)v58;
                    if ( v58 )
                    {
                      v35 = 7;
                      goto LABEL_241;
                    }
                  }
LABEL_143:
                  freecookie(co);
                  return 0;
                }
                co->secure = 1;
                v35 = 3;
              }
              else
              {
                v35 = 3;
              }
            }
            else
            {
              v37 = (const char *)Curl_cstrdup(v34);
              co->path = (char *)v37;
              if ( !v37 )
                goto LABEL_238;
              v38 = sanitize_cookie_path(v37);
              co->spath = v38;
              if ( !v38 )
                goto LABEL_238;
              ptra = httpheader;
            }
LABEL_115:
            v34 = strtok_r(0, "\t", &tok_buf);
            ++v35;
            if ( !v34 || ptra )
            {
              if ( v35 == 6 )
                goto LABEL_239;
LABEL_241:
              if ( v35 == 7 && !ptra )
                goto LABEL_243;
              goto LABEL_143;
            }
            break;
          case 3:
            ptra = httpheader;
            goto LABEL_126;
          case 4:
            if ( curlx_strtoofft(v34, 0, 10, &co->expires) )
              goto LABEL_238;
            ptra = httpheader;
            goto LABEL_115;
          case 5:
            v41 = Curl_cstrdup(v34);
            co->name = (char *)v41;
            if ( !v41 )
              goto LABEL_238;
            if ( curl_strnequal("__Secure-", v41, 9) )
            {
              co->prefix |= 1u;
              ptra = httpheader;
            }
            else
            {
              ptra = httpheader;
              if ( curl_strnequal("__Host-", co->name, 7) )
                co->prefix |= 2u;
            }
            goto LABEL_115;
          case 6:
            v42 = Curl_cstrdup(v34);
            co->value = (char *)v42;
            if ( !v42 )
              goto LABEL_238;
            ptra = httpheader;
            goto LABEL_115;
          default:
            ptra = httpheader;
            goto LABEL_115;
        }
      }
    }
    Curl_cfree(co);
    return 0;
  }
  v80 = 0;
  if ( strlen(lineptr) > 0x1388 )
  {
    Curl_cfree(co);
    return 0;
  }
LABEL_88:
  while ( 1 )
  {
    v24 = *v8;
    lastc = *v8;
    if ( !*v8 )
      break;
    if ( v24 != 32 && v24 != 9 )
    {
      v10 = strcspn(v8, ";\t\r\n=");
      if ( !v10 )
      {
        v18 = *v8;
        v15 = v8;
        goto LABEL_84;
      }
      goto LABEL_264;
    }
    ++v8;
  }
  v10 = strcspn(v8, ";\t\r\n=");
  if ( !v10 )
    goto LABEL_45;
LABEL_264:
  ptrc = &v8[v10];
  do
  {
    v62 = v10--;
    if ( v8[v10] != 9 && v8[v10] != 32 )
    {
      sep = 0;
      if ( *ptrc != 61 )
      {
        v10 = v62;
        v15 = ptrc;
        maxage = 0;
        nlen = 0;
        goto LABEL_213;
      }
      v10 = v62;
      goto LABEL_268;
    }
  }
  while ( v10 );
  if ( *ptrc != 61 )
  {
    nlen = 0;
    v15 = ptrc;
    maxage = 0;
    sep = 0;
    goto LABEL_216;
  }
LABEL_268:
  maxage = ptrc + 1;
  v11 = strcspn(ptrc + 1, ";\r\n");
  v15 = &ptrc[v11 + 1];
  while ( 1 )
  {
    if ( !v11 )
      goto LABEL_212;
    v12 = ptrc[v11];
    if ( v12 != 32 && v12 != 9 )
      break;
    --v11;
  }
  v13 = v11;
  v14 = ptrc + 1;
  while ( *v14 == 32 || *v14 == 9 )
  {
    ++v14;
    if ( !--v13 )
    {
      maxage = v14;
LABEL_212:
      sep = httpheader;
      nlen = 0;
LABEL_213:
      if ( v10 > 0xFFE || nlen > 0xFFE || v10 + nlen > 0x1000 )
      {
        freecookie(co);
        v9 = 0;
        if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
          Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes");
        return v9;
      }
LABEL_216:
      if ( lastc == 95 && v10 > 6 && v8[1] == 95 )
      {
        if ( curl_strnequal("__Secure-", v8, 9) )
        {
          co->prefix |= 1u;
        }
        else if ( curl_strnequal("__Host-", v8, 7) )
        {
          co->prefix |= 2u;
        }
      }
      if ( !co->name )
      {
        if ( !sep )
          goto LABEL_36;
        strstore(&co->name, v8, v10);
        strstore(&co->value, maxage, nlen);
        name = co->name;
        if ( !name )
          goto LABEL_36;
        value = co->value;
        if ( !value )
          goto LABEL_36;
        if ( value[strcspn(value, badoctets_0)] || name[strcspn(name, badoctets_0)] )
        {
          if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
            Curl_infof(data, "invalid octets in name/value, cookie dropped");
          goto LABEL_36;
        }
        goto LABEL_44;
      }
      if ( nlen )
        goto LABEL_223;
      if ( v10 == 6 )
      {
        if ( curl_strnequal("secure", v8, 6) )
        {
          if ( !secure && c->running )
            goto LABEL_36;
          co->secure = 1;
          goto LABEL_44;
        }
        if ( !sep )
          goto LABEL_44;
LABEL_224:
        if ( v10 == 6 )
        {
          v55 = curl_strnequal("domain", v8, 6) != 0 && nlen != 0;
          if ( !v55 )
            goto LABEL_44;
          if ( *maxage == 46 )
          {
            ++maxage;
            --nlen;
          }
          if ( nlen == 9 && curl_strnequal(maxage, "localhost", 9) )
          {
LABEL_231:
            if ( !domain )
            {
              is_ipnum = Curl_host_is_ipnum(maxage);
              strstore(&co->domain, maxage, nlen);
              if ( !co->domain )
                goto LABEL_36;
              if ( is_ipnum )
                goto LABEL_44;
LABEL_260:
              co->tailmatch = 1;
              goto LABEL_44;
            }
LABEL_206:
            v54 = Curl_host_is_ipnum(domain);
          }
          else
          {
            v56 = memchr(maxage, 46, nlen);
            if ( !v56 )
            {
              domain = ":";
              goto LABEL_206;
            }
            if ( nlen - (v56 - maxage) > 1 )
              goto LABEL_231;
            domain = ":";
            v54 = Curl_host_is_ipnum(":");
          }
          if ( v54 )
          {
            if ( !strncmp(maxage, domain, nlen) && strlen(domain) == nlen )
            {
              strstore(&co->domain, maxage, nlen);
              if ( !co->domain )
                goto LABEL_36;
              goto LABEL_44;
            }
          }
          else if ( cookie_tailmatch(maxage, nlen, domain) )
          {
            strstore(&co->domain, maxage, nlen);
            if ( !co->domain )
              goto LABEL_36;
            goto LABEL_260;
          }
          v80 = v55;
          if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
          {
            Curl_infof(data, "skipped cookie with bad tailmatch domain: %s");
            v80 = v55;
          }
          goto LABEL_44;
        }
LABEL_43:
        if ( v10 == 7 && !curl_strnequal("version", v8, 7) )
        {
          if ( curl_strnequal("max-age", v8, 7) )
          {
            v21 = curlx_strtoofft(&maxage[*maxage == 34], 0, 10, &co->expires);
            switch ( v21 )
            {
              case 1:
                LODWORD(co->expires) = -1;
                HIDWORD(co->expires) = 0x7FFFFFFF;
                break;
              case 2:
                LODWORD(co->expires) = 1;
                HIDWORD(co->expires) = 0;
                break;
              case 0:
                expires = co->expires;
                expires_high = HIDWORD(co->expires);
                if ( co->expires )
                {
                  LODWORD(ptr) = now;
                  if ( 0x7FFFFFFFFFFFFFFFLL - now >= __SPAIR64__(expires_high, expires) )
                  {
                    HIDWORD(ptr) = now >> 31;
                    co->expires = __PAIR64__(expires_high, expires) + ptr;
                  }
                  else
                  {
                    LODWORD(co->expires) = -1;
                    HIDWORD(co->expires) = 0x7FFFFFFF;
                  }
                }
                else
                {
                  LODWORD(co->expires) = 1;
                  HIDWORD(co->expires) = 0;
                }
                break;
            }
          }
          else if ( curl_strnequal("expires", v8, 7) && !co->expires && nlen <= 0x7F )
          {
            memcpy(date, maxage, nlen);
            date[nlen] = 0;
            v20 = Curl_getdate_capped(date);
            if ( v20 )
            {
              if ( v20 >> 31 == -1 )
              {
                LODWORD(co->expires) = 0;
                HIDWORD(co->expires) = 0;
              }
              else
              {
                co->expires = v20;
              }
            }
            else
            {
              LODWORD(co->expires) = 1;
              HIDWORD(co->expires) = 0;
            }
          }
        }
        goto LABEL_44;
      }
      if ( v10 == 8 )
      {
        if ( curl_strnequal("httponly", v8, 8) )
        {
          co->httponly = 1;
          goto LABEL_44;
        }
        if ( !sep )
          goto LABEL_44;
        goto LABEL_43;
      }
      if ( sep )
      {
LABEL_223:
        if ( v10 != 4 )
          goto LABEL_224;
        if ( curl_strnequal("path", v8, 4) )
        {
          strstore(&co->path, maxage, nlen);
          if ( !co->path || (Curl_cfree(co->spath), v19 = sanitize_cookie_path(co->path), (co->spath = v19) == 0) )
          {
LABEL_36:
            freecookie(co);
            return 0;
          }
        }
      }
LABEL_44:
      v18 = *v15;
      if ( !*v15 )
      {
LABEL_45:
        if ( v80 )
          goto LABEL_36;
        if ( !co->domain )
        {
          if ( domain )
          {
            v25 = Curl_cstrdup(domain);
            co->domain = (char *)v25;
            if ( !v25 )
              goto LABEL_36;
          }
        }
        if ( !co->path && path )
        {
          v26 = strchr(path, 63);
          v27 = v26 ? (char *)Curl_memrchr(path, 47, v26 - path) : strrchr(path, 47);
          if ( v27 )
          {
            v28 = v27 - path;
            v29 = v27 - path + 1;
            v30 = (char *)Curl_cmalloc(v27 - path + 2);
            co->path = v30;
            if ( !v30 )
              goto LABEL_36;
            memcpy(v30, path, v29);
            co->path[v28 + 1] = 0;
            v31 = sanitize_cookie_path(co->path);
            co->spath = v31;
            if ( !v31 )
              goto LABEL_36;
          }
        }
        if ( !co->name )
          goto LABEL_36;
        ++data->req.setcookies;
LABEL_243:
        prefix = co->prefix;
        if ( (prefix & 1) != 0 )
        {
          if ( co->secure )
          {
            if ( (prefix & 2) != 0 )
              goto LABEL_246;
LABEL_249:
            running = c->running;
            if ( running || !c->newsession || co->expires )
            {
              co->livecookie = running;
              ptrd = (const char *)c->lastct;
              c->lastct = (int)(ptrd + 1);
              co->creationtime = (int)(ptrd + 1);
              if ( !noexpire )
                remove_expired(c);
              maxagea = cookiehash(co->domain);
              v43 = c->cookies[maxagea];
              lastcb = v43;
              if ( v43 )
              {
                ptrb = 0;
                v50 = 0;
                nlena = 0;
                while ( 1 )
                {
                  if ( !curl_strequal(v43->name, co->name) )
                    goto LABEL_151;
                  v44 = v43->domain;
                  if ( v44 )
                  {
                    if ( !co->domain || !curl_strequal(v44, co->domain) )
                      goto LABEL_151;
                  }
                  else if ( co->domain )
                  {
                    goto LABEL_151;
                  }
                  spath = v43->spath;
                  if ( spath )
                  {
                    lastca = (Cookie *)co->spath;
                    if ( lastca )
                    {
                      if ( v43->secure && !co->secure && !secure )
                      {
                        reject = v43->spath;
                        v46 = strchr(spath + 1, 47);
                        v47 = v46 ? v46 - reject : strlen(reject);
                        if ( curl_strnequal(reject, lastca, v47) )
                        {
                          if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
                            Curl_infof(data, "cookie '%s' for domain '%s' dropped, would overlay an existing cookie");
                          goto LABEL_168;
                        }
                      }
                    }
                  }
LABEL_151:
                  if ( v50 || !curl_strequal(v43->name, co->name) )
                    goto LABEL_152;
                  v48 = v43->domain;
                  if ( v48 )
                  {
                    if ( !co->domain || !curl_strequal(v48, co->domain) || v43->tailmatch != co->tailmatch )
                    {
LABEL_177:
                      if ( !ptrb )
                        goto LABEL_204;
                    }
                  }
                  else if ( co->domain )
                  {
                    goto LABEL_177;
                  }
                  v49 = v43->spath;
                  if ( v49 && (!co->spath || !curl_strequal(v49, co->spath)) || (v43->spath == 0) != (co->spath == 0) )
                  {
LABEL_204:
                    ptrb = 0;
                    goto LABEL_152;
                  }
                  ptrb = co->livecookie;
                  if ( ptrb )
                  {
                    nlena = v43;
                    v50 = co;
                  }
                  else
                  {
                    if ( v43->livecookie )
                      goto LABEL_168;
                    nlena = v43;
                    v50 = co;
                    ptrb = 1;
                  }
LABEL_152:
                  if ( !v43->next )
                  {
                    lastcb = v43;
                    v9 = nlena;
                    if ( v50 )
                    {
                      v50->next = nlena->next;
                      v50->creationtime = nlena->creationtime;
                      Curl_cfree(nlena->name);
                      Curl_cfree(nlena->value);
                      Curl_cfree(nlena->domain);
                      Curl_cfree(nlena->path);
                      Curl_cfree(nlena->spath);
                      nlena->next = v50->next;
                      nlena->name = v50->name;
                      nlena->value = v50->value;
                      nlena->path = v50->path;
                      nlena->spath = v50->spath;
                      nlena->domain = v50->domain;
                      LODWORD(nlena->expires) = v50->expires;
                      HIDWORD(nlena->expires) = HIDWORD(v50->expires);
                      *(_DWORD *)&nlena->tailmatch = *(_DWORD *)&v50->tailmatch;
                      nlena->creationtime = v50->creationtime;
                      *(_DWORD *)&nlena->prefix = *(_DWORD *)&v50->prefix;
                      Curl_cfree(v50);
                    }
                    else
                    {
                      v9 = co;
                    }
                    if ( !c->running )
                      goto LABEL_190;
                    goto LABEL_196;
                  }
                  v43 = v43->next;
                }
              }
              if ( !c->running )
              {
                v9 = co;
LABEL_258:
                c->cookies[maxagea] = v9;
                goto LABEL_200;
              }
              v9 = co;
              ptrb = 0;
LABEL_196:
              if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
                Curl_infof(data, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld");
LABEL_190:
              if ( !ptrb )
              {
                if ( !lastcb )
                  goto LABEL_258;
                lastcb->next = v9;
LABEL_200:
                ++c->numcookies;
              }
              v51 = v9->expires;
              v52 = HIDWORD(v9->expires);
              if ( v9->expires && __SPAIR64__(v52, v51) < c->next_expiration )
              {
                LODWORD(c->next_expiration) = v51;
                HIDWORD(c->next_expiration) = v52;
              }
              return v9;
            }
          }
        }
        else
        {
          if ( (prefix & 2) == 0 )
            goto LABEL_249;
          if ( co->secure )
          {
LABEL_246:
            v60 = co->path;
            if ( v60 && !strcmp(v60, "/") && !co->tailmatch )
              goto LABEL_249;
          }
        }
LABEL_168:
        freecookie(co);
        return 0;
      }
LABEL_84:
      while ( v18 == 32 || v18 == 9 )
      {
        v18 = *++v15;
        if ( !*v15 )
          goto LABEL_45;
      }
      if ( v18 != 59 )
        goto LABEL_45;
      v8 = (char *)(v15 + 1);
      goto LABEL_88;
    }
  }
  nlen = v13;
  maxage = v14;
  if ( !memchr(v14, 9, v13) )
  {
    sep = httpheader;
    goto LABEL_213;
  }
  freecookie(co);
  v9 = 0;
  if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
    Curl_infof(data, "cookie contains TAB, dropping");
  return v9;
}
