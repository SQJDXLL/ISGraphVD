Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v8; // r5
  const char *v10; // r0
  unsigned int v11; // r3
  Cookie *v12; // r4
  const char *v13; // r3
  bool v14; // zf
  size_t v15; // r0
  size_t v16; // r7
  char *v17; // r8
  size_t v18; // r2
  int v19; // r3
  bool v20; // zf
  unsigned __int8 *v21; // r6
  size_t v22; // r10
  char *v23; // r8
  int v24; // r3
  int v25; // t1
  bool v26; // zf
  unsigned __int8 *v27; // r3
  int v28; // r8
  int v29; // t1
  bool v30; // zf
  const char *v31; // r8
  bool v32; // cc
  _BOOL4 v33; // r3
  unsigned __int8 v34; // r3
  const char *v35; // r5
  char *v36; // r6
  char *v37; // r0
  const char *v38; // r2
  int v39; // r3
  int v40; // t1
  bool v41; // zf
  int v42; // r0
  bool v43; // zf
  _BYTE *v44; // r0
  const char *v45; // r0
  int is_ipnum; // r0
  int v47; // r5
  bool v48; // zf
  void *v49; // r0
  int v50; // r0
  __int64 v51; // r2
  int v52; // r0
  _BOOL4 v53; // r3
  int v54; // r0
  _BOOL4 v55; // r3
  char *v56; // r0
  char *v57; // r0
  const char *v58; // r0
  CookieInfo *v59; // r2
  int v60; // r3
  size_t v61; // r0
  int livecookie; // r5
  Cookie *v63; // r7
  Cookie *v64; // r8
  Cookie **p_next; // r10
  Cookie *v66; // r6
  size_t tailmatch; // r2
  char *name; // r0
  char *v69; // r1
  char *value; // r2
  char *v71; // r3
  char *v72; // r1
  int expires; // r2
  int expires_high; // r3
  int creationtime; // r1
  int v76; // r2
  int v77; // r3
  time_t v78; // r3
  const char *v79; // r2
  curl_off_t v80; // r2
  time_t v81; // r0
  int v82; // r1
  int v83; // r0
  size_t v84; // r5
  char *v85; // r0
  char *v86; // r0
  char *v87; // r0
  unsigned __int8 v88; // r8
  int v89; // r6
  char *v90; // r0
  char *v91; // r5
  int v92; // r10
  int v93; // r0
  char *v94; // r0
  int v95; // r0
  int (__fastcall *v96)(const char *); // r8
  const char *v97; // r0
  unsigned int v98; // r6
  int v99; // r0
  int (__fastcall *v100)(const char *); // r1
  unsigned int v101; // r8
  int v102; // r0
  unsigned int v103; // r6
  int v104; // r1
  char *v105; // r0
  char *v106; // r1
  const char *spath; // r11
  char *v108; // r0
  char *v109; // r1
  char *v110; // r10
  char *v111; // r0
  size_t v112; // r2
  bool v113; // zf
  char *v114; // r0
  char *v115; // r1
  int v117; // [sp+0h] [bp-F8h] BYREF
  size_t myhash; // [sp+18h] [bp-E0h]
  time_t now; // [sp+1Ch] [bp-DCh]
  char *s; // [sp+20h] [bp-D8h]
  const char *v121; // [sp+24h] [bp-D4h]
  const char *badcookie; // [sp+28h] [bp-D0h]
  const char *ptr; // [sp+2Ch] [bp-CCh]
  int v124; // [sp+30h] [bp-C8h]
  const char *domain_0; // [sp+34h] [bp-C4h]
  _BOOL4 v126; // [sp+38h] [bp-C0h]
  const char *v127; // [sp+3Ch] [bp-BCh]
  _BOOL4 v128; // [sp+40h] [bp-B8h]
  char *reject; // [sp+44h] [bp-B4h]
  char *tok_buf; // [sp+48h] [bp-B0h] BYREF
  char date[128]; // [sp+4Ch] [bp-ACh] BYREF

  v128 = noexpire;
  badcookie = (const char *)httpheader;
  s = (char *)path;
  v126 = secure;
  myhash = (size_t)data;
  now = (time_t)c;
  v8 = (char *)lineptr;
  v10 = (const char *)time(0u);
  v11 = *(unsigned __int8 *)(myhash + 276);
  v121 = v10;
  if ( v11 > 0x31 )
    return 0;
  v12 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v12 )
    return 0;
  if ( !badcookie )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v8 = (char *)(lineptr + 0xA);
      v12->httponly = 1;
    }
    if ( *v8 == 35 )
      goto LABEL_7;
    v87 = strchr(v8, 13);
    v88 = 0;
    v89 = 0;
    if ( v87 )
      *v87 = 0;
    v90 = strchr(v8, 10);
    if ( v90 )
      *v90 = 0;
    v121 = "__Secure-";
    badcookie = "__Host-";
    v91 = strtok_r(v8, "\t", &tok_buf);
    while ( 1 )
    {
      v92 = v91 && (v88 ^ 1) & 1;
      if ( !v92 )
        break;
      switch ( v89 )
      {
        case 0:
          if ( *v91 == 46 )
            ++v91;
          v94 = (char *)Curl_cstrdup(v91);
          v12->domain = v94;
          goto LABEL_220;
        case 1:
          v12->tailmatch = curl_strequal(v91, "TRUE") != 0;
          goto LABEL_223;
        case 2:
          v95 = strcmp("TRUE", v91);
          v96 = (int (__fastcall *)(const char *))Curl_cstrdup;
          s = (char *)&Curl_cstrdup;
          if ( !v95 || !strcmp("FALSE", v91) )
          {
            v98 = (unsigned int)"/";
            v99 = v96("/");
            v100 = *(int (__fastcall **)(const char *))s;
            v101 = v99;
            v12->path = (char *)v99;
            v102 = v100("/");
            if ( v102 )
              v98 = __clz(v101);
            v12->spath = (char *)v102;
            if ( v102 )
              v103 = v98 >> 5;
            else
              LOBYTE(v103) = v92;
LABEL_234:
            v12->secure = 0;
            if ( curl_strequal(v91, "TRUE") )
            {
              if ( v126 || *(_BYTE *)(now + 272) )
              {
                v12->secure = 1;
                goto LABEL_238;
              }
            }
            else
            {
LABEL_238:
              LOBYTE(v92) = v103;
            }
            v89 = 3;
            goto LABEL_221;
          }
          v97 = (const char *)v96(v91);
          v12->path = (char *)v97;
          if ( v97 )
          {
            v94 = sanitize_cookie_path(v97);
            v12->spath = v94;
LABEL_220:
            LOBYTE(v92) = v94 == 0;
          }
LABEL_221:
          ++v89;
          v88 = v92;
          v91 = strtok_r(0u, "\t", &tok_buf);
          break;
        case 3:
          LOBYTE(v103) = 0;
          goto LABEL_234;
        case 4:
          LOBYTE(v92) = curlx_strtoofft(v91, 0, 10, &v12->expires) != 0;
          goto LABEL_221;
        case 5:
          v104 = Curl_cstrdup(v91);
          v12->name = (char *)v104;
          if ( !v104 )
            goto LABEL_221;
          v92 = curl_strnequal(v121, v104, 9);
          if ( v92 )
          {
            v12->prefix |= 1u;
LABEL_223:
            LOBYTE(v92) = 0;
          }
          else if ( curl_strnequal(badcookie, v12->name, 7) )
          {
            v12->prefix |= 2u;
          }
          else
          {
            LOBYTE(v92) = 0;
          }
          goto LABEL_221;
        case 6:
          v94 = (char *)Curl_cstrdup(v91);
          v12->value = v94;
          goto LABEL_220;
        default:
          goto LABEL_223;
      }
    }
    if ( v89 == 6 )
    {
      v93 = Curl_cstrdup(&LC2);
      if ( v93 )
        v89 = 7;
      v12->value = (char *)v93;
      if ( !v93 )
        goto LABEL_65;
    }
    if ( v89 != 7 )
      v88 |= 1u;
    if ( v88 )
      goto LABEL_65;
LABEL_158:
    if ( (v12->prefix & 1) != 0 && !v12->secure )
      goto LABEL_65;
    if ( (v12->prefix & 2) != 0 )
    {
      if ( !v12->secure )
        goto LABEL_65;
      v58 = v12->path;
      if ( !v58 || strcmp(v58, "/") || v12->tailmatch )
        goto LABEL_65;
    }
    if ( !*(_BYTE *)(now + 272) && *(_BYTE *)(now + 273) && !v12->expires )
      goto LABEL_65;
    v59 = (CookieInfo *)now;
    v60 = *(_DWORD *)(now + 268);
    v12->livecookie = *(_BYTE *)(now + 272);
    v59->lastct = ++v60;
    v12->creationtime = v60;
    if ( !v128 )
      remove_expired(v59);
    v61 = cookiehash(v12->domain);
    livecookie = 0;
    v63 = 0;
    v64 = 0;
    p_next = 0;
    v66 = *(Cookie **)(now + 4 * v61);
    tailmatch = v61;
    s = (char *)v61;
    while ( 1 )
    {
      if ( !v66 )
      {
        if ( v64 )
        {
          name = v63->name;
          v64->next = v63->next;
          v64->creationtime = v63->creationtime;
          Curl_cfree(name);
          Curl_cfree(v63->value);
          Curl_cfree(v63->domain);
          Curl_cfree(v63->path);
          Curl_cfree(v63->spath);
          v69 = v64->name;
          value = v64->value;
          v71 = v64->path;
          v63->next = v64->next;
          v63->name = v69;
          v63->value = value;
          v63->path = v71;
          v72 = v64->domain;
          expires = v64->expires;
          expires_high = HIDWORD(v64->expires);
          v63->spath = v64->spath;
          v63->domain = v72;
          LODWORD(v63->expires) = expires;
          HIDWORD(v63->expires) = expires_high;
          creationtime = v64->creationtime;
          v76 = *(_DWORD *)&v64->prefix;
          v77 = *((_DWORD *)&v64->prefix + 1);
          *(_DWORD *)&v63->tailmatch = *(_DWORD *)&v64->tailmatch;
          v63->creationtime = creationtime;
          *(_DWORD *)&v63->prefix = v76;
          *((_DWORD *)&v63->prefix + 1) = v77;
          Curl_cfree(v64);
          v12 = v63;
        }
        v78 = *(unsigned __int8 *)(now + 272);
        if ( *(_BYTE *)(now + 272) )
        {
          v78 = *(unsigned __int8 *)(myhash + 1618);
          if ( (v78 & 0x10) != 0 )
          {
            if ( livecookie )
              v79 = "Replaced";
            else
              v79 = "Added";
            Curl_infof(
              myhash,
              "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
              v79,
              v12->name,
              v12->value,
              v12->domain,
              v12->path,
              v12->expires);
          }
        }
        if ( !livecookie )
        {
          if ( p_next )
          {
            *p_next = v12;
          }
          else
          {
            v78 = now;
            tailmatch = (size_t)s;
          }
          if ( !p_next )
            *(_DWORD *)(v78 + 4 * tailmatch) = v12;
          ++*(_DWORD *)(now + 264);
        }
        v80 = v12->expires;
        if ( v80 )
        {
          v81 = (unsigned __int64)(v80 - *(_QWORD *)(now + 256)) >> 32;
          if ( v80 < *(_QWORD *)(now + 256) )
            v81 = now;
          v82 = now + 0x100;
          if ( v80 < *(_QWORD *)(now + 256) )
          {
            *(_DWORD *)(v81 + 256) = v80;
            *(_DWORD *)(v82 + 4) = HIDWORD(v80);
          }
        }
        return v12;
      }
      if ( curl_strequal(v66->name, v12->name) )
      {
        v105 = v66->domain;
        v106 = v12->domain;
        if ( v105 )
        {
          if ( !v106 || !curl_strequal(v105, v106) )
            goto LABEL_253;
        }
        else if ( v106 )
        {
          goto LABEL_253;
        }
        spath = v66->spath;
        if ( spath )
        {
          v110 = v12->spath;
          if ( v110 )
          {
            if ( v66->secure )
            {
              tailmatch = v126;
              if ( !v126 && !v12->secure )
              {
                v111 = strchr(spath + 1, 47);
                v112 = v111 ? v111 - spath : strlen(spath);
                if ( curl_strnequal(spath, v110, v112) )
                {
                  if ( (*(_BYTE *)(myhash + 1618) & 0x10) != 0 )
                    Curl_infof(
                      myhash,
                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                      v12->name,
                      v12->domain);
                  goto LABEL_65;
                }
              }
            }
          }
        }
      }
LABEL_253:
      if ( v64 || !curl_strequal(v66->name, v12->name) )
        goto LABEL_258;
      v108 = v66->domain;
      v109 = v12->domain;
      if ( v108 )
      {
        if ( !v109 || !curl_strequal(v108, v109) )
        {
LABEL_257:
          if ( !livecookie )
            goto LABEL_258;
          goto LABEL_274;
        }
        tailmatch = v66->tailmatch;
        v113 = tailmatch == v12->tailmatch;
      }
      else
      {
        v113 = v109 == 0;
      }
      if ( !v113 )
        goto LABEL_257;
LABEL_274:
      v114 = v66->spath;
      v115 = v12->spath;
      if ( !v114 )
        goto LABEL_275;
      if ( !v115 )
      {
        v64 = 0;
LABEL_276:
        livecookie = 0;
        goto LABEL_258;
      }
      livecookie = curl_strequal(v114, v115);
      if ( livecookie )
      {
LABEL_275:
        tailmatch = v66->spath == 0;
        if ( tailmatch != (v12->spath == 0) )
          goto LABEL_276;
        livecookie = v12->livecookie;
        if ( v12->livecookie )
        {
          v63 = v66;
          v64 = v12;
        }
        else
        {
          if ( v66->livecookie )
            goto LABEL_65;
          v63 = v66;
          v64 = v12;
          livecookie = 1;
        }
      }
LABEL_258:
      p_next = &v66->next;
      v66 = v66->next;
    }
  }
  if ( strlen(lineptr) > (unsigned int)&loc_1388 )
  {
LABEL_7:
    Curl_cfree(v12);
    return 0;
  }
  v124 = 0;
  reject = ";\t\r\n=";
  v127 = ":";
  while ( 1 )
  {
    while ( 1 )
    {
      v13 = (const char *)(unsigned __int8)*v8;
      ptr = v13;
      if ( !v13 )
        break;
      v14 = v13 == (_BYTE *)&loc_8 + 1;
      if ( v13 != (_BYTE *)&loc_8 + 1 )
        v14 = v13 == (const char *)&loc_20;
      if ( !v14 )
        break;
      ++v8;
    }
    v15 = strcspn(v8, reject);
    v16 = v15;
    if ( !v15 )
    {
      domain_0 = v8;
      goto LABEL_77;
    }
    v17 = &v8[v15];
    while ( 1 )
    {
      v18 = v16--;
      v19 = (unsigned __int8)v8[v16];
      v20 = v19 == 9;
      if ( v19 != 9 )
        v20 = v19 == 32;
      if ( !v20 )
        break;
      if ( !v16 )
        goto LABEL_22;
    }
    v16 = v18;
LABEL_22:
    if ( *v17 == 61 )
    {
      v21 = (unsigned __int8 *)(v17 + 1);
      v22 = strcspn(v17 + 1, ";\r\n");
      v23 = &v17[v22];
      domain_0 = (const char *)&v21[v22];
      while ( 1 )
      {
        if ( !v22 )
          goto LABEL_47;
        v25 = (unsigned __int8)*v23--;
        v24 = v25;
        v26 = v25 == 9;
        if ( v25 != 9 )
          v26 = v24 == 32;
        if ( !v26 )
          break;
        --v22;
      }
      v27 = v21;
      while ( 1 )
      {
        v21 = v27;
        v29 = *v27++;
        v28 = v29;
        v30 = v29 == 9;
        if ( v29 != 9 )
          v30 = v28 == 32;
        v31 = (const char *)v30;
        if ( !v30 )
          break;
        --v22;
        v21 = v27;
        if ( !v22 )
          goto LABEL_40;
      }
      if ( memchr(v21, 9, v22) )
      {
        freecookie(v12);
        if ( (*(_BYTE *)(myhash + 1618) & 0x10) != 0 )
          Curl_infof(myhash, "cookie contains TAB, dropping");
        return 0;
      }
LABEL_47:
      v31 = badcookie;
    }
    else
    {
      v21 = 0;
      domain_0 = &v8[v15];
      v22 = 0;
      v31 = 0;
    }
LABEL_40:
    v32 = v22 > 0xFFE;
    if ( v22 <= 0xFFE )
      v32 = v16 > 0xFFE;
    if ( v32 || v16 + v22 > 0x1000 )
    {
      freecookie(v12);
      if ( (*(_BYTE *)(myhash + 1618) & 0x10) != 0 )
        Curl_infof(myhash, "oversized cookie dropped, name/val %zu + %zu bytes", v16, v22);
      return 0;
    }
    v33 = v16 > 6;
    if ( ptr != (_BYTE *)&loc_5C + 3 )
      v33 = 0;
    if ( v33 && v8[1] == 95 )
    {
      if ( curl_strnequal("__Secure-", v8, 9) )
      {
        v34 = v12->prefix | 1;
      }
      else
      {
        if ( !curl_strnequal("__Host-", v8, 7) )
          goto LABEL_57;
        v34 = v12->prefix | 2;
      }
      v12->prefix = v34;
    }
LABEL_57:
    if ( !v12->name )
    {
      if ( !v31 )
        goto LABEL_65;
      strstore(&v12->name, v8, v16);
      strstore(&v12->value, (const char *)v21, v22);
      v35 = v12->name;
      if ( !v35 )
        goto LABEL_65;
      v36 = v12->value;
      if ( !v36 )
        goto LABEL_65;
      if ( v36[strcspn(v12->value, badoctets_0)] || v35[strcspn(v35, badoctets_0)] )
      {
        if ( (*(_BYTE *)(myhash + 1618) & 0x10) != 0 )
          Curl_infof(myhash, "invalid octets in name/value, cookie dropped");
        goto LABEL_65;
      }
      goto LABEL_77;
    }
    if ( !v22 )
    {
      if ( v16 != 6 )
      {
        if ( v16 == 8 )
        {
          if ( curl_strnequal("httponly", v8, 8) )
            v12->httponly = 1;
          goto LABEL_77;
        }
        if ( !v31 )
          goto LABEL_77;
        goto LABEL_67;
      }
      if ( curl_strnequal("secure", v8, 6) )
      {
        if ( !v126 && *(_BYTE *)(now + 272) )
          goto LABEL_65;
        v12->secure = 1;
        goto LABEL_77;
      }
      if ( !v31 )
        goto LABEL_77;
LABEL_91:
      v42 = curl_strnequal("domain", v8, 6);
      v43 = v42 == 0;
      if ( v42 )
        v43 = v22 == 0;
      if ( v43 )
        goto LABEL_77;
      if ( *v21 == 46 )
      {
        --v22;
        ++v21;
      }
      if ( v22 == 9 && curl_strnequal(v21, "localhost", 9) )
        goto LABEL_103;
      v44 = memchr(v21, 46, v22);
      if ( v44 )
      {
        if ( v22 - (v44 - v21) > 1 )
        {
LABEL_103:
          if ( domain )
            v45 = domain;
          else
            v45 = (const char *)v21;
          goto LABEL_106;
        }
        domain = v127;
      }
      else
      {
        domain = ":";
      }
      v45 = domain;
LABEL_106:
      is_ipnum = Curl_host_is_ipnum(v45);
      v47 = is_ipnum;
      if ( !domain )
        goto LABEL_107;
      if ( is_ipnum )
      {
        if ( !strncmp((const char *)v21, domain, v22) && strlen(domain) == v22 )
        {
LABEL_107:
          strstore(&v12->domain, (const char *)v21, v22);
          if ( !v12->domain )
            goto LABEL_65;
          if ( !v47 )
            v12->tailmatch = 1;
          goto LABEL_77;
        }
      }
      else if ( cookie_tailmatch((const char *)v21, v22, domain) )
      {
        goto LABEL_107;
      }
      if ( (*(_BYTE *)(myhash + 1618) & 0x10) != 0 )
        Curl_infof(myhash, "skipped cookie with bad tailmatch domain: %s", (const char *)v21);
      v124 = 1;
      goto LABEL_77;
    }
LABEL_67:
    if ( v16 == 4 )
    {
      if ( curl_strnequal("path", v8, 4) )
      {
        strstore(&v12->path, (const char *)v21, v22);
        if ( !v12->path )
          goto LABEL_65;
        Curl_cfree(v12->spath);
        v37 = sanitize_cookie_path(v12->path);
        v12->spath = v37;
        if ( !v37 )
          goto LABEL_65;
      }
      goto LABEL_77;
    }
    if ( v16 == 6 )
      goto LABEL_91;
    if ( v16 != 7 || curl_strnequal("version", v8, 7) )
      goto LABEL_77;
    if ( curl_strnequal("max-age", v8, 7) )
    {
      if ( *v21 == 34 )
        ++v21;
      v52 = curlx_strtoofft(v21, 0, 10, &v12->expires);
      switch ( v52 )
      {
        case 1:
          goto LABEL_143;
        case 2:
          goto LABEL_139;
        case 0:
          if ( !v12->expires )
            goto LABEL_139;
          if ( __SPAIR64__(0x7FFFFFFF - ((int)v121 >> 0x1F), ~(unsigned int)v121) < v12->expires )
          {
LABEL_143:
            v51 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_144;
          }
          v12->expires += (int)v121;
          break;
      }
    }
    else
    {
      if ( !curl_strnequal("expires", v8, 7) )
        goto LABEL_77;
      v48 = v22 == 127;
      if ( v22 <= 0x7F )
        v48 = v12->expires == 0;
      if ( !v48 )
        goto LABEL_77;
      v49 = memcpy(date, v21, v22);
      *((_BYTE *)&v117 + v22 + 0x4C) = 0;
      v50 = Curl_getdate_capped(v49);
      if ( !v50 )
      {
LABEL_139:
        LODWORD(v51) = 1;
        goto LABEL_140;
      }
      if ( v50 < 0 )
      {
        LODWORD(v51) = 0;
LABEL_140:
        HIDWORD(v51) = 0;
LABEL_144:
        v12->expires = v51;
        goto LABEL_77;
      }
      v12->expires = v50;
    }
LABEL_77:
    v38 = domain_0;
    do
    {
      v40 = *(unsigned __int8 *)v38++;
      v39 = v40;
      if ( !v40 )
        goto LABEL_145;
      v41 = v39 == 9;
      if ( v39 != 9 )
        v41 = v39 == 32;
    }
    while ( v41 );
    if ( v39 != 59 )
      break;
    v8 = (char *)v38;
  }
LABEL_145:
  if ( !v124 )
  {
    v53 = v12->domain == 0;
    if ( !domain )
      v53 = 0;
    if ( !v53 || (v54 = Curl_cstrdup(domain), (v12->domain = (char *)v54) != 0) )
    {
      v55 = v12->path == 0;
      if ( !s )
        v55 = 0;
      if ( !v55 )
        goto LABEL_291;
      v56 = strchr(s, 63);
      v57 = v56 ? (char *)Curl_memrchr(s, 47, v56 - s) : strrchr(s, 47);
      if ( !v57 )
        goto LABEL_291;
      v83 = v57 - s;
      v84 = v83 + 1;
      v85 = (char *)Curl_cmalloc(v83 + 2);
      v12->path = v85;
      if ( v85 )
      {
        memcpy(v85, s, v84);
        v12->path[v84] = 0;
        v86 = sanitize_cookie_path(v12->path);
        v12->spath = v86;
        if ( v86 )
        {
LABEL_291:
          if ( v12->name )
          {
            ++*(_BYTE *)(myhash + 276);
            goto LABEL_158;
          }
        }
      }
    }
  }
LABEL_65:
  freecookie(v12);
  return 0;
}
