Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  Cookie *v10; // r12
  bool v11; // bl
  size_t v12; // rbp
  size_t v13; // r15
  char v14; // dl
  bool v15; // al
  _BYTE *v16; // r13
  const char *v17; // r12
  bool v18; // bl
  _BYTE *v19; // rax
  char v20; // al
  const char *name; // rbx
  char *value; // rbp
  char v23; // al
  const char *v24; // r13
  char *v25; // rax
  int v26; // eax
  curl_off_t expires; // rdx
  __int64 v28; // rax
  __int64 v29; // rax
  bool v30; // zf
  __int64 v31; // rdx
  __int64 v32; // rax
  char v33; // al
  __int64 v34; // rax
  char *v35; // rax
  char *v36; // rbx
  signed __int64 v37; // rbx
  char *v38; // rdi
  char *v39; // rax
  char *v40; // rax
  char *v41; // rax
  char *v42; // rbx
  int v43; // ebp
  __int64 v44; // rax
  bool v45; // r13
  const char *v46; // rdi
  char *v47; // rax
  __int64 v48; // rbp
  __int64 v49; // rax
  __int64 v50; // rax
  __int64 v51; // rax
  Cookie *v52; // rbx
  char *v53; // rdi
  char *v54; // rsi
  const char *spath; // r13
  char *v56; // r15
  char *v57; // rax
  size_t v58; // rdx
  char *v59; // rdi
  char *v60; // rsi
  char *v61; // rdi
  char *v62; // rsi
  char livecookie; // r14
  __m128i *v64; // rbp
  size_t v65; // r15
  curl_off_t v66; // rax
  const char *v67; // rdx
  char is_ipnum; // bl
  __int64 v70; // rax
  unsigned __int8 prefix; // al
  const char *v72; // rdi
  bool running; // al
  const char *v74; // rsi
  size_t v75; // rdx
  char replace_clist; // [rsp+8h] [rbp-120h]
  __m128i *replace_clista; // [rsp+8h] [rbp-120h]
  int replace_clistb; // [rsp+8h] [rbp-120h]
  Cookie *co; // [rsp+10h] [rbp-118h]
  size_t myhasha; // [rsp+18h] [rbp-110h]
  time_t now; // [rsp+40h] [rbp-E8h]
  bool badcookie; // [rsp+4Fh] [rbp-D9h]
  char *tok_buf; // [rsp+58h] [rbp-D0h] BYREF
  char date[128]; // [rsp+60h] [rbp-C8h] BYREF
  unsigned __int64 v90; // [rsp+E8h] [rbp-40h]

  v90 = __readfsqword(0x28u);
  now = time(0LL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  co = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !co )
    return 0LL;
  if ( !httpheader )
  {
    tok_buf = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 10;
      co->httponly = 1;
    }
    if ( *lineptr != 35 )
    {
      v40 = strchr(lineptr, 13);
      if ( v40 )
        *v40 = 0;
      v41 = strchr(lineptr, 10);
      if ( v41 )
        *v41 = 0;
      v42 = strtok_r((char *)lineptr, "\t", &tok_buf);
      if ( !v42 )
        goto LABEL_170;
      v43 = 0;
      while ( 1 )
      {
        switch ( v43 )
        {
          case 0:
            v44 = Curl_cstrdup(&v42[*v42 == 46]);
            co->domain = (char *)v44;
            if ( !v44 )
              goto LABEL_244;
            v45 = httpheader;
            goto LABEL_142;
          case 1:
            co->tailmatch = (unsigned int)curl_strequal(v42, "TRUE") != 0;
            v45 = httpheader;
            goto LABEL_142;
          case 2:
            if ( !strcmp("TRUE", v42) || !strcmp("FALSE", v42) )
            {
              v48 = Curl_cstrdup("/");
              co->path = (char *)v48;
              v49 = Curl_cstrdup("/");
              co->spath = (char *)v49;
              v45 = 1;
              if ( v49 )
                v45 = v48 == 0;
LABEL_153:
              co->secure = 0;
              if ( (unsigned int)curl_strequal(v42, "TRUE") )
              {
                if ( !secure && !c->running )
                {
                  v43 = 3;
LABEL_244:
                  strtok_r(0LL, "\t", &tok_buf);
                  v45 = 1;
                  if ( v43 == 5 )
                  {
LABEL_245:
                    v70 = Curl_cstrdup(&LC1);
                    co->value = (char *)v70;
                    if ( v70 )
                    {
                      v43 = 7;
                      goto LABEL_247;
                    }
                  }
LABEL_170:
                  freecookie(co);
                  return 0LL;
                }
                co->secure = 1;
                v43 = 3;
              }
              else
              {
                v43 = 3;
              }
            }
            else
            {
              v46 = (const char *)Curl_cstrdup(v42);
              co->path = (char *)v46;
              if ( !v46 )
                goto LABEL_244;
              v47 = sanitize_cookie_path(v46);
              co->spath = v47;
              if ( !v47 )
                goto LABEL_244;
              v45 = httpheader;
            }
LABEL_142:
            v42 = strtok_r(0LL, "\t", &tok_buf);
            ++v43;
            if ( !v42 || v45 )
            {
              if ( v43 == 6 )
                goto LABEL_245;
LABEL_247:
              if ( v43 == 7 && !v45 )
                goto LABEL_249;
              goto LABEL_170;
            }
            break;
          case 3:
            v45 = httpheader;
            goto LABEL_153;
          case 4:
            if ( (unsigned int)curlx_strtoofft(v42, 0LL, 10LL, &co->expires) )
              goto LABEL_244;
            v45 = httpheader;
            goto LABEL_142;
          case 5:
            v50 = Curl_cstrdup(v42);
            co->name = (char *)v50;
            if ( !v50 )
              goto LABEL_244;
            if ( (unsigned int)curl_strnequal("__Secure-", v50, 9LL) )
            {
              co->prefix |= 1u;
              v45 = httpheader;
            }
            else
            {
              v45 = httpheader;
              if ( (unsigned int)curl_strnequal("__Host-", co->name, 7LL) )
                co->prefix |= 2u;
            }
            goto LABEL_142;
          case 6:
            v51 = Curl_cstrdup(v42);
            co->value = (char *)v51;
            if ( !v51 )
              goto LABEL_244;
            v45 = httpheader;
            goto LABEL_142;
          default:
            v45 = httpheader;
            goto LABEL_142;
        }
      }
    }
    Curl_cfree(co);
    return 0LL;
  }
  badcookie = 0;
  if ( strlen(lineptr) > 0x1388 )
  {
    Curl_cfree(co);
    return 0LL;
  }
  while ( 2 )
  {
    while ( 1 )
    {
      v33 = *lineptr;
      replace_clist = *lineptr;
      if ( !*lineptr )
        break;
      if ( v33 != 32 && v33 != 9 )
      {
        v12 = strcspn(lineptr, ";\t\r\n=");
        if ( !v12 )
        {
          v23 = *lineptr;
          v17 = lineptr;
          goto LABEL_102;
        }
        goto LABEL_269;
      }
      ++lineptr;
    }
    v12 = strcspn(lineptr, ";\t\r\n=");
    if ( !v12 )
    {
      v24 = path;
      goto LABEL_112;
    }
LABEL_269:
    v74 = &lineptr[v12];
    do
    {
      v75 = v12--;
      if ( lineptr[v12] != 9 && lineptr[v12] != 32 )
      {
        v11 = 0;
        if ( *v74 != 61 )
        {
          v12 = v75;
          v17 = v74;
          v16 = 0LL;
          v13 = 0LL;
          goto LABEL_22;
        }
        v12 = v75;
        goto LABEL_273;
      }
    }
    while ( v12 );
    if ( *v74 != 61 )
    {
      v13 = 0LL;
      v17 = v74;
      v16 = 0LL;
      v11 = 0;
      goto LABEL_24;
    }
LABEL_273:
    v16 = v74 + 1;
    v13 = strcspn(v74 + 1, ";\r\n");
    v17 = &v74[v13 + 1];
    while ( 1 )
    {
      if ( !v13 )
      {
        v11 = httpheader;
        goto LABEL_22;
      }
      v14 = v74[v13];
      if ( v14 != 32 && v14 != 9 )
        break;
      --v13;
    }
    do
    {
      v15 = *v16 == 9 || *v16 == 32;
      if ( !v15 )
      {
        if ( !memchr(v16, 9, v13) )
        {
          v11 = httpheader;
          goto LABEL_22;
        }
        freecookie(co);
        v10 = 0LL;
        if ( (data->set.gap8BB[3] & 0x10) != 0 )
          Curl_infof(data, "cookie contains TAB, dropping");
        return v10;
      }
      ++v16;
      --v13;
    }
    while ( v13 );
    v11 = v15;
LABEL_22:
    if ( v12 > 0xFFE || v13 > 0xFFE )
    {
LABEL_47:
      freecookie(co);
      v10 = 0LL;
      if ( (data->set.gap8BB[3] & 0x10) != 0 )
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v12, v13);
      return v10;
    }
LABEL_24:
    if ( v13 + v12 > 0x1000 )
      goto LABEL_47;
    if ( v12 > 6 && replace_clist == 95 && lineptr[1] == 95 )
    {
      if ( (unsigned int)curl_strnequal("__Secure-", lineptr, 9LL) )
      {
        co->prefix |= 1u;
      }
      else if ( (unsigned int)curl_strnequal("__Host-", lineptr, 7LL) )
      {
        co->prefix |= 2u;
      }
    }
    if ( !co->name )
    {
      if ( !v11 )
        goto LABEL_61;
      strstore(&co->name, lineptr, v12);
      strstore(&co->value, v16, v13);
      name = co->name;
      if ( !name )
        goto LABEL_61;
      value = co->value;
      if ( !value )
        goto LABEL_61;
      if ( value[strcspn(co->value, &badoctets_0)] || name[strcspn(name, &badoctets_0)] )
      {
        if ( (data->set.gap8BB[3] & 0x10) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
        goto LABEL_61;
      }
      goto LABEL_69;
    }
    if ( v13 )
      goto LABEL_32;
    if ( v12 == 6 )
    {
      if ( (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
      {
        if ( !secure && c->running )
          goto LABEL_61;
        co->secure = 1;
        goto LABEL_69;
      }
      if ( !v11 )
        goto LABEL_69;
LABEL_33:
      if ( v12 != 6 )
      {
LABEL_68:
        if ( v12 == 7 && !(unsigned int)curl_strnequal("version", lineptr, 7LL) )
        {
          if ( (unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
          {
            v26 = curlx_strtoofft(&v16[*v16 == 34], 0LL, 10LL, &co->expires);
            switch ( v26 )
            {
              case 1:
                co->expires = 0x7FFFFFFFFFFFFFFFLL;
                break;
              case 2:
                co->expires = 1LL;
                break;
              case 0:
                expires = co->expires;
                if ( expires )
                {
                  v28 = 0x7FFFFFFFFFFFFFFFLL;
                  if ( expires <= 0x7FFFFFFFFFFFFFFFLL - now )
                    v28 = expires + now;
                  co->expires = v28;
                }
                else
                {
                  co->expires = 1LL;
                }
                break;
            }
          }
          else if ( (unsigned int)curl_strnequal("expires", lineptr, 7LL) && !co->expires && v13 <= 0x7F )
          {
            memcpy(date, v16, v13);
            date[v13] = 0;
            v29 = Curl_getdate_capped(date);
            v30 = v29 == 0;
            v31 = 0LL;
            if ( v29 >= 0 )
              v31 = v29;
            v32 = 1LL;
            if ( !v30 )
              v32 = v31;
            co->expires = v32;
          }
        }
        goto LABEL_69;
      }
      v18 = (v13 != 0) & ((unsigned int)curl_strnequal("domain", lineptr, 6LL) != 0);
      if ( !v18 )
        goto LABEL_69;
      if ( *v16 == 46 )
      {
        ++v16;
        --v13;
      }
      if ( v13 == 9 && (unsigned int)curl_strnequal(v16, "localhost", 9LL)
        || (v19 = memchr(v16, 46, v13)) != 0LL && v13 - (v19 - v16) > 1 )
      {
        if ( !domain )
        {
          is_ipnum = Curl_host_is_ipnum(v16);
          strstore(&co->domain, v16, v13);
          if ( !co->domain )
            goto LABEL_61;
          if ( is_ipnum )
            goto LABEL_69;
          goto LABEL_80;
        }
        v20 = Curl_host_is_ipnum(domain);
      }
      else
      {
        domain = ":";
        v20 = Curl_host_is_ipnum(":");
      }
      if ( v20 )
      {
        if ( !strncmp(v16, domain, v13) && strlen(domain) == v13 )
        {
          strstore(&co->domain, v16, v13);
          if ( !co->domain )
            goto LABEL_61;
          goto LABEL_69;
        }
LABEL_45:
        badcookie = v18;
        if ( (data->set.gap8BB[3] & 0x10) != 0 )
        {
          Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v16);
          badcookie = v18;
        }
        goto LABEL_69;
      }
      if ( !cookie_tailmatch(v16, v13, domain) )
        goto LABEL_45;
      strstore(&co->domain, v16, v13);
      if ( !co->domain )
        goto LABEL_61;
LABEL_80:
      co->tailmatch = 1;
      goto LABEL_69;
    }
    if ( v12 == 8 )
    {
      if ( (unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
      {
        co->httponly = 1;
        goto LABEL_69;
      }
      if ( !v11 )
        goto LABEL_69;
      goto LABEL_68;
    }
    if ( v11 )
    {
LABEL_32:
      if ( v12 != 4 )
        goto LABEL_33;
      if ( (unsigned int)curl_strnequal("path", lineptr, 4LL) )
      {
        strstore(&co->path, v16, v13);
        if ( !co->path || (Curl_cfree(co->spath), v25 = sanitize_cookie_path(co->path), (co->spath = v25) == 0LL) )
        {
LABEL_61:
          freecookie(co);
          return 0LL;
        }
      }
    }
LABEL_69:
    v23 = *v17;
    if ( *v17 )
    {
LABEL_102:
      while ( v23 == 32 || v23 == 9 )
      {
        v23 = *++v17;
        if ( !*v17 )
        {
          v24 = path;
          goto LABEL_112;
        }
      }
      if ( v23 != 59 )
      {
        v24 = path;
        goto LABEL_112;
      }
      lineptr = v17 + 1;
      continue;
    }
    break;
  }
  v24 = path;
LABEL_112:
  if ( badcookie )
    goto LABEL_61;
  if ( !co->domain )
  {
    if ( domain )
    {
      v34 = Curl_cstrdup(domain);
      co->domain = (char *)v34;
      if ( !v34 )
        goto LABEL_61;
    }
  }
  if ( !co->path && v24 )
  {
    v35 = strchr(v24, 63);
    v36 = v35 ? (char *)Curl_memrchr(v24, 47LL, v35 - v24) : strrchr(v24, 47);
    if ( v36 )
    {
      v37 = v36 - v24;
      v38 = (char *)Curl_cmalloc(v37 + 2);
      co->path = v38;
      if ( !v38 )
        goto LABEL_61;
      memcpy(v38, v24, v37 + 1);
      co->path[v37 + 1] = 0;
      v39 = sanitize_cookie_path(co->path);
      co->spath = v39;
      if ( !v39 )
        goto LABEL_61;
    }
  }
  if ( !co->name )
    goto LABEL_61;
  ++data->req.setcookies;
LABEL_249:
  prefix = co->prefix;
  if ( (prefix & 1) == 0 )
  {
    if ( (prefix & 2) == 0 )
      goto LABEL_255;
    if ( co->secure )
    {
LABEL_252:
      v72 = co->path;
      if ( v72 && !strcmp(v72, "/") && !co->tailmatch )
        goto LABEL_255;
    }
LABEL_195:
    freecookie(co);
    return 0LL;
  }
  if ( !co->secure )
    goto LABEL_195;
  if ( (prefix & 2) != 0 )
    goto LABEL_252;
LABEL_255:
  running = c->running;
  if ( !running && c->newsession && !co->expires )
    goto LABEL_195;
  co->livecookie = running;
  replace_clistb = c->lastct;
  c->lastct = replace_clistb + 1;
  co->creationtime = replace_clistb + 1;
  if ( !noexpire )
    remove_expired(c);
  v65 = cookiehash(co->domain);
  v52 = c->cookies[v65];
  if ( v52 )
  {
    livecookie = 0;
    v64 = 0LL;
    myhasha = v65;
    replace_clista = 0LL;
    while ( 1 )
    {
      if ( !(unsigned int)curl_strequal(v52->name, co->name) )
        goto LABEL_178;
      v53 = v52->domain;
      if ( v53 )
      {
        v54 = co->domain;
        if ( !v54 || !(unsigned int)curl_strequal(v53, v54) )
          goto LABEL_178;
      }
      else if ( co->domain )
      {
        goto LABEL_178;
      }
      spath = v52->spath;
      if ( spath )
      {
        v56 = co->spath;
        if ( v56 )
        {
          if ( v52->secure && !co->secure && !secure )
          {
            v57 = strchr(spath + 1, 47);
            v58 = v57 ? v57 - spath : strlen(spath);
            if ( (unsigned int)curl_strnequal(spath, v56, v58) )
            {
              if ( (data->set.gap8BB[3] & 0x10) != 0 )
                Curl_infof(
                  data,
                  "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                  co->name,
                  co->domain);
              goto LABEL_195;
            }
          }
        }
      }
LABEL_178:
      if ( v64 || !(unsigned int)curl_strequal(v52->name, co->name) )
        goto LABEL_179;
      v59 = v52->domain;
      if ( v59 )
      {
        v60 = co->domain;
        if ( !v60 || !(unsigned int)curl_strequal(v59, v60) || v52->tailmatch != co->tailmatch )
        {
LABEL_204:
          if ( !livecookie )
            goto LABEL_179;
        }
      }
      else if ( co->domain )
      {
        goto LABEL_204;
      }
      v61 = v52->spath;
      if ( !v61 )
        goto LABEL_208;
      v62 = co->spath;
      if ( !v62 )
      {
        v64 = 0LL;
        livecookie = 0;
        goto LABEL_179;
      }
      if ( !(unsigned int)curl_strequal(v61, v62) )
      {
        livecookie = 0;
      }
      else
      {
LABEL_208:
        if ( (v52->spath == 0LL) == (co->spath == 0LL) )
        {
          livecookie = co->livecookie;
          if ( livecookie )
          {
            replace_clista = (__m128i *)v52;
            v64 = (__m128i *)co;
          }
          else
          {
            if ( v52->livecookie )
              goto LABEL_195;
            replace_clista = (__m128i *)v52;
            v64 = (__m128i *)co;
            livecookie = 1;
          }
        }
        else
        {
          livecookie = 0;
        }
      }
LABEL_179:
      if ( !v52->next )
      {
        v65 = myhasha;
        v10 = (Cookie *)replace_clista;
        if ( v64 )
        {
          v64->m128i_i64[0] = replace_clista->m128i_i64[0];
          v64[3].m128i_i32[3] = replace_clista[3].m128i_i32[3];
          Curl_cfree(replace_clista->m128i_i64[1]);
          Curl_cfree(replace_clista[1].m128i_i64[0]);
          Curl_cfree(replace_clista[2].m128i_i64[1]);
          Curl_cfree(replace_clista[1].m128i_i64[1]);
          Curl_cfree(replace_clista[2].m128i_i64[0]);
          *replace_clista = _mm_loadu_si128(v64);
          replace_clista[1] = _mm_loadu_si128(v64 + 1);
          replace_clista[2] = _mm_loadu_si128(v64 + 2);
          replace_clista[3] = _mm_loadu_si128(v64 + 3);
          replace_clista[4].m128i_i64[0] = v64[4].m128i_i64[0];
          Curl_cfree(v64);
        }
        else
        {
          v10 = co;
        }
        if ( !c->running )
          goto LABEL_220;
        goto LABEL_226;
      }
      v52 = v52->next;
    }
  }
  if ( !c->running )
  {
    v10 = co;
LABEL_264:
    c->cookies[v65] = v10;
    goto LABEL_232;
  }
  v10 = co;
  livecookie = 0;
LABEL_226:
  if ( (data->set.gap8BB[3] & 0x10) != 0 )
  {
    v67 = "Added";
    if ( livecookie )
      v67 = "Replaced";
    Curl_infof(
      data,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
      v67,
      v10->name,
      v10->value,
      v10->domain,
      v10->path,
      v10->expires);
  }
LABEL_220:
  if ( !livecookie )
  {
    if ( !v52 )
      goto LABEL_264;
    v52->next = v10;
LABEL_232:
    ++c->numcookies;
  }
  v66 = v10->expires;
  if ( v66 && v66 < c->next_expiration )
    c->next_expiration = v66;
  return v10;
}
