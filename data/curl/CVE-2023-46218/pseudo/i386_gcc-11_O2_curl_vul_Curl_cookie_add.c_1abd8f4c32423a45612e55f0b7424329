Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v8; // ebp
  time_t v9; // edi
  size_t v10; // eax
  char v11; // dl
  unsigned int v12; // edi
  char v13; // dl
  size_t v14; // eax
  unsigned int v15; // ebx
  size_t v16; // eax
  size_t v17; // esi
  bool v18; // cl
  _BOOL4 v19; // eax
  int v20; // eax
  char *v21; // eax
  char *v22; // eax
  int v23; // esi
  size_t v24; // ebx
  char *v25; // eax
  char *v26; // eax
  Cookie *v27; // esi
  unsigned __int8 prefix; // al
  char *v29; // eax
  bool running; // al
  int v31; // eax
  Cookie *v32; // esi
  Cookie *v33; // ebp
  char *v34; // eax
  char *v35; // edx
  char *spath; // edx
  char *v37; // eax
  char *v38; // edx
  char *v39; // eax
  char *v41; // eax
  char *v42; // eax
  const char *v43; // ebx
  bool v44; // al
  _BYTE *v45; // eax
  char is_ipnum; // di
  int v47; // eax
  int v48; // eax
  char *v49; // eax
  int v50; // eax
  int v51; // eax
  int v52; // eax
  const char *name; // esi
  const char *value; // edi
  int v55; // eax
  curl_off_t expires; // rax
  int v57; // ecx
  char *v58; // edx
  const char *v59; // eax
  unsigned int v60; // edx
  unsigned int v61; // eax
  const char *v62; // eax
  char *v63; // eax
  const char *v64; // edx
  char *v65; // ecx
  size_t v66; // eax
  int v67; // eax
  size_t pathlen; // [esp+8h] [ebp-134h]
  size_t v69; // [esp+Ch] [ebp-130h]
  char maxageb; // [esp+14h] [ebp-128h]
  const char *maxage; // [esp+14h] [ebp-128h]
  char *maxagea; // [esp+14h] [ebp-128h]
  char *sep; // [esp+18h] [ebp-124h]
  char sepa; // [esp+18h] [ebp-124h]
  bool sepb; // [esp+18h] [ebp-124h]
  bool sepc; // [esp+18h] [ebp-124h]
  bool sepd; // [esp+18h] [ebp-124h]
  char *s1; // [esp+1Ch] [ebp-120h]
  char *s1a; // [esp+1Ch] [ebp-120h]
  char *s1b; // [esp+1Ch] [ebp-120h]
  Cookie *co; // [esp+20h] [ebp-11Ch]
  size_t myhash; // [esp+24h] [ebp-118h]
  char nlen; // [esp+28h] [ebp-114h]
  size_t nlena; // [esp+28h] [ebp-114h]
  size_t nlenb; // [esp+28h] [ebp-114h]
  bool badcookie; // [esp+4Fh] [ebp-EDh]
  __int64 now; // [esp+78h] [ebp-C4h]
  curl_off_t v89; // [esp+80h] [ebp-BCh]
  char *tok_buf; // [esp+98h] [ebp-A4h] BYREF
  char date[128]; // [esp+9Ch] [ebp-A0h] BYREF
  unsigned int v92; // [esp+11Ch] [ebp-20h]

  v8 = (char *)lineptr;
  v92 = __readgsdword(0x14u);
  v9 = time(0);
  if ( data->req.setcookies > 0x31u )
    return 0;
  co = (Cookie *)Curl_ccalloc(1, 44);
  if ( !co )
    return 0;
  if ( !httpheader )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v8 = (char *)(lineptr + 10);
      co->httponly = 1;
    }
    if ( *v8 == 35 )
    {
      Curl_cfree(co);
      return 0;
    }
    v41 = strchr(v8, 13);
    if ( v41 )
      *v41 = 0;
    v42 = strchr(v8, 10);
    if ( v42 )
      *v42 = 0;
    if ( strtok_r(v8, "\t", &tok_buf) )
      __asm { jmp     eax }
    goto LABEL_89;
  }
  badcookie = 0;
  if ( strlen(lineptr) > 0x1388 )
  {
    Curl_cfree(co);
    return 0;
  }
  now = v9;
  LODWORD(v89) = -1 - v9;
  HIDWORD(v89) = 0x7FFFFFFF - (v9 >> 31);
  while ( 1 )
  {
    v13 = *v8;
    if ( !*v8 )
      break;
    if ( v13 == 32 || v13 == 9 )
      goto LABEL_10;
    maxageb = *v8;
    v10 = strcspn(v8, ";\t\r\n=");
    v11 = maxageb;
    v12 = v10;
    if ( v10 )
      goto LABEL_13;
LABEL_9:
    if ( v11 != 59 )
      goto LABEL_37;
LABEL_10:
    ++v8;
  }
  v14 = strcspn(v8, ";\t\r\n=");
  v11 = 0;
  v12 = v14;
  if ( !v14 )
    goto LABEL_37;
LABEL_13:
  sep = &v8[v12];
  do
  {
    v15 = v12--;
    if ( v8[v12] != 9 && v8[v12] != 32 )
    {
      v18 = 0;
      if ( *sep != 61 )
      {
        maxage = 0;
        LOBYTE(v19) = 0;
        v12 = v15;
        s1 = sep;
        v17 = 0;
        goto LABEL_22;
      }
      v12 = v15;
      goto LABEL_17;
    }
  }
  while ( v12 );
  if ( *sep != 61 )
  {
    if ( !co->name )
      goto LABEL_89;
    s1 = sep;
    goto LABEL_32;
  }
LABEL_17:
  nlen = v11;
  maxage = sep + 1;
  v16 = strcspn(sep + 1, ";\r\n");
  v11 = nlen;
  v17 = v16;
  s1 = &sep[v16 + 1];
  while ( v17 )
  {
    if ( sep[v17] != 9 && sep[v17] != 32 )
    {
      v43 = sep + 1;
      while ( 1 )
      {
        v44 = *v43 == 9 || *v43 == 32;
        if ( !v44 )
          break;
        ++v43;
        if ( !--v17 )
        {
          v18 = v44;
          maxage = v43;
          LOBYTE(v19) = 0;
          goto LABEL_22;
        }
      }
      maxage = v43;
      if ( !memchr(v43, 9, v17) )
      {
        v18 = httpheader;
        v11 = nlen;
        v19 = v17 > 0xFFE;
        goto LABEL_22;
      }
      freecookie(co);
      if ( (data->set.gap52B[3] & 0x10) != 0 )
      {
        v62 = "cookie contains TAB, dropping";
LABEL_198:
        Curl_infof(data, v62, pathlen, v69);
      }
      return 0;
    }
    --v17;
  }
  v18 = httpheader;
  LOBYTE(v19) = 0;
LABEL_22:
  if ( v12 > 0xFFE || v19 || v17 + v12 > 0x1000 )
  {
    freecookie(co);
    if ( (data->set.gap52B[3] & 0x10) != 0 )
    {
      v69 = v17;
      pathlen = v12;
      v62 = "oversized cookie dropped, name/val %zu + %zu bytes";
      goto LABEL_198;
    }
    return 0;
  }
  if ( v12 > 6 && v11 == 95 && v8[1] == 95 )
  {
    sepd = v18;
    v50 = curl_strnequal("__Secure-", v8, 9);
    v18 = sepd;
    if ( v50 )
    {
      co->prefix |= 1u;
    }
    else
    {
      v67 = curl_strnequal("__Host-", v8, 7);
      v18 = sepd;
      if ( v67 )
        co->prefix |= 2u;
    }
  }
  if ( !co->name )
  {
    if ( !v18 )
      goto LABEL_89;
    Curl_cfree(0);
    v51 = Curl_memdup(v8, v12 + 1);
    co->name = (char *)v51;
    if ( v51 )
      *(_BYTE *)(v51 + v12) = 0;
    Curl_cfree(co->value);
    v52 = Curl_memdup(maxage, v17 + 1);
    co->value = (char *)v52;
    if ( v52 )
      *(_BYTE *)(v52 + v17) = 0;
    name = co->name;
    if ( !name )
      goto LABEL_89;
    value = co->value;
    if ( !value )
      goto LABEL_89;
    if ( value[strcspn(value, badoctets_0)] || name[strcspn(name, badoctets_0)] )
    {
      if ( (data->set.gap52B[3] & 0x10) != 0 )
        Curl_infof(data, "invalid octets in name/value, cookie dropped", pathlen, v69);
      goto LABEL_89;
    }
    goto LABEL_32;
  }
  if ( v17 )
  {
    if ( v12 != 4 )
      goto LABEL_30;
    goto LABEL_134;
  }
  if ( v12 == 6 )
  {
    sepb = v18;
    if ( curl_strnequal("secure", v8, 6) )
    {
      if ( !secure && c->running )
        goto LABEL_89;
      v8 = s1;
      co->secure = 1;
      goto LABEL_33;
    }
    if ( !sepb )
      goto LABEL_32;
    goto LABEL_110;
  }
  if ( v12 == 8 )
  {
    if ( curl_strnequal("httponly", v8, 8) )
    {
      v8 = s1;
      co->httponly = 1;
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if ( v18 )
  {
    if ( v12 != 4 )
    {
LABEL_30:
      if ( v12 != 6 )
      {
        if ( v12 == 7 && !curl_strnequal("version", v8, 7) )
        {
          if ( curl_strnequal("max-age", v8, 7) )
          {
            v55 = curlx_strtoofft(&maxage[*maxage == 34], 0, 10, &co->expires);
            switch ( v55 )
            {
              case 1:
                goto LABEL_209;
              case 2:
                v8 = s1;
                LODWORD(co->expires) = 1;
                HIDWORD(co->expires) = 0;
                goto LABEL_33;
              case 0:
                expires = co->expires;
                if ( !expires )
                {
                  LODWORD(co->expires) = 1;
                  v8 = s1;
                  HIDWORD(co->expires) = 0;
                  goto LABEL_33;
                }
                if ( v89 >= expires )
                {
                  v8 = s1;
                  co->expires = now + expires;
                  goto LABEL_33;
                }
LABEL_209:
                v8 = s1;
                LODWORD(co->expires) = -1;
                HIDWORD(co->expires) = 0x7FFFFFFF;
                goto LABEL_33;
            }
          }
          else if ( curl_strnequal("expires", v8, 7) && !co->expires && v17 <= 0x7F )
          {
            memcpy(date, maxage, v17);
            date[v17] = 0;
            v57 = Curl_getdate_capped(date);
            if ( v57 )
            {
              if ( v57 >> 31 == -1 )
              {
                LODWORD(co->expires) = 0;
                HIDWORD(co->expires) = 0;
              }
              else
              {
                co->expires = v57;
              }
            }
            else
            {
              LODWORD(co->expires) = 1;
              HIDWORD(co->expires) = 0;
            }
          }
        }
        goto LABEL_32;
      }
LABEL_110:
      sepc = curl_strnequal("domain", v8, 6) != 0 && v17 != 0;
      if ( !sepc )
        goto LABEL_32;
      if ( *maxage == 46 )
      {
        ++maxage;
        --v17;
      }
      if ( v17 == 9 && curl_strnequal(maxage, "localhost", 9)
        || (v45 = memchr(maxage, 46, v17)) != 0 && v17 - (v45 - maxage) > 1 )
      {
        if ( !domain )
        {
          is_ipnum = Curl_host_is_ipnum(maxage);
          goto LABEL_123;
        }
      }
      else
      {
        domain = ":";
      }
      is_ipnum = Curl_host_is_ipnum(domain);
      if ( is_ipnum )
      {
        if ( strncmp(maxage, domain, v17) || strlen(domain) != v17 )
        {
LABEL_120:
          v8 = s1;
          badcookie = sepc;
          if ( (data->set.gap52B[3] & 0x10) != 0 )
            Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", maxage, v69);
          goto LABEL_33;
        }
      }
      else if ( !cookie_tailmatch(maxage, v17, domain) )
      {
        goto LABEL_120;
      }
LABEL_123:
      Curl_cfree(co->domain);
      v47 = Curl_memdup(maxage, v17 + 1);
      co->domain = (char *)v47;
      if ( !v47 )
        goto LABEL_89;
      *(_BYTE *)(v47 + v17) = 0;
      if ( !co->domain )
        goto LABEL_89;
      v8 = s1;
      if ( !is_ipnum )
        co->tailmatch = 1;
      goto LABEL_33;
    }
LABEL_134:
    if ( curl_strnequal("path", v8, 4) )
    {
      Curl_cfree(co->path);
      v48 = Curl_memdup(maxage, v17 + 1);
      co->path = (char *)v48;
      if ( !v48 )
        goto LABEL_89;
      *(_BYTE *)(v48 + v17) = 0;
      if ( !co->path )
        goto LABEL_89;
      Curl_cfree(co->spath);
      v49 = sanitize_cookie_path(co->path);
      co->spath = v49;
      if ( !v49 )
        goto LABEL_89;
    }
  }
LABEL_32:
  v8 = s1;
LABEL_33:
  v11 = *s1;
  if ( *s1 )
  {
    while ( v11 == 32 || v11 == 9 )
    {
      v11 = *++v8;
      if ( !v11 )
        goto LABEL_37;
    }
    goto LABEL_9;
  }
LABEL_37:
  if ( badcookie )
    goto LABEL_89;
  if ( !co->domain )
  {
    if ( domain )
    {
      v20 = Curl_cstrdup(domain);
      co->domain = (char *)v20;
      if ( !v20 )
        goto LABEL_89;
    }
  }
  if ( !co->path && path )
  {
    v21 = strchr(path, 63);
    v22 = v21 ? (char *)Curl_memrchr(path, 47, v21 - path) : strrchr(path, 47);
    if ( v22 )
    {
      v23 = v22 - path;
      v24 = v22 - path + 1;
      v25 = (char *)Curl_cmalloc(v22 - path + 2);
      co->path = v25;
      if ( !v25 )
        goto LABEL_89;
      memcpy(v25, path, v24);
      co->path[v23 + 1] = 0;
      v26 = sanitize_cookie_path(co->path);
      co->spath = v26;
      if ( !v26 )
        goto LABEL_89;
    }
  }
  if ( !co->name )
    goto LABEL_89;
  ++data->req.setcookies;
  v27 = co;
  prefix = co->prefix;
  if ( (prefix & 1) == 0 )
  {
    if ( (prefix & 2) == 0 )
      goto LABEL_56;
    if ( co->secure )
      goto LABEL_52;
    goto LABEL_89;
  }
  if ( !co->secure )
  {
LABEL_216:
    freecookie(v27);
    return 0;
  }
  if ( (prefix & 2) == 0 )
    goto LABEL_56;
LABEL_52:
  v29 = co->path;
  if ( !v29 || *v29 != 47 || v29[1] || co->tailmatch )
  {
LABEL_89:
    freecookie(co);
    return 0;
  }
LABEL_56:
  running = c->running;
  if ( !running && c->newsession )
  {
    v27 = co;
    if ( !co->expires )
      goto LABEL_216;
  }
  co->livecookie = running;
  v31 = c->lastct + 1;
  c->lastct = v31;
  co->creationtime = v31;
  if ( !noexpire )
    remove_expired(c);
  myhash = cookiehash(co->domain);
  v32 = c->cookies[myhash];
  if ( !v32 )
  {
    if ( c->running && (data->set.gap52B[3] & 0x10) != 0 )
    {
      sepa = 0;
      maxagea = (char *)co;
      v58 = co->name;
      v59 = "Added";
      goto LABEL_184;
    }
    maxagea = (char *)co;
LABEL_186:
    c->cookies[myhash] = (Cookie *)maxagea;
    goto LABEL_189;
  }
  sepa = 0;
  v33 = 0;
  maxagea = 0;
  while ( 2 )
  {
    if ( curl_strequal(v32->name, co->name) )
    {
      v34 = v32->domain;
      v35 = co->domain;
      if ( v34 )
      {
        if ( v35 && curl_strequal(v34, co->domain) )
        {
LABEL_69:
          spath = v32->spath;
          if ( spath )
          {
            s1a = co->spath;
            if ( s1a )
            {
              if ( v32->secure && !co->secure && !secure )
              {
                nlena = (size_t)v32->spath;
                v63 = strchr(spath + 1, 47);
                v64 = (const char *)nlena;
                v65 = s1a;
                if ( v63 )
                {
                  v66 = (size_t)&v63[-nlena];
                }
                else
                {
                  nlenb = (size_t)s1a;
                  s1b = (char *)v64;
                  v66 = strlen(v64);
                  v65 = (char *)nlenb;
                  v64 = s1b;
                }
                if ( curl_strnequal(v64, v65, v66) )
                {
                  if ( (data->set.gap52B[3] & 0x10) != 0 )
                    Curl_infof(
                      data,
                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                      co->name,
                      co->domain);
                  goto LABEL_89;
                }
              }
            }
          }
        }
      }
      else if ( !v35 )
      {
        goto LABEL_69;
      }
    }
    if ( v33 || !curl_strequal(v32->name, co->name) )
      goto LABEL_63;
    v37 = v32->domain;
    v38 = co->domain;
    if ( !v37 )
    {
      if ( v38 )
        goto LABEL_80;
LABEL_81:
      v39 = v32->spath;
      if ( v39 )
      {
        if ( !co->spath )
        {
          sepa = 0;
          v33 = 0;
          goto LABEL_63;
        }
        if ( !curl_strequal(v39, co->spath) )
          goto LABEL_193;
        v39 = v32->spath;
      }
      if ( (v39 == 0) == (co->spath == 0) )
      {
        sepa = co->livecookie;
        if ( sepa )
        {
          maxagea = (char *)v32;
          v33 = co;
        }
        else
        {
          if ( v32->livecookie )
            goto LABEL_89;
          maxagea = (char *)v32;
          v33 = co;
          sepa = 1;
        }
        goto LABEL_63;
      }
LABEL_193:
      sepa = 0;
      goto LABEL_63;
    }
    if ( v38 && curl_strequal(v37, co->domain) && v32->tailmatch == co->tailmatch )
      goto LABEL_81;
LABEL_80:
    if ( sepa )
      goto LABEL_81;
LABEL_63:
    if ( v32->next )
    {
      v32 = v32->next;
      continue;
    }
    break;
  }
  if ( v33 )
  {
    v33->next = *(Cookie **)maxagea;
    v33->creationtime = *((_DWORD *)maxagea + 9);
    Curl_cfree(*((_DWORD *)maxagea + 1));
    Curl_cfree(*((_DWORD *)maxagea + 2));
    Curl_cfree(*((_DWORD *)maxagea + 5));
    Curl_cfree(*((_DWORD *)maxagea + 3));
    Curl_cfree(*((_DWORD *)maxagea + 4));
    *(_DWORD *)maxagea = v33->next;
    *((_DWORD *)maxagea + 1) = v33->name;
    *((_DWORD *)maxagea + 2) = v33->value;
    *((_DWORD *)maxagea + 3) = v33->path;
    *((_DWORD *)maxagea + 4) = v33->spath;
    *((_DWORD *)maxagea + 5) = v33->domain;
    *((_DWORD *)maxagea + 6) = v33->expires;
    *((_DWORD *)maxagea + 7) = HIDWORD(v33->expires);
    *((_DWORD *)maxagea + 8) = *(_DWORD *)&v33->tailmatch;
    *((_DWORD *)maxagea + 9) = v33->creationtime;
    *((_DWORD *)maxagea + 10) = *(_DWORD *)&v33->prefix;
    Curl_cfree(v33);
  }
  else
  {
    maxagea = (char *)co;
  }
  if ( !c->running || (data->set.gap52B[3] & 0x10) == 0 )
  {
    if ( sepa )
      goto LABEL_190;
    goto LABEL_188;
  }
  v58 = (char *)*((_DWORD *)maxagea + 1);
  v59 = "Replaced";
  if ( !sepa )
    v59 = "Added";
LABEL_184:
  Curl_infof(data, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld", v59, v58);
  if ( !sepa )
  {
    if ( !v32 )
      goto LABEL_186;
LABEL_188:
    v32->next = (Cookie *)maxagea;
LABEL_189:
    ++c->numcookies;
  }
LABEL_190:
  v60 = *((_DWORD *)maxagea + 6);
  v61 = *((_DWORD *)maxagea + 7);
  if ( *((_QWORD *)maxagea + 3) && __SPAIR64__(v61, v60) < c->next_expiration )
  {
    LODWORD(c->next_expiration) = v60;
    HIDWORD(c->next_expiration) = v61;
  }
  return (Cookie *)maxagea;
}
