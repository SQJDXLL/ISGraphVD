Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  time_t v12; // r6
  int v13; // r0
  char *v14; // r9
  int v15; // r10
  char *v16; // r8
  int v17; // r4
  bool v18; // zf
  bool v19; // zf
  size_t v20; // r0
  size_t v21; // r6
  char *v22; // r10
  size_t v23; // r0
  int v24; // r1
  bool v25; // zf
  const char *v26; // r5
  int v27; // r8
  unsigned int v28; // r3
  int v29; // r6
  char *v30; // r7
  int v31; // r1
  bool v32; // zf
  bool v33; // zf
  size_t v34; // r0
  size_t v35; // r5
  size_t v36; // r2
  int v37; // r1
  bool v38; // zf
  unsigned int v39; // r8
  char *v40; // r0
  bool v41; // cc
  unsigned int v42; // r4
  _DWORD *v43; // r10
  char *v44; // r1
  int i; // r6
  int v46; // r3
  bool v47; // zf
  int v48; // r0
  unsigned int v49; // r4
  int v50; // r0
  const char *v51; // r0
  char *v52; // r5
  size_t v53; // r6
  size_t v54; // r0
  unsigned int v55; // r6
  void (__fastcall **v56)(_DWORD); // r4
  const char *v57; // r0
  bool v58; // zf
  int v59; // r0
  unsigned int v60; // r4
  _DWORD *v61; // r4
  char *v62; // r0
  int v63; // r0
  unsigned int v64; // r4
  int v65; // r0
  bool v66; // zf
  size_t v67; // r1
  const char *v68; // r5
  size_t v69; // r9
  _BYTE *v70; // r0
  const char *v71; // r4
  int v72; // r6
  int v73; // r0
  int v74; // r0
  const char *v75; // r0
  int is_ipnum; // r0
  size_t v77; // r0
  size_t v78; // r7
  const char *v79; // r4
  size_t v80; // r2
  char *v81; // r1
  size_t v82; // r7
  int v83; // r0
  int v84; // r0
  int v85; // r0
  int v86; // r0
  char *v87; // r0
  char *v88; // r0
  char *v89; // r0
  const char *v90; // r8
  int v91; // r10
  int v92; // r4
  int (**v93)(void); // r6
  const char *v94; // r0
  int v95; // r0
  int v96; // r0
  int v97; // r8
  const char *v98; // r0
  char *v99; // r6
  size_t v100; // r5
  size_t v101; // r0
  int v102; // r0
  int v103; // r5
  char v104; // r0
  int v105; // r0
  int v106; // r0
  int v107; // r6
  int v108; // r5
  int v109; // r0
  char *v110; // r0
  int v111; // r0
  bool v112; // zf
  void (__fastcall **v113)(int); // r4
  unsigned int v114; // r6
  void (__fastcall **v115)(int); // r4
  char v117; // r0
  int v118; // r5
  CookieInfo *v119; // r4
  int v120; // r0
  int v121; // r6
  time_t v122; // r9
  curl_off_t *p_next_expiration; // r7
  int next_expiration_high; // r1
  int v125; // r7
  Cookie *next; // r0
  Curl_easy *v127; // r8
  Cookie **v128; // r10
  char v129; // r9
  Cookie *v130; // r4
  char *v131; // r0
  int v132; // r1
  const char *spath; // r6
  int v134; // r5
  bool v135; // zf
  bool v136; // zf
  char *v137; // r0
  size_t v138; // r2
  char *v139; // r0
  int v140; // r1
  char v141; // r0
  int v142; // r0
  char *v143; // r0
  int v144; // r1
  bool v145; // zf
  void (__fastcall **v146)(int); // r4
  const char *v147; // r0
  bool v148; // zf
  Cookie *creationtime; // r2
  char *name; // r0
  void (__fastcall **v151)(char *); // r5
  char *v152; // r2
  char *v153; // r3
  char *v154; // r5
  char *v155; // r6
  char *v156; // r7
  Cookie *v157; // r2
  Cookie *v158; // r3
  Cookie *v159; // r5
  Cookie *v160; // r6
  Cookie *v161; // r7
  bool v162; // zf
  CookieInfo *v163; // r6
  __int64 v164; // r0
  curl_off_t *v165; // r6
  unsigned int next_expiration; // t1
  void (__fastcall **v167)(int); // r4
  int v168; // r0
  char *v169; // r0
  char *v170; // r0
  _DWORD *v171; // r5
  Cookie *v172; // r4
  Cookie **p_next; // r8
  Cookie *v174; // r6
  curl_off_t expires; // r0
  const char *v176; // r2
  void (__fastcall **v177)(_DWORD *); // r4
  int v178; // r4
  void *v179; // r0
  const char *v180; // r0
  char *v181; // r5
  size_t v182; // r6
  size_t v183; // r0
  int v184; // r0
  __int64 v185; // [sp+1Ch] [bp-CCh]
  _DWORD *v186; // [sp+24h] [bp-C4h]
  char *v187; // [sp+28h] [bp-C0h]
  char v188; // [sp+2Ch] [bp-BCh]
  const char *v190; // [sp+30h] [bp-B8h]
  Curl_easy *v191; // [sp+34h] [bp-B4h]
  int v192; // [sp+38h] [bp-B0h]
  time_t v193; // [sp+3Ch] [bp-ACh]
  size_t v194; // [sp+3Ch] [bp-ACh]
  const char *v195; // [sp+40h] [bp-A8h]
  int v196; // [sp+40h] [bp-A8h]
  Cookie *v197; // [sp+40h] [bp-A8h]
  int v198; // [sp+40h] [bp-A8h]
  CookieInfo *v199; // [sp+44h] [bp-A4h]
  int v200; // [sp+48h] [bp-A0h]
  char *dest[39]; // [sp+4Ch] [bp-9Ch] BYREF

  v12 = time(0u);
  if ( data->req.setcookies > 0x31u )
    return 0;
  v13 = ((int (__fastcall *)(int, int))*Curl_ccalloc)(1, 48);
  if ( !v13 )
    return 0;
  v14 = (char *)lineptr;
  v15 = v13;
  v193 = v12;
  v192 = noexpire;
  v200 = v13;
  v199 = c;
  if ( httpheader )
  {
    if ( strlen(lineptr) <= 0x1388 )
    {
      v191 = data;
      HIDWORD(v185) = 0x7FFFFFFF - (v12 >> 0x1F);
      v187 = (char *)&data->set + 1334;
      LODWORD(v185) = ~v12;
      v186 = (_DWORD *)(v15 + 0x18);
      v188 = 0;
      while ( 1 )
      {
        v16 = v14 + 1;
        v17 = (unsigned __int8)*v14;
        v18 = v17 == 32;
        if ( v17 != 32 )
          v18 = v17 == 9;
        if ( v18 )
        {
          do
          {
            ++v16;
            v17 = (unsigned __int8)*++v14;
            v19 = v17 == 32;
            if ( v17 != 32 )
              v19 = v17 == 9;
          }
          while ( v19 );
        }
        v20 = strcspn(v14, ";\t\r\n=");
        if ( !v20 )
        {
          v27 = v200;
          v22 = v14;
          goto LABEL_23;
        }
        v21 = v20;
        v22 = &v14[v20];
        v23 = v20 - 1;
        while ( 1 )
        {
          v24 = (unsigned __int8)v14[v23];
          v25 = v24 == 32;
          if ( v24 != 32 )
            v25 = v24 == 9;
          if ( !v25 )
            break;
          if ( --v23 == -1 )
          {
            v26 = 0;
            if ( *v22 != 61 )
              goto LABEL_21;
LABEL_33:
            v195 = v26;
            v34 = strcspn(&v14[v21 + 1], ";\r\n");
            v35 = v21 + v34;
            v36 = 0;
            if ( v34 )
            {
              v30 = &v16[v35];
              while ( 1 )
              {
                v37 = (unsigned __int8)*(v30 - 1);
                v38 = v37 == 32;
                if ( v37 != 32 )
                  v38 = v37 == 9;
                if ( !v38 )
                  break;
                --v34;
                --v30;
                if ( !v34 )
                  goto LABEL_40;
              }
              v43 = (_DWORD *)v200;
              v44 = &v16[v21];
              for ( i = 0; i != v34; ++i )
              {
                v46 = (unsigned __int8)v44[i];
                v47 = v46 == 32;
                if ( v46 != 32 )
                  v47 = v46 == 9;
                if ( !v47 )
                {
                  v36 = v34 - i;
                  v30 = &v44[i];
                  goto LABEL_41;
                }
              }
              v36 = 0;
            }
            else
            {
LABEL_40:
              v30 = &v14[v21 + 1];
              v43 = (_DWORD *)v200;
            }
LABEL_41:
            v39 = v36;
            if ( !memchr(v30, 9, v36) )
            {
              v40 = &v14[v35];
              v26 = v195;
              v28 = v39;
              v29 = 1;
              v27 = (int)v43;
              v22 = v40 + 1;
              goto LABEL_43;
            }
            v177 = (void (__fastcall **)(_DWORD *))Curl_cfree;
            ((void (__fastcall *)(_DWORD))*Curl_cfree)(v43[5]);
            (*v177)((_DWORD *)v43[3]);
            (*v177)((_DWORD *)v43[4]);
            (*v177)((_DWORD *)v43[1]);
            (*v177)((_DWORD *)v43[2]);
            (*v177)(v43);
            if ( (v187[3] & 0x20) != 0 )
            {
              Curl_infof(v191, "cookie contains TAB, dropping");
              return 0;
            }
            return 0;
          }
        }
        v26 = (const char *)(v23 + 1);
        if ( *v22 == 61 )
          goto LABEL_33;
LABEL_21:
        v27 = v200;
        v28 = 0;
        v29 = 0;
        v30 = 0;
LABEL_43:
        v41 = (unsigned int)v26 > 0xFFE;
        if ( (unsigned int)v26 <= 0xFFE )
          v41 = v28 > 0xFFE;
        if ( v41 || (unsigned int)&v26[v28] > 0x1000 )
        {
          v114 = v28;
          v115 = (void (__fastcall **)(int))Curl_cfree;
          ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v27 + 20));
          (*v115)(*(_DWORD *)(v27 + 12));
          (*v115)(*(_DWORD *)(v27 + 16));
          (*v115)(*(_DWORD *)(v27 + 4));
          (*v115)(*(_DWORD *)(v27 + 8));
          (*v115)(v27);
          if ( (v187[3] & 0x20) != 0 )
            Curl_infof(v191, "oversized cookie dropped, name/val %zu + %zu bytes", (size_t)v26, v114);
          return 0;
        }
        if ( v17 == 95 && (unsigned int)v26 >= 7 && v14[1] == 95 )
        {
          v42 = v28;
          if ( curl_strnequal("__Secure-", v14, 9) )
          {
            v28 = v42;
            *(_BYTE *)(v27 + 40) |= 1u;
          }
          else
          {
            v48 = curl_strnequal("__Host-", v14, 7);
            v28 = v42;
            if ( v48 )
              *(_BYTE *)(v27 + 40) |= 2u;
          }
        }
        if ( !*(_DWORD *)(v27 + 4) )
        {
          if ( !v29 )
            goto LABEL_299;
          v55 = v28;
          v56 = (void (__fastcall **)(_DWORD))Curl_cfree;
          ((void (__fastcall *)(_DWORD))*Curl_cfree)(0);
          *(_DWORD *)(v27 + 4) = Curl_strndup(v14, v26);
          (*v56)(*(_DWORD *)(v27 + 8));
          v57 = (const char *)Curl_strndup(v30, v55);
          v58 = v57 == 0;
          *(_DWORD *)(v27 + 8) = v57;
          if ( v57 )
          {
            v26 = *(const char **)(v27 + 4);
            v58 = v26 == 0;
          }
          if ( v58 )
            goto LABEL_299;
          if ( v57[strcspn(v57, invalid_octets_badoctets)] || v26[strcspn(v26, invalid_octets_badoctets)] )
          {
            if ( (v187[3] & 0x20) != 0 )
              Curl_infof(v191, "invalid octets in name/value, cookie dropped");
            goto LABEL_299;
          }
          goto LABEL_23;
        }
        if ( !v28 )
        {
          if ( v26 == (const char *)&loc_8 )
          {
            v73 = curl_strnequal("httponly", v14, 8);
            v28 = 0;
            if ( v73 )
            {
              *(_BYTE *)(v27 + 35) = 1;
              goto LABEL_23;
            }
          }
          else if ( v26 == (_BYTE *)&loc_4 + 2 )
          {
            v59 = curl_strnequal("secure", v14, 6);
            v28 = 0;
            if ( v59 )
            {
              if ( !secure && v199->running )
                goto LABEL_299;
              *(_BYTE *)(v27 + 33) = 1;
              goto LABEL_23;
            }
          }
          if ( !v29 )
            goto LABEL_23;
        }
        if ( v26 != (_BYTE *)&loc_4 + 3 )
          break;
        v60 = v28;
        if ( !curl_strnequal("version", v14, 7) )
        {
          if ( curl_strnequal("max-age", v14, 7) )
          {
            v61 = v186;
            v62 = v30 + 1;
            if ( *v30 != 34 )
              v62 = v30;
            v63 = curlx_strtoofft(v62, 0, 10, v186);
            switch ( v63 )
            {
              case 0:
                if ( !*(_QWORD *)v186 )
                {
LABEL_145:
                  *v186 = 1;
                  v186[1] = 0;
                  break;
                }
                if ( v185 >= *(_QWORD *)v186 )
                {
                  *(_QWORD *)v186 += v193;
                  break;
                }
LABEL_143:
                *v186 = -1;
                v84 = 0x7FFFFFFF;
LABEL_144:
                v61[1] = v84;
                break;
              case 2:
                goto LABEL_145;
              case 1:
                goto LABEL_143;
            }
          }
          else
          {
            if ( !curl_strnequal("expires", v14, 7) )
              goto LABEL_23;
            v80 = v60;
            v41 = v60 > 0x7F;
            v61 = v186;
            if ( v41 || *(_QWORD *)v186 )
              goto LABEL_23;
            v81 = v30;
            v82 = v80;
            memcpy(dest, v81, v80);
            *((_BYTE *)dest + v82) = 0;
            v83 = Curl_getdate_capped(dest);
            *(_QWORD *)v186 = v83;
            if ( !v83 )
            {
              *v186 = 1;
              v186[1] = 0;
              goto LABEL_23;
            }
            if ( v83 <= -1 )
            {
              v84 = 0;
              *v186 = 0;
              goto LABEL_144;
            }
          }
        }
LABEL_23:
        v14 = v22 + 1;
        v31 = (unsigned __int8)*v22;
        v32 = v31 == 32;
        if ( v31 != 32 )
          v32 = v31 == 9;
        if ( v32 )
        {
          do
          {
            v31 = (unsigned __int8)*v14++;
            v33 = v31 == 32;
            if ( v31 != 32 )
              v33 = v31 == 9;
          }
          while ( v33 );
        }
        if ( v31 != 59 )
          goto LABEL_298;
      }
      if ( v26 != (_BYTE *)&loc_4 + 2 )
      {
        if ( v26 == (const char *)&loc_4 )
        {
          v49 = v28;
          if ( curl_strnequal("path", v14, 4) )
          {
            ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v27 + 12));
            v50 = Curl_strndup(v30, v49);
            *(_DWORD *)(v27 + 12) = v50;
            if ( !v50 )
              goto LABEL_299;
            ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v27 + 16));
            v51 = (const char *)((int (__fastcall *)(_DWORD))*Curl_cstrdup)(*(_DWORD *)(v27 + 12));
            if ( !v51 )
            {
              *(_DWORD *)(v27 + 16) = 0;
              goto LABEL_299;
            }
            v52 = (char *)v51;
            v53 = strlen(v51);
            if ( *v52 == 34 )
              memmove(v52, v52 + 1, v53--);
            if ( v53 )
            {
              v54 = v53 - 1;
              if ( v52[v53 - 1] == 34 )
              {
                --v53;
                v52[v54] = 0;
              }
            }
            else
            {
              v53 = 0;
            }
            if ( *v52 == 47 )
            {
              if ( v53 && v52[v53 - 1] == 47 )
                v52[v53 - 1] = 0;
              *(_DWORD *)(v27 + 16) = v52;
            }
            else
            {
              ((void (__fastcall *)(char *))*Curl_cfree)(v52);
              v74 = Curl_strndup("/", 1);
              *(_DWORD *)(v27 + 16) = v74;
              if ( !v74 )
                goto LABEL_299;
            }
          }
        }
        goto LABEL_23;
      }
      v64 = v28;
      v65 = curl_strnequal("domain", v14, 6);
      v66 = v64 == 0;
      if ( v64 )
        v66 = v65 == 0;
      if ( v66 )
        goto LABEL_23;
      v67 = v64;
      v68 = v30 + 1;
      if ( *v30 == 46 )
        v67 = v64 - 1;
      else
        v68 = v30;
      v69 = v67;
      if ( v67 == 9 && curl_strnequal(v68, "localhost", 9)
        || (v70 = memchr(v68, 46, v69)) != 0 && (unsigned int)(&v68[v69] - v70) > 1 )
      {
        v71 = domain;
        v75 = v68;
        if ( domain )
          v75 = domain;
        is_ipnum = Curl_host_is_ipnum(v75);
        v72 = is_ipnum;
        if ( !domain )
        {
          v71 = 0;
LABEL_136:
          ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v27 + 20));
          v85 = Curl_strndup(v68, v69);
          *(_DWORD *)(v27 + 20) = v85;
          domain = v71;
          if ( v72 || !v85 )
          {
            if ( !v85 )
            {
              v188 = 1;
LABEL_298:
              if ( (v188 & 1) == 0 )
              {
                if ( !domain
                  || *(_DWORD *)(v27 + 20)
                  || (v168 = ((int (__fastcall *)(const char *))*Curl_cstrdup)(domain),
                      (*(_DWORD *)(v27 + 20) = v168) != 0) )
                {
                  if ( path && !*(_DWORD *)(v27 + 12) )
                  {
                    v169 = strchr(path, 63);
                    v170 = v169 ? (char *)Curl_memrchr(path, 47, v169 - path) : strrchr(path, 47);
                    if ( v170 )
                    {
                      v178 = v170 - path;
                      v179 = (void *)((int (__fastcall *)(int))*Curl_cmalloc)(v170 - path + 2);
                      *(_DWORD *)(v27 + 12) = v179;
                      if ( !v179 )
                        goto LABEL_299;
                      memcpy(v179, path, v178 + 1);
                      *(_BYTE *)(*(_DWORD *)(v27 + 12) + v178 + 1) = 0;
                      v180 = (const char *)((int (__fastcall *)(_DWORD))*Curl_cstrdup)(*(_DWORD *)(v27 + 12));
                      if ( !v180 )
                      {
                        *(_DWORD *)(v27 + 16) = 0;
                        goto LABEL_299;
                      }
                      v181 = (char *)v180;
                      v182 = strlen(v180);
                      if ( *v181 == 34 )
                        memmove(v181, v181 + 1, v182--);
                      if ( v182 )
                      {
                        v183 = v182 - 1;
                        if ( v181[v182 - 1] == 34 )
                        {
                          --v182;
                          v181[v183] = 0;
                        }
                      }
                      else
                      {
                        v182 = 0;
                      }
                      if ( *v181 == 47 )
                      {
                        if ( v182 && v181[v182 - 1] == 47 )
                          v181[v182 - 1] = 0;
                        *(_DWORD *)(v27 + 16) = v181;
                      }
                      else
                      {
                        ((void (__fastcall *)(char *))*Curl_cfree)(v181);
                        v184 = Curl_strndup("/", 1);
                        *(_DWORD *)(v27 + 16) = v184;
                        if ( !v184 )
                          goto LABEL_299;
                      }
                    }
                  }
                  if ( *(_DWORD *)(v27 + 4) )
                  {
                    ++v191->req.setcookies;
                    v117 = *(_BYTE *)(v27 + 40);
                    v118 = v192;
                    if ( (v117 & 1) == 0 )
                      goto LABEL_217;
                    goto LABEL_216;
                  }
                }
              }
LABEL_299:
              v167 = (void (__fastcall **)(int))Curl_cfree;
              ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v27 + 20));
              (*v167)(*(_DWORD *)(v27 + 12));
              (*v167)(*(_DWORD *)(v27 + 16));
              (*v167)(*(_DWORD *)(v27 + 4));
              (*v167)(*(_DWORD *)(v27 + 8));
              (*v167)(v27);
              return 0;
            }
            v188 |= v85 == 0;
          }
          else
          {
            *(_BYTE *)(v27 + 32) = 1;
          }
          goto LABEL_23;
        }
        if ( is_ipnum )
        {
LABEL_106:
          if ( strncmp(v68, v71, v69) )
            goto LABEL_149;
          v72 = 1;
          if ( v69 != strlen(v71) )
            goto LABEL_149;
          goto LABEL_136;
        }
      }
      else
      {
        v71 = ":";
        if ( Curl_host_is_ipnum(":") )
          goto LABEL_106;
      }
      v77 = strlen(v71);
      if ( v77 < v69 )
        goto LABEL_149;
      v78 = v77;
      v190 = v71;
      v79 = &v71[v77 - v69];
      if ( !curl_strnequal(v68, v79, v69) )
      {
        v71 = v190;
LABEL_149:
        domain = v71;
        v188 = 1;
        if ( (v187[3] & 0x20) != 0 )
          Curl_infof(v191, "skipped cookie with bad tailmatch domain: %s", v68);
        goto LABEL_23;
      }
      v72 = 0;
      if ( v78 == v69 )
      {
        v71 = v190;
      }
      else
      {
        v86 = *((unsigned __int8 *)v79 - 1);
        v71 = v190;
        if ( v86 != 46 )
          goto LABEL_149;
      }
      goto LABEL_136;
    }
LABEL_156:
    ((void (__fastcall *)(int))*Curl_cfree)(v15);
    return 0;
  }
  dest[0] = 0;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
  {
    v14 = (char *)(lineptr + 0xA);
    *(_BYTE *)(v15 + 35) = 1;
  }
  if ( *v14 == 35 )
    goto LABEL_156;
  v87 = strchr(v14, 13);
  v191 = data;
  if ( v87 )
    *v87 = 0;
  v88 = strchr(v14, 10);
  if ( v88 )
    *v88 = 0;
  v89 = strtok_r(v14, "\t", dest);
  if ( !v89 )
    goto LABEL_211;
  v90 = v89;
  v91 = 0;
  v92 = 0;
  v196 = v200 + 0x18;
  v93 = (int (**)(void))Curl_cstrdup;
  while ( 2 )
  {
    switch ( v91 )
    {
      case 0:
        v94 = v90 + 1;
        if ( *v90 != 46 )
          v94 = v90;
        v95 = ((int (__fastcall *)(const char *))*v93)(v94);
        v91 = 0;
        *(_DWORD *)(v200 + 20) = v95;
        v92 |= v95 == 0;
        goto LABEL_203;
      case 1:
        v91 = 1;
        *(_BYTE *)(v200 + 32) = curl_strequal(v90, "TRUE") != 0;
        goto LABEL_203;
      case 2:
        if ( !strcmp("TRUE", v90) || !strcmp("FALSE", v90) )
        {
          v106 = ((int (__fastcall *)(const char *))*v93)("/");
          v107 = v200;
          v108 = v106;
          *(_DWORD *)(v200 + 12) = v106;
          v109 = ((int (__fastcall *)(const char *))*Curl_cstrdup)("/");
          *(_DWORD *)(v107 + 16) = v109;
          v92 |= v108 == 0 || v109 == 0;
          v93 = (int (**)(void))Curl_cstrdup;
          goto LABEL_184;
        }
        v96 = ((int (__fastcall *)(const char *))*v93)(v90);
        v97 = v200;
        v91 = 2;
        *(_DWORD *)(v200 + 12) = v96;
        if ( !v96 )
          goto LABEL_189;
        v98 = (const char *)(*v93)();
        if ( v98 )
        {
          v99 = (char *)v98;
          v100 = strlen(v98);
          if ( *v99 == 34 )
            memmove(v99, v99 + 1, v100--);
          if ( v100 )
          {
            v101 = v100 - 1;
            if ( v99[v100 - 1] == 34 )
            {
              --v100;
              v99[v101] = 0;
            }
          }
          else
          {
            v100 = 0;
          }
          if ( *v99 == 47 )
          {
            if ( v100 && v99[v100 - 1] == 47 )
              v99[v100 - 1] = 0;
          }
          else
          {
            ((void (__fastcall *)(char *))*Curl_cfree)(v99);
            v99 = (char *)Curl_strndup("/", 1);
          }
        }
        else
        {
          v99 = 0;
        }
        *(_DWORD *)(v97 + 16) = v99;
        v92 |= v99 == 0;
        v93 = (int (**)(void))Curl_cstrdup;
        goto LABEL_203;
      case 3:
LABEL_184:
        *(_BYTE *)(v200 + 33) = 0;
        v91 = 3;
        if ( curl_strequal(v90, "TRUE") )
        {
          if ( secure || c->running )
            *(_BYTE *)(v200 + 33) = 1;
          else
LABEL_189:
            v92 = 1;
        }
        goto LABEL_203;
      case 4:
        v91 = 4;
        v92 |= curlx_strtoofft(v90, 0, 10, v196) != 0;
        goto LABEL_203;
      case 5:
        v102 = ((int (__fastcall *)(const char *))*v93)(v90);
        v103 = v200;
        v91 = 5;
        *(_DWORD *)(v200 + 4) = v102;
        if ( !v102 )
        {
          v92 = 1;
          goto LABEL_203;
        }
        if ( curl_strnequal("__Secure-", v102, 9) )
        {
          v104 = *(_BYTE *)(v103 + 40) | 1;
        }
        else
        {
          if ( !curl_strnequal("__Host-", *(_DWORD *)(v103 + 4), 7) )
            goto LABEL_203;
          v104 = *(_BYTE *)(v103 + 40) | 2;
        }
        *(_BYTE *)(v103 + 40) = v104;
LABEL_203:
        v110 = strtok_r(0u, "\t", dest);
        ++v91;
        if ( v110 )
        {
          v90 = v110;
          if ( (v92 & 1) == 0 )
            continue;
        }
        if ( v91 == 6 )
        {
          v111 = ((int (__fastcall *)(void *))*v93)(&L_str_22);
          v91 = 7;
          *(_DWORD *)(v200 + 8) = v111;
          LOBYTE(v92) = v92 | (v111 == 0);
          if ( !v111 )
            v91 = 6;
        }
        v112 = (v92 & 1) == 0;
        if ( (v92 & 1) == 0 )
          v112 = v91 == 7;
        if ( !v112 )
        {
LABEL_211:
          v113 = (void (__fastcall **)(int))Curl_cfree;
          ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v200 + 20));
          (*v113)(*(_DWORD *)(v200 + 12));
          (*v113)(*(_DWORD *)(v200 + 16));
          (*v113)(*(_DWORD *)(v200 + 4));
          (*v113)(*(_DWORD *)(v200 + 8));
          (*v113)(v200);
          return 0;
        }
        v27 = v200;
        v117 = *(_BYTE *)(v200 + 40);
        v118 = v192;
        if ( (v117 & 1) == 0 )
          goto LABEL_217;
LABEL_216:
        if ( !*(_BYTE *)(v27 + 33) )
          goto LABEL_299;
LABEL_217:
        if ( (v117 & 2) != 0 )
        {
          v147 = (const char *)*(unsigned __int8 *)(v27 + 33);
          v148 = v147 == 0;
          if ( *(_BYTE *)(v27 + 33) )
          {
            v147 = *(const char **)(v27 + 12);
            v148 = v147 == 0;
          }
          if ( v148 || strcmp(v147, "/") || *(_BYTE *)(v27 + 32) )
            goto LABEL_299;
        }
        v119 = v199;
        if ( !v199->running && v199->newsession && !*(_QWORD *)(v27 + 24) )
          goto LABEL_299;
        *(_BYTE *)(v27 + 34) = v199->running;
        v120 = v199->lastct + 1;
        v199->lastct = v120;
        *(_DWORD *)(v27 + 36) = v120;
        if ( !v118 )
        {
          v121 = 0;
          v122 = time(0u);
          p_next_expiration = &v199->next_expiration;
          next_expiration_high = HIDWORD(v199->next_expiration);
          if ( (v122 >> 0x1F) - (next_expiration_high + !__CFSHR__(v122, 0x1F)) < 0 == __OFSUB__(
                                                                                         v122 >> 0x1F,
                                                                                         next_expiration_high,
                                                                                         __CFSHR__(v122, 0x1F))
            || !(~LODWORD(v199->next_expiration) | next_expiration_high ^ 0x7FFFFFFF) )
          {
            *(_DWORD *)p_next_expiration = -1;
            HIDWORD(v199->next_expiration) = 0x7FFFFFFF;
            v171 = (_DWORD *)Curl_cfree;
            do
            {
              v172 = v119->cookies[v121];
              v198 = v121;
              if ( v172 )
              {
                p_next = 0;
                do
                {
                  while ( 1 )
                  {
                    v174 = v172;
                    v172 = v172->next;
                    expires = v174->expires;
                    if ( !expires || expires >= v122 )
                      break;
                    if ( p_next )
                      *p_next = v172;
                    else
                      v199->cookies[v198] = v172;
                    --v199->numcookies;
                    ((void (__fastcall *)(char *, _DWORD, _DWORD, _DWORD))*v171)(
                      v174->domain,
                      *v171,
                      expires | HIDWORD(expires),
                      (unsigned __int64)(expires - v122) >> 32);
                    ((void (__fastcall *)(char *))*v171)(v174->path);
                    ((void (__fastcall *)(char *))*v171)(v174->spath);
                    ((void (__fastcall *)(char *))*v171)(v174->name);
                    ((void (__fastcall *)(char *))*v171)(v174->value);
                    ((void (__fastcall *)(Cookie *))*v171)(v174);
                    if ( !v172 )
                      goto LABEL_309;
                  }
                  if ( expires && expires < *p_next_expiration )
                  {
                    *(_DWORD *)p_next_expiration = expires;
                    HIDWORD(v199->next_expiration) = HIDWORD(expires);
                  }
                  p_next = &v174->next;
                }
                while ( v172 );
              }
LABEL_309:
              v119 = v199;
              v121 = v198 + 1;
            }
            while ( v198 != 0x3E );
          }
        }
        v125 = v200;
        v194 = cookiehash(*(const char *const *)(v200 + 20));
        next = v119->cookies[v194];
        if ( !next )
        {
          v127 = v191;
          v130 = 0;
          v129 = 0;
          goto LABEL_284;
        }
        v127 = v191;
        v128 = 0;
        v129 = 0;
        v197 = 0;
        while ( 2 )
        {
          v130 = next;
          if ( curl_strequal(next->name, *(_DWORD *)(v125 + 4)) )
          {
            v131 = v130->domain;
            v132 = *(_DWORD *)(v125 + 20);
            if ( v131 )
            {
              if ( v132 && curl_strequal(v131, v132) )
              {
LABEL_232:
                spath = v130->spath;
                if ( spath )
                {
                  v134 = *(_DWORD *)(v125 + 16);
                  v135 = v134 == 0;
                  if ( v134 )
                    v135 = !v130->secure;
                  if ( !v135 )
                  {
                    v136 = *(_BYTE *)(v125 + 33) == 0;
                    if ( !*(_BYTE *)(v125 + 33) )
                      v136 = secure == 0;
                    if ( v136 )
                    {
                      v137 = strchr(spath + 1, 47);
                      v138 = v137 ? v137 - spath : strlen(spath);
                      if ( curl_strnequal(spath, v134, v138) )
                      {
                        v145 = v191 == 0;
                        if ( v191 )
                          v145 = (*((_BYTE *)&v191->set + 1337) & 0x20) == 0;
                        if ( !v145 )
                          Curl_infof(
                            v191,
                            "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                            *(const char **)(v125 + 4),
                            *(const char **)(v125 + 20));
LABEL_271:
                        v146 = (void (__fastcall **)(int))Curl_cfree;
                        ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v125 + 20));
                        (*v146)(*(_DWORD *)(v125 + 12));
                        (*v146)(*(_DWORD *)(v125 + 16));
                        (*v146)(*(_DWORD *)(v125 + 4));
                        (*v146)(*(_DWORD *)(v125 + 8));
                        (*v146)(v125);
                        return 0;
                      }
                    }
                  }
                }
              }
            }
            else if ( !v132 )
            {
              goto LABEL_232;
            }
          }
          if ( !v128 )
          {
            if ( curl_strequal(v130->name, *(_DWORD *)(v125 + 4)) )
            {
              v139 = v130->domain;
              v140 = *(_DWORD *)(v125 + 20);
              if ( v139 )
              {
                if ( v140 && curl_strequal(v139, v140) )
                {
                  v141 = v129 | (*(_BYTE *)(v125 + 32)
                               - v130->tailmatch
                               + (v130->tailmatch == *(unsigned __int8 *)(v125 + 32))
                               + v130->tailmatch
                               - *(_BYTE *)(v125 + 32));
                  v129 = 0;
                  if ( (v141 & 1) == 0 )
                    goto LABEL_256;
                }
                else
                {
                  v128 = 0;
                  if ( (v129 & 1) == 0 )
                  {
                    v129 = 0;
                    goto LABEL_227;
                  }
                }
LABEL_251:
                v143 = v130->spath;
                v144 = *(_DWORD *)(v125 + 16);
                if ( !v143 )
                {
                  v129 = 0;
                  v128 = 0;
                  if ( v144 )
                    goto LABEL_227;
                  goto LABEL_260;
                }
                if ( v144 )
                {
                  if ( curl_strequal(v143, v144) )
                  {
                    v129 = 0;
                    v128 = 0;
                    if ( (v130->spath != 0) == (*(_DWORD *)(v125 + 16) == 0) )
                      goto LABEL_227;
                    goto LABEL_260;
                  }
                }
                else if ( *(_DWORD *)(v125 + 16) )
                {
LABEL_260:
                  v129 = 1;
                  if ( *(_BYTE *)(v125 + 34) )
                  {
                    v197 = v130;
                    v128 = (Cookie **)v125;
                  }
                  else
                  {
                    v128 = (Cookie **)v125;
                    v197 = v130;
                    if ( v130->livecookie )
                      goto LABEL_271;
                  }
                  goto LABEL_227;
                }
                v129 = 0;
                v128 = 0;
                goto LABEL_227;
              }
              v142 = (unsigned __int8)(v129 | (v140 == 0));
              v129 = 0;
              if ( (v142 & 1) != 0 )
                goto LABEL_251;
            }
LABEL_256:
            v128 = 0;
          }
LABEL_227:
          next = v130->next;
          if ( v130->next )
            continue;
          break;
        }
        if ( v128 )
        {
          creationtime = (Cookie *)v197->creationtime;
          name = v197->name;
          *v128 = v197->next;
          v128[9] = creationtime;
          v151 = (void (__fastcall **)(char *))Curl_cfree;
          ((void (__fastcall *)(char *))*Curl_cfree)(name);
          (*v151)(v197->value);
          (*v151)(v197->domain);
          (*v151)(v197->path);
          (*v151)(v197->spath);
          v152 = (char *)v128[1];
          v153 = (char *)v128[2];
          v154 = (char *)v128[3];
          v155 = (char *)v128[4];
          v156 = (char *)v128[5];
          v197->next = *v128;
          v197->name = v152;
          v197->value = v153;
          v197->path = v154;
          v197->spath = v155;
          v197->domain = v156;
          v157 = v128[7];
          v158 = v128[8];
          v159 = v128[9];
          v160 = v128[10];
          v161 = v128[11];
          LODWORD(v197->expires) = v128[6];
          HIDWORD(v197->expires) = v157;
          *(_DWORD *)&v197->tailmatch = v158;
          v197->creationtime = (int)v159;
          *(_DWORD *)&v197->prefix = v160;
          *((_DWORD *)&v197->prefix + 1) = v161;
          ((void (__fastcall *)(Cookie **))*Curl_cfree)(v128);
          v125 = (int)v197;
        }
LABEL_284:
        if ( !v127 )
          goto LABEL_289;
        v162 = !v199->running;
        if ( v199->running )
          v162 = (*((_BYTE *)&v127->set + 1337) & 0x20) == 0;
        if ( v162 )
        {
LABEL_289:
          v163 = v199;
          if ( (v129 & 1) != 0 )
            goto LABEL_294;
LABEL_290:
          if ( v130 )
            v130->next = (Cookie *)v125;
          else
            v163->cookies[v194] = (Cookie *)v125;
          ++v163->numcookies;
          goto LABEL_294;
        }
        v176 = "Added";
        if ( (v129 & 1) != 0 )
          v176 = "Replaced";
        Curl_infof(
          v127,
          "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
          v176,
          *(_DWORD *)(v125 + 4),
          *(_DWORD *)(v125 + 8),
          *(_DWORD *)(v125 + 0x14),
          *(_DWORD *)(v125 + 12),
          *(_QWORD *)(v125 + 24));
        v163 = v199;
        if ( (v129 & 1) == 0 )
          goto LABEL_290;
LABEL_294:
        v164 = *(_QWORD *)(v125 + 24);
        if ( v164 )
        {
          next_expiration = v163->next_expiration;
          v165 = &v163->next_expiration;
          if ( v164 < __SPAIR64__(*((_DWORD *)v165 + 1), next_expiration) )
            *v165 = v164;
        }
        return (Cookie *)v125;
      case 6:
        v105 = ((int (__fastcall *)(const char *))*v93)(v90);
        v91 = 6;
        *(_DWORD *)(v200 + 8) = v105;
        v92 |= v105 == 0;
        goto LABEL_203;
      default:
        goto LABEL_203;
    }
  }
}
