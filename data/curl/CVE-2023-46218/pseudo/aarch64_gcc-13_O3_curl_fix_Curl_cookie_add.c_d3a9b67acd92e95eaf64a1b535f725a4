Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  _BOOL4 v9; // w25
  Cookie *v11; // x19
  int v12; // w24
  size_t v14; // x28
  int v15; // t1
  const char *v17; // x23
  unsigned __int64 v18; // x2
  _BOOL4 v19; // w7
  char *name; // x22
  size_t v21; // x26
  const char *v22; // x20
  int v23; // w0
  char *v25; // x0
  char *v26; // x0
  char *v27; // x1
  int v28; // w28
  char *v29; // x0
  __int64 v30; // x0
  _BOOL4 v31; // w27
  int v32; // w20
  bool v33; // zf
  int v34; // w0
  int v35; // w0
  bool v37; // cc
  bool v38; // zf
  char *v41; // x0
  int lastct; // w0
  size_t v43; // x27
  Cookie *v44; // x20
  char livecookie; // w25
  Cookie *v46; // x24
  Cookie *v47; // x21
  char *v48; // x0
  char *v49; // x1
  const char *spath; // x28
  char *v51; // x26
  Cookie *next; // x1
  _BYTE *v53; // x0
  int v54; // w0
  char *v55; // x1
  const char *v56; // x0
  const char *v57; // x22
  __int64 v59; // x0
  char *v60; // x0
  char *v62; // x0
  __int64 v63; // x0
  bool v64; // zf
  int v65; // w0
  size_t v66; // x0
  size_t v67; // x24
  const char *v68; // x23
  __int64 v69; // x0
  char *v70; // x0
  int v71; // w0
  curl_off_t expires; // x0
  char *v73; // x0
  size_t v74; // x2
  char *v75; // x0
  char *v76; // x1
  char *v77; // x0
  char *v78; // x1
  char *v79; // x0
  void (__fastcall *v80)(char *); // x1
  __int128 v81; // q1
  void (__fastcall *v82)(Cookie *); // x1
  __int128 v83; // q1
  int v84; // w25
  const char *v85; // x2
  curl_off_t v86; // x0
  int v87; // w0
  __int64 (__fastcall *v88)(const char *); // x27
  const char *v89; // x1
  int v90; // w0
  const char *v91; // x0
  char *v92; // x0
  __int64 v93; // x0
  __int64 (__fastcall *v94)(void *); // x3
  __int64 v95; // x20
  __int64 v96; // x0
  int v97; // w0
  __int64 (__fastcall *v98)(const char *); // x27
  const char *v99; // x1
  int v100; // w0
  __int64 v101; // x0
  __int64 (__fastcall *v102)(void *); // x3
  __int64 v103; // x20
  __int64 v104; // x0
  __int64 v105; // x0
  __int64 v106; // x0
  __int64 v107; // x0
  __int64 v108; // x0
  __int64 v109; // x0
  char is_ipnum; // w23
  __int64 v111; // x0
  __int64 v112; // x0
  const char *v113; // x0
  char *v114; // x0
  char *v115; // x0
  char *v116; // x0
  signed __int64 v117; // x0
  size_t v118; // x20
  char *v119; // x0
  char *v120; // x0
  __int64 v122; // x0
  bool v123; // zf
  int v124; // w0
  char *v125; // x1
  __int64 v126; // x0
  bool v127; // zf
  _BOOL4 securea; // [xsp+68h] [xbp+68h]
  const char *domainb; // [xsp+78h] [xbp+78h]
  const char *domainc; // [xsp+78h] [xbp+78h]
  const char *domaind; // [xsp+78h] [xbp+78h]
  const char *domaine; // [xsp+78h] [xbp+78h]
  time_t now; // [xsp+90h] [xbp+90h]
  bool badcookie; // [xsp+98h] [xbp+98h]
  bool v140; // [xsp+BCh] [xbp+BCh]
  bool v141; // [xsp+BCh] [xbp+BCh]
  char *tok_buf; // [xsp+C0h] [xbp+C0h] BYREF
  char date[128]; // [xsp+C8h] [xbp+C8h] BYREF

  v9 = httpheader;
  securea = secure;
  now = time(0uLL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  v11 = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !v11 )
    return 0LL;
  if ( !v9 )
  {
    tok_buf = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 0xA;
      v11->httponly = 1;
    }
    if ( *lineptr == 35 )
      goto LABEL_302;
    v25 = strchr(lineptr, 13);
    if ( v25 )
      *v25 = 0;
    v26 = strchr(lineptr, 10);
    if ( v26 )
      *v26 = 0;
    v27 = strtok_r((char *)lineptr, "\t", &tok_buf);
    if ( !v27 )
      goto LABEL_163;
    if ( !securea )
    {
      v28 = 0;
      while ( v28 != 3 )
      {
        if ( v28 <= 3 )
        {
          if ( v28 == 1 )
          {
            LOBYTE(v31) = securea;
            v28 = 2;
            v32 = 1;
            v11->tailmatch = (unsigned int)curl_strequal(v27, "TRUE") != 0;
            goto LABEL_49;
          }
          if ( v28 != 2 )
          {
            if ( !v28 )
            {
              v28 = 1;
              if ( *v27 == 46 )
                v29 = v27 + 1;
              else
                v29 = v27;
              v30 = Curl_cstrdup(v29);
              LOBYTE(v31) = v30 == 0;
              v32 = v30 != 0;
              v11->domain = (char *)v30;
              goto LABEL_49;
            }
LABEL_249:
            LOBYTE(v31) = securea;
            ++v28;
            v32 = 1;
            goto LABEL_49;
          }
          domainb = v27;
          v87 = strcmp("TRUE", v27);
          v88 = (__int64 (__fastcall *)(const char *))Curl_cstrdup;
          v89 = domainb;
          if ( v87 )
          {
            v90 = strcmp("FALSE", domainb);
            v89 = domainb;
            if ( v90 )
            {
              v91 = (const char *)v88(domainb);
              v11->path = (char *)v91;
              if ( !v91 )
                goto LABEL_291;
              v92 = sanitize_cookie_path(v91);
              LOBYTE(v31) = v92 == 0LL;
              v32 = v92 != 0LL;
              v28 = 3;
              v11->spath = v92;
              goto LABEL_49;
            }
          }
          domainc = v89;
          v93 = v88(byte_2990);
          v94 = (__int64 (__fastcall *)(void *))Curl_cstrdup;
          v11->path = (char *)v93;
          v95 = v93;
          v96 = v94(byte_2990);
          v11->spath = (char *)v96;
          v27 = (char *)domainc;
          if ( !v96 )
          {
            v11->secure = 0;
            if ( !(unsigned int)curl_strequal(domainc, "TRUE") )
              goto LABEL_291;
            v31 = 1;
LABEL_289:
            if ( !c->running )
              goto LABEL_291;
            v32 = !v31;
            v28 = 4;
            v11->secure = 1;
            goto LABEL_49;
          }
          v31 = v95 == 0;
          goto LABEL_247;
        }
        if ( v28 == 5 )
        {
          v106 = Curl_cstrdup(v27);
          v11->name = (char *)v106;
          if ( !v106 )
            goto LABEL_276;
          if ( (unsigned int)curl_strnequal("__Secure-", v106, 9LL) )
          {
            v11->prefix |= 1u;
          }
          else if ( (unsigned int)curl_strnequal("__Host-", v11->name, 7LL) )
          {
            v11->prefix |= 2u;
          }
          LOBYTE(v31) = securea;
          v28 = 6;
          v32 = 1;
          goto LABEL_49;
        }
        if ( v28 == 6 )
        {
          v28 = 7;
          v105 = Curl_cstrdup(v27);
          LOBYTE(v31) = v105 == 0;
          v32 = v105 != 0;
          v11->value = (char *)v105;
          goto LABEL_49;
        }
        if ( v28 != 4 )
          goto LABEL_249;
        v34 = curlx_strtoofft(v27, 0LL, 10LL, &v11->expires);
        LOBYTE(v31) = v34 != 0;
        v32 = v34 == 0;
        v28 = 5;
LABEL_49:
        v27 = strtok_r(0uLL, "\t", &tok_buf);
        if ( v27 )
          v33 = v32 == 0;
        else
          v33 = 1;
        if ( v33 )
          goto LABEL_361;
      }
      v31 = securea;
LABEL_247:
      v11->secure = 0;
      if ( (unsigned int)curl_strequal(v27, "TRUE") )
        goto LABEL_289;
      v32 = !v31;
      v28 = 4;
      goto LABEL_49;
    }
    v28 = 0;
    while ( 1 )
    {
      if ( v28 == 3 )
      {
        v11->secure = 0;
        v31 = v9;
        if ( (unsigned int)curl_strequal(v27, "TRUE") )
          goto LABEL_265;
LABEL_262:
        v32 = !v31;
        v28 = 4;
        goto LABEL_177;
      }
      if ( v28 <= 3 )
        break;
      switch ( v28 )
      {
        case 5:
          v108 = Curl_cstrdup(v27);
          v11->name = (char *)v108;
          if ( !v108 )
          {
LABEL_276:
            LOBYTE(v31) = 1;
            strtok_r(0uLL, "\t", &tok_buf);
            goto LABEL_277;
          }
          if ( (unsigned int)curl_strnequal("__Secure-", v108, 9LL) )
          {
            v11->prefix |= 1u;
          }
          else if ( (unsigned int)curl_strnequal("__Host-", v11->name, 7LL) )
          {
            v11->prefix |= 2u;
          }
          v32 = securea;
          LOBYTE(v31) = v9;
          v28 = 6;
          break;
        case 6:
          v28 = 7;
          v107 = Curl_cstrdup(v27);
          LOBYTE(v31) = v107 == 0;
          v32 = v107 != 0;
          v11->value = (char *)v107;
          break;
        case 4:
          v65 = curlx_strtoofft(v27, 0LL, 10LL, &v11->expires);
          LOBYTE(v31) = v65 != 0;
          v32 = v65 == 0;
          v28 = 5;
          break;
        default:
          goto LABEL_257;
      }
LABEL_177:
      v27 = strtok_r(0uLL, "\t", &tok_buf);
      if ( v27 )
        v64 = v32 == 0;
      else
        v64 = 1;
      if ( v64 )
      {
LABEL_361:
        if ( v28 != 6 )
        {
          if ( v32 )
            v127 = v28 == 7;
          else
            v127 = 1;
          if ( !v127 )
            goto LABEL_163;
          goto LABEL_278;
        }
LABEL_277:
        v109 = Curl_cstrdup(&unk_2B10);
        v11->value = (char *)v109;
        if ( !v109 )
          goto LABEL_163;
LABEL_278:
        if ( v31 )
          goto LABEL_163;
        goto LABEL_93;
      }
    }
    switch ( v28 )
    {
      case 1:
        v32 = securea;
        LOBYTE(v31) = v9;
        v28 = 2;
        v11->tailmatch = (unsigned int)curl_strequal(v27, "TRUE") != 0;
        goto LABEL_177;
      case 2:
        domaind = v27;
        v97 = strcmp("TRUE", v27);
        v98 = (__int64 (__fastcall *)(const char *))Curl_cstrdup;
        v99 = domaind;
        if ( v97 )
        {
          v100 = strcmp("FALSE", domaind);
          v99 = domaind;
          if ( v100 )
          {
            v113 = (const char *)v98(domaind);
            v11->path = (char *)v113;
            if ( !v113 )
              goto LABEL_291;
            v114 = sanitize_cookie_path(v113);
            LOBYTE(v31) = v114 == 0LL;
            v32 = v114 != 0LL;
            v28 = 3;
            v11->spath = v114;
            goto LABEL_177;
          }
        }
        domaine = v99;
        v101 = v98(byte_2990);
        v102 = (__int64 (__fastcall *)(void *))Curl_cstrdup;
        v11->path = (char *)v101;
        v103 = v101;
        v104 = v102(byte_2990);
        v11->spath = (char *)v104;
        if ( !v104 )
        {
          v11->secure = 0;
          if ( !(unsigned int)curl_strequal(domaine, "TRUE") )
          {
LABEL_291:
            strtok_r(0uLL, "\t", &tok_buf);
            freecookie(v11);
            return 0LL;
          }
          v31 = securea;
LABEL_265:
          v32 = !v31;
          v28 = 4;
          v11->secure = 1;
          goto LABEL_177;
        }
        v11->secure = 0;
        v31 = v103 == 0;
        if ( (unsigned int)curl_strequal(domaine, "TRUE") )
          goto LABEL_265;
        goto LABEL_262;
      case 0:
        v28 = 1;
        if ( *v27 == 46 )
          v62 = v27 + 1;
        else
          v62 = v27;
        v63 = Curl_cstrdup(v62);
        LOBYTE(v31) = v63 == 0;
        v32 = v63 != 0;
        v11->domain = (char *)v63;
        goto LABEL_177;
    }
LABEL_257:
    v32 = securea;
    ++v28;
    LOBYTE(v31) = v9;
    goto LABEL_177;
  }
  badcookie = 0;
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_302:
    Curl_cfree(v11);
    return 0LL;
  }
  v12 = *(unsigned __int8 *)lineptr;
  if ( *lineptr )
    goto LABEL_6;
LABEL_19:
  v14 = strcspn(lineptr, ";\t\r\n=");
  if ( !v14 )
    goto LABEL_80;
  while ( 1 )
  {
    v17 = &lineptr[v14];
    while ( 1 )
    {
      v18 = v14--;
      v19 = lineptr[v14] == 32 || lineptr[v14] == 9;
      if ( !v19 )
        break;
      if ( !v14 )
      {
        if ( *v17 == 61 )
          goto LABEL_24;
        name = v11->name;
        if ( name )
        {
          LOBYTE(v19) = 0;
          name = 0LL;
          goto LABEL_143;
        }
        v21 = 0LL;
        LOBYTE(v19) = 0;
LABEL_150:
        if ( v19 )
        {
          Curl_cfree(0LL);
          v11->name = (char *)Curl_strndup(lineptr, v14);
          Curl_cfree(v11->value);
          v56 = (const char *)Curl_strndup(name, v21);
          v11->value = (char *)v56;
          v57 = v11->name;
          if ( v56 && v57 != 0LL )
          {
            if ( !v56[strcspn(v56, badoctets_0)] && !v57[strcspn(v57, badoctets_0)] )
              goto LABEL_157;
            if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
              Curl_infof(data, "invalid octets in name/value, cookie dropped");
          }
        }
LABEL_163:
        freecookie(v11);
        return 0LL;
      }
    }
    v14 = v18;
    if ( *v17 != 61 )
      break;
LABEL_24:
    name = (char *)(v17 + 1);
    v21 = strcspn(v17 + 1, ";\r\n");
    v22 = &v17[v21 + 1];
    if ( v21 )
    {
      while ( 1 )
      {
        v23 = (unsigned __int8)v17[v21];
        if ( v23 != 32 && v23 != 9 )
          break;
        if ( !--v21 )
          goto LABEL_292;
      }
      while ( 1 )
      {
        v35 = (unsigned __int8)*name;
        if ( v35 != 32 && v35 != 9 )
          break;
        ++name;
        if ( !--v21 )
          goto LABEL_65;
      }
      if ( memchr(name, 9, v21) )
      {
        freecookie(v11);
        if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
          Curl_infof(data, "cookie contains TAB, dropping");
        return 0LL;
      }
LABEL_65:
      v37 = v14 > 0xFFE || v21 > 0xFFE;
      if ( v37 || v14 + v21 > 0x1000 )
        goto LABEL_297;
      LOBYTE(v19) = v9;
    }
    else
    {
LABEL_292:
      if ( v14 > 0xFFE )
      {
LABEL_296:
        v21 = 0LL;
LABEL_297:
        freecookie(v11);
        if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
          Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v14, v21);
        return 0LL;
      }
      LOBYTE(v19) = v9;
      v21 = 0LL;
    }
    v38 = v14 == 6;
    if ( v14 > 6 )
      goto LABEL_72;
LABEL_124:
    if ( !v11->name )
      goto LABEL_149;
    if ( !v21 )
    {
      v17 = v22;
      if ( v38 )
      {
        v141 = v19;
        if ( !(unsigned int)curl_strnequal("secure", lineptr, v14) )
        {
          if ( v141 )
            curl_strnequal("domain", lineptr, v14);
          goto LABEL_119;
        }
        if ( !securea && c->running )
          goto LABEL_163;
        v11->secure = 1;
        lineptr = v22;
        v12 = *(unsigned __int8 *)v22;
        if ( *v22 )
          goto LABEL_13;
      }
      else
      {
LABEL_143:
        if ( v19 )
        {
          if ( v14 != 4 )
          {
            lineptr = v17;
            v12 = *(unsigned __int8 *)v17;
            goto LABEL_79;
          }
          v22 = v17;
          v21 = 0LL;
LABEL_160:
          if ( (unsigned int)curl_strnequal("path", lineptr, 4LL) )
          {
            Curl_cfree(v11->path);
            v59 = Curl_strndup(name, v21);
            v11->path = (char *)v59;
            if ( !v59 )
              goto LABEL_163;
            Curl_cfree(v11->spath);
            v60 = sanitize_cookie_path(v11->path);
            v11->spath = v60;
            if ( !v60 )
              goto LABEL_163;
          }
LABEL_119:
          v12 = *(unsigned __int8 *)v22;
          lineptr = v22;
          if ( *v22 )
            goto LABEL_13;
        }
        else
        {
LABEL_157:
          v12 = *(unsigned __int8 *)v17;
          lineptr = v17;
          if ( *v17 )
            goto LABEL_13;
        }
      }
      goto LABEL_80;
    }
    if ( v14 == 4 )
      goto LABEL_160;
    if ( v14 != 6 )
      goto LABEL_78;
    if ( !(unsigned int)curl_strnequal("domain", lineptr, 6LL) )
      goto LABEL_119;
    if ( *name == 46 )
    {
      ++name;
      --v21;
    }
    if ( v21 == 9 && (unsigned int)curl_strnequal(name, "localhost", 9LL)
      || (v53 = memchr(name, 46, v21)) != 0LL && v21 - (v53 - name) > 1 )
    {
      if ( domain )
      {
        if ( (Curl_host_is_ipnum(domain) & 1) != 0 )
          goto LABEL_135;
LABEL_190:
        v66 = strlen(domain);
        v67 = v66;
        if ( v21 > v66 )
          goto LABEL_137;
        v68 = &domain[v66 - v21];
        if ( !(unsigned int)curl_strnequal(name, v68, v21) || v21 != v67 && *(v68 - 1) != 46 )
          goto LABEL_137;
        Curl_cfree(v11->domain);
        v69 = Curl_strndup(name, v21);
        v11->domain = (char *)v69;
        if ( !v69 )
          goto LABEL_163;
      }
      else
      {
        is_ipnum = Curl_host_is_ipnum(name);
        Curl_cfree(v11->domain);
        v111 = Curl_strndup(name, v21);
        v11->domain = (char *)v111;
        if ( !v111 )
          goto LABEL_163;
        if ( (is_ipnum & 1) != 0 )
          goto LABEL_119;
      }
      v11->tailmatch = 1;
      lineptr = v22;
      v12 = *(unsigned __int8 *)v22;
      if ( *v22 )
        goto LABEL_13;
      goto LABEL_80;
    }
    domain = (const char *)&unk_2998;
    if ( (Curl_host_is_ipnum(&unk_2998) & 1) == 0 )
      goto LABEL_190;
LABEL_135:
    if ( !strncmp(name, domain, v21) && strlen(domain) == v21 )
    {
      Curl_cfree(v11->domain);
      v112 = Curl_strndup(name, v21);
      v11->domain = (char *)v112;
      if ( !v112 )
        goto LABEL_163;
      goto LABEL_119;
    }
LABEL_137:
    if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
      Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", name);
    v12 = *(unsigned __int8 *)v22;
    lineptr = v22;
    badcookie = v9;
    if ( !*v22 )
      goto LABEL_80;
LABEL_13:
    while ( 2 )
    {
      while ( v12 == 32 || v12 == 9 )
      {
        v15 = *(unsigned __int8 *)++lineptr;
        v12 = v15;
        if ( !v15 )
          goto LABEL_80;
      }
      if ( v12 != 59 )
        goto LABEL_80;
      do
      {
        v12 = *(unsigned __int8 *)++lineptr;
        if ( !v12 )
          goto LABEL_19;
LABEL_6:
        ;
      }
      while ( v12 == 32 || v12 == 9 );
      v14 = strcspn(lineptr, ";\t\r\n=");
      if ( !v14 )
        continue;
      break;
    }
  }
  if ( v18 > 0xFFE )
    goto LABEL_296;
  v22 = v17;
  v38 = v18 == 6;
  name = 0LL;
  v21 = 0LL;
  if ( v18 <= 6 )
    goto LABEL_124;
LABEL_72:
  if ( v12 == 95 && lineptr[1] == 95 )
  {
    v140 = v19;
    v54 = curl_strnequal("__Secure-", lineptr, 9LL);
    LOBYTE(v19) = v140;
    if ( v54 )
    {
      v55 = v11->name;
      v11->prefix |= 1u;
      if ( !v55 )
        goto LABEL_149;
      goto LABEL_74;
    }
    v124 = curl_strnequal("__Host-", lineptr, 7LL);
    LOBYTE(v19) = v140;
    if ( v124 )
    {
      v125 = v11->name;
      v11->prefix |= 2u;
      if ( !v125 )
      {
        v17 = v22;
        goto LABEL_150;
      }
      goto LABEL_74;
    }
  }
  if ( !v11->name )
  {
LABEL_149:
    v17 = v22;
    goto LABEL_150;
  }
LABEL_74:
  if ( !v21 )
  {
    if ( v14 == 8 )
    {
      if ( !(unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
        goto LABEL_119;
      v11->httponly = 1;
      lineptr = v22;
      v12 = *(unsigned __int8 *)v22;
      if ( *v22 )
        goto LABEL_13;
      goto LABEL_80;
    }
    if ( !v19 )
      goto LABEL_119;
  }
  if ( v14 == 7 )
  {
    if ( (unsigned int)curl_strnequal("version", lineptr, 7LL) )
      goto LABEL_119;
    if ( !(unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
    {
      if ( (unsigned int)curl_strnequal("expires", lineptr, 7LL) )
      {
        if ( v21 <= 0x7F && v11->expires == 0 )
        {
          *((_BYTE *)memcpy(date, name, v21) + v21) = 0;
          v122 = Curl_getdate_capped();
          v123 = v122 == 0;
          if ( v122 < 0 )
            v122 = 0LL;
          if ( v123 )
            v122 = 1LL;
          v11->expires = v122;
        }
      }
      goto LABEL_119;
    }
    if ( *name == 34 )
      v70 = name + 1;
    else
      v70 = name;
    v71 = curlx_strtoofft(v70, 0LL, 10LL, &v11->expires);
    if ( v71 == 1 )
    {
      v11->expires = 0x7FFFFFFFFFFFFFFFLL;
      lineptr = v22;
      v12 = *(unsigned __int8 *)v22;
      if ( *v22 )
        goto LABEL_13;
    }
    else
    {
      if ( v71 == 2 )
        goto LABEL_353;
      if ( v71 )
        goto LABEL_119;
      expires = v11->expires;
      if ( !expires )
      {
LABEL_353:
        v11->expires = 1LL;
        lineptr = v22;
        v12 = *(unsigned __int8 *)v22;
        if ( *v22 )
          goto LABEL_13;
      }
      else if ( expires <= 0x7FFFFFFFFFFFFFFFLL - now )
      {
        lineptr = v22;
        v11->expires = expires + now;
        v12 = *(unsigned __int8 *)v22;
        if ( *v22 )
          goto LABEL_13;
      }
      else
      {
        v11->expires = 0x7FFFFFFFFFFFFFFFLL;
        lineptr = v22;
        v12 = *(unsigned __int8 *)v22;
        if ( *v22 )
          goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_78:
    lineptr = v22;
    v12 = *(unsigned __int8 *)v22;
LABEL_79:
    if ( v12 )
      goto LABEL_13;
  }
LABEL_80:
  if ( badcookie )
    goto LABEL_163;
  if ( !v11->domain && domain != 0LL )
  {
    v126 = Curl_cstrdup(domain);
    v11->domain = (char *)v126;
    if ( !v126 )
      goto LABEL_163;
  }
  if ( !v11->path && path != 0LL )
  {
    v115 = strchr(path, 63);
    v116 = v115 ? (char *)Curl_memrchr(path, 47LL, v115 - path) : strrchr(path, 47);
    if ( v116 )
    {
      v117 = v116 - path;
      v118 = v117 + 1;
      v119 = (char *)Curl_cmalloc(v117 + 2);
      v11->path = v119;
      if ( !v119 )
        goto LABEL_163;
      memcpy(v119, path, v118);
      v11->path[v118] = 0;
      v120 = sanitize_cookie_path(v11->path);
      v11->spath = v120;
      if ( !v120 )
        goto LABEL_163;
    }
  }
  if ( !v11->name )
    goto LABEL_163;
  ++data->req.setcookies;
LABEL_93:
  if ( (v11->prefix & 1) != 0 )
  {
    if ( !v11->secure )
      goto LABEL_163;
    if ( (v11->prefix & 2) != 0 )
    {
LABEL_96:
      v41 = v11->path;
      if ( !v41 || *v41 != 47 || v41[1] || v11->tailmatch )
        goto LABEL_163;
    }
  }
  else if ( (v11->prefix & 2) != 0 )
  {
    if ( !v11->secure )
      goto LABEL_163;
    goto LABEL_96;
  }
  if ( !c->running && c->newsession && !v11->expires )
    goto LABEL_163;
  lastct = c->lastct;
  v11->livecookie = c->running;
  c->lastct = ++lastct;
  v11->creationtime = lastct;
  if ( !noexpire )
    remove_expired(c);
  v43 = cookiehash(v11->domain);
  v44 = c->cookies[v43];
  if ( !v44 )
  {
    v46 = v11;
    if ( c->running && (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
    {
      v85 = "Added";
      v84 = 0;
      goto LABEL_233;
    }
    goto LABEL_316;
  }
  livecookie = 0;
  v46 = 0LL;
  v47 = 0LL;
  while ( 1 )
  {
    if ( !(unsigned int)curl_strequal(v44->name, v11->name) )
      goto LABEL_115;
    v48 = v44->domain;
    v49 = v11->domain;
    if ( v48 )
    {
      if ( !v49 || !(unsigned int)curl_strequal(v48, v49) )
        goto LABEL_115;
    }
    else if ( v49 )
    {
      goto LABEL_115;
    }
    spath = v44->spath;
    if ( spath )
    {
      v51 = v11->spath;
      if ( v51 )
      {
        if ( v44->secure && !v11->secure && !securea )
        {
          v73 = strchr(spath + 1, 47);
          v74 = v73 ? v73 - spath : strlen(spath);
          if ( (unsigned int)curl_strnequal(spath, v51, v74) )
          {
            if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
              Curl_infof(
                data,
                "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                v11->name,
                v11->domain);
            goto LABEL_163;
          }
        }
      }
    }
LABEL_115:
    if ( v47 || !(unsigned int)curl_strequal(v44->name, v11->name) )
      goto LABEL_116;
    v75 = v44->domain;
    v76 = v11->domain;
    if ( !v75 )
    {
      if ( v76 && (livecookie & 1) == 0 )
        break;
      goto LABEL_218;
    }
    if ( (!v76 || !(unsigned int)curl_strequal(v75, v76) || v44->tailmatch != v11->tailmatch) && (livecookie & 1) == 0 )
      break;
LABEL_218:
    v77 = v44->spath;
    v78 = v11->spath;
    if ( v77 )
    {
      if ( !v78 || !(unsigned int)curl_strequal(v77, v78) )
        break;
      v78 = v11->spath;
      v77 = v44->spath;
    }
    if ( (v77 == 0LL) != (v78 == 0LL) )
      break;
    livecookie = v11->livecookie;
    if ( (livecookie & 1) != 0 )
    {
      v46 = v44;
      v47 = v11;
    }
    else
    {
      if ( v44->livecookie )
        goto LABEL_163;
      v46 = v44;
      v47 = v11;
      livecookie = 1;
    }
LABEL_116:
    next = v44->next;
    if ( !v44->next )
      goto LABEL_227;
LABEL_117:
    v44 = next;
  }
  next = v44->next;
  livecookie = 0;
  if ( v44->next )
    goto LABEL_117;
LABEL_227:
  if ( v47 )
  {
    v79 = v46->name;
    v80 = (void (__fastcall *)(char *))Curl_cfree;
    v47->next = v46->next;
    v47->creationtime = v46->creationtime;
    v80(v79);
    Curl_cfree(v46->value);
    Curl_cfree(v46->domain);
    Curl_cfree(v46->path);
    Curl_cfree(v46->spath);
    v81 = *(_OWORD *)&v47->value;
    v82 = (void (__fastcall *)(Cookie *))Curl_cfree;
    *(_OWORD *)&v46->next = *(_OWORD *)&v47->next;
    *(_OWORD *)&v46->value = v81;
    v83 = *(_OWORD *)&v47->expires;
    *(_OWORD *)&v46->spath = *(_OWORD *)&v47->spath;
    *(_OWORD *)&v46->expires = v83;
    *(_QWORD *)&v46->prefix = *(_QWORD *)&v47->prefix;
    v82(v47);
  }
  else
  {
    v46 = v11;
  }
  if ( !c->running || (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) == 0 )
  {
    if ( (livecookie & 1) != 0 )
      goto LABEL_234;
    goto LABEL_241;
  }
  v84 = livecookie & 1;
  v85 = "Added";
  if ( v84 )
    v85 = "Replaced";
LABEL_233:
  Curl_infof(
    data,
    "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
    v85,
    v46->name,
    v46->value,
    v46->domain,
    v46->path,
    v46->expires);
  if ( !v84 )
  {
    if ( !v44 )
    {
LABEL_316:
      c->cookies[v43] = v46;
      goto LABEL_242;
    }
LABEL_241:
    v44->next = v46;
LABEL_242:
    ++c->numcookies;
  }
LABEL_234:
  v86 = v46->expires;
  if ( v86 && v86 < c->next_expiration )
    c->next_expiration = v86;
  return v46;
}
