Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  Cookie *v13; // x19
  int v14; // w0
  size_t v16; // x0
  size_t v17; // x28
  const char *v18; // x2
  size_t v19; // x1
  int v20; // w0
  _BYTE *v22; // x22
  size_t v23; // x20
  const char *v24; // x27
  int v25; // w0
  int v27; // w0
  _BOOL4 v29; // w3
  bool v30; // cc
  int v31; // w0
  curl_off_t expires; // x1
  __int64 v33; // x0
  int v34; // w0
  int v35; // w0
  char *name; // x1
  const char *v37; // x20
  char *value; // x21
  char *v39; // x0
  int v40; // w0
  _BYTE *v42; // x0
  int is_ipnum; // w21
  bool v44; // zf
  char *v45; // x0
  char *v46; // x0
  signed __int64 v47; // x0
  size_t v48; // x20
  char *v49; // x0
  char *v50; // x0
  const char *v51; // x0
  int v52; // w0
  int livecookie; // w25
  Cookie *v54; // x21
  Cookie *v55; // x22
  Cookie *v56; // x27
  __int64 v57; // x2
  size_t v58; // x26
  Cookie *v59; // x20
  void (__fastcall *v60)(char *); // x1
  const char *v61; // x2
  curl_off_t v62; // x0
  __int64 v63; // x0
  char *v64; // x0
  char *v65; // x0
  int v66; // w28
  char *v67; // x25
  int i; // w21
  __int64 v69; // x2
  int v70; // w20
  __int64 v71; // x0
  __int64 v72; // x0
  int v73; // w0
  __int64 (__fastcall *v74)(const char *); // x2
  int v75; // w0
  const char *v76; // x0
  char *v77; // x0
  __int64 v78; // x21
  __int64 (__fastcall *v79)(const char *); // x2
  __int64 v80; // x0
  int v81; // w21
  __int64 v82; // x0
  unsigned __int8 v83; // w0
  char *v85; // x0
  char *v86; // x1
  const char *spath; // x28
  char *v88; // x0
  char *v89; // x1
  char *v90; // x27
  char *v91; // x0
  size_t v92; // x2
  char *v93; // x0
  char *v94; // x1
  int save_ptr; // [xsp+60h] [xbp+60h]
  _BOOL4 save_ptra; // [xsp+60h] [xbp+60h]
  _BOOL4 save_ptrb; // [xsp+60h] [xbp+60h]
  _BOOL4 httpheadera; // [xsp+68h] [xbp+68h]
  _BOOL4 badcookie; // [xsp+70h] [xbp+70h]
  __int64 (__fastcall *badcookiea)(const char *); // [xsp+70h] [xbp+70h]
  time_t now; // [xsp+78h] [xbp+78h]
  _BOOL4 securea; // [xsp+88h] [xbp+88h]
  _BOOL4 noexpirea; // [xsp+8Ch] [xbp+8Ch]
  const char *v105; // [xsp+98h] [xbp+98h]
  char *tok_buf; // [xsp+A0h] [xbp+A0h] BYREF
  char date[128]; // [xsp+A8h] [xbp+A8h] BYREF

  httpheadera = httpheader;
  noexpirea = noexpire;
  securea = secure;
  now = time(0uLL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  v13 = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !v13 )
    return 0LL;
  if ( !httpheadera )
  {
    tok_buf = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 0xA;
      v13->httponly = 1;
    }
    if ( *lineptr == 35 )
      goto LABEL_5;
    v64 = strchr(lineptr, 13);
    if ( v64 )
      *v64 = 0;
    v65 = strchr(lineptr, 10);
    if ( v65 )
      *v65 = 0;
    v66 = 0;
    v67 = strtok_r((char *)lineptr, "\t", &tok_buf);
    for ( i = 0; ; ++i )
    {
      v69 = (unsigned __int8)v66 ^ 1u;
      v70 = (v66 ^ 1) & (v67 != 0LL);
      if ( !v70 )
      {
        if ( i == 6 )
        {
          v71 = Curl_cstrdup(&unk_1F87);
          v13->value = (char *)v71;
          if ( !v71 )
            goto LABEL_76;
        }
        else if ( (unsigned __int8)v66 != 1 && i != 7 )
        {
          goto LABEL_76;
        }
        if ( v66 )
          goto LABEL_76;
        goto LABEL_154;
      }
      if ( i == 3 )
      {
        v81 = 0;
        goto LABEL_219;
      }
      if ( i > 3 )
      {
        switch ( i )
        {
          case 5:
            v82 = Curl_cstrdup(v67);
            v13->name = (char *)v82;
            if ( v82 )
            {
              if ( (unsigned int)curl_strnequal("__Secure-", v82, 9LL) )
              {
                v83 = v13->prefix | 1;
                goto LABEL_231;
              }
              if ( (unsigned int)curl_strnequal("__Host-", v13->name, 7LL) )
              {
                v83 = v13->prefix | 2;
LABEL_231:
                v13->prefix = v83;
              }
LABEL_210:
              v70 = 0;
            }
            break;
          case 6:
            v77 = (char *)Curl_cstrdup(v67);
            v13->value = v77;
LABEL_216:
            v70 = v77 == 0LL;
            break;
          case 4:
            v70 = curlx_strtoofft(v67, 0LL, 10LL, &v13->expires) != 0;
            break;
          default:
            goto LABEL_210;
        }
      }
      else
      {
        if ( i == 1 )
        {
          v13->tailmatch = (unsigned int)curl_strequal(v67, "TRUE", v69) != 0;
          goto LABEL_210;
        }
        if ( i == 2 )
        {
          v73 = strcmp("TRUE", v67);
          v74 = (__int64 (__fastcall *)(const char *))Curl_cstrdup;
          if ( v73 )
          {
            badcookiea = (__int64 (__fastcall *)(const char *))Curl_cstrdup;
            v75 = strcmp("FALSE", v67);
            v74 = badcookiea;
            if ( v75 )
            {
              v76 = (const char *)badcookiea(v67);
              v13->path = (char *)v76;
              if ( !v76 )
                goto LABEL_206;
              v77 = sanitize_cookie_path(v76);
              v13->spath = v77;
              goto LABEL_216;
            }
          }
          v78 = v74("/");
          v79 = (__int64 (__fastcall *)(const char *))Curl_cstrdup;
          v13->path = (char *)v78;
          v80 = v79("/");
          v13->spath = (char *)v80;
          if ( v80 )
            v81 = v78 == 0;
          else
            v81 = (v66 ^ 1) & (v67 != 0LL);
LABEL_219:
          v13->secure = 0;
          if ( (unsigned int)curl_strequal(v67, "TRUE", v69) )
          {
            if ( securea || c->running )
            {
              v13->secure = 1;
              goto LABEL_220;
            }
          }
          else
          {
LABEL_220:
            v70 = v81;
          }
          i = 3;
          goto LABEL_206;
        }
        if ( *v67 == 46 )
          ++v67;
        i = 0;
        v72 = Curl_cstrdup(v67);
        v70 = v72 == 0;
        v13->domain = (char *)v72;
      }
LABEL_206:
      v66 = v70;
      v67 = strtok_r(0uLL, "\t", &tok_buf);
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_5:
    Curl_cfree(v13);
    return 0LL;
  }
  badcookie = 0;
  while ( 1 )
  {
    while ( 1 )
    {
      v14 = *(unsigned __int8 *)lineptr;
      save_ptr = v14;
      if ( !*lineptr )
        break;
      if ( v14 != 32 && v14 != 9 )
        break;
      ++lineptr;
    }
    v16 = strcspn(lineptr, ";\t\r\n=");
    v17 = v16;
    if ( !v16 )
    {
      v24 = lineptr;
      goto LABEL_91;
    }
    v18 = &lineptr[v16];
    while ( 1 )
    {
      v19 = v17--;
      v20 = (unsigned __int8)lineptr[v17];
      if ( v20 != 32 && v20 != 9 )
        break;
      if ( !v17 )
        goto LABEL_23;
    }
    v17 = v19;
LABEL_23:
    if ( *v18 == 61 )
    {
      v22 = v18 + 1;
      v105 = v18;
      v23 = strcspn(v18 + 1, ";\r\n");
      v24 = &v22[v23];
      while ( 1 )
      {
        if ( !v23 )
          goto LABEL_48;
        v25 = (unsigned __int8)v105[v23];
        if ( v25 != 32 && v25 != 9 )
          break;
        --v23;
      }
      while ( 1 )
      {
        if ( !v23 )
          goto LABEL_48;
        v27 = (unsigned __int8)*v22;
        if ( v27 != 32 && v27 != 9 )
          break;
        ++v22;
        --v23;
      }
      if ( memchr(v22, 9, v23) )
      {
        freecookie(v13);
        if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
          Curl_infof(data, "cookie contains TAB, dropping");
        return 0LL;
      }
LABEL_48:
      v29 = httpheadera;
    }
    else
    {
      v24 = v18;
      v22 = 0LL;
      v29 = 0;
      v23 = 0LL;
    }
    v30 = v17 > 0xFFE || v23 > 0xFFE;
    if ( v30 || v17 + v23 > 0x1000 )
    {
      freecookie(v13);
      if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v17, v23);
      return 0LL;
    }
    if ( v17 <= 6 )
      break;
    if ( save_ptr != 95 || lineptr[1] != 95 )
      goto LABEL_51;
    save_ptra = v29;
    v34 = curl_strnequal("__Secure-", lineptr, 9LL);
    v29 = save_ptra;
    if ( v34 )
    {
      v13->prefix |= 1u;
LABEL_51:
      if ( !v13->name )
        goto LABEL_69;
      goto LABEL_52;
    }
    v35 = curl_strnequal("__Host-", lineptr, 7LL);
    name = v13->name;
    v29 = save_ptra;
    if ( v35 )
      v13->prefix |= 2u;
    if ( !name )
      goto LABEL_69;
LABEL_52:
    if ( !v23 )
    {
      if ( v17 == 8 )
      {
        if ( (unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
          v13->httponly = 1;
        goto LABEL_91;
      }
      if ( !v29 )
        goto LABEL_91;
    }
    if ( v17 == 7 && !(unsigned int)curl_strnequal("version", lineptr, 7LL) )
    {
      if ( (unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
      {
        if ( *v22 == 34 )
          ++v22;
        v31 = curlx_strtoofft(v22, 0LL, 10LL, &v13->expires);
        if ( v31 == 1 )
        {
          v33 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          if ( v31 == 2 )
            goto LABEL_62;
          if ( v31 )
            goto LABEL_91;
          expires = v13->expires;
          if ( expires )
          {
            v33 = 0x7FFFFFFFFFFFFFFFLL;
            if ( expires <= 0x7FFFFFFFFFFFFFFFLL - now )
              v33 = expires + now;
          }
          else
          {
LABEL_62:
            v33 = 1LL;
          }
        }
      }
      else
      {
        if ( !(unsigned int)curl_strnequal("expires", lineptr, 7LL) || v13->expires || v23 > 0x7F )
          goto LABEL_91;
        *((_BYTE *)memcpy(date, v22, v23) + v23) = 0;
        v33 = Curl_getdate_capped();
        v44 = v33 == 0;
        if ( v33 < 0 )
          v33 = 0LL;
        if ( v44 )
          v33 = 1LL;
      }
      v13->expires = v33;
      goto LABEL_91;
    }
    while ( 1 )
    {
LABEL_91:
      v40 = *(unsigned __int8 *)v24;
      if ( !*v24 )
        goto LABEL_143;
      if ( v40 != 32 && v40 != 9 )
        break;
      ++v24;
    }
    if ( v40 != 59 )
    {
LABEL_143:
      if ( badcookie )
        goto LABEL_76;
      if ( !v13->domain )
      {
        if ( domain )
        {
          v63 = Curl_cstrdup(domain);
          v13->domain = (char *)v63;
          if ( !v63 )
            goto LABEL_76;
        }
      }
      if ( !v13->path && path )
      {
        v45 = strchr(path, 63);
        v46 = v45 ? (char *)Curl_memrchr(path, 47LL, v45 - path) : strrchr(path, 47);
        if ( v46 )
        {
          v47 = v46 - path;
          v48 = v47 + 1;
          v49 = (char *)Curl_cmalloc(v47 + 2);
          v13->path = v49;
          if ( !v49 )
            goto LABEL_76;
          memcpy(v49, path, v48);
          v13->path[v48] = 0;
          v50 = sanitize_cookie_path(v13->path);
          v13->spath = v50;
          if ( !v50 )
            goto LABEL_76;
        }
      }
      if ( !v13->name )
        goto LABEL_76;
      ++data->req.setcookies;
LABEL_154:
      if ( (v13->prefix & 1) != 0 && !v13->secure )
        goto LABEL_76;
      if ( (v13->prefix & 2) != 0 )
      {
        if ( !v13->secure )
          goto LABEL_76;
        v51 = v13->path;
        if ( !v51 || strcmp(v51, "/") || v13->tailmatch )
          goto LABEL_76;
      }
      if ( !c->running && c->newsession && !v13->expires )
        goto LABEL_76;
      v13->livecookie = c->running;
      v52 = c->lastct + 1;
      c->lastct = v52;
      v13->creationtime = v52;
      if ( !noexpirea )
        remove_expired(c);
      livecookie = 0;
      v54 = 0LL;
      v55 = 0LL;
      v56 = 0LL;
      v58 = cookiehash(v13->domain);
      v59 = c->cookies[v58];
      while ( 2 )
      {
        if ( !v59 )
        {
          if ( v55 )
          {
            v60 = (void (__fastcall *)(char *))Curl_cfree;
            v55->next = v54->next;
            v55->creationtime = v54->creationtime;
            v60(v54->name);
            Curl_cfree(v54->value);
            Curl_cfree(v54->domain);
            Curl_cfree(v54->path);
            Curl_cfree(v54->spath);
            memcpy(v54, v55, sizeof(Cookie));
            v13 = v54;
            Curl_cfree(v55);
          }
          if ( c->running && (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
          {
            v61 = "Replaced";
            if ( !livecookie )
              v61 = "Added";
            Curl_infof(
              data,
              "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
              v61,
              v13->name,
              v13->value,
              v13->domain,
              v13->path,
              v13->expires);
          }
          if ( !livecookie )
          {
            if ( v56 )
              v56->next = v13;
            else
              c->cookies[v58] = v13;
            ++c->numcookies;
          }
          v62 = v13->expires;
          if ( v62 && v62 < c->next_expiration )
            c->next_expiration = v62;
          return v13;
        }
        if ( (unsigned int)curl_strequal(v59->name, v13->name, v57) )
        {
          v85 = v59->domain;
          v86 = v13->domain;
          if ( v85 )
          {
            if ( v86 && (unsigned int)curl_strequal(v85, v86, v57) )
            {
LABEL_244:
              spath = v59->spath;
              if ( spath )
              {
                v90 = v13->spath;
                if ( v90 )
                {
                  if ( v59->secure && !v13->secure && !securea )
                  {
                    v91 = strchr(spath + 1, 47);
                    v92 = v91 ? v91 - spath : strlen(spath);
                    if ( (unsigned int)curl_strnequal(spath, v90, v92) )
                    {
                      if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
                        Curl_infof(
                          data,
                          "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                          v13->name,
                          v13->domain);
                      goto LABEL_76;
                    }
                  }
                }
              }
            }
          }
          else if ( !v86 )
          {
            goto LABEL_244;
          }
        }
        if ( !v55 && (unsigned int)curl_strequal(v59->name, v13->name, v57) )
        {
          v88 = v59->domain;
          v89 = v13->domain;
          if ( v88 )
          {
            if ( v89 && (unsigned int)curl_strequal(v88, v89, v57) && v59->tailmatch == v13->tailmatch )
              goto LABEL_266;
LABEL_249:
            if ( !livecookie )
            {
LABEL_250:
              livecookie = 0;
              goto LABEL_251;
            }
          }
          else if ( v89 )
          {
            goto LABEL_249;
          }
LABEL_266:
          v93 = v59->spath;
          v94 = v13->spath;
          if ( v93 && (!v94 || !(unsigned int)curl_strequal(v93, v94, v57))
            || (v59->spath == 0LL) != (v13->spath == 0LL) )
          {
            goto LABEL_250;
          }
          livecookie = v13->livecookie;
          if ( v13->livecookie )
          {
            v54 = v59;
            v55 = v13;
          }
          else
          {
            if ( v59->livecookie )
              goto LABEL_76;
            v54 = v59;
            v55 = v13;
            livecookie = 1;
          }
        }
LABEL_251:
        v56 = v59;
        v59 = v59->next;
        continue;
      }
    }
    lineptr = v24 + 1;
  }
  if ( v13->name )
  {
    if ( !v23 )
    {
      if ( v17 == 6 )
      {
        save_ptrb = v29;
        if ( (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
        {
          if ( !securea && c->running )
            goto LABEL_76;
          v13->secure = 1;
        }
        else if ( save_ptrb )
        {
          curl_strnequal("domain", lineptr, 6LL);
        }
        goto LABEL_91;
      }
      if ( !v29 || v17 != 4 )
        goto LABEL_91;
LABEL_82:
      if ( !(unsigned int)curl_strnequal("path", lineptr, 4LL) )
        goto LABEL_91;
      strstore(&v13->path, v22, v23);
      if ( !v13->path )
        goto LABEL_76;
      Curl_cfree(v13->spath);
      v39 = sanitize_cookie_path(v13->path);
      v13->spath = v39;
LABEL_85:
      if ( !v39 )
        goto LABEL_76;
      goto LABEL_91;
    }
    if ( v17 == 4 )
      goto LABEL_82;
    if ( v17 != 6 || !(unsigned int)curl_strnequal("domain", lineptr, 6LL) )
      goto LABEL_91;
    if ( *v22 == 46 )
    {
      ++v22;
      --v23;
    }
    if ( v23 == 9 && (unsigned int)curl_strnequal(v22, "localhost", 9LL)
      || (v42 = memchr(v22, 46, v23)) != 0LL && v23 - (v42 - v22) > 1 )
    {
      if ( !domain )
      {
        is_ipnum = (unsigned __int8)Curl_host_is_ipnum(v22);
        strstore(&v13->domain, v22, v23);
        if ( !v13->domain )
          goto LABEL_76;
        if ( is_ipnum )
          goto LABEL_91;
LABEL_114:
        v13->tailmatch = 1;
        goto LABEL_91;
      }
    }
    else
    {
      domain = ":";
    }
    if ( (unsigned __int8)Curl_host_is_ipnum(domain) )
    {
      if ( !strncmp(v22, domain, v23) && strlen(domain) == v23 )
      {
        strstore(&v13->domain, v22, v23);
        v39 = v13->domain;
        goto LABEL_85;
      }
    }
    else if ( cookie_tailmatch(v22, v23, domain) )
    {
      strstore(&v13->domain, v22, v23);
      if ( !v13->domain )
        goto LABEL_76;
      goto LABEL_114;
    }
    if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
      Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v22);
    badcookie = httpheadera;
    goto LABEL_91;
  }
LABEL_69:
  if ( !v29 )
    goto LABEL_76;
  strstore(&v13->name, lineptr, v17);
  strstore(&v13->value, v22, v23);
  v37 = v13->name;
  if ( !v37 )
    goto LABEL_76;
  value = v13->value;
  if ( !value )
    goto LABEL_76;
  if ( !value[strcspn(v13->value, badoctets_0)] && !v37[strcspn(v37, badoctets_0)] )
    goto LABEL_91;
  if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
    Curl_infof(data, "invalid octets in name/value, cookie dropped");
LABEL_76:
  freecookie(v13);
  return 0LL;
}
