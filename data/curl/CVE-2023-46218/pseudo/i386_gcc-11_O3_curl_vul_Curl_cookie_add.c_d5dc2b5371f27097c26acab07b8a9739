Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v8; // ebp
  time_t v9; // eax
  int v10; // esi
  size_t v11; // eax
  char v12; // dl
  unsigned int v13; // esi
  char v14; // dl
  size_t v15; // eax
  unsigned int v16; // ebx
  size_t v17; // eax
  size_t v18; // edi
  bool v19; // cl
  _BOOL4 v20; // eax
  int v21; // eax
  char *v22; // eax
  char *v23; // eax
  int v24; // esi
  size_t v25; // ebx
  char *v26; // eax
  char *v27; // eax
  Cookie *v28; // edi
  unsigned __int8 prefix; // al
  char *v30; // eax
  bool running; // al
  int v32; // eax
  Cookie *v33; // ebp
  Cookie *v34; // edi
  char *v35; // eax
  char *v36; // edx
  char *spath; // edx
  char *v38; // eax
  char *v39; // edx
  char *v40; // eax
  char *v42; // eax
  char *v43; // eax
  const char *v44; // ebx
  bool v45; // al
  _BYTE *v46; // eax
  char is_ipnum; // si
  size_t v48; // eax
  size_t v49; // ebp
  int v50; // eax
  int v51; // eax
  char *v52; // eax
  int v53; // eax
  int v54; // eax
  int v55; // eax
  const char *name; // esi
  const char *value; // edi
  int v58; // eax
  curl_off_t expires; // rax
  int v60; // ecx
  char *v61; // edx
  const char *v62; // eax
  unsigned int v63; // edx
  unsigned int expires_high; // eax
  const char *v65; // eax
  char *v66; // eax
  const char *v67; // edx
  size_t v68; // ecx
  size_t v69; // eax
  int v70; // eax
  size_t pathlen; // [esp+8h] [ebp-134h]
  size_t v72; // [esp+Ch] [ebp-130h]
  char sepe; // [esp+14h] [ebp-128h]
  char *sep; // [esp+14h] [ebp-128h]
  Cookie *sepa; // [esp+14h] [ebp-128h]
  bool sepb; // [esp+14h] [ebp-128h]
  bool sepc; // [esp+14h] [ebp-128h]
  bool sepd; // [esp+14h] [ebp-128h]
  const char *maxage; // [esp+18h] [ebp-124h]
  char maxagea; // [esp+18h] [ebp-124h]
  char *v81; // [esp+1Ch] [ebp-120h]
  char *v82; // [esp+1Ch] [ebp-120h]
  const char *v83; // [esp+1Ch] [ebp-120h]
  Cookie *co; // [esp+20h] [ebp-11Ch]
  size_t myhash; // [esp+24h] [ebp-118h]
  char nlen; // [esp+28h] [ebp-114h]
  size_t nlena; // [esp+28h] [ebp-114h]
  size_t nlenb; // [esp+28h] [ebp-114h]
  size_t nlenc; // [esp+28h] [ebp-114h]
  bool badcookie; // [esp+4Fh] [ebp-EDh]
  __int64 now; // [esp+78h] [ebp-C4h]
  curl_off_t v93; // [esp+80h] [ebp-BCh]
  char *tok_buf; // [esp+98h] [ebp-A4h] BYREF
  char date[128]; // [esp+9Ch] [ebp-A0h] BYREF
  unsigned int v96; // [esp+11Ch] [ebp-20h]

  v8 = (char *)lineptr;
  v96 = __readgsdword(0x14u);
  v9 = time(0);
  if ( data->req.setcookies > 0x31u )
    return 0;
  v10 = v9;
  co = (Cookie *)Curl_ccalloc(1, 44);
  if ( !co )
    return 0;
  if ( !httpheader )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v8 = (char *)(lineptr + 10);
      co->httponly = 1;
    }
    if ( *v8 == 35 )
    {
      Curl_cfree(co);
      return 0;
    }
    v42 = strchr(v8, 13);
    if ( v42 )
      *v42 = 0;
    v43 = strchr(v8, 10);
    if ( v43 )
      *v43 = 0;
    if ( strtok_r(v8, "\t", &tok_buf) )
      __asm { jmp     eax }
    goto LABEL_89;
  }
  badcookie = 0;
  if ( strlen(lineptr) > 0x1388 )
  {
    Curl_cfree(co);
    return 0;
  }
  now = v10;
  LODWORD(v93) = -1 - v10;
  HIDWORD(v93) = 0x7FFFFFFF - (v10 >> 31);
  while ( 1 )
  {
    v14 = *v8;
    if ( !*v8 )
      break;
    if ( v14 == 32 || v14 == 9 )
      goto LABEL_10;
    sepe = *v8;
    v11 = strcspn(v8, ";\t\r\n=");
    v12 = sepe;
    v13 = v11;
    if ( v11 )
      goto LABEL_13;
LABEL_9:
    if ( v12 != 59 )
      goto LABEL_37;
LABEL_10:
    ++v8;
  }
  v15 = strcspn(v8, ";\t\r\n=");
  v12 = 0;
  v13 = v15;
  if ( !v15 )
    goto LABEL_37;
LABEL_13:
  sep = &v8[v13];
  do
  {
    v16 = v13--;
    if ( v8[v13] != 9 && v8[v13] != 32 )
    {
      v19 = 0;
      if ( *sep != 61 )
      {
        maxage = 0;
        LOBYTE(v20) = 0;
        v13 = v16;
        v81 = sep;
        v18 = 0;
        goto LABEL_22;
      }
      v13 = v16;
      goto LABEL_17;
    }
  }
  while ( v13 );
  if ( *sep != 61 )
  {
    if ( !co->name )
      goto LABEL_89;
    v81 = sep;
    goto LABEL_32;
  }
LABEL_17:
  nlen = v12;
  maxage = sep + 1;
  v17 = strcspn(sep + 1, ";\r\n");
  v12 = nlen;
  v18 = v17;
  v81 = &sep[v17 + 1];
  while ( v18 )
  {
    if ( sep[v18] != 9 && sep[v18] != 32 )
    {
      v44 = sep + 1;
      while ( 1 )
      {
        v45 = *v44 == 9 || *v44 == 32;
        if ( !v45 )
          break;
        ++v44;
        if ( !--v18 )
        {
          v19 = v45;
          maxage = v44;
          LOBYTE(v20) = 0;
          goto LABEL_22;
        }
      }
      maxage = v44;
      if ( !memchr(v44, 9, v18) )
      {
        v19 = httpheader;
        v12 = nlen;
        v20 = v18 > 0xFFE;
        goto LABEL_22;
      }
      freecookie(co);
      if ( (data->set.gap52B[3] & 0x10) != 0 )
      {
        v65 = "cookie contains TAB, dropping";
LABEL_201:
        Curl_infof(data, v65, pathlen, v72);
      }
      return 0;
    }
    --v18;
  }
  v19 = httpheader;
  LOBYTE(v20) = 0;
LABEL_22:
  if ( v13 > 0xFFE || v20 || v18 + v13 > 0x1000 )
  {
    freecookie(co);
    if ( (data->set.gap52B[3] & 0x10) != 0 )
    {
      v72 = v18;
      pathlen = v13;
      v65 = "oversized cookie dropped, name/val %zu + %zu bytes";
      goto LABEL_201;
    }
    return 0;
  }
  if ( v13 > 6 && v12 == 95 && v8[1] == 95 )
  {
    sepd = v19;
    v53 = curl_strnequal("__Secure-", v8, 9);
    v19 = sepd;
    if ( v53 )
    {
      co->prefix |= 1u;
    }
    else
    {
      v70 = curl_strnequal("__Host-", v8, 7);
      v19 = sepd;
      if ( v70 )
        co->prefix |= 2u;
    }
  }
  if ( !co->name )
  {
    if ( !v19 )
      goto LABEL_89;
    Curl_cfree(0);
    v54 = Curl_memdup(v8, v13 + 1);
    co->name = (char *)v54;
    if ( v54 )
      *(_BYTE *)(v54 + v13) = 0;
    Curl_cfree(co->value);
    v55 = Curl_memdup(maxage, v18 + 1);
    co->value = (char *)v55;
    if ( v55 )
      *(_BYTE *)(v55 + v18) = 0;
    name = co->name;
    if ( !name )
      goto LABEL_89;
    value = co->value;
    if ( !value )
      goto LABEL_89;
    if ( value[strcspn(value, badoctets_0)] || name[strcspn(name, badoctets_0)] )
    {
      if ( (data->set.gap52B[3] & 0x10) != 0 )
        Curl_infof(data, "invalid octets in name/value, cookie dropped", pathlen, v72);
      goto LABEL_89;
    }
    goto LABEL_32;
  }
  if ( v18 )
  {
    if ( v13 != 4 )
      goto LABEL_30;
    goto LABEL_137;
  }
  if ( v13 == 6 )
  {
    sepb = v19;
    if ( curl_strnequal("secure", v8, 6) )
    {
      if ( !secure && c->running )
        goto LABEL_89;
      v8 = v81;
      co->secure = 1;
      goto LABEL_33;
    }
    if ( !sepb )
      goto LABEL_32;
    goto LABEL_110;
  }
  if ( v13 == 8 )
  {
    if ( curl_strnequal("httponly", v8, 8) )
    {
      v8 = v81;
      co->httponly = 1;
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if ( v19 )
  {
    if ( v13 != 4 )
    {
LABEL_30:
      if ( v13 != 6 )
      {
        if ( v13 == 7 && !curl_strnequal("version", v8, 7) )
        {
          if ( curl_strnequal("max-age", v8, 7) )
          {
            v58 = curlx_strtoofft(&maxage[*maxage == 34], 0, 10, &co->expires);
            switch ( v58 )
            {
              case 1:
                goto LABEL_212;
              case 2:
                v8 = v81;
                LODWORD(co->expires) = 1;
                HIDWORD(co->expires) = 0;
                goto LABEL_33;
              case 0:
                expires = co->expires;
                if ( !expires )
                {
                  LODWORD(co->expires) = 1;
                  v8 = v81;
                  HIDWORD(co->expires) = 0;
                  goto LABEL_33;
                }
                if ( v93 >= expires )
                {
                  v8 = v81;
                  co->expires = now + expires;
                  goto LABEL_33;
                }
LABEL_212:
                v8 = v81;
                LODWORD(co->expires) = -1;
                HIDWORD(co->expires) = 0x7FFFFFFF;
                goto LABEL_33;
            }
          }
          else if ( curl_strnequal("expires", v8, 7) && !co->expires && v18 <= 0x7F )
          {
            memcpy(date, maxage, v18);
            date[v18] = 0;
            v60 = Curl_getdate_capped(date);
            if ( v60 )
            {
              if ( v60 >> 31 == -1 )
              {
                LODWORD(co->expires) = 0;
                HIDWORD(co->expires) = 0;
              }
              else
              {
                co->expires = v60;
              }
            }
            else
            {
              LODWORD(co->expires) = 1;
              HIDWORD(co->expires) = 0;
            }
          }
        }
        goto LABEL_32;
      }
LABEL_110:
      sepc = curl_strnequal("domain", v8, 6) != 0 && v18 != 0;
      if ( !sepc )
        goto LABEL_32;
      if ( *maxage == 46 )
      {
        ++maxage;
        --v18;
      }
      if ( v18 == 9 && curl_strnequal(maxage, "localhost", 9)
        || (v46 = memchr(maxage, 46, v18)) != 0 && v18 - (v46 - maxage) > 1 )
      {
        if ( !domain )
        {
          is_ipnum = Curl_host_is_ipnum(maxage);
          goto LABEL_126;
        }
      }
      else
      {
        domain = (const char *)&LC1;
      }
      is_ipnum = Curl_host_is_ipnum(domain);
      if ( is_ipnum )
      {
        if ( strncmp(maxage, domain, v18) || strlen(domain) != v18 )
          goto LABEL_120;
      }
      else
      {
        v48 = strlen(domain);
        if ( v18 > v48
          || (nlena = v48, v49 = v48 - v18, !curl_strnequal(maxage, &domain[v48 - v18], v18))
          || v18 != nlena && domain[v49 - 1] != 46 )
        {
LABEL_120:
          v8 = v81;
          badcookie = sepc;
          if ( (data->set.gap52B[3] & 0x10) != 0 )
            Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", maxage, v72);
          goto LABEL_33;
        }
      }
LABEL_126:
      Curl_cfree(co->domain);
      v50 = Curl_memdup(maxage, v18 + 1);
      co->domain = (char *)v50;
      if ( !v50 )
        goto LABEL_89;
      *(_BYTE *)(v50 + v18) = 0;
      if ( !co->domain )
        goto LABEL_89;
      v8 = v81;
      if ( !is_ipnum )
        co->tailmatch = 1;
      goto LABEL_33;
    }
LABEL_137:
    if ( curl_strnequal("path", v8, 4) )
    {
      Curl_cfree(co->path);
      v51 = Curl_memdup(maxage, v18 + 1);
      co->path = (char *)v51;
      if ( !v51 )
        goto LABEL_89;
      *(_BYTE *)(v51 + v18) = 0;
      if ( !co->path )
        goto LABEL_89;
      Curl_cfree(co->spath);
      v52 = sanitize_cookie_path(co->path);
      co->spath = v52;
      if ( !v52 )
        goto LABEL_89;
    }
  }
LABEL_32:
  v8 = v81;
LABEL_33:
  v12 = *v81;
  if ( *v81 )
  {
    while ( v12 == 32 || v12 == 9 )
    {
      v12 = *++v8;
      if ( !v12 )
        goto LABEL_37;
    }
    goto LABEL_9;
  }
LABEL_37:
  if ( badcookie )
    goto LABEL_89;
  if ( !co->domain )
  {
    if ( domain )
    {
      v21 = Curl_cstrdup(domain);
      co->domain = (char *)v21;
      if ( !v21 )
        goto LABEL_89;
    }
  }
  if ( !co->path && path )
  {
    v22 = strchr(path, 63);
    v23 = v22 ? (char *)Curl_memrchr(path, 47, v22 - path) : strrchr(path, 47);
    if ( v23 )
    {
      v24 = v23 - path;
      v25 = v23 - path + 1;
      v26 = (char *)Curl_cmalloc(v23 - path + 2);
      co->path = v26;
      if ( !v26 )
        goto LABEL_89;
      memcpy(v26, path, v25);
      co->path[v24 + 1] = 0;
      v27 = sanitize_cookie_path(co->path);
      co->spath = v27;
      if ( !v27 )
        goto LABEL_89;
    }
  }
  if ( !co->name )
    goto LABEL_89;
  ++data->req.setcookies;
  v28 = co;
  prefix = co->prefix;
  if ( (prefix & 1) == 0 )
  {
    if ( (prefix & 2) == 0 )
      goto LABEL_56;
    if ( co->secure )
      goto LABEL_52;
    goto LABEL_89;
  }
  if ( !co->secure )
  {
LABEL_219:
    freecookie(v28);
    return 0;
  }
  if ( (prefix & 2) == 0 )
    goto LABEL_56;
LABEL_52:
  v30 = co->path;
  if ( !v30 || *v30 != 47 || v30[1] || co->tailmatch )
  {
LABEL_89:
    freecookie(co);
    return 0;
  }
LABEL_56:
  running = c->running;
  if ( !running && c->newsession )
  {
    v28 = co;
    if ( !co->expires )
      goto LABEL_219;
  }
  co->livecookie = running;
  v32 = c->lastct + 1;
  c->lastct = v32;
  co->creationtime = v32;
  if ( !noexpire )
    remove_expired(c);
  myhash = cookiehash(co->domain);
  v33 = c->cookies[myhash];
  if ( !v33 )
  {
    if ( c->running && (data->set.gap52B[3] & 0x10) != 0 )
    {
      maxagea = 0;
      sepa = co;
      v61 = co->name;
      v62 = "Added";
      goto LABEL_187;
    }
    sepa = co;
LABEL_189:
    c->cookies[myhash] = sepa;
    goto LABEL_192;
  }
  maxagea = 0;
  v34 = 0;
  sepa = 0;
  while ( 2 )
  {
    if ( curl_strequal(v33->name, co->name) )
    {
      v35 = v33->domain;
      v36 = co->domain;
      if ( v35 )
      {
        if ( v36 && curl_strequal(v35, co->domain) )
        {
LABEL_69:
          spath = v33->spath;
          if ( spath )
          {
            v82 = co->spath;
            if ( v82 )
            {
              if ( v33->secure && !co->secure && !secure )
              {
                nlenb = (size_t)v33->spath;
                v66 = strchr(spath + 1, 47);
                v67 = (const char *)nlenb;
                v68 = (size_t)v82;
                if ( v66 )
                {
                  v69 = (size_t)&v66[-nlenb];
                }
                else
                {
                  nlenc = (size_t)v82;
                  v83 = v67;
                  v69 = strlen(v67);
                  v68 = nlenc;
                  v67 = v83;
                }
                if ( curl_strnequal(v67, v68, v69) )
                {
                  if ( (data->set.gap52B[3] & 0x10) != 0 )
                    Curl_infof(
                      data,
                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                      co->name,
                      co->domain);
                  goto LABEL_89;
                }
              }
            }
          }
        }
      }
      else if ( !v36 )
      {
        goto LABEL_69;
      }
    }
    if ( v34 || !curl_strequal(v33->name, co->name) )
      goto LABEL_63;
    v38 = v33->domain;
    v39 = co->domain;
    if ( !v38 )
    {
      if ( v39 )
        goto LABEL_80;
LABEL_81:
      v40 = v33->spath;
      if ( v40 )
      {
        if ( !co->spath )
        {
          maxagea = 0;
          v34 = 0;
          goto LABEL_63;
        }
        if ( !curl_strequal(v40, co->spath) )
          goto LABEL_196;
        v40 = v33->spath;
      }
      if ( (v40 == 0) == (co->spath == 0) )
      {
        maxagea = co->livecookie;
        if ( maxagea )
        {
          sepa = v33;
          v34 = co;
        }
        else
        {
          if ( v33->livecookie )
            goto LABEL_89;
          sepa = v33;
          v34 = co;
          maxagea = 1;
        }
        goto LABEL_63;
      }
LABEL_196:
      maxagea = 0;
      goto LABEL_63;
    }
    if ( v39 && curl_strequal(v38, co->domain) && v33->tailmatch == co->tailmatch )
      goto LABEL_81;
LABEL_80:
    if ( maxagea )
      goto LABEL_81;
LABEL_63:
    if ( v33->next )
    {
      v33 = v33->next;
      continue;
    }
    break;
  }
  if ( v34 )
  {
    v34->next = sepa->next;
    v34->creationtime = sepa->creationtime;
    Curl_cfree(sepa->name);
    Curl_cfree(sepa->value);
    Curl_cfree(sepa->domain);
    Curl_cfree(sepa->path);
    Curl_cfree(sepa->spath);
    sepa->next = v34->next;
    sepa->name = v34->name;
    sepa->value = v34->value;
    sepa->path = v34->path;
    sepa->spath = v34->spath;
    sepa->domain = v34->domain;
    LODWORD(sepa->expires) = v34->expires;
    HIDWORD(sepa->expires) = HIDWORD(v34->expires);
    *(_DWORD *)&sepa->tailmatch = *(_DWORD *)&v34->tailmatch;
    sepa->creationtime = v34->creationtime;
    *(_DWORD *)&sepa->prefix = *(_DWORD *)&v34->prefix;
    Curl_cfree(v34);
  }
  else
  {
    sepa = co;
  }
  if ( !c->running || (data->set.gap52B[3] & 0x10) == 0 )
  {
    if ( maxagea )
      goto LABEL_193;
    goto LABEL_191;
  }
  v61 = sepa->name;
  v62 = "Replaced";
  if ( !maxagea )
    v62 = "Added";
LABEL_187:
  Curl_infof(data, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld", v62, v61);
  if ( !maxagea )
  {
    if ( !v33 )
      goto LABEL_189;
LABEL_191:
    v33->next = sepa;
LABEL_192:
    ++c->numcookies;
  }
LABEL_193:
  v63 = sepa->expires;
  expires_high = HIDWORD(sepa->expires);
  if ( sepa->expires && __SPAIR64__(expires_high, v63) < c->next_expiration )
  {
    LODWORD(c->next_expiration) = v63;
    HIDWORD(c->next_expiration) = expires_high;
  }
  return sepa;
}
