Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        int a5,
        int a6,
        int badcookie_0a,
        int a8,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  time_t v13; // $v0
  char *v14; // $fp
  bool v15; // dc
  Cookie *v16; // $s0
  int v17; // $s6
  size_t v18; // $s5
  int v19; // $v0
  char *(*v20)(const char *); // $a2
  unsigned int v21; // $t4
  int v22; // $v0
  _BYTE *v23; // $s1
  size_t v24; // $s7
  char *(*v25)(const char *); // $a2
  char *v26; // $s4
  char *v27; // $v0
  int v28; // $v0
  size_t v29; // $t4
  _BOOL4 v30; // $v0
  _BYTE *v31; // $v0
  const char *v32; // $v0
  const char *v33; // $s5
  void (*v34)(Cookie *); // $t9
  unsigned __int8 prefix; // $v0
  int v36; // $v0
  CookieInfo *v37; // $v0
  char *v38; // $v1
  void (*v39)(Cookie *); // $t9
  bool running; // $v1
  CookieInfo *v41; // $a0
  int lastct; // $v0
  Cookie **v43; // $s7
  Cookie *v44; // $fp
  int livecookie; // $s5
  Cookie *v46; // $s2
  Cookie *v47; // $s1
  char *v48; // $a0
  char *v49; // $a1
  char *spath; // $v1
  char *v51; // $v0
  const char *v52; // $v1
  const char *v53; // $a3
  size_t v54; // $a2
  char *v55; // $v0
  char *v56; // $v0
  int v57; // $v0
  int v58; // $v0
  __int64 expires; // $v0
  int v61; // $v0
  int v62; // $v0
  char *v63; // $v0
  int v64; // $v0
  void (__fastcall *v65)(char *); // $t9
  char *value; // $a0
  const char *v67; // $v0
  const char *name; // $s1
  size_t v69; // $s6
  const char *v70; // $s5
  int v71; // $v0
  void *v72; // $v0
  int v73; // $v0
  int is_ipnum; // $s5
  int v75; // $v0
  char *v76; // $a0
  char *v77; // $a1
  char *v78; // $a0
  char *v79; // $a1
  Cookie *next; // $v1
  char *v81; // $a0
  void (__fastcall *v82)(char *); // $t9
  Cookie *v83; // $v0
  Cookie *v84; // $v1
  Cookie *v85; // $a3
  char *v86; // $a2
  char *v87; // $a1
  char *v88; // $a0
  __int64 v89; // $v0
  int v90; // $v0
  char *v91; // $v0
  const char *v92; // $s1
  char *v93; // $v0
  const char *v94; // $s2
  int v95; // $v0
  size_t v96; // $s1
  char *v97; // $a0
  char *v98; // $v0
  int v99; // $v0
  int v100; // $v0
  size_t nlend; // [sp+34h] [-BCh]
  const char *nlen; // [sp+34h] [-BCh]
  size_t nlena; // [sp+34h] [-BCh]
  size_t nlenb; // [sp+34h] [-BCh]
  size_t nlenc; // [sp+34h] [-BCh]
  size_t nlene; // [sp+34h] [-BCh]
  _DWORD *v108; // [sp+38h] [-B8h] BYREF
  const char *v109; // [sp+3Ch] [-B4h]
  time_t now; // [sp+40h] [-B0h]
  _BOOL4 v111; // [sp+44h] [-ACh]
  char *(*v112)(const char *); // [sp+48h] [-A8h]
  const char *v113; // [sp+4Ch] [-A4h]
  int badcookie; // [sp+50h] [-A0h]
  void (*v115)(Cookie *); // [sp+54h] [-9Ch]
  void (*v116)(Cookie *); // [sp+58h] [-98h]
  const char *v117; // [sp+5Ch] [-94h]
  unsigned int v118; // [sp+60h] [-90h]
  unsigned int v119; // [sp+64h] [-8Ch]
  char *tok_buf; // [sp+68h] [-88h] BYREF
  char date[128]; // [sp+6Ch] [-84h] BYREF
  int v122; // [sp+ECh] [-4h]

  v109 = domain;
  v108 = &_stack_chk_guard;
  v113 = path;
  v111 = secure;
  v14 = (char *)lineptr;
  v13 = time(0u);
  v15 = data->req.setcookies >= 0x32u;
  now = v13;
  if ( v15 )
    goto LABEL_128;
  v16 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v16 )
    goto LABEL_128;
  if ( !httpheader )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v14 = (char *)(lineptr + 10);
      v16->httponly = 1;
    }
    if ( *v14 == 35 )
    {
      Curl_cfree(v16);
    }
    else
    {
      v55 = strchr(v14, 13);
      if ( v55 )
        *v55 = 0;
      v56 = strchr(v14, 10);
      if ( v56 )
        *v56 = 0;
      if ( strtok_r(v14, "\t", &tok_buf) )
      {
        v112 = sanitize_cookie_path;
        __asm { jr      $v0 }
      }
      freecookie(v16);
    }
    goto LABEL_128;
  }
  if ( strlen(lineptr) >= 0x1389 )
  {
    v46 = 0;
    Curl_cfree(v16);
    goto LABEL_129;
  }
  v119 = 0x7FFFFFFF - (now >> 0x1F);
  v115 = freecookie;
  v17 = *lineptr;
  v118 = now >> 0x1F;
  v116 = freecookie;
  badcookie = 0;
  v117 = (const char *)&_LC1;
  if ( v17 )
    goto LABEL_6;
  while ( 2 )
  {
    v18 = strcspn(v14, ";\t\r\n=");
    if ( !v18 )
      goto LABEL_54;
LABEL_12:
    v20 = (char *(*)(const char *))&v14[v18];
    do
    {
      v21 = v18--;
      v22 = v14[v18];
      if ( v22 != 32 && v22 != 9 )
      {
        if ( *(_BYTE *)v20 == 61 )
        {
          v23 = (char *)v20 + 1;
          nlena = v21;
          v112 = v20;
          v24 = strcspn((const char *)v20 + 1, ";\r\n");
          v26 = &v23[v24];
          v18 = nlena;
          if ( v24 )
          {
            v25 = v112;
            goto LABEL_18;
          }
          if ( nlena >= 0xFFF )
            goto LABEL_211;
          v29 = httpheader;
LABEL_24:
          v24 = 0;
        }
        else
        {
          v26 = (char *)v20;
          if ( v21 >= 0xFFF )
          {
            v18 = v21;
            v24 = 0;
            goto LABEL_211;
          }
          v18 = v21;
          v23 = 0;
          v29 = 0;
          v24 = 0;
        }
        v30 = v18 < 7;
LABEL_26:
        if ( !v30 && v17 == 95 && v14[1] == 95 )
        {
          nlenb = v29;
          v61 = curl_strnequal("__Secure-", v14, 9);
          v29 = nlenb;
          if ( v61 )
          {
            v16->prefix |= 1u;
          }
          else
          {
            v99 = curl_strnequal("__Host-", v14, 7);
            v29 = nlenb;
            if ( v99 )
              v16->prefix |= 2u;
          }
        }
        if ( v16->name )
        {
          if ( v24 )
            goto LABEL_34;
          if ( v18 != 6 )
            goto LABEL_31;
          nlenc = v29;
          if ( curl_strnequal("secure", v14, 6) )
          {
            if ( v111 || !c->running )
            {
              v16->secure = 1;
              goto LABEL_50;
            }
            goto LABEL_88;
          }
          if ( nlenc )
            curl_strnequal("domain", v14, 6);
          goto LABEL_50;
        }
        v34 = (void (*)(Cookie *))MEMORY[0xB5D0];
        if ( !v29 )
          goto LABEL_89;
LABEL_141:
        Curl_cfree(0);
        v64 = Curl_strndup(v14, v18);
        v65 = (void (__fastcall *)(char *))Curl_cfree;
        value = v16->value;
        v16->name = (char *)v64;
        v65(value);
        v67 = (const char *)Curl_strndup(v23, v24);
        name = v16->name;
        v16->value = (char *)v67;
        if ( !name || !v67 )
          goto LABEL_88;
        if ( !v67[strcspn(v67, badoctets_0)] && !name[strcspn(name, badoctets_0)] )
          goto LABEL_50;
        v34 = (void (*)(Cookie *))MEMORY[0xB5D0];
        if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
        {
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
          goto LABEL_88;
        }
        goto LABEL_89;
      }
    }
    while ( v18 );
    if ( *(_BYTE *)v20 != 61 )
    {
      v34 = (void (*)(Cookie *))MEMORY[0xB5D0];
      if ( v16->name )
      {
        v26 = (char *)v20;
        goto LABEL_50;
      }
      goto LABEL_89;
    }
    v23 = (char *)v20 + 1;
    nlend = (size_t)v20;
    v24 = strcspn((const char *)v20 + 1, ";\r\n");
    v25 = (char *(*)(const char *))nlend;
    v26 = &v23[v24];
    if ( v24 )
    {
LABEL_18:
      v27 = (char *)v25 + v24;
      do
      {
        v28 = *v27;
        if ( v28 != 32 && v28 != 9 )
        {
          while ( 1 )
          {
            v57 = (char)*v23;
            if ( v57 == 32 )
            {
              --v24;
            }
            else
            {
              --v24;
              if ( v57 != 9 )
              {
                if ( memchr(v23, 9, ++v24) )
                {
                  freecookie(v16);
                  if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
                  {
                    Curl_infof(data, "cookie contains TAB, dropping");
                    v46 = 0;
                    goto LABEL_129;
                  }
                }
                else
                {
                  if ( v18 < 0xFFF && v24 < 0xFFF )
                  {
                    v29 = httpheader;
                    if ( v24 + v18 < 0x1001 )
                    {
                      v30 = v18 < 7;
                      goto LABEL_26;
                    }
                  }
LABEL_211:
                  freecookie(v16);
                  if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
                  {
                    Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v18, v24);
                    v46 = 0;
                    goto LABEL_129;
                  }
                }
LABEL_128:
                v46 = 0;
                goto LABEL_129;
              }
            }
            ++v23;
            if ( !v24 )
              goto LABEL_22;
          }
        }
        --v24;
        v27 = (char *)v25 + v24;
      }
      while ( v24 );
LABEL_22:
      v24 = 0;
      if ( v18 >= 0xFFF )
        goto LABEL_211;
      v29 = httpheader;
      goto LABEL_24;
    }
    v29 = httpheader;
    if ( !v16->name )
    {
      v26 = v23;
      goto LABEL_141;
    }
    v26 = v23;
LABEL_31:
    if ( v18 == 8 )
    {
      if ( curl_strnequal("httponly", v14, 8) )
        v16->httponly = 1;
      goto LABEL_50;
    }
    if ( !v29 )
      goto LABEL_50;
    v24 = 0;
LABEL_34:
    if ( v18 == 4 )
    {
      if ( !curl_strnequal("path", v14, 4) )
        goto LABEL_50;
      Curl_cfree(v16->path);
      v62 = Curl_strndup(v23, v24);
      v16->path = (char *)v62;
      if ( !v62 )
        goto LABEL_88;
      Curl_cfree(v16->spath);
      v63 = sanitize_cookie_path(v16->path);
      v16->spath = v63;
      if ( v63 )
        goto LABEL_50;
      v34 = (void (*)(Cookie *))MEMORY[0xB5D0];
      goto LABEL_89;
    }
    if ( v18 != 6 )
    {
      if ( v18 != 7 || curl_strnequal((char *)v115 + 0x32A4, v14, 7) )
        goto LABEL_50;
      if ( curl_strnequal((char *)v116 + 0x335C, v14, 7) )
      {
        if ( *v23 == 34 )
          ++v23;
        v58 = curlx_strtoofft(v23, 0, 10, &v16->expires);
        if ( v58 == 1 )
        {
LABEL_240:
          LODWORD(v16->expires) = -1;
          HIDWORD(v16->expires) = 0x7FFFFFFF;
          goto LABEL_50;
        }
        if ( v58 != 2 )
        {
          if ( v58 )
            goto LABEL_50;
          expires = v16->expires;
          if ( expires )
          {
            if ( __SPAIR64__(v119, ~now) >= expires )
            {
              v16->expires = expires + __PAIR64__(v118, now);
              goto LABEL_50;
            }
            goto LABEL_240;
          }
        }
      }
      else
      {
        if ( !curl_strnequal("expires", v14, 7) || v16->expires || v24 >= 0x80 )
          goto LABEL_50;
        v72 = memcpy(date, v23, v24);
        *((_BYTE *)&v108 + v24 + 0x34) = 0;
        v73 = Curl_getdate_capped(v72);
        if ( v73 )
        {
          if ( v73 >> 0x1F == -1 )
          {
            LODWORD(v16->expires) = 0;
            HIDWORD(v16->expires) = 0;
          }
          else
          {
            v16->expires = v73;
          }
          goto LABEL_50;
        }
      }
      LODWORD(v16->expires) = 1;
      HIDWORD(v16->expires) = 0;
      goto LABEL_50;
    }
    if ( !curl_strnequal("domain", v14, 6) || !v24 )
      goto LABEL_50;
    if ( *v23 == 46 )
    {
      ++v23;
      --v24;
    }
    if ( v24 == 9 && curl_strnequal(v23, "localhost", 9) )
    {
      v32 = v109;
      goto LABEL_167;
    }
    v31 = memchr(v23, 46, v24);
    if ( !v31 || (v15 = v24 - (v31 - v23) >= 2, v32 = v109, !v15) )
    {
      v32 = v117;
      v109 = v117;
      goto LABEL_44;
    }
LABEL_167:
    if ( !v32 )
    {
      is_ipnum = Curl_host_is_ipnum(v23);
      Curl_cfree(v16->domain);
      v75 = Curl_strndup(v23, v24);
      v16->domain = (char *)v75;
      if ( v75 )
      {
        if ( !is_ipnum )
          v16->tailmatch = 1;
        goto LABEL_50;
      }
LABEL_88:
      v34 = freecookie;
LABEL_89:
      v39 = (void (*)(Cookie *))((char *)v34 + (__int16)freecookie);
LABEL_90:
      v39(v16);
LABEL_91:
      v46 = 0;
      goto LABEL_129;
    }
LABEL_44:
    v33 = v32;
    if ( Curl_host_is_ipnum(v32) )
    {
      if ( !strncmp(v23, v33, v24) && strlen(v33) == v24 )
      {
        Curl_cfree(v16->domain);
        v100 = Curl_strndup(v23, v24);
        v16->domain = (char *)v100;
        if ( v100 )
          goto LABEL_50;
        v34 = freecookie;
        goto LABEL_89;
      }
    }
    else
    {
      v69 = strlen(v109);
      if ( v69 >= v24 )
      {
        v70 = &v109[v69 - v24];
        if ( curl_strnequal(v23, v70, v24) )
        {
          if ( v24 == v69 || *(v70 - 1) == 46 )
          {
            Curl_cfree(v16->domain);
            v71 = Curl_strndup(v23, v24);
            v16->domain = (char *)v71;
            if ( v71 )
            {
              v16->tailmatch = 1;
              goto LABEL_50;
            }
            goto LABEL_88;
          }
        }
      }
    }
    if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
      Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v23);
    badcookie = httpheader;
LABEL_50:
    v17 = *v26;
    if ( !*v26 )
    {
LABEL_54:
      v19 = badcookie;
      break;
    }
    while ( 1 )
    {
      if ( v17 != 32 )
      {
        v14 = v26;
        if ( v17 != 9 )
          break;
      }
      v17 = *++v26;
      if ( !v17 )
        goto LABEL_54;
    }
LABEL_9:
    v19 = badcookie;
    if ( v17 == 59 )
    {
LABEL_10:
      v17 = *++v14;
      if ( !v17 )
        continue;
LABEL_6:
      if ( v17 == 32 || v17 == 9 )
        goto LABEL_10;
      v18 = strcspn(v14, ";\t\r\n=");
      if ( !v18 )
        goto LABEL_9;
      goto LABEL_12;
    }
    break;
  }
  v34 = (void (*)(Cookie *))MEMORY[0xB5D0];
  if ( v19 )
    goto LABEL_89;
  if ( !v16->domain )
  {
    if ( v109 )
    {
      v90 = Curl_cstrdup(v109);
      v16->domain = (char *)v90;
      if ( !v90 )
      {
        v34 = (void (*)(Cookie *))MEMORY[0xB5D0];
        goto LABEL_89;
      }
    }
  }
  if ( !v16->path && v113 )
  {
    v92 = v113;
    v91 = strchr(v113, 63);
    v93 = v91 ? (char *)Curl_memrchr(v92, 47, v91 - v92) : strrchr(v92, 47);
    if ( v93 )
    {
      v94 = v113;
      v95 = v93 - v113;
      v96 = v95 + 1;
      v97 = (char *)Curl_cmalloc(v95 + 2);
      v16->path = v97;
      if ( !v97 )
        goto LABEL_88;
      memcpy(v97, v94, v96);
      v16->path[v96] = 0;
      v98 = sanitize_cookie_path(v16->path);
      v16->spath = v98;
      if ( !v98 )
      {
        v34 = freecookie;
        goto LABEL_89;
      }
    }
  }
  v34 = (void (*)(Cookie *))MEMORY[0xB5D0];
  if ( !v16->name )
    goto LABEL_89;
  ++data->req.setcookies;
  prefix = v16->prefix;
  if ( (prefix & 1) != 0 )
  {
    v36 = prefix & 2;
    if ( !v16->secure )
      goto LABEL_88;
    v15 = v36 == 0;
    v37 = c;
    if ( !v15 )
      goto LABEL_62;
  }
  else
  {
    v15 = (prefix & 2) == 0;
    v37 = c;
    if ( !v15 )
    {
      if ( !v16->secure )
      {
        ((void (__fastcall *)(Cookie *))(MEMORY[0xB5D0] + (__int16)freecookie))(v16);
        goto LABEL_91;
      }
LABEL_62:
      v38 = v16->path;
      v34 = (void (*)(Cookie *))MEMORY[0xB5D0];
      if ( !v38 )
        goto LABEL_89;
      v39 = (void (*)(Cookie *))(MEMORY[0xB5D0] + (__int16)freecookie);
      if ( *v38 != 47 )
        goto LABEL_90;
      if ( v38[1] )
        goto LABEL_88;
      v37 = c;
      if ( v16->tailmatch )
        goto LABEL_88;
    }
  }
  running = v37->running;
  v41 = c;
  if ( !running && v37->newsession )
  {
    v34 = (void (*)(Cookie *))MEMORY[0xB5D0];
    if ( !v16->expires )
      goto LABEL_89;
    v41 = c;
  }
  lastct = v41->lastct;
  v16->livecookie = running;
  v41->lastct = ++lastct;
  v16->creationtime = lastct;
  if ( !noexpire )
    remove_expired(v41);
  v43 = &c->cookies[cookiehash(v16->domain)];
  v44 = *v43;
  if ( !*v43 )
  {
    if ( !c->running )
    {
      v46 = v16;
      *v43 = v16;
      goto LABEL_207;
    }
    v46 = v16;
    if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
    {
LABEL_222:
      Curl_infof(
        data,
        "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
        "Added",
        v46->name,
        v46->value,
        v46->domain,
        v46->path,
        v46->expires);
      if ( v44 )
      {
LABEL_206:
        v44->next = v46;
LABEL_207:
        ++c->numcookies;
        goto LABEL_200;
      }
    }
    *v43 = v46;
    goto LABEL_207;
  }
  livecookie = 0;
  v46 = 0;
  v47 = 0;
  while ( 2 )
  {
    if ( curl_strequal(v44->name, v16->name) )
    {
      v48 = v44->domain;
      v49 = v16->domain;
      if ( v48 )
      {
        if ( v49 && curl_strequal(v48, v49) )
        {
LABEL_78:
          spath = v44->spath;
          if ( spath )
          {
            nlen = v16->spath;
            if ( nlen )
            {
              if ( v44->secure && !v16->secure && !v111 )
              {
                v109 = v44->spath;
                v51 = strchr(spath + 1, 47);
                v52 = v109;
                v53 = nlen;
                if ( v51 )
                {
                  v54 = v51 - v109;
                }
                else
                {
                  v109 = nlen;
                  nlene = (size_t)v52;
                  v54 = strlen(v52);
                  v53 = v109;
                  v52 = (const char *)nlene;
                }
                if ( curl_strnequal(v52, v53, v54) )
                {
                  v34 = (void (*)(Cookie *))MEMORY[0xB5D0];
                  if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) == 0 )
                    goto LABEL_89;
                  Curl_infof(
                    data,
                    "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                    v16->name,
                    v16->domain);
                  goto LABEL_88;
                }
              }
            }
          }
        }
      }
      else if ( !v49 )
      {
        goto LABEL_78;
      }
    }
    if ( v47 || !curl_strequal(v44->name, v16->name) )
      goto LABEL_175;
    v76 = v44->domain;
    v77 = v16->domain;
    if ( v76 )
    {
      if ( !v77 || !curl_strequal(v76, v77) || v44->tailmatch != v16->tailmatch )
      {
LABEL_182:
        if ( livecookie )
          goto LABEL_183;
        goto LABEL_175;
      }
LABEL_183:
      v78 = v44->spath;
    }
    else
    {
      if ( v77 )
        goto LABEL_182;
      v78 = v44->spath;
    }
    v79 = v16->spath;
    if ( v78 )
    {
      if ( !v79 )
      {
        v47 = 0;
        livecookie = 0;
        goto LABEL_175;
      }
      if ( !curl_strequal(v78, v79) )
      {
        livecookie = 0;
        goto LABEL_175;
      }
      v78 = v44->spath;
      v79 = v16->spath;
    }
    livecookie = 0;
    if ( (v78 == 0) == (v79 == 0) )
    {
      livecookie = v16->livecookie;
      v46 = v44;
      if ( v16->livecookie )
      {
        v47 = v16;
      }
      else
      {
        v34 = (void (*)(Cookie *))MEMORY[0xB5D0];
        if ( v44->livecookie )
          goto LABEL_89;
        v47 = v16;
        livecookie = 1;
      }
    }
LABEL_175:
    if ( v44->next )
    {
      v44 = v44->next;
      continue;
    }
    break;
  }
  if ( v47 )
  {
    next = v46->next;
    v81 = v46->name;
    v82 = (void (__fastcall *)(char *))Curl_cfree;
    v47->creationtime = v46->creationtime;
    v47->next = next;
    v82(v81);
    Curl_cfree(v46->value);
    Curl_cfree(v46->domain);
    Curl_cfree(v46->path);
    Curl_cfree(v46->spath);
    v83 = v47;
    v84 = v46;
    do
    {
      v85 = v83->next;
      v86 = v83->name;
      v87 = v83->value;
      v88 = v83->path;
      v83 = (Cookie *)((char *)v83 + 16);
      v84->next = v85;
      v84->name = v86;
      v84->value = v87;
      v84->path = v88;
      v84 = (Cookie *)((char *)v84 + 16);
    }
    while ( v83 != &v47[1] );
    Curl_cfree(v47);
  }
  else
  {
    v46 = v16;
  }
  if ( !c->running || (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) == 0 )
  {
    if ( livecookie )
      goto LABEL_200;
    goto LABEL_206;
  }
  if ( !livecookie )
    goto LABEL_222;
  Curl_infof(
    data,
    "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
    "Replaced",
    v46->name,
    v46->value,
    v46->domain,
    v46->path,
    v46->expires);
LABEL_200:
  HIDWORD(v89) = v46->expires;
  LODWORD(v89) = HIDWORD(v46->expires);
  if ( v89 && __SPAIR64__(v89, HIDWORD(v89)) < c->next_expiration )
  {
    LODWORD(c->next_expiration) = HIDWORD(v89);
    HIDWORD(c->next_expiration) = v89;
  }
LABEL_129:
  if ( v122 != *v108 )
    _stack_chk_fail();
  return v46;
}
