Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  Cookie *v16; // $s7
  time_t v17; // $v0
  int v18; // $v0
  int v19; // $s3
  char *v20; // $s7
  int v21; // $s1
  char *i; // $s5
  int v23; // $s2
  size_t v24; // $v0
  size_t v25; // $s1
  size_t v26; // $s4
  int v27; // $v0
  int v28; // $v0
  const char *v29; // $s7
  size_t v30; // $s6
  size_t v31; // $v0
  int v32; // $v1
  int v33; // $v1
  unsigned __int8 *v34; // $s1
  unsigned __int8 *v35; // $v0
  int v36; // $v1
  int v37; // $s2
  int v38; // $v0
  char *v39; // $v0
  const char *v40; // $s2
  int v41; // $s2
  int v42; // $v0
  int v43; // $v0
  int v44; // $v0
  size_t v45; // $s4
  int v46; // $v0
  const char *v47; // $v1
  const char *v48; // $s1
  const char *v49; // $a0
  const char *v50; // $s2
  int v51; // $v0
  int v52; // $s5
  char *v53; // $v0
  _BOOL4 v54; // $v1
  int v55; // $v0
  int v56; // $s2
  int v57; // $v0
  int v58; // $v0
  unsigned int v59; // $v1
  _BOOL4 v60; // $a0
  char *v61; // $v0
  char *v62; // $v0
  int v63; // $s5
  int v64; // $v0
  char *v65; // $v0
  int v66; // $v0
  int v67; // $s0
  char *v68; // $v0
  char *v69; // $v0
  int v70; // $at
  Cookie **v71; // $s2
  Cookie *next; // $v0
  Cookie *v73; // $s1
  Cookie *v74; // $s7
  int v75; // $s6
  Cookie *v76; // $s3
  const char *v77; // $s4
  char *v78; // $s5
  char *v79; // $v0
  size_t v80; // $a2
  const char *v81; // $a0
  int expires; // $at
  int v83; // $v0
  int creationtime; // $v1
  int v85; // $a0
  char *v86; // $a1
  char *spath; // $a2
  char *v88; // $a3
  int expires_high; // $t0
  const char *v90; // $a2
  curl_off_t v91; // $v1
  int next_expiration_high; // $at
  _BOOL4 v93; // $a1
  int v95; // [sp+34h] [-CCh]
  int *v96; // [sp+3Ch] [-C4h]
  char **v97; // [sp+40h] [-C0h]
  char **v98; // [sp+44h] [-BCh]
  char **v99; // [sp+4Ch] [-B4h]
  const char *v101; // [sp+54h] [-ACh]
  int v102; // [sp+58h] [-A8h]
  char v103; // [sp+63h] [-9Dh]
  int v104; // [sp+68h] [-98h]
  char **v105; // [sp+6Ch] [-94h]
  Curl_easy *v106; // [sp+74h] [-8Ch]
  Cookie *co; // [sp+7Ch] [-84h]
  char *v108[32]; // [sp+80h] [-80h] BYREF

  v16 = 0;
  v17 = time(0u);
  if ( data->req.setcookies >= 0x32u )
    return v16;
  v104 = v17;
  v18 = Curl_ccalloc(1, 48);
  if ( !v18 )
    return v16;
  v19 = v18;
  v20 = (char *)lineptr;
  v106 = data;
  co = (Cookie *)v18;
  if ( !httpheader )
  {
    v108[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      *(_BYTE *)(v19 + 35) = 1;
      v20 = (char *)(lineptr + 10);
    }
    if ( *v20 != 35 )
    {
      v61 = strchr(v20, 13);
      if ( v61 )
        *v61 = 0;
      v62 = strchr(v20, 10);
      if ( v62 )
        *v62 = 0;
      if ( strtok_r(v20, "\t", v108) )
        JUMPOUT(0x10D4);
      freecookie(co);
      return 0;
    }
LABEL_5:
    Curl_cfree(v19);
    return 0;
  }
  if ( strlen(lineptr) >= 0x1389 )
    goto LABEL_5;
  v102 = noexpire;
  v95 = 0x7FFFFFFF - (v104 >> 0x1F);
  v97 = (char **)(v19 + 0x14);
  v96 = (int *)(v19 + 0x18);
  v98 = (char **)(v19 + 0xC);
  v105 = (char **)(v19 + 4);
  v103 = 0;
  v99 = (char **)(v19 + 8);
  do
  {
    for ( i = v20; ; ++i )
    {
      v23 = (unsigned __int8)*i;
      if ( v23 != 32 && v23 != 9 )
        break;
    }
    v24 = strcspn(i, ";\t\r\n=");
    if ( !v24 )
    {
      v20 = i;
      goto LABEL_27;
    }
    v25 = v24;
    v20 = &i[v24];
    v26 = v24;
    while ( 1 )
    {
      v27 = (unsigned __int8)i[v26 - 1];
      if ( v27 != 32 && v27 != 9 )
        break;
      if ( !--v26 )
      {
        v26 = 0;
        break;
      }
    }
    if ( *v20 == 61 )
    {
      v29 = &i[v25 + 1];
      v30 = strcspn(v29, ";\r\n");
      v31 = v25 + v30;
      if ( v30 )
      {
        while ( 1 )
        {
          v32 = (unsigned __int8)i[v25 + v30];
          if ( v32 != 32 && v32 != 9 )
            break;
          if ( !--v30 )
          {
            v30 = 0;
            break;
          }
        }
      }
      v35 = (unsigned __int8 *)&i[v31];
      if ( v30 )
      {
        v34 = (unsigned __int8 *)&i[v25 + 1 + v30];
        do
        {
          v36 = *(unsigned __int8 *)v29;
          if ( v36 != 32 && v36 != 9 )
          {
            v34 = (unsigned __int8 *)v29;
            goto LABEL_54;
          }
          --v30;
          ++v29;
        }
        while ( v30 );
        v30 = 0;
      }
      else
      {
        v34 = (unsigned __int8 *)&i[v25 + 1];
      }
LABEL_54:
      v20 = (char *)(v35 + 1);
      if ( (int)memchr(v34, 9, v30) )
      {
        freecookie(co);
        v21 = 1;
        if ( v106 && (*((_BYTE *)&v106->set + 1337) & 4) != 0 )
          goto LABEL_57;
        goto LABEL_13;
      }
      v33 = 1;
      if ( v26 >= 0xFFF )
        goto LABEL_66;
    }
    else
    {
      v30 = 0;
      v33 = 0;
      v34 = 0;
      if ( v26 >= 0xFFF )
        goto LABEL_66;
    }
    if ( v30 < 0xFFF && v30 + v26 < 0x1001 )
    {
      if ( v23 == 95 && v26 >= 7 && i[1] == 95 )
      {
        v37 = v33;
        if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("__Secure-", i, 9) )
        {
          co->prefix |= 1u;
          v33 = v37;
        }
        else
        {
          v38 = ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("__Host-", i, 7);
          v33 = v37;
          if ( v38 )
            co->prefix |= 2u;
        }
      }
      if ( !*v105 )
      {
        v101 = (const char *)v34;
        v21 = 6;
        if ( v33 )
        {
          strstore(v105, i, v26);
          strstore(v99, v101, v30);
          v40 = *v105;
          if ( *v105 )
          {
            if ( *v99 )
            {
              if ( !((int (*)(void))invalid_octets)() && !invalid_octets(v40) )
                goto LABEL_12;
              if ( v106 )
              {
                if ( (*((_BYTE *)&v106->set + 1337) & 4) != 0 )
                  ((void (*)(void))Curl_infof)();
                v103 = 1;
              }
              else
              {
                v103 = 1;
              }
            }
            else
            {
              v103 = 1;
            }
          }
          else
          {
            v103 = 1;
          }
        }
        else
        {
          v103 = 1;
        }
        goto LABEL_13;
      }
      if ( !v30 )
      {
        if ( v26 == 8 )
        {
          v56 = v33;
          v55 = ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("httponly", i, 8);
          v33 = v56;
          if ( v55 )
          {
            co->httponly = 1;
            goto LABEL_12;
          }
        }
        else if ( v26 == 6 )
        {
          v41 = v33;
          if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("secure", i, 6) )
          {
            if ( !secure && c->running )
            {
              v21 = 6;
              v103 = 1;
              goto LABEL_13;
            }
            co->secure = 1;
            goto LABEL_12;
          }
          v33 = v41;
        }
        if ( !v33 )
          goto LABEL_12;
      }
      if ( v26 == 7 )
      {
        if ( !((int (__fastcall *)(const char *, char *, int))curl_strnequal)("version", i, 7) )
        {
          if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("max-age", i, 7) )
          {
            if ( *v34 == 0x22 )
              ++v34;
            v42 = ((int (__fastcall *)(unsigned __int8 *, _DWORD, int, int *))curlx_strtoofft)(v34, 0, 10, v96);
            if ( v42 )
            {
              if ( v42 == 2 )
              {
                *(_DWORD *)(v19 + 28) = 1;
                *v96 = 0;
              }
              else if ( v42 == 1 )
              {
                *(_DWORD *)(v19 + 28) = -1;
                *v96 = 0x7FFFFFFF;
              }
            }
            else
            {
              v58 = *v96;
              v59 = *(_DWORD *)(v19 + 28);
              if ( *(_QWORD *)v96 )
              {
                v60 = v95 >= v58;
                if ( v95 == v58 )
                  v60 = ~v104 >= v59;
                if ( v60 )
                {
                  *(_DWORD *)(v19 + 28) = v59 + v104;
                  *v96 = v58 + (v104 >> 0x1F) + __CFADD__(v59, v104);
                }
                else
                {
                  *(_DWORD *)(v19 + 28) = -1;
                  *v96 = 0x7FFFFFFF;
                }
              }
              else
              {
                *(_DWORD *)(v19 + 28) = 1;
                *v96 = 0;
              }
            }
          }
          else if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("expires", i, 7)
                 && v30 < 0x80
                 && !co->expires )
          {
            memcpy(v108, v34, v30);
            *((_BYTE *)v108 + v30) = 0;
            v57 = ((int (__fastcall *)(char **))Curl_getdate_capped)(v108);
            co->expires = v57;
            if ( v57 )
            {
              if ( v57 < 0 )
              {
                LODWORD(co->expires) = 0;
                HIDWORD(co->expires) = 0;
              }
            }
            else
            {
              LODWORD(co->expires) = 1;
              HIDWORD(co->expires) = 0;
            }
          }
        }
        goto LABEL_12;
      }
      if ( v26 != 6 )
      {
        if ( v26 != 4 || !((int (__fastcall *)(const char *, char *, int))curl_strnequal)("path", i, 4) )
          goto LABEL_12;
        strstore(v98, (const char *)v34, v30);
        v21 = 6;
        if ( *v98 )
        {
          Curl_cfree(co->spath);
          v39 = sanitize_cookie_path(co->path);
          co->spath = v39;
          if ( v39 )
            goto LABEL_12;
          v103 = 1;
        }
        else
        {
          v103 = 1;
        }
        goto LABEL_13;
      }
      v43 = ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("domain", i, 6);
      if ( !v30 || !v43 )
        goto LABEL_12;
      v44 = *v34;
      if ( v44 == 0x2E )
        ++v34;
      v45 = (__PAIR64__(v30, v44 ^ 0x2Eu) - 1) >> 32;
      v46 = ((int (__fastcall *)(unsigned __int8 *, size_t))bad_domain)(v34, v45);
      v47 = (const char *)v34;
      v48 = domain;
      if ( v46 )
        v48 = ":";
      v49 = v48;
      v50 = v47;
      if ( !v48 )
        v49 = v47;
      v51 = ((int (__fastcall *)(const char *))Curl_host_is_ipnum)(v49);
      v52 = v51;
      domain = v48;
      if ( v48 )
      {
        if ( !v51 )
          goto LABEL_119;
        if ( strncmp(v50, v48, v45) || v45 != strlen(v48) )
        {
          if ( v52 )
            goto LABEL_140;
LABEL_119:
          if ( !((int (__fastcall *)(const char *, size_t, const char *))cookie_tailmatch)(v50, v45, v48) )
          {
LABEL_140:
            v103 = 1;
            if ( v106 && (*((_BYTE *)&v106->set + 1337) & 4) != 0 )
              ((void (*)(void))Curl_infof)();
            goto LABEL_12;
          }
        }
      }
      strstore(v97, v50, v45);
      v53 = *v97;
      v54 = *v97 == 0;
      if ( v52 | v54 )
      {
        v21 = 6;
        if ( v53 )
          v21 = 0;
        v103 |= v54;
        if ( v53 )
          goto LABEL_12;
        goto LABEL_13;
      }
      co->tailmatch = 1;
LABEL_12:
      v21 = 0;
      goto LABEL_13;
    }
LABEL_66:
    freecookie(co);
    v21 = 1;
    if ( v106 && (*((_BYTE *)&v106->set + 1337) & 4) != 0 )
LABEL_57:
      ((void (*)(void))Curl_infof)();
LABEL_13:
    if ( v21 )
      break;
LABEL_27:
    while ( 1 )
    {
      v28 = (unsigned __int8)*v20;
      if ( v28 != 32 && v28 != 9 )
        break;
      ++v20;
    }
    v21 = 6;
    if ( v28 == 0x3B )
      v21 = 0;
    if ( v28 == 0x3B )
      ++v20;
  }
  while ( !v21 );
  v16 = 0;
  if ( v21 != 6 )
    return v16;
  if ( (v103 & 1) != 0 )
  {
    v63 = v102;
  }
  else if ( domain )
  {
    v63 = v102;
    if ( !co->domain )
    {
      v64 = Curl_cstrdup(domain);
      co->domain = (char *)v64;
      v103 |= v64 == 0;
    }
  }
  else
  {
    v63 = v102;
  }
  if ( (v103 & 1) == 0 && path && !co->path )
  {
    v65 = strchr(path, 63);
    v66 = v65 ? ((int (__fastcall *)(const char *, int, int))Curl_memrchr)(path, 47, v65 - path) : (int)strrchr(path, 47);
    if ( v66 )
    {
      v67 = v66 - (_DWORD)path;
      v68 = (char *)Curl_cmalloc(v66 - (_DWORD)path + 2);
      co->path = v68;
      if ( v68 )
      {
        memcpy(v68, path, v67 + 1);
        co->path[v67 + 1] = 0;
        v69 = sanitize_cookie_path(co->path);
        co->spath = v69;
        v103 |= v69 == 0;
        goto LABEL_171;
      }
LABEL_240:
      freecookie(co);
      return v16;
    }
  }
LABEL_171:
  if ( (v103 & 1) != 0 )
    goto LABEL_240;
  if ( !co->name )
    goto LABEL_240;
  ++v106->req.setcookies;
  if ( (co->prefix & 1) != 0 && !co->secure )
    goto LABEL_240;
  if ( (co->prefix & 2) != 0 )
  {
    if ( !co->secure )
      goto LABEL_240;
    v81 = co->path;
    if ( !v81 || strcmp(v81, "/") || co->tailmatch )
      goto LABEL_240;
  }
  if ( !c->running && c->newsession && !co->expires )
    goto LABEL_240;
  co->livecookie = c->running;
  v70 = c->lastct + 1;
  c->lastct = v70;
  co->creationtime = v70;
  if ( !v63 )
    remove_expired(c);
  v71 = &c->cookies[cookiehash(co->domain)];
  next = *v71;
  if ( !*v71 )
  {
    LOBYTE(v75) = 0;
    v74 = 0;
    v73 = 0;
    v76 = 0;
LABEL_242:
    if ( v73 )
    {
      v73->next = v74->next;
      v73->creationtime = v74->creationtime;
      Curl_cfree(v74->name);
      Curl_cfree(v74->value);
      Curl_cfree(v74->domain);
      Curl_cfree(v74->path);
      Curl_cfree(v74->spath);
      expires = v73->expires;
      v83 = *(_DWORD *)&v73->tailmatch;
      creationtime = v73->creationtime;
      v85 = *(_DWORD *)&v73->prefix;
      v86 = v73->path;
      spath = v73->spath;
      v88 = v73->domain;
      expires_high = HIDWORD(v73->expires);
      *((_DWORD *)&v74->prefix + 1) = *((_DWORD *)&v73->prefix + 1);
      *(_DWORD *)&v74->prefix = v85;
      v74->creationtime = creationtime;
      *(_DWORD *)&v74->tailmatch = v83;
      LODWORD(v74->expires) = expires;
      HIDWORD(v74->expires) = expires_high;
      v74->domain = v88;
      v74->spath = spath;
      v74->path = v86;
      v74->value = v73->value;
      v74->name = v73->name;
      v74->next = v73->next;
      Curl_cfree(v73);
      co = v74;
    }
    if ( v106 && c->running && (*((_BYTE *)&v106->set + 1337) & 4) != 0 )
    {
      v90 = "Added";
      if ( (v75 & 1) != 0 )
        v90 = "Replaced";
      ((void (__fastcall *)(Curl_easy *, const char *, const char *, char *))Curl_infof)(
        v106,
        "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
        v90,
        co->name);
    }
    if ( (v75 & 1) == 0 )
    {
      if ( v76 )
        v76->next = co;
      else
        *v71 = co;
      ++c->numcookies;
    }
    v16 = co;
    v91 = co->expires;
    if ( v91 )
    {
      next_expiration_high = HIDWORD(c->next_expiration);
      v93 = SHIDWORD(v91) >= next_expiration_high;
      if ( HIDWORD(v91) == next_expiration_high )
        v93 = (unsigned int)v91 >= LODWORD(c->next_expiration);
      if ( !v93 )
        c->next_expiration = v91;
    }
    return v16;
  }
  v73 = 0;
  v74 = 0;
  v75 = 0;
  while ( 2 )
  {
    v76 = next;
    if ( !((int (__fastcall *)(char *, char *))curl_strequal)(next->name, co->name) )
      goto LABEL_193;
    if ( v76->domain )
    {
      if ( co->domain && ((int (*)(void))curl_strequal)() )
        goto LABEL_206;
      goto LABEL_193;
    }
    if ( co->domain )
      goto LABEL_193;
LABEL_206:
    v77 = v76->spath;
    if ( !v77
      || (v78 = co->spath) == 0
      || !v76->secure
      || co->secure
      || secure
      || ((v79 = strchr(v77 + 1, 47)) == 0 ? (v80 = strlen(v77)) : (v80 = v79 - v77),
          !((int (__fastcall *)(const char *, char *, size_t))curl_strnequal)(v77, v78, v80)) )
    {
LABEL_193:
      if ( !v73 )
      {
        v73 = 0;
        if ( ((int (__fastcall *)(char *, char *))curl_strequal)(v76->name, co->name) )
        {
          if ( v76->domain )
          {
            if ( co->domain && ((int (*)(void))curl_strequal)() )
              v75 |= v76->tailmatch == co->tailmatch;
          }
          else
          {
            v75 |= co->domain == 0;
          }
          if ( (v75 & 1) == 0 )
          {
LABEL_220:
            if ( (v75 & 1) != 0 )
            {
              v73 = co;
              if ( co->livecookie )
              {
                v74 = v76;
              }
              else
              {
                v74 = v76;
                if ( v76->livecookie )
                  goto LABEL_224;
              }
            }
            goto LABEL_194;
          }
          if ( !v76->spath || !co->spath || ((int (*)(void))curl_strequal)() )
          {
            v75 &= (v76->spath != 0) ^ (co->spath == 0);
            goto LABEL_220;
          }
          v75 = 0;
        }
      }
LABEL_194:
      next = v76->next;
      if ( !v76->next )
        goto LABEL_242;
      continue;
    }
    break;
  }
  if ( v106 && (*((_BYTE *)&v106->set + 1337) & 4) != 0 )
    ((void (*)(void))Curl_infof)();
LABEL_224:
  freecookie(co);
  return 0;
}
