Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  Cookie *v16; // $s3
  time_t v17; // $v0
  int v18; // $v0
  char *v19; // $s5
  int v20; // $s1
  char *i; // $s1
  int v22; // $s2
  size_t v23; // $v0
  size_t v24; // $s4
  char *v25; // $v1
  unsigned int v26; // $s6
  int v27; // $v0
  size_t v28; // $v0
  size_t v29; // $a3
  size_t v30; // $a2
  char *v31; // $fp
  int v32; // $v1
  char *v33; // $a0
  int j; // $v1
  int v35; // $a2
  size_t v36; // $s1
  size_t v37; // $s7
  int v38; // $s1
  char *v39; // $at
  int v40; // $v0
  const char *v41; // $v0
  char *v42; // $s2
  size_t v43; // $s4
  char *v44; // $v1
  int v45; // $v0
  int v46; // $v0
  const char *v47; // $s2
  int v48; // $s5
  _BYTE *v49; // $at
  int v50; // $v0
  int v51; // $v0
  size_t v52; // $s2
  _BYTE *v53; // $v0
  const char *v54; // $s5
  int v55; // $s4
  int v56; // $v0
  const char *v57; // $a0
  int v58; // $v0
  size_t v59; // $v0
  const char *v60; // $v1
  size_t v61; // $s5
  size_t v62; // $s6
  int v63; // $v0
  int v64; // $v0
  int v65; // $v0
  int v66; // $v1
  _BOOL4 v67; // $v0
  int v68; // $v0
  unsigned int v69; // $v1
  _BOOL4 v70; // $a1
  int v71; // $v0
  int v72; // $v0
  int v73; // $s1
  char *v74; // $v0
  int v75; // $v0
  char *v76; // $v0
  char *v77; // $v0
  int v78; // $s0
  void *v79; // $v0
  const char *v80; // $v0
  char *v81; // $s2
  size_t v82; // $s4
  char *v83; // $v1
  int v84; // $v0
  int v85; // $at
  int v86; // $s0
  __int64 v87; // $s2
  int next_expiration_high; // $v0
  _BOOL4 v89; // $a0
  unsigned int next_expiration; // $v1
  Cookie *v91; // $s1
  Cookie **v92; // $s0
  Cookie *next; // $v0
  Cookie **v94; // $s2
  Cookie *v95; // $s7
  char v96; // $s6
  Cookie *v97; // $s3
  int v98; // $a1
  const char *spath; // $s4
  int v100; // $s5
  char *v101; // $v0
  size_t v102; // $a2
  int v103; // $a1
  int v104; // $at
  bool v105; // dc
  int v106; // $at
  int v107; // $a1
  const char *v108; // $a0
  Cookie *v109; // $at
  Cookie *v110; // $v0
  Cookie *v111; // $v1
  char *v112; // $a1
  char *v113; // $a2
  char *v114; // $a3
  Cookie *v115; // $t0
  Cookie *v116; // $t1
  Cookie *v117; // $s2
  Cookie **v118; // $s7
  Cookie *v119; // $fp
  Cookie **p_next; // $s1
  __int64 v121; // $v0
  Cookie *v122; // $s4
  _BOOL4 v123; // $a2
  int v124; // $at
  _BOOL4 v125; // $a1
  const char *v126; // $a2
  __int64 v127; // $v0
  int v128; // $at
  _BOOL4 v129; // $a1
  int v131; // [sp+34h] [-BCh]
  unsigned int *v132; // [sp+40h] [-B0h]
  char v133; // [sp+44h] [-ACh]
  Curl_easy *v135; // [sp+4Ch] [-A4h]
  int v136; // [sp+50h] [-A0h]
  int v137; // [sp+58h] [-98h]
  char *v138; // [sp+60h] [-90h]
  int v139; // [sp+64h] [-8Ch]
  CookieInfo *v140; // [sp+68h] [-88h]
  char *v141[32]; // [sp+70h] [-80h] BYREF

  v16 = 0;
  v17 = time(0u);
  if ( data->req.setcookies >= 0x32u )
    return v16;
  v137 = v17;
  v140 = c;
  v18 = Curl_ccalloc(1, 48);
  if ( !v18 )
    return v16;
  v136 = noexpire;
  v19 = (char *)lineptr;
  v20 = v18;
  v139 = v18;
  if ( !httpheader )
  {
    v141[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v19 = (char *)(lineptr + 10);
      *(_BYTE *)(v20 + 35) = 1;
      if ( lineptr[10] == 35 )
        goto LABEL_5;
    }
    else if ( *lineptr == 35 )
    {
      goto LABEL_5;
    }
    v76 = strchr(v19, 13);
    if ( v76 )
      *v76 = 0;
    v77 = strchr(v19, 10);
    if ( v77 )
      *v77 = 0;
    if ( strtok_r(v19, "\t", v141) )
      JUMPOUT(0x1418);
    Curl_cfree(*(_DWORD *)(v20 + 20));
    Curl_cfree(*(_DWORD *)(v20 + 12));
    Curl_cfree(*(_DWORD *)(v20 + 16));
    Curl_cfree(*(_DWORD *)(v20 + 4));
    Curl_cfree(*(_DWORD *)(v20 + 8));
    Curl_cfree(v20);
    return v16;
  }
  if ( strlen(lineptr) >= 0x1389 )
  {
LABEL_5:
    Curl_cfree(v20);
    return v16;
  }
  v135 = data;
  v131 = 0x7FFFFFFF - (v137 >> 0x1F);
  v132 = (unsigned int *)(v20 + 0x18);
  v133 = 0;
  do
  {
    for ( i = v19 + 1; ; ++i )
    {
      v22 = (unsigned __int8)*v19;
      if ( v22 != 32 && v22 != 9 )
        break;
      ++v19;
    }
    v23 = strcspn(v19, ";\t\r\n=");
    if ( !v23 )
      goto LABEL_148;
    v24 = v23;
    v25 = &v19[v23];
    v26 = v23;
    while ( 1 )
    {
      v27 = (unsigned __int8)v19[v26 - 1];
      if ( v27 != 32 && v27 != 9 )
        break;
      if ( !--v26 )
      {
        v26 = 0;
        if ( *v25 != 61 )
          goto LABEL_31;
        goto LABEL_20;
      }
    }
    if ( *v25 != 61 )
    {
LABEL_31:
      v37 = 0;
      v38 = 0;
      v31 = 0;
      v138 = v25;
      goto LABEL_37;
    }
LABEL_20:
    v28 = strcspn(&v19[v24 + 1], ";\r\n");
    v29 = v24 + v28;
    v30 = 0;
    if ( v28 )
    {
      v31 = &i[v29];
      while ( 1 )
      {
        v32 = (unsigned __int8)*(v31 - 1);
        if ( v32 != 32 && v32 != 9 )
          break;
        --v28;
        --v31;
        if ( !v28 )
        {
          v36 = v29;
          v31 = &v19[v24 + 1];
          goto LABEL_35;
        }
      }
      v33 = &i[v24];
      for ( j = 0; j != v28; ++j )
      {
        v35 = (unsigned __int8)v33[j];
        if ( v35 != 32 && v35 != 9 )
        {
          v36 = v29;
          v30 = v28 - j;
          v31 = &v33[j];
          goto LABEL_35;
        }
      }
      v36 = v29;
      v30 = 0;
    }
    else
    {
      v36 = v24 + v28;
      v31 = &v19[v24 + 1];
    }
LABEL_35:
    v37 = v30;
    if ( ((int (__fastcall *)(char *, int))memchr)(v31, 9) )
    {
      Curl_cfree(*(_DWORD *)(v139 + 20));
      Curl_cfree(*(_DWORD *)(v139 + 12));
      Curl_cfree(*(_DWORD *)(v139 + 16));
      Curl_cfree(*(_DWORD *)(v139 + 4));
      Curl_cfree(*(_DWORD *)(v139 + 8));
      Curl_cfree(v139);
      v16 = 0;
      if ( (*((_BYTE *)&data->set + 1338) & 0x10) != 0 )
        Curl_infof(data, "cookie contains TAB, dropping");
      return v16;
    }
    v39 = &v19[v36];
    v38 = 1;
    v138 = v39 + 1;
LABEL_37:
    if ( v26 >= 0xFFF || v37 >= 0xFFF || v37 + v26 >= 0x1001 )
    {
      Curl_cfree(*(_DWORD *)(v139 + 20));
      Curl_cfree(*(_DWORD *)(v139 + 12));
      Curl_cfree(*(_DWORD *)(v139 + 16));
      Curl_cfree(*(_DWORD *)(v139 + 4));
      Curl_cfree(*(_DWORD *)(v139 + 8));
      Curl_cfree(v139);
      v16 = 0;
      if ( (*((_BYTE *)&data->set + 1338) & 0x10) != 0 )
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v26, v37);
      return v16;
    }
    if ( v22 == 95 && v26 >= 7 && v19[1] == 95 )
    {
      if ( curl_strnequal("__Secure-", v19, 9) )
      {
        *(_BYTE *)(v139 + 40) |= 1u;
      }
      else if ( curl_strnequal("__Host-", v19, 7) )
      {
        *(_BYTE *)(v139 + 40) |= 2u;
      }
    }
    if ( *(_DWORD *)(v139 + 4) )
    {
      if ( !v37 )
      {
        if ( v26 == 8 )
        {
          if ( curl_strnequal("httponly", v19, 8) )
          {
            v19 = v138;
            *(_BYTE *)(v139 + 35) = 1;
            goto LABEL_148;
          }
        }
        else if ( v26 == 6 && curl_strnequal("secure", v19, 6) )
        {
          if ( !secure && v140->running )
            goto LABEL_299;
          v19 = v138;
          *(_BYTE *)(v139 + 33) = 1;
          goto LABEL_148;
        }
        if ( !v38 )
        {
          v19 = v138;
          goto LABEL_148;
        }
      }
      switch ( v26 )
      {
        case 7u:
          if ( curl_strnequal("version", v19, 7) )
          {
            v19 = v138;
          }
          else if ( curl_strnequal("max-age", v19, 7) )
          {
            if ( *v31 == 0x22 )
              ++v31;
            v56 = ((int (__fastcall *)(char *, _DWORD, int, unsigned int *))curlx_strtoofft)(v31, 0, 10, v132);
            if ( v56 )
            {
              v19 = v138;
              if ( v56 == 2 )
              {
                v132[1] = 0;
                *v132 = 1;
              }
              else if ( v56 == 1 )
              {
                *v132 = -1;
                v132[1] = 0x7FFFFFFF;
              }
            }
            else
            {
              v68 = v132[1];
              v69 = *v132;
              v19 = v138;
              if ( *(_QWORD *)v132 )
              {
                v70 = v131 >= v68;
                if ( v131 == v68 )
                  v70 = ~v137 >= v69;
                if ( v70 )
                {
                  *v132 = v69 + v137;
                  v132[1] = v68 + (v137 >> 0x1F) + __CFADD__(v69, v137);
                }
                else
                {
                  *v132 = -1;
                  v132[1] = 0x7FFFFFFF;
                }
              }
              else
              {
                v132[1] = 0;
                *v132 = 1;
              }
            }
          }
          else if ( curl_strnequal("expires", v19, 7) )
          {
            if ( v37 < 0x80 && !*(_QWORD *)v132 )
            {
              memcpy(v141, v31, v37);
              *((_BYTE *)v141 + v37) = 0;
              v64 = ((int (__fastcall *)(char **))Curl_getdate_capped)(v141);
              *(_QWORD *)v132 = v64;
              if ( v64 )
              {
                if ( v64 < 0 )
                {
                  v132[1] = 0;
                  *v132 = 0;
                }
              }
              else
              {
                v132[1] = 0;
                *v132 = 1;
              }
            }
            v19 = v138;
          }
          else
          {
            v19 = v138;
          }
          break;
        case 6u:
          v50 = curl_strnequal("domain", v19, 6);
          if ( !v37 )
          {
            v19 = v138;
            break;
          }
          if ( !v50 )
          {
            v19 = v138;
            break;
          }
          v51 = (unsigned __int8)*v31;
          if ( v51 == 0x2E )
            ++v31;
          v52 = (__PAIR64__(v37, v51 ^ 0x2Eu) - 1) >> 32;
          if ( v52 == 9 && curl_strnequal(v31, "localhost", 9)
            || (v53 = (_BYTE *)memchr(v31, 46, v52)) != 0 && (unsigned int)(&v31[v52] - v53) >= 2 )
          {
            v54 = domain;
            v57 = v31;
            if ( domain )
              v57 = domain;
            v58 = ((int (__fastcall *)(const char *))Curl_host_is_ipnum)(v57);
            v55 = v58;
            if ( domain )
            {
              if ( !v58 )
                goto LABEL_108;
LABEL_88:
              domain = v54;
              if ( strncmp(v31, v54, v52) )
                goto LABEL_112;
              v55 = 1;
              if ( v52 != strlen(v54) )
                goto LABEL_112;
            }
            else
            {
              domain = 0;
            }
          }
          else
          {
            v54 = ":";
            if ( ((int (__fastcall *)(const char *))Curl_host_is_ipnum)(v54) )
              goto LABEL_88;
LABEL_108:
            v59 = strlen(v54);
            v60 = v54;
            domain = v54;
            if ( v59 < v52
              || (v61 = v59, v62 = (size_t)&v60[v59 - v52], !curl_strnequal(v31, v62, v52))
              || (v55 = 0, v61 != v52) && *(_BYTE *)(v62 - 1) != 46 )
            {
LABEL_112:
              v133 = 1;
              if ( (*((_BYTE *)&data->set + 1338) & 0x10) != 0 )
                Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v31);
              v19 = v138;
              break;
            }
          }
          Curl_cfree(*(_DWORD *)(v139 + 20));
          v65 = Curl_memdup(v31, v52 + 1);
          *(_DWORD *)(v139 + 20) = v65;
          if ( !v65 )
            goto LABEL_299;
          *(_BYTE *)(v65 + v52) = 0;
          v66 = *(_DWORD *)(v139 + 20);
          v67 = v66 == 0;
          if ( v55 | v67 )
          {
            if ( !v66 )
              goto LABEL_299;
            v19 = v138;
            v133 |= v67;
          }
          else
          {
            v19 = v138;
            *(_BYTE *)(v139 + 32) = 1;
          }
          break;
        case 4u:
          if ( curl_strnequal("path", v19, 4) )
          {
            Curl_cfree(*(_DWORD *)(v139 + 12));
            v40 = Curl_memdup(v31, v37 + 1);
            *(_DWORD *)(v139 + 12) = v40;
            if ( !v40 )
              goto LABEL_299;
            *(_BYTE *)(v40 + v37) = 0;
            if ( !*(_DWORD *)(v139 + 12) )
              goto LABEL_299;
            Curl_cfree(*(_DWORD *)(v139 + 16));
            v41 = (const char *)Curl_cstrdup(*(_DWORD *)(v139 + 12));
            if ( !v41 )
              goto LABEL_186;
            v42 = (char *)v41;
            v43 = strlen(v41);
            if ( *v42 == 34 )
              memmove(v42, v42 + 1, v43--);
            if ( v43 )
            {
              v44 = &v42[v43 - 1];
              if ( *v44 == 34 )
              {
                --v43;
                *v44 = 0;
              }
            }
            else
            {
              v43 = 0;
            }
            if ( *v42 == 47 )
            {
              v19 = v138;
              if ( v43 && v42[v43 - 1] == 47 )
                v42[v43 - 1] = 0;
              *(_DWORD *)(v139 + 16) = v42;
            }
            else
            {
              Curl_cfree(v42);
              v63 = Curl_memdup("/", 2);
              if ( !v63 )
              {
LABEL_186:
                *(_DWORD *)(v139 + 16) = 0;
                goto LABEL_299;
              }
              v19 = v138;
              *(_BYTE *)(v63 + 1) = 0;
              *(_DWORD *)(v139 + 16) = v63;
            }
          }
          else
          {
            v19 = v138;
          }
          break;
        default:
          v19 = v138;
          break;
      }
    }
    else
    {
      if ( !v38 )
        goto LABEL_299;
      Curl_cfree(0);
      v45 = Curl_memdup(v19, v26 + 1);
      *(_DWORD *)(v139 + 4) = v45;
      if ( v45 )
        *(_BYTE *)(v45 + v26) = 0;
      Curl_cfree(*(_DWORD *)(v139 + 8));
      v46 = Curl_memdup(v31, v37 + 1);
      *(_DWORD *)(v139 + 8) = v46;
      if ( v46 )
        *(_BYTE *)(v46 + v37) = 0;
      v47 = *(const char **)(v139 + 4);
      if ( !v47 )
        goto LABEL_299;
      v48 = *(_DWORD *)(v139 + 8);
      if ( !v48 )
        goto LABEL_299;
      v49 = (_BYTE *)(v48 + strcspn(*(const char **)(v139 + 8), invalid_octets_badoctets));
      v19 = v138;
      if ( *v49 || v47[strcspn(v47, invalid_octets_badoctets)] )
      {
        if ( (*((_BYTE *)&data->set + 1338) & 0x10) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
        goto LABEL_299;
      }
    }
LABEL_148:
    ++v19;
    while ( 1 )
    {
      v71 = (unsigned __int8)*(v19 - 1);
      if ( v71 != 32 && v71 != 9 )
        break;
      ++v19;
    }
  }
  while ( v71 == 59 );
  if ( (v133 & 1) != 0 )
    goto LABEL_299;
  if ( domain )
  {
    if ( !*(_DWORD *)(v139 + 20) )
    {
      v72 = Curl_cstrdup(domain);
      *(_DWORD *)(v139 + 20) = v72;
      if ( !v72 )
        goto LABEL_299;
    }
  }
  v73 = v139;
  if ( !path || *(_DWORD *)(v139 + 12) )
    goto LABEL_195;
  v74 = strchr(path, 63);
  v75 = v74 ? ((int (__fastcall *)(const char *, int, int))Curl_memrchr)(path, 47, v74 - path) : (int)strrchr(path, 47);
  if ( !v75 )
    goto LABEL_195;
  v78 = v75 - (_DWORD)path;
  v79 = (void *)Curl_cmalloc(v75 - (_DWORD)path + 2);
  *(_DWORD *)(v139 + 12) = v79;
  if ( !v79 )
  {
LABEL_299:
    Curl_cfree(*(_DWORD *)(v139 + 20));
    Curl_cfree(*(_DWORD *)(v139 + 12));
    Curl_cfree(*(_DWORD *)(v139 + 16));
    Curl_cfree(*(_DWORD *)(v139 + 4));
    Curl_cfree(*(_DWORD *)(v139 + 8));
    Curl_cfree(v139);
    return 0;
  }
  memcpy(v79, path, v78 + 1);
  v73 = v139;
  *(_BYTE *)(*(_DWORD *)(v139 + 12) + v78 + 1) = 0;
  v80 = (const char *)Curl_cstrdup(*(_DWORD *)(v139 + 12));
  if ( !v80 )
  {
LABEL_298:
    *(_DWORD *)(v139 + 16) = 0;
    goto LABEL_299;
  }
  v81 = (char *)v80;
  v82 = strlen(v80);
  if ( *v81 == 34 )
    memmove(v81, v81 + 1, v82--);
  if ( v82 )
  {
    v83 = &v81[v82 - 1];
    if ( *v83 == 34 )
    {
      --v82;
      *v83 = 0;
    }
  }
  else
  {
    v82 = 0;
  }
  if ( *v81 != 47 )
  {
    Curl_cfree(v81);
    v84 = Curl_memdup("/", 2);
    if ( v84 )
    {
      v81 = (char *)v84;
      *(_BYTE *)(v84 + 1) = 0;
      goto LABEL_194;
    }
    goto LABEL_298;
  }
  if ( v82 && v81[v82 - 1] == 47 )
    v81[v82 - 1] = 0;
LABEL_194:
  *(_DWORD *)(v139 + 16) = v81;
LABEL_195:
  if ( !*(_DWORD *)(v73 + 4) )
    goto LABEL_299;
  ++v135->req.setcookies;
  v16 = 0;
  if ( (*(_BYTE *)(v139 + 40) & 1) != 0 && !*(_BYTE *)(v139 + 33)
    || (*(_BYTE *)(v139 + 40) & 2) != 0
    && (!*(_BYTE *)(v139 + 33) || (v108 = *(const char **)(v139 + 12)) == 0
                               || strcmp(v108, "/")
                               || *(_BYTE *)(v139 + 32))
    || !v140->running && v140->newsession && !*(_QWORD *)(v139 + 24) )
  {
    Curl_cfree(*(_DWORD *)(v139 + 20));
    Curl_cfree(*(_DWORD *)(v139 + 12));
    Curl_cfree(*(_DWORD *)(v139 + 16));
    Curl_cfree(*(_DWORD *)(v139 + 4));
    Curl_cfree(*(_DWORD *)(v139 + 8));
    Curl_cfree(v139);
    return v16;
  }
  *(_BYTE *)(v139 + 34) = v140->running;
  v85 = v140->lastct + 1;
  v140->lastct = v85;
  *(_DWORD *)(v139 + 36) = v85;
  if ( !v136 )
  {
    v86 = 0;
    v87 = time(0u);
    next_expiration_high = HIDWORD(v140->next_expiration);
    v89 = SHIDWORD(v87) >= next_expiration_high;
    next_expiration = v140->next_expiration;
    if ( next_expiration_high == HIDWORD(v87) )
      v89 = (unsigned int)v87 >= next_expiration;
    if ( v89 || !(~next_expiration | next_expiration_high ^ 0x7FFFFFFF) )
    {
      LODWORD(v140->next_expiration) = -1;
      HIDWORD(v140->next_expiration) = 0x7FFFFFFF;
      do
      {
        v118 = &v140->cookies[v86];
        v119 = *v118;
        if ( *v118 )
        {
          p_next = 0;
          do
          {
            LODWORD(v121) = HIDWORD(v119->expires);
            HIDWORD(v121) = v119->expires;
            v122 = v119;
            v119 = v119->next;
            if ( !v121 )
              goto LABEL_277;
            v123 = (int)v121 >= SHIDWORD(v87);
            if ( (unsigned int)v121 == HIDWORD(v87) )
              v123 = HIDWORD(v121) >= (unsigned int)v87;
            if ( v123 )
            {
LABEL_277:
              if ( v121 )
              {
                v124 = HIDWORD(v140->next_expiration);
                v125 = (int)v121 >= v124;
                if ( (unsigned int)v121 == v124 )
                  v125 = HIDWORD(v121) >= LODWORD(v140->next_expiration);
                p_next = &v122->next;
                if ( !v125 )
                {
                  LODWORD(v140->next_expiration) = HIDWORD(v121);
                  HIDWORD(v140->next_expiration) = v121;
                }
              }
              else
              {
                p_next = &v122->next;
              }
            }
            else
            {
              if ( p_next )
                *p_next = v119;
              else
                *v118 = v119;
              --v140->numcookies;
              Curl_cfree(v122->domain);
              Curl_cfree(v122->path);
              Curl_cfree(v122->spath);
              Curl_cfree(v122->name);
              Curl_cfree(v122->value);
              Curl_cfree(v122);
            }
          }
          while ( v119 );
        }
        ++v86;
      }
      while ( v86 != 63 );
    }
  }
  v91 = (Cookie *)v139;
  v92 = &v140->cookies[cookiehash(*(const char *const *)(v139 + 20))];
  next = *v92;
  if ( !*v92 )
  {
    v97 = 0;
    v96 = 0;
    goto LABEL_259;
  }
  v94 = 0;
  v95 = 0;
  v96 = 0;
  while ( 2 )
  {
    v97 = next;
    if ( ((int (__fastcall *)(char *, _DWORD))curl_strequal)(next->name, *(_DWORD *)(v139 + 4)) )
    {
      v98 = *(_DWORD *)(v139 + 20);
      if ( v97->domain )
      {
        if ( v98 && curl_strequal() )
        {
LABEL_213:
          spath = v97->spath;
          if ( spath )
          {
            v100 = *(_DWORD *)(v139 + 16);
            if ( v100 )
            {
              if ( v97->secure && !*(_BYTE *)(v139 + 33) && !secure )
              {
                v101 = strchr(spath + 1, 47);
                v102 = v101 ? v101 - spath : strlen(spath);
                if ( curl_strnequal(spath, v100, v102) )
                {
                  if ( v135 && (*((_BYTE *)&v135->set + 1338) & 0x10) != 0 )
                    Curl_infof(
                      v135,
                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                      *(_DWORD *)(v139 + 4),
                      *(_DWORD *)(v139 + 20));
                  goto LABEL_299;
                }
              }
            }
          }
        }
      }
      else if ( !v98 )
      {
        goto LABEL_213;
      }
    }
    if ( !v94 )
    {
      if ( !((int (__fastcall *)(char *, _DWORD))curl_strequal)(v97->name, *(_DWORD *)(v139 + 4)) )
      {
        v94 = 0;
        goto LABEL_208;
      }
      v103 = *(_DWORD *)(v139 + 20);
      if ( v97->domain )
      {
        if ( v103 && curl_strequal() )
        {
          v104 = v96 & 1 | (v97->tailmatch == *(unsigned __int8 *)(v139 + 32));
          v96 = 0;
          if ( !v104 )
          {
            v94 = 0;
            goto LABEL_208;
          }
        }
        else
        {
          v105 = (v96 & 1) != 0;
          v96 = 0;
          if ( !v105 )
          {
            v94 = 0;
            goto LABEL_208;
          }
        }
      }
      else
      {
        v106 = v96 & 1 | (v103 == 0);
        v96 = 0;
        if ( !v106 )
        {
          v94 = 0;
          goto LABEL_208;
        }
      }
      v107 = *(_DWORD *)(v139 + 16);
      if ( v97->spath )
      {
        if ( v107 )
        {
          if ( !curl_strequal() )
          {
            v96 = 0;
            v94 = 0;
            goto LABEL_208;
          }
          v96 = 0;
          v94 = 0;
          if ( (v97->spath != 0) == (*(_DWORD *)(v139 + 16) == 0) )
            goto LABEL_208;
        }
        else if ( !*(_DWORD *)(v139 + 16) )
        {
          v96 = 0;
          v94 = 0;
          goto LABEL_208;
        }
      }
      else
      {
        v96 = 0;
        v94 = 0;
        if ( v107 )
          goto LABEL_208;
      }
      v96 = 1;
      if ( *(_BYTE *)(v139 + 34) )
      {
        v95 = v97;
        v94 = (Cookie **)v139;
      }
      else
      {
        v95 = v97;
        v94 = (Cookie **)v139;
        if ( v97->livecookie )
          goto LABEL_299;
      }
    }
LABEL_208:
    next = v97->next;
    if ( v97->next )
      continue;
    break;
  }
  if ( v94 )
  {
    *v94 = v95->next;
    v94[9] = (Cookie *)v95->creationtime;
    Curl_cfree(v95->name);
    Curl_cfree(v95->value);
    Curl_cfree(v95->domain);
    Curl_cfree(v95->path);
    Curl_cfree(v95->spath);
    v109 = v94[7];
    v110 = v94[8];
    v111 = v94[9];
    v112 = (char *)v94[3];
    v113 = (char *)v94[4];
    v114 = (char *)v94[5];
    v115 = v94[6];
    v116 = v94[11];
    *(_DWORD *)&v95->prefix = v94[10];
    *((_DWORD *)&v95->prefix + 1) = v116;
    v95->creationtime = (int)v111;
    *(_DWORD *)&v95->tailmatch = v110;
    HIDWORD(v95->expires) = v109;
    LODWORD(v95->expires) = v115;
    v95->domain = v114;
    v95->spath = v113;
    v95->path = v112;
    v95->value = (char *)v94[2];
    v95->name = (char *)v94[1];
    v95->next = *v94;
    Curl_cfree(v94);
    v91 = v95;
  }
LABEL_259:
  if ( v135 && v140->running && (*((_BYTE *)&v135->set + 1338) & 0x10) != 0 )
  {
    v117 = v91;
    v126 = "Added";
    if ( (v96 & 1) != 0 )
      v126 = "Replaced";
    Curl_infof(v135, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld", v126, v91->name);
    if ( (v96 & 1) == 0 )
    {
LABEL_287:
      if ( v97 )
        v97->next = v117;
      else
        *v92 = v117;
      ++v140->numcookies;
    }
  }
  else
  {
    v117 = v91;
    if ( (v96 & 1) == 0 )
      goto LABEL_287;
  }
  LODWORD(v127) = HIDWORD(v117->expires);
  HIDWORD(v127) = v117->expires;
  if ( !v127 )
    return v117;
  v128 = HIDWORD(v140->next_expiration);
  v129 = (int)v127 >= v128;
  if ( (unsigned int)v127 == v128 )
    v129 = HIDWORD(v127) >= LODWORD(v140->next_expiration);
  v16 = v117;
  if ( !v129 )
  {
    LODWORD(v140->next_expiration) = HIDWORD(v127);
    HIDWORD(v140->next_expiration) = v127;
  }
  return v16;
}
