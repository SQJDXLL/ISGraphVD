Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v8; // edi
  char v9; // dl
  __int64 expires; // rax
  unsigned int v11; // ebp
  unsigned int v12; // esi
  const char *v13; // esi
  char v14; // cl
  bool v15; // cl
  char *v16; // eax
  Cookie *v17; // esi
  unsigned __int8 prefix; // al
  char *v20; // eax
  char *v21; // eax
  char *v22; // edi
  int v23; // esi
  char *v24; // ecx
  int v25; // eax
  int v26; // eax
  int v27; // eax
  const char *name; // esi
  const char *value; // edi
  _BYTE *v30; // eax
  char is_ipnum; // di
  int v32; // eax
  size_t v33; // ebp
  int v34; // eax
  char *v35; // eax
  int v36; // eax
  int v37; // eax
  int v38; // esi
  int v39; // eax
  char *v40; // ecx
  int (__cdecl *v41)(char *); // edi
  int v42; // eax
  const char *v43; // eax
  char *v44; // eax
  char *v45; // edi
  bool v46; // di
  int v47; // eax
  int v48; // esi
  bool v49; // di
  bool v50; // bp
  int v51; // esi
  int v52; // eax
  int v53; // eax
  int v54; // eax
  char *v55; // edx
  int v56; // eax
  int v57; // eax
  int v58; // eax
  int v59; // eax
  int v60; // eax
  bool v61; // di
  int v62; // eax
  int v63; // edi
  int v64; // eax
  int v65; // eax
  char *v66; // eax
  bool running; // al
  int v68; // eax
  Cookie *v69; // esi
  Cookie *v70; // edi
  Cookie *next; // eax
  char *v72; // eax
  char *v73; // edx
  char *spath; // edx
  char *v75; // eax
  char *v76; // edx
  unsigned int v77; // ebx
  unsigned int v78; // ecx
  char *v79; // eax
  char *v80; // eax
  const char *v81; // edx
  char *v82; // ecx
  size_t v83; // eax
  const char *v84; // eax
  int v85; // eax
  char *v86; // edx
  curl_off_t v87; // rax
  int v88; // eax
  char *v89; // eax
  char *v90; // eax
  int v91; // esi
  size_t v92; // edi
  char *v93; // eax
  char *v94; // eax
  bool v95; // zf
  char valuep; // [esp+18h] [ebp-F4h]
  char valuepe; // [esp+18h] [ebp-F4h]
  size_t valuepa; // [esp+18h] [ebp-F4h]
  char *valuepb; // [esp+18h] [ebp-F4h]
  bool valuepc; // [esp+18h] [ebp-F4h]
  __int64 valuepd; // [esp+18h] [ebp-F4h]
  const char *ptr; // [esp+24h] [ebp-E8h]
  bool ptra; // [esp+24h] [ebp-E8h]
  char ptrb; // [esp+24h] [ebp-E8h]
  Cookie *co; // [esp+28h] [ebp-E4h]
  char reject; // [esp+2Ch] [ebp-E0h]
  char *rejecta; // [esp+2Ch] [ebp-E0h]
  char *rejectb; // [esp+2Ch] [ebp-E0h]
  char *rejectc; // [esp+2Ch] [ebp-E0h]
  char *rejectd; // [esp+2Ch] [ebp-E0h]
  char *myhash; // [esp+30h] [ebp-DCh]
  size_t myhasha; // [esp+30h] [ebp-DCh]
  char s; // [esp+34h] [ebp-D8h]
  char *sa; // [esp+34h] [ebp-D8h]
  char *sb; // [esp+34h] [ebp-D8h]
  bool s2a; // [esp+44h] [ebp-C8h]
  char *s2b; // [esp+44h] [ebp-C8h]
  char *v119; // [esp+4Ch] [ebp-C0h]
  bool v120; // [esp+4Ch] [ebp-C0h]
  int now; // [esp+50h] [ebp-BCh]
  char *nowa; // [esp+50h] [ebp-BCh]
  bool badcookie; // [esp+5Bh] [ebp-B1h]
  char *tok_buf; // [esp+68h] [ebp-A4h] BYREF
  char date[128]; // [esp+6Ch] [ebp-A0h] BYREF
  unsigned int v126; // [esp+ECh] [ebp-20h]

  v8 = (char *)lineptr;
  v126 = __readgsdword(0x14u);
  now = time(0);
  if ( data->req.setcookies > 0x31u )
    return 0;
  co = (Cookie *)Curl_ccalloc(1, 44);
  if ( !co )
    return 0;
  if ( httpheader )
  {
    badcookie = 0;
    if ( strlen(lineptr) <= 0x1388 )
    {
      v9 = *lineptr;
      if ( *lineptr )
      {
        while ( 1 )
        {
          if ( v9 != 32 )
          {
            valuep = v9;
            if ( v9 != 9 )
            {
              LODWORD(expires) = strcspn(v8, ";\t\r\n=");
              BYTE4(expires) = valuep;
              v11 = expires;
              if ( (_DWORD)expires )
                goto LABEL_16;
LABEL_11:
              while ( BYTE4(expires) == 32 || BYTE4(expires) == 9 )
              {
                BYTE4(expires) = *++v8;
                if ( !BYTE4(expires) )
                  goto LABEL_45;
              }
              if ( BYTE4(expires) != 59 )
                break;
            }
          }
          v9 = *++v8;
          if ( !v9 )
            goto LABEL_15;
        }
LABEL_45:
        if ( badcookie )
          goto LABEL_54;
        if ( !co->domain )
        {
          if ( domain )
          {
            v88 = Curl_cstrdup(domain);
            co->domain = (char *)v88;
            if ( !v88 )
              goto LABEL_54;
          }
        }
        if ( !co->path && path )
        {
          v89 = strchr(path, 63);
          v90 = v89 ? (char *)Curl_memrchr(path, 47, v89 - path) : strrchr(path, 47);
          if ( v90 )
          {
            v91 = v90 - path;
            v92 = v90 - path + 1;
            v93 = (char *)Curl_cmalloc(v90 - path + 2);
            co->path = v93;
            if ( !v93 )
              goto LABEL_54;
            memcpy(v93, path, v92);
            co->path[v91 + 1] = 0;
            v94 = sanitize_cookie_path(co->path);
            co->spath = v94;
            if ( !v94 )
              goto LABEL_54;
          }
        }
        if ( !co->name )
          goto LABEL_54;
        v17 = co;
        ++data->req.setcookies;
        prefix = co->prefix;
        if ( (prefix & 1) != 0 )
          goto LABEL_192;
LABEL_52:
        if ( (prefix & 2) != 0 )
        {
          if ( !v17->secure )
            goto LABEL_54;
          goto LABEL_194;
        }
        goto LABEL_198;
      }
LABEL_15:
      valuepe = v9;
      LODWORD(expires) = strcspn(v8, ";\t\r\n=");
      BYTE4(expires) = valuepe;
      v11 = expires;
      if ( !(_DWORD)expires )
        goto LABEL_45;
LABEL_16:
      ptr = &v8[v11];
      while ( 1 )
      {
        v12 = v11--;
        if ( v8[v11] != 9 && v8[v11] != 32 )
          break;
        if ( !v11 )
        {
          if ( *ptr == 61 )
            goto LABEL_20;
          if ( co->name )
          {
LABEL_115:
            v8 = (char *)ptr;
            BYTE4(expires) = *ptr;
            goto LABEL_44;
          }
LABEL_54:
          freecookie(co);
          return 0;
        }
      }
      v15 = 0;
      v11 = v12;
      if ( *ptr != 61 )
      {
        if ( v12 <= 0xFFE )
        {
          myhash = (char *)ptr;
          v13 = 0;
          valuepa = 0;
          if ( v11 <= 6 )
          {
LABEL_84:
            if ( co->name )
            {
              if ( valuepa )
              {
                if ( v11 != 4 )
                {
                  if ( v11 == 6 )
                  {
                    if ( curl_strnequal("domain", v8, 6) )
                    {
                      if ( *v13 == 46 )
                      {
                        --valuepa;
                        ++v13;
                      }
                      if ( valuepa == 9 && curl_strnequal(v13, "localhost", 9)
                        || (v30 = memchr(v13, 46, valuepa)) != 0 && valuepa - (v30 - v13) > 1 )
                      {
                        if ( !domain )
                        {
                          is_ipnum = Curl_host_is_ipnum(v13);
LABEL_97:
                          Curl_cfree(co->domain);
                          v32 = Curl_memdup(v13, valuepa + 1);
                          co->domain = (char *)v32;
                          if ( !v32 )
                            goto LABEL_54;
                          *(_BYTE *)(v32 + valuepa) = 0;
                          if ( !co->domain )
                            goto LABEL_54;
                          if ( !is_ipnum )
                            co->tailmatch = 1;
                          goto LABEL_80;
                        }
                        is_ipnum = Curl_host_is_ipnum(domain);
                        if ( is_ipnum )
                          goto LABEL_95;
                      }
                      else
                      {
                        is_ipnum = Curl_host_is_ipnum(&LC1);
                        domain = (const char *)&LC1;
                        if ( is_ipnum )
                        {
LABEL_95:
                          if ( !strncmp(v13, domain, valuepa) && strlen(domain) == valuepa )
                            goto LABEL_97;
LABEL_111:
                          if ( (data->set.gap52B[3] & 0x10) != 0 )
                            Curl_infof(data, "skipped cookie with bad tailmatch domain: %s");
                          v8 = myhash;
                          BYTE4(expires) = *myhash;
                          badcookie = httpheader;
                          goto LABEL_44;
                        }
                      }
                      v33 = strlen(domain);
                      if ( v33 >= valuepa
                        && curl_strnequal(v13, &domain[v33 - valuepa], valuepa)
                        && (valuepa == v33 || domain[v33 - valuepa - 1] == 46) )
                      {
                        goto LABEL_97;
                      }
                      goto LABEL_111;
                    }
                    goto LABEL_80;
                  }
                  goto LABEL_42;
                }
              }
              else
              {
                v16 = myhash;
                ptr = myhash;
                if ( v11 == 6 )
                {
                  valuepc = v15;
                  if ( curl_strnequal("secure", v8, 6) )
                  {
                    if ( secure || !c->running )
                    {
                      v8 = myhash;
                      co->secure = 1;
                      BYTE4(expires) = *myhash;
                      goto LABEL_44;
                    }
                    goto LABEL_54;
                  }
                  if ( valuepc )
                    curl_strnequal("domain", v8, 6);
                  goto LABEL_80;
                }
                if ( !v15 )
                  goto LABEL_115;
                if ( v11 != 4 )
                {
                  v8 = myhash;
                  goto LABEL_43;
                }
              }
              if ( curl_strnequal("path", v8, 4) )
              {
                Curl_cfree(co->path);
                v34 = Curl_memdup(v13, valuepa + 1);
                co->path = (char *)v34;
                if ( !v34 )
                  goto LABEL_54;
                *(_BYTE *)(v34 + valuepa) = 0;
                if ( !co->path )
                  goto LABEL_54;
                Curl_cfree(co->spath);
                v35 = sanitize_cookie_path(co->path);
                co->spath = v35;
                if ( !v35 )
                  goto LABEL_54;
              }
              goto LABEL_80;
            }
LABEL_71:
            if ( !v15 )
              goto LABEL_54;
            Curl_cfree(0);
            v26 = Curl_memdup(v8, v11 + 1);
            co->name = (char *)v26;
            if ( v26 )
              *(_BYTE *)(v26 + v11) = 0;
            Curl_cfree(co->value);
            v27 = Curl_memdup(v13, valuepa + 1);
            co->value = (char *)v27;
            if ( v27 )
              *(_BYTE *)(v27 + valuepa) = 0;
            name = co->name;
            if ( !name )
              goto LABEL_54;
            value = co->value;
            if ( !value )
              goto LABEL_54;
            if ( value[strcspn(value, badoctets_0)] || name[strcspn(name, badoctets_0)] )
            {
              if ( (data->set.gap52B[3] & 0x10) != 0 )
                Curl_infof(data, "invalid octets in name/value, cookie dropped");
              goto LABEL_54;
            }
            goto LABEL_80;
          }
LABEL_36:
          if ( BYTE4(expires) == 95 && v8[1] == 95 )
          {
            ptra = v15;
            v25 = curl_strnequal("__Secure-", v8, 9);
            v15 = ptra;
            if ( v25 )
            {
              co->prefix |= 1u;
              if ( !co->name )
                goto LABEL_71;
            }
            else
            {
              v85 = curl_strnequal("__Host-", v8, 7);
              v15 = ptra;
              if ( v85 )
              {
                v86 = co->name;
                co->prefix |= 2u;
                if ( !v86 )
                  goto LABEL_71;
              }
              else if ( !co->name )
              {
                goto LABEL_71;
              }
            }
          }
          else if ( !co->name )
          {
            goto LABEL_71;
          }
          if ( valuepa )
            goto LABEL_41;
          if ( v11 == 8 )
          {
            if ( curl_strnequal("httponly", v8, 8) )
            {
              v8 = myhash;
              co->httponly = 1;
              BYTE4(expires) = *myhash;
              goto LABEL_44;
            }
            goto LABEL_80;
          }
          if ( v15 )
          {
LABEL_41:
            if ( v11 != 7 )
            {
LABEL_42:
              v8 = myhash;
              v16 = myhash;
LABEL_43:
              BYTE4(expires) = *v16;
              goto LABEL_44;
            }
            if ( !curl_strnequal("version", v8, 7) )
            {
              if ( curl_strnequal("max-age", v8, 7) )
              {
                v36 = curlx_strtoofft(&v13[*v13 == 34], 0, 10);
                if ( v36 != 1 )
                {
                  if ( v36 == 2 )
                  {
                    v8 = myhash;
                    LODWORD(co->expires) = 1;
                    HIDWORD(co->expires) = 0;
                    BYTE4(expires) = *myhash;
                    goto LABEL_44;
                  }
                  if ( v36 )
                    goto LABEL_80;
                  expires = co->expires;
                  if ( !expires )
                  {
                    LODWORD(co->expires) = 1;
                    HIDWORD(co->expires) = 0;
                    v8 = myhash;
                    HIDWORD(expires) = (unsigned __int8)*myhash;
                    goto LABEL_44;
                  }
                  LODWORD(valuepd) = now;
                  if ( 0x7FFFFFFFFFFFFFFFLL - now >= expires )
                  {
                    v8 = myhash;
                    HIDWORD(valuepd) = now >> 31;
                    co->expires = valuepd + expires;
                    BYTE4(expires) = *myhash;
                    goto LABEL_44;
                  }
                }
                v8 = myhash;
                LODWORD(co->expires) = -1;
                HIDWORD(co->expires) = 0x7FFFFFFF;
                BYTE4(expires) = *myhash;
                goto LABEL_44;
              }
              if ( curl_strnequal("expires", v8, 7) && !co->expires && valuepa <= 0x7F )
              {
                if ( valuepa >= 4 )
                {
                  *(_DWORD *)&date[valuepa - 4] = *(_DWORD *)&v13[valuepa - 4];
                  qmemcpy(date, v13, 4 * ((valuepa - 1) >> 2));
                }
                else if ( valuepa )
                {
                  date[0] = *v13;
                  if ( (valuepa & 2) != 0 )
                    *(_WORD *)&date[valuepa - 2] = *(_WORD *)&v13[valuepa - 2];
                }
                date[valuepa] = 0;
                v87 = Curl_getdate_capped(date);
                if ( (_DWORD)v87 )
                {
                  if ( (int)v87 >> 31 < 0 )
                  {
                    LODWORD(co->expires) = 0;
                    HIDWORD(co->expires) = 0;
                  }
                  else
                  {
                    co->expires = v87;
                  }
                }
                else
                {
                  LODWORD(co->expires) = 1;
                  HIDWORD(co->expires) = 0;
                }
              }
            }
          }
LABEL_80:
          v8 = myhash;
          BYTE4(expires) = *myhash;
LABEL_44:
          if ( BYTE4(expires) )
            goto LABEL_11;
          goto LABEL_45;
        }
LABEL_256:
        freecookie(co);
        if ( (data->set.gap52B[3] & 0x10) != 0 )
          Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes");
        return 0;
      }
LABEL_20:
      s = BYTE4(expires);
      v13 = ptr + 1;
      LODWORD(expires) = strcspn(ptr + 1, ";\r\n");
      BYTE4(expires) = s;
      myhash = (char *)&ptr[expires + 1];
      if ( (_DWORD)expires )
      {
        while ( 1 )
        {
          v14 = ptr[expires];
          if ( v14 != 32 && v14 != 9 )
            break;
          LODWORD(expires) = expires - 1;
          if ( !(_DWORD)expires )
            goto LABEL_102;
        }
        while ( *v13 == 32 || *v13 == 9 )
        {
          ++v13;
          LODWORD(expires) = expires - 1;
          if ( !(_DWORD)expires )
          {
            valuepa = 0;
            goto LABEL_31;
          }
        }
        valuepa = expires;
        if ( memchr(v13, 9, expires) )
        {
          freecookie(co);
          if ( (data->set.gap52B[3] & 0x10) != 0 )
            Curl_infof(data, "cookie contains TAB, dropping");
          return 0;
        }
        BYTE4(expires) = s;
LABEL_31:
        if ( v11 > 0xFFE || valuepa > 0xFFE || v11 + valuepa > 0x1000 )
          goto LABEL_256;
        v15 = httpheader;
      }
      else
      {
LABEL_102:
        if ( v11 > 0xFFE )
          goto LABEL_256;
        valuepa = 0;
        v15 = httpheader;
      }
      if ( v11 <= 6 )
        goto LABEL_84;
      goto LABEL_36;
    }
LABEL_258:
    Curl_cfree(co);
    return 0;
  }
  tok_buf = 0;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
  {
    v8 = (char *)(lineptr + 10);
    co->httponly = 1;
  }
  if ( *v8 == 35 )
    goto LABEL_258;
  v20 = strchr(v8, 13);
  if ( v20 )
    *v20 = 0;
  v21 = strchr(v8, 10);
  if ( v21 )
    *v21 = 0;
  v22 = strtok_r(v8, "\t", &tok_buf);
  if ( !v22 )
    goto LABEL_54;
  v23 = 0;
  if ( !secure )
  {
    v24 = v22;
    while ( 1 )
    {
      switch ( v23 )
      {
        case 0:
          v37 = Curl_cstrdup(&v24[*v24 == 46]);
          co->domain = (char *)v37;
          v38 = v37;
          reject = v37 != 0;
          v24 = strtok_r(0, "\t", &tok_buf);
          if ( !v24 || !reject )
            goto LABEL_321;
          goto _L227;
        case 1:
_L227:
          co->tailmatch = curl_strequal(v24, "TRUE") != 0;
          v24 = strtok_r(0, "\t", &tok_buf);
          if ( v24 )
            goto LABEL_134;
          goto LABEL_320;
        case 2:
LABEL_134:
          rejecta = v24;
          v39 = strcmp("TRUE", v24);
          v40 = rejecta;
          v41 = (int (__cdecl *)(char *))Curl_cstrdup;
          if ( v39 && (v42 = strcmp("FALSE", rejecta), v40 = rejecta, v42) )
          {
            v43 = (const char *)v41(rejecta);
            co->path = (char *)v43;
            if ( !v43 )
              goto LABEL_187;
            v44 = sanitize_cookie_path(v43);
            co->spath = v44;
            v45 = v44;
            reject = v44 != 0;
            s2a = v44 != 0;
            v24 = strtok_r(0, "\t", &tok_buf);
            if ( !v24 || !s2a )
            {
              v23 = 3;
              v50 = v45 == 0;
              goto LABEL_317;
            }
            v46 = secure;
          }
          else
          {
            s2b = v40;
            v62 = v41("/");
            co->path = (char *)v62;
            v63 = v62;
            v64 = Curl_cstrdup("/");
            v24 = s2b;
            co->spath = (char *)v64;
            if ( !v64 )
            {
              co->secure = 0;
              if ( !curl_strequal(s2b, "TRUE") )
                goto LABEL_187;
              v46 = 1;
              goto LABEL_149;
            }
            v46 = v63 == 0;
          }
LABEL_148:
          co->secure = 0;
          if ( !curl_strequal(v24, "TRUE") )
            goto LABEL_151;
LABEL_149:
          if ( !c->running )
            goto LABEL_187;
          co->secure = 1;
LABEL_151:
          reject = !v46;
          v24 = strtok_r(0, "\t", &tok_buf);
          if ( !v24 || !reject )
          {
            v50 = v46;
            v23 = 4;
            goto LABEL_317;
          }
_L224:
          v51 = curlx_strtoofft(v24, 0, 10);
          reject = v51 == 0;
          v24 = strtok_r(0, "\t", &tok_buf);
          if ( !v24 || v51 )
            goto LABEL_322;
_L223:
          v52 = Curl_cstrdup(v24);
          co->name = (char *)v52;
          if ( !v52 )
            goto LABEL_188;
          if ( curl_strnequal("__Secure-", v52, 9) )
          {
            co->prefix |= 1u;
          }
          else if ( curl_strnequal("__Host-", co->name, 7) )
          {
            co->prefix |= 2u;
          }
          v24 = strtok_r(0, "\t", &tok_buf);
          if ( !v24 )
            goto LABEL_159;
LABEL_141:
          v47 = Curl_cstrdup(v24);
          co->value = (char *)v47;
          v48 = v47;
          reject = v47 != 0;
          v49 = v47 != 0;
          if ( !strtok_r(0, "\t", &tok_buf) || !v49 )
            goto LABEL_325;
          if ( !strtok_r(0, "\t", &tok_buf) )
            goto LABEL_324;
          v23 = 8;
LABEL_145:
          ++v23;
          v24 = strtok_r(0, "\t", &tok_buf);
          if ( !v24 )
          {
            reject = 1;
            v50 = 0;
            goto LABEL_317;
          }
          break;
        case 3:
          v46 = secure;
          goto LABEL_148;
        case 4:
          goto _L224;
        case 5:
          goto _L223;
        case 6:
          goto LABEL_141;
        default:
          goto LABEL_145;
      }
    }
  }
  while ( 2 )
  {
    switch ( v23 )
    {
      case 0:
        v53 = Curl_cstrdup(&v22[*v22 == 46]);
        co->domain = (char *)v53;
        v38 = v53;
        reject = v53 != 0;
        v22 = strtok_r(0, "\t", &tok_buf);
        if ( v22 && reject )
          goto _L259;
LABEL_321:
        v95 = v38 == 0;
        v23 = 1;
        v50 = v95;
        goto LABEL_317;
      case 1:
_L259:
        co->tailmatch = curl_strequal(v22, "TRUE") != 0;
        v22 = strtok_r(0, "\t", &tok_buf);
        if ( v22 )
          goto LABEL_163;
LABEL_320:
        reject = 1;
        v50 = httpheader;
        v23 = 2;
        goto LABEL_317;
      case 2:
LABEL_163:
        v54 = strcmp("TRUE", v22);
        v55 = (char *)Curl_cstrdup;
        if ( v54 && (rejectb = (char *)Curl_cstrdup, v56 = strcmp("FALSE", v22), v55 = rejectb, v56) )
        {
          v84 = (const char *)((int (__cdecl *)(char *))rejectb)(v22);
          co->path = (char *)v84;
          if ( !v84 )
            goto LABEL_187;
          nowa = sanitize_cookie_path(v84);
          co->spath = nowa;
          reject = nowa != 0;
          v22 = strtok_r(0, "\t", &tok_buf);
          if ( !v22 || !nowa )
          {
            v23 = 3;
            v50 = nowa == 0;
            goto LABEL_317;
          }
          v120 = httpheader;
        }
        else
        {
          v57 = ((int (__cdecl *)(const char *))v55)("/");
          co->path = (char *)v57;
          v119 = (char *)v57;
          v58 = Curl_cstrdup("/");
          co->spath = (char *)v58;
          if ( !v58 )
          {
            co->secure = 0;
            if ( curl_strequal(v22, "TRUE") )
              co->secure = 1;
LABEL_187:
            strtok_r(0, "\t", &tok_buf);
            goto LABEL_54;
          }
          v120 = v119 == 0;
        }
LABEL_167:
        co->secure = 0;
        if ( curl_strequal(v22, "TRUE") )
          co->secure = 1;
        reject = !v120;
        v22 = strtok_r(0, "\t", &tok_buf);
        if ( v22 && reject )
        {
_L256:
          v51 = curlx_strtoofft(v22, 0, 10);
          reject = v51 == 0;
          v22 = strtok_r(0, "\t", &tok_buf);
          if ( !v22 || v51 )
          {
LABEL_322:
            v95 = v51 == 0;
            v23 = 5;
            v50 = !v95;
            goto LABEL_317;
          }
_L255:
          v59 = Curl_cstrdup(v22);
          co->name = (char *)v59;
          if ( !v59 )
          {
LABEL_188:
            v50 = 1;
            strtok_r(0, "\t", &tok_buf);
LABEL_189:
            v65 = Curl_cstrdup(&LC24);
            co->value = (char *)v65;
            if ( !v65 )
              goto LABEL_54;
            goto LABEL_190;
          }
          if ( curl_strnequal("__Secure-", v59, 9) )
          {
            co->prefix |= 1u;
          }
          else if ( curl_strnequal("__Host-", co->name, 7) )
          {
            co->prefix |= 2u;
          }
          v22 = strtok_r(0, "\t", &tok_buf);
          if ( !v22 )
          {
LABEL_159:
            v50 = httpheader;
            goto LABEL_189;
          }
LABEL_177:
          v60 = Curl_cstrdup(v22);
          co->value = (char *)v60;
          v48 = v60;
          reject = v60 != 0;
          v61 = v60 != 0;
          if ( !strtok_r(0, "\t", &tok_buf) || !v61 )
          {
LABEL_325:
            v95 = v48 == 0;
            v23 = 7;
            v50 = v95;
            goto LABEL_317;
          }
          if ( !strtok_r(0, "\t", &tok_buf) )
          {
LABEL_324:
            reject = 1;
            v50 = httpheader;
            v23 = 8;
            goto LABEL_317;
          }
          v23 = 8;
LABEL_181:
          ++v23;
          v22 = strtok_r(0, "\t", &tok_buf);
          if ( !v22 )
          {
            v50 = httpheader;
            reject = secure;
            goto LABEL_317;
          }
          continue;
        }
        v50 = v120;
        v23 = 4;
LABEL_317:
        if ( v23 != 7 && reject )
          goto LABEL_54;
LABEL_190:
        if ( v50 )
          goto LABEL_54;
        v17 = co;
        prefix = co->prefix;
        if ( (prefix & 1) == 0 )
          goto LABEL_52;
LABEL_192:
        if ( !v17->secure )
          goto LABEL_305;
        if ( (prefix & 2) != 0 )
        {
LABEL_194:
          v66 = co->path;
          if ( !v66 || *v66 != 47 || v66[1] || co->tailmatch )
            goto LABEL_54;
        }
LABEL_198:
        running = c->running;
        if ( !running && c->newsession )
        {
          v17 = co;
          if ( !co->expires )
          {
LABEL_305:
            freecookie(v17);
            return 0;
          }
        }
        co->livecookie = running;
        v68 = c->lastct + 1;
        c->lastct = v68;
        co->creationtime = v68;
        if ( !noexpire )
          remove_expired(c);
        myhasha = cookiehash(co->domain);
        v69 = c->cookies[myhasha];
        if ( !v69 )
        {
          if ( c->running && (data->set.gap52B[3] & 0x10) != 0 )
          {
            ptrb = 0;
            valuepb = (char *)co;
LABEL_228:
            Curl_infof(data, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld");
            if ( ptrb )
              goto LABEL_229;
            if ( v69 )
              goto LABEL_244;
          }
          else
          {
            valuepb = (char *)co;
          }
          c->cookies[myhasha] = (Cookie *)valuepb;
          goto LABEL_245;
        }
        ptrb = 0;
        v70 = 0;
        valuepb = 0;
        while ( 2 )
        {
          if ( curl_strequal(v69->name, co->name) )
          {
            v72 = v69->domain;
            v73 = co->domain;
            if ( v72 )
            {
              if ( v73 && curl_strequal(v72, co->domain) )
              {
LABEL_211:
                spath = v69->spath;
                if ( spath )
                {
                  rejectc = co->spath;
                  if ( rejectc )
                  {
                    if ( v69->secure && !co->secure && !secure )
                    {
                      sa = v69->spath;
                      v80 = strchr(spath + 1, 47);
                      v81 = sa;
                      v82 = rejectc;
                      if ( v80 )
                      {
                        v83 = v80 - sa;
                      }
                      else
                      {
                        sb = rejectc;
                        rejectd = (char *)v81;
                        v83 = strlen(v81);
                        v82 = sb;
                        v81 = rejectd;
                      }
                      if ( curl_strnequal(v81, v82, v83) )
                      {
                        if ( (data->set.gap52B[3] & 0x10) != 0 )
                          Curl_infof(data, "cookie '%s' for domain '%s' dropped, would overlay an existing cookie");
                        goto LABEL_54;
                      }
                    }
                  }
                }
              }
            }
            else if ( !v73 )
            {
              goto LABEL_211;
            }
          }
          if ( v70 || !curl_strequal(v69->name, co->name) )
            goto LABEL_205;
          v75 = v69->domain;
          v76 = co->domain;
          if ( v75 )
          {
            if ( !v76 || !curl_strequal(v75, co->domain) || v69->tailmatch != co->tailmatch )
            {
LABEL_222:
              if ( !ptrb )
                goto LABEL_223;
            }
          }
          else if ( v76 )
          {
            goto LABEL_222;
          }
          v79 = v69->spath;
          if ( !v79 )
          {
LABEL_239:
            if ( (v79 == 0) != (co->spath == 0) )
              goto LABEL_223;
            ptrb = co->livecookie;
            if ( ptrb )
            {
              valuepb = (char *)v69;
              v70 = co;
            }
            else
            {
              if ( v69->livecookie )
                goto LABEL_54;
              valuepb = (char *)v69;
              v70 = co;
              ptrb = 1;
            }
LABEL_205:
            next = v69->next;
            if ( !v69->next )
              break;
            goto LABEL_206;
          }
          if ( co->spath && curl_strequal(v79, co->spath) )
          {
            v79 = v69->spath;
            goto LABEL_239;
          }
LABEL_223:
          next = v69->next;
          ptrb = 0;
          if ( v69->next )
          {
LABEL_206:
            v69 = next;
            continue;
          }
          break;
        }
        if ( v70 )
        {
          v70->next = *(Cookie **)valuepb;
          v70->creationtime = *((_DWORD *)valuepb + 9);
          Curl_cfree(*((_DWORD *)valuepb + 1));
          Curl_cfree(*((_DWORD *)valuepb + 2));
          Curl_cfree(*((_DWORD *)valuepb + 5));
          Curl_cfree(*((_DWORD *)valuepb + 3));
          Curl_cfree(*((_DWORD *)valuepb + 4));
          *(_DWORD *)valuepb = v70->next;
          *((_DWORD *)valuepb + 1) = v70->name;
          *((_DWORD *)valuepb + 2) = v70->value;
          *((_DWORD *)valuepb + 3) = v70->path;
          *((_DWORD *)valuepb + 4) = v70->spath;
          *((_DWORD *)valuepb + 5) = v70->domain;
          *((_DWORD *)valuepb + 6) = v70->expires;
          *((_DWORD *)valuepb + 7) = HIDWORD(v70->expires);
          *((_DWORD *)valuepb + 8) = *(_DWORD *)&v70->tailmatch;
          *((_DWORD *)valuepb + 9) = v70->creationtime;
          *((_DWORD *)valuepb + 10) = *(_DWORD *)&v70->prefix;
          Curl_cfree(v70);
        }
        else
        {
          valuepb = (char *)co;
        }
        if ( c->running && (data->set.gap52B[3] & 0x10) != 0 )
          goto LABEL_228;
        if ( ptrb )
          goto LABEL_229;
LABEL_244:
        v69->next = (Cookie *)valuepb;
LABEL_245:
        ++c->numcookies;
LABEL_229:
        v77 = *((_DWORD *)valuepb + 6);
        v78 = *((_DWORD *)valuepb + 7);
        if ( *((_QWORD *)valuepb + 3) && __SPAIR64__(v78, v77) < c->next_expiration )
        {
          LODWORD(c->next_expiration) = v77;
          HIDWORD(c->next_expiration) = v78;
        }
        return (Cookie *)valuepb;
      case 3:
        v120 = httpheader;
        goto LABEL_167;
      case 4:
        goto _L256;
      case 5:
        goto _L255;
      case 6:
        goto LABEL_177;
      default:
        goto LABEL_181;
    }
  }
}
