Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  Cookie *v10; // r12
  bool v11; // r12
  size_t v12; // rbx
  size_t v13; // r15
  char v14; // al
  _BYTE *v15; // r13
  bool v16; // bl
  _BYTE *v17; // rax
  char v18; // al
  const char *name; // rbx
  const char *value; // r12
  char v21; // al
  const char *v22; // r12
  char *v23; // rax
  int v24; // eax
  curl_off_t v25; // rdx
  __int64 v26; // rax
  char *v27; // rdi
  _DWORD *v28; // rsi
  __int64 v29; // rax
  __int64 v30; // rax
  bool v31; // zf
  __int64 v32; // rdx
  __int64 v33; // rax
  __int64 v34; // rcx
  const char *v35; // rbp
  char v36; // al
  __int64 v37; // rax
  char *v38; // rax
  char *v39; // rbx
  signed __int64 v40; // rbx
  char *v41; // rdi
  char *v42; // rax
  char *v43; // rax
  char *v44; // rax
  char *v45; // rbx
  int v46; // ebp
  __int64 v47; // rax
  bool v48; // r13
  const char *v49; // rdi
  char *v50; // rax
  __int64 v51; // rbp
  __int64 v52; // rax
  __int64 v53; // rax
  __int64 v54; // rax
  Cookie *v55; // rbx
  char *v56; // rdi
  char *v57; // rsi
  const char *spath; // r13
  char *v59; // r15
  char *v60; // rax
  size_t v61; // rdx
  char *v62; // rdi
  char *v63; // rsi
  char *v64; // rdi
  char *v65; // rsi
  char livecookie; // r14
  __m128i *v67; // rbp
  size_t v68; // r15
  curl_off_t expires; // rax
  const char *v70; // rdx
  char is_ipnum; // bl
  __int64 v73; // rax
  unsigned __int8 prefix; // al
  const char *v75; // rdi
  bool running; // al
  unsigned __int64 v77; // rdx
  __m128i *ptr; // [rsp+8h] [rbp-120h]
  int ptrb; // [rsp+8h] [rbp-120h]
  const char *ptra; // [rsp+8h] [rbp-120h]
  char myhash; // [rsp+10h] [rbp-118h]
  size_t myhasha; // [rsp+10h] [rbp-118h]
  Cookie *co; // [rsp+18h] [rbp-110h]
  time_t now; // [rsp+40h] [rbp-E8h]
  bool badcookie; // [rsp+4Fh] [rbp-D9h]
  char *tok_buf; // [rsp+58h] [rbp-D0h] BYREF
  char date[128]; // [rsp+60h] [rbp-C8h] BYREF
  unsigned __int64 v93; // [rsp+E8h] [rbp-40h]

  v93 = __readfsqword(0x28u);
  now = time(0LL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  co = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !co )
    return 0LL;
  if ( !httpheader )
  {
    tok_buf = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 10;
      co->httponly = 1;
    }
    if ( *lineptr == 35 )
    {
      Curl_cfree(co);
      return 0LL;
    }
    v43 = strchr(lineptr, 13);
    if ( v43 )
      *v43 = 0;
    v44 = strchr(lineptr, 10);
    if ( v44 )
      *v44 = 0;
    v45 = strtok_r((char *)lineptr, "\t", &tok_buf);
    if ( !v45 )
      goto LABEL_178;
    v46 = 0;
    while ( 2 )
    {
      switch ( v46 )
      {
        case 0:
          v47 = Curl_cstrdup(&v45[*v45 == 46]);
          co->domain = (char *)v47;
          if ( !v47 )
            goto LABEL_254;
          v48 = httpheader;
          goto LABEL_150;
        case 1:
          co->tailmatch = (unsigned int)curl_strequal(v45, "TRUE") != 0;
          v48 = httpheader;
          goto LABEL_150;
        case 2:
          if ( !strcmp("TRUE", v45) || !strcmp("FALSE", v45) )
          {
            v51 = Curl_cstrdup("/");
            co->path = (char *)v51;
            v52 = Curl_cstrdup("/");
            co->spath = (char *)v52;
            v48 = 1;
            if ( v52 )
              v48 = v51 == 0;
LABEL_161:
            co->secure = 0;
            if ( (unsigned int)curl_strequal(v45, "TRUE") )
            {
              if ( !secure && !c->running )
              {
                v46 = 3;
LABEL_254:
                strtok_r(0LL, "\t", &tok_buf);
                v48 = 1;
                if ( v46 == 5 )
                {
LABEL_255:
                  v73 = Curl_cstrdup(&LC1);
                  co->value = (char *)v73;
                  if ( v73 )
                  {
                    v46 = 7;
                    goto LABEL_257;
                  }
                }
LABEL_178:
                freecookie(co);
                return 0LL;
              }
              co->secure = 1;
              v46 = 3;
            }
            else
            {
              v46 = 3;
            }
          }
          else
          {
            v49 = (const char *)Curl_cstrdup(v45);
            co->path = (char *)v49;
            if ( !v49 )
              goto LABEL_254;
            v50 = sanitize_cookie_path(v49);
            co->spath = v50;
            if ( !v50 )
              goto LABEL_254;
            v48 = httpheader;
          }
LABEL_150:
          v45 = strtok_r(0LL, "\t", &tok_buf);
          ++v46;
          if ( v45 && !v48 )
            continue;
          if ( v46 == 6 )
            goto LABEL_255;
LABEL_257:
          if ( v46 != 7 || v48 )
            goto LABEL_178;
          break;
        case 3:
          v48 = httpheader;
          goto LABEL_161;
        case 4:
          if ( (unsigned int)curlx_strtoofft(v45, 0LL, 10LL, &co->expires) )
            goto LABEL_254;
          v48 = httpheader;
          goto LABEL_150;
        case 5:
          v53 = Curl_cstrdup(v45);
          co->name = (char *)v53;
          if ( !v53 )
            goto LABEL_254;
          if ( (unsigned int)curl_strnequal("__Secure-", v53, 9LL) )
          {
            co->prefix |= 1u;
            v48 = httpheader;
          }
          else
          {
            v48 = httpheader;
            if ( (unsigned int)curl_strnequal("__Host-", co->name, 7LL) )
              co->prefix |= 2u;
          }
          goto LABEL_150;
        case 6:
          v54 = Curl_cstrdup(v45);
          co->value = (char *)v54;
          if ( !v54 )
            goto LABEL_254;
          v48 = httpheader;
          goto LABEL_150;
        default:
          v48 = httpheader;
          goto LABEL_150;
      }
      break;
    }
LABEL_259:
    prefix = co->prefix;
    if ( (prefix & 1) != 0 )
    {
      if ( !co->secure )
        goto LABEL_203;
      if ( (prefix & 2) != 0 )
        goto LABEL_262;
    }
    else if ( (prefix & 2) != 0 )
    {
      if ( !co->secure )
        goto LABEL_203;
LABEL_262:
      v75 = co->path;
      if ( !v75 || strcmp(v75, "/") || co->tailmatch )
        goto LABEL_203;
    }
    running = c->running;
    if ( running || !c->newsession || co->expires )
    {
      co->livecookie = running;
      ptrb = c->lastct;
      c->lastct = ptrb + 1;
      co->creationtime = ptrb + 1;
      if ( !noexpire )
        remove_expired(c);
      v68 = cookiehash(co->domain);
      v55 = c->cookies[v68];
      if ( v55 )
      {
        livecookie = 0;
        v67 = 0LL;
        myhasha = v68;
        ptr = 0LL;
        while ( 1 )
        {
          if ( !(unsigned int)curl_strequal(v55->name, co->name) )
            goto LABEL_186;
          v56 = v55->domain;
          if ( v56 )
          {
            v57 = co->domain;
            if ( !v57 || !(unsigned int)curl_strequal(v56, v57) )
              goto LABEL_186;
          }
          else if ( co->domain )
          {
            goto LABEL_186;
          }
          spath = v55->spath;
          if ( spath )
          {
            v59 = co->spath;
            if ( v59 )
            {
              if ( v55->secure && !co->secure && !secure )
              {
                v60 = strchr(spath + 1, 47);
                v61 = v60 ? v60 - spath : strlen(spath);
                if ( (unsigned int)curl_strnequal(spath, v59, v61) )
                {
                  if ( (data->set.gap8BB[3] & 0x10) != 0 )
                    Curl_infof(
                      data,
                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                      co->name,
                      co->domain);
                  goto LABEL_203;
                }
              }
            }
          }
LABEL_186:
          if ( v67 || !(unsigned int)curl_strequal(v55->name, co->name) )
            goto LABEL_187;
          v62 = v55->domain;
          if ( v62 )
          {
            v63 = co->domain;
            if ( !v63 || !(unsigned int)curl_strequal(v62, v63) || v55->tailmatch != co->tailmatch )
            {
LABEL_212:
              if ( !livecookie )
                goto LABEL_187;
            }
          }
          else if ( co->domain )
          {
            goto LABEL_212;
          }
          v64 = v55->spath;
          if ( !v64 )
            goto LABEL_216;
          v65 = co->spath;
          if ( !v65 )
          {
            v67 = 0LL;
            livecookie = 0;
            goto LABEL_187;
          }
          if ( !(unsigned int)curl_strequal(v64, v65) )
          {
            livecookie = 0;
          }
          else
          {
LABEL_216:
            if ( (v55->spath == 0LL) == (co->spath == 0LL) )
            {
              livecookie = co->livecookie;
              if ( livecookie )
              {
                ptr = (__m128i *)v55;
                v67 = (__m128i *)co;
              }
              else
              {
                if ( v55->livecookie )
                  goto LABEL_203;
                ptr = (__m128i *)v55;
                v67 = (__m128i *)co;
                livecookie = 1;
              }
            }
            else
            {
              livecookie = 0;
            }
          }
LABEL_187:
          if ( !v55->next )
          {
            v68 = myhasha;
            v10 = (Cookie *)ptr;
            if ( v67 )
            {
              v67->m128i_i64[0] = ptr->m128i_i64[0];
              v67[3].m128i_i32[3] = ptr[3].m128i_i32[3];
              Curl_cfree(ptr->m128i_i64[1]);
              Curl_cfree(ptr[1].m128i_i64[0]);
              Curl_cfree(ptr[2].m128i_i64[1]);
              Curl_cfree(ptr[1].m128i_i64[1]);
              Curl_cfree(ptr[2].m128i_i64[0]);
              *ptr = _mm_loadu_si128(v67);
              ptr[1] = _mm_loadu_si128(v67 + 1);
              ptr[2] = _mm_loadu_si128(v67 + 2);
              ptr[3] = _mm_loadu_si128(v67 + 3);
              ptr[4].m128i_i64[0] = v67[4].m128i_i64[0];
              Curl_cfree(v67);
            }
            else
            {
              v10 = co;
            }
            if ( !c->running )
              goto LABEL_228;
            goto LABEL_234;
          }
          v55 = v55->next;
        }
      }
      if ( c->running )
      {
        v10 = co;
        livecookie = 0;
LABEL_234:
        if ( (data->set.gap8BB[3] & 0x10) != 0 )
        {
          v70 = "Added";
          if ( livecookie )
            v70 = "Replaced";
          Curl_infof(
            data,
            "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
            v70,
            v10->name,
            v10->value,
            v10->domain,
            v10->path,
            v10->expires);
        }
LABEL_228:
        if ( livecookie )
          goto LABEL_229;
        if ( v55 )
        {
          v55->next = v10;
LABEL_240:
          ++c->numcookies;
LABEL_229:
          expires = v10->expires;
          if ( expires && expires < c->next_expiration )
            c->next_expiration = expires;
          return v10;
        }
      }
      else
      {
        v10 = co;
      }
      c->cookies[v68] = v10;
      goto LABEL_240;
    }
LABEL_203:
    freecookie(co);
    return 0LL;
  }
  badcookie = 0;
  if ( strlen(lineptr) > 0x1388 )
  {
    Curl_cfree(co);
    return 0LL;
  }
  while ( 2 )
  {
    while ( 1 )
    {
      v36 = *lineptr;
      myhash = *lineptr;
      if ( !*lineptr )
        break;
      if ( v36 != 32 && v36 != 9 )
      {
        v12 = strcspn(lineptr, ";\t\r\n=");
        if ( !v12 )
        {
          v21 = *lineptr;
          v35 = lineptr;
          goto LABEL_110;
        }
        goto LABEL_279;
      }
      ++lineptr;
    }
    v12 = strcspn(lineptr, ";\t\r\n=");
    if ( !v12 )
    {
      v22 = path;
      goto LABEL_120;
    }
LABEL_279:
    ptra = &lineptr[v12];
    do
    {
      v77 = v12--;
      if ( lineptr[v12] != 9 && lineptr[v12] != 32 )
      {
        v11 = 0;
        if ( *ptra == 61 )
        {
          v12 = v77;
          goto LABEL_283;
        }
        if ( v77 > 0xFFE )
        {
          v12 = v77;
          v13 = 0LL;
          goto LABEL_46;
        }
        v12 = v77;
        v35 = ptra;
        v15 = 0LL;
        v13 = 0LL;
        goto LABEL_21;
      }
    }
    while ( v12 );
    if ( *ptra != 61 )
    {
      v13 = 0LL;
      v35 = ptra;
      v15 = 0LL;
      v11 = 0;
      goto LABEL_21;
    }
LABEL_283:
    v15 = ptra + 1;
    v13 = strcspn(ptra + 1, ";\r\n");
    v35 = &ptra[v13 + 1];
    if ( v13 )
    {
      while ( 1 )
      {
        v14 = ptra[v13];
        if ( v14 != 32 && v14 != 9 )
          break;
        if ( !--v13 )
          goto LABEL_284;
      }
      while ( *v15 == 32 || *v15 == 9 )
      {
        ++v15;
        if ( !--v13 )
          goto LABEL_17;
      }
      if ( memchr(v15, 9, v13) )
      {
        freecookie(co);
        v10 = 0LL;
        if ( (data->set.gap8BB[3] & 0x10) != 0 )
          Curl_infof(data, "cookie contains TAB, dropping");
        return v10;
      }
LABEL_17:
      if ( v12 > 0xFFE || v13 > 0xFFE || v12 + v13 > 0x1000 )
        goto LABEL_46;
      v11 = httpheader;
LABEL_21:
      if ( v12 > 6 && myhash == 95 && lineptr[1] == 95 )
      {
        if ( (unsigned int)curl_strnequal("__Secure-", lineptr, 9LL) )
        {
          co->prefix |= 1u;
        }
        else if ( (unsigned int)curl_strnequal("__Host-", lineptr, 7LL) )
        {
          co->prefix |= 2u;
        }
      }
      if ( !co->name )
      {
        if ( !v11 )
          goto LABEL_61;
        strstore(&co->name, lineptr, v12);
        strstore(&co->value, v15, v13);
        name = co->name;
        if ( !name )
          goto LABEL_61;
        value = co->value;
        if ( !value )
          goto LABEL_61;
        if ( value[strcspn(value, &badoctets_0)] || name[strcspn(name, &badoctets_0)] )
        {
          if ( (data->set.gap8BB[3] & 0x10) != 0 )
            Curl_infof(data, "invalid octets in name/value, cookie dropped");
LABEL_61:
          freecookie(co);
          return 0LL;
        }
        goto LABEL_69;
      }
      if ( !v13 )
      {
        if ( v12 == 6 )
        {
          if ( (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
          {
            if ( !secure && c->running )
              goto LABEL_61;
            co->secure = 1;
            goto LABEL_69;
          }
          if ( !v11 )
            goto LABEL_69;
LABEL_29:
          if ( v12 == 6 )
          {
            v16 = (v13 != 0) & ((unsigned int)curl_strnequal("domain", lineptr, 6LL) != 0);
            if ( v16 )
            {
              if ( *v15 == 46 )
              {
                ++v15;
                --v13;
              }
              if ( v13 == 9 && (unsigned int)curl_strnequal(v15, "localhost", 9LL)
                || (v17 = memchr(v15, 46, v13)) != 0LL && v13 - (v17 - v15) > 1 )
              {
                if ( !domain )
                {
                  is_ipnum = Curl_host_is_ipnum(v15);
                  strstore(&co->domain, v15, v13);
                  if ( !co->domain )
                    goto LABEL_61;
                  if ( is_ipnum )
                    goto LABEL_69;
LABEL_80:
                  co->tailmatch = 1;
                  goto LABEL_69;
                }
                v18 = Curl_host_is_ipnum(domain);
              }
              else
              {
                domain = ":";
                v18 = Curl_host_is_ipnum(":");
              }
              if ( v18 )
              {
                if ( !strncmp(v15, domain, v13) && strlen(domain) == v13 )
                {
                  strstore(&co->domain, v15, v13);
                  if ( !co->domain )
                    goto LABEL_61;
                  goto LABEL_69;
                }
                goto LABEL_41;
              }
              if ( !cookie_tailmatch(v15, v13, domain) )
              {
LABEL_41:
                badcookie = v16;
                if ( (data->set.gap8BB[3] & 0x10) != 0 )
                {
                  Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v15);
                  badcookie = v16;
                }
                goto LABEL_69;
              }
              strstore(&co->domain, v15, v13);
              if ( !co->domain )
                goto LABEL_61;
              goto LABEL_80;
            }
            goto LABEL_69;
          }
          goto LABEL_68;
        }
        if ( v12 == 8 )
        {
          if ( (unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
          {
            co->httponly = 1;
            goto LABEL_69;
          }
          if ( !v11 )
          {
LABEL_69:
            v21 = *v35;
            if ( !*v35 )
            {
              v22 = path;
LABEL_120:
              if ( badcookie )
                goto LABEL_61;
              if ( !co->domain )
              {
                if ( domain )
                {
                  v37 = Curl_cstrdup(domain);
                  co->domain = (char *)v37;
                  if ( !v37 )
                    goto LABEL_61;
                }
              }
              if ( !co->path && v22 )
              {
                v38 = strchr(v22, 63);
                v39 = v38 ? (char *)Curl_memrchr(v22, 47LL, v38 - v22) : strrchr(v22, 47);
                if ( v39 )
                {
                  v40 = v39 - v22;
                  v41 = (char *)Curl_cmalloc(v40 + 2);
                  co->path = v41;
                  if ( !v41 )
                    goto LABEL_61;
                  memcpy(v41, v22, v40 + 1);
                  co->path[v40 + 1] = 0;
                  v42 = sanitize_cookie_path(co->path);
                  co->spath = v42;
                  if ( !v42 )
                    goto LABEL_61;
                }
              }
              if ( !co->name )
                goto LABEL_61;
              ++data->req.setcookies;
              goto LABEL_259;
            }
LABEL_110:
            while ( v21 == 32 || v21 == 9 )
            {
              v21 = *++v35;
              if ( !*v35 )
              {
                v22 = path;
                goto LABEL_120;
              }
            }
            if ( v21 != 59 )
            {
              v22 = path;
              goto LABEL_120;
            }
            lineptr = v35 + 1;
            continue;
          }
LABEL_68:
          if ( v12 == 7 && !(unsigned int)curl_strnequal("version", lineptr, 7LL) )
          {
            if ( (unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
            {
              v24 = curlx_strtoofft(&v15[*v15 == 34], 0LL, 10LL, &co->expires);
              switch ( v24 )
              {
                case 1:
                  co->expires = 0x7FFFFFFFFFFFFFFFLL;
                  break;
                case 2:
                  co->expires = 1LL;
                  break;
                case 0:
                  v25 = co->expires;
                  if ( v25 )
                  {
                    v26 = 0x7FFFFFFFFFFFFFFFLL;
                    if ( v25 <= 0x7FFFFFFFFFFFFFFFLL - now )
                      v26 = v25 + now;
                    co->expires = v26;
                  }
                  else
                  {
                    co->expires = 1LL;
                  }
                  break;
              }
            }
            else if ( (unsigned int)curl_strnequal("expires", lineptr, 7LL) && !co->expires && v13 <= 0x7F )
            {
              v27 = date;
              v28 = v15;
              if ( (unsigned int)v13 >= 8 )
              {
                v34 = (unsigned int)v13 >> 3;
                qmemcpy(date, v15, 8 * v34);
                v28 = &v15[8 * v34];
                v27 = &date[8 * v34];
              }
              v29 = 0LL;
              if ( (v13 & 4) != 0 )
              {
                *(_DWORD *)v27 = *v28;
                v29 = 4LL;
              }
              if ( (v13 & 2) != 0 )
              {
                *(_WORD *)&v27[v29] = *(_WORD *)((char *)v28 + v29);
                v29 += 2LL;
              }
              if ( (v13 & 1) != 0 )
                v27[v29] = *((_BYTE *)v28 + v29);
              date[v13] = 0;
              v30 = Curl_getdate_capped(date, v28);
              v31 = v30 == 0;
              v32 = 0LL;
              if ( v30 >= 0 )
                v32 = v30;
              v33 = 1LL;
              if ( !v31 )
                v33 = v32;
              co->expires = v33;
            }
          }
          goto LABEL_69;
        }
        if ( !v11 )
          goto LABEL_69;
      }
      if ( v12 == 4 )
      {
        if ( (unsigned int)curl_strnequal("path", lineptr, 4LL) )
        {
          strstore(&co->path, v15, v13);
          if ( !co->path )
            goto LABEL_61;
          Curl_cfree(co->spath);
          v23 = sanitize_cookie_path(co->path);
          co->spath = v23;
          if ( !v23 )
            goto LABEL_61;
        }
        goto LABEL_69;
      }
      goto LABEL_29;
    }
    break;
  }
LABEL_284:
  if ( v12 <= 0xFFE )
  {
    v11 = httpheader;
    v13 = 0LL;
    goto LABEL_21;
  }
  v13 = 0LL;
LABEL_46:
  freecookie(co);
  v10 = 0LL;
  if ( (data->set.gap8BB[3] & 0x10) != 0 )
    Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v12, v13);
  return v10;
}
