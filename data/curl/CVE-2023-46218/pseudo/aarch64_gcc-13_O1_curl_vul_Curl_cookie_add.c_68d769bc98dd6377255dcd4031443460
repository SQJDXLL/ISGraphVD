Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  Cookie *v11; // x25
  Cookie *v12; // x21
  size_t v13; // x19
  int v14; // w0
  const char *v16; // x23
  size_t v17; // x20
  bool v18; // cc
  _BOOL4 v19; // w24
  bool v20; // cc
  _BOOL4 v21; // w19
  _BYTE *v22; // x0
  char v23; // w0
  const char *name; // x19
  char *value; // x20
  int v26; // w0
  const char *v28; // x21
  int v29; // t1
  bool v30; // zf
  char *v32; // x0
  const char *v33; // x0
  int v34; // w0
  curl_off_t v35; // x1
  __int64 v36; // x0
  __int64 v38; // x0
  int v39; // w26
  __int64 v41; // x0
  char *v42; // x0
  char *v43; // x0
  signed __int64 v44; // x0
  size_t v45; // x19
  char *v46; // x0
  char *v47; // x0
  char *v48; // x0
  char *v49; // x0
  char *v50; // x20
  int v51; // w19
  _BOOL4 v52; // w21
  char *v53; // x0
  __int64 v54; // x0
  const char *v55; // x0
  char *v56; // x0
  __int64 v57; // x26
  __int64 v58; // x0
  __int64 v59; // x1
  __int64 v60; // x0
  Cookie *v61; // x19
  char *v62; // x0
  char *v63; // x1
  const char *spath; // x22
  char *v65; // x24
  char *v66; // x0
  size_t v67; // x2
  char *v68; // x0
  char *v69; // x1
  char *v70; // x0
  char *v71; // x1
  char livecookie; // w23
  Cookie *v73; // x20
  __int128 v74; // q1
  __int128 v75; // q1
  curl_off_t expires; // x0
  const char *v77; // x2
  char is_ipnum; // w19
  __int64 v80; // x0
  const char *v82; // x0
  int v83; // w0
  size_t v84; // x26
  const char *v85; // x27
  unsigned __int64 v86; // x2
  int v87; // w0
  _BOOL4 httpheadera; // [xsp+64h] [xbp+64h]
  _BOOL4 securea; // [xsp+80h] [xbp+80h]
  time_t now; // [xsp+98h] [xbp+98h]
  bool badcookie; // [xsp+A8h] [xbp+A8h]
  char *tok_buf; // [xsp+B0h] [xbp+B0h] BYREF
  char date[128]; // [xsp+B8h] [xbp+B8h] BYREF

  httpheadera = httpheader;
  securea = secure;
  now = time(0uLL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  v11 = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !v11 )
    return 0LL;
  if ( !httpheader )
  {
    tok_buf = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 0xA;
      v11->httponly = 1;
    }
    if ( *lineptr == 35 )
    {
      Curl_cfree(v11);
      return 0LL;
    }
    v48 = strchr(lineptr, 13);
    if ( v48 )
      *v48 = 0;
    v49 = strchr(lineptr, 10);
    if ( v49 )
      *v49 = 0;
    v50 = strtok_r((char *)lineptr, "\t", &tok_buf);
    if ( !v50 )
      goto LABEL_197;
    v51 = 0;
    while ( v51 != 3 )
    {
      if ( v51 > 3 )
      {
        if ( v51 == 5 )
        {
          v59 = Curl_cstrdup(v50);
          v11->name = (char *)v59;
          if ( !v59 )
            goto LABEL_272;
          if ( (unsigned int)curl_strnequal("__Secure-", v59, 9LL) )
          {
            v11->prefix |= 1u;
            v52 = httpheadera;
          }
          else
          {
            v52 = httpheadera;
            if ( (unsigned int)curl_strnequal("__Host-", v11->name, 7LL) )
              v11->prefix |= 2u;
          }
        }
        else if ( v51 == 6 )
        {
          v60 = Curl_cstrdup(v50);
          v11->value = (char *)v60;
          if ( !v60 )
            goto LABEL_272;
          v52 = httpheadera;
        }
        else
        {
          v52 = httpheadera;
          if ( v51 == 4 )
          {
            if ( (unsigned int)curlx_strtoofft(v50, 0LL, 10LL, &v11->expires) )
              goto LABEL_272;
            v52 = httpheadera;
          }
        }
      }
      else if ( v51 == 1 )
      {
        v11->tailmatch = (unsigned int)curl_strequal(v50, "TRUE") != 0;
        v52 = httpheadera;
      }
      else if ( v51 == 2 )
      {
        if ( !strcmp("TRUE", v50) || !strcmp("FALSE", v50) )
        {
          v57 = Curl_cstrdup("/");
          v11->path = (char *)v57;
          v58 = Curl_cstrdup("/");
          v11->spath = (char *)v58;
          v52 = 1;
          if ( v58 )
            v52 = v57 == 0;
LABEL_183:
          v11->secure = 0;
          if ( (unsigned int)curl_strequal(v50, "TRUE") )
          {
            if ( !securea && !c->running )
            {
              v51 = 3;
LABEL_272:
              strtok_r(0uLL, "\t", &tok_buf);
              v52 = 1;
              if ( v51 == 5 )
              {
LABEL_273:
                v80 = Curl_cstrdup(&unk_2498);
                v11->value = (char *)v80;
                if ( v80 )
                {
                  v51 = 7;
                  goto LABEL_275;
                }
              }
LABEL_197:
              freecookie(v11);
              return 0LL;
            }
            v11->secure = 1;
            v51 = 3;
          }
          else
          {
            v51 = 3;
          }
          goto LABEL_164;
        }
        v55 = (const char *)Curl_cstrdup(v50);
        v11->path = (char *)v55;
        if ( !v55 )
          goto LABEL_272;
        v56 = sanitize_cookie_path(v55);
        v11->spath = v56;
        if ( !v56 )
          goto LABEL_272;
        v52 = httpheadera;
      }
      else
      {
        v52 = httpheadera;
        if ( !v51 )
        {
          if ( *v50 == 46 )
            v53 = v50 + 1;
          else
            v53 = v50;
          v54 = Curl_cstrdup(v53);
          v11->domain = (char *)v54;
          if ( !v54 )
            goto LABEL_272;
          v52 = httpheadera;
        }
      }
LABEL_164:
      v50 = strtok_r(0uLL, "\t", &tok_buf);
      ++v51;
      if ( v50 == 0LL || v52 )
      {
        if ( v51 == 6 )
          goto LABEL_273;
LABEL_275:
        if ( v52 || v51 != 7 )
          goto LABEL_197;
LABEL_280:
        if ( (v11->prefix & 1) != 0 )
        {
          if ( v11->secure )
          {
            if ( (v11->prefix & 2) != 0 )
              goto LABEL_283;
LABEL_286:
            if ( c->running || !c->newsession || v11->expires )
            {
              v11->livecookie = c->running;
              v83 = c->lastct + 1;
              c->lastct = v83;
              v11->creationtime = v83;
              if ( !noexpire )
                remove_expired(c);
              v84 = cookiehash(v11->domain);
              v61 = c->cookies[v84];
              if ( v61 )
              {
                livecookie = 0;
                v12 = 0LL;
                v73 = 0LL;
                while ( 1 )
                {
                  if ( !(unsigned int)curl_strequal(v61->name, v11->name) )
                    goto LABEL_205;
                  v62 = v61->domain;
                  if ( v62 )
                  {
                    v63 = v11->domain;
                    if ( !v63 || !(unsigned int)curl_strequal(v62, v63) )
                      goto LABEL_205;
                  }
                  else if ( v11->domain )
                  {
                    goto LABEL_205;
                  }
                  spath = v61->spath;
                  if ( spath )
                  {
                    v65 = v11->spath;
                    if ( v65 )
                    {
                      if ( v61->secure && !v11->secure && !securea )
                      {
                        v66 = strchr(spath + 1, 47);
                        v67 = v66 ? v66 - spath : strlen(spath);
                        if ( (unsigned int)curl_strnequal(spath, v65, v67) )
                        {
                          if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
                            Curl_infof(
                              data,
                              "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                              v11->name,
                              v11->domain);
                          goto LABEL_221;
                        }
                      }
                    }
                  }
LABEL_205:
                  if ( v73 || !(unsigned int)curl_strequal(v61->name, v11->name) )
                    goto LABEL_206;
                  v68 = v61->domain;
                  if ( v68 )
                  {
                    v69 = v11->domain;
                    if ( !v69 || !(unsigned int)curl_strequal(v68, v69) || v61->tailmatch != v11->tailmatch )
                    {
LABEL_230:
                      if ( (livecookie & 1) == 0 )
                        goto LABEL_206;
                    }
                  }
                  else if ( v11->domain )
                  {
                    goto LABEL_230;
                  }
                  v70 = v61->spath;
                  if ( !v70 )
                    goto LABEL_234;
                  v71 = v11->spath;
                  if ( !v71 )
                  {
                    v73 = 0LL;
                    livecookie = 0;
                    goto LABEL_206;
                  }
                  if ( !(unsigned int)curl_strequal(v70, v71) )
                  {
                    livecookie = 0;
                  }
                  else
                  {
LABEL_234:
                    if ( (v11->spath == 0LL) == (v61->spath == 0LL) )
                    {
                      livecookie = v11->livecookie;
                      if ( (livecookie & 1) != 0 )
                      {
                        v12 = v61;
                        v73 = v11;
                      }
                      else
                      {
                        if ( v61->livecookie )
                          goto LABEL_221;
                        v12 = v61;
                        v73 = v11;
                        livecookie = 1;
                      }
                    }
                    else
                    {
                      livecookie = 0;
                    }
                  }
LABEL_206:
                  if ( !v61->next )
                  {
                    if ( v73 )
                    {
                      v73->next = v12->next;
                      v73->creationtime = v12->creationtime;
                      Curl_cfree(v12->name);
                      Curl_cfree(v12->value);
                      Curl_cfree(v12->domain);
                      Curl_cfree(v12->path);
                      Curl_cfree(v12->spath);
                      v74 = *(_OWORD *)&v73->value;
                      *(_OWORD *)&v12->next = *(_OWORD *)&v73->next;
                      *(_OWORD *)&v12->value = v74;
                      v75 = *(_OWORD *)&v73->expires;
                      *(_OWORD *)&v12->spath = *(_OWORD *)&v73->spath;
                      *(_OWORD *)&v12->expires = v75;
                      *(_QWORD *)&v12->prefix = *(_QWORD *)&v73->prefix;
                      Curl_cfree(v73);
                    }
                    else
                    {
                      v12 = v11;
                    }
                    if ( !c->running )
                      goto LABEL_246;
                    goto LABEL_252;
                  }
                  v61 = v61->next;
                }
              }
              v12 = v11;
              if ( !c->running )
              {
LABEL_294:
                c->cookies[v84] = v12;
                goto LABEL_258;
              }
              v12 = v11;
              livecookie = 0;
LABEL_252:
              if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
              {
                v77 = "Added";
                if ( (livecookie & 1) != 0 )
                  v77 = "Replaced";
                Curl_infof(
                  data,
                  "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
                  v77,
                  v12->name,
                  v12->value,
                  v12->domain,
                  v12->path,
                  v12->expires);
              }
LABEL_246:
              if ( (livecookie & 1) == 0 )
              {
                if ( !v61 )
                  goto LABEL_294;
                v61->next = v12;
LABEL_258:
                ++c->numcookies;
              }
              expires = v12->expires;
              if ( expires && expires < c->next_expiration )
                c->next_expiration = expires;
              return v12;
            }
          }
        }
        else
        {
          if ( (v11->prefix & 2) == 0 )
            goto LABEL_286;
          if ( v11->secure )
          {
LABEL_283:
            v82 = v11->path;
            if ( v82 && !strcmp(v82, "/") && !v11->tailmatch )
              goto LABEL_286;
          }
        }
LABEL_221:
        freecookie(v11);
        return 0LL;
      }
    }
    v52 = httpheadera;
    goto LABEL_183;
  }
  badcookie = 0;
  if ( strlen(lineptr) > 0x1388 )
  {
    Curl_cfree(v11);
    return 0LL;
  }
  while ( 1 )
  {
    v39 = *(unsigned __int8 *)lineptr;
    if ( !*lineptr )
      break;
    if ( v39 == 32 || v39 == 9 )
    {
      ++lineptr;
    }
    else
    {
      v13 = strcspn(lineptr, ";\t\r\n=");
      if ( v13 )
        goto LABEL_299;
      v26 = *(unsigned __int8 *)lineptr;
      v28 = lineptr;
LABEL_75:
      while ( v26 == 32 || v26 == 9 )
      {
        v29 = *(unsigned __int8 *)++v28;
        v26 = v29;
        if ( !v29 )
          goto LABEL_81;
      }
      if ( v26 != 59 )
        goto LABEL_81;
      lineptr = v28 + 1;
    }
  }
  v13 = strcspn(lineptr, ";\t\r\n=");
  if ( !v13 )
  {
LABEL_81:
    if ( !badcookie )
    {
      v30 = v11->domain || domain == 0LL;
      if ( v30 || (v41 = Curl_cstrdup(domain), (v11->domain = (char *)v41) != 0LL) )
      {
        if ( v11->path || path == 0LL )
          goto LABEL_316;
        v42 = strchr(path, 63);
        v43 = v42 ? (char *)Curl_memrchr(path, 47LL, v42 - path) : strrchr(path, 47);
        if ( !v43 )
          goto LABEL_316;
        v44 = v43 - path;
        v45 = v44 + 1;
        v46 = (char *)Curl_cmalloc(v44 + 2);
        v11->path = v46;
        if ( v46 )
        {
          memcpy(v46, path, v45);
          v11->path[v45] = 0;
          v47 = sanitize_cookie_path(v11->path);
          v11->spath = v47;
          if ( v47 )
          {
LABEL_316:
            if ( v11->name )
            {
              ++data->req.setcookies;
              goto LABEL_280;
            }
          }
        }
      }
    }
LABEL_66:
    freecookie(v11);
    return 0LL;
  }
LABEL_299:
  v85 = &lineptr[v13];
  do
  {
    v86 = v13--;
    v19 = lineptr[v13] == 32 || lineptr[v13] == 9;
    if ( !v19 )
    {
      if ( *v85 == 61 )
      {
        v13 = v86;
        goto LABEL_303;
      }
      if ( v86 > 0xFFE )
      {
        v13 = v86;
        v17 = 0LL;
        goto LABEL_50;
      }
      v13 = v86;
      v28 = v85;
      v16 = 0LL;
      v17 = 0LL;
LABEL_23:
      v20 = v39 == 95 && v13 > 6;
      if ( v20 && lineptr[1] == 95 )
      {
        if ( (unsigned int)curl_strnequal("__Secure-", lineptr, 9LL) )
        {
          v11->prefix |= 1u;
        }
        else if ( (unsigned int)curl_strnequal("__Host-", lineptr, 7LL) )
        {
          v11->prefix |= 2u;
        }
      }
      if ( !v11->name )
      {
        if ( !v19 )
          goto LABEL_66;
        strstore(&v11->name, lineptr, v13);
        strstore(&v11->value, v16, v17);
        name = v11->name;
        if ( !name )
          goto LABEL_66;
        value = v11->value;
        if ( !value )
          goto LABEL_66;
        if ( value[strcspn(v11->value, badoctets_0)] || name[strcspn(name, badoctets_0)] )
        {
          if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
            Curl_infof(data, "invalid octets in name/value, cookie dropped");
          goto LABEL_66;
        }
        goto LABEL_74;
      }
      if ( !v17 )
      {
        if ( v13 == 6 )
        {
          if ( (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
          {
            if ( !securea && c->running )
              goto LABEL_66;
            v11->secure = 1;
            goto LABEL_74;
          }
          if ( !v19 )
          {
LABEL_74:
            v26 = *(unsigned __int8 *)v28;
            if ( *v28 )
              goto LABEL_75;
            goto LABEL_81;
          }
          goto LABEL_33;
        }
        if ( v13 == 8 )
        {
          if ( (unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
          {
            v11->httponly = 1;
            goto LABEL_74;
          }
          if ( !v19 )
            goto LABEL_74;
LABEL_73:
          if ( v13 == 7 && !(unsigned int)curl_strnequal("version", lineptr, 7LL) )
          {
            if ( (unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
            {
              if ( *v16 == 34 )
                v33 = v16 + 1;
              else
                v33 = v16;
              v34 = curlx_strtoofft(v33, 0LL, 10LL, &v11->expires);
              switch ( v34 )
              {
                case 1:
                  v11->expires = 0x7FFFFFFFFFFFFFFFLL;
                  break;
                case 2:
                  v11->expires = 1LL;
                  break;
                case 0:
                  v35 = v11->expires;
                  if ( v35 )
                  {
                    v36 = 0x7FFFFFFFFFFFFFFFLL;
                    if ( v35 <= 0x7FFFFFFFFFFFFFFFLL - now )
                      v36 = v35 + now;
                    v11->expires = v36;
                  }
                  else
                  {
                    v11->expires = 1LL;
                  }
                  break;
              }
            }
            else if ( (unsigned int)curl_strnequal("expires", lineptr, 7LL) )
            {
              if ( v17 <= 0x7F && v11->expires == 0 )
              {
                memcpy(date, v16, v17);
                date[v17] = 0;
                v38 = Curl_getdate_capped(date);
                if ( v38 )
                {
                  if ( v38 < 0 )
                    v38 = 0LL;
                  v11->expires = v38;
                }
                else
                {
                  v11->expires = 1LL;
                }
              }
            }
          }
          goto LABEL_74;
        }
        if ( !v19 )
          goto LABEL_74;
      }
      if ( v13 == 4 )
      {
        if ( (unsigned int)curl_strnequal("path", lineptr, 4LL) )
        {
          strstore(&v11->path, v16, v17);
          if ( !v11->path )
            goto LABEL_66;
          Curl_cfree(v11->spath);
          v32 = sanitize_cookie_path(v11->path);
          v11->spath = v32;
          if ( !v32 )
            goto LABEL_66;
        }
        goto LABEL_74;
      }
LABEL_33:
      if ( v13 == 6 )
      {
        v21 = (unsigned int)curl_strnequal("domain", lineptr, 6LL) != 0 && v17 != 0;
        if ( !v21 )
          goto LABEL_74;
        if ( *v16 == 46 )
        {
          ++v16;
          --v17;
        }
        if ( v17 == 9 && (unsigned int)curl_strnequal(v16, "localhost", 9LL)
          || (v22 = memchr(v16, 46, v17)) != 0LL && v17 - (v22 - v16) > 1 )
        {
          if ( !domain )
          {
            is_ipnum = Curl_host_is_ipnum(v16);
            strstore(&v11->domain, v16, v17);
            if ( !v11->domain )
              goto LABEL_66;
            if ( (is_ipnum & 1) != 0 )
              goto LABEL_74;
            goto LABEL_103;
          }
          v23 = Curl_host_is_ipnum(domain);
        }
        else
        {
          domain = ":";
          v23 = Curl_host_is_ipnum(":");
        }
        if ( (v23 & 1) != 0 )
        {
          if ( !strncmp(v16, domain, v17) && strlen(domain) == v17 )
          {
            strstore(&v11->domain, v16, v17);
            if ( !v11->domain )
              goto LABEL_66;
            goto LABEL_74;
          }
          goto LABEL_45;
        }
        if ( !cookie_tailmatch(v16, v17, domain) )
        {
LABEL_45:
          badcookie = v21;
          if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
          {
            Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v16);
            badcookie = v21;
          }
          goto LABEL_74;
        }
        strstore(&v11->domain, v16, v17);
        if ( !v11->domain )
          goto LABEL_66;
LABEL_103:
        v11->tailmatch = 1;
        goto LABEL_74;
      }
      goto LABEL_73;
    }
  }
  while ( v13 );
  if ( *v85 != 61 )
  {
    v17 = 0LL;
    v28 = v85;
    v16 = 0LL;
    LOBYTE(v19) = 0;
    goto LABEL_23;
  }
LABEL_303:
  v16 = v85 + 1;
  v17 = strcspn(v85 + 1, ";\r\n");
  v28 = &v85[v17 + 1];
  if ( !v17 )
  {
LABEL_310:
    if ( v13 > 0xFFE )
    {
      v17 = 0LL;
      goto LABEL_50;
    }
    LOBYTE(v19) = httpheadera;
    v17 = 0LL;
    goto LABEL_23;
  }
  while ( 1 )
  {
    v87 = (unsigned __int8)v85[v17];
    if ( v87 != 32 && v87 != 9 )
      break;
    if ( !--v17 )
      goto LABEL_310;
  }
  while ( 1 )
  {
    v14 = *(unsigned __int8 *)v16;
    if ( v14 != 32 && v14 != 9 )
      break;
    ++v16;
    if ( !--v17 )
      goto LABEL_17;
  }
  if ( memchr(v16, 9, v17) )
  {
    freecookie(v11);
    v12 = 0LL;
    if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
      Curl_infof(data, "cookie contains TAB, dropping");
  }
  else
  {
LABEL_17:
    v18 = v13 > 0xFFE || v17 > 0xFFE;
    if ( !v18 && v13 + v17 <= 0x1000 )
    {
      LOBYTE(v19) = httpheadera;
      goto LABEL_23;
    }
LABEL_50:
    freecookie(v11);
    v12 = 0LL;
    if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
      Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v13, v17);
  }
  return v12;
}
