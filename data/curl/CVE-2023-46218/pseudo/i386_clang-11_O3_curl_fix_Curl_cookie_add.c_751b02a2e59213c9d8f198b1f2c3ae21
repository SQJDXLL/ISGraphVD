Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        const char *domain,
        char *path,
        bool secure)
{
  time_t v8; // eax
  char *v9; // ebp
  int v10; // eax
  char *j; // edi
  int v12; // esi
  char *v13; // ebp
  char *i; // esi
  size_t v15; // eax
  size_t v16; // ecx
  unsigned int v17; // edi
  char v18; // al
  size_t v19; // eax
  size_t v20; // ecx
  const char *v21; // edx
  const char *v22; // ebp
  char v23; // cl
  unsigned int v24; // ecx
  const char *v25; // edx
  const char *v26; // ebp
  unsigned int v27; // ebp
  int v28; // eax
  unsigned int v29; // ebp
  int v30; // eax
  const char *v31; // eax
  char *v32; // edi
  size_t v33; // eax
  size_t v34; // esi
  const char *v35; // eax
  const char *v36; // esi
  int v37; // esi
  char v38; // cl
  const char *v39; // ebp
  int v40; // eax
  const char *v41; // ebp
  size_t v42; // edi
  _DWORD *v43; // esi
  const char *v44; // eax
  int v45; // eax
  const char *v46; // edi
  unsigned int v47; // esi
  int v48; // eax
  const char *v49; // edx
  const char *v50; // edi
  _BYTE *v51; // eax
  const char *v52; // eax
  const char *v53; // ebp
  size_t v54; // eax
  char is_ipnum; // cl
  const char *v56; // ebp
  int v57; // eax
  const char *v58; // eax
  const char *v59; // ebp
  size_t v60; // esi
  const char *v61; // ebp
  int v62; // eax
  int v63; // eax
  char v64; // bp
  int v65; // eax
  unsigned int v66; // eax
  unsigned int v67; // ecx
  char *v68; // eax
  char *v69; // eax
  char *v70; // eax
  const char *v71; // edi
  int v72; // edx
  int v73; // ecx
  int v74; // eax
  int v75; // eax
  int v76; // ebp
  int v77; // eax
  const char *v78; // eax
  char *v79; // edi
  size_t v80; // eax
  size_t v81; // ebp
  int v82; // eax
  int v83; // eax
  int v84; // eax
  int v85; // eax
  int v86; // eax
  int v87; // ebp
  int v88; // eax
  int v89; // ecx
  CookieInfo *v90; // eax
  char *v91; // eax
  int v92; // ebp
  int v93; // eax
  _DWORD *v94; // edi
  char v95; // al
  const char *v96; // ebp
  int v97; // eax
  char v98; // cl
  char *v99; // eax
  char *v100; // eax
  int v101; // edi
  void *v102; // eax
  size_t v103; // edi
  const char *v104; // eax
  char *v105; // edi
  size_t v106; // eax
  size_t v107; // ebp
  char v108; // al
  char v109; // cl
  char v110; // al
  bool running; // al
  int v112; // eax
  unsigned int next_expiration; // eax
  unsigned int next_expiration_high; // ecx
  Cookie *next; // eax
  int v116; // ebp
  Cookie *v117; // esi
  char *v118; // eax
  int v119; // ecx
  const char *spath; // edi
  char *v121; // eax
  size_t v122; // eax
  char *v123; // eax
  int v124; // ecx
  bool v125; // zf
  int v126; // eax
  char *v127; // eax
  char *v128; // ecx
  int v129; // eax
  __int64 v131; // xmm0_8
  char v132; // al
  int v133; // eax
  CookieInfo *v134; // edi
  Cookie *v135; // esi
  Cookie *v136; // ebp
  curl_off_t v137; // rax
  int expires_high; // ecx
  Cookie **p_next; // eax
  CookieInfo *v140; // edi
  const char *v141; // ecx
  Cookie **v142; // eax
  curl_off_t v143; // rax
  int v144; // ecx
  time_t *timer; // [esp+0h] [ebp-ECh]
  char *reject; // [esp+4h] [ebp-E8h]
  size_t n; // [esp+8h] [ebp-E4h]
  int v148; // [esp+Ch] [ebp-E0h]
  char *v149; // [esp+28h] [ebp-C4h]
  size_t v150; // [esp+28h] [ebp-C4h]
  size_t v151; // [esp+28h] [ebp-C4h]
  int v152; // [esp+28h] [ebp-C4h]
  int v153; // [esp+28h] [ebp-C4h]
  Cookie *v154; // [esp+28h] [ebp-C4h]
  char v155; // [esp+28h] [ebp-C4h]
  int v156; // [esp+2Ch] [ebp-C0h]
  size_t v157; // [esp+30h] [ebp-BCh]
  size_t v158; // [esp+30h] [ebp-BCh]
  size_t v159; // [esp+30h] [ebp-BCh]
  size_t v160; // [esp+30h] [ebp-BCh]
  size_t v161; // [esp+30h] [ebp-BCh]
  Cookie **v162; // [esp+30h] [ebp-BCh]
  const char *s; // [esp+34h] [ebp-B8h]
  const char *sa; // [esp+34h] [ebp-B8h]
  const char *sb; // [esp+34h] [ebp-B8h]
  const char *se; // [esp+34h] [ebp-B8h]
  void *sc; // [esp+34h] [ebp-B8h]
  size_t sd; // [esp+34h] [ebp-B8h]
  char v169; // [esp+38h] [ebp-B4h]
  char v170; // [esp+38h] [ebp-B4h]
  char delim; // [esp+3Ch] [ebp-B0h]
  char *delima; // [esp+3Ch] [ebp-B0h]
  char *delimb; // [esp+3Ch] [ebp-B0h]
  char v175; // [esp+44h] [ebp-A8h]
  int v176; // [esp+44h] [ebp-A8h]
  _DWORD *v177; // [esp+48h] [ebp-A4h]
  int v178; // [esp+4Ch] [ebp-A0h]
  __int64 v179; // [esp+54h] [ebp-98h]
  char *dest[36]; // [esp+5Ch] [ebp-90h] BYREF

  v8 = time(0);
  v9 = 0;
  if ( data->req.setcookies > 0x31u )
    return (Cookie *)v9;
  v178 = v8;
  v10 = Curl_ccalloc(1, 44);
  if ( !v10 )
    return (Cookie *)v9;
  j = lineptr;
  v12 = v10;
  v156 = v10;
  if ( !httpheader )
  {
    dest[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      j = lineptr + 10;
      *(_BYTE *)(v12 + 35) = 1;
      if ( lineptr[10] == 35 )
        goto LABEL_137;
    }
    else if ( *lineptr == 35 )
    {
      goto LABEL_137;
    }
    v68 = strchr(j, 13);
    if ( v68 )
      *v68 = 0;
    v69 = strchr(j, 10);
    if ( v69 )
      *v69 = 0;
    v70 = strtok_r(j, "\t", dest);
    if ( !v70 )
      goto LABEL_207;
    v71 = v70;
    v72 = 0;
    v73 = 0;
    sc = (void *)(v12 + 24);
    while ( 1 )
    {
      v152 = v73;
      switch ( v72 )
      {
        case 0:
          if ( *v71 == 46 )
            ++v71;
          v74 = Curl_cstrdup(v71);
          *(_DWORD *)(v12 + 20) = v74;
          v125 = v74 == 0;
          v75 = (unsigned __int8)v152;
          if ( v125 )
            v75 = 1;
          v76 = 0;
          v152 = v75;
          goto LABEL_199;
        case 1:
          v76 = 1;
          *(_BYTE *)(v12 + 32) = curl_strequal(v71, "TRUE") != 0;
          goto LABEL_199;
        case 2:
          if ( !strcmp("TRUE", v71) || !strcmp("FALSE", v71) )
          {
            v87 = Curl_cstrdup("/");
            *(_DWORD *)(v156 + 12) = v87;
            v12 = v156;
            v88 = Curl_cstrdup("/");
            *(_DWORD *)(v156 + 16) = v88;
            v89 = (unsigned __int8)v152;
            if ( !v88 )
              v89 = 1;
            if ( !v87 )
              v89 = 1;
            v152 = v89;
            goto LABEL_180;
          }
          v77 = Curl_cstrdup(v71);
          *(_DWORD *)(v12 + 12) = v77;
          if ( !v77 )
          {
            v82 = 1;
            goto LABEL_198;
          }
          v78 = (const char *)Curl_cstrdup(v77);
          if ( !v78 )
          {
            LOBYTE(v82) = v152;
            v79 = 0;
            goto LABEL_196;
          }
          v79 = (char *)v78;
          v80 = strlen(v78);
          v81 = v80;
          if ( *v79 == 34 )
          {
            memmove(v79, v79 + 1, v80);
            --v81;
          }
          if ( v81 )
          {
            if ( v79[v81 - 1] == 34 )
              v79[--v81] = 0;
            if ( *v79 == 47 )
            {
              if ( v81 )
              {
                LOBYTE(v82) = v152;
                if ( v79[v81 - 1] == 47 )
                  v79[v81 - 1] = 0;
                goto LABEL_196;
              }
              goto LABEL_195;
            }
LABEL_194:
            Curl_cfree(v79);
            v79 = (char *)Curl_strndup("/", 1);
            goto LABEL_195;
          }
          if ( *v79 != 47 )
            goto LABEL_194;
LABEL_195:
          LOBYTE(v82) = v152;
LABEL_196:
          v82 = (unsigned __int8)v82;
          *(_DWORD *)(v12 + 16) = v79;
          if ( !v79 )
            v82 = 1;
LABEL_198:
          v152 = v82;
          v76 = 2;
LABEL_199:
          v91 = strtok_r(0, "\t", dest);
          v73 = v152;
          v92 = v76 + 1;
          v72 = v92;
          if ( !v91 || (v71 = v91, (v152 & 1) != 0) )
          {
            if ( v92 == 6 )
            {
              v93 = Curl_cstrdup(&L_str_22);
              *(_DWORD *)(v12 + 8) = v93;
              LOBYTE(v73) = 1;
              if ( v93 )
                LOBYTE(v73) = v152;
              v72 = (v93 == 0) ^ 7;
            }
            if ( (v73 & 1) == 0 && v72 == 7 )
              goto LABEL_254;
LABEL_207:
            v94 = (_DWORD *)v12;
            goto LABEL_306;
          }
          break;
        case 3:
LABEL_180:
          *(_BYTE *)(v12 + 33) = 0;
          if ( !curl_strequal(v71, "TRUE") )
            goto LABEL_184;
          if ( secure || (v90 = c, c->running) )
          {
            *(_BYTE *)(v12 + 33) = 1;
LABEL_184:
            v76 = 3;
          }
          else
          {
            LOBYTE(v90) = 1;
            v76 = 3;
            v152 = (int)v90;
          }
          goto LABEL_199;
        case 4:
          v125 = curlx_strtoofft(v71, 0, 10, sc) == 0;
          v76 = 4;
          v83 = (unsigned __int8)v152;
          if ( !v125 )
            v83 = 1;
          v152 = v83;
          goto LABEL_199;
        case 5:
          v84 = Curl_cstrdup(v71);
          *(_DWORD *)(v12 + 4) = v84;
          if ( v84 )
          {
            if ( curl_strnequal("__Secure-", v84, 9) )
            {
              *(_BYTE *)(v12 + 40) |= 1u;
              v76 = 5;
            }
            else
            {
              if ( curl_strnequal("__Host-", *(_DWORD *)(v12 + 4), 7) )
                *(_BYTE *)(v12 + 40) |= 2u;
              v76 = 5;
            }
          }
          else
          {
            v76 = 5;
            v152 = 1;
          }
          goto LABEL_199;
        case 6:
          v85 = Curl_cstrdup(v71);
          *(_DWORD *)(v12 + 8) = v85;
          v125 = v85 == 0;
          v76 = 6;
          v86 = (unsigned __int8)v152;
          if ( v125 )
            v86 = 1;
          v152 = v86;
          goto LABEL_199;
        default:
          v76 = v72;
          goto LABEL_199;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_137:
    Curl_cfree(v12);
    return 0;
  }
  v169 = 0;
  v177 = (_DWORD *)(v12 + 24);
  LODWORD(v179) = ~v178;
  HIDWORD(v179) = 0x7FFFFFFF - (v178 >> 31);
  while ( 1 )
  {
    v13 = j + 1;
    for ( i = j; *i == 32 || *i == 9; ++i )
      ++v13;
    delim = *i;
    v15 = strcspn(i, ";\t\r\n=");
    if ( !v15 )
    {
      v149 = i;
      goto LABEL_65;
    }
    v16 = v15;
    v17 = v15;
    v149 = &i[v15];
    while ( 1 )
    {
      v18 = i[v17 - 1];
      if ( v18 != 32 && v18 != 9 )
        break;
      if ( !--v17 )
      {
        v17 = 0;
        if ( *v149 != 61 )
          goto LABEL_28;
        goto LABEL_16;
      }
    }
    if ( *v149 != 61 )
    {
LABEL_28:
      v24 = 0;
      v25 = 0;
      v175 = 0;
      goto LABEL_33;
    }
LABEL_16:
    v150 = v16;
    s = &i[v16 + 1];
    v19 = strcspn(s, ";\r\n");
    v20 = v19 + v150;
    v151 = v19 + v150;
    if ( v19 )
    {
      v21 = s;
      v22 = &v13[v20];
      while ( 1 )
      {
        v23 = *(v22 - 1);
        if ( v23 != 32 && v23 != 9 )
          break;
        --v19;
        --v22;
        if ( !v19 )
          goto LABEL_30;
      }
      while ( *v21 == 32 || *v21 == 9 )
      {
        ++v21;
        if ( !--v19 )
        {
          v19 = 0;
          v21 = v22;
          break;
        }
      }
    }
    else
    {
      v21 = s;
LABEL_30:
      v19 = 0;
    }
    v157 = v19;
    v26 = v21;
    if ( memchr(v21, 9, v19) )
    {
      Curl_cfree(*(_DWORD *)(v156 + 20));
      Curl_cfree(*(_DWORD *)(v156 + 12));
      Curl_cfree(*(_DWORD *)(v156 + 16));
      Curl_cfree(*(_DWORD *)(v156 + 4));
      Curl_cfree(*(_DWORD *)(v156 + 8));
      Curl_cfree(v156);
      v9 = 0;
      if ( (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
        Curl_infof(data, "cookie contains TAB, dropping", n, v148);
      return (Cookie *)v9;
    }
    v24 = v157;
    v25 = v26;
    v149 = &i[v151 + 1];
    v175 = 1;
LABEL_33:
    if ( v17 > 0xFFE || v24 > 0xFFE || v24 + v17 >= 0x1001 )
    {
      v160 = v24;
      Curl_cfree(*(_DWORD *)(v156 + 20));
      Curl_cfree(*(_DWORD *)(v156 + 12));
      Curl_cfree(*(_DWORD *)(v156 + 16));
      Curl_cfree(*(_DWORD *)(v156 + 4));
      Curl_cfree(*(_DWORD *)(v156 + 8));
      Curl_cfree(v156);
      if ( (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v17, v160);
      return 0;
    }
    if ( delim == 95 && v17 >= 7 && i[1] == 95 )
    {
      sa = v25;
      v27 = v24;
      if ( curl_strnequal("__Secure-", i, 9) )
      {
        v24 = v27;
        *(_BYTE *)(v156 + 40) |= 1u;
        v25 = sa;
      }
      else
      {
        v28 = curl_strnequal("__Host-", i, 7);
        v25 = sa;
        v24 = v27;
        if ( v28 )
          *(_BYTE *)(v156 + 40) |= 2u;
      }
    }
    if ( !*(_DWORD *)(v156 + 4) )
    {
      if ( !v175 )
        goto LABEL_305;
      v158 = v24;
      se = v25;
      Curl_cfree(0);
      *(_DWORD *)(v156 + 4) = Curl_strndup(i, v17);
      Curl_cfree(*(_DWORD *)(v156 + 8));
      v35 = (const char *)Curl_strndup(se, v158);
      *(_DWORD *)(v156 + 8) = v35;
      if ( !v35 )
        goto LABEL_305;
      v36 = *(const char **)(v156 + 4);
      if ( !v36 )
        goto LABEL_305;
      if ( v35[strcspn(v35, invalid_octets_badoctets)] || v36[strcspn(v36, invalid_octets_badoctets)] )
      {
        if ( (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped", n, v148);
LABEL_305:
        v94 = (_DWORD *)v156;
LABEL_306:
        Curl_cfree(v94[5]);
        Curl_cfree(v94[3]);
        Curl_cfree(v94[4]);
        Curl_cfree(v94[1]);
        Curl_cfree(v94[2]);
        Curl_cfree(v94);
        return 0;
      }
      goto LABEL_65;
    }
    if ( !v24 )
    {
      if ( v17 == 8 )
      {
        v56 = v25;
        v57 = curl_strnequal("httponly", i, 8);
        v24 = 0;
        v25 = v56;
        if ( v57 )
        {
          *(_BYTE *)(v156 + 35) = 1;
          goto LABEL_65;
        }
      }
      else if ( v17 == 6 )
      {
        v39 = v25;
        v40 = curl_strnequal("secure", i, 6);
        v24 = 0;
        v25 = v39;
        if ( v40 )
        {
          if ( !secure && c->running )
            goto LABEL_305;
          *(_BYTE *)(v156 + 33) = 1;
          goto LABEL_65;
        }
      }
      if ( !v175 )
        goto LABEL_65;
    }
    if ( v17 != 7 )
      break;
    v41 = v25;
    v42 = v24;
    if ( curl_strnequal("version", i, 7) )
      goto LABEL_65;
    if ( !curl_strnequal("max-age", i, 7) )
    {
      if ( !curl_strnequal("expires", i, 7) )
        goto LABEL_65;
      v43 = v177;
      if ( v42 > 0x7F || *(_QWORD *)v177 )
        goto LABEL_65;
      memcpy(dest, v41, v42);
      *((_BYTE *)dest + v42) = 0;
      v63 = Curl_getdate_capped(dest);
      *(_QWORD *)v177 = v63;
      if ( v63 )
      {
        if ( v63 < 0 )
        {
          v177[1] = 0;
          *v177 = 0;
        }
        goto LABEL_65;
      }
LABEL_129:
      v43[1] = 0;
      *v43 = 1;
      goto LABEL_65;
    }
    v43 = v177;
    v44 = v41 + 1;
    if ( *v41 != 34 )
      v44 = v41;
    v45 = curlx_strtoofft(v44, 0, 10, v177);
    if ( v45 )
    {
      if ( v45 != 2 )
      {
        if ( v45 != 1 )
          goto LABEL_65;
LABEL_128:
        *v177 = -1;
        v177[1] = 0x7FFFFFFF;
        goto LABEL_65;
      }
      goto LABEL_129;
    }
    v66 = *v177;
    v67 = v177[1];
    if ( !*(_QWORD *)v177 )
      goto LABEL_129;
    if ( v179 < __SPAIR64__(v67, v66) )
      goto LABEL_128;
    *(_QWORD *)v177 = v178 + __PAIR64__(v67, v66);
LABEL_65:
    v37 = v156;
    for ( j = v149 + 1; ; ++j )
    {
      v38 = *(j - 1);
      if ( v38 != 32 && v38 != 9 )
        break;
    }
    if ( v38 != 59 )
      goto LABEL_208;
  }
  if ( v17 != 6 )
  {
    if ( v17 == 4 )
    {
      sb = v25;
      v29 = v24;
      if ( curl_strnequal("path", i, 4) )
      {
        Curl_cfree(*(_DWORD *)(v156 + 12));
        v30 = Curl_strndup(sb, v29);
        *(_DWORD *)(v156 + 12) = v30;
        if ( !v30 )
          goto LABEL_305;
        Curl_cfree(*(_DWORD *)(v156 + 16));
        v31 = (const char *)Curl_cstrdup(*(_DWORD *)(v156 + 12));
        if ( !v31 )
        {
          *(_DWORD *)(v156 + 16) = 0;
          goto LABEL_305;
        }
        v32 = (char *)v31;
        v33 = strlen(v31);
        v34 = v33;
        if ( *v32 == 34 )
        {
          memmove(v32, v32 + 1, v33);
          --v34;
        }
        if ( v34 )
        {
          if ( v32[v34 - 1] == 34 )
            v32[--v34] = 0;
          if ( *v32 != 47 )
          {
LABEL_112:
            Curl_cfree(v32);
            v62 = Curl_strndup("/", 1);
            *(_DWORD *)(v156 + 16) = v62;
            if ( !v62 )
              goto LABEL_305;
            goto LABEL_65;
          }
          if ( v34 && v32[v34 - 1] == 47 )
            v32[v34 - 1] = 0;
        }
        else if ( *v32 != 47 )
        {
          goto LABEL_112;
        }
        *(_DWORD *)(v156 + 16) = v32;
      }
    }
    goto LABEL_65;
  }
  reject = i;
  v46 = v25;
  v47 = v24;
  v48 = curl_strnequal("domain", reject, 6);
  if ( !v47 || !v48 )
    goto LABEL_65;
  v49 = v46;
  v50 = v46 + 1;
  if ( *v49 != 46 )
    v50 = v49;
  v159 = v47 - (*v49 == 46);
  if ( v159 == 9 && curl_strnequal(v50, "localhost", 9)
    || (v51 = memchr(v50, 46, v159)) != 0 && (unsigned int)(&v50[v159] - v51) > 1 )
  {
    v58 = domain;
    if ( !domain )
      v58 = v50;
    is_ipnum = Curl_host_is_ipnum(v58);
    v52 = domain;
    v37 = v156;
    if ( domain )
    {
      if ( !is_ipnum )
        goto LABEL_106;
LABEL_94:
      v53 = v52;
      domain = v52;
      if ( strncmp(v50, v52, v159) )
        goto LABEL_132;
      v54 = strlen(v53);
      is_ipnum = 1;
      if ( v159 != v54 )
        goto LABEL_132;
    }
    else
    {
      domain = 0;
    }
  }
  else
  {
    v125 = (unsigned __int8)Curl_host_is_ipnum(":") == 0;
    v52 = ":";
    v37 = v156;
    if ( !v125 )
      goto LABEL_94;
LABEL_106:
    v59 = v52;
    v60 = strlen(v52);
    domain = v59;
    if ( v60 < v159 || (v61 = &v59[v60 - v159], !curl_strnequal(v50, v61, v159)) )
    {
LABEL_132:
      v169 = 1;
      if ( (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
        Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v50, v148);
      goto LABEL_65;
    }
    if ( v60 == v159 )
    {
      v37 = v156;
      is_ipnum = 0;
    }
    else
    {
      v37 = v156;
      if ( *(v61 - 1) != 46 )
        goto LABEL_132;
      is_ipnum = 0;
    }
  }
  v64 = is_ipnum;
  Curl_cfree(*(_DWORD *)(v37 + 20));
  v65 = Curl_strndup(v50, v159);
  *(_DWORD *)(v37 + 20) = v65;
  if ( !v64 && v65 )
  {
    *(_BYTE *)(v37 + 32) = 1;
    goto LABEL_65;
  }
  if ( v65 )
    goto LABEL_65;
  v169 = 1;
LABEL_208:
  v95 = v169;
  if ( (v169 & 1) != 0 )
  {
    v96 = path;
    goto LABEL_216;
  }
  if ( !domain )
  {
    v96 = path;
    if ( (v169 & 1) != 0 )
      goto LABEL_251;
    goto LABEL_217;
  }
  v96 = path;
  if ( *(_DWORD *)(v37 + 20) )
  {
LABEL_216:
    if ( (v169 & 1) != 0 )
      goto LABEL_251;
LABEL_217:
    if ( !v96 || *(_DWORD *)(v37 + 12) )
      goto LABEL_251;
    v170 = v95;
    v99 = strchr(v96, 63);
    if ( v99 )
      v100 = (char *)Curl_memrchr(v96, 47, v99 - v96);
    else
      v100 = strrchr(v96, 47);
    if ( !v100 )
    {
      v95 = v170;
      goto LABEL_251;
    }
    v101 = v100 - v96;
    v102 = (void *)Curl_cmalloc(v100 - v96 + 2);
    *(_DWORD *)(v37 + 12) = v102;
    if ( !v102 )
      goto LABEL_305;
    v103 = v101 + 1;
    memcpy(v102, path, v103);
    *(_BYTE *)(*(_DWORD *)(v156 + 12) + v103) = 0;
    v104 = (const char *)Curl_cstrdup(*(_DWORD *)(v156 + 12));
    if ( !v104 )
    {
      v108 = v170;
      v105 = 0;
LABEL_248:
      v109 = 1;
      *(_DWORD *)(v156 + 16) = v105;
      if ( v105 )
        v109 = v108;
      v95 = v109;
      goto LABEL_251;
    }
    v105 = (char *)v104;
    v106 = strlen(v104);
    v107 = v106;
    if ( *v105 == 34 )
    {
      memmove(v105, v105 + 1, v106);
      --v107;
    }
    if ( v107 )
    {
      if ( v105[v107 - 1] == 34 )
        v105[--v107] = 0;
      if ( *v105 == 47 )
      {
        if ( v107 )
        {
          v108 = v170;
          if ( v105[v107 - 1] == 47 )
            v105[v107 - 1] = 0;
          goto LABEL_248;
        }
        goto LABEL_247;
      }
    }
    else if ( *v105 == 47 )
    {
LABEL_247:
      v108 = v170;
      goto LABEL_248;
    }
    Curl_cfree(v105);
    v105 = (char *)Curl_strndup("/", 1);
    goto LABEL_247;
  }
  v97 = Curl_cstrdup(domain);
  *(_DWORD *)(v37 + 20) = v97;
  v98 = 1;
  if ( v97 )
    v98 = v169;
  v95 = v98;
  if ( (v98 & 1) == 0 )
    goto LABEL_217;
LABEL_251:
  if ( (v95 & 1) != 0 || !*(_DWORD *)(v156 + 4) )
    goto LABEL_305;
  ++data->req.setcookies;
  v12 = v156;
LABEL_254:
  v110 = *(_BYTE *)(v12 + 40);
  if ( (v110 & 1) != 0 && !*(_BYTE *)(v12 + 33)
    || (v110 & 2) != 0
    && (!*(_BYTE *)(v12 + 33)
     || !*(_DWORD *)(v12 + 12)
     || strcmp(*(const char **)(v12 + 12), "/")
     || *(_BYTE *)(v12 + 32))
    || !(running = c->running) && c->newsession && !*(_QWORD *)(v12 + 24) )
  {
    Curl_cfree(*(_DWORD *)(v12 + 20));
    Curl_cfree(*(_DWORD *)(v12 + 12));
    Curl_cfree(*(_DWORD *)(v12 + 16));
    Curl_cfree(*(_DWORD *)(v12 + 4));
    Curl_cfree(*(_DWORD *)(v12 + 8));
    v9 = 0;
    Curl_cfree(v12);
    return (Cookie *)v9;
  }
  *(_BYTE *)(v12 + 34) = running;
  v112 = c->lastct + 1;
  c->lastct = v112;
  *(_DWORD *)(v12 + 36) = v112;
  if ( !noexpire )
  {
    delima = (char *)time(0);
    next_expiration = c->next_expiration;
    next_expiration_high = HIDWORD(c->next_expiration);
    if ( (int)delima >= __SPAIR64__(next_expiration_high, next_expiration)
      || !(~next_expiration | next_expiration_high ^ 0x7FFFFFFF) )
    {
      c->next_expiration = 0x7FFFFFFFFFFFFFFFLL;
      v133 = 0;
      do
      {
        v134 = c;
        v176 = v133;
        v135 = c->cookies[v133];
        if ( v135 )
        {
          v154 = 0;
          v162 = &c->cookies[v133];
          do
          {
            while ( 1 )
            {
              v136 = v135;
              v135 = v135->next;
              LODWORD(v137) = v136->expires;
              expires_high = HIDWORD(v136->expires);
              if ( !v136->expires )
                break;
              HIDWORD(v137) = HIDWORD(v136->expires);
              if ( v137 >= (int)delima )
                break;
              p_next = &v154->next;
              if ( !v154 )
                p_next = v162;
              *p_next = v135;
              --v134->numcookies;
              Curl_cfree(v136->domain);
              Curl_cfree(v136->path);
              Curl_cfree(v136->spath);
              Curl_cfree(v136->name);
              Curl_cfree(v136->value);
              Curl_cfree(v136);
              v134 = c;
              if ( !v135 )
                goto LABEL_321;
            }
            if ( expires_high | (unsigned int)v137 )
            {
              HIDWORD(v137) = HIDWORD(v136->expires);
              if ( v137 < v134->next_expiration )
              {
                LODWORD(v134->next_expiration) = v137;
                HIDWORD(v134->next_expiration) = expires_high;
              }
            }
            v154 = v136;
          }
          while ( v135 );
        }
LABEL_321:
        v133 = v176 + 1;
      }
      while ( v176 != 62 );
    }
  }
  v9 = (char *)v156;
  sd = cookiehash(*(const char *const *)(v156 + 20));
  next = c->cookies[sd];
  if ( !next )
  {
    v117 = 0;
    v132 = 0;
    goto LABEL_336;
  }
  v116 = 0;
  delimb = 0;
  v153 = 0;
  while ( 2 )
  {
    v117 = next;
    if ( curl_strequal(next->name, *(_DWORD *)(v156 + 4)) )
    {
      v118 = v117->domain;
      v119 = *(_DWORD *)(v156 + 20);
      if ( v118 )
      {
        if ( v119 && curl_strequal(v118, *(_DWORD *)(v156 + 20)) )
        {
LABEL_270:
          spath = v117->spath;
          if ( spath && *(_DWORD *)(v156 + 16) && v117->secure && !*(_BYTE *)(v156 + 33) && !secure )
          {
            v161 = *(_DWORD *)(v156 + 16);
            v121 = strchr(spath + 1, 47);
            v122 = v121 ? v121 - spath : strlen(spath);
            if ( curl_strnequal(spath, v161, v122) )
            {
              if ( data && (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
                Curl_infof(
                  data,
                  "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                  *(_DWORD *)(v156 + 4),
                  *(_DWORD *)(v156 + 20));
              goto LABEL_305;
            }
          }
        }
      }
      else if ( !v119 )
      {
        goto LABEL_270;
      }
    }
    if ( !v116 )
    {
      v116 = 0;
      if ( curl_strequal(v117->name, *(_DWORD *)(v156 + 4)) )
      {
        v123 = v117->domain;
        v124 = *(_DWORD *)(v156 + 20);
        if ( !v123 )
        {
          v125 = v124 == 0;
          goto LABEL_284;
        }
        if ( v124 && curl_strequal(v123, *(_DWORD *)(v156 + 20)) )
        {
          v125 = v117->tailmatch == *(_BYTE *)(v156 + 32);
LABEL_284:
          v126 = (unsigned __int8)v153;
          if ( v125 )
            v126 = 1;
        }
        else
        {
          v126 = v153;
        }
        v153 = v126;
        if ( (v126 & 1) != 0 )
        {
          v127 = v117->spath;
          v116 = 0;
          v128 = 0;
          if ( v127 )
          {
            if ( !*(_DWORD *)(v156 + 16) )
            {
              v128 = v117->spath;
              goto LABEL_292;
            }
            if ( curl_strequal(v127, *(_DWORD *)(v156 + 16)) )
            {
              v128 = v117->spath;
              goto LABEL_292;
            }
            v153 = 0;
            v116 = 0;
          }
          else
          {
LABEL_292:
            v129 = (unsigned __int8)v153;
            if ( (v128 != 0) == (*(_DWORD *)(v156 + 16) == 0) )
              v129 = 0;
            v153 = v129;
            if ( (v129 & 1) != 0 )
            {
              if ( *(_BYTE *)(v156 + 34) )
              {
                delimb = (char *)v117;
                v116 = v156;
              }
              else
              {
                v116 = v156;
                delimb = (char *)v117;
                if ( v117->livecookie )
                  goto LABEL_305;
              }
            }
          }
        }
      }
    }
    next = v117->next;
    if ( v117->next )
      continue;
    break;
  }
  if ( v116 )
  {
    *(_DWORD *)v116 = *(_DWORD *)delimb;
    *(_DWORD *)(v116 + 36) = *((_DWORD *)delimb + 9);
    Curl_cfree(*((_DWORD *)delimb + 1));
    Curl_cfree(*((_DWORD *)delimb + 2));
    Curl_cfree(*((_DWORD *)delimb + 5));
    Curl_cfree(*((_DWORD *)delimb + 3));
    Curl_cfree(*((_DWORD *)delimb + 4));
    *((_DWORD *)delimb + 10) = *(_DWORD *)(v116 + 40);
    *((_QWORD *)delimb + 4) = *(_QWORD *)(v116 + 32);
    *((_QWORD *)delimb + 3) = *(_QWORD *)(v116 + 24);
    *((_QWORD *)delimb + 2) = *(_QWORD *)(v116 + 16);
    v131 = *(_QWORD *)v116;
    *((_QWORD *)delimb + 1) = *(_QWORD *)(v116 + 8);
    *(_QWORD *)delimb = v131;
    timer = (time_t *)v116;
    v9 = delimb;
    Curl_cfree(timer);
  }
  else
  {
    v9 = (char *)v156;
  }
  v132 = v153;
LABEL_336:
  v140 = c;
  if ( data )
  {
    if ( c->running )
    {
      v155 = v132;
      if ( (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
      {
        v141 = "Replaced";
        if ( (v132 & 1) == 0 )
          v141 = "Added";
        v140 = c;
        Curl_infof(data, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld", v141, *((_DWORD *)v9 + 1));
        v132 = v155;
      }
    }
  }
  if ( (v132 & 1) == 0 )
  {
    v142 = &v140->cookies[sd];
    if ( v117 )
      v142 = &v117->next;
    *v142 = (Cookie *)v9;
    ++v140->numcookies;
  }
  LODWORD(v143) = *((_DWORD *)v9 + 6);
  v144 = *((_DWORD *)v9 + 7);
  if ( *((_QWORD *)v9 + 3) )
  {
    HIDWORD(v143) = *((_DWORD *)v9 + 7);
    if ( v143 < v140->next_expiration )
    {
      LODWORD(v140->next_expiration) = v143;
      HIDWORD(v140->next_expiration) = v144;
    }
  }
  return (Cookie *)v9;
}
