Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        char *domain,
        const char *path,
        bool secure)
{
  Cookie *v13; // x28
  __int64 v14; // x0
  Cookie *v15; // x21
  char *i; // x27
  int v17; // w25
  size_t v18; // x0
  size_t v19; // x24
  char *v20; // x23
  size_t v21; // x19
  int v22; // w8
  int v23; // w26
  const char *v24; // x23
  size_t v25; // x0
  size_t j; // x22
  int v27; // w8
  const char *v28; // x28
  int v29; // w8
  int v30; // w8
  unsigned __int8 v31; // w8
  char *v32; // x0
  const char *v33; // x19
  int v34; // w0
  const char *v35; // x19
  size_t v36; // x22
  bool v37; // w0
  char *v38; // x25
  void *v39; // x0
  char is_ipnum; // w24
  const char *v41; // x0
  int v42; // w0
  int v43; // w8
  bool v44; // zf
  __int64 v45; // x0
  __int64 v46; // x8
  char *v47; // x0
  char *v48; // x0
  char *v49; // x0
  const char *v50; // x28
  int v51; // w24
  int v52; // w27
  const char *v53; // x0
  __int64 v54; // x0
  const char *v55; // x0
  char *v56; // x0
  __int64 v57; // x0
  unsigned __int8 v58; // w8
  __int64 v59; // x0
  __int64 v60; // x0
  int v61; // w24
  __int64 v62; // x0
  char *v63; // x0
  char v64; // w23
  const char *v65; // x22
  __int64 v66; // x0
  __int64 v67; // x0
  char *v68; // x0
  char *v69; // x0
  signed __int64 v70; // x19
  char *v71; // x0
  size_t v72; // x19
  char *v73; // x0
  int v74; // w8
  Cookie **v75; // x24
  Cookie *next; // x8
  Cookie *v77; // x19
  int v78; // w25
  Cookie *v79; // x26
  char *v80; // x0
  char *v81; // x1
  const char *spath; // x22
  char *v83; // x23
  char *v84; // x0
  size_t v85; // x2
  char *v86; // x0
  char *v87; // x1
  bool v88; // zf
  int v89; // w8
  char *v90; // x0
  char *v91; // x1
  const char *v92; // x0
  __int128 v94; // q0
  __int128 v95; // q1
  __int128 v96; // q2
  const char *v97; // x2
  Cookie **p_next; // x8
  curl_off_t expires; // x8
  curl_off_t *p_expires; // [xsp+8h] [xbp-E8h]
  char **p_domain; // [xsp+10h] [xbp-E0h]
  char **str; // [xsp+18h] [xbp-D8h]
  char **p_value; // [xsp+20h] [xbp-D0h]
  char v104; // [xsp+2Ch] [xbp-C4h]
  CookieInfo *cookies; // [xsp+30h] [xbp-C0h]
  CookieInfo *cookiesa; // [xsp+30h] [xbp-C0h]
  char **p_name; // [xsp+38h] [xbp-B8h]
  bool v108; // [xsp+48h] [xbp-A8h]
  time_t v111; // [xsp+58h] [xbp-98h]
  char *s2; // [xsp+60h] [xbp-90h]
  char *dest[17]; // [xsp+68h] [xbp-88h] BYREF

  s2 = domain;
  v13 = 0LL;
  v111 = time(0uLL);
  if ( data->req.setcookies > 0x31u )
    return v13;
  v108 = secure;
  v14 = Curl_ccalloc(1LL, 72LL);
  if ( !v14 )
    return 0LL;
  v15 = (Cookie *)v14;
  if ( !httpheader )
  {
    dest[0] = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 0xA;
      v15->httponly = 1;
    }
    if ( *lineptr == 35 )
    {
      Curl_cfree(v15);
      return 0LL;
    }
    v47 = strchr(lineptr, 13);
    if ( v47 )
      *v47 = 0;
    v48 = strchr(lineptr, 10);
    if ( v48 )
      *v48 = 0;
    cookiesa = c;
    v49 = strtok_r(lineptr, "\t", dest);
    if ( !v49 )
    {
      LOBYTE(v52) = 0;
      v51 = 0;
LABEL_188:
      if ( v51 == 6 )
      {
        v66 = Curl_cstrdup(&unk_23ED);
        LOBYTE(v52) = v52 | (v66 == 0);
        if ( v66 )
          v51 = 7;
        else
          v51 = 6;
        v15->value = (char *)v66;
      }
      if ( (v52 & 1) == 0 && v51 == 7 )
      {
        c = cookiesa;
        goto LABEL_214;
      }
LABEL_270:
      freecookie(v15);
      return 0LL;
    }
    v50 = v49;
    v51 = 0;
    v52 = 0;
    while ( 1 )
    {
      switch ( v51 )
      {
        case 0:
          if ( *v50 == 46 )
            v53 = v50 + 1;
          else
            v53 = v50;
          v54 = Curl_cstrdup(v53);
          v51 = 0;
          v15->domain = (char *)v54;
          v52 |= v54 == 0;
          goto LABEL_180;
        case 1:
          v15->tailmatch = (unsigned int)curl_strequal(v50, "TRUE") != 0;
          v51 = 1;
          goto LABEL_180;
        case 2:
          if ( !strcmp("TRUE", v50) || !strcmp("FALSE", v50) )
          {
            v60 = Curl_cstrdup("/");
            v15->path = (char *)v60;
            v61 = v52 | (v60 == 0);
            v62 = Curl_cstrdup("/");
            v52 = v61 | (v62 == 0);
            v15->spath = (char *)v62;
            goto LABEL_167;
          }
          v55 = (const char *)Curl_cstrdup(v50);
          v15->path = (char *)v55;
          if ( !v55 )
          {
            v51 = 2;
            goto LABEL_179;
          }
          v56 = sanitize_cookie_path(v55);
          v15->spath = v56;
          v52 |= v56 == 0LL;
          v51 = 2;
          goto LABEL_180;
        case 3:
LABEL_167:
          v15->secure = 0;
          if ( (unsigned int)curl_strequal(v50, "TRUE") )
          {
            if ( !v108 && !cookiesa->running )
            {
              v51 = 3;
              goto LABEL_179;
            }
            v15->secure = 1;
          }
          v51 = 3;
          goto LABEL_180;
        case 4:
          v52 |= (unsigned int)curlx_strtoofft(v50, 0LL, 10LL, &v15->expires) != 0;
          v51 = 4;
          goto LABEL_180;
        case 5:
          v57 = Curl_cstrdup(v50);
          v15->name = (char *)v57;
          if ( !v57 )
          {
            v51 = 5;
LABEL_179:
            v52 = 1;
            goto LABEL_180;
          }
          if ( (unsigned int)curl_strnequal("__Secure-", v57, 9LL) )
          {
            v58 = v15->prefix | 1;
LABEL_175:
            v15->prefix = v58;
            goto LABEL_176;
          }
          if ( (unsigned int)curl_strnequal("__Host-", v15->name, 7LL) )
          {
            v58 = v15->prefix | 2;
            goto LABEL_175;
          }
LABEL_176:
          v51 = 5;
LABEL_180:
          v63 = strtok_r(0uLL, "\t", dest);
          ++v51;
          if ( (v52 & 1) != 0 )
            goto LABEL_188;
          v50 = v63;
          if ( !v63 )
            goto LABEL_188;
          break;
        case 6:
          v59 = Curl_cstrdup(v50);
          v52 |= v59 == 0;
          v51 = 6;
          v15->value = (char *)v59;
          goto LABEL_180;
        default:
          goto LABEL_180;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
    Curl_cfree(v15);
    goto LABEL_212;
  }
  cookies = c;
  p_name = &v15->name;
  p_domain = &v15->domain;
  str = &v15->path;
  p_value = &v15->value;
  v104 = 0;
  p_expires = &v15->expires;
  do
  {
    for ( i = lineptr; ; ++i )
    {
      v17 = (unsigned __int8)*i;
      if ( v17 != 32 && v17 != 9 )
        break;
    }
    v18 = strcspn(i, ";\t\r\n=");
    if ( !v18 )
      goto LABEL_118;
    v19 = v18;
    v20 = &i[v18];
    v21 = v18;
    do
    {
      v22 = (unsigned __int8)i[v21 - 1];
      if ( v22 != 32 && v22 != 9 )
        break;
      --v21;
    }
    while ( v21 );
    v23 = (unsigned __int8)*v20;
    if ( v23 == 61 )
    {
      v24 = &i[v18 + 1];
      v25 = strcspn(v24, ";\r\n");
      for ( j = v25; j; --j )
      {
        v27 = (unsigned __int8)i[v19 + j];
        if ( v27 != 32 && v27 != 9 )
          break;
      }
      if ( j )
      {
        v28 = &i[v19 + 1 + j];
        while ( 1 )
        {
          v29 = *(unsigned __int8 *)v24;
          if ( v29 != 32 && v29 != 9 )
            break;
          --j;
          ++v24;
          if ( !j )
            goto LABEL_33;
        }
      }
      v28 = v24;
LABEL_33:
      v20 = &i[v19 + 1 + v25];
      if ( memchr(v28, 9, j) )
      {
        freecookie(v15);
        if ( data && (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
        {
          Curl_infof(data, "cookie contains TAB, dropping");
          v30 = 1;
          goto LABEL_115;
        }
LABEL_48:
        v30 = 1;
        goto LABEL_115;
      }
    }
    else
    {
      j = 0LL;
      v28 = 0LL;
    }
    if ( v21 > 0xFFE || j > 0xFFE || j + v21 > 0x1000 )
    {
      freecookie(v15);
      if ( !data || (*((_BYTE *)&data->set + 2238) & 0x10) == 0 )
        goto LABEL_48;
      Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v21, j);
      v30 = 1;
      goto LABEL_115;
    }
    if ( v17 == 95 && v21 >= 7 && i[1] == 95 )
    {
      if ( (unsigned int)curl_strnequal("__Secure-", i, 9LL) )
      {
        v31 = v15->prefix | 1;
      }
      else
      {
        if ( !(unsigned int)curl_strnequal("__Host-", i, 7LL) )
          goto LABEL_53;
        v31 = v15->prefix | 2;
      }
      v15->prefix = v31;
    }
LABEL_53:
    if ( !*p_name )
    {
      if ( v23 != 61 )
        goto LABEL_75;
      strstore(p_name, i, v21);
      strstore(p_value, v28, j);
      v33 = *p_name;
      if ( !*p_name || !*p_value )
        goto LABEL_75;
      if ( invalid_octets(*p_value) || invalid_octets(v33) )
      {
        if ( data && (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
LABEL_75:
        v30 = 6;
        v104 = 1;
        goto LABEL_115;
      }
      goto LABEL_114;
    }
    if ( !j )
    {
      if ( v21 == 8 )
      {
        if ( (unsigned int)curl_strnequal("httponly", i, 8LL) )
        {
          v15->httponly = 1;
          goto LABEL_114;
        }
      }
      else if ( v21 == 6 && (unsigned int)curl_strnequal("secure", i, 6LL) )
      {
        if ( !v108 && cookies->running )
          goto LABEL_75;
        v15->secure = 1;
        goto LABEL_114;
      }
      if ( v23 != 61 )
        goto LABEL_114;
    }
    if ( v21 == 7 )
    {
      if ( (unsigned int)curl_strnequal("version", i, 7LL) )
        goto LABEL_114;
      if ( !(unsigned int)curl_strnequal("max-age", i, 7LL) )
      {
        if ( (unsigned int)curl_strnequal("expires", i, 7LL) && j <= 0x7F && !v15->expires )
        {
          memcpy(dest, v28, j);
          *((_BYTE *)dest + j) = 0;
          v45 = Curl_getdate_capped(dest);
          v15->expires = v45;
          if ( v45 )
          {
            if ( (v45 & 0x8000000000000000LL) != 0 )
              v15->expires = 0LL;
          }
          else
          {
            v15->expires = 1LL;
          }
        }
        goto LABEL_114;
      }
      if ( *v28 == 34 )
        v41 = v28 + 1;
      else
        v41 = v28;
      v42 = curlx_strtoofft(v41, 0LL, 10LL, p_expires);
      if ( v42 )
      {
        if ( v42 != 2 )
        {
          if ( v42 == 1 )
LABEL_141:
            *p_expires = 0x7FFFFFFFFFFFFFFFLL;
LABEL_114:
          v30 = 0;
          goto LABEL_115;
        }
      }
      else
      {
        v46 = *p_expires;
        if ( *p_expires )
        {
          if ( 0x7FFFFFFFFFFFFFFFLL - v111 >= v46 )
          {
            *p_expires = v46 + v111;
            goto LABEL_114;
          }
          goto LABEL_141;
        }
      }
      *p_expires = 1LL;
      goto LABEL_114;
    }
    if ( v21 != 6 )
    {
      if ( v21 == 4 )
      {
        if ( (unsigned int)curl_strnequal("path", i, 4LL) )
        {
          strstore(str, v28, j);
          if ( !*str )
            goto LABEL_75;
          Curl_cfree(v15->spath);
          v32 = sanitize_cookie_path(v15->path);
          v15->spath = v32;
          if ( !v32 )
            goto LABEL_75;
        }
      }
      goto LABEL_114;
    }
    v34 = curl_strnequal("domain", i, 6LL);
    if ( !j || !v34 )
      goto LABEL_114;
    if ( *v28 == 46 )
      v35 = v28 + 1;
    else
      v35 = v28;
    v36 = j - (*v28 == 46);
    v37 = bad_domain(v35, v36);
    v38 = s2;
    if ( v37 )
      v38 = ":";
    if ( v38 )
      v39 = v38;
    else
      v39 = (void *)v35;
    is_ipnum = Curl_host_is_ipnum(v39);
    s2 = v38;
    if ( v38 )
    {
      if ( (is_ipnum & 1) != 0 )
      {
        if ( !strncmp(v35, s2, v36) && v36 == strlen(s2) )
          goto LABEL_93;
        if ( (is_ipnum & 1) != 0 )
          goto LABEL_134;
      }
      if ( !cookie_tailmatch(v35, v36, s2) )
      {
LABEL_134:
        if ( data && (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
          Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v35);
        v104 = 1;
        goto LABEL_114;
      }
    }
LABEL_93:
    strstore(p_domain, v35, v36);
    if ( *p_domain )
      v30 = 0;
    else
      v30 = 6;
    if ( !(is_ipnum & 1 | (*p_domain == 0LL)) )
    {
      v15->tailmatch = 1;
      goto LABEL_114;
    }
    v104 |= *p_domain == 0LL;
    if ( *p_domain )
      goto LABEL_114;
LABEL_115:
    i = v20;
    if ( v30 )
      break;
LABEL_118:
    while ( 1 )
    {
      v43 = (unsigned __int8)*i;
      if ( v43 != 32 && v43 != 9 )
        break;
      ++i;
    }
    v44 = v43 == 59;
    if ( v43 == 59 )
      v30 = 0;
    else
      v30 = 6;
    if ( v44 )
      lineptr = i + 1;
    else
      lineptr = i;
  }
  while ( !v30 );
  if ( v30 == 6 )
  {
    c = cookies;
    v64 = v104;
    if ( (v104 & 1) != 0 )
    {
      v65 = path;
    }
    else
    {
      v65 = path;
      if ( s2 && !v15->domain )
      {
        v67 = Curl_cstrdup(s2);
        v64 = v104 | (v67 == 0);
        v15->domain = (char *)v67;
      }
    }
    if ( (v64 & 1) != 0
      || !v65
      || v15->path
      || ((v68 = strchr(v65, 63)) == 0LL ? (v69 = strrchr(v65, 47)) : (v69 = (char *)Curl_memrchr(v65, 47LL, v68 - v65)),
          !v69) )
    {
LABEL_200:
      if ( (v64 & 1) != 0 || !v15->name )
        goto LABEL_211;
      v30 = 0;
      ++data->req.setcookies;
    }
    else
    {
      v70 = v69 - v65;
      v71 = (char *)Curl_cmalloc(v69 - v65 + 2);
      v15->path = v71;
      if ( v71 )
      {
        v72 = v70 + 1;
        memcpy(v71, v65, v72);
        v15->path[v72] = 0;
        v73 = sanitize_cookie_path(v15->path);
        v64 |= v73 == 0LL;
        v15->spath = v73;
        goto LABEL_200;
      }
LABEL_211:
      freecookie(v15);
LABEL_212:
      v30 = 1;
    }
  }
  else
  {
    c = cookies;
  }
  if ( v30 )
    return 0LL;
LABEL_214:
  if ( (v15->prefix & 1) != 0 && !v15->secure )
    goto LABEL_270;
  if ( (v15->prefix & 2) != 0 )
  {
    if ( !v15->secure )
      goto LABEL_270;
    v92 = v15->path;
    if ( !v92 || strcmp(v92, "/") || v15->tailmatch )
      goto LABEL_270;
  }
  if ( !c->running && c->newsession && !v15->expires )
    goto LABEL_270;
  v15->livecookie = c->running;
  v74 = c->lastct + 1;
  c->lastct = v74;
  v15->creationtime = v74;
  if ( !noexpire )
    remove_expired(c);
  v75 = &c->cookies[cookiehash(v15->domain)];
  next = *v75;
  if ( *v75 )
  {
    v77 = 0LL;
    v13 = 0LL;
    v78 = 0;
    while ( 1 )
    {
      v79 = next;
      if ( !(unsigned int)curl_strequal(next->name, v15->name) )
        goto LABEL_240;
      v80 = v79->domain;
      if ( v80 )
      {
        v81 = v15->domain;
        if ( !v81 || !(unsigned int)curl_strequal(v80, v81) )
          goto LABEL_240;
      }
      else if ( v15->domain )
      {
        goto LABEL_240;
      }
      spath = v79->spath;
      if ( spath )
      {
        v83 = v15->spath;
        if ( v83 )
        {
          if ( v79->secure && !v15->secure && !v108 )
          {
            v84 = strchr(spath + 1, 47);
            v85 = v84 ? v84 - spath : strlen(spath);
            if ( (unsigned int)curl_strnequal(spath, v83, v85) )
            {
              if ( data && (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
                Curl_infof(
                  data,
                  "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                  v15->name,
                  v15->domain);
              goto LABEL_270;
            }
          }
        }
      }
LABEL_240:
      if ( v77 )
        goto LABEL_223;
      if ( !(unsigned int)curl_strequal(v79->name, v15->name) )
        goto LABEL_222;
      v86 = v79->domain;
      if ( v86 )
      {
        v87 = v15->domain;
        if ( !v87 || !(unsigned int)curl_strequal(v86, v87) )
          goto LABEL_252;
        v88 = v79->tailmatch == v15->tailmatch;
      }
      else
      {
        v88 = v15->domain == 0LL;
      }
      v89 = v88;
      v78 |= v89;
LABEL_252:
      if ( (v78 & 1) != 0 )
      {
        v90 = v79->spath;
        if ( v90 )
        {
          v91 = v15->spath;
          if ( v91 )
          {
            if ( !(unsigned int)curl_strequal(v90, v91) )
            {
              v78 = 0;
LABEL_222:
              v77 = 0LL;
              goto LABEL_223;
            }
          }
        }
        v78 &= (v79->spath != 0LL) ^ (v15->spath == 0LL);
      }
      if ( (v78 & 1) == 0 )
        goto LABEL_222;
      if ( v15->livecookie )
      {
        v13 = v79;
        v77 = v15;
      }
      else
      {
        v13 = v79;
        v77 = v15;
        if ( v79->livecookie )
          goto LABEL_270;
      }
LABEL_223:
      next = v79->next;
      if ( !v79->next )
        goto LABEL_274;
    }
  }
  LOBYTE(v78) = 0;
  v13 = 0LL;
  v77 = 0LL;
  v79 = 0LL;
LABEL_274:
  if ( v77 )
  {
    v77->next = v13->next;
    v77->creationtime = v13->creationtime;
    Curl_cfree(v13->name);
    Curl_cfree(v13->value);
    Curl_cfree(v13->domain);
    Curl_cfree(v13->path);
    Curl_cfree(v13->spath);
    *(_OWORD *)&v13->next = *(_OWORD *)&v77->next;
    v95 = *(_OWORD *)&v77->spath;
    v94 = *(_OWORD *)&v77->expires;
    v96 = *(_OWORD *)&v77->value;
    *(_QWORD *)&v13->prefix = *(_QWORD *)&v77->prefix;
    *(_OWORD *)&v13->spath = v95;
    *(_OWORD *)&v13->expires = v94;
    *(_OWORD *)&v13->value = v96;
    Curl_cfree(v77);
  }
  else
  {
    v13 = v15;
  }
  if ( data && c->running && (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
  {
    if ( (v78 & 1) != 0 )
      v97 = "Replaced";
    else
      v97 = "Added";
    Curl_infof(
      data,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
      v97,
      v13->name,
      v13->value,
      v13->domain,
      v13->path,
      v13->expires);
  }
  if ( (v78 & 1) == 0 )
  {
    if ( v79 )
      p_next = &v79->next;
    else
      p_next = v75;
    *p_next = v13;
    ++c->numcookies;
  }
  expires = v13->expires;
  if ( expires && expires < c->next_expiration )
    c->next_expiration = expires;
  return v13;
}
