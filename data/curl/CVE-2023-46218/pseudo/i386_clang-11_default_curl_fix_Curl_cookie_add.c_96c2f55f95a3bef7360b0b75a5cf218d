Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        const char *domain,
        char *path,
        bool secure)
{
  time_t v8; // eax
  char *v9; // ebp
  int v10; // eax
  char *j; // edi
  int v12; // esi
  char *v13; // ebp
  char *i; // esi
  size_t v15; // eax
  size_t v16; // ecx
  unsigned int v17; // edi
  char v18; // al
  size_t v19; // eax
  size_t v20; // ecx
  const char *v21; // edx
  const char *v22; // ebp
  char v23; // cl
  unsigned int v24; // ecx
  const char *v25; // edx
  const char *v26; // ebp
  unsigned int v27; // ebp
  int v28; // eax
  unsigned int v29; // ebp
  int v30; // eax
  const char *v31; // eax
  char *v32; // edi
  size_t v33; // eax
  size_t v34; // esi
  const char *v35; // eax
  const char *v36; // esi
  int v37; // esi
  char v38; // cl
  const char *v39; // ebp
  int v40; // eax
  const char *v41; // ebp
  size_t v42; // edi
  int *v43; // esi
  const char *v44; // eax
  int v45; // eax
  const char *v46; // edi
  unsigned int v47; // esi
  int v48; // eax
  const char *v49; // edx
  const char *v50; // edi
  _BYTE *v51; // eax
  const char *v52; // eax
  const char *v53; // ebp
  size_t v54; // eax
  char is_ipnum; // cl
  const char *v56; // ebp
  int v57; // eax
  const char *v58; // eax
  const char *v59; // ebp
  size_t v60; // esi
  const char *v61; // ebp
  int v62; // eax
  int v63; // eax
  char v64; // bp
  int v65; // eax
  int v66; // eax
  int v67; // ecx
  int v68; // eax
  int v69; // ecx
  char *v70; // eax
  char *v71; // eax
  char *v72; // eax
  const char *v73; // edi
  int v74; // edx
  int v75; // ecx
  int v76; // eax
  int v77; // eax
  int v78; // ebp
  int v79; // eax
  const char *v80; // eax
  char *v81; // edi
  size_t v82; // eax
  size_t v83; // ebp
  int v84; // eax
  int v85; // eax
  int v86; // eax
  int v87; // eax
  int v88; // eax
  int v89; // ebp
  int v90; // eax
  int v91; // ecx
  CookieInfo *v92; // eax
  char *v93; // eax
  int v94; // ebp
  int v95; // eax
  _DWORD *v96; // edi
  char v97; // al
  const char *v98; // ebp
  int v99; // eax
  char v100; // cl
  char *v101; // eax
  char *v102; // eax
  int v103; // edi
  void *v104; // eax
  size_t v105; // edi
  const char *v106; // eax
  char *v107; // edi
  size_t v108; // eax
  size_t v109; // ebp
  char v110; // al
  char v111; // cl
  char v112; // al
  bool running; // al
  int v114; // eax
  unsigned int next_expiration; // eax
  unsigned int next_expiration_high; // ecx
  Cookie *next; // eax
  int v118; // ebp
  Cookie *v119; // esi
  char *v120; // eax
  int v121; // ecx
  const char *spath; // edi
  char *v123; // eax
  size_t v124; // eax
  char *v125; // eax
  int v126; // ecx
  bool v127; // zf
  int v128; // eax
  char *v129; // eax
  char *v130; // ecx
  int v131; // eax
  __int64 v133; // xmm0_8
  char v134; // al
  int v135; // eax
  CookieInfo *v136; // edi
  Cookie *v137; // esi
  Cookie *v138; // ebp
  curl_off_t v139; // rax
  int expires_high; // ecx
  Cookie **p_next; // eax
  CookieInfo *v142; // edi
  const char *v143; // ecx
  Cookie **v144; // eax
  curl_off_t v145; // rax
  int v146; // ecx
  time_t *timer; // [esp+0h] [ebp-ECh]
  char *reject; // [esp+4h] [ebp-E8h]
  size_t n; // [esp+8h] [ebp-E4h]
  int v150; // [esp+Ch] [ebp-E0h]
  char *v151; // [esp+28h] [ebp-C4h]
  size_t v152; // [esp+28h] [ebp-C4h]
  size_t v153; // [esp+28h] [ebp-C4h]
  int v154; // [esp+28h] [ebp-C4h]
  int v155; // [esp+28h] [ebp-C4h]
  Cookie *v156; // [esp+28h] [ebp-C4h]
  char v157; // [esp+28h] [ebp-C4h]
  int v158; // [esp+2Ch] [ebp-C0h]
  size_t v159; // [esp+30h] [ebp-BCh]
  size_t v160; // [esp+30h] [ebp-BCh]
  size_t v161; // [esp+30h] [ebp-BCh]
  size_t v162; // [esp+30h] [ebp-BCh]
  size_t v163; // [esp+30h] [ebp-BCh]
  Cookie **v164; // [esp+30h] [ebp-BCh]
  const char *s; // [esp+34h] [ebp-B8h]
  const char *sa; // [esp+34h] [ebp-B8h]
  const char *sb; // [esp+34h] [ebp-B8h]
  const char *se; // [esp+34h] [ebp-B8h]
  void *sc; // [esp+34h] [ebp-B8h]
  size_t sd; // [esp+34h] [ebp-B8h]
  char v171; // [esp+38h] [ebp-B4h]
  char v172; // [esp+38h] [ebp-B4h]
  char delim; // [esp+3Ch] [ebp-B0h]
  char *delima; // [esp+3Ch] [ebp-B0h]
  char *delimb; // [esp+3Ch] [ebp-B0h]
  char v177; // [esp+44h] [ebp-A8h]
  int v178; // [esp+44h] [ebp-A8h]
  int *v179; // [esp+48h] [ebp-A4h]
  int v180; // [esp+4Ch] [ebp-A0h]
  __int64 v181; // [esp+54h] [ebp-98h]
  char *dest[36]; // [esp+5Ch] [ebp-90h] BYREF

  v8 = time(0);
  v9 = 0;
  if ( data->req.setcookies > 0x31u )
    return (Cookie *)v9;
  v180 = v8;
  v10 = Curl_ccalloc(1, 44);
  if ( !v10 )
    return (Cookie *)v9;
  j = lineptr;
  v12 = v10;
  v158 = v10;
  if ( !httpheader )
  {
    dest[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      j = lineptr + 10;
      *(_BYTE *)(v12 + 35) = 1;
      if ( lineptr[10] == 35 )
        goto LABEL_139;
    }
    else if ( *lineptr == 35 )
    {
      goto LABEL_139;
    }
    v70 = strchr(j, 13);
    if ( v70 )
      *v70 = 0;
    v71 = strchr(j, 10);
    if ( v71 )
      *v71 = 0;
    v72 = strtok_r(j, "\t", dest);
    if ( !v72 )
      goto LABEL_209;
    v73 = v72;
    v74 = 0;
    v75 = 0;
    sc = (void *)(v12 + 24);
    while ( 1 )
    {
      v154 = v75;
      switch ( v74 )
      {
        case 0:
          if ( *v73 == 46 )
            ++v73;
          v76 = Curl_cstrdup(v73);
          *(_DWORD *)(v12 + 20) = v76;
          v127 = v76 == 0;
          v77 = (unsigned __int8)v154;
          if ( v127 )
            v77 = 1;
          v78 = 0;
          v154 = v77;
          goto LABEL_201;
        case 1:
          v78 = 1;
          *(_BYTE *)(v12 + 32) = curl_strequal(v73, "TRUE") != 0;
          goto LABEL_201;
        case 2:
          if ( !strcmp("TRUE", v73) || !strcmp("FALSE", v73) )
          {
            v89 = Curl_cstrdup("/");
            *(_DWORD *)(v158 + 12) = v89;
            v12 = v158;
            v90 = Curl_cstrdup("/");
            *(_DWORD *)(v158 + 16) = v90;
            v91 = (unsigned __int8)v154;
            if ( !v90 )
              v91 = 1;
            if ( !v89 )
              v91 = 1;
            v154 = v91;
            goto LABEL_182;
          }
          v79 = Curl_cstrdup(v73);
          *(_DWORD *)(v12 + 12) = v79;
          if ( !v79 )
          {
            v84 = 1;
            goto LABEL_200;
          }
          v80 = (const char *)Curl_cstrdup(v79);
          if ( !v80 )
          {
            LOBYTE(v84) = v154;
            v81 = 0;
            goto LABEL_198;
          }
          v81 = (char *)v80;
          v82 = strlen(v80);
          v83 = v82;
          if ( *v81 == 34 )
          {
            memmove(v81, v81 + 1, v82);
            --v83;
          }
          if ( v83 )
          {
            if ( v81[v83 - 1] == 34 )
              v81[--v83] = 0;
            if ( *v81 == 47 )
            {
              if ( v83 )
              {
                LOBYTE(v84) = v154;
                if ( v81[v83 - 1] == 47 )
                  v81[v83 - 1] = 0;
                goto LABEL_198;
              }
              goto LABEL_197;
            }
LABEL_196:
            Curl_cfree(v81);
            v81 = (char *)Curl_strndup("/", 1);
            goto LABEL_197;
          }
          if ( *v81 != 47 )
            goto LABEL_196;
LABEL_197:
          LOBYTE(v84) = v154;
LABEL_198:
          v84 = (unsigned __int8)v84;
          *(_DWORD *)(v12 + 16) = v81;
          if ( !v81 )
            v84 = 1;
LABEL_200:
          v154 = v84;
          v78 = 2;
LABEL_201:
          v93 = strtok_r(0, "\t", dest);
          v75 = v154;
          v94 = v78 + 1;
          v74 = v94;
          if ( !v93 || (v73 = v93, (v154 & 1) != 0) )
          {
            if ( v94 == 6 )
            {
              v95 = Curl_cstrdup(&L_str_22);
              *(_DWORD *)(v12 + 8) = v95;
              LOBYTE(v75) = 1;
              if ( v95 )
                LOBYTE(v75) = v154;
              v74 = (v95 == 0) ^ 7;
            }
            if ( (v75 & 1) == 0 && v74 == 7 )
              goto LABEL_256;
LABEL_209:
            v96 = (_DWORD *)v12;
            goto LABEL_308;
          }
          break;
        case 3:
LABEL_182:
          *(_BYTE *)(v12 + 33) = 0;
          if ( !curl_strequal(v73, "TRUE") )
            goto LABEL_186;
          if ( secure || (v92 = c, c->running) )
          {
            *(_BYTE *)(v12 + 33) = 1;
LABEL_186:
            v78 = 3;
          }
          else
          {
            LOBYTE(v92) = 1;
            v78 = 3;
            v154 = (int)v92;
          }
          goto LABEL_201;
        case 4:
          v127 = curlx_strtoofft(v73, 0, 10, sc) == 0;
          v78 = 4;
          v85 = (unsigned __int8)v154;
          if ( !v127 )
            v85 = 1;
          v154 = v85;
          goto LABEL_201;
        case 5:
          v86 = Curl_cstrdup(v73);
          *(_DWORD *)(v12 + 4) = v86;
          if ( v86 )
          {
            if ( curl_strnequal("__Secure-", v86, 9) )
            {
              *(_BYTE *)(v12 + 40) |= 1u;
              v78 = 5;
            }
            else
            {
              if ( curl_strnequal("__Host-", *(_DWORD *)(v12 + 4), 7) )
                *(_BYTE *)(v12 + 40) |= 2u;
              v78 = 5;
            }
          }
          else
          {
            v78 = 5;
            v154 = 1;
          }
          goto LABEL_201;
        case 6:
          v87 = Curl_cstrdup(v73);
          *(_DWORD *)(v12 + 8) = v87;
          v127 = v87 == 0;
          v78 = 6;
          v88 = (unsigned __int8)v154;
          if ( v127 )
            v88 = 1;
          v154 = v88;
          goto LABEL_201;
        default:
          v78 = v74;
          goto LABEL_201;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_139:
    Curl_cfree(v12);
    return 0;
  }
  v171 = 0;
  v179 = (int *)(v12 + 24);
  LODWORD(v181) = ~v180;
  HIDWORD(v181) = 0x7FFFFFFF - (v180 >> 31);
  while ( 1 )
  {
    v13 = j + 1;
    for ( i = j; *i == 32 || *i == 9; ++i )
      ++v13;
    delim = *i;
    v15 = strcspn(i, ";\t\r\n=");
    if ( !v15 )
    {
      v151 = i;
      goto LABEL_66;
    }
    v16 = v15;
    v17 = v15;
    v151 = &i[v15];
    while ( 1 )
    {
      v18 = i[v17 - 1];
      if ( v18 != 32 && v18 != 9 )
        break;
      if ( !--v17 )
      {
        v17 = 0;
        break;
      }
    }
    if ( *v151 == 61 )
    {
      v152 = v16;
      s = &i[v16 + 1];
      v19 = strcspn(s, ";\r\n");
      v20 = v19 + v152;
      v153 = v19 + v152;
      if ( v19 )
      {
        v21 = s;
        v22 = &v13[v20];
        while ( 1 )
        {
          v23 = *(v22 - 1);
          if ( v23 != 32 && v23 != 9 )
            break;
          --v19;
          --v22;
          if ( !v19 )
            goto LABEL_31;
        }
        while ( *v21 == 32 || *v21 == 9 )
        {
          ++v21;
          if ( !--v19 )
          {
            v19 = 0;
            v21 = v22;
            break;
          }
        }
      }
      else
      {
        v21 = s;
LABEL_31:
        v19 = 0;
      }
      v159 = v19;
      v26 = v21;
      if ( memchr(v21, 9, v19) )
      {
        Curl_cfree(*(_DWORD *)(v158 + 20));
        Curl_cfree(*(_DWORD *)(v158 + 12));
        Curl_cfree(*(_DWORD *)(v158 + 16));
        Curl_cfree(*(_DWORD *)(v158 + 4));
        Curl_cfree(*(_DWORD *)(v158 + 8));
        Curl_cfree(v158);
        v9 = 0;
        if ( (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
          Curl_infof(data, "cookie contains TAB, dropping", n, v150);
        return (Cookie *)v9;
      }
      v24 = v159;
      v25 = v26;
      v151 = &i[v153 + 1];
      v177 = 1;
    }
    else
    {
      v24 = 0;
      v25 = 0;
      v177 = 0;
    }
    if ( v17 > 0xFFE || v24 > 0xFFE || v24 + v17 >= 0x1001 )
    {
      v162 = v24;
      Curl_cfree(*(_DWORD *)(v158 + 20));
      Curl_cfree(*(_DWORD *)(v158 + 12));
      Curl_cfree(*(_DWORD *)(v158 + 16));
      Curl_cfree(*(_DWORD *)(v158 + 4));
      Curl_cfree(*(_DWORD *)(v158 + 8));
      Curl_cfree(v158);
      if ( (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v17, v162);
      return 0;
    }
    if ( delim == 95 && v17 >= 7 && i[1] == 95 )
    {
      sa = v25;
      v27 = v24;
      if ( curl_strnequal("__Secure-", i, 9) )
      {
        v24 = v27;
        *(_BYTE *)(v158 + 40) |= 1u;
        v25 = sa;
      }
      else
      {
        v28 = curl_strnequal("__Host-", i, 7);
        v25 = sa;
        v24 = v27;
        if ( v28 )
          *(_BYTE *)(v158 + 40) |= 2u;
      }
    }
    if ( !*(_DWORD *)(v158 + 4) )
    {
      if ( !v177 )
        goto LABEL_307;
      v160 = v24;
      se = v25;
      Curl_cfree(0);
      *(_DWORD *)(v158 + 4) = Curl_strndup(i, v17);
      Curl_cfree(*(_DWORD *)(v158 + 8));
      v35 = (const char *)Curl_strndup(se, v160);
      *(_DWORD *)(v158 + 8) = v35;
      if ( !v35 )
        goto LABEL_307;
      v36 = *(const char **)(v158 + 4);
      if ( !v36 )
        goto LABEL_307;
      if ( v35[strcspn(v35, invalid_octets_badoctets)] || v36[strcspn(v36, invalid_octets_badoctets)] )
      {
        if ( (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped", n, v150);
LABEL_307:
        v96 = (_DWORD *)v158;
LABEL_308:
        Curl_cfree(v96[5]);
        Curl_cfree(v96[3]);
        Curl_cfree(v96[4]);
        Curl_cfree(v96[1]);
        Curl_cfree(v96[2]);
        Curl_cfree(v96);
        return 0;
      }
      goto LABEL_66;
    }
    if ( v24 )
      break;
    if ( v17 == 8 )
    {
      v56 = v25;
      v57 = curl_strnequal("httponly", i, 8);
      v24 = 0;
      v25 = v56;
      if ( v57 )
      {
        *(_BYTE *)(v158 + 35) = 1;
        goto LABEL_66;
      }
    }
    else if ( v17 == 6 )
    {
      v39 = v25;
      v40 = curl_strnequal("secure", i, 6);
      v24 = 0;
      v25 = v39;
      if ( v40 )
      {
        if ( !secure && c->running )
          goto LABEL_307;
        *(_BYTE *)(v158 + 33) = 1;
        goto LABEL_66;
      }
    }
    if ( v177 )
      break;
LABEL_66:
    v37 = v158;
    for ( j = v151 + 1; ; ++j )
    {
      v38 = *(j - 1);
      if ( v38 != 32 && v38 != 9 )
        break;
    }
    if ( v38 != 59 )
      goto LABEL_210;
  }
  if ( v17 == 7 )
  {
    v41 = v25;
    v42 = v24;
    if ( curl_strnequal("version", i, 7) )
      goto LABEL_66;
    if ( curl_strnequal("max-age", i, 7) )
    {
      v43 = v179;
      v44 = v41 + 1;
      if ( *v41 != 34 )
        v44 = v41;
      v45 = curlx_strtoofft(v44, 0, 10, v179);
      if ( v45 )
      {
        if ( v45 != 2 )
        {
          if ( v45 != 1 )
            goto LABEL_66;
          goto LABEL_129;
        }
      }
      else
      {
        v66 = *v179;
        v67 = v179[1];
        if ( *(_QWORD *)v179 )
        {
          if ( v181 >= __SPAIR64__(v67, v66) )
          {
            v69 = (v180 + __PAIR64__(v67, v66)) >> 32;
            v68 = v180 + v66;
            goto LABEL_130;
          }
LABEL_129:
          v68 = -1;
          v69 = 0x7FFFFFFF;
LABEL_130:
          *v179 = v68;
          v179[1] = v69;
          goto LABEL_66;
        }
      }
    }
    else
    {
      if ( !curl_strnequal("expires", i, 7) )
        goto LABEL_66;
      v43 = v179;
      if ( v42 > 0x7F || *(_QWORD *)v179 )
        goto LABEL_66;
      memcpy(dest, v41, v42);
      *((_BYTE *)dest + v42) = 0;
      v63 = Curl_getdate_capped(dest);
      *(_QWORD *)v179 = v63;
      if ( v63 )
      {
        if ( v63 < 0 )
        {
          v179[1] = 0;
          *v179 = 0;
        }
        goto LABEL_66;
      }
    }
    v43[1] = 0;
    *v43 = 1;
    goto LABEL_66;
  }
  if ( v17 != 6 )
  {
    if ( v17 == 4 )
    {
      sb = v25;
      v29 = v24;
      if ( curl_strnequal("path", i, 4) )
      {
        Curl_cfree(*(_DWORD *)(v158 + 12));
        v30 = Curl_strndup(sb, v29);
        *(_DWORD *)(v158 + 12) = v30;
        if ( !v30 )
          goto LABEL_307;
        Curl_cfree(*(_DWORD *)(v158 + 16));
        v31 = (const char *)Curl_cstrdup(*(_DWORD *)(v158 + 12));
        if ( !v31 )
        {
          *(_DWORD *)(v158 + 16) = 0;
          goto LABEL_307;
        }
        v32 = (char *)v31;
        v33 = strlen(v31);
        v34 = v33;
        if ( *v32 == 34 )
        {
          memmove(v32, v32 + 1, v33);
          --v34;
        }
        if ( v34 )
        {
          if ( v32[v34 - 1] == 34 )
            v32[--v34] = 0;
          if ( *v32 != 47 )
          {
LABEL_113:
            Curl_cfree(v32);
            v62 = Curl_strndup("/", 1);
            *(_DWORD *)(v158 + 16) = v62;
            if ( !v62 )
              goto LABEL_307;
            goto LABEL_66;
          }
          if ( v34 && v32[v34 - 1] == 47 )
            v32[v34 - 1] = 0;
        }
        else if ( *v32 != 47 )
        {
          goto LABEL_113;
        }
        *(_DWORD *)(v158 + 16) = v32;
      }
    }
    goto LABEL_66;
  }
  reject = i;
  v46 = v25;
  v47 = v24;
  v48 = curl_strnequal("domain", reject, 6);
  if ( !v47 || !v48 )
    goto LABEL_66;
  v49 = v46;
  v50 = v46 + 1;
  if ( *v49 != 46 )
    v50 = v49;
  v161 = v47 - (*v49 == 46);
  if ( v161 == 9 && curl_strnequal(v50, "localhost", 9)
    || (v51 = memchr(v50, 46, v161)) != 0 && (unsigned int)(&v50[v161] - v51) > 1 )
  {
    v58 = domain;
    if ( !domain )
      v58 = v50;
    is_ipnum = Curl_host_is_ipnum(v58);
    v52 = domain;
    v37 = v158;
    if ( !domain )
    {
      domain = 0;
      goto LABEL_122;
    }
    if ( is_ipnum )
      goto LABEL_95;
  }
  else
  {
    v127 = (unsigned __int8)Curl_host_is_ipnum(":") == 0;
    v52 = ":";
    v37 = v158;
    if ( !v127 )
    {
LABEL_95:
      v53 = v52;
      domain = v52;
      if ( strncmp(v50, v52, v161) )
        goto LABEL_134;
      v54 = strlen(v53);
      is_ipnum = 1;
      if ( v161 != v54 )
        goto LABEL_134;
      goto LABEL_122;
    }
  }
  v59 = v52;
  v60 = strlen(v52);
  domain = v59;
  if ( v60 < v161 || (v61 = &v59[v60 - v161], !curl_strnequal(v50, v61, v161)) )
  {
LABEL_134:
    v171 = 1;
    if ( (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
      Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v50, v150);
    goto LABEL_66;
  }
  if ( v60 == v161 )
  {
    v37 = v158;
    is_ipnum = 0;
  }
  else
  {
    v37 = v158;
    if ( *(v61 - 1) != 46 )
      goto LABEL_134;
    is_ipnum = 0;
  }
LABEL_122:
  v64 = is_ipnum;
  Curl_cfree(*(_DWORD *)(v37 + 20));
  v65 = Curl_strndup(v50, v161);
  *(_DWORD *)(v37 + 20) = v65;
  if ( !v64 && v65 )
  {
    *(_BYTE *)(v37 + 32) = 1;
    goto LABEL_66;
  }
  if ( v65 )
    goto LABEL_66;
  v171 = 1;
LABEL_210:
  v97 = v171;
  if ( (v171 & 1) != 0 )
  {
    v98 = path;
    goto LABEL_218;
  }
  if ( !domain )
  {
    v98 = path;
    if ( (v171 & 1) != 0 )
      goto LABEL_253;
    goto LABEL_219;
  }
  v98 = path;
  if ( *(_DWORD *)(v37 + 20) )
  {
LABEL_218:
    if ( (v171 & 1) != 0 )
      goto LABEL_253;
LABEL_219:
    if ( !v98 || *(_DWORD *)(v37 + 12) )
      goto LABEL_253;
    v172 = v97;
    v101 = strchr(v98, 63);
    if ( v101 )
      v102 = (char *)Curl_memrchr(v98, 47, v101 - v98);
    else
      v102 = strrchr(v98, 47);
    if ( !v102 )
    {
      v97 = v172;
      goto LABEL_253;
    }
    v103 = v102 - v98;
    v104 = (void *)Curl_cmalloc(v102 - v98 + 2);
    *(_DWORD *)(v37 + 12) = v104;
    if ( !v104 )
      goto LABEL_307;
    v105 = v103 + 1;
    memcpy(v104, path, v105);
    *(_BYTE *)(*(_DWORD *)(v158 + 12) + v105) = 0;
    v106 = (const char *)Curl_cstrdup(*(_DWORD *)(v158 + 12));
    if ( !v106 )
    {
      v110 = v172;
      v107 = 0;
LABEL_250:
      v111 = 1;
      *(_DWORD *)(v158 + 16) = v107;
      if ( v107 )
        v111 = v110;
      v97 = v111;
      goto LABEL_253;
    }
    v107 = (char *)v106;
    v108 = strlen(v106);
    v109 = v108;
    if ( *v107 == 34 )
    {
      memmove(v107, v107 + 1, v108);
      --v109;
    }
    if ( v109 )
    {
      if ( v107[v109 - 1] == 34 )
        v107[--v109] = 0;
      if ( *v107 == 47 )
      {
        if ( v109 )
        {
          v110 = v172;
          if ( v107[v109 - 1] == 47 )
            v107[v109 - 1] = 0;
          goto LABEL_250;
        }
        goto LABEL_249;
      }
    }
    else if ( *v107 == 47 )
    {
LABEL_249:
      v110 = v172;
      goto LABEL_250;
    }
    Curl_cfree(v107);
    v107 = (char *)Curl_strndup("/", 1);
    goto LABEL_249;
  }
  v99 = Curl_cstrdup(domain);
  *(_DWORD *)(v37 + 20) = v99;
  v100 = 1;
  if ( v99 )
    v100 = v171;
  v97 = v100;
  if ( (v100 & 1) == 0 )
    goto LABEL_219;
LABEL_253:
  if ( (v97 & 1) != 0 || !*(_DWORD *)(v158 + 4) )
    goto LABEL_307;
  ++data->req.setcookies;
  v12 = v158;
LABEL_256:
  v112 = *(_BYTE *)(v12 + 40);
  if ( (v112 & 1) != 0 && !*(_BYTE *)(v12 + 33)
    || (v112 & 2) != 0
    && (!*(_BYTE *)(v12 + 33)
     || !*(_DWORD *)(v12 + 12)
     || strcmp(*(const char **)(v12 + 12), "/")
     || *(_BYTE *)(v12 + 32))
    || !(running = c->running) && c->newsession && !*(_QWORD *)(v12 + 24) )
  {
    Curl_cfree(*(_DWORD *)(v12 + 20));
    Curl_cfree(*(_DWORD *)(v12 + 12));
    Curl_cfree(*(_DWORD *)(v12 + 16));
    Curl_cfree(*(_DWORD *)(v12 + 4));
    Curl_cfree(*(_DWORD *)(v12 + 8));
    v9 = 0;
    Curl_cfree(v12);
    return (Cookie *)v9;
  }
  *(_BYTE *)(v12 + 34) = running;
  v114 = c->lastct + 1;
  c->lastct = v114;
  *(_DWORD *)(v12 + 36) = v114;
  if ( !noexpire )
  {
    delima = (char *)time(0);
    next_expiration = c->next_expiration;
    next_expiration_high = HIDWORD(c->next_expiration);
    if ( (int)delima >= __SPAIR64__(next_expiration_high, next_expiration)
      || !(~next_expiration | next_expiration_high ^ 0x7FFFFFFF) )
    {
      c->next_expiration = 0x7FFFFFFFFFFFFFFFLL;
      v135 = 0;
      do
      {
        v136 = c;
        v178 = v135;
        v137 = c->cookies[v135];
        if ( v137 )
        {
          v156 = 0;
          v164 = &c->cookies[v135];
          do
          {
            while ( 1 )
            {
              v138 = v137;
              v137 = v137->next;
              LODWORD(v139) = v138->expires;
              expires_high = HIDWORD(v138->expires);
              if ( !v138->expires )
                break;
              HIDWORD(v139) = HIDWORD(v138->expires);
              if ( v139 >= (int)delima )
                break;
              p_next = &v156->next;
              if ( !v156 )
                p_next = v164;
              *p_next = v137;
              --v136->numcookies;
              Curl_cfree(v138->domain);
              Curl_cfree(v138->path);
              Curl_cfree(v138->spath);
              Curl_cfree(v138->name);
              Curl_cfree(v138->value);
              Curl_cfree(v138);
              v136 = c;
              if ( !v137 )
                goto LABEL_323;
            }
            if ( expires_high | (unsigned int)v139 )
            {
              HIDWORD(v139) = HIDWORD(v138->expires);
              if ( v139 < v136->next_expiration )
              {
                LODWORD(v136->next_expiration) = v139;
                HIDWORD(v136->next_expiration) = expires_high;
              }
            }
            v156 = v138;
          }
          while ( v137 );
        }
LABEL_323:
        v135 = v178 + 1;
      }
      while ( v178 != 62 );
    }
  }
  v9 = (char *)v158;
  sd = cookiehash(*(const char *const *)(v158 + 20));
  next = c->cookies[sd];
  if ( !next )
  {
    v119 = 0;
    v134 = 0;
    goto LABEL_338;
  }
  v118 = 0;
  delimb = 0;
  v155 = 0;
  while ( 2 )
  {
    v119 = next;
    if ( curl_strequal(next->name, *(_DWORD *)(v158 + 4)) )
    {
      v120 = v119->domain;
      v121 = *(_DWORD *)(v158 + 20);
      if ( v120 )
      {
        if ( v121 && curl_strequal(v120, *(_DWORD *)(v158 + 20)) )
        {
LABEL_272:
          spath = v119->spath;
          if ( spath && *(_DWORD *)(v158 + 16) && v119->secure && !*(_BYTE *)(v158 + 33) && !secure )
          {
            v163 = *(_DWORD *)(v158 + 16);
            v123 = strchr(spath + 1, 47);
            v124 = v123 ? v123 - spath : strlen(spath);
            if ( curl_strnequal(spath, v163, v124) )
            {
              if ( data && (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
                Curl_infof(
                  data,
                  "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                  *(_DWORD *)(v158 + 4),
                  *(_DWORD *)(v158 + 20));
              goto LABEL_307;
            }
          }
        }
      }
      else if ( !v121 )
      {
        goto LABEL_272;
      }
    }
    if ( !v118 )
    {
      v118 = 0;
      if ( curl_strequal(v119->name, *(_DWORD *)(v158 + 4)) )
      {
        v125 = v119->domain;
        v126 = *(_DWORD *)(v158 + 20);
        if ( !v125 )
        {
          v127 = v126 == 0;
          goto LABEL_286;
        }
        if ( v126 && curl_strequal(v125, *(_DWORD *)(v158 + 20)) )
        {
          v127 = v119->tailmatch == *(_BYTE *)(v158 + 32);
LABEL_286:
          v128 = (unsigned __int8)v155;
          if ( v127 )
            v128 = 1;
        }
        else
        {
          v128 = v155;
        }
        v155 = v128;
        if ( (v128 & 1) != 0 )
        {
          v129 = v119->spath;
          v118 = 0;
          v130 = 0;
          if ( v129 )
          {
            if ( !*(_DWORD *)(v158 + 16) )
            {
              v130 = v119->spath;
              goto LABEL_294;
            }
            if ( curl_strequal(v129, *(_DWORD *)(v158 + 16)) )
            {
              v130 = v119->spath;
              goto LABEL_294;
            }
            v155 = 0;
            v118 = 0;
          }
          else
          {
LABEL_294:
            v131 = (unsigned __int8)v155;
            if ( (v130 != 0) == (*(_DWORD *)(v158 + 16) == 0) )
              v131 = 0;
            v155 = v131;
            if ( (v131 & 1) != 0 )
            {
              if ( *(_BYTE *)(v158 + 34) )
              {
                delimb = (char *)v119;
                v118 = v158;
              }
              else
              {
                v118 = v158;
                delimb = (char *)v119;
                if ( v119->livecookie )
                  goto LABEL_307;
              }
            }
          }
        }
      }
    }
    next = v119->next;
    if ( v119->next )
      continue;
    break;
  }
  if ( v118 )
  {
    *(_DWORD *)v118 = *(_DWORD *)delimb;
    *(_DWORD *)(v118 + 36) = *((_DWORD *)delimb + 9);
    Curl_cfree(*((_DWORD *)delimb + 1));
    Curl_cfree(*((_DWORD *)delimb + 2));
    Curl_cfree(*((_DWORD *)delimb + 5));
    Curl_cfree(*((_DWORD *)delimb + 3));
    Curl_cfree(*((_DWORD *)delimb + 4));
    *((_DWORD *)delimb + 10) = *(_DWORD *)(v118 + 40);
    *((_QWORD *)delimb + 4) = *(_QWORD *)(v118 + 32);
    *((_QWORD *)delimb + 3) = *(_QWORD *)(v118 + 24);
    *((_QWORD *)delimb + 2) = *(_QWORD *)(v118 + 16);
    v133 = *(_QWORD *)v118;
    *((_QWORD *)delimb + 1) = *(_QWORD *)(v118 + 8);
    *(_QWORD *)delimb = v133;
    timer = (time_t *)v118;
    v9 = delimb;
    Curl_cfree(timer);
  }
  else
  {
    v9 = (char *)v158;
  }
  v134 = v155;
LABEL_338:
  v142 = c;
  if ( data )
  {
    if ( c->running )
    {
      v157 = v134;
      if ( (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
      {
        v143 = "Replaced";
        if ( (v134 & 1) == 0 )
          v143 = "Added";
        v142 = c;
        Curl_infof(data, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld", v143, *((_DWORD *)v9 + 1));
        v134 = v157;
      }
    }
  }
  if ( (v134 & 1) == 0 )
  {
    v144 = &v142->cookies[sd];
    if ( v119 )
      v144 = &v119->next;
    *v144 = (Cookie *)v9;
    ++v142->numcookies;
  }
  LODWORD(v145) = *((_DWORD *)v9 + 6);
  v146 = *((_DWORD *)v9 + 7);
  if ( *((_QWORD *)v9 + 3) )
  {
    HIDWORD(v145) = *((_DWORD *)v9 + 7);
    if ( v145 < v142->next_expiration )
    {
      LODWORD(v142->next_expiration) = v145;
      HIDWORD(v142->next_expiration) = v146;
    }
  }
  return (Cookie *)v9;
}
