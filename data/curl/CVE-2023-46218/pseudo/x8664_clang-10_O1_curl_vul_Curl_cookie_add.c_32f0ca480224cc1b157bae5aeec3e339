Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  CookieInfo *v10; // r13
  Cookie *v11; // r15
  time_t v12; // rax
  __int64 v13; // rax
  Cookie *v14; // rbx
  char *v15; // rcx
  char *i; // r13
  char v17; // r12
  size_t v18; // rax
  size_t v19; // r15
  size_t v20; // r14
  char v21; // al
  const char *v22; // rbp
  size_t v23; // rax
  size_t v24; // rbx
  char v25; // dl
  char v26; // dl
  size_t v27; // rax
  size_t v28; // r15
  __int64 v29; // r15
  int v30; // ebp
  char v31; // r12
  const char *v32; // r15
  char *v33; // rbp
  int v34; // eax
  char *v35; // rax
  const char *v36; // r12
  char **v37; // r14
  const char *v38; // rbx
  char v39; // r12
  const char *v40; // r15
  char *v41; // rbp
  int v42; // eax
  const char *v43; // r14
  size_t v44; // rbx
  const char *v45; // r12
  const char *v46; // rdi
  unsigned __int8 is_ipnum; // r15
  char v48; // al
  char *v49; // r14
  const char *v50; // rdi
  int v51; // eax
  char v52; // r12
  const char *v53; // r15
  char *v54; // rbp
  int v55; // eax
  char v56; // al
  __int64 v57; // rax
  curl_off_t v58; // rax
  const char *v59; // rbp
  __int64 v60; // rax
  char v61; // cl
  char *v62; // rax
  char *v63; // rax
  char *v64; // rax
  const char *v65; // rbp
  int v66; // r14d
  char v67; // r13
  char *v68; // rax
  const char *v69; // rax
  __int64 v70; // rax
  __int64 v71; // rbx
  __int64 v72; // rax
  char *v73; // rax
  __int64 v74; // rax
  _BOOL4 v75; // ecx
  char v76; // al
  char *v77; // rax
  char *v78; // rax
  signed __int64 v79; // rbx
  char *v80; // rax
  size_t v81; // rbx
  char *v82; // rax
  char v83; // cl
  unsigned __int8 prefix; // al
  bool running; // al
  int v86; // eax
  Cookie *next; // rax
  Cookie *v88; // r12
  Cookie *v89; // r14
  char *v90; // rdi
  char *v91; // rsi
  const char *spath; // rbp
  char *v93; // rbx
  char *v94; // rax
  size_t v95; // rax
  int v96; // eax
  char *v97; // rdi
  int v98; // ebp
  char *v99; // rsi
  bool v100; // zf
  char *v101; // rdi
  char *v102; // rsi
  const char *v103; // rdi
  __int128 v105; // xmm0
  __int128 v106; // xmm1
  __int128 v107; // xmm2
  const char *v108; // rdx
  Cookie **p_next; // rax
  curl_off_t expires; // rax
  Cookie *v111; // [rsp+0h] [rbp-128h]
  char v112; // [rsp+8h] [rbp-120h]
  char *v113; // [rsp+10h] [rbp-118h]
  char *v114; // [rsp+10h] [rbp-118h]
  curl_off_t *p_expires; // [rsp+18h] [rbp-110h]
  int v117; // [rsp+18h] [rbp-110h]
  size_t v120; // [rsp+30h] [rbp-F8h]
  time_t v121; // [rsp+38h] [rbp-F0h]
  char **p_name; // [rsp+40h] [rbp-E8h]
  curl_off_t *v123; // [rsp+50h] [rbp-D8h]
  char **p_domain; // [rsp+58h] [rbp-D0h]
  char **str; // [rsp+60h] [rbp-C8h]
  char **p_value; // [rsp+68h] [rbp-C0h]
  char *dest[23]; // [rsp+70h] [rbp-B8h] BYREF

  v10 = c;
  v11 = 0LL;
  v12 = time(0LL);
  if ( data->req.setcookies > 0x31u )
    return v11;
  v121 = v12;
  v13 = Curl_ccalloc(1LL, 72LL);
  if ( !v13 )
    return 0LL;
  v14 = (Cookie *)v13;
  v111 = (Cookie *)v13;
  if ( !httpheader )
  {
    dest[0] = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 10;
      v14->httponly = 1;
      if ( *lineptr == 35 )
        goto LABEL_8;
    }
    else if ( *lineptr == 35 )
    {
LABEL_8:
      Curl_cfree(v14);
      return 0LL;
    }
    v62 = strchr(lineptr, 13);
    if ( v62 )
      *v62 = 0;
    v63 = strchr(lineptr, 10);
    if ( v63 )
      *v63 = 0;
    v64 = strtok_r(lineptr, "\t", dest);
    if ( v64 )
    {
      v65 = v64;
      p_expires = &v14->expires;
      v66 = 0;
      v67 = 0;
      while ( 2 )
      {
        switch ( v66 )
        {
          case 0:
            if ( *v65 == 46 )
              ++v65;
            v68 = (char *)Curl_cstrdup(v65);
            v14->domain = v68;
            goto LABEL_180;
          case 1:
            v14->tailmatch = (unsigned int)curl_strequal(v65, "TRUE") != 0;
            goto LABEL_193;
          case 2:
            if ( !strcmp("TRUE", v65) || !strcmp("FALSE", v65) )
            {
              v71 = Curl_cstrdup("/");
              v111->path = (char *)v71;
              v72 = Curl_cstrdup("/");
              if ( !v72 )
                v67 = 1;
              v100 = v71 == 0;
              v14 = v111;
              v111->spath = (char *)v72;
              if ( v100 )
                v67 = 1;
              ++v66;
LABEL_188:
              v14->secure = 0;
              if ( (unsigned int)curl_strequal(v65, "TRUE") )
              {
                if ( secure || c->running )
                {
                  v14->secure = 1;
                  goto LABEL_193;
                }
LABEL_192:
                v67 = 1;
              }
            }
            else
            {
              v69 = (const char *)Curl_cstrdup(v65);
              v14->path = (char *)v69;
              if ( !v69 )
                goto LABEL_192;
              v68 = sanitize_cookie_path(v69);
              v14->spath = v68;
LABEL_180:
              if ( !v68 )
                v67 = 1;
            }
LABEL_193:
            v73 = strtok_r(0LL, "\t", dest);
            ++v66;
            if ( (v67 & 1) != 0 )
              goto LABEL_200;
            v65 = v73;
            if ( !v73 )
              goto LABEL_200;
            continue;
          case 3:
            goto LABEL_188;
          case 4:
            if ( (unsigned int)curlx_strtoofft(v65, 0LL, 10LL, p_expires) )
              v67 = 1;
            goto LABEL_193;
          case 5:
            v70 = Curl_cstrdup(v65);
            v14->name = (char *)v70;
            if ( !v70 )
              goto LABEL_192;
            if ( (unsigned int)curl_strnequal("__Secure-", v70, 9LL) )
            {
              v14->prefix |= 1u;
            }
            else if ( (unsigned int)curl_strnequal("__Host-", v14->name, 7LL) )
            {
              v14->prefix |= 2u;
            }
            goto LABEL_193;
          case 6:
            v68 = (char *)Curl_cstrdup(v65);
            v14->value = v68;
            goto LABEL_180;
          default:
            goto LABEL_193;
        }
      }
    }
    v67 = 0;
    v66 = 0;
LABEL_200:
    if ( v66 == 6 )
    {
      v74 = Curl_cstrdup(&L_str_22);
      v14->value = (char *)v74;
      v100 = v74 == 0;
      v75 = v74 != 0;
      v76 = v67;
      v67 = 1;
      if ( !v100 )
        v67 = v76;
      v66 = v75 + 6;
    }
    if ( (v67 & 1) == 0 && v66 == 7 )
    {
      v10 = c;
      goto LABEL_228;
    }
LABEL_294:
    freecookie(v14);
    return 0LL;
  }
  if ( strlen(lineptr) > 0x1388 )
  {
    Curl_cfree(v14);
    goto LABEL_226;
  }
  p_name = &v14->name;
  str = &v14->path;
  v123 = &v14->expires;
  p_domain = &v14->domain;
  p_value = &v14->value;
  v112 = 0;
  v15 = lineptr;
  do
  {
    for ( i = v15; ; ++i )
    {
      v17 = *i;
      if ( *i != 32 && v17 != 9 )
        break;
    }
    v18 = strcspn(i, ";\t\r\n=");
    if ( !v18 )
      goto LABEL_124;
    v19 = v18;
    v15 = &i[v18];
    v20 = v18;
    do
    {
      v21 = i[v20 - 1];
      if ( v21 != 32 && v21 != 9 )
      {
        if ( *v15 != 61 )
          goto LABEL_28;
LABEL_21:
        v22 = &i[v19 + 1];
        v23 = strcspn(v22, ";\r\n");
        if ( v23 )
        {
          v24 = v23;
          while ( 1 )
          {
            v25 = i[v19 + v24];
            if ( v25 != 32 && v25 != 9 )
              break;
            if ( !--v24 )
            {
              v24 = 0LL;
              break;
            }
          }
        }
        else
        {
          v24 = 0LL;
        }
        v27 = v19 + v23;
        if ( v24 )
        {
          v28 = v24 + v19;
          while ( *v22 == 32 || *v22 == 9 )
          {
            ++v22;
            if ( !--v24 )
            {
              v24 = 0LL;
              v22 = &i[v28 + 1];
              break;
            }
          }
        }
        v29 = (__int64)&i[v27 + 1];
        if ( memchr(v22, 9, v24) )
        {
          v14 = v111;
          freecookie(v111);
          v30 = 1;
          if ( data && (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
          {
            Curl_infof(data, "cookie contains TAB, dropping");
            v15 = (char *)v29;
            goto LABEL_121;
          }
          goto LABEL_55;
        }
        v26 = 1;
        v15 = (char *)v29;
        if ( v20 > 0xFFE )
          goto LABEL_51;
        goto LABEL_44;
      }
      --v20;
    }
    while ( v20 );
    v20 = 0LL;
    if ( *v15 == 61 )
      goto LABEL_21;
LABEL_28:
    v24 = 0LL;
    v26 = 0;
    v22 = 0LL;
    if ( v20 > 0xFFE )
    {
LABEL_51:
      v29 = (__int64)v15;
      freecookie(v111);
      v30 = 1;
      if ( data && (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v20, v24);
LABEL_54:
      v14 = v111;
LABEL_55:
      v15 = (char *)v29;
      goto LABEL_121;
    }
LABEL_44:
    if ( v24 > 0xFFE || v24 + v20 >= 0x1001 )
      goto LABEL_51;
    if ( v17 == 95 && v20 >= 7 && i[1] == 95 )
    {
      v31 = v26;
      v32 = v22;
      v33 = v15;
      if ( (unsigned int)curl_strnequal("__Secure-", i, 9LL) )
      {
        v111->prefix |= 1u;
        v15 = v33;
        v22 = v32;
        v26 = v31;
      }
      else
      {
        v34 = curl_strnequal("__Host-", i, 7LL);
        v15 = v33;
        v22 = v32;
        v26 = v31;
        if ( v34 )
          v111->prefix |= 2u;
      }
    }
    if ( !*p_name )
    {
      v36 = v22;
      v30 = 6;
      if ( !v26 )
        goto LABEL_82;
      v113 = v15;
      strstore(p_name, i, v20);
      v37 = p_value;
      strstore(p_value, v36, v24);
      v38 = *p_name;
      if ( *p_name && *v37 )
      {
        if ( !invalid_octets(*v37) && !invalid_octets(v38) )
        {
          v14 = v111;
          v15 = v113;
          goto LABEL_120;
        }
        if ( data && (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
      }
      v112 = 1;
      v14 = v111;
      v15 = v113;
      goto LABEL_121;
    }
    if ( v24 )
      goto LABEL_60;
    if ( v20 == 8 )
    {
      v52 = v26;
      v53 = v22;
      v54 = v15;
      v55 = curl_strnequal("httponly", i, 8LL);
      v26 = v52;
      v15 = v54;
      v22 = v53;
      if ( v55 )
      {
        v14 = v111;
        v111->httponly = 1;
        goto LABEL_120;
      }
LABEL_118:
      if ( !v26 )
      {
LABEL_119:
        v14 = v111;
        goto LABEL_120;
      }
LABEL_60:
      if ( v20 != 7 )
      {
        if ( v20 != 6 )
        {
          if ( v20 == 4 )
          {
            v29 = (__int64)v15;
            if ( (unsigned int)curl_strnequal("path", i, 4LL) )
            {
              strstore(str, v22, v24);
              v30 = 6;
              if ( !*str )
              {
                v112 = 1;
                goto LABEL_54;
              }
              v14 = v111;
              Curl_cfree(v111->spath);
              v35 = sanitize_cookie_path(v111->path);
              v111->spath = v35;
              v15 = (char *)v29;
              if ( !v35 )
              {
                v112 = 1;
                goto LABEL_121;
              }
              goto LABEL_120;
            }
            v15 = (char *)v29;
          }
          goto LABEL_119;
        }
        v114 = v15;
        v42 = curl_strnequal("domain", i, 6LL);
        if ( !v24 || !v42 )
        {
          v15 = v114;
          goto LABEL_119;
        }
        v43 = v22 + 1;
        if ( *v22 != 46 )
          v43 = v22;
        v44 = v24 - (*v22 == 46);
        v45 = domain;
        if ( bad_domain(v43, v44) )
          v45 = ":";
        v46 = v43;
        if ( v45 )
          v46 = v45;
        is_ipnum = Curl_host_is_ipnum(v46);
        domain = v45;
        if ( v45 )
        {
          if ( is_ipnum )
          {
            if ( strncmp(v43, v45, v44) || v44 != strlen(v45) )
            {
LABEL_136:
              v30 = 0;
              v112 = 1;
              if ( data )
              {
                v14 = v111;
                if ( (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
                {
                  v30 = 0;
                  Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v43);
                }
LABEL_141:
                v15 = v114;
                if ( v30 )
                  goto LABEL_121;
LABEL_120:
                v30 = 0;
                goto LABEL_121;
              }
              goto LABEL_139;
            }
          }
          else if ( !cookie_tailmatch(v43, v44, v45) )
          {
            goto LABEL_136;
          }
        }
        strstore(p_domain, v43, v44);
        v48 = v112;
        if ( !*p_domain )
          v48 = 1;
        v30 = 0;
        if ( !*p_domain )
          v30 = 6;
        if ( !((*p_domain == 0LL) | is_ipnum) )
        {
          v14 = v111;
          v111->tailmatch = 1;
          v30 = 0;
          goto LABEL_141;
        }
        v112 = v48;
LABEL_139:
        v14 = v111;
        goto LABEL_141;
      }
      v49 = v15;
      if ( (unsigned int)curl_strnequal("version", i, 7LL) )
      {
LABEL_106:
        v14 = v111;
        v15 = v49;
        goto LABEL_120;
      }
      if ( !(unsigned int)curl_strnequal("max-age", i, 7LL) )
      {
        if ( (unsigned int)curl_strnequal("expires", i, 7LL) )
        {
          v15 = v49;
          if ( v24 <= 0x7F && !v111->expires )
          {
            memcpy(dest, v22, v24);
            *((_BYTE *)dest + v24) = 0;
            v57 = Curl_getdate_capped(dest);
            v111->expires = v57;
            if ( v57 )
            {
              v15 = v49;
              if ( v57 < 0 )
                v111->expires = 0LL;
            }
            else
            {
              v111->expires = 1LL;
              v15 = v49;
            }
          }
          goto LABEL_119;
        }
        goto LABEL_106;
      }
      v50 = v22 + 1;
      if ( *v22 != 34 )
        v50 = v22;
      v51 = curlx_strtoofft(v50, 0LL, 10LL, v123);
      if ( v51 )
      {
        v14 = v111;
        v15 = v49;
        if ( v51 != 2 )
        {
          if ( v51 != 1 )
            goto LABEL_120;
LABEL_146:
          *v123 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_120;
        }
      }
      else
      {
        v58 = *v123;
        v14 = v111;
        v15 = v49;
        if ( *v123 )
        {
          if ( 0x7FFFFFFFFFFFFFFFLL - v121 >= v58 )
          {
            *v123 = v121 + v58;
            goto LABEL_120;
          }
          goto LABEL_146;
        }
      }
      *v123 = 1LL;
      goto LABEL_120;
    }
    if ( v20 != 6 )
      goto LABEL_118;
    v39 = v26;
    v40 = v22;
    v41 = v15;
    if ( !(unsigned int)curl_strnequal("secure", i, 6LL) )
    {
      v15 = v41;
      v22 = v40;
      v26 = v39;
      goto LABEL_118;
    }
    v15 = v41;
    if ( secure || !c->running )
    {
      v14 = v111;
      v111->secure = 1;
      goto LABEL_120;
    }
    v30 = 6;
LABEL_82:
    v112 = 1;
    v14 = v111;
LABEL_121:
    i = v15;
    if ( !v30 )
    {
LABEL_124:
      while ( 1 )
      {
        v56 = *i;
        if ( *i != 32 && v56 != 9 )
          break;
        ++i;
      }
      v15 = i + 1;
      v30 = 6;
      if ( v56 == 59 )
        v30 = 0;
      else
        v15 = i;
    }
  }
  while ( !v30 );
  if ( v30 != 6 )
  {
    v10 = c;
    goto LABEL_227;
  }
  v10 = c;
  if ( (v112 & 1) != 0 )
  {
    v59 = path;
  }
  else
  {
    v59 = path;
    if ( domain && !v14->domain )
    {
      v60 = Curl_cstrdup(domain);
      v14->domain = (char *)v60;
      v61 = 1;
      if ( v60 )
        v61 = v112;
      v112 = v61;
    }
  }
  if ( (v112 & 1) == 0 && v59 && !v14->path )
  {
    v77 = strchr(v59, 63);
    if ( v77 )
      v78 = (char *)Curl_memrchr(v59, 47LL, v77 - v59);
    else
      v78 = strrchr(v59, 47);
    if ( v78 )
    {
      v79 = v78 - v59;
      v80 = (char *)Curl_cmalloc(v78 - v59 + 2);
      v111->path = v80;
      if ( v80 )
      {
        v81 = v79 + 1;
        memcpy(v80, v59, v81);
        v111->path[v81] = 0;
        v82 = sanitize_cookie_path(v111->path);
        v111->spath = v82;
        v83 = 1;
        if ( v82 )
          v83 = v112;
        v112 = v83;
      }
      else
      {
        v112 = 1;
      }
      v14 = v111;
    }
    else
    {
      v14 = v111;
    }
  }
  if ( (v112 & 1) == 0 && v14->name )
  {
    ++data->req.setcookies;
    v30 = 0;
    goto LABEL_227;
  }
  freecookie(v14);
LABEL_226:
  v30 = 1;
LABEL_227:
  if ( v30 )
    return 0LL;
LABEL_228:
  prefix = v14->prefix;
  if ( (prefix & 1) != 0 && !v14->secure )
    goto LABEL_294;
  if ( (prefix & 2) != 0 )
  {
    if ( !v14->secure )
      goto LABEL_294;
    v103 = v14->path;
    if ( !v103 || strcmp(v103, "/") || v14->tailmatch )
      goto LABEL_294;
  }
  running = v10->running;
  if ( !running && v10->newsession && !v14->expires )
    goto LABEL_294;
  v14->livecookie = running;
  v86 = v10->lastct + 1;
  v10->lastct = v86;
  v14->creationtime = v86;
  if ( !noexpire )
    remove_expired(v10);
  v120 = cookiehash(v14->domain);
  next = v10->cookies[v120];
  if ( next )
  {
    v88 = 0LL;
    v11 = 0LL;
    v117 = 0;
    while ( 2 )
    {
      v89 = next;
      if ( !(unsigned int)curl_strequal(next->name, v14->name) )
        goto LABEL_265;
      v90 = v89->domain;
      if ( v90 )
      {
        v91 = v111->domain;
        if ( !v91 || !(unsigned int)curl_strequal(v90, v91) )
          goto LABEL_263;
      }
      else if ( v111->domain )
      {
        goto LABEL_263;
      }
      spath = v89->spath;
      if ( !spath )
        goto LABEL_263;
      v93 = v111->spath;
      if ( !v93 || !v89->secure || v111->secure || secure )
        goto LABEL_263;
      v94 = strchr(spath + 1, 47);
      v95 = v94 ? v94 - spath : strlen(spath);
      if ( (unsigned int)curl_strnequal(spath, v93, v95) )
      {
        if ( data && (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
          Curl_infof(
            data,
            "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
            v111->name,
            v111->domain);
        freecookie(v111);
        v96 = 1;
      }
      else
      {
        v96 = 0;
      }
      if ( !v96 )
LABEL_263:
        v96 = 0;
      v14 = v111;
      if ( v96 )
        return 0LL;
LABEL_265:
      if ( !v88 )
      {
        if ( (unsigned int)curl_strequal(v89->name, v14->name) )
        {
          v97 = v89->domain;
          v98 = v117;
          if ( !v97 )
          {
            v100 = v14->domain == 0LL;
            goto LABEL_274;
          }
          v99 = v14->domain;
          if ( v99 && (unsigned int)curl_strequal(v97, v99) )
          {
            v100 = v89->tailmatch == v14->tailmatch;
LABEL_274:
            v98 = (unsigned __int8)v117;
            if ( v100 )
              v98 = 1;
          }
          if ( (v98 & 1) != 0 )
          {
            v101 = v89->spath;
            if ( !v101 || (v102 = v14->spath) == 0LL || (unsigned int)curl_strequal(v101, v102) )
            {
              v98 = (unsigned __int8)v98;
              if ( (v89->spath == 0LL) != (v14->spath == 0LL) )
                v98 = 0;
              goto LABEL_282;
            }
            v98 = 0;
          }
          else
          {
LABEL_282:
            if ( (v98 & 1) != 0 && !v14->livecookie && v89->livecookie )
              goto LABEL_294;
          }
          v117 = v98;
          if ( (v98 & 1) != 0 )
            v11 = v89;
          v88 = 0LL;
          if ( (v98 & 1) != 0 )
            v88 = v14;
          goto LABEL_240;
        }
        v88 = 0LL;
      }
LABEL_240:
      next = v89->next;
      if ( !v89->next )
        goto LABEL_298;
      continue;
    }
  }
  LOBYTE(v117) = 0;
  v11 = 0LL;
  v88 = 0LL;
  v89 = 0LL;
LABEL_298:
  if ( v88 )
  {
    v88->next = v11->next;
    v88->creationtime = v11->creationtime;
    Curl_cfree(v11->name);
    Curl_cfree(v11->value);
    Curl_cfree(v11->domain);
    Curl_cfree(v11->path);
    Curl_cfree(v11->spath);
    *(_QWORD *)&v11->prefix = *(_QWORD *)&v88->prefix;
    v105 = *(_OWORD *)&v88->next;
    v106 = *(_OWORD *)&v88->value;
    v107 = *(_OWORD *)&v88->spath;
    *(_OWORD *)&v11->expires = *(_OWORD *)&v88->expires;
    *(_OWORD *)&v11->spath = v107;
    *(_OWORD *)&v11->value = v106;
    *(_OWORD *)&v11->next = v105;
    Curl_cfree(v88);
  }
  else
  {
    v11 = v14;
  }
  if ( data && v10->running && (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
  {
    v108 = "Replaced";
    if ( (v117 & 1) == 0 )
      v108 = "Added";
    Curl_infof(
      data,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
      v108,
      v11->name,
      v11->value,
      v11->domain,
      v11->path,
      v11->expires);
  }
  if ( (v117 & 1) == 0 )
  {
    p_next = &v10->cookies[v120];
    if ( v89 )
      p_next = &v89->next;
    *p_next = v11;
    ++v10->numcookies;
  }
  expires = v11->expires;
  if ( expires && expires < v10->next_expiration )
    v10->next_expiration = expires;
  return v11;
}
