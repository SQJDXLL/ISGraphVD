Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  int (__fastcall *v8)(char *); // r10
  char *v10; // r7
  time_t v11; // r0
  unsigned int setcookies; // r3
  Cookie *v13; // r9
  bool v14; // zf
  size_t v15; // r6
  int v16; // r5
  char *v17; // r10
  char *v18; // r2
  int v19; // r4
  int v20; // t1
  size_t v21; // r3
  bool v22; // zf
  size_t v23; // r4
  unsigned __int8 *v24; // r11
  size_t v25; // r0
  unsigned __int8 *v26; // r1
  size_t v27; // r8
  int v28; // r2
  int v29; // t1
  bool v30; // zf
  _BOOL4 v31; // r2
  int v32; // r3
  _BOOL4 v33; // r3
  bool v34; // zf
  int v35; // t1
  _BOOL4 v36; // r3
  _BOOL4 v37; // r3
  unsigned __int8 prefix; // r3
  char *v39; // r3
  CookieInfo *v40; // r2
  int v41; // r3
  size_t v42; // r0
  size_t v43; // r5
  size_t v44; // r10
  int livecookie; // r7
  Cookie *v46; // r6
  int v47; // r0
  char *v48; // r1
  const char *v49; // r8
  char *spath; // r11
  int v51; // r0
  char *v52; // r1
  int v53; // r0
  char *v54; // r1
  _BOOL4 v55; // r4
  char *v56; // r0
  int v57; // r2
  char *v58; // r8
  bool v59; // zf
  char *v60; // r0
  int v61; // r2
  int v62; // r1
  char *v64; // r0
  char *v65; // r0
  int v66; // r4
  int v67; // r0
  char *v68; // r0
  int v69; // r2
  int v70; // r0
  char v71; // r3
  int v72; // r0
  const char *v73; // r0
  char *v74; // r0
  char *v75; // r0
  int v76; // r2
  int v77; // r0
  int (__fastcall *v78)(void *); // r1
  int v79; // r10
  int v80; // r0
  unsigned __int8 *v81; // r1
  int v82; // r4
  bool v83; // zf
  int v84; // r0
  bool v85; // zf
  _BYTE *v86; // r0
  const char *v87; // r3
  const char *v88; // r6
  int is_ipnum; // r5
  int v90; // r0
  size_t v91; // r0
  size_t v92; // r6
  int v93; // r7
  int v94; // r0
  char *v95; // r0
  int v96; // r4
  char *v97; // r0
  bool v98; // zf
  int v99; // r0
  int v100; // r0
  char v101; // r3
  const char *name; // r4
  char *value; // r5
  int v104; // r0
  __int64 v105; // r2
  bool v106; // cf
  bool v107; // zf
  void *v108; // r0
  int v109; // r0
  Cookie *v110; // r0
  Cookie *v111; // r1
  Cookie *v112; // r2
  Cookie *v113; // r3
  void (__fastcall *v114)(Cookie *); // r8
  Cookie *v115; // r1
  Cookie *expires; // r2
  Cookie *expires_high; // r3
  Cookie *creationtime; // r1
  Cookie *v119; // r2
  Cookie *v120; // r3
  __int64 v121; // r2
  const char *v122; // r12
  int v123; // r0
  char *v124; // r0
  size_t v125; // r2
  char *v126; // r4
  char *v127; // r0
  char *v128; // r3
  char *v129; // r5
  int v130; // r3
  size_t v131; // r4
  char *v132; // r0
  char *v133; // r0
  int v134; // r0
  int v135; // [sp+0h] [bp-F8h] BYREF
  CookieInfo *ca; // [sp+18h] [bp-E0h]
  const char *domain_0; // [sp+20h] [bp-D8h]
  Curl_easy *v138; // [sp+24h] [bp-D4h]
  time_t now; // [sp+28h] [bp-D0h]
  _BOOL4 v140; // [sp+2Ch] [bp-CCh]
  time_t v141; // [sp+30h] [bp-C8h]
  _BOOL4 badcookie; // [sp+34h] [bp-C4h]
  char *s; // [sp+38h] [bp-C0h]
  int v144; // [sp+3Ch] [bp-BCh]
  time_t v145; // [sp+40h] [bp-B8h]
  unsigned int v146; // [sp+44h] [bp-B4h]
  char *tok_buf; // [sp+48h] [bp-B0h] BYREF
  char date[128]; // [sp+4Ch] [bp-ACh] BYREF

  ca = (CookieInfo *)httpheader;
  badcookie = noexpire;
  v138 = data;
  domain_0 = (const char *)c;
  now = (time_t)domain;
  v10 = (char *)lineptr;
  s = (char *)path;
  v140 = secure;
  v11 = time(0u);
  setcookies = data->req.setcookies;
  v141 = v11;
  if ( setcookies > 0x31 )
    return 0;
  v13 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v13 )
    return 0;
  if ( !ca )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v10 = (char *)(lineptr + 0xA);
      v13->httponly = 1;
    }
    if ( *v10 == 35 )
    {
      Curl_cfree(v13);
      return 0;
    }
    v64 = strchr(v10, 13);
    if ( v64 )
      *v64 = 0;
    v65 = strchr(v10, 10);
    if ( v65 )
      *v65 = 0;
    v58 = strtok_r(v10, "\t", &tok_buf);
    if ( !v58 )
      goto LABEL_117;
    now = (time_t)"__Host-";
    v66 = 0;
    while ( 1 )
    {
      switch ( v66 )
      {
        case 0:
          if ( *v58 == 46 )
            ++v58;
          v67 = Curl_cstrdup(v58);
          v13->domain = (char *)v67;
          if ( v67 )
          {
            v55 = 0;
            LOBYTE(v8) = 1;
          }
          else
          {
            v55 = 1;
          }
          if ( !v67 )
            LOBYTE(v8) = 0;
          v68 = strtok_r(0u, "\t", &tok_buf);
          if ( v68 )
            v69 = (unsigned __int8)v8 & 1;
          else
            v69 = 0;
          v58 = v68;
          if ( !v69 )
            goto LABEL_156;
          goto LABEL_141;
        case 1:
LABEL_141:
          v70 = curl_strequal(v58, "TRUE");
          v71 = v70;
          if ( v70 )
            v71 = 1;
          v13->tailmatch = v71;
          v58 = strtok_r(0u, "\t", &tok_buf);
          if ( v58 )
            goto LABEL_144;
          goto LABEL_117;
        case 2:
LABEL_144:
          v72 = strcmp("TRUE", v58);
          v8 = (int (__fastcall *)(char *))Curl_cstrdup;
          if ( v72 && strcmp("FALSE", v58) )
          {
            v73 = (const char *)v8(v58);
            v13->path = (char *)v73;
            if ( !v73 )
              goto LABEL_246;
            v74 = sanitize_cookie_path(v73);
            v13->spath = v74;
            if ( v74 )
            {
              v55 = 0;
              LOBYTE(v8) = 1;
            }
            else
            {
              v55 = 1;
            }
            if ( !v74 )
              LOBYTE(v8) = 0;
            v75 = strtok_r(0u, "\t", &tok_buf);
            if ( v75 )
              v76 = (unsigned __int8)v8 & 1;
            else
              v76 = 0;
            v58 = v75;
            if ( !v76 )
              goto LABEL_156;
LABEL_100:
            v55 = 0;
LABEL_101:
            v13->secure = 0;
            if ( !curl_strequal(v58, "TRUE") )
              goto LABEL_102;
            goto LABEL_244;
          }
          ca = (CookieInfo *)LC0;
          v77 = v8(LC0);
          v78 = (int (__fastcall *)(void *))Curl_cstrdup;
          v79 = v77;
          v13->path = (char *)v77;
          v80 = v78(LC0);
          v13->spath = (char *)v80;
          if ( v80 )
          {
            v55 = v79 == 0;
            goto LABEL_101;
          }
          v13->secure = 0;
          if ( !curl_strequal(v58, "TRUE") )
          {
            LOBYTE(v8) = 0;
            strtok_r(0u, "\t", &tok_buf);
            v55 = 1;
LABEL_156:
            if ( ((unsigned __int8)v8 & 1) == 0 )
            {
LABEL_157:
              if ( !v55 )
              {
                prefix = v13->prefix;
                if ( (prefix & 1) != 0 )
                  goto LABEL_62;
                goto LABEL_159;
              }
            }
LABEL_117:
            freecookie(v13);
            return 0;
          }
          v55 = 1;
LABEL_244:
          if ( !v140 && !domain_0[272] )
          {
LABEL_246:
            strtok_r(0u, "\t", &tok_buf);
            goto LABEL_117;
          }
          v13->secure = 1;
LABEL_102:
          v56 = strtok_r(0u, "\t", &tok_buf);
          LOBYTE(v8) = !v55;
          if ( v56 )
            v57 = (unsigned __int8)v8 & 1;
          else
            v57 = 0;
          v58 = v56;
          if ( !v57 )
            goto LABEL_156;
LABEL_106:
          v59 = curlx_strtoofft(v58, 0, 10, &v13->expires) == 0;
          if ( v59 )
          {
            v55 = 0;
            LOBYTE(v8) = 1;
          }
          else
          {
            v55 = 1;
          }
          if ( !v59 )
            LOBYTE(v8) = 0;
          v60 = strtok_r(0u, "\t", &tok_buf);
          if ( v60 )
            v61 = (unsigned __int8)v8 & 1;
          else
            v61 = 0;
          v58 = v60;
          if ( !v61 )
            goto LABEL_156;
LABEL_115:
          v62 = Curl_cstrdup(v58);
          v13->name = (char *)v62;
          if ( !v62 )
          {
            strtok_r(0u, "\t", &tok_buf);
            v13->value = (char *)Curl_cstrdup(&LC25);
            goto LABEL_117;
          }
          if ( curl_strnequal("__Secure-", v62, 9) )
          {
            v13->prefix |= 1u;
            v58 = strtok_r(0u, "\t", &tok_buf);
            if ( !v58 )
              goto LABEL_298;
          }
          else if ( curl_strnequal(now, v13->name, 7) )
          {
            v13->prefix |= 2u;
            v58 = strtok_r(0u, "\t", &tok_buf);
            if ( !v58 )
            {
LABEL_298:
              v123 = Curl_cstrdup(&LC25);
              v13->value = (char *)v123;
              if ( v123 )
                goto LABEL_61;
              goto LABEL_117;
            }
          }
          else
          {
            v58 = strtok_r(0u, "\t", &tok_buf);
            if ( !v58 )
              goto LABEL_298;
          }
LABEL_223:
          v96 = Curl_cstrdup(v58);
          v13->value = (char *)v96;
          v97 = strtok_r(0u, "\t", &tok_buf);
          v98 = v96 == 0;
          if ( v96 )
            v98 = v97 == 0;
          v55 = v96 == 0;
          if ( v98 )
            goto LABEL_157;
          v66 = 7;
LABEL_227:
          ++v66;
          v58 = strtok_r(0u, "\t", &tok_buf);
          if ( !v58 )
            goto LABEL_117;
          break;
        case 3:
          goto LABEL_100;
        case 4:
          goto LABEL_106;
        case 5:
          goto LABEL_115;
        case 6:
          goto LABEL_223;
        default:
          goto LABEL_227;
      }
    }
  }
  if ( strlen(lineptr) > (unsigned int)&loc_1388 )
  {
    v23 = 0;
    Curl_cfree(v13);
    return (Cookie *)v23;
  }
  v146 = 0x7FFFFFFF - (v141 >> 0x1F);
  v144 = 0;
  v145 = v141 >> 31;
  while ( 1 )
  {
    v16 = (unsigned __int8)*v10;
    if ( !*v10 )
      break;
    v14 = v16 == 9;
    if ( v16 != 9 )
      v14 = v16 == 32;
    if ( v14 )
      goto LABEL_11;
    v15 = strcspn(v10, ";\t\r\n=");
    if ( v15 )
      goto LABEL_14;
LABEL_10:
    if ( v16 != 59 )
      goto LABEL_52;
LABEL_11:
    ++v10;
  }
  v15 = strcspn(v10, ";\t\r\n=");
  if ( !v15 )
    goto LABEL_52;
LABEL_14:
  v17 = &v10[v15];
  v18 = &v10[v15];
  while ( 1 )
  {
    v20 = (unsigned __int8)*--v18;
    v19 = v20;
    v21 = v15;
    v22 = v20 == 9;
    if ( v20 != 9 )
      v22 = v19 == 32;
    v23 = v22;
    --v15;
    if ( !v22 )
      break;
    if ( !v15 )
    {
      if ( *v17 == 61 )
      {
LABEL_24:
        v24 = (unsigned __int8 *)(v17 + 1);
        v25 = strcspn(v17 + 1, ";\r\n");
        v26 = (unsigned __int8 *)&v17[v25 + 1];
        v27 = v25;
        v17 += v25 + 1;
        while ( 1 )
        {
          if ( !v27 )
          {
            v23 = (size_t)ca;
            v31 = 0;
            goto LABEL_32;
          }
          v29 = *--v26;
          v28 = v29;
          v30 = v29 == 9;
          if ( v29 != 9 )
            v30 = v28 == 32;
          if ( !v30 )
            break;
          --v27;
        }
        v31 = 0;
        v81 = v24;
        while ( 1 )
        {
          v82 = *v81;
          v24 = v81;
          v83 = v82 == 9;
          if ( v82 != 9 )
            v83 = v82 == 32;
          v23 = v83;
          ++v81;
          if ( !v83 )
            break;
          --v27;
          v24 = v81;
          if ( !v27 )
            goto LABEL_32;
        }
        if ( !memchr(v24, 9, v27) )
        {
          v23 = (size_t)ca;
          v31 = v27 > 0xFFE;
          goto LABEL_32;
        }
        freecookie(v13);
        if ( (*(&v138->set.connect_only + 4) & 0x10) != 0 )
        {
          Curl_infof(v138, "cookie contains TAB, dropping");
          return (Cookie *)v23;
        }
        return 0;
      }
      if ( !v13->name )
      {
LABEL_161:
        freecookie(v13);
        return 0;
      }
      goto LABEL_45;
    }
  }
  v15 = v21;
  if ( *v17 == 61 )
    goto LABEL_24;
  v31 = v23;
  v24 = (unsigned __int8 *)v23;
  v27 = v23;
LABEL_32:
  if ( v15 > 0xFFE )
    v32 = v31 | 1;
  else
    v32 = v31;
  if ( v32 || v27 + v15 > 0x1000 )
  {
    freecookie(v13);
    if ( (*(&v138->set.connect_only + 4) & 0x10) != 0 )
      Curl_infof(v138, "oversized cookie dropped, name/val %zu + %zu bytes", v15, v27);
    return 0;
  }
  v33 = v15 > 6;
  if ( v16 != 95 )
    v33 = 0;
  if ( v33 && v10[1] == 95 )
  {
    if ( curl_strnequal("__Secure-", v10, 9) )
    {
      v13->prefix |= 1u;
    }
    else if ( curl_strnequal("__Host-", v10, 7) )
    {
      v13->prefix |= 2u;
    }
  }
  if ( !v13->name )
  {
    if ( !v23 )
      goto LABEL_161;
    Curl_cfree(v13->name);
    v99 = Curl_memdup(v10, v15 + 1);
    v13->name = (char *)v99;
    if ( v99 )
      *(_BYTE *)(v99 + v15) = 0;
    Curl_cfree(v13->value);
    v100 = Curl_memdup(v24, v27 + 1);
    if ( v100 )
      v101 = 0;
    v13->value = (char *)v100;
    if ( v100 )
      *(_BYTE *)(v100 + v27) = v101;
    name = v13->name;
    if ( !name )
      goto LABEL_161;
    value = v13->value;
    if ( !value )
      goto LABEL_161;
    if ( value[strcspn(v13->value, badoctets_0)] || name[strcspn(name, badoctets_0)] )
    {
      if ( (*(&v138->set.connect_only + 4) & 0x10) != 0 )
        Curl_infof(v138, "invalid octets in name/value, cookie dropped");
      goto LABEL_161;
    }
    goto LABEL_45;
  }
  if ( v27 )
  {
    if ( v15 == 4 )
      goto LABEL_211;
  }
  else
  {
    if ( v15 == 6 )
    {
      if ( curl_strnequal("secure", v10, 6) )
      {
        if ( !v140 && domain_0[272] )
          goto LABEL_161;
        v10 = v17;
        v13->secure = 1;
        goto LABEL_46;
      }
      if ( !v23 )
        goto LABEL_45;
      goto LABEL_177;
    }
    if ( v15 == 8 )
    {
      if ( !curl_strnequal("httponly", v10, 8) )
        goto LABEL_45;
      v10 = v17;
      v13->httponly = 1;
      goto LABEL_46;
    }
    if ( !v23 )
      goto LABEL_45;
    if ( v15 == 4 )
    {
LABEL_211:
      if ( curl_strnequal("path", v10, v15) )
      {
        Curl_cfree(v13->path);
        v94 = Curl_memdup(v24, v27 + 1);
        v13->path = (char *)v94;
        if ( !v94 )
          goto LABEL_161;
        *(_BYTE *)(v94 + v27) = 0;
        if ( !v13->path )
          goto LABEL_161;
        Curl_cfree(v13->spath);
        v95 = sanitize_cookie_path(v13->path);
        v13->spath = v95;
        if ( !v95 )
          goto LABEL_161;
      }
      goto LABEL_45;
    }
  }
  if ( v15 == 6 )
  {
LABEL_177:
    v84 = curl_strnequal("domain", v10, 6);
    v85 = v27 == 0;
    if ( v27 )
      v85 = v84 == 0;
    if ( v85 )
      goto LABEL_45;
    if ( *v24 == 46 )
    {
      --v27;
      ++v24;
    }
    if ( v27 == 9 && curl_strnequal(v24, "localhost", 9) )
      goto LABEL_196;
    v86 = memchr(v24, 46, v27);
    if ( !v86 )
    {
      v88 = (const char *)&LC1;
      now = (time_t)&LC1;
LABEL_189:
      is_ipnum = Curl_host_is_ipnum(v88);
      if ( is_ipnum )
      {
        if ( !strncmp((const char *)v24, v88, v27) && strlen(v88) == v27 )
          goto LABEL_198;
      }
      else
      {
        v91 = strlen((const char *)now);
        v92 = v91;
        if ( v27 <= v91 )
        {
          v93 = now + v91 - v27;
          if ( curl_strnequal(v24, v93, v27) )
          {
            if ( v27 == v92 || *(_BYTE *)(v93 - 1) == 46 )
              goto LABEL_198;
          }
        }
      }
      if ( (*(&v138->set.connect_only + 4) & 0x10) != 0 )
      {
        v144 = 1;
        v10 = v17;
        Curl_infof(v138, "skipped cookie with bad tailmatch domain: %s", (const char *)v24);
      }
      else
      {
        v10 = v17;
        v144 = 1;
      }
      goto LABEL_46;
    }
    if ( v27 - (v86 - v24) > 1 )
    {
LABEL_196:
      v87 = (const char *)now;
      if ( !now )
      {
        is_ipnum = Curl_host_is_ipnum(v24);
LABEL_198:
        Curl_cfree(v13->domain);
        v90 = Curl_memdup(v24, v27 + 1);
        v13->domain = (char *)v90;
        if ( !v90 )
          goto LABEL_161;
        *(_BYTE *)(v90 + v27) = 0;
        if ( !v13->domain )
          goto LABEL_161;
        if ( is_ipnum )
          goto LABEL_45;
        v10 = v17;
        v13->tailmatch = 1;
        goto LABEL_46;
      }
    }
    else
    {
      v87 = (const char *)&LC1;
      now = (time_t)&LC1;
    }
    v88 = v87;
    goto LABEL_189;
  }
  if ( v15 != 7 || curl_strnequal("version", v10, 7) )
    goto LABEL_45;
  if ( !curl_strnequal("max-age", v10, 7) )
  {
    if ( curl_strnequal("expires", v10, 7) )
    {
      v107 = v27 == 127;
      if ( v27 <= 0x7F )
        v107 = v13->expires == 0;
      if ( v107 )
      {
        v108 = memcpy(date, v24, v27);
        *((_BYTE *)&v135 + v27 + 0x4C) = 0;
        v109 = Curl_getdate_capped(v108);
        if ( v109 )
        {
          if ( v109 >> 31 == -1 )
            v13->expires = 0LL;
          else
            v13->expires = v109;
        }
        else
        {
          v13->expires = 1LL;
        }
      }
    }
LABEL_45:
    v10 = v17;
    goto LABEL_46;
  }
  if ( *v24 == 34 )
    ++v24;
  v104 = curlx_strtoofft(v24, 0, 10, &v13->expires);
  if ( v104 == 1 )
    goto LABEL_313;
  if ( v104 == 2 )
    goto LABEL_306;
  if ( v104 )
    goto LABEL_45;
  HIDWORD(v105) = v13->expires;
  LODWORD(v105) = HIDWORD(v13->expires);
  if ( !v105 )
  {
LABEL_306:
    v10 = v17;
    v13->expires = 1LL;
    goto LABEL_46;
  }
  if ( __SPAIR64__(v146, ~v141) < __SPAIR64__(v105, HIDWORD(v105)) )
  {
LABEL_313:
    v10 = v17;
    v13->expires = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_46;
  }
  v10 = v17;
  v106 = __CFADD__(HIDWORD(v105), v141);
  LODWORD(v13->expires) = HIDWORD(v105) + v141;
  HIDWORD(v13->expires) = v145 + v106 + (_DWORD)v105;
LABEL_46:
  v16 = (unsigned __int8)*v17;
  if ( *v17 )
  {
    do
    {
      v34 = v16 == 9;
      if ( v16 != 9 )
        v34 = v16 == 32;
      if ( !v34 )
        goto LABEL_10;
      v35 = (unsigned __int8)*++v10;
      v16 = v35;
    }
    while ( v35 );
  }
LABEL_52:
  if ( v144 )
    goto LABEL_161;
  v36 = v13->domain == 0;
  if ( !now )
    v36 = 0;
  if ( v36 )
  {
    v134 = Curl_cstrdup(now);
    v13->domain = (char *)v134;
    if ( !v134 )
      goto LABEL_161;
  }
  v37 = v13->path == 0;
  if ( !s )
    v37 = 0;
  if ( v37 )
  {
    v126 = s;
    v127 = strchr(s, 63);
    v128 = v127 ? (char *)Curl_memrchr(v126, 47, v127 - v126) : strrchr(v126, 47);
    if ( v128 )
    {
      v129 = s;
      v130 = v128 - s;
      v131 = v130 + 1;
      v132 = (char *)Curl_cmalloc(v130 + 2);
      v13->path = v132;
      if ( !v132 )
        goto LABEL_161;
      memcpy(v132, v129, v131);
      v13->path[v131] = 0;
      v133 = sanitize_cookie_path(v13->path);
      v13->spath = v133;
      if ( !v133 )
        goto LABEL_161;
    }
  }
  if ( !v13->name )
    goto LABEL_161;
  ++v138->req.setcookies;
LABEL_61:
  prefix = v13->prefix;
  if ( (prefix & 1) != 0 )
  {
LABEL_62:
    v23 = v13->secure;
    if ( v13->secure )
    {
      if ( (prefix & 2) != 0 )
        goto LABEL_64;
      goto LABEL_68;
    }
    goto LABEL_320;
  }
LABEL_159:
  if ( (prefix & 2) != 0 )
  {
    if ( !v13->secure )
      goto LABEL_161;
LABEL_64:
    v39 = v13->path;
    if ( !v39 || *v39 != 47 || v39[1] || v13->tailmatch )
      goto LABEL_161;
  }
LABEL_68:
  v23 = *((unsigned __int8 *)domain_0 + 272);
  if ( !domain_0[272] && domain_0[273] && !v13->expires )
  {
LABEL_320:
    freecookie(v13);
    return (Cookie *)v23;
  }
  v40 = (CookieInfo *)domain_0;
  v14 = !badcookie;
  v41 = *((_DWORD *)domain_0 + 67);
  v13->livecookie = v23;
  v40->lastct = ++v41;
  v13->creationtime = v41;
  if ( v14 )
    remove_expired(v40);
  v42 = cookiehash(v13->domain);
  v43 = *(_DWORD *)&domain_0[4 * v42];
  v44 = v42;
  if ( !v43 )
  {
    if ( domain_0[272] )
    {
      v23 = (size_t)v13;
      if ( (*(&v138->set.connect_only + 4) & 0x10) != 0 )
      {
LABEL_309:
        Curl_infof(
          v138,
          "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
          "Added",
          *(const char **)(v23 + 4),
          *(const char **)(v23 + 8),
          *(const char **)(v23 + 20),
          *(const char **)(v23 + 12),
          *(_QWORD *)(v23 + 0x18));
        if ( v43 )
        {
LABEL_281:
          *(_DWORD *)v43 = v23;
LABEL_282:
          ++*((_DWORD *)domain_0 + 66);
          goto LABEL_283;
        }
      }
    }
    else
    {
      v23 = (size_t)v13;
    }
    *(_DWORD *)&domain_0[4 * v44] = v23;
    goto LABEL_282;
  }
  livecookie = 0;
  v23 = 0;
  v46 = 0;
  while ( 1 )
  {
    if ( !curl_strequal(*(_DWORD *)(v43 + 4), v13->name) )
      goto LABEL_85;
    v47 = *(_DWORD *)(v43 + 20);
    v48 = v13->domain;
    if ( v47 )
    {
      if ( !v48 || !curl_strequal(v47, v48) )
        goto LABEL_85;
    }
    else if ( v48 )
    {
      goto LABEL_85;
    }
    v49 = *(const char **)(v43 + 16);
    if ( v49 )
    {
      spath = v13->spath;
      if ( spath )
      {
        if ( *(_BYTE *)(v43 + 33) && !v140 && !v13->secure )
        {
          v124 = strchr(v49 + 1, 47);
          v125 = v124 ? v124 - v49 : strlen(v49);
          if ( curl_strnequal(v49, spath, v125) )
          {
            if ( (*(&v138->set.connect_only + 4) & 0x10) != 0 )
              Curl_infof(
                v138,
                "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                v13->name,
                v13->domain);
            goto LABEL_161;
          }
        }
      }
    }
LABEL_85:
    if ( v46 || !curl_strequal(*(_DWORD *)(v43 + 4), v13->name) )
      goto LABEL_75;
    v51 = *(_DWORD *)(v43 + 20);
    v52 = v13->domain;
    if ( v51 )
    {
      if ( !v52 || !curl_strequal(v51, v52) || *(unsigned __int8 *)(v43 + 32) != v13->tailmatch )
      {
LABEL_91:
        if ( !livecookie )
          goto LABEL_75;
      }
    }
    else if ( v52 )
    {
      goto LABEL_91;
    }
    v53 = *(_DWORD *)(v43 + 16);
    v54 = v13->spath;
    if ( v53 )
    {
      if ( !v54 )
      {
        v46 = 0;
        livecookie = 0;
        goto LABEL_75;
      }
      if ( !curl_strequal(v53, v54) )
        goto LABEL_287;
      v53 = *(_DWORD *)(v43 + 16);
      v54 = v13->spath;
    }
    if ( (v53 == 0) != (v54 == 0) )
    {
LABEL_287:
      livecookie = 0;
      goto LABEL_75;
    }
    livecookie = v13->livecookie;
    if ( v13->livecookie )
    {
      v23 = v43;
      v46 = v13;
    }
    else
    {
      if ( *(_BYTE *)(v43 + 34) )
        goto LABEL_161;
      v23 = v43;
      v46 = v13;
      livecookie = 1;
    }
LABEL_75:
    if ( !*(_DWORD *)v43 )
      break;
    v43 = *(_DWORD *)v43;
  }
  if ( v46 )
  {
    v46->next = *(Cookie **)v23;
    v110 = *(Cookie **)(v23 + 4);
    v46->creationtime = *(_DWORD *)(v23 + 36);
    Curl_cfree(v110);
    Curl_cfree(*(_DWORD *)(v23 + 8));
    Curl_cfree(*(_DWORD *)(v23 + 20));
    Curl_cfree(*(_DWORD *)(v23 + 12));
    Curl_cfree(*(_DWORD *)(v23 + 16));
    v111 = (Cookie *)v46->name;
    v112 = (Cookie *)v46->value;
    v113 = (Cookie *)v46->path;
    v114 = (void (__fastcall *)(Cookie *))Curl_cfree;
    *(_DWORD *)v23 = v46->next;
    *(_DWORD *)(v23 + 4) = v111;
    *(_DWORD *)(v23 + 8) = v112;
    *(_DWORD *)(v23 + 12) = v113;
    v115 = (Cookie *)v46->domain;
    expires = (Cookie *)v46->expires;
    expires_high = (Cookie *)HIDWORD(v46->expires);
    *(_DWORD *)(v23 + 16) = v46->spath;
    *(_DWORD *)(v23 + 20) = v115;
    *(_DWORD *)(v23 + 24) = expires;
    *(_DWORD *)(v23 + 28) = expires_high;
    creationtime = (Cookie *)v46->creationtime;
    v119 = *(Cookie **)&v46->prefix;
    v120 = (Cookie *)*((_DWORD *)&v46->prefix + 1);
    *(_DWORD *)(v23 + 32) = *(_DWORD *)&v46->tailmatch;
    *(_DWORD *)(v23 + 36) = creationtime;
    *(_DWORD *)(v23 + 40) = v119;
    *(_DWORD *)(v23 + 44) = v120;
    v114(v46);
  }
  else
  {
    v23 = (size_t)v13;
  }
  if ( !domain_0[272] || (*(&v138->set.connect_only + 4) & 0x10) == 0 )
  {
    if ( livecookie )
      goto LABEL_283;
    goto LABEL_281;
  }
  if ( !livecookie )
    goto LABEL_309;
  Curl_infof(
    v138,
    "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
    "Replaced",
    *(const char **)(v23 + 4),
    *(const char **)(v23 + 8),
    *(const char **)(v23 + 20),
    *(const char **)(v23 + 12),
    *(_QWORD *)(v23 + 0x18));
LABEL_283:
  v121 = *(_QWORD *)(v23 + 0x18);
  if ( v121 )
  {
    v122 = domain_0;
    if ( v121 < *((_QWORD *)domain_0 + 32) )
    {
      *((_DWORD *)domain_0 + 64) = v121;
      *((_DWORD *)v122 + 65) = HIDWORD(v121);
    }
  }
  return (Cookie *)v23;
}
