Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  int v16; // $s5
  time_t v17; // $v0
  int v18; // $s7
  Cookie *v19; // $v0
  Cookie *v20; // $s4
  char *j; // $fp
  char *i; // $s0
  int v23; // $s5
  size_t v24; // $v0
  size_t v25; // $s1
  char *v26; // $v1
  unsigned int v27; // $s6
  int v28; // $v0
  size_t v29; // $v0
  size_t v30; // $a2
  char *v31; // $s3
  int v32; // $v1
  size_t v33; // $s7
  int v34; // $s1
  char *v35; // $a0
  int v36; // $v1
  int v37; // $a2
  Cookie *v38; // $s5
  int v39; // $v0
  Cookie *v40; // $s1
  char *v41; // $v0
  int v42; // $v0
  Cookie *v43; // $s5
  const char *v44; // $v0
  const char *name; // $s1
  int v46; // $v1
  int v47; // $v0
  int v48; // $v0
  int v49; // $v0
  size_t v50; // $s5
  _BYTE *v51; // $v0
  const char *v52; // $s6
  int v53; // $s1
  const char *v54; // $a0
  int v55; // $v0
  int v56; // $v0
  Cookie *v57; // $s6
  int v58; // $v0
  int expires_high; // $v0
  unsigned int v60; // $v1
  _BOOL4 v61; // $a1
  char *v62; // $v0
  char *v63; // $v0
  CookieInfo *v64; // $s3
  int v65; // $at
  Cookie **v66; // $s2
  Cookie *next; // $v0
  Cookie *v68; // $s4
  Cookie *v69; // $s3
  char v70; // $s7
  Cookie *v71; // $s6
  char *v72; // $a1
  const char *spath; // $s1
  char *v74; // $s5
  char *v75; // $v0
  size_t v76; // $a2
  Cookie *v77; // $s1
  char *v78; // $a1
  int v79; // $at
  bool v80; // dc
  int v81; // $at
  char *v82; // $a1
  int v83; // $v0
  char *v84; // $v0
  int v85; // $v0
  const char *v86; // $a0
  Cookie *v87; // $s4
  Curl_easy *v88; // $s1
  const char *v89; // $a2
  int v90; // $s0
  char *v91; // $v0
  Cookie *v92; // $s2
  char *v93; // $v0
  __int64 v95; // $v0
  int next_expiration_high; // $at
  _BOOL4 v97; // $a1
  Cookie *v98; // $s1
  int v99; // [sp+2Ch] [-C4h]
  unsigned int v100; // [sp+30h] [-C0h]
  int v101; // [sp+34h] [-BCh]
  curl_off_t *p_expires; // [sp+3Ch] [-B4h]
  char v103; // [sp+44h] [-ACh]
  Curl_easy *v105; // [sp+4Ch] [-A4h]
  int v106; // [sp+50h] [-A0h]
  int v107; // [sp+54h] [-9Ch]
  CookieInfo *v108; // [sp+58h] [-98h]
  size_t v109; // [sp+64h] [-8Ch]
  int v110; // [sp+64h] [-8Ch]
  Cookie *v111; // [sp+6Ch] [-84h]
  char *v112[32]; // [sp+70h] [-80h] BYREF

  v16 = 0;
  v17 = time(0u);
  if ( data->req.setcookies >= 0x32u )
    return (Cookie *)v16;
  v18 = v17;
  v19 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v19 )
    return (Cookie *)v16;
  v20 = v19;
  v107 = v18;
  v106 = noexpire;
  v108 = c;
  j = (char *)lineptr;
  v111 = v19;
  if ( httpheader )
  {
    if ( strlen(lineptr) >= 0x1389 )
    {
LABEL_5:
      Curl_cfree(v20);
      return 0;
    }
    v105 = data;
    v99 = v18 >> 31;
    v101 = 0x7FFFFFFF - v99;
    v100 = ~v18;
    p_expires = &v20->expires;
    v103 = 0;
    while ( 1 )
    {
      for ( i = j + 1; ; ++i )
      {
        v23 = (unsigned __int8)*j;
        if ( v23 != 32 && v23 != 9 )
          break;
        ++j;
      }
      v24 = strcspn(j, ";\t\r\n=");
      if ( !v24 )
      {
        v110 = (int)j;
        goto LABEL_63;
      }
      v25 = v24;
      v26 = &j[v24];
      v27 = v24;
      do
      {
        v28 = (unsigned __int8)j[v27 - 1];
        if ( v28 != 32 && v28 != 9 )
          goto LABEL_21;
        --v27;
      }
      while ( v27 );
      v27 = 0;
LABEL_21:
      if ( *v26 == 61 )
      {
        v29 = strcspn(&j[v25 + 1], ";\r\n");
        v30 = 0;
        v109 = v25 + v29;
        if ( !v29 )
        {
          v31 = &j[v25 + 1];
          goto LABEL_37;
        }
        v31 = &i[v25 + v29];
        while ( 1 )
        {
          v32 = (unsigned __int8)*(v31 - 1);
          if ( v32 != 32 && v32 != 9 )
            break;
          --v29;
          --v31;
          if ( !v29 )
          {
            v31 = &j[v25 + 1];
            goto LABEL_37;
          }
        }
        v35 = &i[v25];
        v36 = 0;
        while ( 1 )
        {
          v37 = (unsigned __int8)v35[v36];
          if ( v37 != 32 && v37 != 9 )
            break;
          if ( v29 == ++v36 )
          {
            v30 = 0;
            goto LABEL_37;
          }
        }
        v30 = v29 - v36;
        v31 = &v35[v36];
LABEL_37:
        v33 = v30;
        if ( ((int (__fastcall *)(char *, int))memchr)(v31, 9) )
        {
          freecookie(v111);
          v16 = 0;
          if ( (*((_BYTE *)&data->set + 1337) & 0x20) == 0 )
            return (Cookie *)v16;
          goto LABEL_195;
        }
        v110 = (int)&j[v109 + 1];
        v34 = 1;
      }
      else
      {
        v110 = (int)v26;
        v33 = 0;
        v34 = 0;
        v31 = 0;
      }
      if ( v27 >= 0xFFF || v33 >= 0xFFF || v33 + v27 >= 0x1001 )
      {
        freecookie(v111);
        v16 = 0;
        if ( (*((_BYTE *)&data->set + 1337) & 0x20) == 0 )
          return (Cookie *)v16;
LABEL_195:
        ((void (*)(void))Curl_infof)();
        return (Cookie *)v16;
      }
      if ( v23 == 95 && v27 >= 7 && j[1] == 95 )
      {
        if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("__Secure-", j, 9) )
        {
          v111->prefix |= 1u;
        }
        else if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("__Host-", j, 7) )
        {
          v111->prefix |= 2u;
        }
      }
      if ( !v111->name )
      {
        if ( !v34 )
          goto LABEL_229;
        Curl_cfree(0);
        v42 = ((int (__fastcall *)(char *, unsigned int))Curl_strndup)(j, v27);
        v43 = v111;
        v111->name = (char *)v42;
        Curl_cfree(v111->value);
        v44 = (const char *)((int (__fastcall *)(char *, size_t))Curl_strndup)(v31, v33);
        v43->value = (char *)v44;
        if ( !v44 )
          goto LABEL_229;
        name = v111->name;
        if ( !name )
          goto LABEL_229;
        if ( v44[strcspn(v44, invalid_octets_badoctets)] || name[strcspn(name, invalid_octets_badoctets)] )
        {
          if ( (*((_BYTE *)&data->set + 1337) & 0x20) != 0 )
            Curl_infof(data, "invalid octets in name/value, cookie dropped");
          goto LABEL_229;
        }
        goto LABEL_63;
      }
      if ( v33 )
        goto LABEL_51;
      if ( v27 == 8 )
      {
        if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("httponly", j, 8) )
        {
          v111->httponly = 1;
          goto LABEL_63;
        }
      }
      else if ( v27 == 6 && ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("secure", j, 6) )
      {
        if ( !secure && v108->running )
          goto LABEL_229;
        v111->secure = 1;
        goto LABEL_63;
      }
      if ( v34 )
      {
LABEL_51:
        if ( v27 == 7 )
        {
          if ( !((int (__fastcall *)(const char *, char *, int))curl_strnequal)("version", j, 7) )
          {
            if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("max-age", j, 7) )
            {
              if ( *v31 == 0x22 )
                ++v31;
              v47 = ((int (__fastcall *)(char *, _DWORD, int, curl_off_t *))curlx_strtoofft)(v31, 0, 10, p_expires);
              if ( v47 )
              {
                if ( v47 == 2 )
                {
                  *(_DWORD *)p_expires = 1;
                  HIDWORD(v20->expires) = 0;
                }
                else if ( v47 == 1 )
                {
                  *(_DWORD *)p_expires = -1;
                  HIDWORD(v20->expires) = 0x7FFFFFFF;
                }
              }
              else
              {
                expires_high = HIDWORD(v20->expires);
                v60 = *(_DWORD *)p_expires;
                if ( *p_expires )
                {
                  v61 = v101 >= expires_high;
                  if ( v101 == expires_high )
                    v61 = v100 >= v60;
                  if ( v61 )
                  {
                    *(_DWORD *)p_expires = v60 + v107;
                    HIDWORD(v20->expires) = expires_high + v99 + __CFADD__(v60, v107);
                  }
                  else
                  {
                    *(_DWORD *)p_expires = -1;
                    HIDWORD(v20->expires) = 0x7FFFFFFF;
                  }
                }
                else
                {
                  *(_DWORD *)p_expires = 1;
                  HIDWORD(v20->expires) = 0;
                }
              }
            }
            else if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("expires", j, 7)
                   && v33 < 0x80
                   && !*p_expires )
            {
              memcpy(v112, v31, v33);
              *((_BYTE *)v112 + v33) = 0;
              v56 = ((int (__fastcall *)(char **))Curl_getdate_capped)(v112);
              *p_expires = v56;
              if ( v56 )
              {
                if ( v56 < 0 )
                {
                  HIDWORD(v20->expires) = 0;
                  *(_DWORD *)p_expires = 0;
                }
              }
              else
              {
                *(_DWORD *)p_expires = 1;
                HIDWORD(v20->expires) = 0;
              }
            }
          }
          goto LABEL_63;
        }
        if ( v27 != 6 )
        {
          if ( v27 == 4 )
          {
            if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("path", j, 4) )
            {
              v38 = v111;
              Curl_cfree(v111->path);
              v39 = ((int (__fastcall *)(char *, size_t))Curl_strndup)(v31, v33);
              v38->path = (char *)v39;
              if ( !v39 )
                goto LABEL_229;
              v40 = v111;
              Curl_cfree(v111->spath);
              v41 = sanitize_cookie_path(v40->path);
              v40->spath = v41;
              if ( !v41 )
                goto LABEL_229;
            }
          }
          goto LABEL_63;
        }
        v48 = ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("domain", j, 6);
        if ( v33 && v48 )
        {
          v49 = (unsigned __int8)*v31;
          if ( v49 == 0x2E )
            ++v31;
          v50 = (__PAIR64__(v33, v49 ^ 0x2Eu) - 1) >> 32;
          if ( v50 == 9 && ((int (__fastcall *)(char *, const char *, int))curl_strnequal)(v31, "localhost", 9)
            || (v51 = (_BYTE *)memchr(v31, 46, v50)) != 0 && (unsigned int)(&v31[v50] - v51) >= 2 )
          {
            v52 = domain;
            v54 = domain;
            if ( !domain )
              v54 = v31;
            v55 = ((int (__fastcall *)(const char *))Curl_host_is_ipnum)(v54);
            v53 = v55;
            if ( !domain )
            {
              v52 = 0;
LABEL_113:
              domain = v52;
              v57 = v111;
              Curl_cfree(v111->domain);
              v58 = ((int (__fastcall *)(char *, size_t))Curl_strndup)(v31, v50);
              v57->domain = (char *)v58;
              if ( v53 || !v58 )
              {
                if ( !v58 )
                  goto LABEL_229;
                v103 |= v58 == 0;
              }
              else
              {
                v111->tailmatch = 1;
              }
              goto LABEL_63;
            }
            if ( !v55 )
              goto LABEL_103;
LABEL_92:
            if ( !strncmp(v31, v52, v50) )
            {
              v53 = 1;
              if ( v50 == strlen(v52) )
                goto LABEL_113;
            }
          }
          else
          {
            v52 = ":";
            if ( ((int (__fastcall *)(const char *))Curl_host_is_ipnum)(":") )
              goto LABEL_92;
LABEL_103:
            v53 = 0;
            if ( ((int (__fastcall *)(char *, size_t, const char *))cookie_tailmatch)(v31, v50, v52) )
              goto LABEL_113;
          }
          domain = v52;
          v103 = 1;
          if ( (*((_BYTE *)&data->set + 1337) & 0x20) != 0 )
            ((void (*)(void))Curl_infof)();
        }
      }
LABEL_63:
      for ( j = (char *)(v110 + 1); ; ++j )
      {
        v46 = (unsigned __int8)*(j - 1);
        if ( v46 != 32 && v46 != 9 )
          break;
      }
      if ( v46 != 59 )
      {
        if ( (v103 & 1) != 0 )
          goto LABEL_229;
        if ( domain )
        {
          if ( !v111->domain )
          {
            v83 = Curl_cstrdup(domain);
            v111->domain = (char *)v83;
            if ( !v83 )
              goto LABEL_229;
          }
        }
        if ( path && !v111->path )
        {
          v84 = strchr(path, 63);
          v85 = v84 ? ((int (__fastcall *)(const char *, int, int))Curl_memrchr)(path, 47, v84 - path) : (int)strrchr(path, 47);
          if ( v85 )
          {
            v90 = v85 - (_DWORD)path;
            v91 = (char *)Curl_cmalloc(v85 - (_DWORD)path + 2);
            v111->path = v91;
            if ( !v91 )
              goto LABEL_229;
            memcpy(v91, path, v90 + 1);
            v92 = v111;
            v111->path[v90 + 1] = 0;
            v93 = sanitize_cookie_path(v111->path);
            v92->spath = v93;
            if ( !v93 )
              goto LABEL_229;
          }
        }
        if ( !v111->name )
        {
LABEL_229:
          freecookie(v111);
          return 0;
        }
        v88 = v105;
        ++v105->req.setcookies;
        v87 = v111;
        v16 = 0;
        if ( (v111->prefix & 1) != 0 && !v111->secure
          || (v111->prefix & 2) != 0 && (!v111->secure || (v86 = v111->path) == 0 || strcmp(v86, "/") || v87->tailmatch)
          || (v64 = v108, !v108->running) && v108->newsession && !v87->expires )
        {
          freecookie(v87);
          return (Cookie *)v16;
        }
        v87->livecookie = v108->running;
        v65 = v108->lastct + 1;
        v108->lastct = v65;
        v87->creationtime = v65;
        if ( !v106 )
          remove_expired(v108);
        v66 = &v108->cookies[cookiehash(v87->domain)];
        next = *v66;
        if ( *v66 )
        {
          v68 = 0;
          v69 = 0;
          v70 = 0;
          while ( 1 )
          {
            v71 = next;
            if ( !((int (__fastcall *)(char *, char *))curl_strequal)(next->name, v111->name) )
              goto LABEL_157;
            v72 = v111->domain;
            if ( v71->domain )
            {
              if ( !v72 || !((int (*)(void))curl_strequal)() )
                goto LABEL_157;
            }
            else if ( v72 )
            {
              goto LABEL_157;
            }
            spath = v71->spath;
            if ( spath )
            {
              v74 = v111->spath;
              if ( v74 )
              {
                if ( v71->secure && !v111->secure && !secure )
                {
                  v75 = strchr(spath + 1, 47);
                  v76 = v75 ? v75 - spath : strlen(spath);
                  if ( ((int (__fastcall *)(const char *, char *, size_t))curl_strnequal)(spath, v74, v76) )
                  {
                    v98 = v111;
                    if ( v105 && (*((_BYTE *)&v105->set + 1337) & 0x20) != 0 )
                      Curl_infof(
                        v105,
                        "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                        v111->name,
                        v111->domain);
                    freecookie(v98);
                    return 0;
                  }
                }
              }
            }
LABEL_157:
            if ( !v68 )
            {
              v77 = v111;
              if ( !((int (__fastcall *)(char *, char *))curl_strequal)(v71->name, v111->name) )
              {
                v68 = 0;
                goto LABEL_158;
              }
              v78 = v77->domain;
              if ( v71->domain )
              {
                if ( v78 && ((int (*)(void))curl_strequal)() )
                {
                  v79 = v70 & 1 | (v71->tailmatch == v77->tailmatch);
                  v70 = 0;
                  if ( !v79 )
                  {
                    v68 = 0;
                    goto LABEL_158;
                  }
                }
                else
                {
                  v80 = (v70 & 1) != 0;
                  v70 = 0;
                  if ( !v80 )
                  {
                    v68 = 0;
                    goto LABEL_158;
                  }
                }
              }
              else
              {
                v81 = v70 & 1 | (v78 == 0);
                v70 = 0;
                if ( !v81 )
                {
                  v68 = 0;
                  goto LABEL_158;
                }
              }
              v82 = v77->spath;
              if ( v71->spath )
              {
                if ( v82 )
                {
                  if ( ((int (*)(void))curl_strequal)() )
                  {
                    v70 = 0;
                    v68 = 0;
                    if ( (v71->spath != 0) != (v77->spath == 0) )
                      goto LABEL_179;
                  }
                  else
                  {
                    v70 = 0;
                    v68 = 0;
                  }
                }
                else
                {
                  if ( v77->spath )
                  {
LABEL_179:
                    v68 = v111;
                    v70 = 1;
                    if ( v111->livecookie )
                    {
                      v69 = v71;
                    }
                    else
                    {
                      v69 = v71;
                      if ( v71->livecookie )
                        goto LABEL_229;
                    }
                    goto LABEL_158;
                  }
                  v70 = 0;
                  v68 = 0;
                }
              }
              else
              {
                v70 = 0;
                v68 = 0;
                if ( !v82 )
                  goto LABEL_179;
              }
            }
LABEL_158:
            next = v71->next;
            if ( !v71->next )
            {
              if ( v68 )
              {
                v68->next = v69->next;
                v68->creationtime = v69->creationtime;
                Curl_cfree(v69->name);
                Curl_cfree(v69->value);
                Curl_cfree(v69->domain);
                Curl_cfree(v69->path);
                Curl_cfree(v69->spath);
                memcpy(v69, v68, sizeof(Cookie));
                Curl_cfree(v68);
                v87 = v69;
                v64 = v108;
                v88 = v105;
              }
              else
              {
                v88 = v105;
                v87 = v111;
                v64 = v108;
              }
              goto LABEL_213;
            }
          }
        }
        v71 = 0;
        v70 = 0;
LABEL_213:
        if ( v88 && v64->running && (*((_BYTE *)&v88->set + 1337) & 0x20) != 0 )
        {
          v89 = "Added";
          if ( (v70 & 1) != 0 )
            v89 = "Replaced";
          Curl_infof(
            v88,
            "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
            v89,
            v87->name,
            v87->value,
            v87->domain,
            v87->path,
            v87->expires);
          if ( (v70 & 1) == 0 )
          {
LABEL_221:
            if ( v71 )
              v71->next = v87;
            else
              *v66 = v87;
            ++v64->numcookies;
          }
        }
        else if ( (v70 & 1) == 0 )
        {
          goto LABEL_221;
        }
        LODWORD(v95) = HIDWORD(v87->expires);
        HIDWORD(v95) = v87->expires;
        if ( !v95 )
          return v87;
        next_expiration_high = HIDWORD(v64->next_expiration);
        v97 = (int)v95 >= next_expiration_high;
        if ( (unsigned int)v95 == next_expiration_high )
          v97 = HIDWORD(v95) >= LODWORD(v64->next_expiration);
        if ( !v97 )
        {
          LODWORD(v64->next_expiration) = HIDWORD(v95);
          HIDWORD(v64->next_expiration) = v95;
        }
        return v87;
      }
    }
  }
  v112[0] = 0;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
  {
    v20->httponly = 1;
    j = (char *)(lineptr + 10);
  }
  if ( *j == 35 )
    goto LABEL_5;
  v62 = strchr(j, 13);
  if ( v62 )
    *v62 = 0;
  v63 = strchr(j, 10);
  if ( v63 )
    *v63 = 0;
  if ( strtok_r(j, "\t", v112) )
    JUMPOUT(0xF28);
  freecookie(v20);
  return 0;
}
