Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  int v16; // $s3
  time_t v17; // $v0
  Cookie *v18; // $v0
  Cookie *v19; // $s4
  char *j; // $s3
  char *i; // $s0
  int v22; // $s5
  size_t v23; // $v0
  size_t v24; // $s1
  char *v25; // $s7
  unsigned int v26; // $s6
  int v27; // $v0
  unsigned int v28; // $v1
  char *v29; // $fp
  size_t v30; // $v0
  unsigned int v31; // $a2
  int v32; // $v1
  char *v33; // $a0
  int v34; // $v1
  int v35; // $a2
  unsigned int v36; // $s1
  unsigned int v37; // $s1
  int v38; // $v0
  Cookie *v39; // $s5
  unsigned int v40; // $s6
  int v41; // $v0
  Cookie *v42; // $s1
  char *v43; // $v0
  unsigned int v44; // $s5
  char *v45; // $v0
  Cookie *v46; // $s1
  int v47; // $v0
  const char *name; // $s1
  char *value; // $s5
  int v50; // $v0
  int v51; // $v0
  size_t v52; // $s5
  int v53; // $v0
  unsigned int v54; // $s1
  int v55; // $v0
  int v56; // $v0
  size_t v57; // $s3
  _BYTE *v58; // $v0
  const char *v59; // $s6
  const char *v60; // $a0
  int v61; // $v0
  int v62; // $s1
  int v63; // $v0
  int v64; // $v0
  int v65; // $v0
  char *v66; // $v1
  _BOOL4 v67; // $v0
  int v68; // $v0
  unsigned int expires; // $v1
  _BOOL4 v70; // $a0
  char *v71; // $v0
  char *v72; // $v0
  Cookie *v73; // $s1
  int v74; // $at
  Cookie **v75; // $s2
  Cookie *next; // $v0
  Cookie *v77; // $s4
  Cookie *v78; // $s3
  char v79; // $s7
  Cookie *v80; // $s6
  char *v81; // $a1
  const char *spath; // $s1
  char *v83; // $s5
  char *v84; // $v0
  size_t v85; // $a2
  char *v86; // $a1
  int v87; // $at
  bool v88; // dc
  int v89; // $at
  char *v90; // $a1
  char *v91; // $v0
  char *v92; // $v0
  int v93; // $v0
  char *v94; // $a0
  const char *v95; // $a2
  curl_off_t v96; // $v1
  int next_expiration_high; // $at
  _BOOL4 v98; // $a1
  int v99; // $s0
  char *v100; // $v0
  Cookie *v101; // $s2
  char *v102; // $v0
  int v104; // [sp+30h] [-C0h]
  int *p_expires; // [sp+38h] [-B8h]
  char v106; // [sp+43h] [-ADh]
  int v108; // [sp+48h] [-A8h]
  Curl_easy *v109; // [sp+4Ch] [-A4h]
  CookieInfo *v110; // [sp+50h] [-A0h]
  size_t v111; // [sp+54h] [-9Ch]
  int v112; // [sp+5Ch] [-94h]
  int v113; // [sp+60h] [-90h]
  Cookie *co; // [sp+6Ch] [-84h]
  char *v115[32]; // [sp+70h] [-80h] BYREF

  v16 = 0;
  v17 = time(0u);
  if ( data->req.setcookies >= 0x32u )
    return (Cookie *)v16;
  v112 = v17;
  v18 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v18 )
    return (Cookie *)v16;
  v19 = v18;
  j = (char *)lineptr;
  co = v18;
  if ( !httpheader )
  {
    v115[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v19->httponly = 1;
      j = (char *)(lineptr + 10);
    }
    if ( *j != 35 )
    {
      v71 = strchr(j, 13);
      if ( v71 )
        *v71 = 0;
      v72 = strchr(j, 10);
      if ( v72 )
        *v72 = 0;
      if ( strtok_r(j, "\t", v115) )
        JUMPOUT(0xF58);
      freecookie(co);
      return 0;
    }
LABEL_5:
    Curl_cfree(v19);
    return 0;
  }
  if ( strlen(lineptr) >= 0x1389 )
    goto LABEL_5;
  v108 = noexpire;
  v110 = c;
  v109 = data;
  v104 = 0x7FFFFFFF - (v112 >> 0x1F);
  p_expires = (int *)&v19->expires;
  v106 = 0;
  do
  {
    for ( i = j + 1; ; ++i )
    {
      v22 = (unsigned __int8)*j;
      if ( v22 != 32 && v22 != 9 )
        break;
      ++j;
    }
    v23 = strcspn(j, ";\t\r\n=");
    if ( !v23 )
    {
      v25 = j;
      goto LABEL_67;
    }
    v24 = v23;
    v25 = &j[v23];
    v26 = v23;
    while ( 1 )
    {
      v27 = (unsigned __int8)j[v26 - 1];
      if ( v27 != 32 && v27 != 9 )
        break;
      if ( !--v26 )
      {
        v26 = 0;
        break;
      }
    }
    v28 = 0;
    v29 = 0;
    v113 = (unsigned __int8)*v25;
    if ( v113 == 61 )
    {
      v30 = strcspn(&j[v24 + 1], ";\r\n");
      v31 = 0;
      v111 = v24 + v30;
      if ( v30 )
      {
        v29 = &i[v24 + v30];
        while ( 1 )
        {
          v32 = (unsigned __int8)*(v29 - 1);
          if ( v32 != 32 && v32 != 9 )
            break;
          --v30;
          --v29;
          if ( !v30 )
          {
            v29 = &j[v24 + 1];
            goto LABEL_36;
          }
        }
        v33 = &i[v24];
        v34 = 0;
        while ( 1 )
        {
          v35 = (unsigned __int8)v33[v34];
          if ( v35 != 32 && v35 != 9 )
            break;
          if ( v30 == ++v34 )
          {
            v31 = 0;
            goto LABEL_36;
          }
        }
        v31 = v30 - v34;
        v29 = &v33[v34];
      }
      else
      {
        v29 = &j[v24 + 1];
      }
LABEL_36:
      v36 = v31;
      if ( ((int (__fastcall *)(char *, int))memchr)(v29, 9) )
      {
        freecookie(co);
        v16 = 0;
        if ( (*((_BYTE *)&data->set + 1338) & 8) == 0 )
          return (Cookie *)v16;
        goto LABEL_199;
      }
      v25 = &j[v111 + 1];
      v28 = v36;
    }
    if ( v26 >= 0xFFF || v28 >= 0xFFF || v28 + v26 >= 0x1001 )
    {
      freecookie(co);
      v16 = 0;
      if ( (*((_BYTE *)&data->set + 1338) & 8) == 0 )
        return (Cookie *)v16;
LABEL_199:
      ((void (*)(void))Curl_infof)();
      return (Cookie *)v16;
    }
    if ( v22 == 95 && v26 >= 7 && j[1] == 95 )
    {
      v37 = v28;
      if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("__Secure-", j, 9) )
      {
        co->prefix |= 1u;
        v28 = v37;
      }
      else
      {
        v38 = ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("__Host-", j, 7);
        v28 = v37;
        if ( v38 )
          co->prefix |= 2u;
      }
    }
    v39 = co;
    if ( co->name )
    {
      if ( !v28 )
      {
        if ( v26 == 8 )
        {
          v63 = ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("httponly", j, 8);
          v28 = 0;
          if ( v63 )
          {
            v39->httponly = 1;
            goto LABEL_67;
          }
        }
        else if ( v26 == 6 )
        {
          v51 = ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("secure", j, 6);
          v28 = 0;
          if ( v51 )
          {
            if ( !secure && v110->running )
              goto LABEL_242;
            co->secure = 1;
            goto LABEL_67;
          }
        }
        if ( v113 != 61 )
          goto LABEL_67;
      }
      switch ( v26 )
      {
        case 7u:
          v52 = v28;
          if ( !((int (__fastcall *)(const char *, char *, int))curl_strnequal)("version", j, 7) )
          {
            if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("max-age", j, 7) )
            {
              if ( *v29 == 0x22 )
                ++v29;
              v53 = ((int (__fastcall *)(char *, _DWORD, int, int *))curlx_strtoofft)(v29, 0, 10, p_expires);
              if ( v53 )
              {
                if ( v53 == 2 )
                {
                  LODWORD(v19->expires) = 1;
                  *p_expires = 0;
                }
                else if ( v53 == 1 )
                {
                  LODWORD(v19->expires) = -1;
                  *p_expires = 0x7FFFFFFF;
                }
              }
              else
              {
                v68 = *p_expires;
                expires = v19->expires;
                if ( *(_QWORD *)p_expires )
                {
                  v70 = v104 >= v68;
                  if ( v104 == v68 )
                    v70 = ~v112 >= expires;
                  if ( v70 )
                  {
                    LODWORD(v19->expires) = expires + v112;
                    *p_expires = v68 + (v112 >> 0x1F) + __CFADD__(expires, v112);
                  }
                  else
                  {
                    LODWORD(v19->expires) = -1;
                    *p_expires = 0x7FFFFFFF;
                  }
                }
                else
                {
                  LODWORD(v19->expires) = 1;
                  *p_expires = 0;
                }
              }
            }
            else if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("expires", j, 7)
                   && v52 < 0x80
                   && !*(_QWORD *)p_expires )
            {
              memcpy(v115, v29, v52);
              *((_BYTE *)v115 + v52) = 0;
              v64 = ((int (__fastcall *)(char **))Curl_getdate_capped)(v115);
              *(_QWORD *)p_expires = v64;
              if ( v64 )
              {
                if ( v64 < 0 )
                {
                  LODWORD(v19->expires) = 0;
                  *p_expires = 0;
                }
              }
              else
              {
                LODWORD(v19->expires) = 1;
                *p_expires = 0;
              }
            }
          }
          break;
        case 6u:
          v54 = v28;
          v55 = ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("domain", j, 6);
          if ( !v54 || !v55 )
            break;
          v56 = (unsigned __int8)*v29;
          if ( v56 == 0x2E )
            ++v29;
          v57 = (__PAIR64__(v54, v56 ^ 0x2Eu) - 1) >> 32;
          if ( v57 == 9 && ((int (__fastcall *)(char *, const char *, int))curl_strnequal)(v29, "localhost", 9)
            || (v58 = (_BYTE *)memchr(v29, 46, v57)) != 0 && (unsigned int)(&v29[v57] - v58) >= 2 )
          {
            v59 = domain;
            v60 = domain;
            if ( !domain )
              v60 = v29;
            v61 = ((int (__fastcall *)(const char *))Curl_host_is_ipnum)(v60);
            v62 = v61;
            if ( !domain )
            {
              domain = 0;
LABEL_117:
              Curl_cfree(v39->domain);
              v65 = Curl_memdup(v29, v57 + 1);
              v39->domain = (char *)v65;
              if ( !v65 )
                goto LABEL_242;
              *(_BYTE *)(v65 + v57) = 0;
              v66 = co->domain;
              v67 = v66 == 0;
              if ( v62 | v67 )
              {
                if ( !v66 )
                  goto LABEL_242;
                v106 |= v67;
              }
              else
              {
                co->tailmatch = 1;
              }
              break;
            }
            if ( !v61 )
            {
LABEL_99:
              domain = v59;
              v62 = 0;
              if ( !((int (__fastcall *)(char *, size_t, const char *))cookie_tailmatch)(v29, v57, v59) )
                goto LABEL_108;
              goto LABEL_117;
            }
          }
          else
          {
            v59 = ":";
            if ( !((int (__fastcall *)(const char *))Curl_host_is_ipnum)(":") )
              goto LABEL_99;
          }
          domain = v59;
          if ( strncmp(v29, v59, v57) || (v62 = 1, v57 != strlen(v59)) )
          {
LABEL_108:
            v106 = 1;
            if ( (*((_BYTE *)&data->set + 1338) & 8) != 0 )
              ((void (*)(void))Curl_infof)();
            break;
          }
          goto LABEL_117;
        case 4u:
          v40 = v28;
          if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("path", j, 4) )
          {
            Curl_cfree(v39->path);
            v41 = Curl_memdup(v29, v40 + 1);
            v39->path = (char *)v41;
            if ( !v41 )
              goto LABEL_242;
            *(_BYTE *)(v41 + v40) = 0;
            if ( !co->path )
              goto LABEL_242;
            v42 = co;
            Curl_cfree(co->spath);
            v43 = sanitize_cookie_path(v42->path);
            v42->spath = v43;
            if ( !v43 )
              goto LABEL_242;
          }
          break;
      }
    }
    else
    {
      if ( v113 != 61 )
        goto LABEL_242;
      v44 = v28;
      Curl_cfree(0);
      v45 = (char *)Curl_memdup(j, v26 + 1);
      v46 = co;
      co->name = v45;
      if ( v45 )
        v45[v26] = 0;
      Curl_cfree(v46->value);
      v47 = Curl_memdup(v29, v44 + 1);
      v46->value = (char *)v47;
      if ( v47 )
        *(_BYTE *)(v47 + v44) = 0;
      name = v46->name;
      if ( !name )
        goto LABEL_242;
      value = co->value;
      if ( !value )
        goto LABEL_242;
      if ( value[strcspn(co->value, invalid_octets_badoctets)] || name[strcspn(name, invalid_octets_badoctets)] )
      {
        if ( (*((_BYTE *)&data->set + 1338) & 8) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
        goto LABEL_242;
      }
    }
LABEL_67:
    for ( j = v25 + 1; ; ++j )
    {
      v50 = (unsigned __int8)*(j - 1);
      if ( v50 != 32 && v50 != 9 )
        break;
    }
  }
  while ( v50 == 59 );
  if ( (v106 & 1) != 0 )
    goto LABEL_242;
  if ( domain )
  {
    if ( !co->domain )
    {
      v91 = (char *)Curl_cstrdup(domain);
      co->domain = v91;
      if ( !v91 )
        goto LABEL_242;
    }
  }
  if ( path && !co->path )
  {
    v92 = strchr(path, 63);
    v93 = v92 ? ((int (__fastcall *)(const char *, int, int))Curl_memrchr)(path, 47, v92 - path) : (int)strrchr(path, 47);
    if ( v93 )
    {
      v99 = v93 - (_DWORD)path;
      v100 = (char *)Curl_cmalloc(v93 - (_DWORD)path + 2);
      co->path = v100;
      if ( !v100 )
        goto LABEL_242;
      memcpy(v100, path, v99 + 1);
      v101 = co;
      co->path[v99 + 1] = 0;
      v102 = sanitize_cookie_path(co->path);
      v101->spath = v102;
      if ( !v102 )
        goto LABEL_242;
    }
  }
  if ( !co->name )
  {
LABEL_242:
    freecookie(co);
    return 0;
  }
  ++v109->req.setcookies;
  v73 = co;
  v16 = 0;
  if ( (co->prefix & 1) != 0 && !co->secure )
  {
    freecookie(co);
    return (Cookie *)v16;
  }
  if ( (co->prefix & 2) != 0 && (!co->secure || (v94 = co->path) == 0 || strcmp(v94, "/") || v73->tailmatch)
    || !v110->running && v110->newsession && !v73->expires )
  {
    freecookie(v73);
    return (Cookie *)v16;
  }
  v73->livecookie = v110->running;
  v74 = v110->lastct + 1;
  v110->lastct = v74;
  v73->creationtime = v74;
  if ( !v108 )
    remove_expired(v110);
  v75 = &v110->cookies[cookiehash(v73->domain)];
  next = *v75;
  if ( !*v75 )
  {
    v80 = 0;
    v79 = 0;
    goto LABEL_216;
  }
  v77 = 0;
  v78 = 0;
  v79 = 0;
  while ( 2 )
  {
    v80 = next;
    if ( ((int (__fastcall *)(char *, char *))curl_strequal)(next->name, v73->name) )
    {
      v81 = co->domain;
      if ( v80->domain )
      {
        if ( !v81 || !((int (*)(void))curl_strequal)() )
          goto LABEL_160;
      }
      else if ( v81 )
      {
        goto LABEL_160;
      }
      spath = v80->spath;
      if ( spath )
      {
        v83 = co->spath;
        if ( v83 )
        {
          if ( v80->secure && !co->secure && !secure )
          {
            v84 = strchr(spath + 1, 47);
            v85 = v84 ? v84 - spath : strlen(spath);
            if ( ((int (__fastcall *)(const char *, char *, size_t))curl_strnequal)(spath, v83, v85) )
            {
              v73 = co;
              if ( v109 && (*((_BYTE *)&v109->set + 1338) & 8) != 0 )
                Curl_infof(
                  v109,
                  "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                  co->name,
                  co->domain);
LABEL_186:
              freecookie(v73);
              return 0;
            }
          }
        }
      }
    }
LABEL_160:
    if ( v77 )
    {
      v73 = co;
      goto LABEL_162;
    }
    v73 = co;
    if ( ((int (__fastcall *)(char *, char *))curl_strequal)(v80->name, co->name) )
    {
      v86 = v73->domain;
      if ( v80->domain )
      {
        if ( v86 && ((int (*)(void))curl_strequal)() )
        {
          v87 = v79 & 1 | (v80->tailmatch == v73->tailmatch);
          v79 = 0;
          if ( !v87 )
          {
            v77 = 0;
            goto LABEL_162;
          }
LABEL_174:
          v90 = v73->spath;
          if ( v80->spath )
          {
            if ( v90 )
            {
              if ( ((int (*)(void))curl_strequal)() )
              {
                v79 = 0;
                v77 = 0;
                if ( (v80->spath != 0) != (v73->spath == 0) )
                  goto LABEL_183;
              }
              else
              {
                v79 = 0;
                v77 = 0;
              }
            }
            else if ( v73->spath )
            {
LABEL_183:
              v79 = 1;
              if ( v73->livecookie )
              {
                v78 = v80;
                v77 = v73;
              }
              else
              {
                v78 = v80;
                v77 = v73;
                if ( v80->livecookie )
                  goto LABEL_186;
              }
            }
            else
            {
              v79 = 0;
              v77 = 0;
            }
          }
          else
          {
            v79 = 0;
            v77 = 0;
            if ( !v90 )
              goto LABEL_183;
          }
        }
        else
        {
          v88 = (v79 & 1) != 0;
          v79 = 0;
          if ( v88 )
            goto LABEL_174;
          v77 = 0;
        }
      }
      else
      {
        v89 = v79 & 1 | (v86 == 0);
        v79 = 0;
        if ( v89 )
          goto LABEL_174;
        v77 = 0;
      }
    }
    else
    {
      v77 = 0;
    }
LABEL_162:
    next = v80->next;
    if ( v80->next )
      continue;
    break;
  }
  if ( v77 )
  {
    v77->next = v78->next;
    v77->creationtime = v78->creationtime;
    Curl_cfree(v78->name);
    Curl_cfree(v78->value);
    Curl_cfree(v78->domain);
    Curl_cfree(v78->path);
    Curl_cfree(v78->spath);
    memcpy(v78, v77, sizeof(Cookie));
    Curl_cfree(v77);
    v73 = v78;
  }
LABEL_216:
  if ( v109 && v110->running && (*((_BYTE *)&v109->set + 1338) & 8) != 0 )
  {
    v95 = "Added";
    if ( (v79 & 1) != 0 )
      v95 = "Replaced";
    Curl_infof(
      v109,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
      v95,
      v73->name,
      v73->value,
      v73->domain,
      v73->path,
      v73->expires);
    if ( (v79 & 1) == 0 )
    {
LABEL_224:
      if ( v80 )
        v80->next = v73;
      else
        *v75 = v73;
      ++v110->numcookies;
    }
  }
  else if ( (v79 & 1) == 0 )
  {
    goto LABEL_224;
  }
  v96 = v73->expires;
  if ( !v96 )
    return v73;
  next_expiration_high = HIDWORD(v110->next_expiration);
  v98 = SHIDWORD(v96) >= next_expiration_high;
  if ( HIDWORD(v96) == next_expiration_high )
    v98 = (unsigned int)v96 >= LODWORD(v110->next_expiration);
  if ( !v98 )
    v110->next_expiration = v96;
  return v73;
}
