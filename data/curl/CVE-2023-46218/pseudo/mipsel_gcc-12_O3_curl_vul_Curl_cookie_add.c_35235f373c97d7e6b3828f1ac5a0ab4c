Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        _BOOL4 httpheader,
        int noexpire,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v13; // $s6
  time_t v14; // $v0
  bool v16; // dc
  Cookie *v17; // $s0
  int v18; // $s2
  size_t v19; // $s7
  int v20; // $v0
  void (*v21)(Cookie *); // $t9
  unsigned __int8 prefix; // $v0
  int v23; // $v0
  CookieInfo *v24; // $v0
  char *v25; // $v1
  void (*v26)(Cookie *); // $t9
  bool running; // $v1
  CookieInfo *v28; // $a0
  int lastct; // $v0
  size_t v30; // $v0
  Cookie **v31; // $s7
  Cookie *v32; // $fp
  int livecookie; // $s5
  Cookie *v34; // $s4
  Cookie *v35; // $s1
  char *v36; // $a0
  char *v37; // $a1
  const char *spath; // $s6
  char *v39; // $v0
  void (*v40)(Cookie *); // $a3
  size_t v41; // $a2
  char *v43; // $v0
  char *v44; // $v0
  char *v45; // $v0
  char *v46; // $a0
  int v47; // $v0
  int v48; // $s7
  char *v49; // $a0
  char *v50; // $v0
  char *v51; // $s2
  int v52; // $v0
  void (*v53)(Cookie *); // $a2
  int v54; // $v0
  const char *v55; // $a0
  char *v56; // $v0
  int v57; // $v0
  int (__fastcall *v58)(void *); // $t9
  int v59; // $v0
  int v60; // $s1
  char *v61; // $a0
  int v62; // $v0
  int v63; // $s7
  char *v64; // $a0
  int v65; // $a1
  char *v66; // $a0
  int v67; // $v0
  int v68; // $s1
  void (*v69)(Cookie *); // $a2
  unsigned int v70; // $a1
  int v71; // $v0
  size_t v72; // $fp
  _BYTE *v73; // $s3
  size_t v74; // $v0
  char *v75; // $s4
  char *v76; // $v0
  int v77; // $v0
  void (*v78)(Cookie *); // $t9
  _BOOL4 v79; // $v0
  void (*v80)(Cookie *); // $t3
  int v81; // $v0
  curl_off_t expires; // $v0
  time_t v83; // $a2
  int v84; // $a0
  time_t v85; // $a0
  unsigned int v86; // $a0
  int v87; // $v0
  unsigned int v88; // $v0
  _BYTE *v89; // $v0
  const char *v90; // $v0
  int is_ipnum; // $s2
  const char *v92; // $s6
  Curl_easy *v93; // $v0
  int v94; // $v0
  void (*v95)(Cookie *); // $a2
  int v96; // $v0
  const char *v97; // $s2
  char *value; // $s6
  int v99; // $v0
  char *name; // $v1
  int v101; // $v0
  char *v102; // $v0
  Cookie *next; // $v0
  size_t v104; // $s7
  const char *v105; // $s6
  int v106; // $v0
  char *v107; // $a0
  char *v108; // $a1
  char *v109; // $a0
  char *v110; // $a1
  Cookie *v111; // $v1
  int creationtime; // $v0
  void (__fastcall *v113)(char *); // $t9
  char *v114; // $a0
  void (*v115)(Cookie *); // $a2
  Cookie *v116; // $v0
  Cookie *v117; // $v1
  Cookie *v118; // $t0
  char *v119; // $a3
  char *v120; // $a1
  char *v121; // $a0
  void (*v122)(Cookie *); // $a2
  const char *v123; // $a2
  int v124; // $v0
  __int64 v125; // $v0
  CookieInfo *v126; // $a0
  int v127; // $v0
  int v128; // $v1
  const char *v129; // $s1
  char *v130; // $v0
  char *v131; // $v0
  const char *v132; // $s2
  int v133; // $v0
  size_t v134; // $s1
  char *v135; // $a0
  char *v136; // $v0
  int v137; // $v0
  void *v138; // $v0
  int v139; // $v0
  char *v140; // $v1
  void (*v141)(Cookie *); // [sp+30h] [-B8h] BYREF
  CookieInfo *ca; // [sp+34h] [-B4h]
  Curl_easy *dataa; // [sp+38h] [-B0h]
  _DWORD *v144; // [sp+3Ch] [-ACh]
  void (*v145)(Cookie *); // [sp+40h] [-A8h]
  const char *v146; // [sp+44h] [-A4h]
  _BOOL4 v147; // [sp+48h] [-A0h]
  const char *v148; // [sp+4Ch] [-9Ch]
  time_t now; // [sp+50h] [-98h]
  const char *v150; // [sp+54h] [-94h]
  const char *v151; // [sp+58h] [-90h]
  int badcookie; // [sp+5Ch] [-8Ch]
  char *tok_buf; // [sp+60h] [-88h] BYREF
  char date[128]; // [sp+64h] [-84h] BYREF
  int v155; // [sp+E4h] [-4h]

  v146 = domain;
  v144 = &_stack_chk_guard;
  v148 = path;
  dataa = data;
  v147 = secure;
  ca = c;
  v13 = (char *)lineptr;
  v14 = time(0u);
  v16 = data->req.setcookies >= 0x32u;
  now = v14;
  if ( v16 )
    goto LABEL_49;
  v17 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v17 )
    goto LABEL_49;
  if ( !httpheader )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v13 = (char *)(lineptr + 10);
      v17->httponly = 1;
    }
    if ( *v13 == 35 )
      goto LABEL_252;
    v43 = strchr(v13, 13);
    if ( v43 )
      *v43 = 0;
    v44 = strchr(v13, 10);
    if ( v44 )
      *v44 = 0;
    v45 = strtok_r(v13, "\t", &tok_buf);
    v46 = v45;
    if ( !v45 )
      goto LABEL_46;
    if ( *v45 == 46 )
      v46 = v45 + 1;
    v47 = Curl_cstrdup(v46);
    v17->domain = (char *)v47;
    v48 = v47;
    v49 = strtok_r(0u, "\t", &tok_buf);
    if ( !v49 )
    {
      httpheader = v48 == 0;
      v62 = 1;
      goto LABEL_258;
    }
    if ( !v48 )
      goto LABEL_46;
    v17->tailmatch = curl_strequal(v49, "TRUE") != 0;
    v50 = strtok_r(0u, "\t", &tok_buf);
    v51 = v50;
    if ( !v50 )
      goto LABEL_46;
    v52 = strcmp("TRUE", v50);
    v53 = (void (*)(Cookie *))Curl_cstrdup;
    if ( v52 && (v141 = (void (*)(Cookie *))Curl_cstrdup, v54 = strcmp("FALSE", v51), v53 = v141, v54) )
    {
      v55 = (const char *)((int (__fastcall *)(char *))v141)(v51);
      v17->path = (char *)v55;
      if ( !v55 )
        goto LABEL_208;
      v56 = sanitize_cookie_path(v55);
      v17->spath = v56;
      v141 = (void (*)(Cookie *))v56;
      v51 = strtok_r(0u, "\t", &tok_buf);
      if ( !v51 )
      {
        httpheader = v141 == 0;
        v62 = 3;
        goto LABEL_258;
      }
      if ( !v141 )
      {
        ((void (__fastcall *)(Cookie *))(MEMORY[0xB480] + (__int16)freecookie))(v17);
        goto LABEL_49;
      }
    }
    else
    {
      v141 = freecookie;
      v57 = ((int (__fastcall *)(void *))v53)(&_LC0);
      v58 = (int (__fastcall *)(void *))Curl_cstrdup;
      v17->path = (char *)v57;
      v60 = v57;
      v59 = v58(&_LC0);
      v17->spath = (char *)v59;
      if ( v59 )
        httpheader = v60 == 0;
      else
        httpheader = 1;
    }
    v17->secure = 0;
    if ( !curl_strequal(v51, "TRUE") )
      goto LABEL_74;
    if ( v147 || ca->running )
    {
      v17->secure = 1;
LABEL_74:
      v61 = strtok_r(0u, "\t", &tok_buf);
      v62 = 4;
      if ( !v61 )
        goto LABEL_258;
      if ( httpheader )
        goto LABEL_46;
      v63 = curlx_strtoofft(v61, 0, 10, &v17->expires);
      v64 = strtok_r(0u, "\t", &tok_buf);
      if ( !v64 )
      {
        httpheader = v63 != 0;
        v62 = 5;
        goto LABEL_258;
      }
      v21 = (void (*)(Cookie *))MEMORY[0xB480];
      if ( v63 )
        goto LABEL_47;
      v65 = Curl_cstrdup(v64);
      v17->name = (char *)v65;
      if ( v65 )
      {
        if ( curl_strnequal("__Secure-", v65, 9) )
        {
          v17->prefix |= 1u;
        }
        else if ( curl_strnequal("__Host-", v17->name, 7) )
        {
          v17->prefix |= 2u;
        }
        v66 = strtok_r(0u, "\t", &tok_buf);
        if ( v66 )
        {
          v67 = Curl_cstrdup(v66);
          v17->value = (char *)v67;
          v68 = v67;
          if ( strtok_r(0u, "\t", &tok_buf) )
          {
            if ( !v68 )
              goto LABEL_46;
            while ( strtok_r(0u, "\t", &tok_buf) )
              ;
            v21 = (void (*)(Cookie *))MEMORY[0xB480];
            goto LABEL_47;
          }
          httpheader = v68 == 0;
          v62 = 7;
LABEL_258:
          if ( httpheader )
            goto LABEL_46;
          if ( v62 == 7 )
            goto LABEL_18;
          goto LABEL_242;
        }
      }
      else
      {
        strtok_r(0u, "\t", &tok_buf);
        httpheader = 1;
      }
      v124 = Curl_cstrdup(&_LC23);
      v17->value = (char *)v124;
      if ( !v124 )
        goto LABEL_46;
      if ( !httpheader )
        goto LABEL_18;
LABEL_242:
      freecookie(v17);
      goto LABEL_49;
    }
LABEL_208:
    strtok_r(0u, "\t", &tok_buf);
    freecookie(v17);
    goto LABEL_49;
  }
  if ( strlen(lineptr) >= 0x1389 )
  {
LABEL_252:
    Curl_cfree(v17);
    goto LABEL_49;
  }
  v18 = *lineptr;
  v145 = freecookie;
  v150 = "path";
  badcookie = 0;
  v151 = "domain";
  if ( v18 )
    goto LABEL_6;
LABEL_88:
  v19 = strcspn(v13, ";\t\r\n=");
  if ( !v19 )
  {
LABEL_12:
    v20 = badcookie;
    goto LABEL_13;
  }
  while ( 1 )
  {
    v69 = (void (*)(Cookie *))&v13[v19];
    do
    {
      v70 = v19--;
      v71 = v13[v19];
      if ( v71 != 32 && v71 != 9 )
      {
        v19 = v70;
        if ( *(_BYTE *)v69 == 61 )
        {
LABEL_94:
          v73 = (char *)v69 + 1;
          v141 = v69;
          v74 = strcspn((const char *)v69 + 1, (const char *)v145 + 0x3094);
          v72 = v74;
          v75 = &v73[v74];
          if ( v74 )
          {
            v70 = 9;
            v76 = (char *)v141 + v74;
            while ( 1 )
            {
              v77 = *v76;
              if ( v77 != 32 && v77 != 9 )
                break;
              --v72;
              v76 = (char *)v141 + v72;
              if ( !v72 )
              {
                v78 = (void (*)(Cookie *))MEMORY[0xB480];
                if ( v19 >= 0xFFF )
                  goto LABEL_142;
                v79 = v19 < 7;
                goto LABEL_101;
              }
            }
            v70 = 9;
            while ( 1 )
            {
              v87 = (char)*v73;
              if ( v87 != 32 && v87 != 9 )
                break;
              --v72;
              ++v73;
              if ( !v72 )
              {
                v78 = (void (*)(Cookie *))MEMORY[0xB480];
                if ( v19 < 0xFFF )
                {
                  v88 = v19;
                  goto LABEL_140;
                }
LABEL_142:
                ((void (__fastcall *)(Cookie *, unsigned int))((char *)v78 + (__int16)freecookie))(v17, v70);
LABEL_143:
                if ( (*(_DWORD *)(&dataa->set.connect_only + 2) & 0x100000) != 0 )
                  Curl_infof(dataa, "oversized cookie dropped, name/val %zu + %zu bytes", v19, v72);
LABEL_49:
                v34 = 0;
                goto LABEL_50;
              }
            }
            if ( memchr(v73, 9, v72) )
            {
              freecookie(v17);
              if ( (*(_DWORD *)(&dataa->set.connect_only + 2) & 0x100000) != 0 )
                Curl_infof(dataa, "cookie contains TAB, dropping");
              goto LABEL_49;
            }
            if ( v19 < 0xFFF )
            {
              v88 = v19 + v72;
              if ( v72 >= 0xFFF )
              {
                ((void (__fastcall *)(Cookie *, unsigned int))(MEMORY[0xB480] + (__int16)freecookie))(v17, v70);
                goto LABEL_143;
              }
LABEL_140:
              v16 = v88 < 0x1001;
              v79 = v19 < 7;
              if ( v16 )
              {
LABEL_101:
                v80 = (void (*)(Cookie *))httpheader;
                if ( !v79 )
                {
LABEL_113:
                  if ( v18 == 95 && v13[1] == 95 )
                  {
                    v141 = v80;
                    v99 = curl_strnequal("__Secure-", v13, 9);
                    v80 = v141;
                    if ( v99 )
                    {
                      name = v17->name;
                      v17->prefix |= 1u;
                      if ( !name )
                        goto LABEL_165;
                      goto LABEL_115;
                    }
                    v139 = curl_strnequal("__Host-", v13, 7);
                    v80 = v141;
                    if ( v139 )
                    {
                      v140 = v17->name;
                      v17->prefix |= 2u;
                      if ( !v140 )
                        goto LABEL_165;
LABEL_115:
                      if ( !v72 )
                      {
                        if ( v19 == 8 )
                        {
                          if ( !curl_strnequal("httponly", v13, 8) )
                            goto LABEL_119;
                          v17->httponly = 1;
                          v18 = *v75;
                          v13 = v75;
                          goto LABEL_120;
                        }
                        if ( !v80 )
                          goto LABEL_119;
                      }
                      if ( v19 != 7 || curl_strnequal("version", v13, 7) )
                        goto LABEL_119;
                      if ( curl_strnequal("max-age", v13, 7) )
                      {
                        if ( *v73 == 34 )
                          ++v73;
                        v81 = curlx_strtoofft(v73, 0, 10, &v17->expires);
                        if ( v81 == 1 )
                        {
LABEL_273:
                          LODWORD(v17->expires) = -1;
                          HIDWORD(v17->expires) = 0x7FFFFFFF;
                          v18 = *v75;
                          v13 = v75;
                          goto LABEL_120;
                        }
                        if ( v81 != 2 )
                        {
                          if ( v81 )
                            goto LABEL_119;
                          expires = v17->expires;
                          if ( expires )
                          {
                            v83 = now >> 0x1F;
                            v84 = 0x7FFFFFFF - (now >> 0x1F);
                            if ( v84 >= SHIDWORD(expires) )
                            {
                              v16 = HIDWORD(expires) != v84;
                              v85 = now;
                              if ( v16 || (v85 = now, ~now >= (unsigned int)expires) )
                              {
                                v86 = expires + v85;
                                LODWORD(v17->expires) = v86;
                                HIDWORD(v17->expires) = (v86 < (unsigned int)expires) + HIDWORD(expires) + v83;
                                v18 = *v75;
                                v13 = v75;
                                goto LABEL_120;
                              }
                            }
                            goto LABEL_273;
                          }
                        }
                        v127 = 1;
                        v128 = 0;
                      }
                      else
                      {
                        if ( !curl_strnequal("expires", v13, 7) || v17->expires || v72 >= 0x80 )
                          goto LABEL_119;
                        v138 = memcpy(date, v73, v72);
                        *((_BYTE *)&v141 + v72 + 0x34) = 0;
                        v127 = Curl_getdate_capped(v138);
                        v128 = v127 >> 0x1F;
                        if ( !v127 )
                        {
                          LODWORD(v17->expires) = 1;
                          HIDWORD(v17->expires) = 0;
                          goto LABEL_119;
                        }
                        if ( v127 < 0 )
                        {
                          v127 = 0;
                          v128 = 0;
                        }
                      }
                      LODWORD(v17->expires) = v127;
                      HIDWORD(v17->expires) = v128;
                      goto LABEL_119;
                    }
                  }
                  if ( !v17->name )
                    goto LABEL_165;
                  goto LABEL_115;
                }
LABEL_102:
                if ( !v17->name )
                  goto LABEL_165;
LABEL_103:
                if ( !v72 )
                {
                  if ( v19 == 6 )
                  {
                    v141 = v80;
                    if ( !curl_strnequal("secure", v13, 6) )
                    {
                      if ( v141 )
                        curl_strnequal("domain", v13, 6);
                      goto LABEL_119;
                    }
                    if ( v147 || !ca->running )
                    {
                      v17->secure = 1;
                      v18 = *v75;
                      v13 = v75;
                      goto LABEL_120;
                    }
                    goto LABEL_46;
                  }
                  if ( !v80 || v19 != 4 )
                    goto LABEL_119;
LABEL_182:
                  if ( !curl_strnequal(v150, v13, 4) )
                    goto LABEL_119;
                  Curl_cfree(v17->path);
                  v101 = Curl_memdup(v73, v72 + 1);
                  v17->path = (char *)v101;
                  if ( v101 )
                  {
                    *(_BYTE *)(v101 + v72) = 0;
                    v21 = (void (*)(Cookie *))MEMORY[0xB480];
                    if ( !v17->path )
                      goto LABEL_47;
                    Curl_cfree(v17->spath);
                    v102 = sanitize_cookie_path(v17->path);
                    v17->spath = v102;
                    if ( !v102 )
                    {
                      v21 = (void (*)(Cookie *))MEMORY[0xB480];
                      goto LABEL_47;
                    }
                    goto LABEL_119;
                  }
                  goto LABEL_46;
                }
                if ( v19 == 4 )
                  goto LABEL_182;
                if ( v19 != 6 || !curl_strnequal(v151, v13, 6) )
                  goto LABEL_119;
                if ( *v73 == 46 )
                {
                  ++v73;
                  --v72;
                }
                if ( v72 == 9 && curl_strnequal(v73, "localhost", 9) )
                {
                  v90 = v146;
                }
                else
                {
                  v89 = memchr(v73, 46, v72);
                  if ( !v89 || (v16 = v72 - (v89 - v73) >= 2, v90 = v146, !v16) )
                  {
                    is_ipnum = Curl_host_is_ipnum(&_LC1);
                    v146 = (const char *)&_LC1;
                    if ( !is_ipnum )
                      goto LABEL_197;
                    goto LABEL_158;
                  }
                }
                if ( !v90 )
                {
                  is_ipnum = Curl_host_is_ipnum(v73);
                  goto LABEL_201;
                }
                is_ipnum = Curl_host_is_ipnum(v90);
                if ( !is_ipnum )
                {
LABEL_197:
                  v104 = strlen(v146);
                  if ( v104 >= v72 )
                  {
                    v105 = &v146[v104 - v72];
                    if ( curl_strnequal(v73, v105, v72) )
                    {
                      if ( v72 == v104 || (v93 = dataa, *(v105 - 1) == 46) )
                      {
LABEL_201:
                        Curl_cfree(v17->domain);
                        v106 = Curl_memdup(v73, v72 + 1);
                        v17->domain = (char *)v106;
                        if ( v106 )
                        {
                          *(_BYTE *)(v106 + v72) = 0;
                          v21 = (void (*)(Cookie *))MEMORY[0xB480];
                          if ( !v17->domain )
                            goto LABEL_47;
                          if ( !is_ipnum )
                            v17->tailmatch = 1;
                          goto LABEL_119;
                        }
                        goto LABEL_46;
                      }
LABEL_161:
                      if ( (*(_DWORD *)(&v93->set.connect_only + 2) & 0x100000) != 0 )
                      {
                        Curl_infof(dataa, "skipped cookie with bad tailmatch domain: %s", v73);
                        v13 = v75;
                        v18 = *v75;
                      }
                      else
                      {
                        v18 = *v75;
                        v13 = v75;
                      }
                      badcookie = httpheader;
                      goto LABEL_120;
                    }
                  }
LABEL_160:
                  v93 = dataa;
                  goto LABEL_161;
                }
LABEL_158:
                v92 = v146;
                if ( !strncmp(v73, v146, v72) && strlen(v92) == v72 )
                  goto LABEL_201;
                goto LABEL_160;
              }
            }
          }
          else
          {
            v80 = (void (*)(Cookie *))httpheader;
            if ( v19 < 0xFFF )
            {
              v73 += v74;
LABEL_112:
              if ( v19 >= 7 )
                goto LABEL_113;
              goto LABEL_102;
            }
          }
        }
        else
        {
          v75 = (char *)v69;
          if ( v70 < 0xFFF )
          {
            v73 = 0;
            v80 = 0;
            v72 = 0;
            goto LABEL_112;
          }
          v72 = 0;
        }
        v78 = freecookie;
        goto LABEL_142;
      }
    }
    while ( v19 );
    v72 = 0;
    if ( *(_BYTE *)v69 == 61 )
      goto LABEL_94;
    v75 = (char *)v69;
    v73 = 0;
    v80 = 0;
    if ( v17->name )
      goto LABEL_103;
LABEL_165:
    if ( !v80 )
      goto LABEL_46;
    v141 = (void (*)(Cookie *))&Curl_cfree;
    Curl_cfree(0);
    v94 = Curl_memdup(v13, v19 + 1);
    v17->name = (char *)v94;
    v95 = v141;
    if ( v94 )
      *(_BYTE *)(v94 + v19) = 0;
    (*(void (__fastcall **)(char *))v95)(v17->value);
    v96 = Curl_memdup(v73, v72 + 1);
    v17->value = (char *)v96;
    if ( v96 )
      *(_BYTE *)(v96 + v72) = 0;
    v97 = v17->name;
    v21 = (void (*)(Cookie *))MEMORY[0xB480];
    if ( !v97 )
      goto LABEL_47;
    value = v17->value;
    if ( !value )
      goto LABEL_47;
    if ( value[strcspn(v17->value, badoctets_0)] || v97[strcspn(v97, badoctets_0)] )
    {
      v21 = (void (*)(Cookie *))MEMORY[0xB480];
      if ( (*(_DWORD *)(&dataa->set.connect_only + 2) & 0x100000) != 0 )
      {
        Curl_infof(dataa, "invalid octets in name/value, cookie dropped");
        goto LABEL_46;
      }
LABEL_47:
      v26 = (void (*)(Cookie *))((char *)v21 + (__int16)freecookie);
LABEL_48:
      v26(v17);
      goto LABEL_49;
    }
LABEL_119:
    v18 = *v75;
    v13 = v75;
LABEL_120:
    v20 = badcookie;
    if ( !v18 )
      break;
    do
    {
      while ( v18 == 32 || v18 == 9 )
      {
        v18 = *++v13;
        if ( !v18 )
          goto LABEL_12;
      }
      v20 = badcookie;
      if ( v18 != 59 )
        goto LABEL_13;
      do
      {
        v18 = *++v13;
        if ( !v18 )
          goto LABEL_88;
LABEL_6:
        ;
      }
      while ( v18 == 32 || v18 == 9 );
      v19 = strcspn(v13, ";\t\r\n=");
    }
    while ( !v19 );
  }
LABEL_13:
  v21 = (void (*)(Cookie *))MEMORY[0xB480];
  if ( v20 )
    goto LABEL_47;
  if ( !v17->domain )
  {
    if ( v146 )
    {
      v137 = Curl_cstrdup(v146);
      v17->domain = (char *)v137;
      if ( !v137 )
      {
        v21 = freecookie;
        goto LABEL_47;
      }
    }
  }
  if ( !v17->path )
  {
    v129 = v148;
    if ( v148 )
    {
      v130 = strchr(v148, 63);
      v131 = v130 ? (char *)Curl_memrchr(v129, 47, v130 - v129) : strrchr(v129, 47);
      if ( v131 )
      {
        v132 = v148;
        v133 = v131 - v148;
        v134 = v133 + 1;
        v135 = (char *)Curl_cmalloc(v133 + 2);
        v17->path = v135;
        if ( v135 )
        {
          memcpy(v135, v132, v134);
          v17->path[v134] = 0;
          v136 = sanitize_cookie_path(v17->path);
          v17->spath = v136;
          if ( !v136 )
          {
            v21 = freecookie;
            goto LABEL_47;
          }
          goto LABEL_16;
        }
LABEL_46:
        v21 = freecookie;
        goto LABEL_47;
      }
    }
  }
LABEL_16:
  if ( !v17->name )
    goto LABEL_46;
  ++dataa->req.setcookies;
LABEL_18:
  prefix = v17->prefix;
  if ( (prefix & 1) != 0 )
  {
    v23 = prefix & 2;
    if ( !v17->secure )
      goto LABEL_46;
    v16 = v23 == 0;
    v24 = ca;
    if ( !v16 )
      goto LABEL_21;
  }
  else
  {
    v16 = (prefix & 2) == 0;
    v24 = ca;
    if ( !v16 )
    {
      if ( !v17->secure )
      {
        freecookie(v17);
        goto LABEL_49;
      }
LABEL_21:
      v25 = v17->path;
      v21 = (void (*)(Cookie *))MEMORY[0xB480];
      if ( !v25 )
        goto LABEL_47;
      v26 = (void (*)(Cookie *))(MEMORY[0xB480] + (__int16)freecookie);
      if ( *v25 != 47 )
        goto LABEL_48;
      if ( v25[1] )
        goto LABEL_46;
      v24 = ca;
      if ( v17->tailmatch )
        goto LABEL_46;
    }
  }
  running = v24->running;
  v28 = ca;
  if ( !running && v24->newsession )
  {
    v28 = ca;
    if ( !v17->expires )
      goto LABEL_46;
  }
  lastct = v28->lastct;
  v17->livecookie = running;
  v28->lastct = ++lastct;
  v17->creationtime = lastct;
  if ( !noexpire )
    remove_expired(v28);
  v30 = cookiehash(v17->domain);
  v31 = &ca->cookies[v30];
  v32 = *v31;
  if ( !*v31 )
  {
    if ( ca->running )
    {
      v34 = v17;
      if ( (*(_DWORD *)(&dataa->set.connect_only + 2) & 0x100000) == 0 )
        goto LABEL_235;
      v122 = (void (*)(Cookie *))MEMORY[0xB480];
LABEL_270:
      livecookie = 0;
      v123 = (char *)v122 + (__int16)"Added";
LABEL_233:
      Curl_infof(
        dataa,
        "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
        v123,
        v34->name,
        v34->value,
        v34->domain,
        v34->path,
        v34->expires);
      if ( livecookie )
        goto LABEL_244;
      if ( v32 )
LABEL_247:
        v32->next = v34;
      else
LABEL_235:
        *v31 = v34;
    }
    else
    {
      v34 = v17;
      *v31 = v17;
    }
    ++ca->numcookies;
    goto LABEL_244;
  }
  livecookie = 0;
  v34 = 0;
  v35 = 0;
  while ( 2 )
  {
    if ( curl_strequal(v32->name, v17->name) )
    {
      v36 = v32->domain;
      v37 = v17->domain;
      if ( v36 )
      {
        if ( v37 && curl_strequal(v36, v37) )
        {
LABEL_36:
          spath = v32->spath;
          if ( spath )
          {
            v141 = (void (*)(Cookie *))v17->spath;
            if ( v141 )
            {
              if ( v32->secure && !v17->secure && !v147 )
              {
                v39 = strchr(spath + 1, 47);
                v40 = v141;
                if ( v39 )
                {
                  v41 = v39 - spath;
                }
                else
                {
                  v41 = strlen(spath);
                  v40 = v141;
                }
                if ( curl_strnequal(spath, v40, v41) )
                {
                  v21 = (void (*)(Cookie *))MEMORY[0xB480];
                  if ( (*(_DWORD *)(&dataa->set.connect_only + 2) & 0x100000) == 0 )
                    goto LABEL_47;
                  Curl_infof(
                    dataa,
                    "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                    v17->name,
                    v17->domain);
                  goto LABEL_46;
                }
              }
            }
          }
        }
      }
      else if ( !v37 )
      {
        goto LABEL_36;
      }
    }
    if ( v35 || !curl_strequal(v32->name, v17->name) )
    {
LABEL_189:
      next = v32->next;
      if ( !v32->next )
        break;
      goto LABEL_190;
    }
    v107 = v32->domain;
    v108 = v17->domain;
    if ( !v107 )
    {
      if ( v108 )
        goto LABEL_214;
      v109 = v32->spath;
      goto LABEL_216;
    }
    if ( v108 && curl_strequal(v107, v108) && v32->tailmatch == v17->tailmatch )
    {
LABEL_215:
      v109 = v32->spath;
LABEL_216:
      v110 = v17->spath;
      if ( v109 )
      {
        if ( !v110 || !curl_strequal(v109, v110) )
          goto LABEL_224;
        v109 = v32->spath;
        v110 = v17->spath;
      }
      if ( (v109 == 0) != (v110 == 0) )
        goto LABEL_224;
      livecookie = v17->livecookie;
      v34 = v32;
      if ( v17->livecookie )
      {
        v35 = v17;
      }
      else
      {
        v21 = (void (*)(Cookie *))MEMORY[0xB480];
        if ( v32->livecookie )
          goto LABEL_47;
        v35 = v17;
        livecookie = 1;
      }
      goto LABEL_189;
    }
LABEL_214:
    if ( livecookie )
      goto LABEL_215;
LABEL_224:
    next = v32->next;
    livecookie = 0;
    if ( v32->next )
    {
LABEL_190:
      v32 = next;
      continue;
    }
    break;
  }
  if ( v35 )
  {
    v111 = v34->next;
    creationtime = v34->creationtime;
    v113 = (void (__fastcall *)(char *))Curl_cfree;
    v114 = v34->name;
    v141 = (void (*)(Cookie *))&Curl_cfree;
    v35->next = v111;
    v35->creationtime = creationtime;
    v113(v114);
    (*(void (__fastcall **)(char *))v141)(v34->value);
    (*(void (__fastcall **)(char *))v141)(v34->domain);
    (*(void (__fastcall **)(char *))v141)(v34->path);
    (*(void (__fastcall **)(char *))v141)(v34->spath);
    v115 = v141;
    v116 = v35;
    v117 = v34;
    do
    {
      v118 = v116->next;
      v119 = v116->name;
      v120 = v116->value;
      v121 = v116->path;
      v116 = (Cookie *)((char *)v116 + 16);
      v117->next = v118;
      v117->name = v119;
      v117->value = v120;
      v117->path = v121;
      v117 = (Cookie *)((char *)v117 + 16);
    }
    while ( v116 != &v35[1] );
    (*(void (__fastcall **)(Cookie *))v115)(v35);
  }
  else
  {
    v34 = v17;
  }
  if ( ca->running && (*(_DWORD *)(&dataa->set.connect_only + 2) & 0x100000) != 0 )
  {
    v122 = freecookie;
    if ( !livecookie )
      goto LABEL_270;
    v123 = "Replaced";
    goto LABEL_233;
  }
  if ( !livecookie )
    goto LABEL_247;
LABEL_244:
  HIDWORD(v125) = v34->expires;
  LODWORD(v125) = HIDWORD(v34->expires);
  if ( v125 && __SPAIR64__(v125, HIDWORD(v125)) < ca->next_expiration )
  {
    v126 = ca;
    LODWORD(ca->next_expiration) = HIDWORD(v125);
    HIDWORD(v126->next_expiration) = v125;
  }
LABEL_50:
  if ( v155 != *v144 )
    _stack_chk_fail();
  return v34;
}
