Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  _BOOL4 v9; // r6
  char *v10; // r8
  unsigned int v11; // r6
  Cookie *v12; // r11
  size_t v13; // r5
  size_t v14; // r6
  char *v15; // r2
  int v16; // r3
  int v17; // t1
  bool v18; // zf
  const char *v19; // r3
  const char *v20; // r10
  int v21; // r4
  int v22; // t1
  bool v23; // zf
  int v24; // r4
  char *v25; // r7
  bool v26; // cc
  _BOOL4 v27; // r3
  int v28; // r0
  bool v29; // zf
  _BYTE *v30; // r0
  char *v31; // r5
  const char *v32; // r4
  char *v33; // r5
  int v34; // r3
  bool v35; // zf
  int v36; // t1
  const char *v37; // r9
  _BOOL4 v38; // r3
  _BOOL4 v39; // r3
  char *v40; // r0
  int v41; // r0
  bool v42; // zf
  int v43; // r0
  int v44; // r9
  bool v45; // zf
  int v46; // r0
  char *v47; // r0
  char *v48; // r3
  int v49; // r3
  size_t v50; // r4
  char *v51; // r0
  char *v52; // r0
  char *v53; // r0
  char *v54; // r0
  char *v55; // r4
  int v56; // r6
  int v57; // r0
  int v58; // r5
  int v59; // r0
  char v60; // r3
  int v61; // r3
  const char *v62; // r0
  char *v63; // r0
  int v64; // r0
  int v65; // r1
  int v66; // r0
  unsigned int v67; // r4
  int v68; // r0
  char *v69; // r1
  const char *v70; // r8
  char *spath; // r10
  char *v72; // r0
  size_t v73; // r2
  int v74; // r0
  char *v75; // r1
  int v76; // r0
  char *v77; // r1
  int livecookie; // r7
  Cookie *v79; // r5
  char *name; // r1
  char *value; // r2
  char *v82; // r3
  char *v83; // r1
  int expires; // r2
  int expires_high; // r3
  int creationtime; // r1
  int v87; // r2
  int v88; // r3
  __int64 v89; // r2
  Curl_easy *v90; // r12
  const char *v92; // r2
  int is_ipnum; // r4
  int v94; // r0
  const char *v95; // r0
  CookieInfo *v96; // r2
  char *v97; // r3
  size_t v98; // r9
  char *v99; // r3
  char *v100; // r1
  size_t v101; // r2
  int v102; // r4
  int v103; // t1
  bool v104; // zf
  char *v105; // r4
  int v106; // [sp+0h] [bp-100h] BYREF
  _BOOL4 v107; // [sp+1Ch] [bp-E4h]
  CookieInfo *ca; // [sp+20h] [bp-E0h]
  const char *domain_0; // [sp+24h] [bp-DCh]
  Curl_easy *dataa; // [sp+28h] [bp-D8h]
  char *s2; // [sp+2Ch] [bp-D4h]
  Curl_easy *v112; // [sp+30h] [bp-D0h]
  time_t now; // [sp+38h] [bp-C8h]
  _BOOL4 v114; // [sp+3Ch] [bp-C4h]
  time_t v115; // [sp+40h] [bp-C0h]
  const char *badcookie; // [sp+44h] [bp-BCh]
  const char *v117; // [sp+48h] [bp-B8h]
  int v118; // [sp+4Ch] [bp-B4h]
  char *tok_buf; // [sp+50h] [bp-B0h] BYREF
  char date[128]; // [sp+54h] [bp-ACh] BYREF

  v112 = data;
  dataa = (Curl_easy *)c;
  v9 = httpheader;
  v107 = httpheader;
  v114 = noexpire;
  v10 = (char *)lineptr;
  s2 = (char *)domain;
  now = secure;
  v115 = time(0u);
  if ( data->req.setcookies > 0x31u )
    return 0;
  v12 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v12 )
    return 0;
  if ( !v9 )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v10 = (char *)(lineptr + 0xA);
      v12->httponly = 1;
    }
    if ( *v10 == 35 )
    {
      Curl_cfree(v12);
    }
    else
    {
      v53 = strchr(v10, 13);
      if ( v53 )
        *v53 = 0;
      v54 = strchr(v10, 10);
      if ( v54 )
        *v54 = 0;
      v55 = strtok_r(v10, "\t", &tok_buf);
      if ( !v55 )
        goto LABEL_206;
      v56 = 0;
      while ( 2 )
      {
        switch ( v56 )
        {
          case 0:
            if ( *v55 == 46 )
              ++v55;
            v57 = Curl_cstrdup(v55);
            v12->domain = (char *)v57;
            if ( !v57 )
              goto LABEL_279;
            v58 = v107;
            goto LABEL_173;
          case 1:
            v59 = curl_strequal(v55, "TRUE");
            v60 = v59;
            if ( v59 )
              v60 = 1;
            v12->tailmatch = v60;
            v58 = v107;
            goto LABEL_173;
          case 2:
            if ( !strcmp("TRUE", v55) || !strcmp("FALSE", v55) )
            {
              ca = (CookieInfo *)Curl_cstrdup("/");
              v12->path = (char *)ca;
              v64 = Curl_cstrdup("/");
              v12->spath = (char *)v64;
              if ( v64 )
                v58 = ca == 0;
              else
                v58 = 1;
LABEL_187:
              v12->secure = 0;
              if ( curl_strequal(v55, "TRUE") )
              {
                if ( !now && !LOBYTE(dataa->req.doh) )
                {
                  v56 = 3;
LABEL_279:
                  strtok_r(0u, "\t", &tok_buf);
                  if ( v56 == 5 )
                  {
                    v58 = 1;
                    goto LABEL_282;
                  }
                  goto LABEL_206;
                }
                v12->secure = 1;
                v56 = 3;
              }
              else
              {
                v56 = 3;
              }
            }
            else
            {
              v62 = (const char *)Curl_cstrdup(v55);
              v12->path = (char *)v62;
              if ( !v62 )
                goto LABEL_279;
              v63 = sanitize_cookie_path(v62);
              v12->spath = v63;
              if ( !v63 )
                goto LABEL_279;
              v58 = v107;
            }
LABEL_173:
            ++v56;
            v55 = strtok_r(0u, "\t", &tok_buf);
            if ( v55 )
              v61 = ((unsigned __int8)v58 ^ 1) & 1;
            else
              v61 = 0;
            if ( v61 )
              continue;
            if ( v56 != 6 )
              goto LABEL_284;
LABEL_282:
            v94 = Curl_cstrdup(&LC2);
            v12->value = (char *)v94;
            if ( v94 )
            {
              v56 = 7;
LABEL_284:
              if ( v56 != 7 )
                v58 |= 1u;
              if ( !v58 )
              {
LABEL_287:
                if ( (v12->prefix & 1) != 0 )
                {
                  if ( v12->secure )
                  {
                    if ( (v12->prefix & 2) != 0 )
                      goto LABEL_290;
LABEL_293:
                    if ( LOBYTE(dataa->req.doh) || !BYTE1(dataa->req.doh) || v12->expires )
                    {
                      v12->livecookie = (bool)dataa->req.doh;
                      v96 = (CookieInfo *)dataa;
                      v97 = (char *)&dataa->req.p.file->path + 1;
                      dataa->req.p.file = (FILEPROTO *)v97;
                      v12->creationtime = (int)v97;
                      if ( !v114 )
                        remove_expired(v96);
                      v98 = cookiehash(v12->domain);
                      v67 = *(&dataa->magic + v98);
                      if ( v67 )
                      {
                        livecookie = 0;
                        v11 = 0;
                        v79 = 0;
                        while ( 1 )
                        {
                          if ( !curl_strequal(*(_DWORD *)(v67 + 4), v12->name) )
                            goto LABEL_214;
                          v68 = *(_DWORD *)(v67 + 20);
                          if ( v68 )
                          {
                            v69 = v12->domain;
                            if ( !v69 || !curl_strequal(v68, v69) )
                              goto LABEL_214;
                          }
                          else if ( v12->domain )
                          {
                            goto LABEL_214;
                          }
                          v70 = *(const char **)(v67 + 16);
                          if ( v70 )
                          {
                            spath = v12->spath;
                            if ( spath )
                            {
                              if ( *(_BYTE *)(v67 + 33) && !(now | v12->secure) )
                              {
                                v72 = strchr(v70 + 1, 47);
                                v73 = v72 ? v72 - v70 : strlen(v70);
                                if ( curl_strnequal(v70, spath, v73) )
                                {
                                  if ( (*(&v112->set.connect_only + 4) & 0x10) != 0 )
                                    Curl_infof(
                                      v112,
                                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                                      v12->name,
                                      v12->domain);
                                  goto LABEL_231;
                                }
                              }
                            }
                          }
LABEL_214:
                          if ( v79 || !curl_strequal(*(_DWORD *)(v67 + 4), v12->name) )
                            goto LABEL_215;
                          v74 = *(_DWORD *)(v67 + 20);
                          if ( v74 )
                          {
                            v75 = v12->domain;
                            if ( !v75 || !curl_strequal(v74, v75) || *(unsigned __int8 *)(v67 + 32) != v12->tailmatch )
                            {
LABEL_239:
                              if ( !livecookie )
                                goto LABEL_215;
                            }
                          }
                          else if ( v12->domain )
                          {
                            goto LABEL_239;
                          }
                          v76 = *(_DWORD *)(v67 + 16);
                          if ( !v76 )
                            goto LABEL_243;
                          v77 = v12->spath;
                          if ( !v77 )
                          {
                            v79 = 0;
                            livecookie = 0;
                            goto LABEL_215;
                          }
                          if ( !curl_strequal(v76, v77) )
                          {
                            livecookie = 0;
                          }
                          else
                          {
LABEL_243:
                            if ( (*(_DWORD *)(v67 + 16) == 0) == (v12->spath == 0) )
                            {
                              livecookie = v12->livecookie;
                              if ( v12->livecookie )
                              {
                                v11 = v67;
                                v79 = v12;
                              }
                              else
                              {
                                if ( *(_BYTE *)(v67 + 34) )
                                  goto LABEL_231;
                                v11 = v67;
                                v79 = v12;
                                livecookie = 1;
                              }
                            }
                            else
                            {
                              livecookie = 0;
                            }
                          }
LABEL_215:
                          if ( !*(_DWORD *)v67 )
                          {
                            if ( v79 )
                            {
                              v79->next = *(Cookie **)v11;
                              v79->creationtime = *(_DWORD *)(v11 + 36);
                              Curl_cfree(*(_DWORD *)(v11 + 4));
                              Curl_cfree(*(_DWORD *)(v11 + 8));
                              Curl_cfree(*(_DWORD *)(v11 + 20));
                              Curl_cfree(*(_DWORD *)(v11 + 12));
                              Curl_cfree(*(_DWORD *)(v11 + 16));
                              name = v79->name;
                              value = v79->value;
                              v82 = v79->path;
                              *(_DWORD *)v11 = v79->next;
                              *(_DWORD *)(v11 + 4) = name;
                              *(_DWORD *)(v11 + 8) = value;
                              *(_DWORD *)(v11 + 12) = v82;
                              v83 = v79->domain;
                              expires = v79->expires;
                              expires_high = HIDWORD(v79->expires);
                              *(_DWORD *)(v11 + 16) = v79->spath;
                              *(_DWORD *)(v11 + 20) = v83;
                              *(_DWORD *)(v11 + 24) = expires;
                              *(_DWORD *)(v11 + 28) = expires_high;
                              creationtime = v79->creationtime;
                              v87 = *(_DWORD *)&v79->prefix;
                              v88 = *((_DWORD *)&v79->prefix + 1);
                              *(_DWORD *)(v11 + 32) = *(_DWORD *)&v79->tailmatch;
                              *(_DWORD *)(v11 + 36) = creationtime;
                              *(_DWORD *)(v11 + 40) = v87;
                              *(_DWORD *)(v11 + 44) = v88;
                              Curl_cfree(v79);
                            }
                            else
                            {
                              v11 = (unsigned int)v12;
                            }
                            if ( !LOBYTE(dataa->req.doh) )
                              goto LABEL_256;
                            goto LABEL_261;
                          }
                          v67 = *(_DWORD *)v67;
                        }
                      }
                      if ( !LOBYTE(dataa->req.doh) )
                      {
                        v11 = (unsigned int)v12;
                        goto LABEL_303;
                      }
                      v11 = (unsigned int)v12;
                      livecookie = 0;
LABEL_261:
                      if ( (*(&v112->set.connect_only + 4) & 0x10) != 0 )
                      {
                        if ( livecookie )
                          v92 = "Replaced";
                        else
                          v92 = "Added";
                        Curl_infof(
                          v112,
                          "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
                          v92,
                          *(const char **)(v11 + 4),
                          *(const char **)(v11 + 8),
                          *(const char **)(v11 + 20),
                          *(const char **)(v11 + 12),
                          *(_QWORD *)(v11 + 0x18));
                      }
LABEL_256:
                      if ( !livecookie )
                      {
                        if ( v67 )
                          *(_DWORD *)v67 = v11;
                        else
LABEL_303:
                          *(&dataa->magic + v98) = v11;
                        ++dataa->req.upload_fromhere;
                      }
                      v89 = *(_QWORD *)(v11 + 24);
                      if ( v89 )
                      {
                        v90 = dataa;
                        if ( v89 < *(_QWORD *)&dataa->req.newurl )
                        {
                          dataa->req.newurl = (char *)v89;
                          v90->req.upload_present = HIDWORD(v89);
                        }
                      }
                      return (Cookie *)v11;
                    }
                  }
                }
                else
                {
                  if ( (v12->prefix & 2) == 0 )
                    goto LABEL_293;
                  if ( v12->secure )
                  {
LABEL_290:
                    v95 = v12->path;
                    if ( v95 && !strcmp(v95, "/") && !v12->tailmatch )
                      goto LABEL_293;
                  }
                }
LABEL_231:
                freecookie(v12);
                return 0;
              }
            }
LABEL_206:
            freecookie(v12);
            break;
          case 3:
            v58 = v107;
            goto LABEL_187;
          case 4:
            if ( curlx_strtoofft(v55, 0, 10, &v12->expires) )
              goto LABEL_279;
            v58 = v107;
            goto LABEL_173;
          case 5:
            v65 = Curl_cstrdup(v55);
            v12->name = (char *)v65;
            if ( !v65 )
              goto LABEL_279;
            if ( curl_strnequal("__Secure-", v65, 9) )
            {
              v12->prefix |= 1u;
              v58 = v107;
            }
            else
            {
              if ( curl_strnequal("__Host-", v12->name, 7) )
                v12->prefix |= 2u;
              v58 = v107;
            }
            goto LABEL_173;
          case 6:
            v66 = Curl_cstrdup(v55);
            v12->value = (char *)v66;
            if ( !v66 )
              goto LABEL_279;
            v58 = v107;
            goto LABEL_173;
          default:
            v58 = v107;
            goto LABEL_173;
        }
        break;
      }
    }
    return 0;
  }
  if ( strlen(lineptr) > (unsigned int)&loc_1388 )
  {
    Curl_cfree(v12);
    return 0;
  }
  v118 = 0;
  ca = (CookieInfo *)";\t\r\n=";
  badcookie = "domain";
  v117 = "path";
  domain_0 = path;
  while ( 1 )
  {
    v44 = (unsigned __int8)*v10;
    if ( !*v10 )
      break;
    v45 = v44 == 9;
    if ( v44 != 9 )
      v45 = v44 == 32;
    if ( v45 )
    {
      ++v10;
    }
    else
    {
      v13 = strcspn(v10, ";\t\r\n=");
      if ( v13 )
        goto LABEL_308;
      v34 = (unsigned __int8)*v10;
      v25 = v10;
      while ( 1 )
      {
LABEL_88:
        v35 = v34 == 9;
        if ( v34 != 9 )
          v35 = v34 == 32;
        if ( !v35 )
          break;
        v36 = (unsigned __int8)*++v25;
        v34 = v36;
        if ( !v36 )
        {
          v37 = domain_0;
          goto LABEL_94;
        }
      }
      if ( v34 != 59 )
      {
        v37 = domain_0;
        goto LABEL_94;
      }
      v10 = v25 + 1;
    }
  }
  v13 = strcspn(v10, (const char *)ca);
  if ( !v13 )
  {
    v37 = domain_0;
    goto LABEL_94;
  }
LABEL_308:
  v99 = &v10[v13];
  v100 = &v10[v13];
  do
  {
    v101 = v13--;
    v103 = (unsigned __int8)*--v99;
    v102 = v103;
    v104 = v103 == 9;
    if ( v103 != 9 )
      v104 = v102 == 32;
    if ( !v104 )
    {
      v24 = 0;
      if ( *v100 == 61 )
      {
        v13 = v101;
        goto LABEL_315;
      }
      v13 = v101;
      v25 = v100;
      v20 = 0;
      v14 = 0;
LABEL_31:
      v26 = v14 > 0xFFE;
      if ( v14 <= 0xFFE )
        v26 = v13 > 0xFFE;
      if ( v26 )
        goto LABEL_62;
      goto LABEL_34;
    }
  }
  while ( v13 );
  if ( *v100 != 61 )
  {
    v14 = 0;
    v25 = v100;
    v20 = 0;
    v24 = 0;
LABEL_34:
    if ( v14 + v13 <= 0x1000 )
    {
      v27 = v13 > 6;
      if ( v44 != 95 )
        v27 = 0;
      if ( v27 && v10[1] == 95 )
      {
        if ( curl_strnequal("__Secure-", v10, 9) )
        {
          v12->prefix |= 1u;
        }
        else if ( curl_strnequal("__Host-", v10, 7) )
        {
          v12->prefix |= 2u;
        }
      }
      if ( !v12->name )
      {
        if ( !v24 )
          goto LABEL_231;
        strstore(&v12->name, v10, v13);
        strstore(&v12->value, v20, v14);
        v32 = v12->name;
        if ( !v32 )
          goto LABEL_231;
        v33 = v12->value;
        if ( !v33 )
          goto LABEL_231;
        if ( v33[strcspn(v12->value, badoctets_0)] || v32[strcspn(v32, badoctets_0)] )
        {
          if ( (*(&v112->set.connect_only + 4) & 0x10) != 0 )
            Curl_infof(v112, "invalid octets in name/value, cookie dropped");
          goto LABEL_231;
        }
        goto LABEL_87;
      }
      if ( v14 )
        goto LABEL_43;
      if ( v13 == 6 )
      {
        if ( curl_strnequal("secure", v10, 6) )
        {
          if ( !now && LOBYTE(dataa->req.doh) )
            goto LABEL_231;
          v12->secure = 1;
          goto LABEL_87;
        }
        if ( v24 )
        {
LABEL_44:
          if ( v13 == 6 )
          {
            v28 = curl_strnequal(badcookie, v10, 6);
            v29 = v28 == 0;
            if ( v28 )
              v29 = v14 == 0;
            if ( v29 )
              goto LABEL_87;
            if ( *v20 == 46 )
            {
              ++v20;
              --v14;
            }
            if ( v14 != 9 || !curl_strnequal(v20, "localhost", 9) )
            {
              v30 = memchr(v20, 46, v14);
              if ( !v30 )
              {
                s2 = ":";
                goto LABEL_56;
              }
              if ( v14 - (v30 - v20) <= 1 )
              {
                s2 = ":";
                goto LABEL_56;
              }
            }
            if ( !s2 )
            {
              is_ipnum = Curl_host_is_ipnum(v20);
              strstore(&v12->domain, v20, v14);
              if ( !v12->domain )
                goto LABEL_231;
              if ( is_ipnum )
                goto LABEL_87;
LABEL_111:
              v12->tailmatch = 1;
              goto LABEL_87;
            }
LABEL_56:
            if ( Curl_host_is_ipnum(s2) )
            {
              v31 = s2;
              if ( !strncmp(v20, s2, v14) && strlen(v31) == v14 )
              {
                strstore(&v12->domain, v20, v14);
                if ( !v12->domain )
                  goto LABEL_231;
                goto LABEL_87;
              }
              goto LABEL_59;
            }
            if ( !cookie_tailmatch(v20, v14, s2) )
            {
LABEL_59:
              if ( (*(&v112->set.connect_only + 4) & 0x10) != 0 )
                Curl_infof(v112, "skipped cookie with bad tailmatch domain: %s", v20);
              v118 = 1;
              goto LABEL_87;
            }
            strstore(&v12->domain, v20, v14);
            if ( !v12->domain )
              goto LABEL_231;
            goto LABEL_111;
          }
LABEL_86:
          if ( v13 == 7 && !curl_strnequal("version", v10, 7) )
          {
            if ( curl_strnequal("max-age", v10, 7) )
            {
              if ( *v20 == 34 )
                ++v20;
              v41 = curlx_strtoofft(v20, 0, 10, &v12->expires);
              switch ( v41 )
              {
                case 1:
                  v12->expires = 0x7FFFFFFFFFFFFFFFLL;
                  break;
                case 2:
                  v12->expires = 1LL;
                  break;
                case 0:
                  if ( v12->expires )
                  {
                    if ( __SPAIR64__(0x7FFFFFFF - (v115 >> 0x1F), ~v115) >= v12->expires )
                      v12->expires += v115;
                    else
                      v12->expires = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else
                  {
                    v12->expires = 1LL;
                  }
                  break;
              }
            }
            else if ( curl_strnequal("expires", v10, 7) )
            {
              v42 = v14 == 127;
              if ( v14 <= 0x7F )
                v42 = v12->expires == 0;
              if ( v42 )
              {
                memcpy(date, v20, v14);
                *((_BYTE *)&v106 + v14 + 0x54) = 0;
                v43 = Curl_getdate_capped(date);
                if ( v43 )
                {
                  if ( v43 >> 31 == -1 )
                    v12->expires = 0LL;
                  else
                    v12->expires = v43;
                }
                else
                {
                  v12->expires = 1LL;
                }
              }
            }
          }
        }
      }
      else if ( v13 == 8 )
      {
        if ( curl_strnequal("httponly", v10, 8) )
        {
          v12->httponly = 1;
        }
        else if ( v24 )
        {
          goto LABEL_86;
        }
      }
      else if ( v24 )
      {
LABEL_43:
        if ( v13 == 4 )
        {
          if ( curl_strnequal(v117, v10, 4) )
          {
            strstore(&v12->path, v20, v14);
            if ( !v12->path )
              goto LABEL_231;
            Curl_cfree(v12->spath);
            v40 = sanitize_cookie_path(v12->path);
            v12->spath = v40;
            if ( !v40 )
              goto LABEL_231;
          }
          goto LABEL_87;
        }
        goto LABEL_44;
      }
LABEL_87:
      v34 = (unsigned __int8)*v25;
      if ( *v25 )
        goto LABEL_88;
      v37 = domain_0;
LABEL_94:
      if ( !v118 )
      {
        v38 = v12->domain == 0;
        if ( !s2 )
          v38 = 0;
        if ( !v38 || (v46 = Curl_cstrdup(s2), (v12->domain = (char *)v46) != 0) )
        {
          v39 = v12->path == 0;
          if ( !v37 )
            v39 = 0;
          if ( !v39 )
            goto LABEL_319;
          v47 = strchr(v37, 63);
          v48 = v47 ? (char *)Curl_memrchr(v37, 47, v47 - v37) : strrchr(v37, 47);
          if ( !v48 )
            goto LABEL_319;
          v49 = v48 - v37;
          v50 = v49 + 1;
          v51 = (char *)Curl_cmalloc(v49 + 2);
          v12->path = v51;
          if ( v51 )
          {
            memcpy(v51, v37, v50);
            v12->path[v50] = 0;
            v52 = sanitize_cookie_path(v12->path);
            v12->spath = v52;
            if ( v52 )
            {
LABEL_319:
              if ( v12->name )
              {
                ++v112->req.setcookies;
                goto LABEL_287;
              }
            }
          }
        }
      }
      goto LABEL_231;
    }
LABEL_62:
    freecookie(v12);
    if ( (*(&v112->set.connect_only + 4) & 0x10) != 0 )
      Curl_infof(v112, "oversized cookie dropped, name/val %zu + %zu bytes", v13, v14);
    return 0;
  }
LABEL_315:
  v105 = v100;
  v20 = v100 + 1;
  v14 = strcspn(v100 + 1, ";\r\n");
  v25 = (char *)&v20[v14];
  v15 = &v105[v14 + 1];
  while ( 2 )
  {
    if ( !v14 )
    {
      v24 = v107;
      goto LABEL_31;
    }
    v17 = (unsigned __int8)*--v15;
    v16 = v17;
    v18 = v17 == 9;
    if ( v17 != 9 )
      v18 = v16 == 32;
    if ( v18 )
    {
      --v14;
      continue;
    }
    break;
  }
  v19 = v20;
  while ( 1 )
  {
    v20 = v19;
    v22 = *(unsigned __int8 *)v19++;
    v21 = v22;
    v23 = v22 == 9;
    if ( v22 != 9 )
      v23 = v21 == 32;
    if ( !v23 )
      break;
    v24 = 1;
    if ( !--v14 )
    {
      v20 = v19;
      goto LABEL_31;
    }
  }
  if ( !memchr(v20, 9, v14) )
  {
    v24 = v107;
    goto LABEL_31;
  }
  freecookie(v12);
  if ( (*(&v112->set.connect_only + 4) & 0x10) != 0 )
    Curl_infof(v112, "cookie contains TAB, dropping");
  return 0;
}
