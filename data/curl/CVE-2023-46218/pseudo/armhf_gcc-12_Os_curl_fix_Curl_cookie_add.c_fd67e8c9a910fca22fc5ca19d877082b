Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v8; // r6
  char *v10; // r0
  unsigned int v11; // r3
  Cookie *v12; // r4
  const char *v13; // r3
  bool v14; // zf
  size_t v15; // r0
  size_t v16; // r7
  char *v17; // r8
  size_t v18; // r2
  int v19; // r3
  bool v20; // zf
  size_t v21; // r0
  unsigned __int8 *v22; // r3
  size_t v23; // r5
  char *v24; // r8
  int v25; // r2
  int v26; // t1
  bool v27; // zf
  _BYTE *v28; // r8
  int v29; // r2
  int v30; // t1
  bool v31; // zf
  const char *v32; // r3
  bool v33; // cc
  bool v34; // zf
  int v35; // r0
  int v36; // r0
  char *v37; // r1
  int v38; // r0
  __int64 v39; // r2
  char *v40; // r0
  bool v41; // zf
  const char *v42; // r5
  char *v43; // r6
  char *v44; // r2
  int v45; // r3
  int v46; // t1
  bool v47; // zf
  int v48; // r0
  bool v49; // zf
  _BYTE *v50; // r0
  int is_ipnum; // r6
  bool v52; // zf
  void *v53; // r0
  int v54; // r0
  _BOOL4 v55; // r3
  _BOOL4 v56; // r3
  char *v57; // r0
  char *v58; // r0
  int v59; // r0
  size_t v60; // r5
  char *v61; // r0
  char *v62; // r0
  const char *v63; // r0
  CookieInfo *v64; // r2
  int v65; // r3
  size_t v66; // r0
  int livecookie; // r7
  Cookie *v68; // r6
  Cookie *v69; // r8
  Cookie *v70; // r10
  Cookie *v71; // r5
  size_t v72; // r9
  char *name; // r0
  char *v74; // r1
  char *value; // r2
  char *v76; // r3
  char *v77; // r1
  int expires; // r2
  int expires_high; // r3
  int creationtime; // r1
  int v81; // r2
  int v82; // r3
  CookieInfo *v83; // r3
  const char *v84; // r2
  CookieInfo *v85; // r2
  CookieInfo *v86; // r3
  curl_off_t v87; // r2
  int v88; // r0
  curl_off_t *p_next_expiration; // r1
  int v90; // r0
  char *v91; // r0
  unsigned int v92; // r5
  int v93; // r10
  char *v94; // r0
  char *v95; // r6
  char running; // r7
  int v97; // r9
  int v98; // r5
  char *v99; // r0
  int v100; // r3
  int v101; // r0
  int (__fastcall *v102)(const char *); // r5
  const char *v103; // r0
  int v104; // r7
  char *v105; // r5
  char *v106; // r0
  int v107; // r3
  int v108; // r0
  int (__fastcall *v109)(const char *); // r2
  unsigned int v110; // r5
  int v111; // r0
  const char *v112; // r1
  char *v113; // r0
  int v114; // r3
  int v115; // r5
  char *v116; // r0
  _BOOL4 v117; // r3
  int v118; // r1
  int v119; // r0
  unsigned __int8 v120; // r3
  int v121; // r0
  char *v122; // r0
  char *v123; // r1
  const char *spath; // r10
  char *v125; // r0
  char *v126; // r1
  char *v127; // r0
  size_t v128; // r2
  bool v129; // zf
  char *v130; // r0
  char *v131; // r1
  int v133; // [sp+0h] [bp-F8h] BYREF
  time_t now; // [sp+1Ch] [bp-DCh]
  CookieInfo *cookies; // [sp+20h] [bp-D8h]
  char *delim; // [sp+24h] [bp-D4h]
  const char *v137; // [sp+28h] [bp-D0h]
  const char *valuep; // [sp+2Ch] [bp-CCh]
  const char *badcookie; // [sp+30h] [bp-C8h]
  void *s; // [sp+34h] [bp-C4h]
  int v141; // [sp+38h] [bp-C0h]
  char *v142; // [sp+3Ch] [bp-BCh]
  _BOOL4 v143; // [sp+40h] [bp-B8h]
  char *reject; // [sp+44h] [bp-B4h]
  char *tok_buf; // [sp+48h] [bp-B0h] BYREF
  char date[128]; // [sp+4Ch] [bp-ACh] BYREF

  v143 = noexpire;
  v137 = (const char *)httpheader;
  valuep = (const char *)secure;
  now = (time_t)data;
  cookies = c;
  v8 = (char *)lineptr;
  v10 = (char *)time(0u);
  v11 = *(unsigned __int8 *)(now + 270);
  delim = v10;
  if ( v11 > 0x31 )
    return 0;
  v12 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v12 )
    return 0;
  if ( !v137 )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v8 = (char *)(lineptr + 0xA);
      v12->httponly = 1;
    }
    if ( *v8 == 35 )
      goto LABEL_5;
    v91 = strchr(v8, 13);
    v92 = 0;
    v93 = 0;
    if ( v91 )
      *v91 = 0;
    v94 = strchr(v8, 10);
    if ( v94 )
      *v94 = 0;
    delim = "\t";
    v137 = "TRUE";
    badcookie = "TRUE";
    v95 = strtok_r(v8, "\t", &tok_buf);
    while ( 1 )
    {
      running = v92 ^ 1;
      if ( v95 )
        v97 = ((unsigned __int8)v92 ^ 1) & 1;
      else
        v97 = 0;
      if ( !v97 )
        goto LABEL_224;
      switch ( v93 )
      {
        case 0:
          if ( *v95 == 46 )
            ++v95;
          v98 = Curl_cstrdup(v95);
          v12->domain = (char *)v98;
          v99 = strtok_r(0u, "\t", &tok_buf);
          running = v98;
          if ( v98 )
            running = 1;
          if ( v99 )
            v100 = running & 1;
          else
            v100 = 0;
          v95 = v99;
          if ( v100 )
            goto LABEL_218;
          v93 = 1;
          v92 = v98 == 0;
          goto LABEL_224;
        case 1:
LABEL_218:
          v12->tailmatch = curl_strequal(v95, "TRUE") != 0;
          v95 = strtok_r(0u, "\t", &tok_buf);
          if ( v95 )
            goto LABEL_219;
          v92 = 0;
          running = v97;
          v93 = 2;
          goto LABEL_224;
        case 2:
LABEL_219:
          v101 = strcmp(badcookie, v95);
          v102 = (int (__fastcall *)(const char *))Curl_cstrdup;
          if ( !v101 || !strcmp("FALSE", v95) )
          {
            v108 = v102("/");
            v109 = (int (__fastcall *)(const char *))Curl_cstrdup;
            v110 = v108;
            v12->path = (char *)v108;
            v111 = v109("/");
            if ( v111 )
              v110 = __clz(v110);
            v12->spath = (char *)v111;
            if ( v111 )
              v92 = v110 >> 5;
            else
              v92 = v97;
          }
          else
          {
            v103 = (const char *)v102(v95);
            running = (char)v103;
            v12->path = (char *)v103;
            if ( !v103 )
            {
              strtok_r(0u, "\t", &tok_buf);
              v92 = v97;
              goto LABEL_223;
            }
            v105 = sanitize_cookie_path(v103);
            v12->spath = v105;
            v106 = strtok_r(0u, "\t", &tok_buf);
            running = (char)v105;
            if ( v105 )
              running = 1;
            if ( v106 )
              v107 = running & 1;
            else
              v107 = 0;
            v95 = v106;
            if ( !v107 )
            {
              v92 = v105 == 0;
LABEL_223:
              v93 = 3;
LABEL_224:
              if ( v93 == 7 )
                v104 = 0;
              else
                v104 = running & 1;
              if ( v104 )
                goto LABEL_86;
              goto LABEL_260;
            }
LABEL_241:
            v92 = 0;
          }
          v112 = v137;
          v12->secure = 0;
          if ( curl_strequal(v95, v112) )
          {
            if ( !valuep )
            {
              running = cookies->running;
              if ( !running )
              {
                strtok_r((char *)valuep, "\t", &tok_buf);
                v92 = v97;
LABEL_247:
                v93 = 4;
                goto LABEL_224;
              }
            }
            v12->secure = 1;
          }
          v113 = strtok_r(0u, "\t", &tok_buf);
          running = v92 ^ 1;
          if ( v113 )
            v114 = ((unsigned __int8)v92 ^ 1) & 1;
          else
            v114 = 0;
          v95 = v113;
          if ( !v114 )
            goto LABEL_247;
LABEL_252:
          v115 = curlx_strtoofft(v95, 0, 10, &v12->expires);
          v116 = strtok_r(0u, delim, &tok_buf);
          running = v115 == 0;
          if ( v116 )
            v117 = v115 == 0;
          else
            v117 = 0;
          v95 = v116;
          if ( !v117 )
          {
            v92 = v115 != 0;
            v93 = 5;
            goto LABEL_224;
          }
LABEL_257:
          v118 = Curl_cstrdup(v95);
          v12->name = (char *)v118;
          if ( !v118 )
          {
            strtok_r(0u, "\t", &tok_buf);
            v92 = v97;
LABEL_259:
            v119 = Curl_cstrdup(&LC2);
            v12->value = (char *)v119;
            if ( !v119 )
              goto LABEL_86;
LABEL_260:
            if ( v92 )
              goto LABEL_86;
LABEL_159:
            if ( (v12->prefix & 1) != 0 && !v12->secure )
              goto LABEL_86;
            if ( (v12->prefix & 2) != 0 )
            {
              if ( !v12->secure )
                goto LABEL_86;
              v63 = v12->path;
              if ( !v63 || strcmp(v63, "/") || v12->tailmatch )
                goto LABEL_86;
            }
            if ( !cookies->running && cookies->newsession && !v12->expires )
              goto LABEL_86;
            v12->livecookie = cookies->running;
            v64 = cookies;
            v65 = cookies->lastct + 1;
            cookies->lastct = v65;
            v12->creationtime = v65;
            if ( !v143 )
              remove_expired(v64);
            v66 = cookiehash(v12->domain);
            livecookie = 0;
            v68 = 0;
            v69 = 0;
            v70 = 0;
            v71 = cookies->cookies[v66];
            v72 = v66;
            while ( 2 )
            {
              if ( !v71 )
              {
                if ( v69 )
                {
                  name = v68->name;
                  v69->next = v68->next;
                  v69->creationtime = v68->creationtime;
                  Curl_cfree(name);
                  Curl_cfree(v68->value);
                  Curl_cfree(v68->domain);
                  Curl_cfree(v68->path);
                  Curl_cfree(v68->spath);
                  v74 = v69->name;
                  value = v69->value;
                  v76 = v69->path;
                  v68->next = v69->next;
                  v68->name = v74;
                  v68->value = value;
                  v68->path = v76;
                  v77 = v69->domain;
                  expires = v69->expires;
                  expires_high = HIDWORD(v69->expires);
                  v68->spath = v69->spath;
                  v68->domain = v77;
                  LODWORD(v68->expires) = expires;
                  HIDWORD(v68->expires) = expires_high;
                  creationtime = v69->creationtime;
                  v81 = *(_DWORD *)&v69->prefix;
                  v82 = *((_DWORD *)&v69->prefix + 1);
                  *(_DWORD *)&v68->tailmatch = *(_DWORD *)&v69->tailmatch;
                  v68->creationtime = creationtime;
                  *(_DWORD *)&v68->prefix = v81;
                  *((_DWORD *)&v68->prefix + 1) = v82;
                  Curl_cfree(v69);
                  v12 = v68;
                }
                v83 = (CookieInfo *)cookies->running;
                if ( cookies->running )
                {
                  v83 = (CookieInfo *)*(unsigned __int8 *)(now + 1617);
                  if ( ((unsigned __int8)v83 & 0x20) != 0 )
                  {
                    if ( livecookie )
                      v84 = "Replaced";
                    else
                      v84 = "Added";
                    Curl_infof(
                      now,
                      "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
                      v84,
                      v12->name,
                      v12->value,
                      v12->domain,
                      v12->path,
                      v12->expires);
                  }
                }
                if ( !livecookie )
                {
                  if ( !v70 )
                    v83 = cookies;
                  v85 = cookies;
                  if ( !v70 )
                    v83->cookies[v72] = v12;
                  v86 = cookies;
                  if ( v70 )
                    v70->next = v12;
                  v85->numcookies = v86->numcookies + 1;
                }
                v87 = v12->expires;
                if ( v87 )
                {
                  v88 = (unsigned __int64)(v87 - cookies->next_expiration) >> 32;
                  if ( v87 < cookies->next_expiration )
                    v88 = (int)cookies;
                  p_next_expiration = &cookies->next_expiration;
                  if ( v87 < cookies->next_expiration )
                  {
                    *(_DWORD *)(v88 + 256) = v87;
                    *((_DWORD *)p_next_expiration + 1) = HIDWORD(v87);
                  }
                }
                return v12;
              }
              if ( curl_strequal(v71->name, v12->name) )
              {
                v122 = v71->domain;
                v123 = v12->domain;
                if ( v122 )
                {
                  if ( v123 && curl_strequal(v122, v123) )
                  {
LABEL_277:
                    spath = v71->spath;
                    if ( spath )
                    {
                      delim = v12->spath;
                      if ( delim )
                      {
                        if ( v71->secure && !((unsigned int)valuep | v12->secure) )
                        {
                          v127 = strchr(spath + 1, 47);
                          v128 = v127 ? v127 - spath : strlen(spath);
                          if ( curl_strnequal(spath, delim, v128) )
                          {
                            if ( (*(_BYTE *)(now + 1617) & 0x20) != 0 )
                              Curl_infof(
                                now,
                                "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                                v12->name,
                                v12->domain);
                            goto LABEL_86;
                          }
                        }
                      }
                    }
                  }
                }
                else if ( !v123 )
                {
                  goto LABEL_277;
                }
              }
              if ( !v69 && curl_strequal(v71->name, v12->name) )
              {
                v125 = v71->domain;
                v126 = v12->domain;
                if ( v125 )
                {
                  if ( v126 && curl_strequal(v125, v126) )
                  {
                    v129 = v71->tailmatch == v12->tailmatch;
                    goto LABEL_298;
                  }
                  goto LABEL_282;
                }
                v129 = v126 == 0;
LABEL_298:
                if ( !v129 )
                {
LABEL_282:
                  if ( !livecookie )
                    goto LABEL_283;
                }
                v130 = v71->spath;
                v131 = v12->spath;
                if ( (!v130 || v131 && curl_strequal(v130, v131)) && (v71->spath == 0) == (v12->spath == 0) )
                {
                  livecookie = v12->livecookie;
                  if ( v12->livecookie )
                  {
                    v68 = v71;
                    v69 = v12;
                  }
                  else
                  {
                    if ( v71->livecookie )
                      goto LABEL_86;
                    v68 = v71;
                    v69 = v12;
                    livecookie = 1;
                  }
                }
                else
                {
LABEL_283:
                  livecookie = 0;
                }
              }
              v70 = v71;
              v71 = v71->next;
              continue;
            }
          }
          if ( curl_strnequal("__Secure-", v118, 9) )
          {
            v120 = v12->prefix | 1;
LABEL_264:
            v12->prefix = v120;
            goto LABEL_265;
          }
          if ( curl_strnequal("__Host-", v12->name, 7) )
          {
            v120 = v12->prefix | 2;
            goto LABEL_264;
          }
LABEL_265:
          v95 = strtok_r(0u, "\t", &tok_buf);
          if ( !v95 )
          {
            v92 = 0;
            goto LABEL_259;
          }
LABEL_270:
          v93 = 6;
          v121 = Curl_cstrdup(v95);
          v92 = v121 == 0;
          v12->value = (char *)v121;
LABEL_271:
          ++v93;
          v95 = strtok_r(0u, "\t", &tok_buf);
          break;
        case 3:
          goto LABEL_241;
        case 4:
          goto LABEL_252;
        case 5:
          goto LABEL_257;
        case 6:
          goto LABEL_270;
        default:
          v92 = 0;
          goto LABEL_271;
      }
    }
  }
  if ( strlen(lineptr) > (unsigned int)&loc_1388 )
  {
LABEL_5:
    Curl_cfree(v12);
    return 0;
  }
  v141 = 0;
  reject = ";\t\r\n=";
  v142 = (char *)&badoctets_0;
  while ( 1 )
  {
    while ( 1 )
    {
      v13 = (const char *)(unsigned __int8)*v8;
      badcookie = v13;
      if ( !v13 )
        break;
      v14 = v13 == (_BYTE *)&loc_8 + 1;
      if ( v13 != (_BYTE *)&loc_8 + 1 )
        v14 = v13 == (const char *)&loc_20;
      if ( !v14 )
        break;
      ++v8;
    }
    v15 = strcspn(v8, reject);
    v16 = v15;
    if ( !v15 )
    {
      s = v8;
      goto LABEL_91;
    }
    v17 = &v8[v15];
    while ( 1 )
    {
      v18 = v16--;
      v19 = (unsigned __int8)v8[v16];
      v20 = v19 == 9;
      if ( v19 != 9 )
        v20 = v19 == 32;
      if ( !v20 )
        break;
      if ( !v16 )
        goto LABEL_22;
    }
    v16 = v18;
LABEL_22:
    if ( *v17 == 61 )
    {
      s = v17 + 1;
      v21 = strcspn(v17 + 1, ";\r\n");
      v22 = (unsigned __int8 *)s;
      v23 = v21;
      v24 = &v17[v21];
      s = (char *)s + v21;
      while ( v23 )
      {
        v26 = (unsigned __int8)*v24--;
        v25 = v26;
        v27 = v26 == 9;
        if ( v26 != 9 )
          v27 = v25 == 32;
        if ( !v27 )
          break;
        --v23;
      }
      while ( 1 )
      {
        v28 = v22;
        if ( !v23 )
          goto LABEL_44;
        v30 = *v22++;
        v29 = v30;
        v31 = v30 == 9;
        if ( v30 != 9 )
          v31 = v29 == 32;
        if ( !v31 )
          break;
        --v23;
      }
      if ( memchr(v28, 9, v23) )
      {
        freecookie(v12);
        if ( (*(_BYTE *)(now + 1617) & 0x20) != 0 )
          Curl_infof(now, "cookie contains TAB, dropping");
        return 0;
      }
LABEL_44:
      v32 = v137;
    }
    else
    {
      s = &v8[v15];
      v28 = 0;
      v32 = 0;
      v23 = 0;
    }
    v33 = v23 > 0xFFE;
    if ( v23 <= 0xFFE )
      v33 = v16 > 0xFFE;
    if ( v33 || v16 + v23 > 0x1000 )
    {
      freecookie(v12);
      if ( (*(_BYTE *)(now + 1617) & 0x20) != 0 )
        Curl_infof(now, "oversized cookie dropped, name/val %zu + %zu bytes", v16, v23);
      return 0;
    }
    if ( v16 > 6 )
    {
      if ( badcookie == (_BYTE *)&loc_5C + 3 && v8[1] == 95 )
      {
        badcookie = v32;
        v35 = curl_strnequal("__Secure-", v8, 9);
        v32 = badcookie;
        if ( !v35 )
        {
          v36 = curl_strnequal("__Host-", v8, 7);
          v37 = v12->name;
          v32 = badcookie;
          if ( v36 )
            v12->prefix |= 2u;
          v34 = v37 == 0;
          goto LABEL_54;
        }
        v12->prefix |= 1u;
      }
      v34 = v12->name == 0;
LABEL_54:
      if ( v34 )
        goto LABEL_79;
      if ( v23 )
        goto LABEL_317;
      if ( v16 == 8 )
      {
        if ( curl_strnequal("httponly", v8, 8) )
          v12->httponly = 1;
        goto LABEL_91;
      }
      if ( v32 )
      {
LABEL_317:
        if ( v16 == 7 && !curl_strnequal("version", v8, 7) )
        {
          badcookie = (const char *)curl_strnequal("max-age", v8, 7);
          if ( !badcookie )
          {
            if ( !curl_strnequal("expires", v8, 7) )
              goto LABEL_91;
            v52 = v23 == 127;
            if ( v23 <= 0x7F )
              v52 = v12->expires == 0;
            if ( !v52 )
              goto LABEL_91;
            v53 = memcpy(date, v28, v23);
            *((_BYTE *)&v133 + v23 + 0x4C) = (_BYTE)badcookie;
            v54 = Curl_getdate_capped(v53);
            if ( v54 )
            {
              if ( v54 >= 0 )
              {
                v12->expires = v54;
                goto LABEL_91;
              }
              LODWORD(v39) = 0;
            }
            else
            {
LABEL_65:
              LODWORD(v39) = 1;
            }
            HIDWORD(v39) = 0;
LABEL_67:
            v12->expires = v39;
            goto LABEL_91;
          }
          if ( *v28 == 34 )
            ++v28;
          v38 = curlx_strtoofft(v28, 0, 10, &v12->expires);
          switch ( v38 )
          {
            case 1:
              goto LABEL_135;
            case 2:
              goto LABEL_65;
            case 0:
              if ( !v12->expires )
                goto LABEL_65;
              if ( __SPAIR64__(0x7FFFFFFF - ((int)delim >> 0x1F), ~(unsigned int)delim) >= v12->expires )
              {
                v12->expires += (int)delim;
                goto LABEL_91;
              }
LABEL_135:
              v39 = 0x7FFFFFFFFFFFFFFFLL;
              goto LABEL_67;
          }
        }
      }
      goto LABEL_91;
    }
    if ( !v12->name )
    {
LABEL_79:
      if ( !v32 )
        goto LABEL_86;
      strstore(&v12->name, v8, v16);
      strstore(&v12->value, v28, v23);
      v42 = v12->name;
      if ( !v42 )
        goto LABEL_86;
      v43 = v12->value;
      if ( !v43 )
        goto LABEL_86;
      if ( v43[strcspn(v12->value, v142)] || v42[strcspn(v42, v142)] )
      {
        if ( (*(_BYTE *)(now + 1617) & 0x20) != 0 )
          Curl_infof(now, "invalid octets in name/value, cookie dropped");
        goto LABEL_86;
      }
      goto LABEL_91;
    }
    if ( v23 )
    {
      if ( v16 != 4 )
      {
        if ( v16 != 6 )
          goto LABEL_91;
LABEL_103:
        v48 = curl_strnequal("domain", v8, 6);
        v49 = v48 == 0;
        if ( v48 )
          v49 = v23 == 0;
        if ( v49 )
          goto LABEL_91;
        if ( *v28 == 46 )
        {
          --v23;
          ++v28;
        }
        if ( v23 == 9 && curl_strnequal(v28, "localhost", 9)
          || (v50 = memchr(v28, 46, v23)) != 0 && v23 - (v50 - v28) > 1 )
        {
          if ( !domain )
          {
            is_ipnum = Curl_host_is_ipnum(v28);
            strstore(&v12->domain, v28, v23);
            if ( !v12->domain )
              goto LABEL_86;
            if ( is_ipnum )
              goto LABEL_91;
LABEL_116:
            v12->tailmatch = 1;
            goto LABEL_91;
          }
        }
        else
        {
          domain = ":";
        }
        if ( !Curl_host_is_ipnum(domain) )
        {
          if ( !cookie_tailmatch(v28, v23, domain) )
            goto LABEL_130;
          strstore(&v12->domain, v28, v23);
          if ( !v12->domain )
            goto LABEL_86;
          goto LABEL_116;
        }
        if ( strncmp(v28, domain, v23) || strlen(domain) != v23 )
        {
LABEL_130:
          if ( (*(_BYTE *)(now + 1617) & 0x20) != 0 )
            Curl_infof(now, "skipped cookie with bad tailmatch domain: %s", v28);
          v141 = 1;
          goto LABEL_91;
        }
        strstore(&v12->domain, v28, v23);
        v41 = v12->domain == 0;
LABEL_76:
        if ( v41 )
          goto LABEL_86;
        goto LABEL_91;
      }
LABEL_73:
      if ( !curl_strnequal("path", v8, 4) )
        goto LABEL_91;
      strstore(&v12->path, v28, v23);
      if ( !v12->path )
        goto LABEL_86;
      Curl_cfree(v12->spath);
      v40 = sanitize_cookie_path(v12->path);
      v41 = v40 == 0;
      v12->spath = v40;
      goto LABEL_76;
    }
    if ( v16 != 6 )
    {
      if ( !v32 || v16 != 4 )
        goto LABEL_91;
      goto LABEL_73;
    }
    badcookie = v32;
    if ( curl_strnequal("secure", v8, 6) )
    {
      if ( !valuep && cookies->running )
        goto LABEL_86;
      v12->secure = 1;
      goto LABEL_91;
    }
    if ( badcookie )
      goto LABEL_103;
LABEL_91:
    v44 = (char *)s;
    do
    {
      v46 = (unsigned __int8)*v44++;
      v45 = v46;
      if ( !v46 )
        goto LABEL_145;
      v47 = v45 == 9;
      if ( v45 != 9 )
        v47 = v45 == 32;
    }
    while ( v47 );
    if ( v45 != 59 )
      break;
    v8 = v44;
  }
LABEL_145:
  if ( !v141 )
  {
    v55 = v12->domain == 0;
    if ( !domain )
      v55 = 0;
    if ( !v55 || (v90 = Curl_cstrdup(domain), (v12->domain = (char *)v90) != 0) )
    {
      v56 = v12->path == 0;
      if ( !path )
        v56 = 0;
      if ( !v56 )
        goto LABEL_318;
      v57 = strchr(path, 63);
      v58 = v57 ? (char *)Curl_memrchr(path, 47, v57 - path) : strrchr(path, 47);
      if ( !v58 )
        goto LABEL_318;
      v59 = v58 - path;
      v60 = v59 + 1;
      v61 = (char *)Curl_cmalloc(v59 + 2);
      v12->path = v61;
      if ( v61 )
      {
        memcpy(v61, path, v60);
        v12->path[v60] = 0;
        v62 = sanitize_cookie_path(v12->path);
        v12->spath = v62;
        if ( v62 )
        {
LABEL_318:
          if ( v12->name )
          {
            ++*(_BYTE *)(now + 270);
            goto LABEL_159;
          }
        }
      }
    }
  }
LABEL_86:
  freecookie(v12);
  return 0;
}
