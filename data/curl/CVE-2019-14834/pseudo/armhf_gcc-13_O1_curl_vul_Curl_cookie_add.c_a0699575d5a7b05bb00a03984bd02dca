Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  _BOOL4 v9; // r6
  char *v10; // r8
  unsigned int v11; // r6
  Cookie *v12; // r11
  size_t v13; // r5
  bool v14; // cc
  _BOOL4 v15; // r4
  _BOOL4 v16; // r3
  int v17; // r0
  bool v18; // zf
  const char *v19; // r10
  size_t v20; // r6
  _BYTE *v21; // r0
  char *v22; // r5
  const char *v23; // r4
  char *v24; // r5
  int v25; // r3
  bool v26; // zf
  char *v27; // r7
  int v28; // t1
  const char *v29; // r9
  _BOOL4 v30; // r3
  _BOOL4 v31; // r3
  char *v32; // r0
  int v33; // r0
  bool v34; // zf
  int v35; // r0
  int v36; // r9
  bool v37; // zf
  int v38; // r0
  char *v39; // r0
  char *v40; // r3
  int v41; // r3
  size_t v42; // r4
  char *v43; // r0
  char *v44; // r0
  char *v45; // r0
  char *v46; // r0
  char *v47; // r4
  int v48; // r6
  int v49; // r0
  int v50; // r5
  int v51; // r0
  char v52; // r3
  int v53; // r3
  const char *v54; // r0
  char *v55; // r0
  int v56; // r0
  int v57; // r1
  int v58; // r0
  unsigned int v59; // r4
  int v60; // r0
  char *v61; // r1
  const char *v62; // r8
  char *spath; // r10
  char *v64; // r0
  size_t v65; // r2
  int v66; // r0
  char *v67; // r1
  int v68; // r0
  char *v69; // r1
  int livecookie; // r7
  Cookie *v71; // r5
  char *name; // r1
  char *value; // r2
  char *v74; // r3
  char *v75; // r1
  int expires; // r2
  int expires_high; // r3
  int creationtime; // r1
  int v79; // r2
  int v80; // r3
  __int64 v81; // r2
  Curl_easy *v82; // r12
  const char *v84; // r2
  int is_ipnum; // r4
  int v86; // r0
  const char *v87; // r0
  CookieInfo *v88; // r2
  char *v89; // r3
  size_t v90; // r9
  int v91; // r2
  const char *v92; // r3
  int v93; // t1
  bool v94; // zf
  char *v95; // r3
  char *v96; // r1
  unsigned int v97; // r2
  int v98; // r4
  int v99; // t1
  bool v100; // zf
  char *v101; // r4
  size_t v102; // r0
  char *v103; // r2
  int v104; // r3
  int v105; // t1
  bool v106; // zf
  int v107; // [sp+0h] [bp-100h] BYREF
  _BOOL4 v108; // [sp+1Ch] [bp-E4h]
  CookieInfo *ca; // [sp+20h] [bp-E0h]
  const char *domain_0; // [sp+24h] [bp-DCh]
  Curl_easy *dataa; // [sp+28h] [bp-D8h]
  char *s2; // [sp+2Ch] [bp-D4h]
  Curl_easy *v113; // [sp+30h] [bp-D0h]
  time_t now; // [sp+38h] [bp-C8h]
  _BOOL4 v115; // [sp+3Ch] [bp-C4h]
  time_t v116; // [sp+40h] [bp-C0h]
  const char *badcookie; // [sp+44h] [bp-BCh]
  const char *v118; // [sp+48h] [bp-B8h]
  int v119; // [sp+4Ch] [bp-B4h]
  char *tok_buf; // [sp+50h] [bp-B0h] BYREF
  char date[128]; // [sp+54h] [bp-ACh] BYREF

  v113 = data;
  dataa = (Curl_easy *)c;
  v9 = httpheader;
  v108 = httpheader;
  v115 = noexpire;
  v10 = (char *)lineptr;
  s2 = (char *)domain;
  now = secure;
  v116 = time(0u);
  if ( data->req.setcookies > 0x31u )
    return 0;
  v12 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v12 )
    return 0;
  if ( !v9 )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v10 = (char *)(lineptr + 0xA);
      v12->httponly = 1;
    }
    if ( *v10 == 35 )
    {
      Curl_cfree(v12);
    }
    else
    {
      v45 = strchr(v10, 13);
      if ( v45 )
        *v45 = 0;
      v46 = strchr(v10, 10);
      if ( v46 )
        *v46 = 0;
      v47 = strtok_r(v10, "\t", &tok_buf);
      if ( !v47 )
        goto LABEL_193;
      v48 = 0;
      while ( 2 )
      {
        switch ( v48 )
        {
          case 0:
            if ( *v47 == 46 )
              ++v47;
            v49 = Curl_cstrdup(v47);
            v12->domain = (char *)v49;
            if ( !v49 )
              goto LABEL_268;
            v50 = v108;
            goto LABEL_160;
          case 1:
            v51 = curl_strequal(v47, "TRUE");
            v52 = v51;
            if ( v51 )
              v52 = 1;
            v12->tailmatch = v52;
            v50 = v108;
            goto LABEL_160;
          case 2:
            if ( !strcmp("TRUE", v47) || !strcmp("FALSE", v47) )
            {
              ca = (CookieInfo *)Curl_cstrdup("/");
              v12->path = (char *)ca;
              v56 = Curl_cstrdup("/");
              v12->spath = (char *)v56;
              if ( v56 )
                v50 = ca == 0;
              else
                v50 = 1;
LABEL_174:
              v12->secure = 0;
              if ( curl_strequal(v47, "TRUE") )
              {
                if ( !now && !LOBYTE(dataa->req.doh) )
                {
                  v48 = 3;
LABEL_268:
                  strtok_r(0u, "\t", &tok_buf);
                  if ( v48 == 5 )
                  {
                    v50 = 1;
                    goto LABEL_271;
                  }
                  goto LABEL_193;
                }
                v12->secure = 1;
                v48 = 3;
              }
              else
              {
                v48 = 3;
              }
            }
            else
            {
              v54 = (const char *)Curl_cstrdup(v47);
              v12->path = (char *)v54;
              if ( !v54 )
                goto LABEL_268;
              v55 = sanitize_cookie_path(v54);
              v12->spath = v55;
              if ( !v55 )
                goto LABEL_268;
              v50 = v108;
            }
LABEL_160:
            ++v48;
            v47 = strtok_r(0u, "\t", &tok_buf);
            if ( v47 )
              v53 = ((unsigned __int8)v50 ^ 1) & 1;
            else
              v53 = 0;
            if ( v53 )
              continue;
            if ( v48 != 6 )
              goto LABEL_273;
LABEL_271:
            v86 = Curl_cstrdup(&LC2);
            v12->value = (char *)v86;
            if ( v86 )
            {
              v48 = 7;
LABEL_273:
              if ( v48 != 7 )
                v50 |= 1u;
              if ( !v50 )
              {
LABEL_276:
                if ( (v12->prefix & 1) != 0 )
                {
                  if ( v12->secure )
                  {
                    if ( (v12->prefix & 2) != 0 )
                      goto LABEL_279;
LABEL_282:
                    if ( LOBYTE(dataa->req.doh) || !BYTE1(dataa->req.doh) || v12->expires )
                    {
                      v12->livecookie = (bool)dataa->req.doh;
                      v88 = (CookieInfo *)dataa;
                      v89 = (char *)&dataa->req.p.file->path + 1;
                      dataa->req.p.file = (FILEPROTO *)v89;
                      v12->creationtime = (int)v89;
                      if ( !v115 )
                        remove_expired(v88);
                      v90 = cookiehash(v12->domain);
                      v59 = *(&dataa->magic + v90);
                      if ( v59 )
                      {
                        livecookie = 0;
                        v11 = 0;
                        v71 = 0;
                        while ( 1 )
                        {
                          if ( !curl_strequal(*(_DWORD *)(v59 + 4), v12->name) )
                            goto LABEL_201;
                          v60 = *(_DWORD *)(v59 + 20);
                          if ( v60 )
                          {
                            v61 = v12->domain;
                            if ( !v61 || !curl_strequal(v60, v61) )
                              goto LABEL_201;
                          }
                          else if ( v12->domain )
                          {
                            goto LABEL_201;
                          }
                          v62 = *(const char **)(v59 + 16);
                          if ( v62 )
                          {
                            spath = v12->spath;
                            if ( spath )
                            {
                              if ( *(_BYTE *)(v59 + 33) && !(now | v12->secure) )
                              {
                                v64 = strchr(v62 + 1, 47);
                                v65 = v64 ? v64 - v62 : strlen(v62);
                                if ( curl_strnequal(v62, spath, v65) )
                                {
                                  if ( (*(&v113->set.connect_only + 4) & 0x10) != 0 )
                                    Curl_infof(
                                      v113,
                                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                                      v12->name,
                                      v12->domain);
                                  goto LABEL_218;
                                }
                              }
                            }
                          }
LABEL_201:
                          if ( v71 || !curl_strequal(*(_DWORD *)(v59 + 4), v12->name) )
                            goto LABEL_202;
                          v66 = *(_DWORD *)(v59 + 20);
                          if ( v66 )
                          {
                            v67 = v12->domain;
                            if ( !v67 || !curl_strequal(v66, v67) || *(unsigned __int8 *)(v59 + 32) != v12->tailmatch )
                            {
LABEL_226:
                              if ( !livecookie )
                                goto LABEL_202;
                            }
                          }
                          else if ( v12->domain )
                          {
                            goto LABEL_226;
                          }
                          v68 = *(_DWORD *)(v59 + 16);
                          if ( !v68 )
                            goto LABEL_230;
                          v69 = v12->spath;
                          if ( !v69 )
                          {
                            v71 = 0;
                            livecookie = 0;
                            goto LABEL_202;
                          }
                          if ( !curl_strequal(v68, v69) )
                          {
                            livecookie = 0;
                          }
                          else
                          {
LABEL_230:
                            if ( (*(_DWORD *)(v59 + 16) == 0) == (v12->spath == 0) )
                            {
                              livecookie = v12->livecookie;
                              if ( v12->livecookie )
                              {
                                v11 = v59;
                                v71 = v12;
                              }
                              else
                              {
                                if ( *(_BYTE *)(v59 + 34) )
                                  goto LABEL_218;
                                v11 = v59;
                                v71 = v12;
                                livecookie = 1;
                              }
                            }
                            else
                            {
                              livecookie = 0;
                            }
                          }
LABEL_202:
                          if ( !*(_DWORD *)v59 )
                          {
                            if ( v71 )
                            {
                              v71->next = *(Cookie **)v11;
                              v71->creationtime = *(_DWORD *)(v11 + 36);
                              Curl_cfree(*(_DWORD *)(v11 + 4));
                              Curl_cfree(*(_DWORD *)(v11 + 8));
                              Curl_cfree(*(_DWORD *)(v11 + 20));
                              Curl_cfree(*(_DWORD *)(v11 + 12));
                              Curl_cfree(*(_DWORD *)(v11 + 16));
                              name = v71->name;
                              value = v71->value;
                              v74 = v71->path;
                              *(_DWORD *)v11 = v71->next;
                              *(_DWORD *)(v11 + 4) = name;
                              *(_DWORD *)(v11 + 8) = value;
                              *(_DWORD *)(v11 + 12) = v74;
                              v75 = v71->domain;
                              expires = v71->expires;
                              expires_high = HIDWORD(v71->expires);
                              *(_DWORD *)(v11 + 16) = v71->spath;
                              *(_DWORD *)(v11 + 20) = v75;
                              *(_DWORD *)(v11 + 24) = expires;
                              *(_DWORD *)(v11 + 28) = expires_high;
                              creationtime = v71->creationtime;
                              v79 = *(_DWORD *)&v71->prefix;
                              v80 = *((_DWORD *)&v71->prefix + 1);
                              *(_DWORD *)(v11 + 32) = *(_DWORD *)&v71->tailmatch;
                              *(_DWORD *)(v11 + 36) = creationtime;
                              *(_DWORD *)(v11 + 40) = v79;
                              *(_DWORD *)(v11 + 44) = v80;
                              Curl_cfree(v71);
                            }
                            else
                            {
                              v11 = (unsigned int)v12;
                            }
                            if ( !LOBYTE(dataa->req.doh) )
                              goto LABEL_243;
                            goto LABEL_248;
                          }
                          v59 = *(_DWORD *)v59;
                        }
                      }
                      if ( !LOBYTE(dataa->req.doh) )
                      {
                        v11 = (unsigned int)v12;
                        goto LABEL_292;
                      }
                      v11 = (unsigned int)v12;
                      livecookie = 0;
LABEL_248:
                      if ( (*(&v113->set.connect_only + 4) & 0x10) != 0 )
                      {
                        if ( livecookie )
                          v84 = "Replaced";
                        else
                          v84 = "Added";
                        Curl_infof(
                          v113,
                          "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
                          v84,
                          *(const char **)(v11 + 4),
                          *(const char **)(v11 + 8),
                          *(const char **)(v11 + 20),
                          *(const char **)(v11 + 12),
                          *(_QWORD *)(v11 + 0x18));
                      }
LABEL_243:
                      if ( !livecookie )
                      {
                        if ( v59 )
                          *(_DWORD *)v59 = v11;
                        else
LABEL_292:
                          *(&dataa->magic + v90) = v11;
                        ++dataa->req.upload_fromhere;
                      }
                      v81 = *(_QWORD *)(v11 + 24);
                      if ( v81 )
                      {
                        v82 = dataa;
                        if ( v81 < *(_QWORD *)&dataa->req.newurl )
                        {
                          dataa->req.newurl = (char *)v81;
                          v82->req.upload_present = HIDWORD(v81);
                        }
                      }
                      return (Cookie *)v11;
                    }
                  }
                }
                else
                {
                  if ( (v12->prefix & 2) == 0 )
                    goto LABEL_282;
                  if ( v12->secure )
                  {
LABEL_279:
                    v87 = v12->path;
                    if ( v87 && !strcmp(v87, "/") && !v12->tailmatch )
                      goto LABEL_282;
                  }
                }
LABEL_218:
                freecookie(v12);
                return 0;
              }
            }
LABEL_193:
            freecookie(v12);
            break;
          case 3:
            v50 = v108;
            goto LABEL_174;
          case 4:
            if ( curlx_strtoofft(v47, 0, 10, &v12->expires) )
              goto LABEL_268;
            v50 = v108;
            goto LABEL_160;
          case 5:
            v57 = Curl_cstrdup(v47);
            v12->name = (char *)v57;
            if ( !v57 )
              goto LABEL_268;
            if ( curl_strnequal("__Secure-", v57, 9) )
            {
              v12->prefix |= 1u;
              v50 = v108;
            }
            else
            {
              if ( curl_strnequal("__Host-", v12->name, 7) )
                v12->prefix |= 2u;
              v50 = v108;
            }
            goto LABEL_160;
          case 6:
            v58 = Curl_cstrdup(v47);
            v12->value = (char *)v58;
            if ( !v58 )
              goto LABEL_268;
            v50 = v108;
            goto LABEL_160;
          default:
            v50 = v108;
            goto LABEL_160;
        }
        break;
      }
    }
    return 0;
  }
  if ( strlen(lineptr) > (unsigned int)&loc_1388 )
  {
    Curl_cfree(v12);
    return 0;
  }
  v119 = 0;
  ca = (CookieInfo *)";\t\r\n=";
  badcookie = "domain";
  v118 = "path";
  domain_0 = path;
  while ( 1 )
  {
    v36 = (unsigned __int8)*v10;
    if ( !*v10 )
      break;
    v37 = v36 == 9;
    if ( v36 != 9 )
      v37 = v36 == 32;
    if ( v37 )
    {
      ++v10;
    }
    else
    {
      v13 = strcspn(v10, ";\t\r\n=");
      if ( v13 )
        goto LABEL_303;
      v25 = (unsigned __int8)*v10;
      v27 = v10;
      while ( 1 )
      {
LABEL_75:
        v26 = v25 == 9;
        if ( v25 != 9 )
          v26 = v25 == 32;
        if ( !v26 )
          break;
        v28 = (unsigned __int8)*++v27;
        v25 = v28;
        if ( !v28 )
        {
          v29 = domain_0;
          goto LABEL_81;
        }
      }
      if ( v25 != 59 )
      {
        v29 = domain_0;
        goto LABEL_81;
      }
      v10 = v27 + 1;
    }
  }
  v13 = strcspn(v10, (const char *)ca);
  if ( !v13 )
  {
    v29 = domain_0;
    goto LABEL_81;
  }
LABEL_303:
  v95 = &v10[v13];
  v96 = &v10[v13];
  do
  {
    v97 = v13--;
    v99 = (unsigned __int8)*--v95;
    v98 = v99;
    v100 = v99 == 9;
    if ( v99 != 9 )
      v100 = v98 == 32;
    if ( !v100 )
    {
      v15 = 0;
      if ( *v96 == 61 )
      {
        v13 = v97;
        goto LABEL_310;
      }
      if ( v97 > 0xFFE )
      {
        v13 = v97;
        v20 = 0;
        goto LABEL_48;
      }
      v13 = v97;
      v27 = v96;
      v19 = 0;
      v20 = 0;
      goto LABEL_17;
    }
  }
  while ( v13 );
  if ( *v96 != 61 )
  {
    v20 = 0;
    v27 = v96;
    v19 = 0;
    v15 = 0;
    goto LABEL_17;
  }
LABEL_310:
  v101 = v96;
  v19 = v96 + 1;
  v102 = strcspn(v96 + 1, ";\r\n");
  v20 = v102;
  v27 = (char *)&v19[v102];
  if ( !v102 )
  {
LABEL_317:
    if ( v13 > 0xFFE )
    {
      v20 = 0;
      goto LABEL_48;
    }
    v15 = v108;
    v20 = 0;
LABEL_17:
    v16 = v13 > 6;
    if ( v36 != 95 )
      v16 = 0;
    if ( v16 && v10[1] == 95 )
    {
      if ( curl_strnequal("__Secure-", v10, 9) )
      {
        v12->prefix |= 1u;
      }
      else if ( curl_strnequal("__Host-", v10, 7) )
      {
        v12->prefix |= 2u;
      }
    }
    if ( !v12->name )
    {
      if ( !v15 )
        goto LABEL_218;
      strstore(&v12->name, v10, v13);
      strstore(&v12->value, v19, v20);
      v23 = v12->name;
      if ( !v23 )
        goto LABEL_218;
      v24 = v12->value;
      if ( !v24 )
        goto LABEL_218;
      if ( v24[strcspn(v12->value, badoctets_0)] || v23[strcspn(v23, badoctets_0)] )
      {
        if ( (*(&v113->set.connect_only + 4) & 0x10) != 0 )
          Curl_infof(v113, "invalid octets in name/value, cookie dropped");
        goto LABEL_218;
      }
      goto LABEL_74;
    }
    if ( v20 )
      goto LABEL_25;
    if ( v13 == 6 )
    {
      if ( curl_strnequal("secure", v10, 6) )
      {
        if ( !now && LOBYTE(dataa->req.doh) )
          goto LABEL_218;
        v12->secure = 1;
        goto LABEL_74;
      }
      if ( v15 )
      {
LABEL_26:
        if ( v13 == 6 )
        {
          v17 = curl_strnequal(badcookie, v10, 6);
          v18 = v17 == 0;
          if ( v17 )
            v18 = v20 == 0;
          if ( v18 )
            goto LABEL_74;
          if ( *v19 == 46 )
          {
            ++v19;
            --v20;
          }
          if ( v20 != 9 || !curl_strnequal(v19, "localhost", 9) )
          {
            v21 = memchr(v19, 46, v20);
            if ( !v21 )
            {
              s2 = ":";
              goto LABEL_38;
            }
            if ( v20 - (v21 - v19) <= 1 )
            {
              s2 = ":";
              goto LABEL_38;
            }
          }
          if ( !s2 )
          {
            is_ipnum = Curl_host_is_ipnum(v19);
            strstore(&v12->domain, v19, v20);
            if ( !v12->domain )
              goto LABEL_218;
            if ( is_ipnum )
              goto LABEL_74;
LABEL_98:
            v12->tailmatch = 1;
            goto LABEL_74;
          }
LABEL_38:
          if ( Curl_host_is_ipnum(s2) )
          {
            v22 = s2;
            if ( !strncmp(v19, s2, v20) && strlen(v22) == v20 )
            {
              strstore(&v12->domain, v19, v20);
              if ( !v12->domain )
                goto LABEL_218;
              goto LABEL_74;
            }
            goto LABEL_41;
          }
          if ( !cookie_tailmatch(v19, v20, s2) )
          {
LABEL_41:
            if ( (*(&v113->set.connect_only + 4) & 0x10) != 0 )
              Curl_infof(v113, "skipped cookie with bad tailmatch domain: %s", v19);
            v119 = 1;
            goto LABEL_74;
          }
          strstore(&v12->domain, v19, v20);
          if ( !v12->domain )
            goto LABEL_218;
          goto LABEL_98;
        }
LABEL_73:
        if ( v13 == 7 && !curl_strnequal("version", v10, 7) )
        {
          if ( curl_strnequal("max-age", v10, 7) )
          {
            if ( *v19 == 34 )
              ++v19;
            v33 = curlx_strtoofft(v19, 0, 10, &v12->expires);
            switch ( v33 )
            {
              case 1:
                v12->expires = 0x7FFFFFFFFFFFFFFFLL;
                break;
              case 2:
                v12->expires = 1LL;
                break;
              case 0:
                if ( v12->expires )
                {
                  if ( __SPAIR64__(0x7FFFFFFF - (v116 >> 0x1F), ~v116) >= v12->expires )
                    v12->expires += v116;
                  else
                    v12->expires = 0x7FFFFFFFFFFFFFFFLL;
                }
                else
                {
                  v12->expires = 1LL;
                }
                break;
            }
          }
          else if ( curl_strnequal("expires", v10, 7) )
          {
            v34 = v20 == 127;
            if ( v20 <= 0x7F )
              v34 = v12->expires == 0;
            if ( v34 )
            {
              memcpy(date, v19, v20);
              *((_BYTE *)&v107 + v20 + 0x54) = 0;
              v35 = Curl_getdate_capped(date);
              if ( v35 )
              {
                if ( v35 >> 31 == -1 )
                  v12->expires = 0LL;
                else
                  v12->expires = v35;
              }
              else
              {
                v12->expires = 1LL;
              }
            }
          }
        }
      }
    }
    else if ( v13 == 8 )
    {
      if ( curl_strnequal("httponly", v10, 8) )
      {
        v12->httponly = 1;
      }
      else if ( v15 )
      {
        goto LABEL_73;
      }
    }
    else if ( v15 )
    {
LABEL_25:
      if ( v13 == 4 )
      {
        if ( curl_strnequal(v118, v10, 4) )
        {
          strstore(&v12->path, v19, v20);
          if ( !v12->path )
            goto LABEL_218;
          Curl_cfree(v12->spath);
          v32 = sanitize_cookie_path(v12->path);
          v12->spath = v32;
          if ( !v32 )
            goto LABEL_218;
        }
        goto LABEL_74;
      }
      goto LABEL_26;
    }
LABEL_74:
    v25 = (unsigned __int8)*v27;
    if ( *v27 )
      goto LABEL_75;
    v29 = domain_0;
LABEL_81:
    if ( !v119 )
    {
      v30 = v12->domain == 0;
      if ( !s2 )
        v30 = 0;
      if ( !v30 || (v38 = Curl_cstrdup(s2), (v12->domain = (char *)v38) != 0) )
      {
        v31 = v12->path == 0;
        if ( !v29 )
          v31 = 0;
        if ( !v31 )
          goto LABEL_322;
        v39 = strchr(v29, 63);
        v40 = v39 ? (char *)Curl_memrchr(v29, 47, v39 - v29) : strrchr(v29, 47);
        if ( !v40 )
          goto LABEL_322;
        v41 = v40 - v29;
        v42 = v41 + 1;
        v43 = (char *)Curl_cmalloc(v41 + 2);
        v12->path = v43;
        if ( v43 )
        {
          memcpy(v43, v29, v42);
          v12->path[v42] = 0;
          v44 = sanitize_cookie_path(v12->path);
          v12->spath = v44;
          if ( v44 )
          {
LABEL_322:
            if ( v12->name )
            {
              ++v113->req.setcookies;
              goto LABEL_276;
            }
          }
        }
      }
    }
    goto LABEL_218;
  }
  v103 = &v101[v102 + 1];
  while ( 1 )
  {
    v105 = (unsigned __int8)*--v103;
    v104 = v105;
    v106 = v105 == 9;
    if ( v105 != 9 )
      v106 = v104 == 32;
    if ( !v106 )
      break;
    if ( !--v20 )
      goto LABEL_317;
  }
  v92 = v19;
  do
  {
    v19 = v92;
    v93 = *(unsigned __int8 *)v92++;
    v91 = v93;
    v94 = v93 == 9;
    if ( v93 != 9 )
      v94 = v91 == 32;
    if ( !v94 )
    {
      if ( !memchr(v19, 9, v20) )
        goto LABEL_12;
      freecookie(v12);
      if ( (*(&v113->set.connect_only + 4) & 0x10) != 0 )
        Curl_infof(v113, "cookie contains TAB, dropping");
      return 0;
    }
    --v20;
  }
  while ( v20 );
  v19 = v92;
LABEL_12:
  v14 = v20 > 0xFFE;
  if ( v20 <= 0xFFE )
    v14 = v13 > 0xFFE;
  if ( !v14 && v20 + v13 <= 0x1000 )
  {
    v15 = v108;
    goto LABEL_17;
  }
LABEL_48:
  freecookie(v12);
  if ( (*(&v113->set.connect_only + 4) & 0x10) != 0 )
    Curl_infof(v113, "oversized cookie dropped, name/val %zu + %zu bytes", v13, v20);
  return 0;
}
