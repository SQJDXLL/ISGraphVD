Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  _BOOL4 v9; // w24
  Cookie *v11; // x19
  int v12; // w23
  size_t v14; // x25
  const char *v15; // x26
  size_t v16; // x0
  _BOOL4 v17; // w6
  _BYTE *v18; // x22
  size_t v19; // x27
  size_t v20; // x6
  _BOOL4 v21; // w1
  char *v22; // x0
  char *v23; // x0
  char *v24; // x0
  int v25; // w28
  char *v26; // x2
  int v27; // w0
  const char *v28; // x2
  __int64 (__fastcall *v29)(const char *); // x27
  int v30; // w0
  const char *v31; // x0
  char *v32; // x0
  _BOOL4 v33; // w25
  int v34; // w20
  __int64 v35; // x27
  __int64 v36; // x0
  bool v37; // zf
  bool v38; // zf
  unsigned __int8 prefix; // w0
  Cookie *v40; // x24
  bool v41; // zf
  bool v42; // cc
  int v44; // t1
  char *v47; // x0
  int lastct; // w0
  size_t v49; // x26
  Cookie *v50; // x20
  int livecookie; // w25
  Cookie *v52; // x23
  char *v53; // x0
  char *v54; // x1
  const char *spath; // x28
  char *v56; // x27
  _BYTE *v57; // x0
  int v58; // w0
  curl_off_t expires; // x0
  __int64 v61; // x0
  bool v62; // zf
  char *v63; // x0
  __int64 v64; // x0
  __int64 v65; // x0
  int v66; // w0
  __int64 v67; // x0
  char *v68; // x0
  int v69; // w25
  _BYTE *v70; // x0
  const char *v71; // x0
  const char *v72; // x28
  int is_ipnum; // w23
  size_t v74; // x0
  const char *v75; // x28
  __int64 v76; // x0
  int v77; // w0
  __int64 v78; // x0
  __int64 v80; // x0
  __int64 v81; // x0
  const char *name; // x22
  char *value; // x25
  __int64 v84; // x0
  char *v85; // x0
  size_t v86; // x2
  char *v87; // x0
  char *v88; // x1
  char *v89; // x0
  char *v90; // x1
  int creationtime; // w2
  char *v92; // x0
  __int128 v93; // q1
  void (__fastcall *v94)(Cookie *); // x1
  __int128 v95; // q1
  curl_off_t v96; // x0
  int v97; // w0
  char *v98; // x0
  char *v99; // x0
  signed __int64 v100; // x0
  size_t v101; // x20
  char *v102; // x0
  char *v103; // x0
  __int64 v104; // x0
  const char *domainb; // [xsp+70h] [xbp+70h]
  const char *domainc; // [xsp+70h] [xbp+70h]
  _BOOL4 securea; // [xsp+7Ch] [xbp+7Ch]
  time_t now; // [xsp+88h] [xbp+88h]
  _BOOL4 noexpirea; // [xsp+98h] [xbp+98h]
  int badcookie; // [xsp+9Ch] [xbp+9Ch]
  _BOOL4 v114; // [xsp+A0h] [xbp+A0h]
  size_t v115; // [xsp+A0h] [xbp+A0h]
  _BOOL4 v116; // [xsp+A0h] [xbp+A0h]
  char *tok_buf; // [xsp+B0h] [xbp+B0h] BYREF
  char date[128]; // [xsp+B8h] [xbp+B8h] BYREF

  v9 = httpheader;
  noexpirea = noexpire;
  securea = secure;
  now = time(0uLL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  v11 = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !v11 )
    return 0LL;
  if ( !v9 )
  {
    tok_buf = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 0xA;
      v11->httponly = 1;
    }
    if ( *lineptr == 35 )
    {
      Curl_cfree(v11);
      return 0LL;
    }
    v22 = strchr(lineptr, 13);
    if ( v22 )
      *v22 = 0;
    v23 = strchr(lineptr, 10);
    if ( v23 )
      *v23 = 0;
    v24 = (char *)lineptr;
    v25 = 0;
    v26 = strtok_r(v24, "\t", &tok_buf);
    if ( !v26 )
      goto LABEL_207;
    while ( v25 != 3 )
    {
      if ( v25 <= 3 )
      {
        if ( v25 == 1 )
        {
          v33 = 0;
          v25 = 2;
          v34 = 1;
          v11->tailmatch = (unsigned int)curl_strequal(v26, "TRUE") != 0;
          goto LABEL_42;
        }
        if ( v25 != 2 )
        {
          if ( !v25 )
          {
            v25 = 1;
            if ( *v26 == 46 )
              v63 = v26 + 1;
            else
              v63 = v26;
            v64 = Curl_cstrdup(v63);
            v33 = v64 == 0;
            v34 = v64 != 0;
            v11->domain = (char *)v64;
            goto LABEL_42;
          }
LABEL_209:
          ++v25;
          v33 = 0;
          v34 = 1;
          goto LABEL_42;
        }
        domainb = v26;
        v27 = strcmp("TRUE", v26);
        v28 = domainb;
        v29 = (__int64 (__fastcall *)(const char *))Curl_cstrdup;
        if ( v27 )
        {
          v30 = strcmp("FALSE", domainb);
          v28 = domainb;
          if ( v30 )
          {
            v31 = (const char *)v29(domainb);
            v11->path = (char *)v31;
            if ( !v31 )
              goto LABEL_206;
            v32 = sanitize_cookie_path(v31);
            v33 = v32 == 0LL;
            v34 = v32 != 0LL;
            v25 = 3;
            v11->spath = v32;
            goto LABEL_42;
          }
        }
        domainc = v28;
        v35 = v29(byte_24B8);
        v11->path = (char *)v35;
        v33 = 1;
        v36 = Curl_cstrdup(byte_24B8);
        v11->spath = (char *)v36;
        if ( v36 )
          v33 = v35 == 0;
        v11->secure = 0;
        if ( (unsigned int)curl_strequal(domainc, "TRUE") )
        {
LABEL_204:
          if ( !securea && !c->running )
          {
LABEL_206:
            strtok_r(0uLL, "\t", &tok_buf);
            goto LABEL_207;
          }
          v34 = !v33;
          v25 = 4;
          v11->secure = 1;
          goto LABEL_42;
        }
        goto LABEL_41;
      }
      switch ( v25 )
      {
        case 5:
          v78 = Curl_cstrdup(v26);
          v11->name = (char *)v78;
          if ( !v78 )
          {
            v33 = 1;
            strtok_r(0uLL, "\t", &tok_buf);
            goto LABEL_225;
          }
          if ( (unsigned int)curl_strnequal("__Secure-", v78, 9LL) )
          {
            v34 = 1;
            v33 = 0;
            v25 = 6;
            v11->prefix |= 1u;
          }
          else
          {
            v33 = 0;
            v25 = 6;
            v34 = 1;
            if ( (unsigned int)curl_strnequal("__Host-", v11->name, 7LL) )
              v11->prefix |= 2u;
          }
          break;
        case 6:
          v25 = 7;
          v65 = Curl_cstrdup(v26);
          v33 = v65 == 0;
          v34 = v65 != 0;
          v11->value = (char *)v65;
          break;
        case 4:
          v66 = curlx_strtoofft(v26, 0LL, 10LL, &v11->expires);
          v33 = v66 != 0;
          v34 = v66 == 0;
          v25 = 5;
          break;
        default:
          goto LABEL_209;
      }
LABEL_42:
      v26 = strtok_r(0uLL, "\t", &tok_buf);
      if ( v26 )
        v37 = v34 == 0;
      else
        v37 = 1;
      if ( v37 )
      {
        if ( v25 != 6 )
        {
          if ( v34 )
            v38 = v25 == 7;
          else
            v38 = 1;
          if ( v38 && !v33 )
          {
LABEL_54:
            prefix = v11->prefix;
            if ( (prefix & 1) != 0 )
              goto LABEL_98;
            goto LABEL_55;
          }
LABEL_207:
          freecookie(v11);
          return 0LL;
        }
LABEL_225:
        v84 = Curl_cstrdup(&unk_2608);
        v11->value = (char *)v84;
        if ( v84 && !v33 )
          goto LABEL_54;
        goto LABEL_207;
      }
    }
    v11->secure = 0;
    v33 = 0;
    if ( (unsigned int)curl_strequal(v26, "TRUE") )
      goto LABEL_204;
LABEL_41:
    v34 = !v33;
    v25 = 4;
    goto LABEL_42;
  }
  badcookie = 0;
  if ( strlen(lineptr) > 0x1388 )
  {
    v40 = 0LL;
    Curl_cfree(v11);
    return v40;
  }
  v12 = *(unsigned __int8 *)lineptr;
  if ( *lineptr )
    goto LABEL_6;
  while ( 2 )
  {
    v14 = strcspn(lineptr, ";\t\r\n=");
    if ( !v14 )
      break;
LABEL_14:
    v15 = &lineptr[v14];
    do
    {
      v16 = v14--;
      v17 = lineptr[v14] == 32 || lineptr[v14] == 9;
      if ( !v17 )
      {
        v14 = v16;
        if ( *v15 == 61 )
        {
LABEL_18:
          v18 = v15 + 1;
          v19 = strcspn(v15 + 1, ";\r\n");
          v15 += v19 + 1;
          if ( v19 )
          {
            while ( 1 )
            {
              v20 = v19 - 1;
              v21 = v18[v19 - 1] == 32 || v18[v19 - 1] == 9;
              if ( !v21 )
                break;
              --v19;
              if ( !v20 )
                goto LABEL_21;
            }
            while ( 1 )
            {
              v17 = *v18 == 32 || *v18 == 9;
              if ( !v17 )
                break;
              ++v18;
              if ( !--v19 )
                goto LABEL_62;
            }
            if ( memchr(v18, 9, v19) )
            {
              freecookie(v11);
              if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
              {
                v40 = 0LL;
                Curl_infof(data, "cookie contains TAB, dropping");
                return v40;
              }
              return 0LL;
            }
            v17 = v9;
            v21 = v19 > 0xFFE;
          }
          else
          {
LABEL_21:
            v17 = v9;
            v21 = 0;
          }
        }
        else
        {
          v21 = 0;
          v18 = 0LL;
          v19 = 0LL;
        }
LABEL_62:
        v41 = v14 <= 0xFFE && !v21;
        if ( v41 && v19 + v14 <= 0x1000 )
        {
          v42 = v12 == 95 && v14 > 6;
          if ( v42 && lineptr[1] == 95 )
          {
            v116 = v17;
            v77 = curl_strnequal("__Secure-", lineptr, 9LL);
            v17 = v116;
            if ( v77 )
            {
              v11->prefix |= 1u;
            }
            else
            {
              v97 = curl_strnequal("__Host-", lineptr, 7LL);
              v17 = v116;
              if ( v97 )
                v11->prefix |= 2u;
            }
          }
          if ( !v11->name )
          {
            if ( !v17 )
              goto LABEL_57;
            Curl_cfree(0LL);
            v80 = Curl_memdup(lineptr, v14 + 1);
            v11->name = (char *)v80;
            if ( v80 )
              *(_BYTE *)(v80 + v14) = 0;
            Curl_cfree(v11->value);
            v81 = Curl_memdup(v18, v19 + 1);
            v11->value = (char *)v81;
            if ( v81 )
              *(_BYTE *)(v81 + v19) = 0;
            name = v11->name;
            if ( !name )
              goto LABEL_57;
            value = v11->value;
            if ( !value )
              goto LABEL_57;
            if ( value[strcspn(v11->value, badoctets_0)] || name[strcspn(name, badoctets_0)] )
            {
              if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
                Curl_infof(data, "invalid octets in name/value, cookie dropped");
              goto LABEL_57;
            }
            goto LABEL_77;
          }
          if ( v19 )
          {
            if ( v14 != 4 )
              goto LABEL_75;
          }
          else
          {
            if ( v14 == 6 )
            {
              v114 = v17;
              if ( (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
              {
                if ( !securea && c->running )
                  goto LABEL_57;
                lineptr = v15;
                v11->secure = 1;
                goto LABEL_78;
              }
              if ( !v114 )
                goto LABEL_77;
              goto LABEL_168;
            }
            if ( v14 == 8 )
            {
              if ( !(unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
                goto LABEL_77;
              lineptr = v15;
              v11->httponly = 1;
              goto LABEL_78;
            }
            if ( !v17 )
              goto LABEL_77;
            if ( v14 != 4 )
            {
LABEL_75:
              if ( v14 != 6 )
              {
                if ( v14 != 7 || (unsigned int)curl_strnequal("version", lineptr, 7LL) )
                  goto LABEL_77;
                if ( !(unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
                {
                  if ( (unsigned int)curl_strnequal("expires", lineptr, 7LL) )
                  {
                    if ( v19 <= 0x7F && v11->expires == 0 )
                    {
                      *((_BYTE *)memcpy(date, v18, v19) + v19) = 0;
                      v61 = Curl_getdate_capped();
                      v62 = v61 == 0;
                      if ( v61 < 0 )
                        v61 = 0LL;
                      if ( v62 )
                        v61 = 1LL;
                      v11->expires = v61;
                    }
                  }
                  goto LABEL_77;
                }
                if ( *v18 == 34 )
                  v57 = v18 + 1;
                else
                  v57 = v18;
                v58 = curlx_strtoofft(v57, 0LL, 10LL, &v11->expires);
                if ( v58 == 1 )
                {
                  lineptr = v15;
                  v11->expires = 0x7FFFFFFFFFFFFFFFLL;
                }
                else
                {
                  if ( v58 == 2 )
                    goto LABEL_275;
                  if ( v58 )
                    goto LABEL_77;
                  expires = v11->expires;
                  if ( !expires )
                  {
LABEL_275:
                    lineptr = v15;
                    v11->expires = 1LL;
                  }
                  else
                  {
                    lineptr = v15;
                    if ( expires <= 0x7FFFFFFFFFFFFFFFLL - now )
                      v11->expires = expires + now;
                    else
                      v11->expires = 0x7FFFFFFFFFFFFFFFLL;
                  }
                }
                goto LABEL_78;
              }
LABEL_168:
              v69 = (v19 != 0) & ((unsigned int)curl_strnequal("domain", lineptr, 6LL) != 0);
              if ( !v69 )
                goto LABEL_77;
              if ( *v18 == 46 )
              {
                ++v18;
                --v19;
              }
              if ( v19 == 9 && (unsigned int)curl_strnequal(v18, "localhost", 9LL)
                || (v70 = memchr(v18, 46, v19)) != 0LL && v19 - (v70 - v18) > 1 )
              {
                v71 = domain;
                if ( !domain )
                {
                  is_ipnum = (unsigned __int8)Curl_host_is_ipnum(v18);
                  goto LABEL_184;
                }
              }
              else
              {
                v71 = (const char *)&unk_24C0;
                domain = (const char *)&unk_24C0;
              }
              v72 = v71;
              is_ipnum = (unsigned __int8)Curl_host_is_ipnum(v71);
              if ( is_ipnum )
              {
                if ( strncmp(v18, v72, v19) || strlen(v72) != v19 )
                  goto LABEL_178;
              }
              else
              {
                v74 = strlen(domain);
                if ( v19 > v74
                  || (v75 = &domain[v74 - v19], v115 = v74, !(unsigned int)curl_strnequal(v18, v75, v19))
                  || v19 != v115 && *(v75 - 1) != 46 )
                {
LABEL_178:
                  lineptr = v15;
                  badcookie = v69;
                  if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
                    Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v18);
                  goto LABEL_78;
                }
              }
LABEL_184:
              Curl_cfree(v11->domain);
              v76 = Curl_memdup(v18, v19 + 1);
              v11->domain = (char *)v76;
              if ( !v76 )
                goto LABEL_57;
              *(_BYTE *)(v76 + v19) = 0;
              if ( !v11->domain )
                goto LABEL_57;
              lineptr = v15;
              if ( !is_ipnum )
                v11->tailmatch = 1;
              goto LABEL_78;
            }
          }
          if ( (unsigned int)curl_strnequal("path", lineptr, v14) )
          {
            Curl_cfree(v11->path);
            v67 = Curl_memdup(v18, v19 + 1);
            v11->path = (char *)v67;
            if ( !v67 )
              goto LABEL_57;
            *(_BYTE *)(v67 + v19) = 0;
            if ( !v11->path )
              goto LABEL_57;
            Curl_cfree(v11->spath);
            v68 = sanitize_cookie_path(v11->path);
            v11->spath = v68;
            if ( !v68 )
              goto LABEL_57;
          }
          goto LABEL_77;
        }
        freecookie(v11);
        if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
        {
          v40 = 0LL;
          Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v14, v19);
          return v40;
        }
        return 0LL;
      }
    }
    while ( v14 );
    if ( *v15 == 61 )
      goto LABEL_18;
    if ( !v11->name )
    {
LABEL_57:
      v40 = 0LL;
      freecookie(v11);
      return v40;
    }
LABEL_77:
    lineptr = v15;
LABEL_78:
    v12 = *(unsigned __int8 *)v15;
    if ( *v15 )
    {
      while ( v12 == 32 || v12 == 9 )
      {
        v44 = *(unsigned __int8 *)++lineptr;
        v12 = v44;
        if ( !v44 )
          goto LABEL_85;
      }
LABEL_11:
      if ( v12 == 59 )
      {
LABEL_12:
        v12 = *(unsigned __int8 *)++lineptr;
        if ( !v12 )
          continue;
LABEL_6:
        if ( v12 == 32 || v12 == 9 )
          goto LABEL_12;
        v14 = strcspn(lineptr, ";\t\r\n=");
        if ( !v14 )
          goto LABEL_11;
        goto LABEL_14;
      }
    }
    break;
  }
LABEL_85:
  if ( badcookie )
    goto LABEL_57;
  if ( !v11->domain && domain != 0LL )
  {
    v104 = Curl_cstrdup(domain);
    v11->domain = (char *)v104;
    if ( !v104 )
      goto LABEL_57;
  }
  if ( !v11->path && path != 0LL )
  {
    v98 = strchr(path, 63);
    v99 = v98 ? (char *)Curl_memrchr(path, 47LL, v98 - path) : strrchr(path, 47);
    if ( v99 )
    {
      v100 = v99 - path;
      v101 = v100 + 1;
      v102 = (char *)Curl_cmalloc(v100 + 2);
      v11->path = v102;
      if ( !v102 )
        goto LABEL_57;
      memcpy(v102, path, v101);
      v11->path[v101] = 0;
      v103 = sanitize_cookie_path(v11->path);
      v11->spath = v103;
      if ( !v103 )
        goto LABEL_57;
    }
  }
  if ( !v11->name )
    goto LABEL_57;
  ++data->req.setcookies;
  prefix = v11->prefix;
  if ( (prefix & 1) != 0 )
  {
LABEL_98:
    if ( !v11->secure )
      goto LABEL_57;
    if ( (prefix & 2) != 0 )
      goto LABEL_100;
    goto LABEL_104;
  }
LABEL_55:
  if ( (prefix & 2) != 0 )
  {
    if ( !v11->secure )
      goto LABEL_57;
LABEL_100:
    v47 = v11->path;
    if ( !v47 || *v47 != 47 || v47[1] || v11->tailmatch )
      goto LABEL_57;
  }
LABEL_104:
  if ( !c->running && c->newsession && !v11->expires )
    goto LABEL_57;
  lastct = c->lastct;
  v11->livecookie = c->running;
  c->lastct = ++lastct;
  v11->creationtime = lastct;
  if ( !noexpirea )
    remove_expired(c);
  v49 = cookiehash(v11->domain);
  v50 = c->cookies[v49];
  if ( !v50 )
  {
    if ( c->running )
    {
      v40 = v11;
      if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
      {
LABEL_279:
        Curl_infof(
          data,
          "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
          "Added",
          v40->name,
          v40->value,
          v40->domain,
          v40->path,
          v40->expires);
        if ( v50 )
        {
LABEL_262:
          v50->next = v40;
          goto LABEL_263;
        }
      }
    }
    else
    {
      v40 = v11;
    }
    c->cookies[v49] = v40;
LABEL_263:
    ++c->numcookies;
    v96 = v40->expires;
    if ( v96 )
      goto LABEL_259;
    return v40;
  }
  livecookie = 0;
  v40 = 0LL;
  v52 = 0LL;
  while ( 1 )
  {
    if ( !(unsigned int)curl_strequal(v50->name, v11->name) )
      goto LABEL_119;
    v53 = v50->domain;
    v54 = v11->domain;
    if ( v53 )
    {
      if ( !v54 || !(unsigned int)curl_strequal(v53, v54) )
        goto LABEL_119;
    }
    else if ( v54 )
    {
      goto LABEL_119;
    }
    spath = v50->spath;
    if ( spath )
    {
      v56 = v11->spath;
      if ( v56 )
      {
        if ( v50->secure && !v11->secure && !securea )
        {
          v85 = strchr(spath + 1, 47);
          v86 = v85 ? v85 - spath : strlen(spath);
          if ( (unsigned int)curl_strnequal(spath, v56, v86) )
          {
            if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
              Curl_infof(
                data,
                "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                v11->name,
                v11->domain);
            goto LABEL_57;
          }
        }
      }
    }
LABEL_119:
    if ( v52 || !(unsigned int)curl_strequal(v50->name, v11->name) )
      goto LABEL_120;
    v87 = v50->domain;
    v88 = v11->domain;
    if ( v87 )
    {
      if ( !v88 || !(unsigned int)curl_strequal(v87, v88) || v50->tailmatch != v11->tailmatch )
      {
LABEL_241:
        if ( !livecookie )
          goto LABEL_120;
      }
    }
    else if ( v88 )
    {
      goto LABEL_241;
    }
    v89 = v50->spath;
    v90 = v11->spath;
    if ( v89 )
    {
      if ( !v90 )
      {
        v52 = 0LL;
        livecookie = 0;
        goto LABEL_120;
      }
      if ( !(unsigned int)curl_strequal(v89, v90) )
        goto LABEL_265;
      v90 = v11->spath;
      v89 = v50->spath;
    }
    if ( (v89 == 0LL) != (v90 == 0LL) )
    {
LABEL_265:
      livecookie = 0;
      goto LABEL_120;
    }
    livecookie = v11->livecookie;
    if ( v11->livecookie )
    {
      v40 = v50;
      v52 = v11;
    }
    else
    {
      if ( v50->livecookie )
        goto LABEL_57;
      v40 = v50;
      v52 = v11;
      livecookie = 1;
    }
LABEL_120:
    if ( !v50->next )
      break;
    v50 = v50->next;
  }
  if ( v52 )
  {
    creationtime = v40->creationtime;
    v92 = v40->name;
    v52->next = v40->next;
    v52->creationtime = creationtime;
    Curl_cfree(v92);
    Curl_cfree(v40->value);
    Curl_cfree(v40->domain);
    Curl_cfree(v40->path);
    Curl_cfree(v40->spath);
    v93 = *(_OWORD *)&v52->value;
    v94 = (void (__fastcall *)(Cookie *))Curl_cfree;
    *(_OWORD *)&v40->next = *(_OWORD *)&v52->next;
    *(_OWORD *)&v40->value = v93;
    v95 = *(_OWORD *)&v52->expires;
    *(_OWORD *)&v40->spath = *(_OWORD *)&v52->spath;
    *(_OWORD *)&v40->expires = v95;
    *(_QWORD *)&v40->prefix = *(_QWORD *)&v52->prefix;
    v94(v52);
  }
  else
  {
    v40 = v11;
  }
  if ( c->running && (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
  {
    if ( !livecookie )
      goto LABEL_279;
    Curl_infof(
      data,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
      "Replaced",
      v40->name,
      v40->value,
      v40->domain,
      v40->path,
      v40->expires);
  }
  else if ( !livecookie )
  {
    goto LABEL_262;
  }
  v96 = v40->expires;
  if ( !v96 )
    return v40;
LABEL_259:
  if ( v96 < c->next_expiration )
    c->next_expiration = v96;
  return v40;
}
