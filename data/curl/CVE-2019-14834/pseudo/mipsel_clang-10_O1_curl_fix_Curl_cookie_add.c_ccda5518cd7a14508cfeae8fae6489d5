Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  Cookie *v16; // $s6
  time_t v17; // $v0
  int v18; // $v0
  int v19; // $s3
  char *v20; // $s7
  int v21; // $s0
  char *i; // $s5
  int v23; // $s2
  size_t v24; // $v0
  size_t v25; // $s0
  size_t v26; // $s4
  int v27; // $v0
  int v28; // $v0
  const char *v29; // $s7
  size_t v30; // $s6
  size_t v31; // $v0
  int v32; // $v1
  int v33; // $v1
  unsigned __int8 *v34; // $s0
  unsigned __int8 *v35; // $v0
  int v36; // $v1
  int v37; // $s2
  int v38; // $v0
  char *v39; // $v0
  const char *v40; // $s2
  int v41; // $s2
  int v42; // $v0
  int v43; // $v0
  int v44; // $v0
  size_t v45; // $s4
  int v46; // $v0
  const char *v47; // $a0
  const char *v48; // $s0
  const char *v49; // $s2
  int v50; // $v0
  int v51; // $s5
  _BOOL4 v52; // $v1
  int v53; // $v0
  int v54; // $s2
  int v55; // $v0
  int v56; // $v0
  unsigned int v57; // $v1
  _BOOL4 v58; // $a1
  char *v59; // $v0
  char *v60; // $v0
  int v61; // $s5
  const char *v62; // $s4
  int v63; // $v0
  char *v64; // $v0
  char *v65; // $v0
  int v66; // $s0
  char *v67; // $v0
  size_t v68; // $s0
  char *v69; // $v0
  int v70; // $at
  Cookie **v71; // $s2
  Cookie *next; // $v0
  Cookie *v73; // $s0
  Cookie *v74; // $s7
  int v75; // $s6
  Cookie *v76; // $s3
  const char *v77; // $s4
  char *v78; // $s5
  char *v79; // $v0
  size_t v80; // $a2
  int v81; // $v0
  int v82; // $v0
  const char *v83; // $a0
  int expires_high; // $at
  int v85; // $v0
  int creationtime; // $v1
  int v87; // $a0
  char *v88; // $a1
  char *spath; // $a2
  char *v90; // $a3
  int expires; // $t0
  const char *v92; // $a2
  __int64 v93; // $v0
  int next_expiration_high; // $at
  _BOOL4 v95; // $a1
  int v97; // [sp+34h] [-CCh]
  unsigned int *v98; // [sp+3Ch] [-C4h]
  char **v99; // [sp+40h] [-C0h]
  char **v100; // [sp+44h] [-BCh]
  char **v101; // [sp+4Ch] [-B4h]
  const char *v103; // [sp+54h] [-ACh]
  int v104; // [sp+58h] [-A8h]
  char v105; // [sp+60h] [-A0h]
  int v106; // [sp+68h] [-98h]
  char **v107; // [sp+6Ch] [-94h]
  Curl_easy *v108; // [sp+70h] [-90h]
  Cookie *v109; // [sp+7Ch] [-84h]
  int v110[32]; // [sp+80h] [-80h] BYREF

  v16 = 0;
  v17 = time(0u);
  if ( data->req.setcookies >= 0x32u )
    return v16;
  v106 = v17;
  v18 = Curl_ccalloc(1, 48);
  if ( !v18 )
    return v16;
  v19 = v18;
  v20 = (char *)lineptr;
  v108 = data;
  v109 = (Cookie *)v18;
  if ( !httpheader )
  {
    v110[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      *(_BYTE *)(v19 + 35) = 1;
      v20 = (char *)(lineptr + 10);
    }
    if ( *v20 != 35 )
    {
      v59 = strchr(v20, 13);
      if ( v59 )
        *v59 = 0;
      v60 = strchr(v20, 10);
      if ( v60 )
        *v60 = 0;
      if ( (int)strtok_r(v20, "\t", (char **)v110) )
        JUMPOUT(0x1098);
LABEL_236:
      freecookie(v109);
      return 0;
    }
LABEL_5:
    Curl_cfree(v19);
    return 0;
  }
  if ( strlen(lineptr) >= 0x1389 )
    goto LABEL_5;
  v104 = noexpire;
  v97 = 0x7FFFFFFF - (v106 >> 31);
  v99 = (char **)(v19 + 0x14);
  v98 = (unsigned int *)(v19 + 0x18);
  v100 = (char **)(v19 + 0xC);
  v107 = (char **)(v19 + 4);
  v105 = 0;
  v101 = (char **)(v19 + 8);
  do
  {
    for ( i = v20; ; ++i )
    {
      v23 = (unsigned __int8)*i;
      if ( v23 != 32 && v23 != 9 )
        break;
    }
    v24 = strcspn(i, ";\t\r\n=");
    if ( !v24 )
    {
      v20 = i;
      goto LABEL_27;
    }
    v25 = v24;
    v20 = &i[v24];
    v26 = v24;
    while ( 1 )
    {
      v27 = (unsigned __int8)i[v26 - 1];
      if ( v27 != 32 && v27 != 9 )
        break;
      if ( !--v26 )
      {
        v26 = 0;
        break;
      }
    }
    if ( *v20 == 61 )
    {
      v29 = &i[v25 + 1];
      v30 = strcspn(v29, ";\r\n");
      v31 = v25 + v30;
      if ( v30 )
      {
        while ( 1 )
        {
          v32 = (unsigned __int8)i[v25 + v30];
          if ( v32 != 32 && v32 != 9 )
            break;
          if ( !--v30 )
          {
            v30 = 0;
            break;
          }
        }
      }
      v35 = (unsigned __int8 *)&i[v31];
      if ( v30 )
      {
        v34 = (unsigned __int8 *)&i[v25 + 1 + v30];
        do
        {
          v36 = *(unsigned __int8 *)v29;
          if ( v36 != 32 && v36 != 9 )
          {
            v34 = (unsigned __int8 *)v29;
            goto LABEL_54;
          }
          --v30;
          ++v29;
        }
        while ( v30 );
        v30 = 0;
      }
      else
      {
        v34 = (unsigned __int8 *)&i[v25 + 1];
      }
LABEL_54:
      v20 = (char *)(v35 + 1);
      if ( (int)memchr(v34, 9, v30) )
      {
        freecookie(v109);
        v21 = 1;
        if ( v108 && (*((_BYTE *)&v108->set + 1337) & 0x20) != 0 )
          goto LABEL_57;
        goto LABEL_13;
      }
      v33 = 1;
      if ( v26 >= 0xFFF )
        goto LABEL_66;
    }
    else
    {
      v30 = 0;
      v33 = 0;
      v34 = 0;
      if ( v26 >= 0xFFF )
        goto LABEL_66;
    }
    if ( v30 < 0xFFF && v30 + v26 < 0x1001 )
    {
      if ( v23 == 95 && v26 >= 7 && i[1] == 95 )
      {
        v37 = v33;
        if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("__Secure-", i, 9) )
        {
          v109->prefix |= 1u;
          v33 = v37;
        }
        else
        {
          v38 = ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("__Host-", i, 7);
          v33 = v37;
          if ( v38 )
            v109->prefix |= 2u;
        }
      }
      if ( !*v107 )
      {
        v103 = (const char *)v34;
        v21 = 6;
        if ( v33 )
        {
          strstore(v107, i, v26);
          strstore(v101, v103, v30);
          v40 = *v107;
          if ( *v107 )
          {
            if ( *v101 )
            {
              if ( !((int (*)(void))invalid_octets)() && !invalid_octets(v40) )
                goto LABEL_12;
              if ( v108 )
              {
                if ( (*((_BYTE *)&v108->set + 1337) & 0x20) != 0 )
                  ((void (*)(void))Curl_infof)();
                v105 = 1;
              }
              else
              {
                v105 = 1;
              }
            }
            else
            {
              v105 = 1;
            }
          }
          else
          {
            v105 = 1;
          }
        }
        else
        {
          v105 = 1;
        }
        goto LABEL_13;
      }
      if ( !v30 )
      {
        if ( v26 == 8 )
        {
          v54 = v33;
          v53 = ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("httponly", i, 8);
          v33 = v54;
          if ( v53 )
          {
            v109->httponly = 1;
            goto LABEL_12;
          }
        }
        else if ( v26 == 6 )
        {
          v41 = v33;
          if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("secure", i, 6) )
          {
            if ( !secure && c->running )
            {
              v21 = 6;
              v105 = 1;
              goto LABEL_13;
            }
            v109->secure = 1;
            goto LABEL_12;
          }
          v33 = v41;
        }
        if ( !v33 )
          goto LABEL_12;
      }
      if ( v26 == 7 )
      {
        if ( !((int (__fastcall *)(const char *, char *, int))curl_strnequal)("version", i, 7) )
        {
          if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("max-age", i, 7) )
          {
            if ( *v34 == 0x22 )
              ++v34;
            v42 = ((int (__fastcall *)(unsigned __int8 *, _DWORD, int, unsigned int *))curlx_strtoofft)(v34, 0, 10, v98);
            if ( v42 )
            {
              if ( v42 == 2 )
              {
                *v98 = 1;
                *(_DWORD *)(v19 + 28) = 0;
              }
              else if ( v42 == 1 )
              {
                *v98 = -1;
                *(_DWORD *)(v19 + 28) = 0x7FFFFFFF;
              }
            }
            else
            {
              v56 = *(_DWORD *)(v19 + 28);
              v57 = *v98;
              if ( *(_QWORD *)v98 )
              {
                v58 = v97 >= v56;
                if ( v97 == v56 )
                  v58 = ~v106 >= v57;
                if ( v58 )
                {
                  *v98 = v57 + v106;
                  *(_DWORD *)(v19 + 28) = v56 + (v106 >> 31) + __CFADD__(v57, v106);
                }
                else
                {
                  *v98 = -1;
                  *(_DWORD *)(v19 + 28) = 0x7FFFFFFF;
                }
              }
              else
              {
                *v98 = 1;
                *(_DWORD *)(v19 + 28) = 0;
              }
            }
          }
          else if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("expires", i, 7)
                 && v30 < 0x80
                 && !v109->expires )
          {
            memcpy(v110, v34, v30);
            *((_BYTE *)v110 + v30) = 0;
            v55 = ((int (__fastcall *)(int *))Curl_getdate_capped)(v110);
            v109->expires = v55;
            if ( v55 )
            {
              if ( v55 < 0 )
              {
                HIDWORD(v109->expires) = 0;
                LODWORD(v109->expires) = 0;
              }
            }
            else
            {
              LODWORD(v109->expires) = 1;
              HIDWORD(v109->expires) = 0;
            }
          }
        }
        goto LABEL_12;
      }
      if ( v26 != 6 )
      {
        if ( v26 != 4 || !((int (__fastcall *)(const char *, char *, int))curl_strnequal)("path", i, 4) )
          goto LABEL_12;
        strstore(v100, (const char *)v34, v30);
        v21 = 6;
        if ( *v100 )
        {
          Curl_cfree(v109->spath);
          v39 = sanitize_cookie_path(v109->path);
          v109->spath = v39;
          if ( v39 )
            goto LABEL_12;
          v105 = 1;
        }
        else
        {
          v105 = 1;
        }
        goto LABEL_13;
      }
      v43 = ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("domain", i, 6);
      if ( !v30 || !v43 )
        goto LABEL_12;
      v44 = *v34;
      if ( v44 == 0x2E )
        ++v34;
      v45 = (__PAIR64__(v30, v44 ^ 0x2Eu) - 1) >> 32;
      v46 = ((int (__fastcall *)(unsigned __int8 *, size_t))bad_domain)(v34, v45);
      v47 = (const char *)v34;
      v48 = domain;
      if ( v46 )
        v48 = ":";
      v49 = v47;
      if ( v48 )
        v47 = v48;
      v50 = ((int (__fastcall *)(const char *))Curl_host_is_ipnum)(v47);
      v51 = v50;
      domain = v48;
      if ( v48 )
      {
        if ( !v50 )
          goto LABEL_119;
        if ( strncmp(v49, v48, v45) || v45 != strlen(v48) )
        {
          if ( v51 )
            goto LABEL_140;
LABEL_119:
          if ( !((int (__fastcall *)(const char *, size_t, const char *))cookie_tailmatch)(v49, v45, v48) )
          {
LABEL_140:
            v105 = 1;
            if ( v108 && (*((_BYTE *)&v108->set + 1337) & 0x20) != 0 )
              ((void (*)(void))Curl_infof)();
            goto LABEL_12;
          }
        }
      }
      strstore(v99, v49, v45);
      v52 = *v99 == 0;
      if ( v51 | v52 )
      {
        v21 = 6;
        if ( *v99 )
          v21 = 0;
        v105 |= v52;
        if ( !v21 )
          goto LABEL_12;
        goto LABEL_13;
      }
      v109->tailmatch = 1;
LABEL_12:
      v21 = 0;
      goto LABEL_13;
    }
LABEL_66:
    freecookie(v109);
    v21 = 1;
    if ( v108 && (*((_BYTE *)&v108->set + 1337) & 0x20) != 0 )
LABEL_57:
      ((void (*)(void))Curl_infof)();
LABEL_13:
    if ( v21 )
      break;
LABEL_27:
    while ( 1 )
    {
      v28 = (unsigned __int8)*v20;
      if ( v28 != 32 && v28 != 9 )
        break;
      ++v20;
    }
    v21 = 6;
    if ( v28 == 0x3B )
      v21 = 0;
    if ( v28 == 0x3B )
      ++v20;
  }
  while ( !v21 );
  v16 = 0;
  if ( v21 != 6 )
    return v16;
  if ( (v105 & 1) != 0 )
  {
    v61 = v104;
    v62 = path;
  }
  else
  {
    v62 = path;
    if ( domain )
    {
      v61 = v104;
      if ( !v109->domain )
      {
        v63 = Curl_cstrdup(domain);
        v109->domain = (char *)v63;
        v105 |= v63 == 0;
      }
    }
    else
    {
      v61 = v104;
    }
  }
  if ( (v105 & 1) != 0
    || !v62
    || v109->path
    || ((v64 = strchr(v62, 63)) == 0 ? (v65 = strrchr(v62, 47)) : (v65 = (char *)((int (__fastcall *)(const char *, int, int))Curl_memrchr)(
                                                                                   v62,
                                                                                   47,
                                                                                   v64 - v62)),
        !v65) )
  {
LABEL_170:
    if ( (v105 & 1) != 0 )
      goto LABEL_246;
    if ( !v109->name )
      goto LABEL_246;
    ++v108->req.setcookies;
    if ( (v109->prefix & 1) != 0 && !v109->secure )
      goto LABEL_246;
    if ( (v109->prefix & 2) != 0 )
    {
      if ( !v109->secure )
        goto LABEL_246;
      v83 = v109->path;
      if ( !v83 || strcmp(v83, "/") || v109->tailmatch )
        goto LABEL_246;
    }
    if ( !c->running && c->newsession && !v109->expires )
      goto LABEL_246;
    v109->livecookie = c->running;
    v70 = c->lastct + 1;
    c->lastct = v70;
    v109->creationtime = v70;
    if ( !v61 )
      remove_expired(c);
    v71 = &c->cookies[cookiehash(v109->domain)];
    next = *v71;
    if ( !*v71 )
    {
      LOBYTE(v75) = 0;
      v74 = 0;
      v73 = 0;
      v76 = 0;
LABEL_248:
      if ( v73 )
      {
        v73->next = v74->next;
        v73->creationtime = v74->creationtime;
        Curl_cfree(v74->name);
        Curl_cfree(v74->value);
        Curl_cfree(v74->domain);
        Curl_cfree(v74->path);
        Curl_cfree(v74->spath);
        expires_high = HIDWORD(v73->expires);
        v85 = *(_DWORD *)&v73->tailmatch;
        creationtime = v73->creationtime;
        v87 = *(_DWORD *)&v73->prefix;
        v88 = v73->path;
        spath = v73->spath;
        v90 = v73->domain;
        expires = v73->expires;
        *((_DWORD *)&v74->prefix + 1) = *((_DWORD *)&v73->prefix + 1);
        *(_DWORD *)&v74->prefix = v87;
        v74->creationtime = creationtime;
        *(_DWORD *)&v74->tailmatch = v85;
        HIDWORD(v74->expires) = expires_high;
        LODWORD(v74->expires) = expires;
        v74->domain = v90;
        v74->spath = spath;
        v74->path = v88;
        v74->value = v73->value;
        v74->name = v73->name;
        v74->next = v73->next;
        Curl_cfree(v73);
        v109 = v74;
      }
      if ( v108 && c->running && (*((_BYTE *)&v108->set + 1337) & 0x20) != 0 )
      {
        v92 = "Added";
        if ( (v75 & 1) != 0 )
          v92 = "Replaced";
        Curl_infof(
          v108,
          "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
          v92,
          v109->name,
          v109->value,
          v109->domain,
          v109->path,
          v109->expires);
      }
      if ( (v75 & 1) == 0 )
      {
        if ( v76 )
          v76->next = v109;
        else
          *v71 = v109;
        ++c->numcookies;
      }
      v16 = v109;
      LODWORD(v93) = HIDWORD(v109->expires);
      HIDWORD(v93) = v109->expires;
      if ( v93 )
      {
        next_expiration_high = HIDWORD(c->next_expiration);
        v95 = (int)v93 >= next_expiration_high;
        if ( (unsigned int)v93 == next_expiration_high )
          v95 = HIDWORD(v93) >= LODWORD(c->next_expiration);
        if ( !v95 )
        {
          LODWORD(c->next_expiration) = HIDWORD(v93);
          HIDWORD(c->next_expiration) = v93;
        }
      }
      return v16;
    }
    v73 = 0;
    v74 = 0;
    v75 = 0;
    while ( 1 )
    {
      v76 = next;
      if ( !((int (__fastcall *)(char *, char *))curl_strequal)(next->name, v109->name) )
        goto LABEL_219;
      if ( v76->domain )
      {
        if ( !v109->domain || !((int (*)(void))curl_strequal)() )
          goto LABEL_217;
      }
      else if ( v109->domain )
      {
        goto LABEL_217;
      }
      v77 = v76->spath;
      if ( !v77 )
        goto LABEL_217;
      v78 = v109->spath;
      if ( !v78 || !v76->secure || v109->secure || secure )
        goto LABEL_217;
      v79 = strchr(v77 + 1, 47);
      v80 = v79 ? v79 - v77 : strlen(v77);
      if ( ((int (__fastcall *)(const char *, char *, size_t))curl_strnequal)(v77, v78, v80) )
      {
        if ( v108 && (*((_BYTE *)&v108->set + 1337) & 0x20) != 0 )
          ((void (*)(void))Curl_infof)();
        freecookie(v109);
        v81 = 1;
      }
      else
      {
        v81 = 0;
      }
      if ( !v81 )
LABEL_217:
        v81 = 0;
      if ( v81 )
        return 0;
LABEL_219:
      if ( !v73 )
      {
        if ( ((int (__fastcall *)(char *, char *))curl_strequal)(v76->name, v109->name) )
        {
          if ( v76->domain )
          {
            if ( v109->domain && ((int (*)(void))curl_strequal)() )
              v75 |= v76->tailmatch == v109->tailmatch;
          }
          else
          {
            v75 |= v109->domain == 0;
          }
          if ( (v75 & 1) == 0 )
            goto LABEL_233;
          if ( v76->spath && v109->spath && !((int (*)(void))curl_strequal)() )
          {
            v75 = 0;
            v82 = 0;
          }
          else
          {
            v75 &= (v76->spath != 0) ^ (v109->spath == 0);
LABEL_233:
            v82 = v75 & 1;
            if ( (v75 & 1) != 0 && !v109->livecookie && v76->livecookie )
              goto LABEL_236;
          }
          v73 = 0;
          if ( v82 )
            v73 = v109;
          if ( v82 )
            v74 = v76;
          goto LABEL_194;
        }
        v73 = 0;
      }
LABEL_194:
      next = v76->next;
      if ( !v76->next )
        goto LABEL_248;
    }
  }
  v66 = v65 - v62;
  v67 = (char *)Curl_cmalloc(v65 - v62 + 2);
  v109->path = v67;
  if ( v67 )
  {
    v68 = v66 + 1;
    memcpy(v67, v62, v68);
    v109->path[v68] = 0;
    v69 = sanitize_cookie_path(v109->path);
    v109->spath = v69;
    v105 |= v69 == 0;
    goto LABEL_170;
  }
LABEL_246:
  freecookie(v109);
  return v16;
}
