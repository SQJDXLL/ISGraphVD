Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  Cookie *v12; // r12
  time_t v13; // rax
  __int64 v14; // rax
  __int64 v15; // r15
  const char *v16; // rbp
  char *i; // rbx
  char v18; // r15
  size_t v19; // rax
  size_t v20; // rcx
  unsigned __int64 v21; // r12
  char v22; // al
  size_t v23; // r14
  size_t v24; // rax
  size_t v25; // rdx
  size_t v26; // r13
  size_t v27; // r14
  const char *v28; // rax
  char v29; // cl
  const char *v30; // rbp
  __int64 j; // rcx
  char v32; // dl
  size_t v33; // r14
  char v34; // bp
  __int64 v35; // rax
  const char *v36; // rax
  char *v37; // rbx
  size_t v38; // rax
  size_t v39; // rbp
  const char *v40; // rax
  const char *v41; // rbx
  char v42; // cl
  const char *v43; // rdi
  int v44; // eax
  int v45; // eax
  const char *v46; // rbx
  size_t v47; // r14
  _BYTE *v48; // rax
  const char *v49; // rbp
  char is_ipnum; // r12
  const char *v51; // rdi
  size_t v52; // rax
  size_t v53; // r12
  const char *v54; // r15
  __int64 v55; // rax
  __int64 v56; // rax
  __int64 v57; // rax
  __int64 v58; // rax
  char *v59; // rax
  char *v60; // rax
  char *v61; // rax
  const char *v62; // rbx
  int v63; // r12d
  __int64 (__fastcall **v64)(const char *); // rbp
  char v65; // r14
  __int64 v66; // rax
  __int64 v67; // rax
  const char *v68; // rax
  char *v69; // rbx
  size_t v70; // rax
  size_t v71; // rbp
  __int64 v72; // rax
  __int64 v73; // rax
  __int64 (__fastcall **v74)(const char *); // r15
  __int64 v75; // rbp
  __int64 v76; // rax
  char v77; // al
  char *v78; // rax
  __int64 v79; // rax
  _BOOL4 v80; // r12d
  char v81; // al
  char v82; // al
  CookieInfo *v83; // rcx
  char v84; // bp
  const char *v85; // rbx
  __int64 v86; // rax
  char *v87; // rax
  char *v88; // rax
  unsigned __int64 v89; // rdx
  char v90; // r14
  signed __int64 v91; // r12
  void *v92; // rax
  size_t v93; // r12
  const char *v94; // rax
  char *v95; // rbx
  size_t v96; // rax
  size_t v97; // rbp
  bool running; // al
  int v99; // eax
  time_t v100; // rax
  CookieInfo *v101; // rcx
  time_t v102; // r15
  curl_off_t next_expiration; // rax
  size_t v104; // rax
  CookieInfo *v105; // rcx
  size_t v106; // r15
  Cookie *next; // rax
  __int64 v108; // r15
  Cookie *v109; // rbx
  char v110; // r14
  __int64 v111; // rdi
  const char *v112; // rdi
  int v113; // eax
  _QWORD *v114; // rdi
  Cookie *v116; // rbp
  char *v117; // rdi
  __int64 v118; // rsi
  const char *spath; // r13
  __int64 v120; // r12
  char *v121; // rax
  size_t v122; // rax
  char *v123; // rdi
  __int64 v124; // rsi
  bool v125; // zf
  char *v126; // rdi
  __int64 v127; // rsi
  _QWORD *v128; // rbp
  __int128 v129; // xmm0
  __int128 v130; // xmm1
  __int128 v131; // xmm2
  char *v132; // rax
  Cookie *v133; // rbx
  Cookie **v134; // r13
  Cookie *v135; // r14
  Cookie *v136; // rbp
  curl_off_t expires; // rax
  Cookie **p_next; // rax
  const char *v139; // rdx
  Cookie **v140; // rax
  curl_off_t v141; // rax
  __int64 v142; // [rsp+8h] [rbp-100h]
  const char *s; // [rsp+10h] [rbp-F8h]
  void *sa; // [rsp+10h] [rbp-F8h]
  void *sb; // [rsp+10h] [rbp-F8h]
  char *sc; // [rsp+10h] [rbp-F8h]
  const char *v149; // [rsp+28h] [rbp-E0h]
  char v150; // [rsp+30h] [rbp-D8h]
  bool v151; // [rsp+34h] [rbp-D4h]
  __int64 *v152; // [rsp+38h] [rbp-D0h]
  time_t v153; // [rsp+40h] [rbp-C8h]
  __int64 v154; // [rsp+48h] [rbp-C0h]
  char *dest[23]; // [rsp+50h] [rbp-B8h] BYREF

  v12 = 0LL;
  v13 = time(0LL);
  if ( data->req.setcookies > 0x31u )
    return v12;
  v153 = v13;
  v149 = domain;
  v151 = noexpire;
  v14 = Curl_ccalloc(1LL, 72LL);
  if ( !v14 )
    return 0LL;
  v15 = v14;
  v142 = v14;
  if ( !httpheader )
  {
    dest[0] = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 10;
      *(_BYTE *)(v15 + 59) = 1;
      if ( *lineptr == 35 )
        goto LABEL_136;
    }
    else if ( *lineptr == 35 )
    {
      goto LABEL_136;
    }
    v59 = strchr(lineptr, 13);
    if ( v59 )
      *v59 = 0;
    v60 = strchr(lineptr, 10);
    if ( v60 )
      *v60 = 0;
    v61 = strtok_r(lineptr, "\t", dest);
    if ( v61 )
    {
      v62 = v61;
      sa = (void *)(v15 + 48);
      v63 = 0;
      v64 = (__int64 (__fastcall **)(const char *))&Curl_cstrdup;
      v65 = 0;
      do
      {
        switch ( v63 )
        {
          case 0:
            if ( *v62 == 46 )
              ++v62;
            v66 = (*v64)(v62);
            *(_QWORD *)(v142 + 40) = v66;
            if ( !v66 )
              v65 = 1;
            v63 = 0;
            break;
          case 1:
            *(_BYTE *)(v142 + 56) = (unsigned int)curl_strequal(v62, "TRUE") != 0;
            v63 = 1;
            break;
          case 2:
            if ( !strcmp("TRUE", v62) || !strcmp("FALSE", v62) )
            {
              v74 = v64;
              v75 = (*v64)("/");
              *(_QWORD *)(v142 + 24) = v75;
              v76 = (*v74)("/");
              if ( !v76 )
                v65 = 1;
              v125 = v75 == 0;
              v64 = v74;
              *(_QWORD *)(v142 + 32) = v76;
              if ( v125 )
                v65 = 1;
              goto LABEL_173;
            }
            v67 = (*v64)(v62);
            *(_QWORD *)(v142 + 24) = v67;
            v63 = 2;
            if ( !v67 )
              goto LABEL_177;
            v68 = (const char *)(*v64)((const char *)v67);
            if ( v68 )
            {
              v69 = (char *)v68;
              v70 = strlen(v68);
              v71 = v70;
              if ( *v69 == 34 )
              {
                memmove(v69, v69 + 1, v70);
                --v71;
              }
              if ( v71 )
              {
                if ( v69[v71 - 1] == 34 )
                  v69[--v71] = 0;
              }
              else
              {
                v71 = 0LL;
              }
              if ( *v69 == 47 )
              {
                if ( v71 && v69[v71 - 1] == 47 )
                  v69[v71 - 1] = 0;
              }
              else
              {
                Curl_cfree(v69);
                v69 = (char *)Curl_strndup("/", 1LL);
              }
              v64 = (__int64 (__fastcall **)(const char *))&Curl_cstrdup;
            }
            else
            {
              v69 = 0LL;
            }
            *(_QWORD *)(v142 + 32) = v69;
            v77 = 1;
            if ( v69 )
              v77 = v65;
            v65 = v77;
            break;
          case 3:
LABEL_173:
            *(_BYTE *)(v142 + 57) = 0;
            v63 = 3;
            if ( (unsigned int)curl_strequal(v62, "TRUE") )
            {
              if ( !secure && !c->running )
                goto LABEL_177;
              *(_BYTE *)(v142 + 57) = 1;
            }
            break;
          case 4:
            if ( (unsigned int)curlx_strtoofft(v62, 0LL, 10LL, sa) )
              v65 = 1;
            v63 = 4;
            break;
          case 5:
            v72 = (*v64)(v62);
            *(_QWORD *)(v142 + 8) = v72;
            v63 = 5;
            if ( v72 )
            {
              if ( (unsigned int)curl_strnequal("__Secure-", v72, 9LL) )
              {
                *(_BYTE *)(v142 + 64) |= 1u;
              }
              else if ( (unsigned int)curl_strnequal("__Host-", *(_QWORD *)(v142 + 8), 7LL) )
              {
                *(_BYTE *)(v142 + 64) |= 2u;
              }
            }
            else
            {
LABEL_177:
              v65 = 1;
            }
            break;
          case 6:
            v73 = (*v64)(v62);
            *(_QWORD *)(v142 + 16) = v73;
            if ( !v73 )
              v65 = 1;
            v63 = 6;
            break;
          default:
            break;
        }
        v78 = strtok_r(0LL, "\t", dest);
        ++v63;
        if ( (v65 & 1) != 0 )
          break;
        v62 = v78;
      }
      while ( v78 );
      if ( v63 == 6 )
      {
        v79 = (*v64)((const char *)&L_str_22);
        v15 = v142;
        *(_QWORD *)(v142 + 16) = v79;
        v125 = v79 == 0;
        v80 = v79 == 0;
        v81 = v65;
        v65 = 1;
        if ( !v125 )
          v65 = v81;
        v63 = v80 ^ 7;
      }
      else
      {
        v15 = v142;
      }
      if ( (v65 & 1) == 0 && v63 == 7 )
      {
        v82 = *(_BYTE *)(v15 + 64);
        v83 = c;
        if ( (v82 & 1) != 0 )
          goto LABEL_242;
        goto LABEL_243;
      }
    }
    goto LABEL_258;
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_136:
    Curl_cfree(v15);
    return 0LL;
  }
  v152 = (__int64 *)(v15 + 48);
  v154 = 0x7FFFFFFFFFFFFFFFLL - v153;
  v150 = 0;
  do
  {
    v16 = lineptr + 1;
    for ( i = lineptr; ; ++i )
    {
      v18 = *i;
      if ( *i != 32 && v18 != 9 )
        break;
      ++v16;
    }
    v19 = strcspn(i, ";\t\r\n=");
    if ( !v19 )
    {
      lineptr = i;
      v15 = v142;
      goto LABEL_60;
    }
    v20 = v19;
    lineptr = &i[v19];
    v21 = v19;
    do
    {
      v22 = i[v21 - 1];
      if ( v22 != 32 && v22 != 9 )
      {
        if ( *lineptr != 61 )
          goto LABEL_28;
LABEL_16:
        s = &i[v20 + 1];
        v23 = v20;
        v24 = strcspn(s, ";\r\n");
        v25 = v23;
        v26 = v23 + v24;
        if ( v24 )
        {
          v27 = v24;
          v28 = &v16[v26];
          while ( 1 )
          {
            v29 = *(v28 - 1);
            if ( v29 != 32 && v29 != 9 )
              break;
            --v27;
            --v28;
            if ( !v27 )
              goto LABEL_29;
          }
          v30 = &v16[v25];
          for ( j = 0LL; j != v27; ++j )
          {
            v32 = v30[j];
            if ( v32 != 32 && v32 != 9 )
            {
              v33 = v27 - j;
              s = &v30[j];
              goto LABEL_30;
            }
          }
          v33 = 0LL;
          s = v28;
        }
        else
        {
LABEL_29:
          v33 = 0LL;
        }
LABEL_30:
        if ( !memchr(s, 9, v33) )
        {
          lineptr = &i[v26 + 1];
          v34 = 1;
          goto LABEL_32;
        }
        Curl_cfree(*(_QWORD *)(v142 + 40));
        Curl_cfree(*(_QWORD *)(v142 + 24));
        Curl_cfree(*(_QWORD *)(v142 + 32));
        Curl_cfree(*(_QWORD *)(v142 + 8));
        Curl_cfree(*(_QWORD *)(v142 + 16));
        Curl_cfree(v142);
        if ( (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
        {
          v12 = 0LL;
          Curl_infof(data, "cookie contains TAB, dropping");
          return v12;
        }
        return 0LL;
      }
      --v21;
    }
    while ( v21 );
    v21 = 0LL;
    if ( *lineptr == 61 )
      goto LABEL_16;
LABEL_28:
    v33 = 0LL;
    v34 = 0;
    s = 0LL;
LABEL_32:
    if ( v21 > 0xFFE || v33 > 0xFFE || v33 + v21 >= 0x1001 )
    {
      Curl_cfree(*(_QWORD *)(v142 + 40));
      Curl_cfree(*(_QWORD *)(v142 + 24));
      Curl_cfree(*(_QWORD *)(v142 + 32));
      Curl_cfree(*(_QWORD *)(v142 + 8));
      Curl_cfree(*(_QWORD *)(v142 + 16));
      Curl_cfree(v142);
      if ( (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
      {
        v89 = v21;
        v12 = 0LL;
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v89, v33);
        return v12;
      }
      return 0LL;
    }
    v125 = v18 == 95;
    v15 = v142;
    if ( v125 && v21 >= 7 && i[1] == 95 )
    {
      if ( (unsigned int)curl_strnequal("__Secure-", i, 9LL) )
      {
        *(_BYTE *)(v142 + 64) |= 1u;
      }
      else if ( (unsigned int)curl_strnequal("__Host-", i, 7LL) )
      {
        *(_BYTE *)(v142 + 64) |= 2u;
      }
    }
    if ( !*(_QWORD *)(v142 + 8) )
    {
      if ( v34 )
      {
        Curl_cfree(0LL);
        *(_QWORD *)(v142 + 8) = Curl_strndup(i, v21);
        Curl_cfree(*(_QWORD *)(v142 + 16));
        v40 = (const char *)Curl_strndup(s, v33);
        *(_QWORD *)(v142 + 16) = v40;
        if ( v40 )
        {
          v41 = *(const char **)(v142 + 8);
          if ( v41 )
          {
            if ( !v40[strcspn(v40, &invalid_octets_badoctets)] && !v41[strcspn(v41, &invalid_octets_badoctets)] )
              goto LABEL_60;
            if ( (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
              Curl_infof(data, "invalid octets in name/value, cookie dropped");
          }
        }
      }
      goto LABEL_250;
    }
    if ( v33 )
      goto LABEL_44;
    if ( v21 == 8 )
    {
      if ( !(unsigned int)curl_strnequal("httponly", i, 8LL) )
        goto LABEL_93;
      *(_BYTE *)(v142 + 59) = 1;
    }
    else
    {
      if ( v21 == 6 && (unsigned int)curl_strnequal("secure", i, 6LL) )
      {
        if ( secure || !c->running )
        {
          *(_BYTE *)(v142 + 57) = 1;
          goto LABEL_60;
        }
        goto LABEL_250;
      }
LABEL_93:
      if ( v34 )
      {
LABEL_44:
        if ( v21 == 7 )
        {
          if ( (unsigned int)curl_strnequal("version", i, 7LL) )
            goto LABEL_60;
          if ( (unsigned int)curl_strnequal("max-age", i, 7LL) )
          {
            v43 = s + 1;
            if ( *s != 34 )
              v43 = s;
            v44 = curlx_strtoofft(v43, 0LL, 10LL, v152);
            if ( v44 )
            {
              if ( v44 == 2 )
              {
                *v152 = 1LL;
                goto LABEL_60;
              }
              if ( v44 != 1 )
                goto LABEL_60;
            }
            else
            {
              v58 = *v152;
              if ( !*v152 )
              {
                *v152 = 1LL;
                goto LABEL_60;
              }
              if ( v154 >= v58 )
              {
                *v152 = v153 + v58;
                goto LABEL_60;
              }
            }
            *v152 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_60;
          }
          if ( (unsigned int)curl_strnequal("expires", i, 7LL) && v33 <= 0x7F && !*v152 )
          {
            memcpy(dest, s, v33);
            *((_BYTE *)dest + v33) = 0;
            v56 = Curl_getdate_capped(dest);
            *v152 = v56;
            if ( v56 )
            {
              if ( v56 < 0 )
                *v152 = 0LL;
            }
            else
            {
              *v152 = 1LL;
            }
          }
        }
        else
        {
          if ( v21 != 6 )
          {
            if ( v21 != 4 || !(unsigned int)curl_strnequal("path", i, 4LL) )
              goto LABEL_60;
            Curl_cfree(*(_QWORD *)(v142 + 24));
            v35 = Curl_strndup(s, v33);
            *(_QWORD *)(v142 + 24) = v35;
            if ( !v35 )
              goto LABEL_250;
            Curl_cfree(*(_QWORD *)(v142 + 32));
            v36 = (const char *)Curl_cstrdup(*(_QWORD *)(v142 + 24));
            if ( !v36 )
            {
              *(_QWORD *)(v142 + 32) = 0LL;
              goto LABEL_250;
            }
            v37 = (char *)v36;
            v38 = strlen(v36);
            v39 = v38;
            if ( *v37 == 34 )
            {
              memmove(v37, v37 + 1, v38);
              --v39;
            }
            if ( v39 )
            {
              if ( v37[v39 - 1] == 34 )
                v37[--v39] = 0;
            }
            else
            {
              v39 = 0LL;
            }
            if ( *v37 == 47 )
            {
              if ( v39 && v37[v39 - 1] == 47 )
                v37[v39 - 1] = 0;
              *(_QWORD *)(v142 + 32) = v37;
            }
            else
            {
              Curl_cfree(v37);
              v55 = Curl_strndup("/", 1LL);
              *(_QWORD *)(v142 + 32) = v55;
              if ( !v55 )
                goto LABEL_250;
            }
            goto LABEL_60;
          }
          v45 = curl_strnequal("domain", i, 6LL);
          if ( !v33 || !v45 )
            goto LABEL_60;
          v46 = s + 1;
          if ( *s != 46 )
            v46 = s;
          v47 = v33 - (*s == 46);
          if ( v47 == 9 && (unsigned int)curl_strnequal(v46, "localhost", 9LL)
            || (v48 = memchr(v46, 46, v47)) != 0LL && (unsigned __int64)(&v46[v47] - v48) > 1 )
          {
            v51 = v46;
            if ( v149 )
              v51 = v149;
            is_ipnum = Curl_host_is_ipnum(v51);
            if ( !v149 )
            {
              v149 = 0LL;
              goto LABEL_119;
            }
            v49 = v149;
            if ( is_ipnum )
              goto LABEL_87;
          }
          else
          {
            v49 = ":";
            if ( (unsigned __int8)Curl_host_is_ipnum(":") )
            {
LABEL_87:
              v149 = v49;
              if ( strncmp(v46, v49, v47) || (is_ipnum = 1, v47 != strlen(v49)) )
              {
LABEL_129:
                v150 = 1;
                if ( (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
                  Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v46);
                goto LABEL_60;
              }
              goto LABEL_119;
            }
          }
          v52 = strlen(v49);
          v149 = v49;
          if ( v52 < v47 )
            goto LABEL_129;
          v53 = v52;
          v54 = &v49[v52 - v47];
          if ( !(unsigned int)curl_strnequal(v46, v54, v47) || v53 != v47 && *(v54 - 1) != 46 )
          {
            v15 = v142;
            goto LABEL_129;
          }
          is_ipnum = 0;
          v15 = v142;
LABEL_119:
          Curl_cfree(*(_QWORD *)(v15 + 40));
          v57 = Curl_strndup(v46, v47);
          *(_QWORD *)(v15 + 40) = v57;
          if ( !is_ipnum && v57 )
          {
            *(_BYTE *)(v15 + 56) = 1;
            goto LABEL_60;
          }
          if ( !v57 )
          {
            v150 = 1;
            break;
          }
        }
      }
    }
    do
    {
      do
LABEL_60:
        v42 = *lineptr++;
      while ( v42 == 32 );
    }
    while ( v42 == 9 );
  }
  while ( v42 == 59 );
  v84 = v150;
  if ( (v150 & 1) != 0 )
  {
    v85 = path;
  }
  else
  {
    v85 = path;
    if ( v149 )
    {
      if ( !*(_QWORD *)(v15 + 40) )
      {
        v86 = Curl_cstrdup(v149);
        *(_QWORD *)(v15 + 40) = v86;
        v84 = 1;
        if ( v86 )
          v84 = v150;
      }
    }
  }
  if ( (v84 & 1) == 0 && v85 && !*(_QWORD *)(v15 + 24) )
  {
    v87 = strchr(v85, 63);
    v88 = v87 ? (char *)Curl_memrchr(v85, 47LL, v87 - v85) : strrchr(v85, 47);
    if ( v88 )
    {
      v90 = v84;
      v91 = v88 - v85;
      v92 = (void *)Curl_cmalloc(v88 - v85 + 2);
      *(_QWORD *)(v15 + 24) = v92;
      if ( !v92 )
        goto LABEL_250;
      v93 = v91 + 1;
      memcpy(v92, path, v93);
      *(_BYTE *)(*(_QWORD *)(v15 + 24) + v93) = 0;
      v94 = (const char *)Curl_cstrdup(*(_QWORD *)(v15 + 24));
      if ( v94 )
      {
        v95 = (char *)v94;
        v96 = strlen(v94);
        v97 = v96;
        if ( *v95 == 34 )
        {
          memmove(v95, v95 + 1, v96);
          --v97;
        }
        if ( v97 )
        {
          if ( v95[v97 - 1] == 34 )
            v95[--v97] = 0;
        }
        else
        {
          v97 = 0LL;
        }
        if ( *v95 == 47 )
        {
          if ( v97 && v95[v97 - 1] == 47 )
            v95[v97 - 1] = 0;
        }
        else
        {
          Curl_cfree(v95);
          v95 = (char *)Curl_strndup("/", 1LL);
        }
      }
      else
      {
        v95 = 0LL;
      }
      *(_QWORD *)(v15 + 32) = v95;
      v84 = 1;
      if ( v95 )
        v84 = v90;
    }
  }
  if ( (v84 & 1) != 0 || !*(_QWORD *)(v15 + 8) )
  {
LABEL_250:
    v111 = *(_QWORD *)(v15 + 40);
    goto LABEL_259;
  }
  ++data->req.setcookies;
  v82 = *(_BYTE *)(v15 + 64);
  v83 = c;
  if ( (v82 & 1) == 0 )
    goto LABEL_243;
LABEL_242:
  if ( !*(_BYTE *)(v15 + 57) )
  {
LABEL_258:
    v111 = *(_QWORD *)(v15 + 40);
LABEL_259:
    Curl_cfree(v111);
    Curl_cfree(*(_QWORD *)(v15 + 24));
    Curl_cfree(*(_QWORD *)(v15 + 32));
    Curl_cfree(*(_QWORD *)(v15 + 8));
    Curl_cfree(*(_QWORD *)(v15 + 16));
    v114 = (_QWORD *)v15;
LABEL_260:
    Curl_cfree(v114);
    return 0LL;
  }
LABEL_243:
  if ( (v82 & 2) != 0 )
  {
    if ( !*(_BYTE *)(v15 + 57) )
      goto LABEL_258;
    v112 = *(const char **)(v15 + 24);
    if ( !v112 )
      goto LABEL_258;
    v113 = strcmp(v112, "/");
    v83 = c;
    if ( v113 || *(_BYTE *)(v15 + 56) )
      goto LABEL_258;
  }
  running = v83->running;
  if ( !running && v83->newsession && !*(_QWORD *)(v15 + 48) )
    goto LABEL_258;
  *(_BYTE *)(v15 + 58) = running;
  v99 = v83->lastct + 1;
  v83->lastct = v99;
  *(_DWORD *)(v15 + 60) = v99;
  if ( !v151 )
  {
    v100 = time(0LL);
    v101 = c;
    v102 = v100;
    next_expiration = c->next_expiration;
    if ( v102 >= next_expiration || next_expiration == 0x7FFFFFFFFFFFFFFFLL )
    {
      c->next_expiration = 0x7FFFFFFFFFFFFFFFLL;
      v132 = 0LL;
      do
      {
        sc = v132;
        v133 = v101->cookies[(_QWORD)v132];
        if ( v133 )
        {
          v134 = &v101->cookies[(_QWORD)v132];
          v135 = 0LL;
          do
          {
            while ( 1 )
            {
              v136 = v133;
              v133 = v133->next;
              expires = v136->expires;
              if ( !expires || expires >= v102 )
                break;
              p_next = &v135->next;
              if ( !v135 )
                p_next = v134;
              *p_next = v133;
              --v101->numcookies;
              Curl_cfree(v136->domain);
              Curl_cfree(v136->path);
              Curl_cfree(v136->spath);
              Curl_cfree(v136->name);
              Curl_cfree(v136->value);
              Curl_cfree(v136);
              v101 = c;
              if ( !v133 )
                goto LABEL_307;
            }
            if ( expires && expires < v101->next_expiration )
              v101->next_expiration = expires;
            v135 = v136;
          }
          while ( v133 );
        }
LABEL_307:
        v132 = sc + 1;
      }
      while ( sc != (char *)&loc_3E );
    }
  }
  v12 = (Cookie *)v142;
  v104 = cookiehash(*(const char *const *)(v142 + 40));
  v105 = c;
  v106 = v104;
  next = c->cookies[v104];
  if ( !next )
  {
    v116 = 0LL;
    v110 = 0;
    goto LABEL_322;
  }
  sb = (void *)v106;
  v108 = 0LL;
  v109 = 0LL;
  v110 = 0;
  while ( 2 )
  {
    v116 = next;
    if ( (unsigned int)curl_strequal(next->name, *(_QWORD *)(v142 + 8)) )
    {
      v117 = v116->domain;
      v118 = *(_QWORD *)(v142 + 40);
      if ( v117 )
      {
        if ( !v118 || !(unsigned int)curl_strequal(v117, v118) )
          goto LABEL_282;
      }
      else if ( v118 )
      {
        goto LABEL_282;
      }
      spath = v116->spath;
      if ( spath )
      {
        v120 = *(_QWORD *)(v142 + 32);
        if ( v120 )
        {
          if ( v116->secure && !*(_BYTE *)(v142 + 57) && !secure )
          {
            v121 = strchr(spath + 1, 47);
            v122 = v121 ? v121 - spath : strlen(spath);
            if ( (unsigned int)curl_strnequal(spath, v120, v122) )
            {
              v128 = (_QWORD *)v142;
              if ( data && (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
                Curl_infof(
                  data,
                  "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                  *(const char **)(v142 + 8),
                  *(const char **)(v142 + 40));
              goto LABEL_338;
            }
          }
        }
      }
    }
LABEL_282:
    if ( !v108 )
    {
      v108 = v142;
      if ( !(unsigned int)curl_strequal(v116->name, *(_QWORD *)(v142 + 8)) )
        goto LABEL_265;
      v123 = v116->domain;
      v124 = *(_QWORD *)(v142 + 40);
      if ( !v123 )
      {
        v125 = v124 == 0;
        goto LABEL_289;
      }
      if ( v124 && (unsigned int)curl_strequal(v123, v124) )
      {
        v125 = v116->tailmatch == *(_BYTE *)(v142 + 56);
LABEL_289:
        if ( v125 )
          v110 = 1;
      }
      if ( (v110 & 1) == 0 )
        goto LABEL_265;
      v126 = v116->spath;
      if ( v126 )
      {
        v127 = *(_QWORD *)(v142 + 32);
        if ( !v127 )
          goto LABEL_297;
        if ( (unsigned int)curl_strequal(v126, v127) )
        {
          v126 = v116->spath;
          goto LABEL_297;
        }
        v110 = 0;
LABEL_265:
        v108 = 0LL;
      }
      else
      {
        v126 = 0LL;
LABEL_297:
        if ( (v126 == 0LL) != (*(_QWORD *)(v142 + 32) == 0LL) )
          v110 = 0;
        if ( (v110 & 1) == 0 )
          goto LABEL_265;
        if ( *(_BYTE *)(v142 + 58) )
        {
          v109 = v116;
        }
        else
        {
          v109 = v116;
          if ( v116->livecookie )
          {
            v128 = (_QWORD *)v142;
LABEL_338:
            Curl_cfree(v128[5]);
            Curl_cfree(v128[3]);
            Curl_cfree(v128[4]);
            Curl_cfree(v128[1]);
            Curl_cfree(v128[2]);
            v114 = v128;
            goto LABEL_260;
          }
        }
      }
    }
    next = v116->next;
    if ( v116->next )
      continue;
    break;
  }
  if ( v108 )
  {
    *(_QWORD *)v108 = v109->next;
    *(_DWORD *)(v108 + 60) = v109->creationtime;
    Curl_cfree(v109->name);
    Curl_cfree(v109->value);
    Curl_cfree(v109->domain);
    Curl_cfree(v109->path);
    Curl_cfree(v109->spath);
    *(_QWORD *)&v109->prefix = *(_QWORD *)(v108 + 64);
    v129 = *(_OWORD *)v108;
    v130 = *(_OWORD *)(v108 + 16);
    v131 = *(_OWORD *)(v108 + 32);
    *(_OWORD *)&v109->expires = *(_OWORD *)(v108 + 48);
    *(_OWORD *)&v109->spath = v131;
    *(_OWORD *)&v109->value = v130;
    *(_OWORD *)&v109->next = v129;
    Curl_cfree(v108);
    v12 = v109;
  }
  else
  {
    v12 = (Cookie *)v142;
  }
  v105 = c;
  v106 = (size_t)sb;
LABEL_322:
  if ( data && v105->running && (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
  {
    v139 = "Replaced";
    if ( (v110 & 1) == 0 )
      v139 = "Added";
    Curl_infof(
      data,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
      v139,
      v12->name,
      v12->value,
      v12->domain,
      v12->path,
      v12->expires);
    v105 = c;
  }
  if ( (v110 & 1) == 0 )
  {
    v140 = &v105->cookies[v106];
    if ( v116 )
      v140 = &v116->next;
    *v140 = v12;
    ++v105->numcookies;
  }
  v141 = v12->expires;
  if ( v141 && v141 < v105->next_expiration )
    v105->next_expiration = v141;
  return v12;
}
