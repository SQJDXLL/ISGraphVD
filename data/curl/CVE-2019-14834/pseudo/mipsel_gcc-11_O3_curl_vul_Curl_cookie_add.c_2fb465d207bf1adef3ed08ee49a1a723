Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        int a5,
        int a6,
        int badcookie_0a,
        int a8,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  time_t v13; // $v0
  char *v14; // $fp
  bool v15; // dc
  Cookie *v16; // $s0
  int v17; // $s6
  size_t v18; // $s5
  int v19; // $v0
  int v20; // $a2
  unsigned int v21; // $t4
  int v22; // $v0
  _BYTE *v23; // $s1
  size_t v24; // $s7
  int v25; // $a2
  char *v26; // $s4
  char *v27; // $v0
  int v28; // $v0
  size_t v29; // $t4
  _BOOL4 v30; // $v0
  _BYTE *v31; // $v0
  const char *v32; // $v0
  const char *v33; // $s6
  int is_ipnum; // $s5
  void (*v35)(Cookie *); // $t9
  unsigned __int8 prefix; // $v0
  int v37; // $v0
  CookieInfo *v38; // $v0
  char *v39; // $v1
  void (*v40)(Cookie *); // $t9
  bool running; // $v1
  CookieInfo *v42; // $a0
  int lastct; // $v0
  Cookie **v44; // $s7
  Cookie *v45; // $fp
  int livecookie; // $s5
  Cookie *v47; // $s2
  Cookie *v48; // $s1
  char *v49; // $a0
  char *v50; // $a1
  char *spath; // $v1
  char *v52; // $v0
  const char *v53; // $v1
  const char *v54; // $a3
  size_t v55; // $a2
  char *v57; // $v0
  char *v58; // $v0
  int v59; // $v0
  int v60; // $v0
  __int64 expires; // $v0
  void *v62; // $v0
  int v63; // $v0
  int v64; // $v0
  int v65; // $v0
  char *v66; // $v0
  int v67; // $v0
  int v68; // $v0
  const char *name; // $s1
  char *value; // $s6
  size_t v71; // $fp
  const char *v72; // $s6
  int v73; // $v0
  char *v74; // $a0
  char *v75; // $a1
  char *v76; // $a0
  char *v77; // $a1
  int creationtime; // $v0
  void (__fastcall *v79)(char *); // $t9
  char *v80; // $a0
  Cookie *v81; // $v0
  Cookie *v82; // $v1
  Cookie *next; // $t0
  char *v84; // $a3
  char *v85; // $a1
  char *v86; // $a0
  __int64 v87; // $v0
  char *v88; // $v0
  const char *v89; // $s1
  char *v90; // $v0
  const char *v91; // $s2
  int v92; // $v0
  size_t v93; // $s1
  char *v94; // $a0
  char *v95; // $v0
  int v96; // $v0
  int v97; // $v0
  size_t nlend; // [sp+34h] [-BCh]
  const char *nlen; // [sp+34h] [-BCh]
  size_t nlena; // [sp+34h] [-BCh]
  size_t nlenb; // [sp+34h] [-BCh]
  size_t nlenc; // [sp+34h] [-BCh]
  size_t nlene; // [sp+34h] [-BCh]
  _DWORD *v105; // [sp+38h] [-B8h] BYREF
  const char *v106; // [sp+3Ch] [-B4h]
  time_t now; // [sp+40h] [-B0h]
  _BOOL4 v108; // [sp+44h] [-ACh]
  int v109; // [sp+48h] [-A8h]
  const char *v110; // [sp+4Ch] [-A4h]
  int badcookie; // [sp+50h] [-A0h]
  void (*v112)(Cookie *); // [sp+54h] [-9Ch]
  void (*v113)(Cookie *); // [sp+58h] [-98h]
  const char *v114; // [sp+5Ch] [-94h]
  unsigned int v115; // [sp+60h] [-90h]
  unsigned int v116; // [sp+64h] [-8Ch]
  char *tok_buf; // [sp+68h] [-88h] BYREF
  char date[128]; // [sp+6Ch] [-84h] BYREF
  int v119; // [sp+ECh] [-4h]

  v106 = domain;
  v105 = &_stack_chk_guard;
  v110 = path;
  v108 = secure;
  v14 = (char *)lineptr;
  v13 = time(0u);
  v15 = data->req.setcookies >= 0x32u;
  now = v13;
  if ( v15 )
    goto LABEL_93;
  v16 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v16 )
    goto LABEL_93;
  if ( !httpheader )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v14 = (char *)(lineptr + 10);
      v16->httponly = 1;
    }
    if ( *v14 == 35 )
    {
      Curl_cfree(v16);
    }
    else
    {
      v57 = strchr(v14, 13);
      if ( v57 )
        *v57 = 0;
      v58 = strchr(v14, 10);
      if ( v58 )
        *v58 = 0;
      if ( strtok_r(v14, "\t", &tok_buf) )
      {
        now = (time_t)sanitize_cookie_path;
        __asm { jr      $v0 }
      }
      freecookie(v16);
    }
    goto LABEL_93;
  }
  if ( strlen(lineptr) >= 0x1389 )
  {
    v47 = 0;
    Curl_cfree(v16);
    goto LABEL_94;
  }
  v116 = 0x7FFFFFFF - (now >> 0x1F);
  v112 = freecookie;
  v17 = *lineptr;
  v115 = now >> 0x1F;
  v113 = freecookie;
  badcookie = 0;
  v114 = (const char *)&_LC1;
  if ( v17 )
    goto LABEL_6;
  while ( 2 )
  {
    v18 = strcspn(v14, ";\t\r\n=");
    if ( !v18 )
      goto LABEL_54;
LABEL_12:
    v20 = (int)&v14[v18];
    do
    {
      v21 = v18--;
      v22 = v14[v18];
      if ( v22 != 32 && v22 != 9 )
      {
        if ( *(_BYTE *)v20 == 61 )
        {
          v23 = (_BYTE *)(v20 + 1);
          nlena = v21;
          v109 = v20;
          v24 = strcspn((const char *)(v20 + 1), ";\r\n");
          v26 = &v23[v24];
          v18 = nlena;
          if ( v24 )
          {
            v25 = v109;
            goto LABEL_18;
          }
          if ( nlena >= 0xFFF )
            goto LABEL_216;
          v29 = httpheader;
LABEL_24:
          v24 = 0;
        }
        else
        {
          v26 = (char *)v20;
          if ( v21 >= 0xFFF )
          {
            v18 = v21;
            v24 = 0;
            goto LABEL_216;
          }
          v18 = v21;
          v23 = 0;
          v29 = 0;
          v24 = 0;
        }
        v30 = v18 < 7;
LABEL_26:
        if ( !v30 && v17 == 95 && v14[1] == 95 )
        {
          nlenb = v29;
          v64 = curl_strnequal("__Secure-", v14, 9);
          v29 = nlenb;
          if ( v64 )
          {
            v16->prefix |= 1u;
          }
          else
          {
            v97 = curl_strnequal("__Host-", v14, 7);
            v29 = nlenb;
            if ( v97 )
              v16->prefix |= 2u;
          }
        }
        if ( v16->name )
        {
          if ( v24 )
            goto LABEL_34;
          if ( v18 != 6 )
            goto LABEL_31;
          nlenc = v29;
          if ( curl_strnequal("secure", v14, 6) )
          {
            if ( v108 || !c->running )
            {
              v16->secure = 1;
              goto LABEL_50;
            }
            goto LABEL_88;
          }
          if ( nlenc )
            curl_strnequal("domain", v14, 6);
          goto LABEL_50;
        }
        v35 = (void (*)(Cookie *))MEMORY[0xB620];
        if ( !v29 )
          goto LABEL_89;
LABEL_148:
        Curl_cfree(0);
        v67 = Curl_memdup(v14, v18 + 1);
        v16->name = (char *)v67;
        if ( v67 )
          *(_BYTE *)(v67 + v18) = 0;
        Curl_cfree(v16->value);
        v68 = Curl_memdup(v23, v24 + 1);
        v16->value = (char *)v68;
        if ( v68 )
          *(_BYTE *)(v68 + v24) = 0;
        name = v16->name;
        v35 = (void (*)(Cookie *))MEMORY[0xB620];
        if ( !name )
          goto LABEL_89;
        value = v16->value;
        if ( value )
        {
          if ( !value[strcspn(v16->value, badoctets_0)] && !name[strcspn(name, badoctets_0)] )
            goto LABEL_50;
          v35 = (void (*)(Cookie *))MEMORY[0xB620];
          if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x100000) == 0 )
            goto LABEL_89;
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
        }
        goto LABEL_88;
      }
    }
    while ( v18 );
    if ( *(_BYTE *)v20 != 61 )
    {
      v35 = (void (*)(Cookie *))MEMORY[0xB620];
      if ( v16->name )
      {
        v26 = (char *)v20;
        goto LABEL_50;
      }
      goto LABEL_89;
    }
    v23 = (_BYTE *)(v20 + 1);
    nlend = v20;
    v24 = strcspn((const char *)(v20 + 1), ";\r\n");
    v25 = nlend;
    v26 = &v23[v24];
    if ( v24 )
    {
LABEL_18:
      v27 = (char *)(v25 + v24);
      do
      {
        v28 = *v27;
        if ( v28 != 32 && v28 != 9 )
        {
          while ( 1 )
          {
            v59 = (char)*v23;
            if ( v59 == 32 )
            {
              --v24;
            }
            else
            {
              --v24;
              if ( v59 != 9 )
              {
                if ( memchr(v23, 9, ++v24) )
                {
                  freecookie(v16);
                  if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x100000) != 0 )
                  {
                    Curl_infof(data, "cookie contains TAB, dropping");
                    v47 = 0;
                    goto LABEL_94;
                  }
                }
                else
                {
                  if ( v18 < 0xFFF && v24 < 0xFFF )
                  {
                    v29 = httpheader;
                    if ( v24 + v18 < 0x1001 )
                    {
                      v30 = v18 < 7;
                      goto LABEL_26;
                    }
                  }
LABEL_216:
                  freecookie(v16);
                  if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x100000) != 0 )
                  {
                    Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v18, v24);
                    v47 = 0;
                    goto LABEL_94;
                  }
                }
LABEL_93:
                v47 = 0;
                goto LABEL_94;
              }
            }
            ++v23;
            if ( !v24 )
              goto LABEL_22;
          }
        }
        --v24;
        v27 = (char *)(v25 + v24);
      }
      while ( v24 );
LABEL_22:
      v24 = 0;
      if ( v18 >= 0xFFF )
        goto LABEL_216;
      v29 = httpheader;
      goto LABEL_24;
    }
    v29 = httpheader;
    if ( !v16->name )
    {
      v23 += v24;
      goto LABEL_148;
    }
    v23 += v24;
LABEL_31:
    if ( v18 == 8 )
    {
      if ( curl_strnequal("httponly", v14, 8) )
        v16->httponly = 1;
      goto LABEL_50;
    }
    if ( !v29 )
      goto LABEL_50;
    v24 = 0;
LABEL_34:
    if ( v18 == 4 )
    {
      if ( !curl_strnequal("path", v14, 4) )
        goto LABEL_50;
      Curl_cfree(v16->path);
      v65 = Curl_memdup(v23, v24 + 1);
      v16->path = (char *)v65;
      if ( v65 )
      {
        *(_BYTE *)(v65 + v24) = 0;
        v35 = (void (*)(Cookie *))MEMORY[0xB620];
        if ( v16->path )
        {
          Curl_cfree(v16->spath);
          v66 = sanitize_cookie_path(v16->path);
          v16->spath = v66;
          if ( v66 )
            goto LABEL_50;
          v35 = (void (*)(Cookie *))MEMORY[0xB620];
        }
        goto LABEL_89;
      }
      goto LABEL_88;
    }
    if ( v18 != 6 )
    {
      if ( v18 != 7 || curl_strnequal((char *)v112 + 0x32F4, v14, 7) )
        goto LABEL_50;
      if ( curl_strnequal((char *)v113 + 0x33AC, v14, 7) )
      {
        if ( *v23 == 34 )
          ++v23;
        v60 = curlx_strtoofft(v23, 0, 10, &v16->expires);
        if ( v60 == 1 )
        {
LABEL_242:
          LODWORD(v16->expires) = -1;
          HIDWORD(v16->expires) = 0x7FFFFFFF;
          goto LABEL_50;
        }
        if ( v60 != 2 )
        {
          if ( v60 )
            goto LABEL_50;
          expires = v16->expires;
          if ( expires )
          {
            if ( __SPAIR64__(v116, ~now) >= expires )
            {
              v16->expires = expires + __PAIR64__(v115, now);
              goto LABEL_50;
            }
            goto LABEL_242;
          }
        }
      }
      else
      {
        if ( !curl_strnequal("expires", v14, 7) || v16->expires || v24 >= 0x80 )
          goto LABEL_50;
        v62 = memcpy(date, v23, v24);
        *((_BYTE *)&v105 + v24 + 0x34) = 0;
        v63 = Curl_getdate_capped(v62);
        if ( v63 )
        {
          if ( v63 >> 0x1F == -1 )
          {
            LODWORD(v16->expires) = 0;
            HIDWORD(v16->expires) = 0;
          }
          else
          {
            v16->expires = v63;
          }
          goto LABEL_50;
        }
      }
      LODWORD(v16->expires) = 1;
      HIDWORD(v16->expires) = 0;
      goto LABEL_50;
    }
    if ( !curl_strnequal("domain", v14, 6) || !v24 )
      goto LABEL_50;
    if ( *v23 == 46 )
    {
      ++v23;
      --v24;
    }
    if ( v24 == 9 && curl_strnequal(v23, "localhost", 9) )
    {
      v32 = v106;
      goto LABEL_174;
    }
    v31 = memchr(v23, 46, v24);
    if ( !v31 || (v15 = v24 - (v31 - v23) >= 2, v32 = v106, !v15) )
    {
      v32 = v114;
      v106 = v114;
      goto LABEL_44;
    }
LABEL_174:
    if ( !v32 )
    {
      is_ipnum = Curl_host_is_ipnum(v23);
      goto LABEL_166;
    }
LABEL_44:
    v33 = v32;
    is_ipnum = Curl_host_is_ipnum(v32);
    if ( is_ipnum )
    {
      if ( strncmp(v23, v33, v24) || strlen(v33) != v24 )
        goto LABEL_47;
LABEL_166:
      Curl_cfree(v16->domain);
      v73 = Curl_memdup(v23, v24 + 1);
      v16->domain = (char *)v73;
      if ( v73 )
      {
        *(_BYTE *)(v73 + v24) = 0;
        v35 = (void (*)(Cookie *))MEMORY[0xB620];
        if ( v16->domain )
        {
          if ( !is_ipnum )
            v16->tailmatch = 1;
          goto LABEL_50;
        }
LABEL_89:
        v40 = (void (*)(Cookie *))((char *)v35 + (__int16)freecookie);
LABEL_90:
        v40(v16);
LABEL_91:
        v47 = 0;
        goto LABEL_94;
      }
LABEL_88:
      v35 = freecookie;
      goto LABEL_89;
    }
    v71 = strlen(v106);
    if ( v71 >= v24 )
    {
      v72 = &v106[v71 - v24];
      if ( curl_strnequal(v23, v72, v24) )
      {
        if ( v24 == v71 || *(v72 - 1) == 46 )
          goto LABEL_166;
      }
    }
LABEL_47:
    if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x100000) != 0 )
      Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v23);
    badcookie = httpheader;
LABEL_50:
    v17 = *v26;
    if ( !*v26 )
    {
LABEL_54:
      v19 = badcookie;
      break;
    }
    while ( 1 )
    {
      if ( v17 != 32 )
      {
        v14 = v26;
        if ( v17 != 9 )
          break;
      }
      v17 = *++v26;
      if ( !v17 )
        goto LABEL_54;
    }
LABEL_9:
    v19 = badcookie;
    if ( v17 == 59 )
    {
LABEL_10:
      v17 = *++v14;
      if ( !v17 )
        continue;
LABEL_6:
      if ( v17 == 32 || v17 == 9 )
        goto LABEL_10;
      v18 = strcspn(v14, ";\t\r\n=");
      if ( !v18 )
        goto LABEL_9;
      goto LABEL_12;
    }
    break;
  }
  v35 = (void (*)(Cookie *))MEMORY[0xB620];
  if ( v19 )
    goto LABEL_89;
  if ( !v16->domain )
  {
    if ( v106 )
    {
      v96 = Curl_cstrdup(v106);
      v16->domain = (char *)v96;
      if ( !v96 )
      {
        v35 = freecookie;
        goto LABEL_89;
      }
    }
  }
  if ( !v16->path && v110 )
  {
    v89 = v110;
    v88 = strchr(v110, 63);
    v90 = v88 ? (char *)Curl_memrchr(v89, 47, v88 - v89) : strrchr(v89, 47);
    if ( v90 )
    {
      v91 = v110;
      v92 = v90 - v110;
      v93 = v92 + 1;
      v94 = (char *)Curl_cmalloc(v92 + 2);
      v16->path = v94;
      if ( !v94 )
        goto LABEL_88;
      memcpy(v94, v91, v93);
      v16->path[v93] = 0;
      v95 = sanitize_cookie_path(v16->path);
      v16->spath = v95;
      if ( !v95 )
      {
        v35 = freecookie;
        goto LABEL_89;
      }
    }
  }
  v35 = (void (*)(Cookie *))MEMORY[0xB620];
  if ( !v16->name )
    goto LABEL_89;
  ++data->req.setcookies;
  prefix = v16->prefix;
  if ( (prefix & 1) != 0 )
  {
    v37 = prefix & 2;
    if ( !v16->secure )
      goto LABEL_88;
    v15 = v37 == 0;
    v38 = c;
    if ( !v15 )
      goto LABEL_62;
  }
  else
  {
    v15 = (prefix & 2) == 0;
    v38 = c;
    if ( !v15 )
    {
      if ( !v16->secure )
      {
        ((void (__fastcall *)(Cookie *))(MEMORY[0xB620] + (__int16)freecookie))(v16);
        goto LABEL_91;
      }
LABEL_62:
      v39 = v16->path;
      v35 = (void (*)(Cookie *))MEMORY[0xB620];
      if ( !v39 )
        goto LABEL_89;
      v40 = (void (*)(Cookie *))(MEMORY[0xB620] + (__int16)freecookie);
      if ( *v39 != 47 )
        goto LABEL_90;
      if ( v39[1] )
        goto LABEL_88;
      v38 = c;
      if ( v16->tailmatch )
        goto LABEL_88;
    }
  }
  running = v38->running;
  v42 = c;
  if ( !running && v38->newsession )
  {
    v35 = (void (*)(Cookie *))MEMORY[0xB620];
    if ( !v16->expires )
      goto LABEL_89;
    v42 = c;
  }
  lastct = v42->lastct;
  v16->livecookie = running;
  v42->lastct = ++lastct;
  v16->creationtime = lastct;
  if ( !noexpire )
    remove_expired(v42);
  v44 = &c->cookies[cookiehash(v16->domain)];
  v45 = *v44;
  if ( !*v44 )
  {
    if ( !c->running )
    {
      v47 = v16;
      *v44 = v16;
      goto LABEL_212;
    }
    v47 = v16;
    if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x100000) != 0 )
    {
LABEL_228:
      Curl_infof(
        data,
        "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
        "Added",
        v47->name,
        v47->value,
        v47->domain,
        v47->path,
        v47->expires);
      if ( v45 )
      {
LABEL_211:
        v45->next = v47;
LABEL_212:
        ++c->numcookies;
        goto LABEL_205;
      }
    }
    *v44 = v47;
    goto LABEL_212;
  }
  livecookie = 0;
  v47 = 0;
  v48 = 0;
  while ( 2 )
  {
    if ( curl_strequal(v45->name, v16->name) )
    {
      v49 = v45->domain;
      v50 = v16->domain;
      if ( v49 )
      {
        if ( v50 && curl_strequal(v49, v50) )
        {
LABEL_78:
          spath = v45->spath;
          if ( spath )
          {
            nlen = v16->spath;
            if ( nlen )
            {
              if ( v45->secure && !v16->secure && !v108 )
              {
                v106 = v45->spath;
                v52 = strchr(spath + 1, 47);
                v53 = v106;
                v54 = nlen;
                if ( v52 )
                {
                  v55 = v52 - v106;
                }
                else
                {
                  v106 = nlen;
                  nlene = (size_t)v53;
                  v55 = strlen(v53);
                  v54 = v106;
                  v53 = (const char *)nlene;
                }
                if ( curl_strnequal(v53, v54, v55) )
                {
                  v35 = (void (*)(Cookie *))MEMORY[0xB620];
                  if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x100000) == 0 )
                    goto LABEL_89;
                  Curl_infof(
                    data,
                    "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                    v16->name,
                    v16->domain);
                  goto LABEL_88;
                }
              }
            }
          }
        }
      }
      else if ( !v50 )
      {
        goto LABEL_78;
      }
    }
    if ( v48 || !curl_strequal(v45->name, v16->name) )
      goto LABEL_180;
    v74 = v45->domain;
    v75 = v16->domain;
    if ( v74 )
    {
      if ( !v75 || !curl_strequal(v74, v75) || v45->tailmatch != v16->tailmatch )
      {
LABEL_187:
        if ( livecookie )
          goto LABEL_188;
        goto LABEL_180;
      }
LABEL_188:
      v76 = v45->spath;
    }
    else
    {
      if ( v75 )
        goto LABEL_187;
      v76 = v45->spath;
    }
    v77 = v16->spath;
    if ( v76 )
    {
      if ( !v77 )
      {
        v48 = 0;
        livecookie = 0;
        goto LABEL_180;
      }
      if ( !curl_strequal(v76, v77) )
      {
        livecookie = 0;
        goto LABEL_180;
      }
      v76 = v45->spath;
      v77 = v16->spath;
    }
    livecookie = 0;
    if ( (v76 == 0) == (v77 == 0) )
    {
      livecookie = v16->livecookie;
      v47 = v45;
      if ( v16->livecookie )
      {
        v48 = v16;
      }
      else
      {
        v35 = (void (*)(Cookie *))MEMORY[0xB620];
        if ( v45->livecookie )
          goto LABEL_89;
        v48 = v16;
        livecookie = 1;
      }
    }
LABEL_180:
    if ( v45->next )
    {
      v45 = v45->next;
      continue;
    }
    break;
  }
  if ( v48 )
  {
    creationtime = v47->creationtime;
    v79 = (void (__fastcall *)(char *))Curl_cfree;
    v80 = v47->name;
    v48->next = v47->next;
    v48->creationtime = creationtime;
    v79(v80);
    Curl_cfree(v47->value);
    Curl_cfree(v47->domain);
    Curl_cfree(v47->path);
    Curl_cfree(v47->spath);
    v81 = v48;
    v82 = v47;
    do
    {
      next = v81->next;
      v84 = v81->name;
      v85 = v81->value;
      v86 = v81->path;
      v81 = (Cookie *)((char *)v81 + 16);
      v82->next = next;
      v82->name = v84;
      v82->value = v85;
      v82->path = v86;
      v82 = (Cookie *)((char *)v82 + 16);
    }
    while ( v81 != &v48[1] );
    Curl_cfree(v48);
  }
  else
  {
    v47 = v16;
  }
  if ( !c->running || (*(_DWORD *)(&data->set.connect_only + 2) & 0x100000) == 0 )
  {
    if ( livecookie )
      goto LABEL_205;
    goto LABEL_211;
  }
  if ( !livecookie )
    goto LABEL_228;
  Curl_infof(
    data,
    "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
    "Replaced",
    v47->name,
    v47->value,
    v47->domain,
    v47->path,
    v47->expires);
LABEL_205:
  HIDWORD(v87) = v47->expires;
  LODWORD(v87) = HIDWORD(v47->expires);
  if ( v87 && __SPAIR64__(v87, HIDWORD(v87)) < c->next_expiration )
  {
    LODWORD(c->next_expiration) = HIDWORD(v87);
    HIDWORD(c->next_expiration) = v87;
  }
LABEL_94:
  if ( v119 != *v105 )
    _stack_chk_fail();
  return v47;
}
