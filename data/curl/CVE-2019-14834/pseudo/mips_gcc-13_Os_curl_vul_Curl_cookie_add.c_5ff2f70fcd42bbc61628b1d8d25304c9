// local variable allocation has failed, the output may be wrong!
Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        const char *httpheader,
        int noexpire,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v13; // $s3
  Cookie *v17; // $s0
  int v18; // $a3
  size_t v19; // $v0
  unsigned int v20; // $fp
  const char *v21; // $a3
  const char *v22; // $a2
  unsigned int v23; // $a0
  int v24; // $v0
  _BYTE *v25; // $s4
  size_t v26; // $s2
  int v27; // $v0
  _BOOL4 v28; // $v0
  int v29; // $v0
  void *v30; // $v0
  unsigned __int8 v31; // $v0
  const char *name; // $s2
  char *value; // $s3
  void (*v34)(Cookie *); // $t9
  void (*v35)(Cookie *); // $a0
  int v36; // $v0
  int v37; // $v1
  __int64 v38; // $v1
  int v39; // $v0
  char *v40; // $v0
  void (*v41)(Cookie *); // $v0
  _BYTE *v42; // $v0
  const char *v43; // $a0
  int is_ipnum; // $v0
  int v45; // $s3
  int v46; // $v0
  int v47; // $a0
  bool v48; // dc
  time_t v49; // $a0
  unsigned int v50; // $a0
  void *v51; // $v0
  int v52; // $v0
  int v53; // $v0
  char *v54; // $v0
  char *v55; // $v0
  int v56; // $v0
  size_t v57; // $s1
  char *v58; // $a0
  char *v59; // $v0
  const char *v60; // $a0
  int lastct; // $v0
  void (*v62)(Cookie *); // $t9
  Cookie **v63; // $s4
  Cookie *v64; // $fp
  int livecookie; // $s3
  Cookie *v66; // $s1
  Cookie *v67; // $s2
  Cookie **p_next; // $s7
  void (__fastcall *v69)(char *); // $t9
  char *v70; // $a0
  const char *v71; // $a2
  curl_off_t expires; // $v1
  int v73; // $v0
  char *v74; // $v0
  char *v75; // $v0
  char *v76; // $a0
  char *v77; // $a1
  const char *spath; // $s7
  char *v79; // $a0
  char *v80; // $a1
  char *v81; // $v0
  size_t v82; // $a2
  char *v83; // $a0
  char *v84; // $a1
  char *v85; // $v1
  char v87[4]; // [sp+30h] [-B8h] BYREF
  char *s; // [sp+34h] [-B4h]
  const char *ptr; // [sp+38h] [-B0h]
  const char *v90; // [sp+3Ch] [-ACh] OVERLAPPED
  time_t now; // [sp+40h] [-A8h]
  _BOOL4 v92; // [sp+44h] [-A4h]
  const char *v93; // [sp+48h] [-A0h] OVERLAPPED
  void (*v94)(char **, const char *, size_t); // [sp+4Ch] [-9Ch]
  _DWORD *v95; // [sp+50h] [-98h]
  char *reject; // [sp+54h] [-94h]
  void (*v97)(Cookie *); // [sp+58h] [-90h]
  const char *v98; // [sp+5Ch] [-8Ch]
  char *tok_buf; // [sp+60h] [-88h] BYREF
  char date[128]; // [sp+64h] [-84h] BYREF
  int v101; // [sp+E4h] [-4h]

  s = (char *)path;
  v92 = secure;
  v95 = &_stack_chk_guard;
  v13 = (char *)lineptr;
  now = time(0u);
  if ( data->req.setcookies >= 0x32u )
    goto LABEL_179;
  v17 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v17 )
    goto LABEL_179;
  if ( !httpheader )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v13 = (char *)(lineptr + 10);
      v17->httponly = 1;
    }
    if ( *v13 != 35 )
    {
      v74 = strchr(v13, 13);
      if ( v74 )
        *v74 = 0;
      v75 = strchr(v13, 10);
      if ( v75 )
        *v75 = 0;
      s = (char *)&tok_buf;
      ptr = (const char *)&off_2DA0;
      if ( strtok_r(v13, "\t", &tok_buf) )
        __asm { jr      $v0 }
      ((void (__fastcall *)(Cookie *))(MEMORY[0xAE80] + (__int16)freecookie))(v17);
      goto LABEL_179;
    }
    goto LABEL_178;
  }
  v93 = 0;
  if ( strlen(lineptr) >= 0x1389 )
  {
LABEL_178:
    Curl_cfree(v17);
    goto LABEL_179;
  }
  reject = ";\t\r\n=";
  v97 = freecookie;
  v94 = strstore;
  while ( 1 )
  {
    while ( 1 )
    {
      v18 = *v13;
      if ( !*v13 || v18 != 32 && v18 != 9 )
        break;
      ++v13;
    }
    ptr = (const char *)*v13;
    v19 = strcspn(v13, reject);
    v20 = v19;
    if ( !v19 )
    {
      ptr = v13;
      goto LABEL_127;
    }
    v21 = ptr;
    v22 = &v13[v19];
    v23 = v19;
    while ( 1 )
    {
      v24 = v13[--v20];
      if ( v24 != 32 && v24 != 9 )
        break;
      v23 = v20;
      if ( !v20 )
        goto LABEL_16;
    }
    v20 = v23;
LABEL_16:
    if ( *v22 == 61 )
    {
      v25 = v22 + 1;
      v98 = ptr;
      v90 = v22;
      v26 = strcspn(v22 + 1, ";\r\n");
      v21 = v98;
      ptr = &v25[v26];
      while ( v26 )
      {
        v27 = v90[v26];
        if ( v27 != 32 && v27 != 9 )
          break;
        --v26;
      }
      while ( 1 )
      {
        v28 = v20 < 0xFFF;
        if ( !v26 )
          break;
        v29 = (char)*v25;
        if ( v29 == 32 )
        {
          ++v25;
        }
        else
        {
          ++v25;
          if ( v29 != 9 )
          {
            --v25;
            v90 = v98;
            v30 = memchr(v25, 9, v26);
            v21 = v90;
            if ( v30 )
            {
              freecookie(v17);
              if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x800) != 0 )
                Curl_infof(data, "cookie contains TAB, dropping");
              goto LABEL_179;
            }
            v28 = v20 < 0xFFF;
            break;
          }
        }
        --v26;
      }
      if ( !v28 || v26 >= 0xFFF || v20 + v26 >= 0x1001 )
        goto LABEL_34;
      v90 = httpheader;
    }
    else
    {
      if ( v20 >= 0xFFF )
      {
        v26 = 0;
LABEL_34:
        freecookie(v17);
        if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x800) != 0 )
          Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v20, v26);
        goto LABEL_179;
      }
      ptr = v22;
      v26 = 0;
      v90 = 0;
      v25 = 0;
    }
    if ( v20 >= 7 && v21 == (_BYTE *)&loc_5C + 3 && v13[1] == 95 )
    {
      if ( curl_strnequal("__Secure-", v13, 9) )
      {
        v31 = v17->prefix | 1;
LABEL_43:
        v17->prefix = v31;
        goto LABEL_44;
      }
      if ( curl_strnequal("__Host-", v13, 7) )
      {
        v31 = v17->prefix | 2;
        goto LABEL_43;
      }
    }
LABEL_44:
    if ( !v17->name )
    {
      if ( v90 )
      {
        ((void (__fastcall *)(char **, char *, unsigned int, const char *))v94)(&v17->name, v13, v20, v21);
        v94(&v17->value, v25, v26);
        name = v17->name;
        if ( name )
        {
          value = v17->value;
          if ( value )
          {
            if ( !value[strcspn(v17->value, badoctets_0)] && !name[strcspn(name, badoctets_0)] )
              goto LABEL_127;
            if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x800) != 0 )
            {
              Curl_infof(data, "invalid octets in name/value, cookie dropped");
              goto LABEL_52;
            }
          }
        }
      }
      goto LABEL_83;
    }
    if ( v26 )
    {
      if ( v20 == 4 )
      {
        v35 = (void (*)(Cookie *))MEMORY[0xAE80];
LABEL_80:
        if ( !curl_strnequal((char *)v35 + (__int16)"path", v13, 4) )
          goto LABEL_127;
        strstore(&v17->path, v25, v26);
        if ( v17->path )
        {
          Curl_cfree(v17->spath);
          v40 = sanitize_cookie_path(v17->path);
          v17->spath = v40;
          if ( v40 )
            goto LABEL_127;
        }
LABEL_83:
        v34 = freecookie;
        goto LABEL_84;
      }
      if ( v20 == 6 )
      {
        v41 = v97;
        goto LABEL_87;
      }
LABEL_67:
      if ( v20 != 7 || curl_strnequal("version", v13, 7) )
        goto LABEL_127;
      if ( !curl_strnequal("max-age", v13, 7) )
      {
        if ( !curl_strnequal("expires", v13, 7) || v17->expires || v26 >= 0x80 )
          goto LABEL_127;
        v51 = memcpy(date, v25, v26);
        v87[v26 + 0x34] = 0;
        v52 = Curl_getdate_capped(v51);
        if ( v52 )
        {
          if ( v52 >> 0x1F != -1 )
          {
            v17->expires = v52;
            goto LABEL_127;
          }
          v37 = 0;
          goto LABEL_77;
        }
        goto LABEL_76;
      }
      if ( *v25 == 34 )
        ++v25;
      v36 = curlx_strtoofft(v25, 0, 10, &v17->expires);
      if ( v36 != 1 )
      {
        v37 = 1;
        if ( v36 == 2 )
        {
LABEL_77:
          v39 = 0;
LABEL_116:
          LODWORD(v17->expires) = v37;
          HIDWORD(v17->expires) = v39;
          goto LABEL_127;
        }
        if ( v36 )
          goto LABEL_127;
        LODWORD(v38) = HIDWORD(v17->expires);
        HIDWORD(v38) = v17->expires;
        if ( !v38 )
        {
LABEL_76:
          v37 = 1;
          goto LABEL_77;
        }
        v47 = 0x7FFFFFFF - (now >> 0x1F);
        if ( v47 >= (int)v38 )
        {
          v48 = (_DWORD)v38 != v47;
          v49 = now;
          if ( !v48 )
          {
            if ( (unsigned int)~now < HIDWORD(v38) )
              goto LABEL_115;
            v49 = now;
          }
          v50 = HIDWORD(v38) + v49;
          HIDWORD(v17->expires) = (v50 < HIDWORD(v38)) + v38 + (now >> 0x1F);
          LODWORD(v17->expires) = v50;
          goto LABEL_127;
        }
      }
LABEL_115:
      v37 = -1;
      v39 = 0x7FFFFFFF;
      goto LABEL_116;
    }
    if ( v20 == 6 )
    {
      if ( curl_strnequal("secure", v13, 6) )
      {
        if ( v92 || !c->running )
        {
          v17->secure = 1;
          goto LABEL_127;
        }
        goto LABEL_83;
      }
      v41 = v97;
      if ( !v90 )
        goto LABEL_127;
LABEL_87:
      if ( !curl_strnequal((char *)v41 + 0x2B74, v13, 6) || !v26 )
        goto LABEL_127;
      if ( *v25 == 46 )
      {
        ++v25;
        --v26;
      }
      if ( v26 == 9 && curl_strnequal(v25, "localhost", 9) )
      {
        v43 = domain;
      }
      else
      {
        v42 = memchr(v25, 46, v26);
        if ( !v42 || v26 - (v42 - v25) < 2 )
        {
          domain = ":";
          v43 = ":";
          goto LABEL_98;
        }
        v43 = domain;
      }
      if ( !domain )
        v43 = v25;
LABEL_98:
      is_ipnum = Curl_host_is_ipnum(v43);
      v45 = is_ipnum;
      if ( !domain )
      {
LABEL_99:
        strstore(&v17->domain, v25, v26);
        goto LABEL_100;
      }
      if ( is_ipnum )
      {
        if ( !strncmp(v25, domain, v26) && strlen(domain) == v26 )
        {
          ((void (__fastcall *)(char **, _BYTE *, size_t))(MEMORY[0xAE80] + (__int16)strstore))(&v17->domain, v25, v26);
LABEL_100:
          if ( v17->domain )
          {
            if ( !v45 )
              v17->tailmatch = 1;
            goto LABEL_127;
          }
          goto LABEL_83;
        }
      }
      else if ( cookie_tailmatch(v25, v26, domain) )
      {
        goto LABEL_99;
      }
      v46 = *(_DWORD *)(&data->set.connect_only + 2) & 0x800;
      v93 = httpheader;
      if ( v46 )
        Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v25);
      goto LABEL_127;
    }
    if ( v20 != 8 )
    {
      if ( !v90 )
        goto LABEL_127;
      v35 = freecookie;
      if ( v20 == 4 )
        goto LABEL_80;
      goto LABEL_67;
    }
    if ( curl_strnequal("httponly", v13, 8) )
      v17->httponly = 1;
    while ( 1 )
    {
LABEL_127:
      v53 = *ptr;
      if ( !*ptr )
        goto LABEL_133;
      if ( v53 != 32 && v53 != 9 )
        break;
      ++ptr;
    }
    if ( v53 != 59 )
      break;
    v13 = (char *)(ptr + 1);
  }
LABEL_133:
  v34 = (void (*)(Cookie *))MEMORY[0xAE80];
  if ( v93 )
    goto LABEL_84;
  if ( !v17->domain )
  {
    if ( domain )
    {
      v73 = Curl_cstrdup(domain);
      v17->domain = (char *)v73;
      if ( !v73 )
      {
        v34 = (void (*)(Cookie *))MEMORY[0xAE80];
        goto LABEL_84;
      }
    }
  }
  if ( !v17->path && s )
  {
    v54 = strchr(s, 63);
    v55 = v54 ? (char *)Curl_memrchr(s, 47, v54 - s) : strrchr(s, 47);
    if ( v55 )
    {
      v56 = v55 - s;
      v57 = v56 + 1;
      v58 = (char *)Curl_cmalloc(v56 + 2);
      v17->path = v58;
      if ( !v58 )
        goto LABEL_83;
      memcpy(v58, s, v57);
      v17->path[v57] = 0;
      v59 = sanitize_cookie_path(v17->path);
      v17->spath = v59;
      if ( !v59 )
        goto LABEL_83;
    }
  }
  v34 = (void (*)(Cookie *))MEMORY[0xAE80];
  if ( !v17->name )
    goto LABEL_84;
  ++data->req.setcookies;
  if ( (v17->prefix & 1) != 0 )
  {
    v34 = (void (*)(Cookie *))MEMORY[0xAE80];
    if ( !v17->secure )
      goto LABEL_84;
  }
  if ( (v17->prefix & 2) != 0 )
  {
    v34 = (void (*)(Cookie *))MEMORY[0xAE80];
    if ( !v17->secure )
      goto LABEL_84;
    v60 = v17->path;
    if ( !v60 )
      goto LABEL_84;
    if ( !strcmp(v60, "/") )
    {
      v34 = (void (*)(Cookie *))MEMORY[0xAE80];
      if ( v17->tailmatch )
        goto LABEL_84;
      goto LABEL_150;
    }
    goto LABEL_83;
  }
LABEL_150:
  if ( !c->running && c->newsession )
  {
    v34 = (void (*)(Cookie *))MEMORY[0xAE80];
    if ( !v17->expires )
      goto LABEL_84;
  }
  lastct = c->lastct;
  v17->livecookie = c->running;
  c->lastct = ++lastct;
  v17->creationtime = lastct;
  v62 = freecookie;
  if ( !noexpire )
  {
    remove_expired(c);
    v62 = (void (*)(Cookie *))MEMORY[0xAE80];
  }
  v63 = &c->cookies[((int (__fastcall *)(char *))((char *)v62 + (__int16)cookiehash))(v17->domain)];
  v64 = *v63;
  livecookie = 0;
  v66 = 0;
  v67 = 0;
  p_next = 0;
  while ( 2 )
  {
    if ( !v64 )
    {
      if ( v67 )
      {
        v67->next = v66->next;
        v69 = (void (__fastcall *)(char *))Curl_cfree;
        v70 = v66->name;
        v67->creationtime = v66->creationtime;
        v69(v70);
        Curl_cfree(v66->value);
        Curl_cfree(v66->domain);
        Curl_cfree(v66->path);
        Curl_cfree(v66->spath);
        memcpy(v66, v67, sizeof(Cookie));
        Curl_cfree(v67);
        v17 = v66;
      }
      if ( c->running && (*(_DWORD *)(&data->set.connect_only + 2) & 0x800) != 0 )
      {
        if ( livecookie )
          v71 = "Replaced";
        else
          v71 = "Added";
        Curl_infof(
          data,
          "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
          v71,
          v17->name,
          v17->value,
          v17->domain,
          v17->path,
          v17->expires);
      }
      if ( !livecookie )
      {
        if ( p_next )
          *p_next = v17;
        else
          *v63 = v17;
        ++c->numcookies;
      }
      expires = v17->expires;
      if ( expires && expires < c->next_expiration )
        c->next_expiration = expires;
      goto LABEL_180;
    }
    if ( !curl_strequal(v64->name, v17->name) )
      goto LABEL_195;
    v76 = v64->domain;
    v77 = v17->domain;
    if ( v76 )
    {
      if ( v77 && curl_strequal(v76, v77) )
      {
        spath = v64->spath;
        goto LABEL_194;
      }
      goto LABEL_195;
    }
    if ( v77 )
      goto LABEL_195;
    spath = v64->spath;
LABEL_194:
    if ( !spath )
      goto LABEL_195;
    s = v17->spath;
    if ( !s || !v64->secure || v17->secure || v92 )
      goto LABEL_195;
    v81 = strchr(spath + 1, 47);
    v82 = v81 - spath;
    if ( !v81 )
      v82 = strlen(spath);
    if ( !curl_strnequal(spath, s, v82) )
    {
LABEL_195:
      if ( v67 || !curl_strequal(v64->name, v17->name) )
        goto LABEL_201;
      v79 = v64->domain;
      v80 = v17->domain;
      if ( v79 )
      {
        if ( v80 && curl_strequal(v79, v80) && v64->tailmatch == v17->tailmatch )
        {
LABEL_215:
          v83 = v64->spath;
LABEL_216:
          v84 = v17->spath;
          if ( !v83 )
          {
            v85 = v64->spath;
            goto LABEL_218;
          }
          if ( v84 && curl_strequal(v83, v84) )
          {
            v85 = v64->spath;
LABEL_218:
            livecookie = 0;
            if ( (v85 == 0) == (v17->spath == 0) )
            {
              livecookie = v17->livecookie;
              if ( v17->livecookie )
              {
                v66 = v64;
                v67 = v17;
              }
              else
              {
                v67 = v17;
                if ( v64->livecookie )
                  goto LABEL_83;
                v66 = v64;
                livecookie = 1;
              }
            }
            goto LABEL_201;
          }
          goto LABEL_200;
        }
      }
      else if ( !v80 )
      {
        v83 = v64->spath;
        goto LABEL_216;
      }
      if ( !livecookie )
      {
LABEL_200:
        livecookie = 0;
LABEL_201:
        p_next = &v64->next;
        v64 = v64->next;
        continue;
      }
      goto LABEL_215;
    }
    break;
  }
  if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x800) == 0 )
    goto LABEL_83;
  Curl_infof(data, "cookie '%s' for domain '%s' dropped, would overlay an existing cookie", v17->name, v17->domain);
LABEL_52:
  v34 = (void (*)(Cookie *))MEMORY[0xAE80];
LABEL_84:
  ((void (*)(Cookie *))((char *)v34 + (__int16)freecookie))(v17);
LABEL_179:
  v17 = 0;
LABEL_180:
  if ( v101 != *v95 )
    _stack_chk_fail();
  return v17;
}
