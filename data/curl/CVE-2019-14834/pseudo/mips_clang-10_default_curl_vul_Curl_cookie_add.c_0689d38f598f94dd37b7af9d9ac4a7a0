Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  int v16; // $s3
  time_t v17; // $v0
  int v18; // $v0
  int v19; // $s1
  char *v20; // $s5
  char *i; // $s1
  int v22; // $s2
  size_t v23; // $v0
  size_t v24; // $s4
  char *v25; // $v1
  unsigned int v26; // $s6
  int v27; // $v0
  size_t v28; // $v0
  size_t v29; // $a3
  size_t v30; // $a2
  char *v31; // $fp
  int v32; // $v1
  char *v33; // $a0
  int j; // $v1
  int v35; // $a2
  size_t v36; // $s1
  size_t v37; // $s7
  int v38; // $s1
  int v39; // $v0
  const char *v40; // $v0
  char *v41; // $s2
  size_t v42; // $s4
  char *v43; // $v1
  int v44; // $v0
  int v45; // $v0
  const char *v46; // $s2
  int v47; // $s5
  int v48; // $at
  int v49; // $v0
  int v50; // $v0
  size_t v51; // $s2
  _BYTE *v52; // $v0
  const char *v53; // $s5
  int v54; // $s4
  int v55; // $v0
  const char *v56; // $a0
  int v57; // $v0
  size_t v58; // $v0
  const char *v59; // $v1
  size_t v60; // $s5
  size_t v61; // $s6
  int v62; // $v0
  int v63; // $v0
  int v64; // $v0
  int v65; // $v1
  _BOOL4 v66; // $v0
  int v67; // $v0
  unsigned int v68; // $v1
  _BOOL4 v69; // $a0
  int v70; // $v0
  int v71; // $v0
  int v72; // $s1
  char *v73; // $v0
  int v74; // $v0
  char *v75; // $v0
  char *v76; // $v0
  int v77; // $at
  int v78; // $s0
  time_t v79; // $s2
  int v80; // $s3
  int next_expiration_high; // $v0
  _BOOL4 v82; // $a0
  unsigned int next_expiration; // $v1
  Cookie *v84; // $s1
  Cookie **v85; // $s0
  Cookie *next; // $v0
  Cookie **v87; // $s2
  Cookie *v88; // $s7
  char v89; // $s6
  Cookie *v90; // $s3
  int v91; // $a1
  const char *spath; // $s4
  int v93; // $s5
  char *v94; // $v0
  size_t v95; // $a2
  int v96; // $a1
  int v97; // $at
  bool v98; // dc
  int v99; // $at
  int v100; // $a1
  const char *v101; // $a0
  Cookie *v102; // $at
  Cookie *v103; // $v0
  Cookie *v104; // $v1
  Cookie *v105; // $a0
  char *v106; // $a1
  char *v107; // $a2
  char *v108; // $a3
  Cookie *v109; // $t0
  Cookie *v110; // $s2
  Cookie **v111; // $s7
  Cookie *v112; // $fp
  Cookie **p_next; // $s1
  Cookie *v114; // $s4
  curl_off_t expires; // $v1
  _BOOL4 v116; // $a1
  int v117; // $at
  _BOOL4 v118; // $a1
  const char *v119; // $a2
  curl_off_t v120; // $v1
  int v121; // $at
  _BOOL4 v122; // $a1
  int v123; // $s0
  void *v124; // $v0
  const char *v125; // $v0
  char *v126; // $s2
  size_t v127; // $s4
  char *v128; // $v1
  int v129; // $v0
  int v131; // [sp+34h] [-BCh]
  int *v132; // [sp+40h] [-B0h]
  char v133; // [sp+47h] [-A9h]
  Curl_easy *v135; // [sp+4Ch] [-A4h]
  int v136; // [sp+50h] [-A0h]
  int v137; // [sp+58h] [-98h]
  int v138; // [sp+60h] [-90h]
  int v139; // [sp+64h] [-8Ch]
  CookieInfo *v140; // [sp+68h] [-88h]
  char *v141[32]; // [sp+70h] [-80h] BYREF

  v16 = 0;
  v17 = time(0u);
  if ( data->req.setcookies >= 0x32u )
    return (Cookie *)v16;
  v137 = v17;
  v140 = c;
  v18 = Curl_ccalloc(1, 48);
  if ( !v18 )
    return (Cookie *)v16;
  v19 = v18;
  v136 = noexpire;
  v20 = (char *)lineptr;
  v139 = v18;
  if ( !httpheader )
  {
    v141[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      *(_BYTE *)(v19 + 35) = 1;
      v20 = (char *)(lineptr + 10);
    }
    if ( *v20 != 35 )
    {
      v75 = strchr(v20, 13);
      if ( v75 )
        *v75 = 0;
      v76 = strchr(v20, 10);
      if ( v76 )
        *v76 = 0;
      if ( strtok_r(v20, "\t", v141) )
        JUMPOUT(0x1420);
      Curl_cfree(*(_DWORD *)(v19 + 20));
      Curl_cfree(*(_DWORD *)(v19 + 12));
      Curl_cfree(*(_DWORD *)(v19 + 16));
      Curl_cfree(*(_DWORD *)(v19 + 4));
      Curl_cfree(*(_DWORD *)(v19 + 8));
      Curl_cfree(v19);
      return (Cookie *)v16;
    }
LABEL_5:
    Curl_cfree(v19);
    return (Cookie *)v16;
  }
  if ( strlen(lineptr) >= 0x1389 )
    goto LABEL_5;
  v135 = data;
  v131 = 0x7FFFFFFF - (v137 >> 0x1F);
  v132 = (int *)(v19 + 0x18);
  v133 = 0;
  do
  {
    for ( i = v20 + 1; ; ++i )
    {
      v22 = (unsigned __int8)*v20;
      if ( v22 != 32 && v22 != 9 )
        break;
      ++v20;
    }
    v23 = strcspn(v20, ";\t\r\n=");
    if ( !v23 )
      goto LABEL_150;
    v24 = v23;
    v25 = &v20[v23];
    v26 = v23;
    while ( 1 )
    {
      v27 = (unsigned __int8)v20[v26 - 1];
      if ( v27 != 32 && v27 != 9 )
        break;
      if ( !--v26 )
      {
        v26 = 0;
        break;
      }
    }
    if ( *v25 == 61 )
    {
      v28 = strcspn(&v20[v24 + 1], ";\r\n");
      v29 = v24 + v28;
      v30 = 0;
      if ( v28 )
      {
        v31 = &i[v29];
        while ( 1 )
        {
          v32 = (unsigned __int8)*(v31 - 1);
          if ( v32 != 32 && v32 != 9 )
            break;
          --v28;
          --v31;
          if ( !v28 )
          {
            v36 = v29;
            v31 = &v20[v24 + 1];
            goto LABEL_37;
          }
        }
        v33 = &i[v24];
        for ( j = 0; j != v28; ++j )
        {
          v35 = (unsigned __int8)v33[j];
          if ( v35 != 32 && v35 != 9 )
          {
            v36 = v29;
            v30 = v28 - j;
            v31 = &v33[j];
            goto LABEL_37;
          }
        }
        v36 = v29;
        v30 = 0;
      }
      else
      {
        v36 = v24 + v28;
        v31 = &v20[v24 + 1];
      }
LABEL_37:
      v37 = v30;
      if ( ((int (__fastcall *)(char *, int))memchr)(v31, 9) )
      {
        Curl_cfree(*(_DWORD *)(v139 + 20));
        Curl_cfree(*(_DWORD *)(v139 + 12));
        Curl_cfree(*(_DWORD *)(v139 + 16));
        Curl_cfree(*(_DWORD *)(v139 + 4));
        Curl_cfree(*(_DWORD *)(v139 + 8));
        Curl_cfree(v139);
        v16 = 0;
        if ( (*((_BYTE *)&data->set + 1338) & 8) == 0 )
          return (Cookie *)v16;
        goto LABEL_224;
      }
      v138 = (int)&v20[v36 + 1];
      v38 = 1;
    }
    else
    {
      v138 = (int)v25;
      v37 = 0;
      v38 = 0;
      v31 = 0;
    }
    if ( v26 >= 0xFFF || v37 >= 0xFFF || v37 + v26 >= 0x1001 )
    {
      Curl_cfree(*(_DWORD *)(v139 + 20));
      Curl_cfree(*(_DWORD *)(v139 + 12));
      Curl_cfree(*(_DWORD *)(v139 + 16));
      Curl_cfree(*(_DWORD *)(v139 + 4));
      Curl_cfree(*(_DWORD *)(v139 + 8));
      Curl_cfree(v139);
      v16 = 0;
      if ( (*((_BYTE *)&data->set + 1338) & 8) == 0 )
        return (Cookie *)v16;
LABEL_224:
      ((void (*)(void))Curl_infof)();
      return (Cookie *)v16;
    }
    if ( v22 == 95 && v26 >= 7 && v20[1] == 95 )
    {
      if ( curl_strnequal("__Secure-", v20, 9) )
      {
        *(_BYTE *)(v139 + 40) |= 1u;
      }
      else if ( curl_strnequal("__Host-", v20, 7) )
      {
        *(_BYTE *)(v139 + 40) |= 2u;
      }
    }
    if ( *(_DWORD *)(v139 + 4) )
    {
      if ( !v37 )
      {
        if ( v26 == 8 )
        {
          if ( curl_strnequal("httponly", v20, 8) )
          {
            *(_BYTE *)(v139 + 35) = 1;
            v20 = (char *)v138;
            goto LABEL_150;
          }
        }
        else if ( v26 == 6 && curl_strnequal("secure", v20, 6) )
        {
          if ( !secure && v140->running )
            goto LABEL_303;
          *(_BYTE *)(v139 + 33) = 1;
          v20 = (char *)v138;
          goto LABEL_150;
        }
        if ( !v38 )
        {
          v20 = (char *)v138;
          goto LABEL_150;
        }
      }
      switch ( v26 )
      {
        case 7u:
          if ( curl_strnequal("version", v20, 7) )
          {
            v20 = (char *)v138;
          }
          else if ( curl_strnequal("max-age", v20, 7) )
          {
            if ( *v31 == 0x22 )
              ++v31;
            v55 = ((int (__fastcall *)(char *, _DWORD, int, int *))curlx_strtoofft)(v31, 0, 10, v132);
            if ( v55 )
            {
              v20 = (char *)v138;
              if ( v55 == 2 )
              {
                v132[1] = 1;
                *v132 = 0;
              }
              else if ( v55 == 1 )
              {
                v132[1] = -1;
                *v132 = 0x7FFFFFFF;
              }
            }
            else
            {
              v67 = *v132;
              v68 = v132[1];
              v20 = (char *)v138;
              if ( *(_QWORD *)v132 )
              {
                v69 = v131 >= v67;
                if ( v131 == v67 )
                  v69 = ~v137 >= v68;
                if ( v69 )
                {
                  v132[1] = v68 + v137;
                  *v132 = v67 + (v137 >> 0x1F) + __CFADD__(v68, v137);
                }
                else
                {
                  v132[1] = -1;
                  *v132 = 0x7FFFFFFF;
                }
              }
              else
              {
                v132[1] = 1;
                *v132 = 0;
              }
            }
          }
          else if ( curl_strnequal("expires", v20, 7) )
          {
            if ( v37 < 0x80 && !*(_QWORD *)v132 )
            {
              memcpy(v141, v31, v37);
              *((_BYTE *)v141 + v37) = 0;
              v63 = ((int (__fastcall *)(char **))Curl_getdate_capped)(v141);
              *(_QWORD *)v132 = v63;
              if ( v63 )
              {
                if ( v63 < 0 )
                {
                  v132[1] = 0;
                  *v132 = 0;
                }
              }
              else
              {
                v132[1] = 1;
                *v132 = 0;
              }
            }
            v20 = (char *)v138;
          }
          else
          {
            v20 = (char *)v138;
          }
          break;
        case 6u:
          v49 = curl_strnequal("domain", v20, 6);
          if ( !v37 )
          {
            v20 = (char *)v138;
            break;
          }
          if ( !v49 )
          {
            v20 = (char *)v138;
            break;
          }
          v50 = (unsigned __int8)*v31;
          if ( v50 == 0x2E )
            ++v31;
          v51 = (__PAIR64__(v37, v50 ^ 0x2Eu) - 1) >> 32;
          if ( v51 == 9 && curl_strnequal(v31, "localhost", 9)
            || (v52 = (_BYTE *)memchr(v31, 46, v51)) != 0 && (unsigned int)(&v31[v51] - v52) >= 2 )
          {
            v56 = v31;
            v53 = domain;
            if ( domain )
              v56 = domain;
            v57 = ((int (__fastcall *)(const char *))Curl_host_is_ipnum)(v56);
            v54 = v57;
            if ( domain )
            {
              if ( !v57 )
                goto LABEL_110;
LABEL_90:
              domain = v53;
              if ( strncmp(v31, v53, v51) )
                goto LABEL_114;
              v54 = 1;
              if ( v51 != strlen(v53) )
                goto LABEL_114;
            }
            else
            {
              domain = 0;
            }
          }
          else
          {
            v53 = ":";
            if ( ((int (__fastcall *)(const char *))Curl_host_is_ipnum)(v53) )
              goto LABEL_90;
LABEL_110:
            v58 = strlen(v53);
            v59 = v53;
            domain = v53;
            if ( v58 < v51
              || (v60 = v58, v61 = (size_t)&v59[v58 - v51], !curl_strnequal(v31, v61, v51))
              || (v54 = 0, v60 != v51) && *(_BYTE *)(v61 - 1) != 46 )
            {
LABEL_114:
              v133 = 1;
              if ( (*((_BYTE *)&data->set + 1338) & 8) != 0 )
                Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v31);
              v20 = (char *)v138;
              break;
            }
          }
          Curl_cfree(*(_DWORD *)(v139 + 20));
          v64 = Curl_memdup(v31, v51 + 1);
          *(_DWORD *)(v139 + 20) = v64;
          if ( !v64 )
            goto LABEL_303;
          *(_BYTE *)(v64 + v51) = 0;
          v65 = *(_DWORD *)(v139 + 20);
          v66 = v65 == 0;
          if ( v54 | v66 )
          {
            if ( !v65 )
              goto LABEL_303;
            v133 |= v66;
            v20 = (char *)v138;
          }
          else
          {
            *(_BYTE *)(v139 + 32) = 1;
            v20 = (char *)v138;
          }
          break;
        case 4u:
          if ( curl_strnequal("path", v20, 4) )
          {
            Curl_cfree(*(_DWORD *)(v139 + 12));
            v39 = Curl_memdup(v31, v37 + 1);
            *(_DWORD *)(v139 + 12) = v39;
            if ( !v39 )
              goto LABEL_303;
            *(_BYTE *)(v39 + v37) = 0;
            if ( !*(_DWORD *)(v139 + 12) )
              goto LABEL_303;
            Curl_cfree(*(_DWORD *)(v139 + 16));
            v40 = (const char *)Curl_cstrdup(*(_DWORD *)(v139 + 12));
            if ( !v40 )
              goto LABEL_291;
            v41 = (char *)v40;
            v42 = strlen(v40);
            if ( *v41 == 34 )
              memmove(v41, v41 + 1, v42--);
            if ( v42 )
            {
              v43 = &v41[v42 - 1];
              if ( *v43 == 34 )
              {
                *v43 = 0;
                --v42;
              }
            }
            else
            {
              v42 = 0;
            }
            if ( *v41 == 47 )
            {
              v20 = (char *)v138;
              if ( v42 && v41[v42 - 1] == 47 )
                v41[v42 - 1] = 0;
              *(_DWORD *)(v139 + 16) = v41;
            }
            else
            {
              Curl_cfree(v41);
              v62 = Curl_memdup("/", 2);
              if ( !v62 )
              {
LABEL_291:
                *(_DWORD *)(v139 + 16) = 0;
                goto LABEL_303;
              }
              *(_BYTE *)(v62 + 1) = 0;
              v20 = (char *)v138;
              *(_DWORD *)(v139 + 16) = v62;
            }
          }
          else
          {
            v20 = (char *)v138;
          }
          break;
        default:
          v20 = (char *)v138;
          break;
      }
    }
    else
    {
      if ( !v38 )
        goto LABEL_303;
      Curl_cfree(0);
      v44 = Curl_memdup(v20, v26 + 1);
      *(_DWORD *)(v139 + 4) = v44;
      if ( v44 )
        *(_BYTE *)(v44 + v26) = 0;
      Curl_cfree(*(_DWORD *)(v139 + 8));
      v45 = Curl_memdup(v31, v37 + 1);
      *(_DWORD *)(v139 + 8) = v45;
      if ( v45 )
        *(_BYTE *)(v45 + v37) = 0;
      v46 = *(const char **)(v139 + 4);
      if ( !v46 )
        goto LABEL_303;
      v47 = *(_DWORD *)(v139 + 8);
      if ( !v47 )
        goto LABEL_303;
      v48 = *(unsigned __int8 *)(v47 + strcspn(*(const char **)(v139 + 8), invalid_octets_badoctets));
      v20 = (char *)v138;
      if ( v48 || v46[strcspn(v46, invalid_octets_badoctets)] )
      {
        if ( (*((_BYTE *)&data->set + 1338) & 8) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
        goto LABEL_303;
      }
    }
LABEL_150:
    ++v20;
    while ( 1 )
    {
      v70 = (unsigned __int8)*(v20 - 1);
      if ( v70 != 32 && v70 != 9 )
        break;
      ++v20;
    }
  }
  while ( v70 == 59 );
  if ( (v133 & 1) != 0 )
    goto LABEL_303;
  if ( domain )
  {
    if ( !*(_DWORD *)(v139 + 20) )
    {
      v71 = Curl_cstrdup(domain);
      *(_DWORD *)(v139 + 20) = v71;
      if ( !v71 )
        goto LABEL_303;
    }
  }
  v72 = v139;
  if ( !path || *(_DWORD *)(v139 + 12) )
    goto LABEL_300;
  v73 = strchr(path, 63);
  v74 = v73 ? ((int (__fastcall *)(const char *, int, int))Curl_memrchr)(path, 47, v73 - path) : (int)strrchr(path, 47);
  if ( !v74 )
    goto LABEL_300;
  v123 = v74 - (_DWORD)path;
  v124 = (void *)Curl_cmalloc(v74 - (_DWORD)path + 2);
  *(_DWORD *)(v139 + 12) = v124;
  if ( !v124 )
  {
LABEL_303:
    Curl_cfree(*(_DWORD *)(v139 + 20));
    Curl_cfree(*(_DWORD *)(v139 + 12));
    Curl_cfree(*(_DWORD *)(v139 + 16));
    Curl_cfree(*(_DWORD *)(v139 + 4));
    Curl_cfree(*(_DWORD *)(v139 + 8));
    Curl_cfree(v139);
    return 0;
  }
  memcpy(v124, path, v123 + 1);
  v72 = v139;
  *(_BYTE *)(*(_DWORD *)(v139 + 12) + v123 + 1) = 0;
  v125 = (const char *)Curl_cstrdup(*(_DWORD *)(v139 + 12));
  if ( !v125 )
  {
LABEL_302:
    *(_DWORD *)(v139 + 16) = 0;
    goto LABEL_303;
  }
  v126 = (char *)v125;
  v127 = strlen(v125);
  if ( *v126 == 34 )
    memmove(v126, v126 + 1, v127--);
  if ( v127 )
  {
    v128 = &v126[v127 - 1];
    if ( *v128 == 34 )
    {
      *v128 = 0;
      --v127;
    }
  }
  else
  {
    v127 = 0;
  }
  if ( *v126 != 47 )
  {
    Curl_cfree(v126);
    v129 = Curl_memdup("/", 2);
    if ( v129 )
    {
      v126 = (char *)v129;
      *(_BYTE *)(v129 + 1) = 0;
      goto LABEL_299;
    }
    goto LABEL_302;
  }
  if ( v127 && v126[v127 - 1] == 47 )
    v126[v127 - 1] = 0;
LABEL_299:
  *(_DWORD *)(v139 + 16) = v126;
LABEL_300:
  if ( !*(_DWORD *)(v72 + 4) )
    goto LABEL_303;
  ++v135->req.setcookies;
  v16 = 0;
  if ( (*(_BYTE *)(v139 + 40) & 1) != 0 && !*(_BYTE *)(v139 + 33)
    || (*(_BYTE *)(v139 + 40) & 2) != 0
    && (!*(_BYTE *)(v139 + 33) || (v101 = *(const char **)(v139 + 12)) == 0
                               || strcmp(v101, "/")
                               || *(_BYTE *)(v139 + 32))
    || !v140->running && v140->newsession && !*(_QWORD *)(v139 + 24) )
  {
    Curl_cfree(*(_DWORD *)(v139 + 20));
    Curl_cfree(*(_DWORD *)(v139 + 12));
    Curl_cfree(*(_DWORD *)(v139 + 16));
    Curl_cfree(*(_DWORD *)(v139 + 4));
    Curl_cfree(*(_DWORD *)(v139 + 8));
    Curl_cfree(v139);
    return (Cookie *)v16;
  }
  *(_BYTE *)(v139 + 34) = v140->running;
  v77 = v140->lastct + 1;
  v140->lastct = v77;
  *(_DWORD *)(v139 + 36) = v77;
  if ( !v136 )
  {
    v78 = 0;
    v79 = time(0u);
    v80 = v79 >> 0x1F;
    next_expiration_high = HIDWORD(v140->next_expiration);
    v82 = v79 >> 0x1F >= next_expiration_high;
    next_expiration = v140->next_expiration;
    if ( next_expiration_high == v79 >> 0x1F )
      v82 = v79 >= next_expiration;
    if ( v82 || !(~next_expiration | next_expiration_high ^ 0x7FFFFFFF) )
    {
      LODWORD(v140->next_expiration) = -1;
      HIDWORD(v140->next_expiration) = 0x7FFFFFFF;
      do
      {
        v111 = &v140->cookies[v78];
        v112 = *v111;
        if ( *v111 )
        {
          p_next = 0;
          do
          {
            v114 = v112;
            expires = v112->expires;
            v112 = v112->next;
            if ( !expires )
              goto LABEL_259;
            v116 = SHIDWORD(expires) >= v80;
            if ( HIDWORD(expires) == v80 )
              v116 = (unsigned int)expires >= v79;
            if ( v116 )
            {
LABEL_259:
              if ( expires )
              {
                v117 = HIDWORD(v140->next_expiration);
                v118 = SHIDWORD(expires) >= v117;
                if ( HIDWORD(expires) == v117 )
                  v118 = (unsigned int)expires >= LODWORD(v140->next_expiration);
                if ( !v118 )
                  v140->next_expiration = expires;
                p_next = &v114->next;
              }
              else
              {
                p_next = &v114->next;
              }
            }
            else
            {
              if ( p_next )
                *p_next = v112;
              else
                *v111 = v112;
              --v140->numcookies;
              Curl_cfree(v114->domain);
              Curl_cfree(v114->path);
              Curl_cfree(v114->spath);
              Curl_cfree(v114->name);
              Curl_cfree(v114->value);
              Curl_cfree(v114);
            }
          }
          while ( v112 );
        }
        ++v78;
      }
      while ( v78 != 63 );
    }
  }
  v84 = (Cookie *)v139;
  v85 = &v140->cookies[cookiehash(*(const char *const *)(v139 + 20))];
  next = *v85;
  if ( !*v85 )
  {
    v90 = 0;
    v89 = 0;
    goto LABEL_241;
  }
  v87 = 0;
  v88 = 0;
  v89 = 0;
  while ( 2 )
  {
    v90 = next;
    if ( ((int (__fastcall *)(char *, _DWORD))curl_strequal)(next->name, *(_DWORD *)(v139 + 4)) )
    {
      v91 = *(_DWORD *)(v139 + 20);
      if ( v90->domain )
      {
        if ( v91 && curl_strequal() )
        {
LABEL_188:
          spath = v90->spath;
          if ( spath )
          {
            v93 = *(_DWORD *)(v139 + 16);
            if ( v93 )
            {
              if ( v90->secure && !*(_BYTE *)(v139 + 33) && !secure )
              {
                v94 = strchr(spath + 1, 47);
                v95 = v94 ? v94 - spath : strlen(spath);
                if ( curl_strnequal(spath, v93, v95) )
                {
                  if ( v135 && (*((_BYTE *)&v135->set + 1338) & 8) != 0 )
                    ((void (*)(void))Curl_infof)();
                  goto LABEL_303;
                }
              }
            }
          }
        }
      }
      else if ( !v91 )
      {
        goto LABEL_188;
      }
    }
    if ( !v87 )
    {
      if ( !((int (__fastcall *)(char *, _DWORD))curl_strequal)(v90->name, *(_DWORD *)(v139 + 4)) )
      {
        v87 = 0;
        goto LABEL_183;
      }
      v96 = *(_DWORD *)(v139 + 20);
      if ( v90->domain )
      {
        if ( v96 && curl_strequal() )
        {
          v97 = v89 & 1 | (v90->tailmatch == *(unsigned __int8 *)(v139 + 32));
          v89 = 0;
          if ( !v97 )
          {
            v87 = 0;
            goto LABEL_183;
          }
        }
        else
        {
          v98 = (v89 & 1) != 0;
          v89 = 0;
          if ( !v98 )
          {
            v87 = 0;
            goto LABEL_183;
          }
        }
      }
      else
      {
        v99 = v89 & 1 | (v96 == 0);
        v89 = 0;
        if ( !v99 )
        {
          v87 = 0;
          goto LABEL_183;
        }
      }
      v100 = *(_DWORD *)(v139 + 16);
      if ( v90->spath )
      {
        if ( v100 )
        {
          if ( !curl_strequal() )
          {
            v89 = 0;
            v87 = 0;
            goto LABEL_183;
          }
          v89 = 0;
          v87 = 0;
          if ( (v90->spath != 0) == (*(_DWORD *)(v139 + 16) == 0) )
            goto LABEL_183;
        }
        else if ( !*(_DWORD *)(v139 + 16) )
        {
          v89 = 0;
          v87 = 0;
          goto LABEL_183;
        }
      }
      else
      {
        v89 = 0;
        v87 = 0;
        if ( v100 )
          goto LABEL_183;
      }
      v89 = 1;
      if ( *(_BYTE *)(v139 + 34) )
      {
        v88 = v90;
        v87 = (Cookie **)v139;
      }
      else
      {
        v88 = v90;
        v87 = (Cookie **)v139;
        if ( v90->livecookie )
          goto LABEL_303;
      }
    }
LABEL_183:
    next = v90->next;
    if ( v90->next )
      continue;
    break;
  }
  if ( v87 )
  {
    *v87 = v88->next;
    v87[9] = (Cookie *)v88->creationtime;
    Curl_cfree(v88->name);
    Curl_cfree(v88->value);
    Curl_cfree(v88->domain);
    Curl_cfree(v88->path);
    Curl_cfree(v88->spath);
    v102 = v87[7];
    v103 = v87[8];
    v104 = v87[9];
    v105 = v87[10];
    v106 = (char *)v87[3];
    v107 = (char *)v87[4];
    v108 = (char *)v87[5];
    v109 = v87[6];
    *((_DWORD *)&v88->prefix + 1) = v87[11];
    *(_DWORD *)&v88->prefix = v105;
    v88->creationtime = (int)v104;
    *(_DWORD *)&v88->tailmatch = v103;
    LODWORD(v88->expires) = v102;
    HIDWORD(v88->expires) = v109;
    v88->domain = v108;
    v88->spath = v107;
    v88->path = v106;
    v88->value = (char *)v87[2];
    v88->name = (char *)v87[1];
    v88->next = *v87;
    Curl_cfree(v87);
    v84 = v88;
  }
LABEL_241:
  if ( v135 && v140->running && (*((_BYTE *)&v135->set + 1338) & 8) != 0 )
  {
    v110 = v84;
    v119 = "Added";
    if ( (v89 & 1) != 0 )
      v119 = "Replaced";
    Curl_infof(v135, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld", v119, v84->name);
    if ( (v89 & 1) == 0 )
    {
LABEL_270:
      if ( v90 )
        v90->next = v110;
      else
        *v85 = v110;
      ++v140->numcookies;
    }
  }
  else
  {
    v110 = v84;
    if ( (v89 & 1) == 0 )
      goto LABEL_270;
  }
  v120 = v110->expires;
  if ( !v120 )
    return v110;
  v121 = HIDWORD(v140->next_expiration);
  v122 = SHIDWORD(v120) >= v121;
  if ( HIDWORD(v120) == v121 )
    v122 = (unsigned int)v120 >= LODWORD(v140->next_expiration);
  if ( !v122 )
    v140->next_expiration = v120;
  return v110;
}
