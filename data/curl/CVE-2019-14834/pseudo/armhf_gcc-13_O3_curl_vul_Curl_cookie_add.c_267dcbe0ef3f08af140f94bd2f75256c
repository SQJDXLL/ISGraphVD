Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  _BOOL4 v8; // r8
  char *v10; // r7
  time_t v11; // r0
  unsigned int setcookies; // r3
  Cookie *v13; // r9
  int v14; // r10
  bool v15; // zf
  size_t v16; // r6
  int v17; // t1
  bool v18; // zf
  char *v19; // r2
  char *v20; // r3
  int v21; // r5
  int v22; // t1
  unsigned int v23; // r1
  bool v24; // zf
  Curl_easy *v25; // r5
  unsigned __int8 *v26; // r11
  size_t v27; // r0
  size_t v28; // r8
  char *v29; // r1
  int v30; // r3
  int v31; // t1
  bool v32; // zf
  unsigned __int8 *v33; // r2
  int v34; // r3
  int v35; // t1
  bool v36; // zf
  bool v37; // cc
  char *v38; // r3
  _BOOL4 v39; // r3
  _BOOL4 v40; // r3
  unsigned __int8 prefix; // r3
  Cookie *v42; // r6
  char *v44; // r0
  char *v45; // r0
  char *v46; // r0
  char *v47; // r7
  int v48; // r4
  int v49; // r0
  char v50; // r2
  int v51; // r0
  char v52; // r3
  const char *name; // r5
  char *value; // r6
  char *v55; // r7
  _BYTE *v56; // r0
  int v57; // r0
  int is_ipnum; // r5
  const char *v59; // r6
  int v60; // r0
  size_t v61; // r0
  size_t v62; // r6
  const char *v63; // r7
  int v64; // r0
  char *v65; // r0
  int v66; // r0
  unsigned int expires; // r3
  unsigned int expires_high; // r1
  int v69; // r12
  int v70; // r2
  unsigned int v71; // kr04_4
  char *v72; // r3
  int v73; // r4
  char *v74; // r8
  int v75; // r0
  char *v76; // r1
  int v77; // r4
  char v78; // r5
  char *v79; // r0
  int v80; // r3
  int v81; // r0
  char v82; // r3
  int v83; // r0
  int (__fastcall *v84)(void *); // r4
  const char *v85; // r0
  char *v86; // r4
  char *v87; // r0
  int v88; // r3
  _BOOL4 v89; // r4
  char *v90; // r0
  int v91; // r3
  int v92; // r4
  char *v93; // r0
  _BOOL4 v94; // r3
  int v95; // r0
  int v96; // r4
  int v97; // r3
  int v98; // r8
  char *v99; // r0
  int v100; // r3
  int v101; // r0
  char v102; // r3
  int v103; // r0
  int (__fastcall *v104)(char *); // r4
  int v105; // r0
  int (__fastcall *v106)(void *); // r2
  int v107; // r4
  int v108; // r5
  char *v109; // r1
  char *v110; // r0
  int v111; // r3
  char *v112; // r0
  _BOOL4 v113; // r3
  int v114; // r0
  int v115; // r3
  int v116; // r0
  int (__fastcall *v117)(void *); // r2
  int v118; // r4
  int v119; // r0
  int v120; // r0
  char *v121; // r3
  _BOOL4 v122; // r2
  CookieInfo *v123; // r2
  int v124; // r3
  size_t v125; // r0
  Cookie *v126; // r4
  size_t v127; // r10
  Cookie *livecookie; // r7
  Cookie *v129; // r5
  Cookie *next; // r3
  char *v131; // r0
  char *v132; // r1
  const char *spath; // r8
  char *v134; // r11
  char *v135; // r0
  char *v136; // r1
  char *v137; // r0
  char *v138; // r1
  char *v139; // r2
  char *v140; // r3
  void (__fastcall *v141)(Cookie *); // r8
  char *v142; // r1
  int v143; // r2
  int v144; // r3
  int creationtime; // r1
  int v146; // r2
  int v147; // r3
  const char *v148; // r2
  char *v149; // r0
  char *v150; // r1
  curl_off_t v151; // r2
  CookieInfo *v152; // r12
  char *v153; // r0
  size_t v154; // r2
  const char *v155; // r0
  char *v156; // r0
  int v157; // r3
  int v158; // r5
  char *v159; // r1
  bool v160; // zf
  void *v161; // r0
  int v162; // r0
  curl_off_t v163; // r2
  char *v164; // r0
  char *v165; // r3
  int v166; // r3
  size_t v167; // r5
  char *v168; // r0
  char *v169; // r0
  int v170; // r0
  char *v171; // r1
  int v172; // [sp+0h] [bp-100h] BYREF
  char *delim; // [sp+18h] [bp-E8h]
  const char *httpheadera; // [sp+1Ch] [bp-E4h]
  CookieInfo *ca; // [sp+20h] [bp-E0h]
  Curl_easy *dataa; // [sp+24h] [bp-DCh]
  CookieInfo *cookies; // [sp+28h] [bp-D8h]
  const char *domain_1; // [sp+2Ch] [bp-D4h]
  const char *noexpirea; // [sp+34h] [bp-CCh]
  time_t now; // [sp+38h] [bp-C8h]
  _BOOL4 v181; // [sp+3Ch] [bp-C4h]
  int badcookie; // [sp+40h] [bp-C0h]
  const char *v183; // [sp+44h] [bp-BCh]
  Curl_easy *v184; // [sp+48h] [bp-B8h]
  char *reject; // [sp+4Ch] [bp-B4h]
  char *tok_buf; // [sp+50h] [bp-B0h] BYREF
  char date[128]; // [sp+54h] [bp-ACh] BYREF

  dataa = (Curl_easy *)httpheader;
  v8 = httpheader;
  v181 = noexpire;
  domain_1 = (const char *)data;
  cookies = c;
  noexpirea = domain;
  now = secure;
  v10 = (char *)lineptr;
  v11 = time(0u);
  setcookies = data->req.setcookies;
  badcookie = v11;
  if ( setcookies > 0x31 )
    return 0;
  v13 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v13 )
    return 0;
  if ( v8 )
  {
    if ( strlen(lineptr) <= (unsigned int)&loc_1388 )
    {
      v14 = *(unsigned __int8 *)lineptr;
      httpheadera = ";\t\r\n=";
      reject = (char *)&badoctets_0;
      v183 = "path";
      v184 = 0;
      if ( v14 )
        goto LABEL_6;
LABEL_17:
      v16 = strcspn(v10, httpheadera);
      if ( !v16 )
      {
LABEL_55:
        if ( v184 )
          goto LABEL_66;
        v39 = v13->domain == 0;
        if ( !noexpirea )
          v39 = 0;
        if ( v39 )
        {
          v170 = Curl_cstrdup(noexpirea);
          v13->domain = (char *)v170;
          if ( !v170 )
            goto LABEL_66;
        }
        v40 = v13->path == 0;
        if ( !path )
          v40 = 0;
        if ( v40 )
        {
          v164 = strchr(path, 63);
          v165 = v164 ? (char *)Curl_memrchr(path, 47, v164 - path) : strrchr(path, 47);
          if ( v165 )
          {
            v166 = v165 - path;
            v167 = v166 + 1;
            v168 = (char *)Curl_cmalloc(v166 + 2);
            v13->path = v168;
            if ( !v168 )
              goto LABEL_66;
            memcpy(v168, path, v167);
            v13->path[v167] = 0;
            v169 = sanitize_cookie_path(v13->path);
            v13->spath = v169;
            if ( !v169 )
              goto LABEL_66;
          }
        }
        if ( !v13->name )
          goto LABEL_66;
        ++domain_1[276];
        prefix = v13->prefix;
        if ( (prefix & 1) != 0 )
          goto LABEL_243;
        goto LABEL_64;
      }
      while ( 1 )
      {
        v19 = &v10[v16];
        v20 = &v10[v16];
        while ( 1 )
        {
          v22 = (unsigned __int8)*--v20;
          v21 = v22;
          v23 = v16;
          v24 = v22 == 9;
          if ( v22 != 9 )
            v24 = v21 == 32;
          v25 = (Curl_easy *)v24;
          --v16;
          if ( !v24 )
            break;
          if ( !v16 )
          {
            if ( *v19 == 61 )
              goto LABEL_28;
            if ( v13->name )
            {
LABEL_128:
              v14 = (unsigned __int8)*v19;
              v10 = v19;
              goto LABEL_54;
            }
LABEL_66:
            freecookie(v13);
            return 0;
          }
        }
        if ( *v19 == 61 )
        {
          v16 = v23;
LABEL_28:
          v26 = (unsigned __int8 *)(v19 + 1);
          ca = (CookieInfo *)v19;
          v27 = strcspn(v19 + 1, ";\r\n");
          v28 = v27;
          delim = (char *)&v26[v27];
          if ( v27 )
          {
            v29 = (char *)ca->cookies + v27 + 1;
            do
            {
              v31 = (unsigned __int8)*--v29;
              v30 = v31;
              v32 = v31 == 9;
              if ( v31 != 9 )
                v32 = v30 == 32;
              if ( !v32 )
              {
                v33 = v26;
                while ( 1 )
                {
                  v26 = v33;
                  v35 = *v33++;
                  v34 = v35;
                  v36 = v35 == 9;
                  if ( v35 != 9 )
                    v36 = v34 == 32;
                  if ( !v36 )
                    break;
                  if ( !--v28 )
                  {
                    v26 = v33;
LABEL_40:
                    v37 = v28 > 0xFFE;
                    if ( v28 <= 0xFFE )
                      v37 = v16 > 0xFFE;
                    if ( !v37 && v16 + v28 <= 0x1000 )
                    {
                      v25 = dataa;
                      goto LABEL_45;
                    }
LABEL_317:
                    freecookie(v13);
                    if ( (domain_1[1618] & 0x10) != 0 )
                      Curl_infof(domain_1, "oversized cookie dropped, name/val %zu + %zu bytes", v16, v28);
                    return 0;
                  }
                }
                if ( !memchr(v26, 9, v28) )
                  goto LABEL_40;
                freecookie(v13);
                if ( (domain_1[1618] & 0x10) != 0 )
                  Curl_infof(domain_1, "cookie contains TAB, dropping");
                return 0;
              }
              --v28;
            }
            while ( v28 );
          }
          if ( v16 > 0xFFE )
          {
            v28 = 0;
            goto LABEL_317;
          }
          v25 = dataa;
          v28 = 0;
        }
        else
        {
          v16 = v23;
          if ( v23 > 0xFFE )
          {
            v28 = (size_t)v25;
            goto LABEL_317;
          }
          v26 = (unsigned __int8 *)v25;
          v28 = (size_t)v25;
          delim = v19;
        }
LABEL_45:
        if ( v16 <= 6 )
        {
          if ( !v13->name )
            goto LABEL_83;
          if ( v28 )
          {
            if ( v16 == 4 )
              goto LABEL_131;
            if ( v16 != 6 )
            {
LABEL_52:
              v10 = delim;
              v38 = delim;
LABEL_53:
              v14 = (unsigned __int8)*v38;
              goto LABEL_54;
            }
            if ( !curl_strnequal("domain", v10, 6) )
              goto LABEL_96;
            if ( *v26 == 46 )
            {
              --v28;
              ++v26;
            }
            if ( v28 == 9 && curl_strnequal(v26, "localhost", 9)
              || (v56 = memchr(v26, 46, v28)) != 0 && v28 - (v56 - v26) > 1 )
            {
              if ( !noexpirea )
              {
                is_ipnum = Curl_host_is_ipnum(v26);
LABEL_113:
                Curl_cfree(v13->domain);
                v60 = Curl_memdup(v26, v28 + 1);
                v13->domain = (char *)v60;
                if ( !v60 )
                  goto LABEL_66;
                *(_BYTE *)(v60 + v28) = 0;
                if ( !v13->domain )
                  goto LABEL_66;
                if ( !is_ipnum )
                {
                  v13->tailmatch = 1;
                  v14 = (unsigned __int8)*delim;
                  v10 = delim;
                  goto LABEL_54;
                }
                goto LABEL_96;
              }
              is_ipnum = Curl_host_is_ipnum(noexpirea);
              if ( !is_ipnum )
                goto LABEL_120;
LABEL_111:
              v59 = noexpirea;
              if ( !strncmp((const char *)v26, noexpirea, v28) && strlen(v59) == v28 )
                goto LABEL_113;
            }
            else
            {
              v57 = Curl_host_is_ipnum(&LC1);
              noexpirea = (const char *)&LC1;
              is_ipnum = v57;
              if ( v57 )
                goto LABEL_111;
LABEL_120:
              v61 = strlen(noexpirea);
              v62 = v61;
              if ( v28 <= v61 )
              {
                v63 = &noexpirea[v61 - v28];
                if ( curl_strnequal(v26, v63, v28) )
                {
                  if ( v28 == v62 || *(v63 - 1) == 46 )
                    goto LABEL_113;
                }
              }
            }
            if ( (domain_1[1618] & 0x10) != 0 )
              Curl_infof(domain_1, "skipped cookie with bad tailmatch domain: %s", (const char *)v26);
            v10 = delim;
            v14 = (unsigned __int8)*delim;
            v184 = dataa;
            goto LABEL_54;
          }
          v19 = delim;
          if ( v16 != 6 )
          {
            if ( !v25 )
              goto LABEL_128;
            if ( v16 != 4 )
            {
              v10 = delim;
              v38 = delim;
              goto LABEL_53;
            }
LABEL_131:
            if ( curl_strnequal(v183, v10, 4) )
            {
              Curl_cfree(v13->path);
              v64 = Curl_memdup(v26, v28 + 1);
              v13->path = (char *)v64;
              if ( !v64 )
                goto LABEL_66;
              *(_BYTE *)(v64 + v28) = 0;
              if ( !v13->path )
                goto LABEL_66;
              Curl_cfree(v13->spath);
              v65 = sanitize_cookie_path(v13->path);
              v13->spath = v65;
              if ( !v65 )
                goto LABEL_66;
            }
LABEL_96:
            v10 = delim;
            v14 = (unsigned __int8)*delim;
            goto LABEL_54;
          }
          if ( !curl_strnequal("secure", v10, 6) )
          {
            if ( v25 )
              curl_strnequal("domain", v10, 6);
            goto LABEL_96;
          }
          if ( !now && cookies->running )
            goto LABEL_66;
          v13->secure = 1;
          v14 = (unsigned __int8)*delim;
          v10 = delim;
          goto LABEL_54;
        }
        if ( v14 == 95 && v10[1] == 95 )
        {
          if ( curl_strnequal("__Secure-", v10, 9) )
          {
            v13->prefix |= 1u;
            if ( !v13->name )
              goto LABEL_83;
            goto LABEL_48;
          }
          if ( curl_strnequal("__Host-", v10, 7) )
          {
            v13->prefix |= 2u;
            if ( !v13->name )
            {
LABEL_83:
              if ( !v25 )
                goto LABEL_66;
              Curl_cfree(0);
              v49 = Curl_memdup(v10, v16 + 1);
              if ( v49 )
                v50 = 0;
              v13->name = (char *)v49;
              if ( v49 )
                *(_BYTE *)(v49 + v16) = v50;
              Curl_cfree(v13->value);
              v51 = Curl_memdup(v26, v28 + 1);
              if ( v51 )
                v52 = 0;
              v13->value = (char *)v51;
              if ( v51 )
                *(_BYTE *)(v51 + v28) = v52;
              name = v13->name;
              if ( !name )
                goto LABEL_66;
              value = v13->value;
              if ( !value )
                goto LABEL_66;
              v55 = reject;
              if ( value[strcspn(v13->value, reject)] || name[strcspn(name, v55)] )
              {
                if ( (domain_1[1618] & 0x10) != 0 )
                  Curl_infof(domain_1, "invalid octets in name/value, cookie dropped");
                goto LABEL_66;
              }
              goto LABEL_96;
            }
            goto LABEL_48;
          }
        }
        if ( !v13->name )
          goto LABEL_83;
LABEL_48:
        if ( !v28 )
        {
          if ( v16 == 8 )
          {
            if ( !curl_strnequal("httponly", v10, 8) )
              goto LABEL_96;
            v13->httponly = 1;
            v14 = (unsigned __int8)*delim;
            v10 = delim;
            goto LABEL_54;
          }
          if ( !v25 )
            goto LABEL_96;
        }
        if ( v16 != 7 )
          goto LABEL_52;
        if ( curl_strnequal("version", v10, 7) )
          goto LABEL_96;
        if ( !curl_strnequal("max-age", v10, 7) )
        {
          if ( curl_strnequal("expires", v10, 7) )
          {
            v160 = v28 == 127;
            if ( v28 <= 0x7F )
              v160 = v13->expires == 0;
            if ( v160 )
            {
              v161 = memcpy(date, v26, v28);
              *((_BYTE *)&v172 + v28 + 0x54) = 0;
              v162 = Curl_getdate_capped(v161);
              HIDWORD(v163) = v162;
              LODWORD(v163) = v162 >> 31;
              if ( v162 )
              {
                if ( v162 >= 0 )
                {
                  LODWORD(v13->expires) = v162;
                  HIDWORD(v13->expires) = v163;
                }
                else
                {
                  v163 = 0LL;
                }
                if ( v162 >> 31 == -1 )
                  v13->expires = v163;
              }
              else
              {
                v13->expires = 1LL;
              }
            }
          }
          goto LABEL_96;
        }
        if ( *v26 == 34 )
          ++v26;
        v66 = curlx_strtoofft(v26, 0, 10, &v13->expires);
        if ( v66 == 1 )
        {
LABEL_344:
          v159 = delim;
          v13->expires = 0x7FFFFFFFFFFFFFFFLL;
          v10 = v159;
          v38 = v159;
          goto LABEL_53;
        }
        if ( v66 == 2 )
          goto LABEL_375;
        if ( v66 )
          goto LABEL_96;
        expires = v13->expires;
        expires_high = HIDWORD(v13->expires);
        if ( !v13->expires )
        {
LABEL_375:
          v171 = delim;
          v13->expires = 1LL;
          v14 = (unsigned __int8)*v171;
          v10 = v171;
        }
        else
        {
          v69 = badcookie;
          v70 = badcookie >> 31;
          if ( __SPAIR64__(0x7FFFFFFF - (badcookie >> 0x1F), ~badcookie) < __SPAIR64__(expires_high, expires) )
            goto LABEL_344;
          v71 = v13->expires;
          LODWORD(v13->expires) = expires + badcookie;
          v72 = delim;
          HIDWORD(v13->expires) = (__PAIR64__(v70, v71) + __PAIR64__(expires_high, v69)) >> 32;
          v10 = v72;
          v14 = (unsigned __int8)*v72;
        }
LABEL_54:
        if ( !v14 )
          goto LABEL_55;
        while ( 1 )
        {
LABEL_12:
          v18 = v14 == 9;
          if ( v14 != 9 )
            v18 = v14 == 32;
          if ( !v18 )
            break;
          v17 = (unsigned __int8)*++v10;
          v14 = v17;
          if ( !v17 )
            goto LABEL_55;
        }
        if ( v14 != 59 )
          goto LABEL_55;
        do
        {
          v14 = (unsigned __int8)*++v10;
          if ( !v14 )
            goto LABEL_17;
LABEL_6:
          v15 = v14 == 9;
          if ( v14 != 9 )
            v15 = v14 == 32;
        }
        while ( v15 );
        v16 = strcspn(v10, ";\t\r\n=");
        if ( !v16 )
          goto LABEL_12;
      }
    }
LABEL_319:
    Curl_cfree(v13);
    return 0;
  }
  tok_buf = (char *)dataa;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
  {
    v10 = (char *)(lineptr + 0xA);
    v13->httponly = 1;
  }
  if ( *v10 == 35 )
    goto LABEL_319;
  v44 = strchr(v10, 13);
  if ( v44 )
    *v44 = 0;
  v45 = strchr(v10, 10);
  if ( v45 )
    *v45 = 0;
  v46 = strtok_r(v10, "\t", &tok_buf);
  v47 = v46;
  if ( !v46 )
    goto LABEL_66;
  if ( !now )
  {
    v48 = 0;
    delim = "\t";
    while ( 2 )
    {
      switch ( v48 )
      {
        case 0:
          if ( *v47 == 46 )
            ++v47;
          v75 = Curl_cstrdup(v47);
          v76 = delim;
          v77 = v75;
          v78 = v75;
          v13->domain = (char *)v75;
          if ( v75 )
            v78 = 1;
          v79 = strtok_r(0u, v76, &tok_buf);
          if ( v79 )
            v80 = v78 & 1;
          else
            v80 = 0;
          v47 = v79;
          if ( !v80 )
            goto LABEL_386;
          goto LABEL_158;
        case 1:
LABEL_158:
          v81 = curl_strequal(v47, "TRUE");
          v82 = v81;
          if ( v81 )
            v82 = 1;
          v13->tailmatch = v82;
          v47 = strtok_r(0u, "\t", &tok_buf);
          if ( v47 )
            goto LABEL_161;
          goto LABEL_387;
        case 2:
LABEL_161:
          v83 = strcmp("TRUE", v47);
          v84 = (int (__fastcall *)(void *))Curl_cstrdup;
          if ( !v83 || !strcmp("FALSE", v47) )
          {
            httpheadera = LC0;
            v116 = v84(LC0);
            v117 = (int (__fastcall *)(void *))Curl_cstrdup;
            v118 = v116;
            v13->path = (char *)v116;
            v119 = v117(LC0);
            v13->spath = (char *)v119;
            if ( !v119 )
            {
              v13->secure = 0;
              if ( !curl_strequal(v47, "TRUE") )
                goto LABEL_376;
              v89 = 1;
              goto LABEL_309;
            }
            v89 = v118 == 0;
          }
          else
          {
            v85 = (const char *)v84(v47);
            v13->path = (char *)v85;
            if ( !v85 )
              goto LABEL_376;
            v86 = sanitize_cookie_path(v85);
            v78 = (char)v86;
            v13->spath = v86;
            if ( v86 )
              v78 = 1;
            v87 = strtok_r(0u, "\t", &tok_buf);
            if ( v87 )
              v88 = v78 & 1;
            else
              v88 = 0;
            v47 = v87;
            if ( !v88 )
              goto LABEL_334;
LABEL_170:
            v89 = 0;
          }
          v13->secure = 0;
          if ( !curl_strequal(v47, "TRUE") )
          {
            v78 = !v89;
            goto LABEL_173;
          }
LABEL_309:
          if ( !cookies->running )
            goto LABEL_376;
          v78 = !v89;
          v13->secure = 1;
LABEL_173:
          v90 = strtok_r(0u, "\t", &tok_buf);
          if ( v90 )
            v91 = v78 & 1;
          else
            v91 = 0;
          v47 = v90;
          if ( !v91 )
            goto LABEL_383;
LABEL_177:
          v92 = curlx_strtoofft(v47, 0, 10, &v13->expires);
          v93 = strtok_r(0u, "\t", &tok_buf);
          v78 = v92 == 0;
          if ( v93 )
            v94 = v92 == 0;
          else
            v94 = 0;
          v47 = v93;
          if ( !v94 )
            goto LABEL_388;
LABEL_181:
          v95 = Curl_cstrdup(v47);
          v13->name = (char *)v95;
          if ( !v95 )
            goto LABEL_239;
          if ( curl_strnequal("__Secure-", v95, 9) )
          {
            v13->prefix |= 1u;
          }
          else if ( curl_strnequal("__Host-", v13->name, 7) )
          {
            v13->prefix |= 2u;
          }
          v47 = strtok_r(0u, "\t", &tok_buf);
          if ( !v47 )
            goto LABEL_185;
LABEL_187:
          v96 = Curl_cstrdup(v47);
          v78 = v96;
          v13->value = (char *)v96;
          if ( v96 )
            v78 = 1;
          if ( strtok_r(0u, "\t", &tok_buf) )
            v97 = v78 & 1;
          else
            v97 = 0;
          if ( !v97 )
            goto LABEL_385;
          if ( !strtok_r(0u, "\t", &tok_buf) )
            goto LABEL_384;
          v48 = 8;
LABEL_195:
          ++v48;
          v47 = strtok_r(0u, "\t", &tok_buf);
          if ( v47 )
            continue;
          v98 = v48;
          v78 = 1;
          v89 = 0;
          break;
        case 3:
          goto LABEL_170;
        case 4:
          goto LABEL_177;
        case 5:
          goto LABEL_181;
        case 6:
          goto LABEL_187;
        default:
          goto LABEL_195;
      }
      goto LABEL_335;
    }
  }
  v73 = 0;
  v74 = v46;
  delim = "TRUE";
  while ( 2 )
  {
    switch ( v73 )
    {
      case 0:
        if ( *v74 == 46 )
          ++v74;
        v77 = Curl_cstrdup(v74);
        v78 = v77;
        v13->domain = (char *)v77;
        if ( v77 )
          v78 = 1;
        v99 = strtok_r(0u, "\t", &tok_buf);
        if ( v99 )
          v100 = v78 & 1;
        else
          v100 = 0;
        v74 = v99;
        if ( v100 )
          goto LABEL_205;
LABEL_386:
        v98 = 1;
        v89 = v77 == 0;
        goto LABEL_335;
      case 1:
LABEL_205:
        v101 = curl_strequal(v74, "TRUE");
        v102 = v101;
        if ( v101 )
          v102 = 1;
        v13->tailmatch = v102;
        v74 = strtok_r(0u, "\t", &tok_buf);
        if ( v74 )
          goto LABEL_208;
LABEL_387:
        v89 = 0;
        v98 = 2;
        v78 = 1;
        goto LABEL_335;
      case 2:
LABEL_208:
        v103 = strcmp("TRUE", v74);
        v104 = (int (__fastcall *)(char *))Curl_cstrdup;
        if ( v103 && strcmp("FALSE", v74) )
        {
          v155 = (const char *)v104(v74);
          v13->path = (char *)v155;
          if ( !v155 )
            goto LABEL_376;
          v86 = sanitize_cookie_path(v155);
          v78 = (char)v86;
          v13->spath = v86;
          if ( v86 )
            v78 = 1;
          v156 = strtok_r(0u, "\t", &tok_buf);
          if ( v156 )
            v157 = v78 & 1;
          else
            v157 = 0;
          v74 = v156;
          if ( !v157 )
          {
LABEL_334:
            v98 = 3;
            v89 = v86 == 0;
            goto LABEL_335;
          }
LABEL_238:
          v89 = 0;
        }
        else
        {
          httpheadera = LC0;
          v105 = v104(LC0);
          v106 = (int (__fastcall *)(void *))Curl_cstrdup;
          v107 = v105;
          v13->path = (char *)v105;
          v108 = v106(LC0);
          v13->spath = (char *)v108;
          if ( !v108 )
          {
            v13->secure = 0;
            if ( curl_strequal(v74, "TRUE") )
            {
              v13->secure = 1;
              strtok_r(0u, "\t", &tok_buf);
              goto LABEL_66;
            }
LABEL_376:
            strtok_r(0u, "\t", &tok_buf);
            goto LABEL_66;
          }
          v89 = v107 == 0;
        }
        v109 = delim;
        v13->secure = 0;
        v78 = !v89;
        if ( curl_strequal(v74, v109) )
          v13->secure = 1;
        v110 = strtok_r(0u, "\t", &tok_buf);
        if ( v110 )
          v111 = v78 & 1;
        else
          v111 = 0;
        v74 = v110;
        if ( !v111 )
        {
LABEL_383:
          v98 = 4;
          goto LABEL_335;
        }
LABEL_218:
        v92 = curlx_strtoofft(v74, 0, 10, &v13->expires);
        v112 = strtok_r(0u, "\t", &tok_buf);
        v78 = v92 == 0;
        if ( v112 )
          v113 = v92 == 0;
        else
          v113 = 0;
        v74 = v112;
        if ( !v113 )
        {
LABEL_388:
          v89 = v92 != 0;
          v98 = 5;
          goto LABEL_335;
        }
LABEL_222:
        v114 = Curl_cstrdup(v74);
        v13->name = (char *)v114;
        if ( !v114 )
        {
LABEL_239:
          strtok_r(0u, "\t", &tok_buf);
          v89 = 1;
          goto LABEL_240;
        }
        if ( curl_strnequal("__Secure-", v114, 9) )
        {
          v13->prefix |= 1u;
        }
        else if ( curl_strnequal("__Host-", v13->name, 7) )
        {
          v13->prefix |= 2u;
        }
        v74 = strtok_r(0u, "\t", &tok_buf);
        if ( v74 )
        {
LABEL_226:
          v96 = Curl_cstrdup(v74);
          v78 = v96;
          v13->value = (char *)v96;
          if ( v96 )
            v78 = 1;
          if ( strtok_r(0u, "\t", &tok_buf) )
            v115 = v78 & 1;
          else
            v115 = 0;
          if ( !v115 )
          {
LABEL_385:
            v98 = 7;
            v89 = v96 == 0;
LABEL_335:
            if ( v98 == 7 )
              v158 = 0;
            else
              v158 = v78 & 1;
            if ( v158 )
              goto LABEL_66;
            goto LABEL_241;
          }
          if ( !strtok_r(0u, "\t", &tok_buf) )
          {
LABEL_384:
            v89 = 0;
            v98 = 8;
            v78 = 1;
            goto LABEL_335;
          }
          v73 = 8;
LABEL_234:
          ++v73;
          v74 = strtok_r(0u, "\t", &tok_buf);
          if ( !v74 )
          {
            v78 = now;
            v98 = v73;
            v89 = 0;
            goto LABEL_335;
          }
          continue;
        }
LABEL_185:
        v89 = 0;
LABEL_240:
        v120 = Curl_cstrdup(&LC24);
        v13->value = (char *)v120;
        if ( !v120 )
          goto LABEL_66;
LABEL_241:
        if ( v89 )
          goto LABEL_66;
        prefix = v13->prefix;
        if ( (prefix & 1) != 0 )
        {
LABEL_243:
          if ( !v13->secure )
            goto LABEL_66;
          if ( (prefix & 2) != 0 )
            goto LABEL_245;
          goto LABEL_249;
        }
LABEL_64:
        if ( (prefix & 2) != 0 )
        {
          if ( !v13->secure )
            goto LABEL_66;
LABEL_245:
          v121 = v13->path;
          if ( !v121 || *v121 != 47 || v121[1] || v13->tailmatch )
            goto LABEL_66;
        }
LABEL_249:
        if ( !cookies->running && cookies->newsession && !v13->expires )
          goto LABEL_66;
        v122 = v181;
        v13->livecookie = cookies->running;
        v15 = !v122;
        v123 = cookies;
        v124 = cookies->lastct + 1;
        cookies->lastct = v124;
        v13->creationtime = v124;
        if ( v15 )
          remove_expired(v123);
        v125 = cookiehash(v13->domain);
        v126 = cookies->cookies[v125];
        v127 = v125;
        if ( !v126 )
        {
          if ( cookies->running )
          {
            v42 = v13;
            if ( (domain_1[1618] & 0x10) != 0 )
            {
              livecookie = cookies->cookies[v125];
              v148 = "Added";
LABEL_341:
              Curl_infof(
                domain_1,
                "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
                v148,
                v42->name,
                v42->value,
                v42->domain,
                v42->path,
                v42->expires);
              if ( livecookie )
                goto LABEL_295;
              if ( v126 )
                goto LABEL_293;
            }
          }
          else
          {
            v42 = v13;
          }
          cookies->cookies[v127] = v42;
          goto LABEL_294;
        }
        livecookie = 0;
        v42 = 0;
        v129 = 0;
        while ( 2 )
        {
          if ( curl_strequal(v126->name, v13->name) )
          {
            v131 = v126->domain;
            v132 = v13->domain;
            if ( v131 )
            {
              if ( v132 && curl_strequal(v131, v132) )
              {
LABEL_262:
                spath = v126->spath;
                if ( spath )
                {
                  v134 = v13->spath;
                  if ( v134 )
                  {
                    if ( v126->secure && !(now | v13->secure) )
                    {
                      v153 = strchr(spath + 1, 47);
                      v154 = v153 ? v153 - spath : strlen(spath);
                      if ( curl_strnequal(spath, v134, v154) )
                      {
                        if ( (domain_1[1618] & 0x10) != 0 )
                          Curl_infof(
                            domain_1,
                            "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                            v13->name,
                            v13->domain);
                        goto LABEL_66;
                      }
                    }
                  }
                }
              }
            }
            else if ( !v132 )
            {
              goto LABEL_262;
            }
          }
          if ( v129 || !curl_strequal(v126->name, v13->name) )
          {
LABEL_256:
            next = v126->next;
            if ( !v126->next )
              break;
            goto LABEL_257;
          }
          v135 = v126->domain;
          v136 = v13->domain;
          if ( v135 )
          {
            if ( !v136 || !curl_strequal(v135, v136) || v126->tailmatch != v13->tailmatch )
            {
LABEL_272:
              if ( !livecookie )
                goto LABEL_273;
            }
          }
          else if ( v136 )
          {
            goto LABEL_272;
          }
          v149 = v126->spath;
          v150 = v13->spath;
          if ( !v149 )
          {
LABEL_288:
            if ( (v149 == 0) != (v150 == 0) )
              goto LABEL_273;
            livecookie = (Cookie *)v13->livecookie;
            if ( v13->livecookie )
            {
              v42 = v126;
              v129 = v13;
            }
            else
            {
              if ( v126->livecookie )
                goto LABEL_66;
              v42 = v126;
              v129 = v13;
              livecookie = (Cookie *)(freecookie + 1);
            }
            goto LABEL_256;
          }
          if ( v150 && curl_strequal(v149, v150) )
          {
            v149 = v126->spath;
            v150 = v13->spath;
            goto LABEL_288;
          }
LABEL_273:
          next = v126->next;
          livecookie = 0;
          if ( v126->next )
          {
LABEL_257:
            v126 = next;
            continue;
          }
          break;
        }
        if ( v129 )
        {
          v129->next = v42->next;
          v137 = v42->name;
          v129->creationtime = v42->creationtime;
          Curl_cfree(v137);
          Curl_cfree(v42->value);
          Curl_cfree(v42->domain);
          Curl_cfree(v42->path);
          Curl_cfree(v42->spath);
          v138 = v129->name;
          v139 = v129->value;
          v140 = v129->path;
          v141 = (void (__fastcall *)(Cookie *))Curl_cfree;
          v42->next = v129->next;
          v42->name = v138;
          v42->value = v139;
          v42->path = v140;
          v142 = v129->domain;
          v143 = v129->expires;
          v144 = HIDWORD(v129->expires);
          v42->spath = v129->spath;
          v42->domain = v142;
          LODWORD(v42->expires) = v143;
          HIDWORD(v42->expires) = v144;
          creationtime = v129->creationtime;
          v146 = *(_DWORD *)&v129->prefix;
          v147 = *((_DWORD *)&v129->prefix + 1);
          *(_DWORD *)&v42->tailmatch = *(_DWORD *)&v129->tailmatch;
          v42->creationtime = creationtime;
          *(_DWORD *)&v42->prefix = v146;
          *((_DWORD *)&v42->prefix + 1) = v147;
          v141(v129);
        }
        else
        {
          v42 = v13;
        }
        if ( cookies->running && (domain_1[1618] & 0x10) != 0 )
        {
          if ( livecookie )
            v148 = "Replaced";
          else
            v148 = "Added";
          goto LABEL_341;
        }
        if ( livecookie )
          goto LABEL_295;
LABEL_293:
        v126->next = v42;
LABEL_294:
        ++cookies->numcookies;
LABEL_295:
        v151 = v42->expires;
        if ( v151 )
        {
          v152 = cookies;
          if ( v151 < cookies->next_expiration )
          {
            LODWORD(cookies->next_expiration) = v151;
            HIDWORD(v152->next_expiration) = HIDWORD(v151);
          }
        }
        return v42;
      case 3:
        goto LABEL_238;
      case 4:
        goto LABEL_218;
      case 5:
        goto LABEL_222;
      case 6:
        goto LABEL_226;
      default:
        goto LABEL_234;
    }
  }
}
