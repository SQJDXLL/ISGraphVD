Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v8; // ebp
  time_t v9; // eax
  int v10; // esi
  size_t v11; // eax
  char v12; // dl
  unsigned int v13; // edi
  char v14; // dl
  size_t v15; // eax
  unsigned int v16; // ebx
  size_t v17; // eax
  size_t v18; // esi
  bool v19; // cl
  _BOOL4 v20; // eax
  bool v21; // di
  _BYTE *v22; // eax
  char *v24; // eax
  char *v25; // eax
  int v26; // eax
  char *v27; // eax
  char *v28; // eax
  int v29; // esi
  size_t v30; // ebx
  char *v31; // eax
  char *v32; // eax
  Cookie *v33; // esi
  unsigned __int8 prefix; // al
  char *v35; // eax
  bool running; // al
  int v37; // eax
  Cookie *v38; // ebp
  Cookie *v39; // edi
  char *v40; // eax
  char *v41; // edx
  char *spath; // edx
  char *v43; // eax
  char *v44; // edx
  char *v45; // eax
  const char *v46; // ebx
  bool v47; // al
  int v48; // eax
  char *v49; // eax
  int v50; // eax
  curl_off_t expires; // rax
  int v52; // ecx
  int v53; // eax
  const char *v54; // eax
  const char *name; // edi
  size_t v56; // eax
  size_t v57; // ebp
  int v58; // eax
  char is_ipnum; // di
  int v60; // eax
  char *v61; // edx
  const char *v62; // eax
  unsigned int v63; // edx
  unsigned int v64; // eax
  const char *v65; // eax
  char *v66; // eax
  const char *v67; // edx
  size_t v68; // ecx
  size_t v69; // eax
  int v70; // eax
  int v71; // eax
  size_t pathlen; // [esp+8h] [ebp-134h]
  size_t v73; // [esp+Ch] [ebp-130h]
  char maxageb; // [esp+14h] [ebp-128h]
  const char *maxage; // [esp+14h] [ebp-128h]
  char *maxagea; // [esp+14h] [ebp-128h]
  char *sep; // [esp+18h] [ebp-124h]
  char sepa; // [esp+18h] [ebp-124h]
  bool sepb; // [esp+18h] [ebp-124h]
  bool sepc; // [esp+18h] [ebp-124h]
  size_t sepd; // [esp+18h] [ebp-124h]
  char *v82; // [esp+1Ch] [ebp-120h]
  char *v83; // [esp+1Ch] [ebp-120h]
  const char *v84; // [esp+1Ch] [ebp-120h]
  Cookie *co; // [esp+20h] [ebp-11Ch]
  size_t myhash; // [esp+24h] [ebp-118h]
  char nlen; // [esp+28h] [ebp-114h]
  size_t nlena; // [esp+28h] [ebp-114h]
  size_t nlenb; // [esp+28h] [ebp-114h]
  bool badcookie; // [esp+4Fh] [ebp-EDh]
  __int64 now; // [esp+78h] [ebp-C4h]
  curl_off_t v93; // [esp+80h] [ebp-BCh]
  char *tok_buf; // [esp+98h] [ebp-A4h] BYREF
  char date[128]; // [esp+9Ch] [ebp-A0h] BYREF
  unsigned int v96; // [esp+11Ch] [ebp-20h]

  v8 = (char *)lineptr;
  v96 = __readgsdword(0x14u);
  v9 = time(0);
  if ( data->req.setcookies > 0x31u )
    return 0;
  v10 = v9;
  co = (Cookie *)Curl_ccalloc(1, 44);
  if ( !co )
    return 0;
  if ( !httpheader )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v8 = (char *)(lineptr + 10);
      co->httponly = 1;
    }
    if ( *v8 == 35 )
    {
      Curl_cfree(co);
      return 0;
    }
    v24 = strchr(v8, 13);
    if ( v24 )
      *v24 = 0;
    v25 = strchr(v8, 10);
    if ( v25 )
      *v25 = 0;
    if ( strtok_r(v8, "\t", &tok_buf) )
      __asm { jmp     eax }
    goto LABEL_43;
  }
  badcookie = 0;
  if ( strlen(lineptr) > 0x1388 )
  {
    Curl_cfree(co);
    return 0;
  }
  now = v10;
  LODWORD(v93) = -1 - v10;
  HIDWORD(v93) = 0x7FFFFFFF - (v10 >> 31);
  while ( 1 )
  {
    v14 = *v8;
    if ( !*v8 )
      break;
    if ( v14 == 32 || v14 == 9 )
      goto LABEL_10;
    maxageb = *v8;
    v11 = strcspn(v8, ";\t\r\n=");
    v12 = maxageb;
    v13 = v11;
    if ( v11 )
      goto LABEL_13;
LABEL_9:
    if ( v12 != 59 )
      goto LABEL_62;
LABEL_10:
    ++v8;
  }
  v15 = strcspn(v8, ";\t\r\n=");
  v12 = 0;
  v13 = v15;
  if ( !v15 )
    goto LABEL_62;
LABEL_13:
  sep = &v8[v13];
  do
  {
    v16 = v13--;
    if ( v8[v13] != 9 && v8[v13] != 32 )
    {
      v19 = 0;
      if ( *sep != 61 )
      {
        maxage = 0;
        LOBYTE(v20) = 0;
        v13 = v16;
        v82 = sep;
        v18 = 0;
        goto LABEL_22;
      }
      v13 = v16;
      goto LABEL_17;
    }
  }
  while ( v13 );
  if ( *sep != 61 )
  {
    if ( !co->name )
      goto LABEL_43;
    v82 = sep;
    goto LABEL_57;
  }
LABEL_17:
  nlen = v12;
  maxage = sep + 1;
  v17 = strcspn(sep + 1, ";\r\n");
  v12 = nlen;
  v18 = v17;
  v82 = &sep[v17 + 1];
  while ( v18 )
  {
    if ( sep[v18] != 9 && sep[v18] != 32 )
    {
      v46 = sep + 1;
      while ( 1 )
      {
        v47 = *v46 == 9 || *v46 == 32;
        if ( !v47 )
          break;
        ++v46;
        if ( !--v18 )
        {
          v19 = v47;
          maxage = v46;
          LOBYTE(v20) = 0;
          goto LABEL_22;
        }
      }
      maxage = v46;
      if ( !memchr(v46, 9, v18) )
      {
        v19 = httpheader;
        v12 = nlen;
        v20 = v18 > 0xFFE;
        goto LABEL_22;
      }
      freecookie(co);
      if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
      {
        v65 = "cookie contains TAB, dropping";
LABEL_197:
        Curl_infof(data, v65, pathlen, v73);
      }
      return 0;
    }
    --v18;
  }
  v19 = httpheader;
  LOBYTE(v20) = 0;
LABEL_22:
  if ( v13 > 0xFFE || v20 || v18 + v13 > 0x1000 )
  {
    freecookie(co);
    if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
    {
      v73 = v18;
      pathlen = v13;
      v65 = "oversized cookie dropped, name/val %zu + %zu bytes";
      goto LABEL_197;
    }
    return 0;
  }
  if ( v13 > 6 && v12 == 95 && v8[1] == 95 )
  {
    sepb = v19;
    v53 = curl_strnequal("__Secure-", v8, 9);
    v19 = sepb;
    if ( v53 )
    {
      co->prefix |= 1u;
    }
    else
    {
      v70 = curl_strnequal("__Host-", v8, 7);
      v19 = sepb;
      if ( v70 )
        co->prefix |= 2u;
    }
  }
  if ( !co->name )
  {
    if ( !v19 )
      goto LABEL_43;
    Curl_cfree(0);
    co->name = (char *)((int (*)(void))Curl_strndup)();
    Curl_cfree(co->value);
    v54 = (const char *)Curl_strndup(maxage, v18);
    co->value = (char *)v54;
    name = co->name;
    if ( !v54 || !name )
      goto LABEL_43;
    if ( v54[strcspn(v54, badoctets_0)] || name[strcspn(name, badoctets_0)] )
    {
      if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
        Curl_infof(data, "invalid octets in name/value, cookie dropped", pathlen, v73);
      goto LABEL_43;
    }
    goto LABEL_57;
  }
  if ( v18 )
  {
    if ( v13 != 4 )
      goto LABEL_30;
LABEL_125:
    if ( curl_strnequal("path", v8, 4) )
    {
      Curl_cfree(co->path);
      v48 = Curl_strndup(maxage, v18);
      co->path = (char *)v48;
      if ( !v48 )
        goto LABEL_43;
      Curl_cfree(co->spath);
      v49 = sanitize_cookie_path(co->path);
      co->spath = v49;
      if ( !v49 )
        goto LABEL_43;
    }
    goto LABEL_57;
  }
  if ( v13 == 6 )
  {
    sepc = v19;
    if ( curl_strnequal("secure", v8, 6) )
    {
      if ( !secure && c->running )
        goto LABEL_43;
      v8 = v82;
      co->secure = 1;
      goto LABEL_58;
    }
    if ( !sepc )
      goto LABEL_57;
    goto LABEL_31;
  }
  if ( v13 == 8 )
  {
    if ( curl_strnequal("httponly", v8, 8) )
    {
      v8 = v82;
      co->httponly = 1;
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  if ( !v19 )
    goto LABEL_57;
  if ( v13 == 4 )
    goto LABEL_125;
LABEL_30:
  if ( v13 != 6 )
  {
    if ( v13 == 7 && !curl_strnequal("version", v8, 7) )
    {
      if ( curl_strnequal("max-age", v8, 7) )
      {
        v50 = curlx_strtoofft(&maxage[*maxage == 34], 0, 10, &co->expires);
        if ( v50 != 1 )
        {
          if ( v50 == 2 )
          {
            v8 = v82;
            LODWORD(co->expires) = 1;
            HIDWORD(co->expires) = 0;
            goto LABEL_58;
          }
          if ( v50 )
            goto LABEL_57;
          expires = co->expires;
          if ( !expires )
          {
            LODWORD(co->expires) = 1;
            v8 = v82;
            HIDWORD(co->expires) = 0;
            goto LABEL_58;
          }
          if ( v93 >= expires )
          {
            v8 = v82;
            co->expires = now + expires;
            goto LABEL_58;
          }
        }
        v8 = v82;
        LODWORD(co->expires) = -1;
        HIDWORD(co->expires) = 0x7FFFFFFF;
        goto LABEL_58;
      }
      if ( curl_strnequal("expires", v8, 7) && !co->expires && v18 <= 0x7F )
      {
        memcpy(date, maxage, v18);
        date[v18] = 0;
        v52 = Curl_getdate_capped(date);
        if ( v52 )
        {
          if ( v52 >> 31 == -1 )
          {
            LODWORD(co->expires) = 0;
            HIDWORD(co->expires) = 0;
          }
          else
          {
            co->expires = v52;
          }
        }
        else
        {
          LODWORD(co->expires) = 1;
          HIDWORD(co->expires) = 0;
        }
      }
    }
    goto LABEL_57;
  }
LABEL_31:
  v21 = curl_strnequal("domain", v8, 6) != 0 && v18 != 0;
  if ( v21 )
  {
    if ( *maxage == 46 )
    {
      ++maxage;
      --v18;
    }
    if ( v18 == 9 && curl_strnequal(maxage, "localhost", 9)
      || (v22 = memchr(maxage, 46, v18)) != 0 && v18 - (v22 - maxage) > 1 )
    {
      if ( !domain )
      {
        is_ipnum = Curl_host_is_ipnum(maxage);
        Curl_cfree(co->domain);
        v60 = Curl_strndup(maxage, v18);
        co->domain = (char *)v60;
        if ( !v60 )
          goto LABEL_43;
        v8 = v82;
        if ( is_ipnum )
          goto LABEL_58;
        goto LABEL_174;
      }
    }
    else
    {
      domain = (const char *)&LC1;
    }
    if ( (unsigned __int8)Curl_host_is_ipnum(domain) )
    {
      if ( strncmp(maxage, domain, v18) || strlen(domain) != v18 )
        goto LABEL_41;
      Curl_cfree(co->domain);
      v71 = Curl_strndup(maxage, v18);
      co->domain = (char *)v71;
      if ( !v71 )
        goto LABEL_43;
      goto LABEL_57;
    }
    v56 = strlen(domain);
    if ( v18 > v56
      || (sepd = v56, v57 = v56 - v18, !curl_strnequal(maxage, &domain[v56 - v18], v18))
      || v18 != sepd && domain[v57 - 1] != 46 )
    {
LABEL_41:
      v8 = v82;
      badcookie = v21;
      if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
        Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", maxage, v73);
      goto LABEL_58;
    }
    Curl_cfree(co->domain);
    v58 = Curl_strndup(maxage, v18);
    co->domain = (char *)v58;
    if ( !v58 )
      goto LABEL_43;
LABEL_174:
    v8 = v82;
    co->tailmatch = 1;
    goto LABEL_58;
  }
LABEL_57:
  v8 = v82;
LABEL_58:
  v12 = *v82;
  if ( *v82 )
  {
    while ( v12 == 32 || v12 == 9 )
    {
      v12 = *++v8;
      if ( !v12 )
        goto LABEL_62;
    }
    goto LABEL_9;
  }
LABEL_62:
  if ( badcookie )
    goto LABEL_43;
  if ( !co->domain )
  {
    if ( domain )
    {
      v26 = Curl_cstrdup(domain);
      co->domain = (char *)v26;
      if ( !v26 )
        goto LABEL_43;
    }
  }
  if ( !co->path && path )
  {
    v27 = strchr(path, 63);
    v28 = v27 ? (char *)Curl_memrchr(path, 47, v27 - path) : strrchr(path, 47);
    if ( v28 )
    {
      v29 = v28 - path;
      v30 = v28 - path + 1;
      v31 = (char *)Curl_cmalloc(v28 - path + 2);
      co->path = v31;
      if ( !v31 )
        goto LABEL_43;
      memcpy(v31, path, v30);
      co->path[v29 + 1] = 0;
      v32 = sanitize_cookie_path(co->path);
      co->spath = v32;
      if ( !v32 )
        goto LABEL_43;
    }
  }
  if ( !co->name )
    goto LABEL_43;
  ++data->req.setcookies;
  v33 = co;
  prefix = co->prefix;
  if ( (prefix & 1) == 0 )
  {
    if ( (prefix & 2) == 0 )
      goto LABEL_81;
    if ( co->secure )
      goto LABEL_77;
    goto LABEL_43;
  }
  if ( !co->secure )
  {
LABEL_215:
    freecookie(v33);
    return 0;
  }
  if ( (prefix & 2) == 0 )
    goto LABEL_81;
LABEL_77:
  v35 = co->path;
  if ( !v35 || *v35 != 47 || v35[1] || co->tailmatch )
  {
LABEL_43:
    freecookie(co);
    return 0;
  }
LABEL_81:
  running = c->running;
  if ( !running && c->newsession )
  {
    v33 = co;
    if ( !co->expires )
      goto LABEL_215;
  }
  co->livecookie = running;
  v37 = c->lastct + 1;
  c->lastct = v37;
  co->creationtime = v37;
  if ( !noexpire )
    remove_expired(c);
  myhash = cookiehash(co->domain);
  v38 = c->cookies[myhash];
  if ( !v38 )
  {
    if ( c->running && (*(&data->set.connect_only + 4) & 0x20) != 0 )
    {
      sepa = 0;
      maxagea = (char *)co;
      v61 = co->name;
      v62 = "Added";
      goto LABEL_183;
    }
    maxagea = (char *)co;
LABEL_185:
    c->cookies[myhash] = (Cookie *)maxagea;
    goto LABEL_188;
  }
  sepa = 0;
  v39 = 0;
  maxagea = 0;
  while ( 2 )
  {
    if ( curl_strequal(v38->name, co->name) )
    {
      v40 = v38->domain;
      v41 = co->domain;
      if ( v40 )
      {
        if ( v41 && curl_strequal(v40, co->domain) )
        {
LABEL_94:
          spath = v38->spath;
          if ( spath )
          {
            v83 = co->spath;
            if ( v83 )
            {
              if ( v38->secure && !co->secure && !secure )
              {
                nlena = (size_t)v38->spath;
                v66 = strchr(spath + 1, 47);
                v67 = (const char *)nlena;
                v68 = (size_t)v83;
                if ( v66 )
                {
                  v69 = (size_t)&v66[-nlena];
                }
                else
                {
                  nlenb = (size_t)v83;
                  v84 = v67;
                  v69 = strlen(v67);
                  v68 = nlenb;
                  v67 = v84;
                }
                if ( curl_strnequal(v67, v68, v69) )
                {
                  if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
                    Curl_infof(
                      data,
                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                      co->name,
                      co->domain);
                  goto LABEL_43;
                }
              }
            }
          }
        }
      }
      else if ( !v41 )
      {
        goto LABEL_94;
      }
    }
    if ( v39 || !curl_strequal(v38->name, co->name) )
      goto LABEL_88;
    v43 = v38->domain;
    v44 = co->domain;
    if ( !v43 )
    {
      if ( v44 )
        goto LABEL_105;
LABEL_106:
      v45 = v38->spath;
      if ( v45 )
      {
        if ( !co->spath )
        {
          sepa = 0;
          v39 = 0;
          goto LABEL_88;
        }
        if ( !curl_strequal(v45, co->spath) )
          goto LABEL_192;
        v45 = v38->spath;
      }
      if ( (v45 == 0) == (co->spath == 0) )
      {
        sepa = co->livecookie;
        if ( sepa )
        {
          maxagea = (char *)v38;
          v39 = co;
        }
        else
        {
          if ( v38->livecookie )
            goto LABEL_43;
          maxagea = (char *)v38;
          v39 = co;
          sepa = 1;
        }
        goto LABEL_88;
      }
LABEL_192:
      sepa = 0;
      goto LABEL_88;
    }
    if ( v44 && curl_strequal(v43, co->domain) && v38->tailmatch == co->tailmatch )
      goto LABEL_106;
LABEL_105:
    if ( sepa )
      goto LABEL_106;
LABEL_88:
    if ( v38->next )
    {
      v38 = v38->next;
      continue;
    }
    break;
  }
  if ( v39 )
  {
    v39->next = *(Cookie **)maxagea;
    v39->creationtime = *((_DWORD *)maxagea + 9);
    Curl_cfree(*((_DWORD *)maxagea + 1));
    Curl_cfree(*((_DWORD *)maxagea + 2));
    Curl_cfree(*((_DWORD *)maxagea + 5));
    Curl_cfree(*((_DWORD *)maxagea + 3));
    Curl_cfree(*((_DWORD *)maxagea + 4));
    *(_DWORD *)maxagea = v39->next;
    *((_DWORD *)maxagea + 1) = v39->name;
    *((_DWORD *)maxagea + 2) = v39->value;
    *((_DWORD *)maxagea + 3) = v39->path;
    *((_DWORD *)maxagea + 4) = v39->spath;
    *((_DWORD *)maxagea + 5) = v39->domain;
    *((_DWORD *)maxagea + 6) = v39->expires;
    *((_DWORD *)maxagea + 7) = HIDWORD(v39->expires);
    *((_DWORD *)maxagea + 8) = *(_DWORD *)&v39->tailmatch;
    *((_DWORD *)maxagea + 9) = v39->creationtime;
    *((_DWORD *)maxagea + 10) = *(_DWORD *)&v39->prefix;
    Curl_cfree(v39);
  }
  else
  {
    maxagea = (char *)co;
  }
  if ( !c->running || (*(&data->set.connect_only + 4) & 0x20) == 0 )
  {
    if ( sepa )
      goto LABEL_189;
    goto LABEL_187;
  }
  v61 = (char *)*((_DWORD *)maxagea + 1);
  v62 = "Replaced";
  if ( !sepa )
    v62 = "Added";
LABEL_183:
  Curl_infof(data, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld", v62, v61);
  if ( !sepa )
  {
    if ( !v38 )
      goto LABEL_185;
LABEL_187:
    v38->next = (Cookie *)maxagea;
LABEL_188:
    ++c->numcookies;
  }
LABEL_189:
  v63 = *((_DWORD *)maxagea + 6);
  v64 = *((_DWORD *)maxagea + 7);
  if ( *((_QWORD *)maxagea + 3) && __SPAIR64__(v64, v63) < c->next_expiration )
  {
    LODWORD(c->next_expiration) = v63;
    HIDWORD(c->next_expiration) = v64;
  }
  return (Cookie *)maxagea;
}
