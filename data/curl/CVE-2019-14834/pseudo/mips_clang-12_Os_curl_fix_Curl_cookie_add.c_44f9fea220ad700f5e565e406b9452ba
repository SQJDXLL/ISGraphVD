Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  int v16; // $s5
  time_t v17; // $v0
  int v18; // $s6
  Cookie *v19; // $v0
  Cookie *v20; // $s7
  char *j; // $fp
  char *i; // $s7
  int v23; // $s5
  size_t v24; // $v0
  size_t v25; // $s1
  char *v26; // $v1
  unsigned int v27; // $s6
  int v28; // $v0
  unsigned int v29; // $a2
  const char *v30; // $s3
  size_t v31; // $v0
  size_t v32; // $a3
  size_t v33; // $a2
  int v34; // $a0
  int v35; // $v1
  size_t v36; // $s1
  char *v37; // $a0
  int v38; // $v1
  int v39; // $a2
  unsigned int v40; // $s7
  unsigned int v41; // $s1
  int v42; // $v0
  unsigned int v43; // $s5
  char *v44; // $v0
  char *v45; // $v0
  unsigned int v46; // $s5
  char *v47; // $v0
  char *name; // $s1
  size_t v49; // $v0
  int v50; // $v1
  int v51; // $v0
  size_t v52; // $s1
  unsigned int v53; // $s1
  int v54; // $v0
  int v55; // $v0
  size_t v56; // $s5
  _BYTE *v57; // $v0
  const char *v58; // $s6
  const char *v59; // $a0
  int is_ipnum; // $v0
  int v61; // $s1
  int v62; // $v0
  int v63; // $v0
  int v64; // $v0
  char *v65; // $v0
  int v66; // $v0
  unsigned int v67; // $v1
  _BOOL4 v68; // $a0
  char *v69; // $v0
  char *v70; // $v0
  int v71; // $v0
  char *v72; // $v0
  char *v73; // $v0
  int v74; // $s1
  char *v75; // $v0
  size_t v76; // $s1
  char *v77; // $v0
  Curl_easy *v78; // $s3
  int v79; // $at
  Cookie **v80; // $s2
  Cookie *next; // $v0
  Curl_easy *v82; // $fp
  Cookie *v83; // $s4
  Cookie *v84; // $s3
  char v85; // $s7
  Cookie *v86; // $s6
  char *v87; // $a1
  char *v88; // $a0
  const char *spath; // $s1
  char *v90; // $s5
  char *v91; // $v0
  size_t v92; // $a2
  char *v93; // $a1
  char *v94; // $a0
  int v95; // $at
  bool v96; // dc
  int v97; // $at
  char *v98; // $a1
  char *v99; // $a0
  const char *v100; // $a0
  CookieInfo *v101; // $s5
  Cookie *v102; // $s4
  const char *v103; // $a2
  curl_off_t expires; // $v1
  int next_expiration_high; // $at
  _BOOL4 v106; // $a1
  int v108; // [sp+2Ch] [-C4h]
  unsigned int v109; // [sp+30h] [-C0h]
  int v110; // [sp+34h] [-BCh]
  curl_off_t *p_expires; // [sp+3Ch] [-B4h]
  char v112; // [sp+47h] [-A9h]
  CookieInfo *v114; // [sp+50h] [-A0h]
  int v115; // [sp+54h] [-9Ch]
  int v116; // [sp+58h] [-98h]
  int v117; // [sp+5Ch] [-94h]
  char *v118; // [sp+68h] [-88h]
  Cookie *v119; // [sp+6Ch] [-84h]
  char *v120[32]; // [sp+70h] [-80h] BYREF

  v16 = 0;
  v17 = time(0u);
  if ( data->req.setcookies >= 0x32u )
    return (Cookie *)v16;
  v18 = v17;
  v19 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v19 )
    return (Cookie *)v16;
  v20 = v19;
  v116 = v18;
  v115 = noexpire;
  j = (char *)lineptr;
  v119 = v19;
  if ( !httpheader )
  {
    v120[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v20->httponly = 1;
      j = (char *)(lineptr + 10);
    }
    if ( *j != 35 )
    {
      v69 = strchr(j, 13);
      if ( v69 )
        *v69 = 0;
      v70 = strchr(j, 10);
      if ( v70 )
        *v70 = 0;
      if ( strtok_r(j, "\t", v120) )
        JUMPOUT(0xF9C);
      goto LABEL_140;
    }
LABEL_5:
    Curl_cfree(v20);
    return 0;
  }
  if ( strlen(lineptr) >= 0x1389 )
    goto LABEL_5;
  v108 = v18 >> 0x1F;
  v110 = 0x7FFFFFFF - (v18 >> 0x1F);
  v109 = ~v18;
  p_expires = &v20->expires;
  v112 = 0;
  do
  {
    for ( i = j + 1; ; ++i )
    {
      v23 = (unsigned __int8)*j;
      if ( v23 != 32 && v23 != 9 )
        break;
      ++j;
    }
    v24 = strcspn(j, ";\t\r\n=");
    if ( !v24 )
    {
      v20 = v119;
      v26 = j;
      goto LABEL_62;
    }
    v25 = v24;
    v26 = &j[v24];
    v27 = v24;
    while ( 1 )
    {
      v28 = (unsigned __int8)j[v27 - 1];
      if ( v28 != 32 && v28 != 9 )
        break;
      if ( !--v27 )
      {
        v27 = 0;
        break;
      }
    }
    v29 = 0;
    v30 = 0;
    v117 = (unsigned __int8)*v26;
    if ( v117 == 61 )
    {
      v30 = &j[v25 + 1];
      v31 = strcspn(v30, ";\r\n");
      v32 = v25 + v31;
      v33 = 0;
      if ( v31 )
      {
        v34 = (int)&j[v25 + 1];
        v30 = &i[v32];
        while ( 1 )
        {
          v35 = *((unsigned __int8 *)v30 - 1);
          if ( v35 != 32 && v35 != 9 )
            break;
          --v31;
          --v30;
          if ( !v31 )
          {
            v36 = v32;
            v30 = (const char *)v34;
            goto LABEL_36;
          }
        }
        v37 = &i[v25];
        v38 = 0;
        while ( 1 )
        {
          v39 = (unsigned __int8)v37[v38];
          if ( v39 != 32 && v39 != 9 )
            break;
          if ( v31 == ++v38 )
          {
            v36 = v32;
            v33 = 0;
            goto LABEL_36;
          }
        }
        v36 = v32;
        v33 = v31 - v38;
        v30 = &v37[v38];
      }
      else
      {
        v36 = v25 + v31;
      }
LABEL_36:
      v40 = v33;
      if ( memchr(v30, 9, v33) )
      {
        freecookie(v119);
        v16 = 0;
        if ( (*((_BYTE *)&data->set + 1337) & 4) == 0 )
          return (Cookie *)v16;
        goto LABEL_150;
      }
      v26 = &j[v36 + 1];
      v29 = v40;
    }
    if ( v27 >= 0xFFF || v29 >= 0xFFF || v29 + v27 >= 0x1001 )
    {
      freecookie(v119);
      v16 = 0;
      if ( (*((_BYTE *)&data->set + 1337) & 4) == 0 )
        return (Cookie *)v16;
LABEL_150:
      ((void (*)(void))Curl_infof)();
      return (Cookie *)v16;
    }
    v20 = v119;
    v118 = v26;
    if ( v23 == 95 && v27 >= 7 && j[1] == 95 )
    {
      v41 = v29;
      if ( curl_strnequal("__Secure-", j, 9) )
      {
        v119->prefix |= 1u;
        v26 = v118;
        v29 = v41;
      }
      else
      {
        v42 = curl_strnequal("__Host-", j, 7);
        v26 = v118;
        v29 = v41;
        if ( v42 )
          v119->prefix |= 2u;
      }
    }
    if ( v119->name )
    {
      if ( !v29 )
      {
        if ( v27 == 8 )
        {
          v62 = curl_strnequal("httponly", j, 8);
          v26 = v118;
          v29 = 0;
          if ( v62 )
          {
            v119->httponly = 1;
            goto LABEL_62;
          }
        }
        else if ( v27 == 6 )
        {
          v51 = curl_strnequal("secure", j, 6);
          v26 = v118;
          v29 = 0;
          if ( v51 )
          {
            if ( !secure && c->running )
              goto LABEL_140;
            v119->secure = 1;
            goto LABEL_62;
          }
        }
        if ( v117 != 61 )
          goto LABEL_62;
      }
      switch ( v27 )
      {
        case 7u:
          v52 = v29;
          if ( curl_strnequal("version", j, 7) )
          {
            v26 = v118;
          }
          else if ( curl_strnequal("max-age", j, 7) )
          {
            if ( *v30 == 0x22 )
              ++v30;
            v63 = curlx_strtoofft(v30, 0, 10, p_expires);
            if ( v63 )
            {
              if ( v63 == 2 )
              {
                *((_DWORD *)p_expires + 1) = 1;
                *(_DWORD *)p_expires = 0;
                v26 = v118;
              }
              else
              {
                v26 = v118;
                if ( v63 == 1 )
                {
                  *((_DWORD *)p_expires + 1) = -1;
                  *(_DWORD *)p_expires = 0x7FFFFFFF;
                }
              }
            }
            else
            {
              v66 = *(_DWORD *)p_expires;
              v67 = *((_DWORD *)p_expires + 1);
              if ( *p_expires )
              {
                v68 = v110 >= v66;
                if ( v110 == v66 )
                  v68 = v109 >= v67;
                if ( v68 )
                {
                  *((_DWORD *)p_expires + 1) = v67 + v116;
                  *(_DWORD *)p_expires = v66 + v108 + __CFADD__(v67, v116);
                }
                else
                {
                  *((_DWORD *)p_expires + 1) = -1;
                  *(_DWORD *)p_expires = 0x7FFFFFFF;
                }
                v26 = v118;
              }
              else
              {
                *((_DWORD *)p_expires + 1) = 1;
                *(_DWORD *)p_expires = 0;
                v26 = v118;
              }
            }
          }
          else if ( curl_strnequal("expires", j, 7) )
          {
            v26 = v118;
            if ( v52 < 0x80 && !*p_expires )
            {
              memcpy(v120, v30, v52);
              *((_BYTE *)v120 + v52) = 0;
              v64 = Curl_getdate_capped(v120);
              *p_expires = v64;
              if ( v64 )
              {
                v26 = v118;
                if ( v64 < 0 )
                {
                  *((_DWORD *)p_expires + 1) = 0;
                  *(_DWORD *)p_expires = 0;
                }
              }
              else
              {
                *((_DWORD *)p_expires + 1) = 1;
                *(_DWORD *)p_expires = 0;
                v26 = v118;
              }
            }
          }
          else
          {
            v26 = v118;
          }
          break;
        case 6u:
          v53 = v29;
          v54 = curl_strnequal("domain", j, 6);
          if ( !v53 )
          {
            v26 = v118;
            break;
          }
          if ( !v54 )
          {
            v26 = v118;
            break;
          }
          v55 = *(unsigned __int8 *)v30;
          if ( v55 == 0x2E )
            ++v30;
          v56 = (__PAIR64__(v53, v55 ^ 0x2Eu) - 1) >> 32;
          if ( v56 == 9 && curl_strnequal(v30, "localhost", 9)
            || (v57 = memchr(v30, 46, v56)) != 0 && (unsigned int)(&v30[v56] - v57) >= 2 )
          {
            v58 = domain;
            v59 = domain;
            if ( !domain )
              v59 = v30;
            is_ipnum = Curl_host_is_ipnum(v59);
            v61 = is_ipnum;
            if ( !domain )
            {
              v58 = 0;
LABEL_117:
              domain = v58;
              Curl_cfree(v119->domain);
              v65 = (char *)Curl_strndup(v30, v56);
              v119->domain = v65;
              if ( v61 || !v65 )
              {
                v26 = v118;
                if ( !v65 )
                  goto LABEL_140;
                v112 |= v65 == 0;
              }
              else
              {
                v119->tailmatch = 1;
                v26 = v118;
              }
              break;
            }
            if ( !is_ipnum )
            {
LABEL_88:
              v61 = 0;
              if ( !cookie_tailmatch(v30, v56, v58) )
                goto LABEL_107;
              goto LABEL_117;
            }
          }
          else
          {
            v58 = ":";
            if ( !Curl_host_is_ipnum(":") )
              goto LABEL_88;
          }
          if ( strncmp(v30, v58, v56) || (v61 = 1, v56 != strlen(v58)) )
          {
LABEL_107:
            domain = v58;
            v112 = 1;
            if ( (*((_BYTE *)&data->set + 1337) & 4) != 0 )
              Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v30);
            v26 = v118;
            break;
          }
          goto LABEL_117;
        case 4u:
          v43 = v29;
          if ( curl_strnequal("path", j, 4) )
          {
            Curl_cfree(v119->path);
            v44 = (char *)Curl_strndup(v30, v43);
            v119->path = v44;
            if ( !v44 )
              goto LABEL_140;
            Curl_cfree(v119->spath);
            v45 = sanitize_cookie_path(v119->path);
            v26 = v118;
            v119->spath = v45;
            if ( !v45 )
              goto LABEL_140;
          }
          else
          {
            v26 = v118;
          }
          break;
      }
    }
    else
    {
      if ( v117 != 61 )
        goto LABEL_140;
      v46 = v29;
      Curl_cfree(0);
      v119->name = (char *)Curl_strndup(j, v27);
      Curl_cfree(v119->value);
      v47 = (char *)Curl_strndup(v30, v46);
      v119->value = v47;
      if ( !v47 )
        goto LABEL_140;
      name = v119->name;
      if ( !name )
        goto LABEL_140;
      if ( v47[strcspn(v47, invalid_octets_badoctets)]
        || (v49 = strcspn(name, invalid_octets_badoctets), v26 = v118, name[v49]) )
      {
        if ( (*((_BYTE *)&data->set + 1337) & 4) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
        goto LABEL_140;
      }
    }
LABEL_62:
    for ( j = v26 + 1; ; ++j )
    {
      v50 = (unsigned __int8)*(j - 1);
      if ( v50 != 32 && v50 != 9 )
        break;
    }
  }
  while ( v50 == 59 );
  if ( (v112 & 1) != 0 )
    goto LABEL_140;
  if ( domain )
  {
    if ( !v20->domain )
    {
      v71 = Curl_cstrdup(domain);
      v20->domain = (char *)v71;
      if ( !v71 )
        goto LABEL_140;
    }
  }
  if ( path && !v20->path )
  {
    v72 = strchr(path, 63);
    v73 = v72 ? (char *)Curl_memrchr(path, 47, v72 - path) : strrchr(path, 47);
    if ( v73 )
    {
      v74 = v73 - path;
      v75 = (char *)Curl_cmalloc(v73 - path + 2);
      v20->path = v75;
      if ( !v75 )
        goto LABEL_140;
      v76 = v74 + 1;
      memcpy(v75, path, v76);
      v20->path[v76] = 0;
      v77 = sanitize_cookie_path(v20->path);
      v20->spath = v77;
      if ( !v77 )
        goto LABEL_140;
    }
  }
  if ( !v20->name )
  {
LABEL_140:
    freecookie(v20);
    return 0;
  }
  v78 = data;
  ++data->req.setcookies;
  v16 = 0;
  if ( (v20->prefix & 1) != 0 && !v20->secure
    || (v20->prefix & 2) != 0 && (!v20->secure || (v100 = v20->path) == 0 || strcmp(v100, "/") || v20->tailmatch)
    || !c->running && c->newsession && !v20->expires )
  {
    freecookie(v20);
    return (Cookie *)v16;
  }
  v20->livecookie = c->running;
  v79 = c->lastct + 1;
  c->lastct = v79;
  v20->creationtime = v79;
  if ( !v115 )
    remove_expired(c);
  v80 = &c->cookies[cookiehash(v20->domain)];
  next = *v80;
  if ( !*v80 )
  {
    v86 = 0;
    v85 = 0;
    goto LABEL_225;
  }
  v114 = c;
  v82 = v78;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  while ( 2 )
  {
    v86 = next;
    if ( curl_strequal(next->name, v119->name) )
    {
      v87 = v119->domain;
      v88 = v86->domain;
      if ( v88 )
      {
        if ( !v87 || !curl_strequal(v88, v87) )
          goto LABEL_183;
      }
      else if ( v87 )
      {
        goto LABEL_183;
      }
      spath = v86->spath;
      if ( spath )
      {
        v90 = v119->spath;
        if ( v90 )
        {
          if ( v86->secure && !v119->secure && !secure )
          {
            v91 = strchr(spath + 1, 47);
            v92 = v91 ? v91 - spath : strlen(spath);
            if ( curl_strnequal(spath, v90, v92) )
            {
              if ( v82 && (*((_BYTE *)&v82->set + 1337) & 4) != 0 )
                Curl_infof(
                  v82,
                  "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                  v119->name,
                  v119->domain);
LABEL_208:
              freecookie(v119);
              return 0;
            }
          }
        }
      }
    }
LABEL_183:
    if ( !v83 )
    {
      if ( !curl_strequal(v86->name, v119->name) )
      {
        v83 = 0;
        goto LABEL_184;
      }
      v93 = v119->domain;
      v94 = v86->domain;
      if ( v94 )
      {
        if ( v93 && curl_strequal(v94, v93) )
        {
          v95 = v85 & 1 | (v86->tailmatch == v119->tailmatch);
          v85 = 0;
          if ( !v95 )
          {
            v83 = 0;
            goto LABEL_184;
          }
        }
        else
        {
          v96 = (v85 & 1) != 0;
          v85 = 0;
          if ( !v96 )
          {
            v83 = 0;
            goto LABEL_184;
          }
        }
      }
      else
      {
        v97 = v85 & 1 | (v93 == 0);
        v85 = 0;
        if ( !v97 )
        {
          v83 = 0;
          goto LABEL_184;
        }
      }
      v98 = v119->spath;
      v99 = v86->spath;
      if ( v99 )
      {
        if ( v98 )
        {
          if ( !curl_strequal(v99, v98) )
          {
            v85 = 0;
            v83 = 0;
            goto LABEL_184;
          }
          v85 = 0;
          v83 = 0;
          if ( (v86->spath != 0) == (v119->spath == 0) )
            goto LABEL_184;
        }
        else if ( !v119->spath )
        {
          v85 = 0;
          v83 = 0;
          goto LABEL_184;
        }
      }
      else
      {
        v85 = 0;
        v83 = 0;
        if ( v98 )
          goto LABEL_184;
      }
      v83 = v119;
      v85 = 1;
      if ( v119->livecookie )
      {
        v84 = v86;
      }
      else
      {
        v84 = v86;
        if ( v86->livecookie )
          goto LABEL_208;
      }
    }
LABEL_184:
    next = v86->next;
    if ( v86->next )
      continue;
    break;
  }
  if ( v83 )
  {
    v83->next = v84->next;
    v83->creationtime = v84->creationtime;
    Curl_cfree(v84->name);
    Curl_cfree(v84->value);
    Curl_cfree(v84->domain);
    Curl_cfree(v84->path);
    Curl_cfree(v84->spath);
    memcpy(v84, v83, sizeof(Cookie));
    Curl_cfree(v83);
    v119 = v84;
    c = v114;
    v78 = v82;
  }
  else
  {
    v78 = v82;
    c = v114;
  }
LABEL_225:
  if ( v78 && c->running && (*((_BYTE *)&v78->set + 1337) & 4) != 0 )
  {
    v101 = c;
    v102 = v119;
    v103 = "Added";
    if ( (v85 & 1) != 0 )
      v103 = "Replaced";
    Curl_infof(
      v78,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
      v103,
      v119->name,
      v119->value,
      v119->domain,
      v119->path,
      v119->expires);
    if ( (v85 & 1) == 0 )
    {
LABEL_233:
      if ( v86 )
        v86->next = v102;
      else
        *v80 = v102;
      ++v101->numcookies;
    }
  }
  else
  {
    v101 = c;
    v102 = v119;
    if ( (v85 & 1) == 0 )
      goto LABEL_233;
  }
  expires = v102->expires;
  if ( !expires )
    return v102;
  next_expiration_high = HIDWORD(v101->next_expiration);
  v106 = SHIDWORD(expires) >= next_expiration_high;
  if ( HIDWORD(expires) == next_expiration_high )
    v106 = (unsigned int)expires >= LODWORD(v101->next_expiration);
  if ( !v106 )
    v101->next_expiration = expires;
  return v102;
}
