// local variable allocation has failed, the output may be wrong!
Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v13; // $s3
  Cookie *v14; // $s5
  Cookie *v15; // $s2
  unsigned int v16; // $a0
  unsigned int v17; // $s0
  int v18; // $v0
  const char *v19; // $s4
  size_t v20; // $s2
  char *v21; // $s1
  _BOOL4 v22; // $v0
  int v23; // $v0
  size_t v24; // $s2
  int v25; // $v0
  Cookie *v26; // $a0
  int v27; // $s6
  size_t v28; // $a2
  _BYTE *v29; // $v0
  bool v30; // dc
  int v31; // $v0
  const char *v32; // $v0
  int is_ipnum; // $s0
  const char *v34; // $s3
  size_t v35; // $v0
  size_t v36; // $a2
  Curl_easy *v37; // $v0
  const char *name; // $s2
  Cookie *v39; // $a0
  char *value; // $s0
  int v41; // $v0
  char *v42; // $v0
  int v43; // $v0
  int v44; // $v0
  __int64 v45; // $v1
  int v46; // $a0
  time_t v47; // $a0
  unsigned int v48; // $a0
  int v49; // $v0
  int v50; // $v0
  const char *v51; // $s0
  char *v52; // $a2
  char *v53; // $v0
  const char *v54; // $s1
  int v55; // $v0
  size_t v56; // $s0
  char *v57; // $a0
  char *v58; // $v0
  char *v59; // $v0
  char *v60; // $v0
  CookieInfo *v61; // $v1
  const char *v62; // $a0
  int v63; // $v0
  Cookie *v64; // $a0
  void (*v65)(Cookie *); // $t9
  CookieInfo *v66; // $v1
  int v67; // $v0
  size_t v68; // $v0
  Cookie **v69; // $s7
  Cookie *v70; // $s0
  int livecookie; // $s6
  Cookie *v72; // $s1
  char *v73; // $a0
  char *v74; // $a1
  const char *spath; // $s3
  char *v76; // $s4
  char *v77; // $v0
  size_t v78; // $a2
  char *v79; // $a0
  char *v80; // $a1
  char *v81; // $a0
  char *v82; // $a1
  Cookie *v83; // $v0
  Cookie *v84; // $v1
  char *v85; // $a2
  char *v86; // $a1
  char *v87; // $a0
  Curl_easy *v88; // $v0
  curl_off_t expires; // $v1
  CookieInfo *v90; // $a0
  const char *v91; // $a2
  int v93; // $s7
  size_t v94; // $v0
  char *v95; // $s6
  char v96[4]; // [sp+30h] [-B8h] BYREF
  CookieInfo *ca; // [sp+34h] [-B4h]
  void (*v98)(Cookie *); // [sp+38h] [-B0h]
  Curl_easy *dataa; // [sp+3Ch] [-ACh]
  const char *domain_0; // [sp+40h] [-A8h]
  _BOOL4 v101; // [sp+44h] [-A4h]
  const char *v102; // [sp+48h] [-A0h]
  time_t now; // [sp+4Ch] [-9Ch]
  void (*v104)(Cookie *); // [sp+50h] [-98h]
  void (*v105)(char **, const char *, size_t); // [sp+54h] [-94h]
  const char *v106; // [sp+58h] [-90h]
  int v107; // [sp+5Ch] [-8Ch] OVERLAPPED
  char *tok_buf; // [sp+60h] [-88h] BYREF
  char date[128]; // [sp+64h] [-84h] BYREF

  dataa = data;
  ca = c;
  v13 = (char *)lineptr;
  domain_0 = domain;
  v102 = path;
  v101 = secure;
  now = time(0u);
  if ( data->req.setcookies >= 0x32u )
    return 0;
  v14 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v14 )
    return 0;
  if ( !httpheader )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v13 = (char *)(lineptr + 10);
      v14->httponly = 1;
    }
    if ( *v13 != 35 )
    {
      v59 = strchr(v13, 13);
      if ( v59 )
        *v59 = 0;
      v60 = strchr(v13, 10);
      if ( v60 )
        *v60 = 0;
      if ( strtok_r(v13, "\t", &tok_buf) )
        __asm { jr      $v0 }
      freecookie(v14);
      return 0;
    }
LABEL_6:
    Curl_cfree(v14);
    return 0;
  }
  if ( strlen(lineptr) >= 0x1389 )
    goto LABEL_6;
  v107 = 0;
  v104 = freecookie;
  v106 = "path";
  v105 = strstore;
  v98 = freecookie;
  while ( 1 )
  {
    while ( 1 )
    {
      v93 = *v13;
      if ( !*v13 || v93 != 32 && v93 != 9 )
        break;
      ++v13;
    }
    v94 = strcspn(v13, ";\t\r\n=");
    v17 = v94;
    if ( v94 )
      break;
    v41 = *v13;
    if ( !*v13 )
      goto LABEL_125;
LABEL_247:
    ++v13;
    if ( v41 != 59 )
      goto LABEL_125;
  }
  v95 = &v13[v94];
  while ( 1 )
  {
    v16 = v17--;
    v18 = v13[v17];
    if ( v18 != 32 && v18 != 9 )
      break;
    if ( !v17 )
      goto LABEL_12;
  }
  v17 = v16;
LABEL_12:
  v19 = v95 + 1;
  if ( *v95 != 61 )
  {
    v21 = v95;
    if ( v17 >= 0xFFF )
    {
      v24 = 0;
      goto LABEL_57;
    }
    v19 = 0;
    v27 = 0;
    v24 = 0;
LABEL_28:
    if ( v17 >= 7 && v93 == 95 && v13[1] == 95 )
    {
      if ( curl_strnequal("__Secure-", v13, 9) )
      {
        v14->prefix |= 1u;
      }
      else if ( curl_strnequal("__Host-", v13, 7) )
      {
        v14->prefix |= 2u;
      }
    }
    if ( !v14->name )
    {
      if ( !v27 )
        goto LABEL_73;
      v105(&v14->name, v13, v17);
      v105(&v14->value, v19, v24);
      name = v14->name;
      v39 = v14;
      if ( !name )
        goto LABEL_74;
      value = v14->value;
      if ( !value )
        goto LABEL_74;
      if ( value[strcspn(v14->value, badoctets_0)] || name[strcspn(name, badoctets_0)] )
      {
        if ( (*(_DWORD *)(&dataa->set.connect_only + 3) & 0x40000) != 0 )
        {
          Curl_infof(dataa, "invalid octets in name/value, cookie dropped");
          v39 = v14;
          goto LABEL_74;
        }
        goto LABEL_73;
      }
      goto LABEL_83;
    }
    if ( !v24 )
    {
      if ( v17 == 6 )
      {
        if ( curl_strnequal("secure", v13, 6) )
        {
          if ( !v101 && ca->running )
            goto LABEL_73;
          v14->secure = 1;
          goto LABEL_83;
        }
        if ( !v27 )
        {
          v41 = *v21;
LABEL_84:
          if ( v41 )
          {
            do
            {
              if ( v41 == 32 )
              {
                ++v21;
              }
              else
              {
                v13 = v21;
                if ( v41 != 9 )
                  goto LABEL_247;
                ++v21;
              }
              v41 = *v21;
            }
            while ( *v21 );
          }
LABEL_125:
          if ( !v107 )
          {
            if ( !v14->domain )
            {
              if ( domain_0 )
              {
                v50 = Curl_cstrdup(domain_0);
                v14->domain = (char *)v50;
                if ( !v50 )
                {
                  v39 = v14;
                  goto LABEL_74;
                }
              }
            }
            if ( v14->path
              || (v51 = v102) == 0
              || ((v52 = strchr(v102, 63)) == 0 ? (v53 = strrchr(v51, 47)) : (v53 = (char *)Curl_memrchr(
                                                                                              v102,
                                                                                              47,
                                                                                              v52 - v102)),
                  !v53) )
            {
LABEL_128:
              if ( v14->name )
              {
                ++dataa->req.setcookies;
                if ( (v14->prefix & 1) != 0 )
                {
                  if ( !v14->secure )
                  {
LABEL_190:
                    freecookie(v14);
                    return 0;
                  }
                  v61 = ca;
                  if ( (v14->prefix & 2) == 0 )
                  {
LABEL_158:
                    if ( !v61->running && v61->newsession )
                    {
                      v39 = v14;
                      if ( !v14->expires )
                        goto LABEL_74;
                    }
                    v14->livecookie = v61->running;
                    v66 = ca;
                    v67 = ca->lastct + 1;
                    ca->lastct = v67;
                    v14->creationtime = v67;
                    if ( !noexpire )
                      remove_expired(v66);
                    v68 = cookiehash(v14->domain);
                    v69 = &ca->cookies[v68];
                    v70 = *v69;
                    livecookie = 0;
                    if ( *v69 )
                    {
                      v15 = 0;
                      v72 = 0;
                      while ( 1 )
                      {
                        if ( !curl_strequal(v70->name, v14->name) )
                          goto LABEL_173;
                        v73 = v70->domain;
                        if ( v73 )
                        {
                          v74 = v14->domain;
                          if ( !v74 || !curl_strequal(v73, v74) )
                            goto LABEL_173;
                        }
                        else if ( v14->domain )
                        {
                          goto LABEL_173;
                        }
                        spath = v70->spath;
                        if ( spath )
                        {
                          v76 = v14->spath;
                          if ( v76 )
                          {
                            if ( v70->secure && !v14->secure && !v101 )
                            {
                              v77 = strchr(spath + 1, 47);
                              v78 = v77 ? v77 - spath : strlen(spath);
                              if ( curl_strnequal(spath, v76, v78) )
                              {
                                if ( (*(_DWORD *)(&dataa->set.connect_only + 3) & 0x40000) != 0 )
                                  Curl_infof(
                                    dataa,
                                    "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                                    v14->name,
                                    v14->domain);
                                goto LABEL_190;
                              }
                            }
                          }
                        }
LABEL_173:
                        if ( v72 || !curl_strequal(v70->name, v14->name) )
                          goto LABEL_174;
                        v79 = v70->domain;
                        if ( !v79 )
                        {
                          if ( v14->domain )
                          {
LABEL_199:
                            if ( !livecookie )
                              goto LABEL_174;
                          }
                          v81 = v70->spath;
                          goto LABEL_201;
                        }
                        v80 = v14->domain;
                        if ( !v80 || !curl_strequal(v79, v80) || v70->tailmatch != v14->tailmatch )
                          goto LABEL_199;
                        v81 = v70->spath;
LABEL_201:
                        if ( v81 )
                        {
                          v82 = v14->spath;
                          if ( !v82 )
                          {
                            v72 = 0;
                            livecookie = 0;
                            goto LABEL_174;
                          }
                          livecookie = 0;
                          if ( !curl_strequal(v81, v82) )
                            goto LABEL_174;
                        }
                        livecookie = 0;
                        if ( (v70->spath == 0) == (v14->spath == 0) )
                        {
                          livecookie = v14->livecookie;
                          if ( v14->livecookie )
                          {
                            v15 = v70;
                            v72 = v14;
                          }
                          else
                          {
                            livecookie = 1;
                            if ( v70->livecookie )
                              goto LABEL_190;
                            v15 = v70;
                            v72 = v14;
                          }
                        }
LABEL_174:
                        if ( !v70->next )
                        {
                          if ( v72 )
                          {
                            v72->next = v15->next;
                            v72->creationtime = v15->creationtime;
                            Curl_cfree(v15->name);
                            Curl_cfree(v15->value);
                            Curl_cfree(v15->domain);
                            Curl_cfree(v15->path);
                            Curl_cfree(v15->spath);
                            v83 = v72;
                            v84 = v15;
                            do
                            {
                              v85 = v83->name;
                              v86 = v83->value;
                              v87 = v83->path;
                              v84->next = v83->next;
                              v84->name = v85;
                              v84->value = v86;
                              v84->path = v87;
                              v83 = (Cookie *)((char *)v83 + 16);
                              v84 = (Cookie *)((char *)v84 + 16);
                            }
                            while ( v83 != &v72[1] );
                            Curl_cfree(v72);
                          }
                          else
                          {
                            v15 = v14;
                          }
                          v88 = dataa;
                          if ( !ca->running )
                            goto LABEL_216;
                          goto LABEL_227;
                        }
                        v70 = v70->next;
                      }
                    }
                    v88 = dataa;
                    if ( ca->running )
                    {
                      v15 = v14;
LABEL_227:
                      if ( (*(_DWORD *)(&v88->set.connect_only + 3) & 0x40000) != 0 )
                      {
                        if ( livecookie )
                          v91 = "Replaced";
                        else
                          v91 = "Added";
                        Curl_infof(
                          dataa,
                          "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
                          v91,
                          v15->name,
                          v15->value,
                          v15->domain,
                          v15->path,
                          v15->expires);
                      }
LABEL_216:
                      if ( livecookie )
                        goto LABEL_220;
                      if ( v70 )
                      {
                        v70->next = v15;
LABEL_219:
                        ++ca->numcookies;
LABEL_220:
                        expires = v15->expires;
                        if ( expires )
                        {
                          v90 = ca;
                          if ( SHIDWORD(expires) < SHIDWORD(ca->next_expiration)
                            || HIDWORD(ca->next_expiration) == HIDWORD(expires)
                            && (v90 = ca, (unsigned int)expires < LODWORD(ca->next_expiration)) )
                          {
                            v90->next_expiration = expires;
                          }
                        }
                        return v15;
                      }
                    }
                    else
                    {
                      v15 = v14;
                    }
                    *v69 = v15;
                    goto LABEL_219;
                  }
                }
                else
                {
                  v61 = ca;
                  if ( (v14->prefix & 2) == 0 )
                    goto LABEL_158;
                  if ( !v14->secure )
                    goto LABEL_168;
                }
                v62 = v14->path;
                if ( v62 )
                {
                  v63 = strcmp(v62, "/");
                  v64 = v14;
                  if ( !v63 )
                  {
                    v65 = (void (*)(Cookie *))MEMORY[0xB740];
                    if ( !v14->tailmatch )
                    {
                      v61 = ca;
                      goto LABEL_158;
                    }
LABEL_170:
                    ((void (*)(Cookie *))((char *)v65 + (__int16)freecookie))(v64);
                    return 0;
                  }
LABEL_169:
                  v65 = freecookie;
                  goto LABEL_170;
                }
LABEL_168:
                v64 = v14;
                goto LABEL_169;
              }
              goto LABEL_73;
            }
            v54 = v102;
            v55 = v53 - v102;
            v56 = v55 + 1;
            v57 = (char *)Curl_cmalloc(v55 + 2);
            v14->path = v57;
            if ( v57 )
            {
              memcpy(v57, v54, v56);
              v14->path[v56] = 0;
              v58 = sanitize_cookie_path(v14->path);
              v14->spath = v58;
              if ( !v58 )
              {
                v39 = v14;
                goto LABEL_74;
              }
              goto LABEL_128;
            }
          }
LABEL_73:
          v39 = v14;
LABEL_74:
          freecookie(v39);
          return 0;
        }
LABEL_36:
        if ( v17 == 6 )
        {
          if ( curl_strnequal((char *)v104 + 0x3434, v13, 6) && v24 )
          {
            if ( *v19 == 46 )
            {
              ++v19;
              --v24;
            }
            if ( v24 == 9 )
            {
              v43 = curl_strnequal(v19, "localhost", 9);
              v28 = 9;
              if ( v43 )
              {
                v32 = domain_0;
                goto LABEL_45;
              }
            }
            else
            {
              v28 = v24;
            }
            v29 = memchr(v19, 46, v28);
            v30 = v29 == 0;
            v31 = v29 - v19;
            if ( v30 )
            {
              domain_0 = ":";
              goto LABEL_46;
            }
            v30 = v24 - v31 < 2;
            v32 = domain_0;
            if ( v30 )
            {
              domain_0 = ":";
              goto LABEL_46;
            }
LABEL_45:
            if ( !v32 )
            {
              is_ipnum = Curl_host_is_ipnum(v19);
              v36 = v24;
              goto LABEL_238;
            }
LABEL_46:
            is_ipnum = Curl_host_is_ipnum(domain_0);
            if ( !is_ipnum )
            {
              v30 = !cookie_tailmatch(v19, v24, domain_0);
              v37 = dataa;
              if ( !v30 )
              {
                strstore(&v14->domain, v19, v24);
                if ( !v14->domain )
                  goto LABEL_73;
                v14->tailmatch = 1;
                goto LABEL_83;
              }
              goto LABEL_50;
            }
            v34 = domain_0;
            if ( strncmp(v19, domain_0, v24) || (v35 = strlen(v34), v36 = v24, v35 != v24) )
            {
              v37 = dataa;
LABEL_50:
              if ( (*(_DWORD *)(&v37->set.connect_only + 3) & 0x40000) != 0 )
                Curl_infof(dataa, "skipped cookie with bad tailmatch domain: %s", v19);
              v107 = httpheader;
              goto LABEL_83;
            }
LABEL_238:
            strstore(&v14->domain, v19, v36);
            v39 = v14;
            if ( !v14->domain )
              goto LABEL_74;
            if ( !is_ipnum )
              v14->tailmatch = 1;
            goto LABEL_83;
          }
          goto LABEL_83;
        }
        goto LABEL_82;
      }
      if ( v17 == 8 )
      {
        if ( curl_strnequal("httponly", v13, 8) )
        {
          v14->httponly = 1;
          goto LABEL_83;
        }
        if ( !v27 )
        {
LABEL_83:
          v41 = *v21;
          goto LABEL_84;
        }
LABEL_82:
        if ( v17 == 7 && !curl_strnequal("version", v13, 7) )
        {
          if ( curl_strnequal("max-age", v13, 7) )
          {
            if ( *v19 == 34 )
              ++v19;
            v44 = curlx_strtoofft(v19, 0, 10, &v14->expires);
            switch ( v44 )
            {
              case 1:
                LODWORD(v14->expires) = -1;
                HIDWORD(v14->expires) = 0x7FFFFFFF;
                break;
              case 2:
                LODWORD(v14->expires) = 1;
                HIDWORD(v14->expires) = 0;
                break;
              case 0:
                LODWORD(v45) = HIDWORD(v14->expires);
                HIDWORD(v45) = v14->expires;
                if ( v45 )
                {
                  v46 = 0x7FFFFFFF - (now >> 0x1F);
                  if ( v46 >= (int)v45
                    && ((v30 = (_DWORD)v45 != v46, v47 = now, v30) || (v47 = now, (unsigned int)~now >= HIDWORD(v45))) )
                  {
                    v48 = HIDWORD(v45) + v47;
                    HIDWORD(v14->expires) = (v48 < HIDWORD(v45)) + v45 + (now >> 0x1F);
                    LODWORD(v14->expires) = v48;
                  }
                  else
                  {
                    LODWORD(v14->expires) = -1;
                    HIDWORD(v14->expires) = 0x7FFFFFFF;
                  }
                }
                else
                {
                  LODWORD(v14->expires) = 1;
                  HIDWORD(v14->expires) = 0;
                }
                break;
            }
          }
          else if ( curl_strnequal("expires", v13, 7) && !v14->expires && v24 < 0x80 )
          {
            memcpy(date, v19, v24);
            v96[v24 + 0x34] = 0;
            v49 = Curl_getdate_capped(date);
            if ( v49 )
            {
              if ( v49 >> 0x1F == -1 )
              {
                LODWORD(v14->expires) = 0;
                HIDWORD(v14->expires) = 0;
              }
              else
              {
                v14->expires = v49;
              }
            }
            else
            {
              LODWORD(v14->expires) = 1;
              HIDWORD(v14->expires) = 0;
            }
          }
        }
        goto LABEL_83;
      }
      if ( !v27 )
        goto LABEL_83;
    }
    if ( v17 == 4 )
    {
      if ( curl_strnequal(v106, v13, 4) )
      {
        strstore(&v14->path, v19, v24);
        if ( !v14->path )
          goto LABEL_73;
        Curl_cfree(v14->spath);
        v42 = sanitize_cookie_path(v14->path);
        v14->spath = v42;
        if ( !v42 )
        {
          v39 = v14;
          goto LABEL_74;
        }
      }
      goto LABEL_83;
    }
    goto LABEL_36;
  }
  v20 = strcspn(v95 + 1, (const char *)v98 + 0x337C);
  v21 = (char *)&v19[v20];
  if ( !v20 )
  {
    v22 = v17 < 0xFFF;
LABEL_256:
    if ( !v22 )
    {
      v24 = 0;
      goto LABEL_57;
    }
    v24 = 0;
LABEL_27:
    v27 = httpheader;
    if ( v17 + v24 >= 0x1001 )
      goto LABEL_57;
    goto LABEL_28;
  }
  while ( 1 )
  {
    v23 = v95[v20];
    if ( v23 != 32 )
      break;
    --v20;
LABEL_16:
    v22 = v17 < 0xFFF;
    if ( !v20 )
      goto LABEL_256;
  }
  --v20;
  if ( v23 == 9 )
    goto LABEL_16;
  v24 = v20 + 1;
  while ( 1 )
  {
    v25 = *v19;
    if ( v25 != 32 )
      break;
    --v24;
LABEL_21:
    ++v19;
    if ( !v24 )
      goto LABEL_25;
  }
  --v24;
  if ( v25 == 9 )
    goto LABEL_21;
  if ( memchr(v19, 9, ++v24) )
  {
    freecookie(v14);
    if ( (*(_DWORD *)(&dataa->set.connect_only + 3) & 0x40000) != 0 )
      Curl_infof(dataa, "cookie contains TAB, dropping");
    return 0;
  }
LABEL_25:
  if ( v17 >= 0xFFF )
  {
LABEL_57:
    v26 = v14;
    goto LABEL_58;
  }
  v26 = v14;
  if ( v24 < 0xFFF )
    goto LABEL_27;
LABEL_58:
  freecookie(v26);
  if ( (*(_DWORD *)(&dataa->set.connect_only + 3) & 0x40000) != 0 )
    Curl_infof(dataa, "oversized cookie dropped, name/val %zu + %zu bytes", v17, v24);
  return 0;
}
