Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        char *domain,
        const char *path,
        bool secure)
{
  CookieInfo *v12; // r13
  time_t v13; // rax
  Cookie *v14; // rdx
  __int64 v15; // rax
  Cookie *v16; // r12
  char *v17; // rbp
  char *i; // r14
  char v19; // r12
  size_t v20; // rax
  size_t v21; // r13
  char *v22; // rcx
  size_t v23; // rbp
  char v24; // al
  char v25; // cl
  size_t v26; // r15
  const char *v27; // rbx
  size_t v28; // rax
  char v29; // dl
  size_t v30; // rax
  size_t v31; // r13
  int v32; // ebx
  __int64 v33; // rbp
  char v34; // r13
  int v35; // eax
  char *v36; // rax
  char **v37; // rbp
  const char *v38; // r14
  const char *v39; // rdi
  char v40; // r13
  int v41; // eax
  const char *v42; // r13
  size_t v43; // r15
  const char *v44; // rbx
  const char *v45; // rdi
  unsigned __int8 is_ipnum; // r14
  bool v47; // al
  char v48; // cl
  const char *v49; // rdi
  int v50; // eax
  char v51; // r13
  int v52; // eax
  char v53; // al
  __int64 v54; // rax
  curl_off_t v55; // rax
  const char *v56; // rbx
  __int64 v57; // rax
  char v58; // cl
  char *v59; // rax
  char *v60; // rax
  char *v61; // rax
  const char *v62; // rbp
  int v63; // ebx
  char v64; // r14
  __int64 v65; // rax
  const char *v66; // rax
  char *v67; // rax
  __int64 v68; // rax
  __int64 v69; // rax
  __int64 v70; // rbx
  __int64 v71; // rax
  char *v72; // rax
  __int64 v73; // rax
  _BOOL4 v74; // ebx
  char v75; // al
  char *v76; // rax
  char *v77; // rax
  __int64 v78; // rbx
  char *v79; // rax
  size_t v80; // rbx
  char *v81; // rax
  char v82; // cl
  unsigned __int8 prefix; // al
  bool running; // al
  int v85; // eax
  Cookie *next; // rax
  Cookie *v87; // r15
  Cookie *v88; // r13
  char v89; // r14
  Cookie *v90; // rbx
  char *v91; // rdi
  char *v92; // rsi
  char *v93; // rdi
  char *v94; // rsi
  bool v95; // zf
  const char *spath; // rbp
  char *v97; // r12
  char *v98; // rax
  size_t v99; // rax
  char *v100; // rdi
  char *v101; // rsi
  Cookie *v102; // rdi
  const char *v103; // rdi
  __int128 v105; // xmm0
  __int128 v106; // xmm1
  __int128 v107; // xmm2
  const char *v108; // rdx
  Cookie **p_next; // rax
  curl_off_t expires; // rax
  __int64 v111; // [rsp+8h] [rbp-130h]
  size_t v112; // [rsp+8h] [rbp-130h]
  Cookie *v113; // [rsp+10h] [rbp-128h]
  char v114; // [rsp+18h] [rbp-120h]
  CookieInfo *cookies; // [rsp+28h] [rbp-110h]
  char *s2; // [rsp+30h] [rbp-108h]
  char *newstr; // [rsp+38h] [rbp-100h]
  bool v119; // [rsp+44h] [rbp-F4h]
  char **p_name; // [rsp+48h] [rbp-F0h]
  time_t v121; // [rsp+50h] [rbp-E8h]
  curl_off_t *p_expires; // [rsp+60h] [rbp-D8h]
  char **p_domain; // [rsp+68h] [rbp-D0h]
  char **str; // [rsp+70h] [rbp-C8h]
  char **p_value; // [rsp+78h] [rbp-C0h]
  char *dest[23]; // [rsp+80h] [rbp-B8h] BYREF

  v12 = c;
  v13 = time(0LL);
  v14 = 0LL;
  if ( data->req.setcookies > 0x31u )
    return v14;
  v121 = v13;
  s2 = domain;
  v119 = noexpire;
  v15 = Curl_ccalloc(1LL, 72LL, 0LL);
  if ( !v15 )
    return 0LL;
  v16 = (Cookie *)v15;
  v113 = (Cookie *)v15;
  if ( !httpheader )
  {
    dest[0] = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 10;
      v16->httponly = 1;
      if ( *lineptr == 35 )
        goto LABEL_8;
    }
    else if ( *lineptr == 35 )
    {
LABEL_8:
      Curl_cfree(v16);
      return 0LL;
    }
    v59 = strchr(lineptr, 13);
    if ( v59 )
      *v59 = 0;
    v60 = strchr(lineptr, 10);
    if ( v60 )
      *v60 = 0;
    v61 = strtok_r(lineptr, "\t", dest);
    if ( v61 )
    {
      v62 = v61;
      v63 = 0;
      v64 = 0;
      do
      {
        switch ( v63 )
        {
          case 0:
            if ( *v62 == 46 )
              ++v62;
            v65 = Curl_cstrdup(v62);
            v113->domain = (char *)v65;
            if ( !v65 )
              v64 = 1;
            v63 = 0;
            break;
          case 1:
            v113->tailmatch = (unsigned int)curl_strequal(v62, "TRUE") != 0;
            v63 = 1;
            break;
          case 2:
            if ( !strcmp("TRUE", v62) || !strcmp("FALSE", v62) )
            {
              v70 = Curl_cstrdup("/");
              v113->path = (char *)v70;
              v71 = Curl_cstrdup("/");
              if ( !v71 )
                v64 = 1;
              v113->spath = (char *)v71;
              if ( !v70 )
                v64 = 1;
              goto LABEL_190;
            }
            v66 = (const char *)Curl_cstrdup(v62);
            v113->path = (char *)v66;
            v63 = 2;
            if ( !v66 )
              goto LABEL_194;
            v67 = sanitize_cookie_path(v66);
            v113->spath = v67;
            if ( !v67 )
              v64 = 1;
            break;
          case 3:
LABEL_190:
            v113->secure = 0;
            v63 = 3;
            if ( (unsigned int)curl_strequal(v62, "TRUE") )
            {
              if ( !secure && !c->running )
                goto LABEL_194;
              v113->secure = 1;
            }
            break;
          case 4:
            if ( (unsigned int)curlx_strtoofft(v62, 0LL, 10LL, &v16->expires) )
              v64 = 1;
            v63 = 4;
            break;
          case 5:
            v68 = Curl_cstrdup(v62);
            v113->name = (char *)v68;
            v63 = 5;
            if ( v68 )
            {
              if ( (unsigned int)curl_strnequal("__Secure-", v68, 9LL) )
              {
                v113->prefix |= 1u;
              }
              else if ( (unsigned int)curl_strnequal("__Host-", v113->name, 7LL) )
              {
                v113->prefix |= 2u;
              }
            }
            else
            {
LABEL_194:
              v64 = 1;
            }
            break;
          case 6:
            v69 = Curl_cstrdup(v62);
            v113->value = (char *)v69;
            if ( !v69 )
              v64 = 1;
            v63 = 6;
            break;
          default:
            break;
        }
        v72 = strtok_r(0LL, "\t", dest);
        ++v63;
        if ( !v72 )
          break;
        v62 = v72;
      }
      while ( (v64 & 1) == 0 );
      if ( v63 == 6 )
      {
        v73 = Curl_cstrdup(&L_str_22);
        v16 = v113;
        v113->value = (char *)v73;
        v95 = v73 == 0;
        v74 = v73 == 0;
        v75 = v64;
        v64 = 1;
        if ( !v95 )
          v64 = v75;
        v63 = v74 ^ 7;
LABEL_207:
        if ( (v64 & 1) == 0 && v63 == 7 )
          goto LABEL_229;
        goto LABEL_288;
      }
    }
    else
    {
      v64 = 0;
      v63 = 0;
    }
    v16 = v113;
    goto LABEL_207;
  }
  v17 = lineptr;
  if ( strlen(lineptr) > 0x1388 )
  {
    Curl_cfree(v16);
    goto LABEL_227;
  }
  p_name = &v16->name;
  str = &v16->path;
  p_expires = &v16->expires;
  p_domain = &v16->domain;
  p_value = &v16->value;
  v114 = 0;
  do
  {
    for ( i = v17; ; ++i )
    {
      v19 = *i;
      if ( *i != 32 && v19 != 9 )
        break;
    }
    v20 = strcspn(i, ";\t\r\n=");
    if ( !v20 )
    {
      v16 = v113;
      goto LABEL_123;
    }
    v21 = v20;
    v22 = &i[v20];
    v23 = v20;
    while ( 1 )
    {
      v24 = i[v23 - 1];
      if ( v24 != 32 && v24 != 9 )
        break;
      if ( !--v23 )
      {
        v23 = 0LL;
        break;
      }
    }
    v111 = (__int64)v22;
    v25 = *v22;
    v26 = 0LL;
    v27 = 0LL;
    if ( v25 == 61 )
    {
      v27 = &i[v21 + 1];
      v28 = strcspn(v27, ";\r\n");
      if ( v28 )
      {
        v26 = v28;
        while ( 1 )
        {
          v29 = i[v21 + v26];
          if ( v29 != 32 && v29 != 9 )
            break;
          if ( !--v26 )
          {
            v26 = 0LL;
            break;
          }
        }
      }
      else
      {
        v26 = 0LL;
      }
      v30 = v21 + v28;
      if ( v26 )
      {
        v31 = v26 + v21;
        while ( *v27 == 32 || *v27 == 9 )
        {
          ++v27;
          if ( !--v26 )
          {
            v26 = 0LL;
            v27 = &i[v31 + 1];
            break;
          }
        }
      }
      v111 = (__int64)&i[v30 + 1];
      if ( memchr(v27, 9, v26) )
      {
        v16 = v113;
        freecookie(v113);
        v32 = 1;
        if ( !data )
          goto LABEL_82;
        v33 = v111;
        if ( (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
          Curl_infof(data, "cookie contains TAB, dropping");
        goto LABEL_120;
      }
      v25 = 61;
    }
    if ( v23 > 0xFFE || v26 > 0xFFE || v26 + v23 >= 0x1001 )
    {
      v16 = v113;
      freecookie(v113);
      v32 = 1;
      if ( data && (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v23, v26);
      goto LABEL_82;
    }
    v95 = v19 == 95;
    v16 = v113;
    if ( v95 && v23 >= 7 && i[1] == 95 )
    {
      v34 = v25;
      if ( (unsigned int)curl_strnequal("__Secure-", i, 9LL) )
      {
        v113->prefix |= 1u;
        v25 = v34;
      }
      else
      {
        v35 = curl_strnequal("__Host-", i, 7LL);
        v25 = v34;
        if ( v35 )
          v113->prefix |= 2u;
      }
    }
    if ( !*p_name )
    {
      newstr = (char *)v27;
      v32 = 6;
      if ( v25 != 61 )
        goto LABEL_81;
      strstore(p_name, i, v23);
      v37 = p_value;
      strstore(p_value, newstr, v26);
      v38 = *p_name;
      if ( !*p_name )
        goto LABEL_81;
      v39 = *v37;
      v95 = *v37 == 0LL;
      v33 = v111;
      if ( v95 )
        goto LABEL_74;
      if ( invalid_octets(v39) || invalid_octets(v38) )
      {
        if ( data && (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
LABEL_74:
        v114 = 1;
        goto LABEL_120;
      }
      goto LABEL_119;
    }
    if ( !v26 )
    {
      if ( v23 == 8 )
      {
        v51 = v25;
        v52 = curl_strnequal("httponly", i, 8LL);
        v25 = v51;
        if ( v52 )
        {
          v113->httponly = 1;
          goto LABEL_118;
        }
      }
      else if ( v23 == 6 )
      {
        v40 = v25;
        if ( (unsigned int)curl_strnequal("secure", i, 6LL) )
        {
          if ( secure || !c->running )
          {
            v113->secure = 1;
            goto LABEL_118;
          }
          v32 = 6;
LABEL_81:
          v114 = 1;
LABEL_82:
          v33 = v111;
          goto LABEL_120;
        }
        v25 = v40;
      }
      if ( v25 != 61 )
        goto LABEL_118;
    }
    if ( v23 == 7 )
    {
      if ( !(unsigned int)curl_strnequal("version", i, 7LL) )
      {
        if ( (unsigned int)curl_strnequal("max-age", i, 7LL) )
        {
          v49 = v27 + 1;
          if ( *v27 != 34 )
            v49 = v27;
          v50 = curlx_strtoofft(v49, 0LL, 10LL, p_expires);
          if ( v50 )
          {
            v33 = v111;
            if ( v50 != 2 )
            {
              if ( v50 != 1 )
              {
LABEL_119:
                v32 = 0;
                goto LABEL_120;
              }
LABEL_146:
              *p_expires = 0x7FFFFFFFFFFFFFFFLL;
              goto LABEL_119;
            }
          }
          else
          {
            v55 = *p_expires;
            v33 = v111;
            if ( *p_expires )
            {
              if ( 0x7FFFFFFFFFFFFFFFLL - v121 >= v55 )
              {
                *p_expires = v121 + v55;
                goto LABEL_119;
              }
              goto LABEL_146;
            }
          }
          *p_expires = 1LL;
          goto LABEL_119;
        }
        if ( (unsigned int)curl_strnequal("expires", i, 7LL) && v26 <= 0x7F && !v113->expires )
        {
          memcpy(dest, v27, v26);
          *((_BYTE *)dest + v26) = 0;
          v54 = Curl_getdate_capped(dest);
          v113->expires = v54;
          if ( v54 )
          {
            if ( v54 < 0 )
              v113->expires = 0LL;
          }
          else
          {
            v113->expires = 1LL;
          }
        }
      }
LABEL_118:
      v33 = v111;
      goto LABEL_119;
    }
    if ( v23 != 6 )
    {
      if ( v23 == 4 && (unsigned int)curl_strnequal("path", i, 4LL) )
      {
        strstore(str, v27, v26);
        v32 = 6;
        if ( !*str )
          goto LABEL_81;
        Curl_cfree(v113->spath);
        v36 = sanitize_cookie_path(v113->path);
        v113->spath = v36;
        v33 = v111;
        if ( !v36 )
          goto LABEL_74;
        goto LABEL_119;
      }
      goto LABEL_118;
    }
    v41 = curl_strnequal("domain", i, 6LL);
    if ( !v26 || !v41 )
      goto LABEL_118;
    v42 = v27 + 1;
    if ( *v27 != 46 )
      v42 = v27;
    v43 = v26 - (*v27 == 46);
    v44 = s2;
    if ( bad_domain(v42, v43) )
      v44 = ":";
    v45 = v44;
    if ( !v44 )
      v45 = v42;
    is_ipnum = Curl_host_is_ipnum(v45);
    s2 = (char *)v44;
    if ( !v44 )
    {
LABEL_98:
      strstore(p_domain, v42, v43);
      v47 = *p_domain != 0LL;
      v48 = v114;
      if ( !*p_domain )
        v48 = 1;
      v32 = 0;
      if ( !*p_domain )
        v32 = 6;
      if ( (*p_domain == 0LL) | is_ipnum )
      {
        v114 = v48;
      }
      else
      {
        v113->tailmatch = 1;
        v32 = 0;
        v47 = 1;
      }
      v33 = v111;
      goto LABEL_142;
    }
    if ( is_ipnum )
    {
      if ( !strncmp(v42, v44, v43) && v43 == strlen(v44) )
        goto LABEL_98;
    }
    else if ( cookie_tailmatch(v42, v43, v44) )
    {
      goto LABEL_98;
    }
    v32 = 0;
    v33 = v111;
    if ( data )
    {
      v114 = 1;
      v47 = 1;
      if ( (*((_BYTE *)&data->set + 2238) & 0x10) == 0 )
        goto LABEL_142;
      v32 = 0;
      Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v42);
    }
    v114 = 1;
    v47 = 1;
LABEL_142:
    if ( v47 )
      goto LABEL_119;
LABEL_120:
    i = (char *)v33;
    if ( v32 )
      break;
LABEL_123:
    while ( 1 )
    {
      v53 = *i;
      if ( *i != 32 && v53 != 9 )
        break;
      ++i;
    }
    v17 = i + 1;
    v32 = 6;
    if ( v53 == 59 )
      v32 = 0;
    else
      v17 = i;
  }
  while ( !v32 );
  if ( v32 == 6 )
  {
    v12 = c;
    if ( (v114 & 1) != 0 )
    {
      v56 = path;
    }
    else
    {
      v56 = path;
      if ( s2 && !v16->domain )
      {
        v57 = Curl_cstrdup(s2);
        v16->domain = (char *)v57;
        v58 = 1;
        if ( v57 )
          v58 = v114;
        v114 = v58;
      }
    }
    if ( (v114 & 1) == 0 && v56 && !v16->path )
    {
      v76 = strchr(v56, 63);
      v77 = v76 ? (char *)Curl_memrchr(v56, 47LL, v76 - v56) : strrchr(v56, 47);
      if ( v77 )
      {
        v78 = v77 - path;
        v79 = (char *)Curl_cmalloc(v77 - path + 2);
        v16->path = v79;
        if ( v79 )
        {
          v80 = v78 + 1;
          memcpy(v79, path, v80);
          v16->path[v80] = 0;
          v81 = sanitize_cookie_path(v16->path);
          v16->spath = v81;
          v82 = 1;
          if ( v81 )
            v82 = v114;
          v114 = v82;
        }
        else
        {
          v114 = 1;
        }
      }
    }
    if ( (v114 & 1) == 0 && v16->name )
    {
      ++data->req.setcookies;
      v32 = 0;
      goto LABEL_228;
    }
    freecookie(v16);
LABEL_227:
    v32 = 1;
    goto LABEL_228;
  }
  v12 = c;
LABEL_228:
  if ( v32 )
    return 0LL;
LABEL_229:
  prefix = v16->prefix;
  if ( (prefix & 1) != 0 && !v16->secure
    || (prefix & 2) != 0 && (!v16->secure || (v103 = v16->path) == 0LL || strcmp(v103, "/") || v16->tailmatch)
    || !(running = v12->running) && v12->newsession && !v16->expires )
  {
LABEL_288:
    v102 = v16;
    goto LABEL_289;
  }
  v16->livecookie = running;
  v85 = v12->lastct + 1;
  v12->lastct = v85;
  v16->creationtime = v85;
  if ( !v119 )
    remove_expired(v12);
  cookies = v12;
  v112 = cookiehash(v16->domain);
  next = v12->cookies[v112];
  if ( !next )
  {
    v89 = 0;
    v88 = 0LL;
    v87 = 0LL;
    v90 = 0LL;
LABEL_293:
    if ( v87 )
    {
      v87->next = v88->next;
      v87->creationtime = v88->creationtime;
      Curl_cfree(v88->name);
      Curl_cfree(v88->value);
      Curl_cfree(v88->domain);
      Curl_cfree(v88->path);
      Curl_cfree(v88->spath);
      *(_QWORD *)&v88->prefix = *(_QWORD *)&v87->prefix;
      v105 = *(_OWORD *)&v87->next;
      v106 = *(_OWORD *)&v87->value;
      v107 = *(_OWORD *)&v87->spath;
      *(_OWORD *)&v88->expires = *(_OWORD *)&v87->expires;
      *(_OWORD *)&v88->spath = v107;
      *(_OWORD *)&v88->value = v106;
      *(_OWORD *)&v88->next = v105;
      Curl_cfree(v87);
    }
    else
    {
      v88 = v16;
    }
    if ( data && cookies->running && (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
    {
      v108 = "Replaced";
      if ( (v89 & 1) == 0 )
        v108 = "Added";
      Curl_infof(
        data,
        "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
        v108,
        v88->name,
        v88->value,
        v88->domain,
        v88->path,
        v88->expires);
    }
    if ( (v89 & 1) == 0 )
    {
      p_next = &cookies->cookies[v112];
      if ( v90 )
        p_next = &v90->next;
      *p_next = v88;
      ++cookies->numcookies;
    }
    v14 = v88;
    expires = v88->expires;
    if ( expires && expires < cookies->next_expiration )
      cookies->next_expiration = expires;
    return v14;
  }
  v87 = 0LL;
  v88 = 0LL;
  v89 = 0;
  while ( 2 )
  {
    v90 = next;
    if ( !(unsigned int)curl_strequal(next->name, v16->name) )
      goto LABEL_237;
    v91 = v90->domain;
    if ( v91 )
    {
      v92 = v113->domain;
      if ( v92 && (unsigned int)curl_strequal(v91, v92) )
        goto LABEL_251;
      goto LABEL_237;
    }
    if ( v113->domain )
      goto LABEL_237;
LABEL_251:
    spath = v90->spath;
    if ( !spath
      || (v97 = v113->spath) == 0LL
      || !v90->secure
      || v113->secure
      || secure
      || ((v98 = strchr(spath + 1, 47)) == 0LL ? (v99 = strlen(spath)) : (v99 = v98 - spath),
          !(unsigned int)curl_strnequal(spath, v97, v99)) )
    {
LABEL_237:
      if ( v87 )
      {
        v16 = v113;
        goto LABEL_239;
      }
      v16 = v113;
      if ( !(unsigned int)curl_strequal(v90->name, v113->name) )
        goto LABEL_269;
      v93 = v90->domain;
      if ( v93 )
      {
        v94 = v113->domain;
        if ( !v94 || !(unsigned int)curl_strequal(v93, v94) )
        {
LABEL_262:
          if ( (v89 & 1) == 0 )
            goto LABEL_268;
          v100 = v90->spath;
          if ( !v100 || (v101 = v113->spath) == 0LL || (unsigned int)curl_strequal(v100, v101) )
          {
            if ( (v90->spath != 0LL) == (v113->spath == 0LL) )
              v89 = 0;
LABEL_268:
            if ( (v89 & 1) != 0 )
            {
              if ( v113->livecookie )
              {
                v88 = v90;
                v87 = v113;
              }
              else
              {
                v88 = v90;
                v87 = v113;
                if ( v90->livecookie )
                  goto LABEL_288;
              }
              goto LABEL_239;
            }
            goto LABEL_269;
          }
          v89 = 0;
LABEL_269:
          v87 = 0LL;
LABEL_239:
          next = v90->next;
          if ( !v90->next )
            goto LABEL_293;
          continue;
        }
        v95 = v90->tailmatch == v113->tailmatch;
      }
      else
      {
        v95 = v113->domain == 0LL;
      }
      if ( v95 )
        v89 = 1;
      goto LABEL_262;
    }
    break;
  }
  if ( data && (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
    Curl_infof(data, "cookie '%s' for domain '%s' dropped, would overlay an existing cookie", v113->name, v113->domain);
  v102 = v113;
LABEL_289:
  freecookie(v102);
  return 0LL;
}
