Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  _BOOL4 v8; // r8
  char *v10; // r7
  time_t v11; // r0
  unsigned int setcookies; // r3
  Cookie *v13; // r9
  int v14; // r10
  bool v15; // zf
  size_t v16; // r6
  int v17; // t1
  bool v18; // zf
  const char *v19; // r2
  char *v20; // r3
  int v21; // r5
  int v22; // t1
  unsigned int v23; // r1
  bool v24; // zf
  CookieInfo *v25; // r5
  unsigned __int8 *v26; // r11
  size_t v27; // r0
  size_t v28; // r8
  const char *v29; // r1
  int v30; // r3
  int v31; // t1
  bool v32; // zf
  unsigned __int8 *v33; // r2
  int v34; // r3
  int v35; // t1
  bool v36; // zf
  bool v37; // cc
  _BOOL4 v38; // r3
  _BOOL4 v39; // r3
  int prefix; // r3
  unsigned int v41; // r6
  char *v43; // r0
  char *v44; // r0
  char *v45; // r10
  int v46; // r6
  int v47; // r6
  int v48; // r4
  char *v49; // r0
  int v50; // r3
  int v51; // r0
  char v52; // r3
  int v53; // r0
  int (__fastcall *v54)(const char *); // r6
  const char *v55; // r0
  char *v56; // r6
  char *v57; // r0
  int v58; // r3
  unsigned int v59; // r3
  int v60; // r4
  int v61; // r0
  int (__fastcall *v62)(const char *); // r2
  int v63; // r6
  int v64; // r0
  _BOOL4 v65; // r6
  char *v66; // r0
  int v67; // r3
  int v68; // r6
  char *v69; // r0
  _BOOL4 v70; // r3
  int v71; // r1
  int v72; // r6
  char v73; // r10
  int v74; // r0
  char v75; // r2
  int v76; // r0
  char v77; // r3
  const char *name; // r5
  char *value; // r6
  char *v80; // r7
  _BYTE *v81; // r0
  int v82; // r0
  int is_ipnum; // r5
  const char *v84; // r6
  int v85; // r0
  int v86; // r0
  char *v87; // r0
  int v88; // r0
  unsigned int expires; // r3
  __int64 v90; // r0
  int v91; // r2
  unsigned int v92; // kr04_4
  const char *v93; // r3
  int v94; // r0
  char *v95; // r3
  _BOOL4 v96; // r2
  CookieInfo *v97; // r2
  char *v98; // r3
  size_t v99; // r0
  unsigned int v100; // r4
  size_t v101; // r10
  int livecookie; // r7
  Cookie *v103; // r5
  unsigned int v104; // r3
  int v105; // r0
  char *v106; // r1
  const char *v107; // r8
  char *spath; // r11
  int v109; // r0
  char *v110; // r1
  int v111; // r0
  char *v112; // r1
  char *v113; // r2
  char *v114; // r3
  void (__fastcall *v115)(Cookie *); // r8
  char *v116; // r1
  int v117; // r2
  int expires_high; // r3
  int creationtime; // r1
  int v120; // r2
  int v121; // r3
  const char *v122; // r2
  int v123; // r0
  char *v124; // r1
  __int64 v125; // r2
  Curl_easy *v126; // r12
  char *v127; // r0
  size_t v128; // r2
  const char *v129; // r1
  bool v130; // zf
  void *v131; // r0
  int v132; // r0
  char *v133; // r0
  char *v134; // r3
  int v135; // r3
  size_t v136; // r5
  char *v137; // r0
  char *v138; // r0
  int v139; // r0
  const char *v140; // r1
  CookieInfo *v141; // r3
  _BOOL4 v142; // r3
  _BOOL4 v143; // r3
  int v144; // [sp+0h] [bp-100h] BYREF
  char *badcookie_0; // [sp+18h] [bp-E8h]
  char *reject; // [sp+1Ch] [bp-E4h]
  CookieInfo *ca; // [sp+20h] [bp-E0h]
  const char *v148; // [sp+24h] [bp-DCh]
  Curl_easy *dataa; // [sp+28h] [bp-D8h]
  Curl_easy *v150; // [sp+30h] [bp-D0h]
  const char *noexpirea; // [sp+34h] [bp-CCh]
  time_t now; // [sp+38h] [bp-C8h]
  _BOOL4 v153; // [sp+3Ch] [bp-C4h]
  time_t badcookie; // [sp+40h] [bp-C0h]
  const char *v155; // [sp+44h] [bp-BCh]
  CookieInfo *v156; // [sp+48h] [bp-B8h]
  char *v157; // [sp+4Ch] [bp-B4h]
  char *tok_buf; // [sp+50h] [bp-B0h] BYREF
  char date[128]; // [sp+54h] [bp-ACh] BYREF

  ca = (CookieInfo *)httpheader;
  v8 = httpheader;
  v153 = noexpire;
  v150 = data;
  dataa = (Curl_easy *)c;
  noexpirea = domain;
  now = secure;
  v10 = (char *)lineptr;
  v11 = time(0u);
  setcookies = data->req.setcookies;
  badcookie = v11;
  if ( setcookies > 0x31 )
    return 0;
  v13 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v13 )
    return 0;
  if ( v8 )
  {
    if ( strlen(lineptr) <= (unsigned int)&loc_1388 )
    {
      v14 = *(unsigned __int8 *)lineptr;
      reject = ";\t\r\n=";
      v157 = (char *)&badoctets_0;
      v155 = "path";
      v156 = 0;
      if ( v14 )
        goto LABEL_6;
LABEL_17:
      v16 = strcspn(v10, reject);
      if ( !v16 )
      {
LABEL_54:
        if ( v156 )
          goto LABEL_65;
        v38 = v13->domain == 0;
        if ( !noexpirea )
          v38 = 0;
        if ( v38 )
        {
          v139 = Curl_cstrdup(noexpirea);
          v13->domain = (char *)v139;
          if ( !v139 )
            goto LABEL_65;
        }
        v39 = v13->path == 0;
        if ( !path )
          v39 = 0;
        if ( v39 )
        {
          v133 = strchr(path, 63);
          v134 = v133 ? (char *)Curl_memrchr(path, 47, v133 - path) : strrchr(path, 47);
          if ( v134 )
          {
            v135 = v134 - path;
            v136 = v135 + 1;
            v137 = (char *)Curl_cmalloc(v135 + 2);
            v13->path = v137;
            if ( !v137 )
              goto LABEL_65;
            memcpy(v137, path, v136);
            v13->path[v136] = 0;
            v138 = sanitize_cookie_path(v13->path);
            v13->spath = v138;
            if ( !v138 )
              goto LABEL_65;
          }
        }
        if ( !v13->name )
          goto LABEL_65;
        ++v150->req.setcookies;
        LOBYTE(prefix) = v13->prefix;
        if ( (prefix & 1) != 0 )
          goto LABEL_200;
        goto LABEL_63;
      }
      while ( 1 )
      {
        v19 = &v10[v16];
        v20 = &v10[v16];
        while ( 1 )
        {
          v22 = (unsigned __int8)*--v20;
          v21 = v22;
          v23 = v16;
          v24 = v22 == 9;
          if ( v22 != 9 )
            v24 = v21 == 32;
          v25 = (CookieInfo *)v24;
          --v16;
          if ( !v24 )
            break;
          if ( !v16 )
          {
            if ( *v19 == 61 )
              goto LABEL_28;
            if ( v13->name )
            {
LABEL_174:
              v14 = *(unsigned __int8 *)v19;
              v10 = (char *)v19;
              goto LABEL_53;
            }
LABEL_65:
            freecookie(v13);
            return 0;
          }
        }
        if ( *v19 == 61 )
        {
          v16 = v23;
LABEL_28:
          v26 = (unsigned __int8 *)(v19 + 1);
          v148 = v19;
          v27 = strcspn(v19 + 1, ";\r\n");
          v28 = v27;
          badcookie_0 = (char *)&v26[v27];
          if ( v27 )
          {
            v29 = &v148[v27 + 1];
            do
            {
              v31 = *(unsigned __int8 *)--v29;
              v30 = v31;
              v32 = v31 == 9;
              if ( v31 != 9 )
                v32 = v30 == 32;
              if ( !v32 )
              {
                v33 = v26;
                while ( 1 )
                {
                  v26 = v33;
                  v35 = *v33++;
                  v34 = v35;
                  v36 = v35 == 9;
                  if ( v35 != 9 )
                    v36 = v34 == 32;
                  if ( !v36 )
                    break;
                  if ( !--v28 )
                  {
                    v26 = v33;
LABEL_40:
                    v37 = v28 > 0xFFE;
                    if ( v28 <= 0xFFE )
                      v37 = v16 > 0xFFE;
                    if ( !v37 && v28 + v16 <= 0x1000 )
                    {
                      v25 = ca;
                      goto LABEL_45;
                    }
LABEL_274:
                    freecookie(v13);
                    if ( (*(&v150->set.connect_only + 4) & 0x10) != 0 )
                      Curl_infof(v150, "oversized cookie dropped, name/val %zu + %zu bytes", v16, v28);
                    return 0;
                  }
                }
                if ( !memchr(v26, 9, v28) )
                  goto LABEL_40;
                freecookie(v13);
                if ( (*(&v150->set.connect_only + 4) & 0x10) != 0 )
                  Curl_infof(v150, "cookie contains TAB, dropping");
                return 0;
              }
              --v28;
            }
            while ( v28 );
          }
          if ( v16 > 0xFFE )
          {
            v28 = 0;
            goto LABEL_274;
          }
          v25 = ca;
          v28 = 0;
        }
        else
        {
          v16 = v23;
          if ( v23 > 0xFFE )
          {
            v28 = (size_t)v25;
            goto LABEL_274;
          }
          v26 = (unsigned __int8 *)v25;
          v28 = (size_t)v25;
          badcookie_0 = (char *)v19;
        }
LABEL_45:
        if ( v16 <= 6 )
        {
          if ( !v13->name )
            goto LABEL_132;
          if ( v28 )
          {
            if ( v16 == 4 )
              goto LABEL_179;
            if ( v16 != 6 )
              goto LABEL_52;
            if ( !curl_strnequal("domain", v10, 6) )
              goto LABEL_145;
            if ( *v26 == 46 )
            {
              --v28;
              ++v26;
            }
            if ( v28 == 9 && curl_strnequal(v26, "localhost", 9)
              || (v81 = memchr(v26, 46, v28)) != 0 && v28 - (v81 - v26) > 1 )
            {
              if ( !noexpirea )
              {
                is_ipnum = Curl_host_is_ipnum(v26);
LABEL_162:
                Curl_cfree(v13->domain);
                v85 = Curl_memdup(v26, v28 + 1);
                v13->domain = (char *)v85;
                if ( !v85 )
                  goto LABEL_65;
                *(_BYTE *)(v85 + v28) = 0;
                if ( !v13->domain )
                  goto LABEL_65;
                if ( !is_ipnum )
                {
                  v13->tailmatch = 1;
                  v14 = (unsigned __int8)*badcookie_0;
                  v10 = badcookie_0;
                  goto LABEL_53;
                }
                goto LABEL_145;
              }
              is_ipnum = Curl_host_is_ipnum(noexpirea);
              if ( !is_ipnum )
                goto LABEL_169;
LABEL_160:
              v84 = noexpirea;
              if ( !strncmp((const char *)v26, noexpirea, v28) && strlen(v84) == v28 )
                goto LABEL_162;
            }
            else
            {
              v82 = Curl_host_is_ipnum(":");
              noexpirea = ":";
              is_ipnum = v82;
              if ( v82 )
                goto LABEL_160;
LABEL_169:
              if ( cookie_tailmatch((const char *)v26, v28, noexpirea) )
                goto LABEL_162;
            }
            if ( (*(&v150->set.connect_only + 4) & 0x10) != 0 )
              Curl_infof(v150, "skipped cookie with bad tailmatch domain: %s", (const char *)v26);
            v10 = badcookie_0;
            v14 = (unsigned __int8)*badcookie_0;
            v156 = ca;
            goto LABEL_53;
          }
          v19 = badcookie_0;
          if ( v16 != 6 )
          {
            if ( !v25 )
              goto LABEL_174;
            if ( v16 != 4 )
            {
LABEL_52:
              v10 = badcookie_0;
              v14 = (unsigned __int8)*badcookie_0;
              goto LABEL_53;
            }
LABEL_179:
            if ( curl_strnequal(v155, v10, 4) )
            {
              Curl_cfree(v13->path);
              v86 = Curl_memdup(v26, v28 + 1);
              v13->path = (char *)v86;
              if ( !v86 )
                goto LABEL_65;
              *(_BYTE *)(v86 + v28) = 0;
              if ( !v13->path )
                goto LABEL_65;
              Curl_cfree(v13->spath);
              v87 = sanitize_cookie_path(v13->path);
              v13->spath = v87;
              if ( !v87 )
                goto LABEL_65;
            }
LABEL_145:
            v10 = badcookie_0;
            v14 = (unsigned __int8)*badcookie_0;
            goto LABEL_53;
          }
          if ( !curl_strnequal("secure", v10, 6) )
          {
            if ( v25 )
              curl_strnequal("domain", v10, 6);
            goto LABEL_145;
          }
          if ( !now && LOBYTE(dataa->req.doh) )
            goto LABEL_65;
          v13->secure = 1;
          v14 = (unsigned __int8)*badcookie_0;
          v10 = badcookie_0;
          goto LABEL_53;
        }
        if ( v14 == 95 && v10[1] == 95 )
        {
          if ( curl_strnequal("__Secure-", v10, 9) )
          {
            v13->prefix |= 1u;
            if ( !v13->name )
              goto LABEL_132;
            goto LABEL_48;
          }
          if ( curl_strnequal("__Host-", v10, 7) )
          {
            v13->prefix |= 2u;
            if ( !v13->name )
            {
LABEL_132:
              if ( !v25 )
                goto LABEL_65;
              Curl_cfree(0);
              v74 = Curl_memdup(v10, v16 + 1);
              if ( v74 )
                v75 = 0;
              v13->name = (char *)v74;
              if ( v74 )
                *(_BYTE *)(v74 + v16) = v75;
              Curl_cfree(v13->value);
              v76 = Curl_memdup(v26, v28 + 1);
              if ( v76 )
                v77 = 0;
              v13->value = (char *)v76;
              if ( v76 )
                *(_BYTE *)(v76 + v28) = v77;
              name = v13->name;
              if ( !name )
                goto LABEL_65;
              value = v13->value;
              if ( !value )
                goto LABEL_65;
              v80 = v157;
              if ( value[strcspn(v13->value, v157)] || name[strcspn(name, v80)] )
              {
                if ( (*(&v150->set.connect_only + 4) & 0x10) != 0 )
                  Curl_infof(v150, "invalid octets in name/value, cookie dropped");
                goto LABEL_65;
              }
              goto LABEL_145;
            }
            goto LABEL_48;
          }
        }
        if ( !v13->name )
          goto LABEL_132;
LABEL_48:
        if ( !v28 )
        {
          if ( v16 == 8 )
          {
            if ( !curl_strnequal("httponly", v10, 8) )
              goto LABEL_145;
            v13->httponly = 1;
            v14 = (unsigned __int8)*badcookie_0;
            v10 = badcookie_0;
            goto LABEL_53;
          }
          if ( !v25 )
            goto LABEL_145;
        }
        if ( v16 != 7 )
          goto LABEL_52;
        if ( curl_strnequal("version", v10, 7) )
          goto LABEL_145;
        if ( !curl_strnequal("max-age", v10, 7) )
        {
          if ( curl_strnequal("expires", v10, 7) )
          {
            v130 = v28 == 127;
            if ( v28 <= 0x7F )
              v130 = v13->expires == 0;
            if ( v130 )
            {
              v131 = memcpy(date, v26, v28);
              *((_BYTE *)&v144 + v28 + 0x54) = 0;
              v132 = Curl_getdate_capped(v131);
              if ( v132 )
              {
                if ( v132 >> 31 == -1 )
                  v13->expires = 0LL;
                else
                  v13->expires = v132;
              }
              else
              {
                v13->expires = 1LL;
              }
            }
          }
          goto LABEL_145;
        }
        if ( *v26 == 34 )
          ++v26;
        v88 = curlx_strtoofft(v26, 0, 10, &v13->expires);
        if ( v88 == 1 )
          goto LABEL_291;
        if ( v88 != 2 )
        {
          if ( v88 )
            goto LABEL_145;
          expires = v13->expires;
          HIDWORD(v90) = HIDWORD(v13->expires);
          if ( v13->expires )
          {
            v91 = badcookie >> 31;
            if ( __SPAIR64__(0x7FFFFFFF - (badcookie >> 0x1F), ~badcookie) >= __SPAIR64__(HIDWORD(v90), expires) )
            {
              LODWORD(v90) = badcookie;
              v92 = v13->expires;
              LODWORD(v13->expires) = expires + badcookie;
              v93 = badcookie_0;
              HIDWORD(v13->expires) = (__PAIR64__(v91, v92) + v90) >> 32;
              v10 = (char *)v93;
              v14 = *(unsigned __int8 *)v93;
              goto LABEL_53;
            }
LABEL_291:
            v129 = badcookie_0;
            v13->expires = 0x7FFFFFFFFFFFFFFFLL;
            v14 = *(unsigned __int8 *)v129;
            v10 = (char *)v129;
            goto LABEL_53;
          }
        }
        v140 = badcookie_0;
        v13->expires = 1LL;
        v14 = *(unsigned __int8 *)v140;
        v10 = (char *)v140;
LABEL_53:
        if ( !v14 )
          goto LABEL_54;
        while ( 1 )
        {
LABEL_12:
          v18 = v14 == 9;
          if ( v14 != 9 )
            v18 = v14 == 32;
          if ( !v18 )
            break;
          v17 = (unsigned __int8)*++v10;
          v14 = v17;
          if ( !v17 )
            goto LABEL_54;
        }
        if ( v14 != 59 )
          goto LABEL_54;
        do
        {
          v14 = (unsigned __int8)*++v10;
          if ( !v14 )
            goto LABEL_17;
LABEL_6:
          v15 = v14 == 9;
          if ( v14 != 9 )
            v15 = v14 == 32;
        }
        while ( v15 );
        v16 = strcspn(v10, ";\t\r\n=");
        if ( !v16 )
          goto LABEL_12;
      }
    }
LABEL_276:
    Curl_cfree(v13);
    return 0;
  }
  tok_buf = (char *)ca;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
  {
    v10 = (char *)(lineptr + 0xA);
    v13->httponly = 1;
  }
  if ( *v10 == 35 )
    goto LABEL_276;
  v43 = strchr(v10, 13);
  if ( v43 )
    *v43 = 0;
  v44 = strchr(v10, 10);
  if ( v44 )
    *v44 = 0;
  v45 = strtok_r(v10, "\t", &tok_buf);
  if ( !v45 )
    goto LABEL_65;
  badcookie_0 = "\t";
  v46 = 0;
  while ( 2 )
  {
    switch ( v46 )
    {
      case 0:
        if ( *v45 == 46 )
          ++v45;
        v47 = Curl_cstrdup(v45);
        LOBYTE(v48) = v47;
        v13->domain = (char *)v47;
        if ( v47 )
          LOBYTE(v48) = 1;
        v49 = strtok_r(0u, "\t", &tok_buf);
        if ( v49 )
          v50 = v48 & 1;
        else
          v50 = 0;
        v45 = v49;
        if ( v50 )
          goto LABEL_86;
        v143 = v47 == 0;
        v46 = 1;
        ca = (CookieInfo *)v143;
        goto LABEL_99;
      case 1:
LABEL_86:
        v51 = curl_strequal(v45, "TRUE");
        v52 = v51;
        if ( v51 )
          v52 = 1;
        v13->tailmatch = v52;
        v45 = strtok_r(0u, "\t", &tok_buf);
        if ( v45 )
          goto LABEL_89;
        v46 = 2;
        goto LABEL_128;
      case 2:
LABEL_89:
        v53 = strcmp("TRUE", v45);
        v54 = (int (__fastcall *)(const char *))Curl_cstrdup;
        if ( !v53 || !strcmp("FALSE", v45) )
        {
          reject = "/";
          v61 = v54("/");
          v62 = (int (__fastcall *)(const char *))Curl_cstrdup;
          v63 = v61;
          v13->path = (char *)v61;
          v64 = v62("/");
          v13->spath = (char *)v64;
          if ( !v64 )
          {
            v13->secure = 0;
            if ( !curl_strequal(v45, "TRUE") )
              goto LABEL_243;
            v65 = 1;
            goto LABEL_241;
          }
          v65 = v63 == 0;
        }
        else
        {
          v55 = (const char *)v54(v45);
          v13->path = (char *)v55;
          if ( !v55 )
            goto LABEL_243;
          v56 = sanitize_cookie_path(v55);
          LOBYTE(v48) = (_BYTE)v56;
          v13->spath = v56;
          if ( v56 )
            LOBYTE(v48) = 1;
          v57 = strtok_r(0u, "\t", &tok_buf);
          if ( v57 )
            v58 = v48 & 1;
          else
            v58 = 0;
          v45 = v57;
          if ( !v58 )
          {
            v59 = __clz((unsigned int)v56);
            v46 = 3;
            ca = (CookieInfo *)(v59 >> 5);
            goto LABEL_99;
          }
LABEL_238:
          v65 = 0;
        }
        v13->secure = 0;
        if ( !curl_strequal(v45, "TRUE") )
        {
          LOBYTE(v48) = !v65;
          goto LABEL_108;
        }
LABEL_241:
        if ( !now && !LOBYTE(dataa->req.doh) )
        {
LABEL_243:
          strtok_r(0u, "\t", &tok_buf);
          goto LABEL_65;
        }
        LOBYTE(v48) = !v65;
        v13->secure = 1;
LABEL_108:
        v66 = strtok_r(0u, "\t", &tok_buf);
        if ( v66 )
          v67 = v48 & 1;
        else
          v67 = 0;
        v45 = v66;
        if ( !v67 )
        {
          ca = (CookieInfo *)v65;
          v46 = 4;
          goto LABEL_99;
        }
LABEL_112:
        v68 = curlx_strtoofft(v45, 0, 10, &v13->expires);
        v69 = strtok_r(0u, badcookie_0, &tok_buf);
        LOBYTE(v48) = v68 == 0;
        if ( v69 )
          v70 = v68 == 0;
        else
          v70 = 0;
        v45 = v69;
        if ( !v70 )
        {
          v141 = (CookieInfo *)v68;
          if ( v68 )
            v141 = (CookieInfo *)(freecookie + 1);
          v46 = 5;
          ca = v141;
          goto LABEL_99;
        }
LABEL_116:
        v71 = Curl_cstrdup(v45);
        v13->name = (char *)v71;
        if ( v71 )
        {
          if ( curl_strnequal("__Secure-", v71, 9) )
          {
            v13->prefix |= 1u;
          }
          else if ( curl_strnequal("__Host-", v13->name, 7) )
          {
            v13->prefix |= 2u;
          }
          v45 = strtok_r(0u, "\t", &tok_buf);
          if ( !v45 )
            goto LABEL_197;
LABEL_120:
          v72 = Curl_cstrdup(v45);
          v73 = v72;
          v13->value = (char *)v72;
          if ( v72 )
            v73 = 1;
          if ( strtok_r(0u, "\t", &tok_buf) )
            v48 = v73 & 1;
          else
            v48 = 0;
          if ( !v48 )
          {
            v142 = v72 == 0;
            LOBYTE(v48) = v73;
            v46 = 7;
            ca = (CookieInfo *)v142;
LABEL_99:
            if ( v46 == 7 )
              v60 = 0;
            else
              v60 = v48 & 1;
            if ( v60 )
              goto LABEL_65;
            goto LABEL_198;
          }
          v46 = 8;
          if ( !strtok_r(0u, "\t", &tok_buf) )
            goto LABEL_99;
LABEL_127:
          ++v46;
          v45 = strtok_r(0u, "\t", &tok_buf);
          if ( !v45 )
          {
LABEL_128:
            LOBYTE(v48) = 1;
            goto LABEL_99;
          }
          continue;
        }
        strtok_r(0u, "\t", &tok_buf);
        ca = (CookieInfo *)(freecookie + 1);
LABEL_197:
        v94 = Curl_cstrdup(&LC1);
        v13->value = (char *)v94;
        if ( !v94 )
          goto LABEL_65;
LABEL_198:
        if ( ca )
          goto LABEL_65;
        prefix = v13->prefix;
        if ( (v13->prefix & 1) != 0 )
        {
LABEL_200:
          if ( !v13->secure )
            goto LABEL_65;
          if ( (prefix & 2) != 0 )
            goto LABEL_202;
          goto LABEL_206;
        }
LABEL_63:
        if ( (prefix & 2) != 0 )
        {
          if ( !v13->secure )
            goto LABEL_65;
LABEL_202:
          v95 = v13->path;
          if ( !v95 || *v95 != 47 || v95[1] || v13->tailmatch )
            goto LABEL_65;
        }
LABEL_206:
        if ( !LOBYTE(dataa->req.doh) && BYTE1(dataa->req.doh) && !v13->expires )
          goto LABEL_65;
        v96 = v153;
        v13->livecookie = (bool)dataa->req.doh;
        v15 = !v96;
        v97 = (CookieInfo *)dataa;
        v98 = (char *)&dataa->req.p.file->path + 1;
        dataa->req.p.file = (FILEPROTO *)v98;
        v13->creationtime = (int)v98;
        if ( v15 )
          remove_expired(v97);
        v99 = cookiehash(v13->domain);
        v100 = *(&dataa->magic + v99);
        v101 = v99;
        if ( !v100 )
        {
          if ( LOBYTE(dataa->req.doh) )
          {
            v41 = (unsigned int)v13;
            if ( (*(&v150->set.connect_only + 4) & 0x10) != 0 )
            {
              livecookie = *(&dataa->magic + v99);
              v122 = "Added";
LABEL_288:
              Curl_infof(
                v150,
                "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
                v122,
                *(const char **)(v41 + 4),
                *(const char **)(v41 + 8),
                *(const char **)(v41 + 20),
                *(const char **)(v41 + 12),
                *(_QWORD *)(v41 + 0x18));
              if ( livecookie )
                goto LABEL_260;
              if ( v100 )
                goto LABEL_258;
            }
          }
          else
          {
            v41 = (unsigned int)v13;
          }
          *(&dataa->magic + v101) = v41;
          goto LABEL_259;
        }
        livecookie = 0;
        v41 = 0;
        v103 = 0;
        while ( 2 )
        {
          if ( curl_strequal(*(_DWORD *)(v100 + 4), v13->name) )
          {
            v105 = *(_DWORD *)(v100 + 20);
            v106 = v13->domain;
            if ( v105 )
            {
              if ( v106 && curl_strequal(v105, v106) )
              {
LABEL_219:
                v107 = *(const char **)(v100 + 16);
                if ( v107 )
                {
                  spath = v13->spath;
                  if ( spath )
                  {
                    if ( *(_BYTE *)(v100 + 33) && !(now | v13->secure) )
                    {
                      v127 = strchr(v107 + 1, 47);
                      v128 = v127 ? v127 - v107 : strlen(v107);
                      if ( curl_strnequal(v107, spath, v128) )
                      {
                        if ( (*(&v150->set.connect_only + 4) & 0x10) != 0 )
                          Curl_infof(
                            v150,
                            "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                            v13->name,
                            v13->domain);
                        goto LABEL_65;
                      }
                    }
                  }
                }
              }
            }
            else if ( !v106 )
            {
              goto LABEL_219;
            }
          }
          if ( v103 || !curl_strequal(*(_DWORD *)(v100 + 4), v13->name) )
          {
LABEL_213:
            v104 = *(_DWORD *)v100;
            if ( !*(_DWORD *)v100 )
              break;
            goto LABEL_214;
          }
          v109 = *(_DWORD *)(v100 + 20);
          v110 = v13->domain;
          if ( v109 )
          {
            if ( !v110 || !curl_strequal(v109, v110) || *(unsigned __int8 *)(v100 + 32) != v13->tailmatch )
            {
LABEL_229:
              if ( !livecookie )
                goto LABEL_230;
            }
          }
          else if ( v110 )
          {
            goto LABEL_229;
          }
          v123 = *(_DWORD *)(v100 + 16);
          v124 = v13->spath;
          if ( !v123 )
          {
LABEL_252:
            if ( (v123 == 0) != (v124 == 0) )
              goto LABEL_230;
            livecookie = v13->livecookie;
            if ( v13->livecookie )
            {
              v41 = v100;
              v103 = v13;
            }
            else
            {
              if ( *(_BYTE *)(v100 + 34) )
                goto LABEL_65;
              v41 = v100;
              v103 = v13;
              livecookie = 1;
            }
            goto LABEL_213;
          }
          if ( v124 && curl_strequal(v123, v124) )
          {
            v123 = *(_DWORD *)(v100 + 16);
            v124 = v13->spath;
            goto LABEL_252;
          }
LABEL_230:
          v104 = *(_DWORD *)v100;
          livecookie = 0;
          if ( *(_DWORD *)v100 )
          {
LABEL_214:
            v100 = v104;
            continue;
          }
          break;
        }
        if ( v103 )
        {
          v103->next = *(Cookie **)v41;
          v111 = *(_DWORD *)(v41 + 4);
          v103->creationtime = *(_DWORD *)(v41 + 36);
          Curl_cfree(v111);
          Curl_cfree(*(_DWORD *)(v41 + 8));
          Curl_cfree(*(_DWORD *)(v41 + 20));
          Curl_cfree(*(_DWORD *)(v41 + 12));
          Curl_cfree(*(_DWORD *)(v41 + 16));
          v112 = v103->name;
          v113 = v103->value;
          v114 = v103->path;
          v115 = (void (__fastcall *)(Cookie *))Curl_cfree;
          *(_DWORD *)v41 = v103->next;
          *(_DWORD *)(v41 + 4) = v112;
          *(_DWORD *)(v41 + 8) = v113;
          *(_DWORD *)(v41 + 12) = v114;
          v116 = v103->domain;
          v117 = v103->expires;
          expires_high = HIDWORD(v103->expires);
          *(_DWORD *)(v41 + 16) = v103->spath;
          *(_DWORD *)(v41 + 20) = v116;
          *(_DWORD *)(v41 + 24) = v117;
          *(_DWORD *)(v41 + 28) = expires_high;
          creationtime = v103->creationtime;
          v120 = *(_DWORD *)&v103->prefix;
          v121 = *((_DWORD *)&v103->prefix + 1);
          *(_DWORD *)(v41 + 32) = *(_DWORD *)&v103->tailmatch;
          *(_DWORD *)(v41 + 36) = creationtime;
          *(_DWORD *)(v41 + 40) = v120;
          *(_DWORD *)(v41 + 44) = v121;
          v115(v103);
        }
        else
        {
          v41 = (unsigned int)v13;
        }
        if ( LOBYTE(dataa->req.doh) && (*(&v150->set.connect_only + 4) & 0x10) != 0 )
        {
          if ( livecookie )
            v122 = "Replaced";
          else
            v122 = "Added";
          goto LABEL_288;
        }
        if ( livecookie )
          goto LABEL_260;
LABEL_258:
        *(_DWORD *)v100 = v41;
LABEL_259:
        ++dataa->req.upload_fromhere;
LABEL_260:
        v125 = *(_QWORD *)(v41 + 0x18);
        if ( v125 )
        {
          v126 = dataa;
          if ( v125 < *(_QWORD *)&dataa->req.newurl )
          {
            dataa->req.newurl = (char *)v125;
            v126->req.upload_present = HIDWORD(v125);
          }
        }
        return (Cookie *)v41;
      case 3:
        goto LABEL_238;
      case 4:
        goto LABEL_112;
      case 5:
        goto LABEL_116;
      case 6:
        goto LABEL_120;
      default:
        goto LABEL_127;
    }
  }
}
