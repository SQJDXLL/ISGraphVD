Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  time_t v8; // eax
  int v9; // esi
  char *v10; // ebp
  int v11; // ecx
  const char *v12; // ecx
  const char *i; // esi
  size_t v14; // eax
  const char *v15; // ecx
  char **v16; // ebp
  char v17; // dl
  const char *v18; // edi
  size_t v19; // eax
  size_t v20; // edx
  size_t v21; // ecx
  char v22; // dl
  size_t v23; // edx
  unsigned int v24; // edx
  char v25; // bl
  size_t v26; // eax
  int v27; // ebx
  int v28; // edi
  const char *v29; // eax
  unsigned int v30; // edi
  int v31; // eax
  char **v32; // edi
  char *v33; // eax
  _DWORD *v34; // ebp
  unsigned int v35; // edi
  int v36; // eax
  const char *v37; // esi
  const char *v38; // ebp
  const char *v39; // eax
  bool v40; // al
  char v41; // cl
  char *v42; // eax
  int v43; // eax
  int v44; // eax
  int v45; // eax
  char v46; // al
  unsigned int v47; // eax
  unsigned int v48; // ecx
  int v49; // eax
  char v50; // cl
  char *v51; // eax
  char *v52; // eax
  char *v53; // eax
  char *v54; // eax
  char *v55; // eax
  const char *v56; // esi
  int v57; // edx
  size_t v58; // ecx
  int v59; // edi
  int v60; // eax
  char *v61; // eax
  int v62; // eax
  int v63; // ecx
  char *v64; // eax
  char v65; // si
  int v66; // eax
  int v67; // esi
  void *v68; // eax
  size_t v69; // esi
  char *v70; // eax
  char v71; // cl
  char v72; // al
  bool running; // al
  int v74; // eax
  Cookie *v75; // edi
  int v76; // eax
  void *v77; // edx
  char *v78; // eax
  int v79; // eax
  _DWORD *v80; // edi
  int v81; // eax
  int v82; // edi
  _BYTE *v83; // edi
  char v84; // al
  bool v85; // zf
  const char *v86; // edi
  int v87; // ebp
  char *v88; // eax
  size_t v89; // eax
  int v90; // eax
  int v91; // eax
  void *v92; // edi
  int v93; // eax
  int v94; // eax
  const char *v95; // eax
  __int64 v97; // xmm0_8
  char v98; // al
  char **v99; // eax
  curl_off_t v100; // rax
  int v101; // ecx
  const char *v102; // [esp-Ch] [ebp-E8h]
  const char *v103; // [esp-Ch] [ebp-E8h]
  const char *v104; // [esp-Ch] [ebp-E8h]
  const char *v105; // [esp-Ch] [ebp-E8h]
  int v106; // [esp-Ch] [ebp-E8h]
  const char *v107; // [esp-8h] [ebp-E4h]
  size_t v108; // [esp-8h] [ebp-E4h]
  Cookie *v109; // [esp+0h] [ebp-DCh]
  size_t len; // [esp+4h] [ebp-D8h]
  int lena; // [esp+4h] [ebp-D8h]
  size_t lenb; // [esp+4h] [ebp-D8h]
  size_t lenc; // [esp+4h] [ebp-D8h]
  size_t lend; // [esp+4h] [ebp-D8h]
  int v115; // [esp+8h] [ebp-D4h]
  char v116; // [esp+10h] [ebp-CCh]
  char delim; // [esp+14h] [ebp-C8h]
  unsigned __int8 delima; // [esp+14h] [ebp-C8h]
  char *delimb; // [esp+14h] [ebp-C8h]
  unsigned __int8 delimc; // [esp+14h] [ebp-C8h]
  char **str; // [esp+18h] [ebp-C4h]
  char **stre; // [esp+18h] [ebp-C4h]
  char **stra; // [esp+18h] [ebp-C4h]
  char **strb; // [esp+18h] [ebp-C4h]
  char **strc; // [esp+18h] [ebp-C4h]
  char **strd; // [esp+18h] [ebp-C4h]
  char *s1; // [esp+1Ch] [ebp-C0h]
  char *s1a; // [esp+1Ch] [ebp-C0h]
  size_t s1b; // [esp+1Ch] [ebp-C0h]
  _DWORD *v131; // [esp+28h] [ebp-B4h]
  int v132; // [esp+2Ch] [ebp-B0h]
  __int64 v133; // [esp+34h] [ebp-A8h]
  unsigned int *v134; // [esp+3Ch] [ebp-A0h]
  _DWORD *v135; // [esp+40h] [ebp-9Ch]
  _DWORD *v136; // [esp+48h] [ebp-94h]
  char *dest[36]; // [esp+4Ch] [ebp-90h] BYREF

  v8 = time(0);
  v9 = 0;
  if ( data->req.setcookies > 0x31u )
    return (Cookie *)v9;
  v132 = v8;
  v115 = Curl_ccalloc(1, 44);
  if ( !v115 )
    return (Cookie *)v9;
  if ( !httpheader )
  {
    dest[0] = 0;
    v10 = lineptr;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v10 = lineptr + 10;
      v11 = v115;
      *(_BYTE *)(v115 + 35) = 1;
      if ( lineptr[10] == 35 )
        goto LABEL_8;
    }
    else
    {
      v11 = v115;
      if ( *lineptr == 35 )
      {
LABEL_8:
        Curl_cfree(v11);
        return (Cookie *)v9;
      }
    }
    v53 = strchr(v10, 13);
    if ( v53 )
      *v53 = 0;
    v54 = strchr(v10, 10);
    if ( v54 )
      *v54 = 0;
    v55 = strtok_r(v10, "\t", dest);
    if ( !v55 )
    {
      LOBYTE(v58) = 0;
      v57 = 0;
      goto LABEL_209;
    }
    v56 = v55;
    v57 = 0;
    v58 = 0;
    while ( 1 )
    {
      lenc = v58;
      switch ( v57 )
      {
        case 0:
          v59 = v57;
          if ( *v56 == 46 )
            ++v56;
          v61 = (char *)Curl_cstrdup(v56);
          *(_DWORD *)(v115 + 20) = v61;
          goto LABEL_198;
        case 1:
          v59 = v57;
          *(_BYTE *)(v115 + 32) = curl_strequal(v56, "TRUE") != 0;
          goto LABEL_201;
        case 2:
          v59 = v57;
          if ( strcmp("TRUE", v56) && strcmp("FALSE", v56) )
          {
            v60 = Curl_cstrdup(v56);
            *(_DWORD *)(v115 + 12) = v60;
            if ( !v60 )
              goto LABEL_195;
            v61 = sanitize_cookie_path((const char *)v60);
            *(_DWORD *)(v115 + 16) = v61;
LABEL_198:
            v85 = v61 == 0;
            v60 = (unsigned __int8)lenc;
            if ( v85 )
              v60 = 1;
            goto LABEL_200;
          }
          s1a = (char *)Curl_cstrdup("/");
          *(_DWORD *)(v115 + 12) = s1a;
          v62 = Curl_cstrdup("/");
          v63 = (unsigned __int8)lenc;
          if ( !v62 )
            v63 = 1;
          *(_DWORD *)(v115 + 16) = v62;
          if ( !s1a )
            v63 = 1;
          lenc = v63;
          v57 = v59 + 1;
LABEL_191:
          v59 = v57;
          *(_BYTE *)(v115 + 33) = 0;
          if ( curl_strequal(v56, "TRUE") )
          {
            if ( secure || (v60 = (int)c, c->running) )
            {
              *(_BYTE *)(v115 + 33) = 1;
              goto LABEL_201;
            }
LABEL_195:
            LOBYTE(v60) = 1;
LABEL_200:
            lenc = v60;
          }
LABEL_201:
          v64 = strtok_r(0, "\t", dest);
          v57 = v59 + 1;
          if ( !v64 )
          {
            LOBYTE(v58) = lenc;
LABEL_209:
            if ( v57 == 6 )
            {
              v65 = v58;
              v66 = Curl_cstrdup(&L_str_22);
              *(_DWORD *)(v115 + 8) = v66;
              LOBYTE(v58) = 1;
              if ( v66 )
                LOBYTE(v58) = v65;
              v57 = (v66 == 0) ^ 7;
            }
            v9 = 0;
            if ( (v58 & 1) == 0 && v57 == 7 )
              goto LABEL_232;
LABEL_215:
            freecookie(v109);
            return 0;
          }
          v56 = v64;
          v58 = lenc;
          if ( (lenc & 1) != 0 )
            goto LABEL_209;
          break;
        case 3:
          goto LABEL_191;
        case 4:
          v59 = v57;
          v85 = curlx_strtoofft(v56, 0, 10, v115 + 24) == 0;
          v60 = (unsigned __int8)lenc;
          if ( !v85 )
            v60 = 1;
          goto LABEL_200;
        case 5:
          v59 = v57;
          v60 = Curl_cstrdup(v56);
          *(_DWORD *)(v115 + 4) = v60;
          if ( !v60 )
            goto LABEL_195;
          if ( curl_strnequal("__Secure-", v60, 9) )
          {
            *(_BYTE *)(v115 + 40) |= 1u;
          }
          else if ( curl_strnequal("__Host-", *(_DWORD *)(v115 + 4), 7) )
          {
            *(_BYTE *)(v115 + 40) |= 2u;
          }
          goto LABEL_201;
        case 6:
          v59 = v57;
          v61 = (char *)Curl_cstrdup(v56);
          *(_DWORD *)(v115 + 8) = v61;
          goto LABEL_198;
        default:
          v59 = v57;
          goto LABEL_201;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
    Curl_cfree(v115);
    goto LABEL_230;
  }
  v131 = (_DWORD *)(v115 + 4);
  v134 = (unsigned int *)(v115 + 24);
  v135 = (_DWORD *)(v115 + 20);
  v116 = 0;
  v12 = lineptr;
  v136 = (_DWORD *)(v115 + 8);
  while ( 2 )
  {
    for ( i = v12; *i == 32 || *i == 9; ++i )
      ;
    delim = *i;
    v14 = strcspn(i, ";\t\r\n=");
    if ( !v14 )
      goto LABEL_138;
    v15 = &i[v14];
    v16 = (char **)v14;
    do
    {
      v17 = *((_BYTE *)v16 + (_DWORD)i - 1);
      if ( v17 != 32 && v17 != 9 )
      {
        if ( *v15 != 61 )
          goto LABEL_28;
LABEL_21:
        v18 = &i[v14 + 1];
        len = v14;
        v19 = strcspn(v18, ";\r\n");
        if ( v19 )
        {
          v20 = v19;
          do
          {
            v21 = v20;
            v22 = i[len + v20];
            if ( v22 != 32 && v22 != 9 )
            {
              v23 = v21;
              goto LABEL_31;
            }
            v20 = v21 - 1;
          }
          while ( v21 != 1 );
          v23 = 0;
        }
        else
        {
          v23 = 0;
        }
LABEL_31:
        v26 = len + v19;
        if ( v23 )
        {
          v27 = (int)&i[v23 + 1 + len];
          while ( *v18 == 32 || *v18 == 9 )
          {
            ++v18;
            if ( !--v23 )
            {
              v23 = 0;
              v18 = (const char *)v27;
              break;
            }
          }
        }
        str = (char **)v23;
        lena = (int)&i[v26 + 1];
        if ( !memchr(v18, 9, v23) )
        {
          s1 = (char *)v18;
          v25 = 1;
          v15 = (const char *)lena;
          v24 = (unsigned int)str;
          goto LABEL_43;
        }
        freecookie(v109);
        v28 = 1;
        if ( data && (*((_BYTE *)&data->set + 1326) & 0x10) != 0 )
        {
          v29 = "cookie contains TAB, dropping";
LABEL_55:
          Curl_infof(data, v29);
          v15 = (const char *)lena;
          goto LABEL_135;
        }
        goto LABEL_53;
      }
      v16 = (char **)((char *)v16 - 1);
    }
    while ( v16 );
    v16 = 0;
    if ( *v15 == 61 )
      goto LABEL_21;
LABEL_28:
    v24 = 0;
    v25 = 0;
    s1 = 0;
LABEL_43:
    lena = (int)v15;
    if ( (unsigned int)v16 > 0xFFE || v24 > 0xFFE || (unsigned int)v16 + v24 >= 0x1001 )
    {
      freecookie(v109);
      v28 = 1;
      if ( data && (*((_BYTE *)&data->set + 1326) & 0x10) != 0 )
      {
        v29 = "oversized cookie dropped, name/val %zu + %zu bytes";
        v107 = (const char *)v16;
        goto LABEL_55;
      }
LABEL_53:
      v15 = (const char *)lena;
      goto LABEL_135;
    }
    if ( delim == 95 && (unsigned int)v16 >= 7 && i[1] == 95 )
    {
      v30 = v24;
      if ( curl_strnequal("__Secure-", i, 9) )
      {
        *(_BYTE *)(v115 + 40) |= 1u;
        v15 = (const char *)lena;
        v24 = v30;
      }
      else
      {
        v31 = curl_strnequal("__Host-", i, 7);
        v15 = (const char *)lena;
        v24 = v30;
        if ( v31 )
          *(_BYTE *)(v115 + 40) |= 2u;
      }
    }
    if ( !*v131 )
    {
      v28 = 6;
      if ( !v25 )
        goto LABEL_81;
      stre = (char **)v24;
      strstore(v16, v102, (size_t)v107);
      v34 = v136;
      strstore(stre, v104, v108);
      if ( !*v131 || !*v34 )
      {
        v116 = 1;
        v15 = (const char *)lena;
        v28 = 6;
        goto LABEL_135;
      }
      if ( invalid_octets((const char *)v109) || invalid_octets((const char *)v109) )
      {
        v15 = (const char *)lena;
        v28 = 6;
        if ( data && (*((_BYTE *)&data->set + 1326) & 0x10) != 0 )
        {
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
          v15 = (const char *)lena;
        }
        goto LABEL_81;
      }
      goto LABEL_106;
    }
    if ( v24 )
      goto LABEL_60;
    if ( v16 == (char **)8 )
    {
      v44 = curl_strnequal("httponly", i, 8);
      v24 = 0;
      v15 = (const char *)lena;
      if ( v44 )
      {
        *(_BYTE *)(v115 + 35) = 1;
        goto LABEL_134;
      }
LABEL_118:
      if ( !v25 )
        goto LABEL_134;
LABEL_60:
      if ( v16 != (char **)7 )
      {
        if ( v16 != (char **)6 )
        {
          if ( v16 != (char **)4 )
            goto LABEL_134;
          v32 = (char **)v24;
          if ( !curl_strnequal("path", i, 4) )
          {
            v15 = (const char *)lena;
            goto LABEL_134;
          }
          strstore(v32, v103, (size_t)v107);
          v28 = 6;
          if ( !*(_DWORD *)(v115 + 12) )
          {
            v116 = 1;
            v15 = (const char *)lena;
            goto LABEL_135;
          }
          Curl_cfree(*(_DWORD *)(v115 + 16));
          v33 = sanitize_cookie_path(*(const char **)(v115 + 12));
          *(_DWORD *)(v115 + 16) = v33;
          v15 = (const char *)lena;
          if ( v33 )
            goto LABEL_134;
LABEL_81:
          v116 = 1;
          goto LABEL_135;
        }
        v35 = v24;
        v36 = curl_strnequal("domain", i, 6);
        if ( !v35 || !v36 )
        {
          v15 = (const char *)lena;
          goto LABEL_134;
        }
        v37 = s1 + 1;
        if ( *s1 != 46 )
          v37 = s1;
        stra = (char **)(v35 - (*s1 == 46));
        v38 = domain;
        if ( bad_domain((const char *)v109, lena) )
          v38 = ":";
        v39 = v38;
        if ( !v38 )
          v39 = v37;
        delima = Curl_host_is_ipnum(v39);
        domain = v38;
        if ( v38 )
        {
          if ( delima )
          {
            if ( strncmp(v37, v38, (size_t)stra) || stra != (char **)strlen(v38) )
              goto LABEL_127;
          }
          else if ( !cookie_tailmatch(v38, (size_t)v105, v107) )
          {
LABEL_127:
            v28 = 0;
            if ( !data )
            {
LABEL_130:
              v116 = 1;
              goto LABEL_132;
            }
            v116 = 1;
            if ( (*((_BYTE *)&data->set + 1326) & 0x10) != 0 )
            {
              v107 = v37;
              Curl_infof(data, "skipped cookie with bad tailmatch domain: %s");
              goto LABEL_130;
            }
LABEL_132:
            v40 = 1;
LABEL_133:
            v15 = (const char *)lenb;
            if ( v40 )
              goto LABEL_134;
            goto LABEL_135;
          }
        }
        strstore(stra, v105, (size_t)v107);
        v40 = *v135 != 0;
        v41 = v116;
        if ( !*v135 )
          v41 = 1;
        v28 = 0;
        if ( !*v135 )
          v28 = 6;
        if ( (*v135 == 0) | delima )
        {
          v116 = v41;
          goto LABEL_133;
        }
        *(_BYTE *)(v115 + 32) = 1;
        v28 = 0;
        goto LABEL_132;
      }
      strb = (char **)v24;
      if ( !curl_strnequal("version", i, 7) )
      {
        if ( !curl_strnequal("max-age", i, 7) )
        {
          if ( curl_strnequal("expires", i, 7) && (unsigned int)strb <= 0x7F && !*(_QWORD *)(v115 + 24) )
          {
            memcpy(dest, s1, (size_t)strb);
            *((_BYTE *)dest + (_DWORD)strb) = 0;
            v45 = Curl_getdate_capped(dest);
            *(_QWORD *)(v115 + 24) = v45;
            if ( v45 )
            {
              if ( v45 < 0 )
              {
                *(_DWORD *)(v115 + 28) = 0;
                *(_DWORD *)(v115 + 24) = 0;
              }
            }
            else
            {
              *(_DWORD *)(v115 + 28) = 0;
              *(_DWORD *)(v115 + 24) = 1;
            }
          }
          goto LABEL_106;
        }
        v42 = s1 + 1;
        if ( *s1 != 34 )
          v42 = s1;
        v43 = curlx_strtoofft(v42, 0, 10, v134);
        if ( v43 )
        {
          if ( v43 != 2 )
          {
            v15 = (const char *)lena;
            if ( v43 == 1 )
            {
              *v134 = -1;
              *(_DWORD *)(v115 + 28) = 0x7FFFFFFF;
            }
            goto LABEL_134;
          }
        }
        else
        {
          v47 = *v134;
          v48 = *(_DWORD *)(v115 + 28);
          if ( *(_QWORD *)v134 )
          {
            LODWORD(v133) = ~v132;
            HIDWORD(v133) = 0x7FFFFFFF - (v132 >> 31);
            if ( v133 >= __SPAIR64__(v48, v47) )
            {
              *(_QWORD *)v134 = v132 + __PAIR64__(v48, v47);
            }
            else
            {
              *v134 = -1;
              *(_DWORD *)(v115 + 28) = 0x7FFFFFFF;
            }
            goto LABEL_106;
          }
        }
        *(_DWORD *)(v115 + 28) = 0;
        *v134 = 1;
      }
LABEL_106:
      v15 = (const char *)lena;
      goto LABEL_134;
    }
    if ( v16 != (char **)6 )
      goto LABEL_118;
    if ( !curl_strnequal("secure", i, 6) )
    {
      v15 = (const char *)lena;
      v24 = 0;
      goto LABEL_118;
    }
    v15 = (const char *)lena;
    if ( !secure && c->running )
    {
      v28 = 6;
      goto LABEL_81;
    }
    *(_BYTE *)(v115 + 33) = 1;
LABEL_134:
    v28 = 0;
LABEL_135:
    i = v15;
    if ( !v28 )
    {
LABEL_138:
      while ( 1 )
      {
        v46 = *i;
        if ( *i != 32 && v46 != 9 )
          break;
        ++i;
      }
      v12 = i + 1;
      v28 = 6;
      if ( v46 == 59 )
        v28 = 0;
      else
        v12 = i;
      if ( v28 )
        break;
      continue;
    }
    break;
  }
  if ( v28 != 6 )
  {
    v9 = 0;
    goto LABEL_231;
  }
  v9 = 0;
  if ( (v116 & 1) == 0 && domain && !*(_DWORD *)(v115 + 20) )
  {
    v49 = Curl_cstrdup(domain);
    *(_DWORD *)(v115 + 20) = v49;
    v50 = 1;
    if ( v49 )
      v50 = v116;
    v116 = v50;
  }
  if ( (v116 & 1) == 0 && path && !*(_DWORD *)(v115 + 12) )
  {
    v51 = strchr(path, 63);
    if ( v51 )
      v52 = (char *)Curl_memrchr(path, 47, v51 - path);
    else
      v52 = strrchr(path, 47);
    if ( v52 )
    {
      v67 = v52 - path;
      v68 = (void *)Curl_cmalloc(v52 - path + 2);
      *(_DWORD *)(v115 + 12) = v68;
      if ( v68 )
      {
        v69 = v67 + 1;
        memcpy(v68, path, v69);
        *(_BYTE *)(*(_DWORD *)(v115 + 12) + v69) = 0;
        v70 = sanitize_cookie_path(*(const char **)(v115 + 12));
        *(_DWORD *)(v115 + 16) = v70;
        v71 = 1;
        if ( v70 )
          v71 = v116;
        v116 = v71;
      }
      else
      {
        v116 = 1;
      }
      v9 = 0;
    }
    else
    {
      v9 = 0;
    }
  }
  if ( (v116 & 1) == 0 && *(_DWORD *)(v115 + 4) )
  {
    ++data->req.setcookies;
    v28 = 0;
    goto LABEL_231;
  }
  freecookie(v109);
LABEL_230:
  v28 = 1;
LABEL_231:
  if ( !v28 )
  {
LABEL_232:
    v72 = *(_BYTE *)(v115 + 40);
    if ( (v72 & 1) != 0 && !*(_BYTE *)(v115 + 33)
      || (v72 & 2) != 0
      && (!*(_BYTE *)(v115 + 33) || (v95 = *(const char **)(v115 + 12)) == 0
                                 || strcmp(v95, "/")
                                 || *(_BYTE *)(v115 + 32))
      || !(running = c->running) && c->newsession && !*(_QWORD *)(v115 + 24) )
    {
      freecookie(v109);
      return (Cookie *)v9;
    }
    *(_BYTE *)(v115 + 34) = running;
    v74 = c->lastct + 1;
    c->lastct = v74;
    *(_DWORD *)(v115 + 36) = v74;
    if ( !noexpire )
      remove_expired((CookieInfo *)v109);
    s1b = cookiehash(*(const char *const *)(v115 + 20));
    v75 = c->cookies[s1b];
    if ( !v75 )
    {
      LOBYTE(delimb) = 0;
      v9 = 0;
      lend = 0;
      v77 = 0;
LABEL_296:
      strd = (char **)v77;
      if ( lend )
      {
        *(_DWORD *)lend = *(_DWORD *)v9;
        *(_DWORD *)(lend + 36) = *(_DWORD *)(v9 + 36);
        Curl_cfree(*(_DWORD *)(v9 + 4));
        Curl_cfree(*(_DWORD *)(v9 + 8));
        Curl_cfree(*(_DWORD *)(v9 + 20));
        Curl_cfree(*(_DWORD *)(v9 + 12));
        Curl_cfree(*(_DWORD *)(v9 + 16));
        *(_DWORD *)(v9 + 40) = *(_DWORD *)(lend + 40);
        *(_QWORD *)(v9 + 32) = *(_QWORD *)(lend + 32);
        *(_QWORD *)(v9 + 24) = *(_QWORD *)(lend + 24);
        *(_QWORD *)(v9 + 16) = *(_QWORD *)(lend + 16);
        v97 = *(_QWORD *)lend;
        *(_QWORD *)(v9 + 8) = *(_QWORD *)(lend + 8);
        *(_QWORD *)v9 = v97;
        Curl_cfree(lend);
      }
      else
      {
        v9 = v115;
      }
      v98 = (char)delimb;
      if ( data )
      {
        v98 = (char)delimb;
        if ( c->running && (*((_BYTE *)&data->set + 1326) & 0x10) != 0 )
        {
          Curl_infof(data, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld");
          v98 = (char)delimb;
        }
      }
      if ( (v98 & 1) == 0 )
      {
        v99 = (char **)&c->cookies[s1b];
        if ( strd )
          v99 = strd;
        *v99 = (char *)v9;
        ++c->numcookies;
      }
      LODWORD(v100) = *(_DWORD *)(v9 + 24);
      v101 = *(_DWORD *)(v9 + 28);
      if ( *(_QWORD *)(v9 + 24) )
      {
        HIDWORD(v100) = *(_DWORD *)(v9 + 28);
        if ( v100 < c->next_expiration )
        {
          LODWORD(c->next_expiration) = v100;
          HIDWORD(c->next_expiration) = v101;
        }
      }
      return (Cookie *)v9;
    }
    lend = 0;
    v9 = 0;
    delimb = 0;
    while ( 2 )
    {
      v76 = curl_strequal(v75->name, *(_DWORD *)(v115 + 4));
      v77 = v75;
      if ( v76 )
      {
        v78 = v75->domain;
        if ( v78 )
        {
          if ( *(_DWORD *)(v115 + 20) )
          {
            v79 = curl_strequal(v78, *(_DWORD *)(v115 + 20));
            v77 = v75;
            if ( v79 )
            {
LABEL_253:
              v86 = (const char *)*((_DWORD *)v77 + 4);
              if ( v86 )
              {
                v87 = *(_DWORD *)(v115 + 16);
                if ( v87 )
                {
                  if ( *((_BYTE *)v77 + 33) && !*(_BYTE *)(v115 + 33) && !secure )
                  {
                    strc = (char **)v77;
                    v88 = strchr(v86 + 1, 47);
                    v89 = v88 ? v88 - v86 : strlen(v86);
                    v94 = curl_strnequal(v86, v87, v89);
                    v77 = strc;
                    if ( v94 )
                    {
                      if ( data && (*((_BYTE *)&data->set + 1326) & 0x10) != 0 )
                        Curl_infof(data, "cookie '%s' for domain '%s' dropped, would overlay an existing cookie");
                      goto LABEL_215;
                    }
                  }
                }
              }
            }
          }
        }
        else if ( !*(_DWORD *)(v115 + 20) )
        {
          goto LABEL_253;
        }
      }
      if ( lend )
      {
LABEL_241:
        v75 = *(Cookie **)v77;
        if ( !*(_DWORD *)v77 )
          goto LABEL_296;
        continue;
      }
      break;
    }
    v80 = v77;
    lend = 0;
    if ( !curl_strequal(*((_DWORD *)v77 + 1), *(_DWORD *)(v115 + 4)) )
    {
      v77 = v80;
      goto LABEL_241;
    }
    v81 = v80[5];
    v77 = v80;
    v82 = v115;
    if ( v81 )
    {
      if ( *(_DWORD *)(v115 + 20) )
      {
        v83 = v77;
        if ( curl_strequal(v81, *(_DWORD *)(v115 + 20)) )
        {
          v77 = v83;
          v84 = v83[32];
          v82 = v115;
          v85 = v84 == *(_BYTE *)(v115 + 32);
          goto LABEL_264;
        }
        v90 = (int)delimb;
        v77 = v83;
        v82 = v115;
        if ( ((unsigned __int8)delimb & 1) == 0 )
        {
LABEL_272:
          delimb = (char *)v90;
          if ( (v90 & 1) != 0 )
          {
            if ( *(_BYTE *)(v82 + 34) )
            {
              v9 = (int)v77;
              lend = v82;
            }
            else
            {
              v9 = (int)v77;
              lend = v82;
              if ( *((_BYTE *)v77 + 34) )
                goto LABEL_215;
            }
          }
          goto LABEL_241;
        }
      }
      else
      {
        v90 = (int)delimb;
        if ( ((unsigned __int8)delimb & 1) == 0 )
          goto LABEL_272;
      }
    }
    else
    {
      v85 = *(_DWORD *)(v115 + 20) == 0;
LABEL_264:
      v90 = (unsigned __int8)delimb;
      if ( v85 )
        v90 = 1;
      if ( (v90 & 1) == 0 )
        goto LABEL_272;
    }
    delimc = v90;
    v91 = *((_DWORD *)v77 + 4);
    if ( v91
      && *(_DWORD *)(v82 + 16)
      && (v106 = *(_DWORD *)(v82 + 16), v92 = v77, v93 = curl_strequal(v91, v106), v77 = v92, v82 = v115, !v93) )
    {
      v90 = 0;
    }
    else
    {
      v90 = delimc;
      if ( (*((_DWORD *)v77 + 4) != 0) == (*(_DWORD *)(v82 + 16) == 0) )
        v90 = 0;
    }
    goto LABEL_272;
  }
  return (Cookie *)v9;
}
