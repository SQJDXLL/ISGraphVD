Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  __int64 v10; // r15
  time_t v11; // rax
  __int64 v12; // rbp
  const char *v13; // rbp
  char *i; // rbx
  char v15; // r15
  size_t v16; // rax
  size_t v17; // rdx
  __int64 v18; // r13
  unsigned __int64 v19; // r12
  char v20; // al
  size_t v21; // r14
  size_t v22; // r14
  size_t v23; // rax
  size_t v24; // rdx
  size_t v25; // r13
  size_t v26; // r14
  const char *v27; // rax
  char v28; // cl
  const char *v29; // rbp
  __int64 j; // rcx
  char v31; // dl
  __int64 v32; // rax
  const char *v33; // rax
  char *v34; // rbx
  size_t v35; // rax
  size_t v36; // rbp
  const char *v37; // rax
  const char *v38; // rbx
  __int64 v39; // rbp
  char v40; // cl
  const char *v41; // rdi
  _QWORD *v42; // rbx
  int v43; // eax
  int v44; // eax
  const char *v45; // rbx
  size_t v46; // r14
  _BYTE *v47; // rax
  const char *v48; // rbp
  const char *v49; // rdi
  char is_ipnum; // r15
  size_t v51; // rax
  const char *v52; // rcx
  __int64 v53; // rax
  __int64 v54; // rax
  size_t v55; // rbp
  const char *v56; // r12
  size_t v57; // r15
  __int64 v58; // rax
  __int64 v59; // rax
  char *v60; // rax
  char *v61; // rax
  char *v62; // rax
  const char *v63; // rbx
  int v64; // r12d
  char v65; // r14
  __int64 v66; // rax
  __int64 v67; // rax
  const char *v68; // rax
  char *v69; // rbx
  size_t v70; // rax
  size_t v71; // rbp
  __int64 v72; // rax
  __int64 v73; // rax
  __int64 v74; // rbp
  __int64 v75; // rax
  char v76; // al
  char *v77; // rax
  __int64 v78; // rax
  _BOOL4 v79; // r12d
  char v80; // al
  char v81; // al
  CookieInfo *v82; // rcx
  char v83; // bl
  const char *v84; // r12
  __int64 v85; // rax
  char *v86; // rax
  char *v87; // rax
  char v88; // r15
  signed __int64 v89; // r14
  void *v90; // rax
  size_t v91; // r14
  __int64 v92; // rbp
  const char *v93; // rax
  char *v94; // rbx
  size_t v95; // rax
  size_t v96; // rbp
  char v97; // r14
  bool running; // al
  int v99; // eax
  time_t v100; // rax
  CookieInfo *v101; // rcx
  time_t v102; // r15
  curl_off_t next_expiration; // rax
  size_t v104; // rax
  CookieInfo *v105; // rcx
  Cookie *next; // rax
  __int64 v107; // r12
  char v108; // bp
  Cookie *v109; // r14
  char *v110; // rdi
  __int64 v111; // rsi
  const char *spath; // r13
  __int64 v113; // rbx
  char *v114; // rax
  size_t v115; // rax
  char *v116; // rdi
  __int64 v117; // rsi
  bool v118; // zf
  char *v119; // rdi
  __int64 v120; // rsi
  const char *v121; // rdi
  int v122; // eax
  __int128 v123; // xmm0
  __int128 v124; // xmm1
  __int128 v125; // xmm2
  Curl_easy *v127; // rdi
  char *v128; // rax
  Cookie *v129; // rbx
  Cookie **v130; // r13
  Cookie *v131; // r14
  Cookie *v132; // rbp
  curl_off_t expires; // rax
  Cookie **p_next; // rax
  const char *v135; // rdx
  Cookie **v136; // rax
  curl_off_t v137; // rax
  __int64 v138; // [rsp+0h] [rbp-108h]
  char v139; // [rsp+Fh] [rbp-F9h]
  size_t s2a; // [rsp+10h] [rbp-F8h]
  char *s2b; // [rsp+10h] [rbp-F8h]
  const char *s; // [rsp+28h] [rbp-E0h]
  char v146; // [rsp+30h] [rbp-D8h]
  __int64 *v148; // [rsp+38h] [rbp-D0h]
  time_t v149; // [rsp+40h] [rbp-C8h]
  __int64 v150; // [rsp+48h] [rbp-C0h]
  char *dest[23]; // [rsp+50h] [rbp-B8h] BYREF

  v10 = 0LL;
  v11 = time(0LL);
  if ( data->req.setcookies > 0x31u )
    return (Cookie *)v10;
  v149 = v11;
  v138 = Curl_ccalloc(1LL, 72LL);
  if ( !v138 )
    return 0LL;
  if ( !httpheader )
  {
    dest[0] = 0LL;
    v12 = v138;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 10;
      *(_BYTE *)(v138 + 59) = 1;
      if ( *lineptr == 35 )
        goto LABEL_5;
    }
    else if ( *lineptr == 35 )
    {
      goto LABEL_5;
    }
    v60 = strchr(lineptr, 13);
    if ( v60 )
      *v60 = 0;
    v61 = strchr(lineptr, 10);
    if ( v61 )
      *v61 = 0;
    v62 = strtok_r(lineptr, "\t", dest);
    if ( !v62 )
      goto LABEL_306;
    v63 = v62;
    v64 = 0;
    v65 = 0;
    while ( 1 )
    {
      switch ( v64 )
      {
        case 0:
          if ( *v63 == 46 )
            ++v63;
          v66 = Curl_cstrdup(v63);
          *(_QWORD *)(v12 + 40) = v66;
          if ( !v66 )
            v65 = 1;
          v64 = 0;
          goto LABEL_194;
        case 1:
          *(_BYTE *)(v12 + 56) = (unsigned int)curl_strequal(v63, "TRUE") != 0;
          v64 = 1;
          goto LABEL_194;
        case 2:
          if ( !strcmp("TRUE", v63) || !strcmp("FALSE", v63) )
          {
            v74 = Curl_cstrdup("/");
            *(_QWORD *)(v138 + 24) = v74;
            v75 = Curl_cstrdup("/");
            if ( !v75 )
              v65 = 1;
            v118 = v74 == 0;
            v12 = v138;
            *(_QWORD *)(v138 + 32) = v75;
            if ( v118 )
              v65 = 1;
            goto LABEL_180;
          }
          v67 = Curl_cstrdup(v63);
          *(_QWORD *)(v12 + 24) = v67;
          v64 = 2;
          if ( !v67 )
            goto LABEL_184;
          v68 = (const char *)Curl_cstrdup(v67);
          if ( v68 )
          {
            v69 = (char *)v68;
            v70 = strlen(v68);
            v71 = v70;
            if ( *v69 == 34 )
            {
              memmove(v69, v69 + 1, v70);
              --v71;
            }
            if ( v71 )
            {
              if ( v69[v71 - 1] == 34 )
                v69[--v71] = 0;
              if ( *v69 == 47 )
              {
                if ( v71 && v69[v71 - 1] == 47 )
                  v69[v71 - 1] = 0;
                goto LABEL_190;
              }
LABEL_189:
              Curl_cfree(v69);
              v69 = (char *)Curl_strndup("/", 1LL);
            }
            else if ( *v69 != 47 )
            {
              goto LABEL_189;
            }
LABEL_190:
            v12 = v138;
            goto LABEL_191;
          }
          v69 = 0LL;
LABEL_191:
          *(_QWORD *)(v12 + 32) = v69;
          v76 = 1;
          if ( v69 )
            v76 = v65;
          v65 = v76;
LABEL_194:
          v77 = strtok_r(0LL, "\t", dest);
          ++v64;
          if ( !v77 || (v63 = v77, (v65 & 1) != 0) )
          {
            if ( v64 == 6 )
            {
              v78 = Curl_cstrdup(&L_str_22);
              *(_QWORD *)(v12 + 16) = v78;
              v118 = v78 == 0;
              v79 = v78 == 0;
              v80 = v65;
              v65 = 1;
              if ( !v118 )
                v65 = v80;
              v64 = v79 ^ 7;
            }
            if ( (v65 & 1) != 0 || v64 != 7 )
              goto LABEL_306;
            v81 = *(_BYTE *)(v12 + 64);
            v82 = c;
            if ( (v81 & 1) != 0 )
              goto LABEL_245;
            goto LABEL_246;
          }
          break;
        case 3:
LABEL_180:
          *(_BYTE *)(v12 + 57) = 0;
          v64 = 3;
          if ( (unsigned int)curl_strequal(v63, "TRUE") )
          {
            if ( !secure && !c->running )
              goto LABEL_184;
            *(_BYTE *)(v12 + 57) = 1;
          }
          goto LABEL_194;
        case 4:
          if ( (unsigned int)curlx_strtoofft(v63, 0LL, 10LL, v138 + 48) )
            v65 = 1;
          v64 = 4;
          goto LABEL_194;
        case 5:
          v72 = Curl_cstrdup(v63);
          *(_QWORD *)(v12 + 8) = v72;
          v64 = 5;
          if ( v72 )
          {
            if ( (unsigned int)curl_strnequal("__Secure-", v72, 9LL) )
            {
              *(_BYTE *)(v12 + 64) |= 1u;
            }
            else if ( (unsigned int)curl_strnequal("__Host-", *(_QWORD *)(v12 + 8), 7LL) )
            {
              *(_BYTE *)(v12 + 64) |= 2u;
            }
          }
          else
          {
LABEL_184:
            v65 = 1;
          }
          goto LABEL_194;
        case 6:
          v73 = Curl_cstrdup(v63);
          *(_QWORD *)(v12 + 16) = v73;
          if ( !v73 )
            v65 = 1;
          v64 = 6;
          goto LABEL_194;
        default:
          goto LABEL_194;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_5:
    Curl_cfree(v138);
    return 0LL;
  }
  v148 = (__int64 *)(v138 + 48);
  v150 = 0x7FFFFFFFFFFFFFFFLL - v149;
  v146 = 0;
  while ( 1 )
  {
    v13 = lineptr + 1;
    for ( i = lineptr; ; ++i )
    {
      v15 = *i;
      if ( *i != 32 && v15 != 9 )
        break;
      ++v13;
    }
    v16 = strcspn(i, ";\t\r\n=");
    if ( !v16 )
    {
      v18 = (__int64)i;
      goto LABEL_68;
    }
    v17 = v16;
    v18 = (__int64)&i[v16];
    v19 = v16;
    while ( 1 )
    {
      v20 = i[v19 - 1];
      if ( v20 != 32 && v20 != 9 )
        break;
      if ( !--v19 )
      {
        v19 = 0LL;
        break;
      }
    }
    v21 = 0LL;
    s = 0LL;
    v139 = *(_BYTE *)v18;
    if ( *(_BYTE *)v18 == 61 )
    {
      s = &i[v17 + 1];
      v22 = v17;
      v23 = strcspn(s, ";\r\n");
      v24 = v22;
      v25 = v22 + v23;
      if ( v23 )
      {
        v26 = v23;
        v27 = &v13[v25];
        while ( 1 )
        {
          v28 = *(v27 - 1);
          if ( v28 != 32 && v28 != 9 )
            break;
          --v26;
          --v27;
          if ( !v26 )
            goto LABEL_33;
        }
        v29 = &v13[v24];
        for ( j = 0LL; j != v26; ++j )
        {
          v31 = v29[j];
          if ( v31 != 32 && v31 != 9 )
          {
            v21 = v26 - j;
            s = &v29[j];
            goto LABEL_34;
          }
        }
        v21 = 0LL;
        s = v27;
      }
      else
      {
LABEL_33:
        v21 = 0LL;
      }
LABEL_34:
      if ( memchr(s, 9, v21) )
      {
        Curl_cfree(*(_QWORD *)(v138 + 40));
        Curl_cfree(*(_QWORD *)(v138 + 24));
        Curl_cfree(*(_QWORD *)(v138 + 32));
        Curl_cfree(*(_QWORD *)(v138 + 8));
        Curl_cfree(*(_QWORD *)(v138 + 16));
        Curl_cfree(v138);
        if ( (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
        {
          v10 = 0LL;
          Curl_infof(data, "cookie contains TAB, dropping");
          return (Cookie *)v10;
        }
        return 0LL;
      }
      v18 = (__int64)&i[v25 + 1];
    }
    if ( v19 > 0xFFE || v21 > 0xFFE || v21 + v19 >= 0x1001 )
    {
      Curl_cfree(*(_QWORD *)(v138 + 40));
      Curl_cfree(*(_QWORD *)(v138 + 24));
      Curl_cfree(*(_QWORD *)(v138 + 32));
      Curl_cfree(*(_QWORD *)(v138 + 8));
      Curl_cfree(*(_QWORD *)(v138 + 16));
      Curl_cfree(v138);
      if ( (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
      {
        v10 = 0LL;
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v19, v21);
        return (Cookie *)v10;
      }
      return 0LL;
    }
    if ( v15 == 95 && v19 >= 7 && i[1] == 95 )
    {
      if ( (unsigned int)curl_strnequal("__Secure-", i, 9LL) )
      {
        *(_BYTE *)(v138 + 64) |= 1u;
      }
      else if ( (unsigned int)curl_strnequal("__Host-", i, 7LL) )
      {
        *(_BYTE *)(v138 + 64) |= 2u;
      }
    }
    if ( !*(_QWORD *)(v138 + 8) )
    {
      if ( v139 != 61 )
        goto LABEL_296;
      Curl_cfree(0LL);
      *(_QWORD *)(v138 + 8) = Curl_strndup(i, v19);
      Curl_cfree(*(_QWORD *)(v138 + 16));
      v37 = (const char *)Curl_strndup(s, v21);
      *(_QWORD *)(v138 + 16) = v37;
      if ( !v37 )
        goto LABEL_296;
      v38 = *(const char **)(v138 + 8);
      if ( !v38 )
        goto LABEL_296;
      if ( v37[strcspn(v37, &invalid_octets_badoctets)] || v38[strcspn(v38, &invalid_octets_badoctets)] )
      {
        if ( (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
LABEL_296:
        Curl_cfree(*(_QWORD *)(v138 + 40));
        Curl_cfree(*(_QWORD *)(v138 + 24));
        Curl_cfree(*(_QWORD *)(v138 + 32));
        Curl_cfree(*(_QWORD *)(v138 + 8));
        Curl_cfree(*(_QWORD *)(v138 + 16));
        Curl_cfree(v138);
        return 0LL;
      }
      goto LABEL_68;
    }
    if ( !v21 )
    {
      if ( v19 == 8 )
      {
        if ( (unsigned int)curl_strnequal("httponly", i, 8LL) )
        {
          *(_BYTE *)(v138 + 59) = 1;
          goto LABEL_68;
        }
      }
      else if ( v19 == 6 && (unsigned int)curl_strnequal("secure", i, 6LL) )
      {
        if ( !secure && c->running )
          goto LABEL_296;
        *(_BYTE *)(v138 + 57) = 1;
        goto LABEL_68;
      }
      if ( v139 != 61 )
        goto LABEL_68;
    }
    if ( v19 != 7 )
      break;
    if ( (unsigned int)curl_strnequal("version", i, 7LL) )
      goto LABEL_68;
    if ( !(unsigned int)curl_strnequal("max-age", i, 7LL) )
    {
      if ( !(unsigned int)curl_strnequal("expires", i, 7LL) )
        goto LABEL_68;
      v42 = (_QWORD *)(v138 + 48);
      if ( v21 > 0x7F || *v148 )
        goto LABEL_68;
      memcpy(dest, s, v21);
      *((_BYTE *)dest + v21) = 0;
      v54 = Curl_getdate_capped(dest);
      *v148 = v54;
      if ( v54 )
      {
        if ( v54 < 0 )
          *v148 = 0LL;
        goto LABEL_68;
      }
LABEL_133:
      *v42 = 1LL;
      goto LABEL_68;
    }
    v41 = s + 1;
    if ( *s != 34 )
      v41 = s;
    v42 = (_QWORD *)(v138 + 48);
    v43 = curlx_strtoofft(v41, 0LL, 10LL, v148);
    if ( v43 )
    {
      if ( v43 != 2 )
      {
        if ( v43 != 1 )
          goto LABEL_68;
LABEL_132:
        *v148 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_68;
      }
      goto LABEL_133;
    }
    v59 = *v148;
    if ( !*v148 )
      goto LABEL_133;
    if ( v150 < v59 )
      goto LABEL_132;
    *v148 = v149 + v59;
LABEL_68:
    lineptr = (char *)(v18 + 1);
    v39 = v138;
    while ( 1 )
    {
      v40 = *(lineptr - 1);
      if ( v40 != 32 && v40 != 9 )
        break;
      ++lineptr;
    }
    if ( v40 != 59 )
      goto LABEL_204;
  }
  if ( v19 != 6 )
  {
    if ( v19 == 4 && (unsigned int)curl_strnequal("path", i, 4LL) )
    {
      Curl_cfree(*(_QWORD *)(v138 + 24));
      v32 = Curl_strndup(s, v21);
      *(_QWORD *)(v138 + 24) = v32;
      if ( !v32 )
        goto LABEL_296;
      Curl_cfree(*(_QWORD *)(v138 + 32));
      v33 = (const char *)Curl_cstrdup(*(_QWORD *)(v138 + 24));
      if ( !v33 )
      {
        *(_QWORD *)(v138 + 32) = 0LL;
        goto LABEL_296;
      }
      v34 = (char *)v33;
      v35 = strlen(v33);
      v36 = v35;
      if ( *v34 == 34 )
      {
        memmove(v34, v34 + 1, v35);
        --v36;
      }
      if ( v36 )
      {
        if ( v34[v36 - 1] == 34 )
          v34[--v36] = 0;
        if ( *v34 != 47 )
        {
LABEL_113:
          Curl_cfree(v34);
          v53 = Curl_strndup("/", 1LL);
          *(_QWORD *)(v138 + 32) = v53;
          if ( !v53 )
            goto LABEL_296;
          goto LABEL_68;
        }
        if ( v36 && v34[v36 - 1] == 47 )
          v34[v36 - 1] = 0;
      }
      else if ( *v34 != 47 )
      {
        goto LABEL_113;
      }
      *(_QWORD *)(v138 + 32) = v34;
    }
    goto LABEL_68;
  }
  v44 = curl_strnequal("domain", i, 6LL);
  if ( !v21 || !v44 )
    goto LABEL_68;
  v45 = s + 1;
  if ( *s != 46 )
    v45 = s;
  v46 = v21 - (*s == 46);
  if ( v46 == 9 && (unsigned int)curl_strnequal(v45, "localhost", 9LL)
    || (v47 = memchr(v45, 46, v46)) != 0LL && (unsigned __int64)(&v45[v46] - v47) > 1 )
  {
    v48 = domain;
    v49 = domain;
    if ( !domain )
      v49 = v45;
    is_ipnum = Curl_host_is_ipnum(v49);
    if ( domain )
    {
      if ( !is_ipnum )
        goto LABEL_100;
LABEL_108:
      if ( strncmp(v45, v48, v46) )
        goto LABEL_137;
      is_ipnum = 1;
      if ( v46 != strlen(v48) )
        goto LABEL_137;
    }
    else
    {
      v48 = 0LL;
    }
  }
  else
  {
    v48 = ":";
    if ( (unsigned __int8)Curl_host_is_ipnum(":") )
      goto LABEL_108;
LABEL_100:
    v51 = strlen(v48);
    v52 = v48;
    if ( v51 < v46 )
      goto LABEL_137;
    v55 = v51;
    v56 = v52;
    v57 = (size_t)&v52[v51 - v46];
    if ( !(unsigned int)curl_strnequal(v45, v57, v46) )
    {
      v48 = v56;
LABEL_137:
      domain = v48;
      v146 = 1;
      if ( (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
        Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v45);
      goto LABEL_68;
    }
    if ( v55 == v46 )
    {
      is_ipnum = 0;
      v48 = v56;
    }
    else
    {
      v48 = v56;
      if ( *(_BYTE *)(v57 - 1) != 46 )
        goto LABEL_137;
      is_ipnum = 0;
    }
  }
  domain = v48;
  Curl_cfree(*(_QWORD *)(v138 + 40));
  v58 = Curl_strndup(v45, v46);
  *(_QWORD *)(v138 + 40) = v58;
  if ( !is_ipnum && v58 )
  {
    *(_BYTE *)(v138 + 56) = 1;
    goto LABEL_68;
  }
  if ( v58 )
    goto LABEL_68;
  v146 = 1;
  v39 = v138;
LABEL_204:
  v83 = v146;
  if ( (v146 & 1) != 0 )
  {
    v84 = path;
  }
  else
  {
    v84 = path;
    if ( domain )
    {
      if ( !*(_QWORD *)(v39 + 40) )
      {
        v85 = Curl_cstrdup(domain);
        *(_QWORD *)(v39 + 40) = v85;
        v83 = 1;
        if ( v85 )
          v83 = v146;
      }
    }
  }
  if ( (v83 & 1) != 0 || !v84 || *(_QWORD *)(v39 + 24) )
    goto LABEL_242;
  v86 = strchr(v84, 63);
  v87 = v86 ? (char *)Curl_memrchr(v84, 47LL, v86 - v84) : strrchr(v84, 47);
  if ( !v87 )
    goto LABEL_242;
  v88 = v83;
  v89 = v87 - v84;
  v90 = (void *)Curl_cmalloc(v87 - v84 + 2);
  *(_QWORD *)(v39 + 24) = v90;
  if ( !v90 )
    goto LABEL_296;
  v91 = v89 + 1;
  memcpy(v90, path, v91);
  v92 = v138;
  *(_BYTE *)(*(_QWORD *)(v138 + 24) + v91) = 0;
  v93 = (const char *)Curl_cstrdup(*(_QWORD *)(v138 + 24));
  if ( !v93 )
  {
    v94 = 0LL;
    v97 = v88;
    goto LABEL_240;
  }
  v94 = (char *)v93;
  v95 = strlen(v93);
  v96 = v95;
  v97 = v88;
  if ( *v94 == 34 )
  {
    memmove(v94, v94 + 1, v95);
    --v96;
  }
  if ( !v96 )
  {
    if ( *v94 == 47 )
      goto LABEL_239;
    goto LABEL_238;
  }
  if ( v94[v96 - 1] == 34 )
    v94[--v96] = 0;
  if ( *v94 != 47 )
  {
LABEL_238:
    Curl_cfree(v94);
    v94 = (char *)Curl_strndup("/", 1LL);
    goto LABEL_239;
  }
  if ( v96 && v94[v96 - 1] == 47 )
    v94[v96 - 1] = 0;
LABEL_239:
  v92 = v138;
LABEL_240:
  *(_QWORD *)(v92 + 32) = v94;
  v118 = v94 == 0LL;
  v83 = 1;
  if ( !v118 )
    v83 = v97;
LABEL_242:
  if ( (v83 & 1) != 0 || !*(_QWORD *)(v138 + 8) )
    goto LABEL_296;
  ++data->req.setcookies;
  v12 = v138;
  v81 = *(_BYTE *)(v138 + 64);
  v82 = c;
  if ( (v81 & 1) != 0 )
  {
LABEL_245:
    if ( *(_BYTE *)(v12 + 57) )
      goto LABEL_246;
LABEL_306:
    Curl_cfree(*(_QWORD *)(v12 + 40));
    Curl_cfree(*(_QWORD *)(v12 + 24));
    Curl_cfree(*(_QWORD *)(v12 + 32));
    Curl_cfree(*(_QWORD *)(v12 + 8));
    Curl_cfree(*(_QWORD *)(v12 + 16));
    Curl_cfree(v12);
    return 0LL;
  }
LABEL_246:
  if ( (v81 & 2) != 0 )
  {
    if ( !*(_BYTE *)(v12 + 57) )
      goto LABEL_306;
    v121 = *(const char **)(v12 + 24);
    if ( !v121 )
      goto LABEL_306;
    v122 = strcmp(v121, "/");
    v82 = c;
    if ( v122 || *(_BYTE *)(v12 + 56) )
      goto LABEL_306;
  }
  running = v82->running;
  if ( !running && v82->newsession && !*(_QWORD *)(v12 + 48) )
    goto LABEL_306;
  *(_BYTE *)(v12 + 58) = running;
  v99 = v82->lastct + 1;
  v82->lastct = v99;
  *(_DWORD *)(v12 + 60) = v99;
  if ( !noexpire )
  {
    v100 = time(0LL);
    v101 = c;
    v102 = v100;
    next_expiration = c->next_expiration;
    if ( v102 >= next_expiration || next_expiration == 0x7FFFFFFFFFFFFFFFLL )
    {
      c->next_expiration = 0x7FFFFFFFFFFFFFFFLL;
      v128 = 0LL;
      do
      {
        s2b = v128;
        v129 = v101->cookies[(_QWORD)v128];
        if ( v129 )
        {
          v130 = &v101->cookies[(_QWORD)v128];
          v131 = 0LL;
          do
          {
            while ( 1 )
            {
              v132 = v129;
              v129 = v129->next;
              expires = v132->expires;
              if ( !expires || expires >= v102 )
                break;
              p_next = &v131->next;
              if ( !v131 )
                p_next = v130;
              *p_next = v129;
              --v101->numcookies;
              Curl_cfree(v132->domain);
              Curl_cfree(v132->path);
              Curl_cfree(v132->spath);
              Curl_cfree(v132->name);
              Curl_cfree(v132->value);
              Curl_cfree(v132);
              v101 = c;
              if ( !v129 )
                goto LABEL_311;
            }
            if ( expires && expires < v101->next_expiration )
              v101->next_expiration = expires;
            v131 = v132;
          }
          while ( v129 );
        }
LABEL_311:
        v128 = s2b + 1;
      }
      while ( s2b != (char *)&loc_3E );
    }
  }
  v10 = v138;
  v104 = cookiehash(*(const char *const *)(v138 + 40));
  v105 = c;
  s2a = v104;
  next = c->cookies[v104];
  if ( !next )
  {
    v109 = 0LL;
    v108 = 0;
    v127 = data;
    goto LABEL_326;
  }
  v107 = 0LL;
  v10 = 0LL;
  v108 = 0;
  while ( 2 )
  {
    v109 = next;
    if ( (unsigned int)curl_strequal(next->name, *(_QWORD *)(v138 + 8)) )
    {
      v110 = v109->domain;
      v111 = *(_QWORD *)(v138 + 40);
      if ( v110 )
      {
        if ( v111 && (unsigned int)curl_strequal(v110, v111) )
        {
LABEL_260:
          spath = v109->spath;
          if ( spath )
          {
            v113 = *(_QWORD *)(v138 + 32);
            if ( v113 )
            {
              if ( v109->secure && !*(_BYTE *)(v138 + 57) && !secure )
              {
                v114 = strchr(spath + 1, 47);
                v115 = v114 ? v114 - spath : strlen(spath);
                if ( (unsigned int)curl_strnequal(spath, v113, v115) )
                {
                  v12 = v138;
                  if ( data && (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
                    Curl_infof(
                      data,
                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                      *(const char **)(v138 + 8),
                      *(const char **)(v138 + 40));
                  goto LABEL_306;
                }
              }
            }
          }
        }
      }
      else if ( !v111 )
      {
        goto LABEL_260;
      }
    }
    if ( v107 )
      goto LABEL_255;
    if ( !(unsigned int)curl_strequal(v109->name, *(_QWORD *)(v138 + 8)) )
    {
      v107 = 0LL;
      goto LABEL_255;
    }
    v116 = v109->domain;
    v117 = *(_QWORD *)(v138 + 40);
    if ( !v116 )
    {
      v118 = v117 == 0;
      goto LABEL_274;
    }
    if ( v117 && (unsigned int)curl_strequal(v116, v117) )
    {
      v118 = v109->tailmatch == *(_BYTE *)(v138 + 56);
LABEL_274:
      if ( v118 )
        v108 = 1;
    }
    if ( (v108 & 1) == 0 )
      goto LABEL_285;
    v119 = v109->spath;
    if ( v119 )
    {
      v120 = *(_QWORD *)(v138 + 32);
      if ( v120 )
      {
        if ( !(unsigned int)curl_strequal(v119, v120) )
        {
          v108 = 0;
          v107 = 0LL;
          goto LABEL_255;
        }
        v119 = v109->spath;
      }
    }
    else
    {
      v119 = 0LL;
    }
    v107 = v138;
    if ( (v119 != 0LL) == (*(_QWORD *)(v138 + 32) == 0LL) )
      v108 = 0;
    if ( (v108 & 1) == 0 )
    {
LABEL_285:
      v107 = 0LL;
      goto LABEL_255;
    }
    if ( *(_BYTE *)(v138 + 58) )
    {
      v10 = (__int64)v109;
    }
    else
    {
      v10 = (__int64)v109;
      if ( v109->livecookie )
      {
        v12 = v138;
        goto LABEL_306;
      }
    }
LABEL_255:
    next = v109->next;
    if ( v109->next )
      continue;
    break;
  }
  if ( v107 )
  {
    *(_QWORD *)v107 = *(_QWORD *)v10;
    *(_DWORD *)(v107 + 60) = *(_DWORD *)(v10 + 60);
    Curl_cfree(*(_QWORD *)(v10 + 8));
    Curl_cfree(*(_QWORD *)(v10 + 16));
    Curl_cfree(*(_QWORD *)(v10 + 40));
    Curl_cfree(*(_QWORD *)(v10 + 24));
    Curl_cfree(*(_QWORD *)(v10 + 32));
    *(_QWORD *)(v10 + 64) = *(_QWORD *)(v107 + 64);
    v123 = *(_OWORD *)v107;
    v124 = *(_OWORD *)(v107 + 16);
    v125 = *(_OWORD *)(v107 + 32);
    *(_OWORD *)(v10 + 48) = *(_OWORD *)(v107 + 48);
    *(_OWORD *)(v10 + 32) = v125;
    *(_OWORD *)(v10 + 16) = v124;
    *(_OWORD *)v10 = v123;
    Curl_cfree(v107);
  }
  else
  {
    v10 = v138;
  }
  v127 = data;
  v105 = c;
LABEL_326:
  if ( v127 && v105->running && (*((_BYTE *)&v127->set + 2229) & 0x20) != 0 )
  {
    v135 = "Replaced";
    if ( (v108 & 1) == 0 )
      v135 = "Added";
    Curl_infof(
      v127,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
      v135,
      *(const char **)(v10 + 8),
      *(const char **)(v10 + 16),
      *(const char **)(v10 + 40),
      *(const char **)(v10 + 24),
      *(_QWORD *)(v10 + 48));
    v105 = c;
  }
  if ( (v108 & 1) == 0 )
  {
    v136 = &v105->cookies[s2a];
    if ( v109 )
      v136 = &v109->next;
    *v136 = (Cookie *)v10;
    ++v105->numcookies;
  }
  v137 = *(_QWORD *)(v10 + 48);
  if ( v137 && v137 < v105->next_expiration )
    v105->next_expiration = v137;
  return (Cookie *)v10;
}
