Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  int v16; // $s3
  time_t v17; // $v0
  int v18; // $v0
  int v19; // $s1
  char *k; // $s5
  char *i; // $s1
  int v22; // $s2
  size_t v23; // $v0
  size_t v24; // $s4
  char *v25; // $s7
  unsigned int v26; // $s6
  int v27; // $v0
  const char *v28; // $s7
  size_t v29; // $v0
  size_t v30; // $a3
  unsigned int v31; // $a2
  const char *v32; // $fp
  int v33; // $v1
  char *v34; // $a0
  int j; // $v1
  int v36; // $a2
  size_t v37; // $s1
  unsigned int v38; // $v1
  int v39; // $s4
  unsigned int v40; // $s7
  unsigned int v41; // $s7
  int v42; // $v0
  unsigned int v43; // $s6
  int v44; // $v0
  char *v45; // $v0
  unsigned int v46; // $s4
  int v47; // $v0
  int v48; // $v0
  const char *v49; // $s2
  int v50; // $s5
  int v51; // $v0
  int v52; // $v0
  size_t v53; // $s2
  int v54; // $v0
  unsigned int v55; // $s2
  int v56; // $v0
  int v57; // $v0
  size_t v58; // $s2
  _BYTE *v59; // $v0
  const char *v60; // $s5
  int v61; // $s4
  int v62; // $v0
  const char *v63; // $a0
  int v64; // $v0
  size_t v65; // $v0
  const char *v66; // $v1
  size_t v67; // $s5
  size_t v68; // $s6
  int v69; // $v0
  int v70; // $v0
  int v71; // $v1
  _BOOL4 v72; // $v0
  int v73; // $v0
  unsigned int v74; // $v1
  _BOOL4 v75; // $a1
  char *v76; // $v0
  char *v77; // $v0
  int v78; // $at
  int v79; // $s0
  __int64 v80; // $s2
  int next_expiration_high; // $v0
  _BOOL4 v82; // $a0
  unsigned int next_expiration; // $v1
  Cookie *v84; // $s1
  Cookie **v85; // $s0
  Cookie *next; // $v0
  Cookie **v87; // $s2
  Cookie *v88; // $s7
  char v89; // $s6
  Cookie *v90; // $s3
  int v91; // $a1
  const char *spath; // $s4
  int v93; // $s5
  char *v94; // $v0
  size_t v95; // $a2
  int v96; // $a1
  int v97; // $at
  bool v98; // dc
  int v99; // $at
  int v100; // $a1
  int v101; // $v0
  char *v102; // $v0
  int v103; // $v0
  const char *v104; // $a0
  Cookie *v105; // $at
  Cookie *v106; // $v0
  Cookie *v107; // $v1
  Cookie *v108; // $a0
  char *v109; // $a1
  char *v110; // $a2
  char *v111; // $a3
  Cookie *v112; // $t0
  Cookie *v113; // $s2
  Cookie **v114; // $s7
  Cookie *v115; // $fp
  Cookie **p_next; // $s1
  Cookie *v117; // $s4
  __int64 v118; // $v0
  _BOOL4 v119; // $a2
  int v120; // $at
  _BOOL4 v121; // $a1
  const char *v122; // $a2
  __int64 v123; // $v0
  int v124; // $at
  _BOOL4 v125; // $a1
  int v126; // $s0
  void *v127; // $v0
  char *v128; // $v0
  int v130; // [sp+34h] [-BCh]
  unsigned int *v131; // [sp+3Ch] [-B4h]
  char v132; // [sp+44h] [-ACh]
  Curl_easy *v134; // [sp+4Ch] [-A4h]
  char *v135; // [sp+50h] [-A0h]
  int v136; // [sp+54h] [-9Ch]
  int v137; // [sp+5Ch] [-94h]
  int v138; // [sp+64h] [-8Ch]
  CookieInfo *v139; // [sp+68h] [-88h]
  char *v140[32]; // [sp+70h] [-80h] BYREF

  v16 = 0;
  v17 = time(0u);
  if ( data->req.setcookies >= 0x32u )
    return (Cookie *)v16;
  v137 = v17;
  v139 = c;
  v18 = Curl_ccalloc(1, 48);
  if ( !v18 )
    return (Cookie *)v16;
  v19 = v18;
  v136 = noexpire;
  k = (char *)lineptr;
  v138 = v18;
  if ( !httpheader )
  {
    v140[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      *(_BYTE *)(v19 + 35) = 1;
      k = (char *)(lineptr + 10);
    }
    if ( *k == 35 )
      goto LABEL_5;
    v76 = strchr(k, 13);
    if ( v76 )
      *v76 = 0;
    v77 = strchr(k, 10);
    if ( v77 )
      *v77 = 0;
    if ( strtok_r(k, "\t", v140) )
      JUMPOUT(0x1250);
LABEL_217:
    Curl_cfree(*(_DWORD *)(v19 + 20));
    Curl_cfree(*(_DWORD *)(v19 + 12));
    Curl_cfree(*(_DWORD *)(v19 + 16));
    Curl_cfree(*(_DWORD *)(v19 + 4));
    Curl_cfree(*(_DWORD *)(v19 + 8));
    Curl_cfree(v19);
    return (Cookie *)v16;
  }
  if ( strlen(lineptr) >= 0x1389 )
  {
LABEL_5:
    Curl_cfree(v19);
    return (Cookie *)v16;
  }
  v134 = data;
  v130 = 0x7FFFFFFF - (v137 >> 31);
  v131 = (unsigned int *)(v19 + 0x18);
  v132 = 0;
  do
  {
    for ( i = k + 1; ; ++i )
    {
      v22 = (unsigned __int8)*k;
      if ( v22 != 32 && v22 != 9 )
        break;
      ++k;
    }
    v23 = strcspn(k, ";\t\r\n=");
    if ( !v23 )
    {
      v25 = k;
      goto LABEL_69;
    }
    v24 = v23;
    v25 = &k[v23];
    v26 = v23;
    while ( 1 )
    {
      v27 = (unsigned __int8)k[v26 - 1];
      if ( v27 != 32 && v27 != 9 )
        break;
      if ( !--v26 )
      {
        v26 = 0;
        break;
      }
    }
    if ( *v25 == 61 )
    {
      v28 = &k[v24 + 1];
      v29 = strcspn(v28, ";\r\n");
      v30 = v24 + v29;
      v31 = 0;
      if ( v29 )
      {
        v32 = &i[v30];
        while ( 1 )
        {
          v33 = *((unsigned __int8 *)v32 - 1);
          if ( v33 != 32 && v33 != 9 )
            break;
          --v29;
          --v32;
          if ( !v29 )
          {
            v37 = v30;
            v32 = v28;
            goto LABEL_38;
          }
        }
        v34 = &i[v24];
        for ( j = 0; j != v29; ++j )
        {
          v36 = (unsigned __int8)v34[j];
          if ( v36 != 32 && v36 != 9 )
          {
            v37 = v30;
            v31 = v29 - j;
            v32 = &v34[j];
            goto LABEL_38;
          }
        }
        v37 = v30;
        v31 = 0;
      }
      else
      {
        v37 = v24 + v29;
        v32 = v28;
      }
LABEL_38:
      v40 = v31;
      if ( ((int (__fastcall *)(const char *, int))memchr)(v32, 9) )
      {
        Curl_cfree(*(_DWORD *)(v138 + 20));
        Curl_cfree(*(_DWORD *)(v138 + 12));
        Curl_cfree(*(_DWORD *)(v138 + 16));
        Curl_cfree(*(_DWORD *)(v138 + 4));
        Curl_cfree(*(_DWORD *)(v138 + 8));
        Curl_cfree(v138);
        v16 = 0;
        if ( (*((_BYTE *)&data->set + 1338) & 0x10) == 0 )
          return (Cookie *)v16;
        goto LABEL_205;
      }
      v39 = 1;
      v38 = v40;
      v25 = &k[v37 + 1];
    }
    else
    {
      v38 = 0;
      v39 = 0;
      v32 = 0;
    }
    if ( v26 >= 0xFFF || v38 >= 0xFFF || v38 + v26 >= 0x1001 )
    {
      Curl_cfree(*(_DWORD *)(v138 + 20));
      Curl_cfree(*(_DWORD *)(v138 + 12));
      Curl_cfree(*(_DWORD *)(v138 + 16));
      Curl_cfree(*(_DWORD *)(v138 + 4));
      Curl_cfree(*(_DWORD *)(v138 + 8));
      Curl_cfree(v138);
      v16 = 0;
      if ( (*((_BYTE *)&data->set + 1338) & 0x10) == 0 )
        return (Cookie *)v16;
LABEL_205:
      ((void (*)(void))Curl_infof)();
      return (Cookie *)v16;
    }
    if ( v22 == 95 && v26 >= 7 && k[1] == 95 )
    {
      v135 = v25;
      v41 = v38;
      if ( curl_strnequal("__Secure-", k, 9) )
      {
        *(_BYTE *)(v138 + 40) |= 1u;
        v38 = v41;
        v25 = v135;
      }
      else
      {
        v42 = curl_strnequal("__Host-", k, 7);
        v38 = v41;
        v25 = v135;
        if ( v42 )
          *(_BYTE *)(v138 + 40) |= 2u;
      }
    }
    if ( *(_DWORD *)(v138 + 4) )
    {
      if ( !v38 )
      {
        if ( v26 == 8 )
        {
          v62 = curl_strnequal("httponly", k, 8);
          v38 = 0;
          if ( v62 )
          {
            *(_BYTE *)(v138 + 35) = 1;
            goto LABEL_69;
          }
        }
        else if ( v26 == 6 )
        {
          v52 = curl_strnequal("secure", k, 6);
          v38 = 0;
          if ( v52 )
          {
            if ( !secure && v139->running )
              goto LABEL_269;
            *(_BYTE *)(v138 + 33) = 1;
            goto LABEL_69;
          }
        }
        if ( !v39 )
          goto LABEL_69;
      }
      switch ( v26 )
      {
        case 7u:
          v53 = v38;
          if ( !curl_strnequal("version", k, 7) )
          {
            if ( curl_strnequal("max-age", k, 7) )
            {
              if ( *v32 == 0x22 )
                ++v32;
              v54 = ((int (__fastcall *)(const char *, _DWORD, int, unsigned int *))curlx_strtoofft)(v32, 0, 10, v131);
              if ( v54 )
              {
                if ( v54 == 2 )
                {
                  *v131 = 1;
                  v131[1] = 0;
                }
                else if ( v54 == 1 )
                {
                  *v131 = -1;
                  v131[1] = 0x7FFFFFFF;
                }
              }
              else
              {
                v73 = v131[1];
                v74 = *v131;
                if ( *(_QWORD *)v131 )
                {
                  v75 = v130 >= v73;
                  if ( v130 == v73 )
                    v75 = ~v137 >= v74;
                  if ( v75 )
                  {
                    *v131 = v74 + v137;
                    v131[1] = v73 + (v137 >> 31) + __CFADD__(v74, v137);
                  }
                  else
                  {
                    *v131 = -1;
                    v131[1] = 0x7FFFFFFF;
                  }
                }
                else
                {
                  *v131 = 1;
                  v131[1] = 0;
                }
              }
            }
            else if ( curl_strnequal("expires", k, 7) && v53 < 0x80 && !*(_QWORD *)v131 )
            {
              memcpy(v140, v32, v53);
              *((_BYTE *)v140 + v53) = 0;
              v69 = ((int (__fastcall *)(char **))Curl_getdate_capped)(v140);
              *(_QWORD *)v131 = v69;
              if ( v69 )
              {
                if ( v69 < 0 )
                {
                  v131[1] = 0;
                  *v131 = 0;
                }
              }
              else
              {
                *v131 = 1;
                v131[1] = 0;
              }
            }
          }
          break;
        case 6u:
          v55 = v38;
          v56 = curl_strnequal("domain", k, 6);
          if ( !v55 || !v56 )
            break;
          v57 = *(unsigned __int8 *)v32;
          if ( v57 == 0x2E )
            ++v32;
          v58 = (__PAIR64__(v55, v57 ^ 0x2Eu) - 1) >> 32;
          if ( v58 == 9 && curl_strnequal(v32, "localhost", 9)
            || (v59 = (_BYTE *)memchr(v32, 46, v58)) != 0 && (unsigned int)(&v32[v58] - v59) >= 2 )
          {
            v60 = domain;
            v63 = domain;
            if ( !domain )
              v63 = v32;
            v64 = ((int (__fastcall *)(const char *))Curl_host_is_ipnum)(v63);
            v61 = v64;
            if ( domain )
            {
              if ( !v64 )
                goto LABEL_109;
LABEL_98:
              domain = v60;
              if ( strncmp(v32, v60, v58) )
                goto LABEL_113;
              v61 = 1;
              if ( v58 != strlen(v60) )
                goto LABEL_113;
            }
            else
            {
              domain = 0;
            }
          }
          else
          {
            v60 = ":";
            if ( ((int (__fastcall *)(const char *))Curl_host_is_ipnum)(v60) )
              goto LABEL_98;
LABEL_109:
            v65 = strlen(v60);
            v66 = v60;
            domain = v60;
            if ( v65 < v58
              || (v67 = v65, v68 = (size_t)&v66[v65 - v58], !curl_strnequal(v32, v68, v58))
              || (v61 = 0, v67 != v58) && *(_BYTE *)(v68 - 1) != 46 )
            {
LABEL_113:
              v132 = 1;
              if ( (*((_BYTE *)&data->set + 1338) & 0x10) != 0 )
                Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v32);
              break;
            }
          }
          Curl_cfree(*(_DWORD *)(v138 + 20));
          v70 = ((int (__fastcall *)(const char *, size_t))Curl_memdup)(v32, v58 + 1);
          *(_DWORD *)(v138 + 20) = v70;
          if ( !v70 )
            goto LABEL_269;
          *(_BYTE *)(v70 + v58) = 0;
          v71 = *(_DWORD *)(v138 + 20);
          v72 = v71 == 0;
          if ( v61 | v72 )
          {
            if ( !v71 )
              goto LABEL_269;
            v132 |= v72;
          }
          else
          {
            *(_BYTE *)(v138 + 32) = 1;
          }
          break;
        case 4u:
          v43 = v38;
          if ( curl_strnequal("path", k, 4) )
          {
            Curl_cfree(*(_DWORD *)(v138 + 12));
            v44 = ((int (__fastcall *)(const char *, unsigned int))Curl_memdup)(v32, v43 + 1);
            *(_DWORD *)(v138 + 12) = v44;
            if ( !v44 )
              goto LABEL_269;
            *(_BYTE *)(v44 + v43) = 0;
            if ( !*(_DWORD *)(v138 + 12) )
              goto LABEL_269;
            Curl_cfree(*(_DWORD *)(v138 + 16));
            v45 = sanitize_cookie_path(*(const char **)(v138 + 12));
            *(_DWORD *)(v138 + 16) = v45;
            if ( !v45 )
              goto LABEL_269;
          }
          break;
      }
    }
    else
    {
      if ( !v39 )
        goto LABEL_269;
      v46 = v38;
      Curl_cfree(0);
      v47 = ((int (__fastcall *)(char *, unsigned int))Curl_memdup)(k, v26 + 1);
      *(_DWORD *)(v138 + 4) = v47;
      if ( v47 )
        *(_BYTE *)(v47 + v26) = 0;
      Curl_cfree(*(_DWORD *)(v138 + 8));
      v48 = ((int (__fastcall *)(const char *, unsigned int))Curl_memdup)(v32, v46 + 1);
      *(_DWORD *)(v138 + 8) = v48;
      if ( v48 )
        *(_BYTE *)(v48 + v46) = 0;
      v49 = *(const char **)(v138 + 4);
      if ( !v49 )
        goto LABEL_269;
      v50 = *(_DWORD *)(v138 + 8);
      if ( !v50 )
        goto LABEL_269;
      if ( *(_BYTE *)(v50 + strcspn(*(const char **)(v138 + 8), invalid_octets_badoctets))
        || v49[strcspn(v49, invalid_octets_badoctets)] )
      {
        if ( (*((_BYTE *)&data->set + 1338) & 0x10) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
        goto LABEL_269;
      }
    }
LABEL_69:
    for ( k = v25 + 1; ; ++k )
    {
      v51 = (unsigned __int8)*(k - 1);
      if ( v51 != 32 && v51 != 9 )
        break;
    }
  }
  while ( v51 == 59 );
  if ( (v132 & 1) != 0 )
    goto LABEL_269;
  if ( domain )
  {
    if ( !*(_DWORD *)(v138 + 20) )
    {
      v101 = Curl_cstrdup(domain);
      *(_DWORD *)(v138 + 20) = v101;
      if ( !v101 )
        goto LABEL_269;
    }
  }
  if ( path && !*(_DWORD *)(v138 + 12) )
  {
    v102 = strchr(path, 63);
    v103 = v102 ? ((int (__fastcall *)(const char *, int, int))Curl_memrchr)(path, 47, v102 - path) : (int)strrchr(path, 47);
    if ( v103 )
    {
      v126 = v103 - (_DWORD)path;
      v127 = (void *)Curl_cmalloc(v103 - (_DWORD)path + 2);
      *(_DWORD *)(v138 + 12) = v127;
      if ( !v127 )
        goto LABEL_269;
      memcpy(v127, path, v126 + 1);
      *(_BYTE *)(*(_DWORD *)(v138 + 12) + v126 + 1) = 0;
      v128 = sanitize_cookie_path(*(const char **)(v138 + 12));
      *(_DWORD *)(v138 + 16) = v128;
      if ( !v128 )
        goto LABEL_269;
    }
  }
  if ( !*(_DWORD *)(v138 + 4) )
  {
LABEL_269:
    Curl_cfree(*(_DWORD *)(v138 + 20));
    Curl_cfree(*(_DWORD *)(v138 + 12));
    Curl_cfree(*(_DWORD *)(v138 + 16));
    Curl_cfree(*(_DWORD *)(v138 + 4));
    Curl_cfree(*(_DWORD *)(v138 + 8));
    Curl_cfree(v138);
    return 0;
  }
  ++v134->req.setcookies;
  v19 = v138;
  v16 = 0;
  if ( (*(_BYTE *)(v138 + 40) & 1) != 0 && !*(_BYTE *)(v138 + 33) )
    goto LABEL_217;
  if ( (*(_BYTE *)(v138 + 40) & 2) != 0
    && (!*(_BYTE *)(v138 + 33) || (v104 = *(const char **)(v138 + 12)) == 0
                               || strcmp(v104, "/")
                               || *(_BYTE *)(v138 + 32))
    || !v139->running && v139->newsession && !*(_QWORD *)(v138 + 24) )
  {
    Curl_cfree(*(_DWORD *)(v138 + 20));
    Curl_cfree(*(_DWORD *)(v138 + 12));
    Curl_cfree(*(_DWORD *)(v138 + 16));
    Curl_cfree(*(_DWORD *)(v138 + 4));
    Curl_cfree(*(_DWORD *)(v138 + 8));
    Curl_cfree(v138);
    return (Cookie *)v16;
  }
  *(_BYTE *)(v138 + 34) = v139->running;
  v78 = v139->lastct + 1;
  v139->lastct = v78;
  *(_DWORD *)(v138 + 36) = v78;
  if ( !v136 )
  {
    v79 = 0;
    v80 = time(0u);
    next_expiration_high = HIDWORD(v139->next_expiration);
    v82 = SHIDWORD(v80) >= next_expiration_high;
    next_expiration = v139->next_expiration;
    if ( next_expiration_high == HIDWORD(v80) )
      v82 = (unsigned int)v80 >= next_expiration;
    if ( v82 || !(~next_expiration | next_expiration_high ^ 0x7FFFFFFF) )
    {
      LODWORD(v139->next_expiration) = -1;
      HIDWORD(v139->next_expiration) = 0x7FFFFFFF;
      do
      {
        v114 = &v139->cookies[v79];
        v115 = *v114;
        if ( *v114 )
        {
          p_next = 0;
          do
          {
            v117 = v115;
            LODWORD(v118) = HIDWORD(v115->expires);
            HIDWORD(v118) = v115->expires;
            v115 = v115->next;
            if ( !v118 )
              goto LABEL_240;
            v119 = (int)v118 >= SHIDWORD(v80);
            if ( (unsigned int)v118 == HIDWORD(v80) )
              v119 = HIDWORD(v118) >= (unsigned int)v80;
            if ( v119 )
            {
LABEL_240:
              if ( v118 )
              {
                v120 = HIDWORD(v139->next_expiration);
                v121 = (int)v118 >= v120;
                if ( (unsigned int)v118 == v120 )
                  v121 = HIDWORD(v118) >= LODWORD(v139->next_expiration);
                if ( !v121 )
                {
                  LODWORD(v139->next_expiration) = HIDWORD(v118);
                  HIDWORD(v139->next_expiration) = v118;
                }
                p_next = &v117->next;
              }
              else
              {
                p_next = &v117->next;
              }
            }
            else
            {
              if ( p_next )
                *p_next = v115;
              else
                *v114 = v115;
              --v139->numcookies;
              Curl_cfree(v117->domain);
              Curl_cfree(v117->path);
              Curl_cfree(v117->spath);
              Curl_cfree(v117->name);
              Curl_cfree(v117->value);
              Curl_cfree(v117);
            }
          }
          while ( v115 );
        }
        ++v79;
      }
      while ( v79 != 63 );
    }
  }
  v84 = (Cookie *)v138;
  v85 = &v139->cookies[cookiehash(*(const char *const *)(v138 + 20))];
  next = *v85;
  if ( !*v85 )
  {
    v90 = 0;
    v89 = 0;
    goto LABEL_222;
  }
  v87 = 0;
  v88 = 0;
  v89 = 0;
  while ( 2 )
  {
    v90 = next;
    if ( ((int (__fastcall *)(char *, _DWORD))curl_strequal)(next->name, *(_DWORD *)(v138 + 4)) )
    {
      v91 = *(_DWORD *)(v138 + 20);
      if ( v90->domain )
      {
        if ( v91 && curl_strequal() )
        {
LABEL_161:
          spath = v90->spath;
          if ( spath )
          {
            v93 = *(_DWORD *)(v138 + 16);
            if ( v93 )
            {
              if ( v90->secure && !*(_BYTE *)(v138 + 33) && !secure )
              {
                v94 = strchr(spath + 1, 47);
                v95 = v94 ? v94 - spath : strlen(spath);
                if ( curl_strnequal(spath, v93, v95) )
                {
                  if ( v134 && (*((_BYTE *)&v134->set + 1338) & 0x10) != 0 )
                    ((void (*)(void))Curl_infof)();
                  goto LABEL_269;
                }
              }
            }
          }
        }
      }
      else if ( !v91 )
      {
        goto LABEL_161;
      }
    }
    if ( !v87 )
    {
      if ( !((int (__fastcall *)(char *, _DWORD))curl_strequal)(v90->name, *(_DWORD *)(v138 + 4)) )
      {
        v87 = 0;
        goto LABEL_156;
      }
      v96 = *(_DWORD *)(v138 + 20);
      if ( v90->domain )
      {
        if ( v96 && curl_strequal() )
        {
          v97 = v89 & 1 | (v90->tailmatch == *(unsigned __int8 *)(v138 + 32));
          v89 = 0;
          if ( !v97 )
          {
            v87 = 0;
            goto LABEL_156;
          }
        }
        else
        {
          v98 = (v89 & 1) != 0;
          v89 = 0;
          if ( !v98 )
          {
            v87 = 0;
            goto LABEL_156;
          }
        }
      }
      else
      {
        v99 = v89 & 1 | (v96 == 0);
        v89 = 0;
        if ( !v99 )
        {
          v87 = 0;
          goto LABEL_156;
        }
      }
      v100 = *(_DWORD *)(v138 + 16);
      if ( v90->spath )
      {
        if ( v100 )
        {
          if ( !curl_strequal() )
          {
            v89 = 0;
            v87 = 0;
            goto LABEL_156;
          }
          v89 = 0;
          v87 = 0;
          if ( (v90->spath != 0) == (*(_DWORD *)(v138 + 16) == 0) )
            goto LABEL_156;
        }
        else if ( !*(_DWORD *)(v138 + 16) )
        {
          v89 = 0;
          v87 = 0;
          goto LABEL_156;
        }
      }
      else
      {
        v89 = 0;
        v87 = 0;
        if ( v100 )
          goto LABEL_156;
      }
      v89 = 1;
      if ( *(_BYTE *)(v138 + 34) )
      {
        v88 = v90;
        v87 = (Cookie **)v138;
      }
      else
      {
        v88 = v90;
        v87 = (Cookie **)v138;
        if ( v90->livecookie )
          goto LABEL_269;
      }
    }
LABEL_156:
    next = v90->next;
    if ( v90->next )
      continue;
    break;
  }
  if ( v87 )
  {
    *v87 = v88->next;
    v87[9] = (Cookie *)v88->creationtime;
    Curl_cfree(v88->name);
    Curl_cfree(v88->value);
    Curl_cfree(v88->domain);
    Curl_cfree(v88->path);
    Curl_cfree(v88->spath);
    v105 = v87[7];
    v106 = v87[8];
    v107 = v87[9];
    v108 = v87[10];
    v109 = (char *)v87[3];
    v110 = (char *)v87[4];
    v111 = (char *)v87[5];
    v112 = v87[6];
    *((_DWORD *)&v88->prefix + 1) = v87[11];
    *(_DWORD *)&v88->prefix = v108;
    v88->creationtime = (int)v107;
    *(_DWORD *)&v88->tailmatch = v106;
    HIDWORD(v88->expires) = v105;
    LODWORD(v88->expires) = v112;
    v88->domain = v111;
    v88->spath = v110;
    v88->path = v109;
    v88->value = (char *)v87[2];
    v88->name = (char *)v87[1];
    v88->next = *v87;
    Curl_cfree(v87);
    v84 = v88;
  }
LABEL_222:
  if ( v134 && v139->running && (*((_BYTE *)&v134->set + 1338) & 0x10) != 0 )
  {
    v113 = v84;
    v122 = "Added";
    if ( (v89 & 1) != 0 )
      v122 = "Replaced";
    Curl_infof(v134, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld", v122, v84->name);
    if ( (v89 & 1) == 0 )
    {
LABEL_251:
      if ( v90 )
        v90->next = v113;
      else
        *v85 = v113;
      ++v139->numcookies;
    }
  }
  else
  {
    v113 = v84;
    if ( (v89 & 1) == 0 )
      goto LABEL_251;
  }
  LODWORD(v123) = HIDWORD(v113->expires);
  HIDWORD(v123) = v113->expires;
  if ( !v123 )
    return v113;
  v124 = HIDWORD(v139->next_expiration);
  v125 = (int)v123 >= v124;
  if ( (unsigned int)v123 == v124 )
    v125 = HIDWORD(v123) >= LODWORD(v139->next_expiration);
  if ( !v125 )
  {
    LODWORD(v139->next_expiration) = HIDWORD(v123);
    HIDWORD(v139->next_expiration) = v123;
  }
  return v113;
}
