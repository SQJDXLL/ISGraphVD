// local variable allocation has failed, the output may be wrong!
Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v13; // $s7
  Cookie *v17; // $s0
  int v18; // $a3
  size_t v19; // $v0
  char *v20; // $t0
  const char *v21; // $a3
  const char *v22; // $fp
  char *v23; // $a0
  int v24; // $v0
  _BYTE *v25; // $s3
  size_t v26; // $s1
  int v27; // $v0
  int v28; // $v0
  size_t v29; // $s1
  void *v30; // $v0
  int v31; // $fp
  void (*v32)(Cookie *); // $t9
  int v33; // $v0
  unsigned __int8 v34; // $v0
  const char *name; // $s1
  char *value; // $s3
  void (*v37)(Cookie *); // $t9
  int v38; // $v0
  char *v39; // $v0
  int v40; // $v0
  _BYTE *v41; // $v0
  const char *v42; // $a0
  int is_ipnum; // $v0
  int v44; // $fp
  int v45; // $v0
  int v46; // $v0
  int v47; // $v1
  __int64 v48; // $v1
  int v49; // $v0
  int v50; // $a0
  bool v51; // dc
  time_t v52; // $a0
  unsigned int v53; // $a0
  int v54; // $v0
  int v55; // $v0
  const char *v56; // $a0
  int lastct; // $v0
  void (*v58)(Cookie *); // $t9
  char *v59; // $v0
  Cookie *v60; // $fp
  int livecookie; // $s2
  Cookie *v62; // $s1
  Cookie *v63; // $s3
  Cookie **p_next; // $s7
  void (__fastcall *v65)(char *); // $t9
  char *v66; // $a0
  const char *v67; // $a2
  curl_off_t expires; // $v1
  char *v69; // $v0
  char *v70; // $v0
  int v71; // $v0
  size_t v72; // $s1
  char *v73; // $a0
  char *v74; // $v0
  char *v75; // $v0
  char *v76; // $v0
  char *v77; // $a0
  char *v78; // $a1
  const char *spath; // $s6
  char *v80; // $a0
  char *v81; // $a1
  char *v82; // $s7
  char *v83; // $v0
  size_t v84; // $a2
  char *v85; // $a0
  char *v86; // $a1
  char *v87; // $v1
  void *v88; // $v0
  int v89; // $v0
  int v91[2]; // [sp+28h] [-B8h] BYREF
  char *s; // [sp+30h] [-B0h]
  const char *ptr; // [sp+34h] [-ACh]
  const char *v94; // [sp+38h] [-A8h]
  time_t now; // [sp+3Ch] [-A4h]
  _BOOL4 v96; // [sp+40h] [-A0h]
  int v97; // [sp+44h] [-9Ch] OVERLAPPED
  _DWORD *v98; // [sp+48h] [-98h]
  bool (*v99)(const char *, size_t, const char *); // [sp+4Ch] [-94h]
  const char *v100; // [sp+50h] [-90h]
  size_t nlen; // [sp+54h] [-8Ch]
  char *tok_buf; // [sp+58h] [-88h] BYREF
  char date[128]; // [sp+5Ch] [-84h] BYREF
  int v104; // [sp+DCh] [-4h]

  s = (char *)path;
  v96 = secure;
  v98 = &_stack_chk_guard;
  v13 = (char *)lineptr;
  now = time(0u);
  if ( data->req.setcookies >= 0x32u || (v17 = (Cookie *)Curl_ccalloc(1, 48)) == 0 )
  {
LABEL_2:
    v17 = 0;
    goto LABEL_3;
  }
  if ( !httpheader )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v13 = (char *)(lineptr + 10);
      v17->httponly = 1;
    }
    if ( *v13 != 35 )
    {
      v75 = strchr(v13, 13);
      if ( v75 )
        *v75 = 0;
      v76 = strchr(v13, 10);
      if ( v76 )
        *v76 = 0;
      s = (char *)freecookie;
      ptr = (const char *)sanitize_cookie_path;
      if ( strtok_r(v13, "\t", &tok_buf) )
        JUMPOUT(0x14FC);
      ((void (__fastcall *)(Cookie *))(MEMORY[0xAF10] + (__int16)freecookie))(v17);
      goto LABEL_29;
    }
LABEL_172:
    Curl_cfree(v17);
    goto LABEL_29;
  }
  v97 = 0;
  if ( strlen(lineptr) >= 0x1389 )
    goto LABEL_172;
  v99 = cookie_tailmatch;
  v94 = ":";
  while ( 1 )
  {
    while ( 1 )
    {
      v18 = *v13;
      if ( !*v13 || v18 != 32 && v18 != 9 )
        break;
      ++v13;
    }
    ptr = (const char *)*v13;
    v19 = strcspn(v13, ";\t\r\n=");
    v20 = (char *)v19;
    if ( !v19 )
    {
      ptr = v13;
      goto LABEL_121;
    }
    v21 = ptr;
    v22 = &v13[v19];
    v23 = (char *)v19;
    while ( 1 )
    {
      v24 = (--v20)[(_DWORD)v13];
      if ( v24 != 32 && v24 != 9 )
        break;
      v23 = v20;
      if ( !v20 )
        goto LABEL_19;
    }
    v20 = v23;
LABEL_19:
    if ( *v22 == 61 )
    {
      v25 = v22 + 1;
      nlen = (size_t)v20;
      v100 = ptr;
      v26 = strcspn(v22 + 1, ";\r\n");
      v21 = v100;
      v20 = (char *)nlen;
      ptr = &v22[v26 + 1];
      while ( v26 )
      {
        v27 = v22[v26];
        if ( v27 != 32 && v27 != 9 )
        {
          while ( 1 )
          {
            v28 = (char)*v25;
            if ( v28 == 32 )
            {
              --v26;
            }
            else
            {
              --v26;
              if ( v28 != 9 )
              {
                v29 = v26 + 1;
                v30 = memchr(v25, 9, v29);
                v21 = v100;
                v20 = (char *)nlen;
                if ( v30 )
                {
                  freecookie(v17);
                  if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x800) != 0 )
                  {
                    Curl_infof(data, "cookie contains TAB, dropping");
                    goto LABEL_29;
                  }
                  goto LABEL_2;
                }
                if ( nlen < 0xFFF )
                {
                  v32 = (void (*)(Cookie *))MEMORY[0xAF10];
                  if ( v29 < 0xFFF )
                  {
                    v31 = httpheader;
                    goto LABEL_38;
                  }
LABEL_40:
                  s = v20;
                  ((void (*)(Cookie *))((char *)v32 + (__int16)freecookie))(v17);
                  if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x800) != 0 )
                  {
                    Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", (size_t)s, v29);
                    goto LABEL_29;
                  }
                  goto LABEL_2;
                }
LABEL_39:
                v32 = freecookie;
                goto LABEL_40;
              }
            }
            ++v25;
            if ( !v26 )
              goto LABEL_33;
          }
        }
        --v26;
      }
LABEL_33:
      if ( nlen >= 0xFFF )
      {
LABEL_42:
        v29 = 0;
        goto LABEL_39;
      }
      v31 = httpheader;
    }
    else
    {
      if ( (unsigned int)v20 >= 0xFFF )
        goto LABEL_42;
      ptr = v22;
      v25 = 0;
      v31 = 0;
    }
    v29 = 0;
LABEL_38:
    if ( (unsigned int)&v20[v29] >= 0x1001 )
      goto LABEL_39;
    if ( (unsigned int)v20 >= 7 && v21 == (_BYTE *)&loc_5C + 3 && v13[1] == 95 )
    {
      v100 = v20;
      v33 = curl_strnequal("__Secure-", v13, 9);
      v20 = (char *)v100;
      if ( v33 )
      {
        v34 = v17->prefix | 1;
LABEL_48:
        v17->prefix = v34;
        goto LABEL_49;
      }
      v38 = curl_strnequal("__Host-", v13, 7);
      v20 = (char *)v100;
      if ( v38 )
      {
        v34 = v17->prefix | 2;
        goto LABEL_48;
      }
    }
LABEL_49:
    if ( !v17->name )
    {
      if ( v31 )
      {
        strstore(&v17->name, v13, (size_t)v20);
        strstore(&v17->value, v25, v29);
        name = v17->name;
        if ( name )
        {
          value = v17->value;
          if ( value )
          {
            if ( !value[strcspn(v17->value, badoctets_0)] && !name[strcspn(name, badoctets_0)] )
              goto LABEL_121;
            if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x800) != 0 )
            {
              Curl_infof(data, "invalid octets in name/value, cookie dropped");
              goto LABEL_57;
            }
          }
        }
      }
      goto LABEL_65;
    }
    if ( v29 )
      goto LABEL_61;
    if ( v20 == (_BYTE *)freecookie + 6 )
    {
      if ( curl_strnequal("secure", v13, 6) )
      {
        if ( v96 || !c->running )
        {
          v17->secure = 1;
          goto LABEL_121;
        }
        goto LABEL_65;
      }
      if ( !v31 )
        goto LABEL_121;
LABEL_79:
      if ( !curl_strnequal("domain", v13, 6) || !v29 )
        goto LABEL_121;
      if ( *v25 == 46 )
      {
        ++v25;
        --v29;
      }
      if ( v29 == 9 && curl_strnequal(v25, "localhost", 9) )
      {
        v42 = v25;
LABEL_88:
        if ( domain )
          v42 = domain;
      }
      else
      {
        v41 = memchr(v25, 46, v29);
        if ( v41 && v29 - (v41 - v25) >= 2 )
        {
          v42 = v25;
          goto LABEL_88;
        }
        domain = v94;
        v42 = v94;
      }
      is_ipnum = Curl_host_is_ipnum(v42);
      v44 = is_ipnum;
      if ( domain )
      {
        if ( is_ipnum )
        {
          if ( !strncmp(v25, domain, v29) && strlen(domain) == v29 )
            goto LABEL_91;
          v45 = *(_DWORD *)(&data->set.connect_only + 2);
        }
        else
        {
          if ( ((int (__fastcall *)(_BYTE *, size_t, const char *))v99)(v25, v29, domain) )
            goto LABEL_91;
          v45 = *(_DWORD *)(&data->set.connect_only + 2);
        }
        v97 = httpheader;
        if ( (v45 & 0x800) != 0 )
          Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v25);
        goto LABEL_121;
      }
LABEL_91:
      strstore(&v17->domain, v25, v29);
      if ( v17->domain )
      {
        if ( !v44 )
          v17->tailmatch = 1;
        goto LABEL_121;
      }
LABEL_65:
      v37 = freecookie;
      goto LABEL_66;
    }
    if ( v20 != (char *)&loc_8 )
    {
      if ( !v31 )
        goto LABEL_121;
LABEL_61:
      if ( v20 == (_BYTE *)freecookie + 4 )
      {
        if ( !curl_strnequal("path", v13, 4) )
          goto LABEL_121;
        strstore(&v17->path, v25, v29);
        if ( v17->path )
        {
          Curl_cfree(v17->spath);
          v39 = sanitize_cookie_path(v17->path);
          v17->spath = v39;
          if ( v39 )
            goto LABEL_121;
        }
        goto LABEL_65;
      }
      if ( v20 == (_BYTE *)freecookie + 6 )
        goto LABEL_79;
LABEL_227:
      if ( v20 != (_BYTE *)freecookie + 7 || curl_strnequal("version", v13, 7) )
        goto LABEL_121;
      if ( !curl_strnequal("max-age", v13, 7) )
      {
        if ( !curl_strnequal("expires", v13, 7) || v17->expires || v29 >= 0x80 )
          goto LABEL_121;
        v88 = memcpy(date, v25, v29);
        *((_BYTE *)&v91[0xD] + v29) = 0;
        v89 = Curl_getdate_capped(v88);
        if ( v89 )
        {
          if ( v89 >> 0x1F != -1 )
          {
            v17->expires = v89;
            goto LABEL_121;
          }
          v47 = 0;
LABEL_111:
          v49 = 0;
LABEL_116:
          LODWORD(v17->expires) = v47;
          HIDWORD(v17->expires) = v49;
          goto LABEL_121;
        }
LABEL_110:
        v47 = 1;
        goto LABEL_111;
      }
      if ( *v25 == 34 )
        ++v25;
      v46 = curlx_strtoofft(v25, 0, 10, &v17->expires);
      if ( v46 != 1 )
      {
        v47 = 1;
        if ( v46 == 2 )
          goto LABEL_111;
        if ( v46 )
          goto LABEL_121;
        LODWORD(v48) = HIDWORD(v17->expires);
        HIDWORD(v48) = v17->expires;
        if ( !v48 )
          goto LABEL_110;
        v50 = 0x7FFFFFFF - (now >> 0x1F);
        if ( v50 >= (int)v48 )
        {
          v51 = (_DWORD)v48 != v50;
          v52 = now;
          if ( !v51 )
          {
            if ( (unsigned int)~now < HIDWORD(v48) )
              goto LABEL_115;
            v52 = now;
          }
          v53 = HIDWORD(v48) + v52;
          HIDWORD(v17->expires) = (v53 < HIDWORD(v48)) + v48 + (now >> 0x1F);
          LODWORD(v17->expires) = v53;
          goto LABEL_121;
        }
      }
LABEL_115:
      v47 = -1;
      v49 = 0x7FFFFFFF;
      goto LABEL_116;
    }
    v100 = (_BYTE *)&loc_8;
    v40 = curl_strnequal("httponly", v13, 8);
    v20 = (char *)v100;
    if ( v40 )
    {
      v17->httponly = 1;
      goto LABEL_121;
    }
    if ( v31 )
      goto LABEL_227;
    while ( 1 )
    {
LABEL_121:
      v54 = *ptr;
      if ( !*ptr )
        goto LABEL_127;
      if ( v54 != 32 && v54 != 9 )
        break;
      ++ptr;
    }
    if ( v54 != 59 )
      break;
    v13 = (char *)(ptr + 1);
  }
LABEL_127:
  v37 = (void (*)(Cookie *))MEMORY[0xAF10];
  if ( v97 )
    goto LABEL_66;
  if ( !v17->domain )
  {
    if ( domain )
    {
      v55 = Curl_cstrdup(domain);
      v17->domain = (char *)v55;
      if ( !v55 )
        goto LABEL_65;
    }
  }
  if ( v17->path || !s )
    goto LABEL_133;
  v69 = strchr(s, 63);
  v70 = v69 ? (char *)Curl_memrchr(s, 47, v69 - s) : strrchr(s, 47);
  if ( !v70 )
    goto LABEL_133;
  v71 = v70 - s;
  v72 = v71 + 1;
  v73 = (char *)Curl_cmalloc(v71 + 2);
  v17->path = v73;
  if ( !v73 )
    goto LABEL_65;
  memcpy(v73, s, v72);
  v17->path[v72] = 0;
  v74 = sanitize_cookie_path(v17->path);
  v17->spath = v74;
  if ( !v74 )
  {
    v37 = (void (*)(Cookie *))MEMORY[0xAF10];
    goto LABEL_66;
  }
LABEL_133:
  v37 = (void (*)(Cookie *))MEMORY[0xAF10];
  if ( !v17->name )
    goto LABEL_66;
  ++data->req.setcookies;
  if ( (v17->prefix & 1) != 0 )
  {
    v37 = (void (*)(Cookie *))MEMORY[0xAF10];
    if ( !v17->secure )
      goto LABEL_66;
  }
  if ( (v17->prefix & 2) != 0 )
  {
    v37 = (void (*)(Cookie *))MEMORY[0xAF10];
    if ( !v17->secure )
      goto LABEL_66;
    v56 = v17->path;
    if ( !v56 )
      goto LABEL_66;
    if ( !strcmp(v56, "/") )
    {
      v37 = (void (*)(Cookie *))MEMORY[0xAF10];
      if ( v17->tailmatch )
        goto LABEL_66;
      goto LABEL_141;
    }
    goto LABEL_65;
  }
LABEL_141:
  if ( !c->running && c->newsession )
  {
    v37 = (void (*)(Cookie *))MEMORY[0xAF10];
    if ( !v17->expires )
      goto LABEL_66;
  }
  lastct = c->lastct;
  v17->livecookie = c->running;
  c->lastct = ++lastct;
  v17->creationtime = lastct;
  v58 = freecookie;
  if ( !noexpire )
  {
    remove_expired(c);
    v58 = (void (*)(Cookie *))MEMORY[0xAF10];
  }
  v59 = (char *)&c->cookies[((int (__fastcall *)(char *))((char *)v58 + (__int16)cookiehash))(v17->domain)];
  v60 = *(Cookie **)v59;
  s = v59;
  livecookie = 0;
  v62 = 0;
  v63 = 0;
  p_next = 0;
  while ( 2 )
  {
    if ( !v60 )
    {
      if ( v63 )
      {
        v63->next = v62->next;
        v65 = (void (__fastcall *)(char *))Curl_cfree;
        v66 = v62->name;
        v63->creationtime = v62->creationtime;
        v65(v66);
        Curl_cfree(v62->value);
        Curl_cfree(v62->domain);
        Curl_cfree(v62->path);
        Curl_cfree(v62->spath);
        memcpy(v62, v63, sizeof(Cookie));
        Curl_cfree(v63);
        v17 = v62;
      }
      if ( c->running && (*(_DWORD *)(&data->set.connect_only + 2) & 0x800) != 0 )
      {
        if ( livecookie )
          v67 = "Replaced";
        else
          v67 = "Added";
        Curl_infof(
          data,
          "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
          v67,
          v17->name,
          v17->value,
          v17->domain,
          v17->path,
          v17->expires);
      }
      if ( !livecookie )
      {
        if ( p_next )
          *p_next = v17;
        else
          *(_DWORD *)s = v17;
        ++c->numcookies;
      }
      expires = v17->expires;
      if ( expires && expires < c->next_expiration )
        c->next_expiration = expires;
      goto LABEL_3;
    }
    if ( !curl_strequal(v60->name, v17->name) )
      goto LABEL_186;
    v77 = v60->domain;
    v78 = v17->domain;
    if ( v77 )
    {
      if ( v78 && curl_strequal(v77, v78) )
      {
        spath = v60->spath;
        goto LABEL_185;
      }
      goto LABEL_186;
    }
    if ( v78 )
      goto LABEL_186;
    spath = v60->spath;
LABEL_185:
    if ( !spath )
      goto LABEL_186;
    v82 = v17->spath;
    if ( !v82 || !v60->secure || v17->secure || v96 )
      goto LABEL_186;
    v83 = strchr(spath + 1, 47);
    v84 = v83 - spath;
    if ( !v83 )
      v84 = strlen(spath);
    if ( !curl_strnequal(spath, v82, v84) )
    {
LABEL_186:
      p_next = &v60->next;
      if ( v63 )
      {
LABEL_192:
        v60 = v60->next;
        continue;
      }
      if ( curl_strequal(v60->name, v17->name) )
      {
        v80 = v60->domain;
        v81 = v17->domain;
        if ( v80 )
        {
          if ( v81 && curl_strequal(v80, v81) && v60->tailmatch == v17->tailmatch )
            goto LABEL_206;
        }
        else if ( !v81 )
        {
          v85 = v60->spath;
LABEL_207:
          v86 = v17->spath;
          if ( !v85 )
          {
            v87 = v60->spath;
            goto LABEL_209;
          }
          if ( v86 )
          {
            if ( curl_strequal(v85, v86) )
            {
              v87 = v60->spath;
LABEL_209:
              if ( (v87 == 0) == (v17->spath == 0) )
              {
                livecookie = v17->livecookie;
                v62 = v60;
                if ( v17->livecookie )
                {
                  v63 = v17;
                }
                else
                {
                  v37 = (void (*)(Cookie *))MEMORY[0xAF10];
                  if ( v60->livecookie )
                    goto LABEL_66;
                  v63 = v17;
                  livecookie = 1;
                }
                goto LABEL_191;
              }
            }
          }
          else
          {
            v63 = 0;
          }
          livecookie = 0;
          goto LABEL_191;
        }
        if ( livecookie )
        {
LABEL_206:
          v85 = v60->spath;
          goto LABEL_207;
        }
      }
LABEL_191:
      p_next = &v60->next;
      goto LABEL_192;
    }
    break;
  }
  if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x800) == 0 )
    goto LABEL_65;
  Curl_infof(data, "cookie '%s' for domain '%s' dropped, would overlay an existing cookie", v17->name, v17->domain);
LABEL_57:
  v37 = (void (*)(Cookie *))MEMORY[0xAF10];
LABEL_66:
  ((void (*)(Cookie *))((char *)v37 + (__int16)freecookie))(v17);
LABEL_29:
  v17 = 0;
LABEL_3:
  if ( v104 != *v98 )
    _stack_chk_fail();
  return v17;
}
