Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  time_t v10; // rax
  time_t v11; // rbp
  Cookie *v12; // r12
  bool v13; // r12
  size_t v14; // rbx
  size_t v15; // r15
  char v16; // dl
  const char *v17; // r13
  const char *v18; // rbp
  const char *name; // rbx
  const char *value; // r12
  char v21; // al
  char *v22; // rax
  __int64 v23; // rax
  bool v24; // zf
  __int64 v25; // rdx
  __int64 v26; // rax
  int v27; // eax
  curl_off_t expires; // rdx
  __int64 v29; // rax
  char v30; // al
  __int64 v31; // rax
  char *v32; // rax
  char *v33; // rbx
  signed __int64 v34; // rbx
  char *v35; // rdi
  char *v36; // rax
  char *v37; // rax
  char *v38; // rax
  char *v39; // rbx
  int v40; // ebp
  __int64 v41; // rax
  bool v42; // r13
  const char *v43; // rdi
  char *v44; // rax
  __int64 v45; // rbp
  __int64 v46; // rax
  __int64 v47; // rax
  __int64 v48; // rax
  Cookie *v49; // rbx
  char *v50; // rdi
  char *v51; // rsi
  const char *spath; // r13
  char *v53; // r15
  char *v54; // rax
  size_t v55; // rdx
  char *v56; // rdi
  char *v57; // rsi
  char *v58; // rdi
  char *v59; // rsi
  char livecookie; // r14
  __m128i *v61; // rbp
  curl_off_t v62; // rax
  const char *v63; // rdx
  char v65; // al
  bool v66; // bl
  _BYTE *v67; // rax
  char is_ipnum; // bl
  __int64 v69; // rax
  unsigned __int8 prefix; // al
  const char *v71; // rdi
  bool running; // al
  const char *v73; // rsi
  size_t v74; // rdx
  char replace_clist; // [rsp+0h] [rbp-128h]
  __m128i *replace_clista; // [rsp+0h] [rbp-128h]
  int replace_clistb; // [rsp+0h] [rbp-128h]
  Cookie *co; // [rsp+8h] [rbp-120h]
  size_t myhasha; // [rsp+10h] [rbp-118h]
  time_t now; // [rsp+38h] [rbp-F0h]
  bool v86; // [rsp+47h] [rbp-E1h]
  curl_off_t v87; // [rsp+48h] [rbp-E0h]
  char *tok_buf; // [rsp+58h] [rbp-D0h] BYREF
  char date[128]; // [rsp+60h] [rbp-C8h] BYREF
  unsigned __int64 v90; // [rsp+E8h] [rbp-40h]

  v90 = __readfsqword(0x28u);
  v10 = time(0LL);
  now = v10;
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  v11 = v10;
  co = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !co )
    return 0LL;
  if ( !httpheader )
  {
    tok_buf = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 10;
      co->httponly = 1;
    }
    if ( *lineptr != 35 )
    {
      v37 = strchr(lineptr, 13);
      if ( v37 )
        *v37 = 0;
      v38 = strchr(lineptr, 10);
      if ( v38 )
        *v38 = 0;
      v39 = strtok_r((char *)lineptr, "\t", &tok_buf);
      if ( !v39 )
        goto LABEL_143;
      v40 = 0;
      while ( 1 )
      {
        switch ( v40 )
        {
          case 0:
            v41 = Curl_cstrdup(&v39[*v39 == 46]);
            co->domain = (char *)v41;
            if ( !v41 )
              goto LABEL_239;
            v42 = httpheader;
            goto LABEL_115;
          case 1:
            co->tailmatch = (unsigned int)curl_strequal(v39, "TRUE") != 0;
            v42 = httpheader;
            goto LABEL_115;
          case 2:
            if ( !strcmp("TRUE", v39) || !strcmp("FALSE", v39) )
            {
              v45 = Curl_cstrdup("/");
              co->path = (char *)v45;
              v46 = Curl_cstrdup("/");
              co->spath = (char *)v46;
              v42 = 1;
              if ( v46 )
                v42 = v45 == 0;
LABEL_126:
              co->secure = 0;
              if ( (unsigned int)curl_strequal(v39, "TRUE") )
              {
                if ( !secure && !c->running )
                {
                  v40 = 3;
LABEL_239:
                  strtok_r(0LL, "\t", &tok_buf);
                  v42 = 1;
                  if ( v40 == 5 )
                  {
LABEL_240:
                    v69 = Curl_cstrdup(&LC1);
                    co->value = (char *)v69;
                    if ( v69 )
                    {
                      v40 = 7;
                      goto LABEL_242;
                    }
                  }
LABEL_143:
                  freecookie(co);
                  return 0LL;
                }
                co->secure = 1;
                v40 = 3;
              }
              else
              {
                v40 = 3;
              }
            }
            else
            {
              v43 = (const char *)Curl_cstrdup(v39);
              co->path = (char *)v43;
              if ( !v43 )
                goto LABEL_239;
              v44 = sanitize_cookie_path(v43);
              co->spath = v44;
              if ( !v44 )
                goto LABEL_239;
              v42 = httpheader;
            }
LABEL_115:
            v39 = strtok_r(0LL, "\t", &tok_buf);
            ++v40;
            if ( !v39 || v42 )
            {
              if ( v40 == 6 )
                goto LABEL_240;
LABEL_242:
              if ( v40 == 7 && !v42 )
                goto LABEL_244;
              goto LABEL_143;
            }
            break;
          case 3:
            v42 = httpheader;
            goto LABEL_126;
          case 4:
            if ( (unsigned int)curlx_strtoofft(v39, 0LL, 10LL, &co->expires) )
              goto LABEL_239;
            v42 = httpheader;
            goto LABEL_115;
          case 5:
            v47 = Curl_cstrdup(v39);
            co->name = (char *)v47;
            if ( !v47 )
              goto LABEL_239;
            if ( (unsigned int)curl_strnequal("__Secure-", v47, 9LL) )
            {
              co->prefix |= 1u;
              v42 = httpheader;
            }
            else
            {
              v42 = httpheader;
              if ( (unsigned int)curl_strnequal("__Host-", co->name, 7LL) )
                co->prefix |= 2u;
            }
            goto LABEL_115;
          case 6:
            v48 = Curl_cstrdup(v39);
            co->value = (char *)v48;
            if ( !v48 )
              goto LABEL_239;
            v42 = httpheader;
            goto LABEL_115;
          default:
            v42 = httpheader;
            goto LABEL_115;
        }
      }
    }
    Curl_cfree(co);
    return 0LL;
  }
  v86 = 0;
  v87 = 0x7FFFFFFFFFFFFFFFLL - v11;
  if ( strlen(lineptr) > 0x1388 )
  {
    Curl_cfree(co);
    return 0LL;
  }
LABEL_88:
  while ( 1 )
  {
    v30 = *lineptr;
    replace_clist = *lineptr;
    if ( !*lineptr )
      break;
    if ( v30 != 32 && v30 != 9 )
    {
      v14 = strcspn(lineptr, ";\t\r\n=");
      if ( !v14 )
      {
        v21 = *lineptr;
        v18 = lineptr;
        goto LABEL_84;
      }
      goto LABEL_265;
    }
    ++lineptr;
  }
  v14 = strcspn(lineptr, ";\t\r\n=");
  if ( !v14 )
    goto LABEL_45;
LABEL_265:
  v73 = &lineptr[v14];
  while ( 1 )
  {
    v74 = v14--;
    if ( lineptr[v14] != 9 && lineptr[v14] != 32 )
      break;
    if ( !v14 )
    {
      if ( *v73 == 61 )
        goto LABEL_269;
      v15 = 0LL;
      v18 = v73;
      v17 = 0LL;
      v13 = 0;
LABEL_218:
      if ( replace_clist == 95 && v14 > 6 && lineptr[1] == 95 )
      {
        if ( (unsigned int)curl_strnequal("__Secure-", lineptr, 9LL) )
        {
          co->prefix |= 1u;
        }
        else if ( (unsigned int)curl_strnequal("__Host-", lineptr, 7LL) )
        {
          co->prefix |= 2u;
        }
      }
      if ( !co->name )
      {
        if ( !v13 )
          goto LABEL_36;
        strstore(&co->name, lineptr, v14);
        strstore(&co->value, v17, v15);
        name = co->name;
        if ( !name )
          goto LABEL_36;
        value = co->value;
        if ( !value )
          goto LABEL_36;
        if ( value[strcspn(value, &badoctets_0)] || name[strcspn(name, &badoctets_0)] )
        {
          if ( (data->set.gap8BB[3] & 0x10) != 0 )
            Curl_infof(data, "invalid octets in name/value, cookie dropped");
          goto LABEL_36;
        }
        goto LABEL_44;
      }
      if ( v15 )
        goto LABEL_225;
      if ( v14 == 6 )
      {
        if ( (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
        {
          if ( !secure && c->running )
            goto LABEL_36;
          co->secure = 1;
          goto LABEL_44;
        }
        if ( !v13 )
          goto LABEL_44;
LABEL_226:
        if ( v14 == 6 )
        {
          v66 = (unsigned int)curl_strnequal("domain", lineptr, 6LL) != 0 && v15 != 0;
          if ( !v66 )
            goto LABEL_44;
          if ( *v17 == 46 )
          {
            ++v17;
            --v15;
          }
          if ( v15 == 9 && (unsigned int)curl_strnequal(v17, "localhost", 9LL) )
          {
LABEL_233:
            if ( !domain )
            {
              is_ipnum = Curl_host_is_ipnum(v17);
              strstore(&co->domain, v17, v15);
              if ( !co->domain )
                goto LABEL_36;
              if ( is_ipnum )
                goto LABEL_44;
LABEL_261:
              co->tailmatch = 1;
              goto LABEL_44;
            }
LABEL_208:
            v65 = Curl_host_is_ipnum(domain);
          }
          else
          {
            v67 = memchr(v17, 46, v15);
            if ( !v67 )
            {
              domain = ":";
              goto LABEL_208;
            }
            if ( v15 - (v67 - v17) > 1 )
              goto LABEL_233;
            domain = ":";
            v65 = Curl_host_is_ipnum(":");
          }
          if ( v65 )
          {
            if ( !strncmp(v17, domain, v15) && strlen(domain) == v15 )
            {
              strstore(&co->domain, v17, v15);
              if ( !co->domain )
                goto LABEL_36;
              goto LABEL_44;
            }
          }
          else if ( cookie_tailmatch(v17, v15, domain) )
          {
            strstore(&co->domain, v17, v15);
            if ( !co->domain )
              goto LABEL_36;
            goto LABEL_261;
          }
          v86 = v66;
          if ( (data->set.gap8BB[3] & 0x10) != 0 )
          {
            Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v17);
            v86 = v66;
          }
          goto LABEL_44;
        }
LABEL_43:
        if ( v14 == 7 && !(unsigned int)curl_strnequal("version", lineptr, 7LL) )
        {
          if ( (unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
          {
            v27 = curlx_strtoofft(&v17[*v17 == 34], 0LL, 10LL, &co->expires);
            switch ( v27 )
            {
              case 1:
                co->expires = 0x7FFFFFFFFFFFFFFFLL;
                break;
              case 2:
                co->expires = 1LL;
                break;
              case 0:
                expires = co->expires;
                if ( expires )
                {
                  v29 = expires + now;
                  if ( expires > v87 )
                    v29 = 0x7FFFFFFFFFFFFFFFLL;
                  co->expires = v29;
                }
                else
                {
                  co->expires = 1LL;
                }
                break;
            }
          }
          else if ( (unsigned int)curl_strnequal("expires", lineptr, 7LL) && !co->expires && v15 <= 0x7F )
          {
            memcpy(date, v17, v15);
            date[v15] = 0;
            v23 = Curl_getdate_capped(date);
            v24 = v23 == 0;
            v25 = 0LL;
            if ( v23 >= 0 )
              v25 = v23;
            v26 = 1LL;
            if ( !v24 )
              v26 = v25;
            co->expires = v26;
          }
        }
        goto LABEL_44;
      }
      if ( v14 == 8 )
      {
        if ( (unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
        {
          co->httponly = 1;
          goto LABEL_44;
        }
        if ( !v13 )
          goto LABEL_44;
        goto LABEL_43;
      }
      if ( v13 )
      {
LABEL_225:
        if ( v14 != 4 )
          goto LABEL_226;
        if ( (unsigned int)curl_strnequal("path", lineptr, 4LL) )
        {
          strstore(&co->path, v17, v15);
          if ( !co->path || (Curl_cfree(co->spath), v22 = sanitize_cookie_path(co->path), (co->spath = v22) == 0LL) )
          {
LABEL_36:
            freecookie(co);
            return 0LL;
          }
        }
      }
LABEL_44:
      v21 = *v18;
      if ( !*v18 )
      {
LABEL_45:
        if ( v86 )
          goto LABEL_36;
        if ( !co->domain )
        {
          if ( domain )
          {
            v31 = Curl_cstrdup(domain);
            co->domain = (char *)v31;
            if ( !v31 )
              goto LABEL_36;
          }
        }
        if ( !co->path && path )
        {
          v32 = strchr(path, 63);
          v33 = v32 ? (char *)Curl_memrchr(path, 47LL, v32 - path) : strrchr(path, 47);
          if ( v33 )
          {
            v34 = v33 - path;
            v35 = (char *)Curl_cmalloc(v34 + 2);
            co->path = v35;
            if ( !v35 )
              goto LABEL_36;
            memcpy(v35, path, v34 + 1);
            co->path[v34 + 1] = 0;
            v36 = sanitize_cookie_path(co->path);
            co->spath = v36;
            if ( !v36 )
              goto LABEL_36;
          }
        }
        if ( !co->name )
          goto LABEL_36;
        ++data->req.setcookies;
LABEL_244:
        prefix = co->prefix;
        if ( (prefix & 1) != 0 )
        {
          if ( co->secure )
          {
            if ( (prefix & 2) != 0 )
              goto LABEL_247;
LABEL_250:
            running = c->running;
            if ( running || !c->newsession || co->expires )
            {
              co->livecookie = running;
              replace_clistb = c->lastct;
              c->lastct = replace_clistb + 1;
              co->creationtime = replace_clistb + 1;
              if ( !noexpire )
                remove_expired(c);
              myhasha = cookiehash(co->domain);
              v49 = c->cookies[myhasha];
              if ( v49 )
              {
                livecookie = 0;
                v61 = 0LL;
                replace_clista = 0LL;
                while ( 1 )
                {
                  if ( !(unsigned int)curl_strequal(v49->name, co->name) )
                    goto LABEL_151;
                  v50 = v49->domain;
                  if ( v50 )
                  {
                    v51 = co->domain;
                    if ( !v51 || !(unsigned int)curl_strequal(v50, v51) )
                      goto LABEL_151;
                  }
                  else if ( co->domain )
                  {
                    goto LABEL_151;
                  }
                  spath = v49->spath;
                  if ( spath )
                  {
                    v53 = co->spath;
                    if ( v53 )
                    {
                      if ( v49->secure && !co->secure && !secure )
                      {
                        v54 = strchr(spath + 1, 47);
                        v55 = v54 ? v54 - spath : strlen(spath);
                        if ( (unsigned int)curl_strnequal(spath, v53, v55) )
                        {
                          if ( (data->set.gap8BB[3] & 0x10) != 0 )
                            Curl_infof(
                              data,
                              "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                              co->name,
                              co->domain);
                          goto LABEL_168;
                        }
                      }
                    }
                  }
LABEL_151:
                  if ( v61 || !(unsigned int)curl_strequal(v49->name, co->name) )
                    goto LABEL_152;
                  v56 = v49->domain;
                  if ( v56 )
                  {
                    v57 = co->domain;
                    if ( !v57 || !(unsigned int)curl_strequal(v56, v57) || v49->tailmatch != co->tailmatch )
                    {
LABEL_177:
                      if ( !livecookie )
                        goto LABEL_206;
                    }
                  }
                  else if ( co->domain )
                  {
                    goto LABEL_177;
                  }
                  v58 = v49->spath;
                  if ( v58 && ((v59 = co->spath) == 0LL || !(unsigned int)curl_strequal(v58, v59))
                    || (v49->spath == 0LL) != (co->spath == 0LL) )
                  {
LABEL_206:
                    livecookie = 0;
                    goto LABEL_152;
                  }
                  livecookie = co->livecookie;
                  if ( livecookie )
                  {
                    replace_clista = (__m128i *)v49;
                    v61 = (__m128i *)co;
                  }
                  else
                  {
                    if ( v49->livecookie )
                      goto LABEL_168;
                    replace_clista = (__m128i *)v49;
                    v61 = (__m128i *)co;
                    livecookie = 1;
                  }
LABEL_152:
                  if ( !v49->next )
                  {
                    v12 = (Cookie *)replace_clista;
                    if ( v61 )
                    {
                      v61->m128i_i64[0] = replace_clista->m128i_i64[0];
                      v61[3].m128i_i32[3] = replace_clista[3].m128i_i32[3];
                      Curl_cfree(replace_clista->m128i_i64[1]);
                      Curl_cfree(replace_clista[1].m128i_i64[0]);
                      Curl_cfree(replace_clista[2].m128i_i64[1]);
                      Curl_cfree(replace_clista[1].m128i_i64[1]);
                      Curl_cfree(replace_clista[2].m128i_i64[0]);
                      *replace_clista = _mm_loadu_si128(v61);
                      replace_clista[1] = _mm_loadu_si128(v61 + 1);
                      replace_clista[2] = _mm_loadu_si128(v61 + 2);
                      replace_clista[3] = _mm_loadu_si128(v61 + 3);
                      replace_clista[4].m128i_i64[0] = v61[4].m128i_i64[0];
                      Curl_cfree(v61);
                    }
                    else
                    {
                      v12 = co;
                    }
                    if ( !c->running )
                      goto LABEL_190;
                    goto LABEL_196;
                  }
                  v49 = v49->next;
                }
              }
              if ( !c->running )
              {
                v12 = co;
LABEL_259:
                c->cookies[myhasha] = v12;
                goto LABEL_202;
              }
              v12 = co;
              livecookie = 0;
LABEL_196:
              if ( (data->set.gap8BB[3] & 0x10) != 0 )
              {
                v63 = "Replaced";
                if ( !livecookie )
                  v63 = "Added";
                Curl_infof(
                  data,
                  "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
                  v63,
                  v12->name,
                  v12->value,
                  v12->domain,
                  v12->path,
                  v12->expires);
              }
LABEL_190:
              if ( !livecookie )
              {
                if ( !v49 )
                  goto LABEL_259;
                v49->next = v12;
LABEL_202:
                ++c->numcookies;
              }
              v62 = v12->expires;
              if ( v62 && v62 < c->next_expiration )
                c->next_expiration = v62;
              return v12;
            }
          }
        }
        else
        {
          if ( (prefix & 2) == 0 )
            goto LABEL_250;
          if ( co->secure )
          {
LABEL_247:
            v71 = co->path;
            if ( v71 && !strcmp(v71, "/") && !co->tailmatch )
              goto LABEL_250;
          }
        }
LABEL_168:
        freecookie(co);
        return 0LL;
      }
LABEL_84:
      while ( v21 == 32 || v21 == 9 )
      {
        v21 = *++v18;
        if ( !*v18 )
          goto LABEL_45;
      }
      if ( v21 != 59 )
        goto LABEL_45;
      lineptr = v18 + 1;
      goto LABEL_88;
    }
  }
  v13 = 0;
  if ( *v73 == 61 )
  {
    v14 = v74;
LABEL_269:
    v17 = v73 + 1;
    v15 = strcspn(v73 + 1, ";\r\n");
    v18 = &v73[v15 + 1];
    while ( 1 )
    {
      if ( !v15 )
      {
LABEL_214:
        v13 = httpheader;
        v15 = 0LL;
        goto LABEL_215;
      }
      v16 = v73[v15];
      if ( v16 != 32 && v16 != 9 )
        break;
      --v15;
    }
    while ( *v17 == 32 || *v17 == 9 )
    {
      ++v17;
      if ( !--v15 )
        goto LABEL_214;
    }
    if ( memchr(v17, 9, v15) )
    {
      freecookie(co);
      v12 = 0LL;
      if ( (data->set.gap8BB[3] & 0x10) != 0 )
        Curl_infof(data, "cookie contains TAB, dropping");
      return v12;
    }
    v13 = httpheader;
  }
  else
  {
    v14 = v74;
    v18 = v73;
    v17 = 0LL;
    v15 = 0LL;
  }
LABEL_215:
  if ( v14 <= 0xFFE && v15 <= 0xFFE && v15 + v14 <= 0x1000 )
    goto LABEL_218;
  freecookie(co);
  v12 = 0LL;
  if ( (data->set.gap8BB[3] & 0x10) != 0 )
    Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v14, v15);
  return v12;
}
