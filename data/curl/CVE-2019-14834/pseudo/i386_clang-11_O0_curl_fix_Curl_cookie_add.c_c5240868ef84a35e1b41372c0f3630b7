Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v8; // eax
  curl_off_t v9; // rax
  int v10; // eax
  char *v11; // eax
  char *v12; // eax
  char *v13; // eax
  char *v14; // eax
  _BOOL4 v15; // ecx
  char *v16; // eax
  char *v17; // eax
  char *v18; // eax
  char *v19; // eax
  char *v20; // eax
  char *v21; // eax
  char *v22; // eax
  int v23; // edx
  const char *v24; // edi
  int v26; // [esp+8h] [ebp-190h]
  int v27; // [esp+8h] [ebp-190h]
  char v28; // [esp+55h] [ebp-143h]
  bool v29; // [esp+56h] [ebp-142h]
  bool v30; // [esp+57h] [ebp-141h]
  const char *v31; // [esp+64h] [ebp-134h]
  const char *v32; // [esp+6Ch] [ebp-12Ch]
  bool v33; // [esp+70h] [ebp-128h]
  bool v34; // [esp+71h] [ebp-127h]
  bool v35; // [esp+72h] [ebp-126h]
  bool v36; // [esp+73h] [ebp-125h]
  bool v37; // [esp+74h] [ebp-124h]
  bool v38; // [esp+75h] [ebp-123h]
  bool v39; // [esp+76h] [ebp-122h]
  bool v40; // [esp+77h] [ebp-121h]
  char *sep_0; // [esp+94h] [ebp-104h]
  size_t cllen; // [esp+98h] [ebp-100h]
  bool matching_domains; // [esp+9Fh] [ebp-F9h]
  int fields; // [esp+A0h] [ebp-F8h]
  char *tok_buf; // [esp+A4h] [ebp-F4h] BYREF
  char *firstptr; // [esp+A8h] [ebp-F0h]
  char *ptr_0; // [esp+ACh] [ebp-ECh]
  size_t pathlen; // [esp+B0h] [ebp-E8h]
  char *endslash; // [esp+B4h] [ebp-E4h]
  char *queryp; // [esp+B8h] [ebp-E0h]
  char date[128]; // [esp+BCh] [ebp-DCh] BYREF
  const char *maxage; // [esp+13Ch] [ebp-5Ch]
  CURLofft offt; // [esp+140h] [ebp-58h]
  bool is_ip; // [esp+147h] [ebp-51h]
  const char *valuep; // [esp+148h] [ebp-50h]
  const char *namep; // [esp+14Ch] [ebp-4Ch]
  bool sep; // [esp+152h] [ebp-46h]
  bool done; // [esp+153h] [ebp-45h]
  size_t nlen; // [esp+154h] [ebp-44h]
  size_t vlen; // [esp+158h] [ebp-40h]
  size_t linelength; // [esp+15Ch] [ebp-3Ch]
  const char *ptr; // [esp+160h] [ebp-38h]
  size_t myhash; // [esp+164h] [ebp-34h]
  bool badcookie; // [esp+16Ah] [ebp-2Eh]
  bool replace_old; // [esp+16Bh] [ebp-2Dh]
  time_t now; // [esp+16Ch] [ebp-2Ch]
  Cookie *replace_clist; // [esp+170h] [ebp-28h]
  Cookie *replace_co; // [esp+174h] [ebp-24h]
  Cookie *lastc; // [esp+178h] [ebp-20h]
  Cookie *co; // [esp+17Ch] [ebp-1Ch]
  Cookie *clist; // [esp+180h] [ebp-18h]
  bool securea; // [esp+185h] [ebp-13h]
  bool noexpirea; // [esp+186h] [ebp-12h]
  bool httpheadera; // [esp+187h] [ebp-11h]

  httpheadera = httpheader;
  noexpirea = noexpire;
  securea = secure;
  lastc = 0;
  replace_co = 0;
  replace_clist = 0;
  now = time(0);
  replace_old = 0;
  badcookie = 0;
  if ( data->req.setcookies >= 0x32u )
    return 0;
  co = (Cookie *)Curl_ccalloc(1, 44);
  if ( !co )
    return 0;
  if ( httpheadera )
  {
    linelength = strlen(lineptr);
    if ( linelength <= 0x1388 )
    {
      for ( ptr = lineptr; ; ++ptr )
      {
        while ( 1 )
        {
          v40 = 0;
          if ( *ptr )
          {
            v39 = 1;
            if ( *ptr != 32 )
              v39 = *ptr == 9;
            v40 = v39;
          }
          if ( !v40 )
            break;
          ++ptr;
        }
        nlen = strcspn(ptr, ";\t\r\n=");
        if ( nlen )
        {
          done = 0;
          sep = 0;
          namep = ptr;
          ptr += nlen;
          while ( 1 )
          {
            v38 = 0;
            if ( nlen )
            {
              v37 = 1;
              if ( namep[nlen - 1] != 32 )
                v37 = namep[nlen - 1] == 9;
              v38 = v37;
            }
            if ( !v38 )
              break;
            --nlen;
          }
          if ( *ptr == 61 )
          {
            vlen = strcspn(++ptr, ";\r\n");
            valuep = ptr;
            sep = 1;
            ptr += vlen;
            while ( 1 )
            {
              v36 = 0;
              if ( vlen )
              {
                v35 = 1;
                if ( valuep[vlen - 1] != 32 )
                  v35 = valuep[vlen - 1] == 9;
                v36 = v35;
              }
              if ( !v36 )
                break;
              --vlen;
            }
            while ( 1 )
            {
              v34 = 0;
              if ( vlen )
              {
                v33 = 1;
                if ( *valuep != 32 )
                  v33 = *valuep == 9;
                v34 = v33;
              }
              if ( !v34 )
                break;
              ++valuep;
              --vlen;
            }
            if ( memchr(valuep, 9, vlen) )
            {
              freecookie(co);
              if ( data && ((*(_DWORD *)((char *)&data->set + 1318) >> 29) & 1) != 0 )
                Curl_infof(data, "cookie contains TAB, dropping", v26);
              return 0;
            }
          }
          else
          {
            valuep = 0;
            vlen = 0;
          }
          if ( nlen >= 0xFFF || vlen >= 0xFFF || vlen + nlen > 0x1000 )
          {
            freecookie(co);
            if ( data && ((*(_DWORD *)((char *)&data->set + 1318) >> 29) & 1) != 0 )
              Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", nlen);
            return 0;
          }
          if ( nlen >= 7 && *namep == 95 && namep[1] == 95 )
          {
            if ( curl_strnequal("__Secure-", namep, 9) )
            {
              co->prefix |= 1u;
            }
            else if ( curl_strnequal("__Host-", namep, 7) )
            {
              co->prefix |= 2u;
            }
          }
          if ( co->name )
          {
            if ( !vlen )
            {
              done = 1;
              if ( nlen == 6 && curl_strnequal("secure", namep, 6) )
              {
                if ( !securea && c->running )
                {
                  badcookie = 1;
                  goto LABEL_150;
                }
                co->secure = 1;
              }
              else if ( nlen == 8 && curl_strnequal("httponly", namep, 8) )
              {
                co->httponly = 1;
              }
              else if ( sep )
              {
                done = 0;
              }
            }
          }
          else
          {
            if ( !sep )
            {
              badcookie = 1;
              goto LABEL_150;
            }
            strstore(&co->name, namep, nlen);
            strstore(&co->value, valuep, vlen);
            done = 1;
            if ( !co->name || !co->value )
            {
              badcookie = 1;
              goto LABEL_150;
            }
            if ( invalid_octets(co->value) || invalid_octets(co->name) )
            {
              if ( data && ((*(_DWORD *)((char *)&data->set + 1318) >> 29) & 1) != 0 )
                Curl_infof(data, "invalid octets in name/value, cookie dropped", v27);
              badcookie = 1;
LABEL_150:
              if ( !badcookie && !co->domain )
              {
                if ( domain )
                {
                  v11 = (char *)Curl_cstrdup(domain);
                  co->domain = v11;
                  if ( !co->domain )
                    badcookie = 1;
                }
              }
              if ( !badcookie && !co->path && path )
              {
                queryp = strchr(path, 63);
                endslash = queryp ? (char *)Curl_memrchr(path, 47, queryp - path) : strrchr(path, 47);
                if ( endslash )
                {
                  pathlen = endslash - path + 1;
                  v12 = (char *)Curl_cmalloc(endslash - path + 2);
                  co->path = v12;
                  if ( co->path )
                  {
                    memcpy(co->path, path, pathlen);
                    co->path[pathlen] = 0;
                    v13 = sanitize_cookie_path(co->path);
                    co->spath = v13;
                    if ( !co->spath )
                      badcookie = 1;
                  }
                  else
                  {
                    badcookie = 1;
                  }
                }
              }
              if ( !badcookie && co->name )
              {
                ++data->req.setcookies;
                goto LABEL_229;
              }
LABEL_228:
              freecookie(co);
              return 0;
            }
          }
          if ( !done )
          {
            if ( nlen == 4 && curl_strnequal("path", namep, 4) )
            {
              strstore(&co->path, valuep, vlen);
              if ( !co->path )
              {
                badcookie = 1;
                goto LABEL_150;
              }
              Curl_cfree(co->spath);
              v8 = sanitize_cookie_path(co->path);
              co->spath = v8;
              if ( !co->spath )
              {
                badcookie = 1;
                goto LABEL_150;
              }
            }
            else if ( nlen == 6 && curl_strnequal("domain", namep, 6) && vlen )
            {
              if ( *valuep == 46 )
              {
                ++valuep;
                --vlen;
              }
              if ( bad_domain(valuep, vlen) )
                domain = ":";
              if ( domain )
                v32 = domain;
              else
                v32 = valuep;
              is_ip = Curl_host_is_ipnum(v32) & 1;
              if ( !domain
                || is_ip && !strncmp(valuep, domain, vlen) && vlen == strlen(domain)
                || !is_ip && cookie_tailmatch(valuep, vlen, domain) )
              {
                strstore(&co->domain, valuep, vlen);
                if ( !co->domain )
                {
                  badcookie = 1;
                  goto LABEL_150;
                }
                if ( !is_ip )
                  co->tailmatch = 1;
              }
              else
              {
                badcookie = 1;
                if ( data && ((*(_DWORD *)((char *)&data->set + 1318) >> 29) & 1) != 0 )
                  Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", valuep);
              }
            }
            else if ( nlen != 7 || !curl_strnequal("version", namep, 7) )
            {
              if ( nlen == 7 && curl_strnequal("max-age", namep, 7) )
              {
                maxage = valuep;
                if ( *valuep == 34 )
                  v31 = maxage + 1;
                else
                  v31 = maxage;
                offt = curlx_strtoofft(v31, 0, 10, &co->expires);
                if ( offt )
                {
                  if ( offt == CURL_OFFT_FLOW )
                  {
                    co->expires = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else if ( offt == CURL_OFFT_INVAL )
                  {
                    co->expires = 1LL;
                  }
                }
                else if ( co->expires )
                {
                  HIDWORD(v9) = 0x7FFFFFFF - (now >> 31);
                  LODWORD(v9) = ~now;
                  if ( v9 >= co->expires )
                    co->expires += now;
                  else
                    co->expires = 0x7FFFFFFFFFFFFFFFLL;
                }
                else
                {
                  co->expires = 1LL;
                }
              }
              else if ( nlen == 7 && curl_strnequal("expires", namep, 7) && !co->expires && vlen < 0x80 )
              {
                memcpy(date, valuep, vlen);
                date[vlen] = 0;
                v10 = Curl_getdate_capped(date);
                co->expires = v10;
                if ( co->expires )
                {
                  if ( co->expires < 0 )
                    co->expires = 0LL;
                }
                else
                {
                  co->expires = 1LL;
                }
              }
            }
          }
        }
        while ( 1 )
        {
          v30 = 0;
          if ( *ptr )
          {
            v29 = 1;
            if ( *ptr != 32 )
              v29 = *ptr == 9;
            v30 = v29;
          }
          if ( !v30 )
            break;
          ++ptr;
        }
        if ( *ptr != 59 )
          goto LABEL_150;
      }
    }
LABEL_7:
    Curl_cfree(co);
    return 0;
  }
  tok_buf = 0;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
  {
    lineptr += 10;
    co->httponly = 1;
  }
  if ( *lineptr == 35 )
    goto LABEL_7;
  ptr_0 = strchr(lineptr, 13);
  if ( ptr_0 )
    *ptr_0 = 0;
  ptr_0 = strchr(lineptr, 10);
  if ( ptr_0 )
    *ptr_0 = 0;
  firstptr = strtok_r((char *)lineptr, "\t", &tok_buf);
  ptr_0 = firstptr;
  for ( fields = 0; ; ++fields )
  {
    v28 = 0;
    if ( ptr_0 )
      v28 = ~badcookie;
    if ( (v28 & 1) == 0 )
      break;
    switch ( fields )
    {
      case 0:
        if ( *ptr_0 == 46 )
          ++ptr_0;
        v14 = (char *)Curl_cstrdup(ptr_0);
        co->domain = v14;
        if ( !co->domain )
          badcookie = 1;
        break;
      case 1:
        v15 = curl_strequal(ptr_0, "TRUE") != 0;
        co->tailmatch = v15;
        break;
      case 2:
        if ( !strcmp("TRUE", ptr_0) || !strcmp("FALSE", ptr_0) )
        {
          v18 = (char *)Curl_cstrdup("/");
          co->path = v18;
          if ( !co->path )
            badcookie = 1;
          v19 = (char *)Curl_cstrdup("/");
          co->spath = v19;
          if ( !co->spath )
            badcookie = 1;
          ++fields;
          goto LABEL_201;
        }
        v16 = (char *)Curl_cstrdup(ptr_0);
        co->path = v16;
        if ( co->path )
        {
          v17 = sanitize_cookie_path(co->path);
          co->spath = v17;
          if ( !co->spath )
            badcookie = 1;
        }
        else
        {
          badcookie = 1;
        }
        break;
      case 3:
LABEL_201:
        co->secure = 0;
        if ( curl_strequal(ptr_0, "TRUE") )
        {
          if ( securea || c->running )
            co->secure = 1;
          else
            badcookie = 1;
        }
        break;
      case 4:
        if ( curlx_strtoofft(ptr_0, 0, 10, &co->expires) )
          badcookie = 1;
        break;
      case 5:
        v20 = (char *)Curl_cstrdup(ptr_0);
        co->name = v20;
        if ( co->name )
        {
          if ( curl_strnequal("__Secure-", co->name, 9) )
          {
            co->prefix |= 1u;
          }
          else if ( curl_strnequal("__Host-", co->name, 7) )
          {
            co->prefix |= 2u;
          }
        }
        else
        {
          badcookie = 1;
        }
        break;
      case 6:
        v21 = (char *)Curl_cstrdup(ptr_0);
        co->value = v21;
        if ( !co->value )
          badcookie = 1;
        break;
      default:
        break;
    }
    ptr_0 = strtok_r(0, "\t", &tok_buf);
  }
  if ( fields == 6 )
  {
    v22 = (char *)Curl_cstrdup(&L_str_22);
    co->value = v22;
    if ( co->value )
      ++fields;
    else
      badcookie = 1;
  }
  if ( !badcookie && fields != 7 )
    badcookie = 1;
  if ( badcookie )
    goto LABEL_228;
LABEL_229:
  if ( (co->prefix & 1) != 0 && !co->secure
    || (co->prefix & 2) != 0 && (!co->secure || !co->path || strcmp(co->path, "/") || co->tailmatch)
    || !c->running && c->newsession && !co->expires )
  {
    goto LABEL_228;
  }
  co->livecookie = c->running;
  v23 = c->lastct + 1;
  c->lastct = v23;
  co->creationtime = v23;
  if ( !noexpirea )
    remove_expired(c);
  myhash = cookiehash(co->domain);
  for ( clist = c->cookies[myhash]; clist; clist = clist->next )
  {
    if ( curl_strequal(clist->name, co->name) )
    {
      matching_domains = 0;
      if ( clist->domain && co->domain )
      {
        matching_domains = curl_strequal(clist->domain, co->domain) != 0;
      }
      else if ( !clist->domain && !co->domain )
      {
        matching_domains = 1;
      }
      if ( matching_domains && clist->spath && co->spath && clist->secure && !co->secure && !securea )
      {
        sep_0 = strchr((const char *)clist->spath + 1, 47);
        cllen = sep_0 ? sep_0 - clist->spath : strlen(clist->spath);
        if ( curl_strnequal(clist->spath, co->spath, cllen) )
        {
          if ( data && ((*(_DWORD *)((char *)&data->set + 1318) >> 29) & 1) != 0 )
            Curl_infof(data, "cookie '%s' for domain '%s' dropped, would overlay an existing cookie", co->name);
          goto LABEL_228;
        }
      }
    }
    if ( !replace_co && curl_strequal(clist->name, co->name) )
    {
      if ( clist->domain && co->domain )
      {
        if ( curl_strequal(clist->domain, co->domain) && clist->tailmatch == co->tailmatch )
          replace_old = 1;
      }
      else if ( !clist->domain && !co->domain )
      {
        replace_old = 1;
      }
      if ( replace_old )
      {
        if ( clist->spath && co->spath && !curl_strequal(clist->spath, co->spath) )
        {
          replace_old = 0;
        }
        else if ( (clist->spath == 0) != (co->spath == 0) )
        {
          replace_old = 0;
        }
      }
      if ( replace_old && !co->livecookie && clist->livecookie )
        goto LABEL_228;
      if ( replace_old )
      {
        replace_co = co;
        replace_clist = clist;
      }
    }
    lastc = clist;
  }
  if ( replace_co )
  {
    co = replace_co;
    clist = replace_clist;
    replace_co->next = replace_clist->next;
    co->creationtime = clist->creationtime;
    Curl_cfree(clist->name);
    Curl_cfree(clist->value);
    Curl_cfree(clist->domain);
    Curl_cfree(clist->path);
    Curl_cfree(clist->spath);
    memcpy(clist, co, sizeof(Cookie));
    Curl_cfree(co);
    co = clist;
  }
  if ( c->running && data && ((*(_DWORD *)((char *)&data->set + 1318) >> 29) & 1) != 0 )
  {
    v24 = "Added";
    if ( replace_old )
      v24 = "Replaced";
    Curl_infof(data, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld", v24);
  }
  if ( !replace_old )
  {
    if ( lastc )
      lastc->next = co;
    else
      c->cookies[myhash] = co;
    ++c->numcookies;
  }
  if ( co->expires && co->expires < c->next_expiration )
    c->next_expiration = co->expires;
  return co;
}
