Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  const char *v9; // r3
  const char *v10; // r0
  char *v11; // r0
  bool v12; // r3
  char *v13; // r0
  char *v14; // r0
  char *v15; // r0
  char *v16; // r0
  char *v17; // r0
  char *v18; // r0
  char *v19; // r0
  Cookie *v20; // r12
  char *name; // r1
  char *value; // r2
  char *v23; // r3
  char **p_spath; // lr
  char *v25; // r0
  char *v26; // r1
  char *v27; // r2
  char *v28; // r3
  char *v29; // r1
  char *v30; // r2
  char *v31; // r3
  const char *v32; // r4
  char *lineptra; // [sp+38h] [bp-11Ch]
  bool replace_old; // [sp+4Eh] [bp-106h]
  bool badcookie; // [sp+4Fh] [bp-105h]
  bool done; // [sp+50h] [bp-104h]
  bool sep; // [sp+51h] [bp-103h]
  bool matching_domains; // [sp+52h] [bp-102h]
  char is_ip; // [sp+53h] [bp-101h]
  char *tok_buf; // [sp+54h] [bp-100h] BYREF
  Cookie *clist; // [sp+58h] [bp-FCh]
  Cookie *co; // [sp+5Ch] [bp-F8h]
  Cookie *lastc; // [sp+60h] [bp-F4h]
  Cookie *replace_co; // [sp+64h] [bp-F0h]
  Cookie *replace_clist; // [sp+68h] [bp-ECh]
  const char *ptr; // [sp+6Ch] [bp-E8h]
  size_t vlen; // [sp+70h] [bp-E4h]
  size_t nlen; // [sp+74h] [bp-E0h]
  const char *valuep; // [sp+78h] [bp-DCh]
  char *endslash; // [sp+7Ch] [bp-D8h]
  char *ptr_0; // [sp+80h] [bp-D4h]
  int fields; // [sp+84h] [bp-D0h]
  size_t cllen; // [sp+88h] [bp-CCh]
  time_t now; // [sp+8Ch] [bp-C8h]
  char *firstptr; // [sp+90h] [bp-C4h]
  size_t linelength; // [sp+94h] [bp-C0h]
  const char *namep; // [sp+98h] [bp-BCh]
  const char *maxage; // [sp+9Ch] [bp-B8h]
  CURLofft offt; // [sp+A0h] [bp-B4h]
  char *queryp; // [sp+A4h] [bp-B0h]
  size_t pathlen; // [sp+A8h] [bp-ACh]
  size_t myhash; // [sp+ACh] [bp-A8h]
  const char *sep_0; // [sp+B0h] [bp-A4h]
  char date[128]; // [sp+B4h] [bp-A0h] BYREF

  lineptra = (char *)lineptr;
  lastc = 0;
  replace_co = 0;
  replace_clist = 0;
  now = time(0u);
  replace_old = 0;
  badcookie = 0;
  if ( data->req.setcookies > 0x31u )
    return 0;
  co = (Cookie *)Curl_ccalloc(1, 48);
  if ( !co )
    return 0;
  if ( !httpheader )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      lineptra = (char *)(lineptr + 0xA);
      co->httponly = 1;
    }
    if ( *lineptra != 35 )
    {
      ptr_0 = strchr(lineptra, 13);
      if ( ptr_0 )
        *ptr_0 = 0;
      ptr_0 = strchr(lineptra, 10);
      if ( ptr_0 )
        *ptr_0 = 0;
      firstptr = strtok_r(lineptra, "\t", &tok_buf);
      ptr_0 = firstptr;
      fields = 0;
      while ( ptr_0 && !badcookie )
      {
        switch ( fields )
        {
          case 0:
            if ( *ptr_0 == 46 )
              ++ptr_0;
            v11 = (char *)Curl_cstrdup(ptr_0);
            co->domain = v11;
            if ( !co->domain )
              badcookie = 1;
            break;
          case 1:
            v12 = curl_strequal(ptr_0, "TRUE") != 0;
            co->tailmatch = v12;
            break;
          case 2:
            if ( !strcmp("TRUE", ptr_0) || !strcmp("FALSE", ptr_0) )
            {
              v15 = (char *)Curl_cstrdup("/");
              co->path = v15;
              if ( !co->path )
                badcookie = 1;
              v16 = (char *)Curl_cstrdup("/");
              co->spath = v16;
              if ( !co->spath )
                badcookie = 1;
              ++fields;
              goto LABEL_183;
            }
            v13 = (char *)Curl_cstrdup(ptr_0);
            co->path = v13;
            if ( co->path )
            {
              v14 = sanitize_cookie_path(co->path);
              co->spath = v14;
              if ( !co->spath )
                badcookie = 1;
            }
            else
            {
              badcookie = 1;
            }
            break;
          case 3:
LABEL_183:
            co->secure = 0;
            if ( curl_strequal(ptr_0, "TRUE") )
            {
              if ( secure || c->running )
                co->secure = 1;
              else
                badcookie = 1;
            }
            break;
          case 4:
            if ( curlx_strtoofft(ptr_0, 0, 10, &co->expires) )
              badcookie = 1;
            break;
          case 5:
            v17 = (char *)Curl_cstrdup(ptr_0);
            co->name = v17;
            if ( co->name )
            {
              if ( curl_strnequal("__Secure-", co->name, 9) )
              {
                co->prefix |= 1u;
              }
              else if ( curl_strnequal("__Host-", co->name, 7) )
              {
                co->prefix |= 2u;
              }
            }
            else
            {
              badcookie = 1;
            }
            break;
          case 6:
            v18 = (char *)Curl_cstrdup(ptr_0);
            co->value = v18;
            if ( !co->value )
              badcookie = 1;
            break;
          default:
            break;
        }
        ptr_0 = strtok_r(0u, "\t", &tok_buf);
        ++fields;
      }
      if ( fields == 6 )
      {
        v19 = (char *)Curl_cstrdup(&unk_42C0);
        co->value = v19;
        if ( co->value )
          ++fields;
        else
          badcookie = 1;
      }
      if ( !badcookie && fields != 7 )
        badcookie = 1;
      if ( !badcookie )
      {
LABEL_210:
        if ( ((co->prefix & 1) == 0 || co->secure)
          && ((co->prefix & 2) == 0 || co->secure && co->path && !strcmp(co->path, "/") && !co->tailmatch)
          && (c->running || !c->newsession || co->expires) )
        {
          co->livecookie = c->running;
          co->creationtime = ++c->lastct;
          if ( !noexpire )
            remove_expired(c);
          myhash = cookiehash(co->domain);
          for ( clist = c->cookies[myhash]; ; clist = clist->next )
          {
            if ( !clist )
            {
              if ( replace_co )
              {
                co = replace_co;
                clist = replace_clist;
                replace_co->next = replace_clist->next;
                co->creationtime = clist->creationtime;
                Curl_cfree(clist->name);
                Curl_cfree(clist->value);
                Curl_cfree(clist->domain);
                Curl_cfree(clist->path);
                Curl_cfree(clist->spath);
                v20 = clist;
                name = co->name;
                value = co->value;
                v23 = co->path;
                p_spath = &co->spath;
                clist->next = co->next;
                v20->name = name;
                v20->value = value;
                v20->path = v23;
                v20 = (Cookie *)((char *)v20 + 16);
                v25 = *p_spath;
                v26 = p_spath[1];
                v27 = p_spath[2];
                v28 = p_spath[3];
                p_spath += 4;
                v20->next = (Cookie *)v25;
                v20->name = v26;
                v20->value = v27;
                v20->path = v28;
                v20 = (Cookie *)((char *)v20 + 16);
                v29 = p_spath[1];
                v30 = p_spath[2];
                v31 = p_spath[3];
                v20->next = (Cookie *)*p_spath;
                v20->name = v29;
                v20->value = v30;
                v20->path = v31;
                Curl_cfree(co);
                co = clist;
              }
              if ( c->running && data && (*(&data->set.connect_only + 4) & 0x10) != 0 )
              {
                if ( replace_old )
                  v32 = "Replaced";
                else
                  v32 = "Added";
                Curl_infof(
                  data,
                  "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
                  v32,
                  co->name,
                  co->value,
                  co->domain,
                  co->path,
                  co->expires);
              }
              if ( !replace_old )
              {
                if ( lastc )
                  lastc->next = co;
                else
                  c->cookies[myhash] = co;
                ++c->numcookies;
              }
              if ( co->expires && co->expires < c->next_expiration )
                c->next_expiration = co->expires;
              return co;
            }
            if ( curl_strequal(clist->name, co->name) )
            {
              matching_domains = 0;
              if ( clist->domain && co->domain )
              {
                if ( curl_strequal(clist->domain, co->domain) )
                  matching_domains = 1;
              }
              else if ( !clist->domain && !co->domain )
              {
                matching_domains = 1;
              }
              if ( matching_domains && clist->spath && co->spath && clist->secure && !co->secure && !secure )
              {
                sep_0 = strchr((const char *)clist->spath + 1, 47);
                cllen = sep_0 ? sep_0 - clist->spath : strlen(clist->spath);
                if ( curl_strnequal(clist->spath, co->spath, cllen) )
                  break;
              }
            }
            if ( !replace_co && curl_strequal(clist->name, co->name) )
            {
              if ( clist->domain && co->domain )
              {
                if ( curl_strequal(clist->domain, co->domain) && clist->tailmatch == co->tailmatch )
                  replace_old = 1;
              }
              else if ( !clist->domain && !co->domain )
              {
                replace_old = 1;
              }
              if ( replace_old )
              {
                if ( clist->spath && co->spath && !curl_strequal(clist->spath, co->spath) )
                {
                  replace_old = 0;
                }
                else if ( (co->spath == 0) != (clist->spath == 0) )
                {
                  replace_old = 0;
                }
              }
              if ( replace_old && !co->livecookie && clist->livecookie )
                goto LABEL_209;
              if ( replace_old )
              {
                replace_co = co;
                replace_clist = clist;
              }
            }
            lastc = clist;
          }
          if ( data && (*(&data->set.connect_only + 4) & 0x10) != 0 )
            Curl_infof(
              data,
              "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
              co->name,
              co->domain);
        }
      }
      goto LABEL_209;
    }
    goto LABEL_7;
  }
  linelength = strlen(lineptr);
  if ( linelength > (unsigned int)&loc_1388 )
  {
LABEL_7:
    Curl_cfree(co);
    return 0;
  }
  for ( ptr = lineptr; ; ++ptr )
  {
    while ( *ptr && (*ptr == 32 || *ptr == 9) )
      ++ptr;
    nlen = strcspn(ptr, ";\t\r\n=");
    if ( !nlen )
      goto LABEL_133;
    done = 0;
    sep = 0;
    namep = ptr;
    ptr += nlen;
    while ( nlen && (namep[nlen - 1] == 32 || namep[nlen - 1] == 9) )
      --nlen;
    if ( *ptr == 61 )
    {
      vlen = strcspn(++ptr, ";\r\n");
      valuep = ptr;
      sep = 1;
      ptr += vlen;
      while ( vlen && (valuep[vlen - 1] == 32 || valuep[vlen - 1] == 9) )
        --vlen;
      while ( vlen && (*valuep == 32 || *valuep == 9) )
      {
        ++valuep;
        --vlen;
      }
      if ( memchr(valuep, 9, vlen) )
      {
        freecookie(co);
        if ( data && (*(&data->set.connect_only + 4) & 0x10) != 0 )
          Curl_infof(data, "cookie contains TAB, dropping");
        return 0;
      }
    }
    else
    {
      valuep = 0;
      vlen = 0;
    }
    if ( nlen > 0xFFE || vlen > 0xFFE || nlen + vlen > 0x1000 )
    {
      freecookie(co);
      if ( data && (*(&data->set.connect_only + 4) & 0x10) != 0 )
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", nlen, vlen);
      return 0;
    }
    if ( nlen > 6 && *namep == 95 && namep[1] == 95 )
    {
      if ( curl_strnequal("__Secure-", namep, 9) )
      {
        co->prefix |= 1u;
      }
      else if ( curl_strnequal("__Host-", namep, 7) )
      {
        co->prefix |= 2u;
      }
    }
    if ( !co->name )
      break;
    if ( !vlen )
    {
      done = 1;
      if ( nlen == 6 && curl_strnequal("secure", namep, 6) )
      {
        if ( !secure && c->running )
        {
          badcookie = 1;
          goto LABEL_138;
        }
        co->secure = 1;
      }
      else if ( nlen == 8 && curl_strnequal("httponly", namep, 8) )
      {
        co->httponly = 1;
      }
      else if ( sep )
      {
        done = 0;
      }
    }
LABEL_74:
    if ( !done )
    {
      if ( nlen == 4 && curl_strnequal("path", namep, 4) )
      {
        strstore(&co->path, valuep, vlen);
        if ( !co->path )
        {
          badcookie = 1;
          goto LABEL_138;
        }
        Curl_cfree(co->spath);
        co->spath = sanitize_cookie_path(co->path);
        if ( !co->spath )
        {
          badcookie = 1;
          goto LABEL_138;
        }
      }
      else if ( nlen == 6 && curl_strnequal("domain", namep, 6) && vlen )
      {
        if ( *valuep == 46 )
        {
          ++valuep;
          --vlen;
        }
        if ( bad_domain(valuep, vlen) )
          domain = ":";
        if ( domain )
          v9 = domain;
        else
          v9 = valuep;
        is_ip = Curl_host_is_ipnum(v9);
        if ( !domain
          || is_ip && !strncmp(valuep, domain, vlen) && vlen == strlen(domain)
          || is_ip != 1 && cookie_tailmatch(valuep, vlen, domain) )
        {
          strstore(&co->domain, valuep, vlen);
          if ( !co->domain )
          {
            badcookie = 1;
            goto LABEL_138;
          }
          if ( is_ip != 1 )
            co->tailmatch = 1;
        }
        else
        {
          badcookie = 1;
          if ( data && (*(&data->set.connect_only + 4) & 0x10) != 0 )
            Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", valuep);
        }
      }
      else if ( nlen != 7 || !curl_strnequal("version", namep, 7) )
      {
        if ( nlen == 7 && curl_strnequal("max-age", namep, 7) )
        {
          maxage = valuep;
          if ( *valuep == 34 )
            v10 = maxage + 1;
          else
            v10 = maxage;
          offt = curlx_strtoofft(v10, 0, 10, &co->expires);
          if ( offt == CURL_OFFT_INVAL )
          {
            co->expires = 1LL;
          }
          else if ( (unsigned int)offt <= CURL_OFFT_INVAL )
          {
            if ( offt )
            {
              co->expires = 0x7FFFFFFFFFFFFFFFLL;
            }
            else if ( co->expires )
            {
              if ( 0x7FFFFFFFFFFFFFFFLL - now >= co->expires )
                co->expires += now;
              else
                co->expires = 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              co->expires = 1LL;
            }
          }
        }
        else if ( nlen == 7 && curl_strnequal("expires", namep, 7) && !co->expires && vlen <= 0x7F )
        {
          memcpy(date, valuep, vlen);
          date[vlen] = 0;
          co->expires = Curl_getdate_capped(date);
          if ( co->expires )
          {
            if ( co->expires < 0 )
              co->expires = 0LL;
          }
          else
          {
            co->expires = 1LL;
          }
        }
      }
    }
LABEL_133:
    while ( *ptr && (*ptr == 32 || *ptr == 9) )
      ++ptr;
    if ( *ptr != 59 )
      goto LABEL_138;
  }
  if ( !sep )
  {
    badcookie = 1;
    goto LABEL_138;
  }
  strstore(&co->name, namep, nlen);
  strstore(&co->value, valuep, vlen);
  done = 1;
  if ( !co->name || !co->value )
  {
    badcookie = 1;
    goto LABEL_138;
  }
  if ( !invalid_octets(co->value) && !invalid_octets(co->name) )
    goto LABEL_74;
  if ( data && (*(&data->set.connect_only + 4) & 0x10) != 0 )
    Curl_infof(data, "invalid octets in name/value, cookie dropped");
  badcookie = 1;
LABEL_138:
  if ( !badcookie && !co->domain )
  {
    if ( domain )
    {
      co->domain = (char *)Curl_cstrdup(domain);
      if ( !co->domain )
        badcookie = 1;
    }
  }
  if ( !badcookie && !co->path && path )
  {
    queryp = strchr(path, 63);
    endslash = queryp ? (char *)Curl_memrchr(path, 47, queryp - path) : strrchr(path, 47);
    if ( endslash )
    {
      pathlen = endslash - path + 1;
      co->path = (char *)Curl_cmalloc(endslash - path + 2);
      if ( co->path )
      {
        memcpy(co->path, path, pathlen);
        co->path[pathlen] = 0;
        co->spath = sanitize_cookie_path(co->path);
        if ( !co->spath )
          badcookie = 1;
      }
      else
      {
        badcookie = 1;
      }
    }
  }
  if ( !badcookie && co->name )
  {
    ++data->req.setcookies;
    goto LABEL_210;
  }
LABEL_209:
  freecookie(co);
  return 0;
}
