Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  int v12; // r0
  char *v13; // r8
  int v14; // r9
  char *v15; // r9
  int v16; // r4
  bool v17; // zf
  bool v18; // zf
  size_t v19; // r0
  size_t v20; // r6
  char *v21; // r10
  size_t v22; // r0
  int v23; // r1
  bool v24; // zf
  unsigned int v25; // r5
  size_t v26; // r9
  int v27; // r6
  const char *v28; // r7
  int v29; // r0
  bool v30; // zf
  bool v31; // zf
  const char *v32; // r10
  size_t v33; // r0
  size_t v34; // r5
  int v35; // r1
  bool v36; // zf
  char *v37; // r0
  bool v38; // cc
  int v39; // r1
  char v40; // r0
  char *v41; // r1
  _DWORD *v42; // r6
  int v43; // r2
  int v44; // r3
  bool v45; // zf
  int v46; // r4
  int v47; // r0
  bool v48; // zf
  int v49; // r4
  const char *v50; // r0
  char *v51; // r5
  size_t v52; // r6
  size_t v53; // r0
  int v54; // r0
  int v55; // r4
  const char *v56; // r6
  int v57; // r0
  const char *v58; // r5
  bool v59; // zf
  _DWORD *v60; // r4
  const char *v61; // r0
  int v62; // r0
  int v63; // r0
  bool v64; // zf
  const char *v65; // r5
  _BYTE *v66; // r0
  const char *v67; // r4
  bool v68; // zf
  const char *v69; // r0
  int is_ipnum; // r0
  int v71; // r6
  Curl_easy *v72; // r8
  int v73; // r0
  int v74; // r0
  size_t v75; // r0
  size_t v76; // r7
  const char *v77; // r8
  int v78; // r0
  int v79; // r4
  int v80; // r0
  int v81; // r2
  int v82; // r0
  int v83; // r0
  char *v84; // r0
  char *v85; // r0
  char *v86; // r0
  const char *v87; // r8
  int v88; // r10
  int v89; // r4
  int (__fastcall **v90)(const char *); // r5
  const char *v91; // r0
  int v92; // r0
  int v93; // r0
  const char *v94; // r0
  char *v95; // r6
  int (__fastcall **v96)(const char *); // r9
  size_t v97; // r5
  size_t v98; // r0
  int v99; // r0
  int v100; // r0
  int (__fastcall **v101)(const char *); // r6
  int v102; // r5
  int v103; // r0
  _BOOL4 v104; // r1
  int v105; // r0
  char *v106; // r0
  int v107; // r0
  bool v108; // zf
  void (__fastcall **v109)(int); // r4
  _DWORD *v111; // r4
  void (__fastcall **v112)(_DWORD *); // r6
  _DWORD *v113; // r4
  void (__fastcall **v114)(_DWORD *); // r5
  void (__fastcall **v115)(_DWORD *); // r4
  int v116; // r0
  _DWORD *v117; // r6
  char *v118; // r0
  char *v119; // r0
  int v120; // r4
  void *v121; // r0
  const char *v122; // r0
  char *v123; // r5
  size_t v124; // r6
  size_t v125; // r0
  int v126; // r0
  int v127; // r0
  int v128; // r4
  time_t v129; // r9
  curl_off_t *p_next_expiration; // r7
  int next_expiration_high; // r1
  int v132; // r6
  CookieInfo *v133; // r7
  Cookie *next; // r0
  Cookie **v135; // r10
  Cookie *v136; // r8
  char v137; // r9
  Cookie *v138; // r4
  int v139; // r1
  char *v140; // r0
  const char *spath; // r6
  int v142; // r5
  bool v143; // zf
  bool v144; // zf
  char *v145; // r0
  size_t v146; // r2
  char *v147; // r0
  int v148; // r1
  char v149; // r0
  int v150; // r0
  char *v151; // r0
  int v152; // r1
  _DWORD *v153; // r5
  bool v154; // zf
  void (__fastcall **v155)(_DWORD *); // r4
  const char *v156; // r0
  bool v157; // zf
  void (__fastcall **v158)(int); // r4
  Cookie *creationtime; // r2
  char *name; // r0
  void (__fastcall **v161)(char *); // r5
  char *v162; // r2
  char *v163; // r3
  char *v164; // r5
  char *v165; // r6
  char *v166; // r7
  Cookie *v167; // r2
  Cookie *v168; // r3
  Cookie *v169; // r5
  Cookie *v170; // r6
  Cookie *v171; // r7
  Curl_easy *v172; // r0
  _DWORD *v173; // r5
  Cookie *v174; // r4
  Cookie **p_next; // r8
  Cookie *v176; // r6
  curl_off_t expires; // r0
  bool v178; // zf
  __int64 v179; // r0
  curl_off_t *v180; // r7
  unsigned int next_expiration; // t1
  const char *v182; // r2
  void (__fastcall **v183)(int); // r4
  __int64 v184; // [sp+1Ch] [bp-CCh]
  _DWORD *v185; // [sp+24h] [bp-C4h]
  char v186; // [sp+28h] [bp-C0h]
  char *v187; // [sp+2Ch] [bp-BCh]
  int v189; // [sp+34h] [bp-B4h]
  Curl_easy *v190; // [sp+38h] [bp-B0h]
  unsigned int v191; // [sp+3Ch] [bp-ACh]
  time_t v192; // [sp+40h] [bp-A8h]
  int v193; // [sp+40h] [bp-A8h]
  size_t v194; // [sp+40h] [bp-A8h]
  int v195; // [sp+40h] [bp-A8h]
  CookieInfo *v196; // [sp+44h] [bp-A4h]
  int v197; // [sp+48h] [bp-A0h]
  char *dest[39]; // [sp+4Ch] [bp-9Ch] BYREF

  v192 = time(0u);
  if ( data->req.setcookies > 0x31u )
    return 0;
  v12 = ((int (__fastcall *)(int, int))*Curl_ccalloc)(1, 48);
  if ( !v12 )
    return 0;
  v13 = (char *)lineptr;
  v14 = v12;
  v189 = noexpire;
  v190 = data;
  v197 = v12;
  v196 = c;
  if ( httpheader )
  {
    if ( strlen(lineptr) <= 0x1388 )
    {
      v187 = (char *)&data->set + 1335;
      v185 = (_DWORD *)(v14 + 0x18);
      v186 = 0;
      while ( 1 )
      {
        v15 = v13 + 1;
        v16 = (unsigned __int8)*v13;
        v17 = v16 == 32;
        if ( v16 != 32 )
          v17 = v16 == 9;
        if ( v17 )
        {
          do
          {
            ++v15;
            v16 = (unsigned __int8)*++v13;
            v18 = v16 == 32;
            if ( v16 != 32 )
              v18 = v16 == 9;
          }
          while ( v18 );
        }
        v19 = strcspn(v13, ";\t\r\n=");
        if ( !v19 )
        {
          v21 = v13;
          goto LABEL_23;
        }
        v20 = v19;
        v21 = &v13[v19];
        v22 = v19 - 1;
        while ( 1 )
        {
          v23 = (unsigned __int8)v13[v22];
          v24 = v23 == 32;
          if ( v23 != 32 )
            v24 = v23 == 9;
          if ( !v24 )
            break;
          if ( --v22 == -1 )
          {
            v25 = 0;
            if ( *v21 != 61 )
              goto LABEL_21;
LABEL_33:
            v191 = v25;
            v32 = &v13[v20 + 1];
            v33 = strcspn(v32, ";\r\n");
            v34 = v20 + v33;
            if ( v33 )
            {
              v28 = &v15[v34];
              while ( 1 )
              {
                v35 = *((unsigned __int8 *)v28 - 1);
                v36 = v35 == 32;
                if ( v35 != 32 )
                  v36 = v35 == 9;
                if ( !v36 )
                  break;
                --v33;
                --v28;
                if ( !v33 )
                  goto LABEL_40;
              }
              v41 = &v15[v20];
              v42 = (_DWORD *)v197;
              v43 = 0;
              while ( 1 )
              {
                v44 = (unsigned __int8)v41[v43];
                v45 = v44 == 32;
                if ( v44 != 32 )
                  v45 = v44 == 9;
                if ( !v45 )
                  break;
                if ( v33 == ++v43 )
                  goto LABEL_41;
              }
              v26 = v33 - v43;
              v28 = &v41[v43];
            }
            else
            {
LABEL_40:
              v42 = (_DWORD *)v197;
              v28 = v32;
LABEL_41:
              v26 = 0;
            }
            if ( !memchr(v28, 9, v26) )
            {
              v37 = &v13[v34];
              v25 = v191;
              v27 = 1;
              v21 = v37 + 1;
              goto LABEL_44;
            }
            v115 = (void (__fastcall **)(_DWORD *))Curl_cfree;
            ((void (__fastcall *)(_DWORD))*Curl_cfree)(v42[5]);
            (*v115)((_DWORD *)v42[3]);
            (*v115)((_DWORD *)v42[4]);
            (*v115)((_DWORD *)v42[1]);
            (*v115)((_DWORD *)v42[2]);
            (*v115)(v42);
            if ( (v187[3] & 0x10) != 0 )
            {
              Curl_infof(v190, "cookie contains TAB, dropping");
              return 0;
            }
            return 0;
          }
        }
        v25 = v22 + 1;
        if ( *v21 == 61 )
          goto LABEL_33;
LABEL_21:
        v26 = 0;
        v27 = 0;
        v28 = 0;
LABEL_44:
        v38 = v25 > 0xFFE;
        if ( v25 <= 0xFFE )
          v38 = v26 > 0xFFE;
        if ( v38 || v26 + v25 > 0x1000 )
        {
          v111 = (_DWORD *)v197;
          v112 = (void (__fastcall **)(_DWORD *))Curl_cfree;
          ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v197 + 20));
          (*v112)((_DWORD *)v111[3]);
          (*v112)((_DWORD *)v111[4]);
          (*v112)((_DWORD *)v111[1]);
          (*v112)((_DWORD *)v111[2]);
          (*v112)(v111);
          if ( (v187[3] & 0x10) != 0 )
          {
            Curl_infof(v190, "oversized cookie dropped, name/val %zu + %zu bytes", v25, v26);
            return 0;
          }
          return 0;
        }
        if ( v16 == 95 && v25 >= 7 && v13[1] == 95 )
        {
          if ( curl_strnequal("__Secure-", v13, 9) )
          {
            v39 = v197;
            v40 = *(_BYTE *)(v197 + 40) | 1;
LABEL_61:
            *(_BYTE *)(v39 + 40) = v40;
            goto LABEL_62;
          }
          if ( curl_strnequal("__Host-", v13, 7) )
          {
            v39 = v197;
            v40 = *(_BYTE *)(v197 + 40) | 2;
            goto LABEL_61;
          }
        }
LABEL_62:
        if ( !*(_DWORD *)(v197 + 4) )
        {
          if ( !v27 )
            goto LABEL_223;
          ((void (__fastcall *)(_DWORD))*Curl_cfree)(0);
          v54 = Curl_memdup(v13, v25 + 1);
          v55 = v197;
          v56 = 0;
          *(_DWORD *)(v197 + 4) = v54;
          if ( v54 )
            *(_BYTE *)(v54 + v25) = 0;
          ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v55 + 8));
          v57 = Curl_memdup(v28, v26 + 1);
          *(_DWORD *)(v55 + 8) = v57;
          if ( v57 )
            *(_BYTE *)(v57 + v26) = 0;
          v58 = *(const char **)(v55 + 4);
          v59 = v58 == 0;
          if ( v58 )
          {
            v56 = *(const char **)(v197 + 8);
            v59 = v56 == 0;
          }
          if ( v59 )
            goto LABEL_223;
          if ( v56[strcspn(v56, invalid_octets_badoctets)] || v58[strcspn(v58, invalid_octets_badoctets)] )
          {
            if ( (v187[3] & 0x10) != 0 )
              Curl_infof(v190, "invalid octets in name/value, cookie dropped");
            goto LABEL_223;
          }
          goto LABEL_23;
        }
        if ( !v26 )
        {
          if ( v25 == 8 )
          {
            if ( curl_strnequal("httponly", v13, 8) )
            {
              *(_BYTE *)(v197 + 35) = 1;
              goto LABEL_23;
            }
          }
          else if ( v25 == 6 && curl_strnequal("secure", v13, 6) )
          {
            if ( !secure && v196->running )
              goto LABEL_223;
            *(_BYTE *)(v197 + 33) = 1;
            goto LABEL_23;
          }
          if ( !v27 )
            goto LABEL_23;
        }
        if ( v25 == 7 )
        {
          if ( !curl_strnequal("version", v13, 7) )
          {
            if ( curl_strnequal("max-age", v13, 7) )
            {
              v60 = v185;
              v61 = v28 + 1;
              if ( *v28 != 34 )
                v61 = v28;
              v62 = curlx_strtoofft(v61, 0, 10, v185);
              switch ( v62 )
              {
                case 0:
                  if ( !*(_QWORD *)v185 )
                  {
LABEL_154:
                    *v185 = 1;
                    v185[1] = 0;
                    break;
                  }
                  LODWORD(v184) = ~v192;
                  HIDWORD(v184) = 0x7FFFFFFF - (v192 >> 0x1F);
                  if ( v184 >= *(_QWORD *)v185 )
                  {
                    *(_QWORD *)v185 += v192;
                    break;
                  }
LABEL_152:
                  *v185 = -1;
                  v74 = 0x7FFFFFFF;
LABEL_153:
                  v60[1] = v74;
                  break;
                case 2:
                  goto LABEL_154;
                case 1:
                  goto LABEL_152;
              }
            }
            else
            {
              if ( !curl_strnequal("expires", v13, 7) )
                goto LABEL_23;
              v60 = v185;
              if ( v26 > 0x7F || *(_QWORD *)v185 )
                goto LABEL_23;
              memcpy(dest, v28, v26);
              *((_BYTE *)dest + v26) = 0;
              v73 = Curl_getdate_capped(dest);
              *(_QWORD *)v185 = v73;
              if ( !v73 )
              {
                *v185 = 1;
                v185[1] = 0;
                goto LABEL_23;
              }
              if ( v73 <= -1 )
              {
                v74 = 0;
                *v185 = 0;
                goto LABEL_153;
              }
            }
          }
        }
        else
        {
          v46 = v197;
          if ( v25 != 6 )
          {
            if ( v25 == 4 && curl_strnequal("path", v13, 4) )
            {
              ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v46 + 12));
              v47 = Curl_memdup(v28, v26 + 1);
              v48 = v47 == 0;
              *(_DWORD *)(v46 + 12) = v47;
              if ( v47 )
              {
                *(_BYTE *)(v47 + v26) = 0;
                v48 = *(_DWORD *)(v197 + 12) == 0;
              }
              if ( v48 )
                goto LABEL_223;
              v49 = v197;
              ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v197 + 16));
              v50 = (const char *)((int (__fastcall *)(_DWORD))*Curl_cstrdup)(*(_DWORD *)(v49 + 12));
              if ( !v50 )
                goto LABEL_245;
              v51 = (char *)v50;
              v52 = strlen(v50);
              if ( *v51 == 34 )
                memmove(v51, v51 + 1, v52--);
              if ( v52 )
              {
                v53 = v52 - 1;
                if ( v51[v52 - 1] == 34 )
                {
                  --v52;
                  v51[v53] = 0;
                }
              }
              else
              {
                v52 = 0;
              }
              if ( *v51 == 47 )
              {
                if ( v52 && v51[v52 - 1] == 47 )
                  v51[v52 - 1] = 0;
                *(_DWORD *)(v197 + 16) = v51;
              }
              else
              {
                ((void (__fastcall *)(char *))*Curl_cfree)(v51);
                v78 = Curl_memdup("/", 2);
                v49 = v197;
                if ( !v78 )
                {
LABEL_245:
                  *(_DWORD *)(v49 + 16) = 0;
                  goto LABEL_223;
                }
                *(_BYTE *)(v78 + 1) = 0;
                *(_DWORD *)(v49 + 16) = v78;
              }
            }
            goto LABEL_23;
          }
          v63 = curl_strnequal("domain", v13, 6);
          v64 = v26 == 0;
          if ( v26 )
            v64 = v63 == 0;
          if ( !v64 )
          {
            v65 = v28 + 1;
            if ( *v28 == 46 )
              --v26;
            else
              v65 = v28;
            if ( v26 == 9 && curl_strnequal(v65, "localhost", 9)
              || (v66 = memchr(v65, 46, v26)) != 0 && (unsigned int)(&v65[v26] - v66) > 1 )
            {
              v67 = domain;
              v69 = v65;
              if ( domain )
                v69 = domain;
              is_ipnum = Curl_host_is_ipnum(v69);
              v71 = is_ipnum;
              if ( !domain )
              {
                v67 = 0;
LABEL_145:
                domain = v67;
                v79 = v197;
                ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v197 + 20));
                v80 = Curl_memdup(v65, v26 + 1);
                *(_DWORD *)(v79 + 20) = v80;
                if ( !v80 )
                  goto LABEL_223;
                v81 = v197;
                *(_BYTE *)(v80 + v26) = 0;
                v82 = *(_DWORD *)(v197 + 20);
                if ( v71 | (v82 == 0) )
                {
                  if ( !v82 )
                    goto LABEL_223;
                  v186 |= v82 == 0;
                }
                else
                {
                  *(_BYTE *)(v81 + 32) = 1;
                }
                goto LABEL_23;
              }
              v68 = is_ipnum == 0;
            }
            else
            {
              v67 = ":";
              v68 = Curl_host_is_ipnum(":") == 0;
            }
            v72 = v190;
            if ( v68 )
            {
              v75 = strlen(v67);
              if ( v75 >= v26 )
              {
                v76 = v75;
                v77 = &v67[v75 - v26];
                if ( curl_strnequal(v65, v77, v26) )
                {
                  v71 = 0;
                  if ( v76 == v26 )
                    goto LABEL_145;
                  v83 = *((unsigned __int8 *)v77 - 1);
                  v72 = v190;
                  if ( v83 == 46 )
                    goto LABEL_145;
                }
                else
                {
                  v72 = v190;
                }
              }
            }
            else if ( !strncmp(v65, v67, v26) )
            {
              v71 = 1;
              if ( v26 == strlen(v67) )
                goto LABEL_145;
            }
            domain = v67;
            v186 = 1;
            if ( (v187[3] & 0x10) != 0 )
              Curl_infof(v72, "skipped cookie with bad tailmatch domain: %s", v65);
          }
        }
LABEL_23:
        v13 = v21 + 1;
        v29 = (unsigned __int8)*v21;
        v30 = v29 == 32;
        if ( v29 != 32 )
          v30 = v29 == 9;
        if ( v30 )
        {
          do
          {
            v29 = (unsigned __int8)*v13++;
            v31 = v29 == 32;
            if ( v29 != 32 )
              v31 = v29 == 9;
          }
          while ( v31 );
        }
        if ( v29 != 59 )
        {
          if ( (v186 & 1) != 0 )
            goto LABEL_223;
          if ( domain )
          {
            if ( !*(_DWORD *)(v197 + 20) )
            {
              v116 = ((int (__fastcall *)(const char *))*Curl_cstrdup)(domain);
              *(_DWORD *)(v197 + 20) = v116;
              if ( !v116 )
                goto LABEL_223;
            }
          }
          v117 = (_DWORD *)v197;
          if ( !path || *(_DWORD *)(v197 + 12) )
            goto LABEL_255;
          v118 = strchr(path, 63);
          v119 = v118 ? (char *)Curl_memrchr(path, 47, v118 - path) : strrchr(path, 47);
          if ( !v119 )
            goto LABEL_255;
          v120 = v119 - path;
          v121 = (void *)((int (__fastcall *)(int))*Curl_cmalloc)(v119 - path + 2);
          v117[3] = v121;
          if ( !v121 )
            goto LABEL_223;
          memcpy(v121, path, v120 + 1);
          v117 = (_DWORD *)v197;
          *(_BYTE *)(*(_DWORD *)(v197 + 12) + v120 + 1) = 0;
          v122 = (const char *)((int (__fastcall *)(_DWORD))*Curl_cstrdup)(*(_DWORD *)(v197 + 12));
          if ( v122 )
          {
            v123 = (char *)v122;
            v124 = strlen(v122);
            if ( *v123 == 34 )
              memmove(v123, v123 + 1, v124--);
            if ( v124 )
            {
              v125 = v124 - 1;
              if ( v123[v124 - 1] == 34 )
              {
                --v124;
                v123[v125] = 0;
              }
            }
            else
            {
              v124 = 0;
            }
            if ( *v123 == 47 )
            {
              if ( v124 && v123[v124 - 1] == 47 )
                v123[v124 - 1] = 0;
              v117 = (_DWORD *)v197;
LABEL_254:
              v117[4] = v123;
LABEL_255:
              if ( v117[1] )
              {
                v14 = v197;
                ++v190->req.setcookies;
                goto LABEL_257;
              }
LABEL_223:
              v113 = (_DWORD *)v197;
              v114 = (void (__fastcall **)(_DWORD *))Curl_cfree;
              ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v197 + 20));
              (*v114)((_DWORD *)v113[3]);
              (*v114)((_DWORD *)v113[4]);
              (*v114)((_DWORD *)v113[1]);
              (*v114)((_DWORD *)v113[2]);
              (*v114)(v113);
              return 0;
            }
            ((void (__fastcall *)(char *))*Curl_cfree)(v123);
            v126 = Curl_memdup("/", 2);
            v117 = (_DWORD *)v197;
            if ( v126 )
            {
              v123 = (char *)v126;
              *(_BYTE *)(v126 + 1) = 0;
              goto LABEL_254;
            }
          }
          v117[4] = 0;
          goto LABEL_223;
        }
      }
    }
LABEL_164:
    ((void (__fastcall *)(int))*Curl_cfree)(v14);
    return 0;
  }
  dest[0] = 0;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
  {
    v13 = (char *)(lineptr + 0xA);
    *(_BYTE *)(v14 + 35) = 1;
  }
  if ( *v13 == 35 )
    goto LABEL_164;
  v84 = strchr(v13, 13);
  if ( v84 )
    *v84 = 0;
  v85 = strchr(v13, 10);
  if ( v85 )
    *v85 = 0;
  v86 = strtok_r(v13, "\t", dest);
  if ( !v86 )
    goto LABEL_218;
  v87 = v86;
  v88 = 0;
  v89 = 0;
  v193 = v14 + 0x18;
  v90 = (int (__fastcall **)(const char *))Curl_cstrdup;
  while ( 2 )
  {
    switch ( v88 )
    {
      case 0:
        v91 = v87 + 1;
        if ( *v87 != 46 )
          v91 = v87;
        v92 = (*v90)(v91);
        *(_DWORD *)(v14 + 20) = v92;
        v88 = 0;
        v89 |= v92 == 0;
        goto LABEL_210;
      case 1:
        v88 = 1;
        *(_BYTE *)(v14 + 32) = curl_strequal(v87, "TRUE") != 0;
        goto LABEL_210;
      case 2:
        if ( !strcmp("TRUE", v87) || !strcmp("FALSE", v87) )
        {
          v101 = v90;
          v102 = (*v90)("/");
          *(_DWORD *)(v14 + 12) = v102;
          v103 = (*v101)("/");
          *(_DWORD *)(v14 + 16) = v103;
          v104 = v102 == 0;
          v90 = v101;
          v89 |= v104 || v103 == 0;
          goto LABEL_192;
        }
        v93 = (*v90)(v87);
        v88 = 2;
        *(_DWORD *)(v14 + 12) = v93;
        if ( !v93 )
          goto LABEL_196;
        v94 = (const char *)((int (*)(void))*v90)();
        if ( !v94 )
          goto LABEL_208;
        v95 = (char *)v94;
        v96 = v90;
        v97 = strlen(v94);
        if ( *v95 == 34 )
          memmove(v95, v95 + 1, v97--);
        if ( v97 )
        {
          v98 = v97 - 1;
          if ( v95[v97 - 1] == 34 )
          {
            --v97;
            v95[v98] = 0;
          }
        }
        else
        {
          v97 = 0;
        }
        if ( *v95 == 47 )
        {
          if ( v97 && v95[v97 - 1] == 47 )
            v95[v97 - 1] = 0;
          v90 = v96;
        }
        else
        {
          ((void (__fastcall *)(char *))*Curl_cfree)(v95);
          v105 = Curl_memdup("/", 2);
          v90 = v96;
          if ( v105 )
          {
            v95 = (char *)v105;
            *(_BYTE *)(v105 + 1) = 0;
          }
          else
          {
LABEL_208:
            v95 = 0;
          }
        }
        v14 = v197;
        v89 |= v95 == 0;
        *(_DWORD *)(v197 + 16) = v95;
LABEL_210:
        v106 = strtok_r(0u, "\t", dest);
        ++v88;
        if ( v106 )
        {
          v87 = v106;
          if ( (v89 & 1) == 0 )
            continue;
        }
        if ( v88 == 6 )
        {
          v107 = (*v90)((const char *)&L_str_22);
          v88 = 7;
          *(_DWORD *)(v14 + 8) = v107;
          LOBYTE(v89) = v89 | (v107 == 0);
          if ( !v107 )
            v88 = 6;
        }
        v108 = (v89 & 1) == 0;
        if ( (v89 & 1) == 0 )
          v108 = v88 == 7;
        if ( !v108 )
        {
LABEL_218:
          v109 = (void (__fastcall **)(int))Curl_cfree;
          ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v14 + 20));
          (*v109)(*(_DWORD *)(v14 + 12));
          (*v109)(*(_DWORD *)(v14 + 16));
          (*v109)(*(_DWORD *)(v14 + 4));
          (*v109)(*(_DWORD *)(v14 + 8));
          (*v109)(v14);
          return 0;
        }
LABEL_257:
        if ( (*(_BYTE *)(v14 + 40) & 1) != 0 && !*(_BYTE *)(v14 + 33) )
          goto LABEL_319;
        if ( (*(_BYTE *)(v14 + 40) & 2) != 0 )
        {
          v156 = (const char *)*(unsigned __int8 *)(v14 + 33);
          v157 = v156 == 0;
          if ( *(_BYTE *)(v14 + 33) )
          {
            v156 = *(const char **)(v14 + 12);
            v157 = v156 == 0;
          }
          if ( v157 || strcmp(v156, "/") || *(_BYTE *)(v14 + 32) )
            goto LABEL_319;
        }
        if ( !v196->running && v196->newsession && !*(_QWORD *)(v14 + 24) )
        {
LABEL_319:
          v158 = (void (__fastcall **)(int))Curl_cfree;
          ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v14 + 20));
          (*v158)(*(_DWORD *)(v14 + 12));
          (*v158)(*(_DWORD *)(v14 + 16));
          (*v158)(*(_DWORD *)(v14 + 4));
          (*v158)(*(_DWORD *)(v14 + 8));
          (*v158)(v14);
          return 0;
        }
        *(_BYTE *)(v14 + 34) = v196->running;
        v127 = v196->lastct + 1;
        v196->lastct = v127;
        *(_DWORD *)(v14 + 36) = v127;
        if ( !v189 )
        {
          v128 = 0;
          v129 = time(0u);
          p_next_expiration = &v196->next_expiration;
          next_expiration_high = HIDWORD(v196->next_expiration);
          if ( (v129 >> 0x1F) - (next_expiration_high + !__CFSHR__(v129, 0x1F)) < 0 == __OFSUB__(
                                                                                         v129 >> 0x1F,
                                                                                         next_expiration_high,
                                                                                         __CFSHR__(v129, 0x1F))
            || !(~LODWORD(v196->next_expiration) | next_expiration_high ^ 0x7FFFFFFF) )
          {
            *(_DWORD *)p_next_expiration = -1;
            HIDWORD(v196->next_expiration) = 0x7FFFFFFF;
            v173 = (_DWORD *)Curl_cfree;
            do
            {
              v195 = v128;
              v174 = v196->cookies[v128];
              if ( v174 )
              {
                p_next = 0;
                do
                {
                  while ( 1 )
                  {
                    v176 = v174;
                    v174 = v174->next;
                    expires = v176->expires;
                    if ( !expires || expires >= v129 )
                      break;
                    if ( p_next )
                      *p_next = v174;
                    else
                      v196->cookies[v195] = v174;
                    --v196->numcookies;
                    ((void (__fastcall *)(char *, _DWORD, _DWORD, _DWORD))*v173)(
                      v176->domain,
                      *v173,
                      expires | HIDWORD(expires),
                      (unsigned __int64)(expires - v129) >> 32);
                    ((void (__fastcall *)(char *))*v173)(v176->path);
                    ((void (__fastcall *)(char *))*v173)(v176->spath);
                    ((void (__fastcall *)(char *))*v173)(v176->name);
                    ((void (__fastcall *)(char *))*v173)(v176->value);
                    ((void (__fastcall *)(Cookie *))*v173)(v176);
                    if ( !v174 )
                      goto LABEL_331;
                  }
                  if ( expires && expires < *p_next_expiration )
                  {
                    *(_DWORD *)p_next_expiration = expires;
                    HIDWORD(v196->next_expiration) = HIDWORD(expires);
                  }
                  p_next = &v176->next;
                }
                while ( v174 );
              }
LABEL_331:
              v128 = v195 + 1;
            }
            while ( v195 != 0x3E );
          }
        }
        v132 = v197;
        v133 = v196;
        v194 = cookiehash(*(const char *const *)(v197 + 20));
        next = v196->cookies[v194];
        if ( !next )
        {
          v172 = v190;
          v138 = 0;
          v137 = 0;
          goto LABEL_347;
        }
        v135 = 0;
        v136 = 0;
        v137 = 0;
        while ( 2 )
        {
          v138 = next;
          if ( curl_strequal(next->name, *(_DWORD *)(v132 + 4)) )
          {
            v139 = *(_DWORD *)(v197 + 20);
            v140 = v138->domain;
            if ( v140 )
            {
              if ( v139 && curl_strequal(v140, v139) )
              {
LABEL_275:
                spath = v138->spath;
                if ( spath )
                {
                  v142 = *(_DWORD *)(v197 + 16);
                  v143 = v142 == 0;
                  if ( v142 )
                    v143 = !v138->secure;
                  if ( !v143 )
                  {
                    v144 = *(_BYTE *)(v197 + 33) == 0;
                    if ( !*(_BYTE *)(v197 + 33) )
                      v144 = secure == 0;
                    if ( v144 )
                    {
                      v145 = strchr(spath + 1, 47);
                      v146 = v145 ? v145 - spath : strlen(spath);
                      if ( curl_strnequal(spath, v142, v146) )
                      {
                        v153 = (_DWORD *)v197;
                        v154 = v190 == 0;
                        if ( v190 )
                          v154 = (*((_BYTE *)&v190->set + 1338) & 0x10) == 0;
                        if ( !v154 )
                          Curl_infof(
                            v190,
                            "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                            *(const char **)(v197 + 4),
                            *(const char **)(v197 + 20));
                        v155 = (void (__fastcall **)(_DWORD *))Curl_cfree;
                        ((void (__fastcall *)(_DWORD))*Curl_cfree)(v153[5]);
                        (*v155)((_DWORD *)v153[3]);
                        (*v155)((_DWORD *)v153[4]);
                        (*v155)((_DWORD *)v153[1]);
                        (*v155)((_DWORD *)v153[2]);
                        (*v155)(v153);
                        return 0;
                      }
                    }
                  }
                }
              }
            }
            else if ( !v139 )
            {
              goto LABEL_275;
            }
          }
          if ( v135 )
          {
            v132 = v197;
            goto LABEL_270;
          }
          v132 = v197;
          if ( !curl_strequal(v138->name, *(_DWORD *)(v197 + 4)) )
          {
LABEL_299:
            v135 = 0;
            goto LABEL_270;
          }
          v147 = v138->domain;
          v148 = *(_DWORD *)(v132 + 20);
          if ( !v147 )
          {
            v150 = (unsigned __int8)(v137 | (v148 == 0));
            v137 = 0;
            if ( (v150 & 1) == 0 )
              goto LABEL_299;
            goto LABEL_294;
          }
          if ( !v148 || !curl_strequal(v147, v148) )
          {
            v135 = 0;
            if ( (v137 & 1) != 0 )
              goto LABEL_294;
            v137 = 0;
            goto LABEL_270;
          }
          v149 = v137 | (*(_BYTE *)(v132 + 32)
                       - v138->tailmatch
                       + (v138->tailmatch == *(unsigned __int8 *)(v132 + 32))
                       + v138->tailmatch
                       - *(_BYTE *)(v132 + 32));
          v137 = 0;
          if ( (v149 & 1) == 0 )
            goto LABEL_299;
LABEL_294:
          v151 = v138->spath;
          v152 = *(_DWORD *)(v132 + 16);
          if ( !v151 )
          {
            v137 = 0;
            v135 = 0;
            if ( !v152 )
              goto LABEL_303;
            goto LABEL_270;
          }
          if ( !v152 )
          {
            if ( *(_DWORD *)(v132 + 16) )
            {
LABEL_303:
              v137 = 1;
              if ( *(_BYTE *)(v132 + 34) )
              {
                v136 = v138;
                v135 = (Cookie **)v132;
              }
              else
              {
                v136 = v138;
                v135 = (Cookie **)v132;
                if ( v138->livecookie )
                {
                  v183 = (void (__fastcall **)(int))Curl_cfree;
                  ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v132 + 20));
                  (*v183)(*(_DWORD *)(v132 + 12));
                  (*v183)(*(_DWORD *)(v132 + 16));
                  (*v183)(*(_DWORD *)(v132 + 4));
                  (*v183)(*(_DWORD *)(v132 + 8));
                  (*v183)(v132);
                  return 0;
                }
              }
              goto LABEL_270;
            }
LABEL_305:
            v137 = 0;
            v135 = 0;
            goto LABEL_270;
          }
          if ( !curl_strequal(v151, v152) )
            goto LABEL_305;
          v137 = 0;
          v135 = 0;
          if ( (v138->spath != 0) != (*(_DWORD *)(v132 + 16) == 0) )
            goto LABEL_303;
LABEL_270:
          next = v138->next;
          if ( v138->next )
            continue;
          break;
        }
        if ( v135 )
        {
          creationtime = (Cookie *)v136->creationtime;
          name = v136->name;
          *v135 = v136->next;
          v135[9] = creationtime;
          v161 = (void (__fastcall **)(char *))Curl_cfree;
          ((void (__fastcall *)(char *))*Curl_cfree)(name);
          (*v161)(v136->value);
          (*v161)(v136->domain);
          (*v161)(v136->path);
          (*v161)(v136->spath);
          v162 = (char *)v135[1];
          v163 = (char *)v135[2];
          v164 = (char *)v135[3];
          v165 = (char *)v135[4];
          v166 = (char *)v135[5];
          v136->next = *v135;
          v136->name = v162;
          v136->value = v163;
          v136->path = v164;
          v136->spath = v165;
          v136->domain = v166;
          v167 = v135[7];
          v168 = v135[8];
          v169 = v135[9];
          v170 = v135[10];
          v171 = v135[11];
          LODWORD(v136->expires) = v135[6];
          HIDWORD(v136->expires) = v167;
          *(_DWORD *)&v136->tailmatch = v168;
          v136->creationtime = (int)v169;
          *(_DWORD *)&v136->prefix = v170;
          *((_DWORD *)&v136->prefix + 1) = v171;
          v133 = v196;
          ((void (__fastcall *)(Cookie **))*Curl_cfree)(v135);
          v132 = (int)v136;
        }
        v172 = v190;
LABEL_347:
        if ( !v172 )
          goto LABEL_352;
        v178 = !v133->running;
        if ( v133->running )
          v178 = (*((_BYTE *)&v172->set + 1338) & 0x10) == 0;
        if ( v178 )
        {
LABEL_352:
          if ( (v137 & 1) != 0 )
            goto LABEL_357;
LABEL_353:
          if ( v138 )
            v138->next = (Cookie *)v132;
          else
            v133->cookies[v194] = (Cookie *)v132;
          ++v133->numcookies;
          goto LABEL_357;
        }
        v133 = v196;
        v182 = "Added";
        if ( (v137 & 1) != 0 )
          v182 = "Replaced";
        Curl_infof(
          v172,
          "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
          v182,
          *(const char **)(v132 + 4),
          *(const char **)(v132 + 8),
          *(const char **)(v132 + 20),
          *(const char **)(v132 + 12),
          *(_QWORD *)(v132 + 24));
        if ( (v137 & 1) == 0 )
          goto LABEL_353;
LABEL_357:
        v179 = *(_QWORD *)(v132 + 24);
        if ( v179 )
        {
          next_expiration = v133->next_expiration;
          v180 = &v133->next_expiration;
          if ( v179 < __SPAIR64__(*((_DWORD *)v180 + 1), next_expiration) )
            *v180 = v179;
        }
        return (Cookie *)v132;
      case 3:
LABEL_192:
        *(_BYTE *)(v14 + 33) = 0;
        v88 = 3;
        if ( curl_strequal(v87, "TRUE") )
        {
          if ( !secure && !c->running )
            goto LABEL_196;
          *(_BYTE *)(v14 + 33) = 1;
        }
        goto LABEL_210;
      case 4:
        v88 = 4;
        v89 |= curlx_strtoofft(v87, 0, 10, v193) != 0;
        goto LABEL_210;
      case 5:
        v99 = (*v90)(v87);
        v88 = 5;
        *(_DWORD *)(v14 + 4) = v99;
        if ( v99 )
        {
          if ( curl_strnequal("__Secure-", v99, 9) )
          {
            *(_BYTE *)(v14 + 40) |= 1u;
          }
          else if ( curl_strnequal("__Host-", *(_DWORD *)(v14 + 4), 7) )
          {
            *(_BYTE *)(v14 + 40) |= 2u;
          }
        }
        else
        {
LABEL_196:
          v89 = 1;
        }
        goto LABEL_210;
      case 6:
        v100 = (*v90)(v87);
        *(_DWORD *)(v14 + 8) = v100;
        v88 = 6;
        v89 |= v100 == 0;
        goto LABEL_210;
      default:
        goto LABEL_210;
    }
  }
}
