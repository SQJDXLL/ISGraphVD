Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  Cookie *v11; // rbp
  char v12; // al
  size_t v13; // rbx
  const char *v14; // rdx
  size_t v15; // rcx
  char v16; // al
  _BYTE *v17; // r14
  size_t v18; // r13
  char v19; // al
  bool v20; // cl
  int v21; // eax
  int v22; // eax
  const char *name; // rbx
  char *value; // r12
  char *v26; // rax
  bool v27; // r12
  _BYTE *v28; // rax
  const char *v29; // rdi
  char is_ipnum; // al
  char v31; // bl
  char v32; // al
  __int64 v33; // rax
  char *v34; // rax
  char *v35; // rax
  char *v36; // rdi
  int v37; // r12d
  char *v38; // rax
  bool v39; // cl
  const char *v40; // r13
  bool v41; // bl
  char *v42; // rax
  int v43; // eax
  const char *v44; // rdx
  int v45; // eax
  const char *v46; // rax
  __int64 v47; // rax
  __int64 v48; // r12
  __int64 v49; // rax
  bool v50; // dl
  __int64 v51; // rax
  char *v52; // rax
  __int64 v53; // rax
  char *v54; // rax
  char *v55; // rax
  unsigned __int8 prefix; // al
  const char *v57; // rdi
  bool running; // al
  char livecookie; // r13
  Cookie *v60; // r12
  Cookie *v61; // r15
  Cookie *v62; // r14
  Cookie *v63; // rbx
  signed __int64 v64; // r12
  unsigned __int64 v65; // rbx
  char *v66; // rax
  char *v67; // rdi
  char *v68; // rsi
  const char *v69; // r15
  char *v70; // rax
  size_t v71; // rdx
  char *v72; // rdi
  char *v73; // rsi
  bool v74; // zf
  char *spath; // rdi
  char *v76; // rsi
  char *v77; // rdi
  __int64 v78; // rcx
  Cookie *v79; // rdi
  Cookie *v80; // rsi
  const char *v81; // rdx
  curl_off_t v82; // rax
  char *v83; // rax
  int v85; // eax
  __int64 v86; // rax
  curl_off_t expires; // rdx
  __int64 v88; // rax
  __int64 v89; // rdx
  bool v90; // zf
  bool httpheaderc; // [rsp+10h] [rbp-F8h]
  int httpheaderd; // [rsp+10h] [rbp-F8h]
  char *httpheaderb; // [rsp+10h] [rbp-F8h]
  size_t myhash; // [rsp+18h] [rbp-F0h]
  const char *ptr; // [rsp+20h] [rbp-E8h]
  const char *ptra; // [rsp+20h] [rbp-E8h]
  bool ptrb; // [rsp+20h] [rbp-E8h]
  time_t now; // [rsp+28h] [rbp-E0h]
  char sep; // [rsp+31h] [rbp-D7h]
  bool sepa; // [rsp+31h] [rbp-D7h]
  bool sepb; // [rsp+31h] [rbp-D7h]
  bool badcookie; // [rsp+33h] [rbp-D5h]
  const char *v108; // [rsp+38h] [rbp-D0h]
  char *tok_buf; // [rsp+40h] [rbp-C8h] BYREF
  char date[128]; // [rsp+48h] [rbp-C0h] BYREF
  unsigned __int64 v111; // [rsp+C8h] [rbp-40h]

  v111 = __readfsqword(0x28u);
  now = time(0LL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  v11 = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !v11 )
    return 0LL;
  if ( !httpheader )
  {
    tok_buf = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      v11->httponly = 1;
      lineptr += 10;
    }
    if ( *lineptr != 35 )
    {
      v34 = strchr(lineptr, 13);
      if ( v34 )
        *v34 = 0;
      v35 = strchr(lineptr, 10);
      if ( v35 )
        *v35 = 0;
      v36 = (char *)lineptr;
      v37 = 0;
      v38 = strtok_r(v36, "\t", &tok_buf);
      v39 = httpheader;
      v40 = v38;
      while ( 1 )
      {
        v41 = !v39 && v40 != 0LL;
        if ( !v41 )
        {
          if ( v37 == 6 )
          {
            httpheaderc = v39;
            v37 = 7;
            v53 = Curl_cstrdup(&LC1);
            v39 = httpheaderc;
            v11->value = (char *)v53;
            if ( !v53 )
              goto LABEL_170;
          }
          if ( v37 != 7 || v39 )
            goto LABEL_170;
          goto LABEL_156;
        }
        switch ( v37 )
        {
          case 0:
            if ( *v40 == 46 )
              ++v40;
            v42 = (char *)Curl_cstrdup(v40);
            v11->domain = v42;
            goto LABEL_126;
          case 1:
            v11->tailmatch = (unsigned int)curl_strequal(v40, "TRUE") != 0;
            goto LABEL_141;
          case 2:
            v43 = strcmp("TRUE", v40);
            v44 = (const char *)Curl_cstrdup;
            if ( v43 && (ptra = (const char *)Curl_cstrdup, v45 = strcmp("FALSE", v40), v44 = ptra, v45) )
            {
              v46 = (const char *)((__int64 (__fastcall *)(const char *))ptra)(v40);
              v11->path = (char *)v46;
              if ( v46 )
              {
                v42 = sanitize_cookie_path(v46);
                v11->spath = v42;
LABEL_126:
                v41 = v42 == 0LL;
              }
            }
            else
            {
              v47 = ((__int64 (__fastcall *)(const char *))v44)("/");
              v11->path = (char *)v47;
              v48 = v47;
              v49 = Curl_cstrdup("/");
              v50 = v41;
              v11->spath = (char *)v49;
              if ( v49 )
                v50 = v48 == 0;
LABEL_130:
              v11->secure = 0;
              ptrb = v50;
              if ( !(unsigned int)curl_strequal(v40, "TRUE") )
                goto LABEL_142;
              if ( secure || (v37 = 3, c->running) )
              {
                v11->secure = 1;
LABEL_142:
                v41 = ptrb;
                v37 = 3;
              }
            }
LABEL_143:
            ++v37;
            v52 = strtok_r(0LL, "\t", &tok_buf);
            v39 = v41;
            v40 = v52;
            break;
          case 3:
            v50 = httpheader;
            goto LABEL_130;
          case 4:
            v41 = (unsigned int)curlx_strtoofft(v40, 0LL, 10LL, &v11->expires) != 0;
            goto LABEL_143;
          case 5:
            v51 = Curl_cstrdup(v40);
            v11->name = (char *)v51;
            if ( !v51 )
              goto LABEL_143;
            if ( (unsigned int)curl_strnequal("__Secure-", v51, 9LL) )
            {
              v11->prefix |= 1u;
LABEL_141:
              v41 = httpheader;
            }
            else
            {
              v41 = httpheader;
              if ( (unsigned int)curl_strnequal("__Host-", v11->name, 7LL) )
                v11->prefix |= 2u;
            }
            goto LABEL_143;
          case 6:
            v42 = (char *)Curl_cstrdup(v40);
            v11->value = v42;
            goto LABEL_126;
          default:
            goto LABEL_141;
        }
      }
    }
LABEL_110:
    Curl_cfree(v11);
    return 0LL;
  }
  badcookie = 0;
  if ( strlen(lineptr) > 0x1388 )
    goto LABEL_110;
  while ( 1 )
  {
    v12 = *lineptr;
    sep = *lineptr;
    if ( !*lineptr || v12 != 32 && v12 != 9 )
      break;
LABEL_7:
    ++lineptr;
  }
  v13 = strcspn(lineptr, ";\t\r\n=");
  v14 = &lineptr[v13];
  if ( !v13 )
  {
    ptr = lineptr;
    goto LABEL_96;
  }
  while ( 1 )
  {
    v15 = v13--;
    v16 = lineptr[v13];
    if ( v16 != 32 && v16 != 9 )
      break;
    if ( !v13 )
      goto LABEL_15;
  }
  v13 = v15;
LABEL_15:
  if ( *v14 == 61 )
  {
    v17 = v14 + 1;
    v108 = v14;
    v18 = strcspn(v14 + 1, ";\r\n");
    ptr = &v17[v18];
    while ( v18 )
    {
      v19 = v108[v18];
      if ( v19 != 32 && v19 != 9 )
      {
        while ( 1 )
        {
          v20 = *v17 == 9 || *v17 == 32;
          if ( !v20 )
            break;
          ++v17;
          if ( !--v18 )
            goto LABEL_29;
        }
        if ( memchr(v17, 9, v18) )
        {
          freecookie(v11);
          if ( (data->set.gap8BB[3] & 0x10) != 0 )
            Curl_infof(data, "cookie contains TAB, dropping");
          return 0LL;
        }
        break;
      }
      --v18;
    }
    v20 = httpheader;
  }
  else
  {
    ptr = v14;
    v17 = 0LL;
    v20 = 0;
    v18 = 0LL;
  }
LABEL_29:
  if ( v13 > 0xFFE || v18 > 0xFFE || v13 + v18 > 0x1000 )
  {
    freecookie(v11);
    if ( (data->set.gap8BB[3] & 0x10) != 0 )
      Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v13, v18);
    return 0LL;
  }
  if ( v13 > 6 && sep == 95 && lineptr[1] == 95 )
  {
    sepa = v20;
    v21 = curl_strnequal("__Secure-", lineptr, 9LL);
    v20 = sepa;
    if ( v21 )
    {
      v11->prefix |= 1u;
    }
    else
    {
      v22 = curl_strnequal("__Host-", lineptr, 7LL);
      v20 = sepa;
      if ( v22 )
        v11->prefix |= 2u;
    }
  }
  if ( !v11->name )
  {
    if ( !v20 )
      goto LABEL_170;
    strstore(&v11->name, lineptr, v13);
    strstore(&v11->value, v17, v18);
    name = v11->name;
    if ( !name )
      goto LABEL_170;
    value = v11->value;
    if ( !value )
      goto LABEL_170;
    if ( value[strcspn(v11->value, &badoctets_0)] || name[strcspn(name, &badoctets_0)] )
    {
      if ( (data->set.gap8BB[3] & 0x10) != 0 )
        Curl_infof(data, "invalid octets in name/value, cookie dropped");
      goto LABEL_170;
    }
    goto LABEL_96;
  }
  if ( v18 )
    goto LABEL_50;
  if ( v13 == 6 )
  {
    sepb = v20;
    if ( (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
    {
      if ( !secure && c->running )
        goto LABEL_170;
      v11->secure = 1;
      goto LABEL_96;
    }
    if ( !sepb )
      goto LABEL_96;
LABEL_67:
    v27 = (v18 != 0) & ((unsigned int)curl_strnequal("domain", lineptr, 6LL) != 0);
    if ( !v27 )
      goto LABEL_96;
    if ( *v17 == 46 )
    {
      ++v17;
      --v18;
    }
    if ( v18 == 9 && (unsigned int)curl_strnequal(v17, "localhost", 9LL)
      || (v28 = memchr(v17, 46, v18)) != 0LL && v18 - (v28 - v17) > 1 )
    {
      v29 = v17;
      if ( domain )
        v29 = domain;
    }
    else
    {
      domain = ":";
      v29 = ":";
    }
    is_ipnum = Curl_host_is_ipnum(v29);
    v31 = is_ipnum;
    if ( !domain )
    {
LABEL_80:
      strstore(&v11->domain, v17, v18);
      if ( !v11->domain )
        goto LABEL_170;
      if ( !v31 )
        v11->tailmatch = 1;
      goto LABEL_96;
    }
    if ( is_ipnum )
    {
      if ( !strncmp(v17, domain, v18) && strlen(domain) == v18 )
        goto LABEL_80;
    }
    else if ( cookie_tailmatch(v17, v18, domain) )
    {
      goto LABEL_80;
    }
    badcookie = v27;
    if ( (data->set.gap8BB[3] & 0x10) != 0 )
      Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v17);
    goto LABEL_96;
  }
  if ( v13 == 8 )
  {
    if ( (unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
      v11->httponly = 1;
    goto LABEL_96;
  }
  if ( !v20 )
    goto LABEL_96;
LABEL_50:
  if ( v13 == 4 )
  {
    if ( (unsigned int)curl_strnequal("path", lineptr, 4LL) )
    {
      strstore(&v11->path, v17, v18);
      if ( !v11->path )
        goto LABEL_170;
      Curl_cfree(v11->spath);
      v26 = sanitize_cookie_path(v11->path);
      v11->spath = v26;
      if ( !v26 )
        goto LABEL_170;
    }
    goto LABEL_96;
  }
  if ( v13 == 6 )
    goto LABEL_67;
  if ( v13 == 7 && !(unsigned int)curl_strnequal("version", lineptr, 7LL) )
  {
    if ( (unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
    {
      if ( *v17 == 34 )
        ++v17;
      v85 = curlx_strtoofft(v17, 0LL, 10LL, &v11->expires);
      if ( v85 == 1 )
      {
        v86 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        if ( v85 == 2 )
          goto LABEL_244;
        if ( v85 )
          goto LABEL_96;
        expires = v11->expires;
        if ( !expires )
        {
LABEL_244:
          v11->expires = 1LL;
          goto LABEL_96;
        }
        v86 = 0x7FFFFFFFFFFFFFFFLL;
        if ( expires <= 0x7FFFFFFFFFFFFFFFLL - now )
          v86 = expires + now;
      }
    }
    else
    {
      if ( !(unsigned int)curl_strnequal("expires", lineptr, 7LL) || v11->expires || v18 > 0x7F )
        goto LABEL_96;
      qmemcpy(date, v17, v18);
      date[v18] = 0;
      v88 = Curl_getdate_capped(date);
      v89 = 0LL;
      v90 = v88 == 0;
      if ( v88 >= 0 )
        v89 = v88;
      v86 = 1LL;
      if ( !v90 )
        v86 = v89;
    }
    v11->expires = v86;
    goto LABEL_96;
  }
  while ( 1 )
  {
LABEL_96:
    v32 = *ptr;
    if ( !*ptr )
      goto LABEL_102;
    if ( v32 != 32 && v32 != 9 )
      break;
    ++ptr;
  }
  if ( v32 == 59 )
  {
    lineptr = ptr;
    goto LABEL_7;
  }
LABEL_102:
  if ( badcookie )
    goto LABEL_170;
  if ( !v11->domain )
  {
    if ( domain )
    {
      v33 = Curl_cstrdup(domain);
      v11->domain = (char *)v33;
      if ( !v33 )
        goto LABEL_170;
    }
  }
  if ( !v11->path && path )
  {
    v54 = strchr(path, 63);
    v55 = v54 ? (char *)Curl_memrchr(path, 47LL, v54 - path) : strrchr(path, 47);
    if ( v55 )
    {
      v64 = v55 - path;
      v65 = v55 - path + 1;
      v66 = (char *)Curl_cmalloc(v55 - path + 2);
      v11->path = v66;
      if ( !v66 )
        goto LABEL_170;
      qmemcpy(v66, path, v65);
      v11->path[v64 + 1] = 0;
      v83 = sanitize_cookie_path(v11->path);
      v11->spath = v83;
      if ( !v83 )
        goto LABEL_170;
    }
  }
  if ( !v11->name )
    goto LABEL_170;
  ++data->req.setcookies;
LABEL_156:
  prefix = v11->prefix;
  if ( (prefix & 1) != 0 && !v11->secure )
    goto LABEL_170;
  if ( (prefix & 2) != 0 )
  {
    if ( !v11->secure )
      goto LABEL_170;
    v57 = v11->path;
    if ( !v57 || strcmp(v57, "/") || v11->tailmatch )
      goto LABEL_170;
  }
  running = c->running;
  if ( !running && c->newsession && !v11->expires )
    goto LABEL_170;
  v11->livecookie = running;
  httpheaderd = c->lastct;
  c->lastct = httpheaderd + 1;
  v11->creationtime = httpheaderd + 1;
  if ( !noexpire )
    remove_expired(c);
  livecookie = 0;
  v60 = 0LL;
  v61 = 0LL;
  myhash = cookiehash(v11->domain);
  v62 = c->cookies[myhash];
  v63 = 0LL;
  while ( 2 )
  {
    if ( !v62 )
    {
      if ( v60 )
      {
        v77 = v63->name;
        v60->next = v63->next;
        v60->creationtime = v63->creationtime;
        Curl_cfree(v77);
        Curl_cfree(v63->value);
        Curl_cfree(v63->domain);
        Curl_cfree(v63->path);
        Curl_cfree(v63->spath);
        v78 = 18LL;
        v79 = v63;
        v80 = v60;
        while ( v78 )
        {
          LODWORD(v79->next) = v80->next;
          v80 = (Cookie *)((char *)v80 + 4);
          v79 = (Cookie *)((char *)v79 + 4);
          --v78;
        }
        Curl_cfree(v60);
        v11 = v63;
      }
      if ( c->running && (data->set.gap8BB[3] & 0x10) != 0 )
      {
        v81 = "Replaced";
        if ( !livecookie )
          v81 = "Added";
        Curl_infof(
          data,
          "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
          v81,
          v11->name,
          v11->value,
          v11->domain,
          v11->path,
          v11->expires);
      }
      if ( !livecookie )
      {
        if ( v61 )
          v61->next = v11;
        else
          c->cookies[myhash] = v11;
        ++c->numcookies;
      }
      v82 = v11->expires;
      if ( v82 && v82 < c->next_expiration )
        c->next_expiration = v82;
      return v11;
    }
    if ( !(unsigned int)curl_strequal(v62->name, v11->name) )
      goto LABEL_173;
    v67 = v62->domain;
    v68 = v11->domain;
    if ( v67 )
    {
      if ( !v68 || !(unsigned int)curl_strequal(v67, v68) )
        goto LABEL_173;
    }
    else if ( v68 )
    {
      goto LABEL_173;
    }
    if ( (v69 = v62->spath) == 0LL
      || (httpheaderb = v11->spath) == 0LL
      || !v62->secure
      || v11->secure
      || secure
      || ((v70 = strchr(v69 + 1, 47)) == 0LL ? (v71 = strlen(v69)) : (v71 = v70 - v69),
          !(unsigned int)curl_strnequal(v69, httpheaderb, v71)) )
    {
LABEL_173:
      if ( v60 || !(unsigned int)curl_strequal(v62->name, v11->name) )
        goto LABEL_174;
      v72 = v62->domain;
      v73 = v11->domain;
      if ( v72 )
      {
        if ( !v73 || !(unsigned int)curl_strequal(v72, v73) )
        {
LABEL_197:
          if ( !livecookie )
            goto LABEL_174;
LABEL_202:
          spath = v62->spath;
          v76 = v11->spath;
          if ( !spath )
          {
LABEL_207:
            if ( (v62->spath == 0LL) == (v11->spath == 0LL) )
            {
              livecookie = v11->livecookie;
              if ( livecookie )
              {
                v63 = v62;
                v60 = v11;
              }
              else
              {
                if ( v62->livecookie )
                  goto LABEL_170;
                v63 = v62;
                v60 = v11;
                livecookie = 1;
              }
              goto LABEL_174;
            }
            goto LABEL_212;
          }
          if ( v76 )
          {
            if ( (unsigned int)curl_strequal(spath, v76) )
              goto LABEL_207;
          }
          else
          {
            v60 = 0LL;
          }
LABEL_212:
          livecookie = 0;
LABEL_174:
          v61 = v62;
          v62 = v62->next;
          continue;
        }
        v74 = v62->tailmatch == v11->tailmatch;
      }
      else
      {
        v74 = v73 == 0LL;
      }
      if ( v74 )
        goto LABEL_202;
      goto LABEL_197;
    }
    break;
  }
  if ( (data->set.gap8BB[3] & 0x10) != 0 )
    Curl_infof(data, "cookie '%s' for domain '%s' dropped, would overlay an existing cookie", v11->name, v11->domain);
LABEL_170:
  freecookie(v11);
  return 0LL;
}
