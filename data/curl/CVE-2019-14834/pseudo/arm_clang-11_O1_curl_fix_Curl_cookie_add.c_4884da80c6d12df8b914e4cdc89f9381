Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  int v12; // r9
  char *v13; // r9
  CookieInfo *v14; // r6
  char *v15; // r0
  char *v16; // r0
  char *v17; // r0
  const char *v18; // r11
  int v19; // r8
  int v20; // r10
  const char *v21; // r0
  char *v22; // r0
  const char *v23; // r0
  _BOOL4 v24; // r0
  int v25; // r0
  int v26; // r5
  int v27; // r0
  _BOOL4 v28; // r1
  char *v29; // r0
  char *i; // r8
  int v31; // r6
  bool v32; // zf
  size_t v33; // r0
  size_t v34; // r5
  size_t v35; // r0
  int v36; // r1
  bool v37; // zf
  int v38; // r0
  bool v39; // zf
  size_t v40; // r11
  const char *v41; // r7
  size_t v42; // r10
  size_t v43; // r0
  int v44; // r1
  bool v45; // zf
  unsigned __int8 *v46; // r0
  const char *v47; // r4
  int v48; // r1
  bool v49; // zf
  int v50; // r7
  bool v51; // cc
  unsigned __int8 v52; // r0
  char *v53; // r0
  const char *v54; // r0
  const char *v55; // r4
  bool v56; // zf
  const char *v57; // r0
  int v58; // r0
  int v59; // r0
  bool v60; // zf
  const char *v61; // r6
  const char *v62; // r4
  const char *v63; // r0
  int is_ipnum; // r0
  int v65; // r5
  char *v66; // r0
  _BOOL4 v67; // r1
  int v68; // r2
  int v69; // r0
  int v70; // r0
  char *v71; // r0
  char *v72; // r0
  int v73; // r0
  bool v74; // zf
  Cookie *v75; // r0
  int v76; // r4
  char *v77; // r0
  char *v78; // r0
  int v79; // r0
  size_t v80; // r7
  Cookie *next; // r0
  Cookie *v82; // r8
  Cookie *v83; // r11
  int v84; // r9
  Cookie *v85; // r6
  Cookie *v86; // r4
  char *v87; // r0
  char *v88; // r1
  _BOOL4 v89; // r0
  bool v90; // zf
  char *v91; // r0
  int v92; // r1
  int v93; // r0
  char *v94; // r10
  bool v95; // zf
  bool v96; // zf
  char *v97; // r0
  size_t v98; // r2
  char *v99; // r0
  bool v100; // zf
  bool v101; // zf
  const char *v102; // r0
  char *name; // r0
  int creationtime; // r2
  void (__fastcall **v105)(Cookie *); // r10
  char *v106; // r2
  char *value; // r3
  char *v108; // r5
  char *spath; // r6
  char *v110; // r7
  int expires_high; // r2
  int v112; // r3
  int v113; // r5
  int v114; // r6
  int v115; // r7
  bool v116; // zf
  curl_off_t expires; // r0
  const char *v119; // r2
  curl_off_t v120; // [sp+20h] [bp-E0h]
  char **p_domain; // [sp+28h] [bp-D8h]
  curl_off_t *p_expires; // [sp+2Ch] [bp-D4h]
  char **str; // [sp+30h] [bp-D0h]
  char **p_value; // [sp+34h] [bp-CCh]
  char v126; // [sp+3Ch] [bp-C4h]
  int v127; // [sp+40h] [bp-C0h]
  char **p_name; // [sp+44h] [bp-BCh]
  CookieInfo *cookies; // [sp+48h] [bp-B8h]
  char *v130; // [sp+4Ch] [bp-B4h]
  time_t v131; // [sp+50h] [bp-B0h]
  Curl_easy *v132; // [sp+54h] [bp-ACh]
  Cookie *v133; // [sp+58h] [bp-A8h]
  size_t v134; // [sp+58h] [bp-A8h]
  char *save_ptr[41]; // [sp+5Ch] [bp-A4h] BYREF

  v12 = 0;
  v131 = time(0u);
  if ( data->req.setcookies > 0x31u )
    return (Cookie *)v12;
  v133 = (Cookie *)((int (__fastcall *)(int, int))*Curl_ccalloc)(1, 48);
  if ( !v133 )
    return (Cookie *)v12;
  v127 = noexpire;
  v132 = data;
  cookies = c;
  v13 = (char *)lineptr;
  if ( !httpheader )
  {
    save_ptr[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v133->httponly = 1;
      v13 = (char *)(lineptr + 0xA);
    }
    if ( *v13 == 35 )
    {
      ((void (__fastcall *)(Cookie *))*Curl_cfree)(v133);
      return 0;
    }
    v15 = strchr(v13, 13);
    if ( v15 )
      *v15 = 0;
    v16 = strchr(v13, 10);
    if ( v16 )
      *v16 = 0;
    v17 = strtok_r(v13, "\t", save_ptr);
    if ( v17 )
    {
      v18 = v17;
      c = 0;
      v19 = 0;
      v20 = 0;
      while ( 2 )
      {
        switch ( v19 )
        {
          case 0:
            v21 = v18 + 1;
            if ( *v18 != 46 )
              v21 = v18;
            v22 = (char *)((int (__fastcall *)(const char *))*Curl_cstrdup)(v21);
            v133->domain = v22;
            goto LABEL_31;
          case 1:
            v133->tailmatch = curl_strequal(v18, "TRUE") != 0;
            goto LABEL_41;
          case 2:
            if ( !strcmp("TRUE", v18) || !strcmp("FALSE", v18) )
            {
              v26 = ((int (__fastcall *)(const char *))*Curl_cstrdup)("/");
              v133->path = (char *)v26;
              v27 = ((int (__fastcall *)(const char *))*Curl_cstrdup)("/");
              v133->spath = (char *)v27;
              v28 = v26 == 0;
              c = 0;
              v20 |= v28 || v27 == 0;
              ++v19;
LABEL_34:
              v133->secure = 0;
              if ( curl_strequal(v18, "TRUE") )
              {
                if ( secure || cookies->running )
                {
                  v133->secure = 1;
                  goto LABEL_41;
                }
LABEL_38:
                v20 = 1;
              }
            }
            else
            {
              v23 = (const char *)((int (__fastcall *)(const char *))*Curl_cstrdup)(v18);
              v133->path = (char *)v23;
              if ( !v23 )
                goto LABEL_38;
              v22 = sanitize_cookie_path(v23);
              v133->spath = v22;
LABEL_31:
              v24 = v22 == 0;
LABEL_32:
              v20 |= v24;
            }
LABEL_41:
            v29 = strtok_r(0u, "\t", save_ptr);
            ++v19;
            if ( !v29 )
              goto LABEL_207;
            v18 = v29;
            if ( (v20 & 1) != 0 )
              goto LABEL_207;
            continue;
          case 3:
            goto LABEL_34;
          case 4:
            v24 = curlx_strtoofft(v18, 0, 10, &v133->expires) != 0;
            goto LABEL_32;
          case 5:
            v25 = ((int (__fastcall *)(const char *))*Curl_cstrdup)(v18);
            v133->name = (char *)v25;
            if ( !v25 )
              goto LABEL_38;
            if ( curl_strnequal("__Secure-", v25, 9) )
            {
              v133->prefix |= 1u;
            }
            else if ( curl_strnequal("__Host-", v133->name, 7) )
            {
              v133->prefix |= 2u;
            }
            goto LABEL_41;
          case 6:
            v22 = (char *)((int (__fastcall *)(const char *))*Curl_cstrdup)(v18);
            v133->value = v22;
            goto LABEL_31;
          default:
            goto LABEL_41;
        }
      }
    }
    LOBYTE(v20) = 0;
    v19 = 0;
LABEL_207:
    if ( v19 == 6 )
    {
      v73 = ((int (__fastcall *)(void *))*Curl_cstrdup)(&L_str_22);
      v133->value = (char *)v73;
      LOBYTE(v20) = v20 | (v73 == 0);
      v19 = 7;
      if ( !v73 )
        v19 = 6;
    }
    v14 = cookies;
    v12 = 0;
    v74 = (v20 & 1) == 0;
    if ( (v20 & 1) == 0 )
      v74 = v19 == 7;
    if ( !v74 )
    {
      v75 = v133;
      goto LABEL_214;
    }
    goto LABEL_224;
  }
  if ( strlen(lineptr) > 0x1388 )
  {
    ((void (__fastcall *)(Cookie *))*Curl_cfree)(v133);
    c = (CookieInfo *)(Curl_cookie_loadfiles + 1);
    v14 = cookies;
    v12 = 0;
    goto LABEL_223;
  }
  v130 = (char *)&data->set + 1334;
  p_value = &v133->value;
  p_domain = &v133->domain;
  p_expires = &v133->expires;
  str = &v133->path;
  p_name = &v133->name;
  v126 = 0;
  do
  {
    for ( i = v13; ; ++i )
    {
      v31 = (unsigned __int8)*i;
      v32 = v31 == 32;
      if ( v31 != 32 )
        v32 = v31 == 9;
      if ( !v32 )
        break;
    }
    v33 = strcspn(i, ";\t\r\n=");
    if ( !v33 )
    {
      v13 = i;
      goto LABEL_64;
    }
    v34 = v33;
    v13 = &i[v33];
    v35 = v33 - 1;
    do
    {
      v36 = (unsigned __int8)i[v35];
      v37 = v36 == 32;
      if ( v36 != 32 )
        v37 = v36 == 9;
      if ( !v37 )
      {
        v40 = v35 + 1;
        goto LABEL_73;
      }
      --v35;
    }
    while ( v35 != -1 );
    v40 = 0;
LABEL_73:
    if ( *v13 == 61 )
    {
      v41 = &i[v34 + 1];
      v42 = strcspn(v41, ";\r\n");
      v43 = v34 + v42;
      if ( v42 )
      {
        while ( 1 )
        {
          v44 = (unsigned __int8)i[v34 + v42];
          v45 = v44 == 32;
          if ( v44 != 32 )
            v45 = v44 == 9;
          if ( !v45 )
            break;
          if ( !--v42 )
          {
            v42 = 0;
            break;
          }
        }
      }
      v46 = (unsigned __int8 *)&i[v43];
      if ( v42 )
      {
        v47 = &i[v34 + 1 + v42];
        while ( 1 )
        {
          v48 = *(unsigned __int8 *)v41;
          v49 = v48 == 32;
          if ( v48 != 32 )
            v49 = v48 == 9;
          if ( !v49 )
            break;
          --v42;
          ++v41;
          if ( !v42 )
          {
            v42 = 0;
            goto LABEL_91;
          }
        }
      }
      v47 = v41;
LABEL_91:
      v13 = (char *)(v46 + 1);
      if ( memchr(v47, 9, v42) )
      {
        freecookie(v133);
        c = (CookieInfo *)(Curl_cookie_loadfiles + 1);
        if ( v132 && (v130[3] & 0x20) != 0 )
          Curl_infof(v132, "cookie contains TAB, dropping");
        goto LABEL_46;
      }
      v50 = 1;
    }
    else
    {
      v42 = 0;
      v50 = 0;
      v47 = 0;
    }
    v51 = v40 > 0xFFE;
    if ( v40 <= 0xFFE )
      v51 = v42 > 0xFFE;
    if ( !v51 && v42 + v40 <= 0x1000 )
    {
      if ( v31 == 95 && v40 >= 7 && i[1] == 95 )
      {
        if ( curl_strnequal("__Secure-", i, 9) )
        {
          v52 = v133->prefix | 1;
        }
        else
        {
          if ( !curl_strnequal("__Host-", i, 7) )
            goto LABEL_112;
          v52 = v133->prefix | 2;
        }
        v133->prefix = v52;
      }
LABEL_112:
      if ( !*p_name )
      {
        c = (CookieInfo *)(&loc_4 + 2);
        if ( v50 )
        {
          strstore(p_name, i, v40);
          strstore(p_value, v47, v42);
          v55 = *p_name;
          v56 = *p_name == 0;
          if ( *p_name )
          {
            v54 = *p_value;
            v56 = *p_value == 0;
          }
          if ( !v56 )
          {
            if ( !invalid_octets(v54) && !invalid_octets(v55) )
              goto LABEL_45;
            if ( v132 && (v130[3] & 0x20) != 0 )
              Curl_infof(v132, "invalid octets in name/value, cookie dropped");
          }
        }
        goto LABEL_126;
      }
      if ( !v42 )
      {
        if ( v40 == 8 )
        {
          if ( curl_strnequal("httponly", i, 8) )
          {
            v133->httponly = 1;
            goto LABEL_45;
          }
        }
        else if ( v40 == 6 && curl_strnequal("secure", i, 6) )
        {
          if ( !secure && cookies->running )
          {
            c = (CookieInfo *)(&loc_4 + 2);
LABEL_126:
            v126 = 1;
            goto LABEL_46;
          }
          v133->secure = 1;
          goto LABEL_45;
        }
        if ( !v50 )
          goto LABEL_45;
      }
      if ( v40 != 7 )
      {
        if ( v40 != 6 )
        {
          if ( v40 != 4 )
            goto LABEL_45;
          if ( !curl_strnequal("path", i, 4) )
            goto LABEL_45;
          strstore(str, v47, v42);
          c = (CookieInfo *)(&loc_4 + 2);
          if ( *str )
          {
            ((void (__fastcall *)(char *))*Curl_cfree)(v133->spath);
            v53 = sanitize_cookie_path(v133->path);
            v133->spath = v53;
            if ( v53 )
              goto LABEL_45;
          }
          goto LABEL_126;
        }
        v59 = curl_strnequal("domain", i, 6);
        v60 = v42 == 0;
        if ( v42 )
          v60 = v59 == 0;
        if ( v60 )
          goto LABEL_45;
        v61 = v47 + 1;
        if ( *v47 == 46 )
          --v42;
        else
          v61 = v47;
        v62 = domain;
        if ( bad_domain(v61, v42) )
          v62 = ":";
        v63 = v62;
        if ( !v62 )
          v63 = v61;
        is_ipnum = Curl_host_is_ipnum(v63);
        v65 = is_ipnum;
        domain = v62;
        if ( !v62 )
          goto LABEL_164;
        if ( !is_ipnum )
          goto LABEL_313;
        if ( !strncmp(v61, v62, v42) && v42 == strlen(v62) )
        {
LABEL_164:
          strstore(p_domain, v61, v42);
          v66 = *p_domain;
          v67 = *p_domain == 0;
          v68 = v65 | v67;
          c = 0;
          if ( *p_domain )
            v66 = (_BYTE *)(Curl_cookie_loadfiles + 1);
          else
            c = (CookieInfo *)(&loc_4 + 2);
          if ( v68 )
          {
            v126 |= v67;
          }
          else
          {
            v66 = (_BYTE *)(Curl_cookie_loadfiles + 1);
            v133->tailmatch = 1;
            c = 0;
          }
LABEL_187:
          if ( v66 )
            c = 0;
          goto LABEL_46;
        }
        if ( !v65 )
        {
LABEL_313:
          if ( cookie_tailmatch(v61, v42, v62) )
            goto LABEL_164;
        }
        c = 0;
        v126 = 1;
        if ( v132 && (v130[3] & 0x20) != 0 )
          Curl_infof(v132, "skipped cookie with bad tailmatch domain: %s", v61);
        v66 = (_BYTE *)(Curl_cookie_loadfiles + 1);
        goto LABEL_187;
      }
      if ( curl_strnequal("version", i, 7) )
      {
LABEL_45:
        c = 0;
        goto LABEL_46;
      }
      if ( !curl_strnequal("max-age", i, 7) )
      {
        if ( curl_strnequal("expires", i, 7) && v42 <= 0x7F && !*p_expires )
        {
          memcpy(save_ptr, v47, v42);
          *((_BYTE *)save_ptr + v42) = 0;
          v69 = Curl_getdate_capped(save_ptr);
          *p_expires = v69;
          if ( v69 )
          {
            if ( v69 <= -1 )
            {
              *(_DWORD *)p_expires = 0;
              HIDWORD(v133->expires) = 0;
            }
          }
          else
          {
            *(_DWORD *)p_expires = 1;
            HIDWORD(v133->expires) = 0;
          }
        }
        goto LABEL_45;
      }
      v57 = v47 + 1;
      if ( *v47 != 34 )
        v57 = v47;
      v58 = curlx_strtoofft(v57, 0, 10, p_expires);
      if ( v58 )
      {
        if ( v58 != 2 )
        {
          if ( v58 != 1 )
            goto LABEL_45;
LABEL_192:
          *(_DWORD *)p_expires = -1;
          HIDWORD(v133->expires) = 0x7FFFFFFF;
          goto LABEL_45;
        }
      }
      else if ( *p_expires )
      {
        LODWORD(v120) = ~v131;
        HIDWORD(v120) = 0x7FFFFFFF - (v131 >> 0x1F);
        if ( v120 >= *p_expires )
        {
          *p_expires += v131;
          goto LABEL_45;
        }
        goto LABEL_192;
      }
      *(_DWORD *)p_expires = 1;
      HIDWORD(v133->expires) = 0;
      goto LABEL_45;
    }
    freecookie(v133);
    c = (CookieInfo *)(Curl_cookie_loadfiles + 1);
    if ( v132 && (v130[3] & 0x20) != 0 )
      Curl_infof(v132, "oversized cookie dropped, name/val %zu + %zu bytes", v40, v42);
LABEL_46:
    if ( c )
      break;
    while ( 1 )
    {
LABEL_64:
      v38 = (unsigned __int8)*v13;
      v39 = v38 == 32;
      if ( v38 != 32 )
        v39 = v38 == 9;
      if ( !v39 )
        break;
      ++v13;
    }
    if ( v38 == 59 )
      ++v13;
    c = (CookieInfo *)(v38 - 0x3B);
    if ( v38 != 0x3B )
      c = (CookieInfo *)(&loc_4 + 2);
  }
  while ( !c );
  v14 = cookies;
  v12 = 0;
  noexpire = v127;
  if ( c == (CookieInfo *)((char *)&loc_4 + 2) )
  {
    if ( (v126 & 1) == 0 && domain && !v133->domain )
    {
      v70 = ((int (__fastcall *)(const char *))*Curl_cstrdup)(domain);
      v133->domain = (char *)v70;
      v126 |= v70 == 0;
    }
    if ( (v126 & 1) != 0
      || !path
      || v133->path
      || ((v71 = strchr(path, 63)) == 0 ? (v72 = strrchr(path, 47)) : (v72 = (char *)Curl_memrchr(path, 47, v71 - path)),
          !v72) )
    {
LABEL_219:
      if ( (v126 & 1) != 0 || !v133->name )
        goto LABEL_222;
      ++v132->req.setcookies;
      c = 0;
    }
    else
    {
      v76 = v72 - path;
      v77 = (char *)((int (__fastcall *)(int))*Curl_cmalloc)(v72 - path + 2);
      v133->path = v77;
      if ( v77 )
      {
        memcpy(v77, path, v76 + 1);
        v133->path[v76 + 1] = 0;
        v78 = sanitize_cookie_path(v133->path);
        v133->spath = v78;
        v126 |= v78 == 0;
        goto LABEL_219;
      }
LABEL_222:
      freecookie(v133);
      c = (CookieInfo *)(Curl_cookie_loadfiles + 1);
    }
  }
LABEL_223:
  if ( c )
    return (Cookie *)v12;
LABEL_224:
  if ( (v133->prefix & 1) != 0 && !v133->secure
    || (v133->prefix & 2) != 0 && (!v133->secure || (v102 = v133->path) == 0 || strcmp(v102, "/") || v133->tailmatch)
    || !v14->running && v14->newsession && !v133->expires )
  {
    freecookie(v133);
    return (Cookie *)v12;
  }
  v133->livecookie = v14->running;
  v79 = v14->lastct + 1;
  v14->lastct = v79;
  v133->creationtime = v79;
  if ( !noexpire )
    remove_expired(v14);
  v80 = cookiehash(v133->domain);
  next = v14->cookies[v80];
  if ( !next )
  {
    LOBYTE(v84) = 0;
    v83 = 0;
    v82 = 0;
    v86 = 0;
    v85 = v133;
LABEL_291:
    v134 = v80;
    if ( v82 )
    {
      name = v83->name;
      creationtime = v83->creationtime;
      v82->next = v83->next;
      v82->creationtime = creationtime;
      v105 = (void (__fastcall **)(Cookie *))Curl_cfree;
      ((void (__fastcall *)(char *))*Curl_cfree)(name);
      (*v105)((Cookie *)v83->value);
      (*v105)((Cookie *)v83->domain);
      (*v105)((Cookie *)v83->path);
      (*v105)((Cookie *)v83->spath);
      v106 = v82->name;
      value = v82->value;
      v108 = v82->path;
      spath = v82->spath;
      v110 = v82->domain;
      v83->next = v82->next;
      v83->name = v106;
      v83->value = value;
      v83->path = v108;
      v83->spath = spath;
      v83->domain = v110;
      expires_high = HIDWORD(v82->expires);
      v112 = *(_DWORD *)&v82->tailmatch;
      v113 = v82->creationtime;
      v114 = *(_DWORD *)&v82->prefix;
      v115 = *((_DWORD *)&v82->prefix + 1);
      LODWORD(v83->expires) = v82->expires;
      HIDWORD(v83->expires) = expires_high;
      *(_DWORD *)&v83->tailmatch = v112;
      v83->creationtime = v113;
      *(_DWORD *)&v83->prefix = v114;
      *((_DWORD *)&v83->prefix + 1) = v115;
      (*v105)(v82);
      v85 = v83;
    }
    v116 = v132 == 0;
    if ( v132 )
      v116 = !cookies->running;
    if ( !v116 && (*((_BYTE *)&v132->set + 1337) & 0x20) != 0 )
    {
      v119 = "Added";
      if ( (v84 & 1) != 0 )
        v119 = "Replaced";
      Curl_infof(
        v132,
        "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
        v119,
        v85->name,
        v85->value,
        v85->domain,
        v85->path,
        v85->expires);
    }
    if ( (v84 & 1) == 0 )
    {
      if ( v86 )
        v86->next = v85;
      else
        cookies->cookies[v134] = v85;
      ++cookies->numcookies;
    }
    expires = v85->expires;
    if ( expires && expires < cookies->next_expiration )
      cookies->next_expiration = expires;
    return v85;
  }
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v85 = v133;
  while ( 2 )
  {
    v86 = next;
    if ( !curl_strequal(next->name, v133->name) )
      goto LABEL_244;
    v87 = v86->domain;
    if ( v87 )
    {
      v88 = v133->domain;
      if ( v88 )
      {
        v89 = curl_strequal(v87, v88) != 0;
        goto LABEL_240;
      }
      goto LABEL_244;
    }
    v89 = v133->domain == 0;
LABEL_240:
    v90 = !v89;
    if ( v89 )
    {
      c = (CookieInfo *)v86->spath;
      v90 = c == 0;
    }
    if ( v90 )
      goto LABEL_244;
    v94 = v133->spath;
    v95 = v94 == 0;
    if ( v94 )
      v95 = !v86->secure;
    if ( v95 )
      goto LABEL_244;
    v96 = !v133->secure;
    if ( !v133->secure )
      v96 = secure == 0;
    if ( !v96
      || ((v97 = strchr((const char *)c->cookies + 1, 47)) == 0 ? (v98 = strlen((const char *)c)) : (v98 = v97 - (char *)c),
          !curl_strnequal(c, v94, v98)) )
    {
LABEL_244:
      if ( v82 || (v82 = 0, !curl_strequal(v86->name, v133->name)) )
      {
LABEL_233:
        next = v86->next;
        if ( !v86->next )
          goto LABEL_291;
        continue;
      }
      v91 = v86->domain;
      if ( v91 )
      {
        v92 = (int)v133->domain;
        if ( !v92 || !curl_strequal(v91, v92) )
        {
LABEL_262:
          if ( (v84 & 1) != 0 )
          {
            v99 = v86->spath;
            v100 = v99 == 0;
            if ( v99 )
            {
              v92 = (int)v133->spath;
              v100 = v92 == 0;
            }
            if ( !v100 && !curl_strequal(v99, v92) )
            {
              v84 = 0;
              goto LABEL_233;
            }
            v84 &= (v86->spath != 0) ^ (v133->spath == 0);
          }
          if ( (v84 & 1) != 0 )
          {
            if ( v133->livecookie )
            {
              v83 = v86;
              v82 = v133;
            }
            else
            {
              v83 = v86;
              v82 = v133;
              if ( v86->livecookie )
                goto LABEL_280;
            }
          }
          goto LABEL_233;
        }
        v93 = v86->tailmatch - v133->tailmatch;
      }
      else
      {
        v93 = (int)v133->domain;
      }
      v92 = -v93;
      v84 |= v93 == 0;
      goto LABEL_262;
    }
    break;
  }
  v101 = v132 == 0;
  if ( v132 )
    v101 = (*((_BYTE *)&v132->set + 1337) & 0x20) == 0;
  if ( !v101 )
    Curl_infof(v132, "cookie '%s' for domain '%s' dropped, would overlay an existing cookie", v133->name, v133->domain);
LABEL_280:
  v75 = v133;
LABEL_214:
  freecookie(v75);
  return 0;
}
