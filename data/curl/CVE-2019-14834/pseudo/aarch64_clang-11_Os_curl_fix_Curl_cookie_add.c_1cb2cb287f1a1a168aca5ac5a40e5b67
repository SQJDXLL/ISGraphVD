Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        const char *domain,
        char *path,
        bool secure)
{
  time_t v16; // x0
  Cookie *v17; // x28
  time_t v18; // x26
  __int64 v19; // x0
  Cookie *v20; // x21
  const char *v21; // x19
  char *i; // x27
  int v23; // w24
  size_t v24; // x0
  size_t v25; // x22
  unsigned __int64 v26; // x23
  int v27; // w8
  const char *v28; // x28
  size_t v29; // x0
  size_t v30; // x20
  const char *v31; // x8
  int v32; // w9
  size_t v33; // x22
  int v34; // w19
  unsigned __int8 v35; // w8
  __int64 v36; // x9
  int v37; // w11
  __int64 v38; // x0
  char *v39; // x0
  const char *v40; // x0
  const char *name; // x22
  int v42; // w8
  curl_off_t *v43; // x19
  const char *v44; // x0
  int v45; // w0
  int v46; // w0
  size_t v47; // x22
  const char *v48; // x23
  _BYTE *v49; // x0
  char is_ipnum; // w27
  const char *v51; // x0
  __int64 v52; // x0
  __int64 v53; // x0
  curl_off_t v54; // x8
  char *v55; // x0
  char *v56; // x0
  char *v57; // x0
  const char *v58; // x22
  int v59; // w26
  int v60; // w23
  const char *v61; // x0
  __int64 v62; // x0
  const char *v63; // x0
  char *v64; // x0
  __int64 v65; // x0
  unsigned __int8 v66; // w8
  __int64 v67; // x0
  __int64 v68; // x0
  int v69; // w19
  __int64 v70; // x0
  char *v71; // x0
  __int64 v72; // x0
  Curl_easy *v73; // x27
  int v74; // w8
  size_t v75; // x0
  char *v76; // x20
  Cookie *next; // x8
  Cookie *v78; // x20
  int v79; // w26
  Cookie *v80; // x25
  char *v81; // x0
  char *v82; // x1
  const char *spath; // x22
  char *v84; // x23
  char *v85; // x0
  size_t v86; // x2
  char *v87; // x0
  char *v88; // x1
  bool v89; // zf
  int v90; // w8
  char *v91; // x0
  char *v92; // x1
  __int64 v93; // x0
  char *v94; // x19
  char *v95; // x0
  char *v96; // x0
  const char *v97; // x0
  char *v98; // x8
  curl_off_t expires; // x8
  const char *v100; // x2
  signed __int64 v101; // x19
  char *v102; // x0
  char *v103; // x0
  curl_off_t *p_expires; // [xsp+10h] [xbp-C0h]
  char *v106; // [xsp+18h] [xbp-B8h]
  char v107; // [xsp+20h] [xbp-B0h]
  bool v108; // [xsp+24h] [xbp-ACh]
  Curl_easy *v109; // [xsp+28h] [xbp-A8h]
  Curl_easy *v110; // [xsp+28h] [xbp-A8h]
  CookieInfo *cookies; // [xsp+30h] [xbp-A0h]
  bool v112; // [xsp+3Ch] [xbp-94h]
  char *s; // [xsp+40h] [xbp-90h]
  char *dest[17]; // [xsp+48h] [xbp-88h] BYREF

  v16 = time(0uLL);
  v17 = 0LL;
  if ( data->req.setcookies > 0x31u )
    return v17;
  s = path;
  v18 = v16;
  v19 = Curl_ccalloc(1LL, 72LL);
  if ( !v19 )
    return 0LL;
  v20 = (Cookie *)v19;
  if ( !httpheader )
  {
    dest[0] = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 0xA;
      v20->httponly = 1;
    }
    if ( *lineptr == 35 )
      goto LABEL_123;
    v55 = strchr(lineptr, 13);
    if ( v55 )
      *v55 = 0;
    v108 = noexpire;
    v112 = secure;
    cookies = c;
    v56 = strchr(lineptr, 10);
    if ( v56 )
      *v56 = 0;
    v57 = strtok_r(lineptr, "\t", dest);
    if ( !v57 )
      goto LABEL_270;
    v110 = data;
    v58 = v57;
    v59 = 0;
    v60 = 0;
    while ( 1 )
    {
      switch ( v59 )
      {
        case 0:
          if ( *v58 == 46 )
            v61 = v58 + 1;
          else
            v61 = v58;
          v62 = Curl_cstrdup(v61);
          v59 = 0;
          v20->domain = (char *)v62;
          v60 |= v62 == 0;
          goto LABEL_159;
        case 1:
          v20->tailmatch = (unsigned int)curl_strequal(v58, "TRUE") != 0;
          v59 = 1;
          goto LABEL_159;
        case 2:
          if ( !strcmp("TRUE", v58) || !strcmp("FALSE", v58) )
          {
            v68 = Curl_cstrdup("/");
            v20->path = (char *)v68;
            v69 = v60 | (v68 == 0);
            v70 = Curl_cstrdup("/");
            v60 = v69 | (v70 == 0);
            v20->spath = (char *)v70;
            goto LABEL_146;
          }
          v63 = (const char *)Curl_cstrdup(v58);
          v20->path = (char *)v63;
          if ( !v63 )
          {
            v59 = 2;
            goto LABEL_158;
          }
          v64 = sanitize_cookie_path(v63);
          v20->spath = v64;
          v60 |= v64 == 0LL;
          v59 = 2;
          goto LABEL_159;
        case 3:
LABEL_146:
          v20->secure = 0;
          if ( (unsigned int)curl_strequal(v58, "TRUE") )
          {
            if ( !secure && !cookies->running )
            {
              v59 = 3;
              goto LABEL_158;
            }
            v20->secure = 1;
          }
          v59 = 3;
          goto LABEL_159;
        case 4:
          v60 |= (unsigned int)curlx_strtoofft(v58, 0LL, 10LL, &v20->expires) != 0;
          v59 = 4;
          goto LABEL_159;
        case 5:
          v65 = Curl_cstrdup(v58);
          v20->name = (char *)v65;
          if ( !v65 )
          {
            v59 = 5;
LABEL_158:
            v60 = 1;
            goto LABEL_159;
          }
          if ( (unsigned int)curl_strnequal("__Secure-", v65, 9LL) )
          {
            v66 = v20->prefix | 1;
LABEL_154:
            v20->prefix = v66;
            goto LABEL_155;
          }
          if ( (unsigned int)curl_strnequal("__Host-", v20->name, 7LL) )
          {
            v66 = v20->prefix | 2;
            goto LABEL_154;
          }
LABEL_155:
          v59 = 5;
LABEL_159:
          v71 = strtok_r(0uLL, "\t", dest);
          ++v59;
          if ( !v71 || (v58 = v71, (v60 & 1) != 0) )
          {
            if ( v59 == 6 )
            {
              v72 = Curl_cstrdup(&unk_211D);
              LOBYTE(v60) = v60 | (v72 == 0);
              if ( v72 )
                v59 = 7;
              else
                v59 = 6;
              v20->value = (char *)v72;
            }
            v73 = v110;
            if ( (v60 & 1) != 0 || v59 != 7 )
              goto LABEL_270;
LABEL_168:
            if ( (v20->prefix & 1) != 0 && !v20->secure )
              goto LABEL_270;
            if ( (v20->prefix & 2) != 0 )
            {
              if ( !v20->secure )
                goto LABEL_270;
              v97 = v20->path;
              if ( !v97 || strcmp(v97, "/") || v20->tailmatch )
                goto LABEL_270;
            }
            if ( !cookies->running && cookies->newsession && !v20->expires )
              goto LABEL_270;
            v20->livecookie = cookies->running;
            v74 = cookies->lastct + 1;
            cookies->lastct = v74;
            v20->creationtime = v74;
            if ( !v108 )
              remove_expired(cookies);
            v75 = cookiehash(v20->domain);
            v76 = (char *)&cookies->cookies[v75];
            next = *(Cookie **)v76;
            if ( *(_QWORD *)v76 )
            {
              s = (char *)&cookies->cookies[v75];
              v78 = 0LL;
              v17 = 0LL;
              v79 = 0;
              while ( 1 )
              {
                v80 = next;
                if ( !(unsigned int)curl_strequal(next->name, v20->name) )
                  goto LABEL_191;
                v81 = v80->domain;
                v82 = v20->domain;
                if ( v81 )
                {
                  if ( !v82 || !(unsigned int)curl_strequal(v81, v82) )
                    goto LABEL_191;
                }
                else if ( v82 )
                {
                  goto LABEL_191;
                }
                spath = v80->spath;
                if ( spath )
                {
                  v84 = v20->spath;
                  if ( v84 )
                  {
                    if ( v80->secure && !v20->secure && !v112 )
                    {
                      v85 = strchr(spath + 1, 47);
                      v86 = v85 ? v85 - spath : strlen(spath);
                      if ( (unsigned int)curl_strnequal(spath, v84, v86) )
                      {
                        if ( v73 && (*((_BYTE *)&v73->set + 2229) & 0x20) != 0 )
                          Curl_infof(
                            v73,
                            "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                            v20->name,
                            v20->domain);
                        goto LABEL_270;
                      }
                    }
                  }
                }
LABEL_191:
                if ( !v78 )
                {
                  if ( (unsigned int)curl_strequal(v80->name, v20->name) )
                  {
                    v87 = v80->domain;
                    v88 = v20->domain;
                    if ( v87 )
                    {
                      if ( v88 && (unsigned int)curl_strequal(v87, v88) )
                      {
                        v89 = v80->tailmatch == v20->tailmatch;
                        goto LABEL_200;
                      }
                      if ( (v79 & 1) == 0 )
                      {
LABEL_210:
                        v79 = 0;
                        goto LABEL_211;
                      }
                    }
                    else
                    {
                      v89 = v88 == 0LL;
LABEL_200:
                      v90 = v89;
                      if ( ((v79 | v90) & 1) == 0 )
                        goto LABEL_210;
                    }
                    v91 = v80->spath;
                    v92 = v20->spath;
                    if ( v91 )
                    {
                      if ( v92 )
                      {
                        if ( (unsigned int)curl_strequal(v91, v92) && (v80->spath != 0LL) != (v20->spath == 0LL) )
                        {
LABEL_215:
                          if ( !v20->livecookie && v80->livecookie )
                            goto LABEL_270;
                          v79 = 1;
                          v17 = v80;
                          v78 = v20;
                          goto LABEL_212;
                        }
                      }
                      else if ( v20->spath )
                      {
                        goto LABEL_215;
                      }
                    }
                    else if ( !v92 )
                    {
                      goto LABEL_215;
                    }
                    goto LABEL_210;
                  }
LABEL_211:
                  v78 = 0LL;
                }
LABEL_212:
                next = v80->next;
                if ( !v80->next )
                {
                  if ( v78 )
                  {
                    v78->next = v17->next;
                    v78->creationtime = v17->creationtime;
                    Curl_cfree(v17->name);
                    Curl_cfree(v17->value);
                    Curl_cfree(v17->domain);
                    Curl_cfree(v17->path);
                    Curl_cfree(v17->spath);
                    memcpy(v17, v78, sizeof(Cookie));
                    Curl_cfree(v78);
                  }
                  else
                  {
                    v17 = v20;
                  }
                  v76 = s;
                  goto LABEL_245;
                }
              }
            }
            v80 = 0LL;
            LOBYTE(v79) = 0;
            v17 = v20;
LABEL_245:
            if ( v73 && cookies->running && (*((_BYTE *)&v73->set + 2229) & 0x20) != 0 )
            {
              if ( (v79 & 1) != 0 )
                v100 = "Replaced";
              else
                v100 = "Added";
              Curl_infof(
                v73,
                "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
                v100,
                v17->name,
                v17->value,
                v17->domain,
                v17->path,
                v17->expires);
              if ( (v79 & 1) == 0 )
              {
LABEL_249:
                if ( v80 )
                  v98 = (char *)v80;
                else
                  v98 = v76;
                *(_QWORD *)v98 = v17;
                ++cookies->numcookies;
              }
            }
            else if ( (v79 & 1) == 0 )
            {
              goto LABEL_249;
            }
            expires = v17->expires;
            if ( expires && expires < cookies->next_expiration )
              cookies->next_expiration = expires;
            return v17;
          }
          break;
        case 6:
          v67 = Curl_cstrdup(v58);
          v60 |= v67 == 0;
          v59 = 6;
          v20->value = (char *)v67;
          goto LABEL_159;
        default:
          goto LABEL_159;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_123:
    Curl_cfree(v20);
    return 0LL;
  }
  p_expires = &v20->expires;
  v106 = (char *)&data->set + 0x8B2;
  v107 = 0;
  v108 = noexpire;
  v112 = secure;
  v109 = data;
  cookies = c;
  while ( 1 )
  {
    v21 = lineptr + 1;
    for ( i = lineptr; ; ++i )
    {
      v23 = (unsigned __int8)*i;
      if ( v23 != 32 && v23 != 9 )
        break;
      ++v21;
    }
    v24 = strcspn(i, ";\t\r\n=");
    if ( !v24 )
    {
      lineptr = i;
      goto LABEL_56;
    }
    v25 = v24;
    lineptr = &i[v24];
    v26 = v24;
    do
    {
      v27 = (unsigned __int8)i[v26 - 1];
      if ( v27 != 32 && v27 != 9 )
        break;
      --v26;
    }
    while ( v26 );
    if ( *lineptr != 61 )
    {
      v33 = 0LL;
      v34 = 0;
      v28 = 0LL;
      goto LABEL_26;
    }
    v28 = &i[v24 + 1];
    v29 = strcspn(v28, ";\r\n");
    v30 = v25 + v29;
    if ( v29 )
    {
      v31 = &v21[v30];
      while ( 1 )
      {
        v32 = *((unsigned __int8 *)v31 - 1);
        if ( v32 != 32 && v32 != 9 )
          break;
        --v29;
        --v31;
        if ( !v29 )
          goto LABEL_21;
      }
      v36 = 0LL;
      while ( 1 )
      {
        v37 = (unsigned __int8)v21[v25 + v36];
        if ( v37 != 32 && v37 != 9 )
          break;
        if ( v29 == ++v36 )
        {
          v33 = 0LL;
          v28 = v31;
          goto LABEL_22;
        }
      }
      v28 = &v21[v25 + v36];
      v33 = v29 - v36;
    }
    else
    {
LABEL_21:
      v33 = 0LL;
    }
LABEL_22:
    if ( memchr(v28, 9, v33) )
      break;
    lineptr = &i[v30 + 1];
    v34 = 1;
LABEL_26:
    if ( v26 > 0xFFE || v33 > 0xFFE || v33 + v26 > 0x1000 )
    {
      freecookie(v20);
      if ( (v106[3] & 0x20) != 0 )
        Curl_infof(v109, "oversized cookie dropped, name/val %zu + %zu bytes", v26, v33);
      return 0LL;
    }
    if ( v23 != 95 || v26 < 7 || i[1] != 95 )
      goto LABEL_42;
    if ( (unsigned int)curl_strnequal("__Secure-", i, 9LL) )
    {
      v35 = v20->prefix | 1;
LABEL_41:
      v20->prefix = v35;
      goto LABEL_42;
    }
    if ( (unsigned int)curl_strnequal("__Host-", i, 7LL) )
    {
      v35 = v20->prefix | 2;
      goto LABEL_41;
    }
LABEL_42:
    if ( !v20->name )
    {
      if ( !v34 )
        goto LABEL_270;
      Curl_cfree(0LL);
      v20->name = (char *)Curl_strndup(i, v26);
      Curl_cfree(v20->value);
      v40 = (const char *)Curl_strndup(v28, v33);
      v20->value = (char *)v40;
      if ( !v40 )
        goto LABEL_270;
      name = v20->name;
      if ( !name )
        goto LABEL_270;
      if ( !v40[strcspn(v40, invalid_octets_badoctets)] && !name[strcspn(name, invalid_octets_badoctets)] )
        goto LABEL_56;
      if ( (v106[3] & 0x20) != 0 )
        Curl_infof(v109, "invalid octets in name/value, cookie dropped");
      goto LABEL_270;
    }
    if ( !v33 )
    {
      if ( v26 == 8 )
      {
        if ( (unsigned int)curl_strnequal("httponly", i, 8LL) )
        {
          v20->httponly = 1;
          goto LABEL_56;
        }
      }
      else if ( v26 == 6 && (unsigned int)curl_strnequal("secure", i, 6LL) )
      {
        if ( !v112 && cookies->running )
          goto LABEL_270;
        v20->secure = 1;
        goto LABEL_56;
      }
      if ( !v34 )
        goto LABEL_56;
    }
    if ( v26 == 7 )
    {
      if ( !(unsigned int)curl_strnequal("version", i, 7LL) )
      {
        if ( (unsigned int)curl_strnequal("max-age", i, 7LL) )
        {
          v43 = &v20->expires;
          if ( *v28 == 34 )
            v44 = v28 + 1;
          else
            v44 = v28;
          v45 = curlx_strtoofft(v44, 0LL, 10LL, p_expires);
          switch ( v45 )
          {
            case 0:
              v54 = *p_expires;
              if ( !*p_expires )
                goto LABEL_117;
              if ( 0x7FFFFFFFFFFFFFFFLL - v18 >= v54 )
              {
                *p_expires = v54 + v18;
                goto LABEL_56;
              }
LABEL_116:
              *p_expires = 0x7FFFFFFFFFFFFFFFLL;
              goto LABEL_56;
            case 2:
              goto LABEL_117;
            case 1:
              goto LABEL_116;
          }
        }
        else if ( (unsigned int)curl_strnequal("expires", i, 7LL) )
        {
          v43 = &v20->expires;
          if ( v33 <= 0x7F && !*p_expires )
          {
            memcpy(dest, v28, v33);
            *((_BYTE *)dest + v33) = 0;
            v53 = Curl_getdate_capped(dest);
            *p_expires = v53;
            if ( v53 )
            {
              if ( (v53 & 0x8000000000000000LL) != 0 )
                *p_expires = 0LL;
              goto LABEL_56;
            }
LABEL_117:
            *v43 = 1LL;
            goto LABEL_56;
          }
        }
      }
    }
    else
    {
      if ( v26 != 6 )
      {
        if ( v26 == 4 )
        {
          if ( (unsigned int)curl_strnequal("path", i, 4LL) )
          {
            Curl_cfree(v20->path);
            v38 = Curl_strndup(v28, v33);
            v20->path = (char *)v38;
            if ( !v38 )
              goto LABEL_270;
            Curl_cfree(v20->spath);
            v39 = sanitize_cookie_path(v20->path);
            v20->spath = v39;
            if ( !v39 )
              goto LABEL_270;
          }
        }
        goto LABEL_56;
      }
      v46 = curl_strnequal("domain", i, 6LL);
      if ( v33 && v46 )
      {
        v47 = v33 - (*v28 == 46);
        if ( *v28 == 46 )
          v48 = v28 + 1;
        else
          v48 = v28;
        if ( v47 == 9 && (unsigned int)curl_strnequal(v48, "localhost", 9LL)
          || (v49 = memchr(v48, 46, v47)) != 0LL && (unsigned __int64)(&v48[v47] - v49) > 1 )
        {
          if ( domain )
            v51 = domain;
          else
            v51 = v48;
          is_ipnum = Curl_host_is_ipnum(v51);
          if ( !domain )
            goto LABEL_100;
          if ( (is_ipnum & 1) != 0 )
            goto LABEL_85;
        }
        else
        {
          domain = ":";
          if ( (Curl_host_is_ipnum(":") & 1) != 0 )
          {
LABEL_85:
            if ( strncmp(v48, domain, v47) || v47 != strlen(domain) )
            {
LABEL_103:
              if ( (v106[3] & 0x20) != 0 )
                Curl_infof(v109, "skipped cookie with bad tailmatch domain: %s", v48);
              v107 = 1;
              goto LABEL_56;
            }
            is_ipnum = 1;
LABEL_100:
            Curl_cfree(v20->domain);
            v52 = Curl_strndup(v48, v47);
            v20->domain = (char *)v52;
            if ( (is_ipnum & 1) == 0 && v52 )
            {
              v20->tailmatch = 1;
              goto LABEL_56;
            }
            if ( v52 )
            {
              v107 |= v52 == 0;
              goto LABEL_56;
            }
            v107 = 1;
LABEL_218:
            if ( (v107 & 1) == 0 )
            {
              if ( !domain || v20->domain || (v93 = Curl_cstrdup(domain), (v20->domain = (char *)v93) != 0LL) )
              {
                if ( !s || v20->path )
                  goto LABEL_275;
                v94 = s;
                v95 = strchr(s, 63);
                v96 = v95 ? (char *)Curl_memrchr(v94, 47LL, v95 - v94) : strrchr(v94, 47);
                if ( !v96
                  || (v101 = v96 - s, v102 = (char *)Curl_cmalloc(v96 - s + 2), (v20->path = v102) != 0LL)
                  && (memcpy(v102, s, v101 + 1),
                      v20->path[v101 + 1] = 0,
                      v103 = sanitize_cookie_path(v20->path),
                      (v20->spath = v103) != 0LL) )
                {
LABEL_275:
                  if ( v20->name )
                  {
                    v73 = v109;
                    ++v109->req.setcookies;
                    goto LABEL_168;
                  }
                }
              }
            }
LABEL_270:
            freecookie(v20);
            return 0LL;
          }
        }
        if ( !cookie_tailmatch(v48, v47, domain) )
          goto LABEL_103;
        is_ipnum = 0;
        goto LABEL_100;
      }
    }
    do
    {
      do
LABEL_56:
        v42 = (unsigned __int8)*lineptr++;
      while ( v42 == 32 );
    }
    while ( v42 == 9 );
    if ( v42 != 59 )
      goto LABEL_218;
  }
  freecookie(v20);
  if ( (v106[3] & 0x20) != 0 )
    Curl_infof(v109, "cookie contains TAB, dropping");
  return 0LL;
}
