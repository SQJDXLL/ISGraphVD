Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        int noexpire,
        char *lineptr,
        const char *domain,
        char *path,
        bool secure)
{
  time_t v15; // x0
  Cookie *v16; // x28
  time_t v17; // x24
  __int64 v18; // x0
  Cookie *v19; // x21
  const char *i; // x26
  int v21; // w19
  size_t v22; // x0
  size_t v23; // x20
  const char *v24; // x22
  unsigned __int64 v25; // x23
  int v26; // w8
  int v27; // w24
  const char *v28; // x28
  size_t v29; // x0
  size_t v30; // x22
  const char *v31; // x8
  int v32; // w9
  size_t v33; // x20
  unsigned __int8 v34; // w8
  __int64 v35; // x9
  int v36; // w11
  __int64 v37; // x0
  char *v38; // x0
  __int64 v39; // x0
  __int64 v40; // x0
  const char *name; // x20
  char *value; // x23
  int v43; // w8
  const char *v44; // x0
  int v45; // w0
  int v46; // w0
  size_t v47; // x20
  const char *v48; // x23
  _BYTE *v49; // x0
  const char *v50; // x0
  char is_ipnum; // w27
  Curl_easy *v52; // x19
  __int64 v53; // x0
  char *v54; // x8
  int v55; // w8
  __int64 v56; // x0
  curl_off_t v57; // x8
  __int64 v58; // x8
  char *v59; // x0
  char *v60; // x0
  char *v61; // x0
  const char *v62; // x23
  int v63; // w20
  char v64; // w19
  const char *v65; // x0
  __int64 v66; // x0
  const char *v67; // x0
  char *v68; // x0
  __int64 v69; // x0
  unsigned __int8 v70; // w8
  __int64 v71; // x0
  __int64 v72; // x0
  bool v73; // w19
  __int64 v74; // x0
  char *v75; // x0
  __int64 v76; // x0
  Curl_easy *v77; // x19
  int v78; // w8
  Cookie **v79; // x22
  Cookie *next; // x8
  Cookie *v81; // x20
  int v82; // w26
  Cookie *v83; // x25
  char *v84; // x0
  char *v85; // x1
  const char *spath; // x23
  char *v87; // x24
  char *v88; // x0
  size_t v89; // x2
  char *v90; // x0
  char *v91; // x1
  bool v92; // zf
  int v93; // w8
  char *v94; // x0
  char *v95; // x1
  __int64 v96; // x0
  char *v97; // x0
  char *v98; // x0
  const char *v99; // x0
  Cookie **p_next; // x8
  curl_off_t expires; // x8
  const char *v102; // x2
  signed __int64 v103; // x19
  char *v104; // x0
  char *v105; // x0
  __int64 v107; // [xsp+8h] [xbp-D8h]
  curl_off_t *p_expires; // [xsp+10h] [xbp-D0h]
  char *s; // [xsp+18h] [xbp-C8h]
  char *v110; // [xsp+20h] [xbp-C0h]
  int v111; // [xsp+2Ch] [xbp-B4h]
  time_t v112; // [xsp+30h] [xbp-B0h]
  Curl_easy *v113; // [xsp+38h] [xbp-A8h]
  Curl_easy *v114; // [xsp+38h] [xbp-A8h]
  bool v115; // [xsp+44h] [xbp-9Ch]
  CookieInfo *cookies; // [xsp+48h] [xbp-98h]
  int v117; // [xsp+54h] [xbp-8Ch]
  char *dest[17]; // [xsp+58h] [xbp-88h] BYREF

  v117 = noexpire;
  v15 = time(0uLL);
  v16 = 0LL;
  if ( data->req.setcookies > 0x31u )
    return v16;
  cookies = c;
  v17 = v15;
  v18 = Curl_ccalloc(1LL, 72LL);
  if ( !v18 )
    return 0LL;
  v19 = (Cookie *)v18;
  if ( !httpheader )
  {
    dest[0] = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 0xA;
      v19->httponly = 1;
    }
    if ( *lineptr == 35 )
      goto LABEL_132;
    v59 = strchr(lineptr, 13);
    if ( v59 )
      *v59 = 0;
    v115 = secure;
    v114 = data;
    v60 = strchr(lineptr, 10);
    if ( v60 )
      *v60 = 0;
    v61 = strtok_r(lineptr, "\t", dest);
    if ( !v61 )
      goto LABEL_279;
    v62 = v61;
    v63 = 0;
    while ( 1 )
    {
      v64 = 0;
      switch ( v63 )
      {
        case 0:
          if ( *v62 == 46 )
            v65 = v62 + 1;
          else
            v65 = v62;
          v66 = Curl_cstrdup(v65);
          v63 = 0;
          v19->domain = (char *)v66;
          v64 = v66 == 0;
          goto LABEL_168;
        case 1:
          v64 = 0;
          v19->tailmatch = (unsigned int)curl_strequal(v62, "TRUE") != 0;
          v63 = 1;
          goto LABEL_168;
        case 2:
          if ( !strcmp("TRUE", v62) || !strcmp("FALSE", v62) )
          {
            v72 = Curl_cstrdup("/");
            v19->path = (char *)v72;
            v73 = v72 == 0;
            v74 = Curl_cstrdup("/");
            v64 = v73 || v74 == 0;
            v19->spath = (char *)v74;
            goto LABEL_155;
          }
          v67 = (const char *)Curl_cstrdup(v62);
          v19->path = (char *)v67;
          if ( !v67 )
          {
            v63 = 2;
            goto LABEL_167;
          }
          v68 = sanitize_cookie_path(v67);
          v19->spath = v68;
          v64 = v68 == 0LL;
          v63 = 2;
          goto LABEL_168;
        case 3:
LABEL_155:
          v19->secure = 0;
          if ( (unsigned int)curl_strequal(v62, "TRUE") )
          {
            if ( !secure && !cookies->running )
            {
              v63 = 3;
              goto LABEL_167;
            }
            v19->secure = 1;
          }
          v63 = 3;
          goto LABEL_168;
        case 4:
          v64 = (unsigned int)curlx_strtoofft(v62, 0LL, 10LL, &v19->expires) != 0;
          v63 = 4;
          goto LABEL_168;
        case 5:
          v69 = Curl_cstrdup(v62);
          v19->name = (char *)v69;
          if ( !v69 )
          {
            v63 = 5;
LABEL_167:
            v64 = 1;
            goto LABEL_168;
          }
          if ( (unsigned int)curl_strnequal("__Secure-", v69, 9LL) )
          {
            v64 = 0;
            v70 = v19->prefix | 1;
LABEL_163:
            v19->prefix = v70;
            goto LABEL_164;
          }
          v64 = 0;
          if ( (unsigned int)curl_strnequal("__Host-", v19->name, 7LL) )
          {
            v70 = v19->prefix | 2;
            goto LABEL_163;
          }
LABEL_164:
          v63 = 5;
LABEL_168:
          v75 = strtok_r(0uLL, "\t", dest);
          ++v63;
          if ( (v64 & 1) != 0 || (v62 = v75) == 0LL )
          {
            if ( v63 == 6 )
            {
              v76 = Curl_cstrdup(&unk_212D);
              v64 |= v76 == 0;
              if ( v76 )
                v63 = 7;
              else
                v63 = 6;
              v19->value = (char *)v76;
            }
            if ( (v64 & 1) == 0 && v63 == 7 )
            {
              v77 = v114;
              goto LABEL_178;
            }
LABEL_279:
            freecookie(v19);
            return 0LL;
          }
          break;
        case 6:
          v71 = Curl_cstrdup(v62);
          v64 = v71 == 0;
          v63 = 6;
          v19->value = (char *)v71;
          goto LABEL_168;
        default:
          goto LABEL_168;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_132:
    Curl_cfree(v19);
    return 0LL;
  }
  p_expires = &v19->expires;
  s = path;
  v110 = (char *)&data->set + 0x8BB;
  v115 = secure;
  v111 = 0;
  v112 = v17;
  v113 = data;
  v107 = 0x7FFFFFFFFFFFFFFFLL - v17;
  while ( 1 )
  {
    for ( i = lineptr + 1; ; ++i )
    {
      v21 = (unsigned __int8)*lineptr;
      if ( v21 != 32 && v21 != 9 )
        break;
      ++lineptr;
    }
    v22 = strcspn(lineptr, ";\t\r\n=");
    if ( !v22 )
    {
      v24 = lineptr;
      goto LABEL_61;
    }
    v23 = v22;
    v24 = &lineptr[v22];
    v25 = v22;
    do
    {
      v26 = (unsigned __int8)lineptr[v25 - 1];
      if ( v26 != 32 && v26 != 9 )
        break;
      --v25;
    }
    while ( v25 );
    v27 = *(unsigned __int8 *)v24;
    if ( v27 != 61 )
    {
      v33 = 0LL;
      v28 = 0LL;
      goto LABEL_26;
    }
    v28 = &lineptr[v22 + 1];
    v29 = strcspn(v28, ";\r\n");
    v30 = v23 + v29;
    if ( v29 )
    {
      v31 = &i[v30];
      while ( 1 )
      {
        v32 = *((unsigned __int8 *)v31 - 1);
        if ( v32 != 32 && v32 != 9 )
          break;
        --v29;
        --v31;
        if ( !v29 )
          goto LABEL_21;
      }
      v35 = 0LL;
      while ( 1 )
      {
        v36 = (unsigned __int8)i[v23 + v35];
        if ( v36 != 32 && v36 != 9 )
          break;
        if ( v29 == ++v35 )
        {
          v33 = 0LL;
          v28 = v31;
          goto LABEL_22;
        }
      }
      v28 = &i[v23 + v35];
      v33 = v29 - v35;
    }
    else
    {
LABEL_21:
      v33 = 0LL;
    }
LABEL_22:
    if ( memchr(v28, 9, v33) )
      break;
    v24 = &lineptr[v30 + 1];
LABEL_26:
    if ( v25 > 0xFFE || v33 > 0xFFE || v33 + v25 > 0x1000 )
    {
      freecookie(v19);
      if ( (v110[3] & 0x10) != 0 )
        Curl_infof(v113, "oversized cookie dropped, name/val %zu + %zu bytes", v25, v33);
      return 0LL;
    }
    if ( v21 != 95 || v25 < 7 || lineptr[1] != 95 )
      goto LABEL_42;
    if ( (unsigned int)curl_strnequal("__Secure-", lineptr, 9LL) )
    {
      v34 = v19->prefix | 1;
LABEL_41:
      v19->prefix = v34;
      goto LABEL_42;
    }
    if ( (unsigned int)curl_strnequal("__Host-", lineptr, 7LL) )
    {
      v34 = v19->prefix | 2;
      goto LABEL_41;
    }
LABEL_42:
    if ( !v19->name )
    {
      if ( v27 != 61 )
        goto LABEL_279;
      Curl_cfree(0LL);
      v39 = Curl_memdup(lineptr, v25 + 1);
      v19->name = (char *)v39;
      if ( v39 )
        *(_BYTE *)(v39 + v25) = 0;
      Curl_cfree(v19->value);
      v40 = Curl_memdup(v28, v33 + 1);
      v19->value = (char *)v40;
      if ( v40 )
        *(_BYTE *)(v40 + v33) = 0;
      name = v19->name;
      if ( !name )
        goto LABEL_279;
      value = v19->value;
      if ( !value )
        goto LABEL_279;
      if ( value[strcspn(v19->value, invalid_octets_badoctets)] || name[strcspn(name, invalid_octets_badoctets)] )
      {
        if ( (v110[3] & 0x10) != 0 )
          Curl_infof(v113, "invalid octets in name/value, cookie dropped");
        goto LABEL_279;
      }
      goto LABEL_61;
    }
    if ( !v33 )
    {
      if ( v25 == 8 )
      {
        if ( (unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
        {
          v19->httponly = 1;
          goto LABEL_61;
        }
      }
      else if ( v25 == 6 && (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
      {
        if ( !v115 && cookies->running )
          goto LABEL_279;
        v19->secure = 1;
        goto LABEL_61;
      }
      if ( v27 != 61 )
        goto LABEL_61;
    }
    if ( v25 == 7 )
    {
      if ( (unsigned int)curl_strnequal("version", lineptr, 7LL) )
        goto LABEL_61;
      if ( !(unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
      {
        if ( (unsigned int)curl_strnequal("expires", lineptr, 7LL) && v33 <= 0x7F && !*p_expires )
        {
          memcpy(dest, v28, v33);
          *((_BYTE *)dest + v33) = 0;
          v56 = Curl_getdate_capped(dest);
          *p_expires = v56;
          if ( v56 )
          {
            if ( (v56 & 0x8000000000000000LL) != 0 )
              *p_expires = 0LL;
          }
          else
          {
            *p_expires = 1LL;
          }
        }
        goto LABEL_61;
      }
      if ( *v28 == 34 )
        v44 = v28 + 1;
      else
        v44 = v28;
      v45 = curlx_strtoofft(v44, 0LL, 10LL, p_expires);
      if ( v45 )
      {
        if ( v45 != 2 )
        {
          if ( v45 != 1 )
            goto LABEL_61;
LABEL_124:
          v58 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_126;
        }
      }
      else
      {
        v57 = *p_expires;
        if ( *p_expires )
        {
          if ( v107 < v57 )
            goto LABEL_124;
          v58 = v57 + v112;
LABEL_126:
          *p_expires = v58;
          goto LABEL_61;
        }
      }
      v58 = 1LL;
      goto LABEL_126;
    }
    if ( v25 != 6 )
    {
      if ( v25 == 4 )
      {
        if ( (unsigned int)curl_strnequal("path", lineptr, 4LL) )
        {
          Curl_cfree(v19->path);
          v37 = Curl_memdup(v28, v33 + 1);
          v19->path = (char *)v37;
          if ( !v37 )
            goto LABEL_279;
          *(_BYTE *)(v37 + v33) = 0;
          if ( !v19->path )
            goto LABEL_279;
          Curl_cfree(v19->spath);
          v38 = sanitize_cookie_path(v19->path);
          v19->spath = v38;
          if ( !v38 )
            goto LABEL_279;
        }
      }
      goto LABEL_61;
    }
    v46 = curl_strnequal("domain", lineptr, 6LL);
    if ( !v33 || !v46 )
      goto LABEL_61;
    v47 = v33 - (*v28 == 46);
    if ( *v28 == 46 )
      v48 = v28 + 1;
    else
      v48 = v28;
    if ( v47 != 9 || !(unsigned int)curl_strnequal(v48, "localhost", 9LL) )
    {
      v49 = memchr(v48, 46, v47);
      if ( !v49 || (unsigned __int64)(&v48[v47] - v49) <= 1 )
      {
        domain = ":";
        if ( (Curl_host_is_ipnum(":") & 1) != 0 )
        {
LABEL_104:
          v52 = v113;
          if ( strncmp(v48, domain, v47) || v47 != strlen(domain) )
          {
LABEL_111:
            if ( (v110[3] & 0x10) != 0 )
              Curl_infof(v52, "skipped cookie with bad tailmatch domain: %s", v48);
            v55 = 1;
LABEL_114:
            v111 = v55;
            goto LABEL_61;
          }
          is_ipnum = 1;
          goto LABEL_107;
        }
        goto LABEL_96;
      }
    }
    if ( domain )
      v50 = domain;
    else
      v50 = v48;
    is_ipnum = Curl_host_is_ipnum(v50);
    if ( domain )
    {
      if ( (is_ipnum & 1) != 0 )
        goto LABEL_104;
LABEL_96:
      v52 = v113;
      if ( !cookie_tailmatch(v48, v47, domain) )
        goto LABEL_111;
      is_ipnum = 0;
    }
LABEL_107:
    Curl_cfree(v19->domain);
    v53 = Curl_memdup(v48, v47 + 1);
    v19->domain = (char *)v53;
    if ( !v53 )
      goto LABEL_279;
    *(_BYTE *)(v53 + v47) = 0;
    v54 = v19->domain;
    if ( is_ipnum & 1 | (v54 == 0LL) )
    {
      if ( !v54 )
        goto LABEL_279;
      v55 = v111 | (v54 == 0LL);
      goto LABEL_114;
    }
    v19->tailmatch = 1;
LABEL_61:
    for ( lineptr = (char *)(v24 + 1); ; ++lineptr )
    {
      v43 = (unsigned __int8)*(lineptr - 1);
      if ( v43 != 32 && v43 != 9 )
        break;
    }
    if ( v43 != 59 )
    {
      if ( (v111 & 1) != 0 )
        goto LABEL_279;
      if ( domain )
      {
        if ( !v19->domain )
        {
          v96 = Curl_cstrdup(domain);
          v19->domain = (char *)v96;
          if ( !v96 )
            goto LABEL_279;
        }
      }
      if ( s && !v19->path )
      {
        v97 = strchr(s, 63);
        v98 = v97 ? (char *)Curl_memrchr(s, 47LL, v97 - s) : strrchr(s, 47);
        if ( v98 )
        {
          v103 = v98 - s;
          v104 = (char *)Curl_cmalloc(v98 - s + 2);
          v19->path = v104;
          if ( !v104 )
            goto LABEL_279;
          memcpy(v104, s, v103 + 1);
          v19->path[v103 + 1] = 0;
          v105 = sanitize_cookie_path(v19->path);
          v19->spath = v105;
          if ( !v105 )
            goto LABEL_279;
        }
      }
      if ( !v19->name )
        goto LABEL_279;
      v77 = v113;
      ++v113->req.setcookies;
LABEL_178:
      if ( (v19->prefix & 1) != 0 && !v19->secure )
        goto LABEL_279;
      if ( (v19->prefix & 2) != 0 )
      {
        if ( !v19->secure )
          goto LABEL_279;
        v99 = v19->path;
        if ( !v99 || strcmp(v99, "/") || v19->tailmatch )
          goto LABEL_279;
      }
      if ( !cookies->running && cookies->newsession && !v19->expires )
        goto LABEL_279;
      v19->livecookie = cookies->running;
      v78 = cookies->lastct + 1;
      cookies->lastct = v78;
      v19->creationtime = v78;
      if ( (v117 & 1) == 0 )
        remove_expired(cookies);
      v79 = &cookies->cookies[cookiehash(v19->domain)];
      next = *v79;
      if ( *v79 )
      {
        v81 = 0LL;
        v16 = 0LL;
        v82 = 0;
        while ( 1 )
        {
          v83 = next;
          if ( !(unsigned int)curl_strequal(next->name, v19->name) )
            goto LABEL_201;
          v84 = v83->domain;
          v85 = v19->domain;
          if ( v84 )
          {
            if ( !v85 || !(unsigned int)curl_strequal(v84, v85) )
              goto LABEL_201;
          }
          else if ( v85 )
          {
            goto LABEL_201;
          }
          spath = v83->spath;
          if ( spath )
          {
            v87 = v19->spath;
            if ( v87 )
            {
              if ( v83->secure && !v19->secure && !v115 )
              {
                v88 = strchr(spath + 1, 47);
                v89 = v88 ? v88 - spath : strlen(spath);
                if ( (unsigned int)curl_strnequal(spath, v87, v89) )
                {
                  if ( v77 && (*((_BYTE *)&v77->set + 2238) & 0x10) != 0 )
                    Curl_infof(
                      v77,
                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                      v19->name,
                      v19->domain);
                  goto LABEL_279;
                }
              }
            }
          }
LABEL_201:
          if ( !v81 )
          {
            if ( (unsigned int)curl_strequal(v83->name, v19->name) )
            {
              v90 = v83->domain;
              v91 = v19->domain;
              if ( v90 )
              {
                if ( v91 && (unsigned int)curl_strequal(v90, v91) )
                {
                  v92 = v83->tailmatch == v19->tailmatch;
                  goto LABEL_210;
                }
                if ( (v82 & 1) == 0 )
                {
LABEL_220:
                  v82 = 0;
                  goto LABEL_221;
                }
              }
              else
              {
                v92 = v91 == 0LL;
LABEL_210:
                v93 = v92;
                if ( ((v82 | v93) & 1) == 0 )
                  goto LABEL_220;
              }
              v94 = v83->spath;
              v95 = v19->spath;
              if ( v94 )
              {
                if ( v95 )
                {
                  if ( (unsigned int)curl_strequal(v94, v95) && (v83->spath != 0LL) != (v19->spath == 0LL) )
                  {
LABEL_225:
                    if ( !v19->livecookie && v83->livecookie )
                      goto LABEL_279;
                    v82 = 1;
                    v16 = v83;
                    v81 = v19;
                    goto LABEL_222;
                  }
                }
                else if ( v19->spath )
                {
                  goto LABEL_225;
                }
              }
              else if ( !v95 )
              {
                goto LABEL_225;
              }
              goto LABEL_220;
            }
LABEL_221:
            v81 = 0LL;
          }
LABEL_222:
          next = v83->next;
          if ( !v83->next )
          {
            if ( !v81 )
              goto LABEL_253;
            v81->next = v16->next;
            v81->creationtime = v16->creationtime;
            Curl_cfree(v16->name);
            Curl_cfree(v16->value);
            Curl_cfree(v16->domain);
            Curl_cfree(v16->path);
            Curl_cfree(v16->spath);
            memcpy(v16, v81, sizeof(Cookie));
            Curl_cfree(v81);
            goto LABEL_254;
          }
        }
      }
      v83 = 0LL;
      LOBYTE(v82) = 0;
LABEL_253:
      v16 = v19;
LABEL_254:
      if ( v77 && cookies->running && (*((_BYTE *)&v77->set + 2238) & 0x10) != 0 )
      {
        if ( (v82 & 1) != 0 )
          v102 = "Replaced";
        else
          v102 = "Added";
        Curl_infof(
          v77,
          "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
          v102,
          v16->name,
          v16->value,
          v16->domain,
          v16->path,
          v16->expires);
        if ( (v82 & 1) != 0 )
          goto LABEL_262;
      }
      else if ( (v82 & 1) != 0 )
      {
LABEL_262:
        expires = v16->expires;
        if ( expires && expires < cookies->next_expiration )
          cookies->next_expiration = expires;
        return v16;
      }
      if ( v83 )
        p_next = &v83->next;
      else
        p_next = v79;
      *p_next = v16;
      ++cookies->numcookies;
      goto LABEL_262;
    }
  }
  freecookie(v19);
  if ( (v110[3] & 0x10) != 0 )
    Curl_infof(v113, "cookie contains TAB, dropping");
  return 0LL;
}
