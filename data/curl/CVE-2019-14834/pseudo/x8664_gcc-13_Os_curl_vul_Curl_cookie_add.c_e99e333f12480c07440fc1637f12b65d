Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  _BOOL4 v8; // r15d
  Cookie *v11; // rbx
  char v12; // al
  size_t v13; // rax
  const char *v14; // rdx
  size_t v15; // r13
  char v16; // cl
  _BYTE *v17; // r15
  size_t v18; // r12
  char v19; // al
  bool v20; // cl
  int v21; // eax
  int v22; // eax
  const char *name; // rbp
  char *value; // r12
  char *v25; // rax
  bool v26; // r13
  _BYTE *v27; // rax
  const char *v28; // rdi
  char is_ipnum; // al
  char v30; // bp
  int v31; // eax
  __int64 v32; // rax
  curl_off_t expires; // rdx
  __int64 v34; // rax
  __int64 v35; // rdx
  bool v36; // zf
  char v37; // al
  __int64 v38; // rax
  char *v39; // rax
  char *v40; // rax
  signed __int64 v41; // r12
  unsigned __int64 v42; // rbp
  char *v43; // rax
  char *v44; // rax
  char *v45; // rax
  char *v46; // rax
  int v47; // r13d
  char *v48; // rax
  const char *v49; // rbp
  int v50; // r12d
  char *v51; // rax
  int v52; // eax
  __int64 (__fastcall *v53)(const char *); // r15
  const char *v54; // rax
  __int64 v55; // rax
  __int64 v56; // r13
  __int64 v57; // rax
  __int64 v58; // rax
  __int64 v59; // rax
  unsigned __int8 prefix; // al
  const char *v61; // rdi
  bool running; // al
  int v63; // eax
  char livecookie; // r13
  Cookie *v65; // rbp
  Cookie *v66; // r12
  size_t v67; // rax
  Cookie *v68; // r10
  Cookie *i; // r15
  char *v70; // rdi
  char *v71; // rsi
  char *spath; // r8
  char *v73; // rax
  const char *v74; // r8
  size_t v75; // rdx
  size_t v76; // rax
  char *v77; // rdi
  char *v78; // rsi
  bool v79; // zf
  char *v80; // rdi
  char *v81; // rsi
  char *v82; // rdi
  __int64 v83; // rcx
  Cookie *v84; // rdi
  Cookie *v85; // rsi
  const char *v86; // rdx
  curl_off_t v87; // rax
  Cookie *lastca; // [rsp+8h] [rbp-100h]
  Cookie *lastcb; // [rsp+8h] [rbp-100h]
  Cookie *lastcc; // [rsp+8h] [rbp-100h]
  size_t myhash; // [rsp+10h] [rbp-F8h]
  const char *httpheaderb; // [rsp+18h] [rbp-F0h]
  const char *ptr; // [rsp+20h] [rbp-E8h]
  time_t now; // [rsp+28h] [rbp-E0h]
  char sep; // [rsp+31h] [rbp-D7h]
  bool sepa; // [rsp+31h] [rbp-D7h]
  bool sepb; // [rsp+31h] [rbp-D7h]
  bool badcookie; // [rsp+33h] [rbp-D5h]
  const char *v104; // [rsp+38h] [rbp-D0h]
  char *tok_buf; // [rsp+40h] [rbp-C8h] BYREF
  char date[128]; // [rsp+48h] [rbp-C0h] BYREF
  unsigned __int64 v107; // [rsp+C8h] [rbp-40h]

  v8 = httpheader;
  v107 = __readfsqword(0x28u);
  now = time(0LL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  v11 = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !v11 )
    return 0LL;
  if ( v8 )
  {
    badcookie = 0;
    if ( strlen(lineptr) <= 0x1388 )
    {
      while ( 1 )
      {
        v12 = *lineptr;
        sep = *lineptr;
        if ( !*lineptr || v12 != 32 && v12 != 9 )
        {
          v13 = strcspn(lineptr, ";\t\r\n=");
          v14 = &lineptr[v13];
          if ( !v13 )
          {
            ptr = lineptr;
            goto LABEL_119;
          }
          while ( 1 )
          {
            v15 = v13--;
            v16 = lineptr[v13];
            if ( v16 != 32 && v16 != 9 )
              break;
            if ( !v13 )
            {
              v15 = 0LL;
              break;
            }
          }
          if ( *v14 == 61 )
          {
            v17 = v14 + 1;
            v104 = v14;
            v18 = strcspn(v14 + 1, ";\r\n");
            ptr = &v17[v18];
            while ( 1 )
            {
              if ( !v18 )
                goto LABEL_31;
              v19 = v104[v18];
              if ( v19 != 32 && v19 != 9 )
                break;
              --v18;
            }
            while ( 1 )
            {
              if ( !v18 )
                goto LABEL_31;
              if ( *v17 != 32 && *v17 != 9 )
                break;
              ++v17;
              --v18;
            }
            if ( memchr(v17, 9, v18) )
            {
              freecookie(v11);
              if ( (data->set.gap8BB[3] & 0x10) != 0 )
                Curl_infof(data, "cookie contains TAB, dropping");
              return 0LL;
            }
LABEL_31:
            v20 = httpheader;
          }
          else
          {
            ptr = v14;
            v17 = 0LL;
            v20 = 0;
            v18 = 0LL;
          }
          if ( v15 > 0xFFE || v18 > 0xFFE || v18 + v15 > 0x1000 )
          {
            freecookie(v11);
            if ( (data->set.gap8BB[3] & 0x10) != 0 )
              Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v15, v18);
            return 0LL;
          }
          if ( sep == 95 && v15 > 6 && lineptr[1] == 95 )
          {
            sepa = v20;
            v21 = curl_strnequal("__Secure-", lineptr, 9LL);
            v20 = sepa;
            if ( v21 )
            {
              v11->prefix |= 1u;
            }
            else
            {
              v22 = curl_strnequal("__Host-", lineptr, 7LL);
              v20 = sepa;
              if ( v22 )
                v11->prefix |= 2u;
            }
          }
          if ( !v11->name )
          {
            if ( v20 )
            {
              strstore(&v11->name, lineptr, v15);
              strstore(&v11->value, v17, v18);
              name = v11->name;
              if ( name )
              {
                value = v11->value;
                if ( value )
                {
                  if ( !value[strcspn(v11->value, &badoctets_0)] && !name[strcspn(name, &badoctets_0)] )
                    goto LABEL_119;
                  if ( (data->set.gap8BB[3] & 0x10) != 0 )
                    Curl_infof(data, "invalid octets in name/value, cookie dropped");
                }
              }
            }
            goto LABEL_213;
          }
          if ( v18 )
          {
            if ( v15 == 4 )
              goto LABEL_64;
            if ( v15 == 6 )
              goto LABEL_69;
          }
          else
          {
            if ( v15 == 6 )
            {
              sepb = v20;
              if ( (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
              {
                if ( secure || !c->running )
                {
                  v11->secure = 1;
                  goto LABEL_119;
                }
                goto LABEL_213;
              }
              if ( !sepb )
                goto LABEL_119;
LABEL_69:
              v26 = (v18 != 0) & ((unsigned int)curl_strnequal("domain", lineptr, 6LL) != 0);
              if ( !v26 )
                goto LABEL_119;
              if ( *v17 == 46 )
              {
                ++v17;
                --v18;
              }
              if ( v18 == 9 && (unsigned int)curl_strnequal(v17, "localhost", 9LL)
                || (v27 = memchr(v17, 46, v18)) != 0LL && v18 - (v27 - v17) > 1 )
              {
                v28 = domain;
                if ( !domain )
                  v28 = v17;
              }
              else
              {
                domain = ":";
                v28 = ":";
              }
              is_ipnum = Curl_host_is_ipnum(v28);
              v30 = is_ipnum;
              if ( !domain )
                goto LABEL_82;
              if ( is_ipnum )
              {
                if ( strncmp(v17, domain, v18) || strlen(domain) != v18 )
                {
LABEL_92:
                  badcookie = v26;
                  if ( (data->set.gap8BB[3] & 0x10) != 0 )
                    Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v17);
                  goto LABEL_119;
                }
              }
              else if ( !cookie_tailmatch(v17, v18, domain) )
              {
                goto LABEL_92;
              }
LABEL_82:
              strstore(&v11->domain, v17, v18);
              if ( v11->domain )
              {
                if ( !v30 )
                  v11->tailmatch = 1;
                goto LABEL_119;
              }
LABEL_213:
              freecookie(v11);
              return 0LL;
            }
            if ( v15 == 8 )
            {
              if ( (unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
                v11->httponly = 1;
              goto LABEL_119;
            }
            if ( !v20 )
              goto LABEL_119;
            if ( v15 == 4 )
            {
LABEL_64:
              if ( !(unsigned int)curl_strnequal("path", lineptr, 4LL) )
                goto LABEL_119;
              strstore(&v11->path, v17, v18);
              if ( v11->path )
              {
                Curl_cfree(v11->spath);
                v25 = sanitize_cookie_path(v11->path);
                v11->spath = v25;
                if ( v25 )
                  goto LABEL_119;
              }
              goto LABEL_213;
            }
          }
          if ( v15 == 7 && !(unsigned int)curl_strnequal("version", lineptr, 7LL) )
          {
            if ( (unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
            {
              if ( *v17 == 34 )
                ++v17;
              v31 = curlx_strtoofft(v17, 0LL, 10LL, &v11->expires);
              if ( v31 == 1 )
              {
                v32 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else
              {
                if ( v31 == 2 )
                  goto LABEL_106;
                if ( v31 )
                  goto LABEL_119;
                expires = v11->expires;
                if ( !expires )
                {
LABEL_106:
                  v11->expires = 1LL;
                  goto LABEL_119;
                }
                v32 = 0x7FFFFFFFFFFFFFFFLL;
                if ( expires <= 0x7FFFFFFFFFFFFFFFLL - now )
                  v32 = expires + now;
              }
            }
            else
            {
              if ( !(unsigned int)curl_strnequal("expires", lineptr, 7LL) || v11->expires || v18 > 0x7F )
                goto LABEL_119;
              qmemcpy(date, v17, v18);
              date[v18] = 0;
              v34 = Curl_getdate_capped(date);
              v35 = 0LL;
              v36 = v34 == 0;
              if ( v34 >= 0 )
                v35 = v34;
              v32 = 1LL;
              if ( !v36 )
                v32 = v35;
            }
            v11->expires = v32;
            goto LABEL_119;
          }
          while ( 1 )
          {
LABEL_119:
            v37 = *ptr;
            if ( !*ptr )
              goto LABEL_125;
            if ( v37 != 32 && v37 != 9 )
              break;
            ++ptr;
          }
          if ( v37 != 59 )
          {
LABEL_125:
            if ( badcookie )
              goto LABEL_213;
            if ( !v11->domain )
            {
              if ( domain )
              {
                v38 = Curl_cstrdup(domain);
                v11->domain = (char *)v38;
                if ( !v38 )
                  goto LABEL_213;
              }
            }
            if ( !v11->path )
            {
              if ( path )
              {
                v39 = strchr(path, 63);
                v40 = v39 ? (char *)Curl_memrchr(path, 47LL, v39 - path) : strrchr(path, 47);
                if ( v40 )
                {
                  v41 = v40 - path;
                  v42 = v40 - path + 1;
                  v43 = (char *)Curl_cmalloc(v40 - path + 2);
                  v11->path = v43;
                  if ( !v43 )
                    goto LABEL_213;
                  qmemcpy(v43, path, v42);
                  v11->path[v41 + 1] = 0;
                  v44 = sanitize_cookie_path(v11->path);
                  v11->spath = v44;
                  if ( !v44 )
                    goto LABEL_213;
                }
              }
            }
            if ( !v11->name )
              goto LABEL_213;
            ++data->req.setcookies;
            goto LABEL_182;
          }
          lineptr = ptr;
        }
        ++lineptr;
      }
    }
LABEL_5:
    Curl_cfree(v11);
    return 0LL;
  }
  tok_buf = 0LL;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
  {
    v11->httponly = 1;
    lineptr += 10;
  }
  if ( *lineptr == 35 )
    goto LABEL_5;
  v45 = strchr(lineptr, 13);
  if ( v45 )
    *v45 = 0;
  v46 = strchr(lineptr, 10);
  if ( v46 )
    *v46 = 0;
  v47 = 0;
  v48 = strtok_r((char *)lineptr, "\t", &tok_buf);
  v49 = v48;
  while ( 1 )
  {
    LOBYTE(v48) = !v8 && v49 != 0LL;
    v50 = (int)v48;
    if ( !(_BYTE)v48 )
      break;
    switch ( v47 )
    {
      case 0:
        if ( *v49 == 46 )
          ++v49;
        v51 = (char *)Curl_cstrdup(v49);
        v11->domain = v51;
        goto LABEL_175;
      case 1:
        v11->tailmatch = (unsigned int)curl_strequal(v49, "TRUE") != 0;
        goto LABEL_176;
      case 2:
        v52 = strcmp("TRUE", v49);
        v53 = (__int64 (__fastcall *)(const char *))Curl_cstrdup;
        if ( !v52 || !strcmp("FALSE", v49) )
        {
          v55 = v53("/");
          v8 = v50;
          v11->path = (char *)v55;
          v56 = v55;
          v57 = Curl_cstrdup("/");
          v11->spath = (char *)v57;
          if ( v57 )
            LOBYTE(v8) = v56 == 0;
LABEL_163:
          v11->secure = 0;
          if ( !(unsigned int)curl_strequal(v49, "TRUE") )
            goto LABEL_164;
          if ( secure || (v47 = 3, c->running) )
          {
            v11->secure = 1;
LABEL_164:
            v50 = v8;
            v47 = 3;
          }
        }
        else
        {
          v54 = (const char *)v53(v49);
          v11->path = (char *)v54;
          if ( v54 )
          {
            v51 = sanitize_cookie_path(v54);
            v11->spath = v51;
LABEL_175:
            LOBYTE(v50) = v51 == 0LL;
          }
        }
LABEL_177:
        ++v47;
        v8 = v50;
        v48 = strtok_r(0LL, "\t", &tok_buf);
        v49 = v48;
        break;
      case 3:
        LOBYTE(v8) = httpheader;
        goto LABEL_163;
      case 4:
        LOBYTE(v50) = (unsigned int)curlx_strtoofft(v49, 0LL, 10LL, &v11->expires) != 0;
        goto LABEL_177;
      case 5:
        v58 = Curl_cstrdup(v49);
        v11->name = (char *)v58;
        if ( !v58 )
          goto LABEL_177;
        if ( (unsigned int)curl_strnequal("__Secure-", v58, 9LL) )
        {
          v11->prefix |= 1u;
        }
        else if ( (unsigned int)curl_strnequal("__Host-", v11->name, 7LL) )
        {
          v11->prefix |= 2u;
        }
LABEL_176:
        LOBYTE(v50) = httpheader;
        goto LABEL_177;
      case 6:
        v51 = (char *)Curl_cstrdup(v49);
        v11->value = v51;
        goto LABEL_175;
      default:
        goto LABEL_176;
    }
  }
  if ( v47 == 6 )
  {
    v47 = 7;
    v59 = Curl_cstrdup(&LC1);
    v11->value = (char *)v59;
    if ( !v59 )
      goto LABEL_213;
  }
  if ( v47 != 7 || v8 )
    goto LABEL_213;
LABEL_182:
  prefix = v11->prefix;
  if ( (prefix & 1) != 0 && !v11->secure )
    goto LABEL_213;
  if ( (prefix & 2) != 0 )
  {
    if ( !v11->secure )
      goto LABEL_213;
    v61 = v11->path;
    if ( !v61 || strcmp(v61, "/") || v11->tailmatch )
      goto LABEL_213;
  }
  running = c->running;
  if ( !running && c->newsession && !v11->expires )
    goto LABEL_213;
  v11->livecookie = running;
  v63 = c->lastct + 1;
  c->lastct = v63;
  v11->creationtime = v63;
  if ( !noexpire )
    remove_expired(c);
  livecookie = 0;
  v65 = 0LL;
  v66 = 0LL;
  v67 = cookiehash(v11->domain);
  v68 = 0LL;
  myhash = v67;
  for ( i = c->cookies[v67]; i; i = i->next )
  {
    if ( !(unsigned int)curl_strequal(i->name, v11->name) )
      goto LABEL_196;
    v70 = i->domain;
    v71 = v11->domain;
    if ( v70 )
    {
      if ( !v71 || !(unsigned int)curl_strequal(v70, v71) )
        goto LABEL_196;
    }
    else if ( v71 )
    {
      goto LABEL_196;
    }
    spath = i->spath;
    if ( spath )
    {
      lastca = (Cookie *)v11->spath;
      if ( lastca )
      {
        if ( i->secure && !v11->secure && !secure )
        {
          httpheaderb = i->spath;
          v73 = strchr(spath + 1, 47);
          v74 = httpheaderb;
          if ( v73 )
          {
            v75 = v73 - httpheaderb;
          }
          else
          {
            v76 = strlen(httpheaderb);
            v74 = httpheaderb;
            v75 = v76;
          }
          if ( (unsigned int)curl_strnequal(v74, lastca, v75) )
          {
            if ( (data->set.gap8BB[3] & 0x10) != 0 )
              Curl_infof(
                data,
                "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                v11->name,
                v11->domain);
            goto LABEL_213;
          }
        }
      }
    }
LABEL_196:
    if ( v66 || !(unsigned int)curl_strequal(i->name, v11->name) )
      goto LABEL_197;
    v77 = i->domain;
    v78 = v11->domain;
    if ( v77 )
    {
      if ( !v78 || !(unsigned int)curl_strequal(v77, v78) )
      {
LABEL_218:
        if ( !livecookie )
          goto LABEL_219;
        goto LABEL_223;
      }
      v79 = i->tailmatch == v11->tailmatch;
    }
    else
    {
      v79 = v78 == 0LL;
    }
    if ( !v79 )
      goto LABEL_218;
LABEL_223:
    v80 = i->spath;
    v81 = v11->spath;
    if ( v80 && (!v81 || !(unsigned int)curl_strequal(v80, v81)) || (i->spath == 0LL) != (v11->spath == 0LL) )
    {
LABEL_219:
      livecookie = 0;
      goto LABEL_197;
    }
    livecookie = v11->livecookie;
    if ( livecookie )
    {
      v65 = i;
      v66 = v11;
    }
    else
    {
      if ( i->livecookie )
        goto LABEL_213;
      v65 = i;
      v66 = v11;
      livecookie = 1;
    }
LABEL_197:
    v68 = i;
  }
  if ( v66 )
  {
    lastcb = v68;
    v82 = v65->name;
    v66->next = v65->next;
    v66->creationtime = v65->creationtime;
    Curl_cfree(v82);
    Curl_cfree(v65->value);
    Curl_cfree(v65->domain);
    Curl_cfree(v65->path);
    Curl_cfree(v65->spath);
    v83 = 18LL;
    v84 = v65;
    v85 = v66;
    while ( v83 )
    {
      LODWORD(v84->next) = v85->next;
      v85 = (Cookie *)((char *)v85 + 4);
      v84 = (Cookie *)((char *)v84 + 4);
      --v83;
    }
    Curl_cfree(v66);
    v68 = lastcb;
    v11 = v65;
  }
  if ( c->running && (data->set.gap8BB[3] & 0x10) != 0 )
  {
    lastcc = v68;
    v86 = "Added";
    if ( livecookie )
      v86 = "Replaced";
    Curl_infof(
      data,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
      v86,
      v11->name,
      v11->value,
      v11->domain,
      v11->path,
      v11->expires);
    v68 = lastcc;
  }
  if ( !livecookie )
  {
    if ( v68 )
      v68->next = v11;
    else
      c->cookies[myhash] = v11;
    ++c->numcookies;
  }
  v87 = v11->expires;
  if ( v87 && v87 < c->next_expiration )
    c->next_expiration = v87;
  return v11;
}
