Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        int a5,
        int a6,
        int badcookie_0a,
        int noexpireb,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  time_t v13; // $v0
  char *v14; // $s6
  bool v15; // dc
  Cookie *v16; // $s0
  int v17; // $s2
  size_t v18; // $s7
  int v19; // $v0
  void (*v20)(Cookie *); // $t9
  const char *v21; // $s1
  unsigned __int8 prefix; // $v0
  int v23; // $v0
  CookieInfo *v24; // $v0
  char *v25; // $v1
  void (*v26)(Cookie *); // $t9
  bool running; // $v1
  CookieInfo *v28; // $a0
  int lastct; // $v0
  size_t v30; // $v0
  Cookie **v31; // $s5
  Cookie *v32; // $fp
  int livecookie; // $s3
  Cookie *v34; // $s2
  Cookie *v35; // $s1
  char *v36; // $a0
  char *v37; // $a1
  Cookie *next; // $s7
  char *v39; // $a0
  char *v40; // $a1
  Cookie *v41; // $a1
  char *v42; // $a0
  void (__fastcall *v43)(char *); // $t9
  Cookie *v44; // $v0
  Cookie *v45; // $a0
  Cookie *v46; // $t0
  char *v47; // $a3
  char *v48; // $a2
  char *v49; // $a1
  const char *v50; // $a2
  char *v51; // $v0
  char *v52; // $v0
  void (*v53)(Cookie *); // $a2
  unsigned int v54; // $a1
  int v55; // $v0
  size_t v56; // $fp
  _BYTE *v57; // $s5
  size_t v58; // $v0
  char *v59; // $s1
  char *v60; // $v0
  int v61; // $v0
  void (*v62)(Cookie *); // $t9
  _BOOL4 v63; // $v0
  void (*v64)(Cookie *); // $t3
  int v65; // $v0
  curl_off_t expires; // $v0
  time_t v67; // $a2
  int v68; // $a0
  time_t v69; // $a0
  unsigned int v70; // $a0
  int v71; // $v0
  unsigned int v72; // $v0
  _BYTE *v74; // $v0
  const char *v75; // $v0
  int is_ipnum; // $v0
  const char *v77; // $s2
  int v78; // $v0
  void (__fastcall *v79)(char *); // $t9
  char *value; // $a0
  const char *v81; // $v0
  const char *v82; // $s2
  int v83; // $v0
  char *name; // $v1
  int v85; // $v0
  char *v86; // $v0
  char *v87; // $a0
  char *v88; // $a1
  const char *spath; // $s6
  char *v90; // $s7
  char *v91; // $v0
  size_t v92; // $a2
  char *v93; // $a0
  char *v94; // $a1
  char *v95; // $a0
  char *v96; // $a1
  char *v97; // $a0
  char *v98; // $a1
  char *v99; // $a0
  char *v100; // $a1
  __int64 v101; // $v0
  CookieInfo *v102; // $a0
  size_t v103; // $s6
  const char *v104; // $s2
  int v105; // $v0
  int v106; // $s2
  int v107; // $v0
  int v108; // $v0
  char *v109; // $v0
  char *v110; // $v0
  const char *v111; // $s2
  int v112; // $v0
  size_t v113; // $s1
  char *v114; // $a0
  char *v115; // $v0
  int v116; // $v0
  void *v117; // $v0
  int v118; // $v0
  int v119; // $v1
  int v120; // $v0
  char *v121; // $v1
  char v122[4]; // [sp+30h] [-B8h] BYREF
  void (*v123)(Cookie *); // [sp+34h] [-B4h]
  CookieInfo *ca; // [sp+38h] [-B0h]
  _DWORD *v125; // [sp+3Ch] [-ACh]
  const char *v126; // [sp+40h] [-A8h]
  const char *v127; // [sp+44h] [-A4h]
  _BOOL4 v128; // [sp+48h] [-A0h]
  const char *v129; // [sp+4Ch] [-9Ch]
  time_t now; // [sp+50h] [-98h]
  const char *v131; // [sp+54h] [-94h]
  const char *v132; // [sp+58h] [-90h]
  int badcookie; // [sp+5Ch] [-8Ch]
  char *tok_buf; // [sp+60h] [-88h] BYREF
  char date[128]; // [sp+64h] [-84h] BYREF
  int v136; // [sp+E4h] [-4h]

  v127 = domain;
  v125 = &_stack_chk_guard;
  v129 = path;
  v128 = secure;
  ca = c;
  v14 = (char *)lineptr;
  v13 = time(0u);
  v15 = data->req.setcookies >= 0x32u;
  now = v13;
  if ( v15 )
    goto LABEL_122;
  v16 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v16 )
    goto LABEL_122;
  if ( !httpheader )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v14 = (char *)(lineptr + 10);
      v16->httponly = 1;
    }
    if ( *v14 != 35 )
    {
      v51 = strchr(v14, 13);
      if ( v51 )
        *v51 = 0;
      v52 = strchr(v14, 10);
      if ( v52 )
        *v52 = 0;
      if ( strtok_r(v14, "\t", &tok_buf) )
      {
        v123 = freecookie;
        if ( !v128 )
        {
          v126 = "TRUE";
          __asm { jr      $v0 }
        }
        v126 = "TRUE";
        __asm { jr      $v0 }
      }
      goto LABEL_152;
    }
LABEL_227:
    Curl_cfree(v16);
    goto LABEL_122;
  }
  if ( strlen(lineptr) >= 0x1389 )
    goto LABEL_227;
  v17 = *lineptr;
  v126 = (const char *)freecookie;
  v131 = "path";
  badcookie = 0;
  v132 = "domain";
  if ( v17 )
    goto LABEL_6;
LABEL_65:
  v18 = strcspn(v14, ";\t\r\n=");
  if ( !v18 )
  {
LABEL_12:
    v19 = badcookie;
    goto LABEL_13;
  }
  while ( 1 )
  {
    v53 = (void (*)(Cookie *))&v14[v18];
    do
    {
      v54 = v18--;
      v55 = v14[v18];
      if ( v55 != 32 && v55 != 9 )
      {
        v18 = v54;
        if ( *(_BYTE *)v53 == 61 )
        {
LABEL_71:
          v57 = (char *)v53 + 1;
          v123 = v53;
          v58 = strcspn((const char *)v53 + 1, v126 + 0x3924);
          v56 = v58;
          v59 = &v57[v58];
          if ( v58 )
          {
            v54 = 9;
            v60 = (char *)v123 + v58;
            while ( 1 )
            {
              v61 = *v60;
              if ( v61 != 32 && v61 != 9 )
                break;
              --v56;
              v60 = (char *)v123 + v56;
              if ( !v56 )
              {
                v62 = (void (*)(Cookie *))MEMORY[0xBD50];
                if ( v18 >= 0xFFF )
                  goto LABEL_119;
                v63 = v18 < 7;
                goto LABEL_78;
              }
            }
            v54 = 9;
            while ( 1 )
            {
              v71 = (char)*v57;
              if ( v71 != 32 && v71 != 9 )
                break;
              --v56;
              ++v57;
              if ( !v56 )
              {
                v62 = (void (*)(Cookie *))MEMORY[0xBD50];
                if ( v18 < 0xFFF )
                {
                  v72 = v18;
                  goto LABEL_117;
                }
LABEL_119:
                ((void (__fastcall *)(Cookie *, unsigned int))((char *)v62 + (__int16)freecookie))(v16, v54);
LABEL_120:
                if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
                  Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v18, v56);
                goto LABEL_122;
              }
            }
            if ( memchr(v57, 9, v56) )
            {
              freecookie(v16);
              if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
                Curl_infof(data, "cookie contains TAB, dropping");
              goto LABEL_122;
            }
            if ( v18 < 0xFFF )
            {
              v72 = v56 + v18;
              if ( v56 >= 0xFFF )
              {
                ((void (__fastcall *)(Cookie *, unsigned int))(MEMORY[0xBD50] + (__int16)freecookie))(v16, v54);
                goto LABEL_120;
              }
LABEL_117:
              v15 = v72 < 0x1001;
              v63 = v18 < 7;
              if ( v15 )
              {
LABEL_78:
                v64 = (void (*)(Cookie *))httpheader;
                if ( !v63 )
                {
LABEL_90:
                  if ( v17 == 95 && v14[1] == 95 )
                  {
                    v123 = v64;
                    v83 = curl_strnequal("__Secure-", v14, 9);
                    v64 = v123;
                    if ( v83 )
                    {
                      name = v16->name;
                      v16->prefix |= 1u;
                      if ( !name )
                        goto LABEL_145;
                      goto LABEL_92;
                    }
                    v120 = curl_strnequal("__Host-", v14, 7);
                    v64 = v123;
                    if ( v120 )
                    {
                      v121 = v16->name;
                      v16->prefix |= 2u;
                      if ( !v121 )
                        goto LABEL_145;
                      goto LABEL_92;
                    }
                  }
                  if ( !v16->name )
                    goto LABEL_145;
LABEL_92:
                  if ( !v56 )
                  {
                    if ( v18 == 8 )
                    {
                      if ( !curl_strnequal("httponly", v14, 8) )
                        goto LABEL_96;
                      v16->httponly = 1;
                      v17 = *v59;
                      v14 = v59;
                      goto LABEL_97;
                    }
                    if ( !v64 )
                      goto LABEL_96;
                  }
                  if ( v18 != 7 || curl_strnequal("version", v14, 7) )
                    goto LABEL_96;
                  if ( curl_strnequal("max-age", v14, 7) )
                  {
                    if ( *v57 == 34 )
                      ++v57;
                    v65 = curlx_strtoofft(v57, 0, 10, &v16->expires);
                    if ( v65 == 1 )
                    {
LABEL_256:
                      LODWORD(v16->expires) = -1;
                      HIDWORD(v16->expires) = 0x7FFFFFFF;
                      v17 = *v59;
                      v14 = v59;
                      goto LABEL_97;
                    }
                    if ( v65 != 2 )
                    {
                      if ( v65 )
                        goto LABEL_96;
                      expires = v16->expires;
                      if ( expires )
                      {
                        v67 = now >> 0x1F;
                        v68 = 0x7FFFFFFF - (now >> 0x1F);
                        if ( v68 >= SHIDWORD(expires) )
                        {
                          v15 = HIDWORD(expires) != v68;
                          v69 = now;
                          if ( v15 || (v69 = now, ~now >= (unsigned int)expires) )
                          {
                            v70 = expires + v69;
                            LODWORD(v16->expires) = v70;
                            HIDWORD(v16->expires) = (v70 < (unsigned int)expires) + HIDWORD(expires) + v67;
                            v17 = *v59;
                            v14 = v59;
                            goto LABEL_97;
                          }
                        }
                        goto LABEL_256;
                      }
                    }
                    v118 = 1;
                    v119 = 0;
                  }
                  else
                  {
                    if ( !curl_strnequal("expires", v14, 7) || v16->expires || v56 >= 0x80 )
                      goto LABEL_96;
                    v117 = memcpy(date, v57, v56);
                    v122[v56 + 0x34] = 0;
                    v118 = Curl_getdate_capped(v117);
                    v119 = v118 >> 0x1F;
                    if ( !v118 )
                    {
                      LODWORD(v16->expires) = 1;
                      HIDWORD(v16->expires) = 0;
                      goto LABEL_96;
                    }
                    if ( v118 < 0 )
                    {
                      v118 = 0;
                      v119 = 0;
                    }
                  }
                  LODWORD(v16->expires) = v118;
                  HIDWORD(v16->expires) = v119;
                  goto LABEL_96;
                }
LABEL_79:
                if ( !v16->name )
                  goto LABEL_145;
LABEL_80:
                if ( !v56 )
                {
                  if ( v18 == 6 )
                  {
                    v123 = v64;
                    if ( !curl_strnequal("secure", v14, 6) )
                    {
                      if ( v123 )
                        curl_strnequal("domain", v14, 6);
                      goto LABEL_96;
                    }
                    if ( v128 || !ca->running )
                    {
                      v16->secure = 1;
                      v17 = *v59;
                      v14 = v59;
                      goto LABEL_97;
                    }
                    goto LABEL_152;
                  }
                  if ( !v64 || v18 != 4 )
                    goto LABEL_96;
LABEL_161:
                  if ( curl_strnequal(v131, v14, 4) )
                  {
                    Curl_cfree(v16->path);
                    v85 = Curl_strndup(v57, v56);
                    v16->path = (char *)v85;
                    if ( !v85 )
                      goto LABEL_152;
                    Curl_cfree(v16->spath);
                    v86 = sanitize_cookie_path(v16->path);
                    v16->spath = v86;
                    if ( !v86 )
                    {
                      v20 = (void (*)(Cookie *))MEMORY[0xBD50];
                      goto LABEL_153;
                    }
                  }
                  goto LABEL_96;
                }
                if ( v18 == 4 )
                  goto LABEL_161;
                if ( v18 != 6 || !curl_strnequal(v132, v14, 6) )
                  goto LABEL_96;
                if ( *v57 == 46 )
                {
                  ++v57;
                  --v56;
                }
                if ( v56 == 9 && curl_strnequal(v57, "localhost", 9) )
                {
                  v75 = v127;
                }
                else
                {
                  v74 = memchr(v57, 46, v56);
                  if ( !v74 || (v15 = v56 - (v74 - v57) >= 2, v75 = v127, !v15) )
                  {
                    is_ipnum = Curl_host_is_ipnum(&_LC1);
                    v127 = (const char *)&_LC1;
                    goto LABEL_138;
                  }
                }
                if ( !v75 )
                {
                  v106 = Curl_host_is_ipnum(v57);
                  Curl_cfree(v16->domain);
                  v107 = Curl_strndup(v57, v56);
                  v16->domain = (char *)v107;
                  if ( v107 )
                  {
                    if ( !v106 )
                      v16->tailmatch = 1;
                    goto LABEL_96;
                  }
                  goto LABEL_152;
                }
                is_ipnum = Curl_host_is_ipnum(v75);
LABEL_138:
                v77 = v127;
                if ( is_ipnum )
                {
                  if ( !strncmp(v57, v127, v56) && strlen(v77) == v56 )
                  {
                    Curl_cfree(v16->domain);
                    v108 = Curl_strndup(v57, v56);
                    v16->domain = (char *)v108;
                    if ( !v108 )
                    {
                      v20 = freecookie;
                      goto LABEL_153;
                    }
                    goto LABEL_96;
                  }
                }
                else
                {
                  v103 = strlen(v127);
                  if ( v103 >= v56 )
                  {
                    v104 = &v127[v103 - v56];
                    if ( curl_strnequal(v57, v104, v56) )
                    {
                      if ( v56 == v103 || *(v104 - 1) == 46 )
                      {
                        Curl_cfree(v16->domain);
                        v105 = Curl_strndup(v57, v56);
                        v16->domain = (char *)v105;
                        if ( v105 )
                        {
                          v16->tailmatch = 1;
                          goto LABEL_96;
                        }
                        goto LABEL_152;
                      }
                    }
                  }
                }
                if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
                  Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v57);
                v17 = *v59;
                v14 = v59;
                badcookie = httpheader;
                goto LABEL_97;
              }
            }
          }
          else
          {
            v64 = (void (*)(Cookie *))httpheader;
            if ( v18 < 0xFFF )
            {
              v57 += v58;
LABEL_89:
              if ( v18 >= 7 )
                goto LABEL_90;
              goto LABEL_79;
            }
          }
        }
        else
        {
          v64 = 0;
          if ( v54 < 0xFFF )
          {
            v59 = (char *)v53;
            v57 = 0;
            v56 = 0;
            goto LABEL_89;
          }
          v56 = 0;
        }
        v62 = freecookie;
        goto LABEL_119;
      }
    }
    while ( v18 );
    v56 = 0;
    if ( *(_BYTE *)v53 == 61 )
      goto LABEL_71;
    v59 = (char *)v53;
    v57 = 0;
    v64 = 0;
    if ( v16->name )
      goto LABEL_80;
LABEL_145:
    if ( !v64 )
      goto LABEL_152;
    Curl_cfree(0);
    v78 = Curl_strndup(v14, v18);
    v79 = (void (__fastcall *)(char *))Curl_cfree;
    value = v16->value;
    v16->name = (char *)v78;
    v79(value);
    v81 = (const char *)Curl_strndup(v57, v56);
    v82 = v16->name;
    v16->value = (char *)v81;
    if ( !v82 || !v81 )
      goto LABEL_152;
    if ( v81[strcspn(v81, badoctets_0)] || v82[strcspn(v82, badoctets_0)] )
    {
      v20 = (void (*)(Cookie *))MEMORY[0xBD50];
      if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
      {
        Curl_infof(data, "invalid octets in name/value, cookie dropped");
        goto LABEL_152;
      }
      goto LABEL_153;
    }
LABEL_96:
    v17 = *v59;
    v14 = v59;
LABEL_97:
    v19 = badcookie;
    if ( !v17 )
      break;
    do
    {
      while ( v17 == 32 || v17 == 9 )
      {
        v17 = *++v14;
        if ( !v17 )
          goto LABEL_12;
      }
      v19 = badcookie;
      if ( v17 != 59 )
        goto LABEL_13;
      do
      {
        v17 = *++v14;
        if ( !v17 )
          goto LABEL_65;
LABEL_6:
        ;
      }
      while ( v17 == 32 || v17 == 9 );
      v18 = strcspn(v14, ";\t\r\n=");
    }
    while ( !v18 );
  }
LABEL_13:
  v20 = (void (*)(Cookie *))MEMORY[0xBD50];
  if ( v19 )
    goto LABEL_153;
  if ( !v16->domain )
  {
    if ( v127 )
    {
      v116 = Curl_cstrdup(v127);
      v16->domain = (char *)v116;
      if ( !v116 )
      {
        v20 = freecookie;
        goto LABEL_153;
      }
    }
  }
  v21 = v129;
  if ( !v16->path && v129 )
  {
    v109 = strchr(v129, 63);
    v110 = v109 ? (char *)Curl_memrchr(v21, 47, v109 - v21) : strrchr(v21, 47);
    if ( v110 )
    {
      v111 = v129;
      v112 = v110 - v129;
      v113 = v112 + 1;
      v114 = (char *)Curl_cmalloc(v112 + 2);
      v16->path = v114;
      if ( v114 )
      {
        memcpy(v114, v111, v113);
        v16->path[v113] = 0;
        v115 = sanitize_cookie_path(v16->path);
        v16->spath = v115;
        if ( !v115 )
        {
          v20 = freecookie;
          goto LABEL_153;
        }
        goto LABEL_16;
      }
LABEL_152:
      v20 = freecookie;
      goto LABEL_153;
    }
  }
LABEL_16:
  v20 = (void (*)(Cookie *))MEMORY[0xBD50];
  if ( !v16->name )
    goto LABEL_153;
  ++data->req.setcookies;
  prefix = v16->prefix;
  if ( (prefix & 1) != 0 )
  {
    v23 = prefix & 2;
    if ( !v16->secure )
      goto LABEL_152;
    v15 = v23 == 0;
    v24 = ca;
    if ( !v15 )
    {
LABEL_20:
      v25 = v16->path;
      v20 = (void (*)(Cookie *))MEMORY[0xBD50];
      if ( !v25 )
        goto LABEL_153;
      v26 = (void (*)(Cookie *))(MEMORY[0xBD50] + (__int16)freecookie);
      if ( *v25 != 47 )
        goto LABEL_154;
      if ( v25[1] )
        goto LABEL_152;
      v24 = ca;
      if ( v16->tailmatch )
        goto LABEL_152;
    }
  }
  else
  {
    v15 = (prefix & 2) == 0;
    v24 = ca;
    if ( !v15 )
    {
      if ( !v16->secure )
      {
        ((void (__fastcall *)(Cookie *))(MEMORY[0xBD50] + (__int16)freecookie))(v16);
        goto LABEL_122;
      }
      goto LABEL_20;
    }
  }
  running = v24->running;
  v28 = ca;
  if ( !running && v24->newsession )
  {
    v20 = (void (*)(Cookie *))MEMORY[0xBD50];
    if ( !v16->expires )
      goto LABEL_153;
    v28 = ca;
  }
  lastct = v28->lastct;
  v16->livecookie = running;
  v28->lastct = ++lastct;
  v16->creationtime = lastct;
  if ( !noexpire )
    remove_expired(v28);
  v30 = cookiehash(v16->domain);
  v31 = &ca->cookies[v30];
  v32 = *v31;
  if ( !*v31 )
  {
    v34 = v16;
    if ( ca->running && (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
    {
      next = 0;
      v34 = v16;
      livecookie = 0;
      v50 = "Added";
      goto LABEL_220;
    }
    goto LABEL_255;
  }
  livecookie = 0;
  v34 = 0;
  v35 = 0;
  if ( !v128 )
  {
    while ( 1 )
    {
      if ( !curl_strequal(v32->name, v16->name) )
        goto LABEL_166;
      v87 = v32->domain;
      v88 = v16->domain;
      if ( v87 )
      {
        if ( !v88 || !curl_strequal(v87, v88) )
          goto LABEL_166;
      }
      else if ( v88 )
      {
        goto LABEL_166;
      }
      spath = v32->spath;
      if ( spath )
      {
        v90 = v16->spath;
        if ( v90 )
        {
          if ( v32->secure && !v16->secure )
          {
            v91 = strchr(spath + 1, 47);
            v92 = v91 ? v91 - spath : strlen(spath);
            if ( curl_strnequal(spath, v90, v92) )
            {
              v20 = (void (*)(Cookie *))MEMORY[0xBD50];
              if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
              {
                Curl_infof(
                  data,
                  "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                  v16->name,
                  v16->domain);
                goto LABEL_152;
              }
LABEL_153:
              v26 = (void (*)(Cookie *))((char *)v20 + (__int16)freecookie);
LABEL_154:
              v26(v16);
LABEL_122:
              v34 = 0;
              goto LABEL_123;
            }
          }
        }
      }
LABEL_166:
      if ( v35 || !curl_strequal(v32->name, v16->name) )
        goto LABEL_167;
      v93 = v32->domain;
      v94 = v16->domain;
      if ( !v93 )
      {
        if ( !v94 )
        {
          v95 = v32->spath;
          goto LABEL_199;
        }
LABEL_197:
        v15 = livecookie == 0;
        livecookie = 0;
        if ( v15 )
          goto LABEL_167;
        goto LABEL_198;
      }
      if ( !v94 || !curl_strequal(v93, v94) || v16->tailmatch != v32->tailmatch )
        goto LABEL_197;
LABEL_198:
      v95 = v32->spath;
LABEL_199:
      v96 = v16->spath;
      if ( v95 )
      {
        if ( !v96 || !curl_strequal(v95, v96) )
        {
          livecookie = 0;
          goto LABEL_167;
        }
        v95 = v32->spath;
        v96 = v16->spath;
      }
      livecookie = 0;
      if ( (v96 == 0) == (v95 == 0) )
      {
        livecookie = v16->livecookie;
        v34 = v32;
        if ( v16->livecookie )
        {
          v35 = v16;
        }
        else
        {
          v20 = (void (*)(Cookie *))MEMORY[0xBD50];
          if ( v32->livecookie )
            goto LABEL_153;
          v35 = v16;
          livecookie = 1;
        }
      }
LABEL_167:
      next = v32;
      if ( !v32->next )
        goto LABEL_45;
      v32 = v32->next;
    }
  }
  while ( 2 )
  {
    if ( curl_strequal(v32->name, v16->name) )
    {
      v36 = v32->domain;
      if ( v36 )
      {
        v37 = v16->domain;
        if ( v37 )
          curl_strequal(v36, v37);
      }
    }
    if ( !v35 )
    {
      if ( !curl_strequal(v32->name, v16->name) )
      {
LABEL_190:
        next = v32;
        if ( !v32->next )
          goto LABEL_45;
        v32 = v32->next;
        continue;
      }
      v97 = v32->domain;
      v98 = v16->domain;
      if ( v97 )
      {
        if ( v98 && curl_strequal(v97, v98) && v32->tailmatch == v16->tailmatch )
        {
LABEL_208:
          v99 = v32->spath;
          goto LABEL_209;
        }
      }
      else if ( !v98 )
      {
        v99 = v32->spath;
LABEL_209:
        v100 = v16->spath;
        if ( v99 )
        {
          if ( !v100 || !curl_strequal(v99, v100) )
          {
            livecookie = 0;
            goto LABEL_190;
          }
          v99 = v32->spath;
          v100 = v16->spath;
        }
        livecookie = 0;
        if ( (v99 == 0) == (v100 == 0) )
        {
          livecookie = v16->livecookie;
          v34 = v32;
          if ( !v16->livecookie )
          {
            v20 = (void (*)(Cookie *))MEMORY[0xBD50];
            if ( v32->livecookie )
              goto LABEL_153;
            livecookie = v128;
          }
          v35 = v16;
        }
        goto LABEL_190;
      }
      v15 = livecookie == 0;
      livecookie = 0;
      if ( v15 )
        goto LABEL_190;
      goto LABEL_208;
    }
    break;
  }
  next = v32->next;
  if ( !v32->next )
  {
    next = v32;
LABEL_46:
    v41 = v34->next;
    v42 = v34->name;
    v43 = (void (__fastcall *)(char *))Curl_cfree;
    v35->creationtime = v34->creationtime;
    v35->next = v41;
    v43(v42);
    Curl_cfree(v34->value);
    Curl_cfree(v34->domain);
    Curl_cfree(v34->path);
    Curl_cfree(v34->spath);
    v44 = v35;
    v45 = v34;
    do
    {
      v46 = v44->next;
      v47 = v44->name;
      v48 = v44->value;
      v49 = v44->path;
      v44 = (Cookie *)((char *)v44 + 16);
      v45->next = v46;
      v45->name = v47;
      v45->value = v48;
      v45->path = v49;
      v45 = (Cookie *)((char *)v45 + 16);
    }
    while ( v44 != &v35[1] );
    Curl_cfree(v35);
    goto LABEL_49;
  }
  while ( 1 )
  {
    if ( curl_strequal(next->name, v16->name) )
    {
      v39 = next->domain;
      if ( v39 )
      {
        v40 = v16->domain;
        if ( v40 )
          curl_strequal(v39, v40);
      }
    }
    if ( !next->next )
      break;
    next = next->next;
  }
LABEL_45:
  if ( v35 )
    goto LABEL_46;
  v34 = v16;
LABEL_49:
  if ( ca->running && (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
  {
    if ( livecookie )
      v50 = "Replaced";
    else
      v50 = "Added";
LABEL_220:
    Curl_infof(
      data,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
      v50,
      v34->name,
      v34->value,
      v34->domain,
      v34->path,
      v34->expires);
    if ( !livecookie )
    {
      if ( next )
      {
LABEL_222:
        next->next = v34;
        goto LABEL_223;
      }
LABEL_255:
      *v31 = v34;
LABEL_223:
      ++ca->numcookies;
    }
  }
  else if ( !livecookie )
  {
    goto LABEL_222;
  }
  HIDWORD(v101) = v34->expires;
  LODWORD(v101) = HIDWORD(v34->expires);
  if ( v101 && __SPAIR64__(v101, HIDWORD(v101)) < ca->next_expiration )
  {
    v102 = ca;
    LODWORD(ca->next_expiration) = HIDWORD(v101);
    HIDWORD(v102->next_expiration) = v101;
  }
LABEL_123:
  if ( v136 != *v125 )
    _stack_chk_fail();
  return v34;
}
