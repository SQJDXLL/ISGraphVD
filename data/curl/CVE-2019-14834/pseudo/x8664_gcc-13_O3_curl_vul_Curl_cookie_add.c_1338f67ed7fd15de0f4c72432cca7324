Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  _BOOL4 v9; // ebp
  Cookie *v10; // rbx
  char v11; // bp
  const char *v12; // rsi
  size_t v13; // rax
  __int64 v14; // rdx
  __int64 v15; // rcx
  __int64 v16; // r8
  unsigned __int64 v17; // r15
  bool v18; // al
  _BYTE *v19; // r13
  size_t v20; // rax
  size_t v21; // r12
  char v22; // al
  _BYTE *v23; // rax
  char is_ipnum; // bp
  __int64 v25; // rax
  char *v26; // rax
  char *v27; // rax
  char *v28; // rax
  __int64 v29; // rdx
  char *v30; // r8
  _BOOL8 v31; // rcx
  int v32; // ebp
  char *v33; // rax
  unsigned __int8 prefix; // al
  Cookie *v35; // r14
  size_t v37; // rax
  size_t v38; // r14
  size_t v39; // r15
  int v40; // eax
  __int64 v41; // rax
  __int64 v42; // rax
  const char *name; // rbp
  char *value; // r12
  __int64 v45; // rax
  char *v46; // rax
  __int64 v47; // r8
  int v48; // eax
  curl_off_t expires; // rax
  int v50; // ebp
  char *v51; // r15
  __int64 v52; // rax
  __int64 v53; // rbp
  char v54; // r14
  void *v55; // rsi
  int v56; // eax
  const char *v57; // r8
  __int64 (__fastcall *v58)(const char *); // r15
  int v59; // eax
  const char *v60; // rax
  char *v61; // rax
  char *v62; // r15
  bool v63; // r15
  __int64 v64; // rax
  __int64 v65; // rbp
  bool v66; // r15
  int v67; // ecx
  bool v68; // dl
  int v69; // ebp
  __int64 v70; // rax
  __int64 v71; // rdx
  __int64 v72; // rax
  char *v73; // rsi
  int v74; // eax
  __int64 (__fastcall *v75)(char *); // rbp
  __int64 v76; // rax
  __int64 v77; // rbp
  __int64 v78; // rdx
  __int64 v79; // rcx
  __int64 v80; // r8
  __int64 v81; // rax
  bool v82; // bp
  __int64 v83; // rax
  __int64 v84; // rax
  bool v85; // r15
  __int64 v86; // rax
  __int64 v87; // r15
  __int64 v88; // rdx
  __int64 v89; // rcx
  __int64 v90; // r8
  __int64 v91; // rax
  __int64 v92; // rax
  char *v93; // rax
  bool running; // al
  __int64 v95; // rdx
  char *spath; // rcx
  char *v97; // r8
  size_t v98; // r12
  Cookie *v99; // r13
  char livecookie; // bp
  __m128i *v101; // r15
  Cookie *next; // rax
  char *v103; // rdi
  char *v104; // rsi
  char *v105; // rdi
  char *v106; // rsi
  char *v107; // rdi
  char *v108; // rsi
  char *v109; // rdi
  const char *v110; // rdx
  const char *v111; // rax
  const char *v112; // r9
  const char *v113; // r8
  const char *v114; // rcx
  curl_off_t v115; // rax
  int v116; // eax
  char *v117; // rax
  const char *v118; // rcx
  void *v119; // r8
  size_t v120; // rdx
  const char *v121; // rax
  char *v122; // rax
  char *v123; // rbp
  const char *v124; // rdi
  size_t v125; // rax
  char *v126; // rax
  char *v127; // rbp
  signed __int64 v128; // rbp
  char *v129; // rax
  char *v130; // rax
  char *v131; // rdi
  __int64 v132; // rax
  __int64 v133; // rax
  bool v134; // zf
  __int64 v135; // rax
  int v136; // eax
  __int64 v137; // rax
  bool v138; // bp
  bool v139; // bp
  const char *ptr; // [rsp+8h] [rbp-120h]
  const char *ptra; // [rsp+8h] [rbp-120h]
  bool ptrb; // [rsp+8h] [rbp-120h]
  const char *ptrc; // [rsp+8h] [rbp-120h]
  char ptre; // [rsp+8h] [rbp-120h]
  int ptrf; // [rsp+8h] [rbp-120h]
  const char *ptrd; // [rsp+8h] [rbp-120h]
  const char *ptrg; // [rsp+8h] [rbp-120h]
  char *s; // [rsp+10h] [rbp-118h]
  unsigned __int8 sa; // [rsp+10h] [rbp-118h]
  _BOOL4 sb; // [rsp+10h] [rbp-118h]
  unsigned __int8 sc; // [rsp+10h] [rbp-118h]
  char *sd; // [rsp+10h] [rbp-118h]
  char *se; // [rsp+10h] [rbp-118h]
  _BOOL4 httpheaderb; // [rsp+1Ch] [rbp-10Ch]
  bool v159; // [rsp+38h] [rbp-F0h]
  time_t now; // [rsp+40h] [rbp-E8h]
  bool badcookie; // [rsp+4Fh] [rbp-D9h]
  char *tok_buf; // [rsp+58h] [rbp-D0h] BYREF
  char date[128]; // [rsp+60h] [rbp-C8h] BYREF
  unsigned __int64 v165; // [rsp+E8h] [rbp-40h]

  v9 = httpheader;
  v165 = __readfsqword(0x28u);
  now = time(0LL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  v10 = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !v10 )
    return 0LL;
  if ( v9 )
  {
    badcookie = 0;
    if ( strlen(lineptr) <= 0x1388 )
    {
      v11 = *lineptr;
      if ( *lineptr )
      {
        while ( 1 )
        {
          if ( v11 != 32 && v11 != 9 )
          {
            v12 = ";\t\r\n=";
            v13 = strcspn(lineptr, ";\t\r\n=");
            v17 = v13;
            if ( v13 )
              goto LABEL_16;
LABEL_11:
            while ( v11 == 32 || v11 == 9 )
            {
              v11 = *++lineptr;
              if ( !v11 )
                goto LABEL_75;
            }
            if ( v11 != 59 )
              break;
          }
          v11 = *++lineptr;
          if ( !v11 )
            goto LABEL_15;
        }
LABEL_75:
        if ( badcookie )
          goto LABEL_84;
        if ( !v10->domain )
        {
          if ( domain )
          {
            v137 = Curl_cstrdup(domain, v12, v14, v15, v16);
            v10->domain = (char *)v137;
            if ( !v137 )
              goto LABEL_84;
          }
        }
        if ( !v10->path && path )
        {
          v126 = strchr(path, 63);
          v127 = v126 ? (char *)Curl_memrchr(path, 47LL, v126 - path) : strrchr(path, 47);
          if ( v127 )
          {
            v128 = v127 - path;
            v129 = (char *)Curl_cmalloc(v128 + 2);
            v10->path = v129;
            if ( !v129 )
              goto LABEL_84;
            memcpy(v129, path, v128 + 1);
            v10->path[v128 + 1] = 0;
            v130 = sanitize_cookie_path(v10->path);
            v10->spath = v130;
            if ( !v130 )
              goto LABEL_84;
          }
        }
        if ( !v10->name )
          goto LABEL_84;
        ++data->req.setcookies;
        prefix = v10->prefix;
        if ( (prefix & 1) != 0 )
          goto LABEL_195;
        goto LABEL_82;
      }
LABEL_15:
      v12 = ";\t\r\n=";
      v13 = strcspn(lineptr, ";\t\r\n=");
      v17 = v13;
      if ( !v13 )
        goto LABEL_75;
LABEL_16:
      v14 = (__int64)&lineptr[v17];
      while ( 1 )
      {
        v12 = (const char *)v17--;
        v15 = (unsigned __int8)lineptr[v17];
        v18 = (_BYTE)v15 == 32;
        LOBYTE(v15) = (_BYTE)v15 == 9;
        LOBYTE(v13) = v15 | v18;
        if ( !(_BYTE)v13 )
          break;
        if ( !v17 )
        {
          if ( *(_BYTE *)v14 == 61 )
            goto LABEL_20;
          if ( v10->name )
          {
LABEL_101:
            v11 = *(_BYTE *)v14;
            lineptr = (const char *)v14;
            goto LABEL_74;
          }
LABEL_84:
          freecookie(v10);
          return 0LL;
        }
      }
      v15 = (unsigned int)v13;
      v17 = (unsigned __int64)v12;
      if ( *(_BYTE *)v14 == 61 )
      {
LABEL_20:
        v19 = (_BYTE *)(v14 + 1);
        v12 = ";\r\n";
        s = (char *)v14;
        v20 = strcspn((const char *)(v14 + 1), ";\r\n");
        v14 = (__int64)s;
        v21 = v20;
        ptr = &v19[v20];
        if ( v20 )
        {
          while ( 1 )
          {
            while ( 1 )
            {
              v22 = s[v21];
              if ( v22 != 32 )
                break;
              if ( !--v21 )
                goto LABEL_26;
            }
            if ( v22 != 9 )
              break;
            if ( !--v21 )
              goto LABEL_26;
          }
          while ( *v19 == 32 || *v19 == 9 )
          {
            ++v19;
            if ( !--v21 )
              goto LABEL_61;
          }
          v12 = (_BYTE *)&loc_9;
          if ( memchr(v19, 9, v21) )
          {
            freecookie(v10);
            if ( (data->set.gap8BB[3] & 0x10) != 0 )
              Curl_infof(data, "cookie contains TAB, dropping");
            return 0LL;
          }
LABEL_61:
          if ( v17 <= 0xFFE && v21 <= 0xFFE && v17 + v21 <= 0x1000 )
          {
            v15 = httpheader;
            goto LABEL_65;
          }
LABEL_261:
          freecookie(v10);
          if ( (data->set.gap8BB[3] & 0x10) != 0 )
            Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v17, v21);
          return 0LL;
        }
LABEL_26:
        if ( v17 <= 0xFFE )
        {
          v15 = httpheader;
          v21 = 0LL;
          if ( v17 > 6 )
          {
LABEL_66:
            if ( v11 == 95 && lineptr[1] == 95 )
            {
              v12 = lineptr;
              sa = v15;
              v40 = curl_strnequal("__Secure-", lineptr, 9LL);
              v15 = sa;
              if ( v40 )
              {
                v10->prefix |= 1u;
                if ( !v10->name )
                  goto LABEL_105;
                goto LABEL_68;
              }
              v12 = lineptr;
              v136 = curl_strnequal("__Host-", lineptr, 7LL);
              v15 = sa;
              if ( v136 )
              {
                v10->prefix |= 2u;
                if ( !v10->name )
                {
LABEL_105:
                  if ( !(_BYTE)v15 )
                    goto LABEL_84;
                  Curl_cfree(0LL);
                  v41 = Curl_memdup(lineptr, v17 + 1);
                  v10->name = (char *)v41;
                  if ( v41 )
                    *(_BYTE *)(v41 + v17) = 0;
                  Curl_cfree(v10->value);
                  v42 = Curl_memdup(v19, v21 + 1);
                  v10->value = (char *)v42;
                  if ( v42 )
                    *(_BYTE *)(v42 + v21) = 0;
                  name = v10->name;
                  if ( !name )
                    goto LABEL_84;
                  value = v10->value;
                  if ( !value )
                    goto LABEL_84;
                  if ( value[strcspn(v10->value, &badoctets_0)]
                    || (v12 = &badoctets_0, name[strcspn(name, &badoctets_0)]) )
                  {
                    if ( (data->set.gap8BB[3] & 0x10) != 0 )
                      Curl_infof(data, "invalid octets in name/value, cookie dropped");
                    goto LABEL_84;
                  }
                  goto LABEL_45;
                }
                goto LABEL_68;
              }
            }
            if ( !v10->name )
              goto LABEL_105;
LABEL_68:
            if ( v21 )
              goto LABEL_71;
            if ( v17 == 8 )
            {
              v12 = lineptr;
              if ( (unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
              {
                lineptr = ptr;
                v10->httponly = 1;
                v11 = *ptr;
                goto LABEL_74;
              }
              goto LABEL_45;
            }
            if ( (_BYTE)v15 )
            {
LABEL_71:
              if ( v17 != 7 )
                goto LABEL_72;
              v12 = lineptr;
              if ( !(unsigned int)curl_strnequal("version", lineptr, 7LL) )
              {
                if ( (unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
                {
                  v12 = 0LL;
                  v48 = curlx_strtoofft(&v19[*v19 == 34], 0LL, 10LL, &v10->expires, v47);
                  switch ( v48 )
                  {
                    case 1:
                      lineptr = ptr;
                      v10->expires = 0x7FFFFFFFFFFFFFFFLL;
                      v11 = *ptr;
                      goto LABEL_74;
                    case 2:
LABEL_317:
                      lineptr = ptr;
                      v10->expires = 1LL;
                      v11 = *ptr;
                      goto LABEL_74;
                    case 0:
                      expires = v10->expires;
                      if ( expires )
                      {
                        v14 = 0x7FFFFFFFFFFFFFFFLL;
                        v15 = 0x7FFFFFFFFFFFFFFFLL - now;
                        lineptr = ptr;
                        if ( expires <= 0x7FFFFFFFFFFFFFFFLL - now )
                          v10->expires = now + expires;
                        else
                          v10->expires = 0x7FFFFFFFFFFFFFFFLL;
                        v11 = *ptr;
                        goto LABEL_74;
                      }
                      goto LABEL_317;
                  }
                }
                else
                {
                  v12 = lineptr;
                  if ( (unsigned int)curl_strnequal("expires", lineptr, 7LL) && !v10->expires && v21 <= 0x7F )
                  {
                    v12 = v19;
                    v131 = date;
                    if ( v21 >= 8 )
                    {
                      qmemcpy(date, v19, 8 * (v21 >> 3));
                      v12 = &v19[8 * (v21 >> 3)];
                      v131 = &date[8 * (v21 >> 3)];
                    }
                    v132 = 0LL;
                    if ( (v21 & 4) != 0 )
                    {
                      *(_DWORD *)v131 = *(_DWORD *)v12;
                      v132 = 4LL;
                    }
                    if ( (v21 & 2) != 0 )
                    {
                      *(_WORD *)&v131[v132] = *(_WORD *)&v12[v132];
                      v132 += 2LL;
                    }
                    if ( (v21 & 1) != 0 )
                      v131[v132] = v12[v132];
                    date[v21] = 0;
                    v133 = Curl_getdate_capped(date, v12);
                    v14 = 0LL;
                    v134 = v133 == 0;
                    if ( v133 >= 0 )
                      v14 = v133;
                    v135 = 1LL;
                    if ( !v134 )
                      v135 = v14;
                    v10->expires = v135;
                  }
                }
              }
            }
LABEL_45:
            lineptr = ptr;
            v11 = *ptr;
            goto LABEL_74;
          }
LABEL_28:
          if ( !v10->name )
            goto LABEL_105;
          if ( v21 )
          {
            if ( v17 != 4 )
            {
              if ( v17 != 6 )
              {
LABEL_72:
                lineptr = ptr;
                v33 = (char *)ptr;
LABEL_73:
                v11 = *v33;
LABEL_74:
                if ( v11 )
                  goto LABEL_11;
                goto LABEL_75;
              }
              v12 = lineptr;
              if ( !(unsigned int)curl_strnequal("domain", lineptr, 6LL) )
                goto LABEL_45;
              if ( *v19 == 46 )
              {
                ++v19;
                --v21;
              }
              if ( v21 == 9 && (v12 = "localhost", (unsigned int)curl_strnequal(v19, "localhost", 9LL))
                || (v12 = (_BYTE *)(&loc_2C + 2), (v23 = memchr(v19, 46, v21)) != 0LL) && v21 - (v23 - v19) > 1 )
              {
                if ( !domain )
                {
                  is_ipnum = Curl_host_is_ipnum(v19);
LABEL_41:
                  Curl_cfree(v10->domain);
                  v12 = (const char *)(v21 + 1);
                  v25 = Curl_memdup(v19, v21 + 1);
                  v10->domain = (char *)v25;
                  if ( !v25 )
                    goto LABEL_84;
                  *(_BYTE *)(v25 + v21) = 0;
                  if ( !v10->domain )
                    goto LABEL_84;
                  if ( !is_ipnum )
                    v10->tailmatch = 1;
                  goto LABEL_45;
                }
                is_ipnum = Curl_host_is_ipnum(domain);
                if ( is_ipnum )
                  goto LABEL_39;
              }
              else
              {
                domain = (const char *)&LC1;
                is_ipnum = Curl_host_is_ipnum(&LC1);
                if ( is_ipnum )
                {
LABEL_39:
                  v12 = domain;
                  if ( !strncmp(v19, domain, v21) && strlen(domain) == v21 )
                    goto LABEL_41;
LABEL_97:
                  if ( (data->set.gap8BB[3] & 0x10) != 0 )
                  {
                    v12 = "skipped cookie with bad tailmatch domain: %s";
                    Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v19);
                  }
                  lineptr = ptr;
                  v11 = *ptr;
                  badcookie = httpheader;
                  goto LABEL_74;
                }
              }
              v37 = strlen(domain);
              v38 = v37;
              if ( v37 >= v21 )
              {
                v39 = v37 - v21;
                v12 = &domain[v37 - v21];
                if ( (unsigned int)curl_strnequal(v19, v12, v21) )
                {
                  if ( v21 == v38 || domain[v39 - 1] == 46 )
                    goto LABEL_41;
                }
              }
              goto LABEL_97;
            }
          }
          else
          {
            v14 = (__int64)ptr;
            if ( v17 == 6 )
            {
              v12 = lineptr;
              sc = v15;
              v116 = curl_strnequal("secure", lineptr, 6LL);
              v15 = sc;
              if ( v116 )
              {
                if ( secure || !c->running )
                {
                  lineptr = ptr;
                  v10->secure = 1;
                  v11 = *ptr;
                  goto LABEL_74;
                }
                goto LABEL_84;
              }
              if ( sc )
              {
                v12 = lineptr;
                curl_strnequal("domain", lineptr, 6LL);
              }
              goto LABEL_45;
            }
            if ( !(_BYTE)v15 )
              goto LABEL_101;
            if ( v17 != 4 )
            {
              lineptr = ptr;
              v33 = (char *)ptr;
              goto LABEL_73;
            }
          }
          v12 = lineptr;
          if ( (unsigned int)curl_strnequal("path", lineptr, 4LL) )
          {
            Curl_cfree(v10->path);
            v12 = (const char *)(v21 + 1);
            v45 = Curl_memdup(v19, v21 + 1);
            v10->path = (char *)v45;
            if ( !v45 )
              goto LABEL_84;
            *(_BYTE *)(v45 + v21) = 0;
            if ( !v10->path )
              goto LABEL_84;
            Curl_cfree(v10->spath);
            v46 = sanitize_cookie_path(v10->path);
            v10->spath = v46;
            if ( !v46 )
              goto LABEL_84;
          }
          goto LABEL_45;
        }
      }
      else if ( (unsigned __int64)v12 <= 0xFFE )
      {
        ptr = (const char *)v14;
        v19 = 0LL;
        v21 = 0LL;
LABEL_65:
        if ( v17 > 6 )
          goto LABEL_66;
        goto LABEL_28;
      }
      v21 = 0LL;
      goto LABEL_261;
    }
LABEL_265:
    Curl_cfree(v10);
    return 0LL;
  }
  tok_buf = 0LL;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
  {
    v10->httponly = 1;
    lineptr += 10;
  }
  if ( *lineptr == 35 )
    goto LABEL_265;
  v26 = strchr(lineptr, 13);
  if ( v26 )
    *v26 = 0;
  v27 = strchr(lineptr, 10);
  if ( v27 )
    *v27 = 0;
  v28 = strtok_r((char *)lineptr, "\t", &tok_buf);
  v30 = v28;
  if ( !v28 )
    goto LABEL_84;
  v31 = 0LL;
  if ( secure )
  {
    sb = v9;
    v50 = 0;
    v51 = v28;
    while ( 1 )
    {
      switch ( v50 )
      {
        case 0:
          v72 = Curl_cstrdup(&v51[*v51 == 46], "\t", v29, v31, v30);
          v10->domain = (char *)v72;
          v53 = v72;
          v54 = v72 != 0;
          v51 = strtok_r(0LL, "\t", &tok_buf);
          if ( v51 && v54 )
            goto LABEL_165;
LABEL_325:
          v67 = 1;
          v68 = v53 == 0;
          goto LABEL_326;
        case 1:
LABEL_165:
          v10->tailmatch = (unsigned int)curl_strequal(v51, "TRUE", v29, v31, v30) != 0;
          v51 = strtok_r(0LL, "\t", &tok_buf);
          if ( v51 )
            goto LABEL_166;
          v138 = sb;
LABEL_332:
          v68 = v138;
          v67 = 2;
          v54 = 1;
          goto LABEL_326;
        case 2:
LABEL_166:
          v73 = v51;
          v74 = strcmp("TRUE", v51);
          v75 = (__int64 (__fastcall *)(char *))Curl_cstrdup;
          if ( v74 && (v73 = v51, strcmp("FALSE", v51)) )
          {
            v121 = (const char *)v75(v51);
            v10->path = (char *)v121;
            if ( !v121 )
              goto LABEL_190;
            v122 = sanitize_cookie_path(v121);
            v10->spath = v122;
            v123 = v122;
            v159 = v122 != 0LL;
            v54 = v122 != 0LL;
            v51 = strtok_r(0LL, "\t", &tok_buf);
            if ( !v51 || !(v31 = v159) )
            {
              v67 = 3;
              v68 = v123 == 0LL;
              goto LABEL_326;
            }
            v82 = httpheader;
          }
          else
          {
            v76 = v75("/");
            v10->path = (char *)v76;
            v77 = v76;
            v81 = Curl_cstrdup("/", v73, v78, v79, v80);
            v10->spath = (char *)v81;
            if ( !v81 )
            {
              v10->secure = 0;
              if ( (unsigned int)curl_strequal(v51, "TRUE", v29, v31, v30) )
                v10->secure = 1;
LABEL_190:
              strtok_r(0LL, "\t", &tok_buf);
              goto LABEL_84;
            }
            v82 = v77 == 0;
          }
LABEL_170:
          v10->secure = 0;
          if ( (unsigned int)curl_strequal(v51, "TRUE", v29, v31, v30) )
            v10->secure = 1;
          v54 = !v82;
          v51 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v51 || !v54 )
          {
            v68 = v82;
            v67 = 4;
            goto LABEL_326;
          }
LABEL_174:
          v69 = curlx_strtoofft(v51, 0LL, 10LL, &v10->expires, v30);
          v54 = v69 == 0;
          v51 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v51 || v69 )
          {
LABEL_329:
            v67 = 5;
            v68 = v69 != 0;
            goto LABEL_326;
          }
LABEL_176:
          v83 = Curl_cstrdup(v51, "\t", v29, v31, v30);
          v10->name = (char *)v83;
          if ( !v83 )
          {
LABEL_191:
            strtok_r(0LL, "\t", &tok_buf);
            v71 = 1LL;
            goto LABEL_192;
          }
          if ( (unsigned int)curl_strnequal("__Secure-", v83, 9LL) )
          {
            v10->prefix |= 1u;
          }
          else if ( (unsigned int)curl_strnequal("__Host-", v10->name, 7LL) )
          {
            v10->prefix |= 2u;
          }
          v51 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v51 )
          {
            v71 = sb;
            goto LABEL_192;
          }
LABEL_180:
          v84 = Curl_cstrdup(v51, "\t", v29, v31, v30);
          v10->value = (char *)v84;
          v65 = v84;
          v85 = v84 != 0;
          v54 = v84 != 0;
          if ( !strtok_r(0LL, "\t", &tok_buf) || !v85 )
          {
LABEL_339:
            v67 = 7;
            v68 = v65 == 0;
            goto LABEL_326;
          }
          if ( !strtok_r(0LL, "\t", &tok_buf) )
          {
            v139 = sb;
LABEL_338:
            v68 = v139;
            v67 = 8;
            v54 = 1;
LABEL_326:
            if ( v67 != 7 && v54 )
              goto LABEL_84;
            goto LABEL_193;
          }
          v50 = 8;
LABEL_184:
          ++v50;
          v51 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v51 )
          {
            v67 = v50;
            v54 = secure;
            v68 = sb;
            goto LABEL_326;
          }
          break;
        case 3:
          v82 = httpheader;
          goto LABEL_170;
        case 4:
          goto LABEL_174;
        case 5:
          goto LABEL_176;
        case 6:
          goto LABEL_180;
        default:
          goto LABEL_184;
      }
    }
  }
  httpheaderb = v9;
  v32 = 0;
  while ( 2 )
  {
    switch ( v32 )
    {
      case 0:
        v52 = Curl_cstrdup(&v30[*v30 == 46], "\t", v29, v31, &v30[*v30 == 46]);
        v10->domain = (char *)v52;
        v53 = v52;
        v54 = v52 != 0;
        v30 = strtok_r(0LL, "\t", &tok_buf);
        if ( !v30 || !v54 )
          goto LABEL_325;
        goto LABEL_136;
      case 1:
LABEL_136:
        v10->tailmatch = (unsigned int)curl_strequal(v30, "TRUE", v29, v31, v30) != 0;
        v30 = strtok_r(0LL, "\t", &tok_buf);
        if ( v30 )
          goto LABEL_137;
        v138 = httpheaderb;
        goto LABEL_332;
      case 2:
LABEL_137:
        v55 = v30;
        ptra = v30;
        v56 = strcmp("TRUE", v30);
        v57 = ptra;
        v58 = (__int64 (__fastcall *)(const char *))Curl_cstrdup;
        if ( v56 && (v55 = (void *)ptra, v59 = strcmp("FALSE", ptra), v57 = ptra, v59) )
        {
          v60 = (const char *)v58(ptra);
          v10->path = (char *)v60;
          if ( !v60 )
            goto LABEL_190;
          v61 = sanitize_cookie_path(v60);
          v10->spath = v61;
          v62 = v61;
          ptrb = v61 != 0LL;
          v54 = v61 != 0LL;
          v30 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v30 || !(v31 = ptrb) )
          {
            v67 = 3;
            v68 = v62 == 0LL;
            goto LABEL_326;
          }
          v63 = secure;
        }
        else
        {
          ptrc = v57;
          v86 = v58("/");
          v10->path = (char *)v86;
          v87 = v86;
          v91 = Curl_cstrdup("/", v55, v88, v89, v90);
          v30 = (char *)ptrc;
          v10->spath = (char *)v91;
          if ( !v91 )
          {
            v10->secure = 0;
            if ( !(unsigned int)curl_strequal(ptrc, "TRUE", v29, v31, ptrc) )
              goto LABEL_190;
            v63 = 1;
            goto LABEL_152;
          }
          v63 = v87 == 0;
        }
LABEL_151:
        v10->secure = 0;
        if ( !(unsigned int)curl_strequal(v30, "TRUE", v29, v31, v30) )
          goto LABEL_154;
LABEL_152:
        if ( !c->running )
          goto LABEL_190;
        v10->secure = 1;
LABEL_154:
        v54 = !v63;
        v30 = strtok_r(0LL, "\t", &tok_buf);
        if ( !v30 || !v54 )
        {
          v68 = v63;
          v67 = 4;
          goto LABEL_326;
        }
LABEL_156:
        v69 = curlx_strtoofft(v30, 0LL, 10LL, &v10->expires, v30);
        v54 = v69 == 0;
        v30 = strtok_r(0LL, "\t", &tok_buf);
        if ( !v30 || v69 )
          goto LABEL_329;
LABEL_158:
        v70 = Curl_cstrdup(v30, "\t", v29, v31, v30);
        v10->name = (char *)v70;
        if ( !v70 )
          goto LABEL_191;
        if ( (unsigned int)curl_strnequal("__Secure-", v70, 9LL) )
        {
          v10->prefix |= 1u;
        }
        else if ( (unsigned int)curl_strnequal("__Host-", v10->name, 7LL) )
        {
          v10->prefix |= 2u;
        }
        v30 = strtok_r(0LL, "\t", &tok_buf);
        if ( v30 )
        {
LABEL_144:
          v64 = Curl_cstrdup(v30, "\t", v29, v31, v30);
          v10->value = (char *)v64;
          v65 = v64;
          v66 = v64 != 0;
          v54 = v64 != 0;
          if ( !strtok_r(0LL, "\t", &tok_buf) || !v66 )
            goto LABEL_339;
          if ( !strtok_r(0LL, "\t", &tok_buf) )
          {
            v139 = httpheaderb;
            goto LABEL_338;
          }
          v32 = 8;
LABEL_148:
          ++v32;
          v30 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v30 )
          {
            v67 = v32;
            v54 = 1;
            v68 = 0;
            goto LABEL_326;
          }
          continue;
        }
        v71 = httpheaderb;
LABEL_192:
        ptre = v71;
        v92 = Curl_cstrdup(&LC24, "\t", v71, v31, v30);
        v68 = ptre;
        v10->value = (char *)v92;
        if ( !v92 )
          goto LABEL_84;
LABEL_193:
        if ( v68 )
          goto LABEL_84;
        prefix = v10->prefix;
        if ( (prefix & 1) != 0 )
        {
LABEL_195:
          if ( !v10->secure )
            goto LABEL_84;
          if ( (prefix & 2) != 0 )
            goto LABEL_197;
          goto LABEL_201;
        }
LABEL_82:
        if ( (prefix & 2) != 0 )
        {
          if ( !v10->secure )
            goto LABEL_84;
LABEL_197:
          v93 = v10->path;
          if ( !v93 || *v93 != 47 || v93[1] || v10->tailmatch )
            goto LABEL_84;
        }
LABEL_201:
        running = c->running;
        if ( !running && c->newsession && !v10->expires )
          goto LABEL_84;
        v10->livecookie = running;
        ptrf = c->lastct;
        c->lastct = ptrf + 1;
        v10->creationtime = ptrf + 1;
        if ( !noexpire )
          remove_expired(c);
        v98 = cookiehash(v10->domain);
        v99 = c->cookies[v98];
        if ( !v99 )
        {
          if ( c->running && (data->set.gap8BB[3] & 0x10) != 0 )
          {
            v111 = v10->path;
            v112 = v10->domain;
            v35 = v10;
            livecookie = 0;
            v113 = v10->value;
            v114 = v10->name;
            v110 = "Added";
            goto LABEL_241;
          }
          v35 = v10;
          goto LABEL_279;
        }
        livecookie = 0;
        v35 = 0LL;
        v101 = 0LL;
        while ( 2 )
        {
          if ( (unsigned int)curl_strequal(v99->name, v10->name, v95, spath, v97) )
          {
            v103 = v99->domain;
            v104 = v10->domain;
            if ( v103 )
            {
              if ( v104 && (unsigned int)curl_strequal(v103, v104, v95, spath, v97) )
              {
LABEL_214:
                spath = v99->spath;
                if ( spath )
                {
                  v97 = v10->spath;
                  ptrd = v97;
                  if ( v97 )
                  {
                    if ( v99->secure && !v10->secure && !secure )
                    {
                      sd = v99->spath;
                      v117 = strchr(spath + 1, 47);
                      v118 = sd;
                      v119 = (void *)ptrd;
                      if ( v117 )
                      {
                        v120 = v117 - sd;
                      }
                      else
                      {
                        v124 = sd;
                        se = (char *)ptrd;
                        ptrg = v118;
                        v125 = strlen(v124);
                        v119 = se;
                        v118 = ptrg;
                        v120 = v125;
                      }
                      if ( (unsigned int)curl_strnequal(v118, v119, v120) )
                      {
                        if ( (data->set.gap8BB[3] & 0x10) != 0 )
                          Curl_infof(
                            data,
                            "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                            v10->name,
                            v10->domain);
                        goto LABEL_84;
                      }
                    }
                  }
                }
              }
            }
            else if ( !v104 )
            {
              goto LABEL_214;
            }
          }
          if ( v101 || !(unsigned int)curl_strequal(v99->name, v10->name, v95, spath, v97) )
            goto LABEL_208;
          v105 = v99->domain;
          v106 = v10->domain;
          if ( v105 )
          {
            if ( !v106 || !(unsigned int)curl_strequal(v105, v106, v95, spath, v97) || v99->tailmatch != v10->tailmatch )
              goto LABEL_225;
          }
          else if ( v106 )
          {
LABEL_225:
            if ( !livecookie )
              goto LABEL_234;
          }
          v107 = v99->spath;
          v108 = v10->spath;
          if ( !v107 )
          {
LABEL_230:
            LOBYTE(v95) = v107 == 0LL;
            if ( (v107 == 0LL) != (v10->spath == 0LL) )
              goto LABEL_234;
            livecookie = v10->livecookie;
            if ( livecookie )
            {
              v35 = v99;
              v101 = (__m128i *)v10;
            }
            else
            {
              if ( v99->livecookie )
                goto LABEL_84;
              v35 = v99;
              v101 = (__m128i *)v10;
              livecookie = 1;
            }
LABEL_208:
            next = v99->next;
            if ( !v99->next )
              goto LABEL_235;
LABEL_209:
            v99 = next;
            continue;
          }
          break;
        }
        if ( v108 && (unsigned int)curl_strequal(v107, v108, v95, spath, v97) )
        {
          v107 = v99->spath;
          goto LABEL_230;
        }
LABEL_234:
        next = v99->next;
        livecookie = 0;
        if ( v99->next )
          goto LABEL_209;
LABEL_235:
        if ( v101 )
        {
          v109 = v35->name;
          v101->m128i_i64[0] = (__int64)v35->next;
          v101[3].m128i_i32[3] = v35->creationtime;
          Curl_cfree(v109);
          Curl_cfree(v35->value);
          Curl_cfree(v35->domain);
          Curl_cfree(v35->path);
          Curl_cfree(v35->spath);
          *(__m128i *)&v35->next = _mm_loadu_si128(v101);
          *(__m128i *)&v35->value = _mm_loadu_si128(v101 + 1);
          *(__m128i *)&v35->spath = _mm_loadu_si128(v101 + 2);
          *(__m128i *)&v35->expires = _mm_loadu_si128(v101 + 3);
          *(_QWORD *)&v35->prefix = v101[4].m128i_i64[0];
          Curl_cfree(v101);
        }
        else
        {
          v35 = v10;
        }
        if ( !c->running || (data->set.gap8BB[3] & 0x10) == 0 )
        {
          if ( livecookie )
            goto LABEL_242;
          goto LABEL_248;
        }
        v110 = "Added";
        v111 = v35->path;
        v112 = v35->domain;
        v113 = v35->value;
        v114 = v35->name;
        if ( livecookie )
          v110 = "Replaced";
LABEL_241:
        Curl_infof(
          data,
          "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
          v110,
          v114,
          v113,
          v112,
          v111,
          v35->expires);
        if ( !livecookie )
        {
          if ( !v99 )
          {
LABEL_279:
            c->cookies[v98] = v35;
            goto LABEL_249;
          }
LABEL_248:
          v99->next = v35;
LABEL_249:
          ++c->numcookies;
        }
LABEL_242:
        v115 = v35->expires;
        if ( v115 && v115 < c->next_expiration )
          c->next_expiration = v115;
        return v35;
      case 3:
        v63 = secure;
        goto LABEL_151;
      case 4:
        goto LABEL_156;
      case 5:
        goto LABEL_158;
      case 6:
        goto LABEL_144;
      default:
        goto LABEL_148;
    }
  }
}
