Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  _BOOL4 v9; // w24
  Cookie *v11; // x19
  int v12; // w22
  size_t v14; // x25
  const char *v15; // x27
  size_t v16; // x0
  _BOOL4 v17; // w6
  _BYTE *v18; // x23
  size_t v19; // x26
  size_t v20; // x6
  _BOOL4 v21; // w1
  char *v22; // x0
  char *v23; // x0
  char *v24; // x0
  int v25; // w28
  char *v26; // x2
  int v27; // w0
  const char *v28; // x2
  __int64 (__fastcall *v29)(const char *); // x26
  int v30; // w0
  const char *v31; // x0
  char *v32; // x0
  _BOOL4 v33; // w25
  int v34; // w20
  __int64 v35; // x26
  __int64 v36; // x0
  bool v37; // zf
  bool v38; // zf
  unsigned __int8 prefix; // w0
  Cookie *v40; // x24
  bool v41; // zf
  bool v42; // cc
  int v43; // w22
  _BYTE *v44; // x0
  const char *v45; // x0
  const char *v46; // x25
  char *v47; // x0
  __int64 v48; // x0
  __int64 v49; // x0
  int v50; // w0
  int v52; // t1
  char *v55; // x0
  int lastct; // w0
  size_t v57; // x27
  Cookie *v58; // x20
  int livecookie; // w25
  Cookie *v60; // x23
  char *v61; // x0
  char *v62; // x1
  const char *spath; // x28
  char *v64; // x26
  __int64 v65; // x0
  char *v66; // x0
  _BYTE *v67; // x0
  int v68; // w0
  curl_off_t expires; // x0
  __int64 v71; // x0
  bool v72; // zf
  int v73; // w0
  __int64 v74; // x0
  const char *v76; // x0
  const char *name; // x22
  size_t v79; // x0
  size_t v80; // x28
  const char *v81; // x25
  __int64 v82; // x0
  __int64 v83; // x0
  int is_ipnum; // w22
  __int64 v85; // x0
  char *v86; // x0
  size_t v87; // x2
  char *v88; // x0
  char *v89; // x1
  char *v90; // x0
  char *v91; // x1
  int creationtime; // w2
  char *v93; // x0
  __int128 v94; // q1
  void (__fastcall *v95)(Cookie *); // x1
  __int128 v96; // q1
  curl_off_t v97; // x0
  int v98; // w0
  __int64 v99; // x0
  char *v100; // x0
  char *v101; // x0
  signed __int64 v102; // x0
  size_t v103; // x20
  char *v104; // x0
  char *v105; // x0
  __int64 v106; // x0
  const char *domainb; // [xsp+68h] [xbp+68h]
  const char *domainc; // [xsp+68h] [xbp+68h]
  _BOOL4 securea; // [xsp+70h] [xbp+70h]
  _BOOL4 noexpirea; // [xsp+74h] [xbp+74h]
  time_t now; // [xsp+80h] [xbp+80h]
  int badcookie; // [xsp+90h] [xbp+90h]
  _BOOL4 v116; // [xsp+94h] [xbp+94h]
  _BOOL4 v117; // [xsp+94h] [xbp+94h]
  char *tok_buf; // [xsp+A0h] [xbp+A0h] BYREF
  char date[128]; // [xsp+A8h] [xbp+A8h] BYREF

  v9 = httpheader;
  noexpirea = noexpire;
  securea = secure;
  now = time(0uLL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  v11 = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !v11 )
    return 0LL;
  if ( v9 )
  {
    badcookie = 0;
    if ( strlen(lineptr) > 0x1388 )
    {
      v40 = 0LL;
      Curl_cfree(v11);
      return v40;
    }
    v12 = *(unsigned __int8 *)lineptr;
    if ( *lineptr )
      goto LABEL_6;
LABEL_13:
    v14 = strcspn(lineptr, ";\t\r\n=");
    if ( !v14 )
      goto LABEL_107;
LABEL_14:
    v15 = &lineptr[v14];
    while ( 1 )
    {
      v16 = v14--;
      v17 = lineptr[v14] == 32 || lineptr[v14] == 9;
      if ( !v17 )
        break;
      if ( !v14 )
      {
        if ( *v15 == 61 )
          goto LABEL_18;
        if ( v11->name )
        {
LABEL_99:
          lineptr = v15;
          goto LABEL_100;
        }
LABEL_57:
        v40 = 0LL;
        freecookie(v11);
        return v40;
      }
    }
    v14 = v16;
    if ( *v15 == 61 )
    {
LABEL_18:
      v18 = v15 + 1;
      v19 = strcspn(v15 + 1, ";\r\n");
      v15 += v19 + 1;
      if ( v19 )
      {
        while ( 1 )
        {
          v20 = v19 - 1;
          v21 = v18[v19 - 1] == 32 || v18[v19 - 1] == 9;
          if ( !v21 )
            break;
          --v19;
          if ( !v20 )
            goto LABEL_21;
        }
        while ( 1 )
        {
          v17 = *v18 == 32 || *v18 == 9;
          if ( !v17 )
            break;
          ++v18;
          if ( !--v19 )
            goto LABEL_62;
        }
        if ( memchr(v18, 9, v19) )
        {
          freecookie(v11);
          if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
          {
            v40 = 0LL;
            Curl_infof(data, "cookie contains TAB, dropping");
            return v40;
          }
          return 0LL;
        }
        v17 = v9;
        v21 = v19 > 0xFFE;
      }
      else
      {
LABEL_21:
        v17 = v9;
        v21 = 0;
      }
    }
    else
    {
      v21 = 0;
      v18 = 0LL;
      v19 = 0LL;
    }
LABEL_62:
    v41 = v14 <= 0xFFE && !v21;
    if ( v41 && v19 + v14 <= 0x1000 )
    {
      v42 = v12 == 95 && v14 > 6;
      if ( v42 && lineptr[1] == 95 )
      {
        v116 = v17;
        v73 = curl_strnequal("__Secure-", lineptr, 9LL);
        v17 = v116;
        if ( v73 )
        {
          v11->prefix |= 1u;
        }
        else
        {
          v98 = curl_strnequal("__Host-", lineptr, 7LL);
          v17 = v116;
          if ( v98 )
            v11->prefix |= 2u;
        }
      }
      if ( !v11->name )
      {
        if ( v17 )
        {
          Curl_cfree(0LL);
          v11->name = (char *)Curl_strndup(lineptr, v14);
          Curl_cfree(v11->value);
          v76 = (const char *)Curl_strndup(v18, v19);
          v11->value = (char *)v76;
          name = v11->name;
          if ( v76 && name != 0LL )
          {
            if ( !v76[strcspn(v76, badoctets_0)] && !name[strcspn(name, badoctets_0)] )
              goto LABEL_99;
            if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
              Curl_infof(data, "invalid octets in name/value, cookie dropped");
          }
        }
        goto LABEL_57;
      }
      if ( v19 )
      {
        if ( v14 != 4 )
          goto LABEL_75;
      }
      else
      {
        if ( v14 == 6 )
        {
          v117 = v17;
          if ( (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
          {
            if ( !securea && c->running )
              goto LABEL_57;
            lineptr = v15;
            v11->secure = 1;
            goto LABEL_100;
          }
          if ( !v117 )
            goto LABEL_99;
LABEL_76:
          v43 = (v19 != 0) & ((unsigned int)curl_strnequal("domain", lineptr, 6LL) != 0);
          if ( !v43 )
            goto LABEL_99;
          if ( *v18 == 46 )
          {
            ++v18;
            --v19;
          }
          if ( v19 != 9 || !(unsigned int)curl_strnequal(v18, "localhost", 9LL) )
          {
            v44 = memchr(v18, 46, v19);
            if ( !v44 || v19 - (v44 - v18) <= 1 )
            {
              v45 = (const char *)&unk_24A0;
              domain = (const char *)&unk_24A0;
LABEL_83:
              v46 = v45;
              if ( (unsigned __int8)Curl_host_is_ipnum(v45) )
              {
                if ( !strncmp(v18, v46, v19) && strlen(v46) == v19 )
                {
                  Curl_cfree(v11->domain);
                  v99 = Curl_strndup(v18, v19);
                  v11->domain = (char *)v99;
                  if ( v99 )
                    goto LABEL_99;
                  goto LABEL_57;
                }
                goto LABEL_86;
              }
              v79 = strlen(domain);
              v80 = v79;
              if ( v19 > v79
                || (v81 = &domain[v79 - v19], !(unsigned int)curl_strnequal(v18, v81, v19))
                || v19 != v80 && *(v81 - 1) != 46 )
              {
LABEL_86:
                lineptr = v15;
                badcookie = v43;
                if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
                  Curl_infof(data, "skipped cookie with bad tailmatch domain: %s");
                goto LABEL_100;
              }
              Curl_cfree(v11->domain);
              v82 = Curl_strndup(v18, v19);
              v11->domain = (char *)v82;
              if ( !v82 )
                goto LABEL_57;
LABEL_227:
              lineptr = v15;
              v11->tailmatch = 1;
              goto LABEL_100;
            }
          }
          v45 = domain;
          if ( domain )
            goto LABEL_83;
          is_ipnum = (unsigned __int8)Curl_host_is_ipnum(v18);
          Curl_cfree(v11->domain);
          v85 = Curl_strndup(v18, v19);
          v11->domain = (char *)v85;
          if ( !v85 )
            goto LABEL_57;
          lineptr = v15;
          if ( !is_ipnum )
            goto LABEL_227;
LABEL_100:
          v12 = *(unsigned __int8 *)v15;
          if ( *v15 )
          {
            while ( v12 == 32 || v12 == 9 )
            {
              v52 = *(unsigned __int8 *)++lineptr;
              v12 = v52;
              if ( !v52 )
                goto LABEL_107;
            }
            while ( v12 == 59 )
            {
              do
              {
                v12 = *(unsigned __int8 *)++lineptr;
                if ( !v12 )
                  goto LABEL_13;
LABEL_6:
                ;
              }
              while ( v12 == 32 || v12 == 9 );
              v14 = strcspn(lineptr, ";\t\r\n=");
              if ( v14 )
                goto LABEL_14;
            }
          }
LABEL_107:
          if ( badcookie )
            goto LABEL_57;
          if ( !v11->domain && domain != 0LL )
          {
            v106 = Curl_cstrdup(domain);
            v11->domain = (char *)v106;
            if ( !v106 )
              goto LABEL_57;
          }
          if ( !v11->path && path != 0LL )
          {
            v100 = strchr(path, 63);
            v101 = v100 ? (char *)Curl_memrchr(path, 47LL, v100 - path) : strrchr(path, 47);
            if ( v101 )
            {
              v102 = v101 - path;
              v103 = v102 + 1;
              v104 = (char *)Curl_cmalloc(v102 + 2);
              v11->path = v104;
              if ( !v104 )
                goto LABEL_57;
              memcpy(v104, path, v103);
              v11->path[v103] = 0;
              v105 = sanitize_cookie_path(v11->path);
              v11->spath = v105;
              if ( !v105 )
                goto LABEL_57;
            }
          }
          if ( !v11->name )
            goto LABEL_57;
          ++data->req.setcookies;
          prefix = v11->prefix;
          if ( (prefix & 1) != 0 )
            goto LABEL_120;
LABEL_55:
          if ( (prefix & 2) != 0 )
          {
            if ( !v11->secure )
              goto LABEL_57;
            goto LABEL_122;
          }
          goto LABEL_126;
        }
        if ( v14 == 8 )
        {
          if ( !(unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
            goto LABEL_99;
          lineptr = v15;
          v11->httponly = 1;
          goto LABEL_100;
        }
        if ( !v17 )
          goto LABEL_99;
        if ( v14 != 4 )
        {
LABEL_75:
          if ( v14 != 6 )
          {
            if ( v14 != 7 || (unsigned int)curl_strnequal("version", lineptr, 7LL) )
              goto LABEL_99;
            if ( !(unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
            {
              if ( (unsigned int)curl_strnequal("expires", lineptr, 7LL) )
              {
                if ( v19 <= 0x7F && v11->expires == 0 )
                {
                  *((_BYTE *)memcpy(date, v18, v19) + v19) = 0;
                  v71 = Curl_getdate_capped();
                  v72 = v71 == 0;
                  if ( v71 < 0 )
                    v71 = 0LL;
                  if ( v72 )
                    v71 = 1LL;
                  v11->expires = v71;
                }
              }
              goto LABEL_99;
            }
            if ( *v18 == 34 )
              v67 = v18 + 1;
            else
              v67 = v18;
            v68 = curlx_strtoofft(v67, 0LL, 10LL, &v11->expires);
            if ( v68 == 1 )
            {
              lineptr = v15;
              v11->expires = 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              if ( v68 == 2 )
                goto LABEL_278;
              if ( v68 )
                goto LABEL_99;
              expires = v11->expires;
              if ( !expires )
              {
LABEL_278:
                lineptr = v15;
                v11->expires = 1LL;
              }
              else
              {
                lineptr = v15;
                if ( expires <= 0x7FFFFFFFFFFFFFFFLL - now )
                  v11->expires = expires + now;
                else
                  v11->expires = 0x7FFFFFFFFFFFFFFFLL;
              }
            }
            goto LABEL_100;
          }
          goto LABEL_76;
        }
      }
      if ( !(unsigned int)curl_strnequal("path", lineptr, v14) )
        goto LABEL_99;
      Curl_cfree(v11->path);
      v65 = Curl_strndup(v18, v19);
      v11->path = (char *)v65;
      if ( v65 )
      {
        Curl_cfree(v11->spath);
        v66 = sanitize_cookie_path(v11->path);
        v11->spath = v66;
        if ( v66 )
          goto LABEL_99;
      }
      goto LABEL_57;
    }
    freecookie(v11);
    if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
    {
      v40 = 0LL;
      Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v14, v19);
      return v40;
    }
    return 0LL;
  }
  tok_buf = 0LL;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
  {
    lineptr += 0xA;
    v11->httponly = 1;
  }
  if ( *lineptr == 35 )
  {
    Curl_cfree(v11);
    return 0LL;
  }
  v22 = strchr(lineptr, 13);
  if ( v22 )
    *v22 = 0;
  v23 = strchr(lineptr, 10);
  if ( v23 )
    *v23 = 0;
  v24 = (char *)lineptr;
  v25 = 0;
  v26 = strtok_r(v24, "\t", &tok_buf);
  if ( !v26 )
    goto LABEL_189;
  do
  {
    if ( v25 == 3 )
    {
      v11->secure = 0;
      v33 = 0;
      if ( !(unsigned int)curl_strequal(v26, "TRUE") )
        goto LABEL_41;
      goto LABEL_186;
    }
    if ( v25 > 3 )
    {
      if ( v25 != 5 )
      {
        if ( v25 == 6 )
        {
          v25 = 7;
          v49 = Curl_cstrdup(v26);
          v33 = v49 == 0;
          v34 = v49 != 0;
          v11->value = (char *)v49;
          goto LABEL_42;
        }
        if ( v25 == 4 )
        {
          v50 = curlx_strtoofft(v26, 0LL, 10LL, &v11->expires);
          v33 = v50 != 0;
          v34 = v50 == 0;
          v25 = 5;
          goto LABEL_42;
        }
LABEL_191:
        ++v25;
        v33 = 0;
        v34 = 1;
        goto LABEL_42;
      }
      v74 = Curl_cstrdup(v26);
      v11->name = (char *)v74;
      if ( !v74 )
      {
        v33 = 1;
        strtok_r(0uLL, "\t", &tok_buf);
LABEL_218:
        v83 = Curl_cstrdup(&unk_25E8);
        v11->value = (char *)v83;
        if ( v83 && !v33 )
          goto LABEL_54;
        goto LABEL_189;
      }
      if ( (unsigned int)curl_strnequal("__Secure-", v74, 9LL) )
      {
        v34 = 1;
        v33 = 0;
        v25 = 6;
        v11->prefix |= 1u;
      }
      else
      {
        v33 = 0;
        v25 = 6;
        v34 = 1;
        if ( (unsigned int)curl_strnequal("__Host-", v11->name, 7LL) )
          v11->prefix |= 2u;
      }
    }
    else
    {
      if ( v25 == 1 )
      {
        v33 = 0;
        v25 = 2;
        v34 = 1;
        v11->tailmatch = (unsigned int)curl_strequal(v26, "TRUE") != 0;
        goto LABEL_42;
      }
      if ( v25 == 2 )
      {
        domainb = v26;
        v27 = strcmp("TRUE", v26);
        v28 = domainb;
        v29 = (__int64 (__fastcall *)(const char *))Curl_cstrdup;
        if ( v27 )
        {
          v30 = strcmp("FALSE", domainb);
          v28 = domainb;
          if ( v30 )
          {
            v31 = (const char *)v29(domainb);
            v11->path = (char *)v31;
            if ( !v31 )
              goto LABEL_188;
            v32 = sanitize_cookie_path(v31);
            v33 = v32 == 0LL;
            v34 = v32 != 0LL;
            v25 = 3;
            v11->spath = v32;
            goto LABEL_42;
          }
        }
        domainc = v28;
        v35 = v29(byte_2498);
        v11->path = (char *)v35;
        v33 = 1;
        v36 = Curl_cstrdup(byte_2498);
        v11->spath = (char *)v36;
        if ( v36 )
          v33 = v35 == 0;
        v11->secure = 0;
        if ( !(unsigned int)curl_strequal(domainc, "TRUE") )
        {
LABEL_41:
          v34 = !v33;
          v25 = 4;
          goto LABEL_42;
        }
LABEL_186:
        if ( securea || c->running )
        {
          v34 = !v33;
          v25 = 4;
          v11->secure = 1;
          goto LABEL_42;
        }
LABEL_188:
        strtok_r(0uLL, "\t", &tok_buf);
LABEL_189:
        freecookie(v11);
        return 0LL;
      }
      if ( v25 )
        goto LABEL_191;
      v25 = 1;
      if ( *v26 == 46 )
        v47 = v26 + 1;
      else
        v47 = v26;
      v48 = Curl_cstrdup(v47);
      v33 = v48 == 0;
      v34 = v48 != 0;
      v11->domain = (char *)v48;
    }
LABEL_42:
    v26 = strtok_r(0uLL, "\t", &tok_buf);
    if ( v26 )
      v37 = v34 == 0;
    else
      v37 = 1;
  }
  while ( !v37 );
  if ( v25 == 6 )
    goto LABEL_218;
  if ( v34 )
    v38 = v25 == 7;
  else
    v38 = 1;
  if ( !v38 || v33 )
    goto LABEL_189;
LABEL_54:
  prefix = v11->prefix;
  if ( (prefix & 1) == 0 )
    goto LABEL_55;
LABEL_120:
  if ( !v11->secure )
    goto LABEL_57;
  if ( (prefix & 2) != 0 )
  {
LABEL_122:
    v55 = v11->path;
    if ( !v55 || *v55 != 47 || v55[1] || v11->tailmatch )
      goto LABEL_57;
  }
LABEL_126:
  if ( !c->running && c->newsession && !v11->expires )
    goto LABEL_57;
  lastct = c->lastct;
  v11->livecookie = c->running;
  c->lastct = ++lastct;
  v11->creationtime = lastct;
  if ( !noexpirea )
    remove_expired(c);
  v57 = cookiehash(v11->domain);
  v58 = c->cookies[v57];
  if ( !v58 )
  {
    if ( c->running )
    {
      v40 = v11;
      if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
      {
LABEL_275:
        Curl_infof(
          data,
          "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
          "Added",
          v40->name,
          v40->value,
          v40->domain,
          v40->path,
          v40->expires);
        if ( v58 )
        {
LABEL_259:
          v58->next = v40;
          goto LABEL_260;
        }
      }
    }
    else
    {
      v40 = v11;
    }
    c->cookies[v57] = v40;
LABEL_260:
    ++c->numcookies;
    v97 = v40->expires;
    if ( v97 )
      goto LABEL_256;
    return v40;
  }
  livecookie = 0;
  v40 = 0LL;
  v60 = 0LL;
  while ( 1 )
  {
    if ( !(unsigned int)curl_strequal(v58->name, v11->name) )
      goto LABEL_141;
    v61 = v58->domain;
    v62 = v11->domain;
    if ( v61 )
    {
      if ( !v62 || !(unsigned int)curl_strequal(v61, v62) )
        goto LABEL_141;
    }
    else if ( v62 )
    {
      goto LABEL_141;
    }
    spath = v58->spath;
    if ( spath )
    {
      v64 = v11->spath;
      if ( v64 )
      {
        if ( v58->secure && !v11->secure && !securea )
        {
          v86 = strchr(spath + 1, 47);
          v87 = v86 ? v86 - spath : strlen(spath);
          if ( (unsigned int)curl_strnequal(spath, v64, v87) )
          {
            if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
              Curl_infof(
                data,
                "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                v11->name,
                v11->domain);
            goto LABEL_57;
          }
        }
      }
    }
LABEL_141:
    if ( v60 || !(unsigned int)curl_strequal(v58->name, v11->name) )
      goto LABEL_142;
    v88 = v58->domain;
    v89 = v11->domain;
    if ( v88 )
    {
      if ( !v89 || !(unsigned int)curl_strequal(v88, v89) || v58->tailmatch != v11->tailmatch )
      {
LABEL_238:
        if ( !livecookie )
          goto LABEL_142;
      }
    }
    else if ( v89 )
    {
      goto LABEL_238;
    }
    v90 = v58->spath;
    v91 = v11->spath;
    if ( v90 )
    {
      if ( !v91 )
      {
        v60 = 0LL;
        livecookie = 0;
        goto LABEL_142;
      }
      if ( !(unsigned int)curl_strequal(v90, v91) )
        goto LABEL_262;
      v91 = v11->spath;
      v90 = v58->spath;
    }
    if ( (v90 == 0LL) != (v91 == 0LL) )
    {
LABEL_262:
      livecookie = 0;
      goto LABEL_142;
    }
    livecookie = v11->livecookie;
    if ( v11->livecookie )
    {
      v40 = v58;
      v60 = v11;
    }
    else
    {
      if ( v58->livecookie )
        goto LABEL_57;
      v40 = v58;
      v60 = v11;
      livecookie = 1;
    }
LABEL_142:
    if ( !v58->next )
      break;
    v58 = v58->next;
  }
  if ( v60 )
  {
    creationtime = v40->creationtime;
    v93 = v40->name;
    v60->next = v40->next;
    v60->creationtime = creationtime;
    Curl_cfree(v93);
    Curl_cfree(v40->value);
    Curl_cfree(v40->domain);
    Curl_cfree(v40->path);
    Curl_cfree(v40->spath);
    v94 = *(_OWORD *)&v60->value;
    v95 = (void (__fastcall *)(Cookie *))Curl_cfree;
    *(_OWORD *)&v40->next = *(_OWORD *)&v60->next;
    *(_OWORD *)&v40->value = v94;
    v96 = *(_OWORD *)&v60->expires;
    *(_OWORD *)&v40->spath = *(_OWORD *)&v60->spath;
    *(_OWORD *)&v40->expires = v96;
    *(_QWORD *)&v40->prefix = *(_QWORD *)&v60->prefix;
    v95(v60);
  }
  else
  {
    v40 = v11;
  }
  if ( c->running && (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
  {
    if ( !livecookie )
      goto LABEL_275;
    Curl_infof(
      data,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
      "Replaced",
      v40->name,
      v40->value,
      v40->domain,
      v40->path,
      v40->expires);
  }
  else if ( !livecookie )
  {
    goto LABEL_259;
  }
  v97 = v40->expires;
  if ( !v97 )
    return v40;
LABEL_256:
  if ( v97 < c->next_expiration )
    c->next_expiration = v97;
  return v40;
}
