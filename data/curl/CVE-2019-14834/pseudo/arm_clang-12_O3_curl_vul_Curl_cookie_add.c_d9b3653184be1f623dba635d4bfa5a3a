Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  time_t v12; // r5
  int v13; // r0
  char *v14; // r9
  _DWORD *v15; // r4
  char *v16; // r11
  int v17; // r8
  bool v18; // zf
  bool v19; // zf
  size_t v20; // r0
  size_t v21; // r5
  char *v22; // r2
  size_t v23; // r0
  int v24; // r1
  bool v25; // zf
  unsigned int v26; // r10
  unsigned int v27; // r1
  char *v28; // r7
  size_t v29; // r0
  size_t v30; // r4
  int v31; // r1
  bool v32; // zf
  size_t v33; // r5
  char *v34; // r0
  bool v35; // cc
  size_t v36; // r5
  char v37; // r0
  char *v38; // r1
  int i; // r2
  int v40; // r3
  bool v41; // zf
  int v42; // r0
  bool v43; // zf
  const char *v44; // r0
  char *v45; // r5
  size_t v46; // r6
  int v47; // r0
  const char *v48; // r6
  int v49; // r0
  const char *v50; // r5
  bool v51; // zf
  char *v52; // r0
  int v53; // r0
  int v54; // r0
  bool v55; // zf
  const char *v56; // r11
  _BYTE *v57; // r0
  const char *v58; // r6
  const char *v59; // r0
  int is_ipnum; // r0
  int v61; // r10
  bool v62; // zf
  Curl_easy *v63; // r8
  int v64; // r0
  bool v65; // cc
  size_t v66; // r0
  int v67; // r0
  size_t v68; // r7
  const char *v69; // r9
  int v70; // r0
  int v71; // r0
  int v72; // r0
  int v73; // r0
  void (__fastcall *v74)(_DWORD *); // r1
  _DWORD *v75; // r0
  char *v76; // r0
  char *v77; // r0
  char *v78; // r0
  const char *v79; // r5
  int v80; // r9
  int (**v81)(void); // r8
  int v82; // r6
  const char *v83; // r0
  int v84; // r0
  int v85; // r0
  const char *v86; // r0
  char *v87; // r4
  char *v88; // r5
  size_t v89; // r6
  size_t v90; // r0
  int v91; // r0
  char v92; // r0
  int v93; // r0
  int v94; // r0
  int (*v95)(void); // r1
  int v96; // r6
  int v97; // r0
  char *v98; // r0
  int v99; // r0
  void (__fastcall **v100)(_DWORD *); // r6
  int v102; // r0
  bool v103; // zf
  int v104; // r0
  _DWORD *v105; // r5
  void (__fastcall **v106)(_DWORD *); // r4
  void (__fastcall **v107)(_DWORD *); // r5
  void (__fastcall **v108)(int); // r5
  int v109; // r0
  int v110; // r4
  char *v111; // r0
  char *v112; // r0
  int v113; // r4
  void *v114; // r0
  const char *v115; // r0
  char *v116; // r5
  size_t v117; // r6
  size_t v118; // r0
  int v119; // r0
  int v120; // r7
  int v121; // r0
  int v122; // r8
  time_t v123; // r9
  _DWORD *v124; // r11
  int v125; // r1
  int *v126; // r0
  _DWORD *v127; // r9
  _DWORD *v128; // r11
  char v129; // r10
  int *v130; // r5
  int v131; // r0
  int v132; // r1
  const char *v133; // r6
  int v134; // r8
  bool v135; // zf
  bool v136; // zf
  char *v137; // r0
  size_t v138; // r2
  int v139; // r0
  int v140; // r1
  char v141; // r0
  int v142; // r0
  int v143; // r0
  int v144; // r1
  bool v145; // zf
  const char *v146; // r0
  bool v147; // zf
  void (__fastcall **v148)(_DWORD *); // r6
  int v149; // r2
  int v150; // r0
  void (__fastcall **v151)(_DWORD *); // r8
  int v152; // r2
  int v153; // r3
  int v154; // r4
  int v155; // r6
  int v156; // r7
  int v157; // r2
  int v158; // r3
  int v159; // r4
  int v160; // r6
  int v161; // r7
  bool v162; // zf
  __int64 v163; // r0
  int v164; // r7
  unsigned int v165; // t1
  _DWORD *v166; // r5
  Cookie *v167; // r4
  Cookie **p_next; // r7
  Cookie *v169; // r6
  curl_off_t expires; // r0
  int v171; // r2
  int v172; // r3
  int v173; // r1
  const char *v174; // r2
  __int64 v175; // [sp+20h] [bp-D8h]
  int *v176; // [sp+28h] [bp-D0h]
  char v177; // [sp+2Ch] [bp-CCh]
  char *v178; // [sp+30h] [bp-C8h]
  int v180; // [sp+38h] [bp-C0h]
  time_t v181; // [sp+3Ch] [bp-BCh]
  Curl_easy *v182; // [sp+40h] [bp-B8h]
  int v183; // [sp+44h] [bp-B4h]
  char *v184; // [sp+48h] [bp-B0h]
  _DWORD *v185; // [sp+48h] [bp-B0h]
  size_t v186; // [sp+48h] [bp-B0h]
  int v187; // [sp+4Ch] [bp-ACh]
  CookieInfo *v188; // [sp+50h] [bp-A8h]
  char *dest[41]; // [sp+54h] [bp-A4h] BYREF

  v12 = time(0u);
  if ( data->req.setcookies > 0x31u )
    return 0;
  v13 = ((int (__fastcall *)(int, int))*Curl_ccalloc)(1, 48);
  if ( !v13 )
    return 0;
  v14 = (char *)lineptr;
  v187 = v13;
  v188 = c;
  v180 = noexpire;
  v181 = v12;
  v182 = data;
  v15 = (_DWORD *)v13;
  if ( !httpheader )
  {
    dest[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v14 = (char *)(lineptr + 0xA);
      *((_BYTE *)v15 + 35) = 1;
    }
    if ( *v14 == 35 )
      goto LABEL_161;
    v76 = strchr(v14, 13);
    if ( v76 )
      *v76 = 0;
    v77 = strchr(v14, 10);
    if ( v77 )
      *v77 = 0;
    v78 = strtok_r(v14, "\t", dest);
    if ( !v78 )
      goto LABEL_219;
    v79 = v78;
    v80 = 0;
    v185 = v15 + 6;
    v81 = (int (**)(void))Curl_cstrdup;
    while ( 1 )
    {
      v82 = 0;
      switch ( v80 )
      {
        case 0:
          v83 = v79 + 1;
          if ( *v79 != 46 )
            v83 = v79;
          v84 = ((int (__fastcall *)(const char *))*v81)(v83);
          v15[5] = v84;
          v80 = 0;
          v82 = v84 == 0;
          goto LABEL_203;
        case 1:
          v80 = 1;
          v82 = 0;
          *((_BYTE *)v15 + 32) = curl_strequal(v79, "TRUE") != 0;
          goto LABEL_203;
        case 2:
          if ( !strcmp("TRUE", v79) || !strcmp("FALSE", v79) )
          {
            v94 = ((int (__fastcall *)(const char *))*v81)("/");
            v95 = *v81;
            v96 = v94;
            v15[3] = v94;
            v97 = ((int (__fastcall *)(const char *))v95)("/");
            v15[4] = v97;
            v82 = v96 == 0 || v97 == 0;
            goto LABEL_194;
          }
          v85 = ((int (__fastcall *)(const char *))*v81)(v79);
          v80 = 2;
          v15[3] = v85;
          if ( !v85 )
            goto LABEL_198;
          v86 = (const char *)(*v81)();
          v87 = 0;
          if ( !v86 )
            goto LABEL_210;
          v88 = (char *)v86;
          v89 = strlen(v86);
          if ( *v88 == 34 )
            memmove(v88, v88 + 1, v89--);
          if ( v89 )
          {
            v90 = v89 - 1;
            if ( v88[v89 - 1] == 34 )
            {
              --v89;
              v88[v90] = 0;
            }
            if ( *v88 == 47 )
            {
              if ( v89 && v88[v89 - 1] == 47 )
                v88[v89 - 1] = 0;
LABEL_207:
              v87 = v88;
              goto LABEL_210;
            }
          }
          else if ( *v88 == 47 )
          {
            goto LABEL_207;
          }
          ((void (__fastcall *)(char *))*Curl_cfree)(v88);
          v99 = Curl_memdup("/", 2);
          if ( v99 )
          {
            v87 = (char *)v99;
            *(_BYTE *)(v99 + 1) = 0;
          }
LABEL_210:
          v82 = v87 == 0;
          *(_DWORD *)(v187 + 16) = v87;
          v15 = (_DWORD *)v187;
LABEL_203:
          v98 = strtok_r(0u, "\t", dest);
          ++v80;
          if ( v82 || (v79 = v98) == 0 )
          {
            if ( v80 == 6 )
            {
              v102 = ((int (__fastcall *)(void *))*v81)(&L_str_22);
              v80 = 7;
              v15[2] = v102;
              v82 |= v102 == 0;
              if ( !v102 )
                v80 = 6;
            }
            v103 = v82 == 0;
            if ( !v82 )
              v103 = v80 == 7;
            if ( v103 )
              goto LABEL_257;
LABEL_219:
            v104 = v15[5];
            v105 = v15;
            v106 = (void (__fastcall **)(_DWORD *))Curl_cfree;
            ((void (__fastcall *)(int))*Curl_cfree)(v104);
            (*v106)((_DWORD *)v105[3]);
            (*v106)((_DWORD *)v105[4]);
            (*v106)((_DWORD *)v105[1]);
            (*v106)((_DWORD *)v105[2]);
            v74 = *v106;
            v75 = v105;
            goto LABEL_220;
          }
          break;
        case 3:
LABEL_194:
          *((_BYTE *)v15 + 33) = 0;
          v80 = 3;
          if ( curl_strequal(v79, "TRUE") )
          {
            if ( !secure && !v188->running )
              goto LABEL_198;
            *((_BYTE *)v15 + 33) = 1;
          }
          goto LABEL_203;
        case 4:
          v80 = 4;
          v82 = curlx_strtoofft(v79, 0, 10, v185) != 0;
          goto LABEL_203;
        case 5:
          v91 = ((int (__fastcall *)(const char *))*v81)(v79);
          v80 = 5;
          v15[1] = v91;
          if ( v91 )
          {
            if ( curl_strnequal("__Secure-", v91, 9) )
            {
              v92 = *((_BYTE *)v15 + 40) | 1;
            }
            else
            {
              if ( !curl_strnequal("__Host-", v15[1], 7) )
                goto LABEL_202;
              v92 = *((_BYTE *)v15 + 40) | 2;
            }
            *((_BYTE *)v15 + 40) = v92;
            v82 = 0;
          }
          else
          {
LABEL_198:
            v82 = 1;
          }
          goto LABEL_203;
        case 6:
          v93 = ((int (__fastcall *)(const char *))*v81)(v79);
          v80 = 6;
          v15[2] = v93;
          v82 = v93 == 0;
          goto LABEL_203;
        default:
LABEL_202:
          v82 = 0;
          goto LABEL_203;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_161:
    v74 = (void (__fastcall *)(_DWORD *))*Curl_cfree;
    goto LABEL_162;
  }
  HIDWORD(v175) = 0x7FFFFFFF - (v12 >> 0x1F);
  v178 = (char *)&data->set + 1335;
  LODWORD(v175) = ~v12;
  v176 = v15 + 6;
  v177 = 0;
  do
  {
    v16 = v14 + 1;
    v17 = (unsigned __int8)*v14;
    v18 = v17 == 32;
    if ( v17 != 32 )
      v18 = v17 == 9;
    if ( v18 )
    {
      do
      {
        ++v16;
        v17 = (unsigned __int8)*++v14;
        v19 = v17 == 32;
        if ( v17 != 32 )
          v19 = v17 == 9;
      }
      while ( v19 );
    }
    v20 = strcspn(v14, ";\t\r\n=");
    if ( !v20 )
      goto LABEL_147;
    v21 = v20;
    v22 = &v14[v20];
    v23 = v20 - 1;
    do
    {
      v24 = (unsigned __int8)v14[v23];
      v25 = v24 == 32;
      if ( v24 != 32 )
        v25 = v24 == 9;
      if ( !v25 )
      {
        v26 = v23 + 1;
        goto LABEL_21;
      }
      --v23;
    }
    while ( v23 != -1 );
    v26 = 0;
LABEL_21:
    v27 = 0;
    v28 = 0;
    v184 = v22;
    v183 = (unsigned __int8)*v22;
    if ( v183 == 61 )
    {
      v29 = strcspn(&v14[v21 + 1], ";\r\n");
      v30 = v21 + v29;
      if ( v29 )
      {
        v28 = &v16[v30];
        while ( 1 )
        {
          v31 = (unsigned __int8)*(v28 - 1);
          v32 = v31 == 32;
          if ( v31 != 32 )
            v32 = v31 == 9;
          if ( !v32 )
            break;
          --v29;
          --v28;
          if ( !v29 )
            goto LABEL_29;
        }
        v38 = &v16[v21];
        for ( i = 0; i != v29; ++i )
        {
          v40 = (unsigned __int8)v38[i];
          v41 = v40 == 32;
          if ( v40 != 32 )
            v41 = v40 == 9;
          if ( !v41 )
          {
            v33 = v29 - i;
            v28 = &v38[i];
            goto LABEL_30;
          }
        }
        v33 = 0;
      }
      else
      {
LABEL_29:
        v28 = &v14[v21 + 1];
        v33 = 0;
      }
LABEL_30:
      if ( memchr(v28, 9, v33) )
      {
        v108 = (void (__fastcall **)(int))Curl_cfree;
        ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v187 + 20));
        (*v108)(*(_DWORD *)(v187 + 12));
        (*v108)(*(_DWORD *)(v187 + 16));
        (*v108)(*(_DWORD *)(v187 + 4));
        (*v108)(*(_DWORD *)(v187 + 8));
        (*v108)(v187);
        if ( (v178[3] & 0x10) != 0 )
        {
          Curl_infof(v182, "cookie contains TAB, dropping");
          return 0;
        }
        return 0;
      }
      v34 = &v14[v30];
      v15 = (_DWORD *)v187;
      v27 = v33;
      v184 = v34 + 1;
    }
    v35 = v26 > 0xFFE;
    v36 = v27;
    if ( v26 <= 0xFFE )
      v35 = v27 > 0xFFE;
    if ( v35 || v27 + v26 > 0x1000 )
    {
      v100 = (void (__fastcall **)(_DWORD *))Curl_cfree;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(v15[5]);
      (*v100)((_DWORD *)v15[3]);
      (*v100)((_DWORD *)v15[4]);
      (*v100)((_DWORD *)v15[1]);
      (*v100)((_DWORD *)v15[2]);
      (*v100)(v15);
      if ( (v178[3] & 0x10) != 0 )
      {
        Curl_infof(v182, "oversized cookie dropped, name/val %zu + %zu bytes", v26, v36);
        return 0;
      }
      return 0;
    }
    if ( v17 == 95 && v26 >= 7 && v14[1] == 95 )
    {
      if ( curl_strnequal("__Secure-", v14, 9) )
      {
        v37 = *((_BYTE *)v15 + 40) | 1;
      }
      else
      {
        if ( !curl_strnequal("__Host-", v14, 7) )
          goto LABEL_50;
        v37 = *((_BYTE *)v15 + 40) | 2;
      }
      *((_BYTE *)v15 + 40) = v37;
    }
LABEL_50:
    if ( v15[1] )
    {
      if ( !v36 )
      {
        if ( v26 == 8 )
        {
          if ( curl_strnequal("httponly", v14, 8) )
          {
            *((_BYTE *)v15 + 35) = 1;
            goto LABEL_146;
          }
        }
        else if ( v26 == 6 && curl_strnequal("secure", v14, 6) )
        {
          if ( !secure && v188->running )
            goto LABEL_223;
          v15 = (_DWORD *)v187;
          *(_BYTE *)(v187 + 33) = 1;
          goto LABEL_146;
        }
        if ( v183 != 61 )
          goto LABEL_146;
      }
      if ( v26 == 7 )
      {
        if ( !curl_strnequal("version", v14, 7) )
        {
          if ( !curl_strnequal("max-age", v14, 7) )
          {
            if ( curl_strnequal("expires", v14, 7) && v36 <= 0x7F && !*(_QWORD *)v176 )
            {
              memcpy(dest, v28, v36);
              *((_BYTE *)dest + v36) = 0;
              v64 = Curl_getdate_capped(dest);
              *(_QWORD *)v176 = v64;
              if ( v64 )
              {
                v65 = v64 <= -1;
                if ( v64 <= -1 )
                  v64 = 0;
                if ( v65 )
                {
                  *v176 = v64;
                  v176[1] = v64;
                }
              }
              else
              {
                *v176 = 1;
                v176[1] = 0;
              }
            }
            goto LABEL_146;
          }
          v52 = v28 + 1;
          if ( *v28 != 34 )
            v52 = v28;
          v53 = curlx_strtoofft(v52, 0, 10, v176);
          if ( v53 )
          {
            if ( v53 != 2 )
            {
              if ( v53 != 1 )
                goto LABEL_146;
LABEL_144:
              *v176 = -1;
              v176[1] = 0x7FFFFFFF;
              goto LABEL_146;
            }
          }
          else if ( *(_QWORD *)v176 )
          {
            if ( v175 >= *(_QWORD *)v176 )
            {
              *(_QWORD *)v176 += v181;
              goto LABEL_146;
            }
            goto LABEL_144;
          }
          *v176 = 1;
          v176[1] = 0;
        }
LABEL_146:
        v14 = v184;
        goto LABEL_147;
      }
      if ( v26 != 6 )
      {
        if ( v26 != 4 || !curl_strnequal("path", v14, 4) )
          goto LABEL_146;
        ((void (__fastcall *)(_DWORD))*Curl_cfree)(v15[3]);
        v42 = Curl_memdup(v28, v36 + 1);
        v43 = v42 == 0;
        v15[3] = v42;
        if ( v42 )
        {
          *(_BYTE *)(v42 + v36) = 0;
          v43 = *(_DWORD *)(v187 + 12) == 0;
        }
        if ( v43 )
          goto LABEL_223;
        v15 = (_DWORD *)v187;
        ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v187 + 16));
        v44 = (const char *)((int (__fastcall *)(_DWORD))*Curl_cstrdup)(*(_DWORD *)(v187 + 12));
        if ( !v44 )
          goto LABEL_249;
        v45 = (char *)v44;
        v46 = strlen(v44);
        if ( *v45 == 34 )
          memmove(v45, v45 + 1, v46--);
        if ( v46 )
        {
          if ( v45[v46 - 1] == 34 )
            v45[--v46] = 0;
          if ( *v45 == 47 )
          {
            if ( v46 && v45[v46 - 1] == 47 )
              v45[v46 - 1] = 0;
            goto LABEL_132;
          }
        }
        else if ( *v45 == 47 )
        {
LABEL_132:
          *(_DWORD *)(v187 + 16) = v45;
          goto LABEL_146;
        }
        ((void (__fastcall *)(char *))*Curl_cfree)(v45);
        v67 = Curl_memdup("/", 2);
        if ( !v67 )
        {
LABEL_249:
          *(_DWORD *)(v187 + 16) = 0;
          goto LABEL_223;
        }
        v45 = (char *)v67;
        *(_BYTE *)(v67 + 1) = 0;
        goto LABEL_132;
      }
      v54 = curl_strnequal("domain", v14, 6);
      v55 = v36 == 0;
      if ( v36 )
        v55 = v54 == 0;
      if ( v55 )
        goto LABEL_146;
      v56 = v28 + 1;
      if ( *v28 == 46 )
        --v36;
      else
        v56 = v28;
      if ( v36 == 9 && curl_strnequal(v56, "localhost", 9)
        || (v57 = memchr(v56, 46, v36)) != 0 && (unsigned int)(&v56[v36] - v57) > 1 )
      {
        v58 = domain;
        v59 = domain;
        if ( !domain )
          v59 = v56;
        is_ipnum = Curl_host_is_ipnum(v59);
        v61 = is_ipnum;
        if ( !domain )
        {
          v58 = 0;
LABEL_137:
          domain = v58;
          ((void (__fastcall *)(_DWORD))*Curl_cfree)(v15[5]);
          v70 = Curl_memdup(v56, v36 + 1);
          v15[5] = v70;
          if ( !v70 )
            goto LABEL_223;
          v15 = (_DWORD *)v187;
          *(_BYTE *)(v70 + v36) = 0;
          v71 = *(_DWORD *)(v187 + 20);
          if ( v61 | (v71 == 0) )
          {
            if ( !v71 )
              goto LABEL_223;
            v15 = (_DWORD *)v187;
            v177 |= v71 == 0;
          }
          else
          {
            *(_BYTE *)(v187 + 32) = 1;
          }
          goto LABEL_146;
        }
        v62 = is_ipnum == 0;
      }
      else
      {
        v58 = ":";
        v62 = Curl_host_is_ipnum(":") == 0;
      }
      v63 = v182;
      if ( v62 )
      {
        v66 = strlen(v58);
        if ( v66 >= v36 )
        {
          v68 = v66;
          v69 = &v58[v66 - v36];
          if ( curl_strnequal(v56, v69, v36) )
          {
            v61 = 0;
            if ( v68 == v36 )
              goto LABEL_137;
            v73 = *((unsigned __int8 *)v69 - 1);
            v63 = v182;
            v14 = v184;
            if ( v73 == 46 )
              goto LABEL_137;
          }
          else
          {
            v63 = v182;
            v14 = v184;
          }
        }
        else
        {
          v14 = v184;
        }
      }
      else
      {
        v14 = v184;
        if ( !strncmp(v56, v58, v36) )
        {
          v61 = 1;
          if ( v36 == strlen(v58) )
            goto LABEL_137;
        }
      }
      domain = v58;
      v177 = 1;
      if ( (v178[3] & 0x10) != 0 )
        Curl_infof(v63, "skipped cookie with bad tailmatch domain: %s", v56);
    }
    else
    {
      if ( v183 != 61 )
        goto LABEL_223;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(0);
      v47 = Curl_memdup(v14, v26 + 1);
      v48 = 0;
      *(_DWORD *)(v187 + 4) = v47;
      if ( v47 )
        *(_BYTE *)(v47 + v26) = 0;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v187 + 8));
      v49 = Curl_memdup(v28, v36 + 1);
      *(_DWORD *)(v187 + 8) = v49;
      if ( v49 )
        *(_BYTE *)(v49 + v36) = 0;
      v50 = *(const char **)(v187 + 4);
      v51 = v50 == 0;
      if ( v50 )
      {
        v48 = *(const char **)(v187 + 8);
        v51 = v48 == 0;
      }
      if ( v51 )
        goto LABEL_223;
      v15 = (_DWORD *)v187;
      v14 = v184;
      if ( v48[strcspn(v48, invalid_octets_badoctets)] || v50[strcspn(v50, invalid_octets_badoctets)] )
      {
        if ( (v178[3] & 0x10) != 0 )
          Curl_infof(v182, "invalid octets in name/value, cookie dropped");
LABEL_223:
        v15 = (_DWORD *)v187;
        v107 = (void (__fastcall **)(_DWORD *))Curl_cfree;
        ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v187 + 20));
        (*v107)(*(_DWORD **)(v187 + 12));
        (*v107)(*(_DWORD **)(v187 + 16));
        (*v107)(*(_DWORD **)(v187 + 4));
        (*v107)(*(_DWORD **)(v187 + 8));
        v74 = *v107;
LABEL_162:
        v75 = v15;
LABEL_220:
        v74(v75);
        return 0;
      }
    }
    do
    {
      do
LABEL_147:
        v72 = (unsigned __int8)*v14++;
      while ( v72 == 32 );
    }
    while ( v72 == 9 );
  }
  while ( v72 == 59 );
  if ( (v177 & 1) != 0 )
    goto LABEL_223;
  if ( domain )
  {
    if ( !*(_DWORD *)(v187 + 20) )
    {
      v109 = ((int (__fastcall *)(const char *))*Curl_cstrdup)(domain);
      *(_DWORD *)(v187 + 20) = v109;
      if ( !v109 )
        goto LABEL_223;
    }
  }
  v110 = v187;
  if ( !path || *(_DWORD *)(v187 + 12) )
    goto LABEL_255;
  v111 = strchr(path, 63);
  v112 = v111 ? (char *)Curl_memrchr(path, 47, v111 - path) : strrchr(path, 47);
  if ( !v112 )
    goto LABEL_255;
  v113 = v112 - path;
  v114 = (void *)((int (__fastcall *)(int))*Curl_cmalloc)(v112 - path + 2);
  *(_DWORD *)(v187 + 12) = v114;
  if ( !v114 )
    goto LABEL_223;
  memcpy(v114, path, v113 + 1);
  *(_BYTE *)(*(_DWORD *)(v187 + 12) + v113 + 1) = 0;
  v115 = (const char *)((int (__fastcall *)(_DWORD))*Curl_cstrdup)(*(_DWORD *)(v187 + 12));
  if ( !v115 )
  {
LABEL_361:
    *(_DWORD *)(v187 + 16) = 0;
    goto LABEL_223;
  }
  v116 = (char *)v115;
  v117 = strlen(v115);
  if ( *v116 == 34 )
    memmove(v116, v116 + 1, v117--);
  if ( !v117 )
  {
    if ( *v116 == 47 )
      goto LABEL_251;
    goto LABEL_252;
  }
  v118 = v117 - 1;
  if ( v116[v117 - 1] == 34 )
  {
    --v117;
    v116[v118] = 0;
  }
  if ( *v116 != 47 )
  {
LABEL_252:
    ((void (__fastcall *)(char *))*Curl_cfree)(v116);
    v119 = Curl_memdup("/", 2);
    if ( v119 )
    {
      v110 = v187;
      v116 = (char *)v119;
      *(_BYTE *)(v119 + 1) = 0;
      goto LABEL_254;
    }
    goto LABEL_361;
  }
  if ( !v117 )
  {
LABEL_251:
    v110 = v187;
    goto LABEL_254;
  }
  v110 = v187;
  if ( v116[v117 - 1] == 47 )
    v116[v117 - 1] = 0;
LABEL_254:
  *(_DWORD *)(v110 + 16) = v116;
LABEL_255:
  if ( !*(_DWORD *)(v110 + 4) )
    goto LABEL_223;
  v15 = (_DWORD *)v187;
  ++v182->req.setcookies;
LABEL_257:
  if ( (v15[10] & 1) != 0 && !*((_BYTE *)v15 + 33) )
    goto LABEL_317;
  if ( (v15[10] & 2) != 0 )
  {
    v146 = (const char *)*((unsigned __int8 *)v15 + 33);
    v147 = v146 == 0;
    if ( *((_BYTE *)v15 + 33) )
    {
      v146 = (const char *)v15[3];
      v147 = v146 == 0;
    }
    if ( v147 || strcmp(v146, "/") || *((_BYTE *)v15 + 32) )
      goto LABEL_317;
  }
  v120 = (int)v188;
  if ( !v188->running && v188->newsession && !*((_QWORD *)v15 + 3) )
  {
LABEL_317:
    v148 = (void (__fastcall **)(_DWORD *))Curl_cfree;
    ((void (__fastcall *)(_DWORD))*Curl_cfree)(v15[5]);
    (*v148)((_DWORD *)v15[3]);
    (*v148)((_DWORD *)v15[4]);
    (*v148)((_DWORD *)v15[1]);
    (*v148)((_DWORD *)v15[2]);
    (*v148)(v15);
    return 0;
  }
  *((_BYTE *)v15 + 34) = v188->running;
  v121 = *(_DWORD *)(v120 + 268) + 1;
  *(_DWORD *)(v120 + 268) = v121;
  v15[9] = v121;
  if ( !v180 )
  {
    v122 = 0;
    v123 = time(0u);
    v124 = (_DWORD *)(v120 + 256);
    v125 = *(_DWORD *)(v120 + 260);
    if ( (v123 >> 0x1F) - (v125 + !__CFSHR__(v123, 0x1F)) < 0 == __OFSUB__(v123 >> 0x1F, v125, __CFSHR__(v123, 0x1F))
      || !(~*(_DWORD *)(v120 + 256) | v125 ^ 0x7FFFFFFF) )
    {
      *v124 = -1;
      *(_DWORD *)(v120 + 260) = 0x7FFFFFFF;
      v166 = (_DWORD *)Curl_cfree;
      do
      {
        v167 = *(Cookie **)(v120 + 4 * v122);
        if ( v167 )
        {
          p_next = 0;
          do
          {
            while ( 1 )
            {
              v169 = v167;
              v167 = v167->next;
              expires = v169->expires;
              v171 = expires | HIDWORD(expires);
              if ( !expires )
                break;
              v172 = (unsigned __int64)(expires - v123) >> 32;
              if ( expires >= v123 )
                break;
              v173 = (int)v188;
              if ( p_next )
                *p_next = v167;
              else
                v188->cookies[v122] = v167;
              --*(_DWORD *)(v173 + 264);
              ((void (__fastcall *)(char *, _DWORD, int, int))*v166)(v169->domain, *v166, v171, v172);
              ((void (__fastcall *)(char *))*v166)(v169->path);
              ((void (__fastcall *)(char *))*v166)(v169->spath);
              ((void (__fastcall *)(char *))*v166)(v169->name);
              ((void (__fastcall *)(char *))*v166)(v169->value);
              ((void (__fastcall *)(Cookie *))*v166)(v169);
              if ( !v167 )
                goto LABEL_342;
            }
            if ( expires && expires < *(_QWORD *)v124 )
              *(_QWORD *)v124 = expires;
            p_next = &v169->next;
          }
          while ( v167 );
        }
LABEL_342:
        v120 = (int)v188;
        ++v122;
      }
      while ( v122 != 63 );
    }
  }
  v15 = (_DWORD *)v187;
  v186 = cookiehash(*(const char *const *)(v187 + 20));
  v126 = *(int **)(v120 + 4 * v186);
  if ( !v126 )
  {
    v130 = 0;
    v129 = 0;
    goto LABEL_324;
  }
  v127 = 0;
  v128 = 0;
  v129 = 0;
  while ( 2 )
  {
    v130 = v126;
    if ( curl_strequal(v126[1], *(_DWORD *)(v187 + 4)) )
    {
      v131 = v130[5];
      v132 = *(_DWORD *)(v187 + 20);
      if ( v131 )
      {
        if ( v132 && curl_strequal(v131, v132) )
        {
LABEL_274:
          v133 = (const char *)v130[4];
          if ( v133 )
          {
            v134 = *(_DWORD *)(v187 + 16);
            v135 = v134 == 0;
            if ( v134 )
              v135 = *((_BYTE *)v130 + 33) == 0;
            if ( !v135 )
            {
              v136 = *(_BYTE *)(v187 + 33) == 0;
              if ( !*(_BYTE *)(v187 + 33) )
                v136 = secure == 0;
              if ( v136 )
              {
                v137 = strchr(v133 + 1, 47);
                v138 = v137 ? v137 - v133 : strlen(v133);
                if ( curl_strnequal(v133, v134, v138) )
                {
                  v145 = v182 == 0;
                  if ( v182 )
                    v145 = (*((_BYTE *)&v182->set + 1338) & 0x10) == 0;
                  if ( !v145 )
                    Curl_infof(
                      v182,
                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                      *(const char **)(v187 + 4),
                      *(const char **)(v187 + 20));
                  goto LABEL_219;
                }
              }
            }
          }
        }
      }
      else if ( !v132 )
      {
        goto LABEL_274;
      }
    }
    if ( !v127 )
    {
      if ( curl_strequal(v130[1], *(_DWORD *)(v187 + 4)) )
      {
        v139 = v130[5];
        v140 = *(_DWORD *)(v187 + 20);
        if ( v139 )
        {
          if ( v140 && curl_strequal(v139, v140) )
          {
            v141 = v129 | (*(_BYTE *)(v187 + 32)
                         - *((_BYTE *)v130 + 32)
                         + (*((unsigned __int8 *)v130 + 32) == *(unsigned __int8 *)(v187 + 32))
                         + *((_BYTE *)v130 + 32)
                         - *(_BYTE *)(v187 + 32));
            v129 = 0;
            if ( (v141 & 1) == 0 )
              goto LABEL_298;
          }
          else
          {
            v127 = 0;
            if ( (v129 & 1) == 0 )
            {
              v129 = 0;
              goto LABEL_269;
            }
          }
LABEL_293:
          v143 = v130[4];
          v144 = *(_DWORD *)(v187 + 16);
          if ( !v143 )
          {
            v129 = 0;
            v127 = 0;
            if ( v144 )
              goto LABEL_269;
            goto LABEL_302;
          }
          if ( v144 )
          {
            if ( curl_strequal(v143, v144) )
            {
              v129 = 0;
              v127 = 0;
              if ( (v130[4] != 0) == (*(_DWORD *)(v187 + 16) == 0) )
                goto LABEL_269;
              goto LABEL_302;
            }
          }
          else if ( *(_DWORD *)(v187 + 16) )
          {
LABEL_302:
            v129 = 1;
            if ( *(_BYTE *)(v187 + 34) )
            {
              v128 = v130;
              v127 = (_DWORD *)v187;
            }
            else
            {
              v128 = v130;
              v127 = (_DWORD *)v187;
              if ( *((_BYTE *)v130 + 34) )
                goto LABEL_219;
            }
            goto LABEL_269;
          }
          v129 = 0;
          v127 = 0;
          goto LABEL_269;
        }
        v142 = (unsigned __int8)(v129 | (v140 == 0));
        v129 = 0;
        if ( (v142 & 1) != 0 )
          goto LABEL_293;
      }
LABEL_298:
      v127 = 0;
    }
LABEL_269:
    v126 = (int *)*v130;
    if ( *v130 )
      continue;
    break;
  }
  if ( v127 )
  {
    v149 = v128[9];
    v150 = v128[1];
    *v127 = *v128;
    v127[9] = v149;
    v151 = (void (__fastcall **)(_DWORD *))Curl_cfree;
    ((void (__fastcall *)(int))*Curl_cfree)(v150);
    (*v151)((_DWORD *)v128[2]);
    (*v151)((_DWORD *)v128[5]);
    (*v151)((_DWORD *)v128[3]);
    (*v151)((_DWORD *)v128[4]);
    v152 = v127[1];
    v153 = v127[2];
    v154 = v127[3];
    v155 = v127[4];
    v156 = v127[5];
    *v128 = *v127;
    v128[1] = v152;
    v128[2] = v153;
    v128[3] = v154;
    v128[4] = v155;
    v128[5] = v156;
    v157 = v127[7];
    v158 = v127[8];
    v159 = v127[9];
    v160 = v127[10];
    v161 = v127[11];
    v128[6] = v127[6];
    v128[7] = v157;
    v128[8] = v158;
    v128[9] = v159;
    v128[10] = v160;
    v128[11] = v161;
    v120 = (int)v188;
    (*v151)(v127);
    v15 = v128;
  }
LABEL_324:
  if ( !v182 )
    goto LABEL_329;
  v162 = *(_BYTE *)(v120 + 272) == 0;
  if ( *(_BYTE *)(v120 + 272) )
    v162 = (*((_BYTE *)&v182->set + 1338) & 0x10) == 0;
  if ( v162 )
  {
LABEL_329:
    if ( (v129 & 1) != 0 )
      goto LABEL_334;
LABEL_330:
    if ( v130 )
      *v130 = (int)v15;
    else
      *(_DWORD *)(v120 + 4 * v186) = v15;
    ++*(_DWORD *)(v120 + 264);
    goto LABEL_334;
  }
  v120 = (int)v188;
  v174 = "Added";
  if ( (v129 & 1) != 0 )
    v174 = "Replaced";
  Curl_infof(
    v182,
    "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
    v174,
    (const char *)v15[1],
    (const char *)v15[2],
    (const char *)v15[5],
    (const char *)v15[3],
    *((_QWORD *)v15 + 3));
  if ( (v129 & 1) == 0 )
    goto LABEL_330;
LABEL_334:
  v163 = *((_QWORD *)v15 + 3);
  if ( v163 )
  {
    v165 = *(_DWORD *)(v120 + 256);
    v164 = v120 + 256;
    if ( v163 < __SPAIR64__(*(_DWORD *)(v164 + 4), v165) )
      *(_QWORD *)v164 = v163;
  }
  return (Cookie *)v15;
}
