Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  int v12; // r9
  time_t v13; // r7
  Cookie *v14; // r0
  char *j; // r9
  Cookie *v16; // r10
  char *i; // r6
  int v18; // r7
  bool v19; // zf
  size_t v20; // r0
  size_t v21; // r10
  char *v22; // r11
  size_t v23; // r0
  int v24; // r1
  bool v25; // zf
  int v26; // r0
  bool v27; // zf
  unsigned int v28; // r4
  size_t v29; // r5
  char *v30; // r8
  size_t v31; // r0
  size_t v32; // r11
  int v33; // r1
  bool v34; // zf
  bool v35; // cc
  unsigned __int8 v36; // r0
  char *v37; // r1
  int v38; // r2
  int v39; // r3
  bool v40; // zf
  int v41; // r0
  bool v42; // zf
  char *v43; // r0
  size_t v44; // r6
  int v45; // r0
  const char *value; // r5
  int v47; // r0
  const char *name; // r4
  bool v49; // zf
  curl_off_t *v50; // r4
  char *v51; // r0
  int v52; // r0
  int v53; // r0
  bool v54; // zf
  const char *v55; // r4
  _BYTE *v56; // r0
  const char *v57; // r6
  size_t v58; // r7
  const char *v59; // r0
  int is_ipnum; // r0
  int v61; // r8
  bool v62; // zf
  int v63; // r0
  int v64; // r0
  int v65; // r0
  char *v66; // r0
  char *v67; // r0
  char *v68; // r0
  char *v69; // r0
  const char *v70; // r8
  curl_off_t *p_expires; // r7
  char **v72; // r5
  int v73; // r6
  int (__fastcall **v74)(const char *); // r9
  int v75; // r11
  const char *v76; // r0
  int v77; // r0
  bool v78; // cf
  int v79; // r1
  const char *v80; // r0
  int v81; // r0
  unsigned __int8 v82; // r0
  char **v83; // r10
  curl_off_t *v84; // r5
  char *v85; // r7
  int (__fastcall *v86)(const char *); // r1
  char *v87; // r0
  _BOOL4 v88; // r1
  char *v89; // r0
  int v90; // r0
  bool v91; // zf
  Cookie *v92; // r0
  Curl_easy *v94; // r4
  CookieInfo *v95; // r6
  int v96; // r0
  Cookie *next; // r0
  Cookie *v98; // r8
  Cookie *v99; // r4
  char v100; // r11
  Cookie *v101; // r5
  char *v102; // r1
  char *v103; // r0
  const char *spath; // r7
  char *v105; // r9
  bool v106; // zf
  bool v107; // zf
  char *v108; // r0
  size_t v109; // r2
  char *v110; // r0
  char *v111; // r1
  char v112; // r0
  char v113; // r0
  char *v114; // r0
  char *v115; // r1
  const char *v116; // r0
  bool v117; // zf
  int creationtime; // r2
  char *v119; // r0
  void (__fastcall **v120)(Cookie *); // r9
  Cookie *v121; // r12
  char *v122; // r2
  char *v123; // r3
  char *v124; // r4
  char *v125; // r6
  char *v126; // r7
  char *expires_high; // r2
  char *v128; // r3
  int v129; // r4
  char *v130; // r6
  char *v131; // r7
  int v132; // r0
  char *v133; // r0
  char *v134; // r0
  bool v135; // zf
  __int64 expires; // r0
  curl_off_t *p_next_expiration; // r6
  unsigned int next_expiration; // t1
  const char *v139; // r2
  int v140; // r4
  char *v141; // r0
  size_t v142; // r4
  char *v143; // r0
  Cookie *v144; // r4
  bool v145; // zf
  curl_off_t v146; // [sp+1Ch] [bp-D4h]
  curl_off_t *v147; // [sp+24h] [bp-CCh]
  char *v148; // [sp+28h] [bp-C8h]
  char v149; // [sp+2Ch] [bp-C4h]
  CookieInfo *cookies; // [sp+34h] [bp-BCh]
  int v152; // [sp+38h] [bp-B8h]
  time_t v153; // [sp+3Ch] [bp-B4h]
  Curl_easy *v154; // [sp+40h] [bp-B0h]
  int v155; // [sp+44h] [bp-ACh]
  size_t v156; // [sp+44h] [bp-ACh]
  Cookie *v157; // [sp+48h] [bp-A8h]
  char *dest[41]; // [sp+4Ch] [bp-A4h] BYREF

  v12 = 0;
  v13 = time(0u);
  if ( data->req.setcookies > 0x31u )
    return (Cookie *)v12;
  v14 = (Cookie *)((int (__fastcall *)(int, int))*Curl_ccalloc)(1, 48);
  if ( !v14 )
    return (Cookie *)v12;
  j = (char *)lineptr;
  v16 = v14;
  v153 = v13;
  v152 = noexpire;
  v154 = data;
  v157 = v14;
  if ( !httpheader )
  {
    dest[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      j = (char *)(lineptr + 0xA);
      v16->httponly = 1;
    }
    if ( *j != 35 )
    {
      v67 = strchr(j, 13);
      cookies = c;
      if ( v67 )
        *v67 = 0;
      v68 = strchr(j, 10);
      if ( v68 )
        *v68 = 0;
      v69 = strtok_r(j, "\t", dest);
      if ( !v69 )
        goto LABEL_183;
      v70 = v69;
      p_expires = &v16->expires;
      v72 = dest;
      v73 = 0;
      v74 = (int (__fastcall **)(const char *))Curl_cstrdup;
      while ( 1 )
      {
        v75 = 0;
        switch ( v73 )
        {
          case 0:
            v76 = v70 + 1;
            if ( *v70 != 46 )
              v76 = v70;
            v77 = (*v74)(v76);
            v78 = v77 == 0;
            v79 = -v77;
            v16->domain = (char *)v77;
            v73 = 0;
            goto LABEL_164;
          case 1:
            v73 = 1;
            v16->tailmatch = curl_strequal(v70, "TRUE") != 0;
            goto LABEL_174;
          case 2:
            if ( !strcmp("TRUE", v70) || !strcmp("FALSE", v70) )
            {
              v83 = v72;
              v84 = p_expires;
              v85 = (char *)(*v74)("/");
              v86 = *v74;
              v157->path = v85;
              v87 = (char *)v86("/");
              v157->spath = v87;
              v88 = v85 == 0;
              p_expires = v84;
              v72 = v83;
              v16 = v157;
              v75 = v88 || v87 == 0;
LABEL_166:
              v16->secure = 0;
              v73 = 3;
              if ( curl_strequal(v70, "TRUE") )
              {
                if ( secure || cookies->running )
                {
                  v16->secure = 1;
                  goto LABEL_175;
                }
LABEL_170:
                v75 = 1;
              }
            }
            else
            {
              v80 = (const char *)(*v74)(v70);
              v73 = 2;
              v16->path = (char *)v80;
              if ( !v80 )
                goto LABEL_170;
              v77 = (int)sanitize_cookie_path(v80);
              v78 = v77 == 0;
              v79 = -v77;
              v16->spath = (char *)v77;
LABEL_164:
              v75 = v79 + v78 + v77;
            }
LABEL_175:
            v89 = strtok_r(0u, "\t", v72);
            ++v73;
            if ( v75 || (v70 = v89) == 0 )
            {
              if ( v73 == 6 )
              {
                v90 = (*v74)((const char *)&L_str_22);
                v73 = 7;
                v16->value = (char *)v90;
                v75 |= v90 == 0;
                if ( !v90 )
                  v73 = 6;
              }
              v91 = v75 == 0;
              if ( !v75 )
                v91 = v73 == 7;
              if ( !v91 )
                goto LABEL_183;
              v94 = v154;
              goto LABEL_190;
            }
            break;
          case 3:
            goto LABEL_166;
          case 4:
            v73 = 4;
            v75 = curlx_strtoofft(v70, 0, 10, p_expires) != 0;
            goto LABEL_175;
          case 5:
            v81 = (*v74)(v70);
            v73 = 5;
            v16->name = (char *)v81;
            if ( !v81 )
              goto LABEL_170;
            if ( curl_strnequal("__Secure-", v81, 9) )
            {
              v82 = v16->prefix | 1;
            }
            else
            {
              if ( !curl_strnequal("__Host-", v16->name, 7) )
                goto LABEL_174;
              v82 = v16->prefix | 2;
            }
            v16->prefix = v82;
LABEL_174:
            v75 = 0;
            goto LABEL_175;
          case 6:
            v77 = (*v74)(v70);
            v78 = v77 == 0;
            v79 = -v77;
            v73 = 6;
            v16->value = (char *)v77;
            goto LABEL_164;
          default:
            goto LABEL_174;
        }
      }
    }
LABEL_143:
    ((void (__fastcall *)(Cookie *))*Curl_cfree)(v16);
    return 0;
  }
  if ( strlen(lineptr) > 0x1388 )
    goto LABEL_143;
  cookies = c;
  HIDWORD(v146) = 0x7FFFFFFF - (v13 >> 0x1F);
  v148 = (char *)&data->set + 1335;
  LODWORD(v146) = ~v13;
  v147 = &v16->expires;
  v149 = 0;
  do
  {
    for ( i = j + 1; ; ++i )
    {
      v18 = (unsigned __int8)*j;
      v19 = v18 == 32;
      if ( v18 != 32 )
        v19 = v18 == 9;
      if ( !v19 )
        break;
      ++j;
    }
    v20 = strcspn(j, ";\t\r\n=");
    if ( !v20 )
    {
      v16 = v157;
      v22 = j;
      goto LABEL_21;
    }
    v21 = v20;
    v22 = &j[v20];
    v23 = v20 - 1;
    do
    {
      v24 = (unsigned __int8)j[v23];
      v25 = v24 == 32;
      if ( v24 != 32 )
        v25 = v24 == 9;
      if ( !v25 )
      {
        v28 = v23 + 1;
        goto LABEL_29;
      }
      --v23;
    }
    while ( v23 != -1 );
    v28 = 0;
LABEL_29:
    v29 = 0;
    v30 = 0;
    v155 = (unsigned __int8)*v22;
    if ( v155 == 61 )
    {
      v31 = strcspn(&j[v21 + 1], ";\r\n");
      v32 = v21 + v31;
      if ( v31 )
      {
        v30 = &i[v32];
        while ( 1 )
        {
          v33 = (unsigned __int8)*(v30 - 1);
          v34 = v33 == 32;
          if ( v33 != 32 )
            v34 = v33 == 9;
          if ( !v34 )
            break;
          --v31;
          --v30;
          if ( !v31 )
            goto LABEL_37;
        }
        v37 = &i[v21];
        v38 = 0;
        while ( 1 )
        {
          v39 = (unsigned __int8)v37[v38];
          v40 = v39 == 32;
          if ( v39 != 32 )
            v40 = v39 == 9;
          if ( !v40 )
            break;
          if ( v31 == ++v38 )
            goto LABEL_38;
        }
        v29 = v31 - v38;
        v30 = &v37[v38];
      }
      else
      {
LABEL_37:
        v30 = &j[v21 + 1];
LABEL_38:
        v29 = 0;
      }
      if ( memchr(v30, 9, v29) )
      {
        freecookie(v157);
        v12 = 0;
        if ( (v148[3] & 0x10) != 0 )
          Curl_infof(v154, "cookie contains TAB, dropping");
        return (Cookie *)v12;
      }
      v22 = &j[v32 + 1];
    }
    v35 = v28 > 0xFFE;
    if ( v28 <= 0xFFE )
      v35 = v29 > 0xFFE;
    if ( v35 || v29 + v28 > 0x1000 )
    {
      freecookie(v157);
      v12 = 0;
      if ( (v148[3] & 0x10) != 0 )
        Curl_infof(v154, "oversized cookie dropped, name/val %zu + %zu bytes", v28, v29);
      return (Cookie *)v12;
    }
    v16 = v157;
    if ( v18 == 95 && v28 >= 7 && j[1] == 95 )
    {
      if ( curl_strnequal("__Secure-", j, 9) )
      {
        v36 = v16->prefix | 1;
      }
      else
      {
        if ( !curl_strnequal("__Host-", j, 7) )
          goto LABEL_59;
        v36 = v16->prefix | 2;
      }
      v16->prefix = v36;
    }
LABEL_59:
    if ( v16->name )
    {
      if ( !v29 )
      {
        if ( v28 == 8 )
        {
          if ( curl_strnequal("httponly", j, 8) )
          {
            v16->httponly = 1;
            goto LABEL_21;
          }
        }
        else if ( v28 == 6 && curl_strnequal("secure", j, 6) )
        {
          if ( !secure && cookies->running )
            goto LABEL_183;
          v16->secure = 1;
          goto LABEL_21;
        }
        if ( v155 != 61 )
          goto LABEL_21;
      }
      if ( v28 != 7 )
      {
        if ( v28 != 6 )
        {
          if ( v28 == 4 && curl_strnequal("path", j, 4) )
          {
            ((void (__fastcall *)(char *))*Curl_cfree)(v16->path);
            v41 = Curl_memdup(v30, v29 + 1);
            v42 = v41 == 0;
            v16->path = (char *)v41;
            if ( v41 )
            {
              *(_BYTE *)(v41 + v29) = 0;
              v42 = v16->path == 0;
            }
            if ( v42 )
              goto LABEL_183;
            ((void (__fastcall *)(char *))*Curl_cfree)(v16->spath);
            v43 = sanitize_cookie_path(v16->path);
            v16->spath = v43;
            if ( !v43 )
              goto LABEL_183;
          }
          goto LABEL_21;
        }
        v53 = curl_strnequal("domain", j, 6);
        v54 = v29 == 0;
        if ( v29 )
          v54 = v53 == 0;
        if ( v54 )
          goto LABEL_21;
        v55 = v30 + 1;
        if ( *v30 == 46 )
          --v29;
        else
          v55 = v30;
        if ( v29 == 9 && curl_strnequal(v55, "localhost", 9)
          || (v56 = memchr(v55, 46, v29)) != 0 && (unsigned int)(&v55[v29] - v56) > 1 )
        {
          v57 = domain;
          v58 = v29;
          v59 = domain;
          if ( !domain )
            v59 = v55;
          is_ipnum = Curl_host_is_ipnum(v59);
          v61 = is_ipnum;
          if ( domain )
          {
            v62 = is_ipnum == 0;
LABEL_114:
            if ( v62 )
            {
              v61 = 0;
              if ( !cookie_tailmatch(v55, v58, v57) )
                goto LABEL_125;
            }
            else if ( strncmp(v55, v57, v58) || (v61 = 1, v58 != strlen(v57)) )
            {
LABEL_125:
              domain = v57;
              v149 = 1;
              if ( (v148[3] & 0x10) != 0 )
                Curl_infof(v154, "skipped cookie with bad tailmatch domain: %s", v55);
              goto LABEL_21;
            }
          }
          else
          {
            v57 = 0;
          }
          domain = v57;
          ((void (__fastcall *)(char *))*Curl_cfree)(v16->domain);
          v65 = Curl_memdup(v55, v58 + 1);
          v16->domain = (char *)v65;
          if ( !v65 )
            goto LABEL_183;
          *(_BYTE *)(v65 + v58) = 0;
          v66 = v16->domain;
          if ( v61 | (v66 == 0) )
          {
            if ( !v66 )
              goto LABEL_183;
            v149 |= v66 == 0;
          }
          else
          {
            v16->tailmatch = 1;
          }
          goto LABEL_21;
        }
        v58 = v29;
        v57 = ":";
        v62 = Curl_host_is_ipnum(":") == 0;
        goto LABEL_114;
      }
      if ( !curl_strnequal("version", j, 7) )
      {
        if ( curl_strnequal("max-age", j, 7) )
        {
          v50 = v147;
          v51 = v30 + 1;
          if ( *v30 != 34 )
            v51 = v30;
          v52 = curlx_strtoofft(v51, 0, 10, v147);
          switch ( v52 )
          {
            case 0:
              if ( !*v147 )
              {
LABEL_137:
                *(_DWORD *)v147 = 1;
                *((_DWORD *)v147 + 1) = 0;
                break;
              }
              if ( v146 >= *v147 )
              {
                *v147 += v153;
                break;
              }
LABEL_135:
              *(_DWORD *)v147 = -1;
              v64 = 0x7FFFFFFF;
LABEL_136:
              *((_DWORD *)v50 + 1) = v64;
              break;
            case 2:
              goto LABEL_137;
            case 1:
              goto LABEL_135;
          }
        }
        else
        {
          if ( !curl_strnequal("expires", j, 7) )
            goto LABEL_21;
          v50 = v147;
          if ( v29 > 0x7F || *v147 )
            goto LABEL_21;
          memcpy(dest, v30, v29);
          *((_BYTE *)dest + v29) = 0;
          v63 = Curl_getdate_capped(dest);
          *v147 = v63;
          if ( !v63 )
          {
            *(_DWORD *)v147 = 1;
            *((_DWORD *)v147 + 1) = 0;
            goto LABEL_21;
          }
          if ( v63 <= -1 )
          {
            v64 = 0;
            *(_DWORD *)v147 = 0;
            goto LABEL_136;
          }
        }
      }
    }
    else
    {
      if ( v155 != 61 )
        goto LABEL_183;
      v44 = v29;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(0);
      v45 = Curl_memdup(j, v28 + 1);
      value = 0;
      v16->name = (char *)v45;
      if ( v45 )
        *(_BYTE *)(v45 + v28) = 0;
      ((void (__fastcall *)(char *))*Curl_cfree)(v16->value);
      v47 = Curl_memdup(v30, v44 + 1);
      v16->value = (char *)v47;
      if ( v47 )
        *(_BYTE *)(v47 + v44) = 0;
      name = v16->name;
      v49 = name == 0;
      if ( name )
      {
        value = v16->value;
        v49 = value == 0;
      }
      if ( v49 )
        goto LABEL_183;
      if ( value[strcspn(value, invalid_octets_badoctets)] || name[strcspn(name, invalid_octets_badoctets)] )
      {
        if ( (v148[3] & 0x10) != 0 )
          Curl_infof(v154, "invalid octets in name/value, cookie dropped");
        goto LABEL_183;
      }
    }
LABEL_21:
    for ( j = v22 + 1; ; ++j )
    {
      v26 = (unsigned __int8)*(j - 1);
      v27 = v26 == 32;
      if ( v26 != 32 )
        v27 = v26 == 9;
      if ( !v27 )
        break;
    }
  }
  while ( v26 == 59 );
  if ( (v149 & 1) != 0 )
    goto LABEL_183;
  if ( domain )
  {
    if ( !v16->domain )
    {
      v132 = ((int (__fastcall *)(const char *))*Curl_cstrdup)(domain);
      v16->domain = (char *)v132;
      if ( !v132 )
        goto LABEL_183;
    }
  }
  if ( path && !v16->path )
  {
    v133 = strchr(path, 63);
    v134 = v133 ? (char *)Curl_memrchr(path, 47, v133 - path) : strrchr(path, 47);
    if ( v134 )
    {
      v140 = v134 - path;
      v141 = (char *)((int (__fastcall *)(int))*Curl_cmalloc)(v134 - path + 2);
      v16->path = v141;
      if ( !v141 )
        goto LABEL_183;
      v142 = v140 + 1;
      memcpy(v141, path, v142);
      v16->path[v142] = 0;
      v143 = sanitize_cookie_path(v16->path);
      v16->spath = v143;
      if ( !v143 )
        goto LABEL_183;
    }
  }
  if ( !v16->name )
  {
LABEL_183:
    v92 = v16;
    goto LABEL_184;
  }
  v94 = v154;
  ++v154->req.setcookies;
LABEL_190:
  v12 = 0;
  if ( (v16->prefix & 1) != 0 && !v16->secure )
    goto LABEL_247;
  if ( (v16->prefix & 2) != 0 )
  {
    v116 = (const char *)v16->secure;
    v117 = v116 == 0;
    if ( v16->secure )
    {
      v116 = v16->path;
      v117 = v116 == 0;
    }
    if ( v117 || strcmp(v116, "/") || v16->tailmatch )
      goto LABEL_247;
  }
  v95 = cookies;
  if ( !cookies->running && cookies->newsession && !v16->expires )
  {
LABEL_247:
    freecookie(v16);
    return (Cookie *)v12;
  }
  v16->livecookie = cookies->running;
  v96 = cookies->lastct + 1;
  cookies->lastct = v96;
  v16->creationtime = v96;
  if ( !v152 )
    remove_expired(cookies);
  v156 = cookiehash(v16->domain);
  next = cookies->cookies[v156];
  if ( !next )
  {
    v101 = 0;
    v100 = 0;
LABEL_263:
    if ( !v94 )
      goto LABEL_268;
    v135 = !v95->running;
    if ( v95->running )
      v135 = (*((_BYTE *)&v94->set + 1338) & 0x10) == 0;
    if ( v135 )
    {
LABEL_268:
      if ( (v100 & 1) != 0 )
        goto LABEL_273;
    }
    else
    {
      v139 = "Added";
      if ( (v100 & 1) != 0 )
        v139 = "Replaced";
      Curl_infof(
        v94,
        "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
        v139,
        v16->name,
        v16->value,
        v16->domain,
        v16->path,
        v16->expires);
      if ( (v100 & 1) != 0 )
        goto LABEL_273;
    }
    if ( v101 )
      v101->next = v16;
    else
      v95->cookies[v156] = v16;
    ++v95->numcookies;
LABEL_273:
    expires = v16->expires;
    if ( expires )
    {
      next_expiration = v95->next_expiration;
      p_next_expiration = &v95->next_expiration;
      if ( expires < __SPAIR64__(*((_DWORD *)p_next_expiration + 1), next_expiration) )
        *p_next_expiration = expires;
    }
    return v16;
  }
  v98 = 0;
  v99 = 0;
  v100 = 0;
  while ( 1 )
  {
    v101 = next;
    if ( !curl_strequal(next->name, v16->name) )
      goto LABEL_216;
    v102 = v157->domain;
    v103 = v101->domain;
    if ( v103 )
    {
      if ( !v102 || !curl_strequal(v103, v102) )
        goto LABEL_216;
    }
    else if ( v102 )
    {
      goto LABEL_216;
    }
    spath = v101->spath;
    if ( spath )
    {
      v105 = v157->spath;
      v106 = v105 == 0;
      if ( v105 )
        v106 = !v101->secure;
      if ( !v106 )
      {
        v107 = !v157->secure;
        if ( !v157->secure )
          v107 = secure == 0;
        if ( v107 )
        {
          v108 = strchr(spath + 1, 47);
          v109 = v108 ? v108 - spath : strlen(spath);
          if ( curl_strnequal(spath, v105, v109) )
            break;
        }
      }
    }
LABEL_216:
    if ( v98 )
    {
      v16 = v157;
      goto LABEL_239;
    }
    v16 = v157;
    if ( !curl_strequal(v101->name, v157->name) )
      goto LABEL_238;
    v110 = v101->domain;
    v111 = v16->domain;
    if ( v110 )
    {
      if ( !v111 || !curl_strequal(v110, v111) )
      {
        v98 = 0;
        if ( (v100 & 1) == 0 )
        {
          v100 = 0;
          goto LABEL_239;
        }
        goto LABEL_227;
      }
      v112 = v16->tailmatch - v101->tailmatch + (v101->tailmatch == v16->tailmatch) + v101->tailmatch - v16->tailmatch;
    }
    else
    {
      v112 = v111 == 0;
    }
    v113 = v100 | v112;
    v100 = 0;
    if ( (v113 & 1) == 0 )
      goto LABEL_238;
LABEL_227:
    v114 = v101->spath;
    v115 = v16->spath;
    if ( v114 )
    {
      if ( !v115 )
      {
        if ( v16->spath )
        {
LABEL_235:
          v100 = 1;
          if ( v16->livecookie )
          {
            v99 = v101;
            v98 = v16;
          }
          else
          {
            v99 = v101;
            v98 = v16;
            if ( v101->livecookie )
              goto LABEL_183;
          }
          goto LABEL_239;
        }
LABEL_237:
        v100 = 0;
LABEL_238:
        v98 = 0;
        goto LABEL_239;
      }
      if ( !curl_strequal(v114, v115) )
        goto LABEL_237;
      v100 = 0;
      v98 = 0;
      if ( (v101->spath != 0) != (v16->spath == 0) )
        goto LABEL_235;
    }
    else
    {
      v100 = 0;
      v98 = 0;
      if ( !v115 )
        goto LABEL_235;
    }
LABEL_239:
    next = v101->next;
    if ( !v101->next )
    {
      if ( v98 )
      {
        creationtime = v99->creationtime;
        v119 = v99->name;
        v98->next = v99->next;
        v98->creationtime = creationtime;
        v120 = (void (__fastcall **)(Cookie *))Curl_cfree;
        ((void (__fastcall *)(char *))*Curl_cfree)(v119);
        (*v120)((Cookie *)v99->value);
        (*v120)((Cookie *)v99->domain);
        (*v120)((Cookie *)v99->path);
        (*v120)((Cookie *)v99->spath);
        v121 = v99;
        v16 = v99;
        v122 = v98->name;
        v123 = v98->value;
        v124 = v98->path;
        v125 = v98->spath;
        v126 = v98->domain;
        v121->next = v98->next;
        v121->name = v122;
        v121->value = v123;
        v121->path = v124;
        v121->spath = v125;
        v121->domain = v126;
        v121 = (Cookie *)((char *)v121 + 24);
        expires_high = (char *)HIDWORD(v98->expires);
        v128 = *(char **)&v98->tailmatch;
        v129 = v98->creationtime;
        v130 = *(char **)&v98->prefix;
        v131 = (char *)*((_DWORD *)&v98->prefix + 1);
        v121->next = (Cookie *)v98->expires;
        v121->name = expires_high;
        v121->value = v128;
        v121->path = (char *)v129;
        v121->spath = v130;
        v121->domain = v131;
        (*v120)(v98);
      }
      v94 = v154;
      v95 = cookies;
      goto LABEL_263;
    }
  }
  v144 = v157;
  v145 = v154 == 0;
  if ( v154 )
    v145 = (*((_BYTE *)&v154->set + 1338) & 0x10) == 0;
  if ( !v145 )
    Curl_infof(v154, "cookie '%s' for domain '%s' dropped, would overlay an existing cookie", v157->name, v157->domain);
  v92 = v144;
LABEL_184:
  freecookie(v92);
  return 0;
}
