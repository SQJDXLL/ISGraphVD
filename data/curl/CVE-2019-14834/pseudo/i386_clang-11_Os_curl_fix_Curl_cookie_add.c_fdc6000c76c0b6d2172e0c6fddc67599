Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  time_t v8; // eax
  Cookie **p_next; // esi
  int v10; // eax
  int v11; // ebp
  const char *v12; // edx
  const char *v13; // edi
  const char *i; // esi
  size_t v15; // eax
  unsigned int v16; // ebp
  char v17; // cl
  size_t v18; // eax
  size_t v19; // ecx
  const char *v20; // edx
  const char *v21; // edi
  char v22; // cl
  unsigned int v23; // ecx
  unsigned int v24; // edi
  unsigned int v25; // edi
  int v26; // eax
  unsigned int v27; // ebp
  int v28; // eax
  char *v29; // eax
  const char *v30; // eax
  const char *name; // edi
  size_t v32; // eax
  int v33; // eax
  size_t v34; // edi
  int *v35; // esi
  const char *v36; // eax
  int v37; // eax
  int v38; // eax
  unsigned int v39; // esi
  int v40; // eax
  const char *v41; // edi
  _BOOL4 v42; // eax
  _BYTE *v43; // eax
  const char *v44; // eax
  Curl_easy *v45; // esi
  Cookie *v46; // ebp
  const char *v47; // edi
  int v48; // eax
  const char *v49; // eax
  char is_ipnum; // cl
  int v51; // eax
  size_t v52; // eax
  char v53; // si
  int v54; // eax
  int v55; // eax
  int v56; // eax
  unsigned int v57; // ecx
  char v58; // cl
  char *v59; // edi
  char *v60; // eax
  char *v61; // eax
  char *v62; // eax
  const char *v63; // edi
  int v64; // esi
  Cookie *v65; // edx
  int v66; // eax
  int v67; // eax
  const char *v68; // eax
  char *v69; // eax
  int v70; // eax
  int v71; // eax
  int v72; // eax
  int v73; // ebp
  int v74; // eax
  int v75; // ecx
  CookieInfo *v76; // eax
  char *v77; // eax
  int v78; // eax
  char v79; // al
  const char *v80; // esi
  int v81; // eax
  char *v82; // eax
  char *v83; // eax
  unsigned int v84; // edi
  int v85; // edi
  char *v86; // eax
  size_t v87; // edi
  char *v88; // eax
  char v89; // al
  bool running; // al
  int v91; // eax
  Cookie *next; // eax
  Cookie *v93; // ebp
  char *v94; // eax
  char *v95; // ecx
  const char *spath; // edi
  char *v97; // eax
  size_t v98; // eax
  char *v99; // eax
  char *v100; // ecx
  bool v101; // zf
  int v102; // eax
  char *v103; // eax
  char *v104; // ecx
  void *v105; // eax
  const char *v107; // eax
  const char *v108; // ecx
  Cookie **v109; // eax
  curl_off_t v110; // rax
  Cookie *v111; // ecx
  const char *v112; // [esp-10h] [ebp-CCh]
  const char *v113; // [esp-Ch] [ebp-C8h]
  size_t v114; // [esp-Ch] [ebp-C8h]
  const char *v115; // [esp-8h] [ebp-C4h]
  int v116; // [esp-4h] [ebp-C0h]
  Cookie *v117; // [esp+0h] [ebp-BCh]
  Cookie *v118; // [esp+4h] [ebp-B8h]
  const char *s; // [esp+8h] [ebp-B4h]
  const char *sa; // [esp+8h] [ebp-B4h]
  const char *sb; // [esp+8h] [ebp-B4h]
  void *sc; // [esp+8h] [ebp-B4h]
  size_t ne; // [esp+Ch] [ebp-B0h]
  size_t n; // [esp+Ch] [ebp-B0h]
  char na; // [esp+Ch] [ebp-B0h]
  size_t nf; // [esp+Ch] [ebp-B0h]
  size_t nb; // [esp+Ch] [ebp-B0h]
  size_t nc; // [esp+Ch] [ebp-B0h]
  size_t nd; // [esp+Ch] [ebp-B0h]
  char v130; // [esp+10h] [ebp-ACh]
  char v131; // [esp+10h] [ebp-ACh]
  int v133; // [esp+18h] [ebp-A4h]
  char *v134; // [esp+18h] [ebp-A4h]
  int *v135; // [esp+1Ch] [ebp-A0h]
  __int64 v136; // [esp+24h] [ebp-98h]
  char *dest[36]; // [esp+2Ch] [ebp-90h] BYREF

  v116 = 134218454;
  v8 = time(0);
  p_next = 0;
  if ( data->req.setcookies > 0x31u )
    return (Cookie *)p_next;
  v133 = v8;
  v10 = Curl_ccalloc(1, 44);
  if ( !v10 )
    return (Cookie *)p_next;
  v11 = v10;
  v118 = (Cookie *)v10;
  if ( httpheader )
  {
    if ( strlen(lineptr) <= 0x1388 )
    {
      v130 = 0;
      v135 = (int *)(v11 + 24);
      LODWORD(v136) = ~v133;
      HIDWORD(v136) = 0x7FFFFFFF - (v133 >> 31);
      v12 = lineptr;
      while ( 1 )
      {
        v13 = v12 + 1;
        for ( i = v12; *i == 32 || *i == 9; ++i )
          ++v13;
        LOBYTE(v117) = *i;
        v15 = strcspn(i, ";\t\r\n=");
        if ( !v15 )
        {
          v12 = i;
          goto LABEL_114;
        }
        v12 = &i[v15];
        v16 = v15;
        while ( 1 )
        {
          v17 = i[v16 - 1];
          if ( v17 != 32 && v17 != 9 )
            break;
          if ( !--v16 )
          {
            v16 = 0;
            break;
          }
        }
        if ( *v12 == 61 )
        {
          ne = v15;
          s = &i[v15 + 1];
          v18 = strcspn(s, ";\r\n");
          v19 = v18 + ne;
          n = v18 + ne;
          if ( v18 )
          {
            v20 = s;
            v21 = &v13[v19];
            while ( 1 )
            {
              v22 = *(v21 - 1);
              if ( v22 != 32 && v22 != 9 )
                break;
              --v18;
              --v21;
              if ( !v18 )
                goto LABEL_30;
            }
            while ( *v20 == 32 || *v20 == 9 )
            {
              ++v20;
              if ( !--v18 )
              {
                v18 = 0;
                v20 = v21;
                break;
              }
            }
          }
          else
          {
            v20 = s;
LABEL_30:
            v18 = 0;
          }
          v24 = v18;
          sa = v20;
          if ( memchr(v20, 9, v18) )
          {
            freecookie(v117);
            p_next = 0;
            if ( (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
              Curl_infof(data, "cookie contains TAB, dropping", v115, v116);
            return (Cookie *)p_next;
          }
          v23 = v24;
          v12 = &i[n + 1];
          na = 1;
        }
        else
        {
          v23 = 0;
          na = 0;
          sa = 0;
        }
        if ( v16 > 0xFFE || v23 > 0xFFE || v23 + v16 >= 0x1001 )
        {
          v84 = v23;
          freecookie(v117);
          p_next = 0;
          if ( (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
            Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v16, v84);
          return (Cookie *)p_next;
        }
        v101 = (_BYTE)v117 == 95;
        v117 = (Cookie *)v12;
        if ( v101 && v16 >= 7 && i[1] == 95 )
        {
          v25 = v23;
          if ( curl_strnequal("__Secure-", i, 9) )
          {
            v23 = v25;
            v118->prefix |= 1u;
            v12 = (const char *)v117;
          }
          else
          {
            v26 = curl_strnequal("__Host-", i, 7);
            v12 = (const char *)v117;
            v23 = v25;
            if ( v26 )
              v118->prefix |= 2u;
          }
        }
        if ( !v118->name )
        {
          if ( !na )
            goto LABEL_257;
          nf = v23;
          Curl_cfree(0);
          v118->name = (char *)Curl_strndup(i, v16);
          Curl_cfree(v118->value);
          v30 = (const char *)Curl_strndup(sa, nf);
          v118->value = (char *)v30;
          if ( !v30 )
            goto LABEL_257;
          name = v118->name;
          if ( !name )
            goto LABEL_257;
          if ( v30[strcspn(v30, invalid_octets_badoctets)]
            || (v32 = strcspn(name, invalid_octets_badoctets), v12 = (const char *)v117, name[v32]) )
          {
            if ( (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
              Curl_infof(data, "invalid octets in name/value, cookie dropped", v115, v116);
LABEL_257:
            freecookie(v117);
            return 0;
          }
          goto LABEL_114;
        }
        if ( !v23 )
        {
          if ( v16 == 8 )
          {
            v48 = curl_strnequal("httponly", i, 8);
            v12 = (const char *)v117;
            v23 = 0;
            if ( v48 )
            {
              v118->httponly = 1;
              goto LABEL_114;
            }
          }
          else if ( v16 == 6 )
          {
            v33 = curl_strnequal("secure", i, 6);
            v12 = (const char *)v117;
            v23 = 0;
            if ( v33 )
            {
              if ( !secure && c->running )
                goto LABEL_257;
              v118->secure = 1;
              goto LABEL_114;
            }
          }
          if ( !na )
            goto LABEL_114;
        }
        if ( v16 != 7 )
          break;
        v34 = v23;
        if ( curl_strnequal("version", i, 7) )
          goto LABEL_113;
        if ( curl_strnequal("max-age", i, 7) )
        {
          v35 = v135;
          v36 = sa + 1;
          if ( *sa != 34 )
            v36 = sa;
          v37 = curlx_strtoofft(v36, 0, 10, v135);
          if ( !v37 )
          {
            v56 = *v135;
            v57 = v135[1];
            if ( *(_QWORD *)v135 )
            {
              if ( v136 >= __SPAIR64__(v57, v56) )
              {
                *(_QWORD *)v135 = v133 + __PAIR64__(v57, v56);
              }
              else
              {
                v135[1] = 0x7FFFFFFF;
                *v135 = -1;
              }
            }
            else
            {
LABEL_112:
              v35[1] = 0;
              *v35 = 1;
            }
LABEL_113:
            v12 = (const char *)v117;
            goto LABEL_114;
          }
          if ( v37 == 2 )
            goto LABEL_112;
          v12 = (const char *)v117;
          if ( v37 == 1 )
          {
            v38 = -1;
            v135[1] = 0x7FFFFFFF;
LABEL_72:
            *v35 = v38;
          }
        }
        else
        {
          if ( !curl_strnequal("expires", i, 7) )
            goto LABEL_113;
          v35 = v135;
          v12 = (const char *)v117;
          if ( v34 > 0x7F || *(_QWORD *)v135 )
            goto LABEL_114;
          memcpy(dest, sa, v34);
          *((_BYTE *)dest + v34) = 0;
          v51 = Curl_getdate_capped(dest);
          *(_QWORD *)v135 = v51;
          if ( !v51 )
            goto LABEL_112;
          v12 = (const char *)v117;
          if ( v51 < 0 )
          {
            v38 = 0;
            v135[1] = 0;
            goto LABEL_72;
          }
        }
LABEL_114:
        v46 = v118;
        ++v12;
        while ( 1 )
        {
          v58 = *(v12 - 1);
          if ( v58 != 32 && v58 != 9 )
            break;
          ++v12;
        }
        v55 = 0;
        if ( v58 != 59 )
        {
LABEL_180:
          v79 = v130;
          if ( (v130 & 1) != 0 || !domain )
          {
            v80 = path;
          }
          else
          {
            v80 = path;
            if ( !v46->domain )
            {
              v81 = Curl_cstrdup(domain);
              v46->domain = (char *)v81;
              v101 = v81 == 0;
              v79 = v130;
              if ( v101 )
                v79 = 1;
            }
          }
          if ( (v79 & 1) == 0 && v80 && !v46->path )
          {
            v131 = v79;
            v82 = strchr(v80, 63);
            if ( v82 )
              v83 = (char *)Curl_memrchr(v80, 47, v82 - v80);
            else
              v83 = strrchr(v80, 47);
            if ( v83 )
            {
              v85 = v83 - v80;
              v86 = (char *)Curl_cmalloc(v83 - v80 + 2);
              v46->path = v86;
              if ( !v86 )
                goto LABEL_257;
              v87 = v85 + 1;
              memcpy(v86, path, v87);
              v118->path[v87] = 0;
              v88 = sanitize_cookie_path(v118->path);
              v118->spath = v88;
              v101 = v88 == 0;
              v79 = v131;
              if ( v101 )
                v79 = 1;
            }
            else
            {
              v79 = v131;
            }
          }
          if ( (v79 & 1) != 0 || !v118->name )
            goto LABEL_257;
          ++data->req.setcookies;
          v11 = (int)v118;
          goto LABEL_208;
        }
LABEL_119:
        if ( v55 )
          goto LABEL_180;
      }
      if ( v16 != 6 )
      {
        if ( v16 == 4 )
        {
          v27 = v23;
          if ( !curl_strnequal("path", i, 4) )
            goto LABEL_113;
          Curl_cfree(v118->path);
          v28 = Curl_strndup(sa, v27);
          v118->path = (char *)v28;
          if ( !v28 )
            goto LABEL_257;
          Curl_cfree(v118->spath);
          v29 = sanitize_cookie_path(v118->path);
          v12 = (const char *)v117;
          v118->spath = v29;
          if ( !v29 )
            goto LABEL_257;
        }
        goto LABEL_114;
      }
      v113 = i;
      v39 = v23;
      v40 = curl_strnequal("domain", v113, 6);
      if ( !v39 || !v40 )
        goto LABEL_113;
      v41 = sa + 1;
      v42 = *sa == 46;
      if ( *sa != 46 )
        v41 = sa;
      nb = v39 - v42;
      if ( v39 - v42 == 9 && curl_strnequal(v41, "localhost", 9)
        || (v43 = memchr(v41, 46, nb)) != 0 && (unsigned int)(&v41[nb] - v43) > 1 )
      {
        v49 = domain;
        if ( !domain )
          v49 = v41;
        is_ipnum = Curl_host_is_ipnum(v49);
        v44 = domain;
        v45 = data;
        v46 = v118;
        if ( !domain )
        {
          domain = 0;
LABEL_102:
          v53 = is_ipnum;
          Curl_cfree(v46->domain);
          v54 = Curl_strndup(v41, nb);
          v46->domain = (char *)v54;
          if ( !v53 && v54 )
          {
            v46->tailmatch = 1;
            goto LABEL_113;
          }
          v12 = (const char *)v117;
          if ( !v54 )
          {
            v55 = 6;
            v130 = 1;
            goto LABEL_119;
          }
          goto LABEL_114;
        }
        if ( is_ipnum )
          goto LABEL_82;
      }
      else
      {
        v101 = (unsigned __int8)Curl_host_is_ipnum(":") == 0;
        v44 = ":";
        v45 = data;
        v46 = v118;
        if ( !v101 )
        {
LABEL_82:
          sb = v41;
          v112 = v41;
          v47 = v44;
          domain = v44;
          if ( strncmp(v112, v44, nb) )
          {
            v41 = sb;
            v45 = data;
LABEL_105:
            v130 = 1;
            if ( (*((_BYTE *)&v45->set + 1321) & 0x20) != 0 )
              Curl_infof(v45, "skipped cookie with bad tailmatch domain: %s", v41, v116);
            goto LABEL_113;
          }
          v52 = strlen(v47);
          v41 = sb;
          v45 = data;
          is_ipnum = 1;
          if ( nb != v52 )
            goto LABEL_105;
          goto LABEL_102;
        }
      }
      domain = v44;
      if ( !cookie_tailmatch(v44, v114, v115) )
        goto LABEL_105;
      is_ipnum = 0;
      goto LABEL_102;
    }
LABEL_125:
    Curl_cfree(v11);
    return (Cookie *)p_next;
  }
  dest[0] = 0;
  v59 = lineptr;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
  {
    v59 = lineptr + 10;
    *(_BYTE *)(v11 + 35) = 1;
  }
  if ( *v59 == 35 )
    goto LABEL_125;
  v60 = strchr(v59, 13);
  if ( v60 )
    *v60 = 0;
  v61 = strchr(v59, 10);
  if ( v61 )
    *v61 = 0;
  v62 = strtok_r(v59, "\t", dest);
  if ( !v62 )
    goto LABEL_257;
  v63 = v62;
  v64 = 0;
  v65 = 0;
  nc = v11 + 24;
  do
  {
    v117 = v65;
    switch ( v64 )
    {
      case 0:
        if ( *v63 == 46 )
          ++v63;
        v66 = Curl_cstrdup(v63);
        *(_DWORD *)(v11 + 20) = v66;
        v101 = v66 == 0;
        v67 = (unsigned __int8)v117;
        if ( v101 )
          v67 = 1;
        v64 = 0;
        goto LABEL_153;
      case 1:
        *(_BYTE *)(v11 + 32) = curl_strequal(v63, "TRUE") != 0;
        v64 = 1;
        break;
      case 2:
        if ( !strcmp("TRUE", v63) || !strcmp("FALSE", v63) )
        {
          v73 = Curl_cstrdup("/");
          v118->path = (char *)v73;
          v74 = Curl_cstrdup("/");
          v75 = (unsigned __int8)v117;
          if ( !v74 )
            v75 = 1;
          v101 = v73 == 0;
          v11 = (int)v118;
          if ( v101 )
            v75 = 1;
          v117 = (Cookie *)v75;
          v118->spath = (char *)v74;
LABEL_159:
          *(_BYTE *)(v11 + 33) = 0;
          if ( curl_strequal(v63, "TRUE") )
          {
            if ( secure || (v76 = c, c->running) )
            {
              *(_BYTE *)(v11 + 33) = 1;
            }
            else
            {
              LOBYTE(v76) = 1;
              v117 = (Cookie *)v76;
            }
          }
          v64 = 3;
        }
        else
        {
          v68 = (const char *)Curl_cstrdup(v63);
          *(_DWORD *)(v11 + 12) = v68;
          if ( v68 )
          {
            v69 = sanitize_cookie_path(v68);
            *(_DWORD *)(v11 + 16) = v69;
            v101 = v69 == 0;
            v70 = (unsigned __int8)v117;
            if ( v101 )
              v70 = 1;
          }
          else
          {
            v70 = 1;
          }
          v117 = (Cookie *)v70;
          v64 = 2;
        }
        break;
      case 3:
        goto LABEL_159;
      case 4:
        v101 = curlx_strtoofft(v63, 0, 10, nc) == 0;
        v64 = 4;
        v67 = (unsigned __int8)v117;
        if ( !v101 )
          v67 = 1;
        goto LABEL_153;
      case 5:
        v71 = Curl_cstrdup(v63);
        *(_DWORD *)(v11 + 4) = v71;
        if ( v71 )
        {
          if ( curl_strnequal("__Secure-", v71, 9) )
          {
            *(_BYTE *)(v11 + 40) |= 1u;
          }
          else if ( curl_strnequal("__Host-", *(_DWORD *)(v11 + 4), 7) )
          {
            *(_BYTE *)(v11 + 40) |= 2u;
          }
        }
        else
        {
          v117 = (Cookie *)1;
        }
        v64 = 5;
        break;
      case 6:
        v72 = Curl_cstrdup(v63);
        *(_DWORD *)(v11 + 8) = v72;
        v101 = v72 == 0;
        v64 = 6;
        v67 = (unsigned __int8)v117;
        if ( v101 )
          v67 = 1;
LABEL_153:
        v117 = (Cookie *)v67;
        break;
      default:
        break;
    }
    v77 = strtok_r(0, "\t", dest);
    v65 = v117;
    ++v64;
    if ( !v77 )
      break;
    v63 = v77;
  }
  while ( ((unsigned __int8)v117 & 1) == 0 );
  if ( v64 == 6 )
  {
    v78 = Curl_cstrdup(&L_str_22);
    LOBYTE(v65) = (_BYTE)v117;
    *(_DWORD *)(v11 + 8) = v78;
    if ( !v78 )
      LOBYTE(v65) = 1;
    v64 = (v78 == 0) ^ 7;
  }
  if ( ((unsigned __int8)v65 & 1) != 0 || v64 != 7 )
    goto LABEL_257;
LABEL_208:
  v89 = *(_BYTE *)(v11 + 40);
  p_next = 0;
  if ( (v89 & 1) != 0 && !*(_BYTE *)(v11 + 33)
    || (v89 & 2) != 0
    && (!*(_BYTE *)(v11 + 33) || (v107 = *(const char **)(v11 + 12)) == 0 || strcmp(v107, "/") || *(_BYTE *)(v11 + 32))
    || !(running = c->running) && c->newsession && !*(_QWORD *)(v11 + 24) )
  {
    freecookie(v117);
    return (Cookie *)p_next;
  }
  *(_BYTE *)(v11 + 34) = running;
  v91 = c->lastct + 1;
  c->lastct = v91;
  *(_DWORD *)(v11 + 36) = v91;
  if ( !noexpire )
    remove_expired((CookieInfo *)v117);
  nd = cookiehash(*(const char *const *)(v11 + 20));
  next = c->cookies[nd];
  if ( next )
  {
    p_next = 0;
    v117 = 0;
    sc = 0;
    while ( 1 )
    {
      v93 = next;
      if ( !curl_strequal(next->name, v118->name) )
        goto LABEL_231;
      v94 = v93->domain;
      v95 = v118->domain;
      if ( v94 )
      {
        if ( !v95 || !curl_strequal(v94, v118->domain) )
          goto LABEL_231;
      }
      else if ( v95 )
      {
        goto LABEL_231;
      }
      spath = v93->spath;
      if ( spath && v118->spath && v93->secure && !v118->secure && !secure )
      {
        v134 = v118->spath;
        v97 = strchr(spath + 1, 47);
        v98 = v97 ? v97 - spath : strlen(spath);
        if ( curl_strnequal(spath, v134, v98) )
        {
          if ( data && (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
            Curl_infof(
              data,
              "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
              v118->name,
              v118->domain);
          goto LABEL_257;
        }
      }
LABEL_231:
      if ( v117 )
        goto LABEL_232;
      v117 = 0;
      if ( !curl_strequal(v93->name, v118->name) )
        goto LABEL_232;
      v99 = v93->domain;
      v100 = v118->domain;
      if ( v99 )
      {
        if ( !v100 || !curl_strequal(v99, v118->domain) )
        {
          v102 = (int)sc;
          goto LABEL_243;
        }
        v101 = v93->tailmatch == v118->tailmatch;
      }
      else
      {
        v101 = v100 == 0;
      }
      v102 = (unsigned __int8)sc;
      if ( v101 )
        v102 = 1;
LABEL_243:
      sc = (void *)v102;
      if ( (v102 & 1) != 0 )
      {
        v103 = v93->spath;
        v104 = 0;
        v117 = 0;
        if ( !v103 )
          goto LABEL_249;
        if ( !v118->spath )
        {
          v104 = v93->spath;
LABEL_249:
          v105 = (void *)(unsigned __int8)sc;
          if ( (v104 != 0) == (v118->spath == 0) )
            v105 = 0;
          sc = v105;
          if ( ((unsigned __int8)v105 & 1) != 0 )
          {
            if ( v118->livecookie )
            {
              p_next = &v93->next;
              v117 = v118;
            }
            else
            {
              p_next = &v93->next;
              v117 = v118;
              if ( v93->livecookie )
                goto LABEL_257;
            }
          }
          goto LABEL_232;
        }
        if ( curl_strequal(v103, v118->spath) )
        {
          v104 = v93->spath;
          goto LABEL_249;
        }
        sc = 0;
        v117 = 0;
      }
LABEL_232:
      next = v93->next;
      if ( !v93->next )
      {
        if ( v117 )
        {
          v117->next = *p_next;
          v117->creationtime = (int)p_next[9];
          Curl_cfree(p_next[1]);
          Curl_cfree(p_next[2]);
          Curl_cfree(p_next[5]);
          Curl_cfree(p_next[3]);
          Curl_cfree(p_next[4]);
          qmemcpy(p_next, v117, 0x2Cu);
          Curl_cfree(v117);
        }
        else
        {
          p_next = &v118->next;
        }
        goto LABEL_271;
      }
    }
  }
  p_next = (Cookie **)v11;
  v93 = 0;
  LOBYTE(sc) = 0;
LABEL_271:
  if ( data && c->running && (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
  {
    v108 = "Replaced";
    if ( ((unsigned __int8)sc & 1) == 0 )
      v108 = "Added";
    Curl_infof(data, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld", v108, p_next[1]);
  }
  if ( ((unsigned __int8)sc & 1) == 0 )
  {
    v109 = &c->cookies[nd];
    if ( v93 )
      v109 = &v93->next;
    *v109 = (Cookie *)p_next;
    ++c->numcookies;
  }
  LODWORD(v110) = p_next[6];
  v111 = p_next[7];
  if ( *((_QWORD *)p_next + 3) )
  {
    HIDWORD(v110) = p_next[7];
    if ( v110 < c->next_expiration )
    {
      LODWORD(c->next_expiration) = v110;
      HIDWORD(c->next_expiration) = v111;
    }
  }
  return (Cookie *)p_next;
}
