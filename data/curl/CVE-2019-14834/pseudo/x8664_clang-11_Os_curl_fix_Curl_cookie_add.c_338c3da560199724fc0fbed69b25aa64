Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  Cookie *v10; // r13
  time_t v11; // rax
  __int64 v12; // rax
  const char *v13; // r13
  char *i; // rbx
  char v15; // bp
  size_t v16; // rax
  size_t v17; // rcx
  unsigned __int64 v18; // r12
  char v19; // al
  size_t v20; // r14
  size_t v21; // rax
  size_t v22; // rdx
  size_t v23; // r14
  size_t v24; // r15
  const char *v25; // rax
  char v26; // cl
  size_t v27; // r15
  char v28; // r13
  const char *v29; // r13
  __int64 v30; // rcx
  char v31; // dl
  __int64 v32; // rax
  char *v33; // rax
  const char *v34; // rax
  const char *name; // rbx
  char v36; // cl
  int v37; // eax
  const char *v38; // rdi
  __int64 *v39; // rbx
  int v40; // eax
  int v41; // eax
  const char *v42; // rbx
  size_t v43; // r15
  _BYTE *v44; // rax
  const char *v45; // rbp
  char is_ipnum; // r12
  const char *v47; // rdi
  __int64 v48; // rax
  __int64 v49; // rax
  __int64 v50; // rax
  char *v51; // rax
  char *v52; // rax
  char *v53; // rax
  const char *v54; // r12
  int v55; // ebp
  char v56; // r14
  __int64 v57; // rax
  const char *v58; // rax
  char *v59; // rax
  __int64 v60; // rax
  __int64 v61; // rax
  __int64 v62; // rbp
  __int64 v63; // rax
  char *v64; // rax
  __int64 v65; // rax
  _BOOL4 v66; // ebp
  char v67; // al
  char v68; // bl
  const char *v69; // rbp
  __int64 v70; // rax
  char *v71; // rax
  char v72; // r14
  char *v73; // rax
  signed __int64 v74; // rbx
  char *v75; // rax
  size_t v76; // rbx
  char *v77; // rax
  unsigned __int8 prefix; // al
  CookieInfo *v79; // rbx
  bool running; // al
  int v81; // eax
  Cookie *next; // rax
  Cookie *v83; // rbx
  char v84; // r14
  Cookie *v85; // rbp
  char *v86; // rdi
  char *v87; // rsi
  const char *spath; // r15
  char *v89; // r12
  char *v90; // rax
  size_t v91; // rax
  char *v92; // rdi
  char *v93; // rsi
  bool v94; // zf
  char *v95; // rdi
  char *v96; // rsi
  const char *v97; // rdi
  const char *v99; // rdx
  Cookie **p_next; // rax
  curl_off_t expires; // rax
  Cookie *v102; // rdi
  Cookie *v103; // [rsp+0h] [rbp-108h]
  size_t v105; // [rsp+8h] [rbp-100h]
  const char *s; // [rsp+18h] [rbp-F0h]
  char v109; // [rsp+28h] [rbp-E0h]
  __int64 *p_expires; // [rsp+38h] [rbp-D0h]
  time_t v112; // [rsp+40h] [rbp-C8h]
  __int64 v113; // [rsp+48h] [rbp-C0h]
  char *dest[23]; // [rsp+50h] [rbp-B8h] BYREF

  v10 = 0LL;
  v11 = time(0LL);
  if ( data->req.setcookies > 0x31u )
    return v10;
  v112 = v11;
  v12 = Curl_ccalloc(1LL, 72LL);
  if ( !v12 )
    return 0LL;
  v10 = (Cookie *)v12;
  v103 = (Cookie *)v12;
  if ( !httpheader )
  {
    dest[0] = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 10;
      v10->httponly = 1;
    }
    if ( *lineptr != 35 )
    {
      v51 = strchr(lineptr, 13);
      if ( v51 )
        *v51 = 0;
      v52 = strchr(lineptr, 10);
      if ( v52 )
        *v52 = 0;
      v53 = strtok_r(lineptr, "\t", dest);
      if ( !v53 )
        goto LABEL_255;
      v54 = v53;
      v55 = 0;
      v56 = 0;
      do
      {
        switch ( v55 )
        {
          case 0:
            if ( *v54 == 46 )
              ++v54;
            v57 = Curl_cstrdup(v54);
            v103->domain = (char *)v57;
            if ( !v57 )
              v56 = 1;
            v55 = 0;
            break;
          case 1:
            v103->tailmatch = (unsigned int)curl_strequal(v54, "TRUE") != 0;
            v55 = 1;
            break;
          case 2:
            if ( !strcmp("TRUE", v54) || !strcmp("FALSE", v54) )
            {
              v62 = Curl_cstrdup("/");
              v103->path = (char *)v62;
              v63 = Curl_cstrdup("/");
              if ( !v63 )
                v56 = 1;
              v103->spath = (char *)v63;
              if ( !v62 )
                v56 = 1;
              goto LABEL_154;
            }
            v58 = (const char *)Curl_cstrdup(v54);
            v103->path = (char *)v58;
            v55 = 2;
            if ( v58 )
            {
              v59 = sanitize_cookie_path(v58);
              v103->spath = v59;
              if ( !v59 )
                v56 = 1;
            }
            else
            {
              v56 = 1;
            }
            break;
          case 3:
LABEL_154:
            v103->secure = 0;
            v55 = 3;
            if ( (unsigned int)curl_strequal(v54, "TRUE") )
            {
              if ( !secure && !c->running )
                goto LABEL_158;
              v103->secure = 1;
            }
            break;
          case 4:
            if ( (unsigned int)curlx_strtoofft(v54, 0LL, 10LL, &v10->expires) )
              v56 = 1;
            v55 = 4;
            break;
          case 5:
            v60 = Curl_cstrdup(v54);
            v103->name = (char *)v60;
            v55 = 5;
            if ( v60 )
            {
              if ( (unsigned int)curl_strnequal("__Secure-", v60, 9LL) )
              {
                v103->prefix |= 1u;
              }
              else if ( (unsigned int)curl_strnequal("__Host-", v103->name, 7LL) )
              {
                v103->prefix |= 2u;
              }
            }
            else
            {
LABEL_158:
              v56 = 1;
            }
            break;
          case 6:
            v61 = Curl_cstrdup(v54);
            v103->value = (char *)v61;
            if ( !v61 )
              v56 = 1;
            v55 = 6;
            break;
          default:
            break;
        }
        v64 = strtok_r(0LL, "\t", dest);
        ++v55;
        if ( !v64 )
          break;
        v54 = v64;
      }
      while ( (v56 & 1) == 0 );
      if ( v55 == 6 )
      {
        v65 = Curl_cstrdup(&L_str_22);
        v10 = v103;
        v103->value = (char *)v65;
        v94 = v65 == 0;
        v66 = v65 == 0;
        v67 = v56;
        v56 = 1;
        if ( !v94 )
          v56 = v67;
        v55 = v66 ^ 7;
      }
      else
      {
        v10 = v103;
      }
      if ( (v56 & 1) != 0 || v55 != 7 )
        goto LABEL_255;
      goto LABEL_198;
    }
LABEL_121:
    Curl_cfree(v10);
    return 0LL;
  }
  if ( strlen(lineptr) > 0x1388 )
    goto LABEL_121;
  p_expires = &v10->expires;
  v113 = 0x7FFFFFFFFFFFFFFFLL - v112;
  v109 = 0;
  while ( 1 )
  {
    v13 = lineptr + 1;
    for ( i = lineptr; ; ++i )
    {
      v15 = *i;
      if ( *i != 32 && v15 != 9 )
        break;
      ++v13;
    }
    v16 = strcspn(i, ";\t\r\n=");
    if ( !v16 )
    {
      lineptr = i;
LABEL_26:
      v10 = v103;
      do
      {
        do
LABEL_57:
          v36 = *lineptr++;
        while ( v36 == 32 );
      }
      while ( v36 == 9 );
      v37 = 0;
      if ( v36 == 59 )
        goto LABEL_60;
LABEL_172:
      v68 = v109;
      if ( (v109 & 1) != 0 )
      {
        v69 = path;
      }
      else
      {
        v69 = path;
        if ( domain )
        {
          if ( !v10->domain )
          {
            v70 = Curl_cstrdup(domain);
            v10->domain = (char *)v70;
            v68 = 1;
            if ( v70 )
              v68 = v109;
          }
        }
      }
      if ( (v68 & 1) == 0 && v69 && !v10->path )
      {
        v71 = strchr(v69, 63);
        v72 = v68;
        v73 = v71 ? (char *)Curl_memrchr(v69, 47LL, v71 - v69) : strrchr(v69, 47);
        if ( v73 )
        {
          v74 = v73 - v69;
          v75 = (char *)Curl_cmalloc(v73 - v69 + 2);
          v10->path = v75;
          if ( !v75 )
            goto LABEL_255;
          v76 = v74 + 1;
          memcpy(v75, path, v76);
          v10->path[v76] = 0;
          v77 = sanitize_cookie_path(v10->path);
          v10->spath = v77;
          v68 = 1;
          if ( v77 )
            v68 = v72;
        }
      }
      if ( (v68 & 1) == 0 && v10->name )
      {
        ++data->req.setcookies;
LABEL_198:
        prefix = v10->prefix;
        if ( (prefix & 1) != 0 && !v10->secure )
          goto LABEL_255;
        if ( (prefix & 2) != 0 )
        {
          if ( !v10->secure )
            goto LABEL_255;
          v97 = v10->path;
          if ( !v97 || strcmp(v97, "/") || v10->tailmatch )
            goto LABEL_255;
        }
        v79 = c;
        running = c->running;
        if ( !running && c->newsession && !v10->expires )
          goto LABEL_255;
        v10->livecookie = running;
        v81 = c->lastct + 1;
        c->lastct = v81;
        v10->creationtime = v81;
        if ( !noexpire )
          remove_expired(c);
        v105 = cookiehash(v10->domain);
        next = c->cookies[v105];
        if ( !next )
        {
          v85 = 0LL;
          v84 = 0;
LABEL_262:
          if ( data && v79->running && (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
          {
            v99 = "Replaced";
            if ( (v84 & 1) == 0 )
              v99 = "Added";
            Curl_infof(
              data,
              "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
              v99,
              v10->name,
              v10->value,
              v10->domain,
              v10->path,
              v10->expires);
          }
          if ( (v84 & 1) == 0 )
          {
            p_next = &v79->cookies[v105];
            if ( v85 )
              p_next = &v85->next;
            *p_next = v10;
            ++v79->numcookies;
          }
          expires = v10->expires;
          if ( expires && expires < v79->next_expiration )
            v79->next_expiration = expires;
          return v10;
        }
        v83 = 0LL;
        v10 = 0LL;
        v84 = 0;
        while ( 1 )
        {
          v85 = next;
          if ( !(unsigned int)curl_strequal(next->name, v103->name) )
            goto LABEL_221;
          v86 = v85->domain;
          v87 = v103->domain;
          if ( v86 )
          {
            if ( !v87 || !(unsigned int)curl_strequal(v86, v87) )
              goto LABEL_221;
          }
          else if ( v87 )
          {
            goto LABEL_221;
          }
          spath = v85->spath;
          if ( spath )
          {
            v89 = v103->spath;
            if ( v89 )
            {
              if ( v85->secure && !v103->secure && !secure )
              {
                v90 = strchr(spath + 1, 47);
                v91 = v90 ? v90 - spath : strlen(spath);
                if ( (unsigned int)curl_strnequal(spath, v89, v91) )
                {
                  if ( data && (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
                    Curl_infof(
                      data,
                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                      v103->name,
                      v103->domain);
                  v102 = v103;
LABEL_256:
                  freecookie(v102);
                  return 0LL;
                }
              }
            }
          }
LABEL_221:
          if ( !v83 )
          {
            if ( (unsigned int)curl_strequal(v85->name, v103->name) )
            {
              v92 = v85->domain;
              v93 = v103->domain;
              if ( !v92 )
              {
                v94 = v93 == 0LL;
                goto LABEL_228;
              }
              if ( v93 && (unsigned int)curl_strequal(v92, v93) )
              {
                v94 = v85->tailmatch == v103->tailmatch;
LABEL_228:
                if ( v94 )
                  v84 = 1;
              }
              if ( (v84 & 1) != 0 )
              {
                v95 = v85->spath;
                if ( !v95 )
                {
                  v95 = 0LL;
                  goto LABEL_236;
                }
                v96 = v103->spath;
                if ( v96 )
                {
                  if ( (unsigned int)curl_strequal(v95, v96) )
                  {
                    v95 = v85->spath;
                    goto LABEL_236;
                  }
                  v84 = 0;
                }
                else
                {
LABEL_236:
                  v83 = v103;
                  if ( (v95 != 0LL) == (v103->spath == 0LL) )
                    v84 = 0;
                  if ( (v84 & 1) != 0 )
                  {
                    if ( v103->livecookie )
                    {
                      v10 = v85;
                    }
                    else
                    {
                      v10 = v85;
                      if ( v85->livecookie )
                      {
                        v102 = v103;
                        goto LABEL_256;
                      }
                    }
                    goto LABEL_245;
                  }
                }
              }
            }
            v83 = 0LL;
          }
LABEL_245:
          next = v85->next;
          if ( !v85->next )
          {
            if ( v83 )
            {
              v83->next = v10->next;
              v83->creationtime = v10->creationtime;
              Curl_cfree(v10->name);
              Curl_cfree(v10->value);
              Curl_cfree(v10->domain);
              Curl_cfree(v10->path);
              Curl_cfree(v10->spath);
              qmemcpy(v10, v83, sizeof(Cookie));
              Curl_cfree(v83);
            }
            else
            {
              v10 = v103;
            }
            v79 = c;
            goto LABEL_262;
          }
        }
      }
LABEL_255:
      v102 = v10;
      goto LABEL_256;
    }
    v17 = v16;
    lineptr = &i[v16];
    v18 = v16;
    while ( 1 )
    {
      v19 = i[v18 - 1];
      if ( v19 != 32 && v19 != 9 )
        break;
      if ( !--v18 )
      {
        v18 = 0LL;
        break;
      }
    }
    if ( *lineptr != 61 )
    {
      v27 = 0LL;
      v28 = 0;
      s = 0LL;
      goto LABEL_28;
    }
    s = &i[v17 + 1];
    v20 = v17;
    v21 = strcspn(s, ";\r\n");
    v22 = v20;
    v23 = v21 + v20;
    if ( v21 )
    {
      v24 = v21;
      v25 = &v13[v23];
      while ( 1 )
      {
        v26 = *(v25 - 1);
        if ( v26 != 32 && v26 != 9 )
          break;
        --v24;
        --v25;
        if ( !v24 )
          goto LABEL_22;
      }
      v29 = &v13[v22];
      v30 = 0LL;
      while ( 1 )
      {
        v31 = v29[v30];
        if ( v31 != 32 && v31 != 9 )
          break;
        if ( v24 == ++v30 )
        {
          v27 = 0LL;
          s = v25;
          goto LABEL_23;
        }
      }
      v27 = v24 - v30;
      s = &v29[v30];
    }
    else
    {
LABEL_22:
      v27 = 0LL;
    }
LABEL_23:
    if ( memchr(s, 9, v27) )
      break;
    lineptr = &i[v23 + 1];
    v28 = 1;
LABEL_28:
    if ( v18 > 0xFFE || v27 > 0xFFE || v27 + v18 >= 0x1001 )
    {
      freecookie(v103);
      if ( (*((_BYTE *)&data->set + 2229) & 0x20) == 0 )
        return 0LL;
      v10 = 0LL;
      Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v18, v27);
      return v10;
    }
    if ( v15 == 95 && v18 >= 7 && i[1] == 95 )
    {
      if ( (unsigned int)curl_strnequal("__Secure-", i, 9LL) )
      {
        v103->prefix |= 1u;
      }
      else if ( (unsigned int)curl_strnequal("__Host-", i, 7LL) )
      {
        v103->prefix |= 2u;
      }
    }
    if ( !v103->name )
    {
      v94 = v28 == 0;
      v10 = v103;
      if ( v94 )
        goto LABEL_255;
      Curl_cfree(0LL);
      v103->name = (char *)Curl_strndup(i, v18);
      Curl_cfree(v103->value);
      v34 = (const char *)Curl_strndup(s, v27);
      v103->value = (char *)v34;
      if ( !v34 )
        goto LABEL_255;
      name = v103->name;
      if ( !name )
        goto LABEL_255;
      if ( v34[strcspn(v34, &invalid_octets_badoctets)] || name[strcspn(name, &invalid_octets_badoctets)] )
      {
        if ( (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
        goto LABEL_255;
      }
      goto LABEL_57;
    }
    if ( v27 )
      goto LABEL_45;
    if ( v18 == 8 )
    {
      if ( (unsigned int)curl_strnequal("httponly", i, 8LL) )
      {
        v10 = v103;
        v103->httponly = 1;
        goto LABEL_57;
      }
    }
    else if ( v18 == 6 && (unsigned int)curl_strnequal("secure", i, 6LL) )
    {
      v10 = v103;
      if ( !secure && c->running )
        goto LABEL_255;
      v103->secure = 1;
      goto LABEL_57;
    }
    if ( !v28 )
      goto LABEL_26;
LABEL_45:
    if ( v18 == 7 )
    {
      v10 = v103;
      if ( (unsigned int)curl_strnequal("version", i, 7LL) )
        goto LABEL_57;
      if ( (unsigned int)curl_strnequal("max-age", i, 7LL) )
      {
        v38 = s + 1;
        if ( *s != 34 )
          v38 = s;
        v39 = p_expires;
        v40 = curlx_strtoofft(v38, 0LL, 10LL, p_expires);
        if ( v40 )
        {
          if ( v40 != 2 )
          {
            if ( v40 != 1 )
              goto LABEL_57;
            goto LABEL_115;
          }
        }
        else
        {
          v50 = *p_expires;
          if ( *p_expires )
          {
            if ( v113 >= v50 )
            {
              *p_expires = v112 + v50;
              goto LABEL_57;
            }
LABEL_115:
            *p_expires = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_57;
          }
        }
      }
      else
      {
        if ( !(unsigned int)curl_strnequal("expires", i, 7LL) )
          goto LABEL_57;
        v39 = p_expires;
        if ( v27 > 0x7F || *p_expires )
          goto LABEL_57;
        memcpy(dest, s, v27);
        *((_BYTE *)dest + v27) = 0;
        v48 = Curl_getdate_capped(dest);
        *p_expires = v48;
        if ( v48 )
        {
          if ( v48 < 0 )
            *p_expires = 0LL;
          goto LABEL_57;
        }
      }
      *v39 = 1LL;
      goto LABEL_57;
    }
    v10 = v103;
    if ( v18 != 6 )
    {
      if ( v18 == 4 )
      {
        if ( (unsigned int)curl_strnequal("path", i, 4LL) )
        {
          Curl_cfree(v103->path);
          v32 = Curl_strndup(s, v27);
          v103->path = (char *)v32;
          if ( !v32 )
            goto LABEL_255;
          Curl_cfree(v103->spath);
          v33 = sanitize_cookie_path(v103->path);
          v103->spath = v33;
          if ( !v33 )
            goto LABEL_255;
        }
      }
      goto LABEL_57;
    }
    v41 = curl_strnequal("domain", i, 6LL);
    if ( !v27 || !v41 )
      goto LABEL_57;
    v42 = s + 1;
    if ( *s != 46 )
      v42 = s;
    v43 = v27 - (*s == 46);
    if ( v43 == 9 && (unsigned int)curl_strnequal(v42, "localhost", 9LL)
      || (v44 = memchr(v42, 46, v43)) != 0LL && (unsigned __int64)(&v42[v43] - v44) > 1 )
    {
      v47 = domain;
      if ( !domain )
        v47 = v42;
      is_ipnum = Curl_host_is_ipnum(v47);
      if ( !domain )
      {
        domain = 0LL;
        goto LABEL_108;
      }
      v45 = domain;
      if ( !is_ipnum )
      {
LABEL_97:
        domain = v45;
        if ( !cookie_tailmatch(v42, v43, v45) )
          goto LABEL_99;
        is_ipnum = 0;
        goto LABEL_108;
      }
    }
    else
    {
      v45 = ":";
      if ( !(unsigned __int8)Curl_host_is_ipnum(":") )
        goto LABEL_97;
    }
    domain = v45;
    if ( strncmp(v42, v45, v43) || (is_ipnum = 1, v43 != strlen(v45)) )
    {
LABEL_99:
      v109 = 1;
      if ( (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
        Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v42);
      goto LABEL_57;
    }
LABEL_108:
    Curl_cfree(v103->domain);
    v49 = Curl_strndup(v42, v43);
    v103->domain = (char *)v49;
    if ( !is_ipnum && v49 )
    {
      v103->tailmatch = 1;
      goto LABEL_57;
    }
    if ( v49 )
      goto LABEL_57;
    v37 = 6;
    v109 = 1;
LABEL_60:
    if ( v37 )
      goto LABEL_172;
  }
  freecookie(v103);
  if ( (*((_BYTE *)&data->set + 2229) & 0x20) == 0 )
    return 0LL;
  v10 = 0LL;
  Curl_infof(data, "cookie contains TAB, dropping");
  return v10;
}
