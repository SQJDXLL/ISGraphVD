Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  _BOOL4 v8; // r6
  char *v10; // r9
  time_t v11; // r0
  unsigned int setcookies; // r3
  Cookie *v13; // r10
  int v14; // r5
  bool v15; // zf
  size_t v16; // r8
  char *v17; // r7
  int v18; // t1
  bool v19; // zf
  char *v20; // r2
  int v21; // r3
  int v22; // t1
  bool v23; // zf
  CookieInfo *v24; // r3
  size_t v25; // r6
  unsigned __int8 *v26; // r11
  size_t v27; // r0
  unsigned __int8 *v28; // r2
  int v29; // r3
  int v30; // t1
  bool v31; // zf
  int v32; // r2
  _BOOL4 v33; // r3
  _BOOL4 v34; // r3
  char *v35; // r3
  _BOOL4 v36; // r2
  CookieInfo *v37; // r2
  char *v38; // r3
  size_t v39; // r0
  unsigned int v40; // r4
  size_t v41; // r9
  int livecookie; // r7
  unsigned int v43; // r6
  Cookie *v44; // r5
  unsigned int v45; // r3
  int v46; // r0
  char *v47; // r1
  const char *v48; // r8
  char *spath; // r11
  int v50; // r0
  char *v51; // r1
  int v52; // r0
  char *v53; // r1
  char *v54; // r2
  char *v55; // r3
  void (__fastcall *v56)(Cookie *); // r8
  char *v57; // r1
  int expires; // r2
  int expires_high; // r3
  int creationtime; // r1
  int v61; // r2
  int v62; // r3
  const char *v63; // r2
  char *v64; // r0
  char *v65; // r0
  char *v66; // r0
  int v67; // r9
  char *v68; // r0
  char v69; // r3
  int v70; // r4
  int v71; // r0
  char v72; // r3
  char *v73; // r6
  int v74; // r0
  int (__fastcall *v75)(void *); // r11
  const char *v76; // r0
  unsigned int v77; // r9
  char *v78; // r0
  int v79; // r3
  int v80; // r9
  int v81; // r3
  int v82; // r0
  int (__fastcall *v83)(void *); // r3
  int v84; // r8
  int v85; // r0
  int v86; // r2
  int v87; // r6
  int v88; // r1
  int v89; // r9
  char *v90; // r0
  int v91; // r3
  unsigned __int8 *v93; // r3
  int v94; // r2
  int v95; // t1
  bool v96; // zf
  _BYTE *v97; // r0
  int v98; // r0
  int is_ipnum; // r5
  char *v100; // r8
  int v101; // r0
  size_t v102; // r0
  size_t v103; // r8
  char *v104; // r9
  int v105; // r0
  int v106; // r0
  char v107; // r3
  int v108; // r0
  char v109; // r3
  const char *name; // r5
  char *value; // r6
  char *v112; // r8
  int v113; // r0
  char *v114; // r0
  int v115; // r0
  int v116; // r0
  char *v117; // r1
  __int64 v118; // r2
  Curl_easy *v119; // r12
  int v120; // r0
  char *v121; // r0
  size_t v122; // r2
  bool v123; // zf
  void *v124; // r0
  int v125; // r0
  curl_off_t v126; // r2
  int v127; // r0
  int v128; // r0
  char *v129; // r0
  char *v130; // r3
  int v131; // r3
  size_t v132; // r5
  char *v133; // r0
  char *v134; // r0
  int v135; // r4
  int v136; // [sp+0h] [bp-100h] BYREF
  CookieInfo *ca; // [sp+1Ch] [bp-E4h]
  char *reject; // [sp+20h] [bp-E0h]
  Curl_easy *dataa; // [sp+24h] [bp-DCh]
  Curl_easy *v140; // [sp+2Ch] [bp-D4h]
  char *s2; // [sp+30h] [bp-D0h]
  time_t now; // [sp+34h] [bp-CCh]
  _BOOL4 v143; // [sp+38h] [bp-C8h]
  time_t badcookie; // [sp+3Ch] [bp-C4h]
  const char *v145; // [sp+40h] [bp-C0h]
  CookieInfo *v146; // [sp+44h] [bp-BCh]
  char *v147; // [sp+48h] [bp-B8h]
  CookieInfo *v148; // [sp+4Ch] [bp-B4h]
  char *tok_buf; // [sp+50h] [bp-B0h] BYREF
  char date[128]; // [sp+54h] [bp-ACh] BYREF

  ca = (CookieInfo *)httpheader;
  v8 = httpheader;
  v143 = noexpire;
  v140 = data;
  dataa = (Curl_easy *)c;
  s2 = (char *)domain;
  v10 = (char *)lineptr;
  now = secure;
  v11 = time(0u);
  setcookies = data->req.setcookies;
  badcookie = v11;
  if ( setcookies > 0x31 )
    return 0;
  v13 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v13 )
    return 0;
  if ( v8 )
  {
    if ( strlen(lineptr) <= (unsigned int)&loc_1388 )
    {
      reject = ";\t\r\n=";
      v147 = (char *)&badoctets_0;
      v145 = "path";
      v146 = 0;
      while ( 1 )
      {
        v14 = (unsigned __int8)*v10;
        if ( !*v10 )
          break;
LABEL_7:
        v15 = v14 == 9;
        if ( v14 != 9 )
          v15 = v14 == 32;
        if ( !v15 )
        {
          v16 = strcspn(v10, ";\t\r\n=");
          if ( !v16 )
          {
            v17 = v10;
            goto LABEL_14;
          }
          goto LABEL_20;
        }
        ++v10;
      }
      while ( 1 )
      {
        v16 = strcspn(v10, reject);
        if ( !v16 )
          goto LABEL_50;
LABEL_20:
        v17 = &v10[v16];
        v20 = &v10[v16];
        while ( v16 )
        {
          v22 = (unsigned __int8)*--v20;
          v21 = v22;
          v23 = v22 == 9;
          if ( v22 != 9 )
            v23 = v21 == 32;
          if ( !v23 )
          {
            v24 = 0;
            if ( *v17 != 61 )
            {
              v32 = 0;
              v26 = 0;
              v25 = 0;
              goto LABEL_37;
            }
            goto LABEL_29;
          }
          --v16;
        }
        if ( *v17 != 61 )
          break;
LABEL_29:
        v26 = (unsigned __int8 *)(v17 + 1);
        v27 = strcspn(v17 + 1, ";\r\n");
        v28 = (unsigned __int8 *)&v17[v27 + 1];
        v25 = v27;
        v17 += v27 + 1;
        while ( 1 )
        {
          if ( !v25 )
          {
            v24 = ca;
            v32 = 0;
            goto LABEL_37;
          }
          v30 = *--v28;
          v29 = v30;
          v31 = v30 == 9;
          if ( v30 != 9 )
            v31 = v29 == 32;
          if ( !v31 )
            break;
          --v25;
        }
        v93 = v26;
        do
        {
          v26 = v93;
          v95 = *v93++;
          v94 = v95;
          v96 = v95 == 9;
          if ( v95 != 9 )
            v96 = v94 == 32;
          if ( !v96 )
          {
            if ( !memchr(v26, 9, v25) )
              goto LABEL_162;
            freecookie(v13);
            if ( (*(&v140->set.connect_only + 4) & 0x10) != 0 )
              Curl_infof(v140, "cookie contains TAB, dropping");
            return 0;
          }
          --v25;
        }
        while ( v25 );
        v26 = v93;
LABEL_162:
        v24 = ca;
        v32 = v25 > 0xFFE;
LABEL_37:
        if ( v16 > 0xFFE )
          v32 |= 1u;
        if ( v32 || v25 + v16 > 0x1000 )
        {
          freecookie(v13);
          if ( (*(&v140->set.connect_only + 4) & 0x10) != 0 )
            Curl_infof(v140, "oversized cookie dropped, name/val %zu + %zu bytes", v16, v25);
          return 0;
        }
        if ( v16 <= 6 )
          goto LABEL_165;
        if ( v14 != 95 || v10[1] != 95 )
          goto LABEL_43;
        v148 = v24;
        v105 = curl_strnequal("__Secure-", v10, 9);
        v24 = v148;
        if ( !v105 )
        {
          v127 = curl_strnequal("__Host-", v10, 7);
          v24 = v148;
          if ( v127 )
          {
            v13->prefix |= 2u;
            if ( !v13->name )
              goto LABEL_202;
            goto LABEL_44;
          }
LABEL_43:
          if ( v13->name )
            goto LABEL_44;
          goto LABEL_202;
        }
        v13->prefix |= 1u;
        if ( !v13->name )
          goto LABEL_202;
LABEL_44:
        if ( v25 )
        {
LABEL_47:
          if ( v16 != 7 || curl_strnequal("version", v10, 7) )
            goto LABEL_48;
          if ( !curl_strnequal("max-age", v10, 7) )
          {
            if ( curl_strnequal("expires", v10, 7) )
            {
              v123 = v25 == 127;
              if ( v25 <= 0x7F )
                v123 = v13->expires == 0;
              if ( v123 )
              {
                v124 = memcpy(date, v26, v25);
                *((_BYTE *)&v136 + v25 + 0x54) = 0;
                v125 = Curl_getdate_capped(v124);
                HIDWORD(v126) = v125;
                LODWORD(v126) = v125 >> 31;
                if ( v125 )
                {
                  if ( v125 >= 0 )
                  {
                    LODWORD(v13->expires) = v125;
                    HIDWORD(v13->expires) = v126;
                  }
                  else
                  {
                    v126 = 0LL;
                  }
                  if ( v125 >> 31 == -1 )
                    v13->expires = v126;
                }
                else
                {
                  v13->expires = 1LL;
                }
              }
            }
            goto LABEL_48;
          }
          if ( *v26 == 34 )
            ++v26;
          v115 = curlx_strtoofft(v26, 0, 10, &v13->expires);
          if ( v115 != 1 )
          {
            if ( v115 == 2 )
              goto LABEL_289;
            if ( v115 )
              goto LABEL_48;
            if ( !v13->expires )
            {
LABEL_289:
              v13->expires = 1LL;
              v14 = (unsigned __int8)*v17;
              goto LABEL_49;
            }
            if ( __SPAIR64__(0x7FFFFFFF - (badcookie >> 0x1F), ~badcookie) >= v13->expires )
            {
              v13->expires += badcookie;
              v14 = (unsigned __int8)*v17;
              goto LABEL_49;
            }
          }
          v13->expires = 0x7FFFFFFFFFFFFFFFLL;
          v14 = (unsigned __int8)*v17;
        }
        else if ( v16 == 8 )
        {
          if ( !curl_strnequal("httponly", v10, 8) )
            goto LABEL_48;
          v13->httponly = 1;
          v14 = (unsigned __int8)*v17;
        }
        else
        {
          if ( v24 )
            goto LABEL_47;
LABEL_48:
          v14 = (unsigned __int8)*v17;
        }
LABEL_49:
        if ( !v14 )
        {
LABEL_50:
          if ( !v146 )
          {
            v33 = v13->domain == 0;
            if ( !s2 )
              v33 = 0;
            if ( !v33 || (v128 = Curl_cstrdup(s2), (v13->domain = (char *)v128) != 0) )
            {
              v34 = v13->path == 0;
              if ( !path )
                v34 = 0;
              if ( !v34 )
                goto LABEL_332;
              v129 = strchr(path, 63);
              v130 = v129 ? (char *)Curl_memrchr(path, 47, v129 - path) : strrchr(path, 47);
              if ( !v130 )
                goto LABEL_332;
              v131 = v130 - path;
              v132 = v131 + 1;
              v133 = (char *)Curl_cmalloc(v131 + 2);
              v13->path = v133;
              if ( v133 )
              {
                memcpy(v133, path, v132);
                v13->path[v132] = 0;
                v134 = sanitize_cookie_path(v13->path);
                v13->spath = v134;
                if ( v134 )
                {
LABEL_332:
                  if ( v13->name )
                  {
                    ++v140->req.setcookies;
                    goto LABEL_59;
                  }
                }
              }
            }
          }
LABEL_153:
          freecookie(v13);
          return 0;
        }
        while ( 1 )
        {
LABEL_14:
          v19 = v14 == 9;
          if ( v14 != 9 )
            v19 = v14 == 32;
          if ( !v19 )
            break;
          v18 = (unsigned __int8)*++v17;
          v14 = v18;
          if ( !v18 )
            goto LABEL_50;
        }
        if ( v14 != 59 )
          goto LABEL_50;
        v14 = (unsigned __int8)v17[1];
        v10 = v17 + 1;
        if ( v17[1] )
          goto LABEL_7;
      }
      v25 = 0;
      v24 = 0;
      v26 = 0;
LABEL_165:
      if ( !v13->name )
      {
LABEL_202:
        if ( v24 )
        {
          Curl_cfree(0);
          v106 = Curl_memdup(v10, v16 + 1);
          if ( v106 )
            v107 = 0;
          v13->name = (char *)v106;
          if ( v106 )
            *(_BYTE *)(v106 + v16) = v107;
          Curl_cfree(v13->value);
          v108 = Curl_memdup(v26, v25 + 1);
          if ( v108 )
            v109 = 0;
          v13->value = (char *)v108;
          if ( v108 )
            *(_BYTE *)(v108 + v25) = v109;
          name = v13->name;
          if ( name )
          {
            value = v13->value;
            if ( value )
            {
              v112 = v147;
              if ( !value[strcspn(v13->value, v147)] && !name[strcspn(name, v112)] )
                goto LABEL_48;
              if ( (*(&v140->set.connect_only + 4) & 0x10) != 0 )
                Curl_infof(v140, "invalid octets in name/value, cookie dropped");
            }
          }
        }
        goto LABEL_153;
      }
      if ( !v25 )
      {
        if ( v16 == 6 )
        {
          v148 = v24;
          if ( !curl_strnequal("secure", v10, 6) )
          {
            if ( v148 )
              curl_strnequal("domain", v10, 6);
            goto LABEL_48;
          }
          if ( now || !LOBYTE(dataa->req.doh) )
          {
            v13->secure = 1;
            v14 = (unsigned __int8)*v17;
            goto LABEL_49;
          }
          goto LABEL_153;
        }
        if ( !v24 || v16 != 4 )
          goto LABEL_48;
LABEL_219:
        if ( !curl_strnequal(v145, v10, 4) )
          goto LABEL_48;
        Curl_cfree(v13->path);
        v113 = Curl_memdup(v26, v25 + 1);
        v13->path = (char *)v113;
        if ( v113 )
        {
          *(_BYTE *)(v113 + v25) = 0;
          if ( v13->path )
          {
            Curl_cfree(v13->spath);
            v114 = sanitize_cookie_path(v13->path);
            v13->spath = v114;
            if ( v114 )
              goto LABEL_48;
          }
        }
        goto LABEL_153;
      }
      if ( v16 == 4 )
        goto LABEL_219;
      if ( v16 != 6 || !curl_strnequal("domain", v10, 6) )
        goto LABEL_48;
      if ( *v26 == 46 )
      {
        --v25;
        ++v26;
      }
      if ( v25 == 9 && curl_strnequal(v26, "localhost", 9) || (v97 = memchr(v26, 46, v25)) != 0 && v25 - (v97 - v26) > 1 )
      {
        if ( !s2 )
        {
          is_ipnum = Curl_host_is_ipnum(v26);
          goto LABEL_184;
        }
        is_ipnum = Curl_host_is_ipnum(s2);
        if ( is_ipnum )
        {
LABEL_182:
          v100 = s2;
          if ( !strncmp((const char *)v26, s2, v25) && strlen(v100) == v25 )
            goto LABEL_184;
          goto LABEL_196;
        }
      }
      else
      {
        v98 = Curl_host_is_ipnum(&LC1);
        s2 = (char *)&LC1;
        is_ipnum = v98;
        if ( v98 )
          goto LABEL_182;
      }
      v102 = strlen(s2);
      v103 = v102;
      if ( v25 <= v102 )
      {
        v104 = &s2[v102 - v25];
        if ( curl_strnequal(v26, v104, v25) )
        {
          if ( v25 == v103 || *(v104 - 1) == 46 )
          {
LABEL_184:
            Curl_cfree(v13->domain);
            v101 = Curl_memdup(v26, v25 + 1);
            v13->domain = (char *)v101;
            if ( v101 )
            {
              *(_BYTE *)(v101 + v25) = 0;
              if ( v13->domain )
              {
                if ( !is_ipnum )
                  v13->tailmatch = 1;
                goto LABEL_48;
              }
            }
            goto LABEL_153;
          }
        }
      }
LABEL_196:
      if ( (*(&v140->set.connect_only + 4) & 0x10) != 0 )
        Curl_infof(v140, "skipped cookie with bad tailmatch domain: %s", (const char *)v26);
      v14 = (unsigned __int8)*v17;
      v146 = ca;
      goto LABEL_49;
    }
LABEL_271:
    Curl_cfree(v13);
    return 0;
  }
  tok_buf = (char *)ca;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
  {
    v10 = (char *)(lineptr + 0xA);
    v13->httponly = 1;
  }
  if ( *v10 == 35 )
    goto LABEL_271;
  v64 = strchr(v10, 13);
  if ( v64 )
    *v64 = 0;
  v65 = strchr(v10, 10);
  if ( v65 )
    *v65 = 0;
  v66 = strtok_r(v10, "\t", &tok_buf);
  if ( !v66 )
    goto LABEL_153;
  if ( *v66 == 46 )
    ++v66;
  v67 = Curl_cstrdup(v66);
  v13->domain = (char *)v67;
  v68 = strtok_r(0u, "\t", &tok_buf);
  v69 = v67;
  if ( v67 )
    v69 = 1;
  if ( v68 )
    v70 = v69 & 1;
  else
    v70 = 0;
  if ( !v70 )
  {
    LOBYTE(v70) = v69;
    v81 = 1;
    v80 = v67 == 0;
    goto LABEL_322;
  }
  v71 = ((int (*)(void))curl_strequal)();
  v72 = v71;
  if ( v71 )
    v72 = 1;
  v13->tailmatch = v72;
  v73 = strtok_r(0u, "\t", &tok_buf);
  if ( !v73 )
  {
    v80 = 0;
    v81 = 2;
    goto LABEL_322;
  }
  v74 = strcmp("TRUE", v73);
  v75 = (int (__fastcall *)(void *))Curl_cstrdup;
  if ( !v74 || !strcmp("FALSE", v73) )
  {
    v82 = v75(&LC0);
    v83 = (int (__fastcall *)(void *))Curl_cstrdup;
    v84 = v82;
    v13->path = (char *)v82;
    v85 = v83(&LC0);
    v13->spath = (char *)v85;
    if ( v85 )
    {
      v70 = v84 == 0;
      goto LABEL_132;
    }
    v13->secure = 0;
    if ( curl_strequal(v73, "TRUE") )
      goto LABEL_239;
LABEL_241:
    strtok_r(0u, "\t", &tok_buf);
    goto LABEL_153;
  }
  v76 = (const char *)v75(v73);
  v13->path = (char *)v76;
  if ( !v76 )
    goto LABEL_241;
  v77 = (unsigned int)sanitize_cookie_path(v76);
  v13->spath = (char *)v77;
  v78 = strtok_r(0u, "\t", &tok_buf);
  LOBYTE(v70) = v77;
  if ( v77 )
    LOBYTE(v70) = 1;
  if ( v78 )
    v79 = v70 & 1;
  else
    v79 = 0;
  if ( !v79 )
    v77 = __clz(v77);
  v73 = v78;
  if ( !v79 )
  {
    v80 = v77 >> 5;
    v81 = 3;
    goto LABEL_322;
  }
  v70 = 0;
LABEL_132:
  v13->secure = 0;
  if ( !curl_strequal(v73, "TRUE") )
    goto LABEL_133;
LABEL_239:
  if ( !now && !LOBYTE(dataa->req.doh) )
    goto LABEL_241;
  v13->secure = 1;
LABEL_133:
  if ( strtok_r(0u, "\t", &tok_buf) )
    v86 = ((unsigned __int8)v70 ^ 1) & 1;
  else
    v86 = 0;
  if ( !v86 )
  {
    v80 = v70;
    LOBYTE(v70) = v70 ^ 1;
    v81 = 4;
    goto LABEL_322;
  }
  v87 = ((int (*)(void))curlx_strtoofft)();
  LOBYTE(v70) = v87 == 0;
  if ( strtok_r(0u, "\t", &tok_buf) )
    v80 = v87 == 0;
  else
    v80 = 0;
  if ( !v80 )
  {
    v80 = v87;
    if ( v87 )
      v80 = 1;
    v81 = 5;
    goto LABEL_322;
  }
  v88 = ((int (*)(void))Curl_cstrdup)();
  v13->name = (char *)v88;
  if ( !v88 )
  {
    strtok_r(0u, "\t", &tok_buf);
    goto LABEL_266;
  }
  if ( curl_strnequal("__Secure-", v88, 9) )
  {
    v13->prefix |= 1u;
  }
  else if ( curl_strnequal("__Host-", v13->name, 7) )
  {
    v13->prefix |= 2u;
  }
  v80 = (int)strtok_r(0u, "\t", &tok_buf);
  if ( !v80 )
  {
LABEL_266:
    v120 = Curl_cstrdup(&LC24);
    v13->value = (char *)v120;
    if ( !v120 )
      goto LABEL_153;
    goto LABEL_267;
  }
  v89 = ((int (*)(void))Curl_cstrdup)();
  v13->value = (char *)v89;
  v90 = strtok_r(0u, "\t", &tok_buf);
  LOBYTE(v70) = v89;
  if ( v89 )
    LOBYTE(v70) = 1;
  if ( v90 )
    v91 = v70 & 1;
  else
    v91 = 0;
  if ( v91 )
  {
    while ( strtok_r(0u, "\t", &tok_buf) )
      ;
    goto LABEL_153;
  }
  v81 = 7;
  v80 = v89 == 0;
LABEL_322:
  if ( v81 == 7 )
    v135 = 0;
  else
    v135 = v70 & 1;
  if ( v135 )
    goto LABEL_153;
LABEL_267:
  if ( v80 )
    goto LABEL_153;
LABEL_59:
  if ( (v13->prefix & 1) != 0 )
  {
    if ( !v13->secure )
      goto LABEL_153;
    if ( (v13->prefix & 2) != 0 )
      goto LABEL_62;
  }
  else if ( (v13->prefix & 2) != 0 )
  {
    if ( !v13->secure )
      goto LABEL_153;
LABEL_62:
    v35 = v13->path;
    if ( !v35 || *v35 != 47 || v35[1] || v13->tailmatch )
      goto LABEL_153;
  }
  if ( !LOBYTE(dataa->req.doh) && BYTE1(dataa->req.doh) && !v13->expires )
    goto LABEL_153;
  v36 = v143;
  v13->livecookie = (bool)dataa->req.doh;
  v15 = !v36;
  v37 = (CookieInfo *)dataa;
  v38 = (char *)&dataa->req.p.file->path + 1;
  dataa->req.p.file = (FILEPROTO *)v38;
  v13->creationtime = (int)v38;
  if ( v15 )
    remove_expired(v37);
  v39 = cookiehash(v13->domain);
  v40 = *(&dataa->magic + v39);
  v41 = v39;
  if ( !v40 )
  {
    if ( LOBYTE(dataa->req.doh) )
    {
      v43 = (unsigned int)v13;
      if ( (*(&v140->set.connect_only + 4) & 0x10) != 0 )
      {
LABEL_285:
        livecookie = 0;
        v63 = "Added";
        goto LABEL_286;
      }
    }
    else
    {
      v43 = (unsigned int)v13;
    }
LABEL_288:
    *(&dataa->magic + v41) = v43;
    goto LABEL_257;
  }
  livecookie = 0;
  v43 = 0;
  v44 = 0;
  while ( 1 )
  {
    if ( !curl_strequal(*(_DWORD *)(v40 + 4), v13->name) )
      goto LABEL_83;
    v46 = *(_DWORD *)(v40 + 20);
    v47 = v13->domain;
    if ( v46 )
    {
      if ( !v47 || !curl_strequal(v46, v47) )
        goto LABEL_83;
    }
    else if ( v47 )
    {
      goto LABEL_83;
    }
    v48 = *(const char **)(v40 + 16);
    if ( v48 )
    {
      spath = v13->spath;
      if ( spath )
      {
        if ( *(_BYTE *)(v40 + 33) && !(now | v13->secure) )
        {
          v121 = strchr(v48 + 1, 47);
          v122 = v121 ? v121 - v48 : strlen(v48);
          if ( curl_strnequal(v48, spath, v122) )
          {
            if ( (*(&v140->set.connect_only + 4) & 0x10) != 0 )
              Curl_infof(
                v140,
                "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                v13->name,
                v13->domain);
            goto LABEL_153;
          }
        }
      }
    }
LABEL_83:
    if ( v44 || !curl_strequal(*(_DWORD *)(v40 + 4), v13->name) )
      goto LABEL_73;
    v50 = *(_DWORD *)(v40 + 20);
    v51 = v13->domain;
    if ( v50 )
    {
      if ( v51 && curl_strequal(v50, v51) && *(unsigned __int8 *)(v40 + 32) == v13->tailmatch )
        goto LABEL_247;
    }
    else if ( !v51 )
    {
      goto LABEL_247;
    }
    if ( !livecookie )
      goto LABEL_90;
LABEL_247:
    v116 = *(_DWORD *)(v40 + 16);
    v117 = v13->spath;
    if ( v116 )
      break;
LABEL_251:
    if ( (v116 == 0) != (v117 == 0) )
      goto LABEL_90;
    livecookie = v13->livecookie;
    if ( v13->livecookie )
    {
      v43 = v40;
      v44 = v13;
    }
    else
    {
      if ( *(_BYTE *)(v40 + 34) )
        goto LABEL_153;
      v43 = v40;
      v44 = v13;
      livecookie = 1;
    }
LABEL_73:
    v45 = *(_DWORD *)v40;
    if ( !*(_DWORD *)v40 )
      goto LABEL_91;
LABEL_74:
    v40 = v45;
  }
  if ( v117 && curl_strequal(v116, v117) )
  {
    v116 = *(_DWORD *)(v40 + 16);
    v117 = v13->spath;
    goto LABEL_251;
  }
LABEL_90:
  v45 = *(_DWORD *)v40;
  livecookie = 0;
  if ( *(_DWORD *)v40 )
    goto LABEL_74;
LABEL_91:
  if ( v44 )
  {
    v44->next = *(Cookie **)v43;
    v52 = *(_DWORD *)(v43 + 4);
    v44->creationtime = *(_DWORD *)(v43 + 36);
    Curl_cfree(v52);
    Curl_cfree(*(_DWORD *)(v43 + 8));
    Curl_cfree(*(_DWORD *)(v43 + 20));
    Curl_cfree(*(_DWORD *)(v43 + 12));
    Curl_cfree(*(_DWORD *)(v43 + 16));
    v53 = v44->name;
    v54 = v44->value;
    v55 = v44->path;
    v56 = (void (__fastcall *)(Cookie *))Curl_cfree;
    *(_DWORD *)v43 = v44->next;
    *(_DWORD *)(v43 + 4) = v53;
    *(_DWORD *)(v43 + 8) = v54;
    *(_DWORD *)(v43 + 12) = v55;
    v57 = v44->domain;
    expires = v44->expires;
    expires_high = HIDWORD(v44->expires);
    *(_DWORD *)(v43 + 16) = v44->spath;
    *(_DWORD *)(v43 + 20) = v57;
    *(_DWORD *)(v43 + 24) = expires;
    *(_DWORD *)(v43 + 28) = expires_high;
    creationtime = v44->creationtime;
    v61 = *(_DWORD *)&v44->prefix;
    v62 = *((_DWORD *)&v44->prefix + 1);
    *(_DWORD *)(v43 + 32) = *(_DWORD *)&v44->tailmatch;
    *(_DWORD *)(v43 + 36) = creationtime;
    *(_DWORD *)(v43 + 40) = v61;
    *(_DWORD *)(v43 + 44) = v62;
    v56(v44);
  }
  else
  {
    v43 = (unsigned int)v13;
  }
  if ( !LOBYTE(dataa->req.doh) || (*(&v140->set.connect_only + 4) & 0x10) == 0 )
  {
    if ( livecookie )
      goto LABEL_258;
    goto LABEL_256;
  }
  if ( !livecookie )
    goto LABEL_285;
  v63 = "Replaced";
LABEL_286:
  Curl_infof(
    v140,
    "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
    v63,
    *(const char **)(v43 + 4),
    *(const char **)(v43 + 8),
    *(const char **)(v43 + 20),
    *(const char **)(v43 + 12),
    *(_QWORD *)(v43 + 0x18));
  if ( !livecookie )
  {
    if ( !v40 )
      goto LABEL_288;
LABEL_256:
    *(_DWORD *)v40 = v43;
LABEL_257:
    ++dataa->req.upload_fromhere;
  }
LABEL_258:
  v118 = *(_QWORD *)(v43 + 0x18);
  if ( v118 )
  {
    v119 = dataa;
    if ( v118 < *(_QWORD *)&dataa->req.newurl )
    {
      dataa->req.newurl = (char *)v118;
      v119->req.upload_present = HIDWORD(v118);
    }
  }
  return (Cookie *)v43;
}
