Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  time_t v15; // x0
  Cookie *v16; // x28
  time_t v17; // x26
  __int64 v18; // x0
  Cookie *v19; // x21
  const char *i; // x19
  int v21; // w24
  size_t v22; // x0
  size_t v23; // x20
  const char *v24; // x22
  unsigned __int64 v25; // x23
  int v26; // w8
  const char *v27; // x28
  size_t v28; // x0
  size_t v29; // x22
  const char *v30; // x8
  int v31; // w9
  size_t v32; // x20
  int v33; // w19
  unsigned __int8 v34; // w8
  __int64 v35; // x9
  int v36; // w11
  __int64 v37; // x0
  char *v38; // x0
  __int64 v39; // x0
  __int64 v40; // x0
  const char *name; // x20
  char *value; // x23
  int v43; // w8
  curl_off_t *v44; // x19
  const char *v45; // x0
  int v46; // w0
  int v47; // w0
  size_t v48; // x20
  const char *v49; // x23
  _BYTE *v50; // x0
  Curl_easy *v51; // x19
  char is_ipnum; // w27
  const char *v53; // x0
  __int64 v54; // x0
  char *v55; // x8
  int v56; // w8
  __int64 v57; // x0
  curl_off_t v58; // x8
  __int64 v59; // x8
  char *v60; // x0
  char *v61; // x0
  char *v62; // x0
  const char *v63; // x23
  int v64; // w26
  int v65; // w22
  const char *v66; // x0
  __int64 v67; // x0
  const char *v68; // x0
  char *v69; // x0
  __int64 v70; // x0
  unsigned __int8 v71; // w8
  __int64 v72; // x0
  __int64 v73; // x0
  Curl_easy *v74; // x26
  int v75; // w19
  __int64 v76; // x0
  char *v77; // x0
  __int64 v78; // x0
  int v79; // w8
  Cookie **v80; // x22
  Cookie *next; // x8
  Cookie *v82; // x20
  int v83; // w26
  Cookie *v84; // x25
  char *v85; // x0
  char *v86; // x1
  const char *spath; // x23
  char *v88; // x24
  char *v89; // x0
  size_t v90; // x2
  char *v91; // x0
  char *v92; // x1
  bool v93; // zf
  int v94; // w8
  char *v95; // x0
  char *v96; // x1
  __int64 v97; // x0
  char *v98; // x0
  char *v99; // x0
  const char *v100; // x0
  const char *v101; // x2
  Cookie **p_next; // x8
  curl_off_t expires; // x8
  signed __int64 v104; // x19
  char *v105; // x0
  char *v106; // x0
  curl_off_t *p_expires; // [xsp+10h] [xbp-C0h]
  char *s; // [xsp+18h] [xbp-B8h]
  Curl_easy *v110; // [xsp+20h] [xbp-B0h]
  char *v111; // [xsp+28h] [xbp-A8h]
  int v112; // [xsp+30h] [xbp-A0h]
  bool v113; // [xsp+34h] [xbp-9Ch]
  CookieInfo *cookies; // [xsp+38h] [xbp-98h]
  _BOOL4 v115; // [xsp+44h] [xbp-8Ch]
  char *dest[17]; // [xsp+48h] [xbp-88h] BYREF

  v115 = noexpire;
  v15 = time(0uLL);
  v16 = 0LL;
  if ( data->req.setcookies > 0x31u )
    return v16;
  cookies = c;
  v17 = v15;
  v18 = Curl_ccalloc(1LL, 72LL);
  if ( !v18 )
    return 0LL;
  v19 = (Cookie *)v18;
  if ( !httpheader )
  {
    dest[0] = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 0xA;
      v19->httponly = 1;
    }
    if ( *lineptr == 35 )
      goto LABEL_131;
    v60 = strchr(lineptr, 13);
    if ( v60 )
      *v60 = 0;
    v113 = secure;
    v61 = strchr(lineptr, 10);
    if ( v61 )
      *v61 = 0;
    v62 = strtok_r((char *)lineptr, "\t", dest);
    if ( !v62 )
      goto LABEL_276;
    v63 = v62;
    v64 = 0;
    v65 = 0;
    while ( 1 )
    {
      switch ( v64 )
      {
        case 0:
          if ( *v63 == 46 )
            v66 = v63 + 1;
          else
            v66 = v63;
          v67 = Curl_cstrdup(v66);
          v64 = 0;
          v19->domain = (char *)v67;
          v65 |= v67 == 0;
          goto LABEL_167;
        case 1:
          v19->tailmatch = (unsigned int)curl_strequal(v63, "TRUE") != 0;
          v64 = 1;
          goto LABEL_167;
        case 2:
          if ( !strcmp("TRUE", v63) || !strcmp("FALSE", v63) )
          {
            v73 = Curl_cstrdup("/");
            v19->path = (char *)v73;
            v74 = data;
            v75 = v65 | (v73 == 0);
            v76 = Curl_cstrdup("/");
            v65 = v75 | (v76 == 0);
            data = v74;
            v19->spath = (char *)v76;
            goto LABEL_154;
          }
          v68 = (const char *)Curl_cstrdup(v63);
          v19->path = (char *)v68;
          if ( !v68 )
          {
            v64 = 2;
            goto LABEL_166;
          }
          v69 = sanitize_cookie_path(v68);
          v19->spath = v69;
          v65 |= v69 == 0LL;
          v64 = 2;
          goto LABEL_167;
        case 3:
LABEL_154:
          v19->secure = 0;
          if ( (unsigned int)curl_strequal(v63, "TRUE") )
          {
            if ( !v113 && !cookies->running )
            {
              v64 = 3;
              goto LABEL_166;
            }
            v19->secure = 1;
          }
          v64 = 3;
          goto LABEL_167;
        case 4:
          v65 |= (unsigned int)curlx_strtoofft(v63, 0LL, 10LL, &v19->expires) != 0;
          v64 = 4;
          goto LABEL_167;
        case 5:
          v70 = Curl_cstrdup(v63);
          v19->name = (char *)v70;
          if ( !v70 )
          {
            v64 = 5;
LABEL_166:
            v65 = 1;
            goto LABEL_167;
          }
          if ( (unsigned int)curl_strnequal("__Secure-", v70, 9LL) )
          {
            v71 = v19->prefix | 1;
LABEL_162:
            v19->prefix = v71;
            goto LABEL_163;
          }
          if ( (unsigned int)curl_strnequal("__Host-", v19->name, 7LL) )
          {
            v71 = v19->prefix | 2;
            goto LABEL_162;
          }
LABEL_163:
          v64 = 5;
LABEL_167:
          v77 = strtok_r(0uLL, "\t", dest);
          ++v64;
          if ( !v77 || (v63 = v77, (v65 & 1) != 0) )
          {
            if ( v64 == 6 )
            {
              v78 = Curl_cstrdup(&unk_2129);
              LOBYTE(v65) = v65 | (v78 == 0);
              if ( v78 )
                v64 = 7;
              else
                v64 = 6;
              v19->value = (char *)v78;
            }
            if ( (v65 & 1) == 0 && v64 == 7 )
              goto LABEL_176;
LABEL_276:
            freecookie(v19);
            return 0LL;
          }
          break;
        case 6:
          v72 = Curl_cstrdup(v63);
          v65 |= v72 == 0;
          v64 = 6;
          v19->value = (char *)v72;
          goto LABEL_167;
        default:
          goto LABEL_167;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_131:
    Curl_cfree(v19);
    return 0LL;
  }
  p_expires = &v19->expires;
  s = (char *)path;
  v110 = data;
  v111 = (char *)&data->set + 0x8BB;
  v112 = 0;
  v113 = secure;
  while ( 1 )
  {
    for ( i = lineptr + 1; ; ++i )
    {
      v21 = *(unsigned __int8 *)lineptr;
      if ( v21 != 32 && v21 != 9 )
        break;
      ++lineptr;
    }
    v22 = strcspn(lineptr, ";\t\r\n=");
    if ( !v22 )
    {
      v24 = lineptr;
      goto LABEL_61;
    }
    v23 = v22;
    v24 = &lineptr[v22];
    v25 = v22;
    do
    {
      v26 = (unsigned __int8)lineptr[v25 - 1];
      if ( v26 != 32 && v26 != 9 )
        break;
      --v25;
    }
    while ( v25 );
    if ( *v24 != 61 )
    {
      v32 = 0LL;
      v33 = 0;
      v27 = 0LL;
      goto LABEL_26;
    }
    v27 = &lineptr[v22 + 1];
    v28 = strcspn(v27, ";\r\n");
    v29 = v23 + v28;
    if ( v28 )
    {
      v30 = &i[v29];
      while ( 1 )
      {
        v31 = *((unsigned __int8 *)v30 - 1);
        if ( v31 != 32 && v31 != 9 )
          break;
        --v28;
        --v30;
        if ( !v28 )
          goto LABEL_21;
      }
      v35 = 0LL;
      while ( 1 )
      {
        v36 = (unsigned __int8)i[v23 + v35];
        if ( v36 != 32 && v36 != 9 )
          break;
        if ( v28 == ++v35 )
        {
          v32 = 0LL;
          v27 = v30;
          goto LABEL_22;
        }
      }
      v27 = &i[v23 + v35];
      v32 = v28 - v35;
    }
    else
    {
LABEL_21:
      v32 = 0LL;
    }
LABEL_22:
    if ( memchr(v27, 9, v32) )
      break;
    v24 = &lineptr[v29 + 1];
    v33 = 1;
LABEL_26:
    if ( v25 > 0xFFE || v32 > 0xFFE || v32 + v25 > 0x1000 )
    {
      freecookie(v19);
      if ( (v111[3] & 0x10) != 0 )
        Curl_infof(v110, "oversized cookie dropped, name/val %zu + %zu bytes", v25, v32);
      return 0LL;
    }
    if ( v21 != 95 || v25 < 7 || lineptr[1] != 95 )
      goto LABEL_42;
    if ( (unsigned int)curl_strnequal("__Secure-", lineptr, 9LL) )
    {
      v34 = v19->prefix | 1;
LABEL_41:
      v19->prefix = v34;
      goto LABEL_42;
    }
    if ( (unsigned int)curl_strnequal("__Host-", lineptr, 7LL) )
    {
      v34 = v19->prefix | 2;
      goto LABEL_41;
    }
LABEL_42:
    if ( !v19->name )
    {
      if ( !v33 )
        goto LABEL_276;
      Curl_cfree(0LL);
      v39 = Curl_memdup(lineptr, v25 + 1);
      v19->name = (char *)v39;
      if ( v39 )
        *(_BYTE *)(v39 + v25) = 0;
      Curl_cfree(v19->value);
      v40 = Curl_memdup(v27, v32 + 1);
      v19->value = (char *)v40;
      if ( v40 )
        *(_BYTE *)(v40 + v32) = 0;
      name = v19->name;
      if ( !name )
        goto LABEL_276;
      value = v19->value;
      if ( !value )
        goto LABEL_276;
      if ( value[strcspn(v19->value, invalid_octets_badoctets)] || name[strcspn(name, invalid_octets_badoctets)] )
      {
        if ( (v111[3] & 0x10) != 0 )
          Curl_infof(v110, "invalid octets in name/value, cookie dropped");
        goto LABEL_276;
      }
      goto LABEL_61;
    }
    if ( !v32 )
    {
      if ( v25 == 8 )
      {
        if ( (unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
        {
          v19->httponly = 1;
          goto LABEL_61;
        }
      }
      else if ( v25 == 6 && (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
      {
        if ( !v113 && cookies->running )
          goto LABEL_276;
        v19->secure = 1;
        goto LABEL_61;
      }
      if ( !v33 )
        goto LABEL_61;
    }
    if ( v25 != 7 )
    {
      if ( v25 != 6 )
      {
        if ( v25 == 4 )
        {
          if ( (unsigned int)curl_strnequal("path", lineptr, 4LL) )
          {
            Curl_cfree(v19->path);
            v37 = Curl_memdup(v27, v32 + 1);
            v19->path = (char *)v37;
            if ( !v37 )
              goto LABEL_276;
            *(_BYTE *)(v37 + v32) = 0;
            if ( !v19->path )
              goto LABEL_276;
            Curl_cfree(v19->spath);
            v38 = sanitize_cookie_path(v19->path);
            v19->spath = v38;
            if ( !v38 )
              goto LABEL_276;
          }
        }
        goto LABEL_61;
      }
      v47 = curl_strnequal("domain", lineptr, 6LL);
      if ( !v32 || !v47 )
        goto LABEL_61;
      v48 = v32 - (*v27 == 46);
      if ( *v27 == 46 )
        v49 = v27 + 1;
      else
        v49 = v27;
      if ( v48 == 9 && (unsigned int)curl_strnequal(v49, "localhost", 9LL)
        || (v50 = memchr(v49, 46, v48)) != 0LL && (unsigned __int64)(&v49[v48] - v50) > 1 )
      {
        if ( domain )
          v53 = domain;
        else
          v53 = v49;
        is_ipnum = Curl_host_is_ipnum(v53);
        if ( domain )
        {
          if ( (is_ipnum & 1) != 0 )
            goto LABEL_92;
          goto LABEL_105;
        }
      }
      else
      {
        domain = ":";
        if ( (Curl_host_is_ipnum(":") & 1) != 0 )
        {
LABEL_92:
          v51 = v110;
          if ( strncmp(v49, domain, v48) || v48 != strlen(domain) )
          {
LABEL_111:
            if ( (v111[3] & 0x10) != 0 )
              Curl_infof(v51, "skipped cookie with bad tailmatch domain: %s", v49);
            v56 = 1;
LABEL_114:
            v112 = v56;
            goto LABEL_61;
          }
          is_ipnum = 1;
          goto LABEL_107;
        }
LABEL_105:
        v51 = v110;
        if ( !cookie_tailmatch(v49, v48, domain) )
          goto LABEL_111;
        is_ipnum = 0;
      }
LABEL_107:
      Curl_cfree(v19->domain);
      v54 = Curl_memdup(v49, v48 + 1);
      v19->domain = (char *)v54;
      if ( !v54 )
        goto LABEL_276;
      *(_BYTE *)(v54 + v48) = 0;
      v55 = v19->domain;
      if ( is_ipnum & 1 | (v55 == 0LL) )
      {
        if ( !v55 )
          goto LABEL_276;
        v56 = v112 | (v55 == 0LL);
        goto LABEL_114;
      }
      v19->tailmatch = 1;
      goto LABEL_61;
    }
    if ( (unsigned int)curl_strnequal("version", lineptr, 7LL) )
      goto LABEL_61;
    if ( (unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
    {
      v44 = &v19->expires;
      if ( *v27 == 34 )
        v45 = v27 + 1;
      else
        v45 = v27;
      v46 = curlx_strtoofft(v45, 0LL, 10LL, p_expires);
      if ( v46 )
      {
        if ( v46 != 2 )
        {
          if ( v46 != 1 )
            goto LABEL_61;
LABEL_124:
          v59 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_126;
        }
      }
      else
      {
        v58 = *p_expires;
        if ( *p_expires )
        {
          if ( 0x7FFFFFFFFFFFFFFFLL - v17 < v58 )
            goto LABEL_124;
          v59 = v58 + v17;
LABEL_126:
          *v44 = v59;
          goto LABEL_61;
        }
      }
LABEL_125:
      v59 = 1LL;
      goto LABEL_126;
    }
    if ( (unsigned int)curl_strnequal("expires", lineptr, 7LL) )
    {
      v44 = &v19->expires;
      if ( v32 <= 0x7F && !*p_expires )
      {
        memcpy(dest, v27, v32);
        *((_BYTE *)dest + v32) = 0;
        v57 = Curl_getdate_capped(dest);
        *p_expires = v57;
        if ( v57 )
        {
          if ( (v57 & 0x8000000000000000LL) != 0 )
            *p_expires = 0LL;
          goto LABEL_61;
        }
        goto LABEL_125;
      }
    }
LABEL_61:
    for ( lineptr = v24 + 1; ; ++lineptr )
    {
      v43 = *((unsigned __int8 *)lineptr - 1);
      if ( v43 != 32 && v43 != 9 )
        break;
    }
    if ( v43 != 59 )
    {
      if ( (v112 & 1) != 0 )
        goto LABEL_276;
      if ( domain )
      {
        if ( !v19->domain )
        {
          v97 = Curl_cstrdup(domain);
          v19->domain = (char *)v97;
          if ( !v97 )
            goto LABEL_276;
        }
      }
      if ( s && !v19->path )
      {
        v98 = strchr(s, 63);
        v99 = v98 ? (char *)Curl_memrchr(s, 47LL, v98 - s) : strrchr(s, 47);
        if ( v99 )
        {
          v104 = v99 - s;
          v105 = (char *)Curl_cmalloc(v99 - s + 2);
          v19->path = v105;
          if ( !v105 )
            goto LABEL_276;
          memcpy(v105, s, v104 + 1);
          v19->path[v104 + 1] = 0;
          v106 = sanitize_cookie_path(v19->path);
          v19->spath = v106;
          if ( !v106 )
            goto LABEL_276;
        }
      }
      if ( !v19->name )
        goto LABEL_276;
      data = v110;
      ++v110->req.setcookies;
LABEL_176:
      if ( (v19->prefix & 1) != 0 && !v19->secure )
        goto LABEL_276;
      if ( (v19->prefix & 2) != 0 )
      {
        if ( !v19->secure )
          goto LABEL_276;
        v100 = v19->path;
        if ( !v100 || strcmp(v100, "/") || v19->tailmatch )
          goto LABEL_276;
      }
      if ( !cookies->running && cookies->newsession && !v19->expires )
        goto LABEL_276;
      v19->livecookie = cookies->running;
      v79 = cookies->lastct + 1;
      cookies->lastct = v79;
      v19->creationtime = v79;
      if ( !v115 )
        remove_expired(cookies);
      v80 = &cookies->cookies[cookiehash(v19->domain)];
      next = *v80;
      if ( !*v80 )
      {
        v84 = 0LL;
        LOBYTE(v83) = 0;
LABEL_251:
        v16 = v19;
LABEL_252:
        if ( data && cookies->running && (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
        {
          if ( (v83 & 1) != 0 )
            v101 = "Replaced";
          else
            v101 = "Added";
          Curl_infof(
            data,
            "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
            v101,
            v16->name,
            v16->value,
            v16->domain,
            v16->path,
            v16->expires);
        }
        if ( (v83 & 1) == 0 )
        {
          if ( v84 )
            p_next = &v84->next;
          else
            p_next = v80;
          *p_next = v16;
          ++cookies->numcookies;
        }
        expires = v16->expires;
        if ( expires && expires < cookies->next_expiration )
          cookies->next_expiration = expires;
        return v16;
      }
      v82 = 0LL;
      v16 = 0LL;
      v83 = 0;
      while ( 1 )
      {
        v84 = next;
        if ( !(unsigned int)curl_strequal(next->name, v19->name) )
          goto LABEL_199;
        v85 = v84->domain;
        v86 = v19->domain;
        if ( v85 )
        {
          if ( !v86 || !(unsigned int)curl_strequal(v85, v86) )
            goto LABEL_199;
        }
        else if ( v86 )
        {
          goto LABEL_199;
        }
        spath = v84->spath;
        if ( spath )
        {
          v88 = v19->spath;
          if ( v88 )
          {
            if ( v84->secure && !v19->secure && !v113 )
            {
              v89 = strchr(spath + 1, 47);
              v90 = v89 ? v89 - spath : strlen(spath);
              if ( (unsigned int)curl_strnequal(spath, v88, v90) )
              {
                if ( data && (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
                  Curl_infof(
                    data,
                    "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                    v19->name,
                    v19->domain);
                goto LABEL_276;
              }
            }
          }
        }
LABEL_199:
        if ( !v82 )
        {
          if ( (unsigned int)curl_strequal(v84->name, v19->name) )
          {
            v91 = v84->domain;
            v92 = v19->domain;
            if ( v91 )
            {
              if ( v92 && (unsigned int)curl_strequal(v91, v92) )
              {
                v93 = v84->tailmatch == v19->tailmatch;
                goto LABEL_208;
              }
              if ( (v83 & 1) == 0 )
              {
LABEL_218:
                v83 = 0;
                goto LABEL_219;
              }
            }
            else
            {
              v93 = v92 == 0LL;
LABEL_208:
              v94 = v93;
              if ( ((v83 | v94) & 1) == 0 )
                goto LABEL_218;
            }
            v95 = v84->spath;
            v96 = v19->spath;
            if ( v95 )
            {
              if ( v96 )
              {
                if ( (unsigned int)curl_strequal(v95, v96) && (v84->spath != 0LL) != (v19->spath == 0LL) )
                {
LABEL_223:
                  if ( !v19->livecookie && v84->livecookie )
                    goto LABEL_276;
                  v83 = 1;
                  v16 = v84;
                  v82 = v19;
                  goto LABEL_220;
                }
              }
              else if ( v19->spath )
              {
                goto LABEL_223;
              }
            }
            else if ( !v96 )
            {
              goto LABEL_223;
            }
            goto LABEL_218;
          }
LABEL_219:
          v82 = 0LL;
        }
LABEL_220:
        next = v84->next;
        if ( !v84->next )
        {
          if ( !v82 )
            goto LABEL_251;
          v82->next = v16->next;
          v82->creationtime = v16->creationtime;
          Curl_cfree(v16->name);
          Curl_cfree(v16->value);
          Curl_cfree(v16->domain);
          Curl_cfree(v16->path);
          Curl_cfree(v16->spath);
          memcpy(v16, v82, sizeof(Cookie));
          Curl_cfree(v82);
          goto LABEL_252;
        }
      }
    }
  }
  freecookie(v19);
  if ( (v111[3] & 0x10) != 0 )
    Curl_infof(v110, "cookie contains TAB, dropping");
  return 0LL;
}
