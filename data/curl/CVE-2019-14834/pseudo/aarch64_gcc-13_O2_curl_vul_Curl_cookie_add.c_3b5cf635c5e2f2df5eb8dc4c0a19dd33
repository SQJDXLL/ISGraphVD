Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  _BOOL4 v9; // w24
  Cookie *v11; // x19
  int v12; // w25
  size_t v14; // x27
  int v15; // t1
  const char *v17; // x23
  unsigned __int64 v18; // x2
  _BOOL4 v19; // w7
  char *name; // x22
  size_t v21; // x28
  const char *v22; // x20
  int v23; // w0
  char *v25; // x0
  char *v26; // x0
  char *v27; // x0
  int v28; // w26
  char *v29; // x1
  char *v30; // x0
  __int64 v31; // x0
  _BOOL4 v32; // w27
  int v33; // w20
  bool v34; // zf
  int v35; // w0
  int v36; // w0
  bool v38; // cc
  bool v39; // zf
  unsigned __int8 prefix; // w0
  char *v43; // x0
  int lastct; // w0
  size_t v45; // x27
  Cookie *v46; // x20
  char livecookie; // w25
  Cookie *v48; // x24
  Cookie *v49; // x21
  char *v50; // x0
  char *v51; // x1
  const char *spath; // x28
  char *v53; // x26
  Cookie *next; // x1
  _BYTE *v55; // x0
  char is_ipnum; // w23
  __int64 v57; // x0
  int v58; // w0
  char *v59; // x1
  __int64 v60; // x0
  __int64 v61; // x0
  const char *v62; // x20
  char *value; // x22
  __int64 v64; // x0
  char *v65; // x0
  int v67; // w0
  __int64 (__fastcall *v68)(const char *); // x27
  const char *v69; // x1
  int v70; // w0
  const char *v71; // x0
  char *v72; // x0
  __int64 v73; // x0
  __int64 (__fastcall *v74)(const char *); // x3
  __int64 v75; // x20
  __int64 v76; // x0
  __int64 v77; // x0
  __int64 v78; // x0
  __int64 v79; // x0
  char *v80; // x0
  size_t v81; // x2
  char *v82; // x0
  char *v83; // x1
  char *v84; // x0
  char *v85; // x1
  char *v86; // x0
  void (__fastcall *v87)(char *); // x1
  __int128 v88; // q1
  void (__fastcall *v89)(Cookie *); // x1
  __int128 v90; // q1
  int v91; // w25
  const char *v92; // x2
  curl_off_t v93; // x0
  char *v94; // x0
  int v95; // w0
  curl_off_t expires; // x0
  __int64 v98; // x0
  bool v99; // zf
  int v100; // w0
  char *v101; // x1
  char *v102; // x0
  char *v103; // x0
  signed __int64 v104; // x0
  size_t v105; // x20
  char *v106; // x0
  char *v107; // x0
  __int64 v108; // x0
  bool v109; // zf
  const char *domainb; // [xsp+70h] [xbp+70h]
  const char *domainc; // [xsp+70h] [xbp+70h]
  _BOOL4 securea; // [xsp+78h] [xbp+78h]
  time_t now; // [xsp+90h] [xbp+90h]
  bool badcookie; // [xsp+A0h] [xbp+A0h]
  bool v120; // [xsp+BCh] [xbp+BCh]
  bool v121; // [xsp+BCh] [xbp+BCh]
  char *tok_buf; // [xsp+C0h] [xbp+C0h] BYREF
  char date[128]; // [xsp+C8h] [xbp+C8h] BYREF

  v9 = httpheader;
  securea = secure;
  now = time(0uLL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  v11 = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !v11 )
    return 0LL;
  if ( !v9 )
  {
    tok_buf = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 0xA;
      v11->httponly = 1;
    }
    if ( *lineptr == 35 )
      goto LABEL_261;
    v25 = strchr(lineptr, 13);
    if ( v25 )
      *v25 = 0;
    v26 = strchr(lineptr, 10);
    if ( v26 )
      *v26 = 0;
    v27 = (char *)lineptr;
    v28 = 0;
    v29 = strtok_r(v27, "\t", &tok_buf);
    if ( !v29 )
      goto LABEL_173;
    while ( 1 )
    {
      if ( v28 == 3 )
      {
        v11->secure = 0;
        v32 = v9;
        if ( (unsigned int)curl_strequal(v29, "TRUE") )
          goto LABEL_183;
LABEL_188:
        v33 = !v32;
        v28 = 4;
        goto LABEL_48;
      }
      if ( v28 <= 3 )
        break;
      switch ( v28 )
      {
        case 5:
          v78 = Curl_cstrdup(v29);
          v11->name = (char *)v78;
          if ( !v78 )
          {
            LOBYTE(v32) = 1;
            strtok_r(0uLL, "\t", &tok_buf);
            goto LABEL_199;
          }
          if ( (unsigned int)curl_strnequal("__Secure-", v78, 9LL) )
          {
            v11->prefix |= 1u;
          }
          else if ( (unsigned int)curl_strnequal("__Host-", v11->name, 7LL) )
          {
            v11->prefix |= 2u;
          }
          LOBYTE(v32) = v9;
          v28 = 6;
          v33 = 1;
          break;
        case 6:
          v28 = 7;
          v77 = Curl_cstrdup(v29);
          LOBYTE(v32) = v77 == 0;
          v33 = v77 != 0;
          v11->value = (char *)v77;
          break;
        case 4:
          v35 = curlx_strtoofft(v29, 0LL, 10LL, &v11->expires);
          LOBYTE(v32) = v35 != 0;
          v33 = v35 == 0;
          v28 = 5;
          break;
        default:
          goto LABEL_176;
      }
LABEL_48:
      v29 = strtok_r(0uLL, "\t", &tok_buf);
      if ( v29 )
        v34 = v33 == 0;
      else
        v34 = 1;
      if ( v34 )
      {
        if ( v28 != 6 )
        {
          if ( v33 )
            v109 = v28 == 7;
          else
            v109 = 1;
          if ( !v109 || v32 )
            goto LABEL_173;
LABEL_201:
          prefix = v11->prefix;
          if ( (prefix & 1) != 0 )
            goto LABEL_92;
          goto LABEL_202;
        }
LABEL_199:
        v79 = Curl_cstrdup(&unk_2480);
        v11->value = (char *)v79;
        if ( !v79 || v32 )
          goto LABEL_173;
        goto LABEL_201;
      }
    }
    switch ( v28 )
    {
      case 1:
        LOBYTE(v32) = v9;
        v28 = 2;
        v33 = 1;
        v11->tailmatch = (unsigned int)curl_strequal(v29, "TRUE") != 0;
        goto LABEL_48;
      case 2:
        domainb = v29;
        v67 = strcmp("TRUE", v29);
        v68 = (__int64 (__fastcall *)(const char *))Curl_cstrdup;
        v69 = domainb;
        if ( v67 )
        {
          v70 = strcmp("FALSE", domainb);
          v69 = domainb;
          if ( v70 )
          {
            v71 = (const char *)v68(domainb);
            v11->path = (char *)v71;
            if ( !v71 )
              goto LABEL_185;
            v72 = sanitize_cookie_path(v71);
            LOBYTE(v32) = v72 == 0LL;
            v33 = v72 != 0LL;
            v28 = 3;
            v11->spath = v72;
            goto LABEL_48;
          }
        }
        domainc = v69;
        v73 = v68("/");
        v74 = (__int64 (__fastcall *)(const char *))Curl_cstrdup;
        v11->path = (char *)v73;
        v75 = v73;
        v76 = v74("/");
        v11->spath = (char *)v76;
        if ( !v76 )
        {
          v11->secure = 0;
          if ( !(unsigned int)curl_strequal(domainc, "TRUE") )
            goto LABEL_185;
          v32 = 1;
LABEL_183:
          if ( !securea && !c->running )
          {
LABEL_185:
            strtok_r(0uLL, "\t", &tok_buf);
            freecookie(v11);
            return 0LL;
          }
          v33 = !v32;
          v28 = 4;
          v11->secure = 1;
          goto LABEL_48;
        }
        v11->secure = 0;
        v32 = v75 == 0;
        if ( (unsigned int)curl_strequal(domainc, "TRUE") )
          goto LABEL_183;
        goto LABEL_188;
      case 0:
        v28 = 1;
        if ( *v29 == 46 )
          v30 = v29 + 1;
        else
          v30 = v29;
        v31 = Curl_cstrdup(v30);
        LOBYTE(v32) = v31 == 0;
        v33 = v31 != 0;
        v11->domain = (char *)v31;
        goto LABEL_48;
    }
LABEL_176:
    ++v28;
    LOBYTE(v32) = v9;
    v33 = 1;
    goto LABEL_48;
  }
  badcookie = 0;
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_261:
    Curl_cfree(v11);
    return 0LL;
  }
  v12 = *(unsigned __int8 *)lineptr;
  if ( *lineptr )
    goto LABEL_6;
LABEL_19:
  v14 = strcspn(lineptr, ";\t\r\n=");
  if ( !v14 )
    goto LABEL_79;
  while ( 1 )
  {
    v17 = &lineptr[v14];
    while ( 1 )
    {
      v18 = v14--;
      v19 = lineptr[v14] == 32 || lineptr[v14] == 9;
      if ( !v19 )
        break;
      if ( !v14 )
      {
        if ( *v17 == 61 )
          goto LABEL_24;
        name = v11->name;
        if ( name )
        {
          name = 0LL;
          LOBYTE(v19) = 0;
          goto LABEL_150;
        }
        v21 = 0LL;
        LOBYTE(v19) = 0;
LABEL_157:
        if ( v19 )
        {
          Curl_cfree(0LL);
          v60 = Curl_memdup(lineptr, v14 + 1);
          v11->name = (char *)v60;
          if ( v60 )
            *(_BYTE *)(v60 + v14) = 0;
          Curl_cfree(v11->value);
          v61 = Curl_memdup(name, v21 + 1);
          v11->value = (char *)v61;
          if ( v61 )
            *(_BYTE *)(v61 + v21) = 0;
          v62 = v11->name;
          if ( v62 )
          {
            value = v11->value;
            if ( value )
            {
              if ( !value[strcspn(v11->value, badoctets_0)] && !v62[strcspn(v62, badoctets_0)] )
                goto LABEL_166;
              if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
                Curl_infof(data, "invalid octets in name/value, cookie dropped");
            }
          }
        }
LABEL_173:
        freecookie(v11);
        return 0LL;
      }
    }
    v14 = v18;
    if ( *v17 != 61 )
      break;
LABEL_24:
    name = (char *)(v17 + 1);
    v21 = strcspn(v17 + 1, ";\r\n");
    v22 = &v17[v21 + 1];
    if ( v21 )
    {
      while ( 1 )
      {
        v23 = (unsigned __int8)v17[v21];
        if ( v23 != 32 && v23 != 9 )
          break;
        if ( !--v21 )
          goto LABEL_251;
      }
      while ( 1 )
      {
        v36 = (unsigned __int8)*name;
        if ( v36 != 32 && v36 != 9 )
          break;
        ++name;
        if ( !--v21 )
          goto LABEL_64;
      }
      if ( memchr(name, 9, v21) )
      {
        freecookie(v11);
        if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
          Curl_infof(data, "cookie contains TAB, dropping");
        return 0LL;
      }
LABEL_64:
      v38 = v14 > 0xFFE || v21 > 0xFFE;
      if ( v38 || v21 + v14 > 0x1000 )
        goto LABEL_256;
      LOBYTE(v19) = v9;
    }
    else
    {
LABEL_251:
      if ( v14 > 0xFFE )
      {
LABEL_255:
        v21 = 0LL;
LABEL_256:
        freecookie(v11);
        if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
          Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v14, v21);
        return 0LL;
      }
      LOBYTE(v19) = v9;
      v21 = 0LL;
    }
    v39 = v14 == 6;
    if ( v14 > 6 )
      goto LABEL_71;
LABEL_122:
    if ( !v11->name )
      goto LABEL_156;
    if ( !v21 )
    {
      v17 = v22;
      if ( v39 )
      {
        v121 = v19;
        if ( !(unsigned int)curl_strnequal("secure", lineptr, v14) )
        {
          if ( v121 )
            curl_strnequal("domain", lineptr, v14);
          goto LABEL_117;
        }
        if ( !securea && c->running )
          goto LABEL_173;
        v11->secure = 1;
        lineptr = v22;
        v12 = *(unsigned __int8 *)v22;
        if ( *v22 )
          goto LABEL_13;
      }
      else
      {
LABEL_150:
        if ( v19 )
        {
          if ( v14 != 4 )
          {
            lineptr = v17;
            v12 = *(unsigned __int8 *)v17;
            goto LABEL_78;
          }
          v22 = v17;
          v21 = 0LL;
LABEL_169:
          if ( (unsigned int)curl_strnequal("path", lineptr, 4LL) )
          {
            Curl_cfree(v11->path);
            v64 = Curl_memdup(name, v21 + 1);
            v11->path = (char *)v64;
            if ( !v64 )
              goto LABEL_173;
            *(_BYTE *)(v64 + v21) = 0;
            if ( !v11->path )
              goto LABEL_173;
            Curl_cfree(v11->spath);
            v65 = sanitize_cookie_path(v11->path);
            v11->spath = v65;
            if ( !v65 )
              goto LABEL_173;
          }
LABEL_117:
          v12 = *(unsigned __int8 *)v22;
          lineptr = v22;
          if ( *v22 )
            goto LABEL_13;
        }
        else
        {
LABEL_166:
          v12 = *(unsigned __int8 *)v17;
          lineptr = v17;
          if ( *v17 )
            goto LABEL_13;
        }
      }
      goto LABEL_79;
    }
    if ( v14 == 4 )
      goto LABEL_169;
    if ( v14 != 6 )
      goto LABEL_77;
    if ( !(unsigned int)curl_strnequal("domain", lineptr, 6LL) )
      goto LABEL_117;
    if ( *name == 46 )
    {
      ++name;
      --v21;
    }
    if ( v21 == 9 && (unsigned int)curl_strnequal(name, "localhost", 9LL)
      || (v55 = memchr(name, 46, v21)) != 0LL && v21 - (v55 - name) > 1 )
    {
      if ( !domain )
      {
        is_ipnum = Curl_host_is_ipnum(name);
LABEL_135:
        Curl_cfree(v11->domain);
        v57 = Curl_memdup(name, v21 + 1);
        v11->domain = (char *)v57;
        if ( !v57 )
          goto LABEL_173;
        *(_BYTE *)(v57 + v21) = 0;
        if ( !v11->domain )
          goto LABEL_173;
        if ( (is_ipnum & 1) != 0 )
          goto LABEL_117;
        v11->tailmatch = 1;
        lineptr = v22;
        v12 = *(unsigned __int8 *)v22;
        if ( *v22 )
          goto LABEL_13;
        goto LABEL_79;
      }
      is_ipnum = Curl_host_is_ipnum(domain);
      if ( (is_ipnum & 1) == 0 )
      {
LABEL_143:
        if ( cookie_tailmatch(name, v21, domain) )
          goto LABEL_135;
        goto LABEL_144;
      }
    }
    else
    {
      domain = ":";
      is_ipnum = Curl_host_is_ipnum(":");
      if ( (is_ipnum & 1) == 0 )
        goto LABEL_143;
    }
    if ( !strncmp(name, domain, v21) && strlen(domain) == v21 )
      goto LABEL_135;
LABEL_144:
    if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
      Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", name);
    v12 = *(unsigned __int8 *)v22;
    lineptr = v22;
    badcookie = v9;
    if ( !*v22 )
      goto LABEL_79;
LABEL_13:
    while ( 2 )
    {
      while ( v12 == 32 || v12 == 9 )
      {
        v15 = *(unsigned __int8 *)++lineptr;
        v12 = v15;
        if ( !v15 )
          goto LABEL_79;
      }
      if ( v12 != 59 )
        goto LABEL_79;
      do
      {
        v12 = *(unsigned __int8 *)++lineptr;
        if ( !v12 )
          goto LABEL_19;
LABEL_6:
        ;
      }
      while ( v12 == 32 || v12 == 9 );
      v14 = strcspn(lineptr, ";\t\r\n=");
      if ( !v14 )
        continue;
      break;
    }
  }
  if ( v18 > 0xFFE )
    goto LABEL_255;
  v22 = v17;
  v39 = v18 == 6;
  name = 0LL;
  v21 = 0LL;
  if ( v18 <= 6 )
    goto LABEL_122;
LABEL_71:
  if ( v12 == 95 && lineptr[1] == 95 )
  {
    v120 = v19;
    v58 = curl_strnequal("__Secure-", lineptr, 9LL);
    LOBYTE(v19) = v120;
    if ( v58 )
    {
      v59 = v11->name;
      v11->prefix |= 1u;
      if ( !v59 )
        goto LABEL_156;
      goto LABEL_73;
    }
    v100 = curl_strnequal("__Host-", lineptr, 7LL);
    LOBYTE(v19) = v120;
    if ( v100 )
    {
      v101 = v11->name;
      v11->prefix |= 2u;
      if ( !v101 )
      {
        v17 = v22;
        goto LABEL_157;
      }
      goto LABEL_73;
    }
  }
  if ( !v11->name )
  {
LABEL_156:
    v17 = v22;
    goto LABEL_157;
  }
LABEL_73:
  if ( !v21 )
  {
    if ( v14 == 8 )
    {
      if ( !(unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
        goto LABEL_117;
      v11->httponly = 1;
      lineptr = v22;
      v12 = *(unsigned __int8 *)v22;
      if ( *v22 )
        goto LABEL_13;
      goto LABEL_79;
    }
    if ( !v19 )
      goto LABEL_117;
  }
  if ( v14 == 7 )
  {
    if ( (unsigned int)curl_strnequal("version", lineptr, 7LL) )
      goto LABEL_117;
    if ( !(unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
    {
      if ( (unsigned int)curl_strnequal("expires", lineptr, 7LL) )
      {
        if ( v21 <= 0x7F && v11->expires == 0 )
        {
          *((_BYTE *)memcpy(date, name, v21) + v21) = 0;
          v98 = Curl_getdate_capped();
          v99 = v98 == 0;
          if ( v98 < 0 )
            v98 = 0LL;
          if ( v99 )
            v98 = 1LL;
          v11->expires = v98;
        }
      }
      goto LABEL_117;
    }
    if ( *name == 34 )
      v94 = name + 1;
    else
      v94 = name;
    v95 = curlx_strtoofft(v94, 0LL, 10LL, &v11->expires);
    if ( v95 == 1 )
    {
      v11->expires = 0x7FFFFFFFFFFFFFFFLL;
      lineptr = v22;
      v12 = *(unsigned __int8 *)v22;
      if ( *v22 )
        goto LABEL_13;
    }
    else
    {
      if ( v95 == 2 )
        goto LABEL_311;
      if ( v95 )
        goto LABEL_117;
      expires = v11->expires;
      if ( !expires )
      {
LABEL_311:
        v11->expires = 1LL;
        lineptr = v22;
        v12 = *(unsigned __int8 *)v22;
        if ( *v22 )
          goto LABEL_13;
      }
      else if ( expires <= 0x7FFFFFFFFFFFFFFFLL - now )
      {
        lineptr = v22;
        v11->expires = expires + now;
        v12 = *(unsigned __int8 *)v22;
        if ( *v22 )
          goto LABEL_13;
      }
      else
      {
        v11->expires = 0x7FFFFFFFFFFFFFFFLL;
        lineptr = v22;
        v12 = *(unsigned __int8 *)v22;
        if ( *v22 )
          goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_77:
    lineptr = v22;
    v12 = *(unsigned __int8 *)v22;
LABEL_78:
    if ( v12 )
      goto LABEL_13;
  }
LABEL_79:
  if ( badcookie )
    goto LABEL_173;
  if ( !v11->domain && domain != 0LL )
  {
    v108 = Curl_cstrdup(domain);
    v11->domain = (char *)v108;
    if ( !v108 )
      goto LABEL_173;
  }
  if ( !v11->path && path != 0LL )
  {
    v102 = strchr(path, 63);
    v103 = v102 ? (char *)Curl_memrchr(path, 47LL, v102 - path) : strrchr(path, 47);
    if ( v103 )
    {
      v104 = v103 - path;
      v105 = v104 + 1;
      v106 = (char *)Curl_cmalloc(v104 + 2);
      v11->path = v106;
      if ( !v106 )
        goto LABEL_173;
      memcpy(v106, path, v105);
      v11->path[v105] = 0;
      v107 = sanitize_cookie_path(v11->path);
      v11->spath = v107;
      if ( !v107 )
        goto LABEL_173;
    }
  }
  if ( !v11->name )
    goto LABEL_173;
  ++data->req.setcookies;
  prefix = v11->prefix;
  if ( (prefix & 1) != 0 )
  {
LABEL_92:
    if ( !v11->secure )
      goto LABEL_173;
    if ( (prefix & 2) != 0 )
    {
LABEL_94:
      v43 = v11->path;
      if ( !v43 || *v43 != 47 || v43[1] || v11->tailmatch )
        goto LABEL_173;
    }
    goto LABEL_98;
  }
LABEL_202:
  if ( (prefix & 2) != 0 )
  {
    if ( !v11->secure )
      goto LABEL_173;
    goto LABEL_94;
  }
LABEL_98:
  if ( !c->running && c->newsession && !v11->expires )
    goto LABEL_173;
  lastct = c->lastct;
  v11->livecookie = c->running;
  c->lastct = ++lastct;
  v11->creationtime = lastct;
  if ( !noexpire )
    remove_expired(c);
  v45 = cookiehash(v11->domain);
  v46 = c->cookies[v45];
  if ( !v46 )
  {
    v48 = v11;
    if ( c->running && (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
    {
      v92 = "Added";
      v91 = 0;
      goto LABEL_234;
    }
    goto LABEL_279;
  }
  livecookie = 0;
  v48 = 0LL;
  v49 = 0LL;
  while ( 1 )
  {
    if ( !(unsigned int)curl_strequal(v46->name, v11->name) )
      goto LABEL_113;
    v50 = v46->domain;
    v51 = v11->domain;
    if ( v50 )
    {
      if ( !v51 || !(unsigned int)curl_strequal(v50, v51) )
        goto LABEL_113;
    }
    else if ( v51 )
    {
      goto LABEL_113;
    }
    spath = v46->spath;
    if ( spath )
    {
      v53 = v11->spath;
      if ( v53 )
      {
        if ( v46->secure && !v11->secure && !securea )
        {
          v80 = strchr(spath + 1, 47);
          v81 = v80 ? v80 - spath : strlen(spath);
          if ( (unsigned int)curl_strnequal(spath, v53, v81) )
          {
            if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
              Curl_infof(
                data,
                "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                v11->name,
                v11->domain);
            goto LABEL_173;
          }
        }
      }
    }
LABEL_113:
    if ( v49 || !(unsigned int)curl_strequal(v46->name, v11->name) )
      goto LABEL_114;
    v82 = v46->domain;
    v83 = v11->domain;
    if ( !v82 )
    {
      if ( v83 && (livecookie & 1) == 0 )
        break;
      goto LABEL_219;
    }
    if ( (!v83 || !(unsigned int)curl_strequal(v82, v83) || v46->tailmatch != v11->tailmatch) && (livecookie & 1) == 0 )
      break;
LABEL_219:
    v84 = v46->spath;
    v85 = v11->spath;
    if ( v84 )
    {
      if ( !v85 || !(unsigned int)curl_strequal(v84, v85) )
        break;
      v85 = v11->spath;
      v84 = v46->spath;
    }
    if ( (v84 == 0LL) != (v85 == 0LL) )
      break;
    livecookie = v11->livecookie;
    if ( (livecookie & 1) != 0 )
    {
      v48 = v46;
      v49 = v11;
    }
    else
    {
      if ( v46->livecookie )
        goto LABEL_173;
      v48 = v46;
      v49 = v11;
      livecookie = 1;
    }
LABEL_114:
    next = v46->next;
    if ( !v46->next )
      goto LABEL_228;
LABEL_115:
    v46 = next;
  }
  next = v46->next;
  livecookie = 0;
  if ( v46->next )
    goto LABEL_115;
LABEL_228:
  if ( v49 )
  {
    v86 = v48->name;
    v87 = (void (__fastcall *)(char *))Curl_cfree;
    v49->next = v48->next;
    v49->creationtime = v48->creationtime;
    v87(v86);
    Curl_cfree(v48->value);
    Curl_cfree(v48->domain);
    Curl_cfree(v48->path);
    Curl_cfree(v48->spath);
    v88 = *(_OWORD *)&v49->value;
    v89 = (void (__fastcall *)(Cookie *))Curl_cfree;
    *(_OWORD *)&v48->next = *(_OWORD *)&v49->next;
    *(_OWORD *)&v48->value = v88;
    v90 = *(_OWORD *)&v49->expires;
    *(_OWORD *)&v48->spath = *(_OWORD *)&v49->spath;
    *(_OWORD *)&v48->expires = v90;
    *(_QWORD *)&v48->prefix = *(_QWORD *)&v49->prefix;
    v89(v49);
  }
  else
  {
    v48 = v11;
  }
  if ( !c->running || (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) == 0 )
  {
    if ( (livecookie & 1) != 0 )
      goto LABEL_235;
    goto LABEL_242;
  }
  v91 = livecookie & 1;
  v92 = "Added";
  if ( v91 )
    v92 = "Replaced";
LABEL_234:
  Curl_infof(
    data,
    "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
    v92,
    v48->name,
    v48->value,
    v48->domain,
    v48->path,
    v48->expires);
  if ( !v91 )
  {
    if ( !v46 )
    {
LABEL_279:
      c->cookies[v45] = v48;
      goto LABEL_243;
    }
LABEL_242:
    v46->next = v48;
LABEL_243:
    ++c->numcookies;
  }
LABEL_235:
  v93 = v48->expires;
  if ( v93 && v93 < c->next_expiration )
    c->next_expiration = v93;
  return v48;
}
