Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  Cookie *v10; // rbp
  size_t v11; // r15
  char v12; // r12
  const char *v13; // rcx
  size_t v14; // rsi
  _BYTE *v15; // rbx
  size_t v16; // r13
  _BOOL8 v17; // rax
  bool v18; // r9
  bool v19; // r12
  _BYTE *v20; // rax
  const char *v21; // r15
  __int64 v22; // rax
  bool v23; // bl
  bool v24; // r14
  char *v25; // r8
  int v26; // eax
  const char *v27; // r8
  __int64 (__fastcall *v28)(const char *); // rbx
  __int64 v29; // rax
  __int64 v30; // rbx
  __int64 v31; // rax
  char *v33; // rax
  char *v34; // rax
  char *v35; // rdi
  int v36; // r14d
  bool v37; // dl
  int v38; // eax
  __int64 v39; // rax
  __int64 v40; // rax
  __int64 v41; // r14
  char *v42; // rax
  __int64 v43; // rax
  char *v44; // rax
  char *v45; // rbx
  signed __int64 v46; // rbx
  char *v47; // rax
  char *v48; // rax
  unsigned __int8 prefix; // al
  char *v50; // rax
  bool running; // al
  size_t v52; // r14
  Cookie *v53; // r15
  char livecookie; // bl
  __m128i *v55; // r12
  char *v56; // rdi
  char *v57; // rsi
  char *spath; // r8
  char *v59; // rdi
  char *v60; // rsi
  char *v61; // rdi
  char *v62; // rsi
  __int64 v63; // rax
  char *v64; // rax
  int v65; // eax
  curl_off_t expires; // rax
  void *v67; // rax
  __int64 v68; // rax
  __int64 v69; // rdx
  bool v70; // zf
  __int64 v71; // rax
  int v72; // eax
  __int64 v73; // rax
  char *value; // rdi
  const char *v75; // rax
  const char *name; // r13
  int v77; // eax
  const char *v78; // rax
  char *v79; // rax
  size_t v80; // rax
  size_t v81; // r14
  size_t v82; // r15
  __int64 v83; // rax
  char is_ipnum; // r12
  __int64 v85; // rax
  char *v86; // rdi
  const char *v87; // rdx
  const char *v88; // rax
  const char *v89; // r9
  const char *v90; // r8
  const char *v91; // rcx
  curl_off_t v92; // rax
  size_t v93; // rcx
  Cookie *v94; // r13
  char *v95; // rax
  const char *v96; // r8
  const char *v97; // r9
  char *v98; // rdx
  const char *v99; // rdi
  size_t v100; // rax
  int v101; // eax
  __int64 v102; // rax
  __int64 v103; // rax
  const char *ptr; // [rsp+8h] [rbp-120h]
  const char *ptra; // [rsp+8h] [rbp-120h]
  const char *ptrb; // [rsp+8h] [rbp-120h]
  int ptre; // [rsp+8h] [rbp-120h]
  const char *ptrc; // [rsp+8h] [rbp-120h]
  bool ptrd; // [rsp+8h] [rbp-120h]
  const char *ptrf; // [rsp+8h] [rbp-120h]
  const char *sep; // [rsp+10h] [rbp-118h]
  bool sepa; // [rsp+10h] [rbp-118h]
  bool sepb; // [rsp+10h] [rbp-118h]
  bool sepc; // [rsp+10h] [rbp-118h]
  char *sepd; // [rsp+10h] [rbp-118h]
  const char *sepe; // [rsp+10h] [rbp-118h]
  time_t now; // [rsp+30h] [rbp-F8h]
  bool badcookie; // [rsp+47h] [rbp-E1h]
  char *tok_buf; // [rsp+58h] [rbp-D0h] BYREF
  char date[128]; // [rsp+60h] [rbp-C8h] BYREF
  unsigned __int64 v126; // [rsp+E8h] [rbp-40h]

  v126 = __readfsqword(0x28u);
  now = time(0LL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  v10 = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !v10 )
    return 0LL;
  if ( httpheader )
  {
    badcookie = 0;
    if ( strlen(lineptr) > 0x1388 )
    {
      v94 = 0LL;
      Curl_cfree(v10);
      return v94;
    }
    while ( 1 )
    {
      v12 = *lineptr;
      if ( !*lineptr )
        break;
      if ( v12 == 32 || v12 == 9 )
        goto LABEL_10;
      v11 = strcspn(lineptr, ";\t\r\n=");
      if ( v11 )
        goto LABEL_13;
LABEL_9:
      if ( v12 != 59 )
        goto LABEL_92;
LABEL_10:
      ++lineptr;
    }
    v11 = strcspn(lineptr, ";\t\r\n=");
    if ( !v11 )
      goto LABEL_92;
LABEL_13:
    v13 = &lineptr[v11];
    do
    {
      v14 = v11--;
      if ( lineptr[v11] != 9 && lineptr[v11] != 32 )
      {
        v18 = 0;
        if ( *v13 != 61 )
        {
          ptr = v13;
          LOBYTE(v17) = 0;
          v11 = v14;
          v15 = 0LL;
          v16 = 0LL;
          goto LABEL_22;
        }
        v11 = v14;
        goto LABEL_17;
      }
    }
    while ( v11 );
    if ( *v13 != 61 )
    {
      if ( !v10->name )
        goto LABEL_53;
      ptr = v13;
      goto LABEL_87;
    }
LABEL_17:
    v15 = v13 + 1;
    sep = v13;
    v16 = strcspn(v13 + 1, ";\r\n");
    ptr = &v15[v16];
    while ( v16 )
    {
      LOBYTE(v17) = sep[v16] == 9 || sep[v16] == 32;
      if ( !v17 )
      {
        while ( 1 )
        {
          v37 = *v15 == 9 || *v15 == 32;
          if ( !v37 )
            break;
          ++v15;
          if ( !--v16 )
          {
            v18 = v37;
            goto LABEL_22;
          }
        }
        if ( !memchr(v15, 9, v16) )
        {
          v18 = httpheader;
          v17 = v16 > 0xFFE;
          goto LABEL_22;
        }
        freecookie(v10);
        if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
        {
          v94 = 0LL;
          Curl_infof(data, "cookie contains TAB, dropping");
          return v94;
        }
        return 0LL;
      }
      --v16;
    }
    v18 = httpheader;
    LOBYTE(v17) = 0;
LABEL_22:
    if ( v11 > 0xFFE || v17 || v16 + v11 > 0x1000 )
    {
      freecookie(v10);
      if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
      {
        v93 = v16;
        v94 = 0LL;
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v11, v93);
        return v94;
      }
      return 0LL;
    }
    if ( v11 > 6 && v12 == 95 && lineptr[1] == 95 )
    {
      sepb = v18;
      v72 = curl_strnequal("__Secure-", lineptr, 9LL);
      v18 = sepb;
      if ( v72 )
      {
        v10->prefix |= 1u;
      }
      else
      {
        v101 = curl_strnequal("__Host-", lineptr, 7LL);
        v18 = sepb;
        if ( v101 )
          v10->prefix |= 2u;
      }
    }
    if ( !v10->name )
    {
      if ( !v18 )
        goto LABEL_53;
      Curl_cfree(0LL);
      v73 = Curl_strndup(lineptr, v11);
      value = v10->value;
      v10->name = (char *)v73;
      Curl_cfree(value);
      v75 = (const char *)Curl_strndup(v15, v16);
      name = v10->name;
      v10->value = (char *)v75;
      if ( !v75 || !name )
        goto LABEL_53;
      if ( v75[strcspn(v75, &badoctets_0)] || name[strcspn(name, &badoctets_0)] )
      {
        if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
        goto LABEL_53;
      }
      goto LABEL_87;
    }
    if ( v16 )
    {
      if ( v11 != 4 )
        goto LABEL_30;
    }
    else
    {
      if ( v11 == 6 )
      {
        sepc = v18;
        if ( (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
        {
          if ( !secure && c->running )
            goto LABEL_53;
          v10->secure = 1;
          lineptr = ptr;
          goto LABEL_88;
        }
        if ( !sepc )
          goto LABEL_87;
LABEL_31:
        v19 = (unsigned int)curl_strnequal("domain", lineptr, 6LL) != 0 && v16 != 0;
        if ( v19 )
        {
          if ( *v15 == 46 )
          {
            ++v15;
            --v16;
          }
          if ( v16 == 9 && (unsigned int)curl_strnequal(v15, "localhost", 9LL)
            || (v20 = memchr(v15, 46, v16)) != 0LL && v16 - (v20 - v15) > 1 )
          {
            v21 = domain;
            if ( !domain )
            {
              is_ipnum = Curl_host_is_ipnum(v15);
              Curl_cfree(v10->domain);
              v85 = Curl_strndup(v15, v16);
              v10->domain = (char *)v85;
              if ( !v85 )
                goto LABEL_53;
              lineptr = ptr;
              if ( is_ipnum )
                goto LABEL_88;
              goto LABEL_214;
            }
          }
          else
          {
            domain = ":";
            v21 = ":";
          }
          if ( (unsigned __int8)Curl_host_is_ipnum(v21) )
          {
            if ( strncmp(v15, v21, v16) || strlen(v21) != v16 )
              goto LABEL_41;
            Curl_cfree(v10->domain);
            v102 = Curl_strndup(v15, v16);
            v10->domain = (char *)v102;
            if ( !v102 )
              goto LABEL_53;
            goto LABEL_87;
          }
          v80 = strlen(domain);
          v81 = v80;
          if ( v16 > v80
            || (v82 = v80 - v16, !(unsigned int)curl_strnequal(v15, &domain[v80 - v16], v16))
            || v16 != v81 && domain[v82 - 1] != 46 )
          {
LABEL_41:
            lineptr = ptr;
            badcookie = v19;
            if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
              Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v15);
            goto LABEL_88;
          }
          Curl_cfree(v10->domain);
          v83 = Curl_strndup(v15, v16);
          v10->domain = (char *)v83;
          if ( !v83 )
            goto LABEL_53;
LABEL_214:
          v10->tailmatch = 1;
          lineptr = ptr;
          goto LABEL_88;
        }
LABEL_87:
        lineptr = ptr;
LABEL_88:
        v12 = *ptr;
        if ( !*ptr )
        {
LABEL_92:
          if ( !badcookie )
          {
            if ( v10->domain || !domain || (v43 = Curl_cstrdup(domain), (v10->domain = (char *)v43) != 0LL) )
            {
              if ( v10->path || !path )
                goto LABEL_271;
              v44 = strchr(path, 63);
              v45 = v44 ? (char *)Curl_memrchr(path, 47LL, v44 - path) : strrchr(path, 47);
              if ( !v45
                || (v46 = v45 - path, v47 = (char *)Curl_cmalloc(v46 + 2), (v10->path = v47) != 0LL)
                && (memcpy(v47, path, v46 + 1),
                    v10->path[v46 + 1] = 0,
                    v48 = sanitize_cookie_path(v10->path),
                    (v10->spath = v48) != 0LL) )
              {
LABEL_271:
                if ( v10->name )
                {
                  ++data->req.setcookies;
                  goto LABEL_105;
                }
              }
            }
          }
LABEL_53:
          freecookie(v10);
          return 0LL;
        }
        while ( v12 == 32 || v12 == 9 )
        {
          v12 = *++lineptr;
          if ( !v12 )
            goto LABEL_92;
        }
        goto LABEL_9;
      }
      if ( v11 == 8 )
      {
        if ( (unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
        {
          v10->httponly = 1;
          lineptr = ptr;
          goto LABEL_88;
        }
        goto LABEL_87;
      }
      if ( !v18 )
        goto LABEL_87;
      if ( v11 != 4 )
      {
LABEL_30:
        if ( v11 != 6 )
        {
          if ( v11 != 7 || (unsigned int)curl_strnequal("version", lineptr, 7LL) )
            goto LABEL_87;
          if ( !(unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
          {
            if ( (unsigned int)curl_strnequal("expires", lineptr, 7LL) && !v10->expires && v16 <= 0x7F )
            {
              v67 = memcpy(date, v15, v16);
              date[v16] = 0;
              v68 = Curl_getdate_capped(v67);
              v69 = 0LL;
              v70 = v68 == 0;
              if ( v68 >= 0 )
                v69 = v68;
              v71 = 1LL;
              if ( !v70 )
                v71 = v69;
              v10->expires = v71;
            }
            goto LABEL_87;
          }
          v65 = curlx_strtoofft(&v15[*v15 == 34], 0LL, 10LL, &v10->expires);
          if ( v65 != 1 )
          {
            if ( v65 == 2 )
              goto LABEL_248;
            if ( v65 )
              goto LABEL_87;
            expires = v10->expires;
            if ( !expires )
            {
LABEL_248:
              v10->expires = 1LL;
              lineptr = ptr;
              goto LABEL_88;
            }
            if ( expires <= 0x7FFFFFFFFFFFFFFFLL - now )
            {
              lineptr = ptr;
              v10->expires = now + expires;
              goto LABEL_88;
            }
          }
          lineptr = ptr;
          v10->expires = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_88;
        }
        goto LABEL_31;
      }
    }
    if ( (unsigned int)curl_strnequal("path", lineptr, 4LL) )
    {
      Curl_cfree(v10->path);
      v63 = Curl_strndup(v15, v16);
      v10->path = (char *)v63;
      if ( !v63 )
        goto LABEL_53;
      Curl_cfree(v10->spath);
      v64 = sanitize_cookie_path(v10->path);
      v10->spath = v64;
      if ( !v64 )
        goto LABEL_53;
    }
    goto LABEL_87;
  }
  tok_buf = 0LL;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
  {
    v10->httponly = 1;
    lineptr += 10;
  }
  if ( *lineptr == 35 )
  {
    Curl_cfree(v10);
    return 0LL;
  }
  v33 = strchr(lineptr, 13);
  if ( v33 )
    *v33 = 0;
  v34 = strchr(lineptr, 10);
  if ( v34 )
    *v34 = 0;
  v35 = (char *)lineptr;
  v36 = 0;
  v25 = strtok_r(v35, "\t", &tok_buf);
  if ( !v25 )
    goto LABEL_53;
  sepa = httpheader;
  while ( 2 )
  {
    switch ( v36 )
    {
      case 0:
        v22 = Curl_cstrdup(&v25[*v25 == 46]);
        v10->domain = (char *)v22;
        v23 = v22 == 0;
        v24 = v22 != 0;
        v25 = strtok_r(0LL, "\t", &tok_buf);
        if ( !v25 || !v24 )
          goto LABEL_195;
        goto LABEL_45;
      case 1:
LABEL_45:
        v10->tailmatch = (unsigned int)curl_strequal(v25, "TRUE") != 0;
        v25 = strtok_r(0LL, "\t", &tok_buf);
        if ( v25 )
          goto LABEL_46;
        goto LABEL_53;
      case 2:
LABEL_46:
        ptra = v25;
        v26 = strcmp("TRUE", v25);
        v27 = ptra;
        v28 = (__int64 (__fastcall *)(const char *))Curl_cstrdup;
        if ( v26 )
        {
          v77 = strcmp("FALSE", ptra);
          v27 = ptra;
          if ( v77 )
          {
            v78 = (const char *)v28(ptra);
            v10->path = (char *)v78;
            if ( !v78 )
              goto LABEL_52;
            v79 = sanitize_cookie_path(v78);
            v10->spath = v79;
            v23 = v79 == 0LL;
            ptrd = v79 != 0LL;
            v24 = v79 != 0LL;
            v25 = strtok_r(0LL, "\t", &tok_buf);
            if ( !v25 || !ptrd )
              goto LABEL_195;
LABEL_70:
            v23 = httpheader;
LABEL_71:
            v10->secure = 0;
            if ( !(unsigned int)curl_strequal(v25, "TRUE") )
              goto LABEL_72;
            goto LABEL_50;
          }
        }
        ptrb = v27;
        v29 = v28("/");
        v10->path = (char *)v29;
        v30 = v29;
        v31 = Curl_cstrdup("/");
        v25 = (char *)ptrb;
        v10->spath = (char *)v31;
        if ( v31 )
        {
          v23 = v30 == 0;
          goto LABEL_71;
        }
        v10->secure = 0;
        if ( (unsigned int)curl_strequal(ptrb, "TRUE") )
        {
          v23 = 1;
LABEL_50:
          if ( !secure && !c->running )
          {
LABEL_52:
            strtok_r(0LL, "\t", &tok_buf);
            goto LABEL_53;
          }
          v10->secure = 1;
LABEL_72:
          v24 = !v23;
          v25 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v25 || !v24 )
            goto LABEL_195;
LABEL_74:
          v38 = curlx_strtoofft(v25, 0LL, 10LL, &v10->expires);
          v23 = v38 != 0;
          v24 = v38 == 0;
          v25 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v25 || !v24 )
            goto LABEL_195;
LABEL_76:
          v39 = Curl_cstrdup(v25);
          v10->name = (char *)v39;
          if ( !v39 )
          {
            strtok_r(0LL, "\t", &tok_buf);
            v10->value = (char *)Curl_cstrdup(&LC26);
            freecookie(v10);
            return 0LL;
          }
          if ( (unsigned int)curl_strnequal("__Secure-", v39, 9LL) )
          {
            v10->prefix |= 1u;
          }
          else if ( (unsigned int)curl_strnequal("__Host-", v10->name, 7LL) )
          {
            v10->prefix |= 2u;
          }
          v25 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v25 )
          {
            v103 = Curl_cstrdup(&LC26);
            v10->value = (char *)v103;
            if ( !v103 )
              goto LABEL_53;
LABEL_105:
            prefix = v10->prefix;
            if ( (prefix & 1) != 0 )
              goto LABEL_106;
LABEL_198:
            if ( (prefix & 2) != 0 )
            {
              if ( !v10->secure )
                goto LABEL_53;
              goto LABEL_108;
            }
            goto LABEL_112;
          }
LABEL_80:
          v40 = Curl_cstrdup(v25);
          v10->value = (char *)v40;
          v41 = v40;
          v23 = v40 == 0;
          v42 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v41 || !v42 )
            goto LABEL_196;
          v36 = 7;
LABEL_83:
          ++v36;
          v25 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v25 )
            goto LABEL_53;
          continue;
        }
        strtok_r(0LL, "\t", &tok_buf);
        v24 = sepa;
        v23 = 1;
LABEL_195:
        if ( v24 )
          goto LABEL_53;
LABEL_196:
        if ( v23 )
          goto LABEL_53;
        prefix = v10->prefix;
        if ( (prefix & 1) == 0 )
          goto LABEL_198;
LABEL_106:
        if ( !v10->secure )
          goto LABEL_53;
        if ( (prefix & 2) != 0 )
        {
LABEL_108:
          v50 = v10->path;
          if ( !v50 || *v50 != 47 || v50[1] || v10->tailmatch )
            goto LABEL_53;
        }
LABEL_112:
        running = c->running;
        if ( !running && c->newsession && !v10->expires )
          goto LABEL_53;
        v10->livecookie = running;
        ptre = c->lastct;
        c->lastct = ptre + 1;
        v10->creationtime = ptre + 1;
        if ( !noexpire )
          remove_expired(c);
        v52 = cookiehash(v10->domain);
        v53 = c->cookies[v52];
        if ( !v53 )
        {
          if ( c->running && (*(&data->set.connect_only + 4) & 0x20) != 0 )
          {
            v88 = v10->path;
            v89 = v10->domain;
            v94 = v10;
            livecookie = 0;
            v90 = v10->value;
            v91 = v10->name;
            v87 = "Added";
            goto LABEL_223;
          }
          v94 = v10;
LABEL_225:
          c->cookies[v52] = v94;
          goto LABEL_228;
        }
        livecookie = 0;
        v94 = 0LL;
        v55 = 0LL;
        while ( 2 )
        {
          if ( (unsigned int)curl_strequal(v53->name, v10->name) )
          {
            v56 = v53->domain;
            v57 = v10->domain;
            if ( v56 )
            {
              if ( v57 && (unsigned int)curl_strequal(v56, v57) )
              {
LABEL_125:
                spath = v53->spath;
                if ( spath )
                {
                  ptrc = v10->spath;
                  if ( ptrc )
                  {
                    if ( v53->secure && !v10->secure && !secure )
                    {
                      sepd = v53->spath;
                      v95 = strchr(spath + 1, 47);
                      v96 = sepd;
                      v97 = ptrc;
                      if ( v95 )
                      {
                        v98 = (char *)(v95 - sepd);
                      }
                      else
                      {
                        v99 = sepd;
                        sepe = ptrc;
                        ptrf = v96;
                        v100 = strlen(v99);
                        v97 = sepe;
                        v96 = ptrf;
                        v98 = (char *)v100;
                      }
                      if ( (unsigned int)curl_strnequal(v96, v97, v98) )
                      {
                        if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
                          Curl_infof(
                            data,
                            "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                            v10->name,
                            v10->domain);
                        goto LABEL_53;
                      }
                    }
                  }
                }
              }
            }
            else if ( !v57 )
            {
              goto LABEL_125;
            }
          }
          if ( v55 || !(unsigned int)curl_strequal(v53->name, v10->name) )
            goto LABEL_119;
          v59 = v53->domain;
          v60 = v10->domain;
          if ( !v59 )
          {
            if ( v60 )
              goto LABEL_136;
LABEL_137:
            v61 = v53->spath;
            v62 = v10->spath;
            if ( v61 )
            {
              if ( !v62 )
              {
                v55 = 0LL;
                livecookie = 0;
                goto LABEL_119;
              }
              if ( !(unsigned int)curl_strequal(v61, v62) )
                goto LABEL_232;
              v61 = v53->spath;
            }
            if ( (v61 == 0LL) == (v10->spath == 0LL) )
            {
              livecookie = v10->livecookie;
              if ( livecookie )
              {
                v94 = v53;
                v55 = (__m128i *)v10;
              }
              else
              {
                if ( v53->livecookie )
                  goto LABEL_53;
                v94 = v53;
                v55 = (__m128i *)v10;
                livecookie = 1;
              }
              goto LABEL_119;
            }
LABEL_232:
            livecookie = 0;
            goto LABEL_119;
          }
          if ( v60 && (unsigned int)curl_strequal(v59, v60) && v53->tailmatch == v10->tailmatch )
            goto LABEL_137;
LABEL_136:
          if ( livecookie )
            goto LABEL_137;
LABEL_119:
          if ( v53->next )
          {
            v53 = v53->next;
            continue;
          }
          break;
        }
        if ( v55 )
        {
          v86 = v94->name;
          v55->m128i_i64[0] = (__int64)v94->next;
          v55[3].m128i_i32[3] = v94->creationtime;
          Curl_cfree(v86);
          Curl_cfree(v94->value);
          Curl_cfree(v94->domain);
          Curl_cfree(v94->path);
          Curl_cfree(v94->spath);
          *(__m128i *)&v94->next = _mm_loadu_si128(v55);
          *(__m128i *)&v94->value = _mm_loadu_si128(v55 + 1);
          *(__m128i *)&v94->spath = _mm_loadu_si128(v55 + 2);
          *(__m128i *)&v94->expires = _mm_loadu_si128(v55 + 3);
          *(_QWORD *)&v94->prefix = v55[4].m128i_i64[0];
          Curl_cfree(v55);
        }
        else
        {
          v94 = v10;
        }
        if ( !c->running || (*(&data->set.connect_only + 4) & 0x20) == 0 )
        {
          if ( livecookie )
            goto LABEL_229;
          goto LABEL_227;
        }
        v87 = "Replaced";
        v88 = v94->path;
        v89 = v94->domain;
        v90 = v94->value;
        v91 = v94->name;
        if ( !livecookie )
          v87 = "Added";
LABEL_223:
        Curl_infof(
          data,
          "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
          v87,
          v91,
          v90,
          v89,
          v88,
          v94->expires);
        if ( !livecookie )
        {
          if ( !v53 )
            goto LABEL_225;
LABEL_227:
          v53->next = v94;
LABEL_228:
          ++c->numcookies;
        }
LABEL_229:
        v92 = v94->expires;
        if ( v92 && v92 < c->next_expiration )
          c->next_expiration = v92;
        return v94;
      case 3:
        goto LABEL_70;
      case 4:
        goto LABEL_74;
      case 5:
        goto LABEL_76;
      case 6:
        goto LABEL_80;
      default:
        goto LABEL_83;
    }
  }
}
