Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v8; // rcx
  char is_ipnum; // al
  CURLofft v10; // eax
  curl_off_t v11; // rax
  char *v12; // rax
  char *v13; // rax
  char *v14; // rax
  char *v15; // rax
  _BOOL4 v16; // eax
  char *v17; // rax
  char *v18; // rax
  char *v19; // rcx
  char *v20; // rcx
  char *v21; // rcx
  char *v22; // rax
  char *v23; // rax
  int v24; // ecx
  int v25; // eax
  const char *v26; // rdx
  char v28; // [rsp+21h] [rbp-1AFh]
  bool v29; // [rsp+22h] [rbp-1AEh]
  bool v30; // [rsp+23h] [rbp-1ADh]
  bool v31; // [rsp+40h] [rbp-190h]
  bool v32; // [rsp+41h] [rbp-18Fh]
  bool v33; // [rsp+42h] [rbp-18Eh]
  bool v34; // [rsp+43h] [rbp-18Dh]
  bool v35; // [rsp+44h] [rbp-18Ch]
  bool v36; // [rsp+45h] [rbp-18Bh]
  bool v37; // [rsp+46h] [rbp-18Ah]
  bool v38; // [rsp+47h] [rbp-189h]
  char *sep_0; // [rsp+48h] [rbp-188h]
  size_t cllen; // [rsp+50h] [rbp-180h]
  char matching_domains; // [rsp+5Bh] [rbp-175h]
  int fields; // [rsp+5Ch] [rbp-174h]
  char *tok_buf; // [rsp+60h] [rbp-170h] BYREF
  char *firstptr; // [rsp+68h] [rbp-168h]
  char *ptr_0; // [rsp+70h] [rbp-160h]
  size_t pathlen; // [rsp+78h] [rbp-158h]
  char *endslash; // [rsp+80h] [rbp-150h]
  char *queryp; // [rsp+88h] [rbp-148h]
  char date[128]; // [rsp+90h] [rbp-140h] BYREF
  const char *maxage; // [rsp+110h] [rbp-C0h]
  CURLofft offt; // [rsp+118h] [rbp-B8h]
  bool is_ip; // [rsp+11Fh] [rbp-B1h]
  const char *valuep; // [rsp+120h] [rbp-B0h]
  const char *namep; // [rsp+128h] [rbp-A8h]
  bool sep; // [rsp+136h] [rbp-9Ah]
  bool done; // [rsp+137h] [rbp-99h]
  size_t nlen; // [rsp+138h] [rbp-98h]
  size_t vlen; // [rsp+140h] [rbp-90h]
  size_t linelength; // [rsp+148h] [rbp-88h]
  const char *ptr; // [rsp+150h] [rbp-80h]
  size_t myhash; // [rsp+158h] [rbp-78h]
  bool badcookie; // [rsp+166h] [rbp-6Ah]
  bool replace_old; // [rsp+167h] [rbp-69h]
  time_t now; // [rsp+168h] [rbp-68h]
  Cookie *replace_clist; // [rsp+170h] [rbp-60h]
  Cookie *replace_co; // [rsp+178h] [rbp-58h]
  Cookie *lastc; // [rsp+180h] [rbp-50h]
  Cookie *co; // [rsp+188h] [rbp-48h]
  Cookie *clist; // [rsp+190h] [rbp-40h]
  bool securea; // [rsp+19Fh] [rbp-31h]
  const char *domaina; // [rsp+1A0h] [rbp-30h]
  const char *lineptra; // [rsp+1A8h] [rbp-28h]
  bool noexpirea; // [rsp+1B6h] [rbp-1Ah]
  bool httpheadera; // [rsp+1B7h] [rbp-19h]
  CookieInfo *ca; // [rsp+1B8h] [rbp-18h]
  Curl_easy *dataa; // [rsp+1C0h] [rbp-10h]

  dataa = data;
  ca = c;
  httpheadera = httpheader;
  noexpirea = noexpire;
  lineptra = lineptr;
  domaina = domain;
  securea = secure;
  lastc = 0LL;
  replace_co = 0LL;
  replace_clist = 0LL;
  now = time(0LL);
  replace_old = 0;
  badcookie = 0;
  if ( data->req.setcookies >= 0x32u )
    return 0LL;
  co = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !co )
    return 0LL;
  if ( !httpheadera )
  {
    tok_buf = 0LL;
    if ( !strncmp(lineptra, "#HttpOnly_", 0xAuLL) )
    {
      lineptra += 10;
      co->httponly = 1;
    }
    if ( *lineptra == 35 )
      goto LABEL_7;
    ptr_0 = strchr(lineptra, 13);
    if ( ptr_0 )
      *ptr_0 = 0;
    ptr_0 = strchr(lineptra, 10);
    if ( ptr_0 )
      *ptr_0 = 0;
    firstptr = strtok_r((char *)lineptra, "\t", &tok_buf);
    ptr_0 = firstptr;
    for ( fields = 0; ; ++fields )
    {
      v28 = 0;
      if ( ptr_0 )
        v28 = ~badcookie;
      if ( (v28 & 1) == 0 )
        break;
      switch ( fields )
      {
        case 0:
          if ( *ptr_0 == 46 )
            ++ptr_0;
          v15 = (char *)Curl_cstrdup(ptr_0);
          co->domain = v15;
          if ( !co->domain )
            badcookie = 1;
          break;
        case 1:
          v16 = curl_strequal(ptr_0, "TRUE") != 0;
          co->tailmatch = v16;
          break;
        case 2:
          if ( !strcmp("TRUE", ptr_0) || !strcmp("FALSE", ptr_0) )
          {
            v19 = (char *)Curl_cstrdup("/");
            co->path = v19;
            if ( !co->path )
              badcookie = 1;
            v20 = (char *)Curl_cstrdup("/");
            co->spath = v20;
            if ( !co->spath )
              badcookie = 1;
            ++fields;
            goto LABEL_201;
          }
          v17 = (char *)Curl_cstrdup(ptr_0);
          co->path = v17;
          if ( co->path )
          {
            v18 = sanitize_cookie_path(co->path);
            co->spath = v18;
            if ( !co->spath )
              badcookie = 1;
          }
          else
          {
            badcookie = 1;
          }
          break;
        case 3:
LABEL_201:
          co->secure = 0;
          if ( (unsigned int)curl_strequal(ptr_0, "TRUE") )
          {
            if ( securea || ca->running )
              co->secure = 1;
            else
              badcookie = 1;
          }
          break;
        case 4:
          if ( (unsigned int)curlx_strtoofft(ptr_0, 0LL, 10LL, &co->expires) )
            badcookie = 1;
          break;
        case 5:
          v21 = (char *)Curl_cstrdup(ptr_0);
          co->name = v21;
          if ( co->name )
          {
            if ( (unsigned int)curl_strnequal("__Secure-", co->name, 9LL) )
            {
              co->prefix |= 1u;
            }
            else if ( (unsigned int)curl_strnequal("__Host-", co->name, 7LL) )
            {
              co->prefix |= 2u;
            }
          }
          else
          {
            badcookie = 1;
          }
          break;
        case 6:
          v22 = (char *)Curl_cstrdup(ptr_0);
          co->value = v22;
          if ( !co->value )
            badcookie = 1;
          break;
        default:
          break;
      }
      ptr_0 = strtok_r(0LL, "\t", &tok_buf);
    }
    if ( fields == 6 )
    {
      v23 = (char *)Curl_cstrdup(&L_str_22);
      co->value = v23;
      if ( co->value )
        fields = 7;
      else
        badcookie = 1;
    }
    if ( !badcookie && fields != 7 )
      badcookie = 1;
    if ( !badcookie )
      goto LABEL_229;
LABEL_286:
    freecookie(co);
    return 0LL;
  }
  linelength = strlen(lineptra);
  if ( linelength > 0x1388 )
  {
LABEL_7:
    Curl_cfree(co);
    return 0LL;
  }
  for ( ptr = lineptra; ; ++ptr )
  {
    while ( 1 )
    {
      v38 = 0;
      if ( *ptr )
      {
        v37 = 1;
        if ( *ptr != 32 )
          v37 = *ptr == 9;
        v38 = v37;
      }
      if ( !v38 )
        break;
      ++ptr;
    }
    nlen = strcspn(ptr, ";\t\r\n=");
    if ( !nlen )
      goto LABEL_142;
    done = 0;
    sep = 0;
    namep = ptr;
    ptr += nlen;
    while ( 1 )
    {
      v36 = 0;
      if ( nlen )
      {
        v35 = 1;
        if ( namep[nlen - 1] != 32 )
          v35 = namep[nlen - 1] == 9;
        v36 = v35;
      }
      if ( !v36 )
        break;
      --nlen;
    }
    if ( *ptr == 61 )
    {
      vlen = strcspn(++ptr, ";\r\n");
      valuep = ptr;
      sep = 1;
      ptr += vlen;
      while ( 1 )
      {
        v34 = 0;
        if ( vlen )
        {
          v33 = 1;
          if ( valuep[vlen - 1] != 32 )
            v33 = valuep[vlen - 1] == 9;
          v34 = v33;
        }
        if ( !v34 )
          break;
        --vlen;
      }
      while ( 1 )
      {
        v32 = 0;
        if ( vlen )
        {
          v31 = 1;
          if ( *valuep != 32 )
            v31 = *valuep == 9;
          v32 = v31;
        }
        if ( !v32 )
          break;
        ++valuep;
        --vlen;
      }
      if ( memchr(valuep, 9, vlen) )
      {
        freecookie(co);
        if ( dataa && ((*(_QWORD *)((char *)&dataa->set + 2226) >> 29) & 1) != 0 )
          Curl_infof(dataa, "cookie contains TAB, dropping");
        return 0LL;
      }
    }
    else
    {
      valuep = 0LL;
      vlen = 0LL;
    }
    if ( nlen >= 0xFFF || vlen >= 0xFFF || vlen + nlen > 0x1000 )
    {
      freecookie(co);
      if ( dataa && ((*(_QWORD *)((char *)&dataa->set + 2226) >> 29) & 1) != 0 )
        Curl_infof(dataa, "oversized cookie dropped, name/val %zu + %zu bytes", nlen, vlen);
      return 0LL;
    }
    if ( nlen >= 7 && *namep == 95 && namep[1] == 95 )
    {
      if ( (unsigned int)curl_strnequal("__Secure-", namep, 9LL) )
      {
        co->prefix |= 1u;
      }
      else if ( (unsigned int)curl_strnequal("__Host-", namep, 7LL) )
      {
        co->prefix |= 2u;
      }
    }
    if ( !co->name )
      break;
    if ( !vlen )
    {
      done = 1;
      if ( nlen == 6 && (unsigned int)curl_strnequal("secure", namep, 6LL) )
      {
        if ( !securea && ca->running )
        {
          badcookie = 1;
          goto LABEL_150;
        }
        co->secure = 1;
      }
      else if ( nlen == 8 && (unsigned int)curl_strnequal("httponly", namep, 8LL) )
      {
        co->httponly = 1;
      }
      else if ( sep )
      {
        done = 0;
      }
    }
LABEL_83:
    if ( !done )
    {
      if ( nlen == 4 && (unsigned int)curl_strnequal("path", namep, 4LL) )
      {
        strstore(&co->path, valuep, vlen);
        if ( !co->path )
        {
          badcookie = 1;
          goto LABEL_150;
        }
        Curl_cfree(co->spath);
        v8 = sanitize_cookie_path(co->path);
        co->spath = v8;
        if ( !co->spath )
        {
          badcookie = 1;
          goto LABEL_150;
        }
      }
      else if ( nlen == 6 && (unsigned int)curl_strnequal("domain", namep, 6LL) && vlen )
      {
        if ( *valuep == 46 )
        {
          ++valuep;
          --vlen;
        }
        if ( bad_domain(valuep, vlen) )
          domaina = ":";
        if ( domaina )
          is_ipnum = Curl_host_is_ipnum(domaina);
        else
          is_ipnum = Curl_host_is_ipnum(valuep);
        is_ip = is_ipnum & 1;
        if ( !domaina
          || is_ip && !strncmp(valuep, domaina, vlen) && vlen == strlen(domaina)
          || !is_ip && cookie_tailmatch(valuep, vlen, domaina) )
        {
          strstore(&co->domain, valuep, vlen);
          if ( !co->domain )
          {
            badcookie = 1;
            goto LABEL_150;
          }
          if ( !is_ip )
            co->tailmatch = 1;
        }
        else
        {
          badcookie = 1;
          if ( dataa && ((*(_QWORD *)((char *)&dataa->set + 2226) >> 29) & 1) != 0 )
            Curl_infof(dataa, "skipped cookie with bad tailmatch domain: %s", valuep);
        }
      }
      else if ( nlen != 7 || !(unsigned int)curl_strnequal("version", namep, 7LL) )
      {
        if ( nlen == 7 && (unsigned int)curl_strnequal("max-age", namep, 7LL) )
        {
          maxage = valuep;
          if ( *valuep == 34 )
            v10 = (unsigned int)curlx_strtoofft(maxage + 1, 0LL, 10LL, &co->expires);
          else
            v10 = (unsigned int)curlx_strtoofft(maxage, 0LL, 10LL, &co->expires);
          offt = v10;
          if ( v10 )
          {
            if ( v10 == CURL_OFFT_FLOW )
            {
              co->expires = 0x7FFFFFFFFFFFFFFFLL;
            }
            else if ( v10 == CURL_OFFT_INVAL )
            {
              co->expires = 1LL;
            }
          }
          else if ( co->expires )
          {
            if ( 0x7FFFFFFFFFFFFFFFLL - now >= co->expires )
              co->expires += now;
            else
              co->expires = 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            co->expires = 1LL;
          }
        }
        else if ( nlen == 7 && (unsigned int)curl_strnequal("expires", namep, 7LL) && !co->expires && vlen < 0x80 )
        {
          memcpy(date, valuep, vlen);
          date[vlen] = 0;
          v11 = Curl_getdate_capped(date);
          co->expires = v11;
          if ( co->expires )
          {
            if ( co->expires < 0 )
              co->expires = 0LL;
          }
          else
          {
            co->expires = 1LL;
          }
        }
      }
    }
    while ( 1 )
    {
LABEL_142:
      v30 = 0;
      if ( *ptr )
      {
        v29 = 1;
        if ( *ptr != 32 )
          v29 = *ptr == 9;
        v30 = v29;
      }
      if ( !v30 )
        break;
      ++ptr;
    }
    if ( *ptr != 59 )
      goto LABEL_150;
  }
  if ( !sep )
  {
    badcookie = 1;
    goto LABEL_150;
  }
  strstore(&co->name, namep, nlen);
  strstore(&co->value, valuep, vlen);
  done = 1;
  if ( !co->name || !co->value )
  {
    badcookie = 1;
    goto LABEL_150;
  }
  if ( !invalid_octets(co->value) && !invalid_octets(co->name) )
    goto LABEL_83;
  if ( dataa && ((*(_QWORD *)((char *)&dataa->set + 2226) >> 29) & 1) != 0 )
    Curl_infof(dataa, "invalid octets in name/value, cookie dropped");
  badcookie = 1;
LABEL_150:
  if ( !badcookie && !co->domain )
  {
    if ( domaina )
    {
      v12 = (char *)Curl_cstrdup(domaina);
      co->domain = v12;
      if ( !co->domain )
        badcookie = 1;
    }
  }
  if ( !badcookie && !co->path && path )
  {
    queryp = strchr(path, 63);
    endslash = queryp ? (char *)Curl_memrchr(path, 47LL, queryp - path) : strrchr(path, 47);
    if ( endslash )
    {
      pathlen = endslash - path + 1;
      v13 = (char *)Curl_cmalloc(endslash - path + 2);
      co->path = v13;
      if ( co->path )
      {
        memcpy(co->path, path, pathlen);
        co->path[pathlen] = 0;
        v14 = sanitize_cookie_path(co->path);
        co->spath = v14;
        if ( !co->spath )
          badcookie = 1;
      }
      else
      {
        badcookie = 1;
      }
    }
  }
  if ( badcookie || !co->name )
  {
    freecookie(co);
    return 0LL;
  }
  ++dataa->req.setcookies;
LABEL_229:
  if ( (co->prefix & 1) != 0 && !co->secure
    || (co->prefix & 2) != 0 && (!co->secure || !co->path || strcmp(co->path, "/") || co->tailmatch)
    || !ca->running && ca->newsession && !co->expires )
  {
    goto LABEL_286;
  }
  co->livecookie = ca->running;
  v24 = ca->lastct + 1;
  ca->lastct = v24;
  co->creationtime = v24;
  if ( !noexpirea )
    remove_expired(ca);
  myhash = cookiehash(co->domain);
  for ( clist = ca->cookies[myhash]; clist; clist = clist->next )
  {
    if ( (unsigned int)curl_strequal(clist->name, co->name) )
    {
      matching_domains = 0;
      if ( clist->domain && co->domain )
      {
        matching_domains = (unsigned int)curl_strequal(clist->domain, co->domain) != 0;
      }
      else if ( !clist->domain && !co->domain )
      {
        matching_domains = 1;
      }
      if ( (matching_domains & 1) != 0 && clist->spath && co->spath && clist->secure && !co->secure && !securea )
      {
        sep_0 = strchr((const char *)clist->spath + 1, 47);
        if ( sep_0 )
        {
          v25 = curl_strnequal(clist->spath, co->spath, sep_0 - clist->spath);
        }
        else
        {
          cllen = strlen(clist->spath);
          v25 = curl_strnequal(clist->spath, co->spath, cllen);
        }
        if ( v25 )
        {
          if ( dataa && ((*(_QWORD *)((char *)&dataa->set + 2226) >> 29) & 1) != 0 )
            Curl_infof(
              dataa,
              "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
              co->name,
              co->domain);
          goto LABEL_286;
        }
      }
    }
    if ( !replace_co && (unsigned int)curl_strequal(clist->name, co->name) )
    {
      if ( clist->domain && co->domain )
      {
        if ( (unsigned int)curl_strequal(clist->domain, co->domain) && clist->tailmatch == co->tailmatch )
          replace_old = 1;
      }
      else if ( !clist->domain && !co->domain )
      {
        replace_old = 1;
      }
      if ( replace_old )
      {
        if ( clist->spath && co->spath && !(unsigned int)curl_strequal(clist->spath, co->spath) )
        {
          replace_old = 0;
        }
        else if ( (clist->spath == 0LL) != (co->spath == 0LL) )
        {
          replace_old = 0;
        }
      }
      if ( replace_old && !co->livecookie && clist->livecookie )
        goto LABEL_286;
      if ( replace_old )
      {
        replace_co = co;
        replace_clist = clist;
      }
    }
    lastc = clist;
  }
  if ( replace_co )
  {
    co = replace_co;
    clist = replace_clist;
    replace_co->next = replace_clist->next;
    co->creationtime = clist->creationtime;
    Curl_cfree(clist->name);
    Curl_cfree(clist->value);
    Curl_cfree(clist->domain);
    Curl_cfree(clist->path);
    Curl_cfree(clist->spath);
    memcpy(clist, co, sizeof(Cookie));
    Curl_cfree(co);
    co = clist;
  }
  if ( ca->running && dataa && ((*(_QWORD *)((char *)&dataa->set + 2226) >> 29) & 1) != 0 )
  {
    v26 = "Added";
    if ( replace_old )
      v26 = "Replaced";
    Curl_infof(
      dataa,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
      v26,
      co->name,
      co->value,
      co->domain,
      co->path,
      co->expires);
  }
  if ( !replace_old )
  {
    if ( lastc )
      lastc->next = co;
    else
      ca->cookies[myhash] = co;
    ++ca->numcookies;
  }
  if ( co->expires && co->expires < ca->next_expiration )
    ca->next_expiration = co->expires;
  return co;
}
