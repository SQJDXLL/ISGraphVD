Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  int v12; // r8
  time_t v13; // r11
  int v14; // r0
  char *j; // r9
  int v16; // r10
  unsigned int v17; // r6
  void (__fastcall **v18)(int); // r11
  char *i; // r8
  int v20; // r4
  bool v21; // zf
  size_t v22; // r0
  size_t v23; // r5
  char *v24; // r2
  size_t v25; // r0
  int v26; // r1
  bool v27; // zf
  char *v28; // r7
  unsigned int v29; // r10
  size_t v30; // r0
  size_t v31; // r11
  size_t v32; // r2
  char *v33; // r7
  int v34; // r1
  bool v35; // zf
  size_t v36; // r8
  int v37; // r5
  const char *v38; // r3
  bool v39; // cc
  unsigned int v40; // r4
  void (__fastcall **v41)(int); // r6
  const char *v42; // r11
  char *v43; // r1
  int v44; // r5
  int v45; // r3
  bool v46; // zf
  int v47; // r0
  const char *v48; // r5
  int v49; // r0
  bool v50; // zf
  const char *v51; // r0
  char *v52; // r5
  size_t v53; // r6
  const char *v54; // r6
  int v55; // r0
  int v56; // r0
  const char *v57; // r5
  bool v58; // zf
  int v59; // r0
  int v60; // r0
  size_t v61; // r4
  char *v62; // r0
  int v63; // r0
  const char *v64; // r5
  int v65; // r0
  bool v66; // zf
  size_t v67; // r1
  char *v68; // r5
  size_t v69; // r10
  _BYTE *v70; // r0
  const char *v71; // r6
  bool v72; // zf
  int v73; // r0
  const char *v74; // r0
  int is_ipnum; // r0
  int v76; // r1
  Curl_easy *v77; // r4
  size_t v78; // r0
  int v79; // r0
  size_t v80; // r0
  int v81; // r0
  int v82; // r0
  bool v83; // zf
  size_t v84; // r7
  const char *v85; // r9
  int v86; // r4
  int v87; // r0
  int v88; // r0
  char *v89; // r0
  char *v90; // r0
  char *v91; // r0
  const char *v92; // r6
  int v93; // r11
  int v94; // r7
  int (__fastcall **v95)(const char *); // r5
  const char *v96; // r0
  int v97; // r0
  bool v98; // cf
  int v99; // r1
  int v100; // r0
  const char *v101; // r0
  char *v102; // r4
  char *v103; // r6
  int (__fastcall **v104)(const char *); // r10
  size_t v105; // r5
  size_t v106; // r0
  int v107; // r0
  int (__fastcall **v108)(const char *); // r4
  int v109; // r5
  int v110; // r0
  _BOOL4 v111; // r1
  int v112; // r0
  char *v113; // r0
  int v114; // r0
  bool v115; // zf
  void (__fastcall **v116)(int); // r4
  const char *v118; // r5
  void (__fastcall **v119)(int); // r5
  int v120; // r0
  int v121; // r4
  char *v122; // r0
  char *v123; // r0
  int v124; // r4
  void *v125; // r0
  const char *v126; // r0
  char *v127; // r5
  size_t v128; // r6
  size_t v129; // r0
  int v130; // r0
  int v131; // r7
  int v132; // r0
  int v133; // r8
  time_t v134; // r9
  _DWORD *v135; // r11
  int v136; // r1
  _DWORD *v137; // r4
  int *v138; // r0
  _DWORD *v139; // r9
  _DWORD *v140; // r11
  char v141; // r10
  int *v142; // r5
  int v143; // r0
  int v144; // r1
  const char *v145; // r6
  int v146; // r8
  bool v147; // zf
  bool v148; // zf
  char *v149; // r0
  size_t v150; // r2
  int v151; // r0
  int v152; // r1
  char v153; // r0
  char v154; // r0
  int v155; // r0
  int v156; // r1
  bool v157; // zf
  void (__fastcall **v158)(int); // r4
  const char *v159; // r0
  bool v160; // zf
  void (__fastcall **v161)(int); // r6
  int v162; // r2
  int v163; // r0
  void (__fastcall **v164)(_DWORD *); // r8
  int v165; // r2
  int v166; // r3
  int v167; // r4
  int v168; // r6
  int v169; // r7
  int v170; // r2
  int v171; // r3
  int v172; // r4
  int v173; // r6
  int v174; // r7
  bool v175; // zf
  __int64 v176; // r0
  int v177; // r7
  unsigned int v178; // t1
  _DWORD *v179; // r5
  Cookie *v180; // r4
  Cookie **p_next; // r7
  Cookie *v182; // r6
  curl_off_t expires; // r0
  int v184; // r2
  int v185; // r3
  int v186; // r1
  const char *v187; // r2
  time_t v188; // [sp+1Ch] [bp-D4h]
  __int64 v189; // [sp+20h] [bp-D0h]
  int v190; // [sp+28h] [bp-C8h]
  char v191; // [sp+2Ch] [bp-C4h]
  int v193; // [sp+38h] [bp-B8h]
  Curl_easy *v194; // [sp+3Ch] [bp-B4h]
  int v195; // [sp+40h] [bp-B0h]
  int v196; // [sp+40h] [bp-B0h]
  size_t v197; // [sp+40h] [bp-B0h]
  int v198; // [sp+44h] [bp-ACh]
  CookieInfo *v199; // [sp+48h] [bp-A8h]
  char *dest[41]; // [sp+4Ch] [bp-A4h] BYREF

  v12 = 0;
  v13 = time(0u);
  if ( data->req.setcookies > 0x31u )
    return (Cookie *)v12;
  v14 = ((int (__fastcall *)(int, int))*Curl_ccalloc)(1, 48);
  if ( !v14 )
    return (Cookie *)v12;
  j = (char *)lineptr;
  v16 = v14;
  v193 = noexpire;
  v194 = data;
  v198 = v14;
  v199 = c;
  if ( !httpheader )
  {
    dest[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      j = (char *)(lineptr + 0xA);
      *(_BYTE *)(v16 + 35) = 1;
    }
    if ( *j == 35 )
      goto LABEL_9;
    v89 = strchr(j, 13);
    if ( v89 )
      *v89 = 0;
    v90 = strchr(j, 10);
    if ( v90 )
      *v90 = 0;
    v91 = strtok_r(j, "\t", dest);
    if ( !v91 )
      goto LABEL_217;
    v92 = v91;
    v93 = 0;
    v94 = 0;
    v196 = v16 + 0x18;
    v95 = (int (__fastcall **)(const char *))Curl_cstrdup;
    while ( 1 )
    {
      switch ( v93 )
      {
        case 0:
          v96 = v92 + 1;
          if ( *v92 != 46 )
            v96 = v92;
          v97 = (*v95)(v96);
          v98 = v97 == 0;
          v99 = -v97;
          *(_DWORD *)(v16 + 20) = v97;
          v93 = 0;
          goto LABEL_194;
        case 1:
          v93 = 1;
          *(_BYTE *)(v16 + 32) = curl_strequal(v92, "TRUE") != 0;
          goto LABEL_209;
        case 2:
          if ( !strcmp("TRUE", v92) || !strcmp("FALSE", v92) )
          {
            v108 = v95;
            v109 = (*v95)("/");
            *(_DWORD *)(v16 + 12) = v109;
            v110 = (*v108)("/");
            *(_DWORD *)(v16 + 16) = v110;
            v111 = v109 == 0;
            v95 = v108;
            v94 |= v111 || v110 == 0;
LABEL_196:
            *(_BYTE *)(v16 + 33) = 0;
            v93 = 3;
            if ( curl_strequal(v92, "TRUE") )
            {
              if ( secure || v199->running )
              {
                *(_BYTE *)(v16 + 33) = 1;
                goto LABEL_209;
              }
LABEL_200:
              v94 = 1;
              goto LABEL_209;
            }
            goto LABEL_209;
          }
          v100 = (*v95)(v92);
          v93 = 2;
          *(_DWORD *)(v16 + 12) = v100;
          if ( !v100 )
            goto LABEL_200;
          v101 = (const char *)((int (*)(void))*v95)();
          v102 = 0;
          if ( !v101 )
            goto LABEL_208;
          v103 = (char *)v101;
          v104 = v95;
          v105 = strlen(v101);
          if ( *v103 == 34 )
            memmove(v103, v103 + 1, v105--);
          if ( v105 )
          {
            v106 = v105 - 1;
            if ( v103[v105 - 1] == 34 )
            {
              --v105;
              v103[v106] = 0;
            }
            if ( *v103 != 47 )
            {
LABEL_206:
              ((void (__fastcall *)(char *))*Curl_cfree)(v103);
              v112 = Curl_memdup("/", 2);
              v95 = v104;
              if ( v112 )
              {
                v102 = (char *)v112;
                *(_BYTE *)(v112 + 1) = 0;
              }
              goto LABEL_208;
            }
            if ( v105 && v103[v105 - 1] == 47 )
              v103[v105 - 1] = 0;
          }
          else if ( *v103 != 47 )
          {
            goto LABEL_206;
          }
          v102 = v103;
          v95 = v104;
LABEL_208:
          v16 = v198;
          v94 |= v102 == 0;
          *(_DWORD *)(v198 + 16) = v102;
LABEL_209:
          v113 = strtok_r(0u, "\t", dest);
          ++v93;
          if ( !v113 || (v92 = v113, (v94 & 1) != 0) )
          {
            if ( v93 == 6 )
            {
              v114 = (*v95)((const char *)&L_str_22);
              v93 = 7;
              *(_DWORD *)(v16 + 8) = v114;
              LOBYTE(v94) = v94 | (v114 == 0);
              if ( !v114 )
                v93 = 6;
            }
            v115 = (v94 & 1) == 0;
            if ( (v94 & 1) == 0 )
              v115 = v93 == 7;
            if ( !v115 )
            {
LABEL_217:
              v116 = (void (__fastcall **)(int))Curl_cfree;
              ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v16 + 20));
              (*v116)(*(_DWORD *)(v16 + 12));
              (*v116)(*(_DWORD *)(v16 + 16));
              (*v116)(*(_DWORD *)(v16 + 4));
              (*v116)(*(_DWORD *)(v16 + 8));
              (*v116)(v16);
              return 0;
            }
LABEL_257:
            v12 = 0;
            if ( (*(_BYTE *)(v16 + 40) & 1) != 0 && !*(_BYTE *)(v16 + 33) )
              goto LABEL_318;
            if ( (*(_BYTE *)(v16 + 40) & 2) != 0 )
            {
              v159 = (const char *)*(unsigned __int8 *)(v16 + 33);
              v160 = v159 == 0;
              if ( *(_BYTE *)(v16 + 33) )
              {
                v159 = *(const char **)(v16 + 12);
                v160 = v159 == 0;
              }
              if ( v160 || strcmp(v159, "/") || *(_BYTE *)(v16 + 32) )
                goto LABEL_318;
            }
            v131 = (int)v199;
            if ( !v199->running && v199->newsession && !*(_QWORD *)(v16 + 24) )
            {
LABEL_318:
              v161 = (void (__fastcall **)(int))Curl_cfree;
              ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v16 + 20));
              (*v161)(*(_DWORD *)(v16 + 12));
              (*v161)(*(_DWORD *)(v16 + 16));
              (*v161)(*(_DWORD *)(v16 + 4));
              (*v161)(*(_DWORD *)(v16 + 8));
              (*v161)(v16);
              return (Cookie *)v12;
            }
            *(_BYTE *)(v16 + 34) = v199->running;
            v132 = *(_DWORD *)(v131 + 268) + 1;
            *(_DWORD *)(v131 + 268) = v132;
            *(_DWORD *)(v16 + 36) = v132;
            if ( !v193 )
            {
              v133 = 0;
              v134 = time(0u);
              v135 = (_DWORD *)(v131 + 256);
              v136 = *(_DWORD *)(v131 + 260);
              if ( (v134 >> 0x1F) - (v136 + !__CFSHR__(v134, 0x1F)) < 0 == __OFSUB__(
                                                                             v134 >> 0x1F,
                                                                             v136,
                                                                             __CFSHR__(v134, 0x1F))
                || !(~*(_DWORD *)(v131 + 256) | v136 ^ 0x7FFFFFFF) )
              {
                *v135 = -1;
                *(_DWORD *)(v131 + 260) = 0x7FFFFFFF;
                v179 = (_DWORD *)Curl_cfree;
                do
                {
                  v180 = *(Cookie **)(v131 + 4 * v133);
                  if ( v180 )
                  {
                    p_next = 0;
                    do
                    {
                      while ( 1 )
                      {
                        v182 = v180;
                        v180 = v180->next;
                        expires = v182->expires;
                        v184 = expires | HIDWORD(expires);
                        if ( !expires )
                          break;
                        v185 = (unsigned __int64)(expires - v134) >> 32;
                        if ( expires >= v134 )
                          break;
                        v186 = (int)v199;
                        if ( p_next )
                          *p_next = v180;
                        else
                          v199->cookies[v133] = v180;
                        --*(_DWORD *)(v186 + 264);
                        ((void (__fastcall *)(char *, _DWORD, int, int))*v179)(v182->domain, *v179, v184, v185);
                        ((void (__fastcall *)(char *))*v179)(v182->path);
                        ((void (__fastcall *)(char *))*v179)(v182->spath);
                        ((void (__fastcall *)(char *))*v179)(v182->name);
                        ((void (__fastcall *)(char *))*v179)(v182->value);
                        ((void (__fastcall *)(Cookie *))*v179)(v182);
                        if ( !v180 )
                          goto LABEL_343;
                      }
                      if ( expires && expires < *(_QWORD *)v135 )
                        *(_QWORD *)v135 = expires;
                      p_next = &v182->next;
                    }
                    while ( v180 );
                  }
LABEL_343:
                  v131 = (int)v199;
                  ++v133;
                }
                while ( v133 != 63 );
              }
            }
            v137 = (_DWORD *)v198;
            v197 = cookiehash(*(const char *const *)(v198 + 20));
            v138 = *(int **)(v131 + 4 * v197);
            if ( !v138 )
            {
              v142 = 0;
              v141 = 0;
              goto LABEL_325;
            }
            v139 = 0;
            v140 = 0;
            v141 = 0;
            while ( 2 )
            {
              v142 = v138;
              if ( curl_strequal(v138[1], *(_DWORD *)(v198 + 4)) )
              {
                v143 = v142[5];
                v144 = *(_DWORD *)(v198 + 20);
                if ( v143 )
                {
                  if ( v144 && curl_strequal(v143, v144) )
                  {
LABEL_274:
                    v145 = (const char *)v142[4];
                    if ( v145 )
                    {
                      v146 = *(_DWORD *)(v198 + 16);
                      v147 = v146 == 0;
                      if ( v146 )
                        v147 = *((_BYTE *)v142 + 33) == 0;
                      if ( !v147 )
                      {
                        v148 = *(_BYTE *)(v198 + 33) == 0;
                        if ( !*(_BYTE *)(v198 + 33) )
                          v148 = secure == 0;
                        if ( v148 )
                        {
                          v149 = strchr(v145 + 1, 47);
                          v150 = v149 ? v149 - v145 : strlen(v145);
                          if ( curl_strnequal(v145, v146, v150) )
                          {
                            v157 = v194 == 0;
                            if ( v194 )
                              v157 = (*((_BYTE *)&v194->set + 1338) & 0x10) == 0;
                            if ( !v157 )
                              Curl_infof(
                                v194,
                                "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                                *(const char **)(v198 + 4),
                                *(const char **)(v198 + 20));
LABEL_313:
                            v158 = (void (__fastcall **)(int))Curl_cfree;
                            ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v198 + 20));
                            (*v158)(*(_DWORD *)(v198 + 12));
                            (*v158)(*(_DWORD *)(v198 + 16));
                            (*v158)(*(_DWORD *)(v198 + 4));
                            (*v158)(*(_DWORD *)(v198 + 8));
                            (*v158)(v198);
                            return 0;
                          }
                        }
                      }
                    }
                  }
                }
                else if ( !v144 )
                {
                  goto LABEL_274;
                }
              }
              if ( v139 )
              {
LABEL_269:
                v138 = (int *)*v142;
                if ( !*v142 )
                {
                  if ( v139 )
                  {
                    v162 = v140[9];
                    v163 = v140[1];
                    *v139 = *v140;
                    v139[9] = v162;
                    v164 = (void (__fastcall **)(_DWORD *))Curl_cfree;
                    ((void (__fastcall *)(int))*Curl_cfree)(v163);
                    (*v164)((_DWORD *)v140[2]);
                    (*v164)((_DWORD *)v140[5]);
                    (*v164)((_DWORD *)v140[3]);
                    (*v164)((_DWORD *)v140[4]);
                    v165 = v139[1];
                    v166 = v139[2];
                    v167 = v139[3];
                    v168 = v139[4];
                    v169 = v139[5];
                    *v140 = *v139;
                    v140[1] = v165;
                    v140[2] = v166;
                    v140[3] = v167;
                    v140[4] = v168;
                    v140[5] = v169;
                    v170 = v139[7];
                    v171 = v139[8];
                    v172 = v139[9];
                    v173 = v139[10];
                    v174 = v139[11];
                    v140[6] = v139[6];
                    v140[7] = v170;
                    v140[8] = v171;
                    v140[9] = v172;
                    v140[10] = v173;
                    v140[11] = v174;
                    v131 = (int)v199;
                    (*v164)(v139);
                    v137 = v140;
                  }
LABEL_325:
                  if ( !v194 )
                    goto LABEL_330;
                  v175 = *(_BYTE *)(v131 + 272) == 0;
                  if ( *(_BYTE *)(v131 + 272) )
                    v175 = (*((_BYTE *)&v194->set + 1338) & 0x10) == 0;
                  if ( v175 )
                  {
LABEL_330:
                    if ( (v141 & 1) != 0 )
                      goto LABEL_335;
                  }
                  else
                  {
                    v131 = (int)v199;
                    v187 = "Added";
                    if ( (v141 & 1) != 0 )
                      v187 = "Replaced";
                    Curl_infof(
                      v194,
                      "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
                      v187,
                      (const char *)v137[1],
                      (const char *)v137[2],
                      (const char *)v137[5],
                      (const char *)v137[3],
                      *((_QWORD *)v137 + 3));
                    if ( (v141 & 1) != 0 )
                    {
LABEL_335:
                      v176 = *((_QWORD *)v137 + 3);
                      if ( v176 )
                      {
                        v178 = *(_DWORD *)(v131 + 256);
                        v177 = v131 + 256;
                        if ( v176 < __SPAIR64__(*(_DWORD *)(v177 + 4), v178) )
                          *(_QWORD *)v177 = v176;
                      }
                      return (Cookie *)v137;
                    }
                  }
                  if ( v142 )
                    *v142 = (int)v137;
                  else
                    *(_DWORD *)(v131 + 4 * v197) = v137;
                  ++*(_DWORD *)(v131 + 264);
                  goto LABEL_335;
                }
                continue;
              }
              break;
            }
            if ( curl_strequal(v142[1], *(_DWORD *)(v198 + 4)) )
            {
              v151 = v142[5];
              v152 = *(_DWORD *)(v198 + 20);
              if ( v151 )
              {
                if ( v152 && curl_strequal(v151, v152) )
                {
                  v153 = *(_BYTE *)(v198 + 32)
                       - *((_BYTE *)v142 + 32)
                       + (*((unsigned __int8 *)v142 + 32) == *(unsigned __int8 *)(v198 + 32))
                       + *((_BYTE *)v142 + 32)
                       - *(_BYTE *)(v198 + 32);
                  goto LABEL_292;
                }
                v139 = 0;
                if ( (v141 & 1) == 0 )
                {
                  v141 = 0;
                  goto LABEL_269;
                }
LABEL_293:
                v155 = v142[4];
                v156 = *(_DWORD *)(v198 + 16);
                if ( !v155 )
                {
                  v141 = 0;
                  v139 = 0;
                  if ( v156 )
                    goto LABEL_269;
                  goto LABEL_302;
                }
                if ( v156 )
                {
                  if ( curl_strequal(v155, v156) )
                  {
                    v141 = 0;
                    v139 = 0;
                    if ( (v142[4] != 0) == (*(_DWORD *)(v198 + 16) == 0) )
                      goto LABEL_269;
                    goto LABEL_302;
                  }
                }
                else if ( *(_DWORD *)(v198 + 16) )
                {
LABEL_302:
                  v141 = 1;
                  if ( *(_BYTE *)(v198 + 34) )
                  {
                    v140 = v142;
                    v139 = (_DWORD *)v198;
                  }
                  else
                  {
                    v140 = v142;
                    v139 = (_DWORD *)v198;
                    if ( *((_BYTE *)v142 + 34) )
                      goto LABEL_313;
                  }
                  goto LABEL_269;
                }
                v141 = 0;
                v139 = 0;
                goto LABEL_269;
              }
              v153 = v152 == 0;
LABEL_292:
              v154 = v141 | v153;
              v141 = 0;
              if ( (v154 & 1) != 0 )
                goto LABEL_293;
            }
            v139 = 0;
            goto LABEL_269;
          }
          break;
        case 3:
          goto LABEL_196;
        case 4:
          v93 = 4;
          v94 |= curlx_strtoofft(v92, 0, 10, v196) != 0;
          goto LABEL_209;
        case 5:
          v107 = (*v95)(v92);
          v93 = 5;
          *(_DWORD *)(v16 + 4) = v107;
          if ( !v107 )
            goto LABEL_200;
          if ( curl_strnequal("__Secure-", v107, 9) )
          {
            *(_BYTE *)(v16 + 40) |= 1u;
          }
          else if ( curl_strnequal("__Host-", *(_DWORD *)(v16 + 4), 7) )
          {
            *(_BYTE *)(v16 + 40) |= 2u;
          }
          goto LABEL_209;
        case 6:
          v97 = (*v95)(v92);
          v98 = v97 == 0;
          v99 = -v97;
          *(_DWORD *)(v16 + 8) = v97;
          v93 = 6;
LABEL_194:
          v94 |= v99 + v98 + v97;
          goto LABEL_209;
        default:
          goto LABEL_209;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_9:
    ((void (__fastcall *)(int))*Curl_cfree)(v16);
    return 0;
  }
  v188 = v13;
  v17 = 4094;
  HIDWORD(v189) = 0x7FFFFFFF - (v13 >> 0x1F);
  LODWORD(v189) = ~v13;
  v190 = v16 + 0x18;
  v18 = (void (__fastcall **)(int))Curl_cfree;
  v191 = 0;
  while ( 1 )
  {
    for ( i = j + 1; ; ++i )
    {
      v20 = (unsigned __int8)*j;
      v21 = v20 == 32;
      if ( v20 != 32 )
        v21 = v20 == 9;
      if ( !v21 )
        break;
      ++j;
    }
    v22 = strcspn(j, ";\t\r\n=");
    if ( !v22 )
    {
      v28 = j;
      goto LABEL_138;
    }
    v23 = v22;
    v24 = &j[v22];
    v25 = v22 - 1;
    do
    {
      v26 = (unsigned __int8)j[v25];
      v27 = v26 == 32;
      if ( v26 != 32 )
        v27 = v26 == 9;
      if ( !v27 )
      {
        v29 = v25 + 1;
        goto LABEL_26;
      }
      --v25;
    }
    while ( v25 != -1 );
    v29 = 0;
LABEL_26:
    if ( *v24 == 61 )
      break;
    v38 = 0;
    v37 = 0;
    v33 = 0;
    v195 = (int)v24;
LABEL_38:
    v39 = v29 > v17;
    if ( v29 <= v17 )
      v39 = (unsigned int)v38 > v17;
    if ( v39 || (unsigned int)&v38[v29] > 0x1000 )
    {
      v118 = v38;
      (*v18)(*(_DWORD *)(v198 + 20));
      (*v18)(*(_DWORD *)(v198 + 12));
      (*v18)(*(_DWORD *)(v198 + 16));
      (*v18)(*(_DWORD *)(v198 + 4));
      (*v18)(*(_DWORD *)(v198 + 8));
      (*v18)(v198);
      v12 = 0;
      if ( (*((_BYTE *)&v194->set + 1338) & 0x10) != 0 )
        Curl_infof(v194, "oversized cookie dropped, name/val %zu + %zu bytes", v29, (size_t)v118);
      return (Cookie *)v12;
    }
    if ( v20 == 95 && v29 >= 7 && j[1] == 95 )
    {
      v40 = v17;
      v41 = v18;
      v42 = v38;
      if ( curl_strnequal("__Secure-", j, 9) )
      {
        v38 = v42;
        v18 = v41;
        v17 = v40;
        *(_BYTE *)(v198 + 40) |= 1u;
      }
      else
      {
        v47 = curl_strnequal("__Host-", j, 7);
        v38 = v42;
        v18 = v41;
        v17 = v40;
        if ( v47 )
          *(_BYTE *)(v198 + 40) |= 2u;
      }
    }
    if ( !*(_DWORD *)(v198 + 4) )
    {
      if ( !v37 )
        goto LABEL_223;
      v54 = v38;
      (*v18)(0);
      v55 = Curl_memdup(j, v29 + 1);
      *(_DWORD *)(v198 + 4) = v55;
      if ( v55 )
        *(_BYTE *)(v55 + v29) = 0;
      (*v18)(*(_DWORD *)(v198 + 8));
      v56 = Curl_memdup(v33, v54 + 1);
      *(_DWORD *)(v198 + 8) = v56;
      if ( v56 )
        v54[v56] = 0;
      v57 = *(const char **)(v198 + 4);
      v58 = v57 == 0;
      if ( v57 )
      {
        v54 = *(const char **)(v198 + 8);
        v58 = v54 == 0;
      }
      if ( v58 )
        goto LABEL_223;
      v59 = (unsigned __int8)v54[strcspn(v54, invalid_octets_badoctets)];
      v28 = (char *)v195;
      v17 = 4094;
      if ( v59 || v57[strcspn(v57, invalid_octets_badoctets)] )
      {
        if ( (*((_BYTE *)&v194->set + 1338) & 0x10) != 0 )
          Curl_infof(v194, "invalid octets in name/value, cookie dropped");
LABEL_223:
        (*v18)(*(_DWORD *)(v198 + 20));
        (*v18)(*(_DWORD *)(v198 + 12));
        (*v18)(*(_DWORD *)(v198 + 16));
        (*v18)(*(_DWORD *)(v198 + 4));
        (*v18)(*(_DWORD *)(v198 + 8));
        (*v18)(v198);
        return 0;
      }
      goto LABEL_138;
    }
    if ( !v38 )
    {
      if ( v29 == 8 )
      {
        v73 = curl_strnequal("httponly", j, 8);
        v38 = 0;
        if ( v73 )
        {
          *(_BYTE *)(v198 + 35) = 1;
LABEL_137:
          v28 = (char *)v195;
          goto LABEL_138;
        }
      }
      else if ( v29 == 6 )
      {
        v60 = curl_strnequal("secure", j, 6);
        v38 = 0;
        if ( v60 )
        {
          if ( !secure && v199->running )
            goto LABEL_223;
          *(_BYTE *)(v198 + 33) = 1;
          goto LABEL_136;
        }
      }
      if ( !v37 )
        goto LABEL_137;
    }
    if ( v29 != 7 )
    {
      if ( v29 != 6 )
      {
        if ( v29 != 4 )
          goto LABEL_137;
        v48 = v38;
        if ( !curl_strnequal("path", j, 4) )
          goto LABEL_137;
        (*v18)(*(_DWORD *)(v198 + 12));
        v49 = Curl_memdup(v33, v48 + 1);
        v50 = v49 == 0;
        *(_DWORD *)(v198 + 12) = v49;
        if ( v49 )
        {
          v48[v49] = 0;
          v50 = *(_DWORD *)(v198 + 12) == 0;
        }
        if ( v50 )
          goto LABEL_223;
        (*v18)(*(_DWORD *)(v198 + 16));
        v51 = (const char *)((int (__fastcall *)(_DWORD))*Curl_cstrdup)(*(_DWORD *)(v198 + 12));
        if ( !v51 )
          goto LABEL_249;
        v52 = (char *)v51;
        v53 = strlen(v51);
        if ( *v52 == 34 )
          memmove(v52, v52 + 1, v53--);
        if ( v53 )
        {
          if ( v52[v53 - 1] == 34 )
            v52[--v53] = 0;
          if ( *v52 == 47 )
          {
            if ( v53 && v52[v53 - 1] == 47 )
              v52[v53 - 1] = 0;
            goto LABEL_135;
          }
        }
        else if ( *v52 == 47 )
        {
          goto LABEL_135;
        }
        (*v18)((int)v52);
        v81 = Curl_memdup("/", 2);
        if ( !v81 )
        {
LABEL_249:
          *(_DWORD *)(v198 + 16) = 0;
          goto LABEL_223;
        }
        v52 = (char *)v81;
        *(_BYTE *)(v81 + 1) = 0;
LABEL_135:
        *(_DWORD *)(v198 + 16) = v52;
LABEL_136:
        v17 = 4094;
        goto LABEL_137;
      }
      v64 = v38;
      v65 = curl_strnequal("domain", j, 6);
      v66 = v64 == 0;
      if ( v64 )
        v66 = v65 == 0;
      if ( v66 )
        goto LABEL_137;
      v67 = (size_t)v64;
      v68 = v33 + 1;
      if ( *v33 == 46 )
        --v67;
      else
        v68 = v33;
      v69 = v67;
      if ( v67 != 9 || !curl_strnequal(v68, "localhost", 9) )
      {
        v70 = memchr(v68, 46, v69);
        if ( !v70 || (unsigned int)(&v68[v69] - v70) <= 1 )
        {
          v71 = ":";
          v72 = Curl_host_is_ipnum(":") == 0;
          goto LABEL_119;
        }
      }
      v71 = domain;
      v74 = domain;
      if ( !domain )
        v74 = v68;
      is_ipnum = Curl_host_is_ipnum(v74);
      v76 = is_ipnum;
      if ( domain )
      {
        v72 = is_ipnum == 0;
LABEL_119:
        v77 = v194;
        if ( !v72 )
        {
          v28 = (char *)v195;
          if ( strncmp(v68, v71, v69) )
            goto LABEL_159;
          v78 = strlen(v71);
          v76 = 1;
          if ( v69 != v78 )
            goto LABEL_159;
          goto LABEL_148;
        }
        v80 = strlen(v71);
        if ( v80 < v69 )
        {
          v28 = (char *)v195;
LABEL_159:
          domain = v71;
          v191 = 1;
          if ( (*((_BYTE *)&v194->set + 1338) & 0x10) != 0 )
            Curl_infof(v77, "skipped cookie with bad tailmatch domain: %s", v68);
          v17 = 4094;
          goto LABEL_138;
        }
        v84 = v80;
        v85 = &v71[v80 - v69];
        if ( !curl_strnequal(v68, v85, v69) )
        {
          v77 = v194;
          v28 = (char *)v195;
          goto LABEL_159;
        }
        if ( v84 == v69 )
        {
          v76 = 0;
        }
        else
        {
          v77 = v194;
          v28 = (char *)v195;
          v76 = 0;
          if ( *(v85 - 1) != 46 )
            goto LABEL_159;
        }
      }
      else
      {
        v71 = 0;
      }
LABEL_148:
      v86 = v76;
      domain = v71;
      (*v18)(*(_DWORD *)(v198 + 20));
      v87 = Curl_memdup(v68, v69 + 1);
      *(_DWORD *)(v198 + 20) = v87;
      if ( !v87 )
        goto LABEL_223;
      *(_BYTE *)(v87 + v69) = 0;
      v88 = *(_DWORD *)(v198 + 20);
      if ( v86 | (v88 == 0) )
      {
        if ( !v88 )
          goto LABEL_223;
        v191 |= v88 == 0;
      }
      else
      {
        *(_BYTE *)(v198 + 32) = 1;
      }
      goto LABEL_136;
    }
    v61 = (size_t)v38;
    if ( curl_strnequal("version", j, 7) )
      goto LABEL_137;
    if ( !curl_strnequal("max-age", j, 7) )
    {
      if ( curl_strnequal("expires", j, 7) && v61 <= 0x7F && !*(_QWORD *)v190 )
      {
        memcpy(dest, v33, v61);
        *((_BYTE *)dest + v61) = 0;
        v79 = Curl_getdate_capped(dest);
        *(_QWORD *)v190 = v79;
        if ( v79 )
        {
          if ( v79 <= -1 )
          {
            *(_DWORD *)v190 = 0;
            *(_DWORD *)(v190 + 4) = 0;
          }
        }
        else
        {
          *(_DWORD *)v190 = 1;
          *(_DWORD *)(v190 + 4) = 0;
        }
      }
      goto LABEL_137;
    }
    v62 = v33 + 1;
    if ( *v33 != 34 )
      v62 = v33;
    v63 = curlx_strtoofft(v62, 0, 10, v190);
    if ( v63 )
    {
      v28 = (char *)v195;
      if ( v63 != 2 )
      {
        if ( v63 != 1 )
          goto LABEL_138;
LABEL_155:
        *(_DWORD *)v190 = -1;
        *(_DWORD *)(v190 + 4) = 0x7FFFFFFF;
        goto LABEL_138;
      }
LABEL_156:
      *(_DWORD *)v190 = 1;
      *(_DWORD *)(v190 + 4) = 0;
      goto LABEL_138;
    }
    v28 = (char *)v195;
    if ( !*(_QWORD *)v190 )
      goto LABEL_156;
    if ( v189 < *(_QWORD *)v190 )
      goto LABEL_155;
    *(_QWORD *)v190 += v188;
LABEL_138:
    for ( j = v28 + 1; ; ++j )
    {
      v82 = (unsigned __int8)*(j - 1);
      v83 = v82 == 32;
      if ( v82 != 32 )
        v83 = v82 == 9;
      if ( !v83 )
        break;
    }
    if ( v82 != 59 )
    {
      if ( (v191 & 1) != 0 )
        goto LABEL_223;
      if ( domain )
      {
        if ( !*(_DWORD *)(v198 + 20) )
        {
          v120 = ((int (__fastcall *)(const char *))*Curl_cstrdup)(domain);
          *(_DWORD *)(v198 + 20) = v120;
          if ( !v120 )
            goto LABEL_223;
        }
      }
      v121 = v198;
      if ( !path || *(_DWORD *)(v198 + 12) )
        goto LABEL_255;
      v122 = strchr(path, 63);
      v123 = v122 ? (char *)Curl_memrchr(path, 47, v122 - path) : strrchr(path, 47);
      if ( !v123 )
        goto LABEL_255;
      v124 = v123 - path;
      v125 = (void *)((int (__fastcall *)(int))*Curl_cmalloc)(v123 - path + 2);
      *(_DWORD *)(v198 + 12) = v125;
      if ( !v125 )
        goto LABEL_223;
      memcpy(v125, path, v124 + 1);
      *(_BYTE *)(*(_DWORD *)(v198 + 12) + v124 + 1) = 0;
      v126 = (const char *)((int (__fastcall *)(_DWORD))*Curl_cstrdup)(*(_DWORD *)(v198 + 12));
      if ( v126 )
      {
        v127 = (char *)v126;
        v128 = strlen(v126);
        if ( *v127 == 34 )
          memmove(v127, v127 + 1, v128--);
        if ( v128 )
        {
          v129 = v128 - 1;
          if ( v127[v128 - 1] == 34 )
          {
            --v128;
            v127[v129] = 0;
          }
          if ( *v127 == 47 )
          {
            if ( v128 )
            {
              v121 = v198;
              if ( v127[v128 - 1] == 47 )
                v127[v128 - 1] = 0;
              goto LABEL_254;
            }
            goto LABEL_251;
          }
        }
        else if ( *v127 == 47 )
        {
LABEL_251:
          v121 = v198;
LABEL_254:
          *(_DWORD *)(v121 + 16) = v127;
LABEL_255:
          if ( !*(_DWORD *)(v121 + 4) )
            goto LABEL_223;
          v16 = v198;
          ++v194->req.setcookies;
          goto LABEL_257;
        }
        (*v18)((int)v127);
        v130 = Curl_memdup("/", 2);
        if ( v130 )
        {
          v121 = v198;
          v127 = (char *)v130;
          *(_BYTE *)(v130 + 1) = 0;
          goto LABEL_254;
        }
      }
      *(_DWORD *)(v198 + 16) = 0;
      goto LABEL_223;
    }
  }
  v30 = strcspn(&j[v23 + 1], ";\r\n");
  v31 = v23 + v30;
  v32 = 0;
  if ( v30 )
  {
    v33 = &i[v31];
    while ( 1 )
    {
      v34 = (unsigned __int8)*(v33 - 1);
      v35 = v34 == 32;
      if ( v34 != 32 )
        v35 = v34 == 9;
      if ( !v35 )
        break;
      --v30;
      --v33;
      if ( !v30 )
        goto LABEL_34;
    }
    v43 = &i[v23];
    v44 = 0;
    v17 = 4094;
    do
    {
      v45 = (unsigned __int8)v43[v44];
      v46 = v45 == 32;
      if ( v45 != 32 )
        v46 = v45 == 9;
      if ( !v46 )
      {
        v32 = v30 - v44;
        v33 = &v43[v44];
        goto LABEL_35;
      }
      ++v44;
    }
    while ( v30 != v44 );
    v32 = 0;
  }
  else
  {
LABEL_34:
    v33 = &j[v23 + 1];
    v17 = 4094;
  }
LABEL_35:
  v36 = v32;
  if ( !memchr(v33, 9, v32) )
  {
    v37 = 1;
    v38 = (const char *)v36;
    v195 = (int)&j[v31 + 1];
    v18 = (void (__fastcall **)(int))Curl_cfree;
    goto LABEL_38;
  }
  v119 = (void (__fastcall **)(int))Curl_cfree;
  ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v198 + 20));
  (*v119)(*(_DWORD *)(v198 + 12));
  (*v119)(*(_DWORD *)(v198 + 16));
  (*v119)(*(_DWORD *)(v198 + 4));
  (*v119)(*(_DWORD *)(v198 + 8));
  (*v119)(v198);
  v12 = 0;
  if ( (*((_BYTE *)&v194->set + 1338) & 0x10) != 0 )
    Curl_infof(v194, "cookie contains TAB, dropping");
  return (Cookie *)v12;
}
