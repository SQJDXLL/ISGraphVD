Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  time_t v16; // x0
  __int64 v17; // x28
  time_t v18; // x26
  __int64 v19; // x0
  __int64 v20; // x19
  char *v21; // x0
  char *v22; // x0
  char *v23; // x0
  const char *v24; // x20
  int v25; // w22
  int v26; // w28
  const char *v27; // x0
  __int64 v28; // x0
  __int64 v29; // x0
  const char *v30; // x0
  char *v31; // x20
  size_t v32; // x22
  size_t v33; // x8
  __int64 v34; // x0
  char v35; // w8
  __int64 v36; // x0
  __int64 v37; // x0
  int v38; // w22
  __int64 v39; // x0
  char *v40; // x0
  __int64 v41; // x0
  Curl_easy *v42; // x20
  bool v43; // w23
  char v44; // w8
  const char *v45; // x25
  const char *i; // x27
  int v47; // w24
  size_t v48; // x0
  size_t v49; // x23
  unsigned __int64 v50; // x28
  int v51; // w8
  const char *v52; // x20
  size_t v53; // x0
  size_t v54; // x22
  const char *v55; // x8
  int v56; // w9
  __int64 k; // x9
  int v58; // w11
  size_t v59; // x23
  int v60; // w25
  char v61; // w8
  __int64 v62; // x0
  const char *v63; // x0
  char *v64; // x20
  size_t v65; // x23
  size_t v66; // x8
  const char *v67; // x0
  const char *v68; // x20
  int v69; // w8
  const char *v70; // x0
  int v71; // w0
  int v72; // w0
  size_t v73; // x23
  _BYTE *v74; // x0
  const char *v75; // x25
  int v76; // w0
  Curl_easy *v77; // x24
  char is_ipnum; // w27
  __int64 v79; // x0
  const char *v80; // x24
  const char *v81; // x0
  size_t v82; // x0
  const char *v83; // x28
  size_t v84; // x27
  __int64 v85; // x0
  __int64 v86; // x0
  __int64 v87; // x8
  __int64 v88; // x0
  char *v89; // x0
  char *v90; // x0
  signed __int64 v91; // x20
  void *v92; // x0
  size_t v93; // x20
  const char *v94; // x0
  char *v95; // x20
  size_t v96; // x22
  size_t v97; // x8
  __int64 v98; // x0
  int v99; // w8
  time_t v100; // x0
  curl_off_t next_expiration; // x8
  time_t v102; // x20
  Cookie **v103; // x24
  Cookie *next; // x8
  Curl_easy *v105; // x27
  __int64 v106; // x20
  int v107; // w26
  Cookie *v108; // x25
  char *v109; // x0
  __int64 v110; // x1
  const char *spath; // x22
  __int64 v112; // x23
  char *v113; // x0
  size_t v114; // x2
  char *v115; // x0
  __int64 v116; // x1
  bool v117; // zf
  int v118; // w8
  char *v119; // x0
  __int64 v120; // x1
  const char *v121; // x0
  __int128 v122; // q0
  __int128 v123; // q1
  __int128 v124; // q2
  const char *v126; // x2
  Cookie **v127; // x8
  curl_off_t v128; // x8
  __int64 j; // x23
  Cookie *v130; // x26
  Cookie *v131; // x27
  Cookie *v132; // x22
  curl_off_t expires; // x8
  Cookie **p_next; // x8
  __int64 *v135; // [xsp+10h] [xbp-C0h]
  char *s; // [xsp+18h] [xbp-B8h]
  char *v137; // [xsp+20h] [xbp-B0h]
  char v138; // [xsp+28h] [xbp-A8h]
  bool v139; // [xsp+2Ch] [xbp-A4h]
  Curl_easy *v140; // [xsp+30h] [xbp-A0h]
  Curl_easy *v141; // [xsp+30h] [xbp-A0h]
  bool v142; // [xsp+3Ch] [xbp-94h]
  const char *v143; // [xsp+40h] [xbp-90h]
  char *save_ptr[17]; // [xsp+48h] [xbp-88h] BYREF

  v16 = time(0uLL);
  v17 = 0LL;
  if ( data->req.setcookies > 0x31u )
    return (Cookie *)v17;
  v143 = domain;
  v18 = v16;
  v19 = Curl_ccalloc(1LL, 72LL);
  if ( !v19 )
    return 0LL;
  v20 = v19;
  if ( !httpheader )
  {
    save_ptr[0] = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 0xA;
      *(_BYTE *)(v20 + 59) = 1;
    }
    if ( *lineptr == 35 )
      goto LABEL_198;
    v21 = strchr(lineptr, 13);
    if ( v21 )
      *v21 = 0;
    v22 = strchr(lineptr, 10);
    if ( v22 )
      *v22 = 0;
    v23 = strtok_r((char *)lineptr, "\t", save_ptr);
    if ( !v23 )
      goto LABEL_197;
    v142 = secure;
    v24 = v23;
    v25 = 0;
    v26 = 0;
    while ( 1 )
    {
      switch ( v25 )
      {
        case 0:
          if ( *v24 == 46 )
            v27 = v24 + 1;
          else
            v27 = v24;
          v28 = Curl_cstrdup(v27);
          v25 = 0;
          *(_QWORD *)(v20 + 40) = v28;
          v26 |= v28 == 0;
          goto LABEL_54;
        case 1:
          *(_BYTE *)(v20 + 56) = (unsigned int)curl_strequal(v24, "TRUE") != 0;
          v25 = 1;
          goto LABEL_54;
        case 2:
          if ( !strcmp("TRUE", v24) || !strcmp("FALSE", v24) )
          {
            v37 = Curl_cstrdup("/");
            *(_QWORD *)(v20 + 24) = v37;
            v38 = v26 | (v37 == 0);
            v39 = Curl_cstrdup("/");
            v26 = v38 | (v39 == 0);
            *(_QWORD *)(v20 + 32) = v39;
            goto LABEL_40;
          }
          v29 = Curl_cstrdup(v24);
          *(_QWORD *)(v20 + 24) = v29;
          if ( v29 )
          {
            v30 = (const char *)Curl_cstrdup(v29);
            v31 = (char *)v30;
            if ( v30 )
            {
              v32 = strlen(v30);
              if ( *v31 == 34 )
                memmove(v31, v31 + 1, v32--);
              if ( v32 )
              {
                v33 = v32 - 1;
                if ( v31[v32 - 1] == 34 )
                {
                  --v32;
                  v31[v33] = 0;
                }
              }
              if ( *v31 == 47 )
              {
                if ( v32 && v31[v32 - 1] == 47 )
                  v31[v32 - 1] = 0;
              }
              else
              {
                Curl_cfree(v31);
                v31 = (char *)Curl_strndup("/", 1LL);
              }
            }
            *(_QWORD *)(v20 + 32) = v31;
            v26 |= v31 == 0LL;
            v25 = 2;
          }
          else
          {
            v25 = 2;
            v26 = 1;
          }
          goto LABEL_54;
        case 3:
LABEL_40:
          *(_BYTE *)(v20 + 57) = 0;
          if ( !(unsigned int)curl_strequal(v24, "TRUE") )
            goto LABEL_44;
          if ( secure || c->running )
          {
            *(_BYTE *)(v20 + 57) = 1;
LABEL_44:
            v25 = 3;
          }
          else
          {
            v25 = 3;
            v26 = 1;
          }
          goto LABEL_54;
        case 4:
          v26 |= (unsigned int)curlx_strtoofft(v24, 0LL, 10LL, v20 + 0x30) != 0;
          v25 = 4;
          goto LABEL_54;
        case 5:
          v34 = Curl_cstrdup(v24);
          *(_QWORD *)(v20 + 8) = v34;
          if ( !v34 )
          {
            v25 = 5;
            v26 = 1;
            goto LABEL_54;
          }
          if ( (unsigned int)curl_strnequal("__Secure-", v34, 9LL) )
          {
            v35 = *(_BYTE *)(v20 + 64) | 1;
LABEL_48:
            *(_BYTE *)(v20 + 64) = v35;
            v25 = 5;
            goto LABEL_54;
          }
          if ( (unsigned int)curl_strnequal("__Host-", *(_QWORD *)(v20 + 8), 7LL) )
          {
            v35 = *(_BYTE *)(v20 + 64) | 2;
            goto LABEL_48;
          }
          v25 = 5;
LABEL_54:
          v40 = strtok_r(0uLL, "\t", save_ptr);
          ++v25;
          if ( !v40 || (v24 = v40, (v26 & 1) != 0) )
          {
            if ( v25 == 6 )
            {
              v41 = Curl_cstrdup(&unk_29E9);
              LOBYTE(v26) = v26 | (v41 == 0);
              if ( v41 )
                v25 = 7;
              else
                v25 = 6;
              *(_QWORD *)(v20 + 16) = v41;
            }
            v42 = data;
            v43 = noexpire;
            if ( (v26 & 1) == 0 && v25 == 7 )
            {
              v44 = *(_BYTE *)(v20 + 64);
              if ( (v44 & 1) != 0 )
                goto LABEL_64;
              goto LABEL_231;
            }
LABEL_197:
            Curl_cfree(*(_QWORD *)(v20 + 40));
            Curl_cfree(*(_QWORD *)(v20 + 24));
            Curl_cfree(*(_QWORD *)(v20 + 32));
            Curl_cfree(*(_QWORD *)(v20 + 8));
            Curl_cfree(*(_QWORD *)(v20 + 16));
LABEL_198:
            Curl_cfree(v20);
            return 0LL;
          }
          break;
        case 6:
          v36 = Curl_cstrdup(v24);
          v26 |= v36 == 0;
          v25 = 6;
          *(_QWORD *)(v20 + 16) = v36;
          goto LABEL_54;
        default:
          goto LABEL_54;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
    Curl_cfree(v20);
    return 0LL;
  }
  v135 = (__int64 *)(v20 + 0x30);
  s = (char *)path;
  v137 = (char *)&data->set + 0x8B2;
  v138 = 0;
  v139 = noexpire;
  v142 = secure;
  v140 = data;
  while ( 1 )
  {
    v45 = lineptr + 1;
    for ( i = lineptr; ; ++i )
    {
      v47 = *(unsigned __int8 *)i;
      if ( v47 != 32 && v47 != 9 )
        break;
      ++v45;
    }
    v48 = strcspn(i, ";\t\r\n=");
    if ( !v48 )
    {
      lineptr = i;
      goto LABEL_126;
    }
    v49 = v48;
    lineptr = &i[v48];
    v50 = v48;
    do
    {
      v51 = (unsigned __int8)i[v50 - 1];
      if ( v51 != 32 && v51 != 9 )
        break;
      --v50;
    }
    while ( v50 );
    if ( *lineptr == 61 )
      break;
    v59 = 0LL;
    v60 = 0;
    v52 = 0LL;
LABEL_92:
    if ( v50 > 0xFFE || v59 > 0xFFE || v59 + v50 > 0x1000 )
    {
      Curl_cfree(*(_QWORD *)(v20 + 40));
      Curl_cfree(*(_QWORD *)(v20 + 24));
      Curl_cfree(*(_QWORD *)(v20 + 32));
      Curl_cfree(*(_QWORD *)(v20 + 8));
      Curl_cfree(*(_QWORD *)(v20 + 16));
      Curl_cfree(v20);
      if ( (v137[3] & 0x20) != 0 )
        Curl_infof(v140, "oversized cookie dropped, name/val %zu + %zu bytes", v50, v59);
      return 0LL;
    }
    if ( v47 == 95 && v50 >= 7 && i[1] == 95 )
    {
      if ( (unsigned int)curl_strnequal("__Secure-", i, 9LL) )
      {
        v61 = *(_BYTE *)(v20 + 64) | 1;
      }
      else
      {
        if ( !(unsigned int)curl_strnequal("__Host-", i, 7LL) )
          goto LABEL_103;
        v61 = *(_BYTE *)(v20 + 64) | 2;
      }
      *(_BYTE *)(v20 + 64) = v61;
    }
LABEL_103:
    if ( *(_QWORD *)(v20 + 8) )
    {
      if ( !v59 )
      {
        if ( v50 == 8 )
        {
          if ( (unsigned int)curl_strnequal("httponly", i, 8LL) )
          {
            *(_BYTE *)(v20 + 59) = 1;
            goto LABEL_126;
          }
        }
        else if ( v50 == 6 && (unsigned int)curl_strnequal("secure", i, 6LL) )
        {
          if ( !v142 && c->running )
            goto LABEL_290;
          *(_BYTE *)(v20 + 57) = 1;
          goto LABEL_126;
        }
        if ( !v60 )
          goto LABEL_126;
      }
      if ( v50 != 7 )
      {
        if ( v50 != 6 )
        {
          if ( v50 == 4 && (unsigned int)curl_strnequal("path", i, 4LL) )
          {
            Curl_cfree(*(_QWORD *)(v20 + 24));
            v62 = Curl_strndup(v52, v59);
            *(_QWORD *)(v20 + 24) = v62;
            if ( !v62 )
              goto LABEL_290;
            Curl_cfree(*(_QWORD *)(v20 + 32));
            v63 = (const char *)Curl_cstrdup(*(_QWORD *)(v20 + 24));
            if ( !v63 )
              goto LABEL_227;
            v64 = (char *)v63;
            v65 = strlen(v63);
            if ( *v64 == 34 )
              memmove(v64, v64 + 1, v65--);
            if ( v65 )
            {
              v66 = v65 - 1;
              if ( v64[v65 - 1] == 34 )
              {
                --v65;
                v64[v66] = 0;
              }
            }
            if ( *v64 == 47 )
            {
              if ( v65 && v64[v65 - 1] == 47 )
                v64[v65 - 1] = 0;
              *(_QWORD *)(v20 + 32) = v64;
            }
            else
            {
              Curl_cfree(v64);
              v79 = Curl_strndup("/", 1LL);
              *(_QWORD *)(v20 + 32) = v79;
              if ( !v79 )
                goto LABEL_290;
            }
          }
          goto LABEL_126;
        }
        v72 = curl_strnequal("domain", i, 6LL);
        if ( !v59 || !v72 )
          goto LABEL_126;
        v73 = v59 - (*v52 == 46);
        if ( *v52 == 46 )
          ++v52;
        if ( v73 == 9 && (unsigned int)curl_strnequal(v52, "localhost", 9LL)
          || (v74 = memchr(v52, 46, v73)) != 0LL && (unsigned __int64)(&v52[v73] - v74) > 1 )
        {
          v80 = v143;
          if ( v143 )
            v81 = v143;
          else
            v81 = v52;
          is_ipnum = Curl_host_is_ipnum(v81);
          if ( !v80 )
          {
            v143 = 0LL;
            goto LABEL_185;
          }
          v75 = v143;
          if ( (is_ipnum & 1) != 0 )
            goto LABEL_154;
        }
        else
        {
          v75 = ":";
          if ( (Curl_host_is_ipnum(":") & 1) != 0 )
          {
LABEL_154:
            v76 = strncmp(v52, v75, v73);
            v77 = v140;
            v143 = v75;
            if ( v76 || v73 != strlen(v75) )
              goto LABEL_175;
            is_ipnum = 1;
            goto LABEL_185;
          }
        }
        v82 = strlen(v75);
        v143 = v75;
        if ( v82 < v73
          || (v83 = &v75[v82 - v73], v84 = v82, !(unsigned int)curl_strnequal(v52, v83, v73))
          || v84 != v73 && *(v83 - 1) != 46 )
        {
          v77 = v140;
LABEL_175:
          if ( (v137[3] & 0x20) != 0 )
            Curl_infof(v77, "skipped cookie with bad tailmatch domain: %s", v52);
          v138 = 1;
          goto LABEL_126;
        }
        is_ipnum = 0;
LABEL_185:
        Curl_cfree(*(_QWORD *)(v20 + 40));
        v86 = Curl_strndup(v52, v73);
        *(_QWORD *)(v20 + 40) = v86;
        if ( (is_ipnum & 1) == 0 && v86 )
        {
          *(_BYTE *)(v20 + 56) = 1;
          goto LABEL_126;
        }
        if ( v86 )
        {
          v138 |= v86 == 0;
          goto LABEL_126;
        }
        v138 = 1;
LABEL_199:
        if ( (v138 & 1) != 0 )
          goto LABEL_290;
        if ( v143 )
        {
          if ( !*(_QWORD *)(v20 + 40) )
          {
            v88 = Curl_cstrdup(v143);
            *(_QWORD *)(v20 + 40) = v88;
            if ( !v88 )
              goto LABEL_290;
          }
        }
        if ( s && !*(_QWORD *)(v20 + 24) )
        {
          v89 = strchr(s, 63);
          v90 = v89 ? (char *)Curl_memrchr(s, 47LL, v89 - s) : strrchr(s, 47);
          if ( v90 )
          {
            v91 = v90 - s;
            v92 = (void *)Curl_cmalloc(v90 - s + 2);
            *(_QWORD *)(v20 + 24) = v92;
            if ( !v92 )
              goto LABEL_290;
            v93 = v91 + 1;
            memcpy(v92, s, v93);
            *(_BYTE *)(*(_QWORD *)(v20 + 24) + v93) = 0;
            v94 = (const char *)Curl_cstrdup(*(_QWORD *)(v20 + 24));
            if ( !v94 )
            {
LABEL_227:
              *(_QWORD *)(v20 + 32) = 0LL;
              goto LABEL_290;
            }
            v95 = (char *)v94;
            v96 = strlen(v94);
            if ( *v95 == 34 )
              memmove(v95, v95 + 1, v96--);
            if ( v96 )
            {
              v97 = v96 - 1;
              if ( v95[v96 - 1] == 34 )
              {
                --v96;
                v95[v97] = 0;
              }
            }
            if ( *v95 == 47 )
            {
              if ( v96 && v95[v96 - 1] == 47 )
                v95[v96 - 1] = 0;
              *(_QWORD *)(v20 + 32) = v95;
            }
            else
            {
              Curl_cfree(v95);
              v98 = Curl_strndup("/", 1LL);
              *(_QWORD *)(v20 + 32) = v98;
              if ( !v98 )
                goto LABEL_290;
            }
          }
        }
        if ( !*(_QWORD *)(v20 + 8) )
        {
LABEL_290:
          Curl_cfree(*(_QWORD *)(v20 + 40));
          Curl_cfree(*(_QWORD *)(v20 + 24));
          Curl_cfree(*(_QWORD *)(v20 + 32));
          Curl_cfree(*(_QWORD *)(v20 + 8));
          Curl_cfree(*(_QWORD *)(v20 + 16));
          Curl_cfree(v20);
          return 0LL;
        }
        v42 = v140;
        v43 = v139;
        ++v140->req.setcookies;
        v44 = *(_BYTE *)(v20 + 64);
        if ( (v44 & 1) != 0 )
        {
LABEL_64:
          if ( !*(_BYTE *)(v20 + 57) )
            goto LABEL_290;
        }
LABEL_231:
        if ( (v44 & 2) != 0 )
        {
          if ( !*(_BYTE *)(v20 + 57) )
            goto LABEL_290;
          v121 = *(const char **)(v20 + 24);
          if ( !v121 || strcmp(v121, "/") || *(_BYTE *)(v20 + 56) )
            goto LABEL_290;
        }
        if ( !c->running && c->newsession && !*(_QWORD *)(v20 + 48) )
          goto LABEL_290;
        *(_BYTE *)(v20 + 58) = c->running;
        v141 = v42;
        v99 = c->lastct + 1;
        c->lastct = v99;
        *(_DWORD *)(v20 + 60) = v99;
        if ( !v43 )
        {
          v100 = time(0uLL);
          next_expiration = c->next_expiration;
          v102 = v100;
          if ( v100 >= next_expiration || next_expiration == 0x7FFFFFFFFFFFFFFFLL )
          {
            c->next_expiration = 0x7FFFFFFFFFFFFFFFLL;
            for ( j = 0LL; j != 63; ++j )
            {
              v130 = c->cookies[j];
              if ( v130 )
              {
                v131 = 0LL;
                do
                {
                  while ( 1 )
                  {
                    v132 = v130;
                    expires = v130->expires;
                    v130 = v130->next;
                    if ( !expires || expires >= v102 )
                      break;
                    if ( v131 )
                      p_next = &v131->next;
                    else
                      p_next = &c->cookies[j];
                    *p_next = v130;
                    --c->numcookies;
                    Curl_cfree(v132->domain);
                    Curl_cfree(v132->path);
                    Curl_cfree(v132->spath);
                    Curl_cfree(v132->name);
                    Curl_cfree(v132->value);
                    Curl_cfree(v132);
                    if ( !v130 )
                      goto LABEL_311;
                  }
                  if ( expires && expires < c->next_expiration )
                    c->next_expiration = expires;
                  v131 = v132;
                }
                while ( v130 );
              }
LABEL_311:
              ;
            }
          }
        }
        v103 = &c->cookies[cookiehash(*(const char *const *)(v20 + 40))];
        next = *v103;
        if ( !*v103 )
        {
          v105 = v141;
          v108 = 0LL;
          LOBYTE(v107) = 0;
LABEL_294:
          v17 = v20;
LABEL_295:
          if ( v105 && c->running && (*((_BYTE *)&v105->set + 2229) & 0x20) != 0 )
          {
            if ( (v107 & 1) != 0 )
              v126 = "Replaced";
            else
              v126 = "Added";
            Curl_infof(
              v105,
              "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
              v126,
              *(const char **)(v17 + 8),
              *(const char **)(v17 + 16),
              *(const char **)(v17 + 0x28),
              *(const char **)(v17 + 24),
              *(_QWORD *)(v17 + 48));
          }
          if ( (v107 & 1) == 0 )
          {
            if ( v108 )
              v127 = &v108->next;
            else
              v127 = v103;
            *v127 = (Cookie *)v17;
            ++c->numcookies;
          }
          v128 = *(_QWORD *)(v17 + 48);
          if ( v128 && v128 < c->next_expiration )
            c->next_expiration = v128;
          return (Cookie *)v17;
        }
        v105 = v141;
        v106 = 0LL;
        v17 = 0LL;
        v107 = 0;
        while ( 2 )
        {
          v108 = next;
          if ( (unsigned int)curl_strequal(next->name, *(_QWORD *)(v20 + 8)) )
          {
            v109 = v108->domain;
            v110 = *(_QWORD *)(v20 + 40);
            if ( v109 )
            {
              if ( v110 && (unsigned int)curl_strequal(v109, v110) )
              {
LABEL_245:
                spath = v108->spath;
                if ( spath )
                {
                  v112 = *(_QWORD *)(v20 + 32);
                  if ( v112 )
                  {
                    if ( v108->secure && !*(_BYTE *)(v20 + 57) && !v142 )
                    {
                      v113 = strchr(spath + 1, 47);
                      v114 = v113 ? v113 - spath : strlen(spath);
                      if ( (unsigned int)curl_strnequal(spath, v112, v114) )
                      {
                        if ( v141 && (*((_BYTE *)&v141->set + 2229) & 0x20) != 0 )
                          Curl_infof(
                            v141,
                            "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                            *(const char **)(v20 + 8),
                            *(const char **)(v20 + 40));
                        goto LABEL_290;
                      }
                    }
                  }
                }
              }
            }
            else if ( !v110 )
            {
              goto LABEL_245;
            }
          }
          if ( v106 )
          {
LABEL_240:
            next = v108->next;
            if ( !v108->next )
            {
              if ( !v106 )
                goto LABEL_294;
              *(_QWORD *)v106 = *(_QWORD *)v17;
              *(_DWORD *)(v106 + 60) = *(_DWORD *)(v17 + 60);
              Curl_cfree(*(_QWORD *)(v17 + 8));
              Curl_cfree(*(_QWORD *)(v17 + 16));
              Curl_cfree(*(_QWORD *)(v17 + 40));
              Curl_cfree(*(_QWORD *)(v17 + 24));
              Curl_cfree(*(_QWORD *)(v17 + 32));
              *(_OWORD *)v17 = *(_OWORD *)v106;
              v123 = *(_OWORD *)(v106 + 0x20);
              v122 = *(_OWORD *)(v106 + 48);
              v124 = *(_OWORD *)(v106 + 16);
              *(_QWORD *)(v17 + 64) = *(_QWORD *)(v106 + 64);
              *(_OWORD *)(v17 + 0x20) = v123;
              *(_OWORD *)(v17 + 48) = v122;
              *(_OWORD *)(v17 + 16) = v124;
              Curl_cfree(v106);
              goto LABEL_295;
            }
            continue;
          }
          break;
        }
        if ( (unsigned int)curl_strequal(v108->name, *(_QWORD *)(v20 + 8)) )
        {
          v115 = v108->domain;
          v116 = *(_QWORD *)(v20 + 40);
          if ( v115 )
          {
            if ( v116 && (unsigned int)curl_strequal(v115, v116) )
            {
              v117 = v108->tailmatch == *(unsigned __int8 *)(v20 + 56);
              goto LABEL_260;
            }
            if ( (v107 & 1) == 0 )
            {
LABEL_270:
              v107 = 0;
              goto LABEL_271;
            }
          }
          else
          {
            v117 = v116 == 0;
LABEL_260:
            v118 = v117;
            if ( ((v107 | v118) & 1) == 0 )
              goto LABEL_270;
          }
          v119 = v108->spath;
          v120 = *(_QWORD *)(v20 + 32);
          if ( v119 )
          {
            if ( v120 )
            {
              if ( !(unsigned int)curl_strequal(v119, v120) || (v108->spath != 0LL) == (*(_QWORD *)(v20 + 32) == 0LL) )
                goto LABEL_270;
            }
            else if ( !*(_QWORD *)(v20 + 32) )
            {
              goto LABEL_270;
            }
          }
          else if ( v120 )
          {
            goto LABEL_270;
          }
          if ( !*(_BYTE *)(v20 + 58) && v108->livecookie )
            goto LABEL_290;
          v107 = 1;
          v17 = (__int64)v108;
          v106 = v20;
          goto LABEL_240;
        }
LABEL_271:
        v106 = 0LL;
        goto LABEL_240;
      }
      if ( !(unsigned int)curl_strnequal("version", i, 7LL) )
      {
        if ( !(unsigned int)curl_strnequal("max-age", i, 7LL) )
        {
          if ( (unsigned int)curl_strnequal("expires", i, 7LL) && v59 <= 0x7F && !*v135 )
          {
            memcpy(save_ptr, v52, v59);
            *((_BYTE *)save_ptr + v59) = 0;
            v85 = Curl_getdate_capped(save_ptr);
            *v135 = v85;
            if ( v85 )
            {
              if ( (v85 & 0x8000000000000000LL) != 0 )
                *v135 = 0LL;
            }
            else
            {
              *v135 = 1LL;
            }
          }
          goto LABEL_126;
        }
        if ( *v52 == 34 )
          v70 = v52 + 1;
        else
          v70 = v52;
        v71 = curlx_strtoofft(v70, 0LL, 10LL, v135);
        switch ( v71 )
        {
          case 0:
            v87 = *v135;
            if ( !*v135 )
            {
LABEL_193:
              *v135 = 1LL;
              goto LABEL_126;
            }
            if ( 0x7FFFFFFFFFFFFFFFLL - v18 >= v87 )
            {
              *v135 = v87 + v18;
              goto LABEL_126;
            }
LABEL_192:
            *v135 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_126;
          case 2:
            goto LABEL_193;
          case 1:
            goto LABEL_192;
        }
      }
    }
    else
    {
      if ( !v60 )
        goto LABEL_290;
      Curl_cfree(0LL);
      *(_QWORD *)(v20 + 8) = Curl_strndup(i, v50);
      Curl_cfree(*(_QWORD *)(v20 + 16));
      v67 = (const char *)Curl_strndup(v52, v59);
      *(_QWORD *)(v20 + 16) = v67;
      if ( !v67 )
        goto LABEL_290;
      v68 = *(const char **)(v20 + 8);
      if ( !v68 )
        goto LABEL_290;
      if ( v67[strcspn(v67, invalid_octets_badoctets)] || v68[strcspn(v68, invalid_octets_badoctets)] )
      {
        if ( (v137[3] & 0x20) != 0 )
          Curl_infof(v140, "invalid octets in name/value, cookie dropped");
        goto LABEL_290;
      }
    }
    do
    {
      do
LABEL_126:
        v69 = *(unsigned __int8 *)lineptr++;
      while ( v69 == 32 );
    }
    while ( v69 == 9 );
    if ( v69 != 59 )
      goto LABEL_199;
  }
  v52 = &i[v48 + 1];
  v53 = strcspn(v52, ";\r\n");
  v54 = v49 + v53;
  if ( v53 )
  {
    v55 = &v45[v54];
    while ( 1 )
    {
      v56 = *((unsigned __int8 *)v55 - 1);
      if ( v56 != 32 && v56 != 9 )
        break;
      --v53;
      --v55;
      if ( !v53 )
        goto LABEL_89;
    }
    for ( k = 0LL; k != v53; ++k )
    {
      v58 = (unsigned __int8)v45[v49 + k];
      if ( v58 != 32 && v58 != 9 )
      {
        v52 = &v45[v49 + k];
        v59 = v53 - k;
        goto LABEL_90;
      }
    }
    v59 = 0LL;
    v52 = v55;
  }
  else
  {
LABEL_89:
    v59 = 0LL;
  }
LABEL_90:
  if ( !memchr(v52, 9, v59) )
  {
    lineptr = &i[v54 + 1];
    v60 = 1;
    goto LABEL_92;
  }
  Curl_cfree(*(_QWORD *)(v20 + 40));
  Curl_cfree(*(_QWORD *)(v20 + 24));
  Curl_cfree(*(_QWORD *)(v20 + 32));
  Curl_cfree(*(_QWORD *)(v20 + 8));
  Curl_cfree(*(_QWORD *)(v20 + 16));
  Curl_cfree(v20);
  if ( (v137[3] & 0x20) != 0 )
    Curl_infof(v140, "cookie contains TAB, dropping");
  return 0LL;
}
