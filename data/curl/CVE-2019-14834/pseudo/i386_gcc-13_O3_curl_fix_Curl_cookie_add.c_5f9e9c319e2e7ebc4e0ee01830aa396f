Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v8; // edi
  char v9; // dl
  __int64 expires; // rax
  unsigned int v11; // ebp
  unsigned int v12; // esi
  const char *v13; // esi
  char v14; // cl
  bool v15; // cl
  char *v16; // eax
  Cookie *v17; // esi
  unsigned __int8 prefix; // al
  char *v20; // eax
  char *v21; // eax
  char *v22; // edi
  int v23; // esi
  char *v24; // ecx
  int v25; // eax
  const char *v26; // eax
  const char *name; // edi
  _BYTE *v28; // eax
  int v29; // eax
  char *v30; // eax
  int v31; // eax
  size_t v32; // edi
  int v33; // eax
  int v34; // eax
  int v35; // esi
  int v36; // eax
  char *v37; // ecx
  int (__cdecl *v38)(char *); // edi
  int v39; // eax
  const char *v40; // eax
  char *v41; // eax
  char *v42; // edi
  bool v43; // di
  int v44; // eax
  int v45; // esi
  bool v46; // di
  bool v47; // bp
  int v48; // esi
  int v49; // eax
  int v50; // eax
  int v51; // eax
  char *v52; // edx
  int v53; // eax
  int v54; // eax
  int v55; // eax
  int v56; // eax
  int v57; // eax
  bool v58; // di
  int v59; // eax
  int v60; // edi
  int v61; // eax
  int v62; // eax
  char *v63; // eax
  bool running; // al
  int v65; // eax
  Cookie *v66; // esi
  Cookie *v67; // edi
  Cookie *next; // eax
  char *v69; // eax
  char *v70; // edx
  char *spath; // edx
  char *v72; // eax
  char *v73; // edx
  unsigned int v74; // ebx
  unsigned int v75; // ecx
  char *v76; // eax
  char is_ipnum; // di
  int v78; // eax
  int v79; // eax
  char *v80; // eax
  const char *v81; // edx
  char *v82; // ecx
  size_t v83; // eax
  const char *v84; // eax
  int v85; // eax
  curl_off_t v86; // rax
  char *v87; // eax
  char *v88; // eax
  int v89; // esi
  size_t v90; // edi
  char *v91; // eax
  char *v92; // eax
  int v93; // eax
  char *v94; // edx
  bool v95; // zf
  char vlen; // [esp+18h] [ebp-F4h]
  char vlene; // [esp+18h] [ebp-F4h]
  size_t vlena; // [esp+18h] [ebp-F4h]
  size_t vlenb; // [esp+18h] [ebp-F4h]
  bool vlenc; // [esp+18h] [ebp-F4h]
  __int64 vlend; // [esp+18h] [ebp-F4h]
  const char *ptr; // [esp+24h] [ebp-E8h]
  bool ptra; // [esp+24h] [ebp-E8h]
  char ptrb; // [esp+24h] [ebp-E8h]
  Cookie *co; // [esp+28h] [ebp-E4h]
  char reject; // [esp+2Ch] [ebp-E0h]
  char *rejecta; // [esp+2Ch] [ebp-E0h]
  char *rejectb; // [esp+2Ch] [ebp-E0h]
  char *rejectc; // [esp+2Ch] [ebp-E0h]
  char *rejectd; // [esp+2Ch] [ebp-E0h]
  char *myhash; // [esp+30h] [ebp-DCh]
  size_t myhasha; // [esp+30h] [ebp-DCh]
  char nlen; // [esp+34h] [ebp-D8h]
  size_t nlena; // [esp+34h] [ebp-D8h]
  size_t nlenb; // [esp+34h] [ebp-D8h]
  bool s2a; // [esp+44h] [ebp-C8h]
  char *s2b; // [esp+44h] [ebp-C8h]
  char *s; // [esp+4Ch] [ebp-C0h]
  bool sa; // [esp+4Ch] [ebp-C0h]
  int now; // [esp+50h] [ebp-BCh]
  char *nowa; // [esp+50h] [ebp-BCh]
  bool badcookie; // [esp+5Bh] [ebp-B1h]
  char *tok_buf; // [esp+68h] [ebp-A4h] BYREF
  char date[128]; // [esp+6Ch] [ebp-A0h] BYREF
  unsigned int v126; // [esp+ECh] [ebp-20h]

  v8 = (char *)lineptr;
  v126 = __readgsdword(0x14u);
  now = time(0);
  if ( data->req.setcookies > 0x31u )
    return 0;
  co = (Cookie *)Curl_ccalloc(1, 44);
  if ( !co )
    return 0;
  if ( httpheader )
  {
    badcookie = 0;
    if ( strlen(lineptr) <= 0x1388 )
    {
      v9 = *lineptr;
      if ( *lineptr )
      {
        while ( 1 )
        {
          if ( v9 != 32 )
          {
            vlen = v9;
            if ( v9 != 9 )
            {
              LODWORD(expires) = strcspn(v8, ";\t\r\n=");
              BYTE4(expires) = vlen;
              v11 = expires;
              if ( (_DWORD)expires )
                goto LABEL_16;
LABEL_11:
              while ( BYTE4(expires) == 32 || BYTE4(expires) == 9 )
              {
                BYTE4(expires) = *++v8;
                if ( !BYTE4(expires) )
                  goto LABEL_45;
              }
              if ( BYTE4(expires) != 59 )
                break;
            }
          }
          v9 = *++v8;
          if ( !v9 )
            goto LABEL_15;
        }
LABEL_45:
        if ( badcookie )
          goto LABEL_54;
        if ( !co->domain )
        {
          if ( domain )
          {
            v85 = Curl_cstrdup(domain);
            co->domain = (char *)v85;
            if ( !v85 )
              goto LABEL_54;
          }
        }
        if ( !co->path && path )
        {
          v87 = strchr(path, 63);
          v88 = v87 ? (char *)Curl_memrchr(path, 47, v87 - path) : strrchr(path, 47);
          if ( v88 )
          {
            v89 = v88 - path;
            v90 = v88 - path + 1;
            v91 = (char *)Curl_cmalloc(v88 - path + 2);
            co->path = v91;
            if ( !v91 )
              goto LABEL_54;
            memcpy(v91, path, v90);
            co->path[v89 + 1] = 0;
            v92 = sanitize_cookie_path(co->path);
            co->spath = v92;
            if ( !v92 )
              goto LABEL_54;
          }
        }
        if ( !co->name )
          goto LABEL_54;
        v17 = co;
        ++data->req.setcookies;
        prefix = co->prefix;
        if ( (prefix & 1) != 0 )
          goto LABEL_184;
LABEL_52:
        if ( (prefix & 2) != 0 )
        {
          if ( !v17->secure )
            goto LABEL_54;
          goto LABEL_186;
        }
        goto LABEL_190;
      }
LABEL_15:
      vlene = v9;
      LODWORD(expires) = strcspn(v8, ";\t\r\n=");
      BYTE4(expires) = vlene;
      v11 = expires;
      if ( !(_DWORD)expires )
        goto LABEL_45;
LABEL_16:
      ptr = &v8[v11];
      while ( 1 )
      {
        v12 = v11--;
        if ( v8[v11] != 9 && v8[v11] != 32 )
          break;
        if ( !v11 )
        {
          if ( *ptr == 61 )
            goto LABEL_20;
          if ( co->name )
          {
LABEL_100:
            v8 = (char *)ptr;
            BYTE4(expires) = *ptr;
            goto LABEL_44;
          }
LABEL_54:
          freecookie(co);
          return 0;
        }
      }
      v15 = 0;
      v11 = v12;
      if ( *ptr != 61 )
      {
        if ( v12 <= 0xFFE )
        {
          myhash = (char *)ptr;
          v13 = 0;
          vlena = 0;
          if ( v11 <= 6 )
          {
LABEL_80:
            if ( co->name )
            {
              if ( vlena )
              {
                if ( v11 != 4 )
                {
                  if ( v11 == 6 )
                  {
                    if ( curl_strnequal("domain", v8, 6) )
                    {
                      if ( *v13 == 46 )
                      {
                        --vlena;
                        ++v13;
                      }
                      if ( vlena == 9 && curl_strnequal(v13, "localhost", 9)
                        || (v28 = memchr(v13, 46, vlena)) != 0 && vlena - (v28 - v13) > 1 )
                      {
                        if ( !domain )
                        {
                          is_ipnum = Curl_host_is_ipnum(v13);
                          Curl_cfree(co->domain);
                          v78 = Curl_strndup(v13, vlena);
                          co->domain = (char *)v78;
                          if ( !v78 )
                            goto LABEL_54;
                          if ( is_ipnum )
                            goto LABEL_76;
                          goto LABEL_253;
                        }
                        if ( (unsigned __int8)Curl_host_is_ipnum(domain) )
                        {
LABEL_91:
                          if ( strncmp(v13, domain, vlena) || strlen(domain) != vlena )
                          {
LABEL_93:
                            if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
                              Curl_infof(data, "skipped cookie with bad tailmatch domain: %s");
                            v8 = myhash;
                            BYTE4(expires) = *myhash;
                            badcookie = httpheader;
                            goto LABEL_44;
                          }
                          Curl_cfree(co->domain);
                          v79 = Curl_strndup(v13, vlena);
                          co->domain = (char *)v79;
                          if ( !v79 )
                            goto LABEL_54;
                          goto LABEL_76;
                        }
                      }
                      else
                      {
                        domain = (const char *)&LC1;
                        if ( (unsigned __int8)Curl_host_is_ipnum(&LC1) )
                          goto LABEL_91;
                      }
                      v32 = strlen(domain);
                      if ( v32 < vlena
                        || !curl_strnequal(v13, &domain[v32 - vlena], vlena)
                        || vlena != v32 && domain[v32 - vlena - 1] != 46 )
                      {
                        goto LABEL_93;
                      }
                      Curl_cfree(co->domain);
                      v33 = Curl_strndup(v13, vlena);
                      co->domain = (char *)v33;
                      if ( !v33 )
                        goto LABEL_54;
LABEL_253:
                      co->tailmatch = 1;
                    }
LABEL_76:
                    v8 = myhash;
                    BYTE4(expires) = *myhash;
LABEL_44:
                    if ( BYTE4(expires) )
                      goto LABEL_11;
                    goto LABEL_45;
                  }
LABEL_42:
                  v8 = myhash;
                  v16 = myhash;
LABEL_43:
                  BYTE4(expires) = *v16;
                  goto LABEL_44;
                }
              }
              else
              {
                v16 = myhash;
                ptr = myhash;
                if ( v11 == 6 )
                {
                  vlenc = v15;
                  if ( curl_strnequal("secure", v8, 6) )
                  {
                    if ( secure || !c->running )
                    {
                      v8 = myhash;
                      co->secure = 1;
                      BYTE4(expires) = *myhash;
                      goto LABEL_44;
                    }
                    goto LABEL_54;
                  }
                  if ( vlenc )
                    curl_strnequal("domain", v8, 6);
                  goto LABEL_76;
                }
                if ( !v15 )
                  goto LABEL_100;
                if ( v11 != 4 )
                {
                  v8 = myhash;
                  goto LABEL_43;
                }
              }
              if ( curl_strnequal("path", v8, 4) )
              {
                Curl_cfree(co->path);
                v29 = Curl_strndup(v13, vlena);
                co->path = (char *)v29;
                if ( v29 )
                {
                  Curl_cfree(co->spath);
                  v30 = sanitize_cookie_path(co->path);
                  co->spath = v30;
                  if ( v30 )
                  {
                    v8 = myhash;
                    BYTE4(expires) = *myhash;
                    goto LABEL_44;
                  }
                }
                goto LABEL_54;
              }
              goto LABEL_76;
            }
LABEL_71:
            if ( !v15 )
              goto LABEL_54;
            Curl_cfree(0);
            co->name = (char *)Curl_strndup(v8, v11);
            Curl_cfree(co->value);
            v26 = (const char *)Curl_strndup(v13, vlena);
            co->value = (char *)v26;
            name = co->name;
            if ( !v26 || !name )
              goto LABEL_54;
            if ( v26[strcspn(v26, badoctets_0)] || name[strcspn(name, badoctets_0)] )
            {
              if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
                Curl_infof(data, "invalid octets in name/value, cookie dropped");
              goto LABEL_54;
            }
            goto LABEL_76;
          }
LABEL_36:
          if ( BYTE4(expires) == 95 && v8[1] == 95 )
          {
            ptra = v15;
            v25 = curl_strnequal("__Secure-", v8, 9);
            v15 = ptra;
            if ( v25 )
            {
              co->prefix |= 1u;
              if ( !co->name )
                goto LABEL_71;
            }
            else
            {
              v93 = curl_strnequal("__Host-", v8, 7);
              v15 = ptra;
              if ( v93 )
              {
                v94 = co->name;
                co->prefix |= 2u;
                if ( !v94 )
                  goto LABEL_71;
              }
              else if ( !co->name )
              {
                goto LABEL_71;
              }
            }
          }
          else if ( !co->name )
          {
            goto LABEL_71;
          }
          if ( !vlena )
          {
            if ( v11 == 8 )
            {
              if ( curl_strnequal("httponly", v8, 8) )
              {
                v8 = myhash;
                co->httponly = 1;
                BYTE4(expires) = *myhash;
                goto LABEL_44;
              }
              goto LABEL_76;
            }
            if ( !v15 )
              goto LABEL_76;
          }
          if ( v11 == 7 )
          {
            if ( !curl_strnequal("version", v8, 7) )
            {
              if ( curl_strnequal("max-age", v8, 7) )
              {
                v31 = curlx_strtoofft(&v13[*v13 == 34], 0, 10);
                if ( v31 != 1 )
                {
                  if ( v31 == 2 )
                  {
                    v8 = myhash;
                    LODWORD(co->expires) = 1;
                    HIDWORD(co->expires) = 0;
                    BYTE4(expires) = *myhash;
                    goto LABEL_44;
                  }
                  if ( v31 )
                    goto LABEL_76;
                  expires = co->expires;
                  if ( !expires )
                  {
                    LODWORD(co->expires) = 1;
                    HIDWORD(co->expires) = 0;
                    v8 = myhash;
                    HIDWORD(expires) = (unsigned __int8)*myhash;
                    goto LABEL_44;
                  }
                  LODWORD(vlend) = now;
                  if ( 0x7FFFFFFFFFFFFFFFLL - now >= expires )
                  {
                    v8 = myhash;
                    HIDWORD(vlend) = now >> 31;
                    co->expires = vlend + expires;
                    BYTE4(expires) = *myhash;
                    goto LABEL_44;
                  }
                }
                v8 = myhash;
                LODWORD(co->expires) = -1;
                HIDWORD(co->expires) = 0x7FFFFFFF;
                BYTE4(expires) = *myhash;
                goto LABEL_44;
              }
              if ( curl_strnequal("expires", v8, 7) && !co->expires && vlena <= 0x7F )
              {
                if ( vlena >= 4 )
                {
                  *(_DWORD *)&date[vlena - 4] = *(_DWORD *)&v13[vlena - 4];
                  qmemcpy(date, v13, 4 * ((vlena - 1) >> 2));
                }
                else if ( vlena )
                {
                  date[0] = *v13;
                  if ( (vlena & 2) != 0 )
                    *(_WORD *)&date[vlena - 2] = *(_WORD *)&v13[vlena - 2];
                }
                date[vlena] = 0;
                v86 = Curl_getdate_capped(date);
                if ( (_DWORD)v86 )
                {
                  if ( (int)v86 >> 31 < 0 )
                  {
                    LODWORD(co->expires) = 0;
                    HIDWORD(co->expires) = 0;
                  }
                  else
                  {
                    co->expires = v86;
                  }
                }
                else
                {
                  LODWORD(co->expires) = 1;
                  HIDWORD(co->expires) = 0;
                }
              }
            }
            goto LABEL_76;
          }
          goto LABEL_42;
        }
LABEL_248:
        freecookie(co);
        if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
          Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes");
        return 0;
      }
LABEL_20:
      nlen = BYTE4(expires);
      v13 = ptr + 1;
      LODWORD(expires) = strcspn(ptr + 1, ";\r\n");
      BYTE4(expires) = nlen;
      myhash = (char *)&ptr[expires + 1];
      if ( (_DWORD)expires )
      {
        while ( 1 )
        {
          v14 = ptr[expires];
          if ( v14 != 32 && v14 != 9 )
            break;
          LODWORD(expires) = expires - 1;
          if ( !(_DWORD)expires )
            goto LABEL_97;
        }
        while ( *v13 == 32 || *v13 == 9 )
        {
          ++v13;
          LODWORD(expires) = expires - 1;
          if ( !(_DWORD)expires )
          {
            vlena = 0;
            goto LABEL_31;
          }
        }
        vlena = expires;
        if ( memchr(v13, 9, expires) )
        {
          freecookie(co);
          if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
            Curl_infof(data, "cookie contains TAB, dropping");
          return 0;
        }
        BYTE4(expires) = nlen;
LABEL_31:
        if ( v11 > 0xFFE || vlena > 0xFFE || v11 + vlena > 0x1000 )
          goto LABEL_248;
        v15 = httpheader;
      }
      else
      {
LABEL_97:
        if ( v11 > 0xFFE )
          goto LABEL_248;
        vlena = 0;
        v15 = httpheader;
      }
      if ( v11 <= 6 )
        goto LABEL_80;
      goto LABEL_36;
    }
LABEL_250:
    Curl_cfree(co);
    return 0;
  }
  tok_buf = 0;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
  {
    v8 = (char *)(lineptr + 10);
    co->httponly = 1;
  }
  if ( *v8 == 35 )
    goto LABEL_250;
  v20 = strchr(v8, 13);
  if ( v20 )
    *v20 = 0;
  v21 = strchr(v8, 10);
  if ( v21 )
    *v21 = 0;
  v22 = strtok_r(v8, "\t", &tok_buf);
  if ( !v22 )
    goto LABEL_54;
  v23 = 0;
  if ( secure )
  {
    while ( 1 )
    {
      switch ( v23 )
      {
        case 0:
          v50 = Curl_cstrdup(&v22[*v22 == 46]);
          co->domain = (char *)v50;
          v35 = v50;
          reject = v50 != 0;
          v22 = strtok_r(0, "\t", &tok_buf);
          if ( v22 && reject )
            goto _L255;
LABEL_319:
          v95 = v35 == 0;
          v23 = 1;
          v47 = v95;
          goto LABEL_314;
        case 1:
_L255:
          co->tailmatch = curl_strequal(v22, "TRUE") != 0;
          v22 = strtok_r(0, "\t", &tok_buf);
          if ( v22 )
            goto LABEL_155;
LABEL_318:
          reject = 1;
          v47 = httpheader;
          v23 = 2;
          goto LABEL_314;
        case 2:
LABEL_155:
          v51 = strcmp("TRUE", v22);
          v52 = (char *)Curl_cstrdup;
          if ( v51 && (rejectb = (char *)Curl_cstrdup, v53 = strcmp("FALSE", v22), v52 = rejectb, v53) )
          {
            v84 = (const char *)((int (__cdecl *)(char *))rejectb)(v22);
            co->path = (char *)v84;
            if ( !v84 )
              goto LABEL_179;
            nowa = sanitize_cookie_path(v84);
            co->spath = nowa;
            reject = nowa != 0;
            v22 = strtok_r(0, "\t", &tok_buf);
            if ( !v22 || !nowa )
            {
              v23 = 3;
              v47 = nowa == 0;
              goto LABEL_314;
            }
            sa = httpheader;
          }
          else
          {
            v54 = ((int (__cdecl *)(const char *))v52)("/");
            co->path = (char *)v54;
            s = (char *)v54;
            v55 = Curl_cstrdup("/");
            co->spath = (char *)v55;
            if ( !v55 )
            {
              co->secure = 0;
              if ( curl_strequal(v22, "TRUE") )
                co->secure = 1;
LABEL_179:
              strtok_r(0, "\t", &tok_buf);
              goto LABEL_54;
            }
            sa = s == 0;
          }
LABEL_159:
          co->secure = 0;
          if ( curl_strequal(v22, "TRUE") )
            co->secure = 1;
          reject = !sa;
          v22 = strtok_r(0, "\t", &tok_buf);
          if ( !v22 || !reject )
          {
            v47 = sa;
            v23 = 4;
            goto LABEL_314;
          }
_L252:
          v48 = curlx_strtoofft(v22, 0, 10);
          reject = v48 == 0;
          v22 = strtok_r(0, "\t", &tok_buf);
          if ( !v22 || v48 )
          {
LABEL_325:
            v95 = v48 == 0;
            v23 = 5;
            v47 = !v95;
            goto LABEL_314;
          }
_L251:
          v56 = Curl_cstrdup(v22);
          co->name = (char *)v56;
          if ( !v56 )
          {
LABEL_180:
            v47 = 1;
            strtok_r(0, "\t", &tok_buf);
LABEL_181:
            v62 = Curl_cstrdup(&LC24);
            co->value = (char *)v62;
            if ( !v62 )
              goto LABEL_54;
            goto LABEL_182;
          }
          if ( curl_strnequal("__Secure-", v56, 9) )
          {
            co->prefix |= 1u;
          }
          else if ( curl_strnequal("__Host-", co->name, 7) )
          {
            co->prefix |= 2u;
          }
          v22 = strtok_r(0, "\t", &tok_buf);
          if ( !v22 )
          {
LABEL_151:
            v47 = httpheader;
            goto LABEL_181;
          }
LABEL_169:
          v57 = Curl_cstrdup(v22);
          co->value = (char *)v57;
          v45 = v57;
          reject = v57 != 0;
          v58 = v57 != 0;
          if ( !strtok_r(0, "\t", &tok_buf) || !v58 )
          {
LABEL_322:
            v95 = v45 == 0;
            v23 = 7;
            v47 = v95;
            goto LABEL_314;
          }
          if ( !strtok_r(0, "\t", &tok_buf) )
          {
LABEL_326:
            reject = 1;
            v47 = httpheader;
            v23 = 8;
            goto LABEL_314;
          }
          v23 = 8;
LABEL_173:
          ++v23;
          v22 = strtok_r(0, "\t", &tok_buf);
          if ( !v22 )
          {
            v47 = httpheader;
            reject = secure;
            goto LABEL_314;
          }
          break;
        case 3:
          sa = httpheader;
          goto LABEL_159;
        case 4:
          goto _L252;
        case 5:
          goto _L251;
        case 6:
          goto LABEL_169;
        default:
          goto LABEL_173;
      }
    }
  }
  v24 = v22;
  while ( 2 )
  {
    switch ( v23 )
    {
      case 0:
        v34 = Curl_cstrdup(&v24[*v24 == 46]);
        co->domain = (char *)v34;
        v35 = v34;
        reject = v34 != 0;
        v24 = strtok_r(0, "\t", &tok_buf);
        if ( !v24 || !reject )
          goto LABEL_319;
        goto _L223;
      case 1:
_L223:
        co->tailmatch = curl_strequal(v24, "TRUE") != 0;
        v24 = strtok_r(0, "\t", &tok_buf);
        if ( v24 )
          goto LABEL_127;
        goto LABEL_318;
      case 2:
LABEL_127:
        rejecta = v24;
        v36 = strcmp("TRUE", v24);
        v37 = rejecta;
        v38 = (int (__cdecl *)(char *))Curl_cstrdup;
        if ( v36 && (v39 = strcmp("FALSE", rejecta), v37 = rejecta, v39) )
        {
          v40 = (const char *)v38(rejecta);
          co->path = (char *)v40;
          if ( !v40 )
            goto LABEL_179;
          v41 = sanitize_cookie_path(v40);
          co->spath = v41;
          v42 = v41;
          reject = v41 != 0;
          s2a = v41 != 0;
          v24 = strtok_r(0, "\t", &tok_buf);
          if ( !v24 || !s2a )
          {
            v23 = 3;
            v47 = v42 == 0;
            goto LABEL_314;
          }
          v43 = secure;
        }
        else
        {
          s2b = v37;
          v59 = v38("/");
          co->path = (char *)v59;
          v60 = v59;
          v61 = Curl_cstrdup("/");
          v24 = s2b;
          co->spath = (char *)v61;
          if ( !v61 )
          {
            co->secure = 0;
            if ( !curl_strequal(s2b, "TRUE") )
              goto LABEL_179;
            v43 = 1;
            goto LABEL_141;
          }
          v43 = v60 == 0;
        }
LABEL_140:
        co->secure = 0;
        if ( !curl_strequal(v24, "TRUE") )
          goto LABEL_143;
LABEL_141:
        if ( !c->running )
          goto LABEL_179;
        co->secure = 1;
LABEL_143:
        reject = !v43;
        v24 = strtok_r(0, "\t", &tok_buf);
        if ( v24 && reject )
        {
_L220:
          v48 = curlx_strtoofft(v24, 0, 10);
          reject = v48 == 0;
          v24 = strtok_r(0, "\t", &tok_buf);
          if ( !v24 || v48 )
            goto LABEL_325;
_L219:
          v49 = Curl_cstrdup(v24);
          co->name = (char *)v49;
          if ( !v49 )
            goto LABEL_180;
          if ( curl_strnequal("__Secure-", v49, 9) )
          {
            co->prefix |= 1u;
          }
          else if ( curl_strnequal("__Host-", co->name, 7) )
          {
            co->prefix |= 2u;
          }
          v24 = strtok_r(0, "\t", &tok_buf);
          if ( !v24 )
            goto LABEL_151;
LABEL_133:
          v44 = Curl_cstrdup(v24);
          co->value = (char *)v44;
          v45 = v44;
          reject = v44 != 0;
          v46 = v44 != 0;
          if ( !strtok_r(0, "\t", &tok_buf) || !v46 )
            goto LABEL_322;
          if ( !strtok_r(0, "\t", &tok_buf) )
            goto LABEL_326;
          v23 = 8;
LABEL_137:
          ++v23;
          v24 = strtok_r(0, "\t", &tok_buf);
          if ( !v24 )
          {
            reject = 1;
            v47 = 0;
            goto LABEL_314;
          }
          continue;
        }
        v47 = v43;
        v23 = 4;
LABEL_314:
        if ( v23 != 7 && reject )
          goto LABEL_54;
LABEL_182:
        if ( v47 )
          goto LABEL_54;
        v17 = co;
        prefix = co->prefix;
        if ( (prefix & 1) == 0 )
          goto LABEL_52;
LABEL_184:
        if ( !v17->secure )
          goto LABEL_302;
        if ( (prefix & 2) != 0 )
        {
LABEL_186:
          v63 = co->path;
          if ( !v63 || *v63 != 47 || v63[1] || co->tailmatch )
            goto LABEL_54;
        }
LABEL_190:
        running = c->running;
        if ( !running && c->newsession )
        {
          v17 = co;
          if ( !co->expires )
          {
LABEL_302:
            freecookie(v17);
            return 0;
          }
        }
        co->livecookie = running;
        v65 = c->lastct + 1;
        c->lastct = v65;
        co->creationtime = v65;
        if ( !noexpire )
          remove_expired(c);
        myhasha = cookiehash(co->domain);
        v66 = c->cookies[myhasha];
        if ( !v66 )
        {
          if ( c->running && (*(&data->set.connect_only + 4) & 0x20) != 0 )
          {
            ptrb = 0;
            vlenb = (size_t)co;
LABEL_220:
            Curl_infof(data, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld");
            if ( ptrb )
              goto LABEL_221;
            if ( v66 )
              goto LABEL_236;
          }
          else
          {
            vlenb = (size_t)co;
          }
          c->cookies[myhasha] = (Cookie *)vlenb;
          goto LABEL_237;
        }
        ptrb = 0;
        v67 = 0;
        vlenb = 0;
        while ( 2 )
        {
          if ( curl_strequal(v66->name, co->name) )
          {
            v69 = v66->domain;
            v70 = co->domain;
            if ( v69 )
            {
              if ( v70 && curl_strequal(v69, co->domain) )
              {
LABEL_203:
                spath = v66->spath;
                if ( spath )
                {
                  rejectc = co->spath;
                  if ( rejectc )
                  {
                    if ( v66->secure && !co->secure && !secure )
                    {
                      nlena = (size_t)v66->spath;
                      v80 = strchr(spath + 1, 47);
                      v81 = (const char *)nlena;
                      v82 = rejectc;
                      if ( v80 )
                      {
                        v83 = (size_t)&v80[-nlena];
                      }
                      else
                      {
                        nlenb = (size_t)rejectc;
                        rejectd = (char *)v81;
                        v83 = strlen(v81);
                        v82 = (char *)nlenb;
                        v81 = rejectd;
                      }
                      if ( curl_strnequal(v81, v82, v83) )
                      {
                        if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
                          Curl_infof(data, "cookie '%s' for domain '%s' dropped, would overlay an existing cookie");
                        goto LABEL_54;
                      }
                    }
                  }
                }
              }
            }
            else if ( !v70 )
            {
              goto LABEL_203;
            }
          }
          if ( v67 || !curl_strequal(v66->name, co->name) )
            goto LABEL_197;
          v72 = v66->domain;
          v73 = co->domain;
          if ( v72 )
          {
            if ( !v73 || !curl_strequal(v72, co->domain) || v66->tailmatch != co->tailmatch )
            {
LABEL_214:
              if ( !ptrb )
                goto LABEL_215;
            }
          }
          else if ( v73 )
          {
            goto LABEL_214;
          }
          v76 = v66->spath;
          if ( !v76 )
          {
LABEL_231:
            if ( (v76 == 0) != (co->spath == 0) )
              goto LABEL_215;
            ptrb = co->livecookie;
            if ( ptrb )
            {
              vlenb = (size_t)v66;
              v67 = co;
            }
            else
            {
              if ( v66->livecookie )
                goto LABEL_54;
              vlenb = (size_t)v66;
              v67 = co;
              ptrb = 1;
            }
LABEL_197:
            next = v66->next;
            if ( !v66->next )
              break;
            goto LABEL_198;
          }
          if ( co->spath && curl_strequal(v76, co->spath) )
          {
            v76 = v66->spath;
            goto LABEL_231;
          }
LABEL_215:
          next = v66->next;
          ptrb = 0;
          if ( v66->next )
          {
LABEL_198:
            v66 = next;
            continue;
          }
          break;
        }
        if ( v67 )
        {
          v67->next = *(Cookie **)vlenb;
          v67->creationtime = *(_DWORD *)(vlenb + 36);
          Curl_cfree(*(_DWORD *)(vlenb + 4));
          Curl_cfree(*(_DWORD *)(vlenb + 8));
          Curl_cfree(*(_DWORD *)(vlenb + 20));
          Curl_cfree(*(_DWORD *)(vlenb + 12));
          Curl_cfree(*(_DWORD *)(vlenb + 16));
          *(_DWORD *)vlenb = v67->next;
          *(_DWORD *)(vlenb + 4) = v67->name;
          *(_DWORD *)(vlenb + 8) = v67->value;
          *(_DWORD *)(vlenb + 12) = v67->path;
          *(_DWORD *)(vlenb + 16) = v67->spath;
          *(_DWORD *)(vlenb + 20) = v67->domain;
          *(_DWORD *)(vlenb + 24) = v67->expires;
          *(_DWORD *)(vlenb + 28) = HIDWORD(v67->expires);
          *(_DWORD *)(vlenb + 32) = *(_DWORD *)&v67->tailmatch;
          *(_DWORD *)(vlenb + 36) = v67->creationtime;
          *(_DWORD *)(vlenb + 40) = *(_DWORD *)&v67->prefix;
          Curl_cfree(v67);
        }
        else
        {
          vlenb = (size_t)co;
        }
        if ( c->running && (*(&data->set.connect_only + 4) & 0x20) != 0 )
          goto LABEL_220;
        if ( ptrb )
          goto LABEL_221;
LABEL_236:
        v66->next = (Cookie *)vlenb;
LABEL_237:
        ++c->numcookies;
LABEL_221:
        v74 = *(_DWORD *)(vlenb + 24);
        v75 = *(_DWORD *)(vlenb + 28);
        if ( *(_QWORD *)(vlenb + 24) && __SPAIR64__(v75, v74) < c->next_expiration )
        {
          LODWORD(c->next_expiration) = v74;
          HIDWORD(c->next_expiration) = v75;
        }
        return (Cookie *)vlenb;
      case 3:
        v43 = secure;
        goto LABEL_140;
      case 4:
        goto _L220;
      case 5:
        goto _L219;
      case 6:
        goto LABEL_133;
      default:
        goto LABEL_137;
    }
  }
}
