Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  int v12; // r8
  int v13; // r0
  char *j; // r8
  int v15; // r9
  char *i; // r9
  int v17; // r4
  bool v18; // zf
  size_t v19; // r0
  size_t v20; // r6
  char *v21; // r10
  size_t v22; // r0
  int v23; // r1
  bool v24; // zf
  int v25; // r0
  bool v26; // zf
  unsigned int v27; // r5
  const char *v28; // r10
  size_t v29; // r0
  size_t v30; // r5
  const char *v31; // r7
  int v32; // r1
  bool v33; // zf
  size_t v34; // r9
  char *v35; // r0
  int v36; // r6
  bool v37; // cc
  int v38; // r1
  char v39; // r0
  char *v40; // r1
  _DWORD *v41; // r6
  int v42; // r2
  int v43; // r3
  bool v44; // zf
  int v45; // r4
  int v46; // r0
  bool v47; // zf
  int v48; // r4
  const char *v49; // r0
  char *v50; // r5
  size_t v51; // r6
  size_t v52; // r0
  int v53; // r0
  int v54; // r4
  const char *v55; // r6
  int v56; // r0
  const char *v57; // r5
  bool v58; // zf
  int v59; // r4
  const char *v60; // r0
  int v61; // r0
  int v62; // r0
  bool v63; // zf
  const char *v64; // r5
  _BYTE *v65; // r0
  const char *v66; // r4
  bool v67; // zf
  const char *v68; // r0
  int is_ipnum; // r0
  int v70; // r6
  Curl_easy *v71; // r8
  int v72; // r0
  int v73; // r0
  size_t v74; // r0
  size_t v75; // r7
  const char *v76; // r8
  int v77; // r0
  int v78; // r4
  int v79; // r0
  int v80; // r2
  int v81; // r0
  int v82; // r0
  char *v83; // r0
  char *v84; // r0
  char *v85; // r0
  const char *v86; // r8
  int v87; // r10
  int v88; // r4
  int (__fastcall **v89)(const char *); // r5
  const char *v90; // r0
  int v91; // r0
  bool v92; // cf
  int v93; // r1
  int v94; // r0
  const char *v95; // r0
  char *v96; // r6
  int (__fastcall **v97)(const char *); // r9
  size_t v98; // r5
  size_t v99; // r0
  int v100; // r0
  int (__fastcall **v101)(const char *); // r6
  int v102; // r5
  int v103; // r0
  _BOOL4 v104; // r1
  int v105; // r0
  char *v106; // r0
  int v107; // r0
  bool v108; // zf
  void (__fastcall **v109)(int); // r4
  _DWORD *v111; // r4
  void (__fastcall **v112)(_DWORD *); // r6
  _DWORD *v113; // r4
  void (__fastcall **v114)(_DWORD *); // r5
  void (__fastcall **v115)(_DWORD *); // r4
  int v116; // r0
  _DWORD *v117; // r6
  char *v118; // r0
  char *v119; // r0
  int v120; // r4
  void *v121; // r0
  const char *v122; // r0
  char *v123; // r5
  size_t v124; // r6
  size_t v125; // r0
  int v126; // r0
  int v127; // r0
  int v128; // r4
  time_t v129; // r9
  curl_off_t *p_next_expiration; // r7
  int next_expiration_high; // r1
  int v132; // r6
  CookieInfo *v133; // r7
  Cookie *next; // r0
  Cookie **v135; // r10
  Cookie *v136; // r8
  char v137; // r9
  Cookie *v138; // r4
  int v139; // r1
  char *v140; // r0
  const char *spath; // r6
  int v142; // r5
  bool v143; // zf
  bool v144; // zf
  char *v145; // r0
  size_t v146; // r2
  char *v147; // r0
  int v148; // r1
  int v149; // r0
  char v150; // r0
  char *v151; // r0
  int v152; // r1
  _DWORD *v153; // r5
  bool v154; // zf
  void (__fastcall **v155)(_DWORD *); // r4
  const char *v156; // r0
  bool v157; // zf
  void (__fastcall **v158)(int); // r4
  Cookie *creationtime; // r2
  char *name; // r0
  void (__fastcall **v161)(char *); // r5
  char *v162; // r2
  char *v163; // r3
  char *v164; // r5
  char *v165; // r6
  char *v166; // r7
  Cookie *v167; // r2
  Cookie *v168; // r3
  Cookie *v169; // r5
  Cookie *v170; // r6
  Cookie *v171; // r7
  Curl_easy *v172; // r0
  _DWORD *v173; // r5
  Cookie *v174; // r4
  Cookie **p_next; // r8
  Cookie *v176; // r6
  curl_off_t expires; // r0
  bool v178; // zf
  __int64 v179; // r0
  curl_off_t *v180; // r7
  unsigned int next_expiration; // t1
  const char *v182; // r2
  void (__fastcall **v183)(int); // r4
  __int64 v184; // [sp+1Ch] [bp-CCh]
  int v185; // [sp+24h] [bp-C4h]
  char v186; // [sp+28h] [bp-C0h]
  char *v187; // [sp+2Ch] [bp-BCh]
  int v189; // [sp+34h] [bp-B4h]
  Curl_easy *v190; // [sp+38h] [bp-B0h]
  unsigned int v191; // [sp+3Ch] [bp-ACh]
  time_t v192; // [sp+40h] [bp-A8h]
  int v193; // [sp+40h] [bp-A8h]
  size_t v194; // [sp+40h] [bp-A8h]
  int v195; // [sp+40h] [bp-A8h]
  CookieInfo *v196; // [sp+44h] [bp-A4h]
  int v197; // [sp+48h] [bp-A0h]
  char *dest[39]; // [sp+4Ch] [bp-9Ch] BYREF

  v12 = 0;
  v192 = time(0u);
  if ( data->req.setcookies > 0x31u )
    return (Cookie *)v12;
  v13 = ((int (__fastcall *)(int, int))*Curl_ccalloc)(1, 48);
  if ( !v13 )
    return (Cookie *)v12;
  j = (char *)lineptr;
  v15 = v13;
  v189 = noexpire;
  v190 = data;
  v197 = v13;
  v196 = c;
  if ( !httpheader )
  {
    dest[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      j = (char *)(lineptr + 0xA);
      *(_BYTE *)(v15 + 35) = 1;
    }
    if ( *j == 35 )
      goto LABEL_9;
    v83 = strchr(j, 13);
    if ( v83 )
      *v83 = 0;
    v84 = strchr(j, 10);
    if ( v84 )
      *v84 = 0;
    v85 = strtok_r(j, "\t", dest);
    if ( !v85 )
      goto LABEL_216;
    v86 = v85;
    v87 = 0;
    v88 = 0;
    v193 = v15 + 0x18;
    v89 = (int (__fastcall **)(const char *))Curl_cstrdup;
    while ( 1 )
    {
      switch ( v87 )
      {
        case 0:
          v90 = v86 + 1;
          if ( *v86 != 46 )
            v90 = v86;
          v91 = (*v89)(v90);
          v92 = v91 == 0;
          v93 = -v91;
          *(_DWORD *)(v15 + 20) = v91;
          v87 = 0;
          goto LABEL_188;
        case 1:
          v87 = 1;
          *(_BYTE *)(v15 + 32) = curl_strequal(v86, "TRUE") != 0;
          goto LABEL_208;
        case 2:
          if ( !strcmp("TRUE", v86) || !strcmp("FALSE", v86) )
          {
            v101 = v89;
            v102 = (*v89)("/");
            *(_DWORD *)(v15 + 12) = v102;
            v103 = (*v101)("/");
            *(_DWORD *)(v15 + 16) = v103;
            v104 = v102 == 0;
            v89 = v101;
            v88 |= v104 || v103 == 0;
LABEL_190:
            *(_BYTE *)(v15 + 33) = 0;
            v87 = 3;
            if ( curl_strequal(v86, "TRUE") )
            {
              if ( secure || c->running )
              {
                *(_BYTE *)(v15 + 33) = 1;
                goto LABEL_208;
              }
LABEL_194:
              v88 = 1;
              goto LABEL_208;
            }
            goto LABEL_208;
          }
          v94 = (*v89)(v86);
          v87 = 2;
          *(_DWORD *)(v15 + 12) = v94;
          if ( !v94 )
            goto LABEL_194;
          v95 = (const char *)((int (*)(void))*v89)();
          if ( !v95 )
            goto LABEL_206;
          v96 = (char *)v95;
          v97 = v89;
          v98 = strlen(v95);
          if ( *v96 == 34 )
            memmove(v96, v96 + 1, v98--);
          if ( v98 )
          {
            v99 = v98 - 1;
            if ( v96[v98 - 1] == 34 )
            {
              --v98;
              v96[v99] = 0;
            }
          }
          else
          {
            v98 = 0;
          }
          if ( *v96 == 47 )
          {
            if ( v98 && v96[v98 - 1] == 47 )
              v96[v98 - 1] = 0;
            v89 = v97;
          }
          else
          {
            ((void (__fastcall *)(char *))*Curl_cfree)(v96);
            v105 = Curl_memdup("/", 2);
            v89 = v97;
            if ( v105 )
            {
              v96 = (char *)v105;
              *(_BYTE *)(v105 + 1) = 0;
            }
            else
            {
LABEL_206:
              v96 = 0;
            }
          }
          v15 = v197;
          v88 |= v96 == 0;
          *(_DWORD *)(v197 + 16) = v96;
LABEL_208:
          v106 = strtok_r(0u, "\t", dest);
          ++v87;
          if ( !v106 || (v86 = v106, (v88 & 1) != 0) )
          {
            if ( v87 == 6 )
            {
              v107 = (*v89)((const char *)&L_str_22);
              v87 = 7;
              *(_DWORD *)(v15 + 8) = v107;
              LOBYTE(v88) = v88 | (v107 == 0);
              if ( !v107 )
                v87 = 6;
            }
            v108 = (v88 & 1) == 0;
            if ( (v88 & 1) == 0 )
              v108 = v87 == 7;
            if ( !v108 )
            {
LABEL_216:
              v109 = (void (__fastcall **)(int))Curl_cfree;
              ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v15 + 20));
              (*v109)(*(_DWORD *)(v15 + 12));
              (*v109)(*(_DWORD *)(v15 + 16));
              (*v109)(*(_DWORD *)(v15 + 4));
              (*v109)(*(_DWORD *)(v15 + 8));
              (*v109)(v15);
              return 0;
            }
LABEL_256:
            v12 = 0;
            if ( (*(_BYTE *)(v15 + 40) & 1) != 0 && !*(_BYTE *)(v15 + 33) )
              goto LABEL_318;
            if ( (*(_BYTE *)(v15 + 40) & 2) != 0 )
            {
              v156 = (const char *)*(unsigned __int8 *)(v15 + 33);
              v157 = v156 == 0;
              if ( *(_BYTE *)(v15 + 33) )
              {
                v156 = *(const char **)(v15 + 12);
                v157 = v156 == 0;
              }
              if ( v157 || strcmp(v156, "/") || *(_BYTE *)(v15 + 32) )
                goto LABEL_318;
            }
            if ( !v196->running && v196->newsession && !*(_QWORD *)(v15 + 24) )
            {
LABEL_318:
              v158 = (void (__fastcall **)(int))Curl_cfree;
              ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v15 + 20));
              (*v158)(*(_DWORD *)(v15 + 12));
              (*v158)(*(_DWORD *)(v15 + 16));
              (*v158)(*(_DWORD *)(v15 + 4));
              (*v158)(*(_DWORD *)(v15 + 8));
              (*v158)(v15);
              return (Cookie *)v12;
            }
            *(_BYTE *)(v15 + 34) = v196->running;
            v127 = v196->lastct + 1;
            v196->lastct = v127;
            *(_DWORD *)(v15 + 36) = v127;
            if ( !v189 )
            {
              v128 = 0;
              v129 = time(0u);
              p_next_expiration = &v196->next_expiration;
              next_expiration_high = HIDWORD(v196->next_expiration);
              if ( (v129 >> 0x1F) - (next_expiration_high + !__CFSHR__(v129, 0x1F)) < 0 == __OFSUB__(
                                                                                             v129 >> 0x1F,
                                                                                             next_expiration_high,
                                                                                             __CFSHR__(v129, 0x1F))
                || !(~LODWORD(v196->next_expiration) | next_expiration_high ^ 0x7FFFFFFF) )
              {
                *(_DWORD *)p_next_expiration = -1;
                HIDWORD(v196->next_expiration) = 0x7FFFFFFF;
                v173 = (_DWORD *)Curl_cfree;
                do
                {
                  v195 = v128;
                  v174 = v196->cookies[v128];
                  if ( v174 )
                  {
                    p_next = 0;
                    do
                    {
                      while ( 1 )
                      {
                        v176 = v174;
                        v174 = v174->next;
                        expires = v176->expires;
                        if ( !expires || expires >= v129 )
                          break;
                        if ( p_next )
                          *p_next = v174;
                        else
                          v196->cookies[v195] = v174;
                        --v196->numcookies;
                        ((void (__fastcall *)(char *, _DWORD, _DWORD, _DWORD))*v173)(
                          v176->domain,
                          *v173,
                          expires | HIDWORD(expires),
                          (unsigned __int64)(expires - v129) >> 32);
                        ((void (__fastcall *)(char *))*v173)(v176->path);
                        ((void (__fastcall *)(char *))*v173)(v176->spath);
                        ((void (__fastcall *)(char *))*v173)(v176->name);
                        ((void (__fastcall *)(char *))*v173)(v176->value);
                        ((void (__fastcall *)(Cookie *))*v173)(v176);
                        if ( !v174 )
                          goto LABEL_330;
                      }
                      if ( expires && expires < *p_next_expiration )
                      {
                        *(_DWORD *)p_next_expiration = expires;
                        HIDWORD(v196->next_expiration) = HIDWORD(expires);
                      }
                      p_next = &v176->next;
                    }
                    while ( v174 );
                  }
LABEL_330:
                  v128 = v195 + 1;
                }
                while ( v195 != 0x3E );
              }
            }
            v132 = v197;
            v133 = v196;
            v194 = cookiehash(*(const char *const *)(v197 + 20));
            next = v196->cookies[v194];
            if ( !next )
            {
              v172 = v190;
              v138 = 0;
              v137 = 0;
              goto LABEL_346;
            }
            v135 = 0;
            v136 = 0;
            v137 = 0;
            while ( 2 )
            {
              v138 = next;
              if ( curl_strequal(next->name, *(_DWORD *)(v132 + 4)) )
              {
                v139 = *(_DWORD *)(v197 + 20);
                v140 = v138->domain;
                if ( v140 )
                {
                  if ( v139 && curl_strequal(v140, v139) )
                  {
LABEL_274:
                    spath = v138->spath;
                    if ( spath )
                    {
                      v142 = *(_DWORD *)(v197 + 16);
                      v143 = v142 == 0;
                      if ( v142 )
                        v143 = !v138->secure;
                      if ( !v143 )
                      {
                        v144 = *(_BYTE *)(v197 + 33) == 0;
                        if ( !*(_BYTE *)(v197 + 33) )
                          v144 = secure == 0;
                        if ( v144 )
                        {
                          v145 = strchr(spath + 1, 47);
                          v146 = v145 ? v145 - spath : strlen(spath);
                          if ( curl_strnequal(spath, v142, v146) )
                          {
                            v153 = (_DWORD *)v197;
                            v154 = v190 == 0;
                            if ( v190 )
                              v154 = (*((_BYTE *)&v190->set + 1338) & 0x10) == 0;
                            if ( !v154 )
                              Curl_infof(
                                v190,
                                "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                                *(const char **)(v197 + 4),
                                *(const char **)(v197 + 20));
                            v155 = (void (__fastcall **)(_DWORD *))Curl_cfree;
                            ((void (__fastcall *)(_DWORD))*Curl_cfree)(v153[5]);
                            (*v155)((_DWORD *)v153[3]);
                            (*v155)((_DWORD *)v153[4]);
                            (*v155)((_DWORD *)v153[1]);
                            (*v155)((_DWORD *)v153[2]);
                            (*v155)(v153);
                            return 0;
                          }
                        }
                      }
                    }
                  }
                }
                else if ( !v139 )
                {
                  goto LABEL_274;
                }
              }
              if ( v135 )
              {
                v132 = v197;
                goto LABEL_269;
              }
              v132 = v197;
              if ( curl_strequal(v138->name, *(_DWORD *)(v197 + 4)) )
              {
                v147 = v138->domain;
                v148 = *(_DWORD *)(v132 + 20);
                if ( v147 )
                {
                  if ( v148 && curl_strequal(v147, v148) )
                  {
                    LOBYTE(v149) = *(_BYTE *)(v132 + 32)
                                 - v138->tailmatch
                                 + (v138->tailmatch == *(unsigned __int8 *)(v132 + 32))
                                 + v138->tailmatch
                                 - *(_BYTE *)(v132 + 32);
                    goto LABEL_292;
                  }
                  v135 = 0;
                  if ( (v137 & 1) == 0 )
                  {
                    v137 = 0;
                    goto LABEL_269;
                  }
LABEL_293:
                  v151 = v138->spath;
                  v152 = *(_DWORD *)(v132 + 16);
                  if ( v151 )
                  {
                    if ( v152 )
                    {
                      if ( curl_strequal(v151, v152) )
                      {
                        v137 = 0;
                        v135 = 0;
                        if ( (v138->spath != 0) != (*(_DWORD *)(v132 + 16) == 0) )
                          goto LABEL_302;
LABEL_269:
                        next = v138->next;
                        if ( !v138->next )
                        {
                          if ( v135 )
                          {
                            creationtime = (Cookie *)v136->creationtime;
                            name = v136->name;
                            *v135 = v136->next;
                            v135[9] = creationtime;
                            v161 = (void (__fastcall **)(char *))Curl_cfree;
                            ((void (__fastcall *)(char *))*Curl_cfree)(name);
                            (*v161)(v136->value);
                            (*v161)(v136->domain);
                            (*v161)(v136->path);
                            (*v161)(v136->spath);
                            v162 = (char *)v135[1];
                            v163 = (char *)v135[2];
                            v164 = (char *)v135[3];
                            v165 = (char *)v135[4];
                            v166 = (char *)v135[5];
                            v136->next = *v135;
                            v136->name = v162;
                            v136->value = v163;
                            v136->path = v164;
                            v136->spath = v165;
                            v136->domain = v166;
                            v167 = v135[7];
                            v168 = v135[8];
                            v169 = v135[9];
                            v170 = v135[10];
                            v171 = v135[11];
                            LODWORD(v136->expires) = v135[6];
                            HIDWORD(v136->expires) = v167;
                            *(_DWORD *)&v136->tailmatch = v168;
                            v136->creationtime = (int)v169;
                            *(_DWORD *)&v136->prefix = v170;
                            *((_DWORD *)&v136->prefix + 1) = v171;
                            v133 = v196;
                            ((void (__fastcall *)(Cookie **))*Curl_cfree)(v135);
                            v132 = (int)v136;
                          }
                          v172 = v190;
LABEL_346:
                          if ( !v172 )
                            goto LABEL_351;
                          v178 = !v133->running;
                          if ( v133->running )
                            v178 = (*((_BYTE *)&v172->set + 1338) & 0x10) == 0;
                          if ( v178 )
                          {
LABEL_351:
                            if ( (v137 & 1) != 0 )
                              goto LABEL_356;
                          }
                          else
                          {
                            v133 = v196;
                            v182 = "Added";
                            if ( (v137 & 1) != 0 )
                              v182 = "Replaced";
                            Curl_infof(
                              v172,
                              "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
                              v182,
                              *(const char **)(v132 + 4),
                              *(const char **)(v132 + 8),
                              *(const char **)(v132 + 20),
                              *(const char **)(v132 + 12),
                              *(_QWORD *)(v132 + 24));
                            if ( (v137 & 1) != 0 )
                            {
LABEL_356:
                              v179 = *(_QWORD *)(v132 + 24);
                              if ( v179 )
                              {
                                next_expiration = v133->next_expiration;
                                v180 = &v133->next_expiration;
                                if ( v179 < __SPAIR64__(*((_DWORD *)v180 + 1), next_expiration) )
                                  *v180 = v179;
                              }
                              return (Cookie *)v132;
                            }
                          }
                          if ( v138 )
                            v138->next = (Cookie *)v132;
                          else
                            v133->cookies[v194] = (Cookie *)v132;
                          ++v133->numcookies;
                          goto LABEL_356;
                        }
                        continue;
                      }
                    }
                    else if ( *(_DWORD *)(v132 + 16) )
                    {
LABEL_302:
                      v137 = 1;
                      if ( *(_BYTE *)(v132 + 34) )
                      {
                        v136 = v138;
                        v135 = (Cookie **)v132;
                      }
                      else
                      {
                        v136 = v138;
                        v135 = (Cookie **)v132;
                        if ( v138->livecookie )
                        {
                          v183 = (void (__fastcall **)(int))Curl_cfree;
                          ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v132 + 20));
                          (*v183)(*(_DWORD *)(v132 + 12));
                          (*v183)(*(_DWORD *)(v132 + 16));
                          (*v183)(*(_DWORD *)(v132 + 4));
                          (*v183)(*(_DWORD *)(v132 + 8));
                          (*v183)(v132);
                          return 0;
                        }
                      }
                      goto LABEL_269;
                    }
                    v137 = 0;
                    v135 = 0;
                    goto LABEL_269;
                  }
                  v137 = 0;
                  v135 = 0;
                  if ( !v152 )
                    goto LABEL_302;
                  goto LABEL_269;
                }
                v149 = v148 == 0;
LABEL_292:
                v150 = v137 | v149;
                v137 = 0;
                if ( (v150 & 1) != 0 )
                  goto LABEL_293;
              }
              break;
            }
            v135 = 0;
            goto LABEL_269;
          }
          break;
        case 3:
          goto LABEL_190;
        case 4:
          v87 = 4;
          v88 |= curlx_strtoofft(v86, 0, 10, v193) != 0;
          goto LABEL_208;
        case 5:
          v100 = (*v89)(v86);
          v87 = 5;
          *(_DWORD *)(v15 + 4) = v100;
          if ( !v100 )
            goto LABEL_194;
          if ( curl_strnequal("__Secure-", v100, 9) )
          {
            *(_BYTE *)(v15 + 40) |= 1u;
          }
          else if ( curl_strnequal("__Host-", *(_DWORD *)(v15 + 4), 7) )
          {
            *(_BYTE *)(v15 + 40) |= 2u;
          }
          goto LABEL_208;
        case 6:
          v91 = (*v89)(v86);
          v92 = v91 == 0;
          v93 = -v91;
          *(_DWORD *)(v15 + 8) = v91;
          v87 = 6;
LABEL_188:
          v88 |= v93 + v92 + v91;
          goto LABEL_208;
        default:
          goto LABEL_208;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_9:
    ((void (__fastcall *)(int))*Curl_cfree)(v15);
    return 0;
  }
  v187 = (char *)&data->set + 1335;
  v185 = v15 + 0x18;
  v186 = 0;
  while ( 1 )
  {
    for ( i = j + 1; ; ++i )
    {
      v17 = (unsigned __int8)*j;
      v18 = v17 == 32;
      if ( v17 != 32 )
        v18 = v17 == 9;
      if ( !v18 )
        break;
      ++j;
    }
    v19 = strcspn(j, ";\t\r\n=");
    if ( !v19 )
    {
      v21 = j;
      goto LABEL_26;
    }
    v20 = v19;
    v21 = &j[v19];
    v22 = v19 - 1;
    do
    {
      v23 = (unsigned __int8)j[v22];
      v24 = v23 == 32;
      if ( v23 != 32 )
        v24 = v23 == 9;
      if ( !v24 )
      {
        v27 = v22 + 1;
        goto LABEL_32;
      }
      --v22;
    }
    while ( v22 != -1 );
    v27 = 0;
LABEL_32:
    if ( *v21 == 61 )
      break;
    v34 = 0;
    v36 = 0;
    v31 = 0;
LABEL_45:
    v37 = v27 > 0xFFE;
    if ( v27 <= 0xFFE )
      v37 = v34 > 0xFFE;
    if ( v37 || v34 + v27 > 0x1000 )
    {
      v111 = (_DWORD *)v197;
      v112 = (void (__fastcall **)(_DWORD *))Curl_cfree;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v197 + 20));
      (*v112)((_DWORD *)v111[3]);
      (*v112)((_DWORD *)v111[4]);
      (*v112)((_DWORD *)v111[1]);
      (*v112)((_DWORD *)v111[2]);
      (*v112)(v111);
      v12 = 0;
      if ( (v187[3] & 0x10) != 0 )
        Curl_infof(v190, "oversized cookie dropped, name/val %zu + %zu bytes", v27, v34);
      return (Cookie *)v12;
    }
    if ( v17 != 95 || v27 < 7 || j[1] != 95 )
      goto LABEL_63;
    if ( curl_strnequal("__Secure-", j, 9) )
    {
      v38 = v197;
      v39 = *(_BYTE *)(v197 + 40) | 1;
LABEL_62:
      *(_BYTE *)(v38 + 40) = v39;
      goto LABEL_63;
    }
    if ( curl_strnequal("__Host-", j, 7) )
    {
      v38 = v197;
      v39 = *(_BYTE *)(v197 + 40) | 2;
      goto LABEL_62;
    }
LABEL_63:
    if ( !*(_DWORD *)(v197 + 4) )
    {
      if ( !v36 )
        goto LABEL_222;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(0);
      v53 = Curl_memdup(j, v27 + 1);
      v54 = v197;
      v55 = 0;
      *(_DWORD *)(v197 + 4) = v53;
      if ( v53 )
        *(_BYTE *)(v53 + v27) = 0;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v54 + 8));
      v56 = Curl_memdup(v31, v34 + 1);
      *(_DWORD *)(v54 + 8) = v56;
      if ( v56 )
        *(_BYTE *)(v56 + v34) = 0;
      v57 = *(const char **)(v54 + 4);
      v58 = v57 == 0;
      if ( v57 )
      {
        v55 = *(const char **)(v197 + 8);
        v58 = v55 == 0;
      }
      if ( v58 )
        goto LABEL_222;
      if ( v55[strcspn(v55, invalid_octets_badoctets)] || v57[strcspn(v57, invalid_octets_badoctets)] )
      {
        if ( (v187[3] & 0x10) != 0 )
          Curl_infof(v190, "invalid octets in name/value, cookie dropped");
LABEL_222:
        v113 = (_DWORD *)v197;
        v114 = (void (__fastcall **)(_DWORD *))Curl_cfree;
        ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v197 + 20));
        (*v114)((_DWORD *)v113[3]);
        (*v114)((_DWORD *)v113[4]);
        (*v114)((_DWORD *)v113[1]);
        (*v114)((_DWORD *)v113[2]);
        (*v114)(v113);
        return 0;
      }
      goto LABEL_26;
    }
    if ( v34 )
      goto LABEL_65;
    if ( v27 == 8 )
    {
      if ( curl_strnequal("httponly", j, 8) )
      {
        *(_BYTE *)(v197 + 35) = 1;
        goto LABEL_26;
      }
    }
    else if ( v27 == 6 && curl_strnequal("secure", j, 6) )
    {
      if ( !secure && v196->running )
        goto LABEL_222;
      *(_BYTE *)(v197 + 33) = 1;
      goto LABEL_26;
    }
    if ( v36 )
    {
LABEL_65:
      if ( v27 == 7 )
      {
        if ( curl_strnequal("version", j, 7) )
          goto LABEL_26;
        if ( !curl_strnequal("max-age", j, 7) )
        {
          if ( !curl_strnequal("expires", j, 7) )
            goto LABEL_26;
          v59 = v185;
          if ( v34 > 0x7F || *(_QWORD *)v185 )
            goto LABEL_26;
          memcpy(dest, v31, v34);
          *((_BYTE *)dest + v34) = 0;
          v72 = Curl_getdate_capped(dest);
          *(_QWORD *)v185 = v72;
          if ( !v72 )
          {
            *(_DWORD *)v185 = 1;
            *(_DWORD *)(v185 + 4) = 0;
            goto LABEL_26;
          }
          if ( v72 > -1 )
            goto LABEL_26;
          v73 = 0;
          *(_DWORD *)v185 = 0;
LABEL_154:
          *(_DWORD *)(v59 + 4) = v73;
          goto LABEL_26;
        }
        v59 = v185;
        v60 = v31 + 1;
        if ( *v31 != 34 )
          v60 = v31;
        v61 = curlx_strtoofft(v60, 0, 10, v185);
        if ( v61 )
        {
          if ( v61 == 2 )
          {
LABEL_155:
            *(_DWORD *)v185 = 1;
            *(_DWORD *)(v185 + 4) = 0;
            goto LABEL_26;
          }
          if ( v61 != 1 )
            goto LABEL_26;
LABEL_153:
          *(_DWORD *)v185 = -1;
          v73 = 0x7FFFFFFF;
          goto LABEL_154;
        }
        if ( !*(_QWORD *)v185 )
          goto LABEL_155;
        LODWORD(v184) = ~v192;
        HIDWORD(v184) = 0x7FFFFFFF - (v192 >> 0x1F);
        if ( v184 < *(_QWORD *)v185 )
          goto LABEL_153;
        *(_QWORD *)v185 += v192;
      }
      else
      {
        v45 = v197;
        if ( v27 != 6 )
        {
          if ( v27 == 4 && curl_strnequal("path", j, 4) )
          {
            ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v45 + 12));
            v46 = Curl_memdup(v31, v34 + 1);
            v47 = v46 == 0;
            *(_DWORD *)(v45 + 12) = v46;
            if ( v46 )
            {
              *(_BYTE *)(v46 + v34) = 0;
              v47 = *(_DWORD *)(v197 + 12) == 0;
            }
            if ( v47 )
              goto LABEL_222;
            v48 = v197;
            ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v197 + 16));
            v49 = (const char *)((int (__fastcall *)(_DWORD))*Curl_cstrdup)(*(_DWORD *)(v48 + 12));
            if ( !v49 )
              goto LABEL_244;
            v50 = (char *)v49;
            v51 = strlen(v49);
            if ( *v50 == 34 )
              memmove(v50, v50 + 1, v51--);
            if ( v51 )
            {
              v52 = v51 - 1;
              if ( v50[v51 - 1] == 34 )
              {
                --v51;
                v50[v52] = 0;
              }
            }
            else
            {
              v51 = 0;
            }
            if ( *v50 == 47 )
            {
              if ( v51 && v50[v51 - 1] == 47 )
                v50[v51 - 1] = 0;
              *(_DWORD *)(v197 + 16) = v50;
            }
            else
            {
              ((void (__fastcall *)(char *))*Curl_cfree)(v50);
              v77 = Curl_memdup("/", 2);
              v48 = v197;
              if ( !v77 )
              {
LABEL_244:
                *(_DWORD *)(v48 + 16) = 0;
                goto LABEL_222;
              }
              *(_BYTE *)(v77 + 1) = 0;
              *(_DWORD *)(v48 + 16) = v77;
            }
          }
          goto LABEL_26;
        }
        v62 = curl_strnequal("domain", j, 6);
        v63 = v34 == 0;
        if ( v34 )
          v63 = v62 == 0;
        if ( !v63 )
        {
          v64 = v31 + 1;
          if ( *v31 == 46 )
            --v34;
          else
            v64 = v31;
          if ( v34 == 9 && curl_strnequal(v64, "localhost", 9)
            || (v65 = memchr(v64, 46, v34)) != 0 && (unsigned int)(&v64[v34] - v65) > 1 )
          {
            v66 = domain;
            v68 = v64;
            if ( domain )
              v68 = domain;
            is_ipnum = Curl_host_is_ipnum(v68);
            v70 = is_ipnum;
            if ( !domain )
            {
              v66 = 0;
LABEL_146:
              domain = v66;
              v78 = v197;
              ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v197 + 20));
              v79 = Curl_memdup(v64, v34 + 1);
              *(_DWORD *)(v78 + 20) = v79;
              if ( !v79 )
                goto LABEL_222;
              v80 = v197;
              *(_BYTE *)(v79 + v34) = 0;
              v81 = *(_DWORD *)(v197 + 20);
              if ( v70 | (v81 == 0) )
              {
                if ( !v81 )
                  goto LABEL_222;
                v186 |= v81 == 0;
              }
              else
              {
                *(_BYTE *)(v80 + 32) = 1;
              }
              goto LABEL_26;
            }
            v67 = is_ipnum == 0;
          }
          else
          {
            v66 = ":";
            v67 = Curl_host_is_ipnum(":") == 0;
          }
          v71 = v190;
          if ( v67 )
          {
            v74 = strlen(v66);
            if ( v74 >= v34 )
            {
              v75 = v74;
              v76 = &v66[v74 - v34];
              if ( curl_strnequal(v64, v76, v34) )
              {
                v70 = 0;
                if ( v75 == v34 )
                  goto LABEL_146;
                v82 = *((unsigned __int8 *)v76 - 1);
                v71 = v190;
                if ( v82 == 46 )
                  goto LABEL_146;
              }
              else
              {
                v71 = v190;
              }
            }
          }
          else if ( !strncmp(v64, v66, v34) )
          {
            v70 = 1;
            if ( v34 == strlen(v66) )
              goto LABEL_146;
          }
          domain = v66;
          v186 = 1;
          if ( (v187[3] & 0x10) != 0 )
            Curl_infof(v71, "skipped cookie with bad tailmatch domain: %s", v64);
        }
      }
    }
LABEL_26:
    for ( j = v21 + 1; ; ++j )
    {
      v25 = (unsigned __int8)*(j - 1);
      v26 = v25 == 32;
      if ( v25 != 32 )
        v26 = v25 == 9;
      if ( !v26 )
        break;
    }
    if ( v25 != 59 )
    {
      if ( (v186 & 1) != 0 )
        goto LABEL_222;
      if ( domain )
      {
        if ( !*(_DWORD *)(v197 + 20) )
        {
          v116 = ((int (__fastcall *)(const char *))*Curl_cstrdup)(domain);
          *(_DWORD *)(v197 + 20) = v116;
          if ( !v116 )
            goto LABEL_222;
        }
      }
      v117 = (_DWORD *)v197;
      if ( !path || *(_DWORD *)(v197 + 12) )
        goto LABEL_254;
      v118 = strchr(path, 63);
      v119 = v118 ? (char *)Curl_memrchr(path, 47, v118 - path) : strrchr(path, 47);
      if ( !v119 )
        goto LABEL_254;
      v120 = v119 - path;
      v121 = (void *)((int (__fastcall *)(int))*Curl_cmalloc)(v119 - path + 2);
      v117[3] = v121;
      if ( !v121 )
        goto LABEL_222;
      memcpy(v121, path, v120 + 1);
      v117 = (_DWORD *)v197;
      *(_BYTE *)(*(_DWORD *)(v197 + 12) + v120 + 1) = 0;
      v122 = (const char *)((int (__fastcall *)(_DWORD))*Curl_cstrdup)(*(_DWORD *)(v197 + 12));
      if ( v122 )
      {
        v123 = (char *)v122;
        v124 = strlen(v122);
        if ( *v123 == 34 )
          memmove(v123, v123 + 1, v124--);
        if ( v124 )
        {
          v125 = v124 - 1;
          if ( v123[v124 - 1] == 34 )
          {
            --v124;
            v123[v125] = 0;
          }
        }
        else
        {
          v124 = 0;
        }
        if ( *v123 == 47 )
        {
          if ( v124 && v123[v124 - 1] == 47 )
            v123[v124 - 1] = 0;
          v117 = (_DWORD *)v197;
          goto LABEL_253;
        }
        ((void (__fastcall *)(char *))*Curl_cfree)(v123);
        v126 = Curl_memdup("/", 2);
        v117 = (_DWORD *)v197;
        if ( v126 )
        {
          v123 = (char *)v126;
          *(_BYTE *)(v126 + 1) = 0;
LABEL_253:
          v117[4] = v123;
LABEL_254:
          if ( !v117[1] )
            goto LABEL_222;
          v15 = v197;
          ++v190->req.setcookies;
          goto LABEL_256;
        }
      }
      v117[4] = 0;
      goto LABEL_222;
    }
  }
  v191 = v27;
  v28 = &j[v20 + 1];
  v29 = strcspn(v28, ";\r\n");
  v30 = v20 + v29;
  if ( v29 )
  {
    v31 = &i[v30];
    while ( 1 )
    {
      v32 = *((unsigned __int8 *)v31 - 1);
      v33 = v32 == 32;
      if ( v32 != 32 )
        v33 = v32 == 9;
      if ( !v33 )
        break;
      --v29;
      --v31;
      if ( !v29 )
        goto LABEL_40;
    }
    v40 = &i[v20];
    v41 = (_DWORD *)v197;
    v42 = 0;
    while ( 1 )
    {
      v43 = (unsigned __int8)v40[v42];
      v44 = v43 == 32;
      if ( v43 != 32 )
        v44 = v43 == 9;
      if ( !v44 )
        break;
      if ( v29 == ++v42 )
        goto LABEL_41;
    }
    v34 = v29 - v42;
    v31 = &v40[v42];
  }
  else
  {
LABEL_40:
    v41 = (_DWORD *)v197;
    v31 = v28;
LABEL_41:
    v34 = 0;
  }
  if ( !memchr(v31, 9, v34) )
  {
    v35 = &j[v30];
    v27 = v191;
    v36 = 1;
    v21 = v35 + 1;
    goto LABEL_45;
  }
  v115 = (void (__fastcall **)(_DWORD *))Curl_cfree;
  ((void (__fastcall *)(_DWORD))*Curl_cfree)(v41[5]);
  (*v115)((_DWORD *)v41[3]);
  (*v115)((_DWORD *)v41[4]);
  (*v115)((_DWORD *)v41[1]);
  (*v115)((_DWORD *)v41[2]);
  (*v115)(v41);
  v12 = 0;
  if ( (v187[3] & 0x10) != 0 )
    Curl_infof(v190, "cookie contains TAB, dropping");
  return (Cookie *)v12;
}
