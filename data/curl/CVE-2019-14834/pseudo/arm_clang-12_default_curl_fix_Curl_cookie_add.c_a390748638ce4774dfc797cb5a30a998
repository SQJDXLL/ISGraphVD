Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  int v12; // r11
  time_t v13; // r7
  int v14; // r0
  char *j; // r11
  int v16; // r8
  char *i; // r8
  int v18; // r4
  bool v19; // zf
  size_t v20; // r0
  size_t v21; // r6
  char *v22; // r2
  size_t v23; // r0
  int v24; // r1
  bool v25; // zf
  char *v26; // r8
  int v27; // r1
  bool v28; // zf
  unsigned int v29; // r10
  size_t v30; // r5
  char *v31; // r7
  size_t v32; // r0
  size_t v33; // r9
  int v34; // r1
  bool v35; // zf
  char *v36; // r0
  bool v37; // cc
  char v38; // r0
  char *v39; // r1
  int v40; // r2
  int v41; // r3
  bool v42; // zf
  int v43; // r0
  const char *v44; // r0
  char *v45; // r6
  size_t v46; // r7
  const char *v47; // r6
  const char *v48; // r5
  int v49; // r0
  void (__fastcall *v50)(_DWORD); // r1
  int v51; // r0
  bool v52; // zf
  int v53; // r4
  char *v54; // r0
  int v55; // r0
  int v56; // r0
  bool v57; // zf
  const char *v58; // r10
  _BYTE *v59; // r0
  const char *v60; // r7
  const char *v61; // r0
  int is_ipnum; // r0
  int v63; // r6
  size_t v64; // r0
  size_t v65; // r11
  const char *v66; // r6
  const char *v67; // r0
  bool v68; // zf
  int v69; // r0
  int v70; // r0
  int v71; // r0
  int v72; // r0
  char *v73; // r0
  char *v74; // r0
  char *v75; // r0
  const char *v76; // r5
  int v77; // r9
  int (**v78)(void); // r7
  int v79; // r6
  const char *v80; // r0
  int v81; // r0
  int v82; // r0
  const char *v83; // r0
  char *v84; // r5
  size_t v85; // r6
  size_t v86; // r0
  int v87; // r0
  char v88; // r0
  int v89; // r0
  int v90; // r0
  int (*v91)(void); // r1
  int v92; // r6
  int v93; // r0
  char *v94; // r0
  size_t v95; // r6
  void (__fastcall **v96)(int); // r5
  int v97; // r0
  bool v98; // zf
  void (__fastcall **v99)(int); // r4
  CookieInfo *v101; // r3
  int v102; // r0
  int v103; // r8
  time_t v104; // r9
  curl_off_t *p_next_expiration; // r11
  int next_expiration_high; // r1
  Cookie *v107; // r4
  size_t v108; // r0
  CookieInfo *v109; // r6
  Cookie *next; // r0
  Cookie **v111; // r9
  Cookie *v112; // r11
  char v113; // r10
  Cookie *v114; // r5
  char *v115; // r0
  int v116; // r1
  const char *spath; // r6
  int v118; // r8
  bool v119; // zf
  bool v120; // zf
  char *v121; // r0
  size_t v122; // r2
  char *v123; // r0
  int v124; // r1
  char v125; // r0
  char v126; // r0
  char *v127; // r0
  int v128; // r1
  bool v129; // zf
  void (__fastcall **v130)(int); // r4
  const char *v131; // r0
  bool v132; // zf
  void (__fastcall **v133)(int); // r4
  void (__fastcall **v134)(int); // r5
  int creationtime; // r2
  char *name; // r0
  void (__fastcall **v137)(Cookie **); // r8
  char *v138; // r2
  char *v139; // r3
  char *v140; // r4
  char *v141; // r6
  char *v142; // r7
  Cookie *v143; // r2
  Cookie *v144; // r3
  int v145; // r4
  Cookie *v146; // r6
  Cookie *v147; // r7
  bool v148; // zf
  __int64 v149; // r0
  curl_off_t *v150; // r6
  unsigned int next_expiration; // t1
  int v152; // r0
  char *v153; // r0
  char *v154; // r0
  _DWORD *v155; // r5
  Cookie *v156; // r4
  Cookie **p_next; // r7
  Cookie *v158; // r6
  curl_off_t expires; // r0
  int v160; // r2
  int v161; // r3
  CookieInfo *v162; // r1
  const char *v163; // r2
  void (__fastcall **v164)(int); // r5
  int v165; // r4
  void *v166; // r0
  const char *v167; // r0
  char *v168; // r5
  size_t v169; // r6
  size_t v170; // r0
  int v171; // r0
  __int64 v172; // [sp+1Ch] [bp-D4h]
  int v173; // [sp+24h] [bp-CCh]
  char *v174; // [sp+28h] [bp-C8h]
  char v175; // [sp+2Ch] [bp-C4h]
  int v177; // [sp+34h] [bp-BCh]
  Curl_easy *v178; // [sp+38h] [bp-B8h]
  Curl_easy *v179; // [sp+38h] [bp-B8h]
  Curl_easy *v180; // [sp+38h] [bp-B8h]
  time_t v181; // [sp+3Ch] [bp-B4h]
  int v182; // [sp+40h] [bp-B0h]
  size_t v183; // [sp+40h] [bp-B0h]
  int v184; // [sp+44h] [bp-ACh]
  CookieInfo *v185; // [sp+48h] [bp-A8h]
  char *dest[41]; // [sp+4Ch] [bp-A4h] BYREF

  v12 = 0;
  v13 = time(0u);
  if ( data->req.setcookies > 0x31u )
    return (Cookie *)v12;
  v14 = ((int (__fastcall *)(int, int))*Curl_ccalloc)(1, 48);
  if ( !v14 )
    return (Cookie *)v12;
  j = (char *)lineptr;
  v16 = v14;
  v181 = v13;
  v177 = noexpire;
  v185 = c;
  v184 = v14;
  if ( !httpheader )
  {
    dest[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      j = (char *)(lineptr + 0xA);
      *(_BYTE *)(v16 + 35) = 1;
    }
    if ( *j == 35 )
      goto LABEL_154;
    v73 = strchr(j, 13);
    v179 = data;
    if ( v73 )
      *v73 = 0;
    v74 = strchr(j, 10);
    if ( v74 )
      *v74 = 0;
    v75 = strtok_r(j, "\t", dest);
    if ( !v75 )
    {
LABEL_210:
      v99 = (void (__fastcall **)(int))Curl_cfree;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v16 + 20));
      (*v99)(*(_DWORD *)(v16 + 12));
      (*v99)(*(_DWORD *)(v16 + 16));
      (*v99)(*(_DWORD *)(v16 + 4));
      (*v99)(*(_DWORD *)(v16 + 8));
      (*v99)(v16);
      return 0;
    }
    v76 = v75;
    v77 = 0;
    v78 = (int (**)(void))Curl_cstrdup;
    while ( 1 )
    {
      v79 = 0;
      switch ( v77 )
      {
        case 0:
          v80 = v76 + 1;
          if ( *v76 != 46 )
            v80 = v76;
          v81 = ((int (__fastcall *)(const char *))*v78)(v80);
          *(_DWORD *)(v16 + 20) = v81;
          v77 = 0;
          v79 = v81 == 0;
          goto LABEL_195;
        case 1:
          v77 = 1;
          v79 = 0;
          *(_BYTE *)(v16 + 32) = curl_strequal(v76, "TRUE") != 0;
          goto LABEL_195;
        case 2:
          if ( !strcmp("TRUE", v76) || !strcmp("FALSE", v76) )
          {
            v90 = ((int (__fastcall *)(const char *))*v78)("/");
            v91 = *v78;
            v92 = v90;
            *(_DWORD *)(v16 + 12) = v90;
            v93 = ((int (__fastcall *)(const char *))v91)("/");
            *(_DWORD *)(v16 + 16) = v93;
            v79 = v92 == 0 || v93 == 0;
            goto LABEL_186;
          }
          v82 = ((int (__fastcall *)(const char *))*v78)(v76);
          v77 = 2;
          *(_DWORD *)(v16 + 12) = v82;
          if ( !v82 )
            goto LABEL_190;
          v83 = (const char *)(*v78)();
          if ( !v83 )
          {
            v84 = 0;
            goto LABEL_201;
          }
          v84 = (char *)v83;
          v85 = strlen(v83);
          if ( *v84 == 34 )
            memmove(v84, v84 + 1, v85--);
          if ( !v85 )
          {
            if ( *v84 == 47 )
              goto LABEL_201;
LABEL_200:
            ((void (__fastcall *)(char *))*Curl_cfree)(v84);
            v84 = (char *)Curl_strndup("/", 1);
            goto LABEL_201;
          }
          v86 = v85 - 1;
          if ( v84[v85 - 1] == 34 )
          {
            --v85;
            v84[v86] = 0;
          }
          if ( *v84 != 47 )
            goto LABEL_200;
          if ( v85 && v84[v85 - 1] == 47 )
            v84[v85 - 1] = 0;
LABEL_201:
          *(_DWORD *)(v16 + 16) = v84;
          v79 = v84 == 0;
LABEL_195:
          v94 = strtok_r(0u, "\t", dest);
          ++v77;
          if ( v79 || (v76 = v94) == 0 )
          {
            if ( v77 == 6 )
            {
              v97 = ((int (__fastcall *)(void *))*v78)(&L_str_22);
              v77 = 7;
              *(_DWORD *)(v16 + 8) = v97;
              v79 |= v97 == 0;
              if ( !v97 )
                v77 = 6;
            }
            v98 = v79 == 0;
            if ( !v79 )
              v98 = v77 == 7;
            if ( !v98 )
              goto LABEL_210;
            data = v179;
LABEL_214:
            v12 = 0;
            if ( (*(_BYTE *)(v16 + 40) & 1) != 0 && !*(_BYTE *)(v16 + 33) )
              goto LABEL_275;
            if ( (*(_BYTE *)(v16 + 40) & 2) != 0 )
            {
              v131 = (const char *)*(unsigned __int8 *)(v16 + 33);
              v132 = v131 == 0;
              if ( *(_BYTE *)(v16 + 33) )
              {
                v131 = *(const char **)(v16 + 12);
                v132 = v131 == 0;
              }
              if ( v132 || strcmp(v131, "/") || *(_BYTE *)(v16 + 32) )
                goto LABEL_275;
            }
            v101 = v185;
            if ( !v185->running && v185->newsession && !*(_QWORD *)(v16 + 24) )
            {
LABEL_275:
              v133 = (void (__fastcall **)(int))Curl_cfree;
              ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v16 + 20));
              (*v133)(*(_DWORD *)(v16 + 12));
              (*v133)(*(_DWORD *)(v16 + 16));
              (*v133)(*(_DWORD *)(v16 + 4));
              (*v133)(*(_DWORD *)(v16 + 8));
              (*v133)(v16);
              return (Cookie *)v12;
            }
            *(_BYTE *)(v16 + 34) = v185->running;
            v180 = data;
            v102 = v101->lastct + 1;
            v101->lastct = v102;
            *(_DWORD *)(v16 + 36) = v102;
            if ( !v177 )
            {
              v103 = 0;
              v104 = time(0u);
              p_next_expiration = &v185->next_expiration;
              next_expiration_high = HIDWORD(v185->next_expiration);
              if ( (v104 >> 0x1F) - (next_expiration_high + !__CFSHR__(v104, 0x1F)) < 0 == __OFSUB__(
                                                                                             v104 >> 0x1F,
                                                                                             next_expiration_high,
                                                                                             __CFSHR__(v104, 0x1F))
                || !(~LODWORD(v185->next_expiration) | next_expiration_high ^ 0x7FFFFFFF) )
              {
                *(_DWORD *)p_next_expiration = -1;
                *((_DWORD *)p_next_expiration + 1) = 0x7FFFFFFF;
                v155 = (_DWORD *)Curl_cfree;
                do
                {
                  v156 = v185->cookies[v103];
                  if ( v156 )
                  {
                    p_next = 0;
                    do
                    {
                      while ( 1 )
                      {
                        v158 = v156;
                        v156 = v156->next;
                        expires = v158->expires;
                        v160 = expires | HIDWORD(expires);
                        if ( !expires )
                          break;
                        v161 = (unsigned __int64)(expires - v104) >> 32;
                        if ( expires >= v104 )
                          break;
                        v162 = v185;
                        if ( p_next )
                          *p_next = v156;
                        else
                          v185->cookies[v103] = v156;
                        --v162->numcookies;
                        ((void (__fastcall *)(char *, _DWORD, int, int))*v155)(v158->domain, *v155, v160, v161);
                        ((void (__fastcall *)(char *))*v155)(v158->path);
                        ((void (__fastcall *)(char *))*v155)(v158->spath);
                        ((void (__fastcall *)(char *))*v155)(v158->name);
                        ((void (__fastcall *)(char *))*v155)(v158->value);
                        ((void (__fastcall *)(Cookie *))*v155)(v158);
                        if ( !v156 )
                          goto LABEL_310;
                      }
                      if ( expires && expires < *p_next_expiration )
                        *p_next_expiration = expires;
                      p_next = &v158->next;
                    }
                    while ( v156 );
                  }
LABEL_310:
                  ++v103;
                }
                while ( v103 != 63 );
              }
            }
            v107 = (Cookie *)v184;
            v108 = cookiehash(*(const char *const *)(v184 + 20));
            v109 = v185;
            v183 = v108;
            next = v185->cookies[v108];
            if ( !next )
            {
              v114 = 0;
              v113 = 0;
              goto LABEL_285;
            }
            v111 = 0;
            v112 = 0;
            v113 = 0;
            while ( 2 )
            {
              v114 = next;
              if ( curl_strequal(next->name, *(_DWORD *)(v184 + 4)) )
              {
                v115 = v114->domain;
                v116 = *(_DWORD *)(v184 + 20);
                if ( v115 )
                {
                  if ( v116 && curl_strequal(v115, v116) )
                  {
LABEL_231:
                    spath = v114->spath;
                    if ( spath )
                    {
                      v118 = *(_DWORD *)(v184 + 16);
                      v119 = v118 == 0;
                      if ( v118 )
                        v119 = !v114->secure;
                      if ( !v119 )
                      {
                        v120 = *(_BYTE *)(v184 + 33) == 0;
                        if ( !*(_BYTE *)(v184 + 33) )
                          v120 = secure == 0;
                        if ( v120 )
                        {
                          v121 = strchr(spath + 1, 47);
                          v122 = v121 ? v121 - spath : strlen(spath);
                          if ( curl_strnequal(spath, v118, v122) )
                          {
                            v129 = v180 == 0;
                            if ( v180 )
                              v129 = (*((_BYTE *)&v180->set + 1337) & 0x20) == 0;
                            if ( !v129 )
                              Curl_infof(
                                v180,
                                "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                                *(const char **)(v184 + 4),
                                *(const char **)(v184 + 20));
LABEL_270:
                            v130 = (void (__fastcall **)(int))Curl_cfree;
                            ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v184 + 20));
                            (*v130)(*(_DWORD *)(v184 + 12));
                            (*v130)(*(_DWORD *)(v184 + 16));
                            (*v130)(*(_DWORD *)(v184 + 4));
                            (*v130)(*(_DWORD *)(v184 + 8));
                            (*v130)(v184);
                            return 0;
                          }
                        }
                      }
                    }
                  }
                }
                else if ( !v116 )
                {
                  goto LABEL_231;
                }
              }
              if ( v111 )
              {
LABEL_226:
                next = v114->next;
                if ( !v114->next )
                {
                  if ( v111 )
                  {
                    creationtime = v112->creationtime;
                    name = v112->name;
                    *v111 = v112->next;
                    v111[9] = (Cookie *)creationtime;
                    v137 = (void (__fastcall **)(Cookie **))Curl_cfree;
                    ((void (__fastcall *)(char *))*Curl_cfree)(name);
                    (*v137)((Cookie **)v112->value);
                    (*v137)((Cookie **)v112->domain);
                    (*v137)((Cookie **)v112->path);
                    (*v137)((Cookie **)v112->spath);
                    v138 = (char *)v111[1];
                    v139 = (char *)v111[2];
                    v140 = (char *)v111[3];
                    v141 = (char *)v111[4];
                    v142 = (char *)v111[5];
                    v112->next = *v111;
                    v112->name = v138;
                    v112->value = v139;
                    v112->path = v140;
                    v112->spath = v141;
                    v112->domain = v142;
                    v143 = v111[7];
                    v144 = v111[8];
                    v145 = (int)v111[9];
                    v146 = v111[10];
                    v147 = v111[11];
                    LODWORD(v112->expires) = v111[6];
                    HIDWORD(v112->expires) = v143;
                    *(_DWORD *)&v112->tailmatch = v144;
                    v112->creationtime = v145;
                    *(_DWORD *)&v112->prefix = v146;
                    *((_DWORD *)&v112->prefix + 1) = v147;
                    (*v137)(v111);
                    v107 = v112;
                  }
                  v109 = v185;
LABEL_285:
                  if ( !v180 )
                    goto LABEL_290;
                  v148 = !v109->running;
                  if ( v109->running )
                    v148 = (*((_BYTE *)&v180->set + 1337) & 0x20) == 0;
                  if ( v148 )
                  {
LABEL_290:
                    if ( (v113 & 1) != 0 )
                      goto LABEL_295;
                  }
                  else
                  {
                    v163 = "Added";
                    if ( (v113 & 1) != 0 )
                      v163 = "Replaced";
                    Curl_infof(
                      v180,
                      "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
                      v163,
                      v107->name,
                      v107->value,
                      v107->domain,
                      v107->path,
                      v107->expires);
                    if ( (v113 & 1) != 0 )
                    {
LABEL_295:
                      v149 = v107->expires;
                      if ( v149 )
                      {
                        next_expiration = v109->next_expiration;
                        v150 = &v109->next_expiration;
                        if ( v149 < __SPAIR64__(*((_DWORD *)v150 + 1), next_expiration) )
                          *v150 = v149;
                      }
                      return v107;
                    }
                  }
                  if ( v114 )
                    v114->next = v107;
                  else
                    v109->cookies[v183] = v107;
                  ++v109->numcookies;
                  goto LABEL_295;
                }
                continue;
              }
              break;
            }
            if ( curl_strequal(v114->name, *(_DWORD *)(v184 + 4)) )
            {
              v123 = v114->domain;
              v124 = *(_DWORD *)(v184 + 20);
              if ( v123 )
              {
                if ( v124 && curl_strequal(v123, v124) )
                {
                  v125 = *(_BYTE *)(v184 + 32)
                       - v114->tailmatch
                       + (v114->tailmatch == *(unsigned __int8 *)(v184 + 32))
                       + v114->tailmatch
                       - *(_BYTE *)(v184 + 32);
                  goto LABEL_249;
                }
                v111 = 0;
                if ( (v113 & 1) == 0 )
                {
                  v113 = 0;
                  goto LABEL_226;
                }
LABEL_250:
                v127 = v114->spath;
                v128 = *(_DWORD *)(v184 + 16);
                if ( !v127 )
                {
                  v113 = 0;
                  v111 = 0;
                  if ( v128 )
                    goto LABEL_226;
                  goto LABEL_259;
                }
                if ( v128 )
                {
                  if ( curl_strequal(v127, v128) )
                  {
                    v113 = 0;
                    v111 = 0;
                    if ( (v114->spath != 0) == (*(_DWORD *)(v184 + 16) == 0) )
                      goto LABEL_226;
                    goto LABEL_259;
                  }
                }
                else if ( *(_DWORD *)(v184 + 16) )
                {
LABEL_259:
                  v113 = 1;
                  if ( *(_BYTE *)(v184 + 34) )
                  {
                    v112 = v114;
                    v111 = (Cookie **)v184;
                  }
                  else
                  {
                    v112 = v114;
                    v111 = (Cookie **)v184;
                    if ( v114->livecookie )
                      goto LABEL_270;
                  }
                  goto LABEL_226;
                }
                v113 = 0;
                v111 = 0;
                goto LABEL_226;
              }
              v125 = v124 == 0;
LABEL_249:
              v126 = v113 | v125;
              v113 = 0;
              if ( (v126 & 1) != 0 )
                goto LABEL_250;
            }
            v111 = 0;
            goto LABEL_226;
          }
          break;
        case 3:
LABEL_186:
          *(_BYTE *)(v16 + 33) = 0;
          v77 = 3;
          if ( curl_strequal(v76, "TRUE") )
          {
            if ( !secure && !v185->running )
              goto LABEL_190;
            *(_BYTE *)(v16 + 33) = 1;
          }
          goto LABEL_195;
        case 4:
          v77 = 4;
          v79 = curlx_strtoofft(v76, 0, 10, v16 + 0x18) != 0;
          goto LABEL_195;
        case 5:
          v87 = ((int (__fastcall *)(const char *))*v78)(v76);
          v77 = 5;
          *(_DWORD *)(v16 + 4) = v87;
          if ( v87 )
          {
            if ( curl_strnequal("__Secure-", v87, 9) )
            {
              v88 = *(_BYTE *)(v16 + 40) | 1;
            }
            else
            {
              if ( !curl_strnequal("__Host-", *(_DWORD *)(v16 + 4), 7) )
                goto LABEL_194;
              v88 = *(_BYTE *)(v16 + 40) | 2;
            }
            *(_BYTE *)(v16 + 40) = v88;
            v79 = 0;
          }
          else
          {
LABEL_190:
            v79 = 1;
          }
          goto LABEL_195;
        case 6:
          v89 = ((int (__fastcall *)(const char *))*v78)(v76);
          v77 = 6;
          *(_DWORD *)(v16 + 8) = v89;
          v79 = v89 == 0;
          goto LABEL_195;
        default:
LABEL_194:
          v79 = 0;
          goto LABEL_195;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_154:
    ((void (__fastcall *)(int))*Curl_cfree)(v16);
    return 0;
  }
  v178 = data;
  HIDWORD(v172) = 0x7FFFFFFF - (v13 >> 0x1F);
  v174 = (char *)&data->set + 1334;
  LODWORD(v172) = ~v13;
  v173 = v16 + 0x18;
  v175 = 0;
  while ( 1 )
  {
    for ( i = j + 1; ; ++i )
    {
      v18 = (unsigned __int8)*j;
      v19 = v18 == 32;
      if ( v18 != 32 )
        v19 = v18 == 9;
      if ( !v19 )
        break;
      ++j;
    }
    v20 = strcspn(j, ";\t\r\n=");
    if ( !v20 )
    {
      v26 = j;
      goto LABEL_21;
    }
    v21 = v20;
    v22 = &j[v20];
    v23 = v20 - 1;
    do
    {
      v24 = (unsigned __int8)j[v23];
      v25 = v24 == 32;
      if ( v24 != 32 )
        v25 = v24 == 9;
      if ( !v25 )
      {
        v29 = v23 + 1;
        goto LABEL_29;
      }
      --v23;
    }
    while ( v23 != -1 );
    v29 = 0;
LABEL_29:
    v30 = 0;
    v31 = 0;
    v182 = (unsigned __int8)*v22;
    if ( v182 == 61 )
      break;
LABEL_41:
    v37 = v29 > 0xFFE;
    if ( v29 <= 0xFFE )
      v37 = v30 > 0xFFE;
    if ( v37 || v30 + v29 > 0x1000 )
    {
      v95 = v30;
      v96 = (void (__fastcall **)(int))Curl_cfree;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v184 + 20));
      (*v96)(*(_DWORD *)(v184 + 12));
      (*v96)(*(_DWORD *)(v184 + 16));
      (*v96)(*(_DWORD *)(v184 + 4));
      (*v96)(*(_DWORD *)(v184 + 8));
      (*v96)(v184);
      v12 = 0;
      if ( (v174[3] & 0x20) != 0 )
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v29, v95);
      return (Cookie *)v12;
    }
    v26 = v22;
    if ( v18 == 95 && v29 >= 7 && j[1] == 95 )
    {
      if ( curl_strnequal("__Secure-", j, 9) )
      {
        v38 = *(_BYTE *)(v184 + 40) | 1;
      }
      else
      {
        if ( !curl_strnequal("__Host-", j, 7) )
          goto LABEL_59;
        v38 = *(_BYTE *)(v184 + 40) | 2;
      }
      *(_BYTE *)(v184 + 40) = v38;
    }
LABEL_59:
    if ( !*(_DWORD *)(v184 + 4) )
    {
      if ( v182 != 61 )
        goto LABEL_277;
      v47 = (const char *)v30;
      v48 = (const char *)Curl_cfree;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(0);
      v49 = Curl_strndup(j, v29);
      v50 = *(void (__fastcall **)(_DWORD))v48;
      *(_DWORD *)(v184 + 4) = v49;
      v50(*(_DWORD *)(v184 + 8));
      v51 = Curl_strndup(v31, v47);
      v52 = v51 == 0;
      *(_DWORD *)(v184 + 8) = v51;
      if ( v51 )
      {
        v47 = (const char *)v51;
        v48 = *(const char **)(v184 + 4);
        v52 = v48 == 0;
      }
      if ( v52 )
        goto LABEL_277;
      if ( v47[strcspn(v47, invalid_octets_badoctets)] || v48[strcspn(v48, invalid_octets_badoctets)] )
      {
        if ( (v174[3] & 0x20) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
        goto LABEL_277;
      }
      goto LABEL_21;
    }
    if ( v30 )
      goto LABEL_61;
    if ( v29 == 8 )
    {
      if ( curl_strnequal("httponly", j, 8) )
      {
        *(_BYTE *)(v184 + 35) = 1;
        goto LABEL_21;
      }
    }
    else if ( v29 == 6 && curl_strnequal("secure", j, 6) )
    {
      if ( !secure && v185->running )
        goto LABEL_277;
      *(_BYTE *)(v184 + 33) = 1;
      goto LABEL_21;
    }
    if ( v182 == 61 )
    {
LABEL_61:
      if ( v29 != 7 )
      {
        if ( v29 != 6 )
        {
          if ( v29 == 4 && curl_strnequal("path", j, 4) )
          {
            ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v184 + 12));
            v43 = Curl_strndup(v31, v30);
            *(_DWORD *)(v184 + 12) = v43;
            if ( !v43 )
              goto LABEL_277;
            ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v184 + 16));
            v44 = (const char *)((int (__fastcall *)(_DWORD))*Curl_cstrdup)(*(_DWORD *)(v184 + 12));
            if ( !v44 )
            {
              *(_DWORD *)(v184 + 16) = 0;
              goto LABEL_277;
            }
            v45 = (char *)v44;
            v46 = strlen(v44);
            if ( *v45 == 34 )
              memmove(v45, v45 + 1, v46--);
            if ( v46 )
            {
              if ( v45[v46 - 1] == 34 )
                v45[--v46] = 0;
              if ( *v45 != 47 )
              {
LABEL_124:
                ((void (__fastcall *)(char *))*Curl_cfree)(v45);
                v69 = Curl_strndup("/", 1);
                *(_DWORD *)(v184 + 16) = v69;
                if ( !v69 )
                  goto LABEL_277;
                goto LABEL_21;
              }
              if ( v46 && v45[v46 - 1] == 47 )
                v45[v46 - 1] = 0;
            }
            else if ( *v45 != 47 )
            {
              goto LABEL_124;
            }
            *(_DWORD *)(v184 + 16) = v45;
          }
          goto LABEL_21;
        }
        v56 = curl_strnequal("domain", j, 6);
        v57 = v30 == 0;
        if ( v30 )
          v57 = v56 == 0;
        if ( v57 )
          goto LABEL_21;
        v58 = v31 + 1;
        if ( *v31 == 46 )
          --v30;
        else
          v58 = v31;
        if ( v30 == 9 && curl_strnequal(v58, "localhost", 9)
          || (v59 = memchr(v58, 46, v30)) != 0 && (unsigned int)(&v58[v30] - v59) > 1 )
        {
          v60 = domain;
          v61 = domain;
          if ( !domain )
            v61 = v58;
          is_ipnum = Curl_host_is_ipnum(v61);
          v63 = is_ipnum;
          if ( !domain )
          {
            v60 = 0;
LABEL_138:
            ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v184 + 20));
            v72 = Curl_strndup(v58, v30);
            *(_DWORD *)(v184 + 20) = v72;
            domain = v60;
            if ( !v63 && v72 )
            {
              *(_BYTE *)(v184 + 32) = 1;
              goto LABEL_21;
            }
            if ( !v72 )
            {
              v175 = 1;
LABEL_276:
              if ( (v175 & 1) == 0 )
              {
                if ( !domain
                  || *(_DWORD *)(v184 + 20)
                  || (v152 = ((int (__fastcall *)(const char *))*Curl_cstrdup)(domain),
                      (*(_DWORD *)(v184 + 20) = v152) != 0) )
                {
                  if ( !path || *(_DWORD *)(v184 + 12) )
                    goto LABEL_351;
                  v153 = strchr(path, 63);
                  v154 = v153 ? (char *)Curl_memrchr(path, 47, v153 - path) : strrchr(path, 47);
                  if ( !v154 )
                    goto LABEL_351;
                  v165 = v154 - path;
                  v166 = (void *)((int (__fastcall *)(int))*Curl_cmalloc)(v154 - path + 2);
                  *(_DWORD *)(v184 + 12) = v166;
                  if ( !v166 )
                    goto LABEL_277;
                  memcpy(v166, path, v165 + 1);
                  *(_BYTE *)(*(_DWORD *)(v184 + 12) + v165 + 1) = 0;
                  v167 = (const char *)((int (__fastcall *)(_DWORD))*Curl_cstrdup)(*(_DWORD *)(v184 + 12));
                  if ( !v167 )
                  {
                    *(_DWORD *)(v184 + 16) = 0;
                    goto LABEL_277;
                  }
                  v168 = (char *)v167;
                  v169 = strlen(v167);
                  if ( *v168 == 34 )
                    memmove(v168, v168 + 1, v169--);
                  if ( v169 )
                  {
                    v170 = v169 - 1;
                    if ( v168[v169 - 1] == 34 )
                    {
                      --v169;
                      v168[v170] = 0;
                    }
                    if ( *v168 == 47 )
                    {
                      if ( v169 && v168[v169 - 1] == 47 )
                        v168[v169 - 1] = 0;
LABEL_349:
                      *(_DWORD *)(v184 + 16) = v168;
LABEL_351:
                      if ( !*(_DWORD *)(v184 + 4) )
                        goto LABEL_277;
                      v16 = v184;
                      ++data->req.setcookies;
                      goto LABEL_214;
                    }
                  }
                  else if ( *v168 == 47 )
                  {
                    goto LABEL_349;
                  }
                  ((void (__fastcall *)(char *))*Curl_cfree)(v168);
                  v171 = Curl_strndup("/", 1);
                  *(_DWORD *)(v184 + 16) = v171;
                  if ( !v171 )
                    goto LABEL_277;
                  goto LABEL_351;
                }
              }
LABEL_277:
              v134 = (void (__fastcall **)(int))Curl_cfree;
              ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v184 + 20));
              (*v134)(*(_DWORD *)(v184 + 12));
              (*v134)(*(_DWORD *)(v184 + 16));
              (*v134)(*(_DWORD *)(v184 + 4));
              (*v134)(*(_DWORD *)(v184 + 8));
              (*v134)(v184);
              return 0;
            }
            v175 |= v72 == 0;
            goto LABEL_21;
          }
          if ( !is_ipnum )
            goto LABEL_112;
        }
        else
        {
          v60 = ":";
          if ( !Curl_host_is_ipnum(":") )
          {
LABEL_112:
            v64 = strlen(v60);
            if ( v64 < v30 )
              goto LABEL_129;
            v65 = v64;
            v66 = &v60[v64 - v30];
            if ( !curl_strnequal(v58, v66, v30) )
              goto LABEL_129;
            v67 = v66;
            v68 = v65 == v30;
            v63 = 0;
            if ( v65 != v30 )
              v68 = *(v67 - 1) == 46;
            if ( !v68 )
            {
LABEL_129:
              domain = v60;
              v175 = 1;
              if ( (v174[3] & 0x20) != 0 )
                Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v58);
              goto LABEL_21;
            }
            goto LABEL_138;
          }
        }
        if ( strncmp(v58, v60, v30) )
          goto LABEL_129;
        v63 = 1;
        if ( v30 != strlen(v60) )
          goto LABEL_129;
        goto LABEL_138;
      }
      if ( curl_strnequal("version", j, 7) )
        goto LABEL_21;
      if ( !curl_strnequal("max-age", j, 7) )
      {
        if ( !curl_strnequal("expires", j, 7) )
          goto LABEL_21;
        v53 = v173;
        if ( v30 > 0x7F || *(_QWORD *)v173 )
          goto LABEL_21;
        memcpy(dest, v31, v30);
        *((_BYTE *)dest + v30) = 0;
        v70 = Curl_getdate_capped(dest);
        *(_QWORD *)v173 = v70;
        if ( !v70 )
        {
          *(_DWORD *)v173 = 1;
          *(_DWORD *)(v173 + 4) = 0;
          goto LABEL_21;
        }
        if ( v70 > -1 )
          goto LABEL_21;
        v71 = 0;
        *(_DWORD *)v173 = 0;
LABEL_146:
        *(_DWORD *)(v53 + 4) = v71;
        goto LABEL_21;
      }
      v53 = v173;
      v54 = v31 + 1;
      if ( *v31 != 34 )
        v54 = v31;
      v55 = curlx_strtoofft(v54, 0, 10, v173);
      if ( v55 )
      {
        if ( v55 == 2 )
        {
LABEL_147:
          *(_DWORD *)v173 = 1;
          *(_DWORD *)(v173 + 4) = 0;
          goto LABEL_21;
        }
        if ( v55 != 1 )
          goto LABEL_21;
LABEL_145:
        *(_DWORD *)v173 = -1;
        v71 = 0x7FFFFFFF;
        goto LABEL_146;
      }
      if ( !*(_QWORD *)v173 )
        goto LABEL_147;
      if ( v172 < *(_QWORD *)v173 )
        goto LABEL_145;
      *(_QWORD *)v173 += v181;
    }
LABEL_21:
    for ( j = v26 + 1; ; ++j )
    {
      v27 = (unsigned __int8)*(j - 1);
      v28 = v27 == 32;
      if ( v27 != 32 )
        v28 = v27 == 9;
      if ( !v28 )
        break;
    }
    if ( v27 != 59 )
      goto LABEL_276;
  }
  v32 = strcspn(&j[v21 + 1], ";\r\n");
  v33 = v21 + v32;
  if ( v32 )
  {
    v31 = &i[v33];
    while ( 1 )
    {
      v34 = (unsigned __int8)*(v31 - 1);
      v35 = v34 == 32;
      if ( v34 != 32 )
        v35 = v34 == 9;
      if ( !v35 )
        break;
      --v32;
      --v31;
      if ( !v32 )
        goto LABEL_37;
    }
    v39 = &i[v21];
    v40 = 0;
    while ( 1 )
    {
      v41 = (unsigned __int8)v39[v40];
      v42 = v41 == 32;
      if ( v41 != 32 )
        v42 = v41 == 9;
      if ( !v42 )
        break;
      if ( v32 == ++v40 )
        goto LABEL_38;
    }
    v30 = v32 - v40;
    v31 = &v39[v40];
  }
  else
  {
LABEL_37:
    v31 = &j[v21 + 1];
LABEL_38:
    v30 = 0;
  }
  if ( !memchr(v31, 9, v30) )
  {
    v36 = &j[v33];
    data = v178;
    v22 = v36 + 1;
    goto LABEL_41;
  }
  v164 = (void (__fastcall **)(int))Curl_cfree;
  ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v184 + 20));
  (*v164)(*(_DWORD *)(v184 + 12));
  (*v164)(*(_DWORD *)(v184 + 16));
  (*v164)(*(_DWORD *)(v184 + 4));
  (*v164)(*(_DWORD *)(v184 + 8));
  (*v164)(v184);
  v12 = 0;
  if ( (v174[3] & 0x20) != 0 )
    Curl_infof(v178, "cookie contains TAB, dropping");
  return (Cookie *)v12;
}
