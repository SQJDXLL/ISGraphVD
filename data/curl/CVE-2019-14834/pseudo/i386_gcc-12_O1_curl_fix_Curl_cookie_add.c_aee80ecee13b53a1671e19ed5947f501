Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v8; // esi
  size_t v9; // ebp
  size_t v10; // eax
  char v11; // cl
  const char *v12; // ecx
  size_t v13; // edi
  bool v14; // al
  char *v15; // edi
  size_t v16; // eax
  bool v17; // si
  _BYTE *v18; // eax
  char is_ipnum; // al
  const char *name; // esi
  const char *value; // ebp
  char v22; // al
  char *v23; // eax
  int v24; // eax
  int v25; // edx
  char v26; // al
  int v27; // eax
  char *v28; // eax
  char *v29; // eax
  int v30; // esi
  size_t v31; // edi
  char *v32; // eax
  char *v33; // eax
  char *v34; // eax
  char *v35; // eax
  char *v36; // esi
  int v37; // edi
  int v38; // eax
  const char *v39; // eax
  char *v40; // eax
  int v41; // eax
  int v42; // eax
  int v43; // eax
  char v44; // bp
  Cookie *v45; // esi
  char *v46; // eax
  char *spath; // ecx
  char *v48; // eax
  size_t v49; // eax
  char *v50; // eax
  char *v51; // eax
  Cookie *v52; // edi
  unsigned int v53; // edx
  unsigned int v54; // eax
  char v56; // si
  int v57; // eax
  unsigned __int8 prefix; // al
  const char *v59; // eax
  bool running; // al
  size_t v61; // ecx
  size_t vlen; // [esp+18h] [ebp-F4h]
  __int64 vlena; // [esp+18h] [ebp-F4h]
  bool vlenb; // [esp+18h] [ebp-F4h]
  char vlenc; // [esp+18h] [ebp-F4h]
  int vlend; // [esp+18h] [ebp-F4h]
  char *ptr; // [esp+20h] [ebp-ECh]
  const char *ptra; // [esp+20h] [ebp-ECh]
  __int64 ptrb; // [esp+20h] [ebp-ECh]
  const char *ptrc; // [esp+20h] [ebp-ECh]
  char v71; // [esp+2Ch] [ebp-E0h]
  char *v72; // [esp+2Ch] [ebp-E0h]
  Cookie *co; // [esp+30h] [ebp-DCh]
  const char *maxage; // [esp+34h] [ebp-D8h]
  const char *maxagea; // [esp+34h] [ebp-D8h]
  size_t maxageb; // [esp+34h] [ebp-D8h]
  char *reject; // [esp+38h] [ebp-D4h]
  bool sep; // [esp+3Ch] [ebp-D0h]
  const char *sepa; // [esp+3Ch] [ebp-D0h]
  int now; // [esp+58h] [ebp-B4h]
  bool badcookie; // [esp+5Fh] [ebp-ADh]
  char *tok_buf; // [esp+68h] [ebp-A4h] BYREF
  char date[128]; // [esp+6Ch] [ebp-A0h] BYREF
  unsigned int v85; // [esp+ECh] [ebp-20h]

  v8 = (char *)lineptr;
  v85 = __readgsdword(0x14u);
  now = time(0);
  if ( data->req.setcookies > 0x31u )
    return 0;
  co = (Cookie *)Curl_ccalloc(1, 44);
  if ( !co )
    return 0;
  if ( !httpheader )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v8 = (char *)(lineptr + 10);
      co->httponly = 1;
    }
    if ( *v8 != 35 )
    {
      v34 = strchr(v8, 13);
      if ( v34 )
        *v34 = 0;
      v35 = strchr(v8, 10);
      if ( v35 )
        *v35 = 0;
      v36 = strtok_r(v8, "\t", &tok_buf);
      if ( !v36 )
        goto LABEL_168;
      v37 = 0;
      while ( 1 )
      {
        switch ( v37 )
        {
          case 0:
            v38 = Curl_cstrdup(&v36[*v36 == 46]);
            co->domain = (char *)v38;
            if ( !v38 )
              goto LABEL_240;
            vlenb = httpheader;
            goto LABEL_140;
          case 1:
            co->tailmatch = curl_strequal(v36, "TRUE") != 0;
            vlenb = httpheader;
            goto LABEL_140;
          case 2:
            if ( !strcmp("TRUE", v36) || !strcmp("FALSE", v36) )
            {
              maxagea = (const char *)Curl_cstrdup("/");
              co->path = (char *)maxagea;
              v41 = Curl_cstrdup("/");
              co->spath = (char *)v41;
              vlenb = 1;
              if ( v41 )
                vlenb = maxagea == 0;
LABEL_151:
              co->secure = 0;
              if ( curl_strequal(v36, "TRUE") )
              {
                if ( !secure && !c->running )
                {
                  v37 = 3;
LABEL_240:
                  strtok_r(0, "\t", &tok_buf);
                  v44 = 1;
                  if ( v37 == 5 )
                  {
LABEL_241:
                    v57 = Curl_cstrdup(&LC1);
                    co->value = (char *)v57;
                    if ( v57 )
                    {
                      v37 = 7;
                      goto LABEL_243;
                    }
                  }
LABEL_168:
                  freecookie(co);
                  return 0;
                }
                co->secure = 1;
                v37 = 3;
              }
              else
              {
                v37 = 3;
              }
            }
            else
            {
              v39 = (const char *)Curl_cstrdup(v36);
              co->path = (char *)v39;
              if ( !v39 )
                goto LABEL_240;
              v40 = sanitize_cookie_path(v39);
              co->spath = v40;
              if ( !v40 )
                goto LABEL_240;
              vlenb = httpheader;
            }
LABEL_140:
            v36 = strtok_r(0, "\t", &tok_buf);
            ++v37;
            if ( !v36 || vlenb )
            {
              v44 = vlenb;
              if ( v37 == 6 )
                goto LABEL_241;
LABEL_243:
              if ( v37 == 7 && !v44 )
                goto LABEL_245;
              goto LABEL_168;
            }
            break;
          case 3:
            vlenb = httpheader;
            goto LABEL_151;
          case 4:
            if ( curlx_strtoofft(v36, 0, 10, &co->expires) )
              goto LABEL_240;
            vlenb = httpheader;
            goto LABEL_140;
          case 5:
            v42 = Curl_cstrdup(v36);
            co->name = (char *)v42;
            if ( !v42 )
              goto LABEL_240;
            if ( curl_strnequal("__Secure-", v42, 9) )
            {
              co->prefix |= 1u;
              vlenb = httpheader;
            }
            else
            {
              vlenb = httpheader;
              if ( curl_strnequal("__Host-", co->name, 7) )
                co->prefix |= 2u;
            }
            goto LABEL_140;
          case 6:
            v43 = Curl_cstrdup(v36);
            co->value = (char *)v43;
            if ( !v43 )
              goto LABEL_240;
            vlenb = httpheader;
            goto LABEL_140;
          default:
            vlenb = httpheader;
            goto LABEL_140;
        }
      }
    }
    Curl_cfree(co);
    return 0;
  }
  badcookie = 0;
  if ( strlen(lineptr) > 0x1388 )
  {
    Curl_cfree(co);
    return 0;
  }
  while ( 1 )
  {
    while ( 1 )
    {
      v26 = *v8;
      v71 = *v8;
      if ( !*v8 )
        break;
      if ( v26 != 32 && v26 != 9 )
      {
        v9 = strcspn(v8, ";\t\r\n=");
        if ( !v9 )
        {
          v22 = *v8;
          v15 = v8;
          goto LABEL_109;
        }
        goto LABEL_265;
      }
      ++v8;
    }
    v9 = strcspn(v8, ";\t\r\n=");
    if ( !v9 )
      break;
LABEL_265:
    ptrc = &v8[v9];
    do
    {
      v61 = v9--;
      if ( v8[v9] != 9 && v8[v9] != 32 )
      {
        sep = 0;
        if ( *ptrc != 61 )
        {
          v9 = v61;
          v15 = (char *)ptrc;
          maxage = 0;
          vlen = 0;
          goto LABEL_23;
        }
        v9 = v61;
        goto LABEL_269;
      }
    }
    while ( v9 );
    if ( *ptrc != 61 )
    {
      vlen = 0;
      v15 = (char *)ptrc;
      maxage = 0;
      sep = 0;
      goto LABEL_25;
    }
LABEL_269:
    maxage = ptrc + 1;
    v10 = strcspn(ptrc + 1, ";\r\n");
    sepa = &ptrc[v10 + 1];
    while ( 1 )
    {
      if ( !v10 )
      {
        vlen = 0;
        v15 = (char *)sepa;
        sep = httpheader;
        goto LABEL_23;
      }
      v11 = ptrc[v10];
      if ( v11 != 32 && v11 != 9 )
        break;
      --v10;
    }
    v12 = ptrc + 1;
    ptra = sepa;
    v13 = v10;
    do
    {
      v14 = *v12 == 9 || *v12 == 32;
      if ( !v14 )
      {
        v16 = v13;
        vlen = v13;
        maxage = v12;
        v15 = (char *)sepa;
        if ( !memchr(v12, 9, v16) )
        {
          sep = httpheader;
          goto LABEL_23;
        }
        freecookie(co);
        ptr = 0;
        if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
        {
          Curl_infof(data, "cookie contains TAB, dropping");
          return 0;
        }
        return (Cookie *)ptr;
      }
      ++v12;
      --v13;
    }
    while ( v13 );
    vlen = 0;
    sep = v14;
    maxage = v12;
    v15 = (char *)ptra;
LABEL_23:
    if ( v9 > 0xFFE || vlen > 0xFFE )
    {
LABEL_48:
      freecookie(co);
      ptr = 0;
      if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
      {
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes");
        return 0;
      }
      return (Cookie *)ptr;
    }
LABEL_25:
    if ( v9 + vlen > 0x1000 )
      goto LABEL_48;
    if ( v9 > 6 && v71 == 95 && v8[1] == 95 )
    {
      if ( curl_strnequal("__Secure-", v8, 9) )
      {
        co->prefix |= 1u;
      }
      else if ( curl_strnequal("__Host-", v8, 7) )
      {
        co->prefix |= 2u;
      }
    }
    if ( !co->name )
    {
      if ( !sep )
        goto LABEL_62;
      strstore(&co->name, v8, v9);
      strstore(&co->value, maxage, vlen);
      name = co->name;
      if ( !name )
        goto LABEL_62;
      value = co->value;
      if ( !value )
        goto LABEL_62;
      if ( value[strcspn(value, badoctets_0)] || name[strcspn(name, badoctets_0)] )
      {
        if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
        goto LABEL_62;
      }
      goto LABEL_70;
    }
    if ( vlen )
      goto LABEL_33;
    if ( v9 == 6 )
    {
      if ( curl_strnequal("secure", v8, 6) )
      {
        if ( !secure && c->running )
          goto LABEL_62;
        co->secure = 1;
        goto LABEL_70;
      }
      if ( !sep )
        goto LABEL_70;
LABEL_34:
      if ( v9 == 6 )
      {
        v17 = (vlen != 0) & (curl_strnequal("domain", v8, 6) != 0);
        if ( !v17 )
          goto LABEL_70;
        if ( *maxage == 46 )
        {
          ++maxage;
          --vlen;
        }
        if ( vlen == 9 && curl_strnequal(maxage, "localhost", 9)
          || (v18 = memchr(maxage, 46, vlen)) != 0 && vlen - (v18 - maxage) > 1 )
        {
          if ( domain )
          {
            is_ipnum = Curl_host_is_ipnum(domain);
            goto LABEL_43;
          }
          v56 = Curl_host_is_ipnum(maxage);
          strstore(&co->domain, maxage, vlen);
          if ( !co->domain )
            goto LABEL_62;
          if ( v56 )
            goto LABEL_70;
LABEL_87:
          co->tailmatch = 1;
          goto LABEL_70;
        }
        domain = ":";
        is_ipnum = Curl_host_is_ipnum(":");
LABEL_43:
        if ( is_ipnum )
        {
          if ( !strncmp(maxage, domain, vlen) && strlen(domain) == vlen )
          {
            strstore(&co->domain, maxage, vlen);
            if ( !co->domain )
              goto LABEL_62;
            goto LABEL_70;
          }
        }
        else if ( cookie_tailmatch(maxage, vlen, domain) )
        {
          strstore(&co->domain, maxage, vlen);
          if ( !co->domain )
            goto LABEL_62;
          goto LABEL_87;
        }
        badcookie = v17;
        if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
        {
          Curl_infof(data, "skipped cookie with bad tailmatch domain: %s");
          badcookie = v17;
        }
        goto LABEL_70;
      }
LABEL_69:
      if ( v9 == 7 && !curl_strnequal("version", v8, 7) )
      {
        if ( curl_strnequal("max-age", v8, 7) )
        {
          v24 = curlx_strtoofft(&maxage[*maxage == 34], 0, 10, &co->expires);
          switch ( v24 )
          {
            case 1:
              LODWORD(co->expires) = -1;
              HIDWORD(co->expires) = 0x7FFFFFFF;
              break;
            case 2:
              LODWORD(co->expires) = 1;
              HIDWORD(co->expires) = 0;
              break;
            case 0:
              vlena = co->expires;
              if ( vlena )
              {
                LODWORD(ptrb) = now;
                if ( 0x7FFFFFFFFFFFFFFFLL - now >= vlena )
                {
                  HIDWORD(ptrb) = now >> 31;
                  co->expires = ptrb + vlena;
                }
                else
                {
                  LODWORD(co->expires) = -1;
                  HIDWORD(co->expires) = 0x7FFFFFFF;
                }
              }
              else
              {
                LODWORD(co->expires) = 1;
                HIDWORD(co->expires) = 0;
              }
              break;
          }
        }
        else if ( curl_strnequal("expires", v8, 7) && !co->expires && vlen <= 0x7F )
        {
          memcpy(date, maxage, vlen);
          date[vlen] = 0;
          v25 = Curl_getdate_capped(date);
          if ( v25 )
          {
            if ( v25 >> 31 == -1 )
            {
              LODWORD(co->expires) = 0;
              HIDWORD(co->expires) = 0;
            }
            else
            {
              co->expires = v25;
            }
          }
          else
          {
            LODWORD(co->expires) = 1;
            HIDWORD(co->expires) = 0;
          }
        }
      }
      goto LABEL_70;
    }
    if ( v9 == 8 )
    {
      if ( curl_strnequal("httponly", v8, 8) )
      {
        co->httponly = 1;
        goto LABEL_70;
      }
      if ( !sep )
        goto LABEL_70;
      goto LABEL_69;
    }
    if ( sep )
    {
LABEL_33:
      if ( v9 != 4 )
        goto LABEL_34;
      if ( curl_strnequal("path", v8, 4) )
      {
        strstore(&co->path, maxage, vlen);
        if ( !co->path || (Curl_cfree(co->spath), v23 = sanitize_cookie_path(co->path), (co->spath = v23) == 0) )
        {
LABEL_62:
          freecookie(co);
          return 0;
        }
      }
    }
LABEL_70:
    v22 = *v15;
    if ( !*v15 )
      break;
LABEL_109:
    while ( v22 == 32 || v22 == 9 )
    {
      v22 = *++v15;
      if ( !*v15 )
        goto LABEL_71;
    }
    if ( v22 != 59 )
      break;
    v8 = v15 + 1;
  }
LABEL_71:
  if ( badcookie )
    goto LABEL_62;
  if ( !co->domain )
  {
    if ( domain )
    {
      v27 = Curl_cstrdup(domain);
      co->domain = (char *)v27;
      if ( !v27 )
        goto LABEL_62;
    }
  }
  if ( !co->path && path )
  {
    v28 = strchr(path, 63);
    v29 = v28 ? (char *)Curl_memrchr(path, 47, v28 - path) : strrchr(path, 47);
    if ( v29 )
    {
      v30 = v29 - path;
      v31 = v29 - path + 1;
      v32 = (char *)Curl_cmalloc(v29 - path + 2);
      co->path = v32;
      if ( !v32 )
        goto LABEL_62;
      memcpy(v32, path, v31);
      co->path[v30 + 1] = 0;
      v33 = sanitize_cookie_path(co->path);
      co->spath = v33;
      if ( !v33 )
        goto LABEL_62;
    }
  }
  if ( !co->name )
    goto LABEL_62;
  ++data->req.setcookies;
LABEL_245:
  prefix = co->prefix;
  if ( (prefix & 1) == 0 )
  {
    if ( (prefix & 2) == 0 )
      goto LABEL_251;
    if ( co->secure )
    {
LABEL_248:
      v59 = co->path;
      if ( v59 && !strcmp(v59, "/") && !co->tailmatch )
        goto LABEL_251;
    }
LABEL_193:
    freecookie(co);
    return 0;
  }
  if ( !co->secure )
    goto LABEL_193;
  if ( (prefix & 2) != 0 )
    goto LABEL_248;
LABEL_251:
  running = c->running;
  if ( !running && c->newsession && !co->expires )
    goto LABEL_193;
  co->livecookie = running;
  vlend = c->lastct;
  c->lastct = vlend + 1;
  co->creationtime = vlend + 1;
  if ( !noexpire )
    remove_expired(c);
  maxageb = cookiehash(co->domain);
  v45 = c->cookies[maxageb];
  if ( v45 )
  {
    vlenc = 0;
    ptr = 0;
    v52 = 0;
    while ( 1 )
    {
      if ( !curl_strequal(v45->name, co->name) )
        goto LABEL_176;
      v46 = v45->domain;
      if ( v46 )
      {
        if ( !co->domain || !curl_strequal(v46, co->domain) )
          goto LABEL_176;
      }
      else if ( co->domain )
      {
        goto LABEL_176;
      }
      spath = v45->spath;
      if ( spath )
      {
        v72 = co->spath;
        if ( v72 )
        {
          if ( v45->secure && !co->secure && !secure )
          {
            reject = v45->spath;
            v48 = strchr(spath + 1, 47);
            v49 = v48 ? v48 - reject : strlen(reject);
            if ( curl_strnequal(reject, v72, v49) )
            {
              if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
                Curl_infof(data, "cookie '%s' for domain '%s' dropped, would overlay an existing cookie");
              goto LABEL_193;
            }
          }
        }
      }
LABEL_176:
      if ( v52 || !curl_strequal(v45->name, co->name) )
        goto LABEL_177;
      v50 = v45->domain;
      if ( v50 )
      {
        if ( !co->domain || !curl_strequal(v50, co->domain) || v45->tailmatch != co->tailmatch )
        {
LABEL_202:
          if ( !vlenc )
            goto LABEL_177;
        }
      }
      else if ( co->domain )
      {
        goto LABEL_202;
      }
      v51 = v45->spath;
      if ( !v51 )
        goto LABEL_206;
      if ( !co->spath )
      {
        v52 = 0;
        vlenc = 0;
        goto LABEL_177;
      }
      if ( !curl_strequal(v51, co->spath) )
      {
        vlenc = 0;
      }
      else
      {
LABEL_206:
        if ( (v45->spath == 0) == (co->spath == 0) )
        {
          vlenc = co->livecookie;
          if ( vlenc )
          {
            ptr = (char *)v45;
            v52 = co;
          }
          else
          {
            if ( v45->livecookie )
              goto LABEL_193;
            ptr = (char *)v45;
            v52 = co;
            vlenc = 1;
          }
        }
        else
        {
          vlenc = 0;
        }
      }
LABEL_177:
      if ( !v45->next )
      {
        if ( v52 )
        {
          v52->next = *(Cookie **)ptr;
          v52->creationtime = *((_DWORD *)ptr + 9);
          Curl_cfree(*((_DWORD *)ptr + 1));
          Curl_cfree(*((_DWORD *)ptr + 2));
          Curl_cfree(*((_DWORD *)ptr + 5));
          Curl_cfree(*((_DWORD *)ptr + 3));
          Curl_cfree(*((_DWORD *)ptr + 4));
          *(_DWORD *)ptr = v52->next;
          *((_DWORD *)ptr + 1) = v52->name;
          *((_DWORD *)ptr + 2) = v52->value;
          *((_DWORD *)ptr + 3) = v52->path;
          *((_DWORD *)ptr + 4) = v52->spath;
          *((_DWORD *)ptr + 5) = v52->domain;
          *((_DWORD *)ptr + 6) = v52->expires;
          *((_DWORD *)ptr + 7) = HIDWORD(v52->expires);
          *((_DWORD *)ptr + 8) = *(_DWORD *)&v52->tailmatch;
          *((_DWORD *)ptr + 9) = v52->creationtime;
          *((_DWORD *)ptr + 10) = *(_DWORD *)&v52->prefix;
          Curl_cfree(v52);
        }
        else
        {
          ptr = (char *)co;
        }
        if ( !c->running )
          goto LABEL_218;
        goto LABEL_224;
      }
      v45 = v45->next;
    }
  }
  if ( !c->running )
  {
    ptr = (char *)co;
LABEL_260:
    c->cookies[maxageb] = (Cookie *)ptr;
    goto LABEL_228;
  }
  ptr = (char *)co;
  vlenc = 0;
LABEL_224:
  if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
    Curl_infof(data, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld");
LABEL_218:
  if ( !vlenc )
  {
    if ( !v45 )
      goto LABEL_260;
    v45->next = (Cookie *)ptr;
LABEL_228:
    ++c->numcookies;
  }
  v53 = *((_DWORD *)ptr + 6);
  v54 = *((_DWORD *)ptr + 7);
  if ( *((_QWORD *)ptr + 3) && __SPAIR64__(v54, v53) < c->next_expiration )
  {
    LODWORD(c->next_expiration) = v53;
    HIDWORD(c->next_expiration) = v54;
  }
  return (Cookie *)ptr;
}
