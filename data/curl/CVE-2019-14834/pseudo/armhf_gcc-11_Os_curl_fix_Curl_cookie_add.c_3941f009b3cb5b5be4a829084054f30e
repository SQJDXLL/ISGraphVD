Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v8; // r5
  time_t v10; // r0
  unsigned int v11; // r3
  Cookie *v12; // r4
  const char *v13; // r3
  bool v14; // zf
  size_t v15; // r0
  size_t v16; // r7
  char *v17; // r8
  size_t v18; // r2
  int v19; // r3
  bool v20; // zf
  unsigned __int8 *v21; // r6
  size_t v22; // r10
  char *v23; // r8
  int v24; // r3
  int v25; // t1
  bool v26; // zf
  unsigned __int8 *v27; // r3
  int v28; // r8
  int v29; // t1
  bool v30; // zf
  int v31; // r8
  bool v32; // cc
  _BOOL4 v33; // r3
  unsigned __int8 v34; // r3
  const char *v35; // r5
  char *v36; // r6
  const char *v37; // r0
  char *v38; // r0
  const char *v39; // r2
  int v40; // r3
  int v41; // t1
  bool v42; // zf
  int v43; // r0
  bool v44; // zf
  _BYTE *v45; // r0
  const char *v46; // r0
  int is_ipnum; // r0
  int v48; // r5
  bool v49; // zf
  void *v50; // r0
  int v51; // r0
  __int64 v52; // r2
  int v53; // r0
  _BOOL4 v54; // r3
  int v55; // r0
  _BOOL4 v56; // r3
  char *v57; // r2
  char *v58; // r0
  const char *v59; // r0
  CookieInfo *v60; // r2
  int lastct; // r3
  size_t v62; // r0
  int livecookie; // r5
  Cookie *v64; // r7
  Cookie *v65; // r8
  Cookie *v66; // r10
  Cookie *v67; // r6
  int tailmatch; // r2
  char *name; // r0
  char *v70; // r1
  char *value; // r2
  char *v72; // r3
  char *v73; // r1
  int expires; // r2
  int expires_high; // r3
  int creationtime; // r1
  int v77; // r2
  int v78; // r3
  CookieInfo *running; // r3
  const char *v80; // r2
  curl_off_t v81; // r2
  int v82; // r0
  curl_off_t *p_next_expiration; // r1
  int v84; // r0
  size_t v85; // r5
  char *v86; // r0
  char *v87; // r0
  char *v88; // r0
  unsigned __int8 v89; // r8
  int v90; // r6
  char *v91; // r0
  char *v92; // r5
  int v93; // r10
  int v94; // r0
  char *v95; // r0
  int v96; // r0
  int (__fastcall *v97)(const char *); // r8
  const char *v98; // r0
  unsigned int v99; // r6
  int v100; // r0
  int (__fastcall *v101)(const char *); // r1
  unsigned int v102; // r8
  int v103; // r0
  unsigned int v104; // r6
  int v105; // r1
  char *v106; // r0
  char *v107; // r1
  const char *spath; // r11
  char *v109; // r0
  char *v110; // r1
  char *v111; // r10
  char *v112; // r0
  size_t v113; // r2
  bool v114; // zf
  char *v115; // r0
  char *v116; // r1
  int v118; // [sp+0h] [bp-F8h] BYREF
  size_t myhash; // [sp+18h] [bp-E0h]
  CookieInfo *cookies; // [sp+1Ch] [bp-DCh]
  int v121; // [sp+20h] [bp-D8h]
  _BOOL4 badcookie; // [sp+24h] [bp-D4h]
  const char *ptr; // [sp+28h] [bp-D0h]
  int v124; // [sp+2Ch] [bp-CCh]
  const char *domain_0; // [sp+30h] [bp-C8h]
  _BOOL4 v126; // [sp+34h] [bp-C4h]
  const char *v127; // [sp+38h] [bp-C0h]
  _BOOL4 v128; // [sp+3Ch] [bp-BCh]
  char *tok_buf; // [sp+40h] [bp-B8h] BYREF
  char date[128]; // [sp+44h] [bp-B4h] BYREF

  v128 = noexpire;
  badcookie = httpheader;
  v126 = secure;
  myhash = (size_t)data;
  cookies = c;
  v8 = (char *)lineptr;
  v10 = time(0u);
  v11 = *(unsigned __int8 *)(myhash + 270);
  v121 = v10;
  if ( v11 > 0x31 )
    return 0;
  v12 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v12 )
    return 0;
  if ( !badcookie )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v8 = (char *)(lineptr + 0xA);
      v12->httponly = 1;
    }
    if ( *v8 == 35 )
      goto LABEL_7;
    v88 = strchr(v8, 13);
    v89 = 0;
    v90 = 0;
    if ( v88 )
      *v88 = 0;
    v91 = strchr(v8, 10);
    if ( v91 )
      *v91 = 0;
    v92 = strtok_r(v8, "\t", &tok_buf);
    while ( 1 )
    {
      v93 = v92 && (v89 ^ 1) & 1;
      if ( !v93 )
        break;
      switch ( v90 )
      {
        case 0:
          if ( *v92 == 46 )
            ++v92;
          v95 = (char *)Curl_cstrdup(v92);
          v12->domain = v95;
          goto LABEL_220;
        case 1:
          v12->tailmatch = curl_strequal(v92, "TRUE") != 0;
          goto LABEL_223;
        case 2:
          v96 = strcmp("TRUE", v92);
          v97 = (int (__fastcall *)(const char *))Curl_cstrdup;
          v121 = (int)&Curl_cstrdup;
          if ( !v96 || !strcmp("FALSE", v92) )
          {
            v99 = (unsigned int)"/";
            v100 = v97("/");
            v101 = *(int (__fastcall **)(const char *))v121;
            v102 = v100;
            v12->path = (char *)v100;
            v103 = v101("/");
            if ( v103 )
              v99 = __clz(v102);
            v12->spath = (char *)v103;
            if ( v103 )
              v104 = v99 >> 5;
            else
              LOBYTE(v104) = v93;
LABEL_234:
            v12->secure = 0;
            if ( curl_strequal(v92, "TRUE") )
            {
              if ( v126 || cookies->running )
              {
                v12->secure = 1;
                goto LABEL_238;
              }
            }
            else
            {
LABEL_238:
              LOBYTE(v93) = v104;
            }
            v90 = 3;
            goto LABEL_221;
          }
          v98 = (const char *)v97(v92);
          v12->path = (char *)v98;
          if ( v98 )
          {
            v95 = sanitize_cookie_path(v98);
            v12->spath = v95;
LABEL_220:
            LOBYTE(v93) = v95 == 0;
          }
LABEL_221:
          ++v90;
          v89 = v93;
          v92 = strtok_r(0u, "\t", &tok_buf);
          break;
        case 3:
          LOBYTE(v104) = 0;
          goto LABEL_234;
        case 4:
          LOBYTE(v93) = curlx_strtoofft(v92, 0, 10, &v12->expires) != 0;
          goto LABEL_221;
        case 5:
          v105 = Curl_cstrdup(v92);
          v12->name = (char *)v105;
          if ( !v105 )
            goto LABEL_221;
          v93 = curl_strnequal("__Secure-", v105, 9);
          if ( v93 )
          {
            v12->prefix |= 1u;
LABEL_223:
            LOBYTE(v93) = 0;
          }
          else if ( curl_strnequal("__Host-", v12->name, 7) )
          {
            v12->prefix |= 2u;
          }
          else
          {
            LOBYTE(v93) = 0;
          }
          goto LABEL_221;
        case 6:
          v95 = (char *)Curl_cstrdup(v92);
          v12->value = v95;
          goto LABEL_220;
        default:
          goto LABEL_223;
      }
    }
    if ( v90 == 6 )
    {
      v94 = Curl_cstrdup(&LC2);
      if ( v94 )
        v90 = 7;
      v12->value = (char *)v94;
      if ( !v94 )
        goto LABEL_65;
    }
    if ( v90 != 7 )
      v89 |= 1u;
    if ( v89 )
      goto LABEL_65;
LABEL_158:
    if ( (v12->prefix & 1) != 0 && !v12->secure )
      goto LABEL_65;
    if ( (v12->prefix & 2) != 0 )
    {
      if ( !v12->secure )
        goto LABEL_65;
      v59 = v12->path;
      if ( !v59 || strcmp(v59, "/") || v12->tailmatch )
        goto LABEL_65;
    }
    if ( !cookies->running && cookies->newsession && !v12->expires )
      goto LABEL_65;
    v60 = cookies;
    lastct = cookies->lastct;
    v12->livecookie = cookies->running;
    v60->lastct = ++lastct;
    v12->creationtime = lastct;
    if ( !v128 )
      remove_expired(v60);
    v62 = cookiehash(v12->domain);
    livecookie = 0;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v67 = cookies->cookies[v62];
    tailmatch = v62;
    v121 = v62;
    while ( 1 )
    {
      if ( !v67 )
      {
        if ( v65 )
        {
          name = v64->name;
          v65->next = v64->next;
          v65->creationtime = v64->creationtime;
          Curl_cfree(name);
          Curl_cfree(v64->value);
          Curl_cfree(v64->domain);
          Curl_cfree(v64->path);
          Curl_cfree(v64->spath);
          v70 = v65->name;
          value = v65->value;
          v72 = v65->path;
          v64->next = v65->next;
          v64->name = v70;
          v64->value = value;
          v64->path = v72;
          v73 = v65->domain;
          expires = v65->expires;
          expires_high = HIDWORD(v65->expires);
          v64->spath = v65->spath;
          v64->domain = v73;
          LODWORD(v64->expires) = expires;
          HIDWORD(v64->expires) = expires_high;
          creationtime = v65->creationtime;
          v77 = *(_DWORD *)&v65->prefix;
          v78 = *((_DWORD *)&v65->prefix + 1);
          *(_DWORD *)&v64->tailmatch = *(_DWORD *)&v65->tailmatch;
          v64->creationtime = creationtime;
          *(_DWORD *)&v64->prefix = v77;
          *((_DWORD *)&v64->prefix + 1) = v78;
          Curl_cfree(v65);
          v12 = v64;
        }
        running = (CookieInfo *)cookies->running;
        if ( cookies->running )
        {
          running = (CookieInfo *)*(unsigned __int8 *)(myhash + 1617);
          if ( ((unsigned __int8)running & 0x20) != 0 )
          {
            if ( livecookie )
              v80 = "Replaced";
            else
              v80 = "Added";
            Curl_infof(
              myhash,
              "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
              v80,
              v12->name,
              v12->value,
              v12->domain,
              v12->path,
              v12->expires);
          }
        }
        if ( !livecookie )
        {
          if ( v66 )
          {
            v66->next = v12;
          }
          else
          {
            running = cookies;
            tailmatch = v121;
          }
          if ( !v66 )
            running->cookies[tailmatch] = v12;
          ++cookies->numcookies;
        }
        v81 = v12->expires;
        if ( v81 )
        {
          v82 = (unsigned __int64)(v81 - cookies->next_expiration) >> 32;
          if ( v81 < cookies->next_expiration )
            v82 = (int)cookies;
          p_next_expiration = &cookies->next_expiration;
          if ( v81 < cookies->next_expiration )
          {
            *(_DWORD *)(v82 + 256) = v81;
            *((_DWORD *)p_next_expiration + 1) = HIDWORD(v81);
          }
        }
        return v12;
      }
      if ( curl_strequal(v67->name, v12->name) )
      {
        v106 = v67->domain;
        v107 = v12->domain;
        if ( v106 )
        {
          if ( !v107 || !curl_strequal(v106, v107) )
            goto LABEL_253;
        }
        else if ( v107 )
        {
          goto LABEL_253;
        }
        spath = v67->spath;
        if ( spath )
        {
          v111 = v12->spath;
          if ( v111 )
          {
            if ( v67->secure )
            {
              tailmatch = v126;
              if ( !v126 && !v12->secure )
              {
                v112 = strchr(spath + 1, 47);
                v113 = v112 ? v112 - spath : strlen(spath);
                if ( curl_strnequal(spath, v111, v113) )
                {
                  if ( (*(_BYTE *)(myhash + 1617) & 0x20) != 0 )
                    Curl_infof(
                      myhash,
                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                      v12->name,
                      v12->domain);
                  goto LABEL_65;
                }
              }
            }
          }
        }
      }
LABEL_253:
      if ( v65 || !curl_strequal(v67->name, v12->name) )
        goto LABEL_258;
      v109 = v67->domain;
      v110 = v12->domain;
      if ( v109 )
      {
        if ( !v110 || !curl_strequal(v109, v110) )
        {
LABEL_257:
          if ( !livecookie )
            goto LABEL_258;
          goto LABEL_274;
        }
        tailmatch = v67->tailmatch;
        v114 = tailmatch == v12->tailmatch;
      }
      else
      {
        v114 = v110 == 0;
      }
      if ( !v114 )
        goto LABEL_257;
LABEL_274:
      v115 = v67->spath;
      v116 = v12->spath;
      if ( !v115 )
        goto LABEL_275;
      if ( !v116 )
      {
        v65 = 0;
LABEL_276:
        livecookie = 0;
        goto LABEL_258;
      }
      livecookie = curl_strequal(v115, v116);
      if ( livecookie )
      {
LABEL_275:
        tailmatch = v67->spath == 0;
        if ( tailmatch != (v12->spath == 0) )
          goto LABEL_276;
        livecookie = v12->livecookie;
        if ( v12->livecookie )
        {
          v64 = v67;
          v65 = v12;
        }
        else
        {
          if ( v67->livecookie )
            goto LABEL_65;
          v64 = v67;
          v65 = v12;
          livecookie = 1;
        }
      }
LABEL_258:
      v66 = v67;
      v67 = v67->next;
    }
  }
  if ( strlen(lineptr) > (unsigned int)&loc_1388 )
  {
LABEL_7:
    Curl_cfree(v12);
    return 0;
  }
  v124 = 0;
  v127 = ":";
  while ( 1 )
  {
    while ( 1 )
    {
      v13 = (const char *)(unsigned __int8)*v8;
      ptr = v13;
      if ( !v13 )
        break;
      v14 = v13 == (_BYTE *)&loc_8 + 1;
      if ( v13 != (_BYTE *)&loc_8 + 1 )
        v14 = v13 == (const char *)&loc_20;
      if ( !v14 )
        break;
      ++v8;
    }
    v15 = strcspn(v8, ";\t\r\n=");
    v16 = v15;
    if ( !v15 )
    {
      domain_0 = v8;
      goto LABEL_77;
    }
    v17 = &v8[v15];
    while ( 1 )
    {
      v18 = v16--;
      v19 = (unsigned __int8)v8[v16];
      v20 = v19 == 9;
      if ( v19 != 9 )
        v20 = v19 == 32;
      if ( !v20 )
        break;
      if ( !v16 )
        goto LABEL_22;
    }
    v16 = v18;
LABEL_22:
    if ( *v17 == 61 )
    {
      v21 = (unsigned __int8 *)(v17 + 1);
      v22 = strcspn(v17 + 1, ";\r\n");
      v23 = &v17[v22];
      domain_0 = (const char *)&v21[v22];
      while ( 1 )
      {
        if ( !v22 )
          goto LABEL_47;
        v25 = (unsigned __int8)*v23--;
        v24 = v25;
        v26 = v25 == 9;
        if ( v25 != 9 )
          v26 = v24 == 32;
        if ( !v26 )
          break;
        --v22;
      }
      v27 = v21;
      while ( 1 )
      {
        v21 = v27;
        v29 = *v27++;
        v28 = v29;
        v30 = v29 == 9;
        if ( v29 != 9 )
          v30 = v28 == 32;
        v31 = v30;
        if ( !v30 )
          break;
        --v22;
        v21 = v27;
        if ( !v22 )
          goto LABEL_40;
      }
      if ( memchr(v21, 9, v22) )
      {
        freecookie(v12);
        if ( (*(_BYTE *)(myhash + 1617) & 0x20) != 0 )
          Curl_infof(myhash, "cookie contains TAB, dropping");
        return 0;
      }
LABEL_47:
      v31 = badcookie;
    }
    else
    {
      v21 = 0;
      domain_0 = &v8[v15];
      v22 = 0;
      v31 = 0;
    }
LABEL_40:
    v32 = v22 > 0xFFE;
    if ( v22 <= 0xFFE )
      v32 = v16 > 0xFFE;
    if ( v32 || v16 + v22 > 0x1000 )
    {
      freecookie(v12);
      if ( (*(_BYTE *)(myhash + 1617) & 0x20) != 0 )
        Curl_infof(myhash, "oversized cookie dropped, name/val %zu + %zu bytes", v16, v22);
      return 0;
    }
    v33 = v16 > 6;
    if ( ptr != (_BYTE *)&loc_5C + 3 )
      v33 = 0;
    if ( v33 && v8[1] == 95 )
    {
      if ( curl_strnequal("__Secure-", v8, 9) )
      {
        v34 = v12->prefix | 1;
      }
      else
      {
        if ( !curl_strnequal("__Host-", v8, 7) )
          goto LABEL_57;
        v34 = v12->prefix | 2;
      }
      v12->prefix = v34;
    }
LABEL_57:
    if ( !v12->name )
    {
      if ( !v31 )
        goto LABEL_65;
      strstore(&v12->name, v8, v16);
      strstore(&v12->value, (const char *)v21, v22);
      v35 = v12->name;
      if ( !v35 )
        goto LABEL_65;
      v36 = v12->value;
      if ( !v36 )
        goto LABEL_65;
      v37 = v12->value;
      ptr = badoctets_0;
      if ( v36[strcspn(v37, badoctets_0)] || v35[strcspn(v35, ptr)] )
      {
        if ( (*(_BYTE *)(myhash + 1617) & 0x20) != 0 )
          Curl_infof(myhash, "invalid octets in name/value, cookie dropped");
        goto LABEL_65;
      }
      goto LABEL_77;
    }
    if ( !v22 )
    {
      if ( v16 != 6 )
      {
        if ( v16 == 8 )
        {
          if ( curl_strnequal("httponly", v8, 8) )
            v12->httponly = 1;
          goto LABEL_77;
        }
        if ( !v31 )
          goto LABEL_77;
        goto LABEL_67;
      }
      if ( curl_strnequal("secure", v8, 6) )
      {
        if ( !v126 && cookies->running )
          goto LABEL_65;
        v12->secure = 1;
        goto LABEL_77;
      }
      if ( !v31 )
        goto LABEL_77;
LABEL_91:
      v43 = curl_strnequal("domain", v8, 6);
      v44 = v43 == 0;
      if ( v43 )
        v44 = v22 == 0;
      if ( v44 )
        goto LABEL_77;
      if ( *v21 == 46 )
      {
        --v22;
        ++v21;
      }
      if ( v22 == 9 && curl_strnequal(v21, "localhost", 9) )
        goto LABEL_103;
      v45 = memchr(v21, 46, v22);
      if ( v45 )
      {
        if ( v22 - (v45 - v21) > 1 )
        {
LABEL_103:
          if ( domain )
            v46 = domain;
          else
            v46 = (const char *)v21;
          goto LABEL_106;
        }
        domain = v127;
      }
      else
      {
        domain = ":";
      }
      v46 = domain;
LABEL_106:
      is_ipnum = Curl_host_is_ipnum(v46);
      v48 = is_ipnum;
      if ( !domain )
        goto LABEL_107;
      if ( is_ipnum )
      {
        if ( !strncmp((const char *)v21, domain, v22) && strlen(domain) == v22 )
        {
LABEL_107:
          strstore(&v12->domain, (const char *)v21, v22);
          if ( !v12->domain )
            goto LABEL_65;
          if ( !v48 )
            v12->tailmatch = 1;
          goto LABEL_77;
        }
      }
      else if ( cookie_tailmatch((const char *)v21, v22, domain) )
      {
        goto LABEL_107;
      }
      if ( (*(_BYTE *)(myhash + 1617) & 0x20) != 0 )
        Curl_infof(myhash, "skipped cookie with bad tailmatch domain: %s", (const char *)v21);
      v124 = 1;
      goto LABEL_77;
    }
LABEL_67:
    if ( v16 == 4 )
    {
      if ( curl_strnequal("path", v8, 4) )
      {
        strstore(&v12->path, (const char *)v21, v22);
        if ( !v12->path )
          goto LABEL_65;
        Curl_cfree(v12->spath);
        v38 = sanitize_cookie_path(v12->path);
        v12->spath = v38;
        if ( !v38 )
          goto LABEL_65;
      }
      goto LABEL_77;
    }
    if ( v16 == 6 )
      goto LABEL_91;
    if ( v16 != 7 || curl_strnequal("version", v8, 7) )
      goto LABEL_77;
    if ( curl_strnequal("max-age", v8, 7) )
    {
      if ( *v21 == 34 )
        ++v21;
      v53 = curlx_strtoofft(v21, 0, 10, &v12->expires);
      switch ( v53 )
      {
        case 1:
          goto LABEL_143;
        case 2:
          goto LABEL_139;
        case 0:
          if ( !v12->expires )
            goto LABEL_139;
          if ( __SPAIR64__(0x7FFFFFFF - (v121 >> 0x1F), ~v121) < v12->expires )
          {
LABEL_143:
            v52 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_144;
          }
          v12->expires += v121;
          break;
      }
    }
    else
    {
      if ( !curl_strnequal("expires", v8, 7) )
        goto LABEL_77;
      v49 = v22 == 127;
      if ( v22 <= 0x7F )
        v49 = v12->expires == 0;
      if ( !v49 )
        goto LABEL_77;
      v50 = memcpy(date, v21, v22);
      *((_BYTE *)&v118 + v22 + 0x44) = 0;
      v51 = Curl_getdate_capped(v50);
      if ( !v51 )
      {
LABEL_139:
        LODWORD(v52) = 1;
        goto LABEL_140;
      }
      if ( v51 < 0 )
      {
        LODWORD(v52) = 0;
LABEL_140:
        HIDWORD(v52) = 0;
LABEL_144:
        v12->expires = v52;
        goto LABEL_77;
      }
      v12->expires = v51;
    }
LABEL_77:
    v39 = domain_0;
    do
    {
      v41 = *(unsigned __int8 *)v39++;
      v40 = v41;
      if ( !v41 )
        goto LABEL_145;
      v42 = v40 == 9;
      if ( v40 != 9 )
        v42 = v40 == 32;
    }
    while ( v42 );
    if ( v40 != 59 )
      break;
    v8 = (char *)v39;
  }
LABEL_145:
  if ( !v124 )
  {
    v54 = v12->domain == 0;
    if ( !domain )
      v54 = 0;
    if ( !v54 || (v55 = Curl_cstrdup(domain), (v12->domain = (char *)v55) != 0) )
    {
      v56 = v12->path == 0;
      if ( !path )
        v56 = 0;
      if ( !v56 )
        goto LABEL_291;
      v57 = strchr(path, 63);
      v58 = v57 ? (char *)Curl_memrchr(path, 47, v57 - path) : strrchr(path, 47);
      if ( !v58 )
        goto LABEL_291;
      v84 = v58 - path;
      v85 = v84 + 1;
      v86 = (char *)Curl_cmalloc(v84 + 2);
      v12->path = v86;
      if ( v86 )
      {
        memcpy(v86, path, v85);
        v12->path[v85] = 0;
        v87 = sanitize_cookie_path(v12->path);
        v12->spath = v87;
        if ( v87 )
        {
LABEL_291:
          if ( v12->name )
          {
            ++*(_BYTE *)(myhash + 270);
            goto LABEL_158;
          }
        }
      }
    }
  }
LABEL_65:
  freecookie(v12);
  return 0;
}
