Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  Cookie *v12; // r9
  time_t v13; // r7
  char *j; // r9
  char *i; // r7
  int v16; // r6
  bool v17; // zf
  size_t v18; // r0
  size_t v19; // r10
  char *v20; // r2
  size_t v21; // r0
  int v22; // r1
  bool v23; // zf
  Cookie *v24; // r6
  int v25; // r10
  int v26; // r0
  bool v27; // zf
  unsigned int v28; // r4
  size_t v29; // r0
  size_t v30; // r11
  char *v31; // r8
  int v32; // r1
  bool v33; // zf
  size_t v34; // r7
  const char *value; // r5
  bool v36; // cc
  unsigned __int8 v37; // r0
  char *v38; // r1
  int v39; // r2
  int v40; // r3
  bool v41; // zf
  int v42; // r0
  bool v43; // zf
  char *v44; // r0
  int v45; // r0
  int v46; // r0
  const char *name; // r4
  bool v48; // zf
  curl_off_t *v49; // r4
  char *v50; // r0
  int v51; // r0
  int v52; // r0
  bool v53; // zf
  const char *v54; // r4
  _BYTE *v55; // r0
  size_t v56; // r5
  const char *v57; // r7
  bool v58; // zf
  const char *v59; // r0
  int is_ipnum; // r0
  int v61; // r8
  int v62; // r0
  int v63; // r0
  char *v64; // r0
  char *v65; // r0
  char *v66; // r0
  char *v67; // r0
  Cookie *v68; // r8
  const char *v69; // r11
  int v70; // r7
  int v71; // r5
  int (__fastcall **v72)(const char *); // r9
  const char *v73; // r0
  int v74; // r0
  bool v75; // cf
  int v76; // r1
  const char *v77; // r0
  int v78; // r0
  int v79; // r0
  int v80; // r0
  int (__fastcall *v81)(const char *); // r1
  int v82; // r7
  int v83; // r0
  char *v84; // r0
  int v85; // r0
  bool v86; // zf
  Cookie *v87; // r0
  Curl_easy *v88; // r4
  CookieInfo *v89; // r6
  int v90; // r0
  Cookie *next; // r0
  Cookie *v92; // r4
  Cookie *v93; // r8
  Cookie *v94; // r11
  char v95; // r10
  Cookie *v96; // r5
  char *v97; // r0
  char *v98; // r1
  const char *spath; // r7
  char *v100; // r9
  bool v101; // zf
  bool v102; // zf
  char *v103; // r0
  size_t v104; // r2
  char *v105; // r0
  char *v106; // r1
  char v107; // r0
  char v108; // r0
  char *v109; // r0
  char *v110; // r1
  const char *v111; // r0
  bool v112; // zf
  Cookie *v113; // r0
  int creationtime; // r2
  char *v115; // r0
  void (__fastcall **v116)(Cookie *); // r9
  char *v117; // r2
  char *v118; // r3
  char *v119; // r4
  char *v120; // r6
  char *v121; // r7
  int expires_high; // r2
  int v123; // r3
  int v124; // r4
  int v125; // r6
  int v126; // r7
  bool v127; // zf
  curl_off_t expires; // r0
  curl_off_t *p_next_expiration; // r6
  unsigned int next_expiration; // t1
  const char *v132; // r2
  int v133; // r0
  char *v134; // r0
  char *v135; // r0
  int v136; // r4
  char *v137; // r0
  size_t v138; // r4
  char *v139; // r0
  bool v140; // zf
  curl_off_t v141; // [sp+20h] [bp-D0h]
  curl_off_t *v142; // [sp+28h] [bp-C8h]
  char *v143; // [sp+2Ch] [bp-C4h]
  char v144; // [sp+30h] [bp-C0h]
  CookieInfo *cookies; // [sp+38h] [bp-B8h]
  int v147; // [sp+3Ch] [bp-B4h]
  time_t v148; // [sp+40h] [bp-B0h]
  curl_off_t *p_expires; // [sp+40h] [bp-B0h]
  size_t v150; // [sp+40h] [bp-B0h]
  Curl_easy *v151; // [sp+44h] [bp-ACh]
  Cookie *v152; // [sp+48h] [bp-A8h]
  char *dest[41]; // [sp+4Ch] [bp-A4h] BYREF

  v12 = 0;
  v13 = time(0u);
  if ( data->req.setcookies > 0x31u )
    return v12;
  v152 = (Cookie *)((int (__fastcall *)(int, int))*Curl_ccalloc)(1, 48);
  if ( !v152 )
    return v12;
  j = (char *)lineptr;
  v148 = v13;
  v147 = noexpire;
  v151 = data;
  if ( !httpheader )
  {
    dest[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      j = (char *)(lineptr + 0xA);
      v152->httponly = 1;
    }
    if ( *j != 35 )
    {
      v65 = strchr(j, 13);
      if ( v65 )
        *v65 = 0;
      v66 = strchr(j, 10);
      if ( v66 )
        *v66 = 0;
      v67 = strtok_r(j, "\t", dest);
      if ( !v67 )
      {
LABEL_183:
        v87 = v152;
        goto LABEL_268;
      }
      cookies = c;
      v68 = v152;
      v69 = v67;
      v70 = 0;
      v71 = 0;
      p_expires = &v152->expires;
      v72 = (int (__fastcall **)(const char *))Curl_cstrdup;
      while ( 2 )
      {
        switch ( v70 )
        {
          case 0:
            v73 = v69 + 1;
            if ( *v69 != 46 )
              v73 = v69;
            v74 = (*v72)(v73);
            v75 = v74 == 0;
            v76 = -v74;
            v68->domain = (char *)v74;
            v70 = 0;
            goto LABEL_165;
          case 1:
            v70 = 1;
            v68->tailmatch = curl_strequal(v69, "TRUE") != 0;
            goto LABEL_175;
          case 2:
            if ( !strcmp("TRUE", v69) || !strcmp("FALSE", v69) )
            {
              v80 = (*v72)("/");
              v81 = *v72;
              v82 = v80;
              v68->path = (char *)v80;
              v83 = v81("/");
              v68->spath = (char *)v83;
              v71 |= v82 == 0 || v83 == 0;
LABEL_168:
              v68->secure = 0;
              v70 = 3;
              if ( curl_strequal(v69, "TRUE") )
              {
                if ( secure || cookies->running )
                {
                  v68->secure = 1;
                  goto LABEL_175;
                }
LABEL_172:
                v71 = 1;
              }
            }
            else
            {
              v77 = (const char *)(*v72)(v69);
              v70 = 2;
              v68->path = (char *)v77;
              if ( !v77 )
                goto LABEL_172;
              v74 = (int)sanitize_cookie_path(v77);
              v75 = v74 == 0;
              v76 = -v74;
              v68->spath = (char *)v74;
LABEL_165:
              v78 = v76 + v75 + v74;
LABEL_166:
              v71 |= v78;
            }
LABEL_175:
            v84 = strtok_r(0u, "\t", dest);
            ++v70;
            if ( v84 )
            {
              v69 = v84;
              if ( (v71 & 1) == 0 )
                continue;
            }
            if ( v70 == 6 )
            {
              v85 = (*v72)((const char *)&L_str_22);
              v70 = 7;
              v68->value = (char *)v85;
              LOBYTE(v71) = v71 | (v85 == 0);
              if ( !v85 )
                v70 = 6;
            }
            v86 = (v71 & 1) == 0;
            if ( (v71 & 1) == 0 )
              v86 = v70 == 7;
            if ( !v86 )
              goto LABEL_183;
            v88 = v151;
            v24 = v152;
            break;
          case 3:
            goto LABEL_168;
          case 4:
            v70 = 4;
            v78 = curlx_strtoofft(v69, 0, 10, p_expires) != 0;
            goto LABEL_166;
          case 5:
            v79 = (*v72)(v69);
            v70 = 5;
            v68->name = (char *)v79;
            if ( !v79 )
              goto LABEL_172;
            if ( curl_strnequal("__Secure-", v79, 9) )
            {
              v68->prefix |= 1u;
            }
            else if ( curl_strnequal("__Host-", v68->name, 7) )
            {
              v68->prefix |= 2u;
            }
            goto LABEL_175;
          case 6:
            v74 = (*v72)(v69);
            v75 = v74 == 0;
            v76 = -v74;
            v68->value = (char *)v74;
            v70 = 6;
            goto LABEL_165;
          default:
            goto LABEL_175;
        }
        goto LABEL_187;
      }
    }
LABEL_144:
    ((void (__fastcall *)(Cookie *))*Curl_cfree)(v152);
    return 0;
  }
  if ( strlen(lineptr) > 0x1388 )
    goto LABEL_144;
  cookies = c;
  HIDWORD(v141) = 0x7FFFFFFF - (v13 >> 0x1F);
  v143 = (char *)&data->set + 1335;
  LODWORD(v141) = ~v13;
  v142 = &v152->expires;
  v144 = 0;
  while ( 1 )
  {
    for ( i = j + 1; ; ++i )
    {
      v16 = (unsigned __int8)*j;
      v17 = v16 == 32;
      if ( v16 != 32 )
        v17 = v16 == 9;
      if ( !v17 )
        break;
      ++j;
    }
    v18 = strcspn(j, ";\t\r\n=");
    if ( !v18 )
    {
      v24 = v152;
      v25 = (int)j;
      goto LABEL_21;
    }
    v19 = v18;
    v20 = &j[v18];
    v21 = v18 - 1;
    do
    {
      v22 = (unsigned __int8)j[v21];
      v23 = v22 == 32;
      if ( v22 != 32 )
        v23 = v22 == 9;
      if ( !v23 )
      {
        v28 = v21 + 1;
        goto LABEL_29;
      }
      --v21;
    }
    while ( v21 != -1 );
    v28 = 0;
LABEL_29:
    if ( *v20 == 61 )
      break;
    v25 = (int)v20;
    v34 = 0;
    value = 0;
    v31 = 0;
LABEL_42:
    v36 = v28 > 0xFFE;
    if ( v28 <= 0xFFE )
      v36 = v34 > 0xFFE;
    if ( v36 || v34 + v28 > 0x1000 )
    {
      freecookie(v152);
      v12 = 0;
      if ( (v143[3] & 0x10) != 0 )
        Curl_infof(v151, "oversized cookie dropped, name/val %zu + %zu bytes", v28, v34);
      return v12;
    }
    v17 = v16 == 95;
    v24 = v152;
    if ( !v17 || v28 < 7 || j[1] != 95 )
      goto LABEL_61;
    if ( curl_strnequal("__Secure-", j, 9) )
    {
      v37 = v24->prefix | 1;
LABEL_60:
      v24->prefix = v37;
      goto LABEL_61;
    }
    if ( curl_strnequal("__Host-", j, 7) )
    {
      v37 = v24->prefix | 2;
      goto LABEL_60;
    }
LABEL_61:
    if ( !v24->name )
    {
      if ( !value )
        goto LABEL_267;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(0);
      v45 = Curl_memdup(j, v28 + 1);
      v24->name = (char *)v45;
      if ( v45 )
        *(_BYTE *)(v45 + v28) = 0;
      ((void (__fastcall *)(char *))*Curl_cfree)(v24->value);
      v46 = Curl_memdup(v31, v34 + 1);
      v24->value = (char *)v46;
      if ( v46 )
        *(_BYTE *)(v46 + v34) = 0;
      name = v24->name;
      v48 = name == 0;
      if ( name )
      {
        value = v24->value;
        v48 = value == 0;
      }
      if ( v48 )
        goto LABEL_267;
      if ( value[strcspn(value, invalid_octets_badoctets)] || name[strcspn(name, invalid_octets_badoctets)] )
      {
        if ( (v143[3] & 0x10) != 0 )
          Curl_infof(v151, "invalid octets in name/value, cookie dropped");
LABEL_267:
        v87 = v24;
LABEL_268:
        freecookie(v87);
        return 0;
      }
      goto LABEL_21;
    }
    if ( v34 )
      goto LABEL_63;
    if ( v28 == 8 )
    {
      if ( curl_strnequal("httponly", j, 8) )
      {
        v24->httponly = 1;
        goto LABEL_21;
      }
    }
    else if ( v28 == 6 && curl_strnequal("secure", j, 6) )
    {
      if ( !secure && cookies->running )
        goto LABEL_267;
      v24->secure = 1;
      goto LABEL_21;
    }
    if ( value )
    {
LABEL_63:
      if ( v28 == 7 )
      {
        if ( curl_strnequal("version", j, 7) )
          goto LABEL_21;
        if ( !curl_strnequal("max-age", j, 7) )
        {
          if ( !curl_strnequal("expires", j, 7) )
            goto LABEL_21;
          v49 = v142;
          if ( v34 > 0x7F || *v142 )
            goto LABEL_21;
          memcpy(dest, v31, v34);
          *((_BYTE *)dest + v34) = 0;
          v62 = Curl_getdate_capped(dest);
          *v142 = v62;
          if ( v62 )
          {
            if ( v62 > -1 )
              goto LABEL_21;
            *(_DWORD *)v142 = 0;
            goto LABEL_139;
          }
LABEL_138:
          *(_DWORD *)v49 = 1;
LABEL_139:
          *((_DWORD *)v49 + 1) = 0;
          goto LABEL_21;
        }
        v49 = v142;
        v50 = v31 + 1;
        if ( *v31 != 34 )
          v50 = v31;
        v51 = curlx_strtoofft(v50, 0, 10, v142);
        if ( v51 )
        {
          if ( v51 != 2 )
          {
            if ( v51 != 1 )
              goto LABEL_21;
LABEL_137:
            *(_DWORD *)v142 = -1;
            *((_DWORD *)v142 + 1) = 0x7FFFFFFF;
            goto LABEL_21;
          }
          goto LABEL_138;
        }
        if ( !*v142 )
          goto LABEL_138;
        if ( v141 < *v142 )
          goto LABEL_137;
        *v142 += v148;
      }
      else
      {
        if ( v28 != 6 )
        {
          if ( v28 == 4 && curl_strnequal("path", j, 4) )
          {
            ((void (__fastcall *)(char *))*Curl_cfree)(v24->path);
            v42 = Curl_memdup(v31, v34 + 1);
            v43 = v42 == 0;
            v24->path = (char *)v42;
            if ( v42 )
            {
              *(_BYTE *)(v42 + v34) = 0;
              v43 = v24->path == 0;
            }
            if ( v43 )
              goto LABEL_267;
            ((void (__fastcall *)(char *))*Curl_cfree)(v24->spath);
            v44 = sanitize_cookie_path(v24->path);
            v24->spath = v44;
            if ( !v44 )
              goto LABEL_267;
          }
          goto LABEL_21;
        }
        v52 = curl_strnequal("domain", j, 6);
        v53 = v34 == 0;
        if ( v34 )
          v53 = v52 == 0;
        if ( !v53 )
        {
          v54 = v31 + 1;
          if ( *v31 == 46 )
            --v34;
          else
            v54 = v31;
          if ( v34 == 9 && curl_strnequal(v54, "localhost", 9)
            || (v55 = memchr(v54, 46, v34)) != 0 && (unsigned int)(&v54[v34] - v55) > 1 )
          {
            v56 = v34;
            v57 = domain;
            v59 = domain;
            if ( !domain )
              v59 = v54;
            is_ipnum = Curl_host_is_ipnum(v59);
            v61 = is_ipnum;
            if ( !domain )
            {
              v57 = 0;
LABEL_130:
              domain = v57;
              ((void (__fastcall *)(char *))*Curl_cfree)(v24->domain);
              v63 = Curl_memdup(v54, v56 + 1);
              v24->domain = (char *)v63;
              if ( !v63 )
                goto LABEL_267;
              *(_BYTE *)(v63 + v56) = 0;
              v64 = v24->domain;
              if ( v61 | (v64 == 0) )
              {
                if ( !v64 )
                  goto LABEL_267;
                v144 |= v64 == 0;
              }
              else
              {
                v24->tailmatch = 1;
              }
              goto LABEL_21;
            }
            v58 = is_ipnum == 0;
          }
          else
          {
            v56 = v34;
            v57 = ":";
            v58 = Curl_host_is_ipnum(":") == 0;
          }
          if ( v58 )
          {
            v61 = 0;
            if ( cookie_tailmatch(v54, v56, v57) )
              goto LABEL_130;
          }
          else if ( !strncmp(v54, v57, v56) )
          {
            v61 = 1;
            if ( v56 == strlen(v57) )
              goto LABEL_130;
          }
          domain = v57;
          v144 = 1;
          if ( (v143[3] & 0x10) != 0 )
            Curl_infof(v151, "skipped cookie with bad tailmatch domain: %s", v54);
        }
      }
    }
LABEL_21:
    for ( j = (char *)(v25 + 1); ; ++j )
    {
      v26 = (unsigned __int8)*(j - 1);
      v27 = v26 == 32;
      if ( v26 != 32 )
        v27 = v26 == 9;
      if ( !v27 )
        break;
    }
    if ( v26 != 59 )
    {
      if ( (v144 & 1) != 0 )
        goto LABEL_267;
      if ( domain )
      {
        if ( !v24->domain )
        {
          v133 = ((int (__fastcall *)(const char *))*Curl_cstrdup)(domain);
          v24->domain = (char *)v133;
          if ( !v133 )
            goto LABEL_267;
        }
      }
      if ( path && !v24->path )
      {
        v134 = strchr(path, 63);
        v135 = v134 ? (char *)Curl_memrchr(path, 47, v134 - path) : strrchr(path, 47);
        if ( v135 )
        {
          v136 = v135 - path;
          v137 = (char *)((int (__fastcall *)(int))*Curl_cmalloc)(v135 - path + 2);
          v24->path = v137;
          if ( !v137 )
            goto LABEL_267;
          v138 = v136 + 1;
          memcpy(v137, path, v138);
          v24->path[v138] = 0;
          v139 = sanitize_cookie_path(v24->path);
          v24->spath = v139;
          if ( !v139 )
            goto LABEL_267;
        }
      }
      if ( !v24->name )
        goto LABEL_267;
      v88 = v151;
      ++v151->req.setcookies;
LABEL_187:
      v12 = 0;
      if ( (v24->prefix & 1) != 0 && !v24->secure )
        goto LABEL_243;
      if ( (v24->prefix & 2) != 0 )
      {
        v111 = (const char *)v24->secure;
        v112 = v111 == 0;
        if ( v24->secure )
        {
          v111 = v24->path;
          v112 = v111 == 0;
        }
        if ( v112 || strcmp(v111, "/") || v24->tailmatch )
        {
LABEL_243:
          v113 = v24;
LABEL_244:
          freecookie(v113);
          return v12;
        }
      }
      v89 = cookies;
      if ( !cookies->running && cookies->newsession && !v152->expires )
      {
        v113 = v152;
        goto LABEL_244;
      }
      v152->livecookie = cookies->running;
      v90 = cookies->lastct + 1;
      cookies->lastct = v90;
      v152->creationtime = v90;
      if ( !v147 )
        remove_expired(cookies);
      v150 = cookiehash(v152->domain);
      next = cookies->cookies[v150];
      if ( !next )
      {
        v96 = 0;
        v95 = 0;
        goto LABEL_252;
      }
      v92 = v152;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      while ( 1 )
      {
        v96 = next;
        if ( !curl_strequal(next->name, v92->name) )
          goto LABEL_213;
        v97 = v96->domain;
        v98 = v92->domain;
        if ( v97 )
        {
          if ( !v98 || !curl_strequal(v97, v98) )
            goto LABEL_213;
        }
        else if ( v98 )
        {
          goto LABEL_213;
        }
        spath = v96->spath;
        if ( spath )
        {
          v100 = v92->spath;
          v101 = v100 == 0;
          if ( v100 )
            v101 = !v96->secure;
          if ( !v101 )
          {
            v102 = !v92->secure;
            if ( !v92->secure )
              v102 = secure == 0;
            if ( v102 )
            {
              v103 = strchr(spath + 1, 47);
              v104 = v103 ? v103 - spath : strlen(spath);
              if ( curl_strnequal(spath, v100, v104) )
              {
                v140 = v151 == 0;
                if ( v151 )
                  v140 = (*((_BYTE *)&v151->set + 1338) & 0x10) == 0;
                if ( !v140 )
                  Curl_infof(
                    v151,
                    "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                    v92->name,
                    v92->domain);
LABEL_299:
                v87 = v92;
                goto LABEL_268;
              }
            }
          }
        }
LABEL_213:
        if ( v93 )
          goto LABEL_235;
        if ( !curl_strequal(v96->name, v92->name) )
          goto LABEL_234;
        v105 = v96->domain;
        v106 = v92->domain;
        if ( v105 )
        {
          if ( !v106 || !curl_strequal(v105, v106) )
          {
            v93 = 0;
            if ( (v95 & 1) == 0 )
            {
              v95 = 0;
              goto LABEL_235;
            }
            goto LABEL_223;
          }
          v107 = v92->tailmatch - v96->tailmatch + (v96->tailmatch == v92->tailmatch) + v96->tailmatch - v92->tailmatch;
        }
        else
        {
          v107 = v106 == 0;
        }
        v108 = v95 | v107;
        v95 = 0;
        if ( (v108 & 1) == 0 )
          goto LABEL_234;
LABEL_223:
        v109 = v96->spath;
        v110 = v92->spath;
        if ( v109 )
        {
          if ( !v110 )
          {
            if ( v92->spath )
            {
LABEL_231:
              v95 = 1;
              if ( v92->livecookie )
              {
                v94 = v96;
                v93 = v92;
              }
              else
              {
                v94 = v96;
                v93 = v92;
                if ( v96->livecookie )
                  goto LABEL_299;
              }
              goto LABEL_235;
            }
LABEL_233:
            v95 = 0;
LABEL_234:
            v93 = 0;
            goto LABEL_235;
          }
          if ( !curl_strequal(v109, v110) )
            goto LABEL_233;
          v95 = 0;
          v93 = 0;
          if ( (v96->spath != 0) != (v92->spath == 0) )
            goto LABEL_231;
        }
        else
        {
          v95 = 0;
          v93 = 0;
          if ( !v110 )
            goto LABEL_231;
        }
LABEL_235:
        next = v96->next;
        if ( !v96->next )
        {
          if ( v93 )
          {
            creationtime = v94->creationtime;
            v115 = v94->name;
            v93->next = v94->next;
            v93->creationtime = creationtime;
            v116 = (void (__fastcall **)(Cookie *))Curl_cfree;
            ((void (__fastcall *)(char *))*Curl_cfree)(v115);
            (*v116)((Cookie *)v94->value);
            (*v116)((Cookie *)v94->domain);
            (*v116)((Cookie *)v94->path);
            (*v116)((Cookie *)v94->spath);
            v117 = v93->name;
            v118 = v93->value;
            v119 = v93->path;
            v120 = v93->spath;
            v121 = v93->domain;
            v94->next = v93->next;
            v94->name = v117;
            v94->value = v118;
            v94->path = v119;
            v94->spath = v120;
            v94->domain = v121;
            expires_high = HIDWORD(v93->expires);
            v123 = *(_DWORD *)&v93->tailmatch;
            v124 = v93->creationtime;
            v125 = *(_DWORD *)&v93->prefix;
            v126 = *((_DWORD *)&v93->prefix + 1);
            LODWORD(v94->expires) = v93->expires;
            HIDWORD(v94->expires) = expires_high;
            *(_DWORD *)&v94->tailmatch = v123;
            v94->creationtime = v124;
            *(_DWORD *)&v94->prefix = v125;
            *((_DWORD *)&v94->prefix + 1) = v126;
            (*v116)(v93);
            v152 = v94;
          }
          v88 = v151;
          v89 = cookies;
LABEL_252:
          if ( !v88 )
            goto LABEL_257;
          v127 = !v89->running;
          if ( v89->running )
            v127 = (*((_BYTE *)&v88->set + 1338) & 0x10) == 0;
          if ( v127 )
          {
LABEL_257:
            if ( (v95 & 1) != 0 )
              goto LABEL_262;
          }
          else
          {
            v132 = "Added";
            if ( (v95 & 1) != 0 )
              v132 = "Replaced";
            Curl_infof(
              v88,
              "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
              v132,
              v152->name,
              v152->value,
              v152->domain,
              v152->path,
              v152->expires);
            if ( (v95 & 1) != 0 )
            {
LABEL_262:
              v12 = v152;
              expires = v152->expires;
              if ( expires )
              {
                next_expiration = v89->next_expiration;
                p_next_expiration = &v89->next_expiration;
                if ( expires < __SPAIR64__(*((_DWORD *)p_next_expiration + 1), next_expiration) )
                  *p_next_expiration = expires;
                return v152;
              }
              return v12;
            }
          }
          if ( v96 )
            v96->next = v152;
          else
            v89->cookies[v150] = v152;
          ++v89->numcookies;
          goto LABEL_262;
        }
      }
    }
  }
  v29 = strcspn(&j[v19 + 1], ";\r\n");
  v30 = v19 + v29;
  if ( v29 )
  {
    v31 = &i[v30];
    while ( 1 )
    {
      v32 = (unsigned __int8)*(v31 - 1);
      v33 = v32 == 32;
      if ( v32 != 32 )
        v33 = v32 == 9;
      if ( !v33 )
        break;
      --v29;
      --v31;
      if ( !v29 )
        goto LABEL_37;
    }
    v38 = &i[v19];
    v39 = 0;
    while ( 1 )
    {
      v40 = (unsigned __int8)v38[v39];
      v41 = v40 == 32;
      if ( v40 != 32 )
        v41 = v40 == 9;
      if ( !v41 )
        break;
      if ( v29 == ++v39 )
        goto LABEL_38;
    }
    v34 = v29 - v39;
    v31 = &v38[v39];
  }
  else
  {
LABEL_37:
    v31 = &j[v19 + 1];
LABEL_38:
    v34 = 0;
  }
  if ( !memchr(v31, 9, v34) )
  {
    value = (_BYTE *)(Curl_cookie_loadfiles + 1);
    v25 = (int)&j[v30 + 1];
    goto LABEL_42;
  }
  freecookie(v152);
  v12 = 0;
  if ( (v143[3] & 0x10) != 0 )
    Curl_infof(v151, "cookie contains TAB, dropping");
  return v12;
}
