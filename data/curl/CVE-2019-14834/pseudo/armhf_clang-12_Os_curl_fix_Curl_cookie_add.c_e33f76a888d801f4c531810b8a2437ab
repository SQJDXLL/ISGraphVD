Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  int v12; // r8
  time_t v13; // r7
  Cookie *v14; // r0
  char *j; // r11
  Cookie *v16; // r10
  char *i; // r7
  int v18; // r6
  bool v19; // zf
  size_t v20; // r0
  size_t v21; // r10
  char *v22; // r2
  size_t v23; // r0
  int v24; // r1
  bool v25; // zf
  char *v26; // r7
  int v27; // r1
  bool v28; // zf
  int v29; // r0
  const char *name; // r4
  size_t v31; // r5
  char *v32; // r8
  size_t v33; // r0
  size_t v34; // r9
  int v35; // r1
  bool v36; // zf
  char *v37; // r0
  bool v38; // cc
  unsigned __int8 v39; // r0
  char *v40; // r1
  int v41; // r2
  int v42; // r3
  bool v43; // zf
  int v44; // r0
  char *v45; // r0
  size_t v46; // r6
  void (__fastcall **v47)(char *); // r5
  const char *v48; // r0
  bool v49; // zf
  curl_off_t *v50; // r4
  char *v51; // r0
  int v52; // r0
  int v53; // r0
  bool v54; // zf
  const char *v55; // r4
  _BYTE *v56; // r0
  size_t v57; // r6
  const char *v58; // r5
  const char *v59; // r0
  int is_ipnum; // r0
  int v61; // r8
  int v62; // r0
  int v63; // r0
  int v64; // r0
  char *v65; // r0
  char *v66; // r0
  char *v67; // r0
  const char *v68; // r8
  int v69; // r7
  int (__fastcall **v70)(const char *); // r4
  int v71; // r11
  const char *v72; // r0
  int v73; // r0
  char *v74; // r0
  Cookie *v75; // r6
  bool v76; // cf
  int v77; // r1
  char *v78; // r1
  char *v79; // r0
  Cookie *v80; // r6
  int (__fastcall *v81)(const char *); // r1
  char *v82; // r7
  int v83; // r0
  char *v84; // r0
  char *v85; // r0
  bool v86; // zf
  int v88; // r0
  char *v89; // r0
  char *v90; // r0
  int v91; // r4
  char *v92; // r0
  size_t v93; // r4
  char *v94; // r0
  CookieInfo *v95; // r4
  int v96; // r0
  Cookie *next; // r0
  Cookie *v98; // r8
  Cookie *v99; // r4
  char v100; // r11
  Cookie *v101; // r5
  char *v102; // r0
  char *v103; // r1
  const char *spath; // r7
  char *v105; // r9
  bool v106; // zf
  bool v107; // zf
  char *v108; // r0
  size_t v109; // r2
  char *v110; // r0
  char *v111; // r1
  char v112; // r0
  char v113; // r0
  char *v114; // r0
  char *v115; // r1
  const char *v116; // r0
  bool v117; // zf
  int creationtime; // r2
  char *v119; // r0
  void (__fastcall **v120)(Cookie *); // r9
  Cookie *v121; // r12
  char *v122; // r2
  char *value; // r3
  char *v124; // r4
  char *v125; // r6
  char *v126; // r7
  char *expires_high; // r2
  char *v128; // r3
  int v129; // r4
  char *v130; // r6
  char *v131; // r7
  bool v132; // zf
  __int64 expires; // r0
  curl_off_t *p_next_expiration; // r4
  unsigned int next_expiration; // t1
  const char *v136; // r2
  bool v137; // zf
  curl_off_t v138; // [sp+1Ch] [bp-D4h]
  curl_off_t *p_expires; // [sp+24h] [bp-CCh]
  char *v140; // [sp+28h] [bp-C8h]
  char v141; // [sp+2Ch] [bp-C4h]
  int v143; // [sp+34h] [bp-BCh]
  Curl_easy *v144; // [sp+38h] [bp-B8h]
  Curl_easy *v145; // [sp+38h] [bp-B8h]
  time_t v146; // [sp+3Ch] [bp-B4h]
  CookieInfo *cookies; // [sp+40h] [bp-B0h]
  int v148; // [sp+44h] [bp-ACh]
  Cookie *v149; // [sp+48h] [bp-A8h]
  char *dest[41]; // [sp+4Ch] [bp-A4h] BYREF

  v12 = 0;
  v13 = time(0u);
  if ( data->req.setcookies > 0x31u )
    return (Cookie *)v12;
  v14 = (Cookie *)((int (__fastcall *)(int, int))*Curl_ccalloc)(1, 48);
  if ( !v14 )
    return (Cookie *)v12;
  j = (char *)lineptr;
  v16 = v14;
  v146 = v13;
  v143 = noexpire;
  cookies = c;
  v149 = v14;
  if ( !httpheader )
  {
    dest[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      j = (char *)(lineptr + 0xA);
      v16->httponly = 1;
    }
    if ( *j != 35 )
    {
      v65 = strchr(j, 13);
      if ( v65 )
        *v65 = 0;
      v66 = strchr(j, 10);
      if ( v66 )
        *v66 = 0;
      v67 = strtok_r(j, "\t", dest);
      if ( v67 )
      {
        v68 = v67;
        v69 = 0;
        v70 = (int (__fastcall **)(const char *))Curl_cstrdup;
        while ( 2 )
        {
          v71 = 0;
          switch ( v69 )
          {
            case 0:
              v72 = v68 + 1;
              if ( *v68 != 46 )
                v72 = v68;
              v73 = (*v70)(v72);
              v69 = 0;
              v149->domain = (char *)v73;
              goto LABEL_159;
            case 1:
              v69 = 1;
              v149->tailmatch = curl_strequal(v68, "TRUE") != 0;
              goto LABEL_169;
            case 2:
              if ( !strcmp("TRUE", v68) || !strcmp("FALSE", v68) )
              {
                v79 = (char *)(*v70)("/");
                v80 = v149;
                v81 = *v70;
                v82 = v79;
                v149->path = v79;
                v83 = v81("/");
                v80->spath = (char *)v83;
                v71 = v82 == 0 || v83 == 0;
LABEL_162:
                v149->secure = 0;
                v69 = 3;
                if ( curl_strequal(v68, "TRUE") )
                {
                  if ( secure || c->running )
                  {
                    v149->secure = 1;
                    goto LABEL_170;
                  }
LABEL_166:
                  v71 = 1;
                }
              }
              else
              {
                v74 = (char *)(*v70)(v68);
                v75 = v149;
                v69 = 2;
                v149->path = v74;
                if ( !v74 )
                  goto LABEL_166;
                v73 = (int)sanitize_cookie_path(v74);
                v76 = v73 == 0;
                v77 = -v73;
                v75->spath = (char *)v73;
LABEL_160:
                v71 = v77 + v76 + v73;
              }
LABEL_170:
              v84 = strtok_r(0u, "\t", dest);
              ++v69;
              if ( !v71 )
              {
                v68 = v84;
                if ( v84 )
                  continue;
              }
              if ( v69 == 6 )
              {
                v85 = (char *)(*v70)((const char *)&L_str_22);
                v69 = 7;
                v149->value = v85;
                v71 |= v85 == 0;
                if ( !v85 )
                  v69 = 6;
              }
              v16 = v149;
              v86 = v71 == 0;
              if ( !v71 )
                v86 = v69 == 7;
              if ( !v86 )
                goto LABEL_178;
              goto LABEL_201;
            case 3:
              goto LABEL_162;
            case 4:
              v69 = 4;
              v71 = curlx_strtoofft(v68, 0, 10, &v16->expires) != 0;
              goto LABEL_170;
            case 5:
              v78 = (char *)(*v70)(v68);
              v69 = 5;
              v149->name = v78;
              if ( !v78 )
                goto LABEL_166;
              if ( curl_strnequal("__Secure-", v78, 9) )
              {
                v149->prefix |= 1u;
              }
              else if ( curl_strnequal("__Host-", v149->name, 7) )
              {
                v149->prefix |= 2u;
              }
LABEL_169:
              v71 = 0;
              goto LABEL_170;
            case 6:
              v73 = (*v70)(v68);
              v69 = 6;
              v149->value = (char *)v73;
LABEL_159:
              v76 = v73 == 0;
              v77 = -v73;
              goto LABEL_160;
            default:
              goto LABEL_169;
          }
        }
      }
LABEL_178:
      freecookie(v16);
      return 0;
    }
LABEL_138:
    ((void (__fastcall *)(Cookie *))*Curl_cfree)(v16);
    return 0;
  }
  if ( strlen(lineptr) > 0x1388 )
    goto LABEL_138;
  v144 = data;
  HIDWORD(v138) = 0x7FFFFFFF - (v13 >> 0x1F);
  v140 = (char *)&data->set + 1334;
  LODWORD(v138) = ~v13;
  p_expires = &v16->expires;
  v141 = 0;
  while ( 1 )
  {
    for ( i = j + 1; ; ++i )
    {
      v18 = (unsigned __int8)*j;
      v19 = v18 == 32;
      if ( v18 != 32 )
        v19 = v18 == 9;
      if ( !v19 )
        break;
      ++j;
    }
    v20 = strcspn(j, ";\t\r\n=");
    if ( !v20 )
    {
      v16 = v149;
      v26 = j;
      goto LABEL_21;
    }
    v21 = v20;
    v22 = &j[v20];
    v23 = v20 - 1;
    do
    {
      v24 = (unsigned __int8)j[v23];
      v25 = v24 == 32;
      if ( v24 != 32 )
        v25 = v24 == 9;
      if ( !v25 )
      {
        name = (const char *)(v23 + 1);
        goto LABEL_30;
      }
      --v23;
    }
    while ( v23 != -1 );
    name = 0;
LABEL_30:
    v31 = 0;
    v32 = 0;
    v148 = (unsigned __int8)*v22;
    if ( v148 == 61 )
      break;
LABEL_42:
    v38 = (unsigned int)name > 0xFFE;
    if ( (unsigned int)name <= 0xFFE )
      v38 = v31 > 0xFFE;
    if ( v38 || (unsigned int)&name[v31] > 0x1000 )
    {
      freecookie(v149);
      v12 = 0;
      if ( (v140[3] & 0x20) != 0 )
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", (size_t)name, v31);
      return (Cookie *)v12;
    }
    v16 = v149;
    v26 = v22;
    if ( v18 == 95 && (unsigned int)name >= 7 && j[1] == 95 )
    {
      if ( curl_strnequal("__Secure-", j, 9) )
      {
        v39 = v16->prefix | 1;
      }
      else
      {
        if ( !curl_strnequal("__Host-", j, 7) )
          goto LABEL_60;
        v39 = v16->prefix | 2;
      }
      v16->prefix = v39;
    }
LABEL_60:
    if ( !v16->name )
    {
      if ( v148 != 61 )
        goto LABEL_178;
      v46 = v31;
      v47 = (void (__fastcall **)(char *))Curl_cfree;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(0);
      v16->name = (char *)Curl_strndup(j, name);
      (*v47)(v16->value);
      v48 = (const char *)Curl_strndup(v32, v46);
      v49 = v48 == 0;
      v16->value = (char *)v48;
      if ( v48 )
      {
        name = v16->name;
        v49 = name == 0;
      }
      if ( v49 )
        goto LABEL_178;
      if ( v48[strcspn(v48, invalid_octets_badoctets)] || name[strcspn(name, invalid_octets_badoctets)] )
      {
        if ( (v140[3] & 0x20) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
        goto LABEL_178;
      }
      goto LABEL_21;
    }
    if ( !v31 )
    {
      if ( name == (const char *)&loc_8 )
      {
        if ( curl_strnequal("httponly", j, 8) )
        {
          v16->httponly = 1;
          goto LABEL_21;
        }
      }
      else if ( name == (_BYTE *)&loc_4 + 2 && curl_strnequal("secure", j, 6) )
      {
        if ( !secure && cookies->running )
          goto LABEL_178;
        v16->secure = 1;
        goto LABEL_21;
      }
      if ( v148 != 61 )
        goto LABEL_21;
    }
    if ( name == (_BYTE *)&loc_4 + 3 )
    {
      if ( curl_strnequal("version", j, 7) )
        goto LABEL_21;
      if ( curl_strnequal("max-age", j, 7) )
      {
        v50 = p_expires;
        v51 = v32 + 1;
        if ( *v32 != 34 )
          v51 = v32;
        v52 = curlx_strtoofft(v51, 0, 10, p_expires);
        if ( v52 )
        {
          if ( v52 != 2 )
          {
            if ( v52 != 1 )
              goto LABEL_21;
            goto LABEL_129;
          }
        }
        else if ( *p_expires )
        {
          if ( v138 >= *p_expires )
          {
            *p_expires += v146;
            goto LABEL_21;
          }
LABEL_129:
          *(_DWORD *)p_expires = -1;
          v63 = 0x7FFFFFFF;
          goto LABEL_130;
        }
        *(_DWORD *)p_expires = 1;
        *((_DWORD *)p_expires + 1) = 0;
        goto LABEL_21;
      }
      if ( !curl_strnequal("expires", j, 7) )
        goto LABEL_21;
      v50 = p_expires;
      if ( v31 > 0x7F || *p_expires )
        goto LABEL_21;
      memcpy(dest, v32, v31);
      *((_BYTE *)dest + v31) = 0;
      v62 = Curl_getdate_capped(dest);
      *p_expires = v62;
      if ( !v62 )
      {
        *(_DWORD *)p_expires = 1;
        *((_DWORD *)p_expires + 1) = 0;
        goto LABEL_21;
      }
      if ( v62 <= -1 )
      {
        v63 = 0;
        *(_DWORD *)p_expires = 0;
LABEL_130:
        *((_DWORD *)v50 + 1) = v63;
      }
LABEL_21:
      for ( j = v26 + 1; ; ++j )
      {
        v27 = (unsigned __int8)*(j - 1);
        v28 = v27 == 32;
        if ( v27 != 32 )
          v28 = v27 == 9;
        if ( !v28 )
          break;
      }
      v29 = 0;
      if ( v27 == 59 )
        goto LABEL_28;
LABEL_183:
      if ( (v141 & 1) != 0 )
        goto LABEL_178;
      if ( domain )
      {
        if ( !v16->domain )
        {
          v88 = ((int (__fastcall *)(const char *))*Curl_cstrdup)(domain);
          v16->domain = (char *)v88;
          if ( !v88 )
            goto LABEL_178;
        }
      }
      if ( path && !v16->path )
      {
        v89 = strchr(path, 63);
        v90 = v89 ? (char *)Curl_memrchr(path, 47, v89 - path) : strrchr(path, 47);
        if ( v90 )
        {
          v91 = v90 - path;
          v92 = (char *)((int (__fastcall *)(int))*Curl_cmalloc)(v90 - path + 2);
          v16->path = v92;
          if ( !v92 )
            goto LABEL_178;
          v93 = v91 + 1;
          memcpy(v92, path, v93);
          v16->path[v93] = 0;
          v94 = sanitize_cookie_path(v16->path);
          v16->spath = v94;
          if ( !v94 )
            goto LABEL_178;
        }
      }
      if ( !v16->name )
        goto LABEL_178;
      ++data->req.setcookies;
LABEL_201:
      v12 = 0;
      if ( (v16->prefix & 1) != 0 && !v16->secure )
        goto LABEL_257;
      if ( (v16->prefix & 2) != 0 )
      {
        v116 = (const char *)v16->secure;
        v117 = v116 == 0;
        if ( v16->secure )
        {
          v116 = v16->path;
          v117 = v116 == 0;
        }
        if ( v117 || strcmp(v116, "/") || v16->tailmatch )
          goto LABEL_257;
      }
      v95 = cookies;
      if ( !cookies->running && cookies->newsession && !v16->expires )
      {
LABEL_257:
        freecookie(v16);
        return (Cookie *)v12;
      }
      v16->livecookie = cookies->running;
      v96 = cookies->lastct + 1;
      cookies->lastct = v96;
      v16->creationtime = v96;
      if ( !v143 )
        remove_expired(cookies);
      v149 = (Cookie *)cookiehash(v16->domain);
      next = cookies->cookies[(_DWORD)v149];
      if ( next )
      {
        v98 = 0;
        v99 = 0;
        v100 = 0;
        v145 = data;
        while ( 1 )
        {
          v101 = next;
          if ( !curl_strequal(next->name, v16->name) )
            goto LABEL_227;
          v102 = v101->domain;
          v103 = v16->domain;
          if ( v102 )
          {
            if ( !v103 || !curl_strequal(v102, v103) )
              goto LABEL_227;
          }
          else if ( v103 )
          {
            goto LABEL_227;
          }
          spath = v101->spath;
          if ( spath )
          {
            v105 = v16->spath;
            v106 = v105 == 0;
            if ( v105 )
              v106 = !v101->secure;
            if ( !v106 )
            {
              v107 = !v16->secure;
              if ( !v16->secure )
                v107 = secure == 0;
              if ( v107 )
              {
                v108 = strchr(spath + 1, 47);
                v109 = v108 ? v108 - spath : strlen(spath);
                if ( curl_strnequal(spath, v105, v109) )
                {
                  v137 = v145 == 0;
                  if ( v145 )
                    v137 = (*((_BYTE *)&v145->set + 1337) & 0x20) == 0;
                  if ( !v137 )
                    Curl_infof(
                      v145,
                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                      v16->name,
                      v16->domain);
                  goto LABEL_178;
                }
              }
            }
          }
LABEL_227:
          if ( v98 )
            goto LABEL_249;
          if ( !curl_strequal(v101->name, v16->name) )
            goto LABEL_248;
          v110 = v101->domain;
          v111 = v16->domain;
          if ( v110 )
          {
            if ( !v111 || !curl_strequal(v110, v111) )
            {
              v98 = 0;
              if ( (v100 & 1) == 0 )
              {
                v100 = 0;
                goto LABEL_249;
              }
              goto LABEL_237;
            }
            v112 = v16->tailmatch
                 - v101->tailmatch
                 + (v101->tailmatch == v16->tailmatch)
                 + v101->tailmatch
                 - v16->tailmatch;
          }
          else
          {
            v112 = v111 == 0;
          }
          v113 = v100 | v112;
          v100 = 0;
          if ( (v113 & 1) == 0 )
            goto LABEL_248;
LABEL_237:
          v114 = v101->spath;
          v115 = v16->spath;
          if ( v114 )
          {
            if ( !v115 )
            {
              if ( v16->spath )
              {
LABEL_245:
                v100 = 1;
                if ( v16->livecookie )
                {
                  v99 = v101;
                  v98 = v16;
                }
                else
                {
                  v99 = v101;
                  v98 = v16;
                  if ( v101->livecookie )
                    goto LABEL_178;
                }
                goto LABEL_249;
              }
LABEL_247:
              v100 = 0;
LABEL_248:
              v98 = 0;
              goto LABEL_249;
            }
            if ( !curl_strequal(v114, v115) )
              goto LABEL_247;
            v100 = 0;
            v98 = 0;
            if ( (v101->spath != 0) != (v16->spath == 0) )
              goto LABEL_245;
          }
          else
          {
            v100 = 0;
            v98 = 0;
            if ( !v115 )
              goto LABEL_245;
          }
LABEL_249:
          next = v101->next;
          if ( !v101->next )
          {
            if ( v98 )
            {
              creationtime = v99->creationtime;
              v119 = v99->name;
              v98->next = v99->next;
              v98->creationtime = creationtime;
              v120 = (void (__fastcall **)(Cookie *))Curl_cfree;
              ((void (__fastcall *)(char *))*Curl_cfree)(v119);
              (*v120)((Cookie *)v99->value);
              (*v120)((Cookie *)v99->domain);
              (*v120)((Cookie *)v99->path);
              (*v120)((Cookie *)v99->spath);
              v121 = v99;
              v16 = v99;
              v122 = v98->name;
              value = v98->value;
              v124 = v98->path;
              v125 = v98->spath;
              v126 = v98->domain;
              v121->next = v98->next;
              v121->name = v122;
              v121->value = value;
              v121->path = v124;
              v121->spath = v125;
              v121->domain = v126;
              v121 = (Cookie *)((char *)v121 + 24);
              expires_high = (char *)HIDWORD(v98->expires);
              v128 = *(char **)&v98->tailmatch;
              v129 = v98->creationtime;
              v130 = *(char **)&v98->prefix;
              v131 = (char *)*((_DWORD *)&v98->prefix + 1);
              v121->next = (Cookie *)v98->expires;
              v121->name = expires_high;
              v121->value = v128;
              v121->path = (char *)v129;
              v121->spath = v130;
              v121->domain = v131;
              (*v120)(v98);
            }
            data = v145;
            v95 = cookies;
            goto LABEL_265;
          }
        }
      }
      v101 = 0;
      v100 = 0;
LABEL_265:
      if ( !data )
        goto LABEL_270;
      v132 = !v95->running;
      if ( v95->running )
        v132 = (*((_BYTE *)&data->set + 1337) & 0x20) == 0;
      if ( v132 )
      {
LABEL_270:
        if ( (v100 & 1) != 0 )
          goto LABEL_275;
      }
      else
      {
        v136 = "Added";
        if ( (v100 & 1) != 0 )
          v136 = "Replaced";
        Curl_infof(
          data,
          "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
          v136,
          v16->name,
          v16->value,
          v16->domain,
          v16->path,
          v16->expires);
        if ( (v100 & 1) != 0 )
          goto LABEL_275;
      }
      if ( v101 )
        v101->next = v16;
      else
        v95->cookies[(_DWORD)v149] = v16;
      ++v95->numcookies;
LABEL_275:
      expires = v16->expires;
      if ( expires )
      {
        next_expiration = v95->next_expiration;
        p_next_expiration = &v95->next_expiration;
        if ( expires < __SPAIR64__(*((_DWORD *)p_next_expiration + 1), next_expiration) )
          *p_next_expiration = expires;
      }
      return v16;
    }
    if ( name != (_BYTE *)&loc_4 + 2 )
    {
      if ( name == (const char *)&loc_4 )
      {
        if ( curl_strnequal("path", j, 4) )
        {
          ((void (__fastcall *)(char *))*Curl_cfree)(v16->path);
          v44 = Curl_strndup(v32, v31);
          v16->path = (char *)v44;
          if ( !v44 )
            goto LABEL_178;
          ((void (__fastcall *)(char *))*Curl_cfree)(v16->spath);
          v45 = sanitize_cookie_path(v16->path);
          v16->spath = v45;
          if ( !v45 )
            goto LABEL_178;
        }
      }
      goto LABEL_21;
    }
    v53 = curl_strnequal("domain", j, 6);
    v54 = v31 == 0;
    if ( v31 )
      v54 = v53 == 0;
    if ( v54 )
      goto LABEL_21;
    v55 = v32 + 1;
    if ( *v32 == 46 )
      --v31;
    else
      v55 = v32;
    if ( v31 == 9 && curl_strnequal(v55, "localhost", 9)
      || (v56 = memchr(v55, 46, v31)) != 0 && (unsigned int)(&v55[v31] - v56) > 1 )
    {
      v57 = v31;
      v58 = domain;
      v59 = domain;
      if ( !domain )
        v59 = v55;
      is_ipnum = Curl_host_is_ipnum(v59);
      v61 = is_ipnum;
      if ( !domain )
      {
        v58 = 0;
        goto LABEL_122;
      }
      if ( !is_ipnum )
      {
LABEL_104:
        v61 = 0;
        if ( !cookie_tailmatch(v55, v57, v58) )
          goto LABEL_113;
        goto LABEL_122;
      }
    }
    else
    {
      v57 = v31;
      v58 = ":";
      if ( !Curl_host_is_ipnum(":") )
        goto LABEL_104;
    }
    if ( strncmp(v55, v58, v57) || (v61 = 1, v57 != strlen(v58)) )
    {
LABEL_113:
      domain = v58;
      v141 = 1;
      if ( (v140[3] & 0x20) != 0 )
        Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v55);
      goto LABEL_21;
    }
LABEL_122:
    domain = v58;
    ((void (__fastcall *)(char *))*Curl_cfree)(v16->domain);
    v64 = Curl_strndup(v55, v57);
    v16->domain = (char *)v64;
    if ( !v61 && v64 )
    {
      v16->tailmatch = 1;
      goto LABEL_21;
    }
    if ( v64 )
    {
      v141 |= v64 == 0;
      goto LABEL_21;
    }
    v29 = 6;
    j = v26;
    v141 = 1;
LABEL_28:
    if ( v29 )
      goto LABEL_183;
  }
  v33 = strcspn(&j[v21 + 1], ";\r\n");
  v34 = v21 + v33;
  if ( v33 )
  {
    v32 = &i[v34];
    while ( 1 )
    {
      v35 = (unsigned __int8)*(v32 - 1);
      v36 = v35 == 32;
      if ( v35 != 32 )
        v36 = v35 == 9;
      if ( !v36 )
        break;
      --v33;
      --v32;
      if ( !v33 )
        goto LABEL_38;
    }
    v40 = &i[v21];
    v41 = 0;
    while ( 1 )
    {
      v42 = (unsigned __int8)v40[v41];
      v43 = v42 == 32;
      if ( v42 != 32 )
        v43 = v42 == 9;
      if ( !v43 )
        break;
      if ( v33 == ++v41 )
        goto LABEL_39;
    }
    v31 = v33 - v41;
    v32 = &v40[v41];
  }
  else
  {
LABEL_38:
    v32 = &j[v21 + 1];
LABEL_39:
    v31 = 0;
  }
  if ( !memchr(v32, 9, v31) )
  {
    v37 = &j[v34];
    data = v144;
    v22 = v37 + 1;
    goto LABEL_42;
  }
  freecookie(v149);
  v12 = 0;
  if ( (v140[3] & 0x20) != 0 )
    Curl_infof(v144, "cookie contains TAB, dropping");
  return (Cookie *)v12;
}
