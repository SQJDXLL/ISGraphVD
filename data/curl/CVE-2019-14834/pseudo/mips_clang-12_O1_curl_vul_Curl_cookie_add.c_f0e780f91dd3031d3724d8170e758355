Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  int v16; // $s6
  time_t v17; // $v0
  int v18; // $fp
  int v19; // $v0
  Cookie *v20; // $s5
  char *v21; // $s1
  int v22; // $fp
  char *v23; // $v0
  char *v24; // $v0
  char *i; // $s6
  int v26; // $s5
  size_t v27; // $v0
  size_t v28; // $fp
  size_t v29; // $s4
  int v30; // $v0
  int v31; // $a0
  size_t v32; // $s7
  _BYTE *v33; // $v1
  const char *v34; // $s1
  size_t v35; // $v0
  int v36; // $v1
  int v37; // $v0
  int v38; // $a0
  int v39; // $v1
  int v40; // $fp
  int v41; // $fp
  _BYTE *v42; // $s5
  int v43; // $v0
  _BYTE *v44; // $fp
  char *v45; // $v0
  const char *v46; // $s4
  _BYTE *v47; // $fp
  int v48; // $v0
  int v49; // $v0
  int v50; // $v0
  size_t v51; // $s4
  const char *v52; // $s7
  const char *v53; // $a0
  int v54; // $v0
  int v55; // $s6
  char *v56; // $v0
  _BOOL4 v57; // $v1
  int v58; // $fp
  int v59; // $v0
  int v60; // $v0
  int v61; // $v0
  unsigned int v62; // $v1
  _BOOL4 v63; // $a0
  char v64; // $s6
  const char *v65; // $s4
  int v66; // $v0
  char *v67; // $v0
  char *v68; // $v0
  int v69; // $s0
  char *v70; // $v0
  char *v71; // $v0
  int v72; // $at
  Cookie **v73; // $s2
  Cookie *next; // $v0
  Cookie *v75; // $s1
  Cookie *v76; // $s7
  int v77; // $s6
  Cookie *v78; // $s3
  const char *spath; // $s4
  char *v80; // $s5
  char *v81; // $v0
  size_t v82; // $a2
  const char *v83; // $a0
  int expires; // $at
  int v85; // $v0
  int creationtime; // $v1
  int v87; // $a0
  char *v88; // $a1
  char *v89; // $a2
  char *v90; // $a3
  int expires_high; // $t0
  const char *v92; // $a2
  curl_off_t v93; // $v1
  int next_expiration_high; // $at
  _BOOL4 v95; // $a1
  int v97; // [sp+28h] [-D8h]
  unsigned int v98; // [sp+2Ch] [-D4h]
  int v99; // [sp+30h] [-D0h]
  int v100; // [sp+34h] [-CCh]
  curl_off_t *p_expires; // [sp+3Ch] [-C4h]
  char **p_domain; // [sp+40h] [-C0h]
  char **p_path; // [sp+44h] [-BCh]
  char **p_value; // [sp+4Ch] [-B4h]
  const char *v106; // [sp+54h] [-ACh]
  _BYTE *v107; // [sp+54h] [-ACh]
  int v108; // [sp+58h] [-A8h]
  int v109; // [sp+5Ch] [-A4h]
  CookieInfo *v110; // [sp+60h] [-A0h]
  char **p_name; // [sp+64h] [-9Ch]
  int v112; // [sp+70h] [-90h]
  Curl_easy *v113; // [sp+74h] [-8Ch]
  Cookie *v114; // [sp+7Ch] [-84h]
  char *v115[32]; // [sp+80h] [-80h] BYREF

  v16 = 0;
  v17 = time(0u);
  if ( data->req.setcookies >= 0x32u )
    return (Cookie *)v16;
  v18 = v17;
  v19 = Curl_ccalloc(1, 48);
  if ( !v19 )
    return (Cookie *)v16;
  v20 = (Cookie *)v19;
  v21 = (char *)lineptr;
  v113 = data;
  v114 = (Cookie *)v19;
  if ( !httpheader )
  {
    v115[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v20->httponly = 1;
      v21 = (char *)(lineptr + 10);
    }
    if ( *v21 == 35 )
    {
      Curl_cfree(v20);
    }
    else
    {
      v23 = strchr(v21, 13);
      if ( v23 )
        *v23 = 0;
      v24 = strchr(v21, 10);
      if ( v24 )
        *v24 = 0;
      if ( strtok_r(v21, "\t", v115) )
        JUMPOUT(0x6E4);
      freecookie(v114);
      return 0;
    }
    return (Cookie *)v16;
  }
  v109 = noexpire;
  v110 = c;
  if ( strlen(lineptr) >= 0x1389 )
  {
    Curl_cfree(v20);
    v22 = 1;
    goto LABEL_184;
  }
  v97 = v18 >> 0x1F;
  v99 = 0x7FFFFFFF - (v18 >> 0x1F);
  v100 = v18;
  v98 = ~v18;
  p_value = &v20->value;
  p_domain = &v20->domain;
  p_expires = &v20->expires;
  p_path = &v20->path;
  p_name = &v20->name;
  LOBYTE(v108) = 0;
  do
  {
    for ( i = v21; ; ++i )
    {
      v26 = (unsigned __int8)*i;
      if ( v26 != 32 && v26 != 9 )
        break;
    }
    v27 = strcspn(i, ";\t\r\n=");
    if ( !v27 )
    {
      v20 = v114;
      v21 = i;
      goto LABEL_41;
    }
    v28 = v27;
    v21 = &i[v27];
    v29 = v27;
    while ( 1 )
    {
      v30 = (unsigned __int8)i[v29 - 1];
      if ( v30 != 32 && v30 != 9 )
        break;
      if ( !--v29 )
      {
        v29 = 0;
        break;
      }
    }
    v31 = (unsigned __int8)*v21;
    v32 = 0;
    v33 = 0;
    if ( v31 != 61 )
      goto LABEL_64;
    v34 = &i[v28 + 1];
    v35 = strcspn(v34, ";\r\n");
    if ( v35 )
    {
      v32 = v35;
      while ( 1 )
      {
        v36 = (unsigned __int8)i[v28 + v32];
        if ( v36 != 32 && v36 != 9 )
          break;
        if ( !--v32 )
        {
          v32 = 0;
          break;
        }
      }
      if ( v32 )
      {
        v38 = (int)&i[v28 + 1 + v32];
        do
        {
          v39 = *(unsigned __int8 *)v34;
          if ( v39 != 32 && v39 != 9 )
          {
            v38 = (int)v34;
            goto LABEL_59;
          }
          --v32;
          ++v34;
        }
        while ( v32 );
        v32 = 0;
        goto LABEL_59;
      }
    }
    else
    {
      v32 = 0;
    }
    v38 = (int)&i[v28 + 1];
LABEL_59:
    v21 = &i[v28 + 1 + v35];
    v40 = v38;
    if ( ((int (*)(void))memchr)() )
    {
      v20 = v114;
      freecookie(v114);
      v22 = 1;
      if ( data && (*((_BYTE *)&data->set + 1338) & 8) != 0 )
        goto LABEL_62;
      goto LABEL_19;
    }
    v33 = (_BYTE *)v40;
    v31 = 61;
LABEL_64:
    if ( v29 >= 0xFFF || v32 >= 0xFFF || v32 + v29 >= 0x1001 )
    {
      v20 = v114;
      freecookie(v114);
      v22 = 1;
      if ( data && (*((_BYTE *)&data->set + 1338) & 8) != 0 )
LABEL_62:
        ((void (*)(void))Curl_infof)();
    }
    else
    {
      if ( v26 == 95 && v29 >= 7 && i[1] == 95 )
      {
        v41 = v31;
        v42 = v33;
        if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("__Secure-", i, 9) )
        {
          v114->prefix |= 1u;
          v33 = v42;
          v31 = v41;
        }
        else
        {
          v43 = ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("__Host-", i, 7);
          v33 = v42;
          v31 = v41;
          if ( v43 )
            v114->prefix |= 2u;
        }
      }
      if ( *p_name )
      {
        v20 = v114;
        if ( !v32 )
        {
          if ( v29 == 8 )
          {
            v107 = v33;
            v58 = v31;
            v59 = ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("httponly", i, 8);
            v33 = v107;
            v31 = v58;
            if ( v59 )
            {
              v114->httponly = 1;
              goto LABEL_18;
            }
          }
          else if ( v29 == 6 )
          {
            v112 = v31;
            v47 = v33;
            if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("secure", i, 6) )
            {
              if ( !secure && c->running )
              {
                v22 = 6;
                LOBYTE(v108) = 1;
                goto LABEL_19;
              }
              v114->secure = 1;
              goto LABEL_18;
            }
            v31 = v112;
            v33 = v47;
          }
          if ( v31 != 61 )
            goto LABEL_18;
        }
        v44 = v33;
        if ( v29 == 7 )
        {
          if ( !((int (__fastcall *)(const char *, char *, int))curl_strnequal)("version", i, 7) )
          {
            if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("max-age", i, 7) )
            {
              if ( *v44 == 0x22 )
                ++v44;
              v48 = ((int (__fastcall *)(_BYTE *, _DWORD, int, curl_off_t *))curlx_strtoofft)(v44, 0, 10, p_expires);
              if ( v48 )
              {
                if ( v48 == 2 )
                {
                  *((_DWORD *)p_expires + 1) = 1;
                  *(_DWORD *)p_expires = 0;
                }
                else if ( v48 == 1 )
                {
                  *((_DWORD *)p_expires + 1) = -1;
                  *(_DWORD *)p_expires = 0x7FFFFFFF;
                }
              }
              else
              {
                v61 = *(_DWORD *)p_expires;
                v62 = *((_DWORD *)p_expires + 1);
                if ( *p_expires )
                {
                  v63 = v99 >= v61;
                  if ( v99 == v61 )
                    v63 = v98 >= v62;
                  if ( v63 )
                  {
                    *((_DWORD *)p_expires + 1) = v62 + v100;
                    *(_DWORD *)p_expires = v61 + v97 + __CFADD__(v62, v100);
                  }
                  else
                  {
                    *((_DWORD *)p_expires + 1) = -1;
                    *(_DWORD *)p_expires = 0x7FFFFFFF;
                  }
                }
                else
                {
                  *((_DWORD *)p_expires + 1) = 1;
                  *(_DWORD *)p_expires = 0;
                }
              }
            }
            else if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("expires", i, 7)
                   && v32 < 0x80
                   && !v114->expires )
            {
              memcpy(v115, v44, v32);
              *((_BYTE *)v115 + v32) = 0;
              v60 = ((int (__fastcall *)(char **))Curl_getdate_capped)(v115);
              v114->expires = v60;
              if ( v60 )
              {
                if ( v60 < 0 )
                {
                  LODWORD(v114->expires) = 0;
                  HIDWORD(v114->expires) = 0;
                }
              }
              else
              {
                LODWORD(v114->expires) = 1;
                HIDWORD(v114->expires) = 0;
              }
            }
          }
          goto LABEL_18;
        }
        if ( v29 != 6 )
        {
          if ( v29 != 4 || !((int (__fastcall *)(const char *, char *, int))curl_strnequal)("path", i, 4) )
            goto LABEL_18;
          strstore(p_path, v44, v32);
          v22 = 6;
          if ( *p_path )
          {
            Curl_cfree(v114->spath);
            v45 = sanitize_cookie_path(v114->path);
            v114->spath = v45;
            if ( v45 )
              goto LABEL_18;
            LOBYTE(v108) = 1;
          }
          else
          {
            LOBYTE(v108) = 1;
          }
          goto LABEL_19;
        }
        v49 = ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("domain", i, 6);
        if ( !v32 || !v49 )
          goto LABEL_18;
        v50 = (unsigned __int8)*v44;
        if ( v50 == 0x2E )
          ++v44;
        v51 = (__PAIR64__(v32, v50 ^ 0x2Eu) - 1) >> 32;
        v52 = domain;
        if ( ((int (__fastcall *)(_BYTE *, size_t))bad_domain)(v44, v51) )
          v52 = ":";
        v53 = v52;
        if ( !v52 )
          v53 = v44;
        v54 = ((int (__fastcall *)(const char *))Curl_host_is_ipnum)(v53);
        v55 = v54;
        domain = v52;
        if ( v52 )
        {
          if ( !v54 )
            goto LABEL_125;
          if ( strncmp(v44, v52, v51) || v51 != strlen(v52) )
          {
            if ( v55 )
              goto LABEL_146;
LABEL_125:
            if ( !((int (__fastcall *)(_BYTE *, size_t, const char *))cookie_tailmatch)(v44, v51, v52) )
            {
LABEL_146:
              LOBYTE(v108) = 1;
              if ( data && (*((_BYTE *)&data->set + 1338) & 8) != 0 )
                ((void (*)(void))Curl_infof)();
              goto LABEL_18;
            }
          }
        }
        strstore(p_domain, v44, v51);
        v56 = *p_domain;
        v57 = *p_domain == 0;
        if ( v55 | v57 )
        {
          v22 = 6;
          if ( v56 )
            v22 = 0;
          LOBYTE(v108) = v108 | v57;
          if ( v56 )
            goto LABEL_18;
          goto LABEL_19;
        }
        v114->tailmatch = 1;
LABEL_18:
        v22 = 0;
        goto LABEL_19;
      }
      v22 = 6;
      if ( v31 != 61 )
      {
        LOBYTE(v108) = 1;
        v20 = v114;
        goto LABEL_19;
      }
      v106 = v33;
      strstore(p_name, i, v29);
      strstore(p_value, v106, v32);
      v46 = *p_name;
      if ( !*p_name )
      {
        LOBYTE(v108) = 1;
        v20 = v114;
        goto LABEL_19;
      }
      if ( !*p_value )
      {
        LOBYTE(v108) = 1;
        v20 = v114;
        goto LABEL_19;
      }
      if ( !((int (*)(void))invalid_octets)() && !invalid_octets(v46) )
      {
        v20 = v114;
        goto LABEL_18;
      }
      if ( data )
      {
        if ( (*((_BYTE *)&data->set + 1338) & 8) != 0 )
          ((void (*)(void))Curl_infof)();
        LOBYTE(v108) = 1;
        v20 = v114;
      }
      else
      {
        LOBYTE(v108) = 1;
        v20 = v114;
      }
    }
LABEL_19:
    if ( v22 )
      break;
LABEL_41:
    while ( 1 )
    {
      v37 = (unsigned __int8)*v21;
      if ( v37 != 32 && v37 != 9 )
        break;
      ++v21;
    }
    v22 = 6;
    if ( v37 == 0x3B )
      v22 = 0;
    if ( v37 == 0x3B )
      ++v21;
  }
  while ( !v22 );
  if ( v22 == 6 )
  {
    v64 = v108;
    if ( (v108 & 1) != 0 )
    {
      v65 = path;
    }
    else
    {
      v65 = path;
      if ( domain && !v20->domain )
      {
        v66 = Curl_cstrdup(domain);
        v20->domain = (char *)v66;
        v64 = v108 | (v66 == 0);
      }
    }
    if ( (v64 & 1) != 0
      || !v65
      || v20->path
      || ((v67 = strchr(v65, 63)) == 0 ? (v68 = strrchr(v65, 47)) : (v68 = (char *)((int (__fastcall *)(const char *, int, int))Curl_memrchr)(
                                                                                     v65,
                                                                                     47,
                                                                                     v67 - v65)),
          !v68) )
    {
LABEL_170:
      if ( (v64 & 1) != 0 || !v20->name )
        goto LABEL_183;
      ++data->req.setcookies;
      v22 = 0;
    }
    else
    {
      v69 = v68 - v65;
      v70 = (char *)Curl_cmalloc(v68 - v65 + 2);
      v20->path = v70;
      if ( v70 )
      {
        memcpy(v70, v65, v69 + 1);
        v20->path[v69 + 1] = 0;
        v71 = sanitize_cookie_path(v20->path);
        v20->spath = v71;
        v64 |= v71 == 0;
        goto LABEL_170;
      }
LABEL_183:
      freecookie(v20);
      v22 = 1;
    }
  }
LABEL_184:
  if ( v22 )
    return 0;
  if ( (v20->prefix & 1) != 0 && !v20->secure
    || (v20->prefix & 2) != 0 && (!v20->secure || (v83 = v20->path) == 0 || strcmp(v83, "/") || v20->tailmatch)
    || !c->running && c->newsession && !v20->expires )
  {
LABEL_226:
    freecookie(v20);
    return 0;
  }
  v20->livecookie = c->running;
  v72 = c->lastct + 1;
  c->lastct = v72;
  v20->creationtime = v72;
  if ( !v109 )
    remove_expired(c);
  v73 = &c->cookies[cookiehash(v20->domain)];
  next = *v73;
  if ( *v73 )
  {
    v75 = 0;
    v76 = 0;
    v77 = 0;
    while ( 1 )
    {
      v78 = next;
      if ( !((int (__fastcall *)(char *, char *))curl_strequal)(next->name, v20->name) )
        goto LABEL_194;
      if ( v78->domain )
      {
        if ( !v114->domain || !((int (*)(void))curl_strequal)() )
          goto LABEL_194;
      }
      else if ( v114->domain )
      {
        goto LABEL_194;
      }
      spath = v78->spath;
      if ( spath )
      {
        v80 = v114->spath;
        if ( v80 )
        {
          if ( v78->secure && !v114->secure && !secure )
          {
            v81 = strchr(spath + 1, 47);
            v82 = v81 ? v81 - spath : strlen(spath);
            if ( ((int (__fastcall *)(const char *, char *, size_t))curl_strnequal)(spath, v80, v82) )
            {
              if ( v113 && (*((_BYTE *)&v113->set + 1338) & 8) != 0 )
                ((void (*)(void))Curl_infof)();
              freecookie(v114);
              return 0;
            }
          }
        }
      }
LABEL_194:
      if ( v75 )
      {
        v20 = v114;
      }
      else
      {
        v20 = v114;
        v75 = 0;
        if ( ((int (__fastcall *)(char *, char *))curl_strequal)(v78->name, v114->name) )
        {
          if ( v78->domain )
          {
            if ( v114->domain && ((int (*)(void))curl_strequal)() )
              v77 |= v78->tailmatch == v114->tailmatch;
          }
          else
          {
            v77 |= v114->domain == 0;
          }
          if ( (v77 & 1) != 0 )
          {
            if ( v78->spath && v114->spath && !((int (*)(void))curl_strequal)() )
            {
              v77 = 0;
              goto LABEL_196;
            }
            v77 &= (v78->spath != 0) ^ (v114->spath == 0);
          }
          if ( (v77 & 1) != 0 )
          {
            if ( v114->livecookie )
            {
              v76 = v78;
              v75 = v114;
            }
            else
            {
              v76 = v78;
              v75 = v114;
              if ( v78->livecookie )
                goto LABEL_226;
            }
          }
        }
      }
LABEL_196:
      next = v78->next;
      if ( !v78->next )
        goto LABEL_244;
    }
  }
  LOBYTE(v77) = 0;
  v76 = 0;
  v75 = 0;
  v78 = 0;
LABEL_244:
  if ( v75 )
  {
    v75->next = v76->next;
    v75->creationtime = v76->creationtime;
    Curl_cfree(v76->name);
    Curl_cfree(v76->value);
    Curl_cfree(v76->domain);
    Curl_cfree(v76->path);
    Curl_cfree(v76->spath);
    expires = v75->expires;
    v85 = *(_DWORD *)&v75->tailmatch;
    creationtime = v75->creationtime;
    v87 = *(_DWORD *)&v75->prefix;
    v88 = v75->path;
    v89 = v75->spath;
    v90 = v75->domain;
    expires_high = HIDWORD(v75->expires);
    *((_DWORD *)&v76->prefix + 1) = *((_DWORD *)&v75->prefix + 1);
    *(_DWORD *)&v76->prefix = v87;
    v76->creationtime = creationtime;
    *(_DWORD *)&v76->tailmatch = v85;
    LODWORD(v76->expires) = expires;
    HIDWORD(v76->expires) = expires_high;
    v76->domain = v90;
    v76->spath = v89;
    v76->path = v88;
    v76->value = v75->value;
    v76->name = v75->name;
    v76->next = v75->next;
    Curl_cfree(v75);
    v20 = v76;
  }
  if ( v113 && v110->running && (*((_BYTE *)&v113->set + 1338) & 8) != 0 )
  {
    v92 = "Added";
    if ( (v77 & 1) != 0 )
      v92 = "Replaced";
    ((void (__fastcall *)(Curl_easy *, const char *, const char *, char *))Curl_infof)(
      v113,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
      v92,
      v20->name);
  }
  if ( (v77 & 1) == 0 )
  {
    if ( v78 )
      v78->next = v20;
    else
      *v73 = v20;
    ++v110->numcookies;
  }
  v93 = v20->expires;
  if ( !v93 )
    return v20;
  next_expiration_high = HIDWORD(v110->next_expiration);
  v95 = SHIDWORD(v93) >= next_expiration_high;
  if ( HIDWORD(v93) == next_expiration_high )
    v95 = (unsigned int)v93 >= LODWORD(v110->next_expiration);
  if ( !v95 )
    v110->next_expiration = v93;
  return v20;
}
