Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  _BOOL4 v9; // w24
  Cookie *v11; // x19
  int v12; // w22
  size_t v14; // x25
  const char *v15; // x26
  size_t v16; // x0
  _BOOL4 v17; // w6
  _BYTE *v18; // x23
  size_t v19; // x27
  size_t v20; // x6
  _BOOL4 v21; // w1
  char *v22; // x0
  char *v23; // x0
  char *v24; // x0
  int v25; // w28
  char *v26; // x2
  int v27; // w0
  const char *v28; // x2
  __int64 (__fastcall *v29)(const char *); // x27
  int v30; // w0
  const char *v31; // x0
  char *v32; // x0
  _BOOL4 v33; // w25
  int v34; // w20
  __int64 v35; // x27
  __int64 v36; // x0
  bool v37; // zf
  unsigned __int8 prefix; // w0
  Cookie *v39; // x24
  bool v40; // zf
  bool v41; // cc
  int v43; // t1
  char *v46; // x0
  int lastct; // w0
  size_t v48; // x26
  Cookie *v49; // x20
  int livecookie; // w25
  Cookie *v51; // x23
  char *v52; // x0
  char *v53; // x1
  const char *spath; // x28
  char *v55; // x27
  _BYTE *v56; // x0
  int v57; // w0
  curl_off_t expires; // x0
  __int64 v60; // x0
  bool v61; // zf
  char *v62; // x0
  __int64 v63; // x0
  __int64 v64; // x0
  int v65; // w0
  __int64 v66; // x0
  char *v67; // x0
  int v68; // w25
  _BYTE *v69; // x0
  int is_ipnum; // w22
  __int64 v71; // x0
  int v72; // w0
  __int64 v73; // x0
  __int64 v75; // x0
  __int64 v76; // x0
  const char *name; // x22
  char *value; // x25
  __int64 v79; // x0
  char *v80; // x0
  size_t v81; // x2
  char *v82; // x0
  char *v83; // x1
  char *v84; // x0
  char *v85; // x1
  int creationtime; // w2
  char *v87; // x0
  __int128 v88; // q1
  void (__fastcall *v89)(Cookie *); // x1
  __int128 v90; // q1
  curl_off_t v91; // x0
  int v92; // w0
  char *v93; // x0
  char *v94; // x0
  signed __int64 v95; // x0
  size_t v96; // x20
  char *v97; // x0
  char *v98; // x0
  __int64 v99; // x0
  const char *domainb; // [xsp+68h] [xbp+68h]
  const char *domainc; // [xsp+68h] [xbp+68h]
  _BOOL4 securea; // [xsp+70h] [xbp+70h]
  _BOOL4 noexpirea; // [xsp+74h] [xbp+74h]
  time_t now; // [xsp+80h] [xbp+80h]
  int badcookie; // [xsp+90h] [xbp+90h]
  _BOOL4 v109; // [xsp+94h] [xbp+94h]
  _BOOL4 v110; // [xsp+94h] [xbp+94h]
  char *tok_buf; // [xsp+A0h] [xbp+A0h] BYREF
  char date[128]; // [xsp+A8h] [xbp+A8h] BYREF

  v9 = httpheader;
  noexpirea = noexpire;
  securea = secure;
  now = time(0uLL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  v11 = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !v11 )
    return 0LL;
  if ( !v9 )
  {
    tok_buf = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 0xA;
      v11->httponly = 1;
    }
    if ( *lineptr == 35 )
    {
      Curl_cfree(v11);
      return 0LL;
    }
    v22 = strchr(lineptr, 13);
    if ( v22 )
      *v22 = 0;
    v23 = strchr(lineptr, 10);
    if ( v23 )
      *v23 = 0;
    v24 = (char *)lineptr;
    v25 = 0;
    v26 = strtok_r(v24, "\t", &tok_buf);
    if ( !v26 )
      goto LABEL_200;
    while ( v25 != 3 )
    {
      if ( v25 <= 3 )
      {
        if ( v25 == 1 )
        {
          v33 = 0;
          v25 = 2;
          v34 = 1;
          v11->tailmatch = (unsigned int)curl_strequal(v26, "TRUE") != 0;
          goto LABEL_42;
        }
        if ( v25 != 2 )
        {
          if ( !v25 )
          {
            v25 = 1;
            if ( *v26 == 46 )
              v62 = v26 + 1;
            else
              v62 = v26;
            v63 = Curl_cstrdup(v62);
            v33 = v63 == 0;
            v34 = v63 != 0;
            v11->domain = (char *)v63;
            goto LABEL_42;
          }
LABEL_202:
          ++v25;
          v33 = 0;
          v34 = 1;
          goto LABEL_42;
        }
        domainb = v26;
        v27 = strcmp("TRUE", v26);
        v28 = domainb;
        v29 = (__int64 (__fastcall *)(const char *))Curl_cstrdup;
        if ( v27 )
        {
          v30 = strcmp("FALSE", domainb);
          v28 = domainb;
          if ( v30 )
          {
            v31 = (const char *)v29(domainb);
            v11->path = (char *)v31;
            if ( !v31 )
              goto LABEL_199;
            v32 = sanitize_cookie_path(v31);
            v33 = v32 == 0LL;
            v34 = v32 != 0LL;
            v25 = 3;
            v11->spath = v32;
            goto LABEL_42;
          }
        }
        domainc = v28;
        v35 = v29("/");
        v11->path = (char *)v35;
        v33 = 1;
        v36 = Curl_cstrdup("/");
        v11->spath = (char *)v36;
        if ( v36 )
          v33 = v35 == 0;
        v11->secure = 0;
        if ( (unsigned int)curl_strequal(domainc, "TRUE") )
        {
LABEL_197:
          if ( !securea && !c->running )
          {
LABEL_199:
            strtok_r(0uLL, "\t", &tok_buf);
            goto LABEL_200;
          }
          v34 = !v33;
          v25 = 4;
          v11->secure = 1;
          goto LABEL_42;
        }
        goto LABEL_41;
      }
      switch ( v25 )
      {
        case 5:
          v73 = Curl_cstrdup(v26);
          v11->name = (char *)v73;
          if ( !v73 )
          {
            v33 = 1;
            strtok_r(0uLL, "\t", &tok_buf);
            goto LABEL_218;
          }
          if ( (unsigned int)curl_strnequal("__Secure-", v73, 9LL) )
          {
            v34 = 1;
            v33 = 0;
            v25 = 6;
            v11->prefix |= 1u;
          }
          else
          {
            v33 = 0;
            v25 = 6;
            v34 = 1;
            if ( (unsigned int)curl_strnequal("__Host-", v11->name, 7LL) )
              v11->prefix |= 2u;
          }
          break;
        case 6:
          v25 = 7;
          v64 = Curl_cstrdup(v26);
          v33 = v64 == 0;
          v34 = v64 != 0;
          v11->value = (char *)v64;
          break;
        case 4:
          v65 = curlx_strtoofft(v26, 0LL, 10LL, &v11->expires);
          v33 = v65 != 0;
          v34 = v65 == 0;
          v25 = 5;
          break;
        default:
          goto LABEL_202;
      }
LABEL_42:
      v26 = strtok_r(0uLL, "\t", &tok_buf);
      if ( v26 )
        v37 = v34 == 0;
      else
        v37 = 1;
      if ( v37 )
      {
        if ( v25 != 6 )
        {
          if ( (v25 == 7 || v33) && !v33 )
            goto LABEL_50;
          goto LABEL_200;
        }
LABEL_218:
        v79 = Curl_cstrdup(&unk_24A8);
        v11->value = (char *)v79;
        if ( v79 && !v33 )
        {
LABEL_50:
          prefix = v11->prefix;
          if ( (prefix & 1) != 0 )
            goto LABEL_94;
          goto LABEL_51;
        }
LABEL_200:
        freecookie(v11);
        return 0LL;
      }
    }
    v11->secure = 0;
    v33 = 0;
    if ( (unsigned int)curl_strequal(v26, "TRUE") )
      goto LABEL_197;
LABEL_41:
    v34 = !v33;
    v25 = 4;
    goto LABEL_42;
  }
  badcookie = 0;
  if ( strlen(lineptr) > 0x1388 )
  {
    v39 = 0LL;
    Curl_cfree(v11);
    return v39;
  }
  v12 = *(unsigned __int8 *)lineptr;
  if ( *lineptr )
    goto LABEL_6;
  while ( 2 )
  {
    v14 = strcspn(lineptr, ";\t\r\n=");
    if ( !v14 )
      break;
LABEL_14:
    v15 = &lineptr[v14];
    do
    {
      v16 = v14--;
      v17 = lineptr[v14] == 32 || lineptr[v14] == 9;
      if ( !v17 )
      {
        v14 = v16;
        if ( *v15 == 61 )
        {
LABEL_18:
          v18 = v15 + 1;
          v19 = strcspn(v15 + 1, ";\r\n");
          v15 += v19 + 1;
          if ( v19 )
          {
            while ( 1 )
            {
              v20 = v19 - 1;
              v21 = v18[v19 - 1] == 32 || v18[v19 - 1] == 9;
              if ( !v21 )
                break;
              --v19;
              if ( !v20 )
                goto LABEL_21;
            }
            while ( 1 )
            {
              v17 = *v18 == 32 || *v18 == 9;
              if ( !v17 )
                break;
              ++v18;
              if ( !--v19 )
                goto LABEL_58;
            }
            if ( memchr(v18, 9, v19) )
            {
              freecookie(v11);
              if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
              {
                v39 = 0LL;
                Curl_infof(data, "cookie contains TAB, dropping");
                return v39;
              }
              return 0LL;
            }
            v17 = v9;
            v21 = v19 > 0xFFE;
          }
          else
          {
LABEL_21:
            v17 = v9;
            v21 = 0;
          }
        }
        else
        {
          v21 = 0;
          v18 = 0LL;
          v19 = 0LL;
        }
LABEL_58:
        v40 = v14 <= 0xFFE && !v21;
        if ( v40 && v19 + v14 <= 0x1000 )
        {
          v41 = v12 == 95 && v14 > 6;
          if ( v41 && lineptr[1] == 95 )
          {
            v110 = v17;
            v72 = curl_strnequal("__Secure-", lineptr, 9LL);
            v17 = v110;
            if ( v72 )
            {
              v11->prefix |= 1u;
            }
            else
            {
              v92 = curl_strnequal("__Host-", lineptr, 7LL);
              v17 = v110;
              if ( v92 )
                v11->prefix |= 2u;
            }
          }
          if ( !v11->name )
          {
            if ( !v17 )
              goto LABEL_53;
            Curl_cfree(0LL);
            v75 = Curl_memdup(lineptr, v14 + 1);
            v11->name = (char *)v75;
            if ( v75 )
              *(_BYTE *)(v75 + v14) = 0;
            Curl_cfree(v11->value);
            v76 = Curl_memdup(v18, v19 + 1);
            v11->value = (char *)v76;
            if ( v76 )
              *(_BYTE *)(v76 + v19) = 0;
            name = v11->name;
            if ( !name )
              goto LABEL_53;
            value = v11->value;
            if ( !value )
              goto LABEL_53;
            if ( value[strcspn(v11->value, badoctets_0)] || name[strcspn(name, badoctets_0)] )
            {
              if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
                Curl_infof(data, "invalid octets in name/value, cookie dropped");
              goto LABEL_53;
            }
            goto LABEL_73;
          }
          if ( v19 )
          {
            if ( v14 != 4 )
              goto LABEL_71;
          }
          else
          {
            if ( v14 == 6 )
            {
              v109 = v17;
              if ( (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
              {
                if ( !securea && c->running )
                  goto LABEL_53;
                lineptr = v15;
                v11->secure = 1;
                goto LABEL_74;
              }
              if ( !v109 )
                goto LABEL_73;
              goto LABEL_164;
            }
            if ( v14 == 8 )
            {
              if ( !(unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
                goto LABEL_73;
              lineptr = v15;
              v11->httponly = 1;
              goto LABEL_74;
            }
            if ( !v17 )
              goto LABEL_73;
            if ( v14 != 4 )
            {
LABEL_71:
              if ( v14 != 6 )
              {
                if ( v14 != 7 || (unsigned int)curl_strnequal("version", lineptr, 7LL) )
                  goto LABEL_73;
                if ( !(unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
                {
                  if ( (unsigned int)curl_strnequal("expires", lineptr, 7LL) )
                  {
                    if ( v19 <= 0x7F && v11->expires == 0 )
                    {
                      *((_BYTE *)memcpy(date, v18, v19) + v19) = 0;
                      v60 = Curl_getdate_capped();
                      v61 = v60 == 0;
                      if ( v60 < 0 )
                        v60 = 0LL;
                      if ( v61 )
                        v60 = 1LL;
                      v11->expires = v60;
                    }
                  }
                  goto LABEL_73;
                }
                if ( *v18 == 34 )
                  v56 = v18 + 1;
                else
                  v56 = v18;
                v57 = curlx_strtoofft(v56, 0LL, 10LL, &v11->expires);
                if ( v57 == 1 )
                {
                  lineptr = v15;
                  v11->expires = 0x7FFFFFFFFFFFFFFFLL;
                }
                else
                {
                  if ( v57 == 2 )
                    goto LABEL_268;
                  if ( v57 )
                    goto LABEL_73;
                  expires = v11->expires;
                  if ( !expires )
                  {
LABEL_268:
                    lineptr = v15;
                    v11->expires = 1LL;
                  }
                  else
                  {
                    lineptr = v15;
                    if ( expires <= 0x7FFFFFFFFFFFFFFFLL - now )
                      v11->expires = expires + now;
                    else
                      v11->expires = 0x7FFFFFFFFFFFFFFFLL;
                  }
                }
                goto LABEL_74;
              }
LABEL_164:
              v68 = (v19 != 0) & ((unsigned int)curl_strnequal("domain", lineptr, 6LL) != 0);
              if ( !v68 )
                goto LABEL_73;
              if ( *v18 == 46 )
              {
                ++v18;
                --v19;
              }
              if ( v19 == 9 && (unsigned int)curl_strnequal(v18, "localhost", 9LL)
                || (v69 = memchr(v18, 46, v19)) != 0LL && v19 - (v69 - v18) > 1 )
              {
                if ( !domain )
                {
                  is_ipnum = (unsigned __int8)Curl_host_is_ipnum(v18);
                  goto LABEL_177;
                }
              }
              else
              {
                domain = ":";
              }
              is_ipnum = (unsigned __int8)Curl_host_is_ipnum(domain);
              if ( is_ipnum )
              {
                if ( strncmp(v18, domain, v19) || strlen(domain) != v19 )
                {
LABEL_174:
                  lineptr = v15;
                  badcookie = v68;
                  if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
                    Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v18);
                  goto LABEL_74;
                }
              }
              else if ( !cookie_tailmatch(v18, v19, domain) )
              {
                goto LABEL_174;
              }
LABEL_177:
              Curl_cfree(v11->domain);
              v71 = Curl_memdup(v18, v19 + 1);
              v11->domain = (char *)v71;
              if ( !v71 )
                goto LABEL_53;
              *(_BYTE *)(v71 + v19) = 0;
              if ( !v11->domain )
                goto LABEL_53;
              lineptr = v15;
              if ( !is_ipnum )
                v11->tailmatch = 1;
              goto LABEL_74;
            }
          }
          if ( (unsigned int)curl_strnequal("path", lineptr, v14) )
          {
            Curl_cfree(v11->path);
            v66 = Curl_memdup(v18, v19 + 1);
            v11->path = (char *)v66;
            if ( !v66 )
              goto LABEL_53;
            *(_BYTE *)(v66 + v19) = 0;
            if ( !v11->path )
              goto LABEL_53;
            Curl_cfree(v11->spath);
            v67 = sanitize_cookie_path(v11->path);
            v11->spath = v67;
            if ( !v67 )
              goto LABEL_53;
          }
          goto LABEL_73;
        }
        freecookie(v11);
        if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
        {
          v39 = 0LL;
          Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v14, v19);
          return v39;
        }
        return 0LL;
      }
    }
    while ( v14 );
    if ( *v15 == 61 )
      goto LABEL_18;
    if ( !v11->name )
    {
LABEL_53:
      v39 = 0LL;
      freecookie(v11);
      return v39;
    }
LABEL_73:
    lineptr = v15;
LABEL_74:
    v12 = *(unsigned __int8 *)v15;
    if ( *v15 )
    {
      while ( v12 == 32 || v12 == 9 )
      {
        v43 = *(unsigned __int8 *)++lineptr;
        v12 = v43;
        if ( !v43 )
          goto LABEL_81;
      }
LABEL_11:
      if ( v12 == 59 )
      {
LABEL_12:
        v12 = *(unsigned __int8 *)++lineptr;
        if ( !v12 )
          continue;
LABEL_6:
        if ( v12 == 32 || v12 == 9 )
          goto LABEL_12;
        v14 = strcspn(lineptr, ";\t\r\n=");
        if ( !v14 )
          goto LABEL_11;
        goto LABEL_14;
      }
    }
    break;
  }
LABEL_81:
  if ( badcookie )
    goto LABEL_53;
  if ( !v11->domain && domain != 0LL )
  {
    v99 = Curl_cstrdup(domain);
    v11->domain = (char *)v99;
    if ( !v99 )
      goto LABEL_53;
  }
  if ( !v11->path && path != 0LL )
  {
    v93 = strchr(path, 63);
    v94 = v93 ? (char *)Curl_memrchr(path, 47LL, v93 - path) : strrchr(path, 47);
    if ( v94 )
    {
      v95 = v94 - path;
      v96 = v95 + 1;
      v97 = (char *)Curl_cmalloc(v95 + 2);
      v11->path = v97;
      if ( !v97 )
        goto LABEL_53;
      memcpy(v97, path, v96);
      v11->path[v96] = 0;
      v98 = sanitize_cookie_path(v11->path);
      v11->spath = v98;
      if ( !v98 )
        goto LABEL_53;
    }
  }
  if ( !v11->name )
    goto LABEL_53;
  ++data->req.setcookies;
  prefix = v11->prefix;
  if ( (prefix & 1) != 0 )
  {
LABEL_94:
    if ( !v11->secure )
      goto LABEL_53;
    if ( (prefix & 2) != 0 )
      goto LABEL_96;
    goto LABEL_100;
  }
LABEL_51:
  if ( (prefix & 2) != 0 )
  {
    if ( !v11->secure )
      goto LABEL_53;
LABEL_96:
    v46 = v11->path;
    if ( !v46 || *v46 != 47 || v46[1] || v11->tailmatch )
      goto LABEL_53;
  }
LABEL_100:
  if ( !c->running && c->newsession && !v11->expires )
    goto LABEL_53;
  lastct = c->lastct;
  v11->livecookie = c->running;
  c->lastct = ++lastct;
  v11->creationtime = lastct;
  if ( !noexpirea )
    remove_expired(c);
  v48 = cookiehash(v11->domain);
  v49 = c->cookies[v48];
  if ( !v49 )
  {
    if ( c->running )
    {
      v39 = v11;
      if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
      {
LABEL_272:
        Curl_infof(
          data,
          "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
          "Added",
          v39->name,
          v39->value,
          v39->domain,
          v39->path,
          v39->expires);
        if ( v49 )
        {
LABEL_255:
          v49->next = v39;
          goto LABEL_256;
        }
      }
    }
    else
    {
      v39 = v11;
    }
    c->cookies[v48] = v39;
LABEL_256:
    ++c->numcookies;
    v91 = v39->expires;
    if ( v91 )
      goto LABEL_252;
    return v39;
  }
  livecookie = 0;
  v39 = 0LL;
  v51 = 0LL;
  while ( 1 )
  {
    if ( !(unsigned int)curl_strequal(v49->name, v11->name) )
      goto LABEL_115;
    v52 = v49->domain;
    v53 = v11->domain;
    if ( v52 )
    {
      if ( !v53 || !(unsigned int)curl_strequal(v52, v53) )
        goto LABEL_115;
    }
    else if ( v53 )
    {
      goto LABEL_115;
    }
    spath = v49->spath;
    if ( spath )
    {
      v55 = v11->spath;
      if ( v55 )
      {
        if ( v49->secure && !v11->secure && !securea )
        {
          v80 = strchr(spath + 1, 47);
          v81 = v80 ? v80 - spath : strlen(spath);
          if ( (unsigned int)curl_strnequal(spath, v55, v81) )
          {
            if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
              Curl_infof(
                data,
                "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                v11->name,
                v11->domain);
            goto LABEL_53;
          }
        }
      }
    }
LABEL_115:
    if ( v51 || !(unsigned int)curl_strequal(v49->name, v11->name) )
      goto LABEL_116;
    v82 = v49->domain;
    v83 = v11->domain;
    if ( v82 )
    {
      if ( !v83 || !(unsigned int)curl_strequal(v82, v83) || v49->tailmatch != v11->tailmatch )
      {
LABEL_234:
        if ( !livecookie )
          goto LABEL_116;
      }
    }
    else if ( v83 )
    {
      goto LABEL_234;
    }
    v84 = v49->spath;
    v85 = v11->spath;
    if ( v84 )
    {
      if ( !v85 )
      {
        v51 = 0LL;
        livecookie = 0;
        goto LABEL_116;
      }
      if ( !(unsigned int)curl_strequal(v84, v85) )
        goto LABEL_258;
      v85 = v11->spath;
      v84 = v49->spath;
    }
    if ( (v84 == 0LL) != (v85 == 0LL) )
    {
LABEL_258:
      livecookie = 0;
      goto LABEL_116;
    }
    livecookie = v11->livecookie;
    if ( v11->livecookie )
    {
      v39 = v49;
      v51 = v11;
    }
    else
    {
      if ( v49->livecookie )
        goto LABEL_53;
      v39 = v49;
      v51 = v11;
      livecookie = 1;
    }
LABEL_116:
    if ( !v49->next )
      break;
    v49 = v49->next;
  }
  if ( v51 )
  {
    creationtime = v39->creationtime;
    v87 = v39->name;
    v51->next = v39->next;
    v51->creationtime = creationtime;
    Curl_cfree(v87);
    Curl_cfree(v39->value);
    Curl_cfree(v39->domain);
    Curl_cfree(v39->path);
    Curl_cfree(v39->spath);
    v88 = *(_OWORD *)&v51->value;
    v89 = (void (__fastcall *)(Cookie *))Curl_cfree;
    *(_OWORD *)&v39->next = *(_OWORD *)&v51->next;
    *(_OWORD *)&v39->value = v88;
    v90 = *(_OWORD *)&v51->expires;
    *(_OWORD *)&v39->spath = *(_OWORD *)&v51->spath;
    *(_OWORD *)&v39->expires = v90;
    *(_QWORD *)&v39->prefix = *(_QWORD *)&v51->prefix;
    v89(v51);
  }
  else
  {
    v39 = v11;
  }
  if ( c->running && (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
  {
    if ( !livecookie )
      goto LABEL_272;
    Curl_infof(
      data,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
      "Replaced",
      v39->name,
      v39->value,
      v39->domain,
      v39->path,
      v39->expires);
  }
  else if ( !livecookie )
  {
    goto LABEL_255;
  }
  v91 = v39->expires;
  if ( !v91 )
    return v39;
LABEL_252:
  if ( v91 < c->next_expiration )
    c->next_expiration = v91;
  return v39;
}
