Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  _BOOL4 v9; // w28
  Cookie *v11; // x25
  Cookie *v12; // x21
  size_t v13; // x19
  size_t v14; // x20
  int v15; // w0
  int v17; // w0
  const char *v19; // x23
  _BOOL4 v20; // w22
  bool v21; // cc
  bool v22; // cc
  int v23; // w19
  _BYTE *v24; // x0
  int is_ipnum; // w19
  const char *name; // x19
  char *value; // x20
  int v28; // w0
  const char *v30; // x21
  int v31; // t1
  char *v34; // x0
  __int64 v36; // x0
  const char *v37; // x0
  int v38; // w0
  curl_off_t expires; // x1
  __int64 v40; // x0
  int v41; // w26
  __int64 v43; // x0
  char *v44; // x0
  char *v45; // x0
  signed __int64 v46; // x0
  size_t v47; // x19
  char *v48; // x0
  char *v49; // x0
  char *v50; // x0
  char *v51; // x0
  char *v52; // x20
  int v53; // w19
  _BOOL4 v54; // w21
  __int64 v55; // x0
  __int64 v56; // x0
  __int64 v57; // x0
  __int64 v58; // x0
  const char *v60; // x0
  int v61; // w0
  size_t v62; // x26
  Cookie *v63; // x19
  int livecookie; // w23
  Cookie *v65; // x20
  const char *v66; // x0
  char *v67; // x0
  __int64 v68; // x27
  __int64 v69; // x0
  __int64 v70; // x1
  char *v71; // x0
  char *v72; // x1
  const char *spath; // x22
  char *v74; // x24
  char *v75; // x0
  size_t v76; // x2
  char *v77; // x0
  char *v78; // x1
  char *v79; // x0
  char *v80; // x1
  __int128 v81; // q1
  __int128 v82; // q1
  curl_off_t v83; // x0
  const char *v84; // x2
  char v86; // w0
  size_t v87; // x1
  _BOOL4 securea; // [xsp+7Ch] [xbp+7Ch]
  time_t now; // [xsp+88h] [xbp+88h]
  _BOOL4 noexpirea; // [xsp+90h] [xbp+90h]
  int v95; // [xsp+94h] [xbp+94h]
  char *tok_buf; // [xsp+A0h] [xbp+A0h] BYREF
  char date[128]; // [xsp+A8h] [xbp+A8h] BYREF

  v9 = httpheader;
  noexpirea = noexpire;
  securea = secure;
  now = time(0uLL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  v11 = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !v11 )
    return 0LL;
  if ( !v9 )
  {
    tok_buf = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 0xA;
      v11->httponly = 1;
    }
    if ( *lineptr == 35 )
    {
      Curl_cfree(v11);
      return 0LL;
    }
    v50 = strchr(lineptr, 13);
    if ( v50 )
      *v50 = 0;
    v51 = strchr(lineptr, 10);
    if ( v51 )
      *v51 = 0;
    v52 = strtok_r((char *)lineptr, "\t", &tok_buf);
    if ( !v52 )
      goto LABEL_219;
    v53 = 0;
    while ( 1 )
    {
      if ( v53 == 3 )
      {
        v54 = 0;
      }
      else
      {
        if ( v53 > 3 )
        {
          if ( v53 == 5 )
          {
            v70 = Curl_cstrdup(v52);
            v11->name = (char *)v70;
            if ( !v70 )
              goto LABEL_172;
            if ( (unsigned int)curl_strnequal("__Secure-", v70, 9LL) )
            {
              v11->prefix |= 1u;
              v54 = 0;
            }
            else
            {
              v54 = 0;
              if ( (unsigned int)curl_strnequal("__Host-", v11->name, 7LL) )
                v11->prefix |= 2u;
            }
          }
          else if ( v53 == 6 )
          {
            v57 = Curl_cstrdup(v52);
            v11->value = (char *)v57;
            if ( !v57 )
              goto LABEL_172;
            v54 = 0;
          }
          else
          {
            v54 = 0;
            if ( v53 == 4 && (unsigned int)curlx_strtoofft(v52, 0LL, 10LL, &v11->expires) )
              goto LABEL_172;
          }
          goto LABEL_194;
        }
        if ( v53 == 1 )
        {
          v11->tailmatch = (unsigned int)curl_strequal(v52, "TRUE") != 0;
          v54 = 0;
          goto LABEL_194;
        }
        if ( v53 != 2 )
        {
          v54 = 0;
          if ( !v53 )
          {
            v55 = (__int64)(*v52 == 46 ? v52 + 1 : v52);
            v56 = Curl_cstrdup(v55);
            v11->domain = (char *)v56;
            if ( !v56 )
              goto LABEL_172;
          }
          goto LABEL_194;
        }
        if ( strcmp("TRUE", v52) && strcmp("FALSE", v52) )
        {
          v66 = (const char *)Curl_cstrdup(v52);
          v11->path = (char *)v66;
          if ( !v66 )
            goto LABEL_172;
          v67 = sanitize_cookie_path(v66);
          v11->spath = v67;
          if ( !v67 )
            goto LABEL_172;
          v54 = 0;
          goto LABEL_194;
        }
        v68 = Curl_cstrdup("/");
        v11->path = (char *)v68;
        v69 = Curl_cstrdup("/");
        v11->spath = (char *)v69;
        v54 = 1;
        if ( v69 )
          v54 = v68 == 0;
      }
      v11->secure = 0;
      if ( (unsigned int)curl_strequal(v52, "TRUE") )
      {
        if ( !securea && !c->running )
        {
          v53 = 3;
LABEL_172:
          strtok_r(0uLL, "\t", &tok_buf);
          v54 = 1;
          if ( v53 == 5 )
          {
LABEL_173:
            v58 = Curl_cstrdup(&unk_2410);
            v11->value = (char *)v58;
            if ( v58 )
            {
              v53 = 7;
              goto LABEL_175;
            }
          }
LABEL_219:
          freecookie(v11);
          return 0LL;
        }
        v11->secure = 1;
        v53 = 3;
      }
      else
      {
        v53 = 3;
      }
LABEL_194:
      v52 = strtok_r(0uLL, "\t", &tok_buf);
      ++v53;
      if ( v52 == 0LL || v54 )
      {
        if ( v53 == 6 )
          goto LABEL_173;
LABEL_175:
        if ( !v54 && v53 == 7 )
          goto LABEL_180;
        goto LABEL_219;
      }
    }
  }
  v95 = 0;
  if ( strlen(lineptr) > 0x1388 )
  {
    Curl_cfree(v11);
    return 0LL;
  }
  while ( 1 )
  {
    v41 = *(unsigned __int8 *)lineptr;
    if ( !*lineptr )
      break;
    if ( v41 == 32 || v41 == 9 )
    {
      ++lineptr;
    }
    else
    {
      v13 = strcspn(lineptr, ";\t\r\n=");
      if ( v13 )
        goto LABEL_298;
      v28 = *(unsigned __int8 *)lineptr;
      v30 = lineptr;
LABEL_76:
      while ( v28 == 32 || v28 == 9 )
      {
        v31 = *(unsigned __int8 *)++v30;
        v28 = v31;
        if ( !v31 )
          goto LABEL_82;
      }
      if ( v28 != 59 )
        goto LABEL_82;
      lineptr = v30 + 1;
    }
  }
  v13 = strcspn(lineptr, ";\t\r\n=");
  if ( !v13 )
    goto LABEL_82;
LABEL_298:
  v30 = &lineptr[v13];
  while ( 1 )
  {
    v87 = v13--;
    v20 = lineptr[v13] == 32 || lineptr[v13] == 9;
    if ( !v20 )
      break;
    if ( !v13 )
    {
      if ( *v30 == 61 )
        goto LABEL_302;
      v14 = 0LL;
      v19 = 0LL;
      v20 = 0;
LABEL_27:
      v22 = v41 == 95 && v13 > 6;
      if ( v22 && lineptr[1] == 95 )
      {
        if ( (unsigned int)curl_strnequal("__Secure-", lineptr, 9LL) )
        {
          v11->prefix |= 1u;
        }
        else if ( (unsigned int)curl_strnequal("__Host-", lineptr, 7LL) )
        {
          v11->prefix |= 2u;
        }
      }
      if ( !v11->name )
      {
        if ( !v20 )
          goto LABEL_67;
        strstore(&v11->name, lineptr, v13);
        strstore(&v11->value, v19, v14);
        name = v11->name;
        if ( !name )
          goto LABEL_67;
        value = v11->value;
        if ( !value )
          goto LABEL_67;
        if ( value[strcspn(v11->value, badoctets_0)] || name[strcspn(name, badoctets_0)] )
        {
          if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
            Curl_infof(data, "invalid octets in name/value, cookie dropped");
          goto LABEL_67;
        }
        goto LABEL_75;
      }
      if ( v14 )
        goto LABEL_36;
      if ( v13 != 6 )
      {
        if ( v13 != 8 )
        {
          if ( v20 )
          {
LABEL_36:
            if ( v13 != 4 )
              goto LABEL_37;
            if ( (unsigned int)curl_strnequal("path", lineptr, 4LL) )
            {
              strstore(&v11->path, v19, v14);
              if ( !v11->path
                || (Curl_cfree(v11->spath), v34 = sanitize_cookie_path(v11->path), (v11->spath = v34) == 0LL) )
              {
LABEL_67:
                freecookie(v11);
                return 0LL;
              }
            }
          }
          goto LABEL_75;
        }
        if ( (unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
        {
          v11->httponly = 1;
          goto LABEL_75;
        }
        if ( v20 )
        {
LABEL_74:
          if ( v13 == 7 && !(unsigned int)curl_strnequal("version", lineptr, 7LL) )
          {
            if ( (unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
            {
              if ( *v19 == 34 )
                v37 = v19 + 1;
              else
                v37 = v19;
              v38 = curlx_strtoofft(v37, 0LL, 10LL, &v11->expires);
              switch ( v38 )
              {
                case 1:
                  v11->expires = 0x7FFFFFFFFFFFFFFFLL;
                  break;
                case 2:
                  v11->expires = 1LL;
                  break;
                case 0:
                  expires = v11->expires;
                  if ( expires )
                  {
                    v40 = 0x7FFFFFFFFFFFFFFFLL;
                    if ( expires <= 0x7FFFFFFFFFFFFFFFLL - now )
                      v40 = expires + now;
                    v11->expires = v40;
                  }
                  else
                  {
                    v11->expires = 1LL;
                  }
                  break;
              }
            }
            else if ( (unsigned int)curl_strnequal("expires", lineptr, 7LL) )
            {
              if ( v14 <= 0x7F && v11->expires == 0 )
              {
                memcpy(date, v19, v14);
                date[v14] = 0;
                v36 = Curl_getdate_capped(date);
                if ( v36 )
                {
                  if ( v36 < 0 )
                    v36 = 0LL;
                  v11->expires = v36;
                }
                else
                {
                  v11->expires = 1LL;
                }
              }
            }
          }
        }
LABEL_75:
        v28 = *(unsigned __int8 *)v30;
        if ( *v30 )
          goto LABEL_76;
LABEL_82:
        if ( v95 )
          goto LABEL_67;
        if ( !v11->domain && domain != 0LL )
        {
          v43 = Curl_cstrdup(domain);
          v11->domain = (char *)v43;
          if ( !v43 )
            goto LABEL_67;
        }
        if ( !v11->path && path != 0LL )
        {
          v44 = strchr(path, 63);
          v45 = v44 ? (char *)Curl_memrchr(path, 47LL, v44 - path) : strrchr(path, 47);
          if ( v45 )
          {
            v46 = v45 - path;
            v47 = v46 + 1;
            v48 = (char *)Curl_cmalloc(v46 + 2);
            v11->path = v48;
            if ( !v48 )
              goto LABEL_67;
            memcpy(v48, path, v47);
            v11->path[v47] = 0;
            v49 = sanitize_cookie_path(v11->path);
            v11->spath = v49;
            if ( !v49 )
              goto LABEL_67;
          }
        }
        if ( !v11->name )
          goto LABEL_67;
        ++data->req.setcookies;
LABEL_180:
        if ( (v11->prefix & 1) != 0 )
        {
          if ( v11->secure )
          {
            if ( (v11->prefix & 2) == 0 )
              goto LABEL_186;
LABEL_183:
            v60 = v11->path;
            if ( v60 )
            {
              if ( !strcmp(v60, "/") && !v11->tailmatch )
              {
LABEL_186:
                if ( c->running || !c->newsession || v11->expires )
                {
                  v11->livecookie = c->running;
                  v61 = c->lastct + 1;
                  c->lastct = v61;
                  v11->creationtime = v61;
                  if ( !noexpirea )
                    remove_expired(c);
                  v62 = cookiehash(v11->domain);
                  v63 = c->cookies[v62];
                  if ( v63 )
                  {
                    livecookie = 0;
                    v12 = 0LL;
                    v65 = 0LL;
                    while ( 1 )
                    {
                      if ( !(unsigned int)curl_strequal(v63->name, v11->name) )
                        goto LABEL_227;
                      v71 = v63->domain;
                      if ( v71 )
                      {
                        v72 = v11->domain;
                        if ( !v72 || !(unsigned int)curl_strequal(v71, v72) )
                          goto LABEL_227;
                      }
                      else if ( v11->domain )
                      {
                        goto LABEL_227;
                      }
                      spath = v63->spath;
                      if ( spath )
                      {
                        v74 = v11->spath;
                        if ( v74 )
                        {
                          if ( v63->secure && !v11->secure && !securea )
                          {
                            v75 = strchr(spath + 1, 47);
                            v76 = v75 ? v75 - spath : strlen(spath);
                            if ( (unsigned int)curl_strnequal(spath, v74, v76) )
                            {
                              if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
                                Curl_infof(
                                  data,
                                  "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                                  v11->name,
                                  v11->domain);
                              goto LABEL_243;
                            }
                          }
                        }
                      }
LABEL_227:
                      if ( v65 || !(unsigned int)curl_strequal(v63->name, v11->name) )
                        goto LABEL_228;
                      v77 = v63->domain;
                      if ( v77 )
                      {
                        v78 = v11->domain;
                        if ( !v78 || !(unsigned int)curl_strequal(v77, v78) || v63->tailmatch != v11->tailmatch )
                        {
LABEL_252:
                          if ( !livecookie )
                            goto LABEL_281;
                        }
                      }
                      else if ( v11->domain )
                      {
                        goto LABEL_252;
                      }
                      v79 = v63->spath;
                      if ( v79 && ((v80 = v11->spath) == 0LL || !(unsigned int)curl_strequal(v79, v80))
                        || (v11->spath == 0LL) != (v63->spath == 0LL) )
                      {
LABEL_281:
                        livecookie = 0;
                        goto LABEL_228;
                      }
                      livecookie = v11->livecookie;
                      if ( v11->livecookie )
                      {
                        v12 = v63;
                        v65 = v11;
                      }
                      else
                      {
                        if ( v63->livecookie )
                          goto LABEL_243;
                        v12 = v63;
                        v65 = v11;
                        livecookie = 1;
                      }
LABEL_228:
                      if ( !v63->next )
                      {
                        if ( v65 )
                        {
                          v65->next = v12->next;
                          v65->creationtime = v12->creationtime;
                          Curl_cfree(v12->name);
                          Curl_cfree(v12->value);
                          Curl_cfree(v12->domain);
                          Curl_cfree(v12->path);
                          Curl_cfree(v12->spath);
                          v81 = *(_OWORD *)&v65->value;
                          *(_OWORD *)&v12->next = *(_OWORD *)&v65->next;
                          *(_OWORD *)&v12->value = v81;
                          v82 = *(_OWORD *)&v65->expires;
                          *(_OWORD *)&v12->spath = *(_OWORD *)&v65->spath;
                          *(_OWORD *)&v12->expires = v82;
                          *(_QWORD *)&v12->prefix = *(_QWORD *)&v65->prefix;
                          Curl_cfree(v65);
                        }
                        else
                        {
                          v12 = v11;
                        }
                        if ( !c->running )
                          goto LABEL_265;
                        goto LABEL_271;
                      }
                      v63 = v63->next;
                    }
                  }
                  v12 = v11;
                  if ( !c->running )
                  {
LABEL_292:
                    c->cookies[v62] = v12;
                    goto LABEL_277;
                  }
                  v12 = v11;
                  livecookie = 0;
LABEL_271:
                  if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
                  {
                    v84 = "Replaced";
                    if ( !livecookie )
                      v84 = "Added";
                    Curl_infof(
                      data,
                      "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
                      v84,
                      v12->name,
                      v12->value,
                      v12->domain,
                      v12->path,
                      v12->expires);
                  }
LABEL_265:
                  if ( !livecookie )
                  {
                    if ( !v63 )
                      goto LABEL_292;
                    v63->next = v12;
LABEL_277:
                    ++c->numcookies;
                  }
                  v83 = v12->expires;
                  if ( v83 && v83 < c->next_expiration )
                    c->next_expiration = v83;
                  return v12;
                }
              }
            }
          }
        }
        else
        {
          if ( (v11->prefix & 2) == 0 )
            goto LABEL_186;
          if ( v11->secure )
            goto LABEL_183;
        }
LABEL_243:
        freecookie(v11);
        return 0LL;
      }
      if ( (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
      {
        if ( !securea && c->running )
          goto LABEL_67;
        v11->secure = 1;
        goto LABEL_75;
      }
      if ( !v20 )
        goto LABEL_75;
LABEL_37:
      if ( v13 != 6 )
        goto LABEL_74;
      v23 = (v14 != 0) & ((unsigned int)curl_strnequal("domain", lineptr, 6LL) != 0);
      if ( !v23 )
        goto LABEL_75;
      if ( *v19 == 46 )
      {
        ++v19;
        --v14;
      }
      if ( v14 == 9 && (unsigned int)curl_strnequal(v19, "localhost", 9LL) )
      {
LABEL_44:
        if ( !domain )
        {
          is_ipnum = (unsigned __int8)Curl_host_is_ipnum(v19);
          strstore(&v11->domain, v19, v14);
          if ( !v11->domain )
            goto LABEL_67;
          if ( is_ipnum )
            goto LABEL_75;
LABEL_294:
          v11->tailmatch = 1;
          goto LABEL_75;
        }
LABEL_283:
        v86 = Curl_host_is_ipnum(domain);
      }
      else
      {
        v24 = memchr(v19, 46, v14);
        if ( !v24 )
        {
          domain = ":";
          goto LABEL_283;
        }
        if ( v14 - (v24 - v19) > 1 )
          goto LABEL_44;
        domain = ":";
        v86 = Curl_host_is_ipnum(":");
      }
      if ( v86 )
      {
        if ( !strncmp(v19, domain, v14) && strlen(domain) == v14 )
        {
          strstore(&v11->domain, v19, v14);
          if ( !v11->domain )
            goto LABEL_67;
          goto LABEL_75;
        }
      }
      else if ( cookie_tailmatch(v19, v14, domain) )
      {
        strstore(&v11->domain, v19, v14);
        if ( !v11->domain )
          goto LABEL_67;
        goto LABEL_294;
      }
      v95 = v23;
      if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
      {
        Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v19);
        v95 = v23;
      }
      goto LABEL_75;
    }
  }
  if ( *v30 == 61 )
  {
    v13 = v87;
LABEL_302:
    v19 = v30 + 1;
    v14 = strcspn(v30 + 1, ";\r\n");
    v30 += v14 + 1;
    while ( 1 )
    {
      if ( !v14 )
      {
LABEL_21:
        v20 = v9;
        v14 = 0LL;
        goto LABEL_22;
      }
      v15 = (unsigned __int8)v19[v14 - 1];
      if ( v15 != 32 && v15 != 9 )
        break;
      --v14;
    }
    while ( 1 )
    {
      v17 = *(unsigned __int8 *)v19;
      if ( v17 != 32 && v17 != 9 )
        break;
      ++v19;
      if ( !--v14 )
        goto LABEL_21;
    }
    if ( memchr(v19, 9, v14) )
    {
      freecookie(v11);
      v12 = 0LL;
      if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
        Curl_infof(data, "cookie contains TAB, dropping");
      return v12;
    }
    v20 = v9;
  }
  else
  {
    v13 = v87;
    v19 = 0LL;
    v14 = 0LL;
  }
LABEL_22:
  v21 = v13 > 0xFFE || v14 > 0xFFE;
  if ( !v21 && v14 + v13 <= 0x1000 )
    goto LABEL_27;
  freecookie(v11);
  v12 = 0LL;
  if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
    Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v13, v14);
  return v12;
}
