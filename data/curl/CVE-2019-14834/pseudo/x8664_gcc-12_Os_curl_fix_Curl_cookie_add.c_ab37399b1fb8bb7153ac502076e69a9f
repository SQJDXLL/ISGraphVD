Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  Cookie *v10; // rbx
  char v11; // al
  size_t v12; // r14
  const char *v13; // r15
  size_t v14; // rcx
  char v15; // al
  _BYTE *v16; // r13
  size_t v17; // rbp
  char v18; // al
  bool v19; // r15
  const char *name; // rbp
  char *value; // r12
  bool v22; // r14
  char *v23; // rax
  bool v24; // zf
  _BYTE *v25; // rax
  char is_ipnum; // al
  char v27; // r12
  int v28; // eax
  __int64 v29; // rax
  curl_off_t expires; // rdx
  __int64 v31; // rax
  __int64 v32; // rdx
  bool v33; // zf
  char v34; // al
  __int64 v35; // rax
  char *v36; // rax
  char *v37; // rax
  signed __int64 v38; // r12
  unsigned __int64 v39; // rbp
  char *v40; // rax
  char *v41; // rax
  char *v42; // rax
  char *v43; // rax
  bool v44; // r15
  int v45; // r14d
  char *v46; // r8
  bool running; // bp
  bool v48; // r12
  __int64 v49; // rax
  __int64 v50; // r14
  int v51; // eax
  const char *v52; // r8
  __int64 (__fastcall *v53)(const char *); // rbp
  int v54; // eax
  const char *v55; // rax
  char *v56; // rax
  char *v57; // r14
  __int64 v58; // rax
  __int64 v59; // rbp
  __int64 v60; // rax
  int v61; // r14d
  __int64 v62; // rax
  __int64 v63; // rax
  __int64 v64; // rax
  unsigned __int8 prefix; // al
  const char *v66; // rdi
  bool v67; // al
  char livecookie; // r13
  Cookie *v69; // rbp
  Cookie *v70; // r12
  Cookie *v71; // r15
  Cookie *v72; // r14
  char *v73; // rdi
  char *v74; // rsi
  const char *spath; // r15
  char *v76; // rax
  size_t v77; // rdx
  char *v78; // rdi
  char *v79; // rsi
  bool v80; // zf
  char *v81; // rdi
  char *v82; // rsi
  char *v83; // rdi
  __int64 v84; // rcx
  Cookie *v85; // rdi
  Cookie *v86; // rsi
  const char *v87; // rdx
  curl_off_t v88; // rax
  int domainc; // [rsp+18h] [rbp-F0h]
  const char *domainb; // [rsp+18h] [rbp-F0h]
  const char *myhash; // [rsp+20h] [rbp-E8h]
  size_t myhashb; // [rsp+20h] [rbp-E8h]
  size_t myhasha; // [rsp+20h] [rbp-E8h]
  const char *ptr; // [rsp+28h] [rbp-E0h]
  time_t now; // [rsp+30h] [rbp-D8h]
  char v101; // [rsp+39h] [rbp-CFh]
  bool badcookie; // [rsp+3Bh] [rbp-CDh]
  char *tok_buf; // [rsp+40h] [rbp-C8h] BYREF
  char date[128]; // [rsp+48h] [rbp-C0h] BYREF
  unsigned __int64 v106; // [rsp+C8h] [rbp-40h]

  v106 = __readfsqword(0x28u);
  now = time(0LL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  v10 = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !v10 )
    return 0LL;
  if ( httpheader )
  {
    badcookie = 0;
    if ( strlen(lineptr) <= 0x1388 )
    {
      while ( 1 )
      {
        v11 = *lineptr;
        v101 = *lineptr;
        if ( !*lineptr || v11 != 32 && v11 != 9 )
        {
          v12 = strcspn(lineptr, ";\t\r\n=");
          v13 = &lineptr[v12];
          if ( !v12 )
          {
            ptr = lineptr;
            goto LABEL_128;
          }
          while ( 1 )
          {
            v14 = v12--;
            v15 = lineptr[v12];
            if ( v15 != 32 && v15 != 9 )
              break;
            if ( !v12 )
              goto LABEL_18;
          }
          v12 = v14;
LABEL_18:
          if ( *v13 == 61 )
          {
            v16 = v13 + 1;
            v17 = strcspn(v13 + 1, ";\r\n");
            ptr = &v13[v17 + 1];
            while ( 1 )
            {
              if ( !v17 )
                goto LABEL_32;
              v18 = v13[v17];
              if ( v18 != 32 && v18 != 9 )
                break;
              --v17;
            }
            while ( 1 )
            {
              if ( !v17 )
                goto LABEL_32;
              if ( *v16 != 32 && *v16 != 9 )
                break;
              ++v16;
              --v17;
            }
            if ( memchr(v16, 9, v17) )
            {
              freecookie(v10);
              if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
                Curl_infof(data, "cookie contains TAB, dropping");
              return 0LL;
            }
LABEL_32:
            v19 = httpheader;
          }
          else
          {
            ptr = v13;
            v16 = 0LL;
            v19 = 0;
            v17 = 0LL;
          }
          if ( v12 > 0xFFE || v17 > 0xFFE || v12 + v17 > 0x1000 )
          {
            freecookie(v10);
            if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
              Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v12, v17);
            return 0LL;
          }
          if ( v12 <= 6 )
          {
            if ( !v10->name )
            {
LABEL_52:
              if ( v19 )
              {
                strstore(&v10->name, lineptr, v12);
                strstore(&v10->value, v16, v17);
                name = v10->name;
                if ( name )
                {
                  value = v10->value;
                  if ( value )
                  {
                    if ( !value[strcspn(v10->value, &badoctets_0)] && !name[strcspn(name, &badoctets_0)] )
                      goto LABEL_128;
                    if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
                      Curl_infof(data, "invalid octets in name/value, cookie dropped");
                  }
                }
              }
              goto LABEL_238;
            }
            if ( v17 )
            {
              if ( v12 == 4 )
                goto LABEL_73;
              if ( v12 != 6 )
                goto LABEL_128;
            }
            else
            {
              if ( v12 != 6 )
              {
                if ( !v19 || v12 != 4 )
                  goto LABEL_128;
LABEL_73:
                if ( !(unsigned int)curl_strnequal("path", lineptr, 4LL) )
                  goto LABEL_128;
                strstore(&v10->path, v16, v17);
                if ( !v10->path )
                  goto LABEL_238;
                Curl_cfree(v10->spath);
                v23 = sanitize_cookie_path(v10->path);
                v10->spath = v23;
                v24 = v23 == 0LL;
LABEL_96:
                if ( !v24 )
                  goto LABEL_128;
                goto LABEL_238;
              }
              if ( (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
              {
                if ( secure || !c->running )
                {
                  v10->secure = 1;
                  goto LABEL_128;
                }
                goto LABEL_238;
              }
              if ( !v19 )
                goto LABEL_128;
            }
            v22 = (v17 != 0) & ((unsigned int)curl_strnequal("domain", lineptr, 6LL) != 0);
            if ( !v22 )
              goto LABEL_128;
            if ( *v16 == 46 )
            {
              ++v16;
              --v17;
            }
            if ( v17 != 9 || !(unsigned int)curl_strnequal(v16, "localhost", 9LL) )
            {
              v25 = memchr(v16, 46, v17);
              if ( !v25 || v17 - (v25 - v16) <= 1 )
              {
                is_ipnum = Curl_host_is_ipnum(":");
                domain = ":";
                goto LABEL_89;
              }
            }
            if ( !domain )
            {
              v27 = Curl_host_is_ipnum(v16);
              strstore(&v10->domain, v16, v17);
              if ( !v10->domain )
                goto LABEL_238;
              if ( v27 )
                goto LABEL_128;
              goto LABEL_99;
            }
            is_ipnum = Curl_host_is_ipnum(domain);
LABEL_89:
            if ( is_ipnum )
            {
              if ( !strncmp(v16, domain, v17) && strlen(domain) == v17 )
              {
                strstore(&v10->domain, v16, v17);
                v24 = v10->domain == 0LL;
                goto LABEL_96;
              }
            }
            else if ( cookie_tailmatch(v16, v17, domain) )
            {
              strstore(&v10->domain, v16, v17);
              if ( !v10->domain )
                goto LABEL_238;
LABEL_99:
              v10->tailmatch = 1;
              goto LABEL_128;
            }
            if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
              Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v16);
            badcookie = v22;
            goto LABEL_128;
          }
          if ( v101 == 95 && lineptr[1] == 95 )
          {
            if ( (unsigned int)curl_strnequal("__Secure-", lineptr, 9LL) )
            {
              v10->prefix |= 1u;
            }
            else if ( (unsigned int)curl_strnequal("__Host-", lineptr, 7LL) )
            {
              v10->prefix |= 2u;
            }
          }
          if ( !v10->name )
            goto LABEL_52;
          if ( !v17 )
          {
            if ( v12 == 8 )
            {
              if ( (unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
                v10->httponly = 1;
              goto LABEL_128;
            }
            if ( !v19 )
              goto LABEL_128;
          }
          if ( v12 == 7 && !(unsigned int)curl_strnequal("version", lineptr, 7LL) )
          {
            if ( (unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
            {
              if ( *v16 == 34 )
                ++v16;
              v28 = curlx_strtoofft(v16, 0LL, 10LL, &v10->expires);
              if ( v28 == 1 )
              {
                v29 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else
              {
                if ( v28 == 2 )
                  goto LABEL_115;
                if ( v28 )
                  goto LABEL_128;
                expires = v10->expires;
                if ( !expires )
                {
LABEL_115:
                  v10->expires = 1LL;
                  goto LABEL_128;
                }
                v29 = 0x7FFFFFFFFFFFFFFFLL;
                if ( expires <= 0x7FFFFFFFFFFFFFFFLL - now )
                  v29 = expires + now;
              }
            }
            else
            {
              if ( !(unsigned int)curl_strnequal("expires", lineptr, 7LL) || v10->expires || v17 > 0x7F )
                goto LABEL_128;
              qmemcpy(date, v16, v17);
              date[v17] = 0;
              v31 = Curl_getdate_capped(date);
              v32 = 0LL;
              v33 = v31 == 0;
              if ( v31 >= 0 )
                v32 = v31;
              v29 = 1LL;
              if ( !v33 )
                v29 = v32;
            }
            v10->expires = v29;
            goto LABEL_128;
          }
          while ( 1 )
          {
LABEL_128:
            v34 = *ptr;
            if ( !*ptr )
              goto LABEL_134;
            if ( v34 != 32 && v34 != 9 )
              break;
            ++ptr;
          }
          if ( v34 != 59 )
          {
LABEL_134:
            if ( !badcookie )
            {
              if ( v10->domain || !domain || (v35 = Curl_cstrdup(domain), (v10->domain = (char *)v35) != 0LL) )
              {
                if ( v10->path )
                  goto LABEL_282;
                if ( !path )
                  goto LABEL_282;
                v36 = strchr(path, 63);
                v37 = v36 ? (char *)Curl_memrchr(path, 47LL, v36 - path) : strrchr(path, 47);
                if ( !v37 )
                  goto LABEL_282;
                v38 = v37 - path;
                v39 = v37 - path + 1;
                v40 = (char *)Curl_cmalloc(v37 - path + 2);
                v10->path = v40;
                if ( v40 )
                {
                  qmemcpy(v40, path, v39);
                  v10->path[v38 + 1] = 0;
                  v41 = sanitize_cookie_path(v10->path);
                  v10->spath = v41;
                  if ( v41 )
                  {
LABEL_282:
                    if ( v10->name )
                    {
                      ++data->req.setcookies;
                      goto LABEL_207;
                    }
                  }
                }
              }
            }
            goto LABEL_238;
          }
          lineptr = ptr;
        }
        ++lineptr;
      }
    }
    goto LABEL_5;
  }
  tok_buf = 0LL;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
  {
    v10->httponly = 1;
    lineptr += 10;
  }
  if ( *lineptr == 35 )
  {
LABEL_5:
    Curl_cfree(v10);
    return 0LL;
  }
  v42 = strchr(lineptr, 13);
  if ( v42 )
    *v42 = 0;
  v43 = strchr(lineptr, 10);
  if ( v43 )
    *v43 = 0;
  v44 = httpheader;
  v45 = 0;
  v46 = strtok_r((char *)lineptr, "\t", &tok_buf);
  while ( 2 )
  {
    running = !v44;
    v48 = !v44 && v46 != 0LL;
    if ( !v48 )
      goto LABEL_204;
    switch ( v45 )
    {
      case 0:
        if ( *v46 == 46 )
          ++v46;
        v49 = Curl_cstrdup(v46);
        v10->domain = (char *)v49;
        v50 = v49;
        v46 = strtok_r(0LL, "\t", &tok_buf);
        running = v50 != 0;
        if ( v46 && v50 )
          goto LABEL_165;
        v24 = v50 == 0;
        v45 = 1;
        v44 = v24;
        goto LABEL_204;
      case 1:
LABEL_165:
        v10->tailmatch = (unsigned int)curl_strequal(v46, "TRUE") != 0;
        v46 = strtok_r(0LL, "\t", &tok_buf);
        if ( v46 )
          goto LABEL_166;
        v44 = 0;
        running = v48;
        v45 = 2;
        goto LABEL_204;
      case 2:
LABEL_166:
        myhash = v46;
        v51 = strcmp("TRUE", v46);
        v52 = myhash;
        v53 = (__int64 (__fastcall *)(const char *))Curl_cstrdup;
        if ( v51 && (v54 = strcmp("FALSE", myhash), v52 = myhash, v54) )
        {
          v55 = (const char *)v53(myhash);
          v10->path = (char *)v55;
          if ( !v55 )
          {
            v44 = v48;
            running = 0;
            strtok_r(0LL, "\t", &tok_buf);
LABEL_173:
            v45 = 3;
            goto LABEL_204;
          }
          v56 = sanitize_cookie_path(v55);
          v10->spath = v56;
          v57 = v56;
          v46 = strtok_r(0LL, "\t", &tok_buf);
          running = v57 != 0LL;
          if ( !v46 || !v57 )
          {
            v44 = v57 == 0LL;
            goto LABEL_173;
          }
LABEL_176:
          v44 = httpheader;
        }
        else
        {
          myhashb = (size_t)v52;
          v58 = v53("/");
          v44 = v48;
          v10->path = (char *)v58;
          v59 = v58;
          v60 = Curl_cstrdup("/");
          v46 = (char *)myhashb;
          v10->spath = (char *)v60;
          if ( v60 )
            v44 = v59 == 0;
        }
        v10->secure = 0;
        if ( (unsigned int)curl_strequal(v46, "TRUE") )
        {
          if ( !secure )
          {
            running = c->running;
            if ( !running )
            {
              v44 = v48;
              strtok_r(0LL, "\t", &tok_buf);
LABEL_184:
              v45 = 4;
LABEL_204:
              if ( v45 != 7 && running )
                goto LABEL_238;
              goto LABEL_201;
            }
          }
          v10->secure = 1;
        }
        running = !v44;
        v46 = strtok_r(0LL, "\t", &tok_buf);
        if ( !v46 || !running )
          goto LABEL_184;
LABEL_186:
        v61 = curlx_strtoofft(v46, 0LL, 10LL, &v10->expires);
        v46 = strtok_r(0LL, "\t", &tok_buf);
        running = v61 == 0;
        if ( !v46 || v61 )
        {
          v24 = v61 == 0;
          v45 = 5;
          v44 = !v24;
          goto LABEL_204;
        }
LABEL_189:
        v62 = Curl_cstrdup(v46);
        v10->name = (char *)v62;
        if ( v62 )
        {
          if ( (unsigned int)curl_strnequal("__Secure-", v62, 9LL) )
          {
            v10->prefix |= 1u;
          }
          else if ( (unsigned int)curl_strnequal("__Host-", v10->name, 7LL) )
          {
            v10->prefix |= 2u;
          }
          v46 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v46 )
          {
            v44 = httpheader;
            goto LABEL_200;
          }
LABEL_197:
          v45 = 6;
          v63 = Curl_cstrdup(v46);
          v10->value = (char *)v63;
          v44 = v63 == 0;
LABEL_199:
          ++v45;
          v46 = strtok_r(0LL, "\t", &tok_buf);
          continue;
        }
        v44 = v48;
        strtok_r(0LL, "\t", &tok_buf);
LABEL_200:
        v64 = Curl_cstrdup(&LC1);
        v10->value = (char *)v64;
        if ( !v64 )
          goto LABEL_238;
LABEL_201:
        if ( v44 )
          goto LABEL_238;
LABEL_207:
        prefix = v10->prefix;
        if ( (prefix & 1) != 0 && !v10->secure
          || (prefix & 2) != 0 && (!v10->secure || (v66 = v10->path) == 0LL || strcmp(v66, "/") || v10->tailmatch)
          || !(v67 = c->running) && c->newsession && !v10->expires )
        {
LABEL_238:
          freecookie(v10);
          return 0LL;
        }
        v10->livecookie = v67;
        domainc = c->lastct;
        c->lastct = domainc + 1;
        v10->creationtime = domainc + 1;
        if ( !noexpire )
          remove_expired(c);
        livecookie = 0;
        v69 = 0LL;
        v70 = 0LL;
        v71 = 0LL;
        myhasha = cookiehash(v10->domain);
        v72 = c->cookies[myhasha];
        while ( 2 )
        {
          if ( v72 )
          {
            if ( (unsigned int)curl_strequal(v72->name, v10->name) )
            {
              v73 = v72->domain;
              v74 = v10->domain;
              if ( v73 )
              {
                if ( v74 && (unsigned int)curl_strequal(v73, v74) )
                {
LABEL_228:
                  spath = v72->spath;
                  if ( spath )
                  {
                    domainb = v10->spath;
                    if ( domainb )
                    {
                      if ( v72->secure && !v10->secure && !secure )
                      {
                        v76 = strchr(spath + 1, 47);
                        v77 = v76 ? v76 - spath : strlen(spath);
                        if ( (unsigned int)curl_strnequal(spath, domainb, v77) )
                        {
                          if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
                            Curl_infof(
                              data,
                              "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                              v10->name,
                              v10->domain);
                          goto LABEL_238;
                        }
                      }
                    }
                  }
                }
              }
              else if ( !v74 )
              {
                goto LABEL_228;
              }
            }
            if ( !v70 && (unsigned int)curl_strequal(v72->name, v10->name) )
            {
              v78 = v72->domain;
              v79 = v10->domain;
              if ( v78 )
              {
                if ( v79 && (unsigned int)curl_strequal(v78, v79) )
                {
                  v80 = v72->tailmatch == v10->tailmatch;
                  goto LABEL_247;
                }
                goto LABEL_243;
              }
              v80 = v79 == 0LL;
LABEL_247:
              if ( v80 )
              {
LABEL_248:
                v81 = v72->spath;
                v82 = v10->spath;
                if ( (!v81 || v82 && (unsigned int)curl_strequal(v81, v82))
                  && (v72->spath == 0LL) == (v10->spath == 0LL) )
                {
                  livecookie = v10->livecookie;
                  if ( livecookie )
                  {
                    v69 = v72;
                    v70 = v10;
                  }
                  else
                  {
                    if ( v72->livecookie )
                      goto LABEL_238;
                    v69 = v72;
                    v70 = v10;
                    livecookie = 1;
                  }
                  goto LABEL_222;
                }
              }
              else
              {
LABEL_243:
                if ( livecookie )
                  goto LABEL_248;
              }
              livecookie = 0;
            }
LABEL_222:
            v71 = v72;
            v72 = v72->next;
            continue;
          }
          break;
        }
        if ( v70 )
        {
          v83 = v69->name;
          v70->next = v69->next;
          v70->creationtime = v69->creationtime;
          Curl_cfree(v83);
          Curl_cfree(v69->value);
          Curl_cfree(v69->domain);
          Curl_cfree(v69->path);
          Curl_cfree(v69->spath);
          v84 = 18LL;
          v85 = v69;
          v86 = v70;
          while ( v84 )
          {
            LODWORD(v85->next) = v86->next;
            v86 = (Cookie *)((char *)v86 + 4);
            v85 = (Cookie *)((char *)v85 + 4);
            --v84;
          }
          Curl_cfree(v70);
          v10 = v69;
        }
        if ( c->running && (*(&data->set.connect_only + 4) & 0x20) != 0 )
        {
          v87 = "Replaced";
          if ( !livecookie )
            v87 = "Added";
          Curl_infof(
            data,
            "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
            v87,
            v10->name,
            v10->value,
            v10->domain,
            v10->path,
            v10->expires);
        }
        if ( !livecookie )
        {
          if ( v71 )
            v71->next = v10;
          else
            c->cookies[myhasha] = v10;
          ++c->numcookies;
        }
        v88 = v10->expires;
        if ( v88 && v88 < c->next_expiration )
          c->next_expiration = v88;
        return v10;
      case 3:
        goto LABEL_176;
      case 4:
        goto LABEL_186;
      case 5:
        goto LABEL_189;
      case 6:
        goto LABEL_197;
      default:
        v44 = httpheader;
        goto LABEL_199;
    }
  }
}
