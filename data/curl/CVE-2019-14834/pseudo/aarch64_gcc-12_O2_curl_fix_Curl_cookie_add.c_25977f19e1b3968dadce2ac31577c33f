Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  _BOOL4 v10; // w24
  Cookie *v12; // x19
  int v13; // w21
  const char *v15; // x23
  size_t v16; // x27
  int v17; // t1
  size_t v19; // x1
  _BOOL4 v20; // w7
  const char *v21; // x28
  size_t v22; // x25
  size_t v23; // x1
  int v24; // w0
  _BOOL4 v26; // w0
  char *v27; // x0
  char *v28; // x0
  char *v29; // x0
  int v30; // w26
  __int64 v31; // x0
  _BOOL4 v32; // w25
  int v33; // w20
  char *v34; // x0
  int v35; // w27
  int v36; // w0
  __int64 (__fastcall *v37)(const char *); // x26
  const char *v38; // x2
  int v39; // w0
  const char *v40; // x0
  char *v41; // x0
  __int64 v42; // x0
  __int64 (__fastcall *v43)(const char *); // x3
  __int64 v44; // x25
  __int64 v45; // x0
  Cookie *v46; // x24
  __int64 v48; // x0
  int v49; // w0
  int v50; // w0
  bool v52; // zf
  unsigned __int8 prefix; // w0
  char *v56; // x0
  int lastct; // w0
  size_t v58; // x27
  Cookie *v59; // x20
  int livecookie; // w25
  Cookie *v61; // x23
  char *v62; // x0
  char *v63; // x1
  const char *spath; // x28
  char *v65; // x26
  Cookie *next; // x1
  const char *v67; // x0
  int v68; // w0
  curl_off_t expires; // x0
  int v70; // w0
  char *v71; // x1
  const char *v72; // x0
  const char *name; // x21
  _BYTE *v75; // x0
  __int64 v76; // x0
  __int64 v77; // x0
  __int64 v78; // x0
  char *v79; // x0
  __int64 v80; // x0
  __int64 v81; // x0
  int is_ipnum; // w21
  __int64 v83; // x0
  char *v84; // x0
  size_t v85; // x2
  char *v86; // x0
  char *v87; // x1
  char *v88; // x0
  char *v89; // x1
  char *v90; // x0
  void (__fastcall *v91)(char *); // x1
  __int128 v92; // q1
  void (__fastcall *v93)(Cookie *); // x1
  __int128 v94; // q1
  const char *v95; // x2
  curl_off_t v96; // x0
  __int64 v98; // x0
  bool v99; // zf
  char *v100; // x0
  char *v101; // x0
  signed __int64 v102; // x0
  size_t v103; // x20
  char *v104; // x0
  char *v105; // x0
  __int64 v106; // x0
  int v107; // w0
  char *v108; // x1
  bool v109; // zf
  _BOOL4 securea; // [xsp+78h] [xbp+78h]
  _BOOL4 noexpirea; // [xsp+7Ch] [xbp+7Ch]
  const char *pathb; // [xsp+80h] [xbp+80h]
  const char *pathc; // [xsp+80h] [xbp+80h]
  time_t now; // [xsp+88h] [xbp+88h]
  _BOOL4 badcookie; // [xsp+A8h] [xbp+A8h]
  _BOOL4 v119; // [xsp+ACh] [xbp+ACh]
  _BOOL4 v120; // [xsp+ACh] [xbp+ACh]
  char *tok_buf; // [xsp+B0h] [xbp+B0h] BYREF
  char date[128]; // [xsp+B8h] [xbp+B8h] BYREF

  v10 = httpheader;
  noexpirea = noexpire;
  securea = secure;
  now = time(0uLL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  v12 = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !v12 )
    return 0LL;
  if ( !v10 )
  {
    tok_buf = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 0xA;
      v12->httponly = 1;
    }
    if ( *lineptr == 35 )
      goto LABEL_260;
    v27 = strchr(lineptr, 13);
    if ( v27 )
      *v27 = 0;
    v28 = strchr(lineptr, 10);
    if ( v28 )
      *v28 = 0;
    v29 = strtok_r((char *)lineptr, "\t", &tok_buf);
    if ( !v29 )
      goto LABEL_56;
    if ( *v29 == 46 )
      ++v29;
    v30 = 1;
    v31 = Curl_cstrdup(v29);
    v32 = v31 == 0;
    v33 = v31 != 0;
    v12->domain = (char *)v31;
    while ( 1 )
    {
      while ( 1 )
      {
        v34 = strtok_r(0uLL, "\t", &tok_buf);
        v35 = (unsigned __int8)v33 & (v34 != 0LL);
        if ( ((unsigned __int8)v33 & (v34 != 0LL)) == 0 )
        {
          if ( v30 == 6 )
          {
            v35 = v32;
LABEL_200:
            v81 = Curl_cstrdup(&unk_23D0);
            v12->value = (char *)v81;
            if ( !v81 || v35 )
              goto LABEL_56;
          }
          else
          {
            if ( v33 )
              v109 = v30 == 7;
            else
              v109 = 1;
            if ( !v109 || v32 )
              goto LABEL_56;
          }
          prefix = v12->prefix;
          if ( (prefix & 1) != 0 )
            goto LABEL_100;
          goto LABEL_203;
        }
        if ( v30 != 3 )
          break;
        v12->secure = 0;
        v32 = 0;
        if ( (unsigned int)curl_strequal(v34, "TRUE") )
          goto LABEL_53;
LABEL_194:
        v30 = 4;
        v33 = !v32;
      }
      if ( v30 > 3 )
      {
        switch ( v30 )
        {
          case 5:
            v80 = Curl_cstrdup(v34);
            v12->name = (char *)v80;
            if ( !v80 )
            {
              strtok_r(0uLL, "\t", &tok_buf);
              goto LABEL_200;
            }
            if ( (unsigned int)curl_strnequal("__Secure-", v80, 9LL) )
            {
              v12->prefix |= 1u;
            }
            else if ( (unsigned int)curl_strnequal("__Host-", v12->name, 7LL) )
            {
              v12->prefix |= 2u;
            }
            v33 = v35;
            v32 = 0;
            v30 = 6;
            break;
          case 6:
            v30 = 7;
            v48 = Curl_cstrdup(v34);
            v32 = v48 == 0;
            v33 = v48 != 0;
            v12->value = (char *)v48;
            break;
          case 4:
            v30 = 5;
            v49 = curlx_strtoofft(v34, 0LL, 10LL, &v12->expires);
            v32 = v49 != 0;
            v33 = v49 == 0;
            break;
          default:
            ++v30;
            v33 = (unsigned __int8)v33 & (v34 != 0LL);
            v32 = 0;
            break;
        }
      }
      else if ( v30 == 1 )
      {
        v33 = (unsigned __int8)v33 & (v34 != 0LL);
        v32 = 0;
        v30 = 2;
        v12->tailmatch = (unsigned int)curl_strequal(v34, "TRUE") != 0;
      }
      else
      {
        pathb = v34;
        v36 = strcmp("TRUE", v34);
        v37 = (__int64 (__fastcall *)(const char *))Curl_cstrdup;
        v38 = pathb;
        if ( v36 && (v39 = strcmp("FALSE", pathb), v38 = pathb, v39) )
        {
          v40 = (const char *)v37(pathb);
          v12->path = (char *)v40;
          if ( !v40 )
            goto LABEL_55;
          v41 = sanitize_cookie_path(v40);
          v32 = v41 == 0LL;
          v33 = v41 != 0LL;
          v30 = 3;
          v12->spath = v41;
        }
        else
        {
          pathc = v38;
          v42 = v37("/");
          v43 = (__int64 (__fastcall *)(const char *))Curl_cstrdup;
          v12->path = (char *)v42;
          v44 = v42;
          v45 = v43("/");
          v12->spath = (char *)v45;
          if ( !v45 )
          {
            v12->secure = 0;
            if ( !(unsigned int)curl_strequal(pathc, "TRUE") )
              goto LABEL_55;
            v32 = v35;
            goto LABEL_53;
          }
          v12->secure = 0;
          v32 = v44 == 0;
          if ( !(unsigned int)curl_strequal(pathc, "TRUE") )
            goto LABEL_194;
LABEL_53:
          if ( !securea && !c->running )
          {
LABEL_55:
            strtok_r(0uLL, "\t", &tok_buf);
            goto LABEL_56;
          }
          v33 = !v32;
          v30 = 4;
          v12->secure = 1;
        }
      }
    }
  }
  badcookie = 0;
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_260:
    Curl_cfree(v12);
    return 0LL;
  }
  while ( 1 )
  {
    v13 = *(unsigned __int8 *)lineptr;
    if ( !*lineptr )
      break;
LABEL_6:
    if ( v13 != 32 && v13 != 9 )
    {
      v15 = lineptr;
      v16 = strcspn(lineptr, ";\t\r\n=");
      if ( !v16 )
        goto LABEL_13;
      goto LABEL_20;
    }
    ++lineptr;
  }
  while ( 1 )
  {
    v16 = strcspn(lineptr, ";\t\r\n=");
    if ( !v16 )
      break;
LABEL_20:
    v15 = &lineptr[v16];
    while ( 1 )
    {
      v19 = v16 - 1;
      v20 = lineptr[v16 - 1] == 32 || lineptr[v16 - 1] == 9;
      if ( !v20 )
        break;
      --v16;
      if ( !v19 )
      {
        if ( *v15 == 61 )
          goto LABEL_24;
        v22 = 0LL;
        v20 = 0;
        v21 = 0LL;
LABEL_151:
        if ( v12->name )
        {
          if ( !v22 )
          {
            if ( v16 == 6 )
            {
              v120 = v20;
              if ( (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
              {
                if ( securea || !c->running )
                {
                  v12->secure = 1;
                  v13 = *(unsigned __int8 *)v15;
                  if ( *v15 )
                    goto LABEL_13;
                  goto LABEL_87;
                }
LABEL_56:
                freecookie(v12);
                return 0LL;
              }
              if ( v120 )
              {
                curl_strnequal("domain", lineptr, 6LL);
                v13 = *(unsigned __int8 *)v15;
                goto LABEL_86;
              }
LABEL_85:
              v13 = *(unsigned __int8 *)v15;
              goto LABEL_86;
            }
            if ( !v20 || v16 != 4 )
              goto LABEL_85;
LABEL_183:
            if ( !(unsigned int)curl_strnequal("path", lineptr, 4LL) )
              goto LABEL_85;
            Curl_cfree(v12->path);
            v78 = Curl_strndup(v21, v22);
            v12->path = (char *)v78;
            if ( !v78 )
              goto LABEL_56;
            Curl_cfree(v12->spath);
            v79 = sanitize_cookie_path(v12->path);
            v12->spath = v79;
            if ( !v79 )
              goto LABEL_56;
            v13 = *(unsigned __int8 *)v15;
LABEL_86:
            if ( v13 )
              goto LABEL_13;
            goto LABEL_87;
          }
          if ( v16 == 4 )
            goto LABEL_183;
          if ( v16 != 6 || !(unsigned int)curl_strnequal("domain", lineptr, 6LL) )
            goto LABEL_85;
          if ( *v21 == 46 )
          {
            ++v21;
            --v22;
          }
          if ( v22 == 9 && (unsigned int)curl_strnequal(v21, "localhost", 9LL)
            || (v75 = memchr(v21, 46, v22)) != 0LL && v22 - (v75 - v21) > 1 )
          {
            if ( !domain )
            {
              is_ipnum = (unsigned __int8)Curl_host_is_ipnum(v21);
              Curl_cfree(v12->domain);
              v83 = Curl_strndup(v21, v22);
              v12->domain = (char *)v83;
              if ( !v83 )
                goto LABEL_56;
              if ( is_ipnum )
                goto LABEL_85;
LABEL_177:
              v12->tailmatch = 1;
              v13 = *(unsigned __int8 *)v15;
              goto LABEL_86;
            }
            if ( !(unsigned __int8)Curl_host_is_ipnum(domain) )
              goto LABEL_175;
LABEL_168:
            if ( !strncmp(v21, domain, v22) && strlen(domain) == v22 )
            {
              Curl_cfree(v12->domain);
              v76 = Curl_strndup(v21, v22);
              v12->domain = (char *)v76;
              if ( !v76 )
                goto LABEL_56;
              v13 = *(unsigned __int8 *)v15;
              goto LABEL_86;
            }
          }
          else
          {
            domain = ":";
            if ( (unsigned __int8)Curl_host_is_ipnum(":") )
              goto LABEL_168;
LABEL_175:
            if ( cookie_tailmatch(v21, v22, domain) )
            {
              Curl_cfree(v12->domain);
              v77 = Curl_strndup(v21, v22);
              v12->domain = (char *)v77;
              if ( !v77 )
                goto LABEL_56;
              goto LABEL_177;
            }
          }
          if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
          {
            badcookie = v10;
            Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v21);
            v13 = *(unsigned __int8 *)v15;
            if ( *v15 )
              goto LABEL_13;
          }
          else
          {
            v13 = *(unsigned __int8 *)v15;
            badcookie = v10;
            if ( *v15 )
              goto LABEL_13;
          }
          goto LABEL_87;
        }
LABEL_139:
        if ( !v20 )
          goto LABEL_56;
        Curl_cfree(0LL);
        v12->name = (char *)Curl_strndup(lineptr, v16);
        Curl_cfree(v12->value);
        v72 = (const char *)Curl_strndup(v21, v22);
        v12->value = (char *)v72;
        name = v12->name;
        if ( !name || v72 == 0LL )
          goto LABEL_56;
        if ( v72[strcspn(v72, badoctets_0)] || name[strcspn(name, badoctets_0)] )
        {
          if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
            Curl_infof(data, "invalid octets in name/value, cookie dropped");
          goto LABEL_56;
        }
        goto LABEL_85;
      }
    }
    if ( *v15 == 61 )
    {
LABEL_24:
      v21 = v15 + 1;
      v22 = strcspn(v15 + 1, ";\r\n");
      v15 += v22 + 1;
      if ( v22 )
      {
        while ( 1 )
        {
          v23 = v22 - 1;
          v24 = (unsigned __int8)v21[v22 - 1];
          if ( v24 != 32 && v24 != 9 )
            break;
          --v22;
          if ( !v23 )
            goto LABEL_31;
        }
        while ( 1 )
        {
          v50 = *(unsigned __int8 *)v21;
          if ( v50 != 32 && v50 != 9 )
            break;
          ++v21;
          if ( !--v22 )
            goto LABEL_71;
        }
        if ( memchr(v21, 9, v22) )
        {
          freecookie(v12);
          if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
            Curl_infof(data, "cookie contains TAB, dropping");
          return 0LL;
        }
LABEL_71:
        v20 = v10;
        v26 = v22 > 0xFFE;
      }
      else
      {
LABEL_31:
        v20 = v10;
        v26 = 0;
      }
    }
    else
    {
      v26 = 0;
      v21 = 0LL;
      v22 = 0LL;
    }
    v52 = v16 <= 0xFFE && !v26;
    if ( !v52 || v22 + v16 > 0x1000 )
    {
      freecookie(v12);
      if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v16, v22);
      return 0LL;
    }
    if ( v16 <= 6 )
      goto LABEL_151;
    if ( v13 != 95 || lineptr[1] != 95 )
    {
LABEL_80:
      if ( !v12->name )
        goto LABEL_139;
      goto LABEL_81;
    }
    v119 = v20;
    v70 = curl_strnequal("__Secure-", lineptr, 9LL);
    v20 = v119;
    if ( v70 )
    {
      v71 = v12->name;
      v12->prefix |= 1u;
      if ( !v71 )
        goto LABEL_139;
    }
    else
    {
      v107 = curl_strnequal("__Host-", lineptr, 7LL);
      v20 = v119;
      if ( !v107 )
        goto LABEL_80;
      v108 = v12->name;
      v12->prefix |= 2u;
      if ( !v108 )
        goto LABEL_139;
    }
LABEL_81:
    if ( !v22 )
    {
      if ( v16 == 8 )
      {
        if ( !(unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
          goto LABEL_85;
        v12->httponly = 1;
        v13 = *(unsigned __int8 *)v15;
        if ( *v15 )
          goto LABEL_13;
        break;
      }
      if ( !v20 )
        goto LABEL_85;
    }
    if ( v16 != 7 || (unsigned int)curl_strnequal("version", lineptr, 7LL) )
      goto LABEL_85;
    if ( !(unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
    {
      if ( !(unsigned int)curl_strnequal("expires", lineptr, 7LL) )
        goto LABEL_85;
      if ( v22 > 0x7F || v12->expires != 0 )
        goto LABEL_85;
      *((_BYTE *)memcpy(date, v21, v22) + v22) = 0;
      v98 = Curl_getdate_capped();
      v99 = v98 == 0;
      if ( v98 < 0 )
        v98 = 0LL;
      if ( v99 )
        v98 = 1LL;
      v12->expires = v98;
      v13 = *(unsigned __int8 *)v15;
      goto LABEL_86;
    }
    if ( *v21 == 34 )
      v67 = v21 + 1;
    else
      v67 = v21;
    v68 = curlx_strtoofft(v67, 0LL, 10LL, &v12->expires);
    if ( v68 == 1 )
    {
      v12->expires = 0x7FFFFFFFFFFFFFFFLL;
      v13 = *(unsigned __int8 *)v15;
      if ( *v15 )
        goto LABEL_13;
      break;
    }
    if ( v68 == 2 )
      goto LABEL_267;
    if ( v68 )
      goto LABEL_85;
    expires = v12->expires;
    if ( !expires )
    {
LABEL_267:
      v12->expires = 1LL;
      v13 = *(unsigned __int8 *)v15;
      if ( *v15 )
        goto LABEL_13;
      break;
    }
    if ( expires > 0x7FFFFFFFFFFFFFFFLL - now )
    {
      v12->expires = 0x7FFFFFFFFFFFFFFFLL;
      v13 = *(unsigned __int8 *)v15;
      if ( *v15 )
        goto LABEL_13;
      break;
    }
    v12->expires = expires + now;
    v13 = *(unsigned __int8 *)v15;
    if ( !*v15 )
      break;
LABEL_13:
    while ( v13 == 32 || v13 == 9 )
    {
      v17 = *(unsigned __int8 *)++v15;
      v13 = v17;
      if ( !v17 )
        goto LABEL_87;
    }
    if ( v13 != 59 )
      break;
    v13 = *((unsigned __int8 *)v15 + 1);
    lineptr = v15 + 1;
    if ( v15[1] )
      goto LABEL_6;
  }
LABEL_87:
  if ( badcookie )
    goto LABEL_56;
  if ( !v12->domain && domain != 0LL )
  {
    v106 = Curl_cstrdup(domain);
    v12->domain = (char *)v106;
    if ( !v106 )
      goto LABEL_56;
  }
  if ( !v12->path && path != 0LL )
  {
    v100 = strchr(path, 63);
    v101 = v100 ? (char *)Curl_memrchr(path, 47LL, v100 - path) : strrchr(path, 47);
    if ( v101 )
    {
      v102 = v101 - path;
      v103 = v102 + 1;
      v104 = (char *)Curl_cmalloc(v102 + 2);
      v12->path = v104;
      if ( !v104 )
        goto LABEL_56;
      memcpy(v104, path, v103);
      v12->path[v103] = 0;
      v105 = sanitize_cookie_path(v12->path);
      v12->spath = v105;
      if ( !v105 )
        goto LABEL_56;
    }
  }
  if ( !v12->name )
    goto LABEL_56;
  ++data->req.setcookies;
  prefix = v12->prefix;
  if ( (prefix & 1) != 0 )
  {
LABEL_100:
    if ( !v12->secure )
      goto LABEL_56;
    if ( (prefix & 2) != 0 )
    {
LABEL_102:
      v56 = v12->path;
      if ( !v56 || *v56 != 47 || v56[1] || v12->tailmatch )
        goto LABEL_56;
    }
    goto LABEL_106;
  }
LABEL_203:
  if ( (prefix & 2) != 0 )
  {
    if ( !v12->secure )
      goto LABEL_56;
    goto LABEL_102;
  }
LABEL_106:
  if ( !c->running && c->newsession && !v12->expires )
    goto LABEL_56;
  lastct = c->lastct;
  v12->livecookie = c->running;
  c->lastct = ++lastct;
  v12->creationtime = lastct;
  if ( !noexpirea )
    remove_expired(c);
  v58 = cookiehash(v12->domain);
  v59 = c->cookies[v58];
  if ( !v59 )
  {
    v46 = v12;
    if ( c->running && (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
    {
LABEL_249:
      v95 = "Added";
      livecookie = 0;
      goto LABEL_250;
    }
    goto LABEL_266;
  }
  livecookie = 0;
  v46 = 0LL;
  v61 = 0LL;
  while ( 2 )
  {
    if ( (unsigned int)curl_strequal(v59->name, v12->name) )
    {
      v62 = v59->domain;
      v63 = v12->domain;
      if ( v62 )
      {
        if ( v63 && (unsigned int)curl_strequal(v62, v63) )
        {
LABEL_117:
          spath = v59->spath;
          if ( spath )
          {
            v65 = v12->spath;
            if ( v65 )
            {
              if ( v59->secure && !v12->secure && !securea )
              {
                v84 = strchr(spath + 1, 47);
                v85 = v84 ? v84 - spath : strlen(spath);
                if ( (unsigned int)curl_strnequal(spath, v65, v85) )
                {
                  if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
                    Curl_infof(
                      data,
                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                      v12->name,
                      v12->domain);
                  goto LABEL_56;
                }
              }
            }
          }
        }
      }
      else if ( !v63 )
      {
        goto LABEL_117;
      }
    }
    if ( v61 || !(unsigned int)curl_strequal(v59->name, v12->name) )
    {
LABEL_122:
      next = v59->next;
      if ( !v59->next )
        break;
      goto LABEL_123;
    }
    v86 = v59->domain;
    v87 = v12->domain;
    if ( v86 )
    {
      if ( v87 && (unsigned int)curl_strequal(v86, v87) && v59->tailmatch == v12->tailmatch || livecookie )
      {
LABEL_226:
        v88 = v59->spath;
        v89 = v12->spath;
        if ( !v88 )
          goto LABEL_230;
        if ( v89 && (unsigned int)curl_strequal(v88, v89) )
        {
          v89 = v12->spath;
          v88 = v59->spath;
LABEL_230:
          if ( (v88 == 0LL) == (v89 == 0LL) )
          {
            livecookie = v12->livecookie;
            if ( v12->livecookie )
            {
              v46 = v59;
              v61 = v12;
            }
            else
            {
              if ( v59->livecookie )
                goto LABEL_56;
              v46 = v59;
              v61 = v12;
              livecookie = 1;
            }
            goto LABEL_122;
          }
        }
      }
    }
    else if ( !v87 || livecookie )
    {
      goto LABEL_226;
    }
    next = v59->next;
    livecookie = 0;
    if ( v59->next )
    {
LABEL_123:
      v59 = next;
      continue;
    }
    break;
  }
  if ( v61 )
  {
    v90 = v46->name;
    v91 = (void (__fastcall *)(char *))Curl_cfree;
    v61->next = v46->next;
    v61->creationtime = v46->creationtime;
    v91(v90);
    Curl_cfree(v46->value);
    Curl_cfree(v46->domain);
    Curl_cfree(v46->path);
    Curl_cfree(v46->spath);
    v92 = *(_OWORD *)&v61->value;
    v93 = (void (__fastcall *)(Cookie *))Curl_cfree;
    *(_OWORD *)&v46->next = *(_OWORD *)&v61->next;
    *(_OWORD *)&v46->value = v92;
    v94 = *(_OWORD *)&v61->expires;
    *(_OWORD *)&v46->spath = *(_OWORD *)&v61->spath;
    *(_OWORD *)&v46->expires = v94;
    *(_QWORD *)&v46->prefix = *(_QWORD *)&v61->prefix;
    v93(v61);
  }
  else
  {
    v46 = v12;
  }
  if ( !c->running || (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) == 0 )
  {
    if ( !livecookie )
      goto LABEL_252;
    goto LABEL_244;
  }
  if ( !livecookie )
    goto LABEL_249;
  v95 = "Replaced";
LABEL_250:
  Curl_infof(
    data,
    "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
    v95,
    v46->name,
    v46->value,
    v46->domain,
    v46->path,
    v46->expires);
  if ( livecookie )
  {
LABEL_244:
    v96 = v46->expires;
    if ( !v96 )
      return v46;
    goto LABEL_245;
  }
  if ( v59 )
  {
LABEL_252:
    v59->next = v46;
    goto LABEL_253;
  }
LABEL_266:
  c->cookies[v58] = v46;
LABEL_253:
  ++c->numcookies;
  v96 = v46->expires;
  if ( v96 )
  {
LABEL_245:
    if ( v96 < c->next_expiration )
      c->next_expiration = v96;
  }
  return v46;
}
