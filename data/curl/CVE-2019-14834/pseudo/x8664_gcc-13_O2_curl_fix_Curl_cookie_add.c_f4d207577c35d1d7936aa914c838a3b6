Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  Cookie *v10; // rbx
  char v11; // bp
  const char *v12; // rsi
  __int64 v13; // rdx
  size_t v14; // r15
  _BYTE *v15; // r13
  size_t v16; // rax
  size_t v17; // r12
  char v18; // al
  char v19; // cl
  _BYTE *v20; // rax
  __int64 v21; // rax
  char *v22; // rax
  char *v23; // rax
  char *v24; // rdi
  int v25; // r14d
  char *v26; // rax
  curl_off_t *p_expires; // rdx
  char *v28; // r8
  __int64 v29; // rax
  __int64 v30; // r14
  char v31; // r13
  void *v32; // rsi
  int v33; // eax
  const char *v34; // r8
  __int64 (__fastcall *v35)(const char *); // r15
  int v36; // eax
  const char *v37; // rax
  char *v38; // rax
  char *v39; // r15
  bool v40; // r15
  __int64 v41; // rax
  __int64 v42; // r15
  __int64 v43; // rdx
  __int64 v44; // rax
  int v45; // r14d
  __int64 v46; // rax
  __int64 v47; // rax
  __int64 v48; // r14
  bool v49; // r15
  unsigned __int8 prefix; // al
  Cookie *v51; // r14
  __int64 v53; // rax
  int v54; // eax
  __int64 v55; // rax
  char *value; // rdi
  const char *v57; // rax
  const char *name; // r12
  __int64 v59; // rax
  char *v60; // rax
  int v61; // eax
  curl_off_t expires; // rax
  __int64 v63; // rax
  char *v64; // rax
  bool running; // al
  __int64 v66; // rdx
  size_t v67; // r12
  Cookie *v68; // r13
  char livecookie; // bp
  __m128i *v70; // r15
  Cookie *next; // rax
  char *v72; // rdi
  char *v73; // rsi
  char *spath; // rcx
  char *v75; // rdi
  char *v76; // rsi
  char *v77; // rdi
  char *v78; // rsi
  char *v79; // rdi
  const char *v80; // rdx
  const char *v81; // rax
  const char *v82; // r9
  const char *v83; // r8
  const char *v84; // rcx
  curl_off_t v85; // rax
  char is_ipnum; // bp
  __int64 v87; // rax
  char *v88; // rax
  const char *v89; // rcx
  void *v90; // r8
  size_t v91; // rdx
  const char *v92; // rdi
  size_t v93; // rax
  int v94; // eax
  __int64 v95; // rax
  char *v96; // rax
  char *v97; // rbp
  signed __int64 v98; // rbp
  char *v99; // rax
  char *v100; // rax
  char *v101; // rdi
  __int64 v102; // rax
  __int64 v103; // rax
  bool v104; // zf
  __int64 v105; // rax
  const char *ptr; // [rsp+0h] [rbp-118h]
  const char *ptra; // [rsp+0h] [rbp-118h]
  bool ptrb; // [rsp+0h] [rbp-118h]
  const char *ptrc; // [rsp+0h] [rbp-118h]
  int ptre; // [rsp+0h] [rbp-118h]
  const char *ptrd; // [rsp+0h] [rbp-118h]
  const char *ptrf; // [rsp+0h] [rbp-118h]
  char *s; // [rsp+8h] [rbp-110h]
  char sa; // [rsp+8h] [rbp-110h]
  char sb; // [rsp+8h] [rbp-110h]
  char *sc; // [rsp+8h] [rbp-110h]
  char *sd; // [rsp+8h] [rbp-110h]
  time_t now; // [rsp+30h] [rbp-E8h]
  char httpheadera; // [rsp+3Dh] [rbp-DBh]
  bool badcookie; // [rsp+3Fh] [rbp-D9h]
  char *tok_buf; // [rsp+48h] [rbp-D0h] BYREF
  char date[128]; // [rsp+50h] [rbp-C8h] BYREF
  unsigned __int64 v127; // [rsp+D8h] [rbp-40h]

  httpheadera = httpheader;
  v127 = __readfsqword(0x28u);
  now = time(0LL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  v10 = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !v10 )
    return 0LL;
  if ( httpheader )
  {
    badcookie = 0;
    if ( strlen(lineptr) <= 0x1388 )
    {
      v11 = *lineptr;
      if ( *lineptr )
      {
        while ( 1 )
        {
          if ( v11 != 32 && v11 != 9 )
          {
            v12 = ";\t\r\n=";
            v14 = strcspn(lineptr, ";\t\r\n=");
            if ( v14 )
              goto LABEL_16;
LABEL_11:
            while ( v11 == 32 || v11 == 9 )
            {
              v11 = *++lineptr;
              if ( !v11 )
                goto LABEL_97;
            }
            if ( v11 != 59 )
              break;
          }
          v11 = *++lineptr;
          if ( !v11 )
            goto LABEL_15;
        }
LABEL_97:
        if ( badcookie )
          goto LABEL_106;
        if ( !v10->domain )
        {
          if ( domain )
          {
            v95 = Curl_cstrdup(domain, v12, v13);
            v10->domain = (char *)v95;
            if ( !v95 )
              goto LABEL_106;
          }
        }
        if ( !v10->path && path )
        {
          v96 = strchr(path, 63);
          v97 = v96 ? (char *)Curl_memrchr(path, 47LL, v96 - path) : strrchr(path, 47);
          if ( v97 )
          {
            v98 = v97 - path;
            v99 = (char *)Curl_cmalloc(v98 + 2);
            v10->path = v99;
            if ( !v99 )
              goto LABEL_106;
            memcpy(v99, path, v98 + 1);
            v10->path[v98 + 1] = 0;
            v100 = sanitize_cookie_path(v10->path);
            v10->spath = v100;
            if ( !v100 )
              goto LABEL_106;
          }
        }
        if ( !v10->name )
          goto LABEL_106;
        ++data->req.setcookies;
        prefix = v10->prefix;
        if ( (prefix & 1) != 0 )
          goto LABEL_154;
        goto LABEL_104;
      }
LABEL_15:
      v12 = ";\t\r\n=";
      v14 = strcspn(lineptr, ";\t\r\n=");
      if ( !v14 )
        goto LABEL_97;
LABEL_16:
      v13 = (__int64)&lineptr[v14];
      while ( 1 )
      {
        v12 = (const char *)v14--;
        if ( lineptr[v14] != 9 && lineptr[v14] != 32 )
          break;
        if ( !v14 )
        {
          if ( *(_BYTE *)v13 == 61 )
            goto LABEL_20;
          if ( v10->name )
          {
LABEL_122:
            v11 = *(_BYTE *)v13;
            lineptr = (const char *)v13;
            goto LABEL_96;
          }
LABEL_106:
          freecookie(v10);
          return 0LL;
        }
      }
      v19 = 0;
      v14 = (size_t)v12;
      if ( *(_BYTE *)v13 == 61 )
      {
LABEL_20:
        v15 = (_BYTE *)(v13 + 1);
        v12 = ";\r\n";
        s = (char *)v13;
        v16 = strcspn((const char *)(v13 + 1), ";\r\n");
        v13 = (__int64)s;
        v17 = v16;
        ptr = &v15[v16];
        if ( v16 )
        {
          while ( 1 )
          {
            while ( 1 )
            {
              v18 = s[v17];
              if ( v18 != 32 )
                break;
              if ( !--v17 )
                goto LABEL_26;
            }
            if ( v18 != 9 )
              break;
            if ( !--v17 )
              goto LABEL_26;
          }
          while ( *v15 == 32 || *v15 == 9 )
          {
            ++v15;
            if ( !--v17 )
              goto LABEL_84;
          }
          v12 = (_BYTE *)&loc_9;
          if ( memchr(v15, 9, v17) )
          {
            freecookie(v10);
            if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
              Curl_infof(data, "cookie contains TAB, dropping");
            return 0LL;
          }
LABEL_84:
          if ( v14 <= 0xFFE && v17 <= 0xFFE && v17 + v14 <= 0x1000 )
          {
            v19 = httpheadera;
            goto LABEL_88;
          }
LABEL_226:
          freecookie(v10);
          if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
            Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v14, v17);
          return 0LL;
        }
LABEL_26:
        if ( v14 <= 0xFFE )
        {
          v19 = httpheadera;
          v17 = 0LL;
          if ( v14 > 6 )
          {
LABEL_89:
            if ( v11 == 95 && lineptr[1] == 95 )
            {
              v12 = lineptr;
              sa = v19;
              v54 = curl_strnequal("__Secure-", lineptr, 9LL);
              v19 = sa;
              if ( v54 )
              {
                v10->prefix |= 1u;
                if ( !v10->name )
                  goto LABEL_126;
                goto LABEL_91;
              }
              v12 = lineptr;
              v94 = curl_strnequal("__Host-", lineptr, 7LL);
              v19 = sa;
              if ( v94 )
              {
                v10->prefix |= 2u;
                if ( !v10->name )
                  goto LABEL_126;
                goto LABEL_91;
              }
            }
            if ( v10->name )
            {
LABEL_91:
              if ( v17 )
                goto LABEL_94;
              if ( v14 == 8 )
              {
                v12 = lineptr;
                if ( (unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
                {
                  lineptr = ptr;
                  v10->httponly = 1;
                  v11 = *ptr;
                  goto LABEL_96;
                }
                goto LABEL_42;
              }
              if ( v19 )
              {
LABEL_94:
                if ( v14 != 7 )
                  goto LABEL_95;
                v12 = lineptr;
                if ( !(unsigned int)curl_strnequal("version", lineptr, 7LL) )
                {
                  if ( (unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
                  {
                    v12 = 0LL;
                    v61 = curlx_strtoofft(&v15[*v15 == 34], 0LL, 10LL, &v10->expires);
                    switch ( v61 )
                    {
                      case 1:
                        lineptr = ptr;
                        v10->expires = 0x7FFFFFFFFFFFFFFFLL;
                        v11 = *ptr;
                        goto LABEL_96;
                      case 2:
LABEL_271:
                        lineptr = ptr;
                        v10->expires = 1LL;
                        v11 = *ptr;
                        goto LABEL_96;
                      case 0:
                        expires = v10->expires;
                        if ( expires )
                        {
                          v13 = 0x7FFFFFFFFFFFFFFFLL;
                          if ( expires <= 0x7FFFFFFFFFFFFFFFLL - now )
                          {
                            v13 = now;
                            lineptr = ptr;
                            v10->expires = now + expires;
                          }
                          else
                          {
                            lineptr = ptr;
                            v10->expires = 0x7FFFFFFFFFFFFFFFLL;
                          }
                          v11 = *lineptr;
                          goto LABEL_96;
                        }
                        goto LABEL_271;
                    }
                  }
                  else
                  {
                    v12 = lineptr;
                    if ( (unsigned int)curl_strnequal("expires", lineptr, 7LL) && !v10->expires && v17 <= 0x7F )
                    {
                      v12 = v15;
                      v101 = date;
                      if ( v17 >= 8 )
                      {
                        qmemcpy(date, v15, 8 * (v17 >> 3));
                        v12 = &v15[8 * (v17 >> 3)];
                        v101 = &date[8 * (v17 >> 3)];
                      }
                      v102 = 0LL;
                      if ( (v17 & 4) != 0 )
                      {
                        *(_DWORD *)v101 = *(_DWORD *)v12;
                        v102 = 4LL;
                      }
                      if ( (v17 & 2) != 0 )
                      {
                        *(_WORD *)&v101[v102] = *(_WORD *)&v12[v102];
                        v102 += 2LL;
                      }
                      if ( (v17 & 1) != 0 )
                        v101[v102] = v12[v102];
                      date[v17] = 0;
                      v103 = Curl_getdate_capped(date, v12);
                      v13 = 0LL;
                      v104 = v103 == 0;
                      if ( v103 >= 0 )
                        v13 = v103;
                      v105 = 1LL;
                      if ( !v104 )
                        v105 = v13;
                      v10->expires = v105;
                    }
                  }
                }
              }
LABEL_42:
              lineptr = ptr;
              v11 = *ptr;
              goto LABEL_96;
            }
LABEL_126:
            if ( !v19 )
              goto LABEL_106;
            Curl_cfree(0LL);
            v55 = Curl_strndup(lineptr, v14);
            value = v10->value;
            v10->name = (char *)v55;
            Curl_cfree(value);
            v57 = (const char *)Curl_strndup(v15, v17);
            name = v10->name;
            v10->value = (char *)v57;
            if ( !name || !v57 )
              goto LABEL_106;
            if ( v57[strcspn(v57, &badoctets_0)] || (v12 = &badoctets_0, name[strcspn(name, &badoctets_0)]) )
            {
              if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
                Curl_infof(data, "invalid octets in name/value, cookie dropped");
              goto LABEL_106;
            }
            goto LABEL_42;
          }
LABEL_28:
          if ( !v10->name )
            goto LABEL_126;
          if ( v17 )
          {
            if ( v14 != 4 )
            {
              if ( v14 == 6 )
              {
                v12 = lineptr;
                if ( !(unsigned int)curl_strnequal("domain", lineptr, 6LL) )
                  goto LABEL_42;
                if ( *v15 == 46 )
                {
                  ++v15;
                  --v17;
                }
                if ( v17 == 9 && (unsigned int)curl_strnequal(v15, "localhost", 9LL)
                  || (v20 = memchr(v15, 46, v17)) != 0LL && v17 - (v20 - v15) > 1 )
                {
                  if ( !domain )
                  {
                    is_ipnum = Curl_host_is_ipnum(v15);
                    Curl_cfree(v10->domain);
                    v12 = (const char *)v17;
                    v87 = Curl_strndup(v15, v17);
                    v10->domain = (char *)v87;
                    if ( !v87 )
                      goto LABEL_106;
                    if ( is_ipnum )
                      goto LABEL_42;
                    goto LABEL_117;
                  }
                  if ( (unsigned __int8)Curl_host_is_ipnum(domain) )
                    goto LABEL_39;
                }
                else
                {
                  domain = ":";
                  if ( (unsigned __int8)Curl_host_is_ipnum(":") )
                  {
LABEL_39:
                    v12 = domain;
                    if ( !strncmp(v15, domain, v17) && strlen(domain) == v17 )
                    {
                      Curl_cfree(v10->domain);
                      v12 = (const char *)v17;
                      v21 = Curl_strndup(v15, v17);
                      v10->domain = (char *)v21;
                      if ( !v21 )
                        goto LABEL_106;
                      goto LABEL_42;
                    }
LABEL_118:
                    if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
                    {
                      v12 = "skipped cookie with bad tailmatch domain: %s";
                      Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v15);
                    }
                    lineptr = ptr;
                    v11 = *ptr;
                    badcookie = httpheadera;
                    goto LABEL_96;
                  }
                }
                v12 = (const char *)v17;
                if ( !cookie_tailmatch(v15, v17, domain) )
                  goto LABEL_118;
                Curl_cfree(v10->domain);
                v12 = (const char *)v17;
                v53 = Curl_strndup(v15, v17);
                v10->domain = (char *)v53;
                if ( !v53 )
                  goto LABEL_106;
LABEL_117:
                v10->tailmatch = 1;
                goto LABEL_42;
              }
LABEL_95:
              lineptr = ptr;
              v11 = *ptr;
LABEL_96:
              if ( v11 )
                goto LABEL_11;
              goto LABEL_97;
            }
          }
          else
          {
            v13 = (__int64)ptr;
            if ( v14 == 6 )
            {
              v12 = lineptr;
              sb = v19;
              if ( (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
              {
                if ( secure || !c->running )
                {
                  lineptr = ptr;
                  v10->secure = 1;
                  v11 = *ptr;
                  goto LABEL_96;
                }
                goto LABEL_106;
              }
              if ( sb )
              {
                v12 = lineptr;
                curl_strnequal("domain", lineptr, 6LL);
              }
              goto LABEL_42;
            }
            if ( !v19 )
              goto LABEL_122;
            if ( v14 != 4 )
              goto LABEL_95;
          }
          v12 = lineptr;
          if ( (unsigned int)curl_strnequal("path", lineptr, 4LL) )
          {
            Curl_cfree(v10->path);
            v12 = (const char *)v17;
            v59 = Curl_strndup(v15, v17);
            v10->path = (char *)v59;
            if ( !v59 )
              goto LABEL_106;
            Curl_cfree(v10->spath);
            v60 = sanitize_cookie_path(v10->path);
            v10->spath = v60;
            if ( !v60 )
              goto LABEL_106;
          }
          goto LABEL_42;
        }
      }
      else if ( (unsigned __int64)v12 <= 0xFFE )
      {
        ptr = (const char *)v13;
        v15 = 0LL;
        v17 = 0LL;
LABEL_88:
        if ( v14 > 6 )
          goto LABEL_89;
        goto LABEL_28;
      }
      v17 = 0LL;
      goto LABEL_226;
    }
LABEL_228:
    Curl_cfree(v10);
    return 0LL;
  }
  tok_buf = 0LL;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
  {
    v10->httponly = 1;
    lineptr += 10;
  }
  if ( *lineptr == 35 )
    goto LABEL_228;
  v22 = strchr(lineptr, 13);
  if ( v22 )
    *v22 = 0;
  v23 = strchr(lineptr, 10);
  if ( v23 )
    *v23 = 0;
  v24 = (char *)lineptr;
  v25 = 0;
  v26 = strtok_r(v24, "\t", &tok_buf);
  p_expires = &v10->expires;
  if ( !v26 )
    goto LABEL_106;
  v28 = v26;
  while ( 2 )
  {
    switch ( v25 )
    {
      case 0:
        v29 = Curl_cstrdup(&v28[*v28 == 46], "\t", p_expires);
        v10->domain = (char *)v29;
        v30 = v29;
        v31 = v29 != 0;
        v28 = strtok_r(0LL, "\t", &tok_buf);
        if ( v28 && v31 )
          goto LABEL_55;
        v104 = v30 == 0;
        v25 = 1;
        httpheadera = v104;
        goto LABEL_279;
      case 1:
LABEL_55:
        v10->tailmatch = (unsigned int)curl_strequal(v28, "TRUE", p_expires) != 0;
        v28 = strtok_r(0LL, "\t", &tok_buf);
        if ( v28 )
          goto LABEL_56;
        v25 = 2;
        goto LABEL_79;
      case 2:
LABEL_56:
        v32 = v28;
        ptra = v28;
        v33 = strcmp("TRUE", v28);
        v34 = ptra;
        v35 = (__int64 (__fastcall *)(const char *))Curl_cstrdup;
        if ( v33 && (v32 = (void *)ptra, v36 = strcmp("FALSE", ptra), v34 = ptra, v36) )
        {
          v37 = (const char *)v35(ptra);
          v10->path = (char *)v37;
          if ( !v37 )
            goto LABEL_210;
          v38 = sanitize_cookie_path(v37);
          v10->spath = v38;
          v39 = v38;
          ptrb = v38 != 0LL;
          v31 = v38 != 0LL;
          v28 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v28 || !ptrb )
          {
            v25 = 3;
            httpheadera = v39 == 0LL;
LABEL_279:
            if ( v25 != 7 && v31 )
              goto LABEL_106;
            goto LABEL_152;
          }
          v40 = httpheadera;
        }
        else
        {
          ptrc = v34;
          v41 = v35("/");
          v10->path = (char *)v41;
          v42 = v41;
          v44 = Curl_cstrdup("/", v32, v43);
          v28 = (char *)ptrc;
          v10->spath = (char *)v44;
          if ( !v44 )
          {
            v10->secure = 0;
            if ( !(unsigned int)curl_strequal(ptrc, "TRUE", p_expires) )
              goto LABEL_210;
            v40 = 1;
            goto LABEL_65;
          }
          v40 = v42 == 0;
        }
LABEL_64:
        v10->secure = 0;
        if ( !(unsigned int)curl_strequal(v28, "TRUE", p_expires) )
          goto LABEL_68;
LABEL_65:
        if ( !secure && !c->running )
        {
LABEL_210:
          strtok_r(0LL, "\t", &tok_buf);
          goto LABEL_106;
        }
        v10->secure = 1;
LABEL_68:
        v31 = !v40;
        v28 = strtok_r(0LL, "\t", &tok_buf);
        if ( !v28 || !v31 )
        {
          httpheadera = v40;
          v25 = 4;
          goto LABEL_279;
        }
LABEL_70:
        v45 = curlx_strtoofft(v28, 0LL, 10LL, &v10->expires);
        v31 = v45 == 0;
        v28 = strtok_r(0LL, "\t", &tok_buf);
        if ( !v28 || v45 )
        {
          v104 = v45 == 0;
          v25 = 5;
          httpheadera = !v104;
          goto LABEL_279;
        }
LABEL_72:
        v46 = Curl_cstrdup(v28, "\t", p_expires);
        v10->name = (char *)v46;
        if ( v46 )
        {
          if ( (unsigned int)curl_strnequal("__Secure-", v46, 9LL) )
          {
            v10->prefix |= 1u;
          }
          else if ( (unsigned int)curl_strnequal("__Host-", v10->name, 7LL) )
          {
            v10->prefix |= 2u;
          }
          v28 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v28 )
            goto LABEL_151;
LABEL_76:
          v47 = Curl_cstrdup(v28, "\t", p_expires);
          v10->value = (char *)v47;
          v48 = v47;
          v49 = v47 != 0;
          v31 = (v47 != 0) & (strtok_r(0LL, "\t", &tok_buf) != 0LL);
          if ( !v31 )
          {
            v104 = v48 == 0;
            v31 = v49;
            v25 = 7;
            httpheadera = v104;
            goto LABEL_279;
          }
          v25 = 8;
          if ( !strtok_r(0LL, "\t", &tok_buf) )
            goto LABEL_279;
LABEL_78:
          ++v25;
          v28 = strtok_r(0LL, "\t", &tok_buf);
          if ( !v28 )
          {
LABEL_79:
            v31 = 1;
            goto LABEL_279;
          }
          continue;
        }
        strtok_r(0LL, "\t", &tok_buf);
        httpheadera = 1;
LABEL_151:
        v63 = Curl_cstrdup(&LC0, "\t", p_expires);
        v10->value = (char *)v63;
        if ( !v63 )
          goto LABEL_106;
LABEL_152:
        if ( httpheadera )
          goto LABEL_106;
        prefix = v10->prefix;
        if ( (prefix & 1) != 0 )
        {
LABEL_154:
          if ( !v10->secure )
            goto LABEL_106;
          if ( (prefix & 2) != 0 )
            goto LABEL_156;
          goto LABEL_160;
        }
LABEL_104:
        if ( (prefix & 2) != 0 )
        {
          if ( !v10->secure )
            goto LABEL_106;
LABEL_156:
          v64 = v10->path;
          if ( !v64 || *v64 != 47 || v64[1] || v10->tailmatch )
            goto LABEL_106;
        }
LABEL_160:
        running = c->running;
        if ( !running && c->newsession && !v10->expires )
          goto LABEL_106;
        v10->livecookie = running;
        ptre = c->lastct;
        c->lastct = ptre + 1;
        v10->creationtime = ptre + 1;
        if ( !noexpire )
          remove_expired(c);
        v67 = cookiehash(v10->domain);
        v68 = c->cookies[v67];
        if ( !v68 )
        {
          if ( c->running && (*(&data->set.connect_only + 4) & 0x20) != 0 )
          {
            v81 = v10->path;
            v82 = v10->domain;
            v51 = v10;
            livecookie = 0;
            v83 = v10->value;
            v84 = v10->name;
            v80 = "Added";
            goto LABEL_200;
          }
          v51 = v10;
          goto LABEL_239;
        }
        livecookie = 0;
        v51 = 0LL;
        v70 = 0LL;
        while ( 2 )
        {
          if ( (unsigned int)curl_strequal(v68->name, v10->name, v66) )
          {
            v72 = v68->domain;
            v73 = v10->domain;
            if ( v72 )
            {
              if ( v73 && (unsigned int)curl_strequal(v72, v73, v66) )
              {
LABEL_173:
                spath = v68->spath;
                if ( spath )
                {
                  ptrd = v10->spath;
                  if ( ptrd )
                  {
                    if ( v68->secure && !v10->secure && !secure )
                    {
                      sc = v68->spath;
                      v88 = strchr(spath + 1, 47);
                      v89 = sc;
                      v90 = (void *)ptrd;
                      if ( v88 )
                      {
                        v91 = v88 - sc;
                      }
                      else
                      {
                        v92 = sc;
                        sd = (char *)ptrd;
                        ptrf = v89;
                        v93 = strlen(v92);
                        v90 = sd;
                        v89 = ptrf;
                        v91 = v93;
                      }
                      if ( (unsigned int)curl_strnequal(v89, v90, v91) )
                      {
                        if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
                          Curl_infof(
                            data,
                            "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                            v10->name,
                            v10->domain);
                        goto LABEL_106;
                      }
                    }
                  }
                }
              }
            }
            else if ( !v73 )
            {
              goto LABEL_173;
            }
          }
          if ( v70 || !(unsigned int)curl_strequal(v68->name, v10->name, v66) )
            goto LABEL_167;
          v75 = v68->domain;
          v76 = v10->domain;
          if ( v75 )
          {
            if ( !v76 || !(unsigned int)curl_strequal(v75, v76, v66) || v68->tailmatch != v10->tailmatch )
              goto LABEL_184;
          }
          else if ( v76 )
          {
LABEL_184:
            if ( !livecookie )
              goto LABEL_193;
          }
          v77 = v68->spath;
          v78 = v10->spath;
          if ( !v77 )
          {
LABEL_189:
            LOBYTE(v66) = v77 == 0LL;
            if ( (v77 == 0LL) != (v10->spath == 0LL) )
              goto LABEL_193;
            livecookie = v10->livecookie;
            if ( livecookie )
            {
              v51 = v68;
              v70 = (__m128i *)v10;
            }
            else
            {
              if ( v68->livecookie )
                goto LABEL_106;
              v51 = v68;
              v70 = (__m128i *)v10;
              livecookie = 1;
            }
LABEL_167:
            next = v68->next;
            if ( !v68->next )
              goto LABEL_194;
LABEL_168:
            v68 = next;
            continue;
          }
          break;
        }
        if ( v78 && (unsigned int)curl_strequal(v77, v78, v66) )
        {
          v77 = v68->spath;
          goto LABEL_189;
        }
LABEL_193:
        next = v68->next;
        livecookie = 0;
        if ( v68->next )
          goto LABEL_168;
LABEL_194:
        if ( v70 )
        {
          v79 = v51->name;
          v70->m128i_i64[0] = (__int64)v51->next;
          v70[3].m128i_i32[3] = v51->creationtime;
          Curl_cfree(v79);
          Curl_cfree(v51->value);
          Curl_cfree(v51->domain);
          Curl_cfree(v51->path);
          Curl_cfree(v51->spath);
          *(__m128i *)&v51->next = _mm_loadu_si128(v70);
          *(__m128i *)&v51->value = _mm_loadu_si128(v70 + 1);
          *(__m128i *)&v51->spath = _mm_loadu_si128(v70 + 2);
          *(__m128i *)&v51->expires = _mm_loadu_si128(v70 + 3);
          *(_QWORD *)&v51->prefix = v70[4].m128i_i64[0];
          Curl_cfree(v70);
        }
        else
        {
          v51 = v10;
        }
        if ( !c->running || (*(&data->set.connect_only + 4) & 0x20) == 0 )
        {
          if ( livecookie )
            goto LABEL_201;
          goto LABEL_214;
        }
        v80 = "Added";
        v81 = v51->path;
        v82 = v51->domain;
        v83 = v51->value;
        v84 = v51->name;
        if ( livecookie )
          v80 = "Replaced";
LABEL_200:
        Curl_infof(
          data,
          "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
          v80,
          v84,
          v83,
          v82,
          v81,
          v51->expires);
        if ( !livecookie )
        {
          if ( !v68 )
          {
LABEL_239:
            c->cookies[v67] = v51;
            goto LABEL_215;
          }
LABEL_214:
          v68->next = v51;
LABEL_215:
          ++c->numcookies;
        }
LABEL_201:
        v85 = v51->expires;
        if ( v85 && v85 < c->next_expiration )
          c->next_expiration = v85;
        return v51;
      case 3:
        v40 = httpheadera;
        goto LABEL_64;
      case 4:
        goto LABEL_70;
      case 5:
        goto LABEL_72;
      case 6:
        goto LABEL_76;
      default:
        goto LABEL_78;
    }
  }
}
