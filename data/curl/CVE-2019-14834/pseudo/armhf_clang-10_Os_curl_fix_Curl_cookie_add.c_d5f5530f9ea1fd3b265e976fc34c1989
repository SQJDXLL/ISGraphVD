Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  int v12; // r8
  time_t v13; // r4
  Cookie *v14; // r0
  char *j; // r9
  Cookie *v16; // r7
  char *i; // r8
  int v18; // r6
  bool v19; // zf
  size_t v20; // r0
  size_t v21; // r5
  char *v22; // r2
  size_t v23; // r0
  int v24; // r1
  bool v25; // zf
  int v26; // r8
  int v27; // r1
  bool v28; // zf
  int v29; // r0
  unsigned int v30; // r4
  const char *v31; // r7
  size_t v32; // r0
  const char *v33; // r10
  int v34; // r1
  bool v35; // zf
  size_t v36; // r7
  int v37; // r5
  bool v38; // cc
  Cookie *v39; // r1
  unsigned __int8 v40; // r0
  char *v41; // r1
  Cookie *v42; // r5
  int v43; // r2
  int v44; // r3
  bool v45; // zf
  Cookie *v46; // r4
  int v47; // r0
  Cookie *v48; // r4
  char *v49; // r0
  const char *v50; // r5
  char *v51; // r0
  _DWORD *p_next; // r4
  void (__fastcall *v53)(char *); // r1
  int v54; // r0
  bool v55; // zf
  curl_off_t *v56; // r4
  const char *v57; // r0
  int v58; // r0
  int v59; // r0
  bool v60; // zf
  const char *v61; // r4
  _BYTE *v62; // r0
  const char *v63; // r6
  bool v64; // zf
  const char *v65; // r0
  int is_ipnum; // r0
  int v67; // r5
  int v68; // r0
  int v69; // r0
  Cookie *v70; // r6
  int v71; // r0
  char *v72; // r0
  char *v73; // r0
  char *v74; // r0
  const char *v75; // r10
  int v76; // r6
  int v77; // r8
  int (__fastcall **v78)(const char *); // r9
  const char *v79; // r0
  int v80; // r0
  bool v81; // cf
  int v82; // r1
  const char *v83; // r0
  int v84; // r0
  int v85; // r0
  char *v86; // r7
  int (__fastcall *v87)(const char *); // r1
  char *v88; // r0
  _BOOL4 v89; // r1
  char *v90; // r0
  int v91; // r0
  bool v92; // zf
  Cookie *v93; // r0
  Curl_easy *v94; // r4
  CookieInfo *v95; // r6
  int v96; // r0
  Cookie *next; // r0
  Cookie *v98; // r8
  Cookie *v99; // r4
  char v100; // r10
  Cookie *v101; // r5
  char *v102; // r1
  char *v103; // r0
  const char *spath; // r7
  char *v105; // r9
  bool v106; // zf
  bool v107; // zf
  char *v108; // r0
  size_t v109; // r2
  char *v110; // r0
  char *v111; // r1
  char v112; // r0
  char v113; // r0
  char *v114; // r0
  char *v115; // r1
  const char *v116; // r0
  bool v117; // zf
  int creationtime; // r2
  char *name; // r0
  void (__fastcall **v120)(char *); // r9
  Cookie *v121; // r1
  char *v122; // r2
  char *value; // r3
  char *v124; // r4
  char *v125; // r6
  char *v126; // r7
  char *expires_high; // r2
  char *v128; // r3
  char *v129; // r4
  char *v130; // r6
  char *v131; // r7
  bool v132; // zf
  __int64 expires; // r0
  curl_off_t *p_next_expiration; // r6
  unsigned int next_expiration; // t1
  char *v137; // r0
  char *v138; // r0
  char *v139; // r0
  const char *v140; // r2
  int v141; // r4
  char *v142; // r0
  size_t v143; // r4
  Cookie *v144; // r5
  char *v145; // r0
  Cookie *v146; // r4
  bool v147; // zf
  curl_off_t v148; // [sp+1Ch] [bp-CCh]
  curl_off_t *v149; // [sp+24h] [bp-C4h]
  char *v150; // [sp+28h] [bp-C0h]
  char v151; // [sp+2Ch] [bp-BCh]
  int v153; // [sp+34h] [bp-B4h]
  time_t v154; // [sp+38h] [bp-B0h]
  size_t v155; // [sp+3Ch] [bp-ACh]
  curl_off_t *p_expires; // [sp+3Ch] [bp-ACh]
  size_t v157; // [sp+3Ch] [bp-ACh]
  Curl_easy *v158; // [sp+40h] [bp-A8h]
  CookieInfo *cookies; // [sp+44h] [bp-A4h]
  Cookie *v160; // [sp+48h] [bp-A0h]
  char *dest[39]; // [sp+4Ch] [bp-9Ch] BYREF

  v12 = 0;
  v13 = time(0u);
  if ( data->req.setcookies > 0x31u )
    return (Cookie *)v12;
  v14 = (Cookie *)((int (__fastcall *)(int, int))*Curl_ccalloc)(1, 48);
  if ( !v14 )
    return (Cookie *)v12;
  j = (char *)lineptr;
  v153 = noexpire;
  v16 = v14;
  v154 = v13;
  cookies = c;
  v158 = data;
  v160 = v14;
  if ( !httpheader )
  {
    dest[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      j = (char *)(lineptr + 0xA);
      v16->httponly = 1;
    }
    if ( *j != 35 )
    {
      v72 = strchr(j, 13);
      if ( v72 )
        *v72 = 0;
      v73 = strchr(j, 10);
      if ( v73 )
        *v73 = 0;
      v74 = strtok_r(j, "\t", dest);
      if ( v74 )
      {
        v75 = v74;
        v76 = 0;
        v77 = 0;
        p_expires = &v16->expires;
        v78 = (int (__fastcall **)(const char *))Curl_cstrdup;
        while ( 2 )
        {
          switch ( v76 )
          {
            case 0:
              v79 = v75 + 1;
              if ( *v75 != 46 )
                v79 = v75;
              v80 = (*v78)(v79);
              v81 = v80 == 0;
              v82 = -v80;
              v16->domain = (char *)v80;
              v76 = 0;
              goto LABEL_161;
            case 1:
              v76 = 1;
              v16->tailmatch = curl_strequal(v75, "TRUE") != 0;
              goto LABEL_171;
            case 2:
              if ( !strcmp("TRUE", v75) || !strcmp("FALSE", v75) )
              {
                v86 = (char *)(*v78)("/");
                v87 = *v78;
                v160->path = v86;
                v88 = (char *)v87("/");
                v160->spath = v88;
                v89 = v86 == 0;
                v16 = v160;
                v77 |= v89 || v88 == 0;
LABEL_164:
                v16->secure = 0;
                v76 = 3;
                if ( curl_strequal(v75, "TRUE") )
                {
                  if ( secure || cookies->running )
                  {
                    v16->secure = 1;
                    goto LABEL_171;
                  }
LABEL_168:
                  v77 = 1;
                }
              }
              else
              {
                v83 = (const char *)(*v78)(v75);
                v76 = 2;
                v16->path = (char *)v83;
                if ( !v83 )
                  goto LABEL_168;
                v80 = (int)sanitize_cookie_path(v83);
                v81 = v80 == 0;
                v82 = -v80;
                v16->spath = (char *)v80;
LABEL_161:
                v84 = v82 + v81 + v80;
LABEL_162:
                v77 |= v84;
              }
LABEL_171:
              v90 = strtok_r(0u, "\t", dest);
              ++v76;
              if ( v90 )
              {
                v75 = v90;
                if ( (v77 & 1) == 0 )
                  continue;
              }
              if ( v76 == 6 )
              {
                v91 = (*v78)((const char *)&L_str_22);
                v76 = 7;
                v16->value = (char *)v91;
                LOBYTE(v77) = v77 | (v91 == 0);
                if ( !v91 )
                  v76 = 6;
              }
              v92 = (v77 & 1) == 0;
              if ( (v77 & 1) == 0 )
                v92 = v76 == 7;
              if ( v92 )
              {
                v94 = data;
                goto LABEL_183;
              }
              break;
            case 3:
              goto LABEL_164;
            case 4:
              v76 = 4;
              v84 = curlx_strtoofft(v75, 0, 10, p_expires) != 0;
              goto LABEL_162;
            case 5:
              v85 = (*v78)(v75);
              v76 = 5;
              v16->name = (char *)v85;
              if ( !v85 )
                goto LABEL_168;
              if ( curl_strnequal("__Secure-", v85, 9) )
              {
                v16->prefix |= 1u;
              }
              else if ( curl_strnequal("__Host-", v16->name, 7) )
              {
                v16->prefix |= 2u;
              }
              goto LABEL_171;
            case 6:
              v80 = (*v78)(v75);
              v81 = v80 == 0;
              v82 = -v80;
              v16->value = (char *)v80;
              v76 = 6;
              goto LABEL_161;
            default:
              goto LABEL_171;
          }
          break;
        }
      }
LABEL_179:
      v93 = v16;
      goto LABEL_265;
    }
LABEL_140:
    ((void (__fastcall *)(Cookie *))*Curl_cfree)(v16);
    return 0;
  }
  if ( strlen(lineptr) > 0x1388 )
    goto LABEL_140;
  HIDWORD(v148) = 0x7FFFFFFF - (v13 >> 0x1F);
  v150 = (char *)&data->set + 1334;
  LODWORD(v148) = ~v13;
  v149 = &v16->expires;
  v151 = 0;
  while ( 1 )
  {
    for ( i = j + 1; ; ++i )
    {
      v18 = (unsigned __int8)*j;
      v19 = v18 == 32;
      if ( v18 != 32 )
        v19 = v18 == 9;
      if ( !v19 )
        break;
      ++j;
    }
    v20 = strcspn(j, ";\t\r\n=");
    if ( !v20 )
    {
      v26 = (int)j;
      goto LABEL_21;
    }
    v21 = v20;
    v22 = &j[v20];
    v23 = v20 - 1;
    do
    {
      v24 = (unsigned __int8)j[v23];
      v25 = v24 == 32;
      if ( v24 != 32 )
        v25 = v24 == 9;
      if ( !v25 )
      {
        v30 = v23 + 1;
        goto LABEL_30;
      }
      --v23;
    }
    while ( v23 != -1 );
    v30 = 0;
LABEL_30:
    if ( *v22 == 61 )
    {
      v31 = &j[v21 + 1];
      v32 = strcspn(v31, ";\r\n");
      v155 = v21 + v32;
      if ( v32 )
      {
        v33 = &i[v21 + v32];
        while ( 1 )
        {
          v34 = *((unsigned __int8 *)v33 - 1);
          v35 = v34 == 32;
          if ( v34 != 32 )
            v35 = v34 == 9;
          if ( !v35 )
            break;
          --v32;
          --v33;
          if ( !v32 )
            goto LABEL_38;
        }
        v41 = &i[v21];
        v42 = v160;
        v43 = 0;
        while ( 1 )
        {
          v44 = (unsigned __int8)v41[v43];
          v45 = v44 == 32;
          if ( v44 != 32 )
            v45 = v44 == 9;
          if ( !v45 )
            break;
          if ( v32 == ++v43 )
            goto LABEL_39;
        }
        v36 = v32 - v43;
        v33 = &v41[v43];
      }
      else
      {
LABEL_38:
        v42 = v160;
        v33 = v31;
LABEL_39:
        v36 = 0;
      }
      if ( memchr(v33, 9, v36) )
      {
        freecookie(v42);
        v12 = 0;
        if ( (v150[3] & 0x20) != 0 )
          Curl_infof(v158, "cookie contains TAB, dropping");
        return (Cookie *)v12;
      }
      v37 = 1;
      v26 = (int)&j[v155 + 1];
    }
    else
    {
      v26 = (int)v22;
      v36 = 0;
      v37 = 0;
      v33 = 0;
    }
    v38 = v30 > 0xFFE;
    if ( v30 <= 0xFFE )
      v38 = v36 > 0xFFE;
    if ( v38 || v36 + v30 > 0x1000 )
    {
      freecookie(v160);
      v12 = 0;
      if ( (v150[3] & 0x20) != 0 )
        Curl_infof(v158, "oversized cookie dropped, name/val %zu + %zu bytes", v30, v36);
      return (Cookie *)v12;
    }
    if ( v18 == 95 && v30 >= 7 && j[1] == 95 )
    {
      if ( curl_strnequal("__Secure-", j, 9) )
      {
        v39 = v160;
        v40 = v160->prefix | 1;
      }
      else
      {
        if ( !curl_strnequal("__Host-", j, 7) )
          goto LABEL_61;
        v39 = v160;
        v40 = v160->prefix | 2;
      }
      v39->prefix = v40;
    }
LABEL_61:
    if ( !v160->name )
      break;
    if ( !v36 )
    {
      if ( v30 == 8 )
      {
        if ( curl_strnequal("httponly", j, 8) )
        {
          v160->httponly = 1;
          goto LABEL_21;
        }
      }
      else if ( v30 == 6 && curl_strnequal("secure", j, 6) )
      {
        if ( !secure && cookies->running )
          goto LABEL_264;
        v160->secure = 1;
        goto LABEL_21;
      }
      if ( !v37 )
        goto LABEL_21;
    }
    if ( v30 == 7 )
    {
      if ( curl_strnequal("version", j, 7) )
        goto LABEL_21;
      if ( curl_strnequal("max-age", j, 7) )
      {
        v56 = v149;
        v57 = v33 + 1;
        if ( *v33 != 34 )
          v57 = v33;
        v58 = curlx_strtoofft(v57, 0, 10, v149);
        if ( v58 )
        {
          if ( v58 != 2 )
          {
            if ( v58 != 1 )
              goto LABEL_21;
            goto LABEL_131;
          }
LABEL_133:
          *(_DWORD *)v149 = 1;
          *((_DWORD *)v149 + 1) = 0;
          goto LABEL_21;
        }
        if ( !*v149 )
          goto LABEL_133;
        if ( v148 >= *v149 )
        {
          *v149 += v154;
          goto LABEL_21;
        }
LABEL_131:
        *(_DWORD *)v149 = -1;
        v69 = 0x7FFFFFFF;
      }
      else
      {
        if ( !curl_strnequal("expires", j, 7) )
          goto LABEL_21;
        v56 = v149;
        if ( v36 > 0x7F || *v149 )
          goto LABEL_21;
        memcpy(dest, v33, v36);
        *((_BYTE *)dest + v36) = 0;
        v68 = Curl_getdate_capped(dest);
        *v149 = v68;
        if ( !v68 )
        {
          *(_DWORD *)v149 = 1;
          *((_DWORD *)v149 + 1) = 0;
          goto LABEL_21;
        }
        if ( v68 > -1 )
          goto LABEL_21;
        v69 = 0;
        *(_DWORD *)v149 = 0;
      }
      *((_DWORD *)v56 + 1) = v69;
      goto LABEL_21;
    }
    if ( v30 != 6 )
    {
      if ( v30 == 4 )
      {
        if ( curl_strnequal("path", j, 4) )
        {
          v46 = v160;
          ((void (__fastcall *)(char *))*Curl_cfree)(v160->path);
          v47 = Curl_strndup(v33, v36);
          v46->path = (char *)v47;
          if ( !v47 )
            goto LABEL_264;
          v48 = v160;
          ((void (__fastcall *)(char *))*Curl_cfree)(v160->spath);
          v49 = sanitize_cookie_path(v48->path);
          v48->spath = v49;
          if ( !v49 )
            goto LABEL_264;
        }
      }
      goto LABEL_21;
    }
    v59 = curl_strnequal("domain", j, 6);
    v60 = v36 == 0;
    if ( v36 )
      v60 = v59 == 0;
    if ( v60 )
      goto LABEL_21;
    v61 = v33 + 1;
    if ( *v33 == 46 )
      --v36;
    else
      v61 = v33;
    if ( v36 == 9 && curl_strnequal(v61, "localhost", 9)
      || (v62 = memchr(v61, 46, v36)) != 0 && (unsigned int)(&v61[v36] - v62) > 1 )
    {
      v63 = domain;
      v65 = v61;
      if ( domain )
        v65 = domain;
      is_ipnum = Curl_host_is_ipnum(v65);
      v67 = is_ipnum;
      if ( !domain )
      {
        v63 = 0;
        goto LABEL_124;
      }
      v64 = is_ipnum == 0;
    }
    else
    {
      v63 = ":";
      v64 = Curl_host_is_ipnum(":") == 0;
    }
    if ( v64 )
    {
      v67 = 0;
      if ( !cookie_tailmatch(v61, v36, v63) )
        goto LABEL_121;
    }
    else if ( strncmp(v61, v63, v36) || (v67 = 1, v36 != strlen(v63)) )
    {
LABEL_121:
      domain = v63;
      v151 = 1;
      if ( (v150[3] & 0x20) != 0 )
        Curl_infof(v158, "skipped cookie with bad tailmatch domain: %s", v61);
      goto LABEL_21;
    }
LABEL_124:
    domain = v63;
    v70 = v160;
    ((void (__fastcall *)(char *))*Curl_cfree)(v160->domain);
    v71 = Curl_strndup(v61, v36);
    v70->domain = (char *)v71;
    if ( !v67 && v71 )
    {
      v160->tailmatch = 1;
      goto LABEL_21;
    }
    if ( v71 )
    {
      v151 |= v71 == 0;
      goto LABEL_21;
    }
    v29 = 6;
    j = (char *)v26;
    v151 = 1;
LABEL_28:
    if ( v29 )
      goto LABEL_263;
  }
  if ( !v37 )
    goto LABEL_264;
  v50 = (const char *)Curl_cfree;
  ((void (__fastcall *)(_DWORD))*Curl_cfree)(0);
  v51 = (char *)Curl_strndup(j, v30);
  p_next = &v160->next;
  v53 = *(void (__fastcall **)(char *))v50;
  v160->name = v51;
  v53(v160->value);
  v54 = Curl_strndup(v33, v36);
  v55 = v54 == 0;
  p_next[2] = v54;
  if ( v54 )
  {
    v50 = (const char *)v54;
    p_next = v160->name;
    v55 = p_next == 0;
  }
  if ( v55 )
    goto LABEL_264;
  if ( v50[strcspn(v50, invalid_octets_badoctets)]
    || *((_BYTE *)p_next + strcspn((const char *)p_next, invalid_octets_badoctets)) )
  {
    if ( (v150[3] & 0x20) != 0 )
      Curl_infof(v158, "invalid octets in name/value, cookie dropped");
    goto LABEL_264;
  }
LABEL_21:
  for ( j = (char *)(v26 + 1); ; ++j )
  {
    v27 = (unsigned __int8)*(j - 1);
    v28 = v27 == 32;
    if ( v27 != 32 )
      v28 = v27 == 9;
    if ( !v28 )
      break;
  }
  v29 = 0;
  if ( v27 == 59 )
    goto LABEL_28;
LABEL_263:
  if ( (v151 & 1) != 0 )
    goto LABEL_264;
  if ( domain )
  {
    if ( !v160->domain )
    {
      v137 = (char *)((int (__fastcall *)(const char *))*Curl_cstrdup)(domain);
      v160->domain = v137;
      if ( !v137 )
        goto LABEL_264;
    }
  }
  if ( path && !v160->path )
  {
    v138 = strchr(path, 63);
    v139 = v138 ? (char *)Curl_memrchr(path, 47, v138 - path) : strrchr(path, 47);
    if ( v139 )
    {
      v141 = v139 - path;
      v142 = (char *)((int (__fastcall *)(int))*Curl_cmalloc)(v139 - path + 2);
      v160->path = v142;
      if ( !v142 )
        goto LABEL_264;
      v143 = v141 + 1;
      memcpy(v142, path, v143);
      v144 = v160;
      v160->path[v143] = 0;
      v145 = sanitize_cookie_path(v160->path);
      v144->spath = v145;
      if ( !v145 )
        goto LABEL_264;
    }
  }
  if ( !v160->name )
  {
LABEL_264:
    v93 = v160;
    goto LABEL_265;
  }
  v94 = v158;
  v16 = v160;
  ++v158->req.setcookies;
LABEL_183:
  v12 = 0;
  if ( (v16->prefix & 1) != 0 && !v16->secure )
    goto LABEL_241;
  if ( (v16->prefix & 2) != 0 )
  {
    v116 = (const char *)v16->secure;
    v117 = v116 == 0;
    if ( v16->secure )
    {
      v116 = v16->path;
      v117 = v116 == 0;
    }
    if ( v117 || strcmp(v116, "/") || v16->tailmatch )
      goto LABEL_241;
  }
  v95 = cookies;
  if ( !cookies->running && cookies->newsession && !v16->expires )
  {
LABEL_241:
    freecookie(v16);
    return (Cookie *)v12;
  }
  v16->livecookie = cookies->running;
  v96 = cookies->lastct + 1;
  cookies->lastct = v96;
  v16->creationtime = v96;
  if ( !v153 )
    remove_expired(cookies);
  v157 = cookiehash(v16->domain);
  next = cookies->cookies[v157];
  if ( !next )
  {
    v101 = 0;
    v100 = 0;
LABEL_249:
    if ( !v94 )
      goto LABEL_254;
    v132 = !v95->running;
    if ( v95->running )
      v132 = (*((_BYTE *)&v94->set + 1337) & 0x20) == 0;
    if ( v132 )
    {
LABEL_254:
      if ( (v100 & 1) != 0 )
        goto LABEL_259;
    }
    else
    {
      v140 = "Added";
      if ( (v100 & 1) != 0 )
        v140 = "Replaced";
      Curl_infof(
        v94,
        "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
        v140,
        v16->name,
        v16->value,
        v16->domain,
        v16->path,
        v16->expires);
      if ( (v100 & 1) != 0 )
        goto LABEL_259;
    }
    if ( v101 )
      v101->next = v16;
    else
      v95->cookies[v157] = v16;
    ++v95->numcookies;
LABEL_259:
    expires = v16->expires;
    if ( expires )
    {
      next_expiration = v95->next_expiration;
      p_next_expiration = &v95->next_expiration;
      if ( expires < __SPAIR64__(*((_DWORD *)p_next_expiration + 1), next_expiration) )
        *p_next_expiration = expires;
    }
    return v16;
  }
  v98 = 0;
  v99 = 0;
  v100 = 0;
  while ( 1 )
  {
    v101 = next;
    if ( !curl_strequal(next->name, v16->name) )
      goto LABEL_209;
    v102 = v160->domain;
    v103 = v101->domain;
    if ( v103 )
    {
      if ( !v102 || !curl_strequal(v103, v102) )
        goto LABEL_209;
    }
    else if ( v102 )
    {
      goto LABEL_209;
    }
    spath = v101->spath;
    if ( spath )
    {
      v105 = v160->spath;
      v106 = v105 == 0;
      if ( v105 )
        v106 = !v101->secure;
      if ( !v106 )
      {
        v107 = !v160->secure;
        if ( !v160->secure )
          v107 = secure == 0;
        if ( v107 )
        {
          v108 = strchr(spath + 1, 47);
          v109 = v108 ? v108 - spath : strlen(spath);
          if ( curl_strnequal(spath, v105, v109) )
            break;
        }
      }
    }
LABEL_209:
    if ( v98 )
    {
      v95 = cookies;
      v16 = v160;
      goto LABEL_233;
    }
    v16 = v160;
    if ( !curl_strequal(v101->name, v160->name) )
    {
      v95 = cookies;
      goto LABEL_232;
    }
    v110 = v101->domain;
    v111 = v16->domain;
    if ( !v110 )
    {
      v112 = v111 == 0;
LABEL_220:
      v95 = cookies;
      v113 = v100 | v112;
      v100 = 0;
      if ( (v113 & 1) == 0 )
        goto LABEL_232;
      goto LABEL_221;
    }
    if ( v111 && curl_strequal(v110, v111) )
    {
      v112 = v16->tailmatch - v101->tailmatch + (v101->tailmatch == v16->tailmatch) + v101->tailmatch - v16->tailmatch;
      goto LABEL_220;
    }
    v95 = cookies;
    v98 = 0;
    if ( (v100 & 1) == 0 )
    {
      v100 = 0;
      goto LABEL_233;
    }
LABEL_221:
    v114 = v101->spath;
    v115 = v16->spath;
    if ( v114 )
    {
      if ( !v115 )
      {
        if ( v16->spath )
        {
LABEL_229:
          v100 = 1;
          if ( v16->livecookie )
          {
            v99 = v101;
            v98 = v16;
          }
          else
          {
            v99 = v101;
            v98 = v16;
            if ( v101->livecookie )
              goto LABEL_179;
          }
          goto LABEL_233;
        }
LABEL_231:
        v100 = 0;
LABEL_232:
        v98 = 0;
        goto LABEL_233;
      }
      if ( !curl_strequal(v114, v115) )
        goto LABEL_231;
      v100 = 0;
      v98 = 0;
      if ( (v101->spath != 0) != (v16->spath == 0) )
        goto LABEL_229;
    }
    else
    {
      v100 = 0;
      v98 = 0;
      if ( !v115 )
        goto LABEL_229;
    }
LABEL_233:
    next = v101->next;
    if ( !v101->next )
    {
      if ( v98 )
      {
        creationtime = v99->creationtime;
        name = v99->name;
        v98->next = v99->next;
        v98->creationtime = creationtime;
        v120 = (void (__fastcall **)(char *))Curl_cfree;
        ((void (__fastcall *)(char *))*Curl_cfree)(name);
        (*v120)(v99->value);
        (*v120)(v99->domain);
        (*v120)(v99->path);
        (*v120)(v99->spath);
        v160 = v99;
        v121 = v99;
        v122 = v98->name;
        value = v98->value;
        v124 = v98->path;
        v125 = v98->spath;
        v126 = v98->domain;
        v121->next = v98->next;
        v121->name = v122;
        v121->value = value;
        v121->path = v124;
        v121->spath = v125;
        v121->domain = v126;
        v121 = (Cookie *)((char *)v121 + 24);
        expires_high = (char *)HIDWORD(v98->expires);
        v128 = *(char **)&v98->tailmatch;
        v129 = (char *)v98->creationtime;
        v130 = *(char **)&v98->prefix;
        v131 = (char *)*((_DWORD *)&v98->prefix + 1);
        v121->next = (Cookie *)v98->expires;
        v121->name = expires_high;
        v121->value = v128;
        v121->path = v129;
        v121->spath = v130;
        v121->domain = v131;
        v95 = cookies;
        (*v120)((char *)v98);
        v16 = v160;
      }
      v94 = v158;
      goto LABEL_249;
    }
  }
  v146 = v160;
  v147 = v158 == 0;
  if ( v158 )
    v147 = (*((_BYTE *)&v158->set + 1337) & 0x20) == 0;
  if ( !v147 )
    Curl_infof(v158, "cookie '%s' for domain '%s' dropped, would overlay an existing cookie", v160->name, v160->domain);
  v93 = v146;
LABEL_265:
  freecookie(v93);
  return 0;
}
