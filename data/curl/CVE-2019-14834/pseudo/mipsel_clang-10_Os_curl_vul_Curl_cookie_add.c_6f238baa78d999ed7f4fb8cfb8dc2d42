Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  int v16; // $s3
  time_t v17; // $v0
  Cookie *v18; // $v0
  Cookie *v19; // $s4
  char *j; // $s3
  char *i; // $s0
  int v22; // $s5
  size_t v23; // $v0
  size_t v24; // $s1
  char *v25; // $s7
  unsigned int v26; // $s6
  int v27; // $v0
  const char *v28; // $s7
  size_t v29; // $v0
  size_t v30; // $a3
  unsigned int v31; // $a2
  const char *v32; // $fp
  int v33; // $v1
  unsigned int v34; // $v1
  int v35; // $s1
  char *v36; // $a0
  int v37; // $v1
  int v38; // $a2
  unsigned int v39; // $s7
  int v40; // $at
  unsigned int v41; // $s5
  int v42; // $v0
  Cookie *v43; // $s5
  unsigned int v44; // $s6
  int v45; // $v0
  Cookie *v46; // $s1
  char *v47; // $v0
  unsigned int v48; // $s5
  char *v49; // $v0
  Cookie *v50; // $s1
  int v51; // $v0
  const char *name; // $s1
  char *value; // $s5
  int v54; // $v0
  int v55; // $v0
  size_t v56; // $s5
  int v57; // $v0
  unsigned int v58; // $s1
  int v59; // $v0
  int v60; // $v0
  size_t v61; // $s3
  _BYTE *v62; // $v0
  const char *v63; // $s6
  int v64; // $s1
  int v65; // $v0
  const char *v66; // $a0
  int v67; // $v0
  int v68; // $v0
  int v69; // $v0
  char *v70; // $v1
  _BOOL4 v71; // $v0
  int expires_high; // $v0
  unsigned int v73; // $v1
  _BOOL4 v74; // $a1
  char *v75; // $v0
  char *v76; // $v0
  Cookie *v77; // $s1
  int v78; // $at
  Cookie **v79; // $s2
  Cookie *next; // $v0
  Cookie *v81; // $s4
  Cookie *v82; // $s3
  char v83; // $s7
  Cookie *v84; // $s6
  char *v85; // $a1
  const char *spath; // $s1
  char *v87; // $s5
  char *v88; // $v0
  size_t v89; // $a2
  char *v90; // $a1
  int v91; // $at
  bool v92; // dc
  int v93; // $at
  char *v94; // $a1
  char *v95; // $v0
  char *v96; // $v0
  int v97; // $v0
  char *v98; // $a0
  const char *v99; // $a2
  __int64 v100; // $v0
  int next_expiration_high; // $at
  _BOOL4 v102; // $a1
  int v103; // $s0
  char *v104; // $v0
  Cookie *v105; // $s2
  char *v106; // $v0
  int v108; // [sp+34h] [-BCh]
  unsigned int *p_expires; // [sp+3Ch] [-B4h]
  char v110; // [sp+44h] [-ACh]
  int v111; // [sp+48h] [-A8h]
  Curl_easy *v112; // [sp+4Ch] [-A4h]
  CookieInfo *v114; // [sp+58h] [-98h]
  int v115; // [sp+60h] [-90h]
  Cookie *co; // [sp+6Ch] [-84h]
  char *v117[32]; // [sp+70h] [-80h] BYREF

  v16 = 0;
  v17 = time(0u);
  if ( data->req.setcookies >= 0x32u )
    return (Cookie *)v16;
  v115 = v17;
  v18 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v18 )
    return (Cookie *)v16;
  v19 = v18;
  j = (char *)lineptr;
  co = v18;
  if ( !httpheader )
  {
    v117[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v19->httponly = 1;
      j = (char *)(lineptr + 10);
    }
    if ( *j != 35 )
    {
      v75 = strchr(j, 13);
      if ( v75 )
        *v75 = 0;
      v76 = strchr(j, 10);
      if ( v76 )
        *v76 = 0;
      if ( strtok_r(j, "\t", v117) )
        JUMPOUT(0xF88);
      freecookie(co);
      return 0;
    }
LABEL_5:
    Curl_cfree(v19);
    return 0;
  }
  if ( strlen(lineptr) >= 0x1389 )
    goto LABEL_5;
  v111 = noexpire;
  v114 = c;
  v112 = data;
  v108 = 0x7FFFFFFF - (v115 >> 31);
  p_expires = (unsigned int *)&v19->expires;
  v110 = 0;
  do
  {
    for ( i = j + 1; ; ++i )
    {
      v22 = (unsigned __int8)*j;
      if ( v22 != 32 && v22 != 9 )
        break;
      ++j;
    }
    v23 = strcspn(j, ";\t\r\n=");
    if ( !v23 )
    {
      v25 = j;
      goto LABEL_68;
    }
    v24 = v23;
    v25 = &j[v23];
    v26 = v23;
    while ( 1 )
    {
      v27 = (unsigned __int8)j[v26 - 1];
      if ( v27 != 32 && v27 != 9 )
        break;
      if ( !--v26 )
      {
        v26 = 0;
        break;
      }
    }
    if ( *v25 == 61 )
    {
      v28 = &j[v24 + 1];
      v29 = strcspn(v28, ";\r\n");
      v30 = v24 + v29;
      v31 = 0;
      if ( v29 )
      {
        v32 = &i[v30];
        while ( 1 )
        {
          v33 = *((unsigned __int8 *)v32 - 1);
          if ( v33 != 32 && v33 != 9 )
            break;
          --v29;
          --v32;
          if ( !v29 )
          {
            v24 = v30;
            v32 = v28;
            goto LABEL_37;
          }
        }
        v36 = &i[v24];
        v37 = 0;
        while ( 1 )
        {
          v38 = (unsigned __int8)v36[v37];
          if ( v38 != 32 && v38 != 9 )
            break;
          if ( v29 == ++v37 )
          {
            v24 = v30;
            v31 = 0;
            goto LABEL_37;
          }
        }
        v24 = v30;
        v31 = v29 - v37;
        v32 = &v36[v37];
      }
      else
      {
        v32 = v28;
      }
LABEL_37:
      v39 = v31;
      if ( ((int (__fastcall *)(const char *, int))memchr)(v32, 9) )
      {
        freecookie(co);
        v16 = 0;
        if ( (*((_BYTE *)&data->set + 1338) & 0x10) == 0 )
          return (Cookie *)v16;
        goto LABEL_200;
      }
      v40 = (int)&j[v24 + 1];
      v35 = 1;
      v34 = v39;
      v25 = (char *)v40;
    }
    else
    {
      v34 = 0;
      v35 = 0;
      v32 = 0;
    }
    if ( v26 >= 0xFFF || v34 >= 0xFFF || v34 + v26 >= 0x1001 )
    {
      freecookie(co);
      v16 = 0;
      if ( (*((_BYTE *)&data->set + 1338) & 0x10) == 0 )
        return (Cookie *)v16;
LABEL_200:
      ((void (*)(void))Curl_infof)();
      return (Cookie *)v16;
    }
    if ( v22 == 95 && v26 >= 7 && j[1] == 95 )
    {
      v41 = v34;
      if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("__Secure-", j, 9) )
      {
        co->prefix |= 1u;
        v34 = v41;
      }
      else
      {
        v42 = ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("__Host-", j, 7);
        v34 = v41;
        if ( v42 )
          co->prefix |= 2u;
      }
    }
    v43 = co;
    if ( co->name )
    {
      if ( !v34 )
      {
        if ( v26 == 8 )
        {
          v65 = ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("httponly", j, 8);
          v34 = 0;
          if ( v65 )
          {
            v43->httponly = 1;
            goto LABEL_68;
          }
        }
        else if ( v26 == 6 )
        {
          v55 = ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("secure", j, 6);
          v34 = 0;
          if ( v55 )
          {
            if ( !secure && v114->running )
              goto LABEL_243;
            co->secure = 1;
            goto LABEL_68;
          }
        }
        if ( !v35 )
          goto LABEL_68;
      }
      switch ( v26 )
      {
        case 7u:
          v56 = v34;
          if ( !((int (__fastcall *)(const char *, char *, int))curl_strnequal)("version", j, 7) )
          {
            if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("max-age", j, 7) )
            {
              if ( *v32 == 0x22 )
                ++v32;
              v57 = ((int (__fastcall *)(const char *, _DWORD, int, unsigned int *))curlx_strtoofft)(
                      v32,
                      0,
                      10,
                      p_expires);
              if ( v57 )
              {
                if ( v57 == 2 )
                {
                  *p_expires = 1;
                  HIDWORD(v19->expires) = 0;
                }
                else if ( v57 == 1 )
                {
                  *p_expires = -1;
                  HIDWORD(v19->expires) = 0x7FFFFFFF;
                }
              }
              else
              {
                expires_high = HIDWORD(v19->expires);
                v73 = *p_expires;
                if ( *(_QWORD *)p_expires )
                {
                  v74 = v108 >= expires_high;
                  if ( v108 == expires_high )
                    v74 = ~v115 >= v73;
                  if ( v74 )
                  {
                    *p_expires = v73 + v115;
                    HIDWORD(v19->expires) = expires_high + (v115 >> 31) + __CFADD__(v73, v115);
                  }
                  else
                  {
                    *p_expires = -1;
                    HIDWORD(v19->expires) = 0x7FFFFFFF;
                  }
                }
                else
                {
                  *p_expires = 1;
                  HIDWORD(v19->expires) = 0;
                }
              }
            }
            else if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("expires", j, 7)
                   && v56 < 0x80
                   && !*(_QWORD *)p_expires )
            {
              memcpy(v117, v32, v56);
              *((_BYTE *)v117 + v56) = 0;
              v68 = ((int (__fastcall *)(char **))Curl_getdate_capped)(v117);
              *(_QWORD *)p_expires = v68;
              if ( v68 )
              {
                if ( v68 < 0 )
                {
                  HIDWORD(v19->expires) = 0;
                  *p_expires = 0;
                }
              }
              else
              {
                *p_expires = 1;
                HIDWORD(v19->expires) = 0;
              }
            }
          }
          break;
        case 6u:
          v58 = v34;
          v59 = ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("domain", j, 6);
          if ( !v58 || !v59 )
            break;
          v60 = *(unsigned __int8 *)v32;
          if ( v60 == 0x2E )
            ++v32;
          v61 = (__PAIR64__(v58, v60 ^ 0x2Eu) - 1) >> 32;
          if ( v61 == 9 && ((int (__fastcall *)(const char *, const char *, int))curl_strnequal)(v32, "localhost", 9)
            || (v62 = (_BYTE *)memchr(v32, 46, v61)) != 0 && (unsigned int)(&v32[v61] - v62) >= 2 )
          {
            v66 = v32;
            v63 = domain;
            if ( domain )
              v66 = domain;
            v67 = ((int (__fastcall *)(const char *))Curl_host_is_ipnum)(v66);
            v64 = v67;
            if ( domain )
            {
              if ( !v67 )
                goto LABEL_108;
LABEL_97:
              domain = v63;
              if ( strncmp(v32, v63, v61) || (v64 = 1, v61 != strlen(v63)) )
              {
LABEL_109:
                v110 = 1;
                if ( (*((_BYTE *)&data->set + 1338) & 0x10) != 0 )
                  ((void (*)(void))Curl_infof)();
                break;
              }
            }
            else
            {
              domain = 0;
            }
          }
          else
          {
            v63 = ":";
            if ( ((int (__fastcall *)(const char *))Curl_host_is_ipnum)(":") )
              goto LABEL_97;
LABEL_108:
            domain = v63;
            v64 = 0;
            if ( !((int (__fastcall *)(const char *, size_t, const char *))cookie_tailmatch)(v32, v61, v63) )
              goto LABEL_109;
          }
          Curl_cfree(v43->domain);
          v69 = Curl_memdup(v32, v61 + 1);
          v43->domain = (char *)v69;
          if ( !v69 )
            goto LABEL_243;
          *(_BYTE *)(v69 + v61) = 0;
          v70 = co->domain;
          v71 = v70 == 0;
          if ( v64 | v71 )
          {
            if ( !v70 )
              goto LABEL_243;
            v110 |= v71;
          }
          else
          {
            co->tailmatch = 1;
          }
          break;
        case 4u:
          v44 = v34;
          if ( ((int (__fastcall *)(const char *, char *, int))curl_strnequal)("path", j, 4) )
          {
            Curl_cfree(v43->path);
            v45 = Curl_memdup(v32, v44 + 1);
            v43->path = (char *)v45;
            if ( !v45 )
              goto LABEL_243;
            *(_BYTE *)(v45 + v44) = 0;
            if ( !co->path )
              goto LABEL_243;
            v46 = co;
            Curl_cfree(co->spath);
            v47 = sanitize_cookie_path(v46->path);
            v46->spath = v47;
            if ( !v47 )
              goto LABEL_243;
          }
          break;
      }
    }
    else
    {
      if ( !v35 )
        goto LABEL_243;
      v48 = v34;
      Curl_cfree(0);
      v49 = (char *)Curl_memdup(j, v26 + 1);
      v50 = co;
      co->name = v49;
      if ( v49 )
        v49[v26] = 0;
      Curl_cfree(v50->value);
      v51 = Curl_memdup(v32, v48 + 1);
      v50->value = (char *)v51;
      if ( v51 )
        *(_BYTE *)(v51 + v48) = 0;
      name = v50->name;
      if ( !name )
        goto LABEL_243;
      value = co->value;
      if ( !value )
        goto LABEL_243;
      if ( value[strcspn(co->value, invalid_octets_badoctets)] || name[strcspn(name, invalid_octets_badoctets)] )
      {
        if ( (*((_BYTE *)&data->set + 1338) & 0x10) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
        goto LABEL_243;
      }
    }
LABEL_68:
    for ( j = v25 + 1; ; ++j )
    {
      v54 = (unsigned __int8)*(j - 1);
      if ( v54 != 32 && v54 != 9 )
        break;
    }
  }
  while ( v54 == 59 );
  if ( (v110 & 1) != 0 )
    goto LABEL_243;
  if ( domain )
  {
    if ( !co->domain )
    {
      v95 = (char *)Curl_cstrdup(domain);
      co->domain = v95;
      if ( !v95 )
        goto LABEL_243;
    }
  }
  if ( path && !co->path )
  {
    v96 = strchr(path, 63);
    v97 = v96 ? ((int (__fastcall *)(const char *, int, int))Curl_memrchr)(path, 47, v96 - path) : (int)strrchr(path, 47);
    if ( v97 )
    {
      v103 = v97 - (_DWORD)path;
      v104 = (char *)Curl_cmalloc(v97 - (_DWORD)path + 2);
      co->path = v104;
      if ( !v104 )
        goto LABEL_243;
      memcpy(v104, path, v103 + 1);
      v105 = co;
      co->path[v103 + 1] = 0;
      v106 = sanitize_cookie_path(co->path);
      v105->spath = v106;
      if ( !v106 )
        goto LABEL_243;
    }
  }
  if ( !co->name )
  {
LABEL_243:
    freecookie(co);
    return 0;
  }
  ++v112->req.setcookies;
  v77 = co;
  v16 = 0;
  if ( (co->prefix & 1) != 0 && !co->secure )
  {
    freecookie(co);
    return (Cookie *)v16;
  }
  if ( (co->prefix & 2) != 0 && (!co->secure || (v98 = co->path) == 0 || strcmp(v98, "/") || v77->tailmatch)
    || !v114->running && v114->newsession && !v77->expires )
  {
    freecookie(v77);
    return (Cookie *)v16;
  }
  v77->livecookie = v114->running;
  v78 = v114->lastct + 1;
  v114->lastct = v78;
  v77->creationtime = v78;
  if ( !v111 )
    remove_expired(v114);
  v79 = &v114->cookies[cookiehash(v77->domain)];
  next = *v79;
  if ( !*v79 )
  {
    v84 = 0;
    v83 = 0;
    goto LABEL_217;
  }
  v81 = 0;
  v82 = 0;
  v83 = 0;
  while ( 2 )
  {
    v84 = next;
    if ( ((int (__fastcall *)(char *, char *))curl_strequal)(next->name, v77->name) )
    {
      v85 = co->domain;
      if ( v84->domain )
      {
        if ( !v85 || !((int (*)(void))curl_strequal)() )
          goto LABEL_161;
      }
      else if ( v85 )
      {
        goto LABEL_161;
      }
      spath = v84->spath;
      if ( spath )
      {
        v87 = co->spath;
        if ( v87 )
        {
          if ( v84->secure && !co->secure && !secure )
          {
            v88 = strchr(spath + 1, 47);
            v89 = v88 ? v88 - spath : strlen(spath);
            if ( ((int (__fastcall *)(const char *, char *, size_t))curl_strnequal)(spath, v87, v89) )
            {
              v77 = co;
              if ( v112 && (*((_BYTE *)&v112->set + 1338) & 0x10) != 0 )
                Curl_infof(
                  v112,
                  "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                  co->name,
                  co->domain);
LABEL_187:
              freecookie(v77);
              return 0;
            }
          }
        }
      }
    }
LABEL_161:
    if ( v81 )
    {
      v77 = co;
      goto LABEL_163;
    }
    v77 = co;
    if ( ((int (__fastcall *)(char *, char *))curl_strequal)(v84->name, co->name) )
    {
      v90 = v77->domain;
      if ( v84->domain )
      {
        if ( v90 && ((int (*)(void))curl_strequal)() )
        {
          v91 = v83 & 1 | (v84->tailmatch == v77->tailmatch);
          v83 = 0;
          if ( !v91 )
          {
            v81 = 0;
            goto LABEL_163;
          }
LABEL_175:
          v94 = v77->spath;
          if ( v84->spath )
          {
            if ( v94 )
            {
              if ( ((int (*)(void))curl_strequal)() )
              {
                v83 = 0;
                v81 = 0;
                if ( (v84->spath != 0) != (v77->spath == 0) )
                  goto LABEL_184;
              }
              else
              {
                v83 = 0;
                v81 = 0;
              }
            }
            else if ( v77->spath )
            {
LABEL_184:
              v83 = 1;
              if ( v77->livecookie )
              {
                v82 = v84;
                v81 = v77;
              }
              else
              {
                v82 = v84;
                v81 = v77;
                if ( v84->livecookie )
                  goto LABEL_187;
              }
            }
            else
            {
              v83 = 0;
              v81 = 0;
            }
          }
          else
          {
            v83 = 0;
            v81 = 0;
            if ( !v94 )
              goto LABEL_184;
          }
        }
        else
        {
          v92 = (v83 & 1) != 0;
          v83 = 0;
          if ( v92 )
            goto LABEL_175;
          v81 = 0;
        }
      }
      else
      {
        v93 = v83 & 1 | (v90 == 0);
        v83 = 0;
        if ( v93 )
          goto LABEL_175;
        v81 = 0;
      }
    }
    else
    {
      v81 = 0;
    }
LABEL_163:
    next = v84->next;
    if ( v84->next )
      continue;
    break;
  }
  if ( v81 )
  {
    v81->next = v82->next;
    v81->creationtime = v82->creationtime;
    Curl_cfree(v82->name);
    Curl_cfree(v82->value);
    Curl_cfree(v82->domain);
    Curl_cfree(v82->path);
    Curl_cfree(v82->spath);
    memcpy(v82, v81, sizeof(Cookie));
    Curl_cfree(v81);
    v77 = v82;
  }
LABEL_217:
  if ( v112 && v114->running && (*((_BYTE *)&v112->set + 1338) & 0x10) != 0 )
  {
    v99 = "Added";
    if ( (v83 & 1) != 0 )
      v99 = "Replaced";
    Curl_infof(
      v112,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
      v99,
      v77->name,
      v77->value,
      v77->domain,
      v77->path,
      v77->expires);
    if ( (v83 & 1) == 0 )
    {
LABEL_225:
      if ( v84 )
        v84->next = v77;
      else
        *v79 = v77;
      ++v114->numcookies;
    }
  }
  else if ( (v83 & 1) == 0 )
  {
    goto LABEL_225;
  }
  LODWORD(v100) = HIDWORD(v77->expires);
  HIDWORD(v100) = v77->expires;
  if ( !v100 )
    return v77;
  next_expiration_high = HIDWORD(v114->next_expiration);
  v102 = (int)v100 >= next_expiration_high;
  if ( (unsigned int)v100 == next_expiration_high )
    v102 = HIDWORD(v100) >= LODWORD(v114->next_expiration);
  if ( !v102 )
  {
    LODWORD(v114->next_expiration) = HIDWORD(v100);
    HIDWORD(v114->next_expiration) = v100;
  }
  return v77;
}
