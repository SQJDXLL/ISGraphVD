Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v9; // $v0
  const char *v10; // $v0
  const char *v11; // $v0
  Cookie *v12; // $a0
  Cookie *v13; // $a0
  Cookie *v14; // $a0
  Cookie *v15; // $a0
  int v16; // $v0
  Cookie *v17; // $a0
  Cookie *v18; // $v0
  char *v19; // $v0
  char *v20; // $v0
  char *v21; // $v0
  char *v22; // $v0
  int v23; // $v0
  char *v24; // $v0
  char *v25; // $v0
  char *v26; // $v0
  char *v27; // $v0
  char *v28; // $v0
  char *v29; // $v0
  char *v30; // $v0
  const char *v31; // $a0
  char *name; // $t0
  char *value; // $a1
  char *v34; // $a2
  char *v35; // $a3
  int expires_high; // $v0
  int v37; // $v0
  CookieInfo *v38; // $a0
  int v39; // [sp+0h] [+0h] BYREF
  __int64 v40; // [sp+20h] [+20h]
  const char *patha; // [sp+34h] [+34h]
  const char *domaina; // [sp+38h] [+38h]
  const char *lineptra; // [sp+3Ch] [+3Ch]
  CookieInfo *ca; // [sp+40h] [+40h]
  Curl_easy *dataa; // [sp+44h] [+44h]
  bool replace_old; // [sp+4Eh] [+4Eh]
  bool badcookie; // [sp+4Fh] [+4Fh]
  bool done; // [sp+50h] [+50h]
  bool sep; // [sp+51h] [+51h]
  bool matching_domains; // [sp+52h] [+52h]
  bool is_ip; // [sp+53h] [+53h]
  char *tok_buf; // [sp+54h] [+54h] BYREF
  Cookie *clist; // [sp+58h] [+58h]
  Cookie *co; // [sp+5Ch] [+5Ch]
  Cookie *lastc; // [sp+60h] [+60h]
  Cookie *replace_co; // [sp+64h] [+64h]
  Cookie *replace_clist; // [sp+68h] [+68h]
  const char *ptr; // [sp+6Ch] [+6Ch]
  size_t vlen; // [sp+70h] [+70h]
  size_t nlen; // [sp+74h] [+74h]
  const char *valuep; // [sp+78h] [+78h]
  char *endslash; // [sp+7Ch] [+7Ch]
  char *ptr_0; // [sp+80h] [+80h]
  int fields; // [sp+84h] [+84h]
  size_t cllen; // [sp+88h] [+88h]
  time_t now; // [sp+8Ch] [+8Ch]
  char *firstptr; // [sp+90h] [+90h]
  size_t linelength; // [sp+94h] [+94h]
  const char *namep; // [sp+98h] [+98h]
  const char *maxage; // [sp+9Ch] [+9Ch]
  CURLofft offt; // [sp+A0h] [+A0h]
  char *queryp; // [sp+A4h] [+A4h]
  size_t pathlen; // [sp+A8h] [+A8h]
  size_t myhash; // [sp+ACh] [+ACh]
  const char *sep_0; // [sp+B0h] [+B0h]
  char date[128]; // [sp+B4h] [+B4h] BYREF

  dataa = data;
  ca = c;
  lineptra = lineptr;
  domaina = domain;
  patha = path;
  lastc = 0;
  replace_co = 0;
  replace_clist = 0;
  now = time(0u);
  replace_old = 0;
  badcookie = 0;
  if ( dataa->req.setcookies >= 0x32u )
    return 0;
  co = (Cookie *)Curl_ccalloc(1, 48);
  if ( !co )
    return 0;
  if ( httpheader )
  {
    linelength = strlen(lineptra);
    if ( linelength < 0x1389 )
    {
      for ( ptr = lineptra; ; ++ptr )
      {
        while ( *ptr && (*ptr == 32 || *ptr == 9) )
          ++ptr;
        nlen = strcspn(ptr, ";\t\r\n=");
        if ( nlen )
        {
          done = 0;
          sep = 0;
          namep = ptr;
          ptr += nlen;
          while ( nlen && (namep[nlen - 1] == 32 || namep[nlen - 1] == 9) )
            --nlen;
          if ( *ptr == 61 )
          {
            vlen = strcspn(++ptr, ";\r\n");
            valuep = ptr;
            sep = 1;
            ptr += vlen;
            while ( vlen && (valuep[vlen - 1] == 32 || valuep[vlen - 1] == 9) )
              --vlen;
            while ( vlen && (*valuep == 32 || *valuep == 9) )
            {
              ++valuep;
              --vlen;
            }
            if ( memchr(valuep, 9, vlen) )
            {
              freecookie(co);
              if ( dataa )
              {
                if ( (*(_DWORD *)(&dataa->set.connect_only + 3) & 0x40000) != 0 )
                  Curl_infof(dataa, "cookie contains TAB, dropping");
              }
              return 0;
            }
          }
          else
          {
            valuep = 0;
            vlen = 0;
          }
          if ( nlen >= 0xFFF || vlen >= 0xFFF || nlen + vlen >= 0x1001 )
          {
            freecookie(co);
            if ( dataa && (*(_DWORD *)(&dataa->set.connect_only + 3) & 0x40000) != 0 )
              Curl_infof(dataa, "oversized cookie dropped, name/val %zu + %zu bytes", nlen, vlen);
            return 0;
          }
          if ( nlen >= 7 && *namep == 95 && namep[1] == 95 )
          {
            if ( curl_strnequal("__Secure-", namep, 9) )
            {
              co->prefix |= 1u;
            }
            else if ( curl_strnequal("__Host-", namep, 7) )
            {
              co->prefix |= 2u;
            }
          }
          if ( co->name )
          {
            if ( !vlen )
            {
              done = 1;
              if ( nlen == 6 && curl_strnequal("secure", namep, 6) )
              {
                if ( !secure && ca->running )
                {
                  badcookie = 1;
                  goto LABEL_138;
                }
                co->secure = 1;
              }
              else if ( nlen == 8 && curl_strnequal("httponly", namep, 8) )
              {
                co->httponly = 1;
              }
              else if ( sep )
              {
                done = 0;
              }
            }
          }
          else
          {
            if ( !sep )
            {
              badcookie = 1;
              goto LABEL_138;
            }
            strstore(&co->name, namep, nlen);
            strstore(&co->value, valuep, vlen);
            done = 1;
            if ( !co->name || !co->value )
            {
              badcookie = 1;
              goto LABEL_138;
            }
            if ( invalid_octets(co->value) || invalid_octets(co->name) )
            {
              if ( dataa && (*(_DWORD *)(&dataa->set.connect_only + 3) & 0x40000) != 0 )
                Curl_infof(dataa, "invalid octets in name/value, cookie dropped");
              badcookie = 1;
LABEL_138:
              if ( !badcookie && !co->domain )
              {
                if ( domaina )
                {
                  v19 = (char *)Curl_cstrdup(domaina);
                  co->domain = v19;
                  if ( !co->domain )
                    badcookie = 1;
                }
              }
              if ( !badcookie && !co->path && patha )
              {
                queryp = strchr(patha, 63);
                endslash = queryp ? (char *)Curl_memrchr(patha, 47, queryp - patha) : strrchr(patha, 47);
                if ( endslash )
                {
                  pathlen = endslash - patha + 1;
                  v20 = (char *)Curl_cmalloc(endslash - patha + 2);
                  co->path = v20;
                  if ( co->path )
                  {
                    memcpy(co->path, patha, pathlen);
                    co->path[pathlen] = 0;
                    v21 = sanitize_cookie_path(co->path);
                    co->spath = v21;
                    if ( !co->spath )
                      badcookie = 1;
                  }
                  else
                  {
                    badcookie = 1;
                  }
                }
              }
              if ( !badcookie && co->name )
              {
                ++dataa->req.setcookies;
                goto LABEL_210;
              }
LABEL_267:
              freecookie(co);
              return 0;
            }
          }
          if ( !done )
          {
            if ( nlen == 4 && curl_strnequal("path", namep, 4) )
            {
              strstore(&co->path, valuep, vlen);
              if ( !co->path )
              {
                badcookie = 1;
                goto LABEL_138;
              }
              Curl_cfree(co->spath);
              v9 = sanitize_cookie_path(co->path);
              co->spath = v9;
              if ( !co->spath )
              {
                badcookie = 1;
                goto LABEL_138;
              }
            }
            else if ( nlen == 6 && curl_strnequal("domain", namep, 6) && vlen )
            {
              if ( *valuep == 46 )
              {
                ++valuep;
                --vlen;
              }
              if ( bad_domain(valuep, vlen) )
                domaina = ":";
              if ( domaina )
                v10 = domaina;
              else
                v10 = valuep;
              is_ip = Curl_host_is_ipnum(v10);
              if ( !domaina
                || is_ip && !strncmp(valuep, domaina, vlen) && vlen == strlen(domaina)
                || !is_ip && cookie_tailmatch(valuep, vlen, domaina) )
              {
                strstore(&co->domain, valuep, vlen);
                if ( !co->domain )
                {
                  badcookie = 1;
                  goto LABEL_138;
                }
                if ( !is_ip )
                  co->tailmatch = 1;
              }
              else
              {
                badcookie = 1;
                if ( dataa && (*(_DWORD *)(&dataa->set.connect_only + 3) & 0x40000) != 0 )
                  Curl_infof(dataa, "skipped cookie with bad tailmatch domain: %s", valuep);
              }
            }
            else if ( nlen != 7 || !curl_strnequal("version", namep, 7) )
            {
              if ( nlen == 7 && curl_strnequal("max-age", namep, 7) )
              {
                maxage = valuep;
                if ( *valuep == 34 )
                  v11 = maxage + 1;
                else
                  v11 = maxage;
                offt = curlx_strtoofft(v11, 0, 10, &co->expires);
                if ( offt == CURL_OFFT_INVAL )
                {
                  v13 = co;
                  LODWORD(co->expires) = 1;
                  HIDWORD(v13->expires) = 0;
                }
                else if ( (unsigned int)offt < (CURL_OFFT_INVAL|CURL_OFFT_FLOW) )
                {
                  if ( offt )
                  {
                    v12 = co;
                    LODWORD(co->expires) = -1;
                    HIDWORD(v12->expires) = 0x7FFFFFFF;
                  }
                  else if ( co->expires )
                  {
                    if ( 0x7FFFFFFFFFFFFFFFLL - now >= co->expires )
                    {
                      co->expires += now;
                    }
                    else
                    {
                      v15 = co;
                      LODWORD(co->expires) = -1;
                      HIDWORD(v15->expires) = 0x7FFFFFFF;
                    }
                  }
                  else
                  {
                    v14 = co;
                    LODWORD(co->expires) = 1;
                    HIDWORD(v14->expires) = 0;
                  }
                }
              }
              else if ( nlen == 7 && curl_strnequal("expires", namep, 7) && !co->expires && vlen < 0x80 )
              {
                memcpy(date, valuep, vlen);
                *((_BYTE *)&v39 + vlen + 180) = 0;
                v16 = Curl_getdate_capped(date);
                co->expires = v16;
                if ( co->expires )
                {
                  if ( co->expires < 0 )
                  {
                    v18 = co;
                    LODWORD(co->expires) = 0;
                    HIDWORD(v18->expires) = 0;
                  }
                }
                else
                {
                  v17 = co;
                  LODWORD(co->expires) = 1;
                  HIDWORD(v17->expires) = 0;
                }
              }
            }
          }
        }
        while ( *ptr && (*ptr == 32 || *ptr == 9) )
          ++ptr;
        if ( *ptr != 59 )
          goto LABEL_138;
      }
    }
LABEL_7:
    Curl_cfree(co);
    return 0;
  }
  tok_buf = 0;
  if ( !strncmp(lineptra, "#HttpOnly_", 0xAu) )
  {
    lineptra += 10;
    co->httponly = 1;
  }
  if ( *lineptra == 35 )
    goto LABEL_7;
  ptr_0 = strchr(lineptra, 13);
  if ( ptr_0 )
    *ptr_0 = 0;
  ptr_0 = strchr(lineptra, 10);
  if ( ptr_0 )
    *ptr_0 = 0;
  firstptr = strtok_r((char *)lineptra, "\t", &tok_buf);
  ptr_0 = firstptr;
  fields = 0;
  while ( ptr_0 && !badcookie )
  {
    switch ( fields )
    {
      case 0:
        if ( *ptr_0 == 46 )
          ++ptr_0;
        v22 = (char *)Curl_cstrdup(ptr_0);
        co->domain = v22;
        if ( !co->domain )
          badcookie = 1;
        break;
      case 1:
        v23 = curl_strequal(ptr_0, "TRUE");
        co->tailmatch = v23 != 0;
        break;
      case 2:
        if ( !strcmp("TRUE", ptr_0) || !strcmp("FALSE", ptr_0) )
        {
          v26 = (char *)Curl_cstrdup("/");
          co->path = v26;
          if ( !co->path )
            badcookie = 1;
          v27 = (char *)Curl_cstrdup("/");
          co->spath = v27;
          if ( !co->spath )
            badcookie = 1;
          ++fields;
          goto LABEL_183;
        }
        v24 = (char *)Curl_cstrdup(ptr_0);
        co->path = v24;
        if ( co->path )
        {
          v25 = sanitize_cookie_path(co->path);
          co->spath = v25;
          if ( !co->spath )
            badcookie = 1;
        }
        else
        {
          badcookie = 1;
        }
        break;
      case 3:
LABEL_183:
        co->secure = 0;
        if ( curl_strequal(ptr_0, "TRUE") )
        {
          if ( secure || ca->running )
            co->secure = 1;
          else
            badcookie = 1;
        }
        break;
      case 4:
        if ( curlx_strtoofft(ptr_0, 0, 10, &co->expires) )
          badcookie = 1;
        break;
      case 5:
        v28 = (char *)Curl_cstrdup(ptr_0);
        co->name = v28;
        if ( co->name )
        {
          if ( curl_strnequal("__Secure-", co->name, 9) )
          {
            co->prefix |= 1u;
          }
          else if ( curl_strnequal("__Host-", co->name, 7) )
          {
            co->prefix |= 2u;
          }
        }
        else
        {
          badcookie = 1;
        }
        break;
      case 6:
        v29 = (char *)Curl_cstrdup(ptr_0);
        co->value = v29;
        if ( !co->value )
          badcookie = 1;
        break;
      default:
        break;
    }
    ptr_0 = strtok_r(0u, "\t", &tok_buf);
    ++fields;
  }
  if ( fields == 6 )
  {
    v30 = (char *)Curl_cstrdup(&unk_5458);
    co->value = v30;
    if ( co->value )
      ++fields;
    else
      badcookie = 1;
  }
  if ( !badcookie && fields != 7 )
    badcookie = 1;
  if ( !badcookie )
  {
LABEL_210:
    if ( ((co->prefix & 1) == 0 || co->secure)
      && ((co->prefix & 2) == 0 || co->secure && co->path && !strcmp(co->path, "/") && !co->tailmatch)
      && (ca->running || !ca->newsession || co->expires) )
    {
      co->livecookie = ca->running;
      co->creationtime = ++ca->lastct;
      if ( !noexpire )
        remove_expired(ca);
      myhash = cookiehash(co->domain);
      for ( clist = ca->cookies[myhash]; ; clist = clist->next )
      {
        if ( !clist )
        {
          if ( replace_co )
          {
            co = replace_co;
            clist = replace_clist;
            replace_co->next = replace_clist->next;
            co->creationtime = clist->creationtime;
            Curl_cfree(clist->name);
            Curl_cfree(clist->value);
            Curl_cfree(clist->domain);
            Curl_cfree(clist->path);
            Curl_cfree(clist->spath);
            memcpy(clist, co, sizeof(Cookie));
            Curl_cfree(co);
            co = clist;
          }
          if ( ca->running && dataa && (*(_DWORD *)(&dataa->set.connect_only + 3) & 0x40000) != 0 )
          {
            if ( replace_old )
              v31 = "Replaced";
            else
              v31 = "Added";
            name = co->name;
            value = co->value;
            v34 = co->domain;
            v35 = co->path;
            expires_high = HIDWORD(co->expires);
            LODWORD(v40) = co->expires;
            HIDWORD(v40) = expires_high;
            Curl_infof(
              dataa,
              "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
              v31,
              name,
              value,
              v34,
              v35,
              v40);
          }
          if ( !replace_old )
          {
            if ( lastc )
              lastc->next = co;
            else
              ca->cookies[myhash] = co;
            ++ca->numcookies;
          }
          if ( co->expires && co->expires < ca->next_expiration )
          {
            v37 = HIDWORD(co->expires);
            v38 = ca;
            LODWORD(ca->next_expiration) = co->expires;
            HIDWORD(v38->next_expiration) = v37;
          }
          return co;
        }
        if ( curl_strequal(clist->name, co->name) )
        {
          matching_domains = 0;
          if ( clist->domain && co->domain )
          {
            if ( curl_strequal(clist->domain, co->domain) )
              matching_domains = 1;
          }
          else if ( !clist->domain && !co->domain )
          {
            matching_domains = 1;
          }
          if ( matching_domains && clist->spath && co->spath && clist->secure && !co->secure && !secure )
          {
            sep_0 = strchr((const char *)clist->spath + 1, 47);
            cllen = sep_0 ? sep_0 - clist->spath : strlen(clist->spath);
            if ( curl_strnequal(clist->spath, co->spath, cllen) )
              break;
          }
        }
        if ( !replace_co && curl_strequal(clist->name, co->name) )
        {
          if ( clist->domain && co->domain )
          {
            if ( curl_strequal(clist->domain, co->domain) && clist->tailmatch == co->tailmatch )
              replace_old = 1;
          }
          else if ( !clist->domain && !co->domain )
          {
            replace_old = 1;
          }
          if ( replace_old )
          {
            if ( clist->spath && co->spath && !curl_strequal(clist->spath, co->spath) )
            {
              replace_old = 0;
            }
            else if ( (clist->spath == 0) != (co->spath == 0) )
            {
              replace_old = 0;
            }
          }
          if ( replace_old && !co->livecookie && clist->livecookie )
            goto LABEL_267;
          if ( replace_old )
          {
            replace_co = co;
            replace_clist = clist;
          }
        }
        lastc = clist;
      }
      if ( dataa && (*(_DWORD *)(&dataa->set.connect_only + 3) & 0x40000) != 0 )
        Curl_infof(dataa, "cookie '%s' for domain '%s' dropped, would overlay an existing cookie", co->name, co->domain);
    }
    goto LABEL_267;
  }
  freecookie(co);
  return 0;
}
