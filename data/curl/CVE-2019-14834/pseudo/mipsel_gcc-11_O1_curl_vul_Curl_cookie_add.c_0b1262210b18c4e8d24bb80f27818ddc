Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v14; // $s5
  Cookie *v15; // $s6
  Cookie *v16; // $s2
  int v17; // $a1
  size_t v18; // $s1
  int v19; // $v0
  Cookie *v20; // $a0
  const char *v21; // $a0
  int v22; // $v0
  Cookie *v23; // $a0
  void (*v24)(Cookie *); // $t9
  int v25; // $v0
  Cookie **v26; // $s7
  Cookie *v27; // $s0
  int livecookie; // $s4
  Cookie *v29; // $s1
  char *v30; // $s7
  unsigned int v31; // $a0
  int v32; // $v0
  const char *v33; // $s4
  size_t v34; // $s3
  _BOOL4 v35; // $v0
  int v36; // $v0
  size_t v37; // $s3
  int v38; // $v0
  size_t v39; // $s3
  int v40; // $s7
  unsigned int v41; // $v0
  const char *name; // $s1
  char *value; // $s0
  int v44; // $s0
  char *v45; // $v0
  int v46; // $v0
  size_t v47; // $a2
  const char *v48; // $v0
  const char *v49; // $s0
  bool v50; // dc
  Curl_easy *v51; // $v0
  int v52; // $v0
  int v53; // $v0
  curl_off_t expires; // $v0
  time_t v55; // $a0
  unsigned int v56; // $a0
  int v57; // $v0
  const char *v58; // $s2
  char *v59; // $s2
  int v60; // $v0
  const char *v61; // $s0
  char *v62; // $a2
  char *v63; // $v0
  const char *v64; // $s1
  int v65; // $v0
  size_t v66; // $s0
  char *v67; // $a0
  char *v68; // $v0
  char *v69; // $v0
  char *v70; // $v0
  char *v71; // $a0
  char *v72; // $a1
  const char *spath; // $s3
  char *v74; // $s5
  char *v75; // $v0
  size_t v76; // $a2
  char *v77; // $a0
  char *v78; // $a1
  char *v79; // $a0
  char *v80; // $a1
  Cookie *v81; // $v0
  Cookie *v82; // $v1
  char *v83; // $a2
  char *v84; // $a1
  char *v85; // $a0
  Curl_easy *v86; // $v0
  __int64 v87; // $v0
  const char *v88; // $a2
  _BYTE *v90; // $v0
  int v91; // $v0
  int is_ipnum; // $s0
  char v93[4]; // [sp+30h] [-B8h] BYREF
  Curl_easy *dataa; // [sp+34h] [-B4h]
  const char *domain_0; // [sp+38h] [-B0h]
  time_t now; // [sp+3Ch] [-ACh]
  _BOOL4 v97; // [sp+40h] [-A8h]
  const char *v98; // [sp+44h] [-A4h]
  int badcookie; // [sp+48h] [-A0h]
  void (*v100)(Cookie *); // [sp+4Ch] [-9Ch]
  void (*v101)(Cookie *); // [sp+50h] [-98h]
  bool (*v102)(const char *, size_t, const char *); // [sp+54h] [-94h]
  time_t v103; // [sp+58h] [-90h]
  int v104; // [sp+5Ch] [-8Ch]
  char *tok_buf; // [sp+60h] [-88h] BYREF
  char date[128]; // [sp+64h] [-84h] BYREF

  dataa = data;
  v14 = (char *)lineptr;
  domain_0 = domain;
  v98 = path;
  v97 = secure;
  now = time(0u);
  if ( data->req.setcookies >= 0x32u )
    return 0;
  v15 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v15 )
    return 0;
  if ( !httpheader )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v14 = (char *)(lineptr + 10);
      v15->httponly = 1;
    }
    if ( *v14 != 35 )
    {
      v69 = strchr(v14, 13);
      if ( v69 )
        *v69 = 0;
      v70 = strchr(v14, 10);
      if ( v70 )
        *v70 = 0;
      if ( strtok_r(v14, "\t", &tok_buf) )
      {
        domain_0 = (const char *)freecookie;
        now = (time_t)sanitize_cookie_path;
        __asm { jr      $v0 }
      }
      freecookie(v15);
      return 0;
    }
LABEL_6:
    Curl_cfree(v15);
    return 0;
  }
  if ( strlen(lineptr) >= 0x1389 )
    goto LABEL_6;
  badcookie = 0;
  v100 = freecookie;
  v101 = freecookie;
  v103 = now >> 0x1F;
  v104 = 0x7FFFFFFF - (now >> 0x1F);
  v102 = cookie_tailmatch;
  while ( 1 )
  {
    v44 = *v14;
    if ( !*v14 )
      break;
    if ( v44 == 32 || v44 == 9 )
    {
      ++v14;
    }
    else
    {
      v18 = strcspn(v14, ";\t\r\n=");
      if ( v18 )
        goto LABEL_27;
      v59 = v14;
LABEL_121:
      v19 = badcookie;
      if ( v44 != 59 )
        goto LABEL_10;
      v14 = v59 + 1;
    }
  }
  v18 = strcspn(v14, ";\t\r\n=");
  if ( !v18 )
    goto LABEL_9;
LABEL_27:
  v30 = &v14[v18];
  v17 = 9;
  do
  {
    v31 = v18--;
    v32 = v14[v18];
    if ( v32 != 32 && v32 != 9 )
    {
      v18 = v31;
      if ( *v30 == 61 )
      {
        v33 = v30 + 1;
        goto LABEL_260;
      }
      v58 = v30;
      if ( v31 >= 0xFFF )
      {
        v18 = v31;
        v39 = 0;
        goto LABEL_52;
      }
      v18 = v31;
      v33 = 0;
      v40 = 0;
      v39 = 0;
LABEL_225:
      v41 = v18;
LABEL_226:
      if ( v41 >= 0x1001 )
      {
LABEL_52:
        freecookie(v15);
        if ( (*(_DWORD *)(&dataa->set.connect_only + 2) & 0x100000) != 0 )
          Curl_infof(dataa, "oversized cookie dropped, name/val %zu + %zu bytes", v18, v39);
        return 0;
      }
      if ( v18 >= 7 && v44 == 95 && v14[1] == 95 )
      {
        if ( curl_strnequal("__Secure-", v14, 9) )
        {
          v15->prefix |= 1u;
        }
        else if ( curl_strnequal("__Host-", v14, 7) )
        {
          v15->prefix |= 2u;
        }
      }
      if ( !v15->name )
      {
        if ( !v40 )
          goto LABEL_66;
        strstore(&v15->name, v14, v18);
        strstore(&v15->value, v33, v39);
        name = v15->name;
        v20 = v15;
        if ( !name )
          goto LABEL_67;
        value = v15->value;
        v17 = (int)freecookie;
        if ( !value )
          goto LABEL_67;
        if ( value[strcspn(v15->value, badoctets_0)] || name[strcspn(name, badoctets_0)] )
        {
          v17 = (int)freecookie;
          if ( (*(_DWORD *)(&dataa->set.connect_only + 2) & 0x100000) != 0 )
          {
            Curl_infof(dataa, "invalid octets in name/value, cookie dropped");
            v20 = v15;
            goto LABEL_67;
          }
          goto LABEL_66;
        }
        goto LABEL_77;
      }
      if ( !v39 )
      {
        if ( v18 == 6 )
        {
          if ( curl_strnequal("secure", v14, 6) )
          {
            if ( !v97 && c->running )
              goto LABEL_66;
            v15->secure = 1;
            goto LABEL_77;
          }
          if ( !v40 )
          {
            v44 = *v58;
LABEL_78:
            if ( v44 )
            {
              do
              {
                if ( v44 == 32 )
                {
                  ++v58;
                }
                else
                {
                  ++v58;
                  if ( v44 != 9 )
                  {
                    v59 = (char *)(v58 - 1);
                    goto LABEL_121;
                  }
                }
                v44 = *v58;
              }
              while ( *v58 );
            }
LABEL_9:
            v19 = badcookie;
LABEL_10:
            v20 = v15;
            if ( v19 )
              goto LABEL_67;
            if ( !v15->domain )
            {
              if ( domain_0 )
              {
                v60 = Curl_cstrdup(domain_0);
                v15->domain = (char *)v60;
                if ( !v60 )
                {
                  v20 = v15;
                  goto LABEL_67;
                }
              }
            }
            if ( v15->path
              || (v61 = v98, v17 = 63, !v98)
              || ((v62 = strchr(v98, 63)) == 0 ? (v63 = strrchr(v61, 47)) : (v63 = (char *)Curl_memrchr(
                                                                                             v98,
                                                                                             47,
                                                                                             v62 - v98)),
                  !v63) )
            {
LABEL_13:
              if ( v15->name )
              {
                ++dataa->req.setcookies;
                if ( (v15->prefix & 1) != 0 )
                {
                  if ( !v15->secure )
                    goto LABEL_174;
                  if ( (v15->prefix & 2) == 0 )
                  {
LABEL_20:
                    if ( c->running || !c->newsession || v15->expires )
                    {
                      v15->livecookie = c->running;
                      v25 = c->lastct + 1;
                      c->lastct = v25;
                      v15->creationtime = v25;
                      if ( !noexpire )
                        remove_expired(c);
                      v26 = &c->cookies[cookiehash(v15->domain)];
                      v27 = *v26;
                      livecookie = 0;
                      if ( *v26 )
                      {
                        v16 = 0;
                        v29 = 0;
                        while ( 1 )
                        {
                          if ( !curl_strequal(v27->name, v15->name) )
                            goto LABEL_157;
                          v71 = v27->domain;
                          if ( v71 )
                          {
                            v72 = v15->domain;
                            if ( !v72 || !curl_strequal(v71, v72) )
                              goto LABEL_157;
                          }
                          else if ( v15->domain )
                          {
                            goto LABEL_157;
                          }
                          spath = v27->spath;
                          if ( spath )
                          {
                            v74 = v15->spath;
                            if ( v74 )
                            {
                              if ( v27->secure && !v15->secure && !v97 )
                              {
                                v75 = strchr(spath + 1, 47);
                                v76 = v75 ? v75 - spath : strlen(spath);
                                if ( curl_strnequal(spath, v74, v76) )
                                {
                                  if ( (*(_DWORD *)(&dataa->set.connect_only + 2) & 0x100000) != 0 )
                                    Curl_infof(
                                      dataa,
                                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                                      v15->name,
                                      v15->domain);
                                  goto LABEL_174;
                                }
                              }
                            }
                          }
LABEL_157:
                          if ( v29 || !curl_strequal(v27->name, v15->name) )
                            goto LABEL_158;
                          v77 = v27->domain;
                          if ( !v77 )
                          {
                            if ( v15->domain )
                            {
LABEL_183:
                              v50 = livecookie == 0;
                              livecookie = 0;
                              if ( v50 )
                                goto LABEL_158;
                            }
                            v79 = v27->spath;
                            goto LABEL_185;
                          }
                          v78 = v15->domain;
                          if ( !v78 || !curl_strequal(v77, v78) || v27->tailmatch != v15->tailmatch )
                            goto LABEL_183;
                          v79 = v27->spath;
LABEL_185:
                          if ( v79 )
                          {
                            v80 = v15->spath;
                            if ( !v80 )
                            {
                              livecookie = 0;
                              goto LABEL_158;
                            }
                            livecookie = 0;
                            if ( !curl_strequal(v79, v80) )
                              goto LABEL_158;
                          }
                          livecookie = 0;
                          if ( (v27->spath == 0) == (v15->spath == 0) )
                          {
                            livecookie = v15->livecookie;
                            if ( v15->livecookie )
                            {
                              v16 = v27;
                              v29 = v15;
                            }
                            else
                            {
                              livecookie = 1;
                              if ( v27->livecookie )
                                goto LABEL_174;
                              v16 = v27;
                              v29 = v15;
                            }
                          }
LABEL_158:
                          if ( !v27->next )
                          {
                            if ( v29 )
                            {
                              v29->next = v16->next;
                              v29->creationtime = v16->creationtime;
                              Curl_cfree(v16->name);
                              Curl_cfree(v16->value);
                              Curl_cfree(v16->domain);
                              Curl_cfree(v16->path);
                              Curl_cfree(v16->spath);
                              v81 = v29;
                              v82 = v16;
                              do
                              {
                                v83 = v81->name;
                                v84 = v81->value;
                                v85 = v81->path;
                                v82->next = v81->next;
                                v82->name = v83;
                                v82->value = v84;
                                v82->path = v85;
                                v81 = (Cookie *)((char *)v81 + 16);
                                v82 = (Cookie *)((char *)v82 + 16);
                              }
                              while ( v81 != &v29[1] );
                              Curl_cfree(v29);
                            }
                            else
                            {
                              v16 = v15;
                            }
                            v86 = dataa;
                            if ( !c->running )
                              goto LABEL_199;
                            goto LABEL_249;
                          }
                          v27 = v27->next;
                        }
                      }
                      v16 = v15;
                      if ( !c->running )
                        goto LABEL_253;
                      livecookie = 0;
                      v86 = dataa;
LABEL_249:
                      if ( (*(_DWORD *)(&v86->set.connect_only + 2) & 0x100000) != 0 )
                      {
                        if ( livecookie )
                          v88 = "Replaced";
                        else
                          v88 = "Added";
                        Curl_infof(
                          dataa,
                          "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
                          v88,
                          v16->name,
                          v16->value,
                          v16->domain,
                          v16->path,
                          v16->expires);
                      }
LABEL_199:
                      if ( livecookie )
                        goto LABEL_200;
                      if ( v27 )
                        v27->next = v16;
                      else
LABEL_253:
                        *v26 = v16;
                      ++c->numcookies;
LABEL_200:
                      HIDWORD(v87) = v16->expires;
                      LODWORD(v87) = HIDWORD(v16->expires);
                      if ( v87 && __SPAIR64__(v87, HIDWORD(v87)) < c->next_expiration )
                      {
                        LODWORD(c->next_expiration) = HIDWORD(v87);
                        HIDWORD(c->next_expiration) = v87;
                      }
                      return v16;
                    }
LABEL_174:
                    freecookie(v15);
                    return 0;
                  }
                }
                else
                {
                  if ( (v15->prefix & 2) == 0 )
                    goto LABEL_20;
                  if ( !v15->secure )
                    goto LABEL_152;
                }
                v21 = v15->path;
                if ( v21 )
                {
                  v22 = strcmp(v21, "/");
                  v23 = v15;
                  if ( !v22 )
                  {
                    v24 = (void (*)(Cookie *))MEMORY[0xB810];
                    if ( !v15->tailmatch )
                      goto LABEL_20;
LABEL_154:
                    ((void (*)(Cookie *))((char *)v24 + (__int16)freecookie))(v23);
                    return 0;
                  }
LABEL_153:
                  v24 = freecookie;
                  goto LABEL_154;
                }
LABEL_152:
                v23 = v15;
                goto LABEL_153;
              }
              goto LABEL_66;
            }
            v64 = v98;
            v65 = v63 - v98;
            v66 = v65 + 1;
            v67 = (char *)Curl_cmalloc(v65 + 2);
            v15->path = v67;
            if ( v67 )
            {
              memcpy(v67, v64, v66);
              v15->path[v66] = 0;
              v68 = sanitize_cookie_path(v15->path);
              v15->spath = v68;
              if ( !v68 )
              {
                v20 = v15;
                goto LABEL_67;
              }
              goto LABEL_13;
            }
LABEL_66:
            v20 = v15;
LABEL_67:
            ((void (__fastcall *)(Cookie *, int))freecookie)(v20, v17);
            return 0;
          }
LABEL_235:
          if ( v18 == 6 )
          {
            if ( !curl_strnequal("domain", v14, 6) || !v39 )
              goto LABEL_77;
            if ( *v33 == 46 )
            {
              ++v33;
              --v39;
            }
            v47 = v39;
            if ( v39 == 9 )
            {
              v46 = curl_strnequal(v33, "localhost", 9);
              v47 = 9;
              if ( v46 )
              {
                v48 = domain_0;
                goto LABEL_243;
              }
            }
            v90 = memchr(v33, 46, v47);
            v50 = v90 == 0;
            v91 = v90 - v33;
            if ( v50 )
            {
              domain_0 = ":";
            }
            else
            {
              v50 = v39 - v91 < 2;
              v48 = domain_0;
              if ( !v50 )
              {
LABEL_243:
                if ( !v48 )
                {
                  is_ipnum = Curl_host_is_ipnum(v33);
                  strstore(&v15->domain, v33, v39);
                  v20 = v15;
                  if ( !v15->domain )
                    goto LABEL_67;
                  if ( !is_ipnum )
                    v15->tailmatch = 1;
                  goto LABEL_77;
                }
                goto LABEL_213;
              }
              domain_0 = ":";
            }
LABEL_213:
            if ( Curl_host_is_ipnum(domain_0) )
            {
              v49 = domain_0;
              v50 = strncmp(v33, domain_0, v39) != 0;
              v51 = dataa;
              if ( !v50 )
              {
                v50 = strlen(v49) != v39;
                v51 = dataa;
                if ( !v50 )
                {
                  strstore(&v15->domain, v33, v39);
                  if ( !v15->domain )
                  {
                    ((void (__fastcall *)(Cookie *, int))(MEMORY[0xB810] + (__int16)freecookie))(v15, v17);
                    return 0;
                  }
                  goto LABEL_77;
                }
              }
            }
            else
            {
              if ( ((int (__fastcall *)(const char *, size_t, const char *))v102)(v33, v39, domain_0) )
              {
                strstore(&v15->domain, v33, v39);
                if ( !v15->domain )
                  goto LABEL_66;
                v15->tailmatch = 1;
                goto LABEL_77;
              }
              v51 = dataa;
            }
            if ( (*(_DWORD *)(&v51->set.connect_only + 2) & 0x100000) != 0 )
              Curl_infof(dataa, "skipped cookie with bad tailmatch domain: %s", v33);
            badcookie = httpheader;
            goto LABEL_77;
          }
LABEL_76:
          if ( v18 != 7 || curl_strnequal((char *)v100 + 0x3548, v14, 7) )
            goto LABEL_77;
          if ( !curl_strnequal((char *)v101 + 0x35DC, v14, 7) )
          {
            if ( curl_strnequal("expires", v14, 7) && !v15->expires && v39 < 0x80 )
            {
              memcpy(date, v33, v39);
              v93[v39 + 0x34] = 0;
              v52 = Curl_getdate_capped(date);
              if ( v52 )
              {
                if ( v52 >> 0x1F == -1 )
                {
                  LODWORD(v15->expires) = 0;
                  HIDWORD(v15->expires) = 0;
                }
                else
                {
                  v15->expires = v52;
                }
              }
              else
              {
                LODWORD(v15->expires) = 1;
                HIDWORD(v15->expires) = 0;
              }
            }
            goto LABEL_77;
          }
          if ( *v33 == 34 )
            ++v33;
          v53 = curlx_strtoofft(v33, 0, 10, &v15->expires);
          switch ( v53 )
          {
            case 1:
              LODWORD(v15->expires) = -1;
              HIDWORD(v15->expires) = 0x7FFFFFFF;
              break;
            case 2:
              LODWORD(v15->expires) = 1;
              HIDWORD(v15->expires) = 0;
              break;
            case 0:
              expires = v15->expires;
              if ( !expires )
              {
                LODWORD(v15->expires) = 1;
                HIDWORD(v15->expires) = 0;
                break;
              }
              v17 = v104 < SHIDWORD(expires);
              if ( v104 >= SHIDWORD(expires) )
              {
                if ( HIDWORD(expires) == v104 )
                {
                  v55 = now;
                  if ( ~now < (unsigned int)expires )
                    goto LABEL_110;
                }
                else
                {
                  v55 = now;
                }
                v56 = expires + v55;
                v17 = v103;
                v57 = (v56 < (unsigned int)expires) + HIDWORD(expires) + v103;
                LODWORD(v15->expires) = v56;
                HIDWORD(v15->expires) = v57;
                break;
              }
LABEL_110:
              LODWORD(v15->expires) = -1;
              HIDWORD(v15->expires) = 0x7FFFFFFF;
              break;
          }
LABEL_77:
          v44 = *v58;
          goto LABEL_78;
        }
        if ( v18 == 8 )
        {
          if ( curl_strnequal("httponly", v14, 8) )
          {
            v15->httponly = 1;
            goto LABEL_77;
          }
          if ( !v40 )
            goto LABEL_77;
          goto LABEL_76;
        }
        if ( !v40 )
          goto LABEL_77;
      }
      if ( v18 == 4 )
      {
        if ( curl_strnequal("path", v14, 4) )
        {
          strstore(&v15->path, v33, v39);
          if ( !v15->path )
            goto LABEL_66;
          Curl_cfree(v15->spath);
          v45 = sanitize_cookie_path(v15->path);
          v15->spath = v45;
          if ( !v45 )
          {
            v20 = v15;
            goto LABEL_67;
          }
        }
        goto LABEL_77;
      }
      goto LABEL_235;
    }
  }
  while ( v18 );
  v39 = 0;
  if ( *v30 != 61 )
  {
    v58 = v30;
    v33 = 0;
    v40 = 0;
    goto LABEL_225;
  }
  v33 = v30 + 1;
LABEL_260:
  v34 = strcspn(v33, ";\r\n");
  v58 = &v33[v34];
  if ( !v34 )
  {
LABEL_222:
    v35 = v18 < 0xFFF;
LABEL_223:
    v40 = httpheader;
    if ( !v35 )
    {
      v39 = 0;
      goto LABEL_52;
    }
    v39 = 0;
    goto LABEL_225;
  }
  while ( 2 )
  {
    v36 = v30[v34];
    if ( v36 == 32 )
    {
      --v34;
      goto LABEL_34;
    }
    --v34;
    if ( v36 == 9 )
    {
LABEL_34:
      v35 = v18 < 0xFFF;
      if ( !v34 )
        goto LABEL_223;
      continue;
    }
    break;
  }
  v37 = v34 + 1;
  if ( !v37 )
    goto LABEL_222;
  while ( 1 )
  {
    v38 = *v33;
    if ( v38 != 32 )
      break;
    --v37;
LABEL_40:
    ++v33;
    if ( !v37 )
      goto LABEL_222;
  }
  --v37;
  if ( v38 == 9 )
    goto LABEL_40;
  v39 = v37 + 1;
  if ( !memchr(v33, 9, v39) )
  {
    if ( v18 < 0xFFF )
    {
      v40 = httpheader;
      if ( v39 < 0xFFF )
      {
        v41 = v18 + v39;
        goto LABEL_226;
      }
    }
    goto LABEL_52;
  }
  freecookie(v15);
  if ( (*(_DWORD *)(&dataa->set.connect_only + 2) & 0x100000) != 0 )
    Curl_infof(dataa, "cookie contains TAB, dropping");
  return 0;
}
