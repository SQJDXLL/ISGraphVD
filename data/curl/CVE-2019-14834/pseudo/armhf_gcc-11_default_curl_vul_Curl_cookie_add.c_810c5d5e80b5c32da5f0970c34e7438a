Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v9; // r7
  time_t v10; // r0
  unsigned int setcookies; // r3
  Cookie *v12; // r9
  bool v13; // zf
  size_t v14; // r6
  int v15; // r5
  char *v16; // r10
  char *v17; // r2
  int v18; // r4
  int v19; // t1
  size_t v20; // r3
  bool v21; // zf
  size_t running; // r4
  unsigned __int8 *v23; // r11
  size_t v24; // r0
  unsigned __int8 *v25; // r1
  size_t v26; // r8
  int v27; // r2
  int v28; // t1
  bool v29; // zf
  _BOOL4 v30; // r2
  int v31; // r3
  _BOOL4 v32; // r3
  bool v33; // zf
  int v34; // t1
  _BOOL4 v35; // r3
  _BOOL4 v36; // r3
  unsigned __int8 prefix; // r3
  char *v38; // r3
  CookieInfo *v39; // r2
  int lastct; // r3
  size_t v41; // r0
  Cookie *v42; // r5
  size_t v43; // r10
  int livecookie; // r7
  Cookie *v45; // r6
  char *v46; // r0
  char *v47; // r1
  const char *spath; // r8
  char *v49; // r11
  char *v50; // r0
  char *v51; // r1
  char *v52; // r0
  char *v53; // r1
  _BOOL4 v54; // r5
  char *v55; // r0
  int v56; // r3
  int v57; // r2
  char *v58; // r10
  int v59; // r10
  char *v60; // r0
  int v61; // r3
  int v62; // r1
  char *v64; // r0
  char *v65; // r0
  int v66; // r5
  int v67; // r5
  char *v68; // r0
  bool v69; // zf
  int v70; // r0
  int (__fastcall *v71)(char *); // r11
  const char *v72; // r0
  char *v73; // r5
  char *v74; // r0
  bool v75; // zf
  int v76; // r0
  int (__fastcall *v77)(const char *); // r1
  int v78; // r11
  int v79; // r0
  unsigned __int8 *v80; // r1
  int v81; // r4
  bool v82; // zf
  int v83; // r0
  bool v84; // zf
  _BYTE *v85; // r0
  const char *v86; // r6
  int is_ipnum; // r5
  int v88; // r0
  int v89; // r0
  char *v90; // r0
  int v91; // r5
  char *v92; // r0
  bool v93; // zf
  int v94; // r0
  int v95; // r0
  char v96; // r3
  const char *name; // r4
  char *value; // r5
  const char *v99; // r0
  int v100; // r0
  __int64 v101; // r2
  bool v102; // cf
  bool v103; // zf
  void *v104; // r0
  int v105; // r0
  curl_off_t v106; // r2
  Cookie *v107; // r0
  Cookie *v108; // r1
  Cookie *v109; // r2
  Cookie *v110; // r3
  void (__fastcall *v111)(Cookie *); // r8
  Cookie *v112; // r1
  Cookie *expires; // r2
  Cookie *expires_high; // r3
  Cookie *creationtime; // r1
  Cookie *v116; // r2
  Cookie *v117; // r3
  curl_off_t v118; // r2
  CookieInfo *v119; // r12
  int v120; // r0
  char *v121; // r0
  size_t v122; // r2
  const char *v123; // r4
  char *v124; // r0
  char *v125; // r0
  const char *v126; // r5
  int v127; // r4
  char *v128; // r0
  size_t v129; // r4
  char *v130; // r0
  int v131; // r0
  int v132; // [sp+0h] [bp-100h] BYREF
  CookieInfo *ca; // [sp+1Ch] [bp-E4h]
  CookieInfo *cookies; // [sp+24h] [bp-DCh]
  Curl_easy *v135; // [sp+28h] [bp-D8h]
  time_t now; // [sp+2Ch] [bp-D4h]
  _BOOL4 v137; // [sp+30h] [bp-D0h]
  time_t v138; // [sp+34h] [bp-CCh]
  _BOOL4 v139; // [sp+38h] [bp-C8h]
  const char *badcookie; // [sp+3Ch] [bp-C4h]
  char *reject; // [sp+40h] [bp-C0h]
  int v142; // [sp+44h] [bp-BCh]
  time_t v143; // [sp+48h] [bp-B8h]
  unsigned int v144; // [sp+4Ch] [bp-B4h]
  char *tok_buf; // [sp+50h] [bp-B0h] BYREF
  char date[128]; // [sp+54h] [bp-ACh] BYREF

  ca = (CookieInfo *)httpheader;
  v139 = noexpire;
  v135 = data;
  cookies = c;
  now = (time_t)domain;
  v9 = (char *)lineptr;
  badcookie = path;
  v137 = secure;
  v10 = time(0u);
  setcookies = data->req.setcookies;
  v138 = v10;
  if ( setcookies > 0x31 )
    return 0;
  v12 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v12 )
    return 0;
  if ( !ca )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v9 = (char *)(lineptr + 0xA);
      v12->httponly = 1;
    }
    if ( *v9 == 35 )
    {
      Curl_cfree(v12);
      return 0;
    }
    v64 = strchr(v9, 13);
    if ( v64 )
      *v64 = 0;
    v65 = strchr(v9, 10);
    if ( v65 )
      *v65 = 0;
    v58 = strtok_r(v9, "\t", &tok_buf);
    if ( !v58 )
      goto LABEL_115;
    v66 = 0;
    now = (time_t)"__Host-";
    while ( 1 )
    {
      switch ( v66 )
      {
        case 0:
          if ( *v58 == 46 )
            ++v58;
          v67 = Curl_cstrdup(v58);
          v12->domain = (char *)v67;
          v68 = strtok_r(0u, "\t", &tok_buf);
          v69 = v68 == 0;
          if ( v68 )
            v69 = v67 == 0;
          v58 = v68;
          v54 = v67 == 0;
          if ( !v69 )
            goto LABEL_133;
          LOBYTE(v56) = !v54;
          goto LABEL_142;
        case 1:
LABEL_133:
          v12->tailmatch = curl_strequal(v58, "TRUE") != 0;
          v58 = strtok_r(0u, "\t", &tok_buf);
          if ( !v58 )
            goto LABEL_115;
          goto LABEL_134;
        case 2:
LABEL_134:
          v70 = strcmp("TRUE", v58);
          v71 = (int (__fastcall *)(char *))Curl_cstrdup;
          if ( v70 && strcmp("FALSE", v58) )
          {
            v72 = (const char *)v71(v58);
            v12->path = (char *)v72;
            if ( !v72 )
              goto LABEL_228;
            v73 = sanitize_cookie_path(v72);
            v12->spath = v73;
            v74 = strtok_r(0u, "\t", &tok_buf);
            v75 = v73 == 0;
            if ( v73 )
              v75 = v74 == 0;
            v58 = v74;
            v54 = v73 == 0;
            if ( v75 )
            {
              LOBYTE(v56) = !v54;
LABEL_142:
              if ( (v56 & 1) == 0 )
              {
LABEL_143:
                if ( !v54 )
                {
                  prefix = v12->prefix;
                  if ( (prefix & 1) != 0 )
                    goto LABEL_62;
                  goto LABEL_145;
                }
              }
LABEL_115:
              freecookie(v12);
              return 0;
            }
LABEL_100:
            v54 = 0;
LABEL_101:
            v12->secure = 0;
            if ( !curl_strequal(v58, "TRUE") )
              goto LABEL_102;
            goto LABEL_226;
          }
          ca = (CookieInfo *)"/";
          v76 = v71("/");
          v77 = (int (__fastcall *)(const char *))Curl_cstrdup;
          v78 = v76;
          v12->path = (char *)v76;
          v79 = v77("/");
          v12->spath = (char *)v79;
          if ( v79 )
          {
            v54 = v78 == 0;
            goto LABEL_101;
          }
          v12->secure = 0;
          if ( !curl_strequal(v58, "TRUE") )
          {
            strtok_r(0u, "\t", &tok_buf);
            LOBYTE(v56) = 0;
            v54 = 1;
            goto LABEL_142;
          }
          v54 = 1;
LABEL_226:
          if ( !v137 && !cookies->running )
          {
LABEL_228:
            strtok_r(0u, "\t", &tok_buf);
            goto LABEL_115;
          }
          v12->secure = 1;
LABEL_102:
          v55 = strtok_r(0u, "\t", &tok_buf);
          LOBYTE(v56) = !v54;
          if ( v55 )
            v57 = v56 & 1;
          else
            v57 = 0;
          v58 = v55;
          if ( !v57 )
            goto LABEL_142;
LABEL_106:
          v59 = curlx_strtoofft(v58, 0, 10, &v12->expires);
          v54 = v59;
          if ( v59 )
            v54 = 1;
          v60 = strtok_r(0u, "\t", &tok_buf);
          v61 = (int)v60;
          if ( v60 )
            v61 = 1;
          if ( v59 )
            v61 = 0;
          v58 = v60;
          if ( !v61 )
          {
            v56 = !v54;
            goto LABEL_142;
          }
LABEL_113:
          v62 = Curl_cstrdup(v58);
          v12->name = (char *)v62;
          if ( !v62 )
          {
            strtok_r(0u, "\t", &tok_buf);
            v12->value = (char *)Curl_cstrdup(&LC1);
            goto LABEL_115;
          }
          if ( curl_strnequal("__Secure-", v62, 9) )
          {
            v12->prefix |= 1u;
            v58 = strtok_r(0u, "\t", &tok_buf);
            if ( !v58 )
              goto LABEL_280;
          }
          else if ( curl_strnequal(now, v12->name, 7) )
          {
            v12->prefix |= 2u;
            v58 = strtok_r(0u, "\t", &tok_buf);
            if ( !v58 )
            {
LABEL_280:
              v120 = Curl_cstrdup(&LC1);
              v12->value = (char *)v120;
              if ( v120 )
                goto LABEL_61;
              goto LABEL_115;
            }
          }
          else
          {
            v58 = strtok_r(0u, "\t", &tok_buf);
            if ( !v58 )
              goto LABEL_280;
          }
LABEL_205:
          v91 = Curl_cstrdup(v58);
          v12->value = (char *)v91;
          v92 = strtok_r(0u, "\t", &tok_buf);
          v93 = v92 == 0;
          if ( v92 )
            v93 = v91 == 0;
          v54 = v91 == 0;
          if ( v93 )
            goto LABEL_143;
          v66 = 7;
LABEL_209:
          ++v66;
          v58 = strtok_r(0u, "\t", &tok_buf);
          if ( !v58 )
            goto LABEL_115;
          break;
        case 3:
          goto LABEL_100;
        case 4:
          goto LABEL_106;
        case 5:
          goto LABEL_113;
        case 6:
          goto LABEL_205;
        default:
          goto LABEL_209;
      }
    }
  }
  if ( strlen(lineptr) > (unsigned int)&loc_1388 )
  {
    running = 0;
    Curl_cfree(v12);
    return (Cookie *)running;
  }
  v144 = 0x7FFFFFFF - (v138 >> 0x1F);
  v142 = 0;
  v143 = v138 >> 31;
  while ( 1 )
  {
    v15 = (unsigned __int8)*v9;
    if ( !*v9 )
      break;
    v13 = v15 == 9;
    if ( v15 != 9 )
      v13 = v15 == 32;
    if ( v13 )
      goto LABEL_11;
    v14 = strcspn(v9, ";\t\r\n=");
    if ( v14 )
      goto LABEL_14;
LABEL_10:
    if ( v15 != 59 )
      goto LABEL_52;
LABEL_11:
    ++v9;
  }
  v14 = strcspn(v9, ";\t\r\n=");
  if ( !v14 )
    goto LABEL_52;
LABEL_14:
  v16 = &v9[v14];
  v17 = &v9[v14];
  while ( 1 )
  {
    v19 = (unsigned __int8)*--v17;
    v18 = v19;
    v20 = v14;
    v21 = v19 == 9;
    if ( v19 != 9 )
      v21 = v18 == 32;
    running = v21;
    --v14;
    if ( !v21 )
      break;
    if ( !v14 )
    {
      if ( *v16 == 61 )
      {
LABEL_24:
        v23 = (unsigned __int8 *)(v16 + 1);
        v24 = strcspn(v16 + 1, ";\r\n");
        v25 = (unsigned __int8 *)&v16[v24 + 1];
        v26 = v24;
        v16 += v24 + 1;
        while ( 1 )
        {
          if ( !v26 )
          {
            running = (size_t)ca;
            v30 = 0;
            goto LABEL_32;
          }
          v28 = *--v25;
          v27 = v28;
          v29 = v28 == 9;
          if ( v28 != 9 )
            v29 = v27 == 32;
          if ( !v29 )
            break;
          --v26;
        }
        v30 = 0;
        v80 = v23;
        while ( 1 )
        {
          v81 = *v80;
          v23 = v80;
          v82 = v81 == 9;
          if ( v81 != 9 )
            v82 = v81 == 32;
          running = v82;
          ++v80;
          if ( !v82 )
            break;
          --v26;
          v23 = v80;
          if ( !v26 )
            goto LABEL_32;
        }
        if ( !memchr(v23, 9, v26) )
        {
          running = (size_t)ca;
          v30 = v26 > 0xFFE;
          goto LABEL_32;
        }
        freecookie(v12);
        if ( (*(&v135->set.connect_only + 4) & 0x10) != 0 )
        {
          Curl_infof(v135, "cookie contains TAB, dropping");
          return (Cookie *)running;
        }
        return 0;
      }
      if ( !v12->name )
      {
LABEL_147:
        freecookie(v12);
        return 0;
      }
      goto LABEL_45;
    }
  }
  v14 = v20;
  if ( *v16 == 61 )
    goto LABEL_24;
  v30 = running;
  v23 = (unsigned __int8 *)running;
  v26 = running;
LABEL_32:
  if ( v14 > 0xFFE )
    v31 = v30 | 1;
  else
    v31 = v30;
  if ( v31 || v26 + v14 > 0x1000 )
  {
    freecookie(v12);
    if ( (*(&v135->set.connect_only + 4) & 0x10) != 0 )
      Curl_infof(v135, "oversized cookie dropped, name/val %zu + %zu bytes", v14, v26);
    return 0;
  }
  v32 = v14 > 6;
  if ( v15 != 95 )
    v32 = 0;
  if ( v32 && v9[1] == 95 )
  {
    if ( curl_strnequal("__Secure-", v9, 9) )
    {
      v12->prefix |= 1u;
    }
    else if ( curl_strnequal("__Host-", v9, 7) )
    {
      v12->prefix |= 2u;
    }
  }
  if ( !v12->name )
  {
    if ( !running )
      goto LABEL_147;
    Curl_cfree(v12->name);
    v94 = Curl_memdup(v9, v14 + 1);
    v12->name = (char *)v94;
    if ( v94 )
      *(_BYTE *)(v94 + v14) = 0;
    Curl_cfree(v12->value);
    v95 = Curl_memdup(v23, v26 + 1);
    if ( v95 )
      v96 = 0;
    v12->value = (char *)v95;
    if ( v95 )
      *(_BYTE *)(v95 + v26) = v96;
    name = v12->name;
    if ( !name )
      goto LABEL_147;
    value = v12->value;
    if ( !value )
      goto LABEL_147;
    v99 = v12->value;
    reject = badoctets_0;
    if ( value[strcspn(v99, badoctets_0)] || name[strcspn(name, reject)] )
    {
      if ( (*(&v135->set.connect_only + 4) & 0x10) != 0 )
        Curl_infof(v135, "invalid octets in name/value, cookie dropped");
      goto LABEL_147;
    }
    goto LABEL_45;
  }
  if ( v26 )
  {
    if ( v14 == 4 )
      goto LABEL_193;
  }
  else
  {
    if ( v14 == 6 )
    {
      if ( curl_strnequal("secure", v9, 6) )
      {
        if ( !v137 && cookies->running )
          goto LABEL_147;
        v9 = v16;
        v12->secure = 1;
        goto LABEL_46;
      }
      if ( !running )
        goto LABEL_45;
LABEL_163:
      v83 = curl_strnequal("domain", v9, 6);
      v84 = v26 == 0;
      if ( v26 )
        v84 = v83 == 0;
      if ( v84 )
        goto LABEL_45;
      if ( *v23 == 46 )
      {
        --v26;
        ++v23;
      }
      if ( v26 != 9 || !curl_strnequal(v23, "localhost", 9) )
      {
        v85 = memchr(v23, 46, v26);
        if ( !v85 )
        {
          now = (time_t)":";
          goto LABEL_174;
        }
        if ( v26 - (v85 - v23) <= 1 )
        {
          now = (time_t)":";
          goto LABEL_174;
        }
      }
      if ( !now )
      {
        is_ipnum = Curl_host_is_ipnum(v23);
        goto LABEL_183;
      }
LABEL_174:
      v86 = (const char *)now;
      is_ipnum = Curl_host_is_ipnum(now);
      if ( is_ipnum )
      {
        if ( !strncmp((const char *)v23, v86, v26) && strlen(v86) == v26 )
          goto LABEL_183;
      }
      else if ( cookie_tailmatch((const char *)v23, v26, (const char *)now) )
      {
LABEL_183:
        Curl_cfree(v12->domain);
        v88 = Curl_memdup(v23, v26 + 1);
        v12->domain = (char *)v88;
        if ( !v88 )
          goto LABEL_147;
        *(_BYTE *)(v88 + v26) = 0;
        if ( !v12->domain )
          goto LABEL_147;
        if ( is_ipnum )
          goto LABEL_45;
        v9 = v16;
        v12->tailmatch = 1;
        goto LABEL_46;
      }
      if ( (*(&v135->set.connect_only + 4) & 0x10) != 0 )
      {
        v142 = 1;
        v9 = v16;
        Curl_infof(v135, "skipped cookie with bad tailmatch domain: %s", (const char *)v23);
      }
      else
      {
        v9 = v16;
        v142 = 1;
      }
      goto LABEL_46;
    }
    if ( v14 == 8 )
    {
      if ( !curl_strnequal("httponly", v9, 8) )
        goto LABEL_45;
      v9 = v16;
      v12->httponly = 1;
      goto LABEL_46;
    }
    if ( !running )
      goto LABEL_45;
    if ( v14 == 4 )
    {
LABEL_193:
      if ( curl_strnequal("path", v9, v14) )
      {
        Curl_cfree(v12->path);
        v89 = Curl_memdup(v23, v26 + 1);
        v12->path = (char *)v89;
        if ( !v89 )
          goto LABEL_147;
        *(_BYTE *)(v89 + v26) = 0;
        if ( !v12->path )
          goto LABEL_147;
        Curl_cfree(v12->spath);
        v90 = sanitize_cookie_path(v12->path);
        v12->spath = v90;
        if ( !v90 )
          goto LABEL_147;
      }
      goto LABEL_45;
    }
  }
  if ( v14 == 6 )
    goto LABEL_163;
  if ( v14 != 7 || curl_strnequal("version", v9, 7) )
    goto LABEL_45;
  if ( !curl_strnequal("max-age", v9, 7) )
  {
    if ( curl_strnequal("expires", v9, 7) )
    {
      v103 = v26 == 127;
      if ( v26 <= 0x7F )
        v103 = v12->expires == 0;
      if ( v103 )
      {
        v104 = memcpy(date, v23, v26);
        *((_BYTE *)&v132 + v26 + 0x54) = 0;
        v105 = Curl_getdate_capped(v104);
        HIDWORD(v106) = v105 >> 31;
        if ( v105 )
        {
          if ( v105 >= 0 )
          {
            LODWORD(v12->expires) = v105;
            HIDWORD(v12->expires) = HIDWORD(v106);
          }
          else
          {
            v106 = 0LL;
          }
          if ( v105 >> 31 == -1 )
            v12->expires = v106;
        }
        else
        {
          v12->expires = 1LL;
        }
      }
    }
LABEL_45:
    v9 = v16;
    goto LABEL_46;
  }
  if ( *v23 == 34 )
    ++v23;
  v100 = curlx_strtoofft(v23, 0, 10, &v12->expires);
  if ( v100 == 1 )
    goto LABEL_295;
  if ( v100 == 2 )
    goto LABEL_288;
  if ( v100 )
    goto LABEL_45;
  HIDWORD(v101) = v12->expires;
  LODWORD(v101) = HIDWORD(v12->expires);
  if ( !v101 )
  {
LABEL_288:
    v9 = v16;
    v12->expires = 1LL;
    goto LABEL_46;
  }
  if ( __SPAIR64__(v144, ~v138) < __SPAIR64__(v101, HIDWORD(v101)) )
  {
LABEL_295:
    v9 = v16;
    v12->expires = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_46;
  }
  v9 = v16;
  v102 = __CFADD__(HIDWORD(v101), v138);
  LODWORD(v12->expires) = HIDWORD(v101) + v138;
  HIDWORD(v12->expires) = v143 + v102 + (_DWORD)v101;
LABEL_46:
  v15 = (unsigned __int8)*v16;
  if ( *v16 )
  {
    do
    {
      v33 = v15 == 9;
      if ( v15 != 9 )
        v33 = v15 == 32;
      if ( !v33 )
        goto LABEL_10;
      v34 = (unsigned __int8)*++v9;
      v15 = v34;
    }
    while ( v34 );
  }
LABEL_52:
  if ( v142 )
    goto LABEL_147;
  v35 = v12->domain == 0;
  if ( !now )
    v35 = 0;
  if ( v35 )
  {
    v131 = Curl_cstrdup(now);
    v12->domain = (char *)v131;
    if ( !v131 )
      goto LABEL_147;
  }
  v36 = v12->path == 0;
  if ( !badcookie )
    v36 = 0;
  if ( v36 )
  {
    v123 = badcookie;
    v124 = strchr(badcookie, 63);
    v125 = v124 ? (char *)Curl_memrchr(badcookie, 47, v124 - badcookie) : strrchr(v123, 47);
    if ( v125 )
    {
      v126 = badcookie;
      v127 = v125 - badcookie;
      v128 = (char *)Curl_cmalloc(v125 - badcookie + 2);
      v129 = v127 + 1;
      v12->path = v128;
      if ( !v128 )
        goto LABEL_147;
      memcpy(v128, v126, v129);
      v12->path[v129] = 0;
      v130 = sanitize_cookie_path(v12->path);
      v12->spath = v130;
      if ( !v130 )
        goto LABEL_147;
    }
  }
  if ( !v12->name )
    goto LABEL_147;
  ++v135->req.setcookies;
LABEL_61:
  prefix = v12->prefix;
  if ( (prefix & 1) != 0 )
  {
LABEL_62:
    running = v12->secure;
    if ( v12->secure )
    {
      if ( (prefix & 2) != 0 )
        goto LABEL_64;
      goto LABEL_68;
    }
    goto LABEL_302;
  }
LABEL_145:
  if ( (prefix & 2) != 0 )
  {
    if ( !v12->secure )
      goto LABEL_147;
LABEL_64:
    v38 = v12->path;
    if ( !v38 || *v38 != 47 || v38[1] || v12->tailmatch )
      goto LABEL_147;
  }
LABEL_68:
  running = cookies->running;
  if ( !cookies->running && cookies->newsession && !v12->expires )
  {
LABEL_302:
    freecookie(v12);
    return (Cookie *)running;
  }
  v39 = cookies;
  v13 = !v139;
  lastct = cookies->lastct;
  v12->livecookie = running;
  v39->lastct = ++lastct;
  v12->creationtime = lastct;
  if ( v13 )
    remove_expired(v39);
  v41 = cookiehash(v12->domain);
  v42 = cookies->cookies[v41];
  v43 = v41;
  if ( !v42 )
  {
    if ( cookies->running )
    {
      running = (size_t)v12;
      if ( (*(&v135->set.connect_only + 4) & 0x10) != 0 )
      {
LABEL_291:
        Curl_infof(
          v135,
          "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
          "Added",
          *(const char **)(running + 4),
          *(const char **)(running + 8),
          *(const char **)(running + 20),
          *(const char **)(running + 12),
          *(_QWORD *)(running + 0x18));
        if ( v42 )
        {
LABEL_263:
          v42->next = (Cookie *)running;
LABEL_264:
          ++cookies->numcookies;
          goto LABEL_265;
        }
      }
    }
    else
    {
      running = (size_t)v12;
    }
    cookies->cookies[v43] = (Cookie *)running;
    goto LABEL_264;
  }
  livecookie = 0;
  running = 0;
  v45 = 0;
  while ( 1 )
  {
    if ( !curl_strequal(v42->name, v12->name) )
      goto LABEL_85;
    v46 = v42->domain;
    v47 = v12->domain;
    if ( v46 )
    {
      if ( !v47 || !curl_strequal(v46, v47) )
        goto LABEL_85;
    }
    else if ( v47 )
    {
      goto LABEL_85;
    }
    spath = v42->spath;
    if ( spath )
    {
      v49 = v12->spath;
      if ( v49 )
      {
        if ( v42->secure && !v137 && !v12->secure )
        {
          v121 = strchr(spath + 1, 47);
          v122 = v121 ? v121 - spath : strlen(spath);
          if ( curl_strnequal(spath, v49, v122) )
          {
            if ( (*(&v135->set.connect_only + 4) & 0x10) != 0 )
              Curl_infof(
                v135,
                "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                v12->name,
                v12->domain);
            goto LABEL_147;
          }
        }
      }
    }
LABEL_85:
    if ( v45 || !curl_strequal(v42->name, v12->name) )
      goto LABEL_75;
    v50 = v42->domain;
    v51 = v12->domain;
    if ( v50 )
    {
      if ( !v51 || !curl_strequal(v50, v51) || v42->tailmatch != v12->tailmatch )
      {
LABEL_91:
        if ( !livecookie )
          goto LABEL_75;
      }
    }
    else if ( v51 )
    {
      goto LABEL_91;
    }
    v52 = v42->spath;
    v53 = v12->spath;
    if ( v52 )
    {
      if ( !v53 )
      {
        v45 = 0;
        livecookie = 0;
        goto LABEL_75;
      }
      if ( !curl_strequal(v52, v53) )
        goto LABEL_269;
      v52 = v42->spath;
      v53 = v12->spath;
    }
    if ( (v52 == 0) != (v53 == 0) )
    {
LABEL_269:
      livecookie = 0;
      goto LABEL_75;
    }
    livecookie = v12->livecookie;
    if ( v12->livecookie )
    {
      running = (size_t)v42;
      v45 = v12;
    }
    else
    {
      if ( v42->livecookie )
        goto LABEL_147;
      running = (size_t)v42;
      v45 = v12;
      livecookie = 1;
    }
LABEL_75:
    if ( !v42->next )
      break;
    v42 = v42->next;
  }
  if ( v45 )
  {
    v45->next = *(Cookie **)running;
    v107 = *(Cookie **)(running + 4);
    v45->creationtime = *(_DWORD *)(running + 36);
    Curl_cfree(v107);
    Curl_cfree(*(_DWORD *)(running + 8));
    Curl_cfree(*(_DWORD *)(running + 20));
    Curl_cfree(*(_DWORD *)(running + 12));
    Curl_cfree(*(_DWORD *)(running + 16));
    v108 = (Cookie *)v45->name;
    v109 = (Cookie *)v45->value;
    v110 = (Cookie *)v45->path;
    v111 = (void (__fastcall *)(Cookie *))Curl_cfree;
    *(_DWORD *)running = v45->next;
    *(_DWORD *)(running + 4) = v108;
    *(_DWORD *)(running + 8) = v109;
    *(_DWORD *)(running + 12) = v110;
    v112 = (Cookie *)v45->domain;
    expires = (Cookie *)v45->expires;
    expires_high = (Cookie *)HIDWORD(v45->expires);
    *(_DWORD *)(running + 16) = v45->spath;
    *(_DWORD *)(running + 20) = v112;
    *(_DWORD *)(running + 24) = expires;
    *(_DWORD *)(running + 28) = expires_high;
    creationtime = (Cookie *)v45->creationtime;
    v116 = *(Cookie **)&v45->prefix;
    v117 = (Cookie *)*((_DWORD *)&v45->prefix + 1);
    *(_DWORD *)(running + 32) = *(_DWORD *)&v45->tailmatch;
    *(_DWORD *)(running + 36) = creationtime;
    *(_DWORD *)(running + 40) = v116;
    *(_DWORD *)(running + 44) = v117;
    v111(v45);
  }
  else
  {
    running = (size_t)v12;
  }
  if ( !cookies->running || (*(&v135->set.connect_only + 4) & 0x10) == 0 )
  {
    if ( livecookie )
      goto LABEL_265;
    goto LABEL_263;
  }
  if ( !livecookie )
    goto LABEL_291;
  Curl_infof(
    v135,
    "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
    "Replaced",
    *(const char **)(running + 4),
    *(const char **)(running + 8),
    *(const char **)(running + 20),
    *(const char **)(running + 12),
    *(_QWORD *)(running + 0x18));
LABEL_265:
  v118 = *(_QWORD *)(running + 0x18);
  if ( v118 )
  {
    v119 = cookies;
    if ( v118 < cookies->next_expiration )
    {
      LODWORD(cookies->next_expiration) = v118;
      HIDWORD(v119->next_expiration) = HIDWORD(v118);
    }
  }
  return (Cookie *)running;
}
