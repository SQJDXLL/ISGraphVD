Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  int v12; // r8
  time_t v13; // r7
  Cookie *v14; // r0
  char *k; // r8
  Cookie *v16; // r9
  char *i; // r9
  int v18; // r6
  bool v19; // zf
  size_t v20; // r0
  size_t v21; // r5
  char *v22; // r2
  size_t v23; // r0
  int v24; // r1
  bool v25; // zf
  int v26; // r0
  bool v27; // zf
  unsigned int v28; // r4
  size_t v29; // r0
  size_t v30; // r12
  size_t v31; // r2
  char *v32; // r10
  int v33; // r1
  bool v34; // zf
  size_t v35; // r9
  unsigned int v36; // r7
  unsigned int v37; // r3
  int v38; // r5
  bool v39; // cc
  unsigned int v40; // r6
  char *v41; // r1
  int j; // r5
  int v43; // r3
  bool v44; // zf
  int v45; // r0
  unsigned int v46; // r4
  int v47; // r0
  bool v48; // zf
  char *v49; // r0
  unsigned int v50; // r6
  int v51; // r0
  const char *value; // r5
  int v53; // r0
  const char *name; // r4
  bool v55; // zf
  int v56; // r0
  size_t v57; // r4
  char *v58; // r0
  int v59; // r0
  unsigned int v60; // r4
  int v61; // r0
  bool v62; // zf
  size_t v63; // r1
  const char *v64; // r4
  size_t v65; // r6
  _BYTE *v66; // r0
  const char *v67; // r7
  bool v68; // zf
  int v69; // r0
  const char *v70; // r0
  int is_ipnum; // r0
  int v72; // r5
  int v73; // r0
  int v74; // r0
  char *v75; // r0
  char *v76; // r0
  char *v77; // r0
  char *v78; // r0
  const char *v79; // r10
  int v80; // r6
  int v81; // r8
  const char *v82; // r0
  char *v83; // r0
  char *v84; // r0
  Cookie *v85; // r7
  char *v86; // r0
  _BOOL4 v87; // r0
  char *v88; // r1
  int (__fastcall **v89)(const char *); // r9
  Cookie *v90; // r6
  char *v91; // r7
  int (__fastcall *v92)(const char *); // r1
  int v93; // r0
  char *v94; // r0
  char *v95; // r0
  unsigned int v96; // r5
  bool v97; // zf
  Cookie *v98; // r0
  Curl_easy *v100; // r4
  int v101; // r0
  Cookie *next; // r0
  Cookie *v103; // r8
  Cookie *v104; // r4
  char v105; // r10
  Cookie *v106; // r5
  char *v107; // r1
  char *v108; // r0
  const char *spath; // r7
  char *v110; // r9
  bool v111; // zf
  bool v112; // zf
  char *v113; // r0
  size_t v114; // r2
  char *v115; // r0
  char *v116; // r1
  char v117; // r0
  char v118; // r0
  char *v119; // r0
  char *v120; // r1
  const char *v121; // r0
  bool v122; // zf
  int creationtime; // r2
  char *v124; // r0
  void (__fastcall **v125)(char *); // r9
  Cookie *v126; // r12
  char *v127; // r2
  char *v128; // r3
  char *v129; // r4
  char *v130; // r6
  char *v131; // r7
  char *expires_high; // r2
  char *v133; // r3
  char *v134; // r4
  char *v135; // r6
  char *v136; // r7
  int v137; // r0
  char *v138; // r0
  char *v139; // r0
  bool v140; // zf
  bool v141; // zf
  curl_off_t expires; // r0
  const char *v143; // r2
  int v144; // r4
  char *v145; // r0
  size_t v146; // r4
  char *v147; // r0
  Cookie *v148; // r4
  bool v149; // zf
  curl_off_t v150; // [sp+1Ch] [bp-CCh]
  curl_off_t *v151; // [sp+24h] [bp-C4h]
  char *v152; // [sp+28h] [bp-C0h]
  char v153; // [sp+2Ch] [bp-BCh]
  CookieInfo *cookies; // [sp+34h] [bp-B4h]
  int v156; // [sp+38h] [bp-B0h]
  time_t v157; // [sp+3Ch] [bp-ACh]
  Curl_easy *v158; // [sp+40h] [bp-A8h]
  int v159; // [sp+44h] [bp-A4h]
  curl_off_t *p_expires; // [sp+44h] [bp-A4h]
  size_t v161; // [sp+44h] [bp-A4h]
  Cookie *v162; // [sp+48h] [bp-A0h]
  char *dest[39]; // [sp+4Ch] [bp-9Ch] BYREF

  v12 = 0;
  v13 = time(0u);
  if ( data->req.setcookies > 0x31u )
    return (Cookie *)v12;
  v14 = (Cookie *)((int (__fastcall *)(int, int))*Curl_ccalloc)(1, 48);
  if ( !v14 )
    return (Cookie *)v12;
  k = (char *)lineptr;
  v16 = v14;
  v157 = v13;
  v156 = noexpire;
  v158 = data;
  v162 = v14;
  if ( !httpheader )
  {
    dest[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      k = (char *)(lineptr + 0xA);
      v16->httponly = 1;
    }
    if ( *k != 35 )
    {
      v76 = strchr(k, 13);
      cookies = c;
      if ( v76 )
        *v76 = 0;
      v77 = strchr(k, 10);
      if ( v77 )
        *v77 = 0;
      v78 = strtok_r(k, "\t", dest);
      if ( !v78 )
        goto LABEL_188;
      v79 = v78;
      v80 = 0;
      v81 = 0;
      p_expires = &v16->expires;
      do
      {
        switch ( v80 )
        {
          case 0:
            v82 = v79 + 1;
            if ( *v79 != 46 )
              v82 = v79;
            v83 = (char *)((int (__fastcall *)(const char *))*Curl_cstrdup)(v82);
            v80 = 0;
            v162->domain = v83;
            goto LABEL_164;
          case 1:
            v80 = 1;
            v162->tailmatch = curl_strequal(v79, "TRUE") != 0;
            break;
          case 2:
            if ( !strcmp("TRUE", v79) || !strcmp("FALSE", v79) )
            {
              v89 = (int (__fastcall **)(const char *))Curl_cstrdup;
              v90 = v162;
              v91 = (char *)((int (__fastcall *)(const char *))*Curl_cstrdup)("/");
              v92 = *v89;
              v162->path = v91;
              v93 = v92("/");
              v90->spath = (char *)v93;
              v81 |= v91 == 0 || v93 == 0;
LABEL_167:
              v162->secure = 0;
              v80 = 3;
              if ( curl_strequal(v79, "TRUE") )
              {
                if ( secure || cookies->running )
                  v162->secure = 1;
                else
LABEL_171:
                  v81 = 1;
              }
            }
            else
            {
              v84 = (char *)((int (__fastcall *)(const char *))*Curl_cstrdup)(v79);
              v85 = v162;
              v80 = 2;
              v162->path = v84;
              if ( v84 )
              {
                v86 = sanitize_cookie_path(v84);
                v85->spath = v86;
                v81 |= v86 == 0;
              }
              else
              {
                v81 = 1;
              }
            }
            break;
          case 3:
            goto LABEL_167;
          case 4:
            v80 = 4;
            v87 = curlx_strtoofft(v79, 0, 10, p_expires) != 0;
            goto LABEL_165;
          case 5:
            v88 = (char *)((int (__fastcall *)(const char *))*Curl_cstrdup)(v79);
            v80 = 5;
            v162->name = v88;
            if ( !v88 )
              goto LABEL_171;
            if ( curl_strnequal("__Secure-", v88, 9) )
            {
              v162->prefix |= 1u;
            }
            else if ( curl_strnequal("__Host-", v162->name, 7) )
            {
              v162->prefix |= 2u;
            }
            break;
          case 6:
            v83 = (char *)((int (__fastcall *)(const char *))*Curl_cstrdup)(v79);
            v80 = 6;
            v162->value = v83;
LABEL_164:
            v87 = v83 == 0;
LABEL_165:
            v81 |= v87;
            break;
          default:
            break;
        }
        v94 = strtok_r(0u, "\t", dest);
        ++v80;
        if ( !v94 )
          break;
        v79 = v94;
      }
      while ( (v81 & 1) == 0 );
      if ( v80 == 6 )
      {
        v95 = (char *)((int (__fastcall *)(void *))*Curl_cstrdup)(&L_str_22);
        v16 = v162;
        v80 = 7;
        LOBYTE(v81) = v81 | (v95 == 0);
        if ( !v95 )
          v80 = 6;
        v162->value = v95;
      }
      else
      {
        v16 = v162;
      }
      v97 = (v81 & 1) == 0;
      if ( (v81 & 1) == 0 )
        v97 = v80 == 7;
      if ( !v97 )
        goto LABEL_188;
      v100 = data;
      goto LABEL_193;
    }
LABEL_143:
    ((void (__fastcall *)(Cookie *))*Curl_cfree)(v16);
    return 0;
  }
  if ( strlen(lineptr) > 0x1388 )
    goto LABEL_143;
  cookies = c;
  HIDWORD(v150) = 0x7FFFFFFF - (v13 >> 0x1F);
  v152 = (char *)&data->set + 1335;
  LODWORD(v150) = ~v13;
  v151 = &v16->expires;
  v153 = 0;
  do
  {
    for ( i = k + 1; ; ++i )
    {
      v18 = (unsigned __int8)*k;
      v19 = v18 == 32;
      if ( v18 != 32 )
        v19 = v18 == 9;
      if ( !v19 )
        break;
      ++k;
    }
    v20 = strcspn(k, ";\t\r\n=");
    if ( !v20 )
    {
      v16 = v162;
      v159 = (int)k;
      goto LABEL_21;
    }
    v21 = v20;
    v22 = &k[v20];
    v23 = v20 - 1;
    do
    {
      v24 = (unsigned __int8)k[v23];
      v25 = v24 == 32;
      if ( v24 != 32 )
        v25 = v24 == 9;
      if ( !v25 )
      {
        v28 = v23 + 1;
        goto LABEL_29;
      }
      --v23;
    }
    while ( v23 != -1 );
    v28 = 0;
LABEL_29:
    if ( *v22 == 61 )
    {
      v29 = strcspn(&k[v21 + 1], ";\r\n");
      v30 = v21 + v29;
      v31 = 0;
      if ( v29 )
      {
        v32 = &i[v30];
        while ( 1 )
        {
          v33 = (unsigned __int8)*(v32 - 1);
          v34 = v33 == 32;
          if ( v33 != 32 )
            v34 = v33 == 9;
          if ( !v34 )
            break;
          --v29;
          --v32;
          if ( !v29 )
            goto LABEL_37;
        }
        v41 = &i[v21];
        for ( j = 0; j != v29; ++j )
        {
          v43 = (unsigned __int8)v41[j];
          v44 = v43 == 32;
          if ( v43 != 32 )
            v44 = v43 == 9;
          if ( !v44 )
          {
            v35 = v30;
            v31 = v29 - j;
            v32 = &v41[j];
            goto LABEL_38;
          }
        }
        v35 = v30;
        v31 = 0;
      }
      else
      {
LABEL_37:
        v35 = v30;
        v32 = &k[v21 + 1];
      }
LABEL_38:
      v36 = v31;
      if ( memchr(v32, 9, v31) )
      {
        freecookie(v162);
        v12 = 0;
        if ( (v152[3] & 0x10) != 0 )
          Curl_infof(v158, "cookie contains TAB, dropping");
        return (Cookie *)v12;
      }
      v37 = v36;
      v38 = 1;
      v159 = (int)&k[v35 + 1];
    }
    else
    {
      v37 = 0;
      v38 = 0;
      v32 = 0;
      v159 = (int)v22;
    }
    v16 = v162;
    v39 = v28 > 0xFFE;
    if ( v28 <= 0xFFE )
      v39 = v37 > 0xFFE;
    if ( v39 || v37 + v28 > 0x1000 )
    {
      v96 = v37;
      freecookie(v162);
      v12 = 0;
      if ( (v152[3] & 0x10) != 0 )
        Curl_infof(v158, "oversized cookie dropped, name/val %zu + %zu bytes", v28, v96);
      return (Cookie *)v12;
    }
    if ( v18 == 95 && v28 >= 7 && k[1] == 95 )
    {
      v40 = v37;
      if ( curl_strnequal("__Secure-", k, 9) )
      {
        v37 = v40;
        v16->prefix |= 1u;
      }
      else
      {
        v45 = curl_strnequal("__Host-", k, 7);
        v37 = v40;
        if ( v45 )
          v16->prefix |= 2u;
      }
    }
    if ( v16->name )
    {
      if ( !v37 )
      {
        if ( v28 == 8 )
        {
          v69 = curl_strnequal("httponly", k, 8);
          v37 = 0;
          if ( v69 )
          {
            v16->httponly = 1;
            goto LABEL_21;
          }
        }
        else if ( v28 == 6 )
        {
          v56 = curl_strnequal("secure", k, 6);
          v37 = 0;
          if ( v56 )
          {
            if ( !secure && cookies->running )
              goto LABEL_188;
            v16->secure = 1;
            goto LABEL_21;
          }
        }
        if ( !v38 )
          goto LABEL_21;
      }
      if ( v28 != 7 )
      {
        if ( v28 != 6 )
        {
          if ( v28 == 4 )
          {
            v46 = v37;
            if ( curl_strnequal("path", k, 4) )
            {
              ((void (__fastcall *)(char *))*Curl_cfree)(v16->path);
              v47 = Curl_memdup(v32, v46 + 1);
              v48 = v47 == 0;
              v16->path = (char *)v47;
              if ( v47 )
              {
                *(_BYTE *)(v47 + v46) = 0;
                v48 = v16->path == 0;
              }
              if ( v48 )
                goto LABEL_188;
              ((void (__fastcall *)(char *))*Curl_cfree)(v16->spath);
              v49 = sanitize_cookie_path(v16->path);
              v16->spath = v49;
              if ( !v49 )
                goto LABEL_188;
            }
          }
          goto LABEL_21;
        }
        v60 = v37;
        v61 = curl_strnequal("domain", k, 6);
        v62 = v60 == 0;
        if ( v60 )
          v62 = v61 == 0;
        if ( v62 )
          goto LABEL_21;
        v63 = v60;
        v64 = v32 + 1;
        if ( *v32 == 46 )
          --v63;
        else
          v64 = v32;
        v65 = v63;
        if ( v63 == 9 && curl_strnequal(v64, "localhost", 9)
          || (v66 = memchr(v64, 46, v65)) != 0 && (unsigned int)(&v64[v65] - v66) > 1 )
        {
          v67 = domain;
          v70 = v64;
          if ( domain )
            v70 = domain;
          is_ipnum = Curl_host_is_ipnum(v70);
          v72 = is_ipnum;
          if ( domain )
          {
            v68 = is_ipnum == 0;
            goto LABEL_113;
          }
          v67 = 0;
        }
        else
        {
          v67 = ":";
          v68 = Curl_host_is_ipnum(":") == 0;
LABEL_113:
          if ( v68 )
          {
            v72 = 0;
            if ( !cookie_tailmatch(v64, v65, v67) )
              goto LABEL_125;
          }
          else if ( strncmp(v64, v67, v65) || (v72 = 1, v65 != strlen(v67)) )
          {
LABEL_125:
            domain = v67;
            v153 = 1;
            if ( (v152[3] & 0x10) != 0 )
              Curl_infof(v158, "skipped cookie with bad tailmatch domain: %s", v64);
            goto LABEL_21;
          }
        }
        domain = v67;
        ((void (__fastcall *)(char *))*Curl_cfree)(v16->domain);
        v74 = Curl_memdup(v64, v65 + 1);
        v16->domain = (char *)v74;
        if ( !v74 )
          goto LABEL_188;
        *(_BYTE *)(v74 + v65) = 0;
        v75 = v16->domain;
        if ( v72 | (v75 == 0) )
        {
          if ( !v75 )
            goto LABEL_188;
          v153 |= v75 == 0;
        }
        else
        {
          v16->tailmatch = 1;
        }
        goto LABEL_21;
      }
      v57 = v37;
      if ( !curl_strnequal("version", k, 7) )
      {
        if ( curl_strnequal("max-age", k, 7) )
        {
          v58 = v32 + 1;
          if ( *v32 != 34 )
            v58 = v32;
          v59 = curlx_strtoofft(v58, 0, 10, v151);
          switch ( v59 )
          {
            case 0:
              if ( !*v151 )
              {
LABEL_136:
                *(_DWORD *)v151 = 1;
                *((_DWORD *)v151 + 1) = 0;
                break;
              }
              if ( v150 >= *v151 )
              {
                *v151 += v157;
                break;
              }
LABEL_135:
              *(_DWORD *)v151 = -1;
              *((_DWORD *)v151 + 1) = 0x7FFFFFFF;
              break;
            case 2:
              goto LABEL_136;
            case 1:
              goto LABEL_135;
          }
        }
        else if ( curl_strnequal("expires", k, 7) && v57 <= 0x7F && !*v151 )
        {
          memcpy(dest, v32, v57);
          *((_BYTE *)dest + v57) = 0;
          v73 = Curl_getdate_capped(dest);
          *v151 = v73;
          if ( v73 )
          {
            if ( v73 <= -1 )
            {
              *(_DWORD *)v151 = 0;
              *((_DWORD *)v151 + 1) = 0;
            }
          }
          else
          {
            *(_DWORD *)v151 = 1;
            *((_DWORD *)v151 + 1) = 0;
          }
        }
      }
    }
    else
    {
      if ( !v38 )
        goto LABEL_188;
      v50 = v37;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(0);
      v51 = Curl_memdup(k, v28 + 1);
      value = 0;
      v16->name = (char *)v51;
      if ( v51 )
        *(_BYTE *)(v51 + v28) = 0;
      ((void (__fastcall *)(char *))*Curl_cfree)(v16->value);
      v53 = Curl_memdup(v32, v50 + 1);
      v16->value = (char *)v53;
      if ( v53 )
        *(_BYTE *)(v53 + v50) = 0;
      name = v16->name;
      v55 = name == 0;
      if ( name )
      {
        value = v16->value;
        v55 = value == 0;
      }
      if ( v55 )
        goto LABEL_188;
      if ( value[strcspn(value, invalid_octets_badoctets)] || name[strcspn(name, invalid_octets_badoctets)] )
      {
        if ( (v152[3] & 0x10) != 0 )
          Curl_infof(v158, "invalid octets in name/value, cookie dropped");
        goto LABEL_188;
      }
    }
LABEL_21:
    for ( k = (char *)(v159 + 1); ; ++k )
    {
      v26 = (unsigned __int8)*(k - 1);
      v27 = v26 == 32;
      if ( v26 != 32 )
        v27 = v26 == 9;
      if ( !v27 )
        break;
    }
  }
  while ( v26 == 59 );
  if ( (v153 & 1) != 0 )
    goto LABEL_188;
  if ( domain )
  {
    if ( !v16->domain )
    {
      v137 = ((int (__fastcall *)(const char *))*Curl_cstrdup)(domain);
      v16->domain = (char *)v137;
      if ( !v137 )
        goto LABEL_188;
    }
  }
  if ( path && !v16->path )
  {
    v138 = strchr(path, 63);
    v139 = v138 ? (char *)Curl_memrchr(path, 47, v138 - path) : strrchr(path, 47);
    if ( v139 )
    {
      v144 = v139 - path;
      v145 = (char *)((int (__fastcall *)(int))*Curl_cmalloc)(v139 - path + 2);
      v16->path = v145;
      if ( !v145 )
        goto LABEL_188;
      v146 = v144 + 1;
      memcpy(v145, path, v146);
      v16->path[v146] = 0;
      v147 = sanitize_cookie_path(v16->path);
      v16->spath = v147;
      if ( !v147 )
        goto LABEL_188;
    }
  }
  if ( !v16->name )
  {
LABEL_188:
    v98 = v16;
    goto LABEL_189;
  }
  v100 = v158;
  ++v158->req.setcookies;
LABEL_193:
  v12 = 0;
  if ( (v16->prefix & 1) != 0 && !v16->secure )
    goto LABEL_250;
  if ( (v16->prefix & 2) != 0 )
  {
    v121 = (const char *)v16->secure;
    v122 = v121 == 0;
    if ( v16->secure )
    {
      v121 = v16->path;
      v122 = v121 == 0;
    }
    if ( v122 || strcmp(v121, "/") || v16->tailmatch )
      goto LABEL_250;
  }
  if ( !cookies->running && cookies->newsession && !v16->expires )
  {
LABEL_250:
    freecookie(v16);
    return (Cookie *)v12;
  }
  v16->livecookie = cookies->running;
  v101 = cookies->lastct + 1;
  cookies->lastct = v101;
  v16->creationtime = v101;
  if ( !v156 )
    remove_expired(cookies);
  v161 = cookiehash(v16->domain);
  next = cookies->cookies[v161];
  if ( !next )
  {
    v106 = 0;
    v105 = 0;
LABEL_266:
    if ( !v100 )
      goto LABEL_271;
    v140 = !cookies->running;
    if ( cookies->running )
      v140 = (*((_BYTE *)&v100->set + 1338) & 0x10) == 0;
    if ( v140 )
    {
LABEL_271:
      v141 = (v105 & 1) == 0;
    }
    else
    {
      v143 = "Added";
      if ( (v105 & 1) != 0 )
        v143 = "Replaced";
      Curl_infof(
        v100,
        "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
        v143,
        v16->name,
        v16->value,
        v16->domain,
        v16->path,
        v16->expires);
      v141 = (v105 & 1) == 0;
    }
    if ( v141 )
    {
      if ( v106 )
        v106->next = v16;
      else
        cookies->cookies[v161] = v16;
      ++cookies->numcookies;
    }
    expires = v16->expires;
    if ( expires && expires < cookies->next_expiration )
      cookies->next_expiration = expires;
    return v16;
  }
  v103 = 0;
  v104 = 0;
  v105 = 0;
  while ( 2 )
  {
    v106 = next;
    if ( !curl_strequal(next->name, v16->name) )
      goto LABEL_219;
    v107 = v162->domain;
    v108 = v106->domain;
    if ( v108 )
    {
      if ( !v107 || !curl_strequal(v108, v107) )
        goto LABEL_219;
    }
    else if ( v107 )
    {
      goto LABEL_219;
    }
    spath = v106->spath;
    if ( !spath )
      goto LABEL_219;
    v110 = v162->spath;
    v111 = v110 == 0;
    if ( v110 )
      v111 = !v106->secure;
    if ( v111 )
      goto LABEL_219;
    v112 = !v162->secure;
    if ( !v162->secure )
      v112 = secure == 0;
    if ( !v112
      || ((v113 = strchr(spath + 1, 47)) == 0 ? (v114 = strlen(spath)) : (v114 = v113 - spath),
          !curl_strnequal(spath, v110, v114)) )
    {
LABEL_219:
      if ( v103 )
      {
        v16 = v162;
        goto LABEL_242;
      }
      v16 = v162;
      if ( !curl_strequal(v106->name, v162->name) )
        goto LABEL_241;
      v115 = v106->domain;
      v116 = v16->domain;
      if ( !v115 )
      {
        v117 = v116 == 0;
LABEL_229:
        v118 = v105 | v117;
        v105 = 0;
        if ( (v118 & 1) != 0 )
          goto LABEL_230;
        goto LABEL_241;
      }
      if ( v116 && curl_strequal(v115, v116) )
      {
        v117 = v16->tailmatch - v106->tailmatch + (v106->tailmatch == v16->tailmatch) + v106->tailmatch - v16->tailmatch;
        goto LABEL_229;
      }
      v103 = 0;
      if ( (v105 & 1) == 0 )
      {
        v105 = 0;
        goto LABEL_242;
      }
LABEL_230:
      v119 = v106->spath;
      v120 = v16->spath;
      if ( v119 )
      {
        if ( v120 )
        {
          if ( curl_strequal(v119, v120) )
          {
            v105 = 0;
            v103 = 0;
            if ( (v106->spath != 0) == (v16->spath == 0) )
              goto LABEL_242;
            goto LABEL_238;
          }
LABEL_240:
          v105 = 0;
LABEL_241:
          v103 = 0;
          goto LABEL_242;
        }
        if ( !v16->spath )
          goto LABEL_240;
      }
      else
      {
        v105 = 0;
        v103 = 0;
        if ( v120 )
          goto LABEL_242;
      }
LABEL_238:
      v105 = 1;
      if ( v16->livecookie )
      {
        v104 = v106;
        v103 = v16;
      }
      else
      {
        v104 = v106;
        v103 = v16;
        if ( v106->livecookie )
          goto LABEL_188;
      }
LABEL_242:
      next = v106->next;
      if ( !v106->next )
      {
        if ( v103 )
        {
          creationtime = v104->creationtime;
          v124 = v104->name;
          v103->next = v104->next;
          v103->creationtime = creationtime;
          v125 = (void (__fastcall **)(char *))Curl_cfree;
          ((void (__fastcall *)(char *))*Curl_cfree)(v124);
          (*v125)(v104->value);
          (*v125)(v104->domain);
          (*v125)(v104->path);
          (*v125)(v104->spath);
          v162 = v104;
          v126 = v104;
          v127 = v103->name;
          v128 = v103->value;
          v129 = v103->path;
          v130 = v103->spath;
          v131 = v103->domain;
          v126->next = v103->next;
          v126->name = v127;
          v126->value = v128;
          v126->path = v129;
          v126->spath = v130;
          v126->domain = v131;
          v126 = (Cookie *)((char *)v126 + 24);
          expires_high = (char *)HIDWORD(v103->expires);
          v133 = *(char **)&v103->tailmatch;
          v134 = (char *)v103->creationtime;
          v135 = *(char **)&v103->prefix;
          v136 = (char *)*((_DWORD *)&v103->prefix + 1);
          v126->next = (Cookie *)v103->expires;
          v126->name = expires_high;
          v126->value = v133;
          v126->path = v134;
          v126->spath = v135;
          v126->domain = v136;
          (*v125)((char *)v103);
          v16 = v162;
        }
        v100 = v158;
        goto LABEL_266;
      }
      continue;
    }
    break;
  }
  v148 = v162;
  v149 = v158 == 0;
  if ( v158 )
    v149 = (*((_BYTE *)&v158->set + 1338) & 0x10) == 0;
  if ( !v149 )
    Curl_infof(v158, "cookie '%s' for domain '%s' dropped, would overlay an existing cookie", v162->name, v162->domain);
  v98 = v148;
LABEL_189:
  freecookie(v98);
  return 0;
}
