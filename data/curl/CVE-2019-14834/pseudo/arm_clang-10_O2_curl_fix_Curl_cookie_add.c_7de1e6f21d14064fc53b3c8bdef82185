Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  int v12; // r9
  time_t v13; // r6
  int v14; // r0
  char *j; // r9
  int v16; // r10
  char *i; // r8
  int v18; // r4
  bool v19; // zf
  size_t v20; // r0
  size_t v21; // r6
  char *v22; // r10
  size_t v23; // r0
  int v24; // r1
  bool v25; // zf
  int v26; // r8
  int v27; // r1
  bool v28; // zf
  const char *v29; // r5
  size_t v30; // r0
  size_t v31; // r5
  size_t v32; // r2
  char *v33; // r7
  int v34; // r1
  bool v35; // zf
  unsigned int v36; // r8
  char *v37; // r0
  unsigned int v38; // r3
  int v39; // r6
  bool v40; // cc
  unsigned int v41; // r4
  _DWORD *v42; // r10
  char *v43; // r1
  int k; // r6
  int v45; // r3
  bool v46; // zf
  int v47; // r0
  unsigned int v48; // r4
  int v49; // r0
  const char *v50; // r0
  char *v51; // r5
  size_t v52; // r6
  size_t v53; // r0
  unsigned int v54; // r6
  void (__fastcall **v55)(_DWORD); // r4
  const char *v56; // r0
  bool v57; // zf
  int v58; // r0
  unsigned int v59; // r4
  int v60; // r4
  char *v61; // r0
  int v62; // r0
  unsigned int v63; // r4
  int v64; // r0
  bool v65; // zf
  size_t v66; // r1
  const char *v67; // r5
  size_t v68; // r9
  _BYTE *v69; // r0
  const char *v70; // r4
  int v71; // r6
  int v72; // r0
  int v73; // r0
  const char *v74; // r0
  int is_ipnum; // r0
  size_t v76; // r0
  size_t v77; // r7
  const char *v78; // r4
  size_t v79; // r2
  char *v80; // r1
  size_t v81; // r7
  int v82; // r0
  int v83; // r0
  int v84; // r0
  int v85; // r0
  char *v86; // r0
  char *v87; // r0
  char *v88; // r0
  const char *v89; // r8
  int v90; // r10
  int v91; // r4
  int (**v92)(void); // r6
  const char *v93; // r0
  int v94; // r0
  int v95; // r0
  int v96; // r8
  const char *v97; // r0
  char *v98; // r6
  size_t v99; // r5
  size_t v100; // r0
  int v101; // r0
  int v102; // r5
  char v103; // r0
  int v104; // r0
  int v105; // r6
  int v106; // r5
  int v107; // r0
  char *v108; // r0
  int v109; // r0
  bool v110; // zf
  void (__fastcall **v111)(int); // r4
  unsigned int v112; // r6
  void (__fastcall **v113)(int); // r4
  CookieInfo *v114; // r4
  int v115; // r0
  int v116; // r6
  time_t v117; // r9
  curl_off_t *p_next_expiration; // r7
  int next_expiration_high; // r1
  int v120; // r7
  Cookie *next; // r0
  Curl_easy *v122; // r8
  Cookie **v123; // r10
  char v124; // r9
  Cookie *v125; // r4
  char *v126; // r0
  int v127; // r1
  const char *spath; // r6
  int v129; // r5
  bool v130; // zf
  bool v131; // zf
  char *v132; // r0
  size_t v133; // r2
  char *v134; // r0
  int v135; // r1
  char v136; // r0
  char v137; // r0
  char *v138; // r0
  int v139; // r1
  bool v140; // zf
  void (__fastcall **v141)(int); // r4
  const char *v142; // r0
  bool v143; // zf
  Cookie *creationtime; // r2
  char *name; // r0
  void (__fastcall **v146)(char *); // r5
  char *v147; // r2
  char *v148; // r3
  char *v149; // r5
  char *v150; // r6
  char *v151; // r7
  Cookie *v152; // r2
  Cookie *v153; // r3
  Cookie *v154; // r5
  Cookie *v155; // r6
  Cookie *v156; // r7
  bool v157; // zf
  CookieInfo *v158; // r6
  __int64 v159; // r0
  curl_off_t *v160; // r6
  unsigned int next_expiration; // t1
  void (__fastcall **v162)(int); // r4
  int v164; // r0
  char *v165; // r0
  char *v166; // r0
  _DWORD *v167; // r5
  Cookie *v168; // r4
  Cookie **p_next; // r8
  Cookie *v170; // r6
  curl_off_t expires; // r0
  const char *v172; // r2
  void (__fastcall **v173)(_DWORD *); // r4
  int v174; // r4
  void *v175; // r0
  const char *v176; // r0
  char *v177; // r5
  size_t v178; // r6
  size_t v179; // r0
  int v180; // r0
  __int64 v181; // [sp+1Ch] [bp-CCh]
  int v182; // [sp+24h] [bp-C4h]
  char *v183; // [sp+28h] [bp-C0h]
  char v184; // [sp+2Ch] [bp-BCh]
  const char *v186; // [sp+30h] [bp-B8h]
  Curl_easy *v187; // [sp+34h] [bp-B4h]
  int v188; // [sp+38h] [bp-B0h]
  time_t v189; // [sp+3Ch] [bp-ACh]
  size_t v190; // [sp+3Ch] [bp-ACh]
  const char *v191; // [sp+40h] [bp-A8h]
  int v192; // [sp+40h] [bp-A8h]
  Cookie *v193; // [sp+40h] [bp-A8h]
  int v194; // [sp+40h] [bp-A8h]
  CookieInfo *v195; // [sp+44h] [bp-A4h]
  int v196; // [sp+48h] [bp-A0h]
  char *dest[39]; // [sp+4Ch] [bp-9Ch] BYREF

  v12 = 0;
  v13 = time(0u);
  if ( data->req.setcookies > 0x31u )
    return (Cookie *)v12;
  v14 = ((int (__fastcall *)(int, int))*Curl_ccalloc)(1, 48);
  if ( !v14 )
    return (Cookie *)v12;
  j = (char *)lineptr;
  v16 = v14;
  v189 = v13;
  v188 = noexpire;
  v196 = v14;
  v195 = c;
  if ( !httpheader )
  {
    dest[0] = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      j = (char *)(lineptr + 0xA);
      *(_BYTE *)(v16 + 35) = 1;
    }
    if ( *j == 35 )
      goto LABEL_154;
    v86 = strchr(j, 13);
    v187 = data;
    if ( v86 )
      *v86 = 0;
    v87 = strchr(j, 10);
    if ( v87 )
      *v87 = 0;
    v88 = strtok_r(j, "\t", dest);
    if ( !v88 )
    {
LABEL_210:
      v111 = (void (__fastcall **)(int))Curl_cfree;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v196 + 20));
      (*v111)(*(_DWORD *)(v196 + 12));
      (*v111)(*(_DWORD *)(v196 + 16));
      (*v111)(*(_DWORD *)(v196 + 4));
      (*v111)(*(_DWORD *)(v196 + 8));
      (*v111)(v196);
      return 0;
    }
    v89 = v88;
    v90 = 0;
    v91 = 0;
    v192 = v196 + 0x18;
    v92 = (int (**)(void))Curl_cstrdup;
    while ( 2 )
    {
      switch ( v90 )
      {
        case 0:
          v93 = v89 + 1;
          if ( *v89 != 46 )
            v93 = v89;
          v94 = ((int (__fastcall *)(const char *))*v92)(v93);
          v90 = 0;
          *(_DWORD *)(v196 + 20) = v94;
          goto LABEL_181;
        case 1:
          v90 = 1;
          *(_BYTE *)(v196 + 32) = curl_strequal(v89, "TRUE") != 0;
          goto LABEL_202;
        case 2:
          if ( !strcmp("TRUE", v89) || !strcmp("FALSE", v89) )
          {
            v104 = ((int (__fastcall *)(const char *))*v92)("/");
            v105 = v196;
            v106 = v104;
            *(_DWORD *)(v196 + 12) = v104;
            v107 = ((int (__fastcall *)(const char *))*Curl_cstrdup)("/");
            *(_DWORD *)(v105 + 16) = v107;
            v91 |= v106 == 0 || v107 == 0;
            v92 = (int (**)(void))Curl_cstrdup;
LABEL_183:
            *(_BYTE *)(v196 + 33) = 0;
            v90 = 3;
            if ( curl_strequal(v89, "TRUE") )
            {
              if ( secure || c->running )
              {
                *(_BYTE *)(v196 + 33) = 1;
                goto LABEL_202;
              }
LABEL_188:
              v91 = 1;
            }
          }
          else
          {
            v95 = ((int (__fastcall *)(const char *))*v92)(v89);
            v96 = v196;
            v90 = 2;
            *(_DWORD *)(v196 + 12) = v95;
            if ( !v95 )
              goto LABEL_188;
            v97 = (const char *)(*v92)();
            if ( v97 )
            {
              v98 = (char *)v97;
              v99 = strlen(v97);
              if ( *v98 == 34 )
                memmove(v98, v98 + 1, v99--);
              if ( v99 )
              {
                v100 = v99 - 1;
                if ( v98[v99 - 1] == 34 )
                {
                  --v99;
                  v98[v100] = 0;
                }
              }
              else
              {
                v99 = 0;
              }
              if ( *v98 == 47 )
              {
                if ( v99 && v98[v99 - 1] == 47 )
                  v98[v99 - 1] = 0;
              }
              else
              {
                ((void (__fastcall *)(char *))*Curl_cfree)(v98);
                v98 = (char *)Curl_strndup("/", 1);
              }
            }
            else
            {
              v98 = 0;
            }
            *(_DWORD *)(v96 + 16) = v98;
            v91 |= v98 == 0;
            v92 = (int (**)(void))Curl_cstrdup;
          }
LABEL_202:
          v108 = strtok_r(0u, "\t", dest);
          ++v90;
          if ( v108 )
          {
            v89 = v108;
            if ( (v91 & 1) == 0 )
              continue;
          }
          if ( v90 == 6 )
          {
            v109 = ((int (__fastcall *)(void *))*v92)(&L_str_22);
            v90 = 7;
            *(_DWORD *)(v196 + 8) = v109;
            LOBYTE(v91) = v91 | (v109 == 0);
            if ( !v109 )
              v90 = 6;
          }
          v110 = (v91 & 1) == 0;
          if ( (v91 & 1) == 0 )
            v110 = v90 == 7;
          if ( !v110 )
            goto LABEL_210;
          v26 = v196;
          break;
        case 3:
          goto LABEL_183;
        case 4:
          v90 = 4;
          v91 |= curlx_strtoofft(v89, 0, 10, v192) != 0;
          goto LABEL_202;
        case 5:
          v101 = ((int (__fastcall *)(const char *))*v92)(v89);
          v102 = v196;
          v90 = 5;
          *(_DWORD *)(v196 + 4) = v101;
          if ( !v101 )
          {
            v91 = 1;
            goto LABEL_202;
          }
          if ( curl_strnequal("__Secure-", v101, 9) )
          {
            v103 = *(_BYTE *)(v102 + 40) | 1;
          }
          else
          {
            if ( !curl_strnequal("__Host-", *(_DWORD *)(v102 + 4), 7) )
              goto LABEL_202;
            v103 = *(_BYTE *)(v102 + 40) | 2;
          }
          *(_BYTE *)(v102 + 40) = v103;
          goto LABEL_202;
        case 6:
          v94 = ((int (__fastcall *)(const char *))*v92)(v89);
          v90 = 6;
          *(_DWORD *)(v196 + 8) = v94;
LABEL_181:
          v91 |= v94 == 0;
          goto LABEL_202;
        default:
          goto LABEL_202;
      }
      break;
    }
LABEL_214:
    if ( (*(_BYTE *)(v26 + 40) & 1) != 0 && !*(_BYTE *)(v26 + 33) )
      goto LABEL_298;
    if ( (*(_BYTE *)(v26 + 40) & 2) != 0 )
    {
      v142 = (const char *)*(unsigned __int8 *)(v26 + 33);
      v143 = v142 == 0;
      if ( *(_BYTE *)(v26 + 33) )
      {
        v142 = *(const char **)(v26 + 12);
        v143 = v142 == 0;
      }
      if ( v143 || strcmp(v142, "/") || *(_BYTE *)(v26 + 32) )
        goto LABEL_298;
    }
    v114 = v195;
    if ( !v195->running && v195->newsession && !*(_QWORD *)(v26 + 24) )
      goto LABEL_298;
    *(_BYTE *)(v26 + 34) = v195->running;
    v115 = v195->lastct + 1;
    v195->lastct = v115;
    *(_DWORD *)(v26 + 36) = v115;
    if ( !v188 )
    {
      v116 = 0;
      v117 = time(0u);
      p_next_expiration = &v195->next_expiration;
      next_expiration_high = HIDWORD(v195->next_expiration);
      if ( (v117 >> 0x1F) - (next_expiration_high + !__CFSHR__(v117, 0x1F)) < 0 == __OFSUB__(
                                                                                     v117 >> 0x1F,
                                                                                     next_expiration_high,
                                                                                     __CFSHR__(v117, 0x1F))
        || !(~LODWORD(v195->next_expiration) | next_expiration_high ^ 0x7FFFFFFF) )
      {
        *(_DWORD *)p_next_expiration = -1;
        HIDWORD(v195->next_expiration) = 0x7FFFFFFF;
        v167 = (_DWORD *)Curl_cfree;
        do
        {
          v168 = v114->cookies[v116];
          v194 = v116;
          if ( v168 )
          {
            p_next = 0;
            do
            {
              while ( 1 )
              {
                v170 = v168;
                v168 = v168->next;
                expires = v170->expires;
                if ( !expires || expires >= v117 )
                  break;
                if ( p_next )
                  *p_next = v168;
                else
                  v195->cookies[v194] = v168;
                --v195->numcookies;
                ((void (__fastcall *)(char *, _DWORD, _DWORD, _DWORD))*v167)(
                  v170->domain,
                  *v167,
                  expires | HIDWORD(expires),
                  (unsigned __int64)(expires - v117) >> 32);
                ((void (__fastcall *)(char *))*v167)(v170->path);
                ((void (__fastcall *)(char *))*v167)(v170->spath);
                ((void (__fastcall *)(char *))*v167)(v170->name);
                ((void (__fastcall *)(char *))*v167)(v170->value);
                ((void (__fastcall *)(Cookie *))*v167)(v170);
                if ( !v168 )
                  goto LABEL_309;
              }
              if ( expires && expires < *p_next_expiration )
              {
                *(_DWORD *)p_next_expiration = expires;
                HIDWORD(v195->next_expiration) = HIDWORD(expires);
              }
              p_next = &v170->next;
            }
            while ( v168 );
          }
LABEL_309:
          v114 = v195;
          v116 = v194 + 1;
        }
        while ( v194 != 0x3E );
      }
    }
    v120 = v196;
    v190 = cookiehash(*(const char *const *)(v196 + 20));
    next = v114->cookies[v190];
    if ( !next )
    {
      v122 = v187;
      v125 = 0;
      v124 = 0;
      goto LABEL_283;
    }
    v122 = v187;
    v123 = 0;
    v124 = 0;
    v193 = 0;
    while ( 1 )
    {
      v125 = next;
      if ( !curl_strequal(next->name, *(_DWORD *)(v120 + 4)) )
        goto LABEL_225;
      v126 = v125->domain;
      v127 = *(_DWORD *)(v120 + 20);
      if ( v126 )
      {
        if ( !v127 || !curl_strequal(v126, v127) )
          goto LABEL_225;
      }
      else if ( v127 )
      {
        goto LABEL_225;
      }
      spath = v125->spath;
      if ( spath )
      {
        v129 = *(_DWORD *)(v120 + 16);
        v130 = v129 == 0;
        if ( v129 )
          v130 = !v125->secure;
        if ( !v130 )
        {
          v131 = *(_BYTE *)(v120 + 33) == 0;
          if ( !*(_BYTE *)(v120 + 33) )
            v131 = secure == 0;
          if ( v131 )
          {
            v132 = strchr(spath + 1, 47);
            v133 = v132 ? v132 - spath : strlen(spath);
            if ( curl_strnequal(spath, v129, v133) )
            {
              v140 = v187 == 0;
              if ( v187 )
                v140 = (*((_BYTE *)&v187->set + 1337) & 0x20) == 0;
              if ( !v140 )
                Curl_infof(
                  v187,
                  "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                  *(const char **)(v120 + 4),
                  *(const char **)(v120 + 20));
LABEL_270:
              v141 = (void (__fastcall **)(int))Curl_cfree;
              ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v120 + 20));
              (*v141)(*(_DWORD *)(v120 + 12));
              (*v141)(*(_DWORD *)(v120 + 16));
              (*v141)(*(_DWORD *)(v120 + 4));
              (*v141)(*(_DWORD *)(v120 + 8));
              (*v141)(v120);
              return 0;
            }
          }
        }
      }
LABEL_225:
      if ( v123 )
        goto LABEL_226;
      if ( !curl_strequal(v125->name, *(_DWORD *)(v120 + 4)) )
        goto LABEL_255;
      v134 = v125->domain;
      v135 = *(_DWORD *)(v120 + 20);
      if ( v134 )
      {
        if ( !v135 || !curl_strequal(v134, v135) )
        {
          v123 = 0;
          if ( (v124 & 1) == 0 )
          {
            v124 = 0;
            goto LABEL_226;
          }
          goto LABEL_250;
        }
        v136 = *(_BYTE *)(v120 + 32)
             - v125->tailmatch
             + (v125->tailmatch == *(unsigned __int8 *)(v120 + 32))
             + v125->tailmatch
             - *(_BYTE *)(v120 + 32);
      }
      else
      {
        v136 = v135 == 0;
      }
      v137 = v124 | v136;
      v124 = 0;
      if ( (v137 & 1) == 0 )
      {
LABEL_255:
        v123 = 0;
        goto LABEL_226;
      }
LABEL_250:
      v138 = v125->spath;
      v139 = *(_DWORD *)(v120 + 16);
      if ( v138 )
      {
        if ( !v139 )
        {
          if ( *(_DWORD *)(v120 + 16) )
          {
LABEL_259:
            v124 = 1;
            if ( *(_BYTE *)(v120 + 34) )
            {
              v193 = v125;
              v123 = (Cookie **)v120;
            }
            else
            {
              v123 = (Cookie **)v120;
              v193 = v125;
              if ( v125->livecookie )
                goto LABEL_270;
            }
            goto LABEL_226;
          }
LABEL_261:
          v124 = 0;
          v123 = 0;
          goto LABEL_226;
        }
        if ( !curl_strequal(v138, v139) )
          goto LABEL_261;
        v124 = 0;
        v123 = 0;
        if ( (v125->spath != 0) != (*(_DWORD *)(v120 + 16) == 0) )
          goto LABEL_259;
      }
      else
      {
        v124 = 0;
        v123 = 0;
        if ( !v139 )
          goto LABEL_259;
      }
LABEL_226:
      next = v125->next;
      if ( !v125->next )
      {
        if ( v123 )
        {
          creationtime = (Cookie *)v193->creationtime;
          name = v193->name;
          *v123 = v193->next;
          v123[9] = creationtime;
          v146 = (void (__fastcall **)(char *))Curl_cfree;
          ((void (__fastcall *)(char *))*Curl_cfree)(name);
          (*v146)(v193->value);
          (*v146)(v193->domain);
          (*v146)(v193->path);
          (*v146)(v193->spath);
          v147 = (char *)v123[1];
          v148 = (char *)v123[2];
          v149 = (char *)v123[3];
          v150 = (char *)v123[4];
          v151 = (char *)v123[5];
          v193->next = *v123;
          v193->name = v147;
          v193->value = v148;
          v193->path = v149;
          v193->spath = v150;
          v193->domain = v151;
          v152 = v123[7];
          v153 = v123[8];
          v154 = v123[9];
          v155 = v123[10];
          v156 = v123[11];
          LODWORD(v193->expires) = v123[6];
          HIDWORD(v193->expires) = v152;
          *(_DWORD *)&v193->tailmatch = v153;
          v193->creationtime = (int)v154;
          *(_DWORD *)&v193->prefix = v155;
          *((_DWORD *)&v193->prefix + 1) = v156;
          ((void (__fastcall *)(Cookie **))*Curl_cfree)(v123);
          v120 = (int)v193;
        }
LABEL_283:
        if ( !v122 )
          goto LABEL_288;
        v157 = !v195->running;
        if ( v195->running )
          v157 = (*((_BYTE *)&v122->set + 1337) & 0x20) == 0;
        if ( v157 )
        {
LABEL_288:
          v158 = v195;
          if ( (v124 & 1) != 0 )
            goto LABEL_293;
        }
        else
        {
          v172 = "Added";
          if ( (v124 & 1) != 0 )
            v172 = "Replaced";
          Curl_infof(
            v122,
            "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
            v172,
            *(_DWORD *)(v120 + 4),
            *(_DWORD *)(v120 + 8),
            *(_DWORD *)(v120 + 0x14),
            *(_DWORD *)(v120 + 12),
            *(_QWORD *)(v120 + 24));
          v158 = v195;
          if ( (v124 & 1) != 0 )
          {
LABEL_293:
            v159 = *(_QWORD *)(v120 + 24);
            if ( v159 )
            {
              next_expiration = v158->next_expiration;
              v160 = &v158->next_expiration;
              if ( v159 < __SPAIR64__(*((_DWORD *)v160 + 1), next_expiration) )
                *v160 = v159;
            }
            return (Cookie *)v120;
          }
        }
        if ( v125 )
          v125->next = (Cookie *)v120;
        else
          v158->cookies[v190] = (Cookie *)v120;
        ++v158->numcookies;
        goto LABEL_293;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_154:
    ((void (__fastcall *)(int))*Curl_cfree)(v16);
    return 0;
  }
  v187 = data;
  HIDWORD(v181) = 0x7FFFFFFF - (v13 >> 0x1F);
  v183 = (char *)&data->set + 1334;
  LODWORD(v181) = ~v13;
  v182 = v16 + 0x18;
  v184 = 0;
  while ( 1 )
  {
    for ( i = j + 1; ; ++i )
    {
      v18 = (unsigned __int8)*j;
      v19 = v18 == 32;
      if ( v18 != 32 )
        v19 = v18 == 9;
      if ( !v19 )
        break;
      ++j;
    }
    v20 = strcspn(j, ";\t\r\n=");
    if ( !v20 )
    {
      v26 = v196;
      v22 = j;
      goto LABEL_21;
    }
    v21 = v20;
    v22 = &j[v20];
    v23 = v20 - 1;
    do
    {
      v24 = (unsigned __int8)j[v23];
      v25 = v24 == 32;
      if ( v24 != 32 )
        v25 = v24 == 9;
      if ( !v25 )
      {
        v29 = (const char *)(v23 + 1);
        goto LABEL_29;
      }
      --v23;
    }
    while ( v23 != -1 );
    v29 = 0;
LABEL_29:
    if ( *v22 == 61 )
      break;
    v26 = v196;
    v38 = 0;
    v39 = 0;
    v33 = 0;
LABEL_41:
    v40 = (unsigned int)v29 > 0xFFE;
    if ( (unsigned int)v29 <= 0xFFE )
      v40 = v38 > 0xFFE;
    if ( v40 || (unsigned int)&v29[v38] > 0x1000 )
    {
      v112 = v38;
      v113 = (void (__fastcall **)(int))Curl_cfree;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v26 + 20));
      (*v113)(*(_DWORD *)(v26 + 12));
      (*v113)(*(_DWORD *)(v26 + 16));
      (*v113)(*(_DWORD *)(v26 + 4));
      (*v113)(*(_DWORD *)(v26 + 8));
      (*v113)(v26);
      v12 = 0;
      if ( (v183[3] & 0x20) != 0 )
        Curl_infof(v187, "oversized cookie dropped, name/val %zu + %zu bytes", (size_t)v29, v112);
      return (Cookie *)v12;
    }
    if ( v18 == 95 && (unsigned int)v29 >= 7 && j[1] == 95 )
    {
      v41 = v38;
      if ( curl_strnequal("__Secure-", j, 9) )
      {
        v38 = v41;
        *(_BYTE *)(v26 + 40) |= 1u;
      }
      else
      {
        v47 = curl_strnequal("__Host-", j, 7);
        v38 = v41;
        if ( v47 )
          *(_BYTE *)(v26 + 40) |= 2u;
      }
    }
    if ( !*(_DWORD *)(v26 + 4) )
    {
      if ( !v39 )
        goto LABEL_298;
      v54 = v38;
      v55 = (void (__fastcall **)(_DWORD))Curl_cfree;
      ((void (__fastcall *)(_DWORD))*Curl_cfree)(0);
      *(_DWORD *)(v26 + 4) = Curl_strndup(j, v29);
      (*v55)(*(_DWORD *)(v26 + 8));
      v56 = (const char *)Curl_strndup(v33, v54);
      v57 = v56 == 0;
      *(_DWORD *)(v26 + 8) = v56;
      if ( v56 )
      {
        v29 = *(const char **)(v26 + 4);
        v57 = v29 == 0;
      }
      if ( v57 )
        goto LABEL_298;
      if ( v56[strcspn(v56, invalid_octets_badoctets)] || v29[strcspn(v29, invalid_octets_badoctets)] )
      {
        if ( (v183[3] & 0x20) != 0 )
          Curl_infof(v187, "invalid octets in name/value, cookie dropped");
        goto LABEL_298;
      }
      goto LABEL_21;
    }
    if ( v38 )
      goto LABEL_60;
    if ( v29 == (const char *)&loc_8 )
    {
      v72 = curl_strnequal("httponly", j, 8);
      v38 = 0;
      if ( v72 )
      {
        *(_BYTE *)(v26 + 35) = 1;
        goto LABEL_21;
      }
    }
    else if ( v29 == (_BYTE *)&loc_4 + 2 )
    {
      v58 = curl_strnequal("secure", j, 6);
      v38 = 0;
      if ( v58 )
      {
        if ( !secure && v195->running )
          goto LABEL_298;
        *(_BYTE *)(v26 + 33) = 1;
        goto LABEL_21;
      }
    }
    if ( v39 )
    {
LABEL_60:
      if ( v29 != (_BYTE *)&loc_4 + 3 )
      {
        if ( v29 != (_BYTE *)&loc_4 + 2 )
        {
          if ( v29 == (const char *)&loc_4 )
          {
            v48 = v38;
            if ( curl_strnequal("path", j, 4) )
            {
              ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v26 + 12));
              v49 = Curl_strndup(v33, v48);
              *(_DWORD *)(v26 + 12) = v49;
              if ( !v49 )
                goto LABEL_298;
              ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v26 + 16));
              v50 = (const char *)((int (__fastcall *)(_DWORD))*Curl_cstrdup)(*(_DWORD *)(v26 + 12));
              if ( !v50 )
              {
                *(_DWORD *)(v26 + 16) = 0;
                goto LABEL_298;
              }
              v51 = (char *)v50;
              v52 = strlen(v50);
              if ( *v51 == 34 )
                memmove(v51, v51 + 1, v52--);
              if ( v52 )
              {
                v53 = v52 - 1;
                if ( v51[v52 - 1] == 34 )
                {
                  --v52;
                  v51[v53] = 0;
                }
              }
              else
              {
                v52 = 0;
              }
              if ( *v51 == 47 )
              {
                if ( v52 && v51[v52 - 1] == 47 )
                  v51[v52 - 1] = 0;
                *(_DWORD *)(v26 + 16) = v51;
              }
              else
              {
                ((void (__fastcall *)(char *))*Curl_cfree)(v51);
                v73 = Curl_strndup("/", 1);
                *(_DWORD *)(v26 + 16) = v73;
                if ( !v73 )
                  goto LABEL_298;
              }
            }
          }
          goto LABEL_21;
        }
        v63 = v38;
        v64 = curl_strnequal("domain", j, 6);
        v65 = v63 == 0;
        if ( v63 )
          v65 = v64 == 0;
        if ( v65 )
          goto LABEL_21;
        v66 = v63;
        v67 = v33 + 1;
        if ( *v33 == 46 )
          v66 = v63 - 1;
        else
          v67 = v33;
        v68 = v66;
        if ( v66 == 9 && curl_strnequal(v67, "localhost", 9)
          || (v69 = memchr(v67, 46, v68)) != 0 && (unsigned int)(&v67[v68] - v69) > 1 )
        {
          v70 = domain;
          v74 = v67;
          if ( domain )
            v74 = domain;
          is_ipnum = Curl_host_is_ipnum(v74);
          v71 = is_ipnum;
          if ( !domain )
          {
            v70 = 0;
LABEL_134:
            ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v26 + 20));
            v84 = Curl_strndup(v67, v68);
            *(_DWORD *)(v26 + 20) = v84;
            domain = v70;
            if ( !v71 && v84 )
            {
              *(_BYTE *)(v26 + 32) = 1;
              goto LABEL_21;
            }
            if ( !v84 )
            {
              v184 = 1;
LABEL_297:
              if ( (v184 & 1) == 0 )
              {
                if ( !domain
                  || *(_DWORD *)(v26 + 20)
                  || (v164 = ((int (__fastcall *)(const char *))*Curl_cstrdup)(domain),
                      (*(_DWORD *)(v26 + 20) = v164) != 0) )
                {
                  if ( path && !*(_DWORD *)(v26 + 12) )
                  {
                    v165 = strchr(path, 63);
                    v166 = v165 ? (char *)Curl_memrchr(path, 47, v165 - path) : strrchr(path, 47);
                    if ( v166 )
                    {
                      v174 = v166 - path;
                      v175 = (void *)((int (__fastcall *)(int))*Curl_cmalloc)(v166 - path + 2);
                      *(_DWORD *)(v26 + 12) = v175;
                      if ( !v175 )
                        goto LABEL_298;
                      memcpy(v175, path, v174 + 1);
                      *(_BYTE *)(*(_DWORD *)(v26 + 12) + v174 + 1) = 0;
                      v176 = (const char *)((int (__fastcall *)(_DWORD))*Curl_cstrdup)(*(_DWORD *)(v26 + 12));
                      if ( !v176 )
                      {
                        *(_DWORD *)(v26 + 16) = 0;
                        goto LABEL_298;
                      }
                      v177 = (char *)v176;
                      v178 = strlen(v176);
                      if ( *v177 == 34 )
                        memmove(v177, v177 + 1, v178--);
                      if ( v178 )
                      {
                        v179 = v178 - 1;
                        if ( v177[v178 - 1] == 34 )
                        {
                          --v178;
                          v177[v179] = 0;
                        }
                      }
                      else
                      {
                        v178 = 0;
                      }
                      if ( *v177 == 47 )
                      {
                        if ( v178 && v177[v178 - 1] == 47 )
                          v177[v178 - 1] = 0;
                        *(_DWORD *)(v26 + 16) = v177;
                      }
                      else
                      {
                        ((void (__fastcall *)(char *))*Curl_cfree)(v177);
                        v180 = Curl_strndup("/", 1);
                        *(_DWORD *)(v26 + 16) = v180;
                        if ( !v180 )
                          goto LABEL_298;
                      }
                    }
                  }
                  if ( *(_DWORD *)(v26 + 4) )
                  {
                    ++v187->req.setcookies;
                    goto LABEL_214;
                  }
                }
              }
LABEL_298:
              v162 = (void (__fastcall **)(int))Curl_cfree;
              ((void (__fastcall *)(_DWORD))*Curl_cfree)(*(_DWORD *)(v26 + 20));
              (*v162)(*(_DWORD *)(v26 + 12));
              (*v162)(*(_DWORD *)(v26 + 16));
              (*v162)(*(_DWORD *)(v26 + 4));
              (*v162)(*(_DWORD *)(v26 + 8));
              (*v162)(v26);
              return 0;
            }
            v184 |= v84 == 0;
            goto LABEL_21;
          }
          if ( is_ipnum )
          {
LABEL_104:
            if ( strncmp(v67, v70, v68) )
              goto LABEL_147;
            v71 = 1;
            if ( v68 != strlen(v70) )
              goto LABEL_147;
            goto LABEL_134;
          }
        }
        else
        {
          v70 = ":";
          if ( Curl_host_is_ipnum(":") )
            goto LABEL_104;
        }
        v76 = strlen(v70);
        if ( v76 < v68 )
          goto LABEL_147;
        v77 = v76;
        v186 = v70;
        v78 = &v70[v76 - v68];
        if ( !curl_strnequal(v67, v78, v68) )
        {
          v70 = v186;
LABEL_147:
          domain = v70;
          v184 = 1;
          if ( (v183[3] & 0x20) != 0 )
            Curl_infof(v187, "skipped cookie with bad tailmatch domain: %s", v67);
          goto LABEL_21;
        }
        v71 = 0;
        if ( v77 == v68 )
        {
          v70 = v186;
        }
        else
        {
          v85 = *((unsigned __int8 *)v78 - 1);
          v70 = v186;
          if ( v85 != 46 )
            goto LABEL_147;
        }
        goto LABEL_134;
      }
      v59 = v38;
      if ( curl_strnequal("version", j, 7) )
        goto LABEL_21;
      if ( !curl_strnequal("max-age", j, 7) )
      {
        if ( !curl_strnequal("expires", j, 7) )
          goto LABEL_21;
        v79 = v59;
        v40 = v59 > 0x7F;
        v60 = v182;
        if ( v40 || *(_QWORD *)v182 )
          goto LABEL_21;
        v80 = v33;
        v81 = v79;
        memcpy(dest, v80, v79);
        *((_BYTE *)dest + v81) = 0;
        v82 = Curl_getdate_capped(dest);
        *(_QWORD *)v182 = v82;
        if ( !v82 )
        {
          *(_DWORD *)v182 = 1;
          *(_DWORD *)(v182 + 4) = 0;
          goto LABEL_21;
        }
        if ( v82 > -1 )
          goto LABEL_21;
        v83 = 0;
        *(_DWORD *)v182 = 0;
LABEL_142:
        *(_DWORD *)(v60 + 4) = v83;
        goto LABEL_21;
      }
      v60 = v182;
      v61 = v33 + 1;
      if ( *v33 != 34 )
        v61 = v33;
      v62 = curlx_strtoofft(v61, 0, 10, v182);
      if ( v62 )
      {
        if ( v62 == 2 )
        {
LABEL_143:
          *(_DWORD *)v182 = 1;
          *(_DWORD *)(v182 + 4) = 0;
          goto LABEL_21;
        }
        if ( v62 != 1 )
          goto LABEL_21;
LABEL_141:
        *(_DWORD *)v182 = -1;
        v83 = 0x7FFFFFFF;
        goto LABEL_142;
      }
      if ( !*(_QWORD *)v182 )
        goto LABEL_143;
      if ( v181 < *(_QWORD *)v182 )
        goto LABEL_141;
      *(_QWORD *)v182 += v189;
    }
LABEL_21:
    for ( j = v22 + 1; ; ++j )
    {
      v27 = (unsigned __int8)*(j - 1);
      v28 = v27 == 32;
      if ( v27 != 32 )
        v28 = v27 == 9;
      if ( !v28 )
        break;
    }
    if ( v27 != 59 )
      goto LABEL_297;
  }
  v191 = v29;
  v30 = strcspn(&j[v21 + 1], ";\r\n");
  v31 = v21 + v30;
  v32 = 0;
  if ( v30 )
  {
    v33 = &i[v31];
    while ( 1 )
    {
      v34 = (unsigned __int8)*(v33 - 1);
      v35 = v34 == 32;
      if ( v34 != 32 )
        v35 = v34 == 9;
      if ( !v35 )
        break;
      --v30;
      --v33;
      if ( !v30 )
        goto LABEL_37;
    }
    v42 = (_DWORD *)v196;
    v43 = &i[v21];
    for ( k = 0; k != v30; ++k )
    {
      v45 = (unsigned __int8)v43[k];
      v46 = v45 == 32;
      if ( v45 != 32 )
        v46 = v45 == 9;
      if ( !v46 )
      {
        v32 = v30 - k;
        v33 = &v43[k];
        goto LABEL_38;
      }
    }
    v32 = 0;
  }
  else
  {
LABEL_37:
    v33 = &j[v21 + 1];
    v42 = (_DWORD *)v196;
  }
LABEL_38:
  v36 = v32;
  if ( !memchr(v33, 9, v32) )
  {
    v37 = &j[v31];
    v29 = v191;
    v38 = v36;
    v39 = 1;
    v26 = (int)v42;
    v22 = v37 + 1;
    goto LABEL_41;
  }
  v173 = (void (__fastcall **)(_DWORD *))Curl_cfree;
  ((void (__fastcall *)(_DWORD))*Curl_cfree)(v42[5]);
  (*v173)((_DWORD *)v42[3]);
  (*v173)((_DWORD *)v42[4]);
  (*v173)((_DWORD *)v42[1]);
  (*v173)((_DWORD *)v42[2]);
  (*v173)(v42);
  v12 = 0;
  if ( (v183[3] & 0x20) != 0 )
    Curl_infof(v187, "cookie contains TAB, dropping");
  return (Cookie *)v12;
}
