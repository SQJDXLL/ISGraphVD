Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  Cookie *v10; // r13
  time_t v11; // rax
  __int64 v12; // rax
  Cookie *v13; // rbx
  int v14; // ebp
  char *v15; // rbx
  char *i; // r13
  char v17; // r12
  size_t v18; // rax
  size_t v19; // r15
  char *v20; // rcx
  size_t v21; // r14
  char v22; // al
  const char *v23; // rbp
  size_t v24; // rax
  size_t v25; // rbx
  char v26; // dl
  char v27; // r15
  size_t v28; // rax
  size_t v29; // r15
  __int64 v30; // rbx
  CookieInfo *v31; // rax
  char *v32; // rax
  const char *v33; // r12
  const char **v34; // r14
  const char *v35; // rbx
  int v36; // eax
  const char *v37; // r14
  size_t v38; // rbx
  const char *v39; // r12
  const char *v40; // rdi
  unsigned __int8 is_ipnum; // r15
  const char *v42; // rsi
  bool v43; // al
  unsigned int v44; // ecx
  const char *v45; // rdi
  int v46; // eax
  char v47; // al
  __int64 v48; // rax
  __int64 v49; // rax
  char v50; // bp
  CookieInfo *v51; // rbx
  const char *v52; // r12
  __int64 v53; // rax
  char *v54; // rax
  char *v55; // rax
  char *v56; // rax
  const char *v57; // rbp
  int v58; // r14d
  char v59; // r13
  char *v60; // rax
  const char *v61; // rax
  __int64 v62; // rax
  __int64 v63; // rbx
  __int64 v64; // rax
  char *v65; // rax
  __int64 v66; // rax
  _BOOL4 v67; // r14d
  char v68; // al
  Cookie *v69; // rdi
  unsigned __int8 prefix; // al
  bool running; // al
  int v72; // eax
  Cookie *next; // rax
  Cookie *v74; // r15
  char v75; // r14
  Cookie *v76; // rbx
  char *v77; // rdi
  char *v78; // rsi
  const char *spath; // rbp
  char *v80; // r12
  char *v81; // rax
  size_t v82; // rax
  char *v83; // rdi
  char *v84; // rsi
  bool v85; // zf
  char *v86; // rdi
  char *v87; // rsi
  const char *v88; // rdi
  char *v89; // rax
  char *v90; // rax
  __int128 v91; // xmm0
  __int128 v92; // xmm1
  __int128 v93; // xmm2
  const char *v94; // rdx
  Cookie **p_next; // rax
  curl_off_t expires; // rax
  signed __int64 v97; // r13
  char *v98; // rax
  size_t v99; // r13
  char *v100; // rax
  char v101; // al
  Cookie *v103; // [rsp+0h] [rbp-128h]
  __int64 v104; // [rsp+8h] [rbp-120h]
  curl_off_t *p_expires; // [rsp+8h] [rbp-120h]
  size_t v106; // [rsp+8h] [rbp-120h]
  const char *v107; // [rsp+10h] [rbp-118h]
  time_t v112; // [rsp+38h] [rbp-F0h]
  char **p_name; // [rsp+40h] [rbp-E8h]
  curl_off_t *v114; // [rsp+50h] [rbp-D8h]
  char **p_domain; // [rsp+58h] [rbp-D0h]
  char **str; // [rsp+60h] [rbp-C8h]
  char **p_value; // [rsp+68h] [rbp-C0h]
  char *dest[23]; // [rsp+70h] [rbp-B8h] BYREF

  v10 = 0LL;
  v11 = time(0LL);
  if ( data->req.setcookies > 0x31u )
    return v10;
  v112 = v11;
  v12 = Curl_ccalloc(1LL, 72LL);
  if ( !v12 )
    return 0LL;
  v13 = (Cookie *)v12;
  v103 = (Cookie *)v12;
  if ( !httpheader )
  {
    dest[0] = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 10;
      v13->httponly = 1;
      if ( *lineptr == 35 )
        goto LABEL_8;
    }
    else if ( *lineptr == 35 )
    {
LABEL_8:
      Curl_cfree(v13);
      return 0LL;
    }
    v54 = strchr(lineptr, 13);
    if ( v54 )
      *v54 = 0;
    v55 = strchr(lineptr, 10);
    if ( v55 )
      *v55 = 0;
    v56 = strtok_r(lineptr, "\t", dest);
    if ( v56 )
    {
      v57 = v56;
      p_expires = &v13->expires;
      v58 = 0;
      v59 = 0;
      while ( 2 )
      {
        switch ( v58 )
        {
          case 0:
            if ( *v57 == 46 )
              ++v57;
            v60 = (char *)Curl_cstrdup(v57);
            v13->domain = v60;
            goto LABEL_183;
          case 1:
            v13->tailmatch = (unsigned int)curl_strequal(v57, "TRUE") != 0;
            goto LABEL_196;
          case 2:
            if ( !strcmp("TRUE", v57) || !strcmp("FALSE", v57) )
            {
              v63 = Curl_cstrdup("/");
              v103->path = (char *)v63;
              v64 = Curl_cstrdup("/");
              if ( !v64 )
                v59 = 1;
              v85 = v63 == 0;
              v13 = v103;
              v103->spath = (char *)v64;
              if ( v85 )
                v59 = 1;
              ++v58;
LABEL_191:
              v13->secure = 0;
              if ( (unsigned int)curl_strequal(v57, "TRUE") )
              {
                if ( secure || c->running )
                {
                  v13->secure = 1;
                  goto LABEL_196;
                }
LABEL_195:
                v59 = 1;
              }
            }
            else
            {
              v61 = (const char *)Curl_cstrdup(v57);
              v13->path = (char *)v61;
              if ( !v61 )
                goto LABEL_195;
              v60 = sanitize_cookie_path(v61);
              v13->spath = v60;
LABEL_183:
              if ( !v60 )
                v59 = 1;
            }
LABEL_196:
            v65 = strtok_r(0LL, "\t", dest);
            ++v58;
            if ( !v65 )
              goto LABEL_202;
            v57 = v65;
            if ( (v59 & 1) != 0 )
              goto LABEL_202;
            continue;
          case 3:
            goto LABEL_191;
          case 4:
            if ( (unsigned int)curlx_strtoofft(v57, 0LL, 10LL, p_expires) )
              v59 = 1;
            goto LABEL_196;
          case 5:
            v62 = Curl_cstrdup(v57);
            v13->name = (char *)v62;
            if ( !v62 )
              goto LABEL_195;
            if ( (unsigned int)curl_strnequal("__Secure-", v62, 9LL) )
            {
              v13->prefix |= 1u;
            }
            else if ( (unsigned int)curl_strnequal("__Host-", v13->name, 7LL) )
            {
              v13->prefix |= 2u;
            }
            goto LABEL_196;
          case 6:
            v60 = (char *)Curl_cstrdup(v57);
            v13->value = v60;
            goto LABEL_183;
          default:
            goto LABEL_196;
        }
      }
    }
    v59 = 0;
    v58 = 0;
LABEL_202:
    if ( v58 == 6 )
    {
      v66 = Curl_cstrdup(&L_str_22);
      v13->value = (char *)v66;
      v85 = v66 == 0;
      v67 = v66 == 0;
      v68 = v59;
      v59 = 1;
      if ( !v85 )
        v59 = v68;
      v58 = v67 ^ 7;
    }
    if ( (v59 & 1) != 0 || v58 != 7 )
    {
LABEL_303:
      v69 = v13;
      goto LABEL_304;
    }
    v51 = c;
    goto LABEL_209;
  }
  if ( strlen(lineptr) > 0x1388 )
  {
    Curl_cfree(v13);
    v14 = 1;
    goto LABEL_157;
  }
  p_name = &v13->name;
  str = &v13->path;
  v114 = &v13->expires;
  p_domain = &v13->domain;
  p_value = &v13->value;
  v107 = 0LL;
  v15 = lineptr;
  while ( 2 )
  {
    for ( i = v15; ; ++i )
    {
      v17 = *i;
      if ( *i != 32 && v17 != 9 )
        break;
    }
    v18 = strcspn(i, ";\t\r\n=");
    if ( !v18 )
      goto LABEL_122;
    v19 = v18;
    v20 = &i[v18];
    v21 = v18;
    do
    {
      v22 = i[v21 - 1];
      if ( v22 != 32 && v22 != 9 )
      {
        if ( *v20 != 61 )
          goto LABEL_28;
LABEL_21:
        v23 = &i[v19 + 1];
        v24 = strcspn(v23, ";\r\n");
        if ( v24 )
        {
          v25 = v24;
          while ( 1 )
          {
            v26 = i[v19 + v25];
            if ( v26 != 32 && v26 != 9 )
              break;
            if ( !--v25 )
            {
              v25 = 0LL;
              break;
            }
          }
        }
        else
        {
          v25 = 0LL;
        }
        v28 = v19 + v24;
        if ( v25 )
        {
          v29 = v25 + v19;
          while ( *v23 == 32 || *v23 == 9 )
          {
            ++v23;
            if ( !--v25 )
            {
              v25 = 0LL;
              v23 = &i[v29 + 1];
              break;
            }
          }
        }
        v104 = (__int64)&i[v28 + 1];
        if ( memchr(v23, 9, v25) )
        {
          freecookie(v103);
          v14 = 1;
          if ( !data )
            goto LABEL_81;
          v30 = v104;
          if ( (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
            Curl_infof(data, "cookie contains TAB, dropping");
          goto LABEL_119;
        }
        v27 = 1;
        if ( v21 > 0xFFE )
          goto LABEL_51;
LABEL_44:
        if ( v25 > 0xFFE || v25 + v21 >= 0x1001 )
          goto LABEL_51;
        if ( v17 == 95 && v21 >= 7 && i[1] == 95 )
        {
          if ( (unsigned int)curl_strnequal("__Secure-", i, 9LL) )
          {
            v103->prefix |= 1u;
          }
          else if ( (unsigned int)curl_strnequal("__Host-", i, 7LL) )
          {
            v103->prefix |= 2u;
          }
        }
        v31 = (CookieInfo *)p_name;
        if ( !*p_name )
        {
          v33 = v23;
          v14 = 6;
          if ( !v27 )
            goto LABEL_80;
          strstore(p_name, i, v21);
          v34 = (const char **)p_value;
          strstore(p_value, v33, v25);
          v35 = *p_name;
          if ( !*p_name || !*v34 )
            goto LABEL_80;
          LODWORD(v32) = invalid_octets(*v34);
          if ( (_DWORD)v32 || (LODWORD(v32) = invalid_octets(v35), (_DWORD)v32) )
          {
            v30 = v104;
            if ( data && (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
              v32 = (char *)Curl_infof(data, "invalid octets in name/value, cookie dropped");
            goto LABEL_73;
          }
          goto LABEL_117;
        }
        if ( !v25 )
        {
          if ( v21 == 8 )
          {
            if ( (unsigned int)curl_strnequal("httponly", i, 8LL) )
            {
              v103->httponly = 1;
              goto LABEL_117;
            }
          }
          else if ( v21 == 6 && (unsigned int)curl_strnequal("secure", i, 6LL) )
          {
            if ( !secure )
            {
              v31 = c;
              if ( c->running )
              {
                v14 = 6;
                goto LABEL_80;
              }
            }
            v103->secure = 1;
LABEL_117:
            v30 = v104;
            goto LABEL_118;
          }
          if ( !v27 )
            goto LABEL_117;
        }
        if ( v21 != 7 )
        {
          if ( v21 != 6 )
          {
            if ( v21 == 4 && (unsigned int)curl_strnequal("path", i, 4LL) )
            {
              strstore(str, v23, v25);
              v14 = 6;
              if ( *str )
              {
                Curl_cfree(v103->spath);
                v32 = sanitize_cookie_path(v103->path);
                v103->spath = v32;
                v30 = v104;
                if ( !v32 )
                {
LABEL_73:
                  LOBYTE(v32) = 1;
                  v107 = v32;
                  goto LABEL_119;
                }
LABEL_118:
                v14 = 0;
                goto LABEL_119;
              }
LABEL_80:
              LOBYTE(v31) = 1;
              v107 = (const char *)v31;
              goto LABEL_81;
            }
            goto LABEL_117;
          }
          v36 = curl_strnequal("domain", i, 6LL);
          if ( !v25 || !v36 )
            goto LABEL_117;
          v37 = v23 + 1;
          if ( *v23 != 46 )
            v37 = v23;
          v38 = v25 - (*v23 == 46);
          v39 = domain;
          if ( bad_domain(v37, v38) )
            v39 = ":";
          v40 = v39;
          if ( !v39 )
            v40 = v37;
          is_ipnum = Curl_host_is_ipnum(v40);
          domain = v39;
          if ( v39 )
          {
            if ( is_ipnum )
            {
              v42 = v39;
              if ( strncmp(v37, v39, v38) || v38 != strlen(v39) )
                goto LABEL_135;
            }
            else
            {
              v42 = (const char *)v38;
              if ( !cookie_tailmatch(v37, v38, v39) )
              {
LABEL_135:
                v14 = 0;
                v30 = v104;
                if ( data )
                {
                  LOBYTE(v42) = 1;
                  v43 = 1;
                  if ( (*((_BYTE *)&data->set + 2229) & 0x20) == 0 )
                    goto LABEL_141;
                  v14 = 0;
                  v42 = "skipped cookie with bad tailmatch domain: %s";
                  Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v37);
                }
                LOBYTE(v42) = 1;
                v43 = 1;
LABEL_141:
                v107 = v42;
                if ( !v43 )
                  goto LABEL_119;
                goto LABEL_118;
              }
            }
          }
          strstore(p_domain, v37, v38);
          v43 = *p_domain != 0LL;
          v42 = v107;
          v44 = (unsigned __int8)v107;
          if ( !*p_domain )
            v44 = 1;
          v14 = 0;
          if ( !*p_domain )
            v14 = 6;
          if ( (*p_domain == 0LL) | is_ipnum )
          {
            v42 = (const char *)v44;
          }
          else
          {
            v103->tailmatch = 1;
            v14 = 0;
            v43 = 1;
          }
          v30 = v104;
          goto LABEL_141;
        }
        if ( (unsigned int)curl_strnequal("version", i, 7LL) )
          goto LABEL_117;
        if ( !(unsigned int)curl_strnequal("max-age", i, 7LL) )
        {
          if ( (unsigned int)curl_strnequal("expires", i, 7LL) && v25 <= 0x7F && !v103->expires )
          {
            memcpy(dest, v23, v25);
            *((_BYTE *)dest + v25) = 0;
            v48 = Curl_getdate_capped(dest);
            v103->expires = v48;
            if ( v48 )
            {
              if ( v48 < 0 )
                v103->expires = 0LL;
            }
            else
            {
              v103->expires = 1LL;
            }
          }
          goto LABEL_117;
        }
        v45 = v23 + 1;
        if ( *v23 != 34 )
          v45 = v23;
        v46 = curlx_strtoofft(v45, 0LL, 10LL, v114);
        if ( v46 )
        {
          if ( v46 != 2 )
          {
            if ( v46 != 1 )
              goto LABEL_117;
LABEL_145:
            *v114 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_117;
          }
        }
        else
        {
          v49 = *v114;
          if ( *v114 )
          {
            if ( 0x7FFFFFFFFFFFFFFFLL - v112 >= v49 )
            {
              *v114 = v112 + v49;
              goto LABEL_117;
            }
            goto LABEL_145;
          }
        }
        *v114 = 1LL;
        goto LABEL_117;
      }
      --v21;
    }
    while ( v21 );
    v21 = 0LL;
    if ( *v20 == 61 )
      goto LABEL_21;
LABEL_28:
    v104 = (__int64)v20;
    v25 = 0LL;
    v27 = 0;
    v23 = 0LL;
    if ( v21 <= 0xFFE )
      goto LABEL_44;
LABEL_51:
    freecookie(v103);
    v14 = 1;
    if ( data && (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
      Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v21, v25);
LABEL_81:
    v30 = v104;
LABEL_119:
    i = (char *)v30;
    if ( !v14 )
    {
LABEL_122:
      while ( 1 )
      {
        v47 = *i;
        if ( *i != 32 && v47 != 9 )
          break;
        ++i;
      }
      v15 = i + 1;
      v14 = 6;
      if ( v47 == 59 )
        v14 = 0;
      else
        v15 = i;
      if ( v14 )
        break;
      continue;
    }
    break;
  }
  if ( v14 == 6 )
  {
    v50 = (char)v107;
    v51 = c;
    if ( ((unsigned __int8)v107 & 1) != 0 )
    {
      v52 = path;
    }
    else
    {
      if ( !domain )
      {
        v52 = path;
        if ( ((unsigned __int8)v107 & 1) != 0 )
          goto LABEL_297;
        goto LABEL_264;
      }
      v52 = path;
      if ( !v103->domain )
      {
        v53 = Curl_cstrdup(domain);
        v103->domain = (char *)v53;
        v50 = 1;
        if ( v53 )
          v50 = (char)v107;
        if ( (v50 & 1) != 0 )
        {
LABEL_297:
          if ( (v50 & 1) != 0 || !v103->name )
          {
            freecookie(v103);
            v14 = 1;
          }
          else
          {
            ++data->req.setcookies;
            v14 = 0;
          }
          goto LABEL_158;
        }
LABEL_264:
        if ( v52 && !v103->path )
        {
          v89 = strchr(v52, 63);
          v90 = v89 ? (char *)Curl_memrchr(v52, 47LL, v89 - v52) : strrchr(v52, 47);
          if ( v90 )
          {
            v97 = v90 - v52;
            v98 = (char *)Curl_cmalloc(v90 - v52 + 2);
            v103->path = v98;
            if ( v98 )
            {
              v99 = v97 + 1;
              memcpy(v98, v52, v99);
              v103->path[v99] = 0;
              v100 = sanitize_cookie_path(v103->path);
              v103->spath = v100;
              v85 = v100 == 0LL;
              v101 = v50;
              v50 = 1;
              if ( !v85 )
                v50 = v101;
            }
            else
            {
              v50 = 1;
            }
          }
        }
        goto LABEL_297;
      }
    }
    if ( ((unsigned __int8)v107 & 1) != 0 )
      goto LABEL_297;
    goto LABEL_264;
  }
LABEL_157:
  v51 = c;
LABEL_158:
  if ( v14 )
    return 0LL;
LABEL_209:
  v69 = v103;
  prefix = v103->prefix;
  if ( (prefix & 1) != 0 && !v103->secure )
    goto LABEL_304;
  if ( (prefix & 2) != 0 && (!v103->secure || (v88 = v103->path) == 0LL || strcmp(v88, "/") || v103->tailmatch)
    || !(running = v51->running) && v51->newsession && !v103->expires )
  {
LABEL_270:
    v69 = v103;
    goto LABEL_304;
  }
  v103->livecookie = running;
  v72 = v51->lastct + 1;
  v51->lastct = v72;
  v103->creationtime = v72;
  if ( !noexpire )
    remove_expired(v51);
  v106 = cookiehash(v103->domain);
  next = v51->cookies[v106];
  if ( !next )
  {
    v75 = 0;
    v10 = 0LL;
    v74 = 0LL;
    v76 = 0LL;
LABEL_272:
    if ( v74 )
    {
      v74->next = v10->next;
      v74->creationtime = v10->creationtime;
      Curl_cfree(v10->name);
      Curl_cfree(v10->value);
      Curl_cfree(v10->domain);
      Curl_cfree(v10->path);
      Curl_cfree(v10->spath);
      *(_QWORD *)&v10->prefix = *(_QWORD *)&v74->prefix;
      v91 = *(_OWORD *)&v74->next;
      v92 = *(_OWORD *)&v74->value;
      v93 = *(_OWORD *)&v74->spath;
      *(_OWORD *)&v10->expires = *(_OWORD *)&v74->expires;
      *(_OWORD *)&v10->spath = v93;
      *(_OWORD *)&v10->value = v92;
      *(_OWORD *)&v10->next = v91;
      Curl_cfree(v74);
    }
    else
    {
      v10 = v103;
    }
    if ( data && c->running && (*((_BYTE *)&data->set + 2229) & 0x20) != 0 )
    {
      v94 = "Replaced";
      if ( (v75 & 1) == 0 )
        v94 = "Added";
      Curl_infof(
        data,
        "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
        v94,
        v10->name,
        v10->value,
        v10->domain,
        v10->path,
        v10->expires);
    }
    if ( (v75 & 1) == 0 )
    {
      p_next = &c->cookies[v106];
      if ( v76 )
        p_next = &v76->next;
      *p_next = v10;
      ++c->numcookies;
    }
    expires = v10->expires;
    if ( expires && expires < c->next_expiration )
      c->next_expiration = expires;
    return v10;
  }
  v74 = 0LL;
  v10 = 0LL;
  v75 = 0;
  while ( 2 )
  {
    v76 = next;
    if ( !(unsigned int)curl_strequal(next->name, v103->name) )
      goto LABEL_235;
    v77 = v76->domain;
    if ( v77 )
    {
      v78 = v103->domain;
      if ( v78 && (unsigned int)curl_strequal(v77, v78) )
        goto LABEL_226;
      goto LABEL_235;
    }
    if ( v103->domain )
      goto LABEL_235;
LABEL_226:
    spath = v76->spath;
    if ( !spath
      || (v80 = v103->spath) == 0LL
      || !v76->secure
      || v103->secure
      || secure
      || ((v81 = strchr(spath + 1, 47)) == 0LL ? (v82 = strlen(spath)) : (v82 = v81 - spath),
          !(unsigned int)curl_strnequal(spath, v80, v82)) )
    {
LABEL_235:
      if ( !v74 )
      {
        if ( !(unsigned int)curl_strequal(v76->name, v103->name) )
          goto LABEL_217;
        v83 = v76->domain;
        if ( !v83 )
        {
          v85 = v103->domain == 0LL;
          goto LABEL_243;
        }
        v84 = v103->domain;
        if ( v84 && (unsigned int)curl_strequal(v83, v84) )
        {
          v85 = v76->tailmatch == v103->tailmatch;
LABEL_243:
          if ( v85 )
            v75 = 1;
        }
        if ( (v75 & 1) != 0 )
        {
          v86 = v76->spath;
          if ( !v86 || (v87 = v103->spath) == 0LL || (unsigned int)curl_strequal(v86, v87) )
          {
            if ( (v76->spath != 0LL) == (v103->spath == 0LL) )
              v75 = 0;
            goto LABEL_251;
          }
          v75 = 0;
LABEL_217:
          v74 = 0LL;
        }
        else
        {
LABEL_251:
          if ( (v75 & 1) == 0 )
            goto LABEL_217;
          v74 = v103;
          if ( v103->livecookie )
          {
            v10 = v76;
          }
          else
          {
            v10 = v76;
            if ( v76->livecookie )
              goto LABEL_270;
          }
        }
      }
      next = v76->next;
      if ( !v76->next )
        goto LABEL_272;
      continue;
    }
    break;
  }
  v13 = v103;
  if ( !data || (*((_BYTE *)&data->set + 2229) & 0x20) == 0 )
    goto LABEL_303;
  Curl_infof(data, "cookie '%s' for domain '%s' dropped, would overlay an existing cookie", v103->name, v103->domain);
  v69 = v103;
LABEL_304:
  freecookie(v69);
  return 0LL;
}
