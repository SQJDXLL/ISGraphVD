Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *lineptr,
        const char *domain,
        const char *path,
        int secure)
{
  Cookie *v16; // $s3
  time_t v17; // $v0
  int v18; // $v0
  char *k; // $s5
  int v20; // $s1
  char *i; // $s1
  int v22; // $s2
  size_t v23; // $v0
  size_t v24; // $s4
  char *v25; // $v1
  unsigned int v26; // $s6
  int v27; // $v0
  size_t v28; // $v0
  size_t v29; // $a3
  size_t v30; // $a2
  char *v31; // $fp
  int v32; // $v1
  char *v33; // $a0
  int j; // $v1
  int v35; // $a2
  size_t v36; // $s1
  char *v37; // $s6
  size_t v38; // $s7
  int v39; // $s1
  char *v40; // $at
  int v41; // $v0
  const char *v42; // $v0
  char *v43; // $s2
  size_t v44; // $s4
  char *v45; // $v1
  int v46; // $v0
  int v47; // $v0
  const char *v48; // $s2
  int v49; // $s5
  int v50; // $v0
  int v51; // $v0
  size_t v52; // $s2
  _BYTE *v53; // $v0
  const char *v54; // $s5
  int v55; // $s4
  int v56; // $v0
  const char *v57; // $a0
  int v58; // $v0
  size_t v59; // $v0
  const char *v60; // $v1
  size_t v61; // $s5
  size_t v62; // $s6
  int v63; // $v0
  int v64; // $v0
  int v65; // $v0
  int v66; // $v1
  _BOOL4 v67; // $v0
  int v68; // $v0
  unsigned int v69; // $v1
  _BOOL4 v70; // $a0
  int v71; // $v0
  int v72; // $v0
  int v73; // $s1
  char *v74; // $v0
  int v75; // $v0
  char *v76; // $v0
  char *v77; // $v0
  int v78; // $s0
  void *v79; // $v0
  const char *v80; // $v0
  char *v81; // $s2
  size_t v82; // $s4
  char *v83; // $v1
  int v84; // $v0
  int v85; // $at
  int v86; // $s0
  time_t v87; // $s2
  int v88; // $s3
  int next_expiration_high; // $v0
  _BOOL4 v90; // $a0
  unsigned int next_expiration; // $v1
  Cookie *v92; // $s1
  Cookie **v93; // $s0
  Cookie *next; // $v0
  Cookie **v95; // $s2
  Cookie *v96; // $s7
  char v97; // $s6
  Cookie *v98; // $s3
  int v99; // $a1
  const char *spath; // $s4
  int v101; // $s5
  char *v102; // $v0
  size_t v103; // $a2
  int v104; // $a1
  int v105; // $at
  bool v106; // dc
  int v107; // $at
  int v108; // $a1
  const char *v109; // $a0
  Cookie *v110; // $at
  Cookie *v111; // $v0
  Cookie *v112; // $v1
  char *v113; // $a1
  char *v114; // $a2
  char *v115; // $a3
  Cookie *v116; // $t0
  Cookie *v117; // $t1
  Cookie *v118; // $s2
  Cookie **v119; // $s7
  Cookie *v120; // $fp
  Cookie **p_next; // $s1
  curl_off_t expires; // $v1
  Cookie *v123; // $s4
  _BOOL4 v124; // $a1
  int v125; // $at
  _BOOL4 v126; // $a1
  const char *v127; // $a2
  curl_off_t v128; // $v1
  int v129; // $at
  _BOOL4 v130; // $a1
  int v132; // [sp+34h] [-BCh]
  int *v133; // [sp+40h] [-B0h]
  char v134; // [sp+47h] [-A9h]
  Curl_easy *v136; // [sp+4Ch] [-A4h]
  int v137; // [sp+50h] [-A0h]
  int v138; // [sp+58h] [-98h]
  char *v139; // [sp+60h] [-90h]
  int v140; // [sp+64h] [-8Ch]
  CookieInfo *v141; // [sp+68h] [-88h]
  char *v142[32]; // [sp+70h] [-80h] BYREF

  v16 = 0;
  v17 = time(0u);
  if ( data->req.setcookies >= 0x32u )
    return v16;
  v138 = v17;
  v141 = c;
  v18 = Curl_ccalloc(1, 48);
  if ( !v18 )
    return v16;
  v137 = noexpire;
  k = (char *)lineptr;
  v20 = v18;
  v140 = v18;
  if ( !httpheader )
  {
    v142[0] = 0;
    if ( strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      if ( *lineptr == 35 )
        goto LABEL_5;
    }
    else
    {
      k = (char *)(lineptr + 10);
      *(_BYTE *)(v20 + 35) = 1;
      if ( lineptr[10] == 35 )
        goto LABEL_5;
    }
    v76 = strchr(k, 13);
    if ( v76 )
      *v76 = 0;
    v77 = strchr(k, 10);
    if ( v77 )
      *v77 = 0;
    if ( strtok_r(k, "\t", v142) )
      JUMPOUT(0x1440);
    Curl_cfree(*(_DWORD *)(v20 + 20));
    Curl_cfree(*(_DWORD *)(v20 + 12));
    Curl_cfree(*(_DWORD *)(v20 + 16));
    Curl_cfree(*(_DWORD *)(v20 + 4));
    Curl_cfree(*(_DWORD *)(v20 + 8));
    Curl_cfree(v20);
    return v16;
  }
  if ( strlen(lineptr) >= 0x1389 )
  {
LABEL_5:
    Curl_cfree(v20);
    return v16;
  }
  v136 = data;
  v132 = 0x7FFFFFFF - (v138 >> 0x1F);
  v133 = (int *)(v20 + 0x18);
  v134 = 0;
  do
  {
    for ( i = k + 1; ; ++i )
    {
      v22 = (unsigned __int8)*k;
      if ( v22 != 32 && v22 != 9 )
        break;
      ++k;
    }
    v23 = strcspn(k, ";\t\r\n=");
    if ( !v23 )
    {
      v37 = k;
      goto LABEL_149;
    }
    v24 = v23;
    v25 = &k[v23];
    v26 = v23;
    while ( 1 )
    {
      v27 = (unsigned __int8)k[v26 - 1];
      if ( v27 != 32 && v27 != 9 )
        break;
      if ( !--v26 )
      {
        v26 = 0;
        if ( *v25 != 61 )
          goto LABEL_32;
        goto LABEL_20;
      }
    }
    if ( *v25 != 61 )
    {
LABEL_32:
      v38 = 0;
      v39 = 0;
      v31 = 0;
      v139 = v25;
      goto LABEL_38;
    }
LABEL_20:
    v28 = strcspn(&k[v24 + 1], ";\r\n");
    v29 = v24 + v28;
    v30 = 0;
    if ( v28 )
    {
      v31 = &i[v29];
      while ( 1 )
      {
        v32 = (unsigned __int8)*(v31 - 1);
        if ( v32 != 32 && v32 != 9 )
          break;
        --v28;
        --v31;
        if ( !v28 )
        {
          v36 = v29;
          v31 = &k[v24 + 1];
          goto LABEL_36;
        }
      }
      v33 = &i[v24];
      for ( j = 0; j != v28; ++j )
      {
        v35 = (unsigned __int8)v33[j];
        if ( v35 != 32 && v35 != 9 )
        {
          v36 = v29;
          v30 = v28 - j;
          v31 = &v33[j];
          goto LABEL_36;
        }
      }
      v36 = v29;
      v30 = 0;
    }
    else
    {
      v36 = v24 + v28;
      v31 = &k[v24 + 1];
    }
LABEL_36:
    v38 = v30;
    if ( ((int (__fastcall *)(char *, int))memchr)(v31, 9) )
    {
      Curl_cfree(*(_DWORD *)(v140 + 20));
      Curl_cfree(*(_DWORD *)(v140 + 12));
      Curl_cfree(*(_DWORD *)(v140 + 16));
      Curl_cfree(*(_DWORD *)(v140 + 4));
      Curl_cfree(*(_DWORD *)(v140 + 8));
      Curl_cfree(v140);
      v16 = 0;
      if ( (*((_BYTE *)&data->set + 1338) & 8) != 0 )
        Curl_infof(data, "cookie contains TAB, dropping");
      return v16;
    }
    v40 = &k[v36];
    v39 = 1;
    v139 = v40 + 1;
LABEL_38:
    if ( v26 >= 0xFFF || v38 >= 0xFFF || v38 + v26 >= 0x1001 )
    {
      Curl_cfree(*(_DWORD *)(v140 + 20));
      Curl_cfree(*(_DWORD *)(v140 + 12));
      Curl_cfree(*(_DWORD *)(v140 + 16));
      Curl_cfree(*(_DWORD *)(v140 + 4));
      Curl_cfree(*(_DWORD *)(v140 + 8));
      Curl_cfree(v140);
      v16 = 0;
      if ( (*((_BYTE *)&data->set + 1338) & 8) != 0 )
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v26, v38);
      return v16;
    }
    if ( v22 == 95 && v26 >= 7 && k[1] == 95 )
    {
      if ( curl_strnequal("__Secure-", k, 9) )
      {
        *(_BYTE *)(v140 + 40) |= 1u;
      }
      else if ( curl_strnequal("__Host-", k, 7) )
      {
        *(_BYTE *)(v140 + 40) |= 2u;
      }
    }
    if ( *(_DWORD *)(v140 + 4) )
    {
      if ( !v38 )
      {
        if ( v26 == 8 )
        {
          if ( curl_strnequal("httponly", k, 8) )
          {
            v37 = v139;
            *(_BYTE *)(v140 + 35) = 1;
            goto LABEL_149;
          }
        }
        else if ( v26 == 6 && curl_strnequal("secure", k, 6) )
        {
          if ( !secure && v141->running )
            goto LABEL_300;
          v37 = v139;
          *(_BYTE *)(v140 + 33) = 1;
          goto LABEL_149;
        }
        if ( !v39 )
        {
          v37 = v139;
          goto LABEL_149;
        }
      }
      switch ( v26 )
      {
        case 7u:
          if ( curl_strnequal("version", k, 7) )
          {
            v37 = v139;
          }
          else if ( curl_strnequal("max-age", k, 7) )
          {
            if ( *v31 == 0x22 )
              ++v31;
            v56 = ((int (__fastcall *)(char *, _DWORD, int, int *))curlx_strtoofft)(v31, 0, 10, v133);
            if ( v56 )
            {
              v37 = v139;
              if ( v56 == 2 )
              {
                *v133 = 0;
                v133[1] = 1;
              }
              else if ( v56 == 1 )
              {
                v133[1] = -1;
                *v133 = 0x7FFFFFFF;
              }
            }
            else
            {
              v68 = *v133;
              v69 = v133[1];
              v37 = v139;
              if ( *(_QWORD *)v133 )
              {
                v70 = v132 >= v68;
                if ( v132 == v68 )
                  v70 = ~v138 >= v69;
                if ( v70 )
                {
                  v133[1] = v69 + v138;
                  *v133 = v68 + (v138 >> 0x1F) + __CFADD__(v69, v138);
                }
                else
                {
                  v133[1] = -1;
                  *v133 = 0x7FFFFFFF;
                }
              }
              else
              {
                *v133 = 0;
                v133[1] = 1;
              }
            }
          }
          else if ( curl_strnequal("expires", k, 7) )
          {
            if ( v38 < 0x80 && !*(_QWORD *)v133 )
            {
              memcpy(v142, v31, v38);
              *((_BYTE *)v142 + v38) = 0;
              v64 = ((int (__fastcall *)(char **))Curl_getdate_capped)(v142);
              *(_QWORD *)v133 = v64;
              if ( v64 )
              {
                if ( v64 < 0 )
                {
                  v133[1] = 0;
                  *v133 = 0;
                }
              }
              else
              {
                *v133 = 0;
                v133[1] = 1;
              }
            }
            v37 = v139;
          }
          else
          {
            v37 = v139;
          }
          break;
        case 6u:
          v50 = curl_strnequal("domain", k, 6);
          if ( !v38 )
          {
            v37 = v139;
            break;
          }
          if ( !v50 )
          {
            v37 = v139;
            break;
          }
          v51 = (unsigned __int8)*v31;
          if ( v51 == 0x2E )
            ++v31;
          v52 = (__PAIR64__(v38, v51 ^ 0x2Eu) - 1) >> 32;
          if ( v52 == 9 && curl_strnequal(v31, "localhost", 9)
            || (v53 = (_BYTE *)memchr(v31, 46, v52)) != 0 && (unsigned int)(&v31[v52] - v53) >= 2 )
          {
            v54 = domain;
            v57 = domain;
            if ( !domain )
              v57 = v31;
            v58 = ((int (__fastcall *)(const char *))Curl_host_is_ipnum)(v57);
            v55 = v58;
            if ( domain )
            {
              if ( !v58 )
                goto LABEL_113;
LABEL_93:
              domain = v54;
              if ( strncmp(v31, v54, v52) )
                goto LABEL_117;
              v55 = 1;
              if ( v52 != strlen(v54) )
                goto LABEL_117;
            }
            else
            {
              domain = 0;
            }
          }
          else
          {
            v54 = ":";
            if ( ((int (__fastcall *)(const char *))Curl_host_is_ipnum)(v54) )
              goto LABEL_93;
LABEL_113:
            v59 = strlen(v54);
            v60 = v54;
            domain = v54;
            if ( v59 < v52
              || (v61 = v59, v62 = (size_t)&v60[v59 - v52], !curl_strnequal(v31, v62, v52))
              || (v55 = 0, v61 != v52) && *(_BYTE *)(v62 - 1) != 46 )
            {
LABEL_117:
              v134 = 1;
              if ( (*((_BYTE *)&data->set + 1338) & 8) != 0 )
                Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v31);
              v37 = v139;
              break;
            }
          }
          Curl_cfree(*(_DWORD *)(v140 + 20));
          v65 = Curl_memdup(v31, v52 + 1);
          *(_DWORD *)(v140 + 20) = v65;
          if ( !v65 )
            goto LABEL_300;
          *(_BYTE *)(v65 + v52) = 0;
          v66 = *(_DWORD *)(v140 + 20);
          v67 = v66 == 0;
          if ( v55 | v67 )
          {
            if ( !v66 )
              goto LABEL_300;
            v37 = v139;
            v134 |= v67;
          }
          else
          {
            v37 = v139;
            *(_BYTE *)(v140 + 32) = 1;
          }
          break;
        case 4u:
          if ( curl_strnequal("path", k, 4) )
          {
            Curl_cfree(*(_DWORD *)(v140 + 12));
            v41 = Curl_memdup(v31, v38 + 1);
            *(_DWORD *)(v140 + 12) = v41;
            if ( !v41 )
              goto LABEL_300;
            *(_BYTE *)(v41 + v38) = 0;
            if ( !*(_DWORD *)(v140 + 12) )
              goto LABEL_300;
            Curl_cfree(*(_DWORD *)(v140 + 16));
            v42 = (const char *)Curl_cstrdup(*(_DWORD *)(v140 + 12));
            if ( !v42 )
              goto LABEL_191;
            v43 = (char *)v42;
            v44 = strlen(v42);
            if ( *v43 == 34 )
              memmove(v43, v43 + 1, v44--);
            v37 = v139;
            if ( !v44 )
            {
              if ( *v43 != 47 )
              {
LABEL_123:
                Curl_cfree(v43);
                v63 = Curl_memdup("/", 2);
                if ( !v63 )
                {
LABEL_191:
                  *(_DWORD *)(v140 + 16) = 0;
                  goto LABEL_300;
                }
                v37 = v139;
                v43 = (char *)v63;
                *(_BYTE *)(v63 + 1) = 0;
              }
LABEL_125:
              *(_DWORD *)(v140 + 16) = v43;
              break;
            }
            v45 = &v43[v44 - 1];
            if ( *v45 == 34 )
            {
              --v44;
              *v45 = 0;
            }
            if ( *v43 != 47 )
              goto LABEL_123;
            if ( !v44 || v43[v44 - 1] != 47 )
              goto LABEL_125;
            v43[v44 - 1] = 0;
            *(_DWORD *)(v140 + 16) = v43;
          }
          else
          {
            v37 = v139;
          }
          break;
        default:
          v37 = v139;
          break;
      }
    }
    else
    {
      if ( !v39 )
        goto LABEL_300;
      Curl_cfree(0);
      v46 = Curl_memdup(k, v26 + 1);
      *(_DWORD *)(v140 + 4) = v46;
      if ( v46 )
        *(_BYTE *)(v46 + v26) = 0;
      Curl_cfree(*(_DWORD *)(v140 + 8));
      v47 = Curl_memdup(v31, v38 + 1);
      *(_DWORD *)(v140 + 8) = v47;
      if ( v47 )
        *(_BYTE *)(v47 + v38) = 0;
      v48 = *(const char **)(v140 + 4);
      if ( !v48 )
        goto LABEL_300;
      v49 = *(_DWORD *)(v140 + 8);
      if ( !v49 )
        goto LABEL_300;
      v37 = v139;
      if ( *(_BYTE *)(v49 + strcspn(*(const char **)(v140 + 8), invalid_octets_badoctets))
        || v48[strcspn(v48, invalid_octets_badoctets)] )
      {
        if ( (*((_BYTE *)&data->set + 1338) & 8) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
        goto LABEL_300;
      }
    }
LABEL_149:
    for ( k = v37 + 1; ; ++k )
    {
      v71 = (unsigned __int8)*(k - 1);
      if ( v71 != 32 && v71 != 9 )
        break;
    }
  }
  while ( v71 == 59 );
  if ( (v134 & 1) != 0 )
    goto LABEL_300;
  if ( domain )
  {
    if ( !*(_DWORD *)(v140 + 20) )
    {
      v72 = Curl_cstrdup(domain);
      *(_DWORD *)(v140 + 20) = v72;
      if ( !v72 )
        goto LABEL_300;
    }
  }
  v73 = v140;
  if ( !path || *(_DWORD *)(v140 + 12) )
    goto LABEL_196;
  v74 = strchr(path, 63);
  v75 = v74 ? ((int (__fastcall *)(const char *, int, int))Curl_memrchr)(path, 47, v74 - path) : (int)strrchr(path, 47);
  if ( !v75 )
    goto LABEL_196;
  v78 = v75 - (_DWORD)path;
  v79 = (void *)Curl_cmalloc(v75 - (_DWORD)path + 2);
  *(_DWORD *)(v140 + 12) = v79;
  if ( !v79 )
  {
LABEL_300:
    Curl_cfree(*(_DWORD *)(v140 + 20));
    Curl_cfree(*(_DWORD *)(v140 + 12));
    Curl_cfree(*(_DWORD *)(v140 + 16));
    Curl_cfree(*(_DWORD *)(v140 + 4));
    Curl_cfree(*(_DWORD *)(v140 + 8));
    Curl_cfree(v140);
    return 0;
  }
  memcpy(v79, path, v78 + 1);
  v73 = v140;
  *(_BYTE *)(*(_DWORD *)(v140 + 12) + v78 + 1) = 0;
  v80 = (const char *)Curl_cstrdup(*(_DWORD *)(v140 + 12));
  if ( !v80 )
  {
LABEL_299:
    *(_DWORD *)(v140 + 16) = 0;
    goto LABEL_300;
  }
  v81 = (char *)v80;
  v82 = strlen(v80);
  if ( *v81 == 34 )
    memmove(v81, v81 + 1, v82--);
  if ( !v82 )
  {
    if ( *v81 == 47 )
      goto LABEL_195;
LABEL_193:
    Curl_cfree(v81);
    v84 = Curl_memdup("/", 2);
    if ( v84 )
    {
      v81 = (char *)v84;
      *(_BYTE *)(v84 + 1) = 0;
      goto LABEL_195;
    }
    goto LABEL_299;
  }
  v83 = &v81[v82 - 1];
  if ( *v83 == 34 )
  {
    --v82;
    *v83 = 0;
  }
  if ( *v81 != 47 )
    goto LABEL_193;
  if ( v82 && v81[v82 - 1] == 47 )
    v81[v82 - 1] = 0;
LABEL_195:
  *(_DWORD *)(v140 + 16) = v81;
LABEL_196:
  if ( !*(_DWORD *)(v73 + 4) )
    goto LABEL_300;
  ++v136->req.setcookies;
  v16 = 0;
  if ( (*(_BYTE *)(v140 + 40) & 1) != 0 && !*(_BYTE *)(v140 + 33)
    || (*(_BYTE *)(v140 + 40) & 2) != 0
    && (!*(_BYTE *)(v140 + 33) || (v109 = *(const char **)(v140 + 12)) == 0
                               || strcmp(v109, "/")
                               || *(_BYTE *)(v140 + 32))
    || !v141->running && v141->newsession && !*(_QWORD *)(v140 + 24) )
  {
    Curl_cfree(*(_DWORD *)(v140 + 20));
    Curl_cfree(*(_DWORD *)(v140 + 12));
    Curl_cfree(*(_DWORD *)(v140 + 16));
    Curl_cfree(*(_DWORD *)(v140 + 4));
    Curl_cfree(*(_DWORD *)(v140 + 8));
    Curl_cfree(v140);
    return v16;
  }
  *(_BYTE *)(v140 + 34) = v141->running;
  v85 = v141->lastct + 1;
  v141->lastct = v85;
  *(_DWORD *)(v140 + 36) = v85;
  if ( !v137 )
  {
    v86 = 0;
    v87 = time(0u);
    v88 = v87 >> 0x1F;
    next_expiration_high = HIDWORD(v141->next_expiration);
    v90 = v87 >> 0x1F >= next_expiration_high;
    next_expiration = v141->next_expiration;
    if ( next_expiration_high == v87 >> 0x1F )
      v90 = v87 >= next_expiration;
    if ( v90 || !(~next_expiration | next_expiration_high ^ 0x7FFFFFFF) )
    {
      LODWORD(v141->next_expiration) = -1;
      HIDWORD(v141->next_expiration) = 0x7FFFFFFF;
      do
      {
        v119 = &v141->cookies[v86];
        v120 = *v119;
        if ( *v119 )
        {
          p_next = 0;
          do
          {
            expires = v120->expires;
            v123 = v120;
            v120 = v120->next;
            if ( !expires )
              goto LABEL_278;
            v124 = SHIDWORD(expires) >= v88;
            if ( HIDWORD(expires) == v88 )
              v124 = (unsigned int)expires >= v87;
            if ( v124 )
            {
LABEL_278:
              if ( expires )
              {
                v125 = HIDWORD(v141->next_expiration);
                v126 = SHIDWORD(expires) >= v125;
                if ( HIDWORD(expires) == v125 )
                  v126 = (unsigned int)expires >= LODWORD(v141->next_expiration);
                p_next = &v123->next;
                if ( !v126 )
                  v141->next_expiration = expires;
              }
              else
              {
                p_next = &v123->next;
              }
            }
            else
            {
              if ( p_next )
                *p_next = v120;
              else
                *v119 = v120;
              --v141->numcookies;
              Curl_cfree(v123->domain);
              Curl_cfree(v123->path);
              Curl_cfree(v123->spath);
              Curl_cfree(v123->name);
              Curl_cfree(v123->value);
              Curl_cfree(v123);
            }
          }
          while ( v120 );
        }
        ++v86;
      }
      while ( v86 != 63 );
    }
  }
  v92 = (Cookie *)v140;
  v93 = &v141->cookies[cookiehash(*(const char *const *)(v140 + 20))];
  next = *v93;
  if ( !*v93 )
  {
    v98 = 0;
    v97 = 0;
    goto LABEL_260;
  }
  v95 = 0;
  v96 = 0;
  v97 = 0;
  while ( 2 )
  {
    v98 = next;
    if ( ((int (__fastcall *)(char *, _DWORD))curl_strequal)(next->name, *(_DWORD *)(v140 + 4)) )
    {
      v99 = *(_DWORD *)(v140 + 20);
      if ( v98->domain )
      {
        if ( v99 && curl_strequal() )
        {
LABEL_214:
          spath = v98->spath;
          if ( spath )
          {
            v101 = *(_DWORD *)(v140 + 16);
            if ( v101 )
            {
              if ( v98->secure && !*(_BYTE *)(v140 + 33) && !secure )
              {
                v102 = strchr(spath + 1, 47);
                v103 = v102 ? v102 - spath : strlen(spath);
                if ( curl_strnequal(spath, v101, v103) )
                {
                  if ( v136 && (*((_BYTE *)&v136->set + 1338) & 8) != 0 )
                    Curl_infof(
                      v136,
                      "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                      *(_DWORD *)(v140 + 4),
                      *(_DWORD *)(v140 + 20));
                  goto LABEL_300;
                }
              }
            }
          }
        }
      }
      else if ( !v99 )
      {
        goto LABEL_214;
      }
    }
    if ( !v95 )
    {
      if ( !((int (__fastcall *)(char *, _DWORD))curl_strequal)(v98->name, *(_DWORD *)(v140 + 4)) )
      {
        v95 = 0;
        goto LABEL_209;
      }
      v104 = *(_DWORD *)(v140 + 20);
      if ( v98->domain )
      {
        if ( v104 && curl_strequal() )
        {
          v105 = v97 & 1 | (v98->tailmatch == *(unsigned __int8 *)(v140 + 32));
          v97 = 0;
          if ( !v105 )
          {
            v95 = 0;
            goto LABEL_209;
          }
        }
        else
        {
          v106 = (v97 & 1) != 0;
          v97 = 0;
          if ( !v106 )
          {
            v95 = 0;
            goto LABEL_209;
          }
        }
      }
      else
      {
        v107 = v97 & 1 | (v104 == 0);
        v97 = 0;
        if ( !v107 )
        {
          v95 = 0;
          goto LABEL_209;
        }
      }
      v108 = *(_DWORD *)(v140 + 16);
      if ( v98->spath )
      {
        if ( v108 )
        {
          if ( !curl_strequal() )
          {
            v97 = 0;
            v95 = 0;
            goto LABEL_209;
          }
          v97 = 0;
          v95 = 0;
          if ( (v98->spath != 0) == (*(_DWORD *)(v140 + 16) == 0) )
            goto LABEL_209;
        }
        else if ( !*(_DWORD *)(v140 + 16) )
        {
          v97 = 0;
          v95 = 0;
          goto LABEL_209;
        }
      }
      else
      {
        v97 = 0;
        v95 = 0;
        if ( v108 )
          goto LABEL_209;
      }
      v97 = 1;
      if ( *(_BYTE *)(v140 + 34) )
      {
        v96 = v98;
        v95 = (Cookie **)v140;
      }
      else
      {
        v96 = v98;
        v95 = (Cookie **)v140;
        if ( v98->livecookie )
          goto LABEL_300;
      }
    }
LABEL_209:
    next = v98->next;
    if ( v98->next )
      continue;
    break;
  }
  if ( v95 )
  {
    *v95 = v96->next;
    v95[9] = (Cookie *)v96->creationtime;
    Curl_cfree(v96->name);
    Curl_cfree(v96->value);
    Curl_cfree(v96->domain);
    Curl_cfree(v96->path);
    Curl_cfree(v96->spath);
    v110 = v95[7];
    v111 = v95[8];
    v112 = v95[9];
    v113 = (char *)v95[3];
    v114 = (char *)v95[4];
    v115 = (char *)v95[5];
    v116 = v95[6];
    v117 = v95[11];
    *(_DWORD *)&v96->prefix = v95[10];
    *((_DWORD *)&v96->prefix + 1) = v117;
    v96->creationtime = (int)v112;
    *(_DWORD *)&v96->tailmatch = v111;
    LODWORD(v96->expires) = v110;
    HIDWORD(v96->expires) = v116;
    v96->domain = v115;
    v96->spath = v114;
    v96->path = v113;
    v96->value = (char *)v95[2];
    v96->name = (char *)v95[1];
    v96->next = *v95;
    Curl_cfree(v95);
    v92 = v96;
  }
LABEL_260:
  if ( v136 && v141->running && (*((_BYTE *)&v136->set + 1338) & 8) != 0 )
  {
    v118 = v92;
    v127 = "Added";
    if ( (v97 & 1) != 0 )
      v127 = "Replaced";
    Curl_infof(v136, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld", v127, v92->name);
    if ( (v97 & 1) == 0 )
    {
LABEL_288:
      if ( v98 )
        v98->next = v118;
      else
        *v93 = v118;
      ++v141->numcookies;
    }
  }
  else
  {
    v118 = v92;
    if ( (v97 & 1) == 0 )
      goto LABEL_288;
  }
  v128 = v118->expires;
  if ( !v128 )
    return v118;
  v129 = HIDWORD(v141->next_expiration);
  v130 = SHIDWORD(v128) >= v129;
  if ( HIDWORD(v128) == v129 )
    v130 = (unsigned int)v128 >= LODWORD(v141->next_expiration);
  v16 = v118;
  if ( !v130 )
    v141->next_expiration = v128;
  return v16;
}
