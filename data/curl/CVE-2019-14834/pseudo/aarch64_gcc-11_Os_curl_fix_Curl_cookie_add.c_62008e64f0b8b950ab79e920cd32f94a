Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  Cookie *v13; // x19
  int v14; // w0
  size_t v16; // x0
  size_t v17; // x24
  const char *v18; // x28
  size_t v19; // x1
  int v20; // w0
  _BYTE *v22; // x26
  size_t v23; // x25
  int v24; // w0
  _BOOL4 v26; // w28
  bool v27; // cc
  unsigned __int8 v28; // w0
  const char *name; // x24
  char *value; // x25
  char *v31; // x0
  int v32; // w0
  _BYTE *v34; // x0
  const char *v35; // x0
  int is_ipnum; // w27
  __int64 v37; // x0
  bool v38; // zf
  int v39; // w0
  curl_off_t expires; // x1
  __int64 v41; // x0
  const char *v42; // x0
  int v43; // w0
  int livecookie; // w25
  Cookie *v45; // x23
  Cookie *v46; // x24
  Cookie *v47; // x27
  size_t v48; // x26
  Cookie *v49; // x22
  void (__fastcall *v50)(char *); // x1
  __int128 v51; // q1
  void (__fastcall *v52)(Cookie *); // x1
  __int128 v53; // q1
  const char *v54; // x2
  curl_off_t v55; // x0
  char *v56; // x0
  char *v57; // x0
  signed __int64 v58; // x0
  size_t v59; // x22
  char *v60; // x0
  char *v61; // x0
  char *v62; // x0
  char *v63; // x0
  char *v64; // x0
  char *v65; // x1
  const char *spath; // x28
  char *v67; // x0
  char *v68; // x1
  char *v69; // x27
  char *v70; // x0
  size_t v71; // x2
  char *v72; // x0
  char *v73; // x1
  const char *ptr; // [xsp+68h] [xbp+68h]
  _BOOL4 httpheadera; // [xsp+70h] [xbp+70h]
  int v77; // [xsp+80h] [xbp+80h]
  _BOOL4 badcookie; // [xsp+84h] [xbp+84h]
  time_t now; // [xsp+88h] [xbp+88h]
  _BOOL4 securea; // [xsp+90h] [xbp+90h]
  _BOOL4 noexpirea; // [xsp+94h] [xbp+94h]
  char *tok_buf; // [xsp+A0h] [xbp+A0h] BYREF
  char date[128]; // [xsp+A8h] [xbp+A8h] BYREF

  httpheadera = httpheader;
  noexpirea = noexpire;
  securea = secure;
  now = time(0uLL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  v13 = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !v13 )
    return 0LL;
  if ( httpheadera )
  {
    if ( strlen(lineptr) > 0x1388 )
    {
LABEL_7:
      Curl_cfree(v13);
      return 0LL;
    }
    badcookie = 0;
    while ( 1 )
    {
      while ( 1 )
      {
        v14 = *(unsigned __int8 *)lineptr;
        v77 = v14;
        if ( !*lineptr )
          break;
        if ( v14 != 32 && v14 != 9 )
          break;
        ++lineptr;
      }
      v16 = strcspn(lineptr, ";\t\r\n=");
      v17 = v16;
      if ( !v16 )
      {
        ptr = lineptr;
        goto LABEL_73;
      }
      v18 = &lineptr[v16];
      while ( 1 )
      {
        v19 = v17--;
        v20 = (unsigned __int8)lineptr[v17];
        if ( v20 != 32 && v20 != 9 )
          break;
        if ( !v17 )
          goto LABEL_23;
      }
      v17 = v19;
LABEL_23:
      if ( *v18 == 61 )
      {
        v22 = v18 + 1;
        v23 = strcspn(v18 + 1, ";\r\n");
        ptr = &v18[v23 + 1];
        while ( 1 )
        {
          if ( !v23 )
            goto LABEL_44;
          v24 = (unsigned __int8)v18[v23];
          if ( v24 != 32 && v24 != 9 )
            break;
          --v23;
        }
        while ( 1 )
        {
          v26 = *v22 == 32 || *v22 == 9;
          if ( !v26 )
            break;
          ++v22;
          if ( !--v23 )
            goto LABEL_36;
        }
        if ( memchr(v22, 9, v23) )
        {
          freecookie(v13);
          if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
            Curl_infof(data, "cookie contains TAB, dropping");
          return 0LL;
        }
LABEL_44:
        v26 = httpheadera;
      }
      else
      {
        v22 = 0LL;
        v23 = 0LL;
        ptr = v18;
        v26 = 0;
      }
LABEL_36:
      v27 = v17 > 0xFFE || v23 > 0xFFE;
      if ( v27 || v17 + v23 > 0x1000 )
      {
        freecookie(v13);
        if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
          Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v17, v23);
        return 0LL;
      }
      if ( v17 > 6 && v77 == 95 && lineptr[1] == 95 )
      {
        if ( (unsigned int)curl_strnequal("__Secure-", lineptr, 9LL) )
        {
          v28 = v13->prefix | 1;
LABEL_50:
          v13->prefix = v28;
          goto LABEL_51;
        }
        if ( (unsigned int)curl_strnequal("__Host-", lineptr, 7LL) )
        {
          v28 = v13->prefix | 2;
          goto LABEL_50;
        }
      }
LABEL_51:
      if ( !v13->name )
      {
        if ( !v26 )
          goto LABEL_59;
        strstore(&v13->name, lineptr, v17);
        strstore(&v13->value, v22, v23);
        name = v13->name;
        if ( !name )
          goto LABEL_59;
        value = v13->value;
        if ( !value )
          goto LABEL_59;
        if ( value[strcspn(v13->value, badoctets_0)] || name[strcspn(name, badoctets_0)] )
        {
          if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
            Curl_infof(data, "invalid octets in name/value, cookie dropped");
          goto LABEL_59;
        }
        goto LABEL_73;
      }
      if ( !v23 )
      {
        if ( v17 == 6 )
        {
          if ( (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
          {
            if ( !securea && c->running )
              goto LABEL_59;
            v13->secure = 1;
            goto LABEL_73;
          }
          if ( !v26 )
            goto LABEL_73;
LABEL_86:
          if ( !(unsigned int)curl_strnequal("domain", lineptr, 6LL) || !v23 )
            goto LABEL_73;
          if ( *v22 == 46 )
          {
            ++v22;
            --v23;
          }
          if ( v23 == 9 && (unsigned int)curl_strnequal(v22, "localhost", 9LL)
            || (v34 = memchr(v22, 46, v23)) != 0LL && v23 - (v34 - v22) > 1 )
          {
            if ( domain )
              v35 = domain;
            else
              v35 = v22;
          }
          else
          {
            domain = ":";
            v35 = ":";
          }
          is_ipnum = (unsigned __int8)Curl_host_is_ipnum(v35);
          if ( !domain )
          {
LABEL_98:
            strstore(&v13->domain, v22, v23);
            if ( !v13->domain )
              goto LABEL_59;
            if ( !is_ipnum )
              v13->tailmatch = 1;
            goto LABEL_73;
          }
          if ( is_ipnum )
          {
            if ( !strncmp(v22, domain, v23) && strlen(domain) == v23 )
              goto LABEL_98;
          }
          else if ( cookie_tailmatch(v22, v23, domain) )
          {
            goto LABEL_98;
          }
          if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
            Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v22);
          badcookie = httpheadera;
          goto LABEL_73;
        }
        if ( v17 == 8 )
        {
          if ( (unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
            v13->httponly = 1;
          goto LABEL_73;
        }
        if ( !v26 )
          goto LABEL_73;
      }
      if ( v17 == 4 )
      {
        if ( (unsigned int)curl_strnequal("path", lineptr, 4LL) )
        {
          strstore(&v13->path, v22, v23);
          if ( !v13->path )
            goto LABEL_59;
          Curl_cfree(v13->spath);
          v31 = sanitize_cookie_path(v13->path);
          v13->spath = v31;
          if ( !v31 )
            goto LABEL_59;
        }
        goto LABEL_73;
      }
      if ( v17 == 6 )
        goto LABEL_86;
      if ( v17 == 7 && !(unsigned int)curl_strnequal("version", lineptr, 7LL) )
      {
        if ( (unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
        {
          if ( *v22 == 34 )
            ++v22;
          v39 = curlx_strtoofft(v22, 0LL, 10LL, &v13->expires);
          if ( v39 == 1 )
          {
            v37 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            if ( v39 == 2 )
              goto LABEL_128;
            if ( v39 )
              goto LABEL_73;
            expires = v13->expires;
            if ( expires )
            {
              v37 = 0x7FFFFFFFFFFFFFFFLL;
              if ( expires <= 0x7FFFFFFFFFFFFFFFLL - now )
                v37 = expires + now;
            }
            else
            {
LABEL_128:
              v37 = 1LL;
            }
          }
        }
        else
        {
          if ( !(unsigned int)curl_strnequal("expires", lineptr, 7LL) || v13->expires || v23 > 0x7F )
            goto LABEL_73;
          *((_BYTE *)memcpy(date, v22, v23) + v23) = 0;
          v37 = Curl_getdate_capped();
          v38 = v37 == 0;
          if ( v37 < 0 )
            v37 = 0LL;
          if ( v38 )
            v37 = 1LL;
        }
        v13->expires = v37;
        goto LABEL_73;
      }
      while ( 1 )
      {
LABEL_73:
        v32 = *(unsigned __int8 *)ptr;
        if ( !*ptr )
          goto LABEL_136;
        if ( v32 != 32 && v32 != 9 )
          break;
        ++ptr;
      }
      if ( v32 != 59 )
      {
LABEL_136:
        if ( badcookie )
          goto LABEL_59;
        if ( !v13->domain )
        {
          if ( domain )
          {
            v41 = Curl_cstrdup(domain);
            v13->domain = (char *)v41;
            if ( !v41 )
              goto LABEL_59;
          }
        }
        if ( !v13->path && path )
        {
          v56 = strchr(path, 63);
          v57 = v56 ? (char *)Curl_memrchr(path, 47LL, v56 - path) : strrchr(path, 47);
          if ( v57 )
          {
            v58 = v57 - path;
            v59 = v58 + 1;
            v60 = (char *)Curl_cmalloc(v58 + 2);
            v13->path = v60;
            if ( !v60 )
              goto LABEL_59;
            memcpy(v60, path, v59);
            v13->path[v59] = 0;
            v61 = sanitize_cookie_path(v13->path);
            v13->spath = v61;
            if ( !v61 )
              goto LABEL_59;
          }
        }
        if ( !v13->name )
          goto LABEL_59;
        ++data->req.setcookies;
        if ( (v13->prefix & 1) != 0 && !v13->secure )
          goto LABEL_59;
        if ( (v13->prefix & 2) != 0 )
        {
          if ( !v13->secure )
            goto LABEL_59;
          v42 = v13->path;
          if ( !v42 || strcmp(v42, "/") || v13->tailmatch )
            goto LABEL_59;
        }
        if ( !c->running && c->newsession && !v13->expires )
          goto LABEL_59;
        v13->livecookie = c->running;
        v43 = c->lastct + 1;
        c->lastct = v43;
        v13->creationtime = v43;
        if ( !noexpirea )
          remove_expired(c);
        livecookie = 0;
        v45 = 0LL;
        v46 = 0LL;
        v47 = 0LL;
        v48 = cookiehash(v13->domain);
        v49 = c->cookies[v48];
        while ( 2 )
        {
          if ( !v49 )
          {
            if ( v46 )
            {
              v50 = (void (__fastcall *)(char *))Curl_cfree;
              v46->next = v45->next;
              v46->creationtime = v45->creationtime;
              v50(v45->name);
              Curl_cfree(v45->value);
              Curl_cfree(v45->domain);
              Curl_cfree(v45->path);
              Curl_cfree(v45->spath);
              v51 = *(_OWORD *)&v46->value;
              v52 = (void (__fastcall *)(Cookie *))Curl_cfree;
              v13 = v45;
              *(_OWORD *)&v45->next = *(_OWORD *)&v46->next;
              *(_OWORD *)&v45->value = v51;
              v53 = *(_OWORD *)&v46->expires;
              *(_OWORD *)&v45->spath = *(_OWORD *)&v46->spath;
              *(_OWORD *)&v45->expires = v53;
              *(_QWORD *)&v45->prefix = *(_QWORD *)&v46->prefix;
              v52(v46);
            }
            if ( c->running && (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
            {
              v54 = "Replaced";
              if ( !livecookie )
                v54 = "Added";
              Curl_infof(
                data,
                "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
                v54,
                v13->name,
                v13->value,
                v13->domain,
                v13->path,
                v13->expires);
            }
            if ( !livecookie )
            {
              if ( v47 )
                v47->next = v13;
              else
                c->cookies[v48] = v13;
              ++c->numcookies;
            }
            v55 = v13->expires;
            if ( v55 && v55 < c->next_expiration )
              c->next_expiration = v55;
            return v13;
          }
          if ( (unsigned int)curl_strequal(v49->name, v13->name) )
          {
            v64 = v49->domain;
            v65 = v13->domain;
            if ( v64 )
            {
              if ( v65 && (unsigned int)curl_strequal(v64, v65) )
              {
LABEL_191:
                spath = v49->spath;
                if ( spath )
                {
                  v69 = v13->spath;
                  if ( v69 )
                  {
                    if ( v49->secure && !v13->secure && !securea )
                    {
                      v70 = strchr(spath + 1, 47);
                      v71 = v70 ? v70 - spath : strlen(spath);
                      if ( (unsigned int)curl_strnequal(spath, v69, v71) )
                      {
                        if ( (*(_DWORD *)(&data->set.connect_only + 3) & 0x2000) != 0 )
                          Curl_infof(
                            data,
                            "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                            v13->name,
                            v13->domain);
                        goto LABEL_59;
                      }
                    }
                  }
                }
              }
            }
            else if ( !v65 )
            {
              goto LABEL_191;
            }
          }
          if ( v46 || !(unsigned int)curl_strequal(v49->name, v13->name) )
            goto LABEL_197;
          v67 = v49->domain;
          v68 = v13->domain;
          if ( v67 )
          {
            if ( v68 && (unsigned int)curl_strequal(v67, v68) && v49->tailmatch == v13->tailmatch )
            {
LABEL_212:
              v72 = v49->spath;
              v73 = v13->spath;
              if ( !v72 )
                goto LABEL_213;
              if ( v73 )
              {
                if ( (unsigned int)curl_strequal(v72, v73) )
                {
LABEL_213:
                  if ( (v49->spath == 0LL) != (v13->spath == 0LL) )
                    goto LABEL_214;
                  livecookie = v13->livecookie;
                  if ( v13->livecookie )
                  {
                    v45 = v49;
                    v46 = v13;
                  }
                  else
                  {
                    if ( v49->livecookie )
                      goto LABEL_59;
                    v45 = v49;
                    v46 = v13;
                    livecookie = 1;
                  }
LABEL_197:
                  v47 = v49;
                  v49 = v49->next;
                  continue;
                }
              }
              else
              {
                v46 = 0LL;
              }
LABEL_214:
              livecookie = 0;
              goto LABEL_197;
            }
          }
          else if ( !v68 )
          {
            goto LABEL_212;
          }
          break;
        }
        if ( livecookie )
          goto LABEL_212;
        goto LABEL_197;
      }
      lineptr = ptr + 1;
    }
  }
  tok_buf = 0LL;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
  {
    lineptr += 0xA;
    v13->httponly = 1;
  }
  if ( *lineptr == 35 )
    goto LABEL_7;
  v62 = strchr(lineptr, 13);
  if ( v62 )
    *v62 = 0;
  v63 = strchr(lineptr, 10);
  if ( v63 )
    *v63 = 0;
  if ( strtok_r((char *)lineptr, "\t", &tok_buf) )
    __asm { BR              X0 }
LABEL_59:
  freecookie(v13);
  return 0LL;
}
