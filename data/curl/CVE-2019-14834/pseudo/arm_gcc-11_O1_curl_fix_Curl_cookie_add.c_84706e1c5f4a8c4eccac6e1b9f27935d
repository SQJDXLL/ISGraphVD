Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  _BOOL4 v9; // r6
  char *v10; // r9
  unsigned int v11; // r6
  Cookie *v12; // r11
  size_t v13; // r5
  size_t v14; // r6
  char *v15; // r2
  int v16; // r3
  int v17; // t1
  bool v18; // zf
  const char *v19; // r3
  const char *v20; // r10
  int v21; // r2
  int v22; // t1
  bool v23; // zf
  const char *v24; // r4
  bool v25; // cc
  _BOOL4 v26; // r8
  int v27; // r0
  bool v28; // zf
  _BYTE *v29; // r0
  int is_ipnum; // r4
  char *v31; // r7
  const char *name; // r4
  char *value; // r5
  int v34; // r3
  bool v35; // zf
  int v36; // t1
  _BOOL4 v37; // r3
  _BOOL4 v38; // r3
  char *v39; // r0
  char *v40; // r5
  bool v41; // zf
  int v42; // r0
  int v43; // r0
  __int64 v44; // r2
  int v45; // r8
  bool v46; // zf
  int v47; // r0
  char *v48; // r4
  char *v49; // r0
  char *v50; // r3
  char *v51; // r5
  int v52; // r3
  size_t v53; // r4
  char *v54; // r0
  char *v55; // r0
  char *v56; // r0
  char *v57; // r0
  char *v58; // r4
  int v59; // r6
  int v60; // r0
  const char *v61; // r5
  int v62; // r0
  char v63; // r3
  int v64; // r3
  const char *v65; // r0
  char *v66; // r0
  int v67; // r5
  int v68; // r0
  int v69; // r1
  int v70; // r0
  unsigned int v71; // r4
  int v72; // r0
  char *v73; // r1
  const char *v74; // r8
  char *spath; // r9
  char *v76; // r0
  size_t v77; // r2
  int v78; // r0
  char *v79; // r1
  int v80; // r0
  char *v81; // r1
  int livecookie; // r7
  Cookie *v83; // r5
  char *v84; // r1
  char *v85; // r2
  char *v86; // r3
  char *v87; // r1
  int expires; // r2
  int expires_high; // r3
  int creationtime; // r1
  int v91; // r2
  int v92; // r3
  __int64 v93; // r2
  Curl_easy *v94; // r12
  const char *v96; // r2
  int v97; // r0
  const char *v98; // r0
  CookieInfo *v99; // r2
  int v100; // r3
  size_t v101; // r10
  char *v102; // r3
  char *v103; // r1
  size_t v104; // r2
  int v105; // r4
  int v106; // t1
  bool v107; // zf
  char *v108; // r4
  int v109; // [sp+0h] [bp-F8h] BYREF
  const char *domain_0; // [sp+18h] [bp-E0h]
  Curl_easy *dataa; // [sp+1Ch] [bp-DCh]
  char *s2; // [sp+20h] [bp-D8h]
  Curl_easy *v113; // [sp+24h] [bp-D4h]
  _BOOL4 v114; // [sp+2Ch] [bp-CCh]
  time_t v115; // [sp+30h] [bp-C8h]
  _BOOL4 v116; // [sp+34h] [bp-C4h]
  char *s; // [sp+38h] [bp-C0h]
  int v118; // [sp+3Ch] [bp-BCh]
  time_t v119; // [sp+40h] [bp-B8h]
  unsigned int v120; // [sp+44h] [bp-B4h]
  char *tok_buf; // [sp+48h] [bp-B0h] BYREF
  char date[128]; // [sp+4Ch] [bp-ACh] BYREF

  v113 = data;
  dataa = (Curl_easy *)c;
  v9 = httpheader;
  domain_0 = (const char *)httpheader;
  v116 = noexpire;
  v10 = (char *)lineptr;
  s2 = (char *)domain;
  s = (char *)path;
  v114 = secure;
  v115 = time(0u);
  if ( data->req.setcookies > 0x31u )
    return 0;
  v12 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v12 )
    return 0;
  if ( !v9 )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v10 = (char *)(lineptr + 0xA);
      v12->httponly = 1;
    }
    if ( *v10 == 35 )
    {
      Curl_cfree(v12);
    }
    else
    {
      v56 = strchr(v10, 13);
      if ( v56 )
        *v56 = 0;
      v57 = strchr(v10, 10);
      if ( v57 )
        *v57 = 0;
      v58 = strtok_r(v10, "\t", &tok_buf);
      if ( !v58 )
        goto LABEL_199;
      v59 = 0;
      s2 = "__Host-";
      while ( 2 )
      {
        switch ( v59 )
        {
          case 0:
            if ( *v58 == 46 )
              ++v58;
            v60 = Curl_cstrdup(v58);
            v12->domain = (char *)v60;
            if ( !v60 )
              goto LABEL_271;
            v61 = domain_0;
            goto LABEL_166;
          case 1:
            v62 = curl_strequal(v58, "TRUE");
            v63 = v62;
            if ( v62 )
              v63 = 1;
            v12->tailmatch = v63;
            v61 = domain_0;
            goto LABEL_166;
          case 2:
            if ( !strcmp("TRUE", v58) || !strcmp("FALSE", v58) )
            {
              v67 = Curl_cstrdup("/");
              v12->path = (char *)v67;
              v68 = Curl_cstrdup("/");
              v12->spath = (char *)v68;
              if ( v68 )
                v61 = (const char *)(v67 == 0);
              else
                v61 = (_BYTE *)(freecookie + 1);
LABEL_180:
              v12->secure = 0;
              if ( curl_strequal(v58, "TRUE") )
              {
                if ( !v114 && !*(&dataa->req.writer_stack_depth + 1) )
                {
                  v59 = 3;
LABEL_271:
                  strtok_r(0u, "\t", &tok_buf);
                  if ( v59 == 5 )
                  {
                    v61 = (_BYTE *)(freecookie + 1);
                    goto LABEL_274;
                  }
                  goto LABEL_199;
                }
                v12->secure = 1;
                v59 = 3;
              }
              else
              {
                v59 = 3;
              }
            }
            else
            {
              v65 = (const char *)Curl_cstrdup(v58);
              v12->path = (char *)v65;
              if ( !v65 )
                goto LABEL_271;
              v66 = sanitize_cookie_path(v65);
              v12->spath = v66;
              if ( !v66 )
                goto LABEL_271;
              v61 = domain_0;
            }
LABEL_166:
            ++v59;
            v58 = strtok_r(0u, "\t", &tok_buf);
            if ( v58 )
              v64 = ((unsigned __int8)v61 ^ 1) & 1;
            else
              v64 = 0;
            if ( v64 )
              continue;
            if ( v59 == 6 )
            {
LABEL_274:
              v97 = Curl_cstrdup(&LC2);
              v12->value = (char *)v97;
              if ( v97 )
              {
                v59 = 7;
                goto LABEL_276;
              }
            }
            else
            {
LABEL_276:
              if ( v59 != 7 )
                v61 = (const char *)((unsigned int)v61 | 1);
              if ( !v61 )
                goto LABEL_279;
            }
LABEL_199:
            freecookie(v12);
            break;
          case 3:
            v61 = domain_0;
            goto LABEL_180;
          case 4:
            if ( curlx_strtoofft(v58, 0, 10, &v12->expires) )
              goto LABEL_271;
            v61 = domain_0;
            goto LABEL_166;
          case 5:
            v69 = Curl_cstrdup(v58);
            v12->name = (char *)v69;
            if ( !v69 )
              goto LABEL_271;
            if ( curl_strnequal("__Secure-", v69, 9) )
            {
              v12->prefix |= 1u;
              v61 = domain_0;
            }
            else
            {
              if ( curl_strnequal(s2, v12->name, 7) )
                v12->prefix |= 2u;
              v61 = domain_0;
            }
            goto LABEL_166;
          case 6:
            v70 = Curl_cstrdup(v58);
            v12->value = (char *)v70;
            if ( !v70 )
              goto LABEL_271;
            v61 = domain_0;
            goto LABEL_166;
          default:
            v61 = domain_0;
            goto LABEL_166;
        }
        break;
      }
    }
    return 0;
  }
  if ( strlen(lineptr) > (unsigned int)&loc_1388 )
  {
    Curl_cfree(v12);
    return 0;
  }
  v118 = 0;
  v119 = v115 >> 31;
  v120 = 0x7FFFFFFF - (v115 >> 0x1F);
  while ( 1 )
  {
    v45 = (unsigned __int8)*v10;
    if ( !*v10 )
      break;
    v46 = v45 == 9;
    if ( v45 != 9 )
      v46 = v45 == 32;
    if ( v46 )
    {
      ++v10;
    }
    else
    {
      v13 = strcspn(v10, ";\t\r\n=");
      if ( v13 )
        goto LABEL_301;
      v34 = (unsigned __int8)*v10;
      v31 = v10;
      while ( 1 )
      {
LABEL_83:
        v35 = v34 == 9;
        if ( v34 != 9 )
          v35 = v34 == 32;
        if ( !v35 )
          break;
        v36 = (unsigned __int8)*++v31;
        v34 = v36;
        if ( !v36 )
          goto LABEL_88;
      }
      if ( v34 != 59 )
        goto LABEL_88;
      v10 = v31 + 1;
    }
  }
  v13 = strcspn(v10, ";\t\r\n=");
  if ( !v13 )
    goto LABEL_88;
LABEL_301:
  v102 = &v10[v13];
  v103 = &v10[v13];
  while ( 1 )
  {
    v104 = v13--;
    v106 = (unsigned __int8)*--v102;
    v105 = v106;
    v107 = v106 == 9;
    if ( v106 != 9 )
      v107 = v105 == 32;
    if ( !v107 )
      break;
    if ( !v13 )
    {
      if ( *v103 == 61 )
        goto LABEL_308;
      v14 = 0;
      v31 = v103;
      v20 = 0;
      v24 = 0;
LABEL_27:
      v26 = v45 == 95;
      if ( v13 <= 6 )
        v26 = 0;
      if ( v26 && v10[1] == 95 )
      {
        if ( curl_strnequal("__Secure-", v10, 9) )
        {
          v12->prefix |= 1u;
        }
        else if ( curl_strnequal("__Host-", v10, 7) )
        {
          v12->prefix |= 2u;
        }
      }
      if ( !v12->name )
      {
        if ( !v24 )
          goto LABEL_224;
        strstore(&v12->name, v10, v13);
        strstore(&v12->value, v20, v14);
        name = v12->name;
        if ( !name )
          goto LABEL_224;
        value = v12->value;
        if ( !value )
          goto LABEL_224;
        if ( value[strcspn(v12->value, badoctets_0)] || name[strcspn(name, badoctets_0)] )
        {
          if ( (*(&v113->set.connect_only + 4) & 0x20) != 0 )
            Curl_infof(v113, "invalid octets in name/value, cookie dropped");
          goto LABEL_224;
        }
        goto LABEL_82;
      }
      if ( v14 )
        goto LABEL_35;
      if ( v13 != 6 )
      {
        if ( v13 != 8 )
        {
          if ( v24 )
          {
LABEL_35:
            if ( v13 != 4 )
              goto LABEL_36;
            if ( curl_strnequal("path", v10, 4) )
            {
              strstore(&v12->path, v20, v14);
              if ( !v12->path
                || (Curl_cfree(v12->spath), v39 = sanitize_cookie_path(v12->path), (v12->spath = v39) == 0) )
              {
LABEL_224:
                freecookie(v12);
                return 0;
              }
            }
          }
LABEL_82:
          v34 = (unsigned __int8)*v31;
          if ( *v31 )
            goto LABEL_83;
LABEL_88:
          if ( v118 )
            goto LABEL_224;
          v37 = v12->domain == 0;
          if ( !s2 )
            v37 = 0;
          if ( v37 )
          {
            v47 = Curl_cstrdup(s2);
            v12->domain = (char *)v47;
            if ( !v47 )
              goto LABEL_224;
          }
          v38 = v12->path == 0;
          if ( !s )
            v38 = 0;
          if ( v38 )
          {
            v48 = s;
            v49 = strchr(s, 63);
            v50 = v49 ? (char *)Curl_memrchr(s, 47, v49 - s) : strrchr(v48, 47);
            if ( v50 )
            {
              v51 = s;
              v52 = v50 - s;
              v53 = v52 + 1;
              v54 = (char *)Curl_cmalloc(v52 + 2);
              v12->path = v54;
              if ( !v54 )
                goto LABEL_224;
              memcpy(v54, v51, v53);
              v12->path[v53] = 0;
              v55 = sanitize_cookie_path(v12->path);
              v12->spath = v55;
              if ( !v55 )
                goto LABEL_224;
            }
          }
          if ( !v12->name )
            goto LABEL_224;
          ++v113->req.setcookies;
LABEL_279:
          if ( (v12->prefix & 1) != 0 )
          {
            if ( !v12->secure )
              goto LABEL_224;
            if ( (v12->prefix & 2) != 0 )
            {
LABEL_282:
              v98 = v12->path;
              if ( !v98 || strcmp(v98, "/") || v12->tailmatch )
                goto LABEL_224;
            }
          }
          else if ( (v12->prefix & 2) != 0 )
          {
            if ( !v12->secure )
              goto LABEL_224;
            goto LABEL_282;
          }
          if ( !*(&dataa->req.writer_stack_depth + 1) && *(&dataa->req.writer_stack_depth + 2) && !v12->expires )
            goto LABEL_224;
          v12->livecookie = *(&dataa->req.writer_stack_depth + 1);
          v99 = (CookieInfo *)dataa;
          v100 = *(_DWORD *)dataa->req.fread_eof + 1;
          *(_DWORD *)dataa->req.fread_eof = v100;
          v12->creationtime = v100;
          if ( !v116 )
            remove_expired(v99);
          v101 = cookiehash(v12->domain);
          v71 = *(&dataa->magic + v101);
          if ( v71 )
          {
            livecookie = 0;
            v11 = 0;
            v83 = 0;
            while ( 1 )
            {
              if ( !curl_strequal(*(_DWORD *)(v71 + 4), v12->name) )
                goto LABEL_207;
              v72 = *(_DWORD *)(v71 + 20);
              if ( v72 )
              {
                v73 = v12->domain;
                if ( !v73 || !curl_strequal(v72, v73) )
                  goto LABEL_207;
              }
              else if ( v12->domain )
              {
                goto LABEL_207;
              }
              v74 = *(const char **)(v71 + 16);
              if ( v74 )
              {
                spath = v12->spath;
                if ( spath )
                {
                  if ( *(_BYTE *)(v71 + 33) && !v114 && !v12->secure )
                  {
                    v76 = strchr(v74 + 1, 47);
                    v77 = v76 ? v76 - v74 : strlen(v74);
                    if ( curl_strnequal(v74, spath, v77) )
                    {
                      if ( (*(&v113->set.connect_only + 4) & 0x20) != 0 )
                        Curl_infof(
                          v113,
                          "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                          v12->name,
                          v12->domain);
                      goto LABEL_224;
                    }
                  }
                }
              }
LABEL_207:
              if ( v83 || !curl_strequal(*(_DWORD *)(v71 + 4), v12->name) )
                goto LABEL_208;
              v78 = *(_DWORD *)(v71 + 20);
              if ( v78 )
              {
                v79 = v12->domain;
                if ( !v79 || !curl_strequal(v78, v79) || *(unsigned __int8 *)(v71 + 32) != v12->tailmatch )
                {
LABEL_232:
                  if ( !livecookie )
                    goto LABEL_261;
                }
              }
              else if ( v12->domain )
              {
                goto LABEL_232;
              }
              v80 = *(_DWORD *)(v71 + 16);
              if ( v80 && ((v81 = v12->spath) == 0 || !curl_strequal(v80, v81))
                || (*(_DWORD *)(v71 + 16) == 0) != (v12->spath == 0) )
              {
LABEL_261:
                livecookie = 0;
                goto LABEL_208;
              }
              livecookie = v12->livecookie;
              if ( v12->livecookie )
              {
                v11 = v71;
                v83 = v12;
              }
              else
              {
                if ( *(_BYTE *)(v71 + 34) )
                  goto LABEL_224;
                v11 = v71;
                v83 = v12;
                livecookie = 1;
              }
LABEL_208:
              if ( !*(_DWORD *)v71 )
              {
                if ( v83 )
                {
                  v83->next = *(Cookie **)v11;
                  v83->creationtime = *(_DWORD *)(v11 + 36);
                  Curl_cfree(*(_DWORD *)(v11 + 4));
                  Curl_cfree(*(_DWORD *)(v11 + 8));
                  Curl_cfree(*(_DWORD *)(v11 + 20));
                  Curl_cfree(*(_DWORD *)(v11 + 12));
                  Curl_cfree(*(_DWORD *)(v11 + 16));
                  v84 = v83->name;
                  v85 = v83->value;
                  v86 = v83->path;
                  *(_DWORD *)v11 = v83->next;
                  *(_DWORD *)(v11 + 4) = v84;
                  *(_DWORD *)(v11 + 8) = v85;
                  *(_DWORD *)(v11 + 12) = v86;
                  v87 = v83->domain;
                  expires = v83->expires;
                  expires_high = HIDWORD(v83->expires);
                  *(_DWORD *)(v11 + 16) = v83->spath;
                  *(_DWORD *)(v11 + 20) = v87;
                  *(_DWORD *)(v11 + 24) = expires;
                  *(_DWORD *)(v11 + 28) = expires_high;
                  creationtime = v83->creationtime;
                  v91 = *(_DWORD *)&v83->prefix;
                  v92 = *((_DWORD *)&v83->prefix + 1);
                  *(_DWORD *)(v11 + 32) = *(_DWORD *)&v83->tailmatch;
                  *(_DWORD *)(v11 + 36) = creationtime;
                  *(_DWORD *)(v11 + 40) = v91;
                  *(_DWORD *)(v11 + 44) = v92;
                  Curl_cfree(v83);
                }
                else
                {
                  v11 = (unsigned int)v12;
                }
                if ( !*(&dataa->req.writer_stack_depth + 1) )
                  goto LABEL_246;
                goto LABEL_251;
              }
              v71 = *(_DWORD *)v71;
            }
          }
          if ( !*(&dataa->req.writer_stack_depth + 1) )
          {
            v11 = (unsigned int)v12;
            goto LABEL_295;
          }
          v11 = (unsigned int)v12;
          livecookie = 0;
LABEL_251:
          if ( (*(&v113->set.connect_only + 4) & 0x20) != 0 )
          {
            if ( livecookie )
              v96 = "Replaced";
            else
              v96 = "Added";
            Curl_infof(
              v113,
              "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
              v96,
              *(const char **)(v11 + 4),
              *(const char **)(v11 + 8),
              *(const char **)(v11 + 20),
              *(const char **)(v11 + 12),
              *(_QWORD *)(v11 + 0x18));
          }
LABEL_246:
          if ( !livecookie )
          {
            if ( v71 )
              *(_DWORD *)v71 = v11;
            else
LABEL_295:
              *(&dataa->magic + v101) = v11;
            ++dataa->req.doh;
          }
          v93 = *(_QWORD *)(v11 + 24);
          if ( v93 )
          {
            v94 = dataa;
            if ( v93 < *(_QWORD *)&dataa->req.upload_fromhere )
            {
              dataa->req.upload_fromhere = (char *)v93;
              v94->req.p.file = (FILEPROTO *)HIDWORD(v93);
            }
          }
          return (Cookie *)v11;
        }
        if ( curl_strnequal("httponly", v10, 8) )
        {
          v12->httponly = 1;
          goto LABEL_82;
        }
        if ( !v24 )
          goto LABEL_82;
LABEL_81:
        if ( v13 == 7 && !curl_strnequal("version", v10, 7) )
        {
          if ( curl_strnequal("max-age", v10, 7) )
          {
            if ( *v20 == 34 )
              ++v20;
            v43 = curlx_strtoofft(v20, 0, 10, &v12->expires);
            switch ( v43 )
            {
              case 1:
                v12->expires = 0x7FFFFFFFFFFFFFFFLL;
                break;
              case 2:
                v12->expires = 1LL;
                break;
              case 0:
                HIDWORD(v44) = v12->expires;
                LODWORD(v44) = HIDWORD(v12->expires);
                if ( v44 )
                {
                  if ( __SPAIR64__(v120, ~v115) >= __SPAIR64__(v44, HIDWORD(v44)) )
                  {
                    LODWORD(v44) = v44 + __CFADD__(HIDWORD(v44), v115) + v119;
                    LODWORD(v12->expires) = HIDWORD(v44) + v115;
                    HIDWORD(v12->expires) = v44;
                  }
                  else
                  {
                    v12->expires = 0x7FFFFFFFFFFFFFFFLL;
                  }
                }
                else
                {
                  v12->expires = 1LL;
                }
                break;
            }
          }
          else if ( curl_strnequal("expires", v10, 7) )
          {
            v41 = v14 == 127;
            if ( v14 <= 0x7F )
              v41 = v12->expires == 0;
            if ( v41 )
            {
              memcpy(date, v20, v14);
              *((_BYTE *)&v109 + v14 + 0x4C) = 0;
              v42 = Curl_getdate_capped(date);
              if ( v42 )
              {
                if ( v42 >> 31 == -1 )
                  v12->expires = 0LL;
                else
                  v12->expires = v42;
              }
              else
              {
                v12->expires = 1LL;
              }
            }
          }
        }
        goto LABEL_82;
      }
      if ( curl_strnequal("secure", v10, 6) )
      {
        if ( !v114 && *(&dataa->req.writer_stack_depth + 1) )
          goto LABEL_224;
        v12->secure = 1;
        goto LABEL_82;
      }
      if ( !v24 )
        goto LABEL_82;
LABEL_36:
      if ( v13 != 6 )
        goto LABEL_81;
      v27 = curl_strnequal("domain", v10, 6);
      v28 = v14 == 0;
      if ( v14 )
        v28 = v27 == 0;
      if ( v28 )
        goto LABEL_82;
      if ( *v20 == 46 )
      {
        ++v20;
        --v14;
      }
      if ( v14 == 9 && curl_strnequal(v20, "localhost", 9) )
      {
LABEL_47:
        if ( !s2 )
        {
          is_ipnum = Curl_host_is_ipnum(v20);
          strstore(&v12->domain, v20, v14);
          if ( !v12->domain )
            goto LABEL_224;
          if ( is_ipnum )
            goto LABEL_82;
LABEL_297:
          v12->tailmatch = 1;
          goto LABEL_82;
        }
      }
      else
      {
        v29 = memchr(v20, 46, v14);
        if ( v29 )
        {
          if ( v14 - (v29 - v20) > 1 )
            goto LABEL_47;
          s2 = ":";
        }
        else
        {
          s2 = ":";
        }
      }
      if ( Curl_host_is_ipnum(s2) )
      {
        v40 = s2;
        if ( !strncmp(v20, s2, v14) && strlen(v40) == v14 )
        {
          strstore(&v12->domain, v20, v14);
          if ( !v12->domain )
            goto LABEL_224;
          goto LABEL_82;
        }
      }
      else if ( cookie_tailmatch(v20, v14, s2) )
      {
        strstore(&v12->domain, v20, v14);
        if ( !v12->domain )
          goto LABEL_224;
        goto LABEL_297;
      }
      if ( (*(&v113->set.connect_only + 4) & 0x20) != 0 )
        Curl_infof(v113, "skipped cookie with bad tailmatch domain: %s", v20);
      v118 = 1;
      goto LABEL_82;
    }
  }
  v24 = 0;
  if ( *v103 == 61 )
  {
    v13 = v104;
LABEL_308:
    v108 = v103;
    v20 = v103 + 1;
    v14 = strcspn(v103 + 1, ";\r\n");
    v31 = (char *)&v20[v14];
    v15 = &v108[v14 + 1];
    while ( 1 )
    {
      if ( !v14 )
      {
LABEL_22:
        v24 = domain_0;
        v14 = 0;
        goto LABEL_23;
      }
      v17 = (unsigned __int8)*--v15;
      v16 = v17;
      v18 = v17 == 9;
      if ( v17 != 9 )
        v18 = v16 == 32;
      if ( !v18 )
        break;
      --v14;
    }
    v19 = v20;
    while ( 1 )
    {
      v20 = v19;
      v22 = *(unsigned __int8 *)v19++;
      v21 = v22;
      v23 = v22 == 9;
      if ( v22 != 9 )
        v23 = v21 == 32;
      if ( !v23 )
        break;
      v20 = v19;
      if ( !--v14 )
        goto LABEL_22;
    }
    if ( memchr(v20, 9, v14) )
    {
      freecookie(v12);
      if ( (*(&v113->set.connect_only + 4) & 0x20) != 0 )
        Curl_infof(v113, "cookie contains TAB, dropping");
      return 0;
    }
    v24 = domain_0;
  }
  else
  {
    v13 = v104;
    v31 = v103;
    v20 = 0;
    v14 = 0;
  }
LABEL_23:
  v25 = v14 > 0xFFE;
  if ( v14 <= 0xFFE )
    v25 = v13 > 0xFFE;
  if ( !v25 && v14 + v13 <= 0x1000 )
    goto LABEL_27;
  freecookie(v12);
  if ( (*(&v113->set.connect_only + 4) & 0x20) != 0 )
    Curl_infof(v113, "oversized cookie dropped, name/val %zu + %zu bytes", v13, v14);
  return 0;
}
