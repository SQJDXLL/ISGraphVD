Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        int httpheader,
        int noexpire,
        int a5,
        int a6,
        int badcookie_0a,
        int noexpireb,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  time_t v13; // $v0
  char *v14; // $s6
  bool v15; // dc
  Cookie *v16; // $s0
  int v17; // $s2
  size_t v18; // $s7
  int v19; // $v0
  void (*v20)(Cookie *); // $t9
  const char *v21; // $s1
  unsigned __int8 prefix; // $v0
  int v23; // $v0
  CookieInfo *v24; // $v0
  char *v25; // $v1
  void (*v26)(Cookie *); // $t9
  bool running; // $v1
  CookieInfo *v28; // $a0
  int lastct; // $v0
  size_t v30; // $v0
  Cookie **v31; // $s7
  Cookie *v32; // $fp
  int livecookie; // $s3
  Cookie *v34; // $s2
  Cookie *v35; // $s1
  char *v36; // $a0
  char *v37; // $a1
  const char *spath; // $s6
  char *v39; // $v0
  void (*v40)(Cookie *); // $a3
  size_t v41; // $a2
  char *v43; // $v0
  char *v44; // $v0
  int v45; // $a2
  unsigned int v46; // $a1
  int v47; // $v0
  size_t v48; // $fp
  _BYTE *v49; // $s5
  size_t v50; // $v0
  char *v51; // $s1
  char *v52; // $v0
  int v53; // $v0
  void (*v54)(Cookie *); // $t9
  _BOOL4 v55; // $v0
  void (*v56)(Cookie *); // $t3
  int v57; // $v0
  curl_off_t expires; // $v0
  time_t v59; // $a2
  int v60; // $a0
  time_t v61; // $a0
  unsigned int v62; // $a0
  int v63; // $v0
  unsigned int v64; // $v0
  _BYTE *v65; // $v0
  char *v66; // $v0
  int is_ipnum; // $s2
  char *v68; // $s6
  int v69; // $v0
  void (*v70)(Cookie *); // $a2
  int v71; // $v0
  const char *v72; // $s2
  char *value; // $s6
  int v74; // $v0
  char *name; // $v1
  int v76; // $v0
  char *v77; // $v0
  Cookie *next; // $v0
  int v79; // $v0
  char *v80; // $a0
  char *v81; // $a1
  char *v82; // $a0
  char *v83; // $a1
  Cookie *v84; // $v1
  int creationtime; // $v0
  void (__fastcall *v86)(char *); // $t9
  char *v87; // $a0
  void (*v88)(Cookie *); // $a2
  Cookie *v89; // $v0
  Cookie *v90; // $v1
  Cookie *v91; // $t0
  char *v92; // $a3
  char *v93; // $a1
  char *v94; // $a0
  const char *v95; // $a2
  __int64 v96; // $v0
  CookieInfo *v97; // $a0
  char *v98; // $a2
  char *v99; // $v0
  const char *v100; // $s2
  int v101; // $v0
  size_t v102; // $s1
  char *v103; // $a0
  char *v104; // $v0
  int v105; // $v0
  int v106; // $v0
  char *v107; // $v1
  void *v108; // $v0
  int v109; // $v0
  char v110[4]; // [sp+30h] [-B8h] BYREF
  void (*v111)(Cookie *); // [sp+34h] [-B4h]
  CookieInfo *ca; // [sp+38h] [-B0h]
  _DWORD *v113; // [sp+3Ch] [-ACh]
  const char *v114; // [sp+40h] [-A8h]
  char *hostname; // [sp+44h] [-A4h]
  _BOOL4 v116; // [sp+48h] [-A0h]
  const char *v117; // [sp+4Ch] [-9Ch]
  time_t now; // [sp+50h] [-98h]
  const char *v119; // [sp+54h] [-94h]
  const char *v120; // [sp+58h] [-90h]
  int badcookie; // [sp+5Ch] [-8Ch]
  char *tok_buf; // [sp+60h] [-88h] BYREF
  char date[128]; // [sp+64h] [-84h] BYREF
  int v124; // [sp+E4h] [-4h]

  hostname = (char *)domain;
  v113 = &_stack_chk_guard;
  v117 = path;
  v116 = secure;
  ca = c;
  v14 = (char *)lineptr;
  v13 = time(0u);
  v15 = data->req.setcookies >= 0x32u;
  now = v13;
  if ( v15 )
    goto LABEL_48;
  v16 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v16 )
    goto LABEL_48;
  if ( !httpheader )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v14 = (char *)(lineptr + 10);
      v16->httponly = 1;
    }
    if ( *v14 != 35 )
    {
      v43 = strchr(v14, 13);
      if ( v43 )
        *v43 = 0;
      v44 = strchr(v14, 10);
      if ( v44 )
        *v44 = 0;
      if ( strtok_r(v14, "\t", &tok_buf) )
      {
        v111 = freecookie;
        v114 = "TRUE";
        JUMPOUT(0xDA8);
      }
      goto LABEL_45;
    }
LABEL_213:
    Curl_cfree(v16);
    goto LABEL_48;
  }
  if ( strlen(lineptr) >= 0x1389 )
    goto LABEL_213;
  v17 = *lineptr;
  v114 = (const char *)freecookie;
  v119 = "path";
  badcookie = 0;
  v120 = "domain";
  if ( v17 )
    goto LABEL_6;
LABEL_62:
  v18 = strcspn(v14, ";\t\r\n=");
  if ( !v18 )
  {
LABEL_12:
    v19 = badcookie;
    goto LABEL_13;
  }
  while ( 1 )
  {
    v45 = (int)&v14[v18];
    do
    {
      v46 = v18--;
      v47 = v14[v18];
      if ( v47 != 32 && v47 != 9 )
      {
        v18 = v46;
        if ( *(_BYTE *)v45 == 61 )
        {
LABEL_68:
          v49 = (_BYTE *)(v45 + 1);
          v111 = (void (*)(Cookie *))v45;
          v50 = strcspn((const char *)(v45 + 1), v114 + 0x312C);
          v48 = v50;
          v51 = &v49[v50];
          if ( v50 )
          {
            v46 = 9;
            v52 = (char *)v111 + v50;
            while ( 1 )
            {
              v53 = *v52;
              if ( v53 != 32 && v53 != 9 )
                break;
              --v48;
              v52 = (char *)v111 + v48;
              if ( !v48 )
              {
                v54 = (void (*)(Cookie *))MEMORY[0xB4F0];
                if ( v18 >= 0xFFF )
                  goto LABEL_116;
                v55 = v18 < 7;
                goto LABEL_75;
              }
            }
            v46 = 9;
            while ( 1 )
            {
              v63 = (char)*v49;
              if ( v63 != 32 && v63 != 9 )
                break;
              --v48;
              ++v49;
              if ( !v48 )
              {
                v54 = (void (*)(Cookie *))MEMORY[0xB4F0];
                if ( v18 < 0xFFF )
                {
                  v64 = v18;
                  goto LABEL_114;
                }
LABEL_116:
                ((void (__fastcall *)(Cookie *, unsigned int))((char *)v54 + (__int16)freecookie))(v16, v46);
LABEL_117:
                if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x100000) != 0 )
                  Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v18, v48);
LABEL_48:
                v34 = 0;
                goto LABEL_49;
              }
            }
            if ( memchr(v49, 9, v48) )
            {
              freecookie(v16);
              if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x100000) != 0 )
                Curl_infof(data, "cookie contains TAB, dropping");
              goto LABEL_48;
            }
            if ( v18 < 0xFFF )
            {
              v64 = v48 + v18;
              if ( v48 >= 0xFFF )
              {
                ((void (__fastcall *)(Cookie *, unsigned int))(MEMORY[0xB4F0] + (__int16)freecookie))(v16, v46);
                goto LABEL_117;
              }
LABEL_114:
              v15 = v64 < 0x1001;
              v55 = v18 < 7;
              if ( v15 )
              {
LABEL_75:
                v56 = (void (*)(Cookie *))httpheader;
                if ( !v55 )
                {
LABEL_87:
                  if ( v17 == 95 && v14[1] == 95 )
                  {
                    v111 = v56;
                    v74 = curl_strnequal("__Secure-", v14, 9);
                    v56 = v111;
                    if ( v74 )
                    {
                      name = v16->name;
                      v16->prefix |= 1u;
                      if ( !name )
                        goto LABEL_138;
                      goto LABEL_89;
                    }
                    v106 = curl_strnequal("__Host-", v14, 7);
                    v56 = v111;
                    if ( v106 )
                    {
                      v107 = v16->name;
                      v16->prefix |= 2u;
                      if ( !v107 )
                        goto LABEL_138;
LABEL_89:
                      if ( !v48 )
                      {
                        if ( v18 == 8 )
                        {
                          if ( curl_strnequal("httponly", v14, 8) )
                            v16->httponly = 1;
                          goto LABEL_93;
                        }
                        if ( !v56 )
                          goto LABEL_93;
                      }
                      if ( v18 != 7 || curl_strnequal("version", v14, 7) )
                        goto LABEL_93;
                      if ( !curl_strnequal("max-age", v14, 7) )
                      {
                        if ( curl_strnequal("expires", v14, 7) && !v16->expires && v48 < 0x80 )
                        {
                          v108 = memcpy(date, v49, v48);
                          v110[v48 + 0x34] = 0;
                          v109 = Curl_getdate_capped(v108);
                          if ( v109 )
                          {
                            if ( v109 >> 0x1F == -1 )
                            {
                              LODWORD(v16->expires) = 0;
                              HIDWORD(v16->expires) = 0;
                            }
                            else
                            {
                              v16->expires = v109;
                            }
                          }
                          else
                          {
                            LODWORD(v16->expires) = 1;
                            HIDWORD(v16->expires) = 0;
                          }
                        }
                        goto LABEL_93;
                      }
                      if ( *v49 == 34 )
                        ++v49;
                      v57 = curlx_strtoofft(v49, 0, 10, &v16->expires);
                      if ( v57 != 1 )
                      {
                        if ( v57 == 2 )
                          goto LABEL_243;
                        if ( v57 )
                          goto LABEL_93;
                        expires = v16->expires;
                        if ( !expires )
                        {
LABEL_243:
                          LODWORD(v16->expires) = 1;
                          HIDWORD(v16->expires) = 0;
                          v17 = *v51;
                          v14 = v51;
                          goto LABEL_94;
                        }
                        v59 = now >> 0x1F;
                        v60 = 0x7FFFFFFF - (now >> 0x1F);
                        if ( v60 >= SHIDWORD(expires) )
                        {
                          v15 = HIDWORD(expires) != v60;
                          v61 = now;
                          if ( v15 || (v61 = now, ~now >= (unsigned int)expires) )
                          {
                            v62 = expires + v61;
                            LODWORD(v16->expires) = v62;
                            HIDWORD(v16->expires) = (v62 < (unsigned int)expires) + HIDWORD(expires) + v59;
                            v17 = *v51;
                            v14 = v51;
                            goto LABEL_94;
                          }
                        }
                      }
                      LODWORD(v16->expires) = -1;
                      HIDWORD(v16->expires) = 0x7FFFFFFF;
                      v17 = *v51;
                      v14 = v51;
                      goto LABEL_94;
                    }
                  }
                  if ( !v16->name )
                    goto LABEL_138;
                  goto LABEL_89;
                }
LABEL_76:
                if ( !v16->name )
                  goto LABEL_138;
LABEL_77:
                if ( !v48 )
                {
                  if ( v18 == 6 )
                  {
                    v111 = v56;
                    if ( !curl_strnequal("secure", v14, 6) )
                    {
                      if ( v111 )
                        curl_strnequal("domain", v14, 6);
                      goto LABEL_93;
                    }
                    if ( v116 || !ca->running )
                    {
                      v16->secure = 1;
                      v17 = *v51;
                      v14 = v51;
                      goto LABEL_94;
                    }
                    goto LABEL_45;
                  }
                  if ( !v56 || v18 != 4 )
                    goto LABEL_93;
LABEL_155:
                  if ( !curl_strnequal(v119, v14, 4) )
                    goto LABEL_93;
                  Curl_cfree(v16->path);
                  v76 = Curl_memdup(v49, v48 + 1);
                  v16->path = (char *)v76;
                  if ( v76 )
                  {
                    *(_BYTE *)(v76 + v48) = 0;
                    v20 = (void (*)(Cookie *))MEMORY[0xB4F0];
                    if ( !v16->path )
                      goto LABEL_46;
                    Curl_cfree(v16->spath);
                    v77 = sanitize_cookie_path(v16->path);
                    v16->spath = v77;
                    if ( !v77 )
                    {
                      v20 = (void (*)(Cookie *))MEMORY[0xB4F0];
                      goto LABEL_46;
                    }
                    goto LABEL_93;
                  }
                  goto LABEL_45;
                }
                if ( v18 == 4 )
                  goto LABEL_155;
                if ( v18 != 6 || !curl_strnequal(v120, v14, 6) )
                  goto LABEL_93;
                if ( *v49 == 46 )
                {
                  ++v49;
                  --v48;
                }
                if ( v48 == 9 && curl_strnequal(v49, "localhost", 9) )
                {
                  v66 = hostname;
                }
                else
                {
                  v65 = memchr(v49, 46, v48);
                  if ( !v65 || (v15 = v48 - (v65 - v49) >= 2, v66 = hostname, !v15) )
                  {
                    is_ipnum = Curl_host_is_ipnum(":");
                    hostname = ":";
                    if ( !is_ipnum )
                      goto LABEL_170;
                    goto LABEL_132;
                  }
                }
                if ( !v66 )
                {
                  is_ipnum = Curl_host_is_ipnum(v49);
                  goto LABEL_171;
                }
                is_ipnum = Curl_host_is_ipnum(hostname);
                if ( !is_ipnum )
                {
LABEL_170:
                  if ( cookie_tailmatch(v49, v48, hostname) )
                    goto LABEL_171;
LABEL_134:
                  if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x100000) != 0 )
                    Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v49);
                  v17 = *v51;
                  v14 = v51;
                  badcookie = httpheader;
                  goto LABEL_94;
                }
LABEL_132:
                v68 = hostname;
                if ( strncmp(v49, hostname, v48) || strlen(v68) != v48 )
                  goto LABEL_134;
LABEL_171:
                Curl_cfree(v16->domain);
                v79 = Curl_memdup(v49, v48 + 1);
                v16->domain = (char *)v79;
                if ( v79 )
                {
                  *(_BYTE *)(v79 + v48) = 0;
                  v20 = (void (*)(Cookie *))MEMORY[0xB4F0];
                  if ( !v16->domain )
                    goto LABEL_46;
                  if ( !is_ipnum )
                    v16->tailmatch = 1;
                  goto LABEL_93;
                }
                goto LABEL_45;
              }
            }
          }
          else
          {
            v56 = (void (*)(Cookie *))httpheader;
            if ( v18 < 0xFFF )
            {
              v49 += v50;
LABEL_86:
              if ( v18 >= 7 )
                goto LABEL_87;
              goto LABEL_76;
            }
          }
        }
        else
        {
          v56 = 0;
          if ( v46 < 0xFFF )
          {
            v51 = (char *)v45;
            v49 = 0;
            v48 = 0;
            goto LABEL_86;
          }
          v48 = 0;
        }
        v54 = freecookie;
        goto LABEL_116;
      }
    }
    while ( v18 );
    v48 = 0;
    if ( *(_BYTE *)v45 == 61 )
      goto LABEL_68;
    v51 = (char *)v45;
    v49 = 0;
    v56 = 0;
    if ( v16->name )
      goto LABEL_77;
LABEL_138:
    if ( !v56 )
      goto LABEL_45;
    v111 = (void (*)(Cookie *))&Curl_cfree;
    Curl_cfree(0);
    v69 = Curl_memdup(v14, v18 + 1);
    v16->name = (char *)v69;
    v70 = v111;
    if ( v69 )
      *(_BYTE *)(v69 + v18) = 0;
    (*(void (__fastcall **)(char *))v70)(v16->value);
    v71 = Curl_memdup(v49, v48 + 1);
    v16->value = (char *)v71;
    if ( v71 )
      *(_BYTE *)(v71 + v48) = 0;
    v72 = v16->name;
    v20 = (void (*)(Cookie *))MEMORY[0xB4F0];
    if ( !v72 )
      goto LABEL_46;
    value = v16->value;
    if ( !value )
      goto LABEL_46;
    if ( value[strcspn(v16->value, badoctets_0)] || v72[strcspn(v72, badoctets_0)] )
    {
      v20 = (void (*)(Cookie *))MEMORY[0xB4F0];
      if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x100000) != 0 )
      {
        Curl_infof(data, "invalid octets in name/value, cookie dropped");
        goto LABEL_45;
      }
LABEL_46:
      v26 = (void (*)(Cookie *))((char *)v20 + (__int16)freecookie);
LABEL_47:
      v26(v16);
      goto LABEL_48;
    }
LABEL_93:
    v17 = *v51;
    v14 = v51;
LABEL_94:
    v19 = badcookie;
    if ( !v17 )
      break;
    do
    {
      while ( v17 == 32 || v17 == 9 )
      {
        v17 = *++v14;
        if ( !v17 )
          goto LABEL_12;
      }
      v19 = badcookie;
      if ( v17 != 59 )
        goto LABEL_13;
      do
      {
        v17 = *++v14;
        if ( !v17 )
          goto LABEL_62;
LABEL_6:
        ;
      }
      while ( v17 == 32 || v17 == 9 );
      v18 = strcspn(v14, ";\t\r\n=");
    }
    while ( !v18 );
  }
LABEL_13:
  v20 = (void (*)(Cookie *))MEMORY[0xB4F0];
  if ( v19 )
    goto LABEL_46;
  if ( !v16->domain )
  {
    if ( hostname )
    {
      v105 = Curl_cstrdup(hostname);
      v16->domain = (char *)v105;
      if ( !v105 )
      {
        v20 = freecookie;
        goto LABEL_46;
      }
    }
  }
  v21 = v117;
  if ( !v16->path && v117 )
  {
    v98 = strchr(v117, 63);
    v99 = v98 ? (char *)Curl_memrchr(v117, 47, v98 - v117) : strrchr(v21, 47);
    if ( v99 )
    {
      v100 = v117;
      v101 = v99 - v117;
      v102 = v101 + 1;
      v103 = (char *)Curl_cmalloc(v101 + 2);
      v16->path = v103;
      if ( v103 )
      {
        memcpy(v103, v100, v102);
        v16->path[v102] = 0;
        v104 = sanitize_cookie_path(v16->path);
        v16->spath = v104;
        if ( !v104 )
        {
          v20 = freecookie;
          goto LABEL_46;
        }
        goto LABEL_16;
      }
LABEL_45:
      v20 = freecookie;
      goto LABEL_46;
    }
  }
LABEL_16:
  v20 = (void (*)(Cookie *))MEMORY[0xB4F0];
  if ( !v16->name )
    goto LABEL_46;
  ++data->req.setcookies;
  prefix = v16->prefix;
  if ( (prefix & 1) != 0 )
  {
    v23 = prefix & 2;
    if ( !v16->secure )
      goto LABEL_45;
    v15 = v23 == 0;
    v24 = ca;
    if ( !v15 )
      goto LABEL_20;
  }
  else
  {
    v15 = (prefix & 2) == 0;
    v24 = ca;
    if ( !v15 )
    {
      if ( !v16->secure )
      {
        freecookie(v16);
        goto LABEL_48;
      }
LABEL_20:
      v25 = v16->path;
      v20 = (void (*)(Cookie *))MEMORY[0xB4F0];
      if ( !v25 )
        goto LABEL_46;
      v26 = (void (*)(Cookie *))(MEMORY[0xB4F0] + (__int16)freecookie);
      if ( *v25 != 47 )
        goto LABEL_47;
      if ( v25[1] )
        goto LABEL_45;
      v24 = ca;
      if ( v16->tailmatch )
        goto LABEL_45;
    }
  }
  running = v24->running;
  v28 = ca;
  if ( !running && v24->newsession )
  {
    v28 = ca;
    if ( !v16->expires )
      goto LABEL_45;
  }
  lastct = v28->lastct;
  v16->livecookie = running;
  v28->lastct = ++lastct;
  v16->creationtime = lastct;
  if ( !noexpire )
    remove_expired(v28);
  v30 = cookiehash(v16->domain);
  v31 = &ca->cookies[v30];
  v32 = *v31;
  if ( !*v31 )
  {
    if ( ca->running )
    {
      v34 = v16;
      if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x100000) == 0 )
        goto LABEL_201;
      livecookie = 0;
      v95 = "Added";
LABEL_199:
      Curl_infof(
        data,
        "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
        v95,
        v34->name,
        v34->value,
        v34->domain,
        v34->path,
        v34->expires);
      if ( livecookie )
        goto LABEL_205;
      if ( v32 )
LABEL_208:
        v32->next = v34;
      else
LABEL_201:
        *v31 = v34;
    }
    else
    {
      v34 = v16;
      *v31 = v16;
    }
    ++ca->numcookies;
    goto LABEL_205;
  }
  livecookie = 0;
  v34 = 0;
  v35 = 0;
  while ( 2 )
  {
    if ( curl_strequal(v32->name, v16->name) )
    {
      v36 = v32->domain;
      v37 = v16->domain;
      if ( v36 )
      {
        if ( v37 && curl_strequal(v36, v37) )
        {
LABEL_35:
          spath = v32->spath;
          if ( spath )
          {
            v111 = (void (*)(Cookie *))v16->spath;
            if ( v111 )
            {
              if ( v32->secure && !v16->secure && !v116 )
              {
                v39 = strchr(spath + 1, 47);
                v40 = v111;
                if ( v39 )
                {
                  v41 = v39 - spath;
                }
                else
                {
                  v41 = strlen(spath);
                  v40 = v111;
                }
                if ( curl_strnequal(spath, v40, v41) )
                {
                  v20 = (void (*)(Cookie *))MEMORY[0xB4F0];
                  if ( (*(_DWORD *)(&data->set.connect_only + 2) & 0x100000) == 0 )
                    goto LABEL_46;
                  Curl_infof(
                    data,
                    "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                    v16->name,
                    v16->domain);
                  goto LABEL_45;
                }
              }
            }
          }
        }
      }
      else if ( !v37 )
      {
        goto LABEL_35;
      }
    }
    if ( v35 || !curl_strequal(v32->name, v16->name) )
    {
LABEL_162:
      next = v32->next;
      if ( !v32->next )
        break;
      goto LABEL_163;
    }
    v80 = v32->domain;
    v81 = v16->domain;
    if ( !v80 )
    {
      if ( v81 )
        goto LABEL_180;
      v82 = v32->spath;
      goto LABEL_182;
    }
    if ( v81 && curl_strequal(v80, v81) && v32->tailmatch == v16->tailmatch )
    {
LABEL_181:
      v82 = v32->spath;
LABEL_182:
      v83 = v16->spath;
      if ( v82 )
      {
        if ( !v83 || !curl_strequal(v82, v83) )
          goto LABEL_190;
        v82 = v32->spath;
        v83 = v16->spath;
      }
      if ( (v82 == 0) != (v83 == 0) )
        goto LABEL_190;
      livecookie = v16->livecookie;
      v34 = v32;
      if ( v16->livecookie )
      {
        v35 = v16;
      }
      else
      {
        v20 = (void (*)(Cookie *))MEMORY[0xB4F0];
        if ( v32->livecookie )
          goto LABEL_46;
        v35 = v16;
        livecookie = 1;
      }
      goto LABEL_162;
    }
LABEL_180:
    if ( livecookie )
      goto LABEL_181;
LABEL_190:
    next = v32->next;
    livecookie = 0;
    if ( v32->next )
    {
LABEL_163:
      v32 = next;
      continue;
    }
    break;
  }
  if ( v35 )
  {
    v84 = v34->next;
    creationtime = v34->creationtime;
    v86 = (void (__fastcall *)(char *))Curl_cfree;
    v87 = v34->name;
    v111 = (void (*)(Cookie *))&Curl_cfree;
    v35->next = v84;
    v35->creationtime = creationtime;
    v86(v87);
    (*(void (__fastcall **)(char *))v111)(v34->value);
    (*(void (__fastcall **)(char *))v111)(v34->domain);
    (*(void (__fastcall **)(char *))v111)(v34->path);
    (*(void (__fastcall **)(char *))v111)(v34->spath);
    v88 = v111;
    v89 = v35;
    v90 = v34;
    do
    {
      v91 = v89->next;
      v92 = v89->name;
      v93 = v89->value;
      v94 = v89->path;
      v89 = (Cookie *)((char *)v89 + 16);
      v90->next = v91;
      v90->name = v92;
      v90->value = v93;
      v90->path = v94;
      v90 = (Cookie *)((char *)v90 + 16);
    }
    while ( v89 != &v35[1] );
    (*(void (__fastcall **)(Cookie *))v88)(v35);
  }
  else
  {
    v34 = v16;
  }
  if ( ca->running && (*(_DWORD *)(&data->set.connect_only + 2) & 0x100000) != 0 )
  {
    if ( livecookie )
      v95 = "Replaced";
    else
      v95 = "Added";
    goto LABEL_199;
  }
  if ( !livecookie )
    goto LABEL_208;
LABEL_205:
  HIDWORD(v96) = v34->expires;
  LODWORD(v96) = HIDWORD(v34->expires);
  if ( v96 && __SPAIR64__(v96, HIDWORD(v96)) < ca->next_expiration )
  {
    v97 = ca;
    LODWORD(ca->next_expiration) = HIDWORD(v96);
    HIDWORD(v97->next_expiration) = v96;
  }
LABEL_49:
  if ( v124 != *v113 )
    _stack_chk_fail();
  return v34;
}
