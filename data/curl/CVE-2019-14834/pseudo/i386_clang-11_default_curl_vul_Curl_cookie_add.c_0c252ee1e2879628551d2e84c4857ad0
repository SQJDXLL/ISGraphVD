Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        const char *domain,
        char *path,
        bool secure)
{
  time_t v8; // eax
  Cookie *v9; // ebp
  int v10; // edi
  int v11; // eax
  int v12; // ebp
  const char *v13; // ecx
  const char *v14; // ebp
  char *i; // esi
  size_t v16; // eax
  unsigned int v17; // edi
  char v18; // dl
  size_t v19; // eax
  size_t v20; // ecx
  const char *v21; // edx
  const char *v22; // ebp
  char v23; // cl
  unsigned int v24; // edx
  unsigned int v25; // ebp
  size_t v26; // ecx
  int v27; // eax
  unsigned int v28; // edi
  int v29; // eax
  const char *v30; // eax
  char *v31; // edi
  size_t v32; // eax
  size_t v33; // esi
  int v34; // eax
  int v35; // eax
  const char *v36; // esi
  const char *v37; // edi
  size_t v38; // eax
  char v39; // al
  int v40; // eax
  size_t v41; // ebp
  int v42; // eax
  int v43; // edi
  unsigned int v44; // esi
  int v45; // eax
  const char *v46; // edi
  _BYTE *v47; // eax
  const char *v48; // esi
  size_t v49; // eax
  char v50; // cl
  int v51; // eax
  _DWORD *v52; // esi
  const char *v53; // eax
  int v54; // eax
  const char *v55; // eax
  char is_ipnum; // al
  size_t v57; // eax
  const char *v58; // ecx
  size_t v59; // esi
  int v60; // eax
  int v61; // eax
  size_t v62; // ebp
  int v63; // eax
  char v64; // cl
  int v65; // edi
  unsigned int v66; // eax
  unsigned int v67; // ecx
  char *v68; // esi
  char *v69; // eax
  char *v70; // eax
  char *v71; // eax
  const char *v72; // edi
  int v73; // edx
  int v74; // ecx
  int v75; // eax
  int v76; // eax
  int v77; // ebp
  int v78; // eax
  const char *v79; // eax
  char *v80; // esi
  char *v81; // edi
  size_t v82; // eax
  size_t v83; // ebp
  int v84; // ecx
  int v85; // eax
  int v86; // eax
  int v87; // eax
  int v88; // eax
  int v89; // ebp
  int v90; // eax
  int v91; // ecx
  CookieInfo *v92; // eax
  int v93; // eax
  char *v94; // eax
  int v95; // eax
  int v96; // eax
  char v97; // cl
  char *v98; // eax
  char *v99; // eax
  int v100; // edi
  void *v101; // eax
  size_t v102; // edi
  const char *v103; // eax
  char *v104; // esi
  char *v105; // edi
  size_t v106; // eax
  size_t v107; // ebp
  int v108; // eax
  char v109; // cl
  char v110; // al
  bool running; // al
  int v112; // eax
  unsigned int next_expiration; // eax
  unsigned int next_expiration_high; // ecx
  Cookie *next; // eax
  int v116; // ebp
  Cookie *v117; // esi
  char *v118; // eax
  int v119; // ecx
  const char *spath; // edi
  char *v121; // eax
  size_t v122; // eax
  char *v123; // eax
  int v124; // ecx
  bool v125; // zf
  int v126; // eax
  char *v127; // eax
  char *v128; // ecx
  int v129; // eax
  __int64 v130; // xmm0_8
  CookieInfo *v132; // edi
  char v133; // al
  int v134; // eax
  CookieInfo *v135; // edi
  Cookie *v136; // esi
  Cookie *v137; // ebp
  curl_off_t v138; // rax
  int expires_high; // ecx
  Cookie **p_next; // eax
  const char *v141; // ecx
  Cookie **v142; // eax
  curl_off_t v143; // rax
  int v144; // ecx
  _DWORD *v145; // edi
  time_t *timer; // [esp+0h] [ebp-ECh]
  char *reject; // [esp+4h] [ebp-E8h]
  size_t n; // [esp+8h] [ebp-E4h]
  char v149; // [esp+2Ch] [ebp-C0h]
  const char *v150; // [esp+2Ch] [ebp-C0h]
  int v151; // [esp+2Ch] [ebp-C0h]
  int v152; // [esp+2Ch] [ebp-C0h]
  Cookie *v153; // [esp+2Ch] [ebp-C0h]
  char v154; // [esp+2Ch] [ebp-C0h]
  int v155; // [esp+30h] [ebp-BCh]
  const char *s; // [esp+34h] [ebp-B8h]
  const char *sa; // [esp+34h] [ebp-B8h]
  char sb; // [esp+34h] [ebp-B8h]
  void *sc; // [esp+34h] [ebp-B8h]
  Cookie *sd; // [esp+34h] [ebp-B8h]
  size_t v161; // [esp+38h] [ebp-B4h]
  size_t v162; // [esp+38h] [ebp-B4h]
  size_t v163; // [esp+38h] [ebp-B4h]
  size_t v164; // [esp+38h] [ebp-B4h]
  Cookie **v165; // [esp+38h] [ebp-B4h]
  size_t v166; // [esp+3Ch] [ebp-B0h]
  size_t v167; // [esp+3Ch] [ebp-B0h]
  char v168; // [esp+3Ch] [ebp-B0h]
  int v169; // [esp+3Ch] [ebp-B0h]
  size_t v170; // [esp+3Ch] [ebp-B0h]
  char v171; // [esp+40h] [ebp-ACh]
  int v172; // [esp+40h] [ebp-ACh]
  const char *v174; // [esp+44h] [ebp-A8h]
  _DWORD *v175; // [esp+48h] [ebp-A4h]
  int v176; // [esp+4Ch] [ebp-A0h]
  __int64 v177; // [esp+50h] [ebp-9Ch]
  int v178; // [esp+58h] [ebp-94h]
  char *dest[36]; // [esp+5Ch] [ebp-90h] BYREF

  v8 = time(0);
  v9 = 0;
  if ( data->req.setcookies > 0x31u )
    return v9;
  v10 = v8;
  v11 = Curl_ccalloc(1, 44);
  if ( !v11 )
    return 0;
  v12 = v11;
  v155 = v11;
  if ( !httpheader )
  {
    dest[0] = 0;
    v68 = lineptr;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v68 = lineptr + 10;
      *(_BYTE *)(v12 + 35) = 1;
    }
    if ( *v68 == 35 )
      goto LABEL_153;
    v69 = strchr(v68, 13);
    if ( v69 )
      *v69 = 0;
    v70 = strchr(v68, 10);
    if ( v70 )
      *v70 = 0;
    v71 = strtok_r(v68, "\t", dest);
    if ( !v71 )
      goto LABEL_329;
    v72 = v71;
    v73 = 0;
    v74 = 0;
    v169 = v12 + 24;
    while ( 1 )
    {
      v151 = v74;
      switch ( v73 )
      {
        case 0:
          if ( *v72 == 46 )
            ++v72;
          v75 = Curl_cstrdup(v72);
          *(_DWORD *)(v12 + 20) = v75;
          v125 = v75 == 0;
          v76 = (unsigned __int8)v151;
          if ( v125 )
            v76 = 1;
          v77 = 0;
          v151 = v76;
          goto LABEL_217;
        case 1:
          *(_BYTE *)(v12 + 32) = curl_strequal(v72, "TRUE") != 0;
          v77 = 1;
          goto LABEL_217;
        case 2:
          if ( !strcmp("TRUE", v72) || !strcmp("FALSE", v72) )
          {
            v89 = Curl_cstrdup("/");
            *(_DWORD *)(v155 + 12) = v89;
            v90 = Curl_cstrdup("/");
            v91 = (unsigned __int8)v151;
            if ( !v90 )
              v91 = 1;
            v125 = v89 == 0;
            v12 = v155;
            if ( v125 )
              v91 = 1;
            v151 = v91;
            *(_DWORD *)(v155 + 16) = v90;
            goto LABEL_196;
          }
          v78 = Curl_cstrdup(v72);
          *(_DWORD *)(v12 + 12) = v78;
          if ( !v78 )
          {
            v151 = 1;
            goto LABEL_216;
          }
          v79 = (const char *)Curl_cstrdup(v78);
          v80 = 0;
          if ( v79 )
          {
            v81 = (char *)v79;
            v82 = strlen(v79);
            v83 = v82;
            if ( *v81 == 34 )
            {
              memmove(v81, v81 + 1, v82);
              --v83;
            }
            if ( v83 )
            {
              if ( v81[v83 - 1] == 34 )
                v81[--v83] = 0;
              if ( *v81 != 47 )
              {
LABEL_211:
                Curl_cfree(v81);
                v93 = Curl_memdup("/", 2);
                v12 = v155;
                LOBYTE(v84) = v151;
                if ( v93 )
                {
                  *(_BYTE *)(v93 + 1) = 0;
                  v80 = (char *)v93;
                }
                goto LABEL_213;
              }
              if ( v83 )
              {
                LOBYTE(v84) = v151;
                if ( v81[v83 - 1] == 47 )
                  v81[v83 - 1] = 0;
                v12 = v155;
                v80 = v81;
                goto LABEL_213;
              }
            }
            else if ( *v81 != 47 )
            {
              goto LABEL_211;
            }
            v12 = v155;
            LOBYTE(v84) = v151;
            v80 = v81;
          }
          else
          {
            LOBYTE(v84) = v151;
          }
LABEL_213:
          v84 = (unsigned __int8)v84;
          *(_DWORD *)(v12 + 16) = v80;
          if ( !v80 )
            v84 = 1;
          v151 = v84;
LABEL_216:
          v77 = 2;
LABEL_217:
          v94 = strtok_r(0, "\t", dest);
          v74 = v151;
          v73 = v77 + 1;
          v12 = v155;
          if ( !v94 || (v72 = v94, (v151 & 1) != 0) )
          {
            if ( v73 == 6 )
            {
              v95 = Curl_cstrdup(&L_str_22);
              *(_DWORD *)(v155 + 8) = v95;
              LOBYTE(v74) = 1;
              if ( v95 )
                LOBYTE(v74) = v151;
              v73 = (v95 == 0) ^ 7;
            }
            if ( (v74 & 1) == 0 && v73 == 7 )
              goto LABEL_268;
LABEL_329:
            Curl_cfree(*(_DWORD *)(v12 + 20));
            Curl_cfree(*(_DWORD *)(v12 + 12));
            Curl_cfree(*(_DWORD *)(v12 + 16));
            Curl_cfree(*(_DWORD *)(v12 + 4));
            Curl_cfree(*(_DWORD *)(v12 + 8));
            Curl_cfree(v12);
            return 0;
          }
          break;
        case 3:
LABEL_196:
          *(_BYTE *)(v12 + 33) = 0;
          if ( !curl_strequal(v72, "TRUE") )
            goto LABEL_200;
          if ( secure || (v92 = c, c->running) )
          {
            *(_BYTE *)(v12 + 33) = 1;
LABEL_200:
            v77 = 3;
          }
          else
          {
            LOBYTE(v92) = 1;
            v77 = 3;
            v151 = (int)v92;
          }
          goto LABEL_217;
        case 4:
          v125 = curlx_strtoofft(v72, 0, 10, v169) == 0;
          v77 = 4;
          v85 = (unsigned __int8)v151;
          if ( !v125 )
            v85 = 1;
          v151 = v85;
          goto LABEL_217;
        case 5:
          v86 = Curl_cstrdup(v72);
          *(_DWORD *)(v12 + 4) = v86;
          if ( v86 )
          {
            if ( curl_strnequal("__Secure-", v86, 9) )
            {
              *(_BYTE *)(v12 + 40) |= 1u;
              v77 = 5;
            }
            else
            {
              if ( curl_strnequal("__Host-", *(_DWORD *)(v12 + 4), 7) )
                *(_BYTE *)(v12 + 40) |= 2u;
              v77 = 5;
            }
          }
          else
          {
            v77 = 5;
            v151 = 1;
          }
          goto LABEL_217;
        case 6:
          v87 = Curl_cstrdup(v72);
          *(_DWORD *)(v12 + 8) = v87;
          v125 = v87 == 0;
          v77 = 6;
          v88 = (unsigned __int8)v151;
          if ( v125 )
            v88 = 1;
          v151 = v88;
          goto LABEL_217;
        default:
          v77 = v73;
          goto LABEL_217;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_153:
    Curl_cfree(v12);
    return 0;
  }
  v171 = 0;
  v178 = v10;
  v175 = (_DWORD *)(v12 + 24);
  v176 = v10 >> 31;
  HIDWORD(v177) = 0x7FFFFFFF - (v10 >> 31);
  LODWORD(v177) = ~v10;
  v13 = lineptr;
  do
  {
    v14 = v13 + 1;
    for ( i = (char *)v13; *i == 32 || *i == 9; ++i )
      ++v14;
    v149 = *i;
    v16 = strcspn(i, ";\t\r\n=");
    if ( !v16 )
    {
      v13 = i;
      goto LABEL_71;
    }
    v13 = &i[v16];
    v17 = v16;
    while ( 1 )
    {
      v18 = i[v17 - 1];
      if ( v18 != 32 && v18 != 9 )
        break;
      if ( !--v17 )
      {
        v17 = 0;
        if ( *v13 != 61 )
          goto LABEL_28;
        goto LABEL_16;
      }
    }
    if ( *v13 != 61 )
    {
LABEL_28:
      v12 = v155;
      v24 = 0;
      v168 = 0;
      sa = 0;
      goto LABEL_33;
    }
LABEL_16:
    v166 = v16;
    s = &i[v16 + 1];
    v19 = strcspn(s, ";\r\n");
    v20 = v19 + v166;
    v167 = v19 + v166;
    if ( v19 )
    {
      v21 = s;
      v22 = &v14[v20];
      while ( 1 )
      {
        v23 = *(v22 - 1);
        if ( v23 != 32 && v23 != 9 )
          break;
        --v19;
        --v22;
        if ( !v19 )
          goto LABEL_30;
      }
      while ( *v21 == 32 || *v21 == 9 )
      {
        ++v21;
        if ( !--v19 )
        {
          v19 = 0;
          v21 = v22;
          break;
        }
      }
    }
    else
    {
      v21 = s;
LABEL_30:
      v19 = 0;
    }
    v25 = v19;
    sa = v21;
    if ( memchr(v21, 9, v19) )
    {
      Curl_cfree(*(_DWORD *)(v155 + 20));
      Curl_cfree(*(_DWORD *)(v155 + 12));
      Curl_cfree(*(_DWORD *)(v155 + 16));
      Curl_cfree(*(_DWORD *)(v155 + 4));
      Curl_cfree(*(_DWORD *)(v155 + 8));
      Curl_cfree(v155);
      v9 = 0;
      if ( (*((_BYTE *)&data->set + 1326) & 0x10) != 0 )
        Curl_infof(data, "cookie contains TAB, dropping", n);
      return v9;
    }
    v26 = v167;
    v168 = 1;
    v24 = v25;
    v12 = v155;
    v13 = &i[v26 + 1];
LABEL_33:
    if ( v17 > 0xFFE || v24 > 0xFFE || v24 + v17 >= 0x1001 )
    {
      Curl_cfree(*(_DWORD *)(v12 + 20));
      Curl_cfree(*(_DWORD *)(v12 + 12));
      Curl_cfree(*(_DWORD *)(v12 + 16));
      Curl_cfree(*(_DWORD *)(v12 + 4));
      Curl_cfree(*(_DWORD *)(v12 + 8));
      Curl_cfree(v12);
      v9 = 0;
      if ( (*((_BYTE *)&data->set + 1326) & 0x10) != 0 )
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v17);
      return v9;
    }
    v125 = v149 == 95;
    v150 = v13;
    if ( v125 && v17 >= 7 && i[1] == 95 )
    {
      v161 = v24;
      if ( curl_strnequal("__Secure-", i, 9) )
      {
        *(_BYTE *)(v12 + 40) |= 1u;
        v13 = v150;
        v24 = v161;
      }
      else
      {
        v27 = curl_strnequal("__Host-", i, 7);
        v13 = v150;
        v24 = v161;
        if ( v27 )
          *(_BYTE *)(v12 + 40) |= 2u;
      }
    }
    if ( !*(_DWORD *)(v12 + 4) )
    {
      if ( !v168 )
        goto LABEL_329;
      v162 = v24;
      Curl_cfree(0);
      v34 = Curl_memdup(i, v17 + 1);
      *(_DWORD *)(v12 + 4) = v34;
      if ( v34 )
        *(_BYTE *)(v34 + v17) = 0;
      v12 = v155;
      Curl_cfree(*(_DWORD *)(v155 + 8));
      v35 = Curl_memdup(sa, v162 + 1);
      *(_DWORD *)(v155 + 8) = v35;
      if ( v35 )
        *(_BYTE *)(v35 + v162) = 0;
      v36 = *(const char **)(v155 + 4);
      if ( !v36 )
        goto LABEL_329;
      v37 = *(const char **)(v155 + 8);
      if ( !v37 )
        goto LABEL_329;
      if ( v37[strcspn(v37, invalid_octets_badoctets)]
        || (v38 = strcspn(v36, invalid_octets_badoctets), v13 = v150, v36[v38]) )
      {
        v12 = v155;
        if ( (*((_BYTE *)&data->set + 1326) & 0x10) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped", n);
        goto LABEL_329;
      }
      goto LABEL_71;
    }
    if ( !v24 )
    {
      if ( v17 == 8 )
      {
        v51 = curl_strnequal("httponly", i, 8);
        v24 = 0;
        if ( v51 )
        {
          *(_BYTE *)(v155 + 35) = 1;
          v13 = v150;
          goto LABEL_71;
        }
      }
      else if ( v17 == 6 )
      {
        v40 = curl_strnequal("secure", i, 6);
        v24 = 0;
        v12 = v155;
        if ( v40 )
        {
          if ( !secure && c->running )
            goto LABEL_329;
          v13 = v150;
          *(_BYTE *)(v155 + 33) = 1;
          goto LABEL_71;
        }
      }
      v13 = v150;
      if ( !v168 )
        goto LABEL_71;
    }
    if ( v17 == 7 )
    {
      v41 = v24;
      v42 = curl_strnequal("version", i, 7);
      v43 = v178;
      if ( v42 )
      {
        v13 = v150;
        goto LABEL_71;
      }
      if ( curl_strnequal("max-age", i, 7) )
      {
        v52 = v175;
        v53 = sa + 1;
        if ( *sa != 34 )
          v53 = sa;
        v54 = curlx_strtoofft(v53, 0, 10, v175);
        if ( !v54 )
        {
          v66 = *v175;
          v67 = v175[1];
          if ( *(_QWORD *)v175 )
          {
            if ( v177 >= __SPAIR64__(v67, v66) )
            {
              *(_QWORD *)v175 = __PAIR64__(v176, v43) + __PAIR64__(v67, v66);
              v13 = v150;
            }
            else
            {
              v13 = v150;
              *v175 = -1;
              v175[1] = 0x7FFFFFFF;
            }
            goto LABEL_71;
          }
LABEL_141:
          v52[1] = 0;
          *v52 = 1;
          v13 = v150;
          goto LABEL_71;
        }
        if ( v54 == 2 )
          goto LABEL_141;
        v13 = v150;
        if ( v54 == 1 )
        {
          *v175 = -1;
          v175[1] = 0x7FFFFFFF;
        }
      }
      else if ( curl_strnequal("expires", i, 7) )
      {
        v52 = v175;
        v13 = v150;
        if ( v41 > 0x7F || *(_QWORD *)v175 )
          goto LABEL_71;
        memcpy(dest, sa, v41);
        *((_BYTE *)dest + v41) = 0;
        v61 = Curl_getdate_capped(dest);
        *(_QWORD *)v175 = v61;
        if ( !v61 )
          goto LABEL_141;
        v13 = v150;
        if ( v61 < 0 )
        {
          v175[1] = 0;
          *v175 = 0;
        }
      }
      else
      {
        v13 = v150;
      }
      goto LABEL_71;
    }
    if ( v17 == 6 )
    {
      reject = i;
      v44 = v24;
      v45 = curl_strnequal("domain", reject, 6);
      if ( !v44 )
      {
        v13 = v150;
        goto LABEL_71;
      }
      if ( !v45 )
      {
        v13 = v150;
        goto LABEL_71;
      }
      v46 = sa + 1;
      if ( *sa != 46 )
        v46 = sa;
      v163 = v44 - (*sa == 46);
      if ( v163 == 9 && curl_strnequal(v46, "localhost", 9)
        || (v47 = memchr(v46, 46, v163)) != 0 && (unsigned int)(&v46[v163] - v47) > 1 )
      {
        v48 = domain;
        v55 = domain;
        if ( !domain )
          v55 = v46;
        is_ipnum = Curl_host_is_ipnum(v55);
        v12 = v155;
        v50 = is_ipnum;
        if ( !domain )
        {
          v48 = 0;
          goto LABEL_130;
        }
        if ( is_ipnum )
          goto LABEL_92;
      }
      else
      {
        v48 = ":";
        v12 = v155;
        if ( (unsigned __int8)Curl_host_is_ipnum(":") )
        {
LABEL_92:
          if ( strncmp(v46, v48, v163) )
            goto LABEL_146;
          v49 = strlen(v48);
          v50 = 1;
          if ( v163 != v49 )
            goto LABEL_146;
          goto LABEL_130;
        }
      }
      v57 = strlen(v48);
      v58 = v48;
      v59 = v57;
      if ( v57 < v163 )
      {
        v48 = v58;
LABEL_146:
        domain = v48;
        v171 = 1;
        if ( (*((_BYTE *)&data->set + 1326) & 0x10) != 0 )
          Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v46);
        v13 = v150;
        goto LABEL_71;
      }
      v174 = v58;
      v62 = (size_t)&v58[v57 - v163];
      if ( !curl_strnequal(v46, v62, v163) )
      {
        v48 = v174;
        goto LABEL_146;
      }
      if ( v59 == v163 )
      {
        v12 = v155;
        v48 = v174;
        v50 = 0;
      }
      else
      {
        v48 = v174;
        if ( *(_BYTE *)(v62 - 1) != 46 )
          goto LABEL_146;
        v12 = v155;
        v50 = 0;
      }
LABEL_130:
      sb = v50;
      domain = v48;
      Curl_cfree(*(_DWORD *)(v12 + 20));
      v63 = Curl_memdup(v46, v163 + 1);
      *(_DWORD *)(v12 + 20) = v63;
      if ( !v63 )
        goto LABEL_329;
      *(_BYTE *)(v63 + v163) = 0;
      v64 = v171;
      v65 = *(_DWORD *)(v12 + 20);
      if ( !v65 )
        v64 = 1;
      if ( (v65 == 0) | (unsigned __int8)sb )
      {
        v171 = v64;
        v13 = v150;
        if ( !v65 )
          break;
      }
      else
      {
        v13 = v150;
        *(_BYTE *)(v12 + 32) = 1;
      }
      goto LABEL_71;
    }
    if ( v17 != 4 )
      goto LABEL_71;
    v28 = v24;
    if ( !curl_strnequal("path", i, 4) )
    {
      v13 = v150;
      goto LABEL_71;
    }
    v12 = v155;
    Curl_cfree(*(_DWORD *)(v155 + 12));
    v29 = Curl_memdup(sa, v28 + 1);
    *(_DWORD *)(v155 + 12) = v29;
    if ( !v29 )
      goto LABEL_329;
    *(_BYTE *)(v29 + v28) = 0;
    if ( !*(_DWORD *)(v155 + 12) )
      goto LABEL_329;
    ((void (__thiscall *)(unsigned int, _DWORD))Curl_cfree)(v28, *(_DWORD *)(v155 + 16));
    v30 = (const char *)Curl_cstrdup(*(_DWORD *)(v155 + 12));
    if ( !v30 )
      goto LABEL_257;
    v31 = (char *)v30;
    v32 = strlen(v30);
    v33 = v32;
    if ( *v31 == 34 )
    {
      memmove(v31, v31 + 1, v32);
      --v33;
    }
    v13 = v150;
    if ( v33 )
    {
      if ( v31[v33 - 1] == 34 )
        v31[--v33] = 0;
      if ( *v31 == 47 )
      {
        if ( v33 )
        {
          if ( v31[v33 - 1] == 47 )
            v31[v33 - 1] = 0;
          *(_DWORD *)(v155 + 16) = v31;
        }
        else
        {
          *(_DWORD *)(v155 + 16) = v31;
        }
        goto LABEL_71;
      }
    }
    else if ( *v31 == 47 )
    {
      *(_DWORD *)(v155 + 16) = v31;
      goto LABEL_71;
    }
    Curl_cfree(v31);
    v60 = Curl_memdup("/", 2);
    if ( !v60 )
    {
LABEL_257:
      v12 = v155;
      *(_DWORD *)(v155 + 16) = 0;
      goto LABEL_329;
    }
    v13 = v150;
    *(_BYTE *)(v60 + 1) = 0;
    *(_DWORD *)(v155 + 16) = v60;
    do
    {
      do
LABEL_71:
        v39 = *v13++;
      while ( v39 == 32 );
    }
    while ( v39 == 9 );
  }
  while ( v39 == 59 );
  if ( (v171 & 1) != 0 )
  {
    v12 = v155;
  }
  else
  {
    v12 = v155;
    if ( domain && !*(_DWORD *)(v155 + 20) )
    {
      v96 = Curl_cstrdup(domain);
      v97 = 1;
      *(_DWORD *)(v155 + 20) = v96;
      if ( v96 )
        v97 = v171;
      v171 = v97;
    }
  }
  if ( (v171 & 1) != 0 || !path || *(_DWORD *)(v12 + 12) )
    goto LABEL_265;
  v98 = strchr(path, 63);
  v99 = v98 ? (char *)Curl_memrchr(path, 47, v98 - path) : strrchr(path, 47);
  if ( !v99 )
    goto LABEL_265;
  v100 = v99 - path;
  v101 = (void *)Curl_cmalloc(v99 - path + 2);
  *(_DWORD *)(v12 + 12) = v101;
  if ( !v101 )
    goto LABEL_329;
  v102 = v100 + 1;
  memcpy(v101, path, v102);
  *(_BYTE *)(*(_DWORD *)(v12 + 12) + v102) = 0;
  v103 = (const char *)Curl_cstrdup(*(_DWORD *)(v12 + 12));
  v104 = 0;
  if ( !v103 )
    goto LABEL_262;
  v105 = (char *)v103;
  v106 = strlen(v103);
  v107 = v106;
  if ( *v105 == 34 )
  {
    memmove(v105, v105 + 1, v106);
    --v107;
  }
  if ( !v107 )
  {
    if ( *v105 == 47 )
      goto LABEL_259;
    goto LABEL_260;
  }
  if ( v105[v107 - 1] == 34 )
    v105[--v107] = 0;
  if ( *v105 != 47 )
  {
LABEL_260:
    Curl_cfree(v105);
    v108 = Curl_memdup("/", 2);
    v12 = v155;
    if ( v108 )
    {
      v104 = (char *)v108;
      *(_BYTE *)(v108 + 1) = 0;
    }
    goto LABEL_262;
  }
  if ( v107 && v105[v107 - 1] == 47 )
    v105[v107 - 1] = 0;
LABEL_259:
  v12 = v155;
  v104 = v105;
LABEL_262:
  v109 = 1;
  *(_DWORD *)(v12 + 16) = v104;
  if ( v104 )
    v109 = v171;
  v171 = v109;
LABEL_265:
  v12 = v155;
  if ( (v171 & 1) != 0 || !*(_DWORD *)(v155 + 4) )
    goto LABEL_329;
  ++data->req.setcookies;
LABEL_268:
  v110 = *(_BYTE *)(v12 + 40);
  if ( (v110 & 1) != 0 && !*(_BYTE *)(v12 + 33) )
    goto LABEL_329;
  if ( (v110 & 2) != 0
    && (!*(_BYTE *)(v12 + 33)
     || !*(_DWORD *)(v12 + 12)
     || strcmp(*(const char **)(v12 + 12), "/")
     || *(_BYTE *)(v12 + 32)) )
  {
    goto LABEL_329;
  }
  running = c->running;
  if ( !running && c->newsession && !*(_QWORD *)(v12 + 24) )
    goto LABEL_329;
  *(_BYTE *)(v12 + 34) = running;
  v112 = c->lastct + 1;
  c->lastct = v112;
  *(_DWORD *)(v12 + 36) = v112;
  if ( !noexpire )
  {
    sc = (void *)time(0);
    next_expiration = c->next_expiration;
    next_expiration_high = HIDWORD(c->next_expiration);
    if ( (int)sc >= __SPAIR64__(next_expiration_high, next_expiration)
      || !(~next_expiration | next_expiration_high ^ 0x7FFFFFFF) )
    {
      c->next_expiration = 0x7FFFFFFFFFFFFFFFLL;
      v134 = 0;
      do
      {
        v135 = c;
        v172 = v134;
        v136 = c->cookies[v134];
        if ( v136 )
        {
          v153 = 0;
          v165 = &c->cookies[v134];
          do
          {
            while ( 1 )
            {
              v137 = v136;
              v136 = v136->next;
              LODWORD(v138) = v137->expires;
              expires_high = HIDWORD(v137->expires);
              if ( !v137->expires )
                break;
              HIDWORD(v138) = HIDWORD(v137->expires);
              if ( v138 >= (int)sc )
                break;
              p_next = &v153->next;
              if ( !v153 )
                p_next = v165;
              *p_next = v136;
              --v135->numcookies;
              Curl_cfree(v137->domain);
              Curl_cfree(v137->path);
              Curl_cfree(v137->spath);
              Curl_cfree(v137->name);
              Curl_cfree(v137->value);
              Curl_cfree(v137);
              v135 = c;
              if ( !v136 )
                goto LABEL_334;
            }
            if ( expires_high | (unsigned int)v138 )
            {
              HIDWORD(v138) = HIDWORD(v137->expires);
              if ( v138 < v135->next_expiration )
              {
                LODWORD(v135->next_expiration) = v138;
                HIDWORD(v135->next_expiration) = expires_high;
              }
            }
            v153 = v137;
          }
          while ( v136 );
        }
LABEL_334:
        v134 = v172 + 1;
      }
      while ( v172 != 62 );
    }
  }
  v9 = (Cookie *)v155;
  v170 = cookiehash(*(const char *const *)(v155 + 20));
  next = c->cookies[v170];
  if ( !next )
  {
    v132 = c;
    v117 = 0;
    v133 = 0;
    goto LABEL_349;
  }
  v116 = 0;
  sd = 0;
  v152 = 0;
  while ( 2 )
  {
    v117 = next;
    if ( curl_strequal(next->name, *(_DWORD *)(v155 + 4)) )
    {
      v118 = v117->domain;
      v119 = *(_DWORD *)(v155 + 20);
      if ( v118 )
      {
        if ( v119 && curl_strequal(v118, *(_DWORD *)(v155 + 20)) )
        {
LABEL_284:
          spath = v117->spath;
          if ( spath && *(_DWORD *)(v155 + 16) && v117->secure && !*(_BYTE *)(v155 + 33) && !secure )
          {
            v164 = *(_DWORD *)(v155 + 16);
            v121 = strchr(spath + 1, 47);
            v122 = v121 ? v121 - spath : strlen(spath);
            if ( curl_strnequal(spath, v164, v122) )
            {
              v145 = (_DWORD *)v155;
              if ( data && (*((_BYTE *)&data->set + 1326) & 0x10) != 0 )
                Curl_infof(
                  data,
                  "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                  *(_DWORD *)(v155 + 4));
              goto LABEL_362;
            }
          }
        }
      }
      else if ( !v119 )
      {
        goto LABEL_284;
      }
    }
    if ( !v116 )
    {
      v116 = 0;
      if ( curl_strequal(v117->name, *(_DWORD *)(v155 + 4)) )
      {
        v123 = v117->domain;
        v124 = *(_DWORD *)(v155 + 20);
        if ( !v123 )
        {
          v125 = v124 == 0;
          goto LABEL_298;
        }
        if ( v124 && curl_strequal(v123, *(_DWORD *)(v155 + 20)) )
        {
          v125 = v117->tailmatch == *(_BYTE *)(v155 + 32);
LABEL_298:
          v126 = (unsigned __int8)v152;
          if ( v125 )
            v126 = 1;
        }
        else
        {
          v126 = v152;
        }
        v152 = v126;
        if ( (v126 & 1) != 0 )
        {
          v127 = v117->spath;
          v116 = 0;
          v128 = 0;
          if ( v127 )
          {
            if ( !*(_DWORD *)(v155 + 16) )
            {
              v128 = v117->spath;
              goto LABEL_306;
            }
            if ( curl_strequal(v127, *(_DWORD *)(v155 + 16)) )
            {
              v128 = v117->spath;
              goto LABEL_306;
            }
            v116 = 0;
            v152 = 0;
          }
          else
          {
LABEL_306:
            v129 = (unsigned __int8)v152;
            if ( (v128 != 0) == (*(_DWORD *)(v155 + 16) == 0) )
              v129 = 0;
            v152 = v129;
            if ( (v129 & 1) != 0 )
            {
              if ( *(_BYTE *)(v155 + 34) )
              {
                sd = v117;
                v116 = v155;
              }
              else
              {
                v116 = v155;
                sd = v117;
                if ( v117->livecookie )
                {
                  v145 = (_DWORD *)v155;
LABEL_362:
                  Curl_cfree(v145[5]);
                  Curl_cfree(v145[3]);
                  Curl_cfree(v145[4]);
                  Curl_cfree(v145[1]);
                  Curl_cfree(v145[2]);
                  Curl_cfree(v145);
                  return 0;
                }
              }
            }
          }
        }
      }
    }
    next = v117->next;
    if ( v117->next )
      continue;
    break;
  }
  if ( v116 )
  {
    *(_DWORD *)v116 = sd->next;
    *(_DWORD *)(v116 + 36) = sd->creationtime;
    Curl_cfree(sd->name);
    Curl_cfree(sd->value);
    Curl_cfree(sd->domain);
    Curl_cfree(sd->path);
    Curl_cfree(sd->spath);
    *(_DWORD *)&sd->prefix = *(_DWORD *)(v116 + 40);
    *(_QWORD *)&sd->tailmatch = *(_QWORD *)(v116 + 32);
    sd->expires = *(_QWORD *)(v116 + 24);
    *(_QWORD *)&sd->spath = *(_QWORD *)(v116 + 16);
    v130 = *(_QWORD *)v116;
    *(_QWORD *)&sd->value = *(_QWORD *)(v116 + 8);
    *(_QWORD *)&sd->next = v130;
    timer = (time_t *)v116;
    v9 = sd;
    Curl_cfree(timer);
  }
  else
  {
    v9 = (Cookie *)v155;
  }
  v132 = c;
  v133 = v152;
LABEL_349:
  if ( data )
  {
    if ( v132->running )
    {
      v154 = v133;
      if ( (*((_BYTE *)&data->set + 1326) & 0x10) != 0 )
      {
        v141 = "Replaced";
        if ( (v133 & 1) == 0 )
          v141 = "Added";
        v132 = c;
        Curl_infof(data, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld", v141);
        v133 = v154;
      }
    }
  }
  if ( (v133 & 1) == 0 )
  {
    v142 = &v132->cookies[v170];
    if ( v117 )
      v142 = &v117->next;
    *v142 = v9;
    ++v132->numcookies;
  }
  LODWORD(v143) = v9->expires;
  v144 = HIDWORD(v9->expires);
  if ( v9->expires )
  {
    HIDWORD(v143) = HIDWORD(v9->expires);
    if ( v143 < v132->next_expiration )
    {
      LODWORD(v132->next_expiration) = v143;
      HIDWORD(v132->next_expiration) = v144;
    }
  }
  return v9;
}
