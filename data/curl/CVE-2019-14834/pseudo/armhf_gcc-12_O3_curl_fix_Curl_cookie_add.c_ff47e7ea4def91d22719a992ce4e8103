Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  _BOOL4 v8; // r6
  char *v10; // r9
  time_t v11; // r0
  unsigned int setcookies; // r3
  Cookie *v13; // r10
  int v14; // r5
  bool v15; // zf
  size_t v16; // r8
  char *v17; // r7
  int v18; // t1
  bool v19; // zf
  char *v20; // r2
  int v21; // r3
  int v22; // t1
  bool v23; // zf
  CookieInfo *v24; // r3
  size_t v25; // r6
  unsigned __int8 *v26; // r11
  size_t v27; // r0
  unsigned __int8 *v28; // r2
  int v29; // r3
  int v30; // t1
  bool v31; // zf
  int v32; // r2
  _BOOL4 v33; // r3
  _BOOL4 v34; // r3
  char *v35; // r3
  _BOOL4 v36; // r2
  CookieInfo *v37; // r2
  int v38; // r3
  size_t v39; // r0
  unsigned int v40; // r4
  size_t v41; // r9
  int livecookie; // r7
  unsigned int v43; // r6
  Cookie *v44; // r5
  unsigned int v45; // r3
  int v46; // r0
  char *v47; // r1
  const char *v48; // r8
  char *spath; // r11
  int v50; // r0
  char *v51; // r1
  int v52; // r0
  char *v53; // r1
  char *value; // r2
  char *v55; // r3
  void (__fastcall *v56)(Cookie *); // r8
  char *v57; // r1
  int expires; // r2
  int expires_high; // r3
  int creationtime; // r1
  int v61; // r2
  int v62; // r3
  const char *v63; // r2
  char *v64; // r0
  char *v65; // r0
  char *v66; // r0
  int v67; // r9
  char *v68; // r0
  char v69; // r3
  int v70; // r4
  int v71; // r0
  char v72; // r3
  char *v73; // r6
  int v74; // r9
  int v75; // r3
  int v76; // r0
  CookieInfo *v77; // r3
  int v78; // r0
  const char *v79; // r0
  unsigned int v80; // r9
  char *v81; // r0
  int v82; // r3
  int v83; // r0
  int (__fastcall *v84)(void *); // r3
  int v85; // r8
  int v86; // r0
  int v87; // r2
  int v88; // r6
  int v89; // r1
  int v90; // r9
  char *v91; // r0
  int v92; // r3
  unsigned __int8 *v94; // r3
  int v95; // r2
  int v96; // t1
  bool v97; // zf
  _BYTE *v98; // r0
  int v99; // r0
  char *v100; // r5
  int v101; // r0
  int v102; // r0
  void (__fastcall *v103)(char *); // r3
  const char *v104; // r0
  const char *name; // r6
  bool v106; // zf
  char *v107; // r8
  int v108; // r0
  char *v109; // r0
  int v110; // r0
  size_t v111; // r0
  size_t v112; // r5
  char *v113; // r8
  int v114; // r0
  int v115; // r0
  char *v116; // r1
  __int64 v117; // r2
  Curl_easy *v118; // r12
  int v119; // r0
  int is_ipnum; // r5
  int v121; // r0
  int v122; // r0
  char *v123; // r0
  size_t v124; // r2
  int v125; // r0
  char *v126; // r0
  char *v127; // r3
  int v128; // r3
  size_t v129; // r5
  char *v130; // r0
  char *v131; // r0
  int v132; // r0
  bool v133; // zf
  void *v134; // r0
  int v135; // r0
  curl_off_t v136; // r2
  int v137; // r4
  int v138; // [sp+0h] [bp-100h] BYREF
  CookieInfo *ca; // [sp+1Ch] [bp-E4h]
  char *reject; // [sp+20h] [bp-E0h]
  Curl_easy *dataa; // [sp+24h] [bp-DCh]
  Curl_easy *v142; // [sp+2Ch] [bp-D4h]
  char *s2; // [sp+30h] [bp-D0h]
  time_t now; // [sp+34h] [bp-CCh]
  _BOOL4 v145; // [sp+38h] [bp-C8h]
  time_t v146; // [sp+3Ch] [bp-C4h]
  const char *badcookie; // [sp+40h] [bp-C0h]
  char *v148; // [sp+44h] [bp-BCh]
  CookieInfo *v149; // [sp+48h] [bp-B8h]
  CookieInfo *v150; // [sp+4Ch] [bp-B4h]
  char *tok_buf; // [sp+50h] [bp-B0h] BYREF
  char date[128]; // [sp+54h] [bp-ACh] BYREF

  ca = (CookieInfo *)httpheader;
  v8 = httpheader;
  v145 = noexpire;
  v142 = data;
  dataa = (Curl_easy *)c;
  s2 = (char *)domain;
  v10 = (char *)lineptr;
  now = secure;
  v11 = time(0u);
  setcookies = data->req.setcookies;
  v146 = v11;
  if ( setcookies > 0x31 )
    return 0;
  v13 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v13 )
    return 0;
  if ( v8 )
  {
    if ( strlen(lineptr) <= (unsigned int)&loc_1388 )
    {
      reject = ";\t\r\n=";
      v148 = (char *)&badoctets_0;
      badcookie = "path";
      v149 = 0;
      while ( 1 )
      {
        v14 = (unsigned __int8)*v10;
        if ( !*v10 )
          break;
LABEL_7:
        v15 = v14 == 9;
        if ( v14 != 9 )
          v15 = v14 == 32;
        if ( !v15 )
        {
          v16 = strcspn(v10, ";\t\r\n=");
          if ( !v16 )
          {
            v17 = v10;
            goto LABEL_14;
          }
          goto LABEL_20;
        }
        ++v10;
      }
      while ( 1 )
      {
        v16 = strcspn(v10, reject);
        if ( !v16 )
          goto LABEL_50;
LABEL_20:
        v17 = &v10[v16];
        v20 = &v10[v16];
        while ( v16 )
        {
          v22 = (unsigned __int8)*--v20;
          v21 = v22;
          v23 = v22 == 9;
          if ( v22 != 9 )
            v23 = v21 == 32;
          if ( !v23 )
          {
            v24 = 0;
            if ( *v17 != 61 )
            {
              v32 = 0;
              v26 = 0;
              v25 = 0;
              goto LABEL_37;
            }
            goto LABEL_29;
          }
          --v16;
        }
        if ( *v17 != 61 )
          break;
LABEL_29:
        v26 = (unsigned __int8 *)(v17 + 1);
        v27 = strcspn(v17 + 1, ";\r\n");
        v28 = (unsigned __int8 *)&v17[v27 + 1];
        v25 = v27;
        v17 += v27 + 1;
        while ( 1 )
        {
          if ( !v25 )
          {
            v24 = ca;
            v32 = 0;
            goto LABEL_37;
          }
          v30 = *--v28;
          v29 = v30;
          v31 = v30 == 9;
          if ( v30 != 9 )
            v31 = v29 == 32;
          if ( !v31 )
            break;
          --v25;
        }
        v94 = v26;
        do
        {
          v26 = v94;
          v96 = *v94++;
          v95 = v96;
          v97 = v96 == 9;
          if ( v96 != 9 )
            v97 = v95 == 32;
          if ( !v97 )
          {
            if ( !memchr(v26, 9, v25) )
              goto LABEL_163;
            freecookie(v13);
            if ( (*(&v142->set.connect_only + 4) & 0x20) != 0 )
              Curl_infof(v142, "cookie contains TAB, dropping");
            return 0;
          }
          --v25;
        }
        while ( v25 );
        v26 = v94;
LABEL_163:
        v24 = ca;
        v32 = v25 > 0xFFE;
LABEL_37:
        if ( v16 > 0xFFE )
          v32 |= 1u;
        if ( v32 || v25 + v16 > 0x1000 )
        {
          freecookie(v13);
          if ( (*(&v142->set.connect_only + 4) & 0x20) != 0 )
            Curl_infof(v142, "oversized cookie dropped, name/val %zu + %zu bytes", v16, v25);
          return 0;
        }
        if ( v16 <= 6 )
          goto LABEL_166;
        if ( v14 != 95 || v10[1] != 95 )
          goto LABEL_43;
        v150 = v24;
        v101 = curl_strnequal("__Secure-", v10, 9);
        v24 = v150;
        if ( !v101 )
        {
          v125 = curl_strnequal("__Host-", v10, 7);
          v24 = v150;
          if ( v125 )
          {
            v13->prefix |= 2u;
            if ( !v13->name )
              goto LABEL_191;
            goto LABEL_44;
          }
LABEL_43:
          if ( v13->name )
            goto LABEL_44;
          goto LABEL_191;
        }
        v13->prefix |= 1u;
        if ( !v13->name )
          goto LABEL_191;
LABEL_44:
        if ( v25 )
        {
LABEL_47:
          if ( v16 != 7 || curl_strnequal("version", v10, 7) )
            goto LABEL_48;
          if ( !curl_strnequal("max-age", v10, 7) )
          {
            if ( curl_strnequal("expires", v10, 7) )
            {
              v133 = v25 == 127;
              if ( v25 <= 0x7F )
                v133 = v13->expires == 0;
              if ( v133 )
              {
                v134 = memcpy(date, v26, v25);
                *((_BYTE *)&v138 + v25 + 0x54) = 0;
                v135 = Curl_getdate_capped(v134);
                HIDWORD(v136) = v135;
                LODWORD(v136) = v135 >> 31;
                if ( v135 )
                {
                  if ( v135 >= 0 )
                  {
                    LODWORD(v13->expires) = v135;
                    HIDWORD(v13->expires) = v136;
                  }
                  else
                  {
                    v136 = 0LL;
                  }
                  if ( v135 >> 31 == -1 )
                    v13->expires = v136;
                }
                else
                {
                  v13->expires = 1LL;
                }
              }
            }
            goto LABEL_48;
          }
          if ( *v26 == 34 )
            ++v26;
          v110 = curlx_strtoofft(v26, 0, 10, &v13->expires);
          if ( v110 != 1 )
          {
            if ( v110 == 2 )
              goto LABEL_283;
            if ( v110 )
              goto LABEL_48;
            if ( !v13->expires )
            {
LABEL_283:
              v13->expires = 1LL;
              v14 = (unsigned __int8)*v17;
              goto LABEL_49;
            }
            if ( __SPAIR64__(0x7FFFFFFF - (v146 >> 0x1F), ~v146) >= v13->expires )
            {
              v13->expires += v146;
              v14 = (unsigned __int8)*v17;
              goto LABEL_49;
            }
          }
          v13->expires = 0x7FFFFFFFFFFFFFFFLL;
          v14 = (unsigned __int8)*v17;
        }
        else if ( v16 == 8 )
        {
          if ( !curl_strnequal("httponly", v10, 8) )
            goto LABEL_48;
          v13->httponly = 1;
          v14 = (unsigned __int8)*v17;
        }
        else
        {
          if ( v24 )
            goto LABEL_47;
LABEL_48:
          v14 = (unsigned __int8)*v17;
        }
LABEL_49:
        if ( !v14 )
        {
LABEL_50:
          if ( !v149 )
          {
            v33 = v13->domain == 0;
            if ( !s2 )
              v33 = 0;
            if ( !v33 || (v132 = Curl_cstrdup(s2), (v13->domain = (char *)v132) != 0) )
            {
              v34 = v13->path == 0;
              if ( !path )
                v34 = 0;
              if ( !v34 )
                goto LABEL_325;
              v126 = strchr(path, 63);
              v127 = v126 ? (char *)Curl_memrchr(path, 47, v126 - path) : strrchr(path, 47);
              if ( !v127 )
                goto LABEL_325;
              v128 = v127 - path;
              v129 = v128 + 1;
              v130 = (char *)Curl_cmalloc(v128 + 2);
              v13->path = v130;
              if ( v130 )
              {
                memcpy(v130, path, v129);
                v13->path[v129] = 0;
                v131 = sanitize_cookie_path(v13->path);
                v13->spath = v131;
                if ( v131 )
                {
LABEL_325:
                  if ( v13->name )
                  {
                    ++v142->req.setcookies;
                    goto LABEL_59;
                  }
                }
              }
            }
          }
LABEL_154:
          freecookie(v13);
          return 0;
        }
        while ( 1 )
        {
LABEL_14:
          v19 = v14 == 9;
          if ( v14 != 9 )
            v19 = v14 == 32;
          if ( !v19 )
            break;
          v18 = (unsigned __int8)*++v17;
          v14 = v18;
          if ( !v18 )
            goto LABEL_50;
        }
        if ( v14 != 59 )
          goto LABEL_50;
        v14 = (unsigned __int8)v17[1];
        v10 = v17 + 1;
        if ( v17[1] )
          goto LABEL_7;
      }
      v25 = 0;
      v24 = 0;
      v26 = 0;
LABEL_166:
      if ( !v13->name )
      {
LABEL_191:
        if ( v24 )
        {
          Curl_cfree(0);
          v102 = Curl_strndup(v10, v16);
          v103 = (void (__fastcall *)(char *))Curl_cfree;
          v13->name = (char *)v102;
          v103(v13->value);
          v104 = (const char *)Curl_strndup(v26, v25);
          name = v13->name;
          v106 = v104 == 0;
          if ( v104 )
            v106 = name == 0;
          v13->value = (char *)v104;
          if ( !v106 )
          {
            v107 = v148;
            if ( !v104[strcspn(v104, v148)] && !name[strcspn(name, v107)] )
              goto LABEL_48;
            if ( (*(&v142->set.connect_only + 4) & 0x20) != 0 )
              Curl_infof(v142, "invalid octets in name/value, cookie dropped");
          }
        }
        goto LABEL_154;
      }
      if ( !v25 )
      {
        if ( v16 == 6 )
        {
          v150 = v24;
          if ( !curl_strnequal("secure", v10, 6) )
          {
            if ( v150 )
              curl_strnequal("domain", v10, 6);
            goto LABEL_48;
          }
          if ( now || !*(&dataa->req.writer_stack_depth + 1) )
          {
            v13->secure = 1;
            v14 = (unsigned __int8)*v17;
            goto LABEL_49;
          }
          goto LABEL_154;
        }
        if ( !v24 || v16 != 4 )
          goto LABEL_48;
LABEL_201:
        if ( !curl_strnequal(badcookie, v10, 4) )
          goto LABEL_48;
        Curl_cfree(v13->path);
        v108 = Curl_strndup(v26, v25);
        v13->path = (char *)v108;
        if ( v108 )
        {
          Curl_cfree(v13->spath);
          v109 = sanitize_cookie_path(v13->path);
          v13->spath = v109;
          if ( v109 )
            goto LABEL_48;
        }
        goto LABEL_154;
      }
      if ( v16 == 4 )
        goto LABEL_201;
      if ( v16 != 6 || !curl_strnequal("domain", v10, 6) )
        goto LABEL_48;
      if ( *v26 == 46 )
      {
        --v25;
        ++v26;
      }
      if ( v25 == 9 && curl_strnequal(v26, "localhost", 9) || (v98 = memchr(v26, 46, v25)) != 0 && v25 - (v98 - v26) > 1 )
      {
        if ( !s2 )
        {
          is_ipnum = Curl_host_is_ipnum(v26);
          Curl_cfree(v13->domain);
          v121 = Curl_strndup(v26, v25);
          v13->domain = (char *)v121;
          if ( !v121 )
            goto LABEL_154;
          if ( is_ipnum )
            goto LABEL_48;
          goto LABEL_263;
        }
        if ( Curl_host_is_ipnum(s2) )
          goto LABEL_183;
      }
      else
      {
        v99 = Curl_host_is_ipnum(&LC1);
        s2 = (char *)&LC1;
        if ( v99 )
        {
LABEL_183:
          v100 = s2;
          if ( !strncmp((const char *)v26, s2, v25) && strlen(v100) == v25 )
          {
            Curl_cfree(v13->domain);
            v122 = Curl_strndup(v26, v25);
            v13->domain = (char *)v122;
            if ( v122 )
              goto LABEL_48;
            goto LABEL_154;
          }
LABEL_185:
          if ( (*(&v142->set.connect_only + 4) & 0x20) != 0 )
            Curl_infof(v142, "skipped cookie with bad tailmatch domain: %s", (const char *)v26);
          v14 = (unsigned __int8)*v17;
          v149 = ca;
          goto LABEL_49;
        }
      }
      v111 = strlen(s2);
      v112 = v111;
      if ( v25 > v111 )
        goto LABEL_185;
      v113 = &s2[v111 - v25];
      if ( !curl_strnequal(v26, v113, v25) || v25 != v112 && *(v113 - 1) != 46 )
        goto LABEL_185;
      Curl_cfree(v13->domain);
      v114 = Curl_strndup(v26, v25);
      v13->domain = (char *)v114;
      if ( !v114 )
        goto LABEL_154;
LABEL_263:
      v13->tailmatch = 1;
      goto LABEL_48;
    }
LABEL_260:
    Curl_cfree(v13);
    return 0;
  }
  tok_buf = (char *)ca;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
  {
    v10 = (char *)(lineptr + 0xA);
    v13->httponly = 1;
  }
  if ( *v10 == 35 )
    goto LABEL_260;
  v64 = strchr(v10, 13);
  if ( v64 )
    *v64 = 0;
  v65 = strchr(v10, 10);
  if ( v65 )
    *v65 = 0;
  v66 = strtok_r(v10, "\t", &tok_buf);
  if ( !v66 )
    goto LABEL_154;
  if ( *v66 == 46 )
    ++v66;
  v67 = Curl_cstrdup(v66);
  v13->domain = (char *)v67;
  v68 = strtok_r(0u, "\t", &tok_buf);
  v69 = v67;
  if ( v67 )
    v69 = 1;
  if ( v68 )
    v70 = v69 & 1;
  else
    v70 = 0;
  if ( !v70 )
  {
    LOBYTE(v70) = v69;
    v75 = 1;
    v74 = v67 == 0;
    goto LABEL_316;
  }
  v71 = ((int (*)(void))curl_strequal)();
  v72 = v71;
  if ( v71 )
    v72 = 1;
  v13->tailmatch = v72;
  v73 = strtok_r(0u, "\t", &tok_buf);
  if ( !v73 )
  {
    v74 = 0;
    v75 = 2;
    goto LABEL_316;
  }
  v76 = strcmp("TRUE", v73);
  v77 = (CookieInfo *)Curl_cstrdup;
  if ( !v76 || (ca = (CookieInfo *)Curl_cstrdup, v78 = strcmp("FALSE", v73), v77 = ca, !v78) )
  {
    v83 = ((int (__fastcall *)(void *))v77)(&LC0);
    v84 = (int (__fastcall *)(void *))Curl_cstrdup;
    v85 = v83;
    v13->path = (char *)v83;
    v86 = v84(&LC0);
    v13->spath = (char *)v86;
    if ( v86 )
    {
      v70 = v85 == 0;
      goto LABEL_133;
    }
    v13->secure = 0;
    if ( curl_strequal(v73, "TRUE") )
      goto LABEL_229;
LABEL_231:
    strtok_r(0u, "\t", &tok_buf);
    goto LABEL_154;
  }
  v79 = (const char *)((int (__fastcall *)(char *))ca)(v73);
  v13->path = (char *)v79;
  if ( !v79 )
    goto LABEL_231;
  v80 = (unsigned int)sanitize_cookie_path(v79);
  v13->spath = (char *)v80;
  v81 = strtok_r(0u, "\t", &tok_buf);
  LOBYTE(v70) = v80;
  if ( v80 )
    LOBYTE(v70) = 1;
  if ( v81 )
    v82 = v70 & 1;
  else
    v82 = 0;
  if ( !v82 )
    v80 = __clz(v80);
  v73 = v81;
  if ( !v82 )
  {
    v74 = v80 >> 5;
    v75 = 3;
    goto LABEL_316;
  }
  v70 = 0;
LABEL_133:
  v13->secure = 0;
  if ( !curl_strequal(v73, "TRUE") )
    goto LABEL_134;
LABEL_229:
  if ( !now && !*(&dataa->req.writer_stack_depth + 1) )
    goto LABEL_231;
  v13->secure = 1;
LABEL_134:
  if ( strtok_r(0u, "\t", &tok_buf) )
    v87 = ((unsigned __int8)v70 ^ 1) & 1;
  else
    v87 = 0;
  if ( !v87 )
  {
    v74 = v70;
    LOBYTE(v70) = v70 ^ 1;
    v75 = 4;
    goto LABEL_316;
  }
  v88 = ((int (*)(void))curlx_strtoofft)();
  LOBYTE(v70) = v88 == 0;
  if ( strtok_r(0u, "\t", &tok_buf) )
    v74 = v88 == 0;
  else
    v74 = 0;
  if ( !v74 )
  {
    v74 = v88;
    if ( v88 )
      v74 = 1;
    v75 = 5;
    goto LABEL_316;
  }
  v89 = ((int (*)(void))Curl_cstrdup)();
  v13->name = (char *)v89;
  if ( !v89 )
  {
    strtok_r(0u, "\t", &tok_buf);
    goto LABEL_255;
  }
  if ( curl_strnequal("__Secure-", v89, 9) )
  {
    v13->prefix |= 1u;
  }
  else if ( curl_strnequal("__Host-", v13->name, 7) )
  {
    v13->prefix |= 2u;
  }
  v74 = (int)strtok_r(0u, "\t", &tok_buf);
  if ( !v74 )
  {
LABEL_255:
    v119 = Curl_cstrdup(&LC24);
    v13->value = (char *)v119;
    if ( !v119 )
      goto LABEL_154;
    goto LABEL_256;
  }
  v90 = ((int (*)(void))Curl_cstrdup)();
  v13->value = (char *)v90;
  v91 = strtok_r(0u, "\t", &tok_buf);
  LOBYTE(v70) = v90;
  if ( v90 )
    LOBYTE(v70) = 1;
  if ( v91 )
    v92 = v70 & 1;
  else
    v92 = 0;
  if ( v92 )
  {
    while ( strtok_r(0u, "\t", &tok_buf) )
      ;
    goto LABEL_154;
  }
  v75 = 7;
  v74 = v90 == 0;
LABEL_316:
  if ( v75 == 7 )
    v137 = 0;
  else
    v137 = v70 & 1;
  if ( v137 )
    goto LABEL_154;
LABEL_256:
  if ( v74 )
    goto LABEL_154;
LABEL_59:
  if ( (v13->prefix & 1) != 0 )
  {
    if ( !v13->secure )
      goto LABEL_154;
    if ( (v13->prefix & 2) != 0 )
      goto LABEL_62;
  }
  else if ( (v13->prefix & 2) != 0 )
  {
    if ( !v13->secure )
      goto LABEL_154;
LABEL_62:
    v35 = v13->path;
    if ( !v35 || *v35 != 47 || v35[1] || v13->tailmatch )
      goto LABEL_154;
  }
  if ( !*(&dataa->req.writer_stack_depth + 1) && *(&dataa->req.writer_stack_depth + 2) && !v13->expires )
    goto LABEL_154;
  v36 = v145;
  v13->livecookie = *(&dataa->req.writer_stack_depth + 1);
  v15 = !v36;
  v37 = (CookieInfo *)dataa;
  v38 = *(_DWORD *)dataa->req.fread_eof + 1;
  *(_DWORD *)dataa->req.fread_eof = v38;
  v13->creationtime = v38;
  if ( v15 )
    remove_expired(v37);
  v39 = cookiehash(v13->domain);
  v40 = *(&dataa->magic + v39);
  v41 = v39;
  if ( !v40 )
  {
    if ( *(&dataa->req.writer_stack_depth + 1) )
    {
      v43 = (unsigned int)v13;
      if ( (*(&v142->set.connect_only + 4) & 0x20) != 0 )
      {
LABEL_279:
        livecookie = 0;
        v63 = "Added";
        goto LABEL_280;
      }
    }
    else
    {
      v43 = (unsigned int)v13;
    }
LABEL_282:
    *(&dataa->magic + v41) = v43;
    goto LABEL_246;
  }
  livecookie = 0;
  v43 = 0;
  v44 = 0;
  while ( 1 )
  {
    if ( !curl_strequal(*(_DWORD *)(v40 + 4), v13->name) )
      goto LABEL_83;
    v46 = *(_DWORD *)(v40 + 20);
    v47 = v13->domain;
    if ( v46 )
    {
      if ( !v47 || !curl_strequal(v46, v47) )
        goto LABEL_83;
    }
    else if ( v47 )
    {
      goto LABEL_83;
    }
    v48 = *(const char **)(v40 + 16);
    if ( v48 )
    {
      spath = v13->spath;
      if ( spath )
      {
        if ( *(_BYTE *)(v40 + 33) && !(now | v13->secure) )
        {
          v123 = strchr(v48 + 1, 47);
          v124 = v123 ? v123 - v48 : strlen(v48);
          if ( curl_strnequal(v48, spath, v124) )
          {
            if ( (*(&v142->set.connect_only + 4) & 0x20) != 0 )
              Curl_infof(
                v142,
                "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                v13->name,
                v13->domain);
            goto LABEL_154;
          }
        }
      }
    }
LABEL_83:
    if ( v44 || !curl_strequal(*(_DWORD *)(v40 + 4), v13->name) )
      goto LABEL_73;
    v50 = *(_DWORD *)(v40 + 20);
    v51 = v13->domain;
    if ( v50 )
    {
      if ( v51 && curl_strequal(v50, v51) && *(unsigned __int8 *)(v40 + 32) == v13->tailmatch )
        goto LABEL_236;
    }
    else if ( !v51 )
    {
      goto LABEL_236;
    }
    if ( !livecookie )
      goto LABEL_90;
LABEL_236:
    v115 = *(_DWORD *)(v40 + 16);
    v116 = v13->spath;
    if ( v115 )
      break;
LABEL_240:
    if ( (v115 == 0) != (v116 == 0) )
      goto LABEL_90;
    livecookie = v13->livecookie;
    if ( v13->livecookie )
    {
      v43 = v40;
      v44 = v13;
    }
    else
    {
      if ( *(_BYTE *)(v40 + 34) )
        goto LABEL_154;
      v43 = v40;
      v44 = v13;
      livecookie = 1;
    }
LABEL_73:
    v45 = *(_DWORD *)v40;
    if ( !*(_DWORD *)v40 )
      goto LABEL_91;
LABEL_74:
    v40 = v45;
  }
  if ( v116 && curl_strequal(v115, v116) )
  {
    v115 = *(_DWORD *)(v40 + 16);
    v116 = v13->spath;
    goto LABEL_240;
  }
LABEL_90:
  v45 = *(_DWORD *)v40;
  livecookie = 0;
  if ( *(_DWORD *)v40 )
    goto LABEL_74;
LABEL_91:
  if ( v44 )
  {
    v44->next = *(Cookie **)v43;
    v52 = *(_DWORD *)(v43 + 4);
    v44->creationtime = *(_DWORD *)(v43 + 36);
    Curl_cfree(v52);
    Curl_cfree(*(_DWORD *)(v43 + 8));
    Curl_cfree(*(_DWORD *)(v43 + 20));
    Curl_cfree(*(_DWORD *)(v43 + 12));
    Curl_cfree(*(_DWORD *)(v43 + 16));
    v53 = v44->name;
    value = v44->value;
    v55 = v44->path;
    v56 = (void (__fastcall *)(Cookie *))Curl_cfree;
    *(_DWORD *)v43 = v44->next;
    *(_DWORD *)(v43 + 4) = v53;
    *(_DWORD *)(v43 + 8) = value;
    *(_DWORD *)(v43 + 12) = v55;
    v57 = v44->domain;
    expires = v44->expires;
    expires_high = HIDWORD(v44->expires);
    *(_DWORD *)(v43 + 16) = v44->spath;
    *(_DWORD *)(v43 + 20) = v57;
    *(_DWORD *)(v43 + 24) = expires;
    *(_DWORD *)(v43 + 28) = expires_high;
    creationtime = v44->creationtime;
    v61 = *(_DWORD *)&v44->prefix;
    v62 = *((_DWORD *)&v44->prefix + 1);
    *(_DWORD *)(v43 + 32) = *(_DWORD *)&v44->tailmatch;
    *(_DWORD *)(v43 + 36) = creationtime;
    *(_DWORD *)(v43 + 40) = v61;
    *(_DWORD *)(v43 + 44) = v62;
    v56(v44);
  }
  else
  {
    v43 = (unsigned int)v13;
  }
  if ( !*(&dataa->req.writer_stack_depth + 1) || (*(&v142->set.connect_only + 4) & 0x20) == 0 )
  {
    if ( livecookie )
      goto LABEL_247;
    goto LABEL_245;
  }
  if ( !livecookie )
    goto LABEL_279;
  v63 = "Replaced";
LABEL_280:
  Curl_infof(
    v142,
    "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
    v63,
    *(const char **)(v43 + 4),
    *(const char **)(v43 + 8),
    *(const char **)(v43 + 20),
    *(const char **)(v43 + 12),
    *(_QWORD *)(v43 + 0x18));
  if ( !livecookie )
  {
    if ( !v40 )
      goto LABEL_282;
LABEL_245:
    *(_DWORD *)v40 = v43;
LABEL_246:
    ++dataa->req.doh;
  }
LABEL_247:
  v117 = *(_QWORD *)(v43 + 0x18);
  if ( v117 )
  {
    v118 = dataa;
    if ( v117 < *(_QWORD *)&dataa->req.upload_fromhere )
    {
      dataa->req.upload_fromhere = (char *)v117;
      v118->req.p.file = (FILEPROTO *)HIDWORD(v117);
    }
  }
  return (Cookie *)v43;
}
