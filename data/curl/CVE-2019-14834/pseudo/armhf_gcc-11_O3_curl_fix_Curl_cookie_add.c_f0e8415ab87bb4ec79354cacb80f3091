Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  int (__fastcall **v8)(_DWORD); // r10
  char *v10; // r7
  time_t v11; // r0
  unsigned int setcookies; // r3
  Cookie *v13; // r9
  bool v14; // zf
  size_t v15; // r6
  int v16; // r5
  char *v17; // r10
  char *v18; // r2
  int v19; // r4
  int v20; // t1
  size_t v21; // r3
  bool v22; // zf
  size_t v23; // r4
  unsigned __int8 *v24; // r11
  size_t v25; // r0
  unsigned __int8 *v26; // r1
  size_t v27; // r8
  int v28; // r2
  int v29; // t1
  bool v30; // zf
  _BOOL4 v31; // r2
  int v32; // r3
  _BOOL4 v33; // r3
  int v34; // r0
  bool v35; // zf
  _BYTE *v36; // r0
  const char *v37; // r3
  const char *v38; // r5
  _BOOL4 v39; // r4
  char *v40; // r0
  int v41; // r3
  char *v42; // r8
  bool v43; // zf
  char *v44; // r0
  int v45; // r3
  int v46; // r1
  char *v48; // r0
  char *v49; // r0
  int v50; // r4
  int v51; // r0
  char *v52; // r0
  int v53; // r3
  int v54; // r0
  int (__fastcall *v55)(char *); // r4
  const char *v56; // r0
  char *v57; // r0
  char *v58; // r0
  int v59; // r3
  unsigned __int8 prefix; // r3
  int v61; // r0
  int (__fastcall *v62)(void *); // r2
  int v63; // r4
  int v64; // r0
  bool v65; // zf
  int v66; // t1
  _BOOL4 v67; // r3
  _BOOL4 v68; // r3
  char *v69; // r3
  CookieInfo *v70; // r2
  int v71; // r3
  size_t v72; // r0
  size_t v73; // r5
  size_t v74; // r10
  int livecookie; // r7
  Cookie *v76; // r6
  int v77; // r0
  char *v78; // r1
  const char *v79; // r8
  char *spath; // r11
  int v81; // r0
  char *v82; // r1
  int v83; // r0
  char *v84; // r1
  unsigned __int8 *v85; // r1
  int v86; // r4
  bool v87; // zf
  int v88; // r0
  char *v89; // r0
  int v90; // r0
  __int64 v91; // r2
  bool v92; // cf
  bool v93; // zf
  void *v94; // r0
  int v95; // r0
  curl_off_t v96; // r2
  int v97; // r4
  char *v98; // r0
  bool v99; // zf
  int v100; // r0
  void (__fastcall *v101)(char *); // r3
  const char *v102; // r0
  const char *name; // r5
  bool v104; // zf
  int v105; // r0
  int is_ipnum; // r4
  int v107; // r0
  Cookie *v108; // r0
  Cookie *v109; // r1
  Cookie *value; // r2
  Cookie *v111; // r3
  void (__fastcall *v112)(Cookie *); // r8
  Cookie *v113; // r1
  Cookie *expires; // r2
  Cookie *expires_high; // r3
  Cookie *creationtime; // r1
  Cookie *v117; // r2
  Cookie *v118; // r3
  size_t v119; // r0
  size_t v120; // r5
  int v121; // r6
  int v122; // r0
  __int64 v123; // r2
  const char *v124; // r12
  int v125; // r0
  char *v126; // r0
  size_t v127; // r2
  char *v128; // r4
  char *v129; // r0
  char *v130; // r0
  char *v131; // r5
  int v132; // r4
  char *v133; // r0
  size_t v134; // r4
  char *v135; // r0
  int v136; // r0
  int v137; // r0
  int v138; // [sp+0h] [bp-100h] BYREF
  CookieInfo *ca; // [sp+1Ch] [bp-E4h]
  const char *domain_0; // [sp+24h] [bp-DCh]
  Curl_easy *v141; // [sp+28h] [bp-D8h]
  time_t now; // [sp+2Ch] [bp-D4h]
  _BOOL4 v143; // [sp+30h] [bp-D0h]
  time_t v144; // [sp+34h] [bp-CCh]
  _BOOL4 badcookie; // [sp+38h] [bp-C8h]
  char *s; // [sp+3Ch] [bp-C4h]
  int v147; // [sp+40h] [bp-C0h]
  char *reject; // [sp+44h] [bp-BCh]
  time_t v149; // [sp+48h] [bp-B8h]
  unsigned int v150; // [sp+4Ch] [bp-B4h]
  char *tok_buf; // [sp+50h] [bp-B0h] BYREF
  char date[128]; // [sp+54h] [bp-ACh] BYREF

  ca = (CookieInfo *)httpheader;
  badcookie = noexpire;
  v141 = data;
  domain_0 = (const char *)c;
  now = (time_t)domain;
  v10 = (char *)lineptr;
  s = (char *)path;
  v143 = secure;
  v11 = time(0u);
  setcookies = data->req.setcookies;
  v144 = v11;
  if ( setcookies > 0x31 )
    return 0;
  v13 = (Cookie *)Curl_ccalloc(1, 48);
  if ( !v13 )
    return 0;
  if ( !ca )
  {
    tok_buf = 0;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v10 = (char *)(lineptr + 0xA);
      v13->httponly = 1;
    }
    if ( *v10 == 35 )
    {
      Curl_cfree(v13);
      return 0;
    }
    v48 = strchr(v10, 13);
    if ( v48 )
      *v48 = 0;
    v49 = strchr(v10, 10);
    if ( v49 )
      *v49 = 0;
    v42 = strtok_r(v10, "\t", &tok_buf);
    if ( !v42 )
      goto LABEL_79;
    now = (time_t)"__Host-";
    v50 = 0;
    while ( 1 )
    {
      switch ( v50 )
      {
        case 0:
          if ( *v42 == 46 )
            ++v42;
          v51 = Curl_cstrdup(v42);
          v13->domain = (char *)v51;
          if ( v51 )
          {
            v39 = 0;
            LOBYTE(v8) = 1;
          }
          else
          {
            v39 = 1;
          }
          if ( !v51 )
            LOBYTE(v8) = 0;
          v52 = strtok_r(0u, "\t", &tok_buf);
          if ( v52 )
            v53 = (unsigned __int8)v8 & 1;
          else
            v53 = 0;
          v42 = v52;
          if ( !v53 )
            goto LABEL_116;
          goto LABEL_103;
        case 1:
LABEL_103:
          v13->tailmatch = curl_strequal(v42, "TRUE") != 0;
          v42 = strtok_r(0u, "\t", &tok_buf);
          if ( v42 )
            goto LABEL_104;
          goto LABEL_79;
        case 2:
LABEL_104:
          v54 = strcmp("TRUE", v42);
          v8 = &Curl_cstrdup;
          v55 = (int (__fastcall *)(char *))Curl_cstrdup;
          if ( v54 && strcmp("FALSE", v42) )
          {
            v56 = (const char *)v55(v42);
            v13->path = (char *)v56;
            if ( !v56 )
              goto LABEL_240;
            v57 = sanitize_cookie_path(v56);
            v13->spath = v57;
            if ( v57 )
            {
              v39 = 0;
              LOBYTE(v8) = 1;
            }
            else
            {
              v39 = 1;
            }
            if ( !v57 )
              LOBYTE(v8) = 0;
            v58 = strtok_r(0u, "\t", &tok_buf);
            if ( v58 )
              v59 = (unsigned __int8)v8 & 1;
            else
              v59 = 0;
            v42 = v58;
            if ( !v59 )
              goto LABEL_116;
LABEL_62:
            v39 = 0;
LABEL_63:
            v13->secure = 0;
            if ( !curl_strequal(v42, "TRUE") )
              goto LABEL_64;
            goto LABEL_238;
          }
          ca = (CookieInfo *)LC0;
          v61 = v55(LC0);
          v62 = (int (__fastcall *)(void *))Curl_cstrdup;
          v63 = v61;
          v13->path = (char *)v61;
          v64 = v62(LC0);
          v13->spath = (char *)v64;
          if ( v64 )
          {
            v39 = v63 == 0;
            goto LABEL_63;
          }
          v13->secure = 0;
          v105 = curl_strequal(v42, "TRUE");
          LOBYTE(v8) = v105;
          if ( !v105 )
          {
            strtok_r(0u, "\t", &tok_buf);
            v39 = 1;
LABEL_116:
            if ( ((unsigned __int8)v8 & 1) == 0 )
            {
LABEL_117:
              if ( !v39 )
              {
                prefix = v13->prefix;
                if ( (prefix & 1) != 0 )
                  goto LABEL_142;
                goto LABEL_119;
              }
            }
LABEL_79:
            freecookie(v13);
            return 0;
          }
          v39 = 1;
LABEL_238:
          if ( !v143 && !domain_0[272] )
          {
LABEL_240:
            strtok_r(0u, "\t", &tok_buf);
            goto LABEL_79;
          }
          v13->secure = 1;
LABEL_64:
          v40 = strtok_r(0u, "\t", &tok_buf);
          LOBYTE(v8) = !v39;
          if ( v40 )
            v41 = (unsigned __int8)v8 & 1;
          else
            v41 = 0;
          v42 = v40;
          if ( !v41 )
            goto LABEL_116;
LABEL_68:
          v43 = curlx_strtoofft(v42, 0, 10, &v13->expires) == 0;
          if ( v43 )
          {
            v39 = 0;
            LOBYTE(v8) = 1;
          }
          else
          {
            v39 = 1;
          }
          if ( !v43 )
            LOBYTE(v8) = 0;
          v44 = strtok_r(0u, "\t", &tok_buf);
          if ( v44 )
            v45 = (unsigned __int8)v8 & 1;
          else
            v45 = 0;
          v42 = v44;
          if ( !v45 )
            goto LABEL_116;
LABEL_77:
          v8 = &Curl_cstrdup;
          v46 = Curl_cstrdup(v42);
          v13->name = (char *)v46;
          if ( !v46 )
          {
            strtok_r(0u, "\t", &tok_buf);
            v13->value = (char *)Curl_cstrdup(&LC25);
            goto LABEL_79;
          }
          if ( curl_strnequal("__Secure-", v46, 9) )
          {
            v13->prefix |= 1u;
            v42 = strtok_r(0u, "\t", &tok_buf);
            if ( !v42 )
              goto LABEL_290;
          }
          else if ( curl_strnequal(now, v13->name, 7) )
          {
            v13->prefix |= 2u;
            v42 = strtok_r(0u, "\t", &tok_buf);
            if ( !v42 )
              goto LABEL_290;
          }
          else
          {
            v42 = strtok_r(0u, "\t", &tok_buf);
            if ( !v42 )
            {
LABEL_290:
              v125 = Curl_cstrdup(&LC25);
              v13->value = (char *)v125;
              if ( v125 )
                goto LABEL_141;
              goto LABEL_79;
            }
          }
LABEL_222:
          v97 = Curl_cstrdup(v42);
          v13->value = (char *)v97;
          v98 = strtok_r(0u, "\t", &tok_buf);
          v99 = v98 == 0;
          if ( v98 )
            v99 = v97 == 0;
          v39 = v97 == 0;
          if ( v99 )
            goto LABEL_117;
          v50 = 7;
LABEL_226:
          ++v50;
          v42 = strtok_r(0u, "\t", &tok_buf);
          if ( !v42 )
            goto LABEL_79;
          break;
        case 3:
          goto LABEL_62;
        case 4:
          goto LABEL_68;
        case 5:
          goto LABEL_77;
        case 6:
          v8 = &Curl_cstrdup;
          goto LABEL_222;
        default:
          goto LABEL_226;
      }
    }
  }
  if ( strlen(lineptr) > (unsigned int)&loc_1388 )
  {
    v23 = 0;
    Curl_cfree(v13);
    return (Cookie *)v23;
  }
  v150 = 0x7FFFFFFF - (v144 >> 0x1F);
  v147 = 0;
  v149 = v144 >> 31;
  while ( 1 )
  {
    v16 = (unsigned __int8)*v10;
    if ( !*v10 )
      break;
    v14 = v16 == 9;
    if ( v16 != 9 )
      v14 = v16 == 32;
    if ( v14 )
      goto LABEL_11;
    v15 = strcspn(v10, ";\t\r\n=");
    if ( v15 )
      goto LABEL_14;
LABEL_10:
    if ( v16 != 59 )
      goto LABEL_132;
LABEL_11:
    ++v10;
  }
  v15 = strcspn(v10, ";\t\r\n=");
  if ( !v15 )
    goto LABEL_132;
LABEL_14:
  v17 = &v10[v15];
  v18 = &v10[v15];
  while ( 1 )
  {
    v20 = (unsigned __int8)*--v18;
    v19 = v20;
    v21 = v15;
    v22 = v20 == 9;
    if ( v20 != 9 )
      v22 = v19 == 32;
    v23 = v22;
    --v15;
    if ( !v22 )
      break;
    if ( !v15 )
    {
      if ( *v17 == 61 )
      {
LABEL_24:
        v24 = (unsigned __int8 *)(v17 + 1);
        v25 = strcspn(v17 + 1, ";\r\n");
        v26 = (unsigned __int8 *)&v17[v25 + 1];
        v27 = v25;
        v17 += v25 + 1;
        while ( 1 )
        {
          if ( !v27 )
          {
            v23 = (size_t)ca;
            v31 = 0;
            goto LABEL_32;
          }
          v29 = *--v26;
          v28 = v29;
          v30 = v29 == 9;
          if ( v29 != 9 )
            v30 = v28 == 32;
          if ( !v30 )
            break;
          --v27;
        }
        v31 = 0;
        v85 = v24;
        while ( 1 )
        {
          v86 = *v85;
          v24 = v85;
          v87 = v86 == 9;
          if ( v86 != 9 )
            v87 = v86 == 32;
          v23 = v87;
          ++v85;
          if ( !v87 )
            break;
          --v27;
          v24 = v85;
          if ( !v27 )
            goto LABEL_32;
        }
        if ( !memchr(v24, 9, v27) )
        {
          v23 = (size_t)ca;
          v31 = v27 > 0xFFE;
          goto LABEL_32;
        }
        freecookie(v13);
        if ( (*(&v141->set.connect_only + 4) & 0x20) != 0 )
        {
          Curl_infof(v141, "cookie contains TAB, dropping");
          return (Cookie *)v23;
        }
        return 0;
      }
      if ( v13->name )
      {
LABEL_125:
        v10 = v17;
        goto LABEL_126;
      }
LABEL_121:
      freecookie(v13);
      return 0;
    }
  }
  v15 = v21;
  if ( *v17 == 61 )
    goto LABEL_24;
  v31 = v23;
  v24 = (unsigned __int8 *)v23;
  v27 = v23;
LABEL_32:
  if ( v15 > 0xFFE )
    v32 = v31 | 1;
  else
    v32 = v31;
  if ( v32 || v27 + v15 > 0x1000 )
  {
    freecookie(v13);
    if ( (*(&v141->set.connect_only + 4) & 0x20) != 0 )
      Curl_infof(v141, "oversized cookie dropped, name/val %zu + %zu bytes", v15, v27);
    return 0;
  }
  v33 = v15 > 6;
  if ( v16 != 95 )
    v33 = 0;
  if ( v33 && v10[1] == 95 )
  {
    if ( curl_strnequal("__Secure-", v10, 9) )
    {
      v13->prefix |= 1u;
    }
    else if ( curl_strnequal("__Host-", v10, 7) )
    {
      v13->prefix |= 2u;
    }
  }
  if ( !v13->name )
  {
    if ( v23 )
    {
      Curl_cfree(0);
      v100 = Curl_strndup(v10, v15);
      v101 = (void (__fastcall *)(char *))Curl_cfree;
      v13->name = (char *)v100;
      v101(v13->value);
      v102 = (const char *)Curl_strndup(v24, v27);
      name = v13->name;
      v104 = name == 0;
      if ( name )
        v104 = v102 == 0;
      v13->value = (char *)v102;
      if ( !v104 )
      {
        reject = badoctets_0;
        if ( !v102[strcspn(v102, badoctets_0)] && !name[strcspn(name, reject)] )
          goto LABEL_125;
        if ( (*(&v141->set.connect_only + 4) & 0x20) != 0 )
          Curl_infof(v141, "invalid octets in name/value, cookie dropped");
      }
    }
    goto LABEL_121;
  }
  if ( v27 )
  {
    if ( v15 == 4 )
      goto LABEL_195;
  }
  else
  {
    if ( v15 == 6 )
    {
      if ( curl_strnequal("secure", v10, 6) )
      {
        if ( !v143 && domain_0[272] )
          goto LABEL_121;
        v10 = v17;
        v13->secure = 1;
        goto LABEL_126;
      }
      if ( !v23 )
        goto LABEL_125;
      goto LABEL_44;
    }
    if ( v15 == 8 )
    {
      if ( !curl_strnequal("httponly", v10, 8) )
        goto LABEL_125;
      v10 = v17;
      v13->httponly = 1;
      goto LABEL_126;
    }
    if ( !v23 )
      goto LABEL_125;
    if ( v15 == 4 )
    {
LABEL_195:
      if ( !curl_strnequal("path", v10, v15) )
        goto LABEL_125;
      Curl_cfree(v13->path);
      v88 = Curl_strndup(v24, v27);
      v13->path = (char *)v88;
      if ( v88 )
      {
        Curl_cfree(v13->spath);
        v89 = sanitize_cookie_path(v13->path);
        v13->spath = v89;
        if ( v89 )
          goto LABEL_125;
      }
      goto LABEL_121;
    }
  }
  if ( v15 == 6 )
  {
LABEL_44:
    v34 = curl_strnequal("domain", v10, 6);
    v35 = v27 == 0;
    if ( v27 )
      v35 = v34 == 0;
    if ( v35 )
      goto LABEL_125;
    if ( *v24 == 46 )
    {
      --v27;
      ++v24;
    }
    if ( v27 == 9 && curl_strnequal(v24, "localhost", 9) )
      goto LABEL_252;
    v36 = memchr(v24, 46, v27);
    if ( !v36 )
    {
      v38 = (const char *)&LC1;
      now = (time_t)&LC1;
LABEL_56:
      if ( Curl_host_is_ipnum(v38) )
      {
        if ( !strncmp((const char *)v24, v38, v27) && strlen(v38) == v27 )
        {
          Curl_cfree(v13->domain);
          v136 = Curl_strndup(v24, v27);
          v13->domain = (char *)v136;
          if ( v136 )
            goto LABEL_125;
          goto LABEL_121;
        }
      }
      else
      {
        v119 = strlen((const char *)now);
        v120 = v119;
        if ( v27 <= v119 )
        {
          v121 = now + v119 - v27;
          if ( curl_strnequal(v24, v121, v27) )
          {
            if ( v27 == v120 || *(_BYTE *)(v121 - 1) == 46 )
            {
              Curl_cfree(v13->domain);
              v122 = Curl_strndup(v24, v27);
              v13->domain = (char *)v122;
              if ( !v122 )
                goto LABEL_121;
LABEL_255:
              v10 = v17;
              v13->tailmatch = 1;
              goto LABEL_126;
            }
          }
        }
      }
      if ( (*(&v141->set.connect_only + 4) & 0x20) != 0 )
      {
        v147 = 1;
        v10 = v17;
        Curl_infof(v141, "skipped cookie with bad tailmatch domain: %s", (const char *)v24);
      }
      else
      {
        v10 = v17;
        v147 = 1;
      }
      goto LABEL_126;
    }
    if ( v27 - (v36 - v24) > 1 )
    {
LABEL_252:
      v37 = (const char *)now;
      if ( !now )
      {
        is_ipnum = Curl_host_is_ipnum(v24);
        Curl_cfree(v13->domain);
        v107 = Curl_strndup(v24, v27);
        v13->domain = (char *)v107;
        if ( !v107 )
          goto LABEL_121;
        if ( is_ipnum )
          goto LABEL_125;
        goto LABEL_255;
      }
    }
    else
    {
      v37 = (const char *)&LC1;
      now = (time_t)&LC1;
    }
    v38 = v37;
    goto LABEL_56;
  }
  if ( v15 != 7 || curl_strnequal("version", v10, 7) )
    goto LABEL_125;
  if ( !curl_strnequal("max-age", v10, 7) )
  {
    if ( curl_strnequal("expires", v10, 7) )
    {
      v93 = v27 == 127;
      if ( v27 <= 0x7F )
        v93 = v13->expires == 0;
      if ( v93 )
      {
        v94 = memcpy(date, v24, v27);
        *((_BYTE *)&v138 + v27 + 0x54) = 0;
        v95 = Curl_getdate_capped(v94);
        HIDWORD(v96) = v95 >> 31;
        if ( v95 )
        {
          if ( v95 >= 0 )
          {
            LODWORD(v13->expires) = v95;
            HIDWORD(v13->expires) = HIDWORD(v96);
          }
          else
          {
            v96 = 0LL;
          }
          if ( v95 >> 31 == -1 )
            v13->expires = v96;
        }
        else
        {
          v13->expires = 1LL;
        }
      }
    }
    goto LABEL_125;
  }
  if ( *v24 == 34 )
    ++v24;
  v90 = curlx_strtoofft(v24, 0, 10, &v13->expires);
  if ( v90 == 1 )
    goto LABEL_305;
  if ( v90 == 2 )
    goto LABEL_304;
  if ( v90 )
    goto LABEL_125;
  HIDWORD(v91) = v13->expires;
  LODWORD(v91) = HIDWORD(v13->expires);
  if ( !v91 )
  {
LABEL_304:
    v10 = v17;
    v13->expires = 1LL;
    goto LABEL_126;
  }
  if ( __SPAIR64__(v150, ~v144) < __SPAIR64__(v91, HIDWORD(v91)) )
  {
LABEL_305:
    v10 = v17;
    v13->expires = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_126;
  }
  v10 = v17;
  v92 = __CFADD__(HIDWORD(v91), v144);
  LODWORD(v13->expires) = HIDWORD(v91) + v144;
  HIDWORD(v13->expires) = v149 + v92 + (_DWORD)v91;
LABEL_126:
  v16 = (unsigned __int8)*v17;
  if ( *v17 )
  {
    do
    {
      v65 = v16 == 9;
      if ( v16 != 9 )
        v65 = v16 == 32;
      if ( !v65 )
        goto LABEL_10;
      v66 = (unsigned __int8)*++v10;
      v16 = v66;
    }
    while ( v66 );
  }
LABEL_132:
  if ( v147 )
    goto LABEL_121;
  v67 = v13->domain == 0;
  if ( !now )
    v67 = 0;
  if ( v67 )
  {
    v137 = Curl_cstrdup(now);
    v13->domain = (char *)v137;
    if ( !v137 )
      goto LABEL_121;
  }
  v68 = v13->path == 0;
  if ( !s )
    v68 = 0;
  if ( v68 )
  {
    v128 = s;
    v129 = strchr(s, 63);
    v130 = v129 ? (char *)Curl_memrchr(v128, 47, v129 - v128) : strrchr(v128, 47);
    if ( v130 )
    {
      v131 = s;
      v132 = v130 - s;
      v133 = (char *)Curl_cmalloc(v130 - s + 2);
      v134 = v132 + 1;
      v13->path = v133;
      if ( !v133 )
        goto LABEL_121;
      memcpy(v133, v131, v134);
      v13->path[v134] = 0;
      v135 = sanitize_cookie_path(v13->path);
      v13->spath = v135;
      if ( !v135 )
        goto LABEL_121;
    }
  }
  if ( !v13->name )
    goto LABEL_121;
  ++v141->req.setcookies;
LABEL_141:
  prefix = v13->prefix;
  if ( (prefix & 1) != 0 )
  {
LABEL_142:
    v23 = v13->secure;
    if ( v13->secure )
    {
      if ( (prefix & 2) != 0 )
        goto LABEL_144;
      goto LABEL_148;
    }
    goto LABEL_312;
  }
LABEL_119:
  if ( (prefix & 2) != 0 )
  {
    if ( !v13->secure )
      goto LABEL_121;
LABEL_144:
    v69 = v13->path;
    if ( !v69 || *v69 != 47 || v69[1] || v13->tailmatch )
      goto LABEL_121;
  }
LABEL_148:
  v23 = *((unsigned __int8 *)domain_0 + 272);
  if ( !domain_0[272] && domain_0[273] && !v13->expires )
  {
LABEL_312:
    freecookie(v13);
    return (Cookie *)v23;
  }
  v70 = (CookieInfo *)domain_0;
  v14 = !badcookie;
  v71 = *((_DWORD *)domain_0 + 67);
  v13->livecookie = v23;
  v70->lastct = ++v71;
  v13->creationtime = v71;
  if ( v14 )
    remove_expired(v70);
  v72 = cookiehash(v13->domain);
  v73 = *(_DWORD *)&domain_0[4 * v72];
  v74 = v72;
  if ( !v73 )
  {
    if ( domain_0[272] )
    {
      v23 = (size_t)v13;
      if ( (*(&v141->set.connect_only + 4) & 0x20) != 0 )
      {
LABEL_302:
        Curl_infof(
          v141,
          "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
          "Added",
          *(const char **)(v23 + 4),
          *(const char **)(v23 + 8),
          *(const char **)(v23 + 20),
          *(const char **)(v23 + 12),
          *(_QWORD *)(v23 + 0x18));
        if ( v73 )
        {
LABEL_273:
          *(_DWORD *)v73 = v23;
LABEL_274:
          ++*((_DWORD *)domain_0 + 66);
          goto LABEL_275;
        }
      }
    }
    else
    {
      v23 = (size_t)v13;
    }
    *(_DWORD *)&domain_0[4 * v74] = v23;
    goto LABEL_274;
  }
  livecookie = 0;
  v23 = 0;
  v76 = 0;
  while ( 1 )
  {
    if ( !curl_strequal(*(_DWORD *)(v73 + 4), v13->name) )
      goto LABEL_165;
    v77 = *(_DWORD *)(v73 + 20);
    v78 = v13->domain;
    if ( v77 )
    {
      if ( !v78 || !curl_strequal(v77, v78) )
        goto LABEL_165;
    }
    else if ( v78 )
    {
      goto LABEL_165;
    }
    v79 = *(const char **)(v73 + 16);
    if ( v79 )
    {
      spath = v13->spath;
      if ( spath )
      {
        if ( *(_BYTE *)(v73 + 33) && !v143 && !v13->secure )
        {
          v126 = strchr(v79 + 1, 47);
          v127 = v126 ? v126 - v79 : strlen(v79);
          if ( curl_strnequal(v79, spath, v127) )
          {
            if ( (*(&v141->set.connect_only + 4) & 0x20) != 0 )
              Curl_infof(
                v141,
                "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                v13->name,
                v13->domain);
            goto LABEL_121;
          }
        }
      }
    }
LABEL_165:
    if ( v76 || !curl_strequal(*(_DWORD *)(v73 + 4), v13->name) )
      goto LABEL_155;
    v81 = *(_DWORD *)(v73 + 20);
    v82 = v13->domain;
    if ( v81 )
    {
      if ( !v82 || !curl_strequal(v81, v82) || *(unsigned __int8 *)(v73 + 32) != v13->tailmatch )
      {
LABEL_171:
        if ( !livecookie )
          goto LABEL_155;
      }
    }
    else if ( v82 )
    {
      goto LABEL_171;
    }
    v83 = *(_DWORD *)(v73 + 16);
    v84 = v13->spath;
    if ( v83 )
    {
      if ( !v84 )
      {
        v76 = 0;
        livecookie = 0;
        goto LABEL_155;
      }
      if ( !curl_strequal(v83, v84) )
        goto LABEL_279;
      v83 = *(_DWORD *)(v73 + 16);
      v84 = v13->spath;
    }
    if ( (v83 == 0) != (v84 == 0) )
    {
LABEL_279:
      livecookie = 0;
      goto LABEL_155;
    }
    livecookie = v13->livecookie;
    if ( v13->livecookie )
    {
      v23 = v73;
      v76 = v13;
    }
    else
    {
      if ( *(_BYTE *)(v73 + 34) )
        goto LABEL_121;
      v23 = v73;
      v76 = v13;
      livecookie = 1;
    }
LABEL_155:
    if ( !*(_DWORD *)v73 )
      break;
    v73 = *(_DWORD *)v73;
  }
  if ( v76 )
  {
    v76->next = *(Cookie **)v23;
    v108 = *(Cookie **)(v23 + 4);
    v76->creationtime = *(_DWORD *)(v23 + 36);
    Curl_cfree(v108);
    Curl_cfree(*(_DWORD *)(v23 + 8));
    Curl_cfree(*(_DWORD *)(v23 + 20));
    Curl_cfree(*(_DWORD *)(v23 + 12));
    Curl_cfree(*(_DWORD *)(v23 + 16));
    v109 = (Cookie *)v76->name;
    value = (Cookie *)v76->value;
    v111 = (Cookie *)v76->path;
    v112 = (void (__fastcall *)(Cookie *))Curl_cfree;
    *(_DWORD *)v23 = v76->next;
    *(_DWORD *)(v23 + 4) = v109;
    *(_DWORD *)(v23 + 8) = value;
    *(_DWORD *)(v23 + 12) = v111;
    v113 = (Cookie *)v76->domain;
    expires = (Cookie *)v76->expires;
    expires_high = (Cookie *)HIDWORD(v76->expires);
    *(_DWORD *)(v23 + 16) = v76->spath;
    *(_DWORD *)(v23 + 20) = v113;
    *(_DWORD *)(v23 + 24) = expires;
    *(_DWORD *)(v23 + 28) = expires_high;
    creationtime = (Cookie *)v76->creationtime;
    v117 = *(Cookie **)&v76->prefix;
    v118 = (Cookie *)*((_DWORD *)&v76->prefix + 1);
    *(_DWORD *)(v23 + 32) = *(_DWORD *)&v76->tailmatch;
    *(_DWORD *)(v23 + 36) = creationtime;
    *(_DWORD *)(v23 + 40) = v117;
    *(_DWORD *)(v23 + 44) = v118;
    v112(v76);
  }
  else
  {
    v23 = (size_t)v13;
  }
  if ( !domain_0[272] || (*(&v141->set.connect_only + 4) & 0x20) == 0 )
  {
    if ( livecookie )
      goto LABEL_275;
    goto LABEL_273;
  }
  if ( !livecookie )
    goto LABEL_302;
  Curl_infof(
    v141,
    "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld",
    "Replaced",
    *(const char **)(v23 + 4),
    *(const char **)(v23 + 8),
    *(const char **)(v23 + 20),
    *(const char **)(v23 + 12),
    *(_QWORD *)(v23 + 0x18));
LABEL_275:
  v123 = *(_QWORD *)(v23 + 0x18);
  if ( v123 )
  {
    v124 = domain_0;
    if ( v123 < *((_QWORD *)domain_0 + 32) )
    {
      *((_DWORD *)domain_0 + 64) = v123;
      *((_DWORD *)v124 + 65) = HIDWORD(v123);
    }
  }
  return (Cookie *)v23;
}
