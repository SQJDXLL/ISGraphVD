Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  _BOOL4 v9; // w25
  Cookie *v11; // x19
  int v12; // w24
  size_t v14; // x28
  int v15; // t1
  const char *v17; // x23
  unsigned __int64 v18; // x2
  _BOOL4 v19; // w7
  char *name; // x22
  size_t v21; // x26
  const char *v22; // x20
  int v23; // w0
  char *v25; // x0
  char *v26; // x0
  char *v27; // x1
  int v28; // w28
  char *v29; // x0
  __int64 v30; // x0
  _BOOL4 v31; // w27
  int v32; // w20
  bool v33; // zf
  int v34; // w0
  int v35; // w0
  bool v37; // cc
  bool v38; // zf
  char *v41; // x0
  int lastct; // w0
  size_t v43; // x27
  Cookie *v44; // x20
  char livecookie; // w25
  Cookie *v46; // x24
  Cookie *v47; // x21
  char *v48; // x0
  char *v49; // x1
  const char *spath; // x28
  char *v51; // x26
  Cookie *next; // x1
  _BYTE *v53; // x0
  char is_ipnum; // w23
  __int64 v55; // x0
  size_t v56; // x0
  size_t v57; // x27
  const char *v58; // x24
  int v59; // w0
  char *v60; // x1
  __int64 v61; // x0
  __int64 v62; // x0
  const char *v63; // x20
  char *value; // x22
  __int64 v65; // x0
  char *v66; // x0
  char *v68; // x0
  __int64 v69; // x0
  bool v70; // zf
  int v71; // w0
  char *v72; // x0
  size_t v73; // x2
  char *v74; // x0
  char *v75; // x1
  char *v76; // x0
  char *v77; // x1
  char *v78; // x0
  void (__fastcall *v79)(char *); // x1
  __int128 v80; // q1
  void (__fastcall *v81)(Cookie *); // x1
  __int128 v82; // q1
  int v83; // w25
  const char *v84; // x2
  curl_off_t v85; // x0
  __int64 v86; // x0
  __int64 v87; // x0
  __int64 v88; // x0
  __int64 v89; // x0
  int v90; // w0
  __int64 (__fastcall *v91)(const char *); // x27
  const char *v92; // x1
  int v93; // w0
  __int64 v94; // x0
  __int64 (__fastcall *v95)(void *); // x3
  __int64 v96; // x20
  __int64 v97; // x0
  int v98; // w0
  __int64 (__fastcall *v99)(const char *); // x27
  const char *v100; // x1
  int v101; // w0
  const char *v102; // x0
  char *v103; // x0
  __int64 v104; // x0
  __int64 (__fastcall *v105)(void *); // x3
  __int64 v106; // x20
  __int64 v107; // x0
  __int64 v108; // x0
  char *v109; // x0
  int v110; // w0
  curl_off_t expires; // x0
  const char *v112; // x0
  char *v113; // x0
  __int64 v114; // x0
  int v115; // w0
  char *v116; // x1
  __int64 v118; // x0
  bool v119; // zf
  char *v120; // x0
  char *v121; // x0
  signed __int64 v122; // x0
  size_t v123; // x20
  char *v124; // x0
  char *v125; // x0
  bool v126; // zf
  _BOOL4 securea; // [xsp+68h] [xbp+68h]
  const char *domainb; // [xsp+78h] [xbp+78h]
  const char *domainc; // [xsp+78h] [xbp+78h]
  const char *domaind; // [xsp+78h] [xbp+78h]
  const char *domaine; // [xsp+78h] [xbp+78h]
  time_t now; // [xsp+90h] [xbp+90h]
  bool badcookie; // [xsp+A0h] [xbp+A0h]
  bool v139; // [xsp+BCh] [xbp+BCh]
  bool v140; // [xsp+BCh] [xbp+BCh]
  char *tok_buf; // [xsp+C0h] [xbp+C0h] BYREF
  char date[128]; // [xsp+C8h] [xbp+C8h] BYREF

  v9 = httpheader;
  securea = secure;
  now = time(0uLL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  v11 = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !v11 )
    return 0LL;
  if ( !v9 )
  {
    tok_buf = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 0xA;
      v11->httponly = 1;
    }
    if ( *lineptr == 35 )
      goto LABEL_298;
    v25 = strchr(lineptr, 13);
    if ( v25 )
      *v25 = 0;
    v26 = strchr(lineptr, 10);
    if ( v26 )
      *v26 = 0;
    v27 = strtok_r((char *)lineptr, "\t", &tok_buf);
    if ( !v27 )
      goto LABEL_178;
    if ( !securea )
    {
      v28 = 0;
      while ( 1 )
      {
        if ( v28 == 3 )
        {
          v11->secure = 0;
          v31 = securea;
          if ( (unsigned int)curl_strequal(v27, "TRUE") )
            goto LABEL_264;
LABEL_261:
          v32 = !v31;
          v28 = 4;
          goto LABEL_49;
        }
        if ( v28 <= 3 )
          break;
        switch ( v28 )
        {
          case 5:
            v89 = Curl_cstrdup(v27);
            v11->name = (char *)v89;
            if ( !v89 )
              goto LABEL_273;
            if ( (unsigned int)curl_strnequal("__Secure-", v89, 9LL) )
            {
              v11->prefix |= 1u;
            }
            else if ( (unsigned int)curl_strnequal("__Host-", v11->name, 7LL) )
            {
              v11->prefix |= 2u;
            }
            LOBYTE(v31) = securea;
            v28 = 6;
            v32 = 1;
            break;
          case 6:
            v28 = 7;
            v88 = Curl_cstrdup(v27);
            LOBYTE(v31) = v88 == 0;
            v32 = v88 != 0;
            v11->value = (char *)v88;
            break;
          case 4:
            v34 = curlx_strtoofft(v27, 0LL, 10LL, &v11->expires);
            LOBYTE(v31) = v34 != 0;
            v32 = v34 == 0;
            v28 = 5;
            break;
          default:
            goto LABEL_256;
        }
LABEL_49:
        v27 = strtok_r(0uLL, "\t", &tok_buf);
        if ( v27 )
          v33 = v32 == 0;
        else
          v33 = 1;
        if ( v33 )
          goto LABEL_362;
      }
      switch ( v28 )
      {
        case 1:
          LOBYTE(v31) = securea;
          v28 = 2;
          v32 = 1;
          v11->tailmatch = (unsigned int)curl_strequal(v27, "TRUE") != 0;
          goto LABEL_49;
        case 2:
          domainb = v27;
          v90 = strcmp("TRUE", v27);
          v91 = (__int64 (__fastcall *)(const char *))Curl_cstrdup;
          v92 = domainb;
          if ( v90 )
          {
            v93 = strcmp("FALSE", domainb);
            v92 = domainb;
            if ( v93 )
            {
              v112 = (const char *)v91(domainb);
              v11->path = (char *)v112;
              if ( !v112 )
                goto LABEL_287;
              v113 = sanitize_cookie_path(v112);
              LOBYTE(v31) = v113 == 0LL;
              v32 = v113 != 0LL;
              v28 = 3;
              v11->spath = v113;
              goto LABEL_49;
            }
          }
          domainc = v92;
          v94 = v91(byte_2990);
          v95 = (__int64 (__fastcall *)(void *))Curl_cstrdup;
          v11->path = (char *)v94;
          v96 = v94;
          v97 = v95(byte_2990);
          v11->spath = (char *)v97;
          if ( !v97 )
          {
            v11->secure = 0;
            if ( !(unsigned int)curl_strequal(domainc, "TRUE") )
              goto LABEL_287;
            v31 = 1;
LABEL_264:
            if ( !c->running )
              goto LABEL_287;
            v32 = !v31;
            v28 = 4;
            v11->secure = 1;
            goto LABEL_49;
          }
          v11->secure = 0;
          v31 = v96 == 0;
          if ( (unsigned int)curl_strequal(domainc, "TRUE") )
            goto LABEL_264;
          goto LABEL_261;
        case 0:
          v28 = 1;
          if ( *v27 == 46 )
            v29 = v27 + 1;
          else
            v29 = v27;
          v30 = Curl_cstrdup(v29);
          LOBYTE(v31) = v30 == 0;
          v32 = v30 != 0;
          v11->domain = (char *)v30;
          goto LABEL_49;
      }
LABEL_256:
      LOBYTE(v31) = securea;
      ++v28;
      v32 = 1;
      goto LABEL_49;
    }
    v28 = 0;
    while ( v28 != 3 )
    {
      if ( v28 <= 3 )
      {
        if ( v28 == 1 )
        {
          v32 = securea;
          LOBYTE(v31) = v9;
          v28 = 2;
          v11->tailmatch = (unsigned int)curl_strequal(v27, "TRUE") != 0;
          goto LABEL_192;
        }
        if ( v28 != 2 )
        {
          if ( !v28 )
          {
            v28 = 1;
            if ( *v27 == 46 )
              v68 = v27 + 1;
            else
              v68 = v27;
            v69 = Curl_cstrdup(v68);
            LOBYTE(v31) = v69 == 0;
            v32 = v69 != 0;
            v11->domain = (char *)v69;
            goto LABEL_192;
          }
LABEL_255:
          v32 = securea;
          ++v28;
          LOBYTE(v31) = v9;
          goto LABEL_192;
        }
        domaind = v27;
        v98 = strcmp("TRUE", v27);
        v99 = (__int64 (__fastcall *)(const char *))Curl_cstrdup;
        v100 = domaind;
        if ( v98 )
        {
          v101 = strcmp("FALSE", domaind);
          v100 = domaind;
          if ( v101 )
          {
            v102 = (const char *)v99(domaind);
            v11->path = (char *)v102;
            if ( !v102 )
              goto LABEL_287;
            v103 = sanitize_cookie_path(v102);
            LOBYTE(v31) = v103 == 0LL;
            v32 = v103 != 0LL;
            v28 = 3;
            v11->spath = v103;
            goto LABEL_192;
          }
        }
        domaine = v100;
        v104 = v99(byte_2990);
        v105 = (__int64 (__fastcall *)(void *))Curl_cstrdup;
        v11->path = (char *)v104;
        v106 = v104;
        v107 = v105(byte_2990);
        v11->spath = (char *)v107;
        v27 = (char *)domaine;
        if ( !v107 )
        {
          v11->secure = 0;
          if ( !(unsigned int)curl_strequal(domaine, "TRUE") )
          {
LABEL_287:
            strtok_r(0uLL, "\t", &tok_buf);
            freecookie(v11);
            return 0LL;
          }
          v31 = securea;
LABEL_286:
          v32 = !v31;
          v28 = 4;
          v11->secure = 1;
          goto LABEL_192;
        }
        v31 = v106 == 0;
        goto LABEL_253;
      }
      switch ( v28 )
      {
        case 5:
          v87 = Curl_cstrdup(v27);
          v11->name = (char *)v87;
          if ( !v87 )
          {
LABEL_273:
            LOBYTE(v31) = 1;
            strtok_r(0uLL, "\t", &tok_buf);
            goto LABEL_274;
          }
          if ( (unsigned int)curl_strnequal("__Secure-", v87, 9LL) )
          {
            v11->prefix |= 1u;
          }
          else if ( (unsigned int)curl_strnequal("__Host-", v11->name, 7LL) )
          {
            v11->prefix |= 2u;
          }
          v32 = securea;
          LOBYTE(v31) = v9;
          v28 = 6;
          break;
        case 6:
          v28 = 7;
          v86 = Curl_cstrdup(v27);
          LOBYTE(v31) = v86 == 0;
          v32 = v86 != 0;
          v11->value = (char *)v86;
          break;
        case 4:
          v71 = curlx_strtoofft(v27, 0LL, 10LL, &v11->expires);
          LOBYTE(v31) = v71 != 0;
          v32 = v71 == 0;
          v28 = 5;
          break;
        default:
          goto LABEL_255;
      }
LABEL_192:
      v27 = strtok_r(0uLL, "\t", &tok_buf);
      if ( v27 )
        v70 = v32 == 0;
      else
        v70 = 1;
      if ( v70 )
      {
LABEL_362:
        if ( v28 != 6 )
        {
          if ( v32 )
            v126 = v28 == 7;
          else
            v126 = 1;
          if ( !v126 || v31 )
            goto LABEL_178;
          goto LABEL_93;
        }
LABEL_274:
        v108 = Curl_cstrdup(&unk_2B10);
        v11->value = (char *)v108;
        if ( !v108 || v31 )
          goto LABEL_178;
        goto LABEL_93;
      }
    }
    v31 = v9;
LABEL_253:
    v11->secure = 0;
    if ( (unsigned int)curl_strequal(v27, "TRUE") )
      goto LABEL_286;
    v32 = !v31;
    v28 = 4;
    goto LABEL_192;
  }
  badcookie = 0;
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_298:
    Curl_cfree(v11);
    return 0LL;
  }
  v12 = *(unsigned __int8 *)lineptr;
  if ( *lineptr )
    goto LABEL_6;
LABEL_19:
  v14 = strcspn(lineptr, ";\t\r\n=");
  if ( !v14 )
    goto LABEL_80;
  while ( 1 )
  {
    v17 = &lineptr[v14];
    while ( 1 )
    {
      v18 = v14--;
      v19 = lineptr[v14] == 32 || lineptr[v14] == 9;
      if ( !v19 )
        break;
      if ( !v14 )
      {
        if ( *v17 == 61 )
          goto LABEL_24;
        name = v11->name;
        if ( name )
        {
          LOBYTE(v19) = 0;
          name = 0LL;
          goto LABEL_155;
        }
        v21 = 0LL;
        LOBYTE(v19) = 0;
LABEL_162:
        if ( v19 )
        {
          Curl_cfree(0LL);
          v61 = Curl_memdup(lineptr, v14 + 1);
          v11->name = (char *)v61;
          if ( v61 )
            *(_BYTE *)(v61 + v14) = 0;
          Curl_cfree(v11->value);
          v62 = Curl_memdup(name, v21 + 1);
          v11->value = (char *)v62;
          if ( v62 )
            *(_BYTE *)(v62 + v21) = 0;
          v63 = v11->name;
          if ( v63 )
          {
            value = v11->value;
            if ( value )
            {
              if ( !value[strcspn(v11->value, badoctets_0)] && !v63[strcspn(v63, badoctets_0)] )
                goto LABEL_171;
              if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
                Curl_infof(data, "invalid octets in name/value, cookie dropped");
            }
          }
        }
LABEL_178:
        freecookie(v11);
        return 0LL;
      }
    }
    v14 = v18;
    if ( *v17 != 61 )
      break;
LABEL_24:
    name = (char *)(v17 + 1);
    v21 = strcspn(v17 + 1, ";\r\n");
    v22 = &v17[v21 + 1];
    if ( v21 )
    {
      while ( 1 )
      {
        v23 = (unsigned __int8)v17[v21];
        if ( v23 != 32 && v23 != 9 )
          break;
        if ( !--v21 )
          goto LABEL_288;
      }
      while ( 1 )
      {
        v35 = (unsigned __int8)*name;
        if ( v35 != 32 && v35 != 9 )
          break;
        ++name;
        if ( !--v21 )
          goto LABEL_65;
      }
      if ( memchr(name, 9, v21) )
      {
        freecookie(v11);
        if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
          Curl_infof(data, "cookie contains TAB, dropping");
        return 0LL;
      }
LABEL_65:
      v37 = v14 > 0xFFE || v21 > 0xFFE;
      if ( v37 || v21 + v14 > 0x1000 )
        goto LABEL_293;
      LOBYTE(v19) = v9;
    }
    else
    {
LABEL_288:
      if ( v14 > 0xFFE )
      {
LABEL_292:
        v21 = 0LL;
LABEL_293:
        freecookie(v11);
        if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
          Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v14, v21);
        return 0LL;
      }
      LOBYTE(v19) = v9;
      v21 = 0LL;
    }
    v38 = v14 == 6;
    if ( v14 > 6 )
      goto LABEL_72;
LABEL_124:
    if ( !v11->name )
      goto LABEL_161;
    if ( !v21 )
    {
      v17 = v22;
      if ( v38 )
      {
        v140 = v19;
        if ( !(unsigned int)curl_strnequal("secure", lineptr, v14) )
        {
          if ( v140 )
            curl_strnequal("domain", lineptr, v14);
          goto LABEL_119;
        }
        if ( !securea && c->running )
          goto LABEL_178;
        v11->secure = 1;
        lineptr = v22;
        v12 = *(unsigned __int8 *)v22;
        if ( *v22 )
          goto LABEL_13;
      }
      else
      {
LABEL_155:
        if ( v19 )
        {
          if ( v14 != 4 )
          {
            lineptr = v17;
            v12 = *(unsigned __int8 *)v17;
            goto LABEL_79;
          }
          v22 = v17;
          v21 = 0LL;
LABEL_174:
          if ( (unsigned int)curl_strnequal("path", lineptr, 4LL) )
          {
            Curl_cfree(v11->path);
            v65 = Curl_memdup(name, v21 + 1);
            v11->path = (char *)v65;
            if ( !v65 )
              goto LABEL_178;
            *(_BYTE *)(v65 + v21) = 0;
            if ( !v11->path )
              goto LABEL_178;
            Curl_cfree(v11->spath);
            v66 = sanitize_cookie_path(v11->path);
            v11->spath = v66;
            if ( !v66 )
              goto LABEL_178;
          }
LABEL_119:
          v12 = *(unsigned __int8 *)v22;
          lineptr = v22;
          if ( *v22 )
            goto LABEL_13;
        }
        else
        {
LABEL_171:
          v12 = *(unsigned __int8 *)v17;
          lineptr = v17;
          if ( *v17 )
            goto LABEL_13;
        }
      }
      goto LABEL_80;
    }
    if ( v14 == 4 )
      goto LABEL_174;
    if ( v14 != 6 )
      goto LABEL_78;
    if ( !(unsigned int)curl_strnequal("domain", lineptr, 6LL) )
      goto LABEL_119;
    if ( *name == 46 )
    {
      ++name;
      --v21;
    }
    if ( v21 == 9 && (unsigned int)curl_strnequal(name, "localhost", 9LL)
      || (v53 = memchr(name, 46, v21)) != 0LL && v21 - (v53 - name) > 1 )
    {
      if ( !domain )
      {
        is_ipnum = Curl_host_is_ipnum(name);
LABEL_137:
        Curl_cfree(v11->domain);
        v55 = Curl_memdup(name, v21 + 1);
        v11->domain = (char *)v55;
        if ( !v55 )
          goto LABEL_178;
        *(_BYTE *)(v55 + v21) = 0;
        if ( !v11->domain )
          goto LABEL_178;
        if ( (is_ipnum & 1) != 0 )
          goto LABEL_119;
        v11->tailmatch = 1;
        lineptr = v22;
        v12 = *(unsigned __int8 *)v22;
        if ( *v22 )
          goto LABEL_13;
        goto LABEL_80;
      }
      is_ipnum = Curl_host_is_ipnum(domain);
      if ( (is_ipnum & 1) != 0 )
      {
LABEL_135:
        if ( !strncmp(name, domain, v21) && strlen(domain) == v21 )
          goto LABEL_137;
        goto LABEL_149;
      }
    }
    else
    {
      domain = (const char *)&unk_2998;
      is_ipnum = Curl_host_is_ipnum(&unk_2998);
      if ( (is_ipnum & 1) != 0 )
        goto LABEL_135;
    }
    v56 = strlen(domain);
    v57 = v56;
    if ( v21 <= v56 )
    {
      v58 = &domain[v56 - v21];
      if ( (unsigned int)curl_strnequal(name, v58, v21) )
      {
        if ( v21 == v57 || *(v58 - 1) == 46 )
          goto LABEL_137;
      }
    }
LABEL_149:
    if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
      Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", name);
    v12 = *(unsigned __int8 *)v22;
    lineptr = v22;
    badcookie = v9;
    if ( !*v22 )
      goto LABEL_80;
LABEL_13:
    while ( 2 )
    {
      while ( v12 == 32 || v12 == 9 )
      {
        v15 = *(unsigned __int8 *)++lineptr;
        v12 = v15;
        if ( !v15 )
          goto LABEL_80;
      }
      if ( v12 != 59 )
        goto LABEL_80;
      do
      {
        v12 = *(unsigned __int8 *)++lineptr;
        if ( !v12 )
          goto LABEL_19;
LABEL_6:
        ;
      }
      while ( v12 == 32 || v12 == 9 );
      v14 = strcspn(lineptr, ";\t\r\n=");
      if ( !v14 )
        continue;
      break;
    }
  }
  if ( v18 > 0xFFE )
    goto LABEL_292;
  v22 = v17;
  v38 = v18 == 6;
  name = 0LL;
  v21 = 0LL;
  if ( v18 <= 6 )
    goto LABEL_124;
LABEL_72:
  if ( v12 == 95 && lineptr[1] == 95 )
  {
    v139 = v19;
    v59 = curl_strnequal("__Secure-", lineptr, 9LL);
    LOBYTE(v19) = v139;
    if ( v59 )
    {
      v60 = v11->name;
      v11->prefix |= 1u;
      if ( !v60 )
        goto LABEL_161;
      goto LABEL_74;
    }
    v115 = curl_strnequal("__Host-", lineptr, 7LL);
    LOBYTE(v19) = v139;
    if ( v115 )
    {
      v116 = v11->name;
      v11->prefix |= 2u;
      if ( !v116 )
      {
        v17 = v22;
        goto LABEL_162;
      }
      goto LABEL_74;
    }
  }
  if ( !v11->name )
  {
LABEL_161:
    v17 = v22;
    goto LABEL_162;
  }
LABEL_74:
  if ( !v21 )
  {
    if ( v14 == 8 )
    {
      if ( !(unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
        goto LABEL_119;
      v11->httponly = 1;
      lineptr = v22;
      v12 = *(unsigned __int8 *)v22;
      if ( *v22 )
        goto LABEL_13;
      goto LABEL_80;
    }
    if ( !v19 )
      goto LABEL_119;
  }
  if ( v14 == 7 )
  {
    if ( (unsigned int)curl_strnequal("version", lineptr, 7LL) )
      goto LABEL_119;
    if ( !(unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
    {
      if ( (unsigned int)curl_strnequal("expires", lineptr, 7LL) )
      {
        if ( v21 <= 0x7F && v11->expires == 0 )
        {
          *((_BYTE *)memcpy(date, name, v21) + v21) = 0;
          v118 = Curl_getdate_capped();
          v119 = v118 == 0;
          if ( v118 < 0 )
            v118 = 0LL;
          if ( v119 )
            v118 = 1LL;
          v11->expires = v118;
        }
      }
      goto LABEL_119;
    }
    if ( *name == 34 )
      v109 = name + 1;
    else
      v109 = name;
    v110 = curlx_strtoofft(v109, 0LL, 10LL, &v11->expires);
    if ( v110 == 1 )
    {
      v11->expires = 0x7FFFFFFFFFFFFFFFLL;
      lineptr = v22;
      v12 = *(unsigned __int8 *)v22;
      if ( *v22 )
        goto LABEL_13;
    }
    else
    {
      if ( v110 == 2 )
        goto LABEL_354;
      if ( v110 )
        goto LABEL_119;
      expires = v11->expires;
      if ( !expires )
      {
LABEL_354:
        v11->expires = 1LL;
        lineptr = v22;
        v12 = *(unsigned __int8 *)v22;
        if ( *v22 )
          goto LABEL_13;
      }
      else if ( expires <= 0x7FFFFFFFFFFFFFFFLL - now )
      {
        lineptr = v22;
        v11->expires = expires + now;
        v12 = *(unsigned __int8 *)v22;
        if ( *v22 )
          goto LABEL_13;
      }
      else
      {
        v11->expires = 0x7FFFFFFFFFFFFFFFLL;
        lineptr = v22;
        v12 = *(unsigned __int8 *)v22;
        if ( *v22 )
          goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_78:
    lineptr = v22;
    v12 = *(unsigned __int8 *)v22;
LABEL_79:
    if ( v12 )
      goto LABEL_13;
  }
LABEL_80:
  if ( badcookie )
    goto LABEL_178;
  if ( !v11->domain && domain != 0LL )
  {
    v114 = Curl_cstrdup(domain);
    v11->domain = (char *)v114;
    if ( !v114 )
      goto LABEL_178;
  }
  if ( !v11->path && path != 0LL )
  {
    v120 = strchr(path, 63);
    v121 = v120 ? (char *)Curl_memrchr(path, 47LL, v120 - path) : strrchr(path, 47);
    if ( v121 )
    {
      v122 = v121 - path;
      v123 = v122 + 1;
      v124 = (char *)Curl_cmalloc(v122 + 2);
      v11->path = v124;
      if ( !v124 )
        goto LABEL_178;
      memcpy(v124, path, v123);
      v11->path[v123] = 0;
      v125 = sanitize_cookie_path(v11->path);
      v11->spath = v125;
      if ( !v125 )
        goto LABEL_178;
    }
  }
  if ( !v11->name )
    goto LABEL_178;
  ++data->req.setcookies;
LABEL_93:
  if ( (v11->prefix & 1) != 0 )
  {
    if ( !v11->secure )
      goto LABEL_178;
    if ( (v11->prefix & 2) != 0 )
    {
LABEL_96:
      v41 = v11->path;
      if ( !v41 || *v41 != 47 || v41[1] || v11->tailmatch )
        goto LABEL_178;
    }
  }
  else if ( (v11->prefix & 2) != 0 )
  {
    if ( !v11->secure )
      goto LABEL_178;
    goto LABEL_96;
  }
  if ( !c->running && c->newsession && !v11->expires )
    goto LABEL_178;
  lastct = c->lastct;
  v11->livecookie = c->running;
  c->lastct = ++lastct;
  v11->creationtime = lastct;
  if ( !noexpire )
    remove_expired(c);
  v43 = cookiehash(v11->domain);
  v44 = c->cookies[v43];
  if ( !v44 )
  {
    v46 = v11;
    if ( c->running && (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
    {
      v84 = "Added";
      v83 = 0;
      goto LABEL_229;
    }
    goto LABEL_317;
  }
  livecookie = 0;
  v46 = 0LL;
  v47 = 0LL;
  while ( 1 )
  {
    if ( !(unsigned int)curl_strequal(v44->name, v11->name) )
      goto LABEL_115;
    v48 = v44->domain;
    v49 = v11->domain;
    if ( v48 )
    {
      if ( !v49 || !(unsigned int)curl_strequal(v48, v49) )
        goto LABEL_115;
    }
    else if ( v49 )
    {
      goto LABEL_115;
    }
    spath = v44->spath;
    if ( spath )
    {
      v51 = v11->spath;
      if ( v51 )
      {
        if ( v44->secure && !v11->secure && !securea )
        {
          v72 = strchr(spath + 1, 47);
          v73 = v72 ? v72 - spath : strlen(spath);
          if ( (unsigned int)curl_strnequal(spath, v51, v73) )
          {
            if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
              Curl_infof(
                data,
                "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                v11->name,
                v11->domain);
            goto LABEL_178;
          }
        }
      }
    }
LABEL_115:
    if ( v47 || !(unsigned int)curl_strequal(v44->name, v11->name) )
      goto LABEL_116;
    v74 = v44->domain;
    v75 = v11->domain;
    if ( !v74 )
    {
      if ( v75 && (livecookie & 1) == 0 )
        break;
      goto LABEL_214;
    }
    if ( (!v75 || !(unsigned int)curl_strequal(v74, v75) || v44->tailmatch != v11->tailmatch) && (livecookie & 1) == 0 )
      break;
LABEL_214:
    v76 = v44->spath;
    v77 = v11->spath;
    if ( v76 )
    {
      if ( !v77 || !(unsigned int)curl_strequal(v76, v77) )
        break;
      v77 = v11->spath;
      v76 = v44->spath;
    }
    if ( (v76 == 0LL) != (v77 == 0LL) )
      break;
    livecookie = v11->livecookie;
    if ( (livecookie & 1) != 0 )
    {
      v46 = v44;
      v47 = v11;
    }
    else
    {
      if ( v44->livecookie )
        goto LABEL_178;
      v46 = v44;
      v47 = v11;
      livecookie = 1;
    }
LABEL_116:
    next = v44->next;
    if ( !v44->next )
      goto LABEL_223;
LABEL_117:
    v44 = next;
  }
  next = v44->next;
  livecookie = 0;
  if ( v44->next )
    goto LABEL_117;
LABEL_223:
  if ( v47 )
  {
    v78 = v46->name;
    v79 = (void (__fastcall *)(char *))Curl_cfree;
    v47->next = v46->next;
    v47->creationtime = v46->creationtime;
    v79(v78);
    Curl_cfree(v46->value);
    Curl_cfree(v46->domain);
    Curl_cfree(v46->path);
    Curl_cfree(v46->spath);
    v80 = *(_OWORD *)&v47->value;
    v81 = (void (__fastcall *)(Cookie *))Curl_cfree;
    *(_OWORD *)&v46->next = *(_OWORD *)&v47->next;
    *(_OWORD *)&v46->value = v80;
    v82 = *(_OWORD *)&v47->expires;
    *(_OWORD *)&v46->spath = *(_OWORD *)&v47->spath;
    *(_OWORD *)&v46->expires = v82;
    *(_QWORD *)&v46->prefix = *(_QWORD *)&v47->prefix;
    v81(v47);
  }
  else
  {
    v46 = v11;
  }
  if ( !c->running || (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) == 0 )
  {
    if ( (livecookie & 1) != 0 )
      goto LABEL_230;
    goto LABEL_237;
  }
  v83 = livecookie & 1;
  v84 = "Added";
  if ( v83 )
    v84 = "Replaced";
LABEL_229:
  Curl_infof(
    data,
    "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
    v84,
    v46->name,
    v46->value,
    v46->domain,
    v46->path,
    v46->expires);
  if ( !v83 )
  {
    if ( !v44 )
    {
LABEL_317:
      c->cookies[v43] = v46;
      goto LABEL_238;
    }
LABEL_237:
    v44->next = v46;
LABEL_238:
    ++c->numcookies;
  }
LABEL_230:
  v85 = v46->expires;
  if ( v85 && v85 < c->next_expiration )
    c->next_expiration = v85;
  return v46;
}
