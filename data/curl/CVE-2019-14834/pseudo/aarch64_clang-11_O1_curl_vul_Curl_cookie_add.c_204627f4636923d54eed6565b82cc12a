Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        char *domain,
        char *path,
        bool secure)
{
  time_t v16; // x0
  unsigned int setcookies; // w8
  Cookie *v18; // x23
  __int64 v19; // x0
  Cookie *v20; // x21
  char *i; // x27
  int v22; // w25
  size_t v23; // x0
  size_t v24; // x26
  char *v25; // x22
  size_t v26; // x28
  int v27; // w8
  const char *v28; // x24
  size_t v29; // x19
  char *j; // x8
  int v31; // w9
  const char *v32; // x26
  int v33; // w8
  int v34; // w8
  int v35; // w24
  unsigned __int8 v36; // w8
  char *v37; // x0
  const char *v38; // x19
  int v39; // w0
  const char *v40; // x24
  size_t v41; // x19
  const char *v42; // x25
  const char *v43; // x0
  char is_ipnum; // w26
  const char *v45; // x0
  int v46; // w0
  int v47; // w8
  bool v48; // zf
  __int64 v49; // x0
  curl_off_t v50; // x8
  char *v51; // x0
  char *v52; // x0
  char *v53; // x0
  const char *v54; // x28
  int v55; // w25
  int v56; // w27
  const char *v57; // x0
  char *v58; // x0
  const char *v59; // x0
  _BOOL4 v60; // w8
  __int64 v61; // x0
  __int64 v62; // x0
  int v63; // w27
  __int64 v64; // x0
  char *v65; // x0
  char v66; // w23
  char *v67; // x22
  __int64 v68; // x0
  __int64 v69; // x0
  char *v70; // x0
  char *v71; // x0
  signed __int64 v72; // x19
  char *v73; // x0
  size_t v74; // x19
  char *v75; // x0
  int v76; // w8
  Cookie **v77; // x25
  Cookie *next; // x8
  CookieInfo *v79; // x28
  Cookie *v80; // x19
  int v81; // w26
  Cookie *v82; // x27
  char *v83; // x0
  char *v84; // x1
  const char *spath; // x22
  char *v86; // x24
  char *v87; // x0
  size_t v88; // x2
  char *v89; // x0
  char *v90; // x1
  bool v91; // zf
  int v92; // w8
  char *v93; // x0
  char *v94; // x1
  const char *v95; // x0
  __int128 v97; // q0
  __int128 v98; // q1
  __int128 v99; // q2
  const char *v100; // x2
  Cookie **p_next; // x8
  curl_off_t expires; // x8
  curl_off_t v103; // [xsp+0h] [xbp-F0h]
  curl_off_t *v104; // [xsp+8h] [xbp-E8h]
  char **p_domain; // [xsp+10h] [xbp-E0h]
  char **str; // [xsp+18h] [xbp-D8h]
  char *s; // [xsp+20h] [xbp-D0h]
  char **p_value; // [xsp+28h] [xbp-C8h]
  bool v109; // [xsp+30h] [xbp-C0h]
  bool v110; // [xsp+30h] [xbp-C0h]
  char v111; // [xsp+34h] [xbp-BCh]
  CookieInfo *cookies; // [xsp+38h] [xbp-B8h]
  bool v113; // [xsp+44h] [xbp-ACh]
  bool v114; // [xsp+44h] [xbp-ACh]
  char *s2; // [xsp+48h] [xbp-A8h]
  char **p_name; // [xsp+50h] [xbp-A0h]
  time_t p_expires; // [xsp+60h] [xbp-90h]
  char *dest[17]; // [xsp+68h] [xbp-88h] BYREF

  v16 = time(0uLL);
  setcookies = data->req.setcookies;
  v18 = 0LL;
  p_expires = v16;
  if ( setcookies > 0x31 )
    return v18;
  s2 = domain;
  v19 = Curl_ccalloc(1LL, 72LL);
  if ( !v19 )
    return 0LL;
  v20 = (Cookie *)v19;
  if ( !httpheader )
  {
    dest[0] = 0LL;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
    {
      lineptr += 0xA;
      v20->httponly = 1;
    }
    if ( *lineptr == 35 )
    {
      Curl_cfree(v20);
    }
    else
    {
      v51 = strchr(lineptr, 13);
      if ( v51 )
        *v51 = 0;
      v52 = strchr(lineptr, 10);
      if ( v52 )
        *v52 = 0;
      v110 = noexpire;
      v53 = strtok_r(lineptr, "\t", dest);
      if ( v53 )
      {
        v54 = v53;
        v55 = 0;
        v56 = 0;
        p_expires = (time_t)&v20->expires;
        while ( 2 )
        {
          switch ( v55 )
          {
            case 0:
              if ( *v54 == 46 )
                v57 = v54 + 1;
              else
                v57 = v54;
              v58 = (char *)Curl_cstrdup(v57);
              v20->domain = v58;
              goto LABEL_167;
            case 1:
              v20->tailmatch = (unsigned int)curl_strequal(v54, "TRUE") != 0;
              goto LABEL_175;
            case 2:
              if ( !strcmp("TRUE", v54) || !strcmp("FALSE", v54) )
              {
                v62 = Curl_cstrdup("/");
                v20->path = (char *)v62;
                v63 = v56 | (v62 == 0);
                v64 = Curl_cstrdup("/");
                v56 = v63 | (v64 == 0);
                ++v55;
                v20->spath = (char *)v64;
LABEL_170:
                v20->secure = 0;
                if ( (unsigned int)curl_strequal(v54, "TRUE") )
                {
                  if ( secure || c->running )
                  {
                    v20->secure = 1;
                    goto LABEL_175;
                  }
LABEL_174:
                  v56 = 1;
                }
              }
              else
              {
                v59 = (const char *)Curl_cstrdup(v54);
                v20->path = (char *)v59;
                if ( !v59 )
                  goto LABEL_174;
                v58 = sanitize_cookie_path(v59);
                v20->spath = v58;
LABEL_167:
                v60 = v58 == 0LL;
LABEL_168:
                v56 |= v60;
              }
LABEL_175:
              v65 = strtok_r(0uLL, "\t", dest);
              ++v55;
              if ( !v65 )
                goto LABEL_185;
              v54 = v65;
              if ( (v56 & 1) != 0 )
                goto LABEL_185;
              continue;
            case 3:
              goto LABEL_170;
            case 4:
              v60 = curlx_strtoofft(v54, 0LL, 10LL, p_expires) != 0;
              goto LABEL_168;
            case 5:
              v61 = Curl_cstrdup(v54);
              v20->name = (char *)v61;
              if ( !v61 )
                goto LABEL_174;
              if ( (unsigned int)curl_strnequal("__Secure-", v61, 9LL) )
              {
                v20->prefix |= 1u;
              }
              else if ( (unsigned int)curl_strnequal("__Host-", v20->name, 7LL) )
              {
                v20->prefix |= 2u;
              }
              goto LABEL_175;
            case 6:
              v58 = (char *)Curl_cstrdup(v54);
              v20->value = v58;
              goto LABEL_167;
            default:
              goto LABEL_175;
          }
        }
      }
      LOBYTE(v56) = 0;
      v55 = 0;
LABEL_185:
      if ( v55 == 6 )
      {
        v68 = Curl_cstrdup(&unk_23D5);
        LOBYTE(v56) = v56 | (v68 == 0);
        if ( v68 )
          v55 = 7;
        else
          v55 = 6;
        v20->value = (char *)v68;
      }
      if ( (v56 & 1) == 0 && v55 == 7 )
      {
        noexpire = v110;
        goto LABEL_212;
      }
LABEL_268:
      freecookie(v20);
    }
    return 0LL;
  }
  if ( strlen(lineptr) > 0x1388 )
  {
    Curl_cfree(v20);
    goto LABEL_210;
  }
  p_name = &v20->name;
  str = &v20->path;
  s = path;
  v104 = &v20->expires;
  p_domain = &v20->domain;
  p_value = &v20->value;
  v109 = noexpire;
  v111 = 0;
  v113 = secure;
  cookies = c;
  v103 = 0x7FFFFFFFFFFFFFFFLL - p_expires;
  do
  {
    for ( i = lineptr; ; ++i )
    {
      v22 = (unsigned __int8)*i;
      if ( v22 != 32 && v22 != 9 )
        break;
    }
    v23 = strcspn(i, ";\t\r\n=");
    if ( !v23 )
      goto LABEL_119;
    v24 = v23;
    v25 = &i[v23];
    v26 = v23;
    do
    {
      v27 = (unsigned __int8)i[v26 - 1];
      if ( v27 != 32 && v27 != 9 )
        break;
      --v26;
    }
    while ( v26 );
    if ( *v25 == 61 )
    {
      v28 = &i[v23 + 1];
      v29 = strcspn(v28, ";\r\n");
      for ( j = &i[v24 + v29]; v29; --v29 )
      {
        v31 = (unsigned __int8)i[v24 + v29];
        if ( v31 != 32 && v31 != 9 )
          break;
      }
      v25 = j + 1;
      if ( v29 )
      {
        v32 = &i[v24 + 1 + v29];
        while ( 1 )
        {
          v33 = *(unsigned __int8 *)v28;
          if ( v33 != 32 && v33 != 9 )
            break;
          --v29;
          ++v28;
          if ( !v29 )
            goto LABEL_33;
        }
      }
      v32 = v28;
LABEL_33:
      if ( memchr(v32, 9, v29) )
      {
        freecookie(v20);
        if ( data && (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
        {
          Curl_infof(data, "cookie contains TAB, dropping");
          v34 = 1;
          goto LABEL_116;
        }
LABEL_49:
        v34 = 1;
        goto LABEL_116;
      }
      v35 = 1;
      if ( v26 > 0xFFE )
      {
LABEL_47:
        freecookie(v20);
        if ( !data || (*((_BYTE *)&data->set + 2238) & 0x10) == 0 )
          goto LABEL_49;
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v26, v29);
        v34 = 1;
        goto LABEL_116;
      }
    }
    else
    {
      v29 = 0LL;
      v35 = 0;
      v32 = 0LL;
      if ( v26 > 0xFFE )
        goto LABEL_47;
    }
    if ( v29 > 0xFFE || v29 + v26 > 0x1000 )
      goto LABEL_47;
    if ( v22 == 95 && v26 >= 7 && i[1] == 95 )
    {
      if ( (unsigned int)curl_strnequal("__Secure-", i, 9LL) )
      {
        v36 = v20->prefix | 1;
      }
      else
      {
        if ( !(unsigned int)curl_strnequal("__Host-", i, 7LL) )
          goto LABEL_54;
        v36 = v20->prefix | 2;
      }
      v20->prefix = v36;
    }
LABEL_54:
    if ( !*p_name )
    {
      if ( !v35 )
        goto LABEL_76;
      strstore(p_name, i, v26);
      strstore(p_value, v32, v29);
      v38 = *p_name;
      if ( !*p_name || !*p_value )
        goto LABEL_76;
      if ( invalid_octets(*p_value) || invalid_octets(v38) )
      {
        if ( data && (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
          Curl_infof(data, "invalid octets in name/value, cookie dropped");
LABEL_76:
        v34 = 6;
        v111 = 1;
        goto LABEL_116;
      }
      goto LABEL_115;
    }
    if ( !v29 )
    {
      if ( v26 == 8 )
      {
        if ( (unsigned int)curl_strnequal("httponly", i, 8LL) )
        {
          v20->httponly = 1;
          goto LABEL_115;
        }
      }
      else if ( v26 == 6 && (unsigned int)curl_strnequal("secure", i, 6LL) )
      {
        if ( !v113 && cookies->running )
          goto LABEL_76;
        v20->secure = 1;
        goto LABEL_115;
      }
      if ( !v35 )
        goto LABEL_115;
    }
    if ( v26 == 7 )
    {
      if ( (unsigned int)curl_strnequal("version", i, 7LL) )
        goto LABEL_115;
      if ( !(unsigned int)curl_strnequal("max-age", i, 7LL) )
      {
        if ( (unsigned int)curl_strnequal("expires", i, 7LL) && v29 <= 0x7F && !v20->expires )
        {
          memcpy(dest, v32, v29);
          *((_BYTE *)dest + v29) = 0;
          v49 = Curl_getdate_capped(dest);
          v20->expires = v49;
          if ( v49 )
          {
            if ( (v49 & 0x8000000000000000LL) != 0 )
              v20->expires = 0LL;
          }
          else
          {
            v20->expires = 1LL;
          }
        }
        goto LABEL_115;
      }
      if ( *v32 == 34 )
        v45 = v32 + 1;
      else
        v45 = v32;
      v46 = curlx_strtoofft(v45, 0LL, 10LL, v104);
      if ( v46 )
      {
        if ( v46 != 2 )
        {
          if ( v46 == 1 )
LABEL_142:
            *v104 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_115:
          v34 = 0;
          goto LABEL_116;
        }
      }
      else
      {
        v50 = *v104;
        if ( *v104 )
        {
          if ( v103 >= v50 )
          {
            *v104 = v50 + p_expires;
            goto LABEL_115;
          }
          goto LABEL_142;
        }
      }
      *v104 = 1LL;
      goto LABEL_115;
    }
    if ( v26 != 6 )
    {
      if ( v26 == 4 )
      {
        if ( (unsigned int)curl_strnequal("path", i, 4LL) )
        {
          strstore(str, v32, v29);
          if ( !*str )
            goto LABEL_76;
          Curl_cfree(v20->spath);
          v37 = sanitize_cookie_path(v20->path);
          v20->spath = v37;
          if ( !v37 )
            goto LABEL_76;
        }
      }
      goto LABEL_115;
    }
    v39 = curl_strnequal("domain", i, 6LL);
    if ( !v29 || !v39 )
      goto LABEL_115;
    if ( *v32 == 46 )
      v40 = v32 + 1;
    else
      v40 = v32;
    v41 = v29 - (*v32 == 46);
    v42 = s2;
    if ( bad_domain(v40, v41) )
      v42 = ":";
    if ( v42 )
      v43 = v42;
    else
      v43 = v40;
    is_ipnum = Curl_host_is_ipnum(v43);
    s2 = (char *)v42;
    if ( v42 )
    {
      if ( (is_ipnum & 1) != 0 )
      {
        if ( !strncmp(v40, v42, v41) && v41 == strlen(v42) )
          goto LABEL_94;
        if ( (is_ipnum & 1) != 0 )
          goto LABEL_135;
      }
      if ( !cookie_tailmatch(v40, v41, v42) )
      {
LABEL_135:
        if ( data && (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
          Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v40);
        v111 = 1;
        goto LABEL_115;
      }
    }
LABEL_94:
    strstore(p_domain, v40, v41);
    if ( *p_domain )
      v34 = 0;
    else
      v34 = 6;
    if ( !(is_ipnum & 1 | (*p_domain == 0LL)) )
    {
      v20->tailmatch = 1;
      goto LABEL_115;
    }
    v111 |= *p_domain == 0LL;
    if ( *p_domain )
      goto LABEL_115;
LABEL_116:
    i = v25;
    if ( v34 )
      break;
LABEL_119:
    while ( 1 )
    {
      v47 = (unsigned __int8)*i;
      if ( v47 != 32 && v47 != 9 )
        break;
      ++i;
    }
    v48 = v47 == 59;
    if ( v47 == 59 )
      v34 = 0;
    else
      v34 = 6;
    if ( v48 )
      lineptr = i + 1;
    else
      lineptr = i;
  }
  while ( !v34 );
  if ( v34 == 6 )
  {
    c = cookies;
    noexpire = v109;
    v66 = v111;
    if ( (v111 & 1) != 0 )
    {
      secure = v113;
      v67 = s;
    }
    else
    {
      v67 = s;
      if ( s2 )
      {
        secure = v113;
        if ( !v20->domain )
        {
          v69 = Curl_cstrdup(s2);
          v66 = v111 | (v69 == 0);
          v20->domain = (char *)v69;
        }
      }
      else
      {
        secure = v113;
      }
    }
    if ( (v66 & 1) != 0
      || !v67
      || v20->path
      || ((v70 = strchr(v67, 63)) == 0LL ? (v71 = strrchr(v67, 47)) : (v71 = (char *)Curl_memrchr(v67, 47LL, v70 - v67)),
          !v71) )
    {
LABEL_198:
      if ( (v66 & 1) != 0 || !v20->name )
        goto LABEL_209;
      v34 = 0;
      ++data->req.setcookies;
    }
    else
    {
      v72 = v71 - v67;
      v73 = (char *)Curl_cmalloc(v71 - v67 + 2);
      v20->path = v73;
      if ( v73 )
      {
        v74 = v72 + 1;
        memcpy(v73, v67, v74);
        v20->path[v74] = 0;
        v75 = sanitize_cookie_path(v20->path);
        v66 |= v75 == 0LL;
        v20->spath = v75;
        goto LABEL_198;
      }
LABEL_209:
      freecookie(v20);
LABEL_210:
      v34 = 1;
    }
  }
  else
  {
    c = cookies;
    secure = v113;
    noexpire = v109;
  }
  if ( v34 )
    return 0LL;
LABEL_212:
  if ( (v20->prefix & 1) != 0 && !v20->secure )
    goto LABEL_268;
  if ( (v20->prefix & 2) != 0 )
  {
    if ( !v20->secure )
      goto LABEL_268;
    v95 = v20->path;
    if ( !v95 || strcmp(v95, "/") || v20->tailmatch )
      goto LABEL_268;
  }
  if ( !c->running && c->newsession && !v20->expires )
    goto LABEL_268;
  v20->livecookie = c->running;
  v76 = c->lastct + 1;
  c->lastct = v76;
  v20->creationtime = v76;
  if ( !noexpire )
    remove_expired(c);
  v77 = &c->cookies[cookiehash(v20->domain)];
  next = *v77;
  v79 = c;
  if ( *v77 )
  {
    v114 = secure;
    v80 = 0LL;
    v18 = 0LL;
    v81 = 0;
    while ( 1 )
    {
      v82 = next;
      if ( !(unsigned int)curl_strequal(next->name, v20->name) )
        goto LABEL_238;
      v83 = v82->domain;
      if ( v83 )
      {
        v84 = v20->domain;
        if ( !v84 || !(unsigned int)curl_strequal(v83, v84) )
          goto LABEL_238;
      }
      else if ( v20->domain )
      {
        goto LABEL_238;
      }
      spath = v82->spath;
      if ( spath )
      {
        v86 = v20->spath;
        if ( v86 )
        {
          if ( v82->secure && !v20->secure && !v114 )
          {
            v87 = strchr(spath + 1, 47);
            v88 = v87 ? v87 - spath : strlen(spath);
            if ( (unsigned int)curl_strnequal(spath, v86, v88) )
            {
              if ( data && (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
                Curl_infof(
                  data,
                  "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                  v20->name,
                  v20->domain);
              goto LABEL_268;
            }
          }
        }
      }
LABEL_238:
      if ( v80 )
        goto LABEL_221;
      if ( !(unsigned int)curl_strequal(v82->name, v20->name) )
        goto LABEL_220;
      v89 = v82->domain;
      if ( v89 )
      {
        v90 = v20->domain;
        if ( !v90 || !(unsigned int)curl_strequal(v89, v90) )
          goto LABEL_250;
        v91 = v82->tailmatch == v20->tailmatch;
      }
      else
      {
        v91 = v20->domain == 0LL;
      }
      v92 = v91;
      v81 |= v92;
LABEL_250:
      if ( (v81 & 1) != 0 )
      {
        v93 = v82->spath;
        if ( v93 )
        {
          v94 = v20->spath;
          if ( v94 )
          {
            if ( !(unsigned int)curl_strequal(v93, v94) )
            {
              v81 = 0;
LABEL_220:
              v80 = 0LL;
              goto LABEL_221;
            }
          }
        }
        v81 &= (v82->spath != 0LL) ^ (v20->spath == 0LL);
      }
      if ( (v81 & 1) == 0 )
        goto LABEL_220;
      if ( v20->livecookie )
      {
        v18 = v82;
        v80 = v20;
      }
      else
      {
        v18 = v82;
        v80 = v20;
        if ( v82->livecookie )
          goto LABEL_268;
      }
LABEL_221:
      next = v82->next;
      if ( !v82->next )
        goto LABEL_272;
    }
  }
  LOBYTE(v81) = 0;
  v18 = 0LL;
  v80 = 0LL;
  v82 = 0LL;
LABEL_272:
  if ( v80 )
  {
    v80->next = v18->next;
    v80->creationtime = v18->creationtime;
    Curl_cfree(v18->name);
    Curl_cfree(v18->value);
    Curl_cfree(v18->domain);
    Curl_cfree(v18->path);
    Curl_cfree(v18->spath);
    *(_OWORD *)&v18->next = *(_OWORD *)&v80->next;
    v98 = *(_OWORD *)&v80->spath;
    v97 = *(_OWORD *)&v80->expires;
    v99 = *(_OWORD *)&v80->value;
    *(_QWORD *)&v18->prefix = *(_QWORD *)&v80->prefix;
    *(_OWORD *)&v18->spath = v98;
    *(_OWORD *)&v18->expires = v97;
    *(_OWORD *)&v18->value = v99;
    Curl_cfree(v80);
  }
  else
  {
    v18 = v20;
  }
  if ( data && v79->running && (*((_BYTE *)&data->set + 2238) & 0x10) != 0 )
  {
    if ( (v81 & 1) != 0 )
      v100 = "Replaced";
    else
      v100 = "Added";
    Curl_infof(
      data,
      "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
      v100,
      v18->name,
      v18->value,
      v18->domain,
      v18->path,
      v18->expires);
  }
  if ( (v81 & 1) == 0 )
  {
    if ( v82 )
      p_next = &v82->next;
    else
      p_next = v77;
    *p_next = v18;
    ++v79->numcookies;
  }
  expires = v18->expires;
  if ( expires && expires < v79->next_expiration )
    v79->next_expiration = expires;
  return v18;
}
