Cookie *__fastcall Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  _BOOL4 v12; // w26
  Cookie *v13; // x19
  int v14; // w0
  size_t v16; // x0
  const char *v17; // x2
  size_t v18; // x27
  int v19; // w1
  _BYTE *v21; // x22
  size_t v22; // x20
  const char *v23; // x28
  int v24; // w0
  int v26; // w0
  bool v28; // w3
  bool v29; // cc
  int v30; // w0
  unsigned __int8 v31; // w0
  const char *name; // x20
  char *value; // x22
  int v34; // w0
  int v35; // w0
  int v37; // w0
  curl_off_t expires; // x1
  __int64 v39; // x0
  char *v40; // x0
  _BYTE *v41; // x0
  const char *v42; // x0
  char is_ipnum; // w21
  bool v44; // zf
  char *v45; // x0
  char *v46; // x0
  signed __int64 v47; // x0
  size_t v48; // x20
  char *v49; // x0
  char *v50; // x0
  const char *v51; // x0
  int v52; // w0
  char livecookie; // w22
  Cookie *v54; // x21
  Cookie *v55; // x23
  Cookie *v56; // x27
  size_t v57; // x26
  Cookie *v58; // x20
  void (__fastcall *v59)(char *); // x1
  int v60; // w22
  const char *v61; // x2
  curl_off_t v62; // x0
  __int64 v63; // x0
  char *v64; // x0
  char *v65; // x0
  char *v66; // x28
  int v67; // w1
  int i; // w20
  int v69; // w21
  __int64 v70; // x0
  char *v71; // x0
  int v72; // w0
  __int64 (__fastcall *v73)(const char *); // x2
  int v74; // w0
  const char *v75; // x0
  __int64 v76; // x20
  __int64 (__fastcall *v77)(const char *); // x2
  __int64 v78; // x0
  _BOOL4 v79; // w20
  __int64 v80; // x0
  unsigned __int8 v81; // w0
  char *v82; // x0
  char *v83; // x1
  const char *spath; // x28
  char *v85; // x0
  char *v86; // x1
  char *v87; // x27
  char *v88; // x0
  size_t v89; // x2
  char *v90; // x0
  char *v91; // x1
  int pathb; // [xsp+68h] [xbp+68h]
  int sep; // [xsp+70h] [xbp+70h]
  bool sepa; // [xsp+70h] [xbp+70h]
  bool sepb; // [xsp+70h] [xbp+70h]
  __int64 (__fastcall *sepc)(const char *); // [xsp+70h] [xbp+70h]
  bool badcookie; // [xsp+78h] [xbp+78h]
  time_t now; // [xsp+88h] [xbp+88h]
  const char *v103; // [xsp+A8h] [xbp+A8h]
  char *tok_buf; // [xsp+B0h] [xbp+B0h] BYREF
  char date[128]; // [xsp+B8h] [xbp+B8h] BYREF

  v12 = httpheader;
  now = time(0uLL);
  if ( data->req.setcookies > 0x31u )
    return 0LL;
  v13 = (Cookie *)Curl_ccalloc(1LL, 72LL);
  if ( !v13 )
    return 0LL;
  if ( v12 )
  {
    if ( strlen(lineptr) > 0x1388 )
    {
LABEL_5:
      Curl_cfree(v13);
      return 0LL;
    }
    badcookie = 0;
    while ( 1 )
    {
      while ( 1 )
      {
        v14 = *(unsigned __int8 *)lineptr;
        sep = v14;
        if ( !*lineptr )
          break;
        if ( v14 != 32 && v14 != 9 )
          break;
        ++lineptr;
      }
      v16 = strcspn(lineptr, ";\t\r\n=");
      if ( !v16 )
      {
        v23 = lineptr;
        goto LABEL_72;
      }
      v17 = &lineptr[v16];
      while ( 1 )
      {
        v18 = v16--;
        v19 = (unsigned __int8)lineptr[v16];
        if ( v19 != 32 && v19 != 9 )
          break;
        if ( !v16 )
        {
          v18 = 0LL;
          break;
        }
      }
      if ( *v17 == 61 )
      {
        v21 = v17 + 1;
        v103 = v17;
        v22 = strcspn(v17 + 1, ";\r\n");
        v23 = &v21[v22];
        while ( 1 )
        {
          if ( !v22 )
            goto LABEL_48;
          v24 = (unsigned __int8)v103[v22];
          if ( v24 != 32 && v24 != 9 )
            break;
          --v22;
        }
        while ( 1 )
        {
          if ( !v22 )
            goto LABEL_48;
          v26 = (unsigned __int8)*v21;
          if ( v26 != 32 && v26 != 9 )
            break;
          ++v21;
          --v22;
        }
        if ( memchr(v21, 9, v22) )
        {
          freecookie(v13);
          if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
            Curl_infof(data, "cookie contains TAB, dropping");
          return 0LL;
        }
LABEL_48:
        v28 = v12;
      }
      else
      {
        v23 = v17;
        v21 = 0LL;
        v28 = 0;
        v22 = 0LL;
      }
      v29 = v18 > 0xFFE || v22 > 0xFFE;
      if ( v29 || v22 + v18 > 0x1000 )
      {
        freecookie(v13);
        if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
          Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v18, v22);
        return 0LL;
      }
      if ( v18 > 6 && sep == 95 && lineptr[1] == 95 )
      {
        sepa = v28;
        v30 = curl_strnequal("__Secure-", lineptr, 9LL);
        v28 = sepa;
        if ( v30 )
        {
          v31 = v13->prefix | 1;
LABEL_54:
          v13->prefix = v31;
          goto LABEL_55;
        }
        v34 = curl_strnequal("__Host-", lineptr, 7LL);
        v28 = sepa;
        if ( v34 )
        {
          v31 = v13->prefix | 2;
          goto LABEL_54;
        }
      }
LABEL_55:
      if ( !v13->name )
      {
        if ( !v28 )
          goto LABEL_63;
        strstore(&v13->name, lineptr, v18);
        strstore(&v13->value, v21, v22);
        name = v13->name;
        if ( !name )
          goto LABEL_63;
        value = v13->value;
        if ( !value )
          goto LABEL_63;
        if ( value[strcspn(v13->value, badoctets_0)] || name[strcspn(name, badoctets_0)] )
        {
          if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
            Curl_infof(data, "invalid octets in name/value, cookie dropped");
          goto LABEL_63;
        }
        goto LABEL_72;
      }
      if ( v22 )
      {
        if ( v18 == 4 )
          goto LABEL_95;
        if ( v18 == 6 )
          goto LABEL_100;
      }
      else
      {
        if ( v18 == 6 )
        {
          sepb = v28;
          if ( (unsigned int)curl_strnequal("secure", lineptr, 6LL) )
          {
            if ( !secure && c->running )
              goto LABEL_63;
            v13->secure = 1;
            goto LABEL_72;
          }
          if ( !sepb )
            goto LABEL_72;
LABEL_100:
          if ( !(unsigned int)curl_strnequal("domain", lineptr, 6LL) || !v22 )
            goto LABEL_72;
          if ( *v21 == 46 )
          {
            ++v21;
            --v22;
          }
          if ( v22 == 9 && (unsigned int)curl_strnequal(v21, "localhost", 9LL)
            || (v41 = memchr(v21, 46, v22)) != 0LL && v22 - (v41 - v21) > 1 )
          {
            if ( domain )
              v42 = domain;
            else
              v42 = v21;
          }
          else
          {
            domain = ":";
            v42 = ":";
          }
          is_ipnum = Curl_host_is_ipnum(v42);
          if ( !domain )
          {
LABEL_112:
            strstore(&v13->domain, v21, v22);
            if ( !v13->domain )
              goto LABEL_63;
            if ( (is_ipnum & 1) == 0 )
              v13->tailmatch = 1;
            goto LABEL_72;
          }
          if ( (is_ipnum & 1) != 0 )
          {
            if ( !strncmp(v21, domain, v22) && strlen(domain) == v22 )
              goto LABEL_112;
          }
          else if ( cookie_tailmatch(v21, v22, domain) )
          {
            goto LABEL_112;
          }
          if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
            Curl_infof(data, "skipped cookie with bad tailmatch domain: %s", v21);
          badcookie = v12;
          goto LABEL_72;
        }
        if ( v18 == 8 )
        {
          if ( (unsigned int)curl_strnequal("httponly", lineptr, 8LL) )
            v13->httponly = 1;
          goto LABEL_72;
        }
        if ( !v28 )
          goto LABEL_72;
        if ( v18 == 4 )
        {
LABEL_95:
          if ( (unsigned int)curl_strnequal("path", lineptr, 4LL) )
          {
            strstore(&v13->path, v21, v22);
            if ( !v13->path )
              goto LABEL_63;
            Curl_cfree(v13->spath);
            v40 = sanitize_cookie_path(v13->path);
            v13->spath = v40;
            if ( !v40 )
              goto LABEL_63;
          }
          goto LABEL_72;
        }
      }
      if ( v18 == 7 && !(unsigned int)curl_strnequal("version", lineptr, 7LL) )
      {
        if ( (unsigned int)curl_strnequal("max-age", lineptr, 7LL) )
        {
          if ( *v21 == 34 )
            ++v21;
          v37 = curlx_strtoofft(v21, 0LL, 10LL, &v13->expires);
          if ( v37 == 1 )
          {
            v39 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            if ( v37 == 2 )
              goto LABEL_93;
            if ( v37 )
              goto LABEL_72;
            expires = v13->expires;
            if ( expires )
            {
              v39 = 0x7FFFFFFFFFFFFFFFLL;
              if ( expires <= 0x7FFFFFFFFFFFFFFFLL - now )
                v39 = expires + now;
            }
            else
            {
LABEL_93:
              v39 = 1LL;
            }
          }
        }
        else
        {
          if ( !(unsigned int)curl_strnequal("expires", lineptr, 7LL) || v13->expires || v22 > 0x7F )
            goto LABEL_72;
          *((_BYTE *)memcpy(date, v21, v22) + v22) = 0;
          v39 = Curl_getdate_capped();
          v44 = v39 == 0;
          if ( v39 < 0 )
            v39 = 0LL;
          if ( v44 )
            v39 = 1LL;
        }
        v13->expires = v39;
        goto LABEL_72;
      }
      while ( 1 )
      {
LABEL_72:
        v35 = *(unsigned __int8 *)v23;
        if ( !*v23 )
          goto LABEL_140;
        if ( v35 != 32 && v35 != 9 )
          break;
        ++v23;
      }
      if ( v35 != 59 )
      {
LABEL_140:
        if ( badcookie )
          goto LABEL_63;
        if ( !v13->domain )
        {
          if ( domain )
          {
            v63 = Curl_cstrdup(domain);
            v13->domain = (char *)v63;
            if ( !v63 )
              goto LABEL_63;
          }
        }
        if ( !v13->path && path )
        {
          v45 = strchr(path, 63);
          v46 = v45 ? (char *)Curl_memrchr(path, 47LL, v45 - path) : strrchr(path, 47);
          if ( v46 )
          {
            v47 = v46 - path;
            v48 = v47 + 1;
            v49 = (char *)Curl_cmalloc(v47 + 2);
            v13->path = v49;
            if ( !v49 )
              goto LABEL_63;
            memcpy(v49, path, v48);
            v13->path[v48] = 0;
            v50 = sanitize_cookie_path(v13->path);
            v13->spath = v50;
            if ( !v50 )
              goto LABEL_63;
          }
        }
        if ( !v13->name )
          goto LABEL_63;
        ++data->req.setcookies;
LABEL_151:
        if ( (v13->prefix & 1) != 0 && !v13->secure )
          goto LABEL_63;
        if ( (v13->prefix & 2) != 0 )
        {
          if ( !v13->secure )
            goto LABEL_63;
          v51 = v13->path;
          if ( !v51 || strcmp(v51, "/") || v13->tailmatch )
            goto LABEL_63;
        }
        if ( !c->running && c->newsession && !v13->expires )
          goto LABEL_63;
        v13->livecookie = c->running;
        v52 = c->lastct + 1;
        c->lastct = v52;
        v13->creationtime = v52;
        if ( !noexpire )
          remove_expired(c);
        livecookie = 0;
        v54 = 0LL;
        v55 = 0LL;
        v56 = 0LL;
        v57 = cookiehash(v13->domain);
        v58 = c->cookies[v57];
        while ( 2 )
        {
          if ( !v58 )
          {
            if ( v55 )
            {
              v59 = (void (__fastcall *)(char *))Curl_cfree;
              v55->next = v54->next;
              v55->creationtime = v54->creationtime;
              v59(v54->name);
              Curl_cfree(v54->value);
              Curl_cfree(v54->domain);
              Curl_cfree(v54->path);
              Curl_cfree(v54->spath);
              memcpy(v54, v55, sizeof(Cookie));
              v13 = v54;
              Curl_cfree(v55);
            }
            v60 = livecookie & 1;
            if ( c->running && (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
            {
              v61 = "Added";
              if ( v60 )
                v61 = "Replaced";
              Curl_infof(
                data,
                "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld",
                v61,
                v13->name,
                v13->value,
                v13->domain,
                v13->path,
                v13->expires);
            }
            if ( !v60 )
            {
              if ( v56 )
                v56->next = v13;
              else
                c->cookies[v57] = v13;
              ++c->numcookies;
            }
            v62 = v13->expires;
            if ( v62 && v62 < c->next_expiration )
              c->next_expiration = v62;
            return v13;
          }
          if ( (unsigned int)curl_strequal(v58->name, v13->name) )
          {
            v82 = v58->domain;
            v83 = v13->domain;
            if ( v82 )
            {
              if ( v83 && (unsigned int)curl_strequal(v82, v83) )
              {
LABEL_241:
                spath = v58->spath;
                if ( spath )
                {
                  v87 = v13->spath;
                  if ( v87 )
                  {
                    if ( v58->secure && !v13->secure && !secure )
                    {
                      v88 = strchr(spath + 1, 47);
                      v89 = v88 ? v88 - spath : strlen(spath);
                      if ( (unsigned int)curl_strnequal(spath, v87, v89) )
                      {
                        if ( (*(_DWORD *)&data->set.gap8BB[1] & 0x100000) != 0 )
                          Curl_infof(
                            data,
                            "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                            v13->name,
                            v13->domain);
                        goto LABEL_63;
                      }
                    }
                  }
                }
              }
            }
            else if ( !v83 )
            {
              goto LABEL_241;
            }
          }
          if ( !v55 && (unsigned int)curl_strequal(v58->name, v13->name) )
          {
            v85 = v58->domain;
            v86 = v13->domain;
            if ( v85 )
            {
              if ( v86 && (unsigned int)curl_strequal(v85, v86) && v58->tailmatch == v13->tailmatch )
                goto LABEL_263;
LABEL_246:
              if ( (livecookie & 1) == 0 )
              {
LABEL_247:
                livecookie = 0;
                goto LABEL_248;
              }
            }
            else if ( v86 )
            {
              goto LABEL_246;
            }
LABEL_263:
            v90 = v58->spath;
            v91 = v13->spath;
            if ( v90 && (!v91 || !(unsigned int)curl_strequal(v90, v91)) || (v58->spath == 0LL) != (v13->spath == 0LL) )
              goto LABEL_247;
            livecookie = v13->livecookie;
            if ( (livecookie & 1) != 0 )
            {
              v54 = v58;
              v55 = v13;
            }
            else
            {
              if ( v58->livecookie )
                goto LABEL_63;
              v54 = v58;
              v55 = v13;
              livecookie = 1;
            }
          }
LABEL_248:
          v56 = v58;
          v58 = v58->next;
          continue;
        }
      }
      lineptr = v23 + 1;
    }
  }
  tok_buf = 0LL;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAuLL) )
  {
    lineptr += 0xA;
    v13->httponly = 1;
  }
  if ( *lineptr == 35 )
    goto LABEL_5;
  v64 = strchr(lineptr, 13);
  if ( v64 )
    *v64 = 0;
  v65 = strchr(lineptr, 10);
  if ( v65 )
    *v65 = 0;
  v66 = strtok_r((char *)lineptr, "\t", &tok_buf);
  v67 = v12;
  for ( i = 0; ; ++i )
  {
    v69 = (v66 != 0LL) & (v67 ^ 1);
    if ( !v69 )
      break;
    if ( i == 3 )
    {
      v79 = v12;
      goto LABEL_222;
    }
    if ( i > 3 )
    {
      switch ( i )
      {
        case 5:
          v80 = Curl_cstrdup(v66);
          v13->name = (char *)v80;
          if ( v80 )
          {
            if ( (unsigned int)curl_strnequal("__Secure-", v80, 9LL) )
            {
              v81 = v13->prefix | 1;
              goto LABEL_233;
            }
            if ( (unsigned int)curl_strnequal("__Host-", v13->name, 7LL) )
            {
              v81 = v13->prefix | 2;
LABEL_233:
              v13->prefix = v81;
            }
LABEL_205:
            v69 = v12;
          }
          break;
        case 6:
          v71 = (char *)Curl_cstrdup(v66);
          v13->value = v71;
          goto LABEL_213;
        case 4:
          v69 = curlx_strtoofft(v66, 0LL, 10LL, &v13->expires) != 0;
          break;
        default:
          goto LABEL_205;
      }
    }
    else
    {
      if ( i == 1 )
      {
        v13->tailmatch = (unsigned int)curl_strequal(v66, "TRUE") != 0;
        goto LABEL_205;
      }
      if ( i != 2 )
      {
        if ( i )
          goto LABEL_205;
        if ( *v66 == 46 )
          ++v66;
        v71 = (char *)Curl_cstrdup(v66);
        v13->domain = v71;
        goto LABEL_213;
      }
      v72 = strcmp("TRUE", v66);
      v73 = (__int64 (__fastcall *)(const char *))Curl_cstrdup;
      if ( !v72
        || (sepc = (__int64 (__fastcall *)(const char *))Curl_cstrdup, v74 = strcmp("FALSE", v66), v73 = sepc, !v74) )
      {
        v76 = v73("/");
        v77 = (__int64 (__fastcall *)(const char *))Curl_cstrdup;
        v13->path = (char *)v76;
        v78 = v77("/");
        v13->spath = (char *)v78;
        if ( v78 )
          v79 = v76 == 0;
        else
          v79 = v69;
LABEL_222:
        v13->secure = 0;
        if ( (unsigned int)curl_strequal(v66, "TRUE") )
        {
          if ( secure || c->running )
          {
            v13->secure = 1;
            goto LABEL_223;
          }
        }
        else
        {
LABEL_223:
          v69 = v79;
        }
        i = 3;
        goto LABEL_214;
      }
      v75 = (const char *)sepc(v66);
      v13->path = (char *)v75;
      if ( v75 )
      {
        v71 = sanitize_cookie_path(v75);
        v13->spath = v71;
LABEL_213:
        v69 = v71 == 0LL;
      }
    }
LABEL_214:
    v66 = strtok_r(0uLL, "\t", &tok_buf);
    v67 = v69;
  }
  if ( i == 6 )
  {
    pathb = v67;
    v70 = Curl_cstrdup(&unk_1EA3);
    v67 = pathb;
    v13->value = (char *)v70;
    if ( !v70 )
      v67 = 1;
    if ( v70 )
      i = 7;
  }
  if ( ((i != 7) & (v67 ^ 1)) == 0 && (v67 & 1) == 0 )
    goto LABEL_151;
LABEL_63:
  freecookie(v13);
  return 0LL;
}
