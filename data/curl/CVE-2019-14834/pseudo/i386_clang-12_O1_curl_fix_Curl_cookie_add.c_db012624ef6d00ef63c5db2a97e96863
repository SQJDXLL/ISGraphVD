Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  Curl_easy *v8; // edi
  time_t v9; // eax
  char *v10; // esi
  int v11; // eax
  int v12; // ebp
  char *v13; // edi
  const char *v14; // ecx
  const char *i; // esi
  size_t v16; // eax
  char **v17; // ebp
  char v18; // al
  char v19; // bl
  unsigned int v20; // edx
  const char *v21; // edi
  size_t v22; // eax
  size_t v23; // edx
  size_t v24; // ecx
  char v25; // dl
  size_t v26; // edx
  size_t v27; // eax
  int v28; // ebx
  char *v29; // eax
  int v30; // edx
  unsigned int v31; // esi
  int v32; // eax
  char *v33; // eax
  _DWORD *v34; // ebp
  int v35; // eax
  const char *v36; // esi
  const char *v37; // ebp
  const char *v38; // eax
  bool v39; // al
  char v40; // cl
  int v41; // ebx
  char *v42; // eax
  int v43; // eax
  int v44; // eax
  char v45; // al
  int v46; // eax
  unsigned int v47; // eax
  unsigned int v48; // ecx
  char *v49; // eax
  char *v50; // eax
  char *v51; // eax
  const char *v52; // esi
  int v53; // edx
  size_t v54; // ecx
  int v55; // eax
  int v56; // edi
  int v57; // eax
  int v58; // ebp
  const char *v59; // eax
  char *v60; // eax
  int v61; // eax
  int v62; // eax
  int v63; // eax
  int v64; // eax
  int v65; // eax
  int v66; // edi
  int v67; // eax
  int v68; // ecx
  CookieInfo *v69; // eax
  char *v70; // eax
  int v71; // eax
  char v72; // cl
  char *v73; // eax
  char *v74; // eax
  char v75; // si
  int v76; // eax
  int v77; // esi
  void *v78; // eax
  size_t v79; // esi
  char *v80; // eax
  char v81; // cl
  char v82; // al
  bool running; // al
  int v84; // eax
  Cookie *v85; // eax
  Cookie *v86; // edi
  int v87; // eax
  char *v88; // edx
  char *v89; // eax
  int v90; // eax
  char *v91; // edi
  int v92; // eax
  bool v93; // zf
  const char *v94; // edi
  int v95; // ebp
  char *v96; // eax
  size_t v97; // eax
  int v98; // eax
  unsigned __int8 v99; // di
  int v100; // eax
  int v101; // eax
  int v102; // eax
  const char *v103; // eax
  __int128 v105; // xmm0
  char v106; // al
  const char *v107; // ecx
  char *v108; // eax
  curl_off_t v109; // rax
  int v110; // ecx
  const char *v111; // [esp-Ch] [ebp-E8h]
  const char *v112; // [esp-Ch] [ebp-E8h]
  const char *v113; // [esp-Ch] [ebp-E8h]
  const char *v114; // [esp-Ch] [ebp-E8h]
  const char *v115; // [esp-8h] [ebp-E4h]
  size_t v116; // [esp-8h] [ebp-E4h]
  int v117; // [esp-4h] [ebp-E0h]
  Cookie *v118; // [esp+0h] [ebp-DCh]
  size_t len; // [esp+4h] [ebp-D8h]
  int lena; // [esp+4h] [ebp-D8h]
  size_t lenb; // [esp+4h] [ebp-D8h]
  size_t lenc; // [esp+4h] [ebp-D8h]
  size_t lend; // [esp+4h] [ebp-D8h]
  int v124; // [esp+10h] [ebp-CCh]
  char v125; // [esp+14h] [ebp-C8h]
  char delim; // [esp+18h] [ebp-C4h]
  unsigned __int8 delima; // [esp+18h] [ebp-C4h]
  char *delimb; // [esp+18h] [ebp-C4h]
  char **str; // [esp+1Ch] [ebp-C0h]
  char **stra; // [esp+1Ch] [ebp-C0h]
  char **strb; // [esp+1Ch] [ebp-C0h]
  size_t strc; // [esp+1Ch] [ebp-C0h]
  char *s1; // [esp+20h] [ebp-BCh]
  char *s1a; // [esp+20h] [ebp-BCh]
  char *s1b; // [esp+20h] [ebp-BCh]
  char *s1d; // [esp+20h] [ebp-BCh]
  char *s1c; // [esp+20h] [ebp-BCh]
  _DWORD *v139; // [esp+28h] [ebp-B4h]
  int v140; // [esp+2Ch] [ebp-B0h]
  __int64 v141; // [esp+34h] [ebp-A8h]
  unsigned int *v142; // [esp+3Ch] [ebp-A0h]
  _DWORD *v143; // [esp+40h] [ebp-9Ch]
  _DWORD *v144; // [esp+44h] [ebp-98h]
  _DWORD *v145; // [esp+48h] [ebp-94h]
  char *dest[36]; // [esp+4Ch] [ebp-90h] BYREF

  v117 = 134218511;
  v8 = data;
  v9 = time(0);
  v10 = 0;
  if ( data->req.setcookies > 0x31u )
    return (Cookie *)v10;
  v140 = v9;
  v11 = Curl_ccalloc(1, 44);
  if ( !v11 )
    return (Cookie *)v10;
  v12 = v11;
  v124 = v11;
  if ( !httpheader )
  {
    dest[0] = 0;
    v13 = lineptr;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v13 = lineptr + 10;
      *(_BYTE *)(v12 + 35) = 1;
    }
    if ( *v13 == 35 )
      goto LABEL_9;
    v49 = strchr(v13, 13);
    if ( v49 )
      *v49 = 0;
    v50 = strchr(v13, 10);
    if ( v50 )
      *v50 = 0;
    v51 = strtok_r(v13, "\t", dest);
    if ( v51 )
    {
      v52 = v51;
      s1a = (char *)(v12 + 24);
      v53 = 0;
      v54 = 0;
      while ( 1 )
      {
        lenc = v54;
        switch ( v53 )
        {
          case 0:
            if ( *v52 == 46 )
              ++v52;
            v55 = Curl_cstrdup(v52);
            v56 = v12;
            *(_DWORD *)(v12 + 20) = v55;
            v93 = v55 == 0;
            v57 = (unsigned __int8)lenc;
            if ( v93 )
              v57 = 1;
            lenc = v57;
            v58 = 0;
            break;
          case 1:
            v56 = v12;
            *(_BYTE *)(v12 + 32) = curl_strequal(v52, "TRUE") != 0;
            v58 = 1;
            break;
          case 2:
            if ( !strcmp("TRUE", v52) || !strcmp("FALSE", v52) )
            {
              v66 = Curl_cstrdup("/");
              *(_DWORD *)(v124 + 12) = v66;
              v12 = v124;
              v67 = Curl_cstrdup("/");
              v68 = (unsigned __int8)lenc;
              if ( !v67 )
                v68 = 1;
              *(_DWORD *)(v124 + 16) = v67;
              if ( !v66 )
                v68 = 1;
              lenc = v68;
              goto LABEL_189;
            }
            v59 = (const char *)Curl_cstrdup(v52);
            *(_DWORD *)(v12 + 12) = v59;
            if ( v59 )
            {
              v60 = sanitize_cookie_path(v59);
              v56 = v12;
              *(_DWORD *)(v12 + 16) = v60;
              v93 = v60 == 0;
              v61 = (unsigned __int8)lenc;
              if ( v93 )
                v61 = 1;
            }
            else
            {
              v56 = v12;
              v61 = 1;
            }
            lenc = v61;
            v58 = 2;
            break;
          case 3:
LABEL_189:
            *(_BYTE *)(v12 + 33) = 0;
            if ( curl_strequal(v52, "TRUE") )
            {
              if ( secure || (v69 = c, c->running) )
              {
                v56 = v12;
                *(_BYTE *)(v12 + 33) = 1;
                v58 = 3;
              }
              else
              {
                v56 = v12;
                LOBYTE(v69) = 1;
                lenc = (size_t)v69;
                v58 = 3;
              }
            }
            else
            {
              v56 = v12;
              v58 = 3;
            }
            break;
          case 4:
            v56 = v12;
            v93 = curlx_strtoofft(v52, 0, 10, s1a) == 0;
            v62 = (unsigned __int8)lenc;
            if ( !v93 )
              v62 = 1;
            lenc = v62;
            v58 = 4;
            break;
          case 5:
            v63 = Curl_cstrdup(v52);
            *(_DWORD *)(v12 + 4) = v63;
            if ( v63 )
            {
              if ( curl_strnequal("__Secure-", v63, 9) )
              {
                v56 = v12;
                *(_BYTE *)(v12 + 40) |= 1u;
                v58 = 5;
              }
              else
              {
                v56 = v12;
                if ( curl_strnequal("__Host-", *(_DWORD *)(v12 + 4), 7) )
                  *(_BYTE *)(v12 + 40) |= 2u;
                v58 = 5;
              }
            }
            else
            {
              v56 = v12;
              lenc = 1;
              v58 = 5;
            }
            break;
          case 6:
            v64 = Curl_cstrdup(v52);
            v56 = v12;
            *(_DWORD *)(v12 + 8) = v64;
            v93 = v64 == 0;
            v65 = (unsigned __int8)lenc;
            if ( v93 )
              v65 = 1;
            lenc = v65;
            v58 = 6;
            break;
          default:
            v56 = v12;
            v58 = v53;
            break;
        }
        v70 = strtok_r(0, "\t", dest);
        v53 = v58 + 1;
        if ( !v70 )
          break;
        v52 = v70;
        v54 = lenc;
        v12 = v56;
        if ( (lenc & 1) != 0 )
          goto LABEL_220;
      }
      LOBYTE(v54) = lenc;
      v12 = v56;
    }
    else
    {
      LOBYTE(v54) = 0;
      v53 = 0;
    }
LABEL_220:
    if ( v53 == 6 )
    {
      v75 = v54;
      v76 = Curl_cstrdup(&L_str_22);
      *(_DWORD *)(v12 + 8) = v76;
      LOBYTE(v54) = 1;
      if ( v76 )
        LOBYTE(v54) = v75;
      v53 = (v76 == 0) ^ 7;
    }
    v10 = 0;
    if ( (v54 & 1) == 0 && v53 == 7 )
      goto LABEL_241;
LABEL_226:
    freecookie(v118);
    return 0;
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_9:
    Curl_cfree(v12);
    return (Cookie *)v10;
  }
  v145 = (_DWORD *)(v12 + 8);
  v139 = (_DWORD *)(v12 + 4);
  v144 = (_DWORD *)(v12 + 12);
  v142 = (unsigned int *)(v12 + 24);
  v143 = (_DWORD *)(v12 + 20);
  v125 = 0;
  v14 = lineptr;
  do
  {
    for ( i = v14; *i == 32 || *i == 9; ++i )
      ;
    delim = *i;
    v16 = strcspn(i, ";\t\r\n=");
    if ( v16 )
    {
      v14 = &i[v16];
      v17 = (char **)v16;
      len = v16;
      while ( 1 )
      {
        v18 = *((_BYTE *)v17 + (_DWORD)i - 1);
        if ( v18 != 32 && v18 != 9 )
          break;
        v17 = (char **)((char *)v17 - 1);
        if ( !v17 )
        {
          v17 = 0;
          break;
        }
      }
      v19 = *v14;
      v20 = 0;
      s1 = 0;
      if ( *v14 == 61 )
      {
        v21 = &i[len + 1];
        v22 = strcspn(v21, ";\r\n");
        if ( v22 )
        {
          v23 = v22;
          do
          {
            v24 = v23;
            v25 = i[len + v23];
            if ( v25 != 32 && v25 != 9 )
            {
              v26 = v24;
              goto LABEL_32;
            }
            v23 = v24 - 1;
          }
          while ( v24 != 1 );
          v26 = 0;
        }
        else
        {
          v26 = 0;
        }
LABEL_32:
        v27 = len + v22;
        if ( v26 )
        {
          v28 = (int)&i[v26 + 1 + len];
          while ( *v21 == 32 || *v21 == 9 )
          {
            ++v21;
            if ( !--v26 )
            {
              v26 = 0;
              v21 = (const char *)v28;
              break;
            }
          }
        }
        str = (char **)v26;
        lena = (int)&i[v27 + 1];
        v93 = memchr(v21, 9, v26) == 0;
        v29 = (char *)v21;
        v8 = data;
        if ( !v93 )
        {
          v12 = v124;
          freecookie(v118);
          v30 = 1;
          if ( data && (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
          {
            Curl_infof(data, "cookie contains TAB, dropping", v115, v117);
            v30 = 1;
            v14 = (const char *)lena;
            goto LABEL_126;
          }
          goto LABEL_56;
        }
        s1 = v29;
        v14 = (const char *)lena;
        v20 = (unsigned int)str;
        v19 = 61;
      }
      lena = (int)v14;
      if ( (unsigned int)v17 > 0xFFE || v20 > 0xFFE || (unsigned int)v17 + v20 >= 0x1001 )
      {
        v31 = v20;
        freecookie(v118);
        v30 = 1;
        if ( v8 && (*((_BYTE *)&v8->set + 1321) & 0x20) != 0 )
        {
          Curl_infof(v8, "oversized cookie dropped, name/val %zu + %zu bytes", v17, v31);
          v30 = 1;
        }
        goto LABEL_55;
      }
      stra = (char **)v20;
      if ( delim == 95 && (unsigned int)v17 >= 7 && i[1] == 95 )
      {
        if ( curl_strnequal("__Secure-", i, 9) )
        {
          *(_BYTE *)(v124 + 40) |= 1u;
          v14 = (const char *)lena;
          v20 = (unsigned int)stra;
        }
        else
        {
          v32 = curl_strnequal("__Host-", i, 7);
          v14 = (const char *)lena;
          v20 = (unsigned int)stra;
          if ( v32 )
            *(_BYTE *)(v124 + 40) |= 2u;
        }
      }
      if ( !*v139 )
      {
        if ( v19 != 61 )
        {
          v125 = 1;
          v12 = v124;
          v30 = 6;
          goto LABEL_126;
        }
        strstore(v17, v111, (size_t)v115);
        v34 = v145;
        strstore(stra, v113, v116);
        if ( *v139 )
        {
          v93 = *v34 == 0;
          v12 = v124;
          v8 = data;
          if ( !v93 )
          {
            if ( invalid_octets((const char *)v118) || invalid_octets((const char *)v118) )
            {
              v14 = (const char *)lena;
              v30 = 6;
              if ( data && (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
              {
                Curl_infof(data, "invalid octets in name/value, cookie dropped", v115, v117);
                v30 = 6;
                v14 = (const char *)lena;
              }
              goto LABEL_76;
            }
            goto LABEL_111;
          }
          v125 = 1;
        }
        else
        {
          v125 = 1;
          v12 = v124;
          v8 = data;
        }
        v14 = (const char *)lena;
        v30 = 6;
        goto LABEL_126;
      }
      if ( !v20 )
      {
        if ( v17 == (char **)8 )
        {
          v44 = curl_strnequal("httponly", i, 8);
          v14 = (const char *)lena;
          if ( v44 )
          {
            v12 = v124;
            *(_BYTE *)(v124 + 35) = 1;
            goto LABEL_125;
          }
        }
        else if ( v17 == (char **)6 )
        {
          if ( curl_strnequal("secure", i, 6) )
          {
            v14 = (const char *)lena;
            if ( !secure && c->running )
            {
              v30 = 6;
              v125 = 1;
              v12 = v124;
              goto LABEL_126;
            }
            v12 = v124;
            *(_BYTE *)(v124 + 33) = 1;
            goto LABEL_125;
          }
          v14 = (const char *)lena;
        }
        if ( v19 != 61 )
        {
LABEL_124:
          v12 = v124;
          goto LABEL_125;
        }
      }
      if ( v17 != (char **)7 )
      {
        if ( v17 != (char **)6 )
        {
          if ( v17 == (char **)4 )
          {
            if ( curl_strnequal("path", i, 4) )
            {
              strstore(stra, v112, (size_t)v115);
              v30 = 6;
              if ( *v144 )
              {
                v12 = v124;
                Curl_cfree(*(_DWORD *)(v124 + 16));
                v33 = sanitize_cookie_path(*(const char **)(v124 + 12));
                v30 = 6;
                *(_DWORD *)(v124 + 16) = v33;
                v14 = (const char *)lena;
                if ( !v33 )
                {
LABEL_76:
                  v125 = 1;
                  goto LABEL_126;
                }
                goto LABEL_125;
              }
              v125 = 1;
LABEL_55:
              v12 = v124;
LABEL_56:
              v14 = (const char *)lena;
              goto LABEL_126;
            }
            v14 = (const char *)lena;
          }
          goto LABEL_124;
        }
        v35 = curl_strnequal("domain", i, 6);
        if ( !stra || !v35 )
        {
          v14 = (const char *)lena;
          goto LABEL_124;
        }
        v36 = s1 + 1;
        if ( *s1 != 46 )
          v36 = s1;
        strb = (char **)((char *)stra - (*s1 == 46));
        v37 = domain;
        if ( bad_domain((const char *)v118, lena) )
          v37 = ":";
        v38 = v37;
        if ( !v37 )
          v38 = v36;
        delima = Curl_host_is_ipnum(v38);
        domain = v37;
        if ( v37 )
        {
          if ( delima )
          {
            if ( strncmp(v36, v37, (size_t)strb) || strb != (char **)strlen(v37) )
              goto LABEL_141;
          }
          else if ( !cookie_tailmatch(v37, (size_t)v114, v115) )
          {
LABEL_141:
            v30 = 0;
            v12 = v124;
            if ( !v8 )
            {
LABEL_144:
              v125 = 1;
              goto LABEL_146;
            }
            v125 = 1;
            if ( (*((_BYTE *)&v8->set + 1321) & 0x20) != 0 )
            {
              Curl_infof(v8, "skipped cookie with bad tailmatch domain: %s", v36, v117);
              v30 = 0;
              goto LABEL_144;
            }
LABEL_146:
            v39 = 1;
            v14 = (const char *)lenb;
LABEL_147:
            if ( !v39 )
            {
LABEL_126:
              i = v14;
              if ( v30 )
                continue;
              goto LABEL_129;
            }
LABEL_125:
            v30 = 0;
            goto LABEL_126;
          }
        }
        strstore(strb, v114, (size_t)v115);
        v39 = *v143 != 0;
        v40 = v125;
        if ( !*v143 )
          v40 = 1;
        v41 = 0;
        if ( !*v143 )
          v41 = 6;
        v12 = v124;
        if ( (*v143 == 0) | delima )
        {
          v125 = v40;
          v14 = (const char *)lenb;
          v30 = v41;
          goto LABEL_147;
        }
        *(_BYTE *)(v124 + 32) = 1;
        v30 = 0;
        goto LABEL_146;
      }
      if ( curl_strnequal("version", i, 7) )
      {
        v12 = v124;
      }
      else
      {
        v12 = v124;
        if ( !curl_strnequal("max-age", i, 7) )
        {
          if ( curl_strnequal("expires", i, 7) )
          {
            v14 = (const char *)lena;
            if ( (unsigned int)stra > 0x7F || *(_QWORD *)(v124 + 24) )
              goto LABEL_125;
            memcpy(dest, s1, (size_t)stra);
            *((_BYTE *)dest + (_DWORD)stra) = 0;
            v46 = Curl_getdate_capped(dest);
            *(_QWORD *)(v124 + 24) = v46;
            if ( v46 )
            {
              v14 = (const char *)lena;
              if ( v46 < 0 )
              {
                *(_DWORD *)(v124 + 28) = 0;
                *(_DWORD *)(v124 + 24) = 0;
              }
              goto LABEL_125;
            }
            *(_DWORD *)(v124 + 28) = 0;
            *(_DWORD *)(v124 + 24) = 1;
          }
          goto LABEL_111;
        }
        v42 = s1 + 1;
        if ( *s1 != 34 )
          v42 = s1;
        v43 = curlx_strtoofft(v42, 0, 10, v142);
        if ( v43 )
        {
          if ( v43 != 2 )
          {
            v14 = (const char *)lena;
            if ( v43 == 1 )
            {
              *v142 = -1;
              v142[1] = 0x7FFFFFFF;
            }
            goto LABEL_125;
          }
        }
        else
        {
          v47 = *v142;
          v48 = v142[1];
          if ( *(_QWORD *)v142 )
          {
            LODWORD(v141) = ~v140;
            HIDWORD(v141) = 0x7FFFFFFF - (v140 >> 31);
            if ( v141 >= __SPAIR64__(v48, v47) )
            {
              *(_QWORD *)v142 = v140 + __PAIR64__(v48, v47);
            }
            else
            {
              *v142 = -1;
              v142[1] = 0x7FFFFFFF;
            }
            goto LABEL_111;
          }
        }
        v142[1] = 0;
        *v142 = 1;
      }
LABEL_111:
      v14 = (const char *)lena;
      goto LABEL_125;
    }
LABEL_129:
    while ( 1 )
    {
      v45 = *i;
      if ( *i != 32 && v45 != 9 )
        break;
      ++i;
    }
    v14 = i + 1;
    v30 = 6;
    if ( v45 == 59 )
      v30 = 0;
    else
      v14 = i;
  }
  while ( !v30 );
  if ( v30 != 6 )
  {
    v10 = 0;
    goto LABEL_238;
  }
  v10 = 0;
  if ( (v125 & 1) == 0 && domain && !*(_DWORD *)(v12 + 20) )
  {
    v71 = Curl_cstrdup(domain);
    *(_DWORD *)(v12 + 20) = v71;
    v72 = 1;
    if ( v71 )
      v72 = v125;
    v125 = v72;
  }
  if ( (v125 & 1) == 0 && path && !*(_DWORD *)(v12 + 12) )
  {
    v73 = strchr(path, 63);
    if ( v73 )
      v74 = (char *)Curl_memrchr(path, 47, v73 - path);
    else
      v74 = strrchr(path, 47);
    if ( v74 )
    {
      v77 = v74 - path;
      v78 = (void *)Curl_cmalloc(v74 - path + 2);
      *(_DWORD *)(v12 + 12) = v78;
      if ( v78 )
      {
        v79 = v77 + 1;
        memcpy(v78, path, v79);
        *(_BYTE *)(*(_DWORD *)(v12 + 12) + v79) = 0;
        v80 = sanitize_cookie_path(*(const char **)(v12 + 12));
        *(_DWORD *)(v12 + 16) = v80;
        v81 = 1;
        if ( v80 )
          v81 = v125;
        v125 = v81;
      }
      else
      {
        v125 = 1;
      }
    }
    v10 = 0;
  }
  if ( (v125 & 1) != 0 || !*(_DWORD *)(v12 + 4) )
  {
LABEL_303:
    freecookie(v118);
    return (Cookie *)v10;
  }
  ++v8->req.setcookies;
  v30 = 0;
LABEL_238:
  if ( !v30 )
  {
LABEL_241:
    v82 = *(_BYTE *)(v12 + 40);
    if ( (v82 & 1) != 0 && !*(_BYTE *)(v12 + 33) )
      goto LABEL_303;
    if ( (v82 & 2) != 0 )
    {
      if ( !*(_BYTE *)(v12 + 33) )
        goto LABEL_303;
      v103 = *(const char **)(v12 + 12);
      if ( !v103 || strcmp(v103, "/") || *(_BYTE *)(v12 + 32) )
        goto LABEL_303;
    }
    running = c->running;
    if ( !running && c->newsession && !*(_QWORD *)(v12 + 24) )
      goto LABEL_303;
    *(_BYTE *)(v12 + 34) = running;
    v84 = c->lastct + 1;
    c->lastct = v84;
    *(_DWORD *)(v12 + 36) = v84;
    if ( !noexpire )
      remove_expired((CookieInfo *)v118);
    strc = cookiehash(*(const char *const *)(v12 + 20));
    v85 = c->cookies[strc];
    if ( v85 )
    {
      lend = 0;
      v10 = 0;
      delimb = 0;
      while ( 1 )
      {
        v86 = v85;
        v87 = curl_strequal(v85->name, *(_DWORD *)(v12 + 4));
        v88 = (char *)v86;
        if ( !v87 )
          goto LABEL_249;
        v89 = v86->domain;
        if ( v89 )
        {
          if ( !*(_DWORD *)(v124 + 20) )
            goto LABEL_249;
          v90 = curl_strequal(v89, *(_DWORD *)(v124 + 20));
          v88 = (char *)v86;
          if ( !v90 )
            goto LABEL_249;
        }
        else if ( *(_DWORD *)(v124 + 20) )
        {
          goto LABEL_249;
        }
        v94 = (const char *)*((_DWORD *)v88 + 4);
        if ( v94 )
        {
          v95 = *(_DWORD *)(v124 + 16);
          if ( v95 )
          {
            if ( v88[33] && !*(_BYTE *)(v124 + 33) && !secure )
            {
              s1b = v88;
              v96 = strchr(v94 + 1, 47);
              v97 = v96 ? v96 - v94 : strlen(v94);
              v102 = curl_strnequal(v94, v95, v97);
              v88 = s1b;
              if ( v102 )
              {
                if ( data && (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
                  Curl_infof(
                    data,
                    "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
                    *(_DWORD *)(v124 + 4),
                    *(_DWORD *)(v124 + 20));
                goto LABEL_226;
              }
            }
          }
        }
LABEL_249:
        if ( lend )
        {
          v12 = v124;
          goto LABEL_251;
        }
        v12 = v124;
        v91 = v88;
        lend = 0;
        if ( !curl_strequal(*((_DWORD *)v88 + 1), *(_DWORD *)(v124 + 4)) )
        {
          v88 = v91;
          goto LABEL_251;
        }
        v92 = *((_DWORD *)v91 + 5);
        v88 = v91;
        if ( v92 )
        {
          if ( !*(_DWORD *)(v124 + 20) )
          {
            v98 = (int)delimb;
            if ( ((unsigned __int8)delimb & 1) == 0 )
              goto LABEL_282;
LABEL_277:
            v99 = v98;
            v100 = *((_DWORD *)v88 + 4);
            if ( v100
              && *(_DWORD *)(v124 + 16)
              && (s1d = v88, v101 = curl_strequal(v100, *(_DWORD *)(v124 + 16)), v88 = s1d, !v101) )
            {
              v98 = 0;
            }
            else
            {
              v98 = v99;
              if ( (*((_DWORD *)v88 + 4) != 0) == (*(_DWORD *)(v124 + 16) == 0) )
                v98 = 0;
            }
            goto LABEL_282;
          }
          if ( !curl_strequal(v92, *(_DWORD *)(v124 + 20)) )
          {
            v98 = (int)delimb;
            v88 = v91;
            if ( ((unsigned __int8)delimb & 1) == 0 )
              goto LABEL_282;
            goto LABEL_277;
          }
          v88 = v91;
          v93 = v91[32] == *(_BYTE *)(v124 + 32);
        }
        else
        {
          v93 = *(_DWORD *)(v124 + 20) == 0;
        }
        v98 = (unsigned __int8)delimb;
        if ( v93 )
          v98 = 1;
        if ( (v98 & 1) != 0 )
          goto LABEL_277;
LABEL_282:
        delimb = (char *)v98;
        if ( (v98 & 1) != 0 )
        {
          if ( *(_BYTE *)(v124 + 34) )
          {
            v10 = v88;
            lend = v124;
          }
          else
          {
            v10 = v88;
            lend = v124;
            if ( v88[34] )
              goto LABEL_226;
          }
        }
LABEL_251:
        v85 = *(Cookie **)v88;
        if ( !*(_DWORD *)v88 )
          goto LABEL_306;
      }
    }
    LOBYTE(delimb) = 0;
    v10 = 0;
    lend = 0;
    v88 = 0;
LABEL_306:
    s1c = v88;
    if ( lend )
    {
      *(_DWORD *)lend = *(_DWORD *)v10;
      *(_DWORD *)(lend + 36) = *((_DWORD *)v10 + 9);
      Curl_cfree(*((_DWORD *)v10 + 1));
      Curl_cfree(*((_DWORD *)v10 + 2));
      Curl_cfree(*((_DWORD *)v10 + 5));
      Curl_cfree(*((_DWORD *)v10 + 3));
      Curl_cfree(*((_DWORD *)v10 + 4));
      *(_OWORD *)(v10 + 28) = *(_OWORD *)(lend + 28);
      v105 = *(_OWORD *)lend;
      *((_OWORD *)v10 + 1) = *(_OWORD *)(lend + 16);
      *(_OWORD *)v10 = v105;
      Curl_cfree(lend);
    }
    else
    {
      v10 = (char *)v12;
    }
    v106 = (char)delimb;
    if ( data )
    {
      v106 = (char)delimb;
      if ( c->running && (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
      {
        v107 = "Replaced";
        if ( ((unsigned __int8)delimb & 1) == 0 )
          v107 = "Added";
        Curl_infof(data, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld", v107, *((_DWORD *)v10 + 1));
        v106 = (char)delimb;
      }
    }
    if ( (v106 & 1) == 0 )
    {
      v108 = (char *)&c->cookies[strc];
      if ( s1c )
        v108 = s1c;
      *(_DWORD *)v108 = v10;
      ++c->numcookies;
    }
    LODWORD(v109) = *((_DWORD *)v10 + 6);
    v110 = *((_DWORD *)v10 + 7);
    if ( *((_QWORD *)v10 + 3) )
    {
      HIDWORD(v109) = *((_DWORD *)v10 + 7);
      if ( v109 < c->next_expiration )
      {
        LODWORD(c->next_expiration) = v109;
        HIDWORD(c->next_expiration) = v110;
      }
    }
  }
  return (Cookie *)v10;
}
