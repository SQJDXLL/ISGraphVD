Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  time_t v8; // eax
  Cookie *v9; // esi
  int v10; // ebp
  int v11; // eax
  int v12; // edi
  const char *v13; // edx
  const char *v14; // ebp
  const char *i; // esi
  size_t v16; // eax
  unsigned int v17; // edi
  char v18; // cl
  size_t v19; // eax
  size_t v20; // ecx
  const char *v21; // edx
  const char *v22; // ebp
  char v23; // cl
  size_t v24; // ebp
  char v25; // cl
  int v26; // eax
  int v27; // eax
  char *v28; // eax
  const char *v29; // eax
  const char *v30; // esi
  size_t v31; // eax
  int v32; // eax
  const char *v33; // eax
  int v34; // eax
  int v35; // eax
  const char *v36; // edi
  size_t v37; // ebp
  _BYTE *v38; // eax
  const char *v39; // eax
  Curl_easy *v40; // esi
  int v41; // edi
  const char *v42; // ebp
  size_t v43; // eax
  char is_ipnum; // cl
  int v45; // eax
  const char *v46; // eax
  int v47; // eax
  char v48; // si
  int v49; // eax
  int v50; // eax
  unsigned int v51; // eax
  unsigned int v52; // ecx
  char v53; // cl
  char *v54; // ebp
  char *v55; // eax
  char *v56; // eax
  char *v57; // eax
  const char *v58; // edi
  int v59; // edx
  int v60; // eax
  unsigned __int8 v61; // bp
  int v62; // ebp
  const char *v63; // eax
  char *v64; // eax
  int v65; // ecx
  bool v66; // zf
  unsigned __int8 v67; // di
  int v68; // eax
  Cookie *v69; // ebp
  int v70; // eax
  char v71; // di
  int v72; // eax
  int v73; // ebp
  int v74; // eax
  Cookie *v75; // ebp
  int v76; // eax
  int v77; // eax
  char *v78; // eax
  int v79; // ebp
  int v80; // eax
  _BOOL4 v81; // eax
  char v82; // al
  const char *v83; // esi
  int v84; // eax
  char v85; // bp
  char *v86; // eax
  char *v87; // eax
  int v88; // edi
  void *v89; // eax
  size_t v90; // edi
  char *v91; // eax
  char v92; // al
  bool running; // al
  int v94; // eax
  Cookie *v95; // esi
  Cookie *next; // eax
  Cookie **v97; // edi
  Cookie *v98; // ebp
  char *v99; // eax
  int v100; // ecx
  const char *spath; // esi
  char *v102; // eax
  size_t v103; // eax
  char *v104; // eax
  int v105; // ecx
  bool v106; // zf
  int v107; // eax
  char *v108; // eax
  char *v109; // ecx
  int v110; // eax
  const char *v111; // eax
  char v113; // al
  char v114; // di
  const char *v115; // ecx
  Cookie **p_next; // eax
  curl_off_t v117; // rax
  int expires_high; // ecx
  const char *v119; // [esp-10h] [ebp-CCh]
  const char *v120; // [esp-10h] [ebp-CCh]
  size_t v121; // [esp-Ch] [ebp-C8h]
  const char *v122; // [esp-8h] [ebp-C4h]
  size_t v123; // [esp-8h] [ebp-C4h]
  int v124; // [esp-4h] [ebp-C0h]
  int v125; // [esp+0h] [ebp-BCh]
  unsigned __int8 v126; // [esp+0h] [ebp-BCh]
  int v127; // [esp+4h] [ebp-B8h]
  const char *s; // [esp+8h] [ebp-B4h]
  const char *sa; // [esp+8h] [ebp-B4h]
  const char *sb; // [esp+8h] [ebp-B4h]
  Cookie *sc; // [esp+8h] [ebp-B4h]
  size_t v132; // [esp+Ch] [ebp-B0h]
  size_t v133; // [esp+Ch] [ebp-B0h]
  char v134; // [esp+Ch] [ebp-B0h]
  char v135; // [esp+Ch] [ebp-B0h]
  size_t v136; // [esp+Ch] [ebp-B0h]
  char v137; // [esp+Ch] [ebp-B0h]
  size_t v138; // [esp+Ch] [ebp-B0h]
  int v140; // [esp+14h] [ebp-A8h]
  int v141; // [esp+14h] [ebp-A8h]
  char v142; // [esp+18h] [ebp-A4h]
  unsigned int *v143; // [esp+1Ch] [ebp-A0h]
  __int64 v144; // [esp+24h] [ebp-98h]
  char *dest[36]; // [esp+2Ch] [ebp-90h] BYREF

  v124 = 134218452;
  v8 = time(0);
  v9 = 0;
  if ( data->req.setcookies > 0x31u )
    return v9;
  v10 = v8;
  v11 = Curl_ccalloc(1, 44);
  if ( !v11 )
    return v9;
  v12 = v11;
  v140 = v10;
  v127 = v11;
  if ( !httpheader )
  {
    dest[0] = 0;
    v54 = lineptr;
    if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
    {
      v54 = lineptr + 10;
      *(_BYTE *)(v12 + 35) = 1;
    }
    if ( *v54 == 35 )
      goto LABEL_126;
    v55 = strchr(v54, 13);
    if ( v55 )
      *v55 = 0;
    v56 = strchr(v54, 10);
    if ( v56 )
      *v56 = 0;
    v57 = strtok_r(v54, "\t", dest);
    if ( !v57 )
      goto LABEL_266;
    v58 = v57;
    v59 = 0;
    v60 = 0;
    while ( 1 )
    {
      switch ( v60 )
      {
        case 0:
          v61 = v59;
          if ( *v58 == 46 )
            ++v58;
          v77 = Curl_cstrdup(v58);
          *(_DWORD *)(v127 + 20) = v77;
          v65 = v61;
          if ( !v77 )
            v65 = 1;
          v62 = 0;
          goto LABEL_166;
        case 1:
          v125 = v59;
          *(_BYTE *)(v127 + 32) = curl_strequal(v58, "TRUE") != 0;
          v62 = 1;
          goto LABEL_174;
        case 2:
          v126 = v59;
          if ( !strcmp("TRUE", v58) || !strcmp("FALSE", v58) )
          {
            v73 = Curl_cstrdup("/");
            *(_DWORD *)(v127 + 12) = v73;
            v74 = Curl_cstrdup("/");
            v9 = 0;
            v59 = v126;
            if ( !v74 )
              v59 = 1;
            if ( !v73 )
              v59 = 1;
            *(_DWORD *)(v127 + 16) = v74;
LABEL_157:
            v75 = (Cookie *)v59;
            *(_BYTE *)(v127 + 33) = 0;
            if ( !curl_strequal(v58, "TRUE") )
              goto LABEL_161;
            if ( secure || (v76 = (int)c, c->running) )
            {
              *(_BYTE *)(v127 + 33) = 1;
LABEL_161:
              v125 = (int)v75;
              v62 = 3;
              goto LABEL_174;
            }
            LOBYTE(v76) = 1;
            v62 = 3;
          }
          else
          {
            v63 = (const char *)Curl_cstrdup(v58);
            *(_DWORD *)(v127 + 12) = v63;
            if ( v63 )
            {
              v64 = sanitize_cookie_path(v63);
              LOBYTE(v65) = v126;
              *(_DWORD *)(v127 + 16) = v64;
              v66 = v64 == 0;
              v62 = 2;
LABEL_149:
              v65 = (unsigned __int8)v65;
              if ( v66 )
                v65 = 1;
LABEL_166:
              v125 = v65;
              goto LABEL_174;
            }
            v76 = 1;
            v62 = 2;
          }
          v125 = v76;
LABEL_174:
          v78 = strtok_r(0, "\t", dest);
          v59 = v125;
          v79 = v62 + 1;
          v58 = v78;
          v60 = v79;
          if ( (v125 & 1) != 0 || !v58 )
          {
            if ( v79 == 6 )
            {
              v80 = Curl_cstrdup(&L_str_22);
              LOBYTE(v59) = v125;
              *(_DWORD *)(v127 + 8) = v80;
              v66 = v80 == 0;
              v81 = v80 == 0;
              if ( v66 )
                LOBYTE(v59) = 1;
              v60 = v81 ^ 7;
            }
            if ( (v59 & 1) == 0 && v60 == 7 )
              goto LABEL_211;
            goto LABEL_266;
          }
          break;
        case 3:
          goto LABEL_157;
        case 4:
          v119 = v58;
          v67 = v59;
          v68 = curlx_strtoofft(v119, 0, 10, v127 + 24);
          v62 = 4;
          v65 = v67;
          if ( v68 )
            v65 = 1;
          goto LABEL_166;
        case 5:
          v69 = (Cookie *)v59;
          v70 = Curl_cstrdup(v58);
          *(_DWORD *)(v127 + 4) = v70;
          if ( v70 )
          {
            v125 = (int)v69;
            if ( curl_strnequal("__Secure-", v70, 9) )
            {
              *(_BYTE *)(v127 + 40) |= 1u;
            }
            else if ( curl_strnequal("__Host-", *(_DWORD *)(v127 + 4), 7) )
            {
              *(_BYTE *)(v127 + 40) |= 2u;
            }
          }
          else
          {
            v125 = 1;
          }
          v62 = 5;
          goto LABEL_174;
        case 6:
          v120 = v58;
          v71 = v59;
          v72 = Curl_cstrdup(v120);
          v66 = v72 == 0;
          v62 = 6;
          *(_DWORD *)(v127 + 8) = v72;
          LOBYTE(v65) = v71;
          goto LABEL_149;
        default:
          v125 = v59;
          v62 = v60;
          goto LABEL_174;
      }
    }
  }
  if ( strlen(lineptr) > 0x1388 )
  {
LABEL_126:
    Curl_cfree(v12);
    return v9;
  }
  v142 = 0;
  v143 = (unsigned int *)(v12 + 24);
  LODWORD(v144) = ~v10;
  HIDWORD(v144) = 0x7FFFFFFF - (v10 >> 31);
  v13 = lineptr;
  while ( 1 )
  {
    v14 = v13 + 1;
    for ( i = v13; *i == 32 || *i == 9; ++i )
      ++v14;
    LOBYTE(v125) = *i;
    v16 = strcspn(i, ";\t\r\n=");
    if ( !v16 )
    {
      v13 = i;
      goto LABEL_114;
    }
    v13 = &i[v16];
    v17 = v16;
    while ( 1 )
    {
      v18 = i[v17 - 1];
      if ( v18 != 32 && v18 != 9 )
        break;
      if ( !--v17 )
      {
        v17 = 0;
        break;
      }
    }
    if ( *v13 == 61 )
    {
      v132 = v16;
      s = &i[v16 + 1];
      v19 = strcspn(s, ";\r\n");
      v20 = v19 + v132;
      v133 = v19 + v132;
      if ( v19 )
      {
        v21 = s;
        v22 = &v14[v20];
        while ( 1 )
        {
          v23 = *(v22 - 1);
          if ( v23 != 32 && v23 != 9 )
            break;
          --v19;
          --v22;
          if ( !v19 )
            goto LABEL_30;
        }
        while ( *v21 == 32 || *v21 == 9 )
        {
          ++v21;
          if ( !--v19 )
          {
            v21 = v22;
            goto LABEL_30;
          }
        }
        v24 = v19;
      }
      else
      {
        v21 = s;
LABEL_30:
        v24 = 0;
      }
      sa = v21;
      if ( memchr(v21, 9, v24) )
      {
        freecookie((Cookie *)v125);
        v9 = 0;
        if ( (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
          Curl_infof(data, "cookie contains TAB, dropping", v122, v124);
        return v9;
      }
      v25 = 1;
      v13 = &i[v133 + 1];
    }
    else
    {
      v24 = 0;
      v25 = 0;
      sa = 0;
    }
    if ( v17 > 0xFFE || v24 > 0xFFE || v24 + v17 >= 0x1001 )
    {
      freecookie((Cookie *)v125);
      v9 = 0;
      if ( (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
        Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes", v17, v24);
      return v9;
    }
    v66 = (_BYTE)v125 == 95;
    v125 = (int)v13;
    if ( v66 && v17 >= 7 && i[1] == 95 )
    {
      v134 = v25;
      if ( curl_strnequal("__Secure-", i, 9) )
      {
        *(_BYTE *)(v127 + 40) |= 1u;
        v13 = (const char *)v125;
        v25 = v134;
      }
      else
      {
        v26 = curl_strnequal("__Host-", i, 7);
        v13 = (const char *)v125;
        v25 = v134;
        if ( v26 )
          *(_BYTE *)(v127 + 40) |= 2u;
      }
    }
    if ( !*(_DWORD *)(v127 + 4) )
      break;
    if ( !v24 )
    {
      if ( v17 == 8 )
      {
        v137 = v25;
        v45 = curl_strnequal("httponly", i, 8);
        v25 = v137;
        v13 = (const char *)v125;
        if ( v45 )
        {
          *(_BYTE *)(v127 + 35) = 1;
          goto LABEL_114;
        }
      }
      else if ( v17 == 6 )
      {
        v135 = v25;
        v32 = curl_strnequal("secure", i, 6);
        v25 = v135;
        v13 = (const char *)v125;
        if ( v32 )
        {
          if ( !secure && c->running )
            goto LABEL_261;
          *(_BYTE *)(v127 + 33) = 1;
          goto LABEL_114;
        }
      }
      if ( !v25 )
        goto LABEL_114;
    }
    if ( v17 == 7 )
    {
      if ( !curl_strnequal("version", i, 7) )
      {
        if ( curl_strnequal("max-age", i, 7) )
        {
          v33 = sa + 1;
          if ( *sa != 34 )
            v33 = sa;
          v34 = curlx_strtoofft(v33, 0, 10, v143);
          if ( v34 )
          {
            if ( v34 != 2 )
            {
              v13 = (const char *)v125;
              if ( v34 == 1 )
              {
                v143[1] = 0x7FFFFFFF;
                *v143 = -1;
              }
              goto LABEL_114;
            }
LABEL_112:
            v143[1] = 0;
            *v143 = 1;
          }
          else
          {
            v51 = *v143;
            v52 = v143[1];
            if ( !*(_QWORD *)v143 )
              goto LABEL_112;
            if ( v144 >= __SPAIR64__(v52, v51) )
            {
              *(_QWORD *)v143 = v140 + __PAIR64__(v52, v51);
            }
            else
            {
              v143[1] = 0x7FFFFFFF;
              *v143 = -1;
            }
          }
        }
        else if ( curl_strnequal("expires", i, 7) )
        {
          v13 = (const char *)v125;
          if ( v24 > 0x7F || *(_QWORD *)v143 )
            goto LABEL_114;
          memcpy(dest, sa, v24);
          *((_BYTE *)dest + v24) = 0;
          v47 = Curl_getdate_capped(dest);
          *(_QWORD *)v143 = v47;
          if ( v47 )
          {
            v13 = (const char *)v125;
            if ( v47 < 0 )
            {
              v143[1] = 0;
              *v143 = 0;
            }
            goto LABEL_114;
          }
          v143[1] = 0;
          *v143 = 1;
        }
      }
LABEL_113:
      v13 = (const char *)v125;
      goto LABEL_114;
    }
    if ( v17 != 6 )
    {
      if ( v17 != 4 )
        goto LABEL_114;
      if ( curl_strnequal("path", i, 4) )
      {
        Curl_cfree(*(_DWORD *)(v127 + 12));
        v27 = Curl_strndup(sa, v24);
        *(_DWORD *)(v127 + 12) = v27;
        if ( !v27 )
          goto LABEL_261;
        Curl_cfree(*(_DWORD *)(v127 + 16));
        v28 = sanitize_cookie_path(*(const char **)(v127 + 12));
        v13 = (const char *)v125;
        *(_DWORD *)(v127 + 16) = v28;
        if ( !v28 )
          goto LABEL_261;
        goto LABEL_114;
      }
      goto LABEL_113;
    }
    v35 = curl_strnequal("domain", i, 6);
    if ( !v24 || !v35 )
      goto LABEL_113;
    v36 = sa + 1;
    if ( *sa != 46 )
      v36 = sa;
    v37 = v24 - (*sa == 46);
    sb = v36;
    if ( v37 == 9 && curl_strnequal(v36, "localhost", 9)
      || (v38 = memchr(v36, 46, v37)) != 0 && (unsigned int)(&v36[v37] - v38) > 1 )
    {
      v46 = v36;
      if ( domain )
        v46 = domain;
      is_ipnum = Curl_host_is_ipnum(v46);
      v39 = domain;
      v40 = data;
      v41 = v127;
      if ( !domain )
      {
        domain = 0;
        goto LABEL_104;
      }
      if ( !is_ipnum )
      {
LABEL_93:
        domain = v39;
        if ( !cookie_tailmatch(v39, v121, v122) )
          goto LABEL_95;
        is_ipnum = 0;
        goto LABEL_104;
      }
    }
    else
    {
      v66 = (unsigned __int8)Curl_host_is_ipnum(":") == 0;
      v39 = ":";
      v40 = data;
      v41 = v127;
      if ( v66 )
        goto LABEL_93;
    }
    v123 = v37;
    v136 = v37;
    v42 = v39;
    domain = v39;
    if ( strncmp(sb, v39, v123) || (v43 = strlen(v42), v37 = v136, is_ipnum = 1, v136 != v43) )
    {
LABEL_95:
      v142 = 1;
      if ( (*((_BYTE *)&v40->set + 1321) & 0x20) != 0 )
        Curl_infof(v40, "skipped cookie with bad tailmatch domain: %s", sb, v124);
      goto LABEL_113;
    }
LABEL_104:
    v48 = is_ipnum;
    Curl_cfree(*(_DWORD *)(v41 + 20));
    v49 = Curl_strndup(sb, v37);
    *(_DWORD *)(v41 + 20) = v49;
    if ( !v48 && v49 )
    {
      *(_BYTE *)(v41 + 32) = 1;
      goto LABEL_113;
    }
    v13 = (const char *)v125;
    if ( v49 )
      goto LABEL_114;
    v50 = 6;
    v142 = 1;
LABEL_119:
    if ( v50 )
      goto LABEL_183;
  }
  if ( !v25 )
    goto LABEL_261;
  Curl_cfree(0);
  *(_DWORD *)(v127 + 4) = Curl_strndup(i, v17);
  Curl_cfree(*(_DWORD *)(v127 + 8));
  v29 = (const char *)Curl_strndup(sa, v24);
  *(_DWORD *)(v127 + 8) = v29;
  if ( !v29 )
    goto LABEL_261;
  v30 = *(const char **)(v127 + 4);
  if ( !v30 )
    goto LABEL_261;
  if ( v29[strcspn(v29, invalid_octets_badoctets)]
    || (v31 = strcspn(v30, invalid_octets_badoctets), v13 = (const char *)v125, v30[v31]) )
  {
    if ( (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
      Curl_infof(data, "invalid octets in name/value, cookie dropped", v122, v124);
LABEL_261:
    freecookie((Cookie *)v125);
    return 0;
  }
LABEL_114:
  v41 = v127;
  ++v13;
  while ( 1 )
  {
    v53 = *(v13 - 1);
    if ( v53 != 32 && v53 != 9 )
      break;
    ++v13;
  }
  v50 = 0;
  if ( v53 == 59 )
    goto LABEL_119;
LABEL_183:
  v82 = v142;
  if ( (v142 & 1) != 0 || !domain )
  {
    v83 = path;
  }
  else
  {
    v83 = path;
    if ( !*(_DWORD *)(v41 + 20) )
    {
      v84 = Curl_cstrdup(domain);
      *(_DWORD *)(v41 + 20) = v84;
      v66 = v84 == 0;
      v82 = v142;
      if ( v66 )
        v82 = 1;
    }
  }
  if ( (v82 & 1) == 0 && v83 && !*(_DWORD *)(v41 + 12) )
  {
    v85 = v82;
    v86 = strchr(v83, 63);
    if ( v86 )
      v87 = (char *)Curl_memrchr(v83, 47, v86 - v83);
    else
      v87 = strrchr(v83, 47);
    if ( v87 )
    {
      v88 = v87 - v83;
      v89 = (void *)Curl_cmalloc(v87 - v83 + 2);
      *(_DWORD *)(v127 + 12) = v89;
      if ( !v89 )
        goto LABEL_261;
      v90 = v88 + 1;
      memcpy(v89, path, v90);
      *(_BYTE *)(*(_DWORD *)(v127 + 12) + v90) = 0;
      v91 = sanitize_cookie_path(*(const char **)(v127 + 12));
      *(_DWORD *)(v127 + 16) = v91;
      v66 = v91 == 0;
      v82 = v85;
      if ( v66 )
        v82 = 1;
    }
    else
    {
      v82 = v85;
    }
  }
  if ( (v82 & 1) != 0 || !*(_DWORD *)(v127 + 4) )
    goto LABEL_261;
  v9 = 0;
  ++data->req.setcookies;
LABEL_211:
  v92 = *(_BYTE *)(v127 + 40);
  if ( (v92 & 1) != 0 && !*(_BYTE *)(v127 + 33)
    || (v92 & 2) != 0
    && (!*(_BYTE *)(v127 + 33) || (v111 = *(const char **)(v127 + 12)) == 0
                               || strcmp(v111, "/")
                               || *(_BYTE *)(v127 + 32))
    || !(running = c->running) && c->newsession && !*(_QWORD *)(v127 + 24) )
  {
LABEL_266:
    freecookie((Cookie *)v125);
    return v9;
  }
  *(_BYTE *)(v127 + 34) = running;
  v94 = c->lastct + 1;
  c->lastct = v94;
  *(_DWORD *)(v127 + 36) = v94;
  if ( !noexpire )
    remove_expired((CookieInfo *)v125);
  v95 = (Cookie *)v127;
  v138 = cookiehash(*(const char *const *)(v127 + 20));
  next = c->cookies[v138];
  if ( next )
  {
    v97 = 0;
    sc = 0;
    v125 = 0;
    while ( 1 )
    {
      v98 = next;
      if ( !curl_strequal(next->name, v95->name) )
        goto LABEL_234;
      v99 = v98->domain;
      v100 = *(_DWORD *)(v127 + 20);
      if ( v99 )
      {
        if ( !v100 || !curl_strequal(v99, *(_DWORD *)(v127 + 20)) )
          goto LABEL_234;
      }
      else if ( v100 )
      {
        goto LABEL_234;
      }
      spath = v98->spath;
      if ( spath && *(_DWORD *)(v127 + 16) && v98->secure && !*(_BYTE *)(v127 + 33) && !secure )
      {
        v141 = *(_DWORD *)(v127 + 16);
        v102 = strchr(spath + 1, 47);
        v103 = v102 ? v102 - spath : strlen(spath);
        if ( curl_strnequal(spath, v141, v103) )
        {
          if ( data && (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
            Curl_infof(
              data,
              "cookie '%s' for domain '%s' dropped, would overlay an existing cookie",
              *(_DWORD *)(v127 + 4),
              *(_DWORD *)(v127 + 20));
          goto LABEL_261;
        }
      }
LABEL_234:
      if ( v97 )
      {
        v95 = (Cookie *)v127;
        goto LABEL_236;
      }
      v95 = (Cookie *)v127;
      v97 = 0;
      if ( !curl_strequal(v98->name, *(_DWORD *)(v127 + 4)) )
        goto LABEL_236;
      v104 = v98->domain;
      v105 = *(_DWORD *)(v127 + 20);
      if ( v104 )
      {
        if ( !v105 || !curl_strequal(v104, *(_DWORD *)(v127 + 20)) )
        {
          v107 = v125;
          goto LABEL_247;
        }
        v106 = v98->tailmatch == *(_BYTE *)(v127 + 32);
      }
      else
      {
        v106 = v105 == 0;
      }
      v107 = (unsigned __int8)v125;
      if ( v106 )
        v107 = 1;
LABEL_247:
      v125 = v107;
      if ( (v107 & 1) != 0 )
      {
        v108 = v98->spath;
        v97 = 0;
        v109 = 0;
        if ( !v108 )
          goto LABEL_253;
        if ( !*(_DWORD *)(v127 + 16) )
        {
          v109 = v98->spath;
LABEL_253:
          v110 = (unsigned __int8)v125;
          if ( (v109 == 0) != (*(_DWORD *)(v127 + 16) == 0) )
            v110 = 0;
          v125 = v110;
          if ( (v110 & 1) != 0 )
          {
            if ( *(_BYTE *)(v127 + 34) )
            {
              sc = v98;
              v97 = (Cookie **)v127;
            }
            else
            {
              v97 = (Cookie **)v127;
              sc = v98;
              if ( v98->livecookie )
                goto LABEL_261;
            }
          }
          goto LABEL_236;
        }
        if ( curl_strequal(v108, *(_DWORD *)(v127 + 16)) )
        {
          v109 = v98->spath;
          goto LABEL_253;
        }
        v125 = 0;
        v97 = 0;
      }
LABEL_236:
      next = v98->next;
      if ( !v98->next )
      {
        if ( v97 )
        {
          *v97 = sc->next;
          v97[9] = (Cookie *)sc->creationtime;
          Curl_cfree(sc->name);
          Curl_cfree(sc->value);
          Curl_cfree(sc->domain);
          Curl_cfree(sc->path);
          Curl_cfree(sc->spath);
          qmemcpy(sc, v97, sizeof(Cookie));
          Curl_cfree(v97);
        }
        else
        {
          sc = v95;
        }
        v113 = v125;
        goto LABEL_276;
      }
    }
  }
  v98 = 0;
  v113 = 0;
  sc = (Cookie *)v127;
LABEL_276:
  if ( data )
  {
    v114 = v113;
    if ( c->running && (*((_BYTE *)&data->set + 1321) & 0x20) != 0 )
    {
      v115 = "Replaced";
      if ( (v113 & 1) == 0 )
        v115 = "Added";
      Curl_infof(data, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld", v115, sc->name);
      v113 = v114;
    }
  }
  if ( (v113 & 1) == 0 )
  {
    p_next = &c->cookies[v138];
    if ( v98 )
      p_next = &v98->next;
    *p_next = sc;
    ++c->numcookies;
  }
  v9 = sc;
  LODWORD(v117) = sc->expires;
  expires_high = HIDWORD(sc->expires);
  if ( sc->expires )
  {
    HIDWORD(v117) = HIDWORD(sc->expires);
    if ( v117 < c->next_expiration )
    {
      LODWORD(c->next_expiration) = v117;
      HIDWORD(c->next_expiration) = expires_high;
    }
  }
  return v9;
}
