Cookie *__cdecl Curl_cookie_add(
        Curl_easy *data,
        CookieInfo *c,
        bool httpheader,
        bool noexpire,
        const char *lineptr,
        const char *domain,
        const char *path,
        bool secure)
{
  char *v8; // edi
  char v9; // dl
  __int64 expires; // rax
  unsigned int v11; // ebp
  unsigned int v12; // esi
  const char *v13; // esi
  char v14; // cl
  bool v15; // cl
  Cookie *v16; // esi
  unsigned __int8 prefix; // al
  char *v19; // eax
  char *v20; // eax
  int v21; // esi
  char *v22; // edi
  char *v23; // ecx
  int v24; // eax
  int v25; // esi
  bool v26; // bp
  int v27; // eax
  char *v28; // ecx
  int (__cdecl *v29)(char *); // esi
  int v30; // eax
  const char *v31; // eax
  char *v32; // eax
  char *v33; // esi
  bool v34; // bp
  bool v35; // si
  int v36; // eax
  int v37; // esi
  int v38; // eax
  int v39; // esi
  int v40; // eax
  int v41; // eax
  int v42; // esi
  char v43; // bp
  char v44; // al
  int v45; // eax
  const char *v46; // eax
  const char *name; // edi
  _BYTE *v48; // eax
  int v49; // eax
  int v50; // eax
  int v51; // eax
  char *v52; // eax
  int v53; // eax
  int v54; // eax
  char *v55; // eax
  bool running; // al
  int v57; // eax
  Cookie *v58; // esi
  Cookie *v59; // edi
  Cookie *next; // eax
  char *v61; // eax
  char *v62; // edx
  char *spath; // edx
  char *v64; // eax
  char *v65; // edx
  unsigned int v66; // esi
  unsigned int v67; // ebx
  char is_ipnum; // di
  int v69; // eax
  char *v70; // eax
  char *v71; // eax
  const char *v72; // edx
  char *v73; // ecx
  size_t v74; // eax
  int v75; // eax
  char *v76; // edx
  char *v77; // eax
  char *v78; // eax
  int v79; // esi
  size_t v80; // edi
  char *v81; // eax
  char *v82; // eax
  curl_off_t v83; // rax
  int v84; // eax
  bool v85; // zf
  bool v86; // cl
  char valuep; // [esp+10h] [ebp-ECh]
  char valuepe; // [esp+10h] [ebp-ECh]
  size_t valuepa; // [esp+10h] [ebp-ECh]
  char *valuepb; // [esp+10h] [ebp-ECh]
  bool valuepc; // [esp+10h] [ebp-ECh]
  __int64 valuepd; // [esp+10h] [ebp-ECh]
  const char *ptr; // [esp+18h] [ebp-E4h]
  bool ptra; // [esp+18h] [ebp-E4h]
  char ptrb; // [esp+18h] [ebp-E4h]
  Cookie *co; // [esp+1Ch] [ebp-E0h]
  bool reject; // [esp+20h] [ebp-DCh]
  char *rejecta; // [esp+20h] [ebp-DCh]
  char *rejectb; // [esp+20h] [ebp-DCh]
  char *myhash; // [esp+24h] [ebp-D8h]
  size_t myhasha; // [esp+24h] [ebp-D8h]
  char s2; // [esp+28h] [ebp-D4h]
  char *s2a; // [esp+28h] [ebp-D4h]
  bool s2b; // [esp+28h] [ebp-D4h]
  char *s2c; // [esp+28h] [ebp-D4h]
  char *s2d; // [esp+28h] [ebp-D4h]
  char *s2e; // [esp+28h] [ebp-D4h]
  int now; // [esp+40h] [ebp-BCh]
  bool v110; // [esp+49h] [ebp-B3h]
  bool badcookie; // [esp+4Bh] [ebp-B1h]
  char *tok_buf; // [esp+58h] [ebp-A4h] BYREF
  char date[128]; // [esp+5Ch] [ebp-A0h] BYREF
  unsigned int v114; // [esp+DCh] [ebp-20h]

  v8 = (char *)lineptr;
  v110 = httpheader;
  v114 = __readgsdword(0x14u);
  now = time(0);
  if ( data->req.setcookies > 0x31u )
    return 0;
  co = (Cookie *)Curl_ccalloc(1, 44);
  if ( !co )
    return 0;
  if ( httpheader )
  {
    badcookie = 0;
    if ( strlen(lineptr) <= 0x1388 )
    {
      v9 = *lineptr;
      if ( *lineptr )
      {
        while ( 1 )
        {
          if ( v9 != 32 )
          {
            valuep = v9;
            if ( v9 != 9 )
            {
              LODWORD(expires) = strcspn(v8, ";\t\r\n=");
              BYTE4(expires) = valuep;
              v11 = expires;
              if ( (_DWORD)expires )
                goto LABEL_16;
LABEL_11:
              while ( BYTE4(expires) == 32 || BYTE4(expires) == 9 )
              {
                BYTE4(expires) = *++v8;
                if ( !BYTE4(expires) )
                  goto LABEL_44;
              }
              if ( BYTE4(expires) != 59 )
                break;
            }
          }
          v9 = *++v8;
          if ( !v9 )
            goto LABEL_15;
        }
LABEL_44:
        if ( badcookie )
          goto LABEL_53;
        if ( !co->domain )
        {
          if ( domain )
          {
            v84 = Curl_cstrdup(domain);
            co->domain = (char *)v84;
            if ( !v84 )
              goto LABEL_53;
          }
        }
        if ( !co->path && path )
        {
          v77 = strchr(path, 63);
          v78 = v77 ? (char *)Curl_memrchr(path, 47, v77 - path) : strrchr(path, 47);
          if ( v78 )
          {
            v79 = v78 - path;
            v80 = v78 - path + 1;
            v81 = (char *)Curl_cmalloc(v78 - path + 2);
            co->path = v81;
            if ( !v81 )
              goto LABEL_53;
            memcpy(v81, path, v80);
            co->path[v79 + 1] = 0;
            v82 = sanitize_cookie_path(co->path);
            co->spath = v82;
            if ( !v82 )
              goto LABEL_53;
          }
        }
        if ( !co->name )
          goto LABEL_53;
        v16 = co;
        ++data->req.setcookies;
        prefix = co->prefix;
        if ( (prefix & 1) != 0 )
          goto LABEL_154;
LABEL_51:
        if ( (prefix & 2) != 0 )
        {
          if ( !co->secure )
            goto LABEL_53;
          goto LABEL_156;
        }
        goto LABEL_160;
      }
LABEL_15:
      valuepe = v9;
      LODWORD(expires) = strcspn(v8, ";\t\r\n=");
      BYTE4(expires) = valuepe;
      v11 = expires;
      if ( !(_DWORD)expires )
        goto LABEL_44;
LABEL_16:
      ptr = &v8[v11];
      while ( 1 )
      {
        v12 = v11--;
        if ( v8[v11] != 9 && v8[v11] != 32 )
          break;
        if ( !v11 )
        {
          if ( *ptr == 61 )
            goto LABEL_20;
          if ( co->name )
          {
LABEL_134:
            v8 = (char *)ptr;
            BYTE4(expires) = *ptr;
            goto LABEL_43;
          }
LABEL_53:
          freecookie(co);
          return 0;
        }
      }
      v15 = 0;
      v11 = v12;
      if ( *ptr != 61 )
      {
        if ( v12 <= 0xFFE )
        {
          valuepa = 0;
          v13 = 0;
          myhash = (char *)ptr;
          if ( v11 <= 6 )
          {
LABEL_106:
            if ( co->name )
            {
              if ( valuepa )
              {
                if ( v11 != 4 )
                {
                  if ( v11 == 6 )
                  {
                    if ( curl_strnequal("domain", v8, 6) )
                    {
                      if ( *v13 == 46 )
                      {
                        --valuepa;
                        ++v13;
                      }
                      if ( valuepa == 9 && curl_strnequal(v13, "localhost", 9)
                        || (v48 = memchr(v13, 46, valuepa)) != 0 && valuepa - (v48 - v13) > 1 )
                      {
                        if ( !domain )
                        {
                          is_ipnum = Curl_host_is_ipnum(v13);
                          Curl_cfree(co->domain);
                          v69 = Curl_strndup(v13, valuepa);
                          co->domain = (char *)v69;
                          if ( !v69 )
                            goto LABEL_53;
                          if ( is_ipnum )
                            goto LABEL_102;
                          goto LABEL_129;
                        }
                        if ( (unsigned __int8)Curl_host_is_ipnum(domain) )
                          goto LABEL_117;
                      }
                      else
                      {
                        domain = ":";
                        if ( (unsigned __int8)Curl_host_is_ipnum(":") )
                        {
LABEL_117:
                          if ( !strncmp(v13, domain, valuepa) && strlen(domain) == valuepa )
                          {
                            Curl_cfree(co->domain);
                            v49 = Curl_strndup(v13, valuepa);
                            co->domain = (char *)v49;
                            if ( !v49 )
                              goto LABEL_53;
                            goto LABEL_102;
                          }
LABEL_130:
                          if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
                            Curl_infof(data, "skipped cookie with bad tailmatch domain: %s");
                          v8 = myhash;
                          BYTE4(expires) = *myhash;
                          badcookie = httpheader;
                          goto LABEL_43;
                        }
                      }
                      if ( !cookie_tailmatch(v13, valuepa, domain) )
                        goto LABEL_130;
                      Curl_cfree(co->domain);
                      v50 = Curl_strndup(v13, valuepa);
                      co->domain = (char *)v50;
                      if ( !v50 )
                        goto LABEL_53;
LABEL_129:
                      co->tailmatch = 1;
                    }
LABEL_102:
                    v8 = myhash;
                    BYTE4(expires) = *myhash;
LABEL_43:
                    if ( BYTE4(expires) )
                      goto LABEL_11;
                    goto LABEL_44;
                  }
                  goto LABEL_42;
                }
              }
              else
              {
                ptr = myhash;
                if ( v11 == 6 )
                {
                  valuepc = v15;
                  if ( curl_strnequal("secure", v8, 6) )
                  {
                    if ( secure || !c->running )
                    {
                      v8 = myhash;
                      co->secure = 1;
                      BYTE4(expires) = *myhash;
                      goto LABEL_43;
                    }
                    goto LABEL_53;
                  }
                  if ( valuepc )
                    curl_strnequal("domain", v8, 6);
                  goto LABEL_102;
                }
                if ( !v15 )
                  goto LABEL_134;
                if ( v11 != 4 )
                  goto LABEL_42;
              }
              if ( curl_strnequal("path", v8, 4) )
              {
                Curl_cfree(co->path);
                v51 = Curl_strndup(v13, valuepa);
                co->path = (char *)v51;
                if ( !v51 )
                  goto LABEL_53;
                Curl_cfree(co->spath);
                v52 = sanitize_cookie_path(co->path);
                co->spath = v52;
                if ( !v52 )
                  goto LABEL_53;
              }
              goto LABEL_102;
            }
LABEL_97:
            if ( !v15 )
              goto LABEL_53;
            Curl_cfree(0);
            co->name = (char *)Curl_strndup(v8, v11);
            Curl_cfree(co->value);
            v46 = (const char *)Curl_strndup(v13, valuepa);
            co->value = (char *)v46;
            name = co->name;
            if ( !name || !v46 )
              goto LABEL_53;
            if ( v46[strcspn(v46, badoctets_0)] || name[strcspn(name, badoctets_0)] )
            {
              if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
                Curl_infof(data, "invalid octets in name/value, cookie dropped");
              goto LABEL_53;
            }
            goto LABEL_102;
          }
LABEL_36:
          if ( BYTE4(expires) == 95 && v8[1] == 95 )
          {
            ptra = v15;
            v45 = curl_strnequal("__Secure-", v8, 9);
            v15 = ptra;
            if ( v45 )
            {
              co->prefix |= 1u;
              if ( !co->name )
                goto LABEL_97;
            }
            else
            {
              v75 = curl_strnequal("__Host-", v8, 7);
              v15 = ptra;
              if ( v75 )
              {
                v76 = co->name;
                co->prefix |= 2u;
                if ( !v76 )
                  goto LABEL_97;
              }
              else if ( !co->name )
              {
                goto LABEL_97;
              }
            }
          }
          else if ( !co->name )
          {
            goto LABEL_97;
          }
          if ( !valuepa )
          {
            if ( v11 == 8 )
            {
              if ( curl_strnequal("httponly", v8, 8) )
              {
                v8 = myhash;
                co->httponly = 1;
                BYTE4(expires) = *myhash;
                goto LABEL_43;
              }
              goto LABEL_102;
            }
            if ( !v15 )
              goto LABEL_102;
          }
          if ( v11 == 7 )
          {
            if ( !curl_strnequal("version", v8, 7) )
            {
              if ( curl_strnequal("max-age", v8, 7) )
              {
                v53 = curlx_strtoofft(&v13[*v13 == 34], 0, 10);
                if ( v53 != 1 )
                {
                  if ( v53 == 2 )
                  {
                    v8 = myhash;
                    LODWORD(co->expires) = 1;
                    HIDWORD(co->expires) = 0;
                    BYTE4(expires) = *myhash;
                    goto LABEL_43;
                  }
                  if ( v53 )
                    goto LABEL_102;
                  expires = co->expires;
                  if ( !expires )
                  {
                    LODWORD(co->expires) = 1;
                    HIDWORD(co->expires) = 0;
                    v8 = myhash;
                    HIDWORD(expires) = (unsigned __int8)*myhash;
                    goto LABEL_43;
                  }
                  LODWORD(valuepd) = now;
                  if ( 0x7FFFFFFFFFFFFFFFLL - now >= expires )
                  {
                    v8 = myhash;
                    HIDWORD(valuepd) = now >> 31;
                    co->expires = valuepd + expires;
                    BYTE4(expires) = *myhash;
                    goto LABEL_43;
                  }
                }
                v8 = myhash;
                LODWORD(co->expires) = -1;
                HIDWORD(co->expires) = 0x7FFFFFFF;
                BYTE4(expires) = *myhash;
                goto LABEL_43;
              }
              if ( curl_strnequal("expires", v8, 7) && !co->expires && valuepa <= 0x7F )
              {
                if ( valuepa >= 4 )
                {
                  *(_DWORD *)&date[valuepa - 4] = *(_DWORD *)&v13[valuepa - 4];
                  qmemcpy(date, v13, 4 * ((valuepa - 1) >> 2));
                }
                else if ( valuepa )
                {
                  date[0] = *v13;
                  if ( (valuepa & 2) != 0 )
                    *(_WORD *)&date[valuepa - 2] = *(_WORD *)&v13[valuepa - 2];
                }
                date[valuepa] = 0;
                v83 = Curl_getdate_capped(date);
                if ( (_DWORD)v83 )
                {
                  if ( (int)v83 >> 31 < 0 )
                  {
                    LODWORD(co->expires) = 0;
                    HIDWORD(co->expires) = 0;
                  }
                  else
                  {
                    co->expires = v83;
                  }
                }
                else
                {
                  LODWORD(co->expires) = 1;
                  HIDWORD(co->expires) = 0;
                }
              }
            }
            goto LABEL_102;
          }
LABEL_42:
          v8 = myhash;
          BYTE4(expires) = *myhash;
          goto LABEL_43;
        }
LABEL_222:
        freecookie(co);
        if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
          Curl_infof(data, "oversized cookie dropped, name/val %zu + %zu bytes");
        return 0;
      }
LABEL_20:
      s2 = BYTE4(expires);
      v13 = ptr + 1;
      LODWORD(expires) = strcspn(ptr + 1, ";\r\n");
      BYTE4(expires) = s2;
      myhash = (char *)&ptr[expires + 1];
      if ( (_DWORD)expires )
      {
        while ( 1 )
        {
          v14 = ptr[expires];
          if ( v14 != 32 && v14 != 9 )
            break;
          LODWORD(expires) = expires - 1;
          if ( !(_DWORD)expires )
            goto LABEL_122;
        }
        while ( *v13 == 32 || *v13 == 9 )
        {
          ++v13;
          LODWORD(expires) = expires - 1;
          if ( !(_DWORD)expires )
          {
            valuepa = 0;
            goto LABEL_31;
          }
        }
        valuepa = expires;
        if ( memchr(v13, 9, expires) )
        {
          freecookie(co);
          if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
            Curl_infof(data, "cookie contains TAB, dropping");
          return 0;
        }
        BYTE4(expires) = s2;
LABEL_31:
        if ( v11 > 0xFFE || valuepa > 0xFFE || v11 + valuepa > 0x1000 )
          goto LABEL_222;
        v15 = httpheader;
      }
      else
      {
LABEL_122:
        if ( v11 > 0xFFE )
          goto LABEL_222;
        valuepa = 0;
        v15 = httpheader;
      }
      if ( v11 <= 6 )
        goto LABEL_106;
      goto LABEL_36;
    }
LABEL_224:
    Curl_cfree(co);
    return 0;
  }
  tok_buf = 0;
  if ( !strncmp(lineptr, "#HttpOnly_", 0xAu) )
  {
    v8 = (char *)(lineptr + 10);
    co->httponly = 1;
  }
  if ( *v8 == 35 )
    goto LABEL_224;
  v19 = strchr(v8, 13);
  if ( v19 )
    *v19 = 0;
  v20 = strchr(v8, 10);
  if ( v20 )
    *v20 = 0;
  v21 = 0;
  v22 = strtok_r(v8, "\t", &tok_buf);
  if ( !v22 )
    goto LABEL_53;
  v23 = v22;
  while ( 2 )
  {
    switch ( v21 )
    {
      case 0:
        v24 = Curl_cstrdup(&v23[*v23 == 46]);
        co->domain = (char *)v24;
        v25 = v24;
        v26 = v24 != 0;
        v23 = strtok_r(0, "\t", &tok_buf);
        if ( v23 && v26 )
          goto _L247;
        v85 = v25 == 0;
        v44 = v26;
        v21 = 1;
        v110 = v85;
        goto LABEL_274;
      case 1:
_L247:
        co->tailmatch = curl_strequal(v23, "TRUE") != 0;
        v23 = strtok_r(0, "\t", &tok_buf);
        if ( v23 )
          goto LABEL_69;
        v21 = 2;
        goto LABEL_93;
      case 2:
LABEL_69:
        s2a = v23;
        v27 = strcmp("TRUE", v23);
        v28 = s2a;
        v29 = (int (__cdecl *)(char *))Curl_cstrdup;
        if ( v27 && (v30 = strcmp("FALSE", s2a), v28 = s2a, v30) )
        {
          v31 = (const char *)v29(s2a);
          co->path = (char *)v31;
          if ( !v31 )
            goto LABEL_200;
          v32 = sanitize_cookie_path(v31);
          co->spath = v32;
          v33 = v32;
          s2b = v32 != 0;
          v34 = v32 != 0;
          v23 = strtok_r(0, "\t", &tok_buf);
          if ( !v23 || !s2b )
          {
            v85 = v33 == 0;
            v44 = v34;
            v21 = 3;
            v110 = v85;
            goto LABEL_274;
          }
          v35 = httpheader;
        }
        else
        {
          s2c = v28;
          v36 = v29("/");
          co->path = (char *)v36;
          v37 = v36;
          v38 = Curl_cstrdup("/");
          v23 = s2c;
          co->spath = (char *)v38;
          if ( !v38 )
          {
            co->secure = 0;
            if ( !curl_strequal(s2c, "TRUE") )
              goto LABEL_200;
            v35 = 1;
            goto LABEL_78;
          }
          v35 = v37 == 0;
        }
LABEL_77:
        co->secure = 0;
        if ( !curl_strequal(v23, "TRUE") )
          goto LABEL_81;
LABEL_78:
        if ( !secure && !c->running )
        {
LABEL_200:
          strtok_r(0, "\t", &tok_buf);
          goto LABEL_53;
        }
        co->secure = 1;
LABEL_81:
        v23 = strtok_r(0, "\t", &tok_buf);
        if ( !v23 || v35 )
        {
          v86 = v35;
          v44 = !v35;
          v21 = 4;
          v110 = v86;
          goto LABEL_274;
        }
_L244:
        v39 = curlx_strtoofft(v23, 0, 10);
        v23 = strtok_r(0, "\t", &tok_buf);
        if ( v23 && !v39 )
        {
_L243:
          v40 = Curl_cstrdup(v23);
          co->name = (char *)v40;
          if ( !v40 )
          {
            strtok_r(0, "\t", &tok_buf);
            v110 = 1;
LABEL_151:
            v54 = Curl_cstrdup(&LC0);
            co->value = (char *)v54;
            if ( !v54 )
              goto LABEL_53;
            goto LABEL_152;
          }
          if ( curl_strnequal("__Secure-", v40, 9) )
          {
            co->prefix |= 1u;
          }
          else if ( curl_strnequal("__Host-", co->name, 7) )
          {
            co->prefix |= 2u;
          }
          v23 = strtok_r(0, "\t", &tok_buf);
          if ( !v23 )
            goto LABEL_151;
LABEL_89:
          v41 = Curl_cstrdup(v23);
          co->value = (char *)v41;
          v42 = v41;
          reject = v41 != 0;
          v43 = (v41 != 0) & (strtok_r(0, "\t", &tok_buf) != 0);
          if ( !v43 )
          {
            v44 = reject;
            v110 = v42 == 0;
            v21 = 7;
            goto LABEL_274;
          }
          if ( !strtok_r(0, "\t", &tok_buf) )
          {
            v44 = v43;
            v21 = 8;
            goto LABEL_274;
          }
          v21 = 8;
LABEL_92:
          ++v21;
          v23 = strtok_r(0, "\t", &tok_buf);
          if ( !v23 )
          {
LABEL_93:
            v44 = 1;
            goto LABEL_274;
          }
          continue;
        }
        v85 = v39 == 0;
        v44 = v39 == 0;
        v21 = 5;
        v110 = !v85;
LABEL_274:
        if ( v21 != 7 && v44 )
          goto LABEL_53;
LABEL_152:
        if ( v110 )
          goto LABEL_53;
        v16 = co;
        prefix = co->prefix;
        if ( (prefix & 1) == 0 )
          goto LABEL_51;
LABEL_154:
        if ( !v16->secure )
          goto LABEL_262;
        if ( (prefix & 2) != 0 )
        {
LABEL_156:
          v55 = co->path;
          if ( !v55 || *v55 != 47 || v55[1] || co->tailmatch )
            goto LABEL_53;
        }
LABEL_160:
        running = c->running;
        if ( !running && c->newsession )
        {
          v16 = co;
          if ( !co->expires )
          {
LABEL_262:
            freecookie(v16);
            return 0;
          }
        }
        co->livecookie = running;
        v57 = c->lastct + 1;
        c->lastct = v57;
        co->creationtime = v57;
        if ( !noexpire )
          remove_expired(c);
        myhasha = cookiehash(co->domain);
        v58 = c->cookies[myhasha];
        if ( !v58 )
        {
          if ( c->running && (*(&data->set.connect_only + 4) & 0x20) != 0 )
          {
            ptrb = 0;
            valuepb = (char *)co;
LABEL_190:
            Curl_infof(data, "%s cookie %s=\"%s\" for domain %s, path %s, expire %lld");
            if ( ptrb )
              goto LABEL_191;
            if ( v58 )
              goto LABEL_213;
          }
          else
          {
            valuepb = (char *)co;
          }
          c->cookies[myhasha] = (Cookie *)valuepb;
          goto LABEL_214;
        }
        ptrb = 0;
        v59 = 0;
        valuepb = 0;
        while ( 2 )
        {
          if ( curl_strequal(v58->name, co->name) )
          {
            v61 = v58->domain;
            v62 = co->domain;
            if ( v61 )
            {
              if ( v62 && curl_strequal(v61, co->domain) )
              {
LABEL_173:
                spath = v58->spath;
                if ( spath )
                {
                  rejecta = co->spath;
                  if ( rejecta )
                  {
                    if ( v58->secure && !co->secure && !secure )
                    {
                      s2d = v58->spath;
                      v71 = strchr(spath + 1, 47);
                      v72 = s2d;
                      v73 = rejecta;
                      if ( v71 )
                      {
                        v74 = v71 - s2d;
                      }
                      else
                      {
                        s2e = rejecta;
                        rejectb = (char *)v72;
                        v74 = strlen(v72);
                        v73 = s2e;
                        v72 = rejectb;
                      }
                      if ( curl_strnequal(v72, v73, v74) )
                      {
                        if ( (*(&data->set.connect_only + 4) & 0x20) != 0 )
                          Curl_infof(data, "cookie '%s' for domain '%s' dropped, would overlay an existing cookie");
                        goto LABEL_53;
                      }
                    }
                  }
                }
              }
            }
            else if ( !v62 )
            {
              goto LABEL_173;
            }
          }
          if ( v59 || !curl_strequal(v58->name, co->name) )
            goto LABEL_167;
          v64 = v58->domain;
          v65 = co->domain;
          if ( v64 )
          {
            if ( !v65 || !curl_strequal(v64, co->domain) || v58->tailmatch != co->tailmatch )
            {
LABEL_184:
              if ( !ptrb )
                goto LABEL_185;
            }
          }
          else if ( v65 )
          {
            goto LABEL_184;
          }
          v70 = v58->spath;
          if ( !v70 )
          {
LABEL_208:
            if ( (v70 == 0) != (co->spath == 0) )
              goto LABEL_185;
            ptrb = co->livecookie;
            if ( ptrb )
            {
              valuepb = (char *)v58;
              v59 = co;
            }
            else
            {
              if ( v58->livecookie )
                goto LABEL_53;
              valuepb = (char *)v58;
              v59 = co;
              ptrb = 1;
            }
LABEL_167:
            next = v58->next;
            if ( !v58->next )
              break;
            goto LABEL_168;
          }
          if ( co->spath && curl_strequal(v70, co->spath) )
          {
            v70 = v58->spath;
            goto LABEL_208;
          }
LABEL_185:
          next = v58->next;
          ptrb = 0;
          if ( v58->next )
          {
LABEL_168:
            v58 = next;
            continue;
          }
          break;
        }
        if ( v59 )
        {
          v59->next = *(Cookie **)valuepb;
          v59->creationtime = *((_DWORD *)valuepb + 9);
          Curl_cfree(*((_DWORD *)valuepb + 1));
          Curl_cfree(*((_DWORD *)valuepb + 2));
          Curl_cfree(*((_DWORD *)valuepb + 5));
          Curl_cfree(*((_DWORD *)valuepb + 3));
          Curl_cfree(*((_DWORD *)valuepb + 4));
          *(_DWORD *)valuepb = v59->next;
          *((_DWORD *)valuepb + 1) = v59->name;
          *((_DWORD *)valuepb + 2) = v59->value;
          *((_DWORD *)valuepb + 3) = v59->path;
          *((_DWORD *)valuepb + 4) = v59->spath;
          *((_DWORD *)valuepb + 5) = v59->domain;
          *((_DWORD *)valuepb + 6) = v59->expires;
          *((_DWORD *)valuepb + 7) = HIDWORD(v59->expires);
          *((_DWORD *)valuepb + 8) = *(_DWORD *)&v59->tailmatch;
          *((_DWORD *)valuepb + 9) = v59->creationtime;
          *((_DWORD *)valuepb + 10) = *(_DWORD *)&v59->prefix;
          Curl_cfree(v59);
        }
        else
        {
          valuepb = (char *)co;
        }
        if ( c->running && (*(&data->set.connect_only + 4) & 0x20) != 0 )
          goto LABEL_190;
        if ( ptrb )
          goto LABEL_191;
LABEL_213:
        v58->next = (Cookie *)valuepb;
LABEL_214:
        ++c->numcookies;
LABEL_191:
        v66 = *((_DWORD *)valuepb + 6);
        v67 = *((_DWORD *)valuepb + 7);
        if ( *((_QWORD *)valuepb + 3) && __SPAIR64__(v67, v66) < c->next_expiration )
        {
          LODWORD(c->next_expiration) = v66;
          HIDWORD(c->next_expiration) = v67;
        }
        return (Cookie *)valuepb;
      case 3:
        v35 = httpheader;
        goto LABEL_77;
      case 4:
        goto _L244;
      case 5:
        goto _L243;
      case 6:
        goto LABEL_89;
      default:
        goto LABEL_92;
    }
  }
}
