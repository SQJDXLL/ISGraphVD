__int64 __usercall set_dns_listeners@<edx:eax>(
        time_t now@<eax>,
        dnsmasq_daemon *a2@<ecx>,
        tftp_transfer *tftp_trans@<edi>)
{
  int v3; // esi
  int i; // edi
  randfd *v5; // eax
  dnsmasq_daemon *tcpfd; // edx
  randfd_list *j; // edi
  listener *k; // edi
  int v9; // eax
  int tftpfd; // eax
  __int64 result; // rax
  int m; // esi
  int v13; // eax
  time_t v14; // [esp+0h] [ebp-2Ch]
  int wait; // [esp+Ch] [ebp-20h] BYREF
  unsigned int v16; // [esp+10h] [ebp-1Ch]

  v3 = 0;
  v16 = __readgsdword(0x14u);
  wait = 0;
  if ( (dnsmasq_daemon_0->options[1] & 0x10000000) == 0 )
  {
    tftp_trans = dnsmasq_daemon_0->tftp_trans;
    while ( tftp_trans )
    {
      v14 = now;
      ++v3;
      poll_listen(tftp_trans->sockfd, 1, now, now);
      tftp_trans = tftp_trans->next;
      now = v14;
    }
  }
  if ( dnsmasq_daemon_0->port )
    get_new_frec(now, &wait, 0, tftp_trans);
  for ( i = (int)dnsmasq_daemon_0->sfds; i; i = *(_DWORD *)(i + 64) )
    poll_listen(*(_DWORD *)i, 1, a2, a2);
  while ( 1 )
  {
    tcpfd = dnsmasq_daemon_0;
    if ( dnsmasq_daemon_0->numrrand <= i )
      break;
    v5 = &dnsmasq_daemon_0->randomsocks[i];
    if ( v5->refcount )
      poll_listen(v5->fd, 1, dnsmasq_daemon_0, dnsmasq_daemon_0);
    ++i;
  }
  for ( j = dnsmasq_daemon_0->rfl_poll; j; j = j->next )
    poll_listen(j->rfd->fd, 1, a2, a2);
  for ( k = dnsmasq_daemon_0->listeners; k; k = k->next )
  {
    if ( k->fd != -1 && !wait )
      poll_listen(k->fd, 1, tcpfd, tcpfd);
    tcpfd = (dnsmasq_daemon *)k->tcpfd;
    if ( tcpfd != (dnsmasq_daemon *)-1 )
    {
      a2 = dnsmasq_daemon_0;
      v9 = 0;
      while ( dnsmasq_daemon_0->tcp_pids[v9] || dnsmasq_daemon_0->tcp_pipes[v9] != -1 )
      {
        if ( ++v9 == 20 )
          goto LABEL_28;
      }
      poll_listen(tcpfd, 1, v9, v9);
    }
LABEL_28:
    if ( dnsmasq_daemon_0->tftp_max >= v3 )
    {
      tftpfd = k->tftpfd;
      if ( tftpfd != -1 )
        poll_listen(tftpfd, 1, a2, a2);
    }
  }
  if ( (dnsmasq_daemon_0->options[0] & 0x40) == 0 )
  {
    for ( m = 0; m != 20; ++m )
    {
      v13 = dnsmasq_daemon_0->tcp_pipes[m];
      if ( v13 != -1 )
        poll_listen(v13, 1, tcpfd, tcpfd);
    }
  }
  LODWORD(result) = wait;
  HIDWORD(result) = v16 - __readgsdword(0x14u);
  return result;
}
