__int64 __usercall set_dns_listeners@<edx:eax>(time_t now@<eax>)
{
  int v2; // esi
  dnsmasq_daemon *v3; // eax
  tftp_transfer *tftp_trans; // ebp
  serverfd *sfds; // edi
  int v6; // edi
  int v7; // edx
  randfd_list *rfl_poll; // edi
  listener *listeners; // edi
  int tftpfd; // eax
  int tcpfd; // ebp
  dnsmasq_daemon *v12; // ecx
  dnsmasq_daemon *tcp_pids; // eax
  int v14; // esi
  int v15; // eax
  __int64 result; // rax
  int wait; // [esp+0h] [ebp-24h] BYREF
  unsigned int v18; // [esp+4h] [ebp-20h]

  v2 = 0;
  v18 = __readgsdword(0x14u);
  wait = 0;
  v3 = dnsmasq_daemon_0;
  if ( (dnsmasq_daemon_0->options[1] & 0x10000000) == 0 )
  {
    tftp_trans = dnsmasq_daemon_0->tftp_trans;
    if ( tftp_trans )
    {
      do
      {
        ++v2;
        poll_listen(tftp_trans->sockfd, 1);
        tftp_trans = tftp_trans->next;
      }
      while ( tftp_trans );
      v3 = dnsmasq_daemon_0;
    }
  }
  if ( v3->port )
  {
    get_new_frec(now, &wait, 0);
    v3 = dnsmasq_daemon_0;
  }
  sfds = v3->sfds;
  if ( sfds )
  {
    do
    {
      poll_listen(sfds->fd, 1);
      sfds = sfds->next;
    }
    while ( sfds );
    v3 = dnsmasq_daemon_0;
  }
  if ( v3->numrrand > 0 )
  {
    v6 = 0;
    do
    {
      while ( 1 )
      {
        v7 = (int)&v3->randomsocks[v6];
        if ( *(_WORD *)(v7 + 8) )
          break;
        if ( v3->numrrand <= ++v6 )
          goto LABEL_15;
      }
      ++v6;
      poll_listen(*(_DWORD *)(v7 + 4), 1);
      v3 = dnsmasq_daemon_0;
    }
    while ( dnsmasq_daemon_0->numrrand > v6 );
  }
LABEL_15:
  rfl_poll = v3->rfl_poll;
  if ( rfl_poll )
  {
    do
    {
      poll_listen(rfl_poll->rfd->fd, 1);
      rfl_poll = rfl_poll->next;
    }
    while ( rfl_poll );
    v3 = dnsmasq_daemon_0;
  }
  listeners = v3->listeners;
  if ( listeners )
  {
    do
    {
      if ( listeners->fd != -1 && !wait )
        poll_listen(listeners->fd, 1);
      tcpfd = listeners->tcpfd;
      v12 = dnsmasq_daemon_0;
      if ( tcpfd != -1 )
      {
        tcp_pids = (dnsmasq_daemon *)dnsmasq_daemon_0->tcp_pids;
        while ( tcp_pids->options[0] || tcp_pids->auth_zones != (auth_zone *)-1 )
        {
          tcp_pids = (dnsmasq_daemon *)((char *)tcp_pids + 4);
          if ( dnsmasq_daemon_0->tcp_pipes == (int *)tcp_pids )
            goto LABEL_20;
        }
        poll_listen(tcpfd, 1);
        v12 = dnsmasq_daemon_0;
      }
LABEL_20:
      if ( v12->tftp_max >= v2 )
      {
        tftpfd = listeners->tftpfd;
        if ( tftpfd != -1 )
          poll_listen(tftpfd, 1);
      }
      listeners = listeners->next;
    }
    while ( listeners );
    v3 = dnsmasq_daemon_0;
  }
  if ( (v3->options[0] & 0x40) == 0 )
  {
    v14 = 0;
    while ( 1 )
    {
      v15 = v3->tcp_pipes[v14];
      if ( v15 != -1 )
        poll_listen(v15, 1);
      if ( ++v14 == 20 )
        break;
      v3 = dnsmasq_daemon_0;
    }
  }
  LODWORD(result) = wait;
  HIDWORD(result) = v18 - __readgsdword(0x14u);
  return result;
}
