int __cdecl set_dns_listeners(time_t now)
{
  int wait; // [esp+4h] [ebp-24h] BYREF
  serverfd *serverfdp; // [esp+8h] [ebp-20h]
  listener *listener; // [esp+Ch] [ebp-1Ch]
  int i; // [esp+10h] [ebp-18h]
  int tftp; // [esp+14h] [ebp-14h]
  tftp_transfer *transfer; // [esp+18h] [ebp-10h]
  unsigned int v8; // [esp+1Ch] [ebp-Ch]

  v8 = __readgsdword(0x14u);
  wait = 0;
  tftp = 0;
  if ( (dnsmasq_daemon_0->options[1] & 0x10000000) == 0 )
  {
    for ( transfer = dnsmasq_daemon_0->tftp_trans; transfer; transfer = transfer->next )
    {
      ++tftp;
      poll_listen(transfer->sockfd, 1);
    }
  }
  if ( dnsmasq_daemon_0->port )
    get_new_frec(now, &wait, 0);
  for ( serverfdp = dnsmasq_daemon_0->sfds; serverfdp; serverfdp = serverfdp->next )
    poll_listen(serverfdp->fd, 1);
  if ( dnsmasq_daemon_0->port && !dnsmasq_daemon_0->osport )
  {
    for ( i = 0; i <= 63; ++i )
    {
      if ( dnsmasq_daemon_0->randomsocks[i].refcount )
        poll_listen(dnsmasq_daemon_0->randomsocks[i].fd, 1);
    }
  }
  for ( listener = dnsmasq_daemon_0->listeners; listener; listener = listener->next )
  {
    if ( listener->fd != -1 && !wait )
      poll_listen(listener->fd, 1);
    if ( listener->tcpfd != -1 )
    {
      for ( i = 0; i <= 19; ++i )
      {
        if ( !dnsmasq_daemon_0->tcp_pids[i] && dnsmasq_daemon_0->tcp_pipes[i] == -1 )
        {
          poll_listen(listener->tcpfd, 1);
          break;
        }
      }
    }
    if ( tftp <= dnsmasq_daemon_0->tftp_max && listener->tftpfd != -1 )
      poll_listen(listener->tftpfd, 1);
  }
  if ( (dnsmasq_daemon_0->options[0] & 0x40) == 0 )
  {
    for ( i = 0; i <= 19; ++i )
    {
      if ( dnsmasq_daemon_0->tcp_pipes[i] != -1 )
        poll_listen(dnsmasq_daemon_0->tcp_pipes[i], 1);
    }
  }
  return wait;
}
