int __fastcall set_dns_listeners(time_t now)
{
  int v1; // ebp
  tftp_transfer *i; // rbx
  serverfd *j; // rbx
  listener *k; // rbx
  int osport; // ebx
  __int64 fd; // rdi
  __int64 tcpfd; // rdi
  __int64 v8; // rax
  __int64 tftpfd; // rdi
  int m; // ebx
  __int64 v12; // rdi
  int wait; // [rsp+4h] [rbp-24h] BYREF
  unsigned __int64 v14; // [rsp+8h] [rbp-20h]

  v1 = 0;
  v14 = __readfsqword(0x28u);
  wait = 0;
  if ( (dnsmasq_daemon_0->options[1] & 0x10000000) == 0 )
  {
    for ( i = dnsmasq_daemon_0->tftp_trans; i; i = i->next )
    {
      ++v1;
      poll_listen((unsigned int)i->sockfd, 1LL);
    }
  }
  if ( dnsmasq_daemon_0->port )
    get_new_frec(now, &wait, 0LL);
  for ( j = dnsmasq_daemon_0->sfds; j; j = j->next )
    poll_listen((unsigned int)j->fd, 1LL);
  if ( dnsmasq_daemon_0->port )
  {
    osport = dnsmasq_daemon_0->osport;
    if ( !osport )
    {
      do
      {
        if ( dnsmasq_daemon_0->randomsocks[osport].refcount )
          poll_listen((unsigned int)dnsmasq_daemon_0->randomsocks[osport].fd, 1LL);
        ++osport;
      }
      while ( osport != 64 );
    }
  }
  for ( k = dnsmasq_daemon_0->listeners; k; k = k->next )
  {
    fd = (unsigned int)k->fd;
    if ( (_DWORD)fd != -1 && !wait )
      poll_listen(fd, 1LL);
    tcpfd = (unsigned int)k->tcpfd;
    if ( (_DWORD)tcpfd != -1 )
    {
      v8 = 0LL;
      while ( dnsmasq_daemon_0->tcp_pids[v8] || dnsmasq_daemon_0->tcp_pipes[v8] != -1 )
      {
        if ( ++v8 == 20 )
          goto LABEL_23;
      }
      poll_listen(tcpfd, 1LL);
    }
LABEL_23:
    if ( dnsmasq_daemon_0->tftp_max >= v1 )
    {
      tftpfd = (unsigned int)k->tftpfd;
      if ( (_DWORD)tftpfd != -1 )
        poll_listen(tftpfd, 1LL);
    }
  }
  if ( (dnsmasq_daemon_0->options[0] & 0x40) == 0 )
  {
    for ( m = 0; m != 20; ++m )
    {
      v12 = (unsigned int)dnsmasq_daemon_0->tcp_pipes[m];
      if ( (_DWORD)v12 != -1 )
        poll_listen(v12, 1LL);
    }
  }
  return wait;
}
