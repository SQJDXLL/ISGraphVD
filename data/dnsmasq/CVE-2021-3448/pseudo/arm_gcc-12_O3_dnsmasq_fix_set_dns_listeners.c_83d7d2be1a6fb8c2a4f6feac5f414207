int __fastcall set_dns_listeners(time_t now)
{
  dnsmasq_daemon *v1; // r3
  tftp_transfer *v2; // r5
  unsigned int v3; // r2
  tftp_transfer *tftp_trans; // r4
  serverfd *sfds; // r4
  int numrrand; // r0
  randfd *randomsocks; // r12
  int v9; // r4
  randfd *v10; // r2
  randfd_list *rfl_poll; // r4
  listener *listeners; // r7
  int tftpfd; // r0
  int tcpfd; // r0
  dnsmasq_daemon *v15; // r12
  dnsmasq_daemon *p_fd_save; // r3
  unsigned int v17; // t1
  int v18; // r4
  int v19; // r0
  int wait; // [sp+0h] [bp-20h] BYREF

  v1 = dnsmasq_daemon_0;
  v2 = 0;
  v3 = dnsmasq_daemon_0->options[1] & 0x10000000;
  wait = 0;
  if ( !v3 )
  {
    tftp_trans = dnsmasq_daemon_0->tftp_trans;
    if ( tftp_trans )
    {
      v2 = (tftp_transfer *)v3;
      do
      {
        poll_listen(tftp_trans->sockfd, 1);
        tftp_trans = tftp_trans->next;
        v2 = (tftp_transfer *)((char *)v2 + 1);
      }
      while ( tftp_trans );
      v1 = dnsmasq_daemon_0;
    }
    else
    {
      v2 = dnsmasq_daemon_0->tftp_trans;
    }
  }
  if ( v1->port )
  {
    get_new_frec(now, &wait, 0);
    v1 = dnsmasq_daemon_0;
  }
  sfds = v1->sfds;
  if ( sfds )
  {
    do
    {
      poll_listen(sfds->fd, 1);
      sfds = sfds->next;
    }
    while ( sfds );
    v1 = dnsmasq_daemon_0;
  }
  numrrand = v1->numrrand;
  if ( numrrand > 0 )
  {
    randomsocks = v1->randomsocks;
    v9 = 0;
    while ( 1 )
    {
      while ( 1 )
      {
        v10 = &randomsocks[v9];
        if ( v10->refcount )
          break;
        if ( ++v9 >= numrrand )
          goto LABEL_15;
      }
      poll_listen(v10->fd, 1);
      v1 = dnsmasq_daemon_0;
      ++v9;
      numrrand = dnsmasq_daemon_0->numrrand;
      if ( numrrand <= v9 )
        break;
      randomsocks = dnsmasq_daemon_0->randomsocks;
    }
  }
LABEL_15:
  rfl_poll = v1->rfl_poll;
  if ( rfl_poll )
  {
    do
    {
      poll_listen(rfl_poll->rfd->fd, 1);
      rfl_poll = rfl_poll->next;
    }
    while ( rfl_poll );
    v1 = dnsmasq_daemon_0;
  }
  listeners = v1->listeners;
  if ( listeners )
  {
    do
    {
      if ( listeners->fd != -1 && !wait )
        poll_listen(listeners->fd, 1);
      tcpfd = listeners->tcpfd;
      v15 = dnsmasq_daemon_0;
      if ( tcpfd != -1 )
      {
        p_fd_save = (dnsmasq_daemon *)&dnsmasq_daemon_0->fd_save;
        while ( 1 )
        {
          v17 = p_fd_save->options[1];
          p_fd_save = (dnsmasq_daemon *)((char *)p_fd_save + 4);
          if ( !v17 && p_fd_save->auth_zones == (auth_zone *)-1 )
            break;
          if ( &dnsmasq_daemon_0->tcp_pids[0x13] == (pid_t *)p_fd_save )
            goto LABEL_20;
        }
        poll_listen(tcpfd, 1);
        v15 = dnsmasq_daemon_0;
      }
LABEL_20:
      if ( v15->tftp_max >= (int)v2 )
      {
        tftpfd = listeners->tftpfd;
        if ( tftpfd != -1 )
          poll_listen(tftpfd, 1);
      }
      listeners = listeners->next;
    }
    while ( listeners );
    v1 = dnsmasq_daemon_0;
  }
  v18 = v1->options[0] & 0x40;
  if ( !v18 )
  {
    while ( 1 )
    {
      v19 = v1->tcp_pipes[v18];
      if ( v19 != -1 )
        poll_listen(v19, 1);
      if ( ++v18 == 20 )
        break;
      v1 = dnsmasq_daemon_0;
    }
  }
  return wait;
}
