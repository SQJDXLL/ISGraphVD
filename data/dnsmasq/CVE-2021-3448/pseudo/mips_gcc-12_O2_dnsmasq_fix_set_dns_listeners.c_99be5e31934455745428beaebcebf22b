int __fastcall set_dns_listeners(time_t now)
{
  dnsmasq_daemon *v1; // $v1
  unsigned int v2; // $v0
  tftp_transfer *tftp_trans; // $s0
  int v5; // $s3
  serverfd *sfds; // $s0
  int v7; // $s0
  int v8; // $s4
  randfd *v9; // $v0
  randfd_list *i; // $s0
  dnsmasq_daemon *v11; // $v0
  listener *listeners; // $s0
  unsigned int v13; // $v1
  int tftpfd; // $a0
  int tcpfd; // $a0
  dnsmasq_daemon *v16; // $a2
  dnsmasq_daemon *tcp_pids; // $v0
  auth_zone *auth_zones; // $v1
  int v19; // $s0
  int v20; // $a0
  int wait; // [sp+18h] [-8h] BYREF

  v1 = dnsmasq_daemon_0;
  v2 = dnsmasq_daemon_0->options[1] & 0x10000000;
  wait = 0;
  if ( v2 )
  {
    v5 = 0;
    if ( !dnsmasq_daemon_0->port )
      goto LABEL_6;
    goto LABEL_41;
  }
  tftp_trans = dnsmasq_daemon_0->tftp_trans;
  v5 = 0;
  if ( tftp_trans )
  {
    do
    {
      poll_listen(tftp_trans->sockfd, 1);
      tftp_trans = tftp_trans->next;
      ++v5;
    }
    while ( tftp_trans );
    v1 = dnsmasq_daemon_0;
  }
  if ( v1->port )
  {
LABEL_41:
    get_new_frec(now, &wait, 0);
    v1 = dnsmasq_daemon_0;
  }
LABEL_6:
  sfds = v1->sfds;
  if ( sfds )
  {
    do
    {
      poll_listen(sfds->fd, 1);
      sfds = sfds->next;
    }
    while ( sfds );
    v1 = dnsmasq_daemon_0;
  }
  v7 = 0;
  if ( v1->numrrand > 0 )
  {
    v8 = 0;
    do
    {
      while ( 1 )
      {
        v9 = &v1->randomsocks[v8];
        if ( v9->refcount )
          break;
        v1 = dnsmasq_daemon_0;
        ++v7;
        ++v8;
        if ( v7 >= dnsmasq_daemon_0->numrrand )
          goto LABEL_14;
      }
      poll_listen(v9->fd, 1);
      v1 = dnsmasq_daemon_0;
      ++v7;
      ++v8;
    }
    while ( v7 < dnsmasq_daemon_0->numrrand );
  }
LABEL_14:
  for ( i = v1->rfl_poll; i; i = i->next )
    poll_listen(i->rfd->fd, 1);
  v11 = dnsmasq_daemon_0;
  listeners = dnsmasq_daemon_0->listeners;
  if ( listeners )
  {
    do
    {
      if ( listeners->fd != -1 && !wait )
        poll_listen(listeners->fd, 1);
      tcpfd = listeners->tcpfd;
      v16 = dnsmasq_daemon_0;
      if ( tcpfd != -1 )
      {
        tcp_pids = (dnsmasq_daemon *)dnsmasq_daemon_0->tcp_pids;
        do
        {
          if ( tcp_pids->options[0] )
          {
            tcp_pids = (dnsmasq_daemon *)((char *)tcp_pids + 4);
          }
          else
          {
            auth_zones = tcp_pids->auth_zones;
            tcp_pids = (dnsmasq_daemon *)((char *)tcp_pids + 4);
            if ( auth_zones == (auth_zone *)-1 )
            {
              poll_listen(tcpfd, 1);
              v16 = dnsmasq_daemon_0;
              break;
            }
          }
        }
        while ( dnsmasq_daemon_0->tcp_pipes != (int *)tcp_pids );
      }
      if ( v16->tftp_max >= v5 )
      {
        tftpfd = listeners->tftpfd;
        if ( tftpfd != -1 )
          poll_listen(tftpfd, 1);
      }
      listeners = listeners->next;
    }
    while ( listeners );
    v11 = dnsmasq_daemon_0;
    v13 = dnsmasq_daemon_0->options[0];
  }
  else
  {
    v13 = dnsmasq_daemon_0->options[0];
  }
  if ( (v13 & 0x40) == 0 )
  {
    v19 = 0;
    while ( 1 )
    {
      v20 = v11->tcp_pipes[v19];
      if ( v20 != -1 )
        poll_listen(v20, 1);
      if ( ++v19 == 20 )
        break;
      v11 = dnsmasq_daemon_0;
    }
  }
  return wait;
}
