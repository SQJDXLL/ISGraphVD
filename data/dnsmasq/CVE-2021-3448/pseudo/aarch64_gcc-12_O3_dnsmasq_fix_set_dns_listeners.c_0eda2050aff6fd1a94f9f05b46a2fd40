int __fastcall set_dns_listeners(time_t now)
{
  dnsmasq_daemon *v1; // x1
  unsigned __int64 refcount; // x2
  int v4; // w21
  unsigned int v5; // w0
  __int64 v6; // x3
  tftp_transfer *tftp_trans; // x19
  serverfd *sfds; // x19
  int *numrrand; // x3
  randfd *randomsocks; // x4
  __int64 v11; // x19
  randfd *v12; // x0
  randfd_list *rfl_poll; // x19
  listener *listeners; // x19
  __int64 tftpfd; // x0
  __int64 fd; // x0
  __int64 tcpfd; // x0
  dnsmasq_daemon *v18; // x4
  pid_t *tcp_pids; // x1
  int v20; // w19
  __int64 v21; // x0
  int wait; // [xsp+34h] [xbp+34h] BYREF

  v1 = dnsmasq_daemon_0;
  refcount = (unsigned __int64)&_stack_chk_guard;
  v4 = 0;
  v5 = dnsmasq_daemon_0->options[1];
  v6 = 0LL;
  wait = 0;
  if ( (v5 & 0x10000000) == 0 )
  {
    tftp_trans = dnsmasq_daemon_0->tftp_trans;
    if ( tftp_trans )
    {
      do
      {
        ++v4;
        poll_listen((unsigned int)tftp_trans->sockfd, 1LL, refcount, v6);
        tftp_trans = tftp_trans->next;
      }
      while ( tftp_trans );
      v1 = dnsmasq_daemon_0;
    }
  }
  if ( v1->port )
  {
    get_new_frec(now, &wait, 0LL, v6);
    v1 = dnsmasq_daemon_0;
  }
  sfds = v1->sfds;
  if ( sfds )
  {
    do
    {
      poll_listen((unsigned int)sfds->fd, 1LL, refcount, v6);
      sfds = sfds->next;
    }
    while ( sfds );
    v1 = dnsmasq_daemon_0;
  }
  numrrand = (int *)(unsigned int)v1->numrrand;
  if ( (int)numrrand > 0 )
  {
    randomsocks = v1->randomsocks;
    v11 = 0LL;
    while ( 1 )
    {
      while ( 1 )
      {
        v12 = &randomsocks[v11];
        refcount = v12->refcount;
        if ( v12->refcount )
          break;
        if ( (int)numrrand <= (int)++v11 )
          goto LABEL_14;
      }
      ++v11;
      poll_listen((unsigned int)v12->fd, 1LL, refcount, numrrand);
      v1 = dnsmasq_daemon_0;
      numrrand = (int *)(unsigned int)dnsmasq_daemon_0->numrrand;
      if ( (int)numrrand <= (int)v11 )
        break;
      randomsocks = dnsmasq_daemon_0->randomsocks;
    }
  }
LABEL_14:
  rfl_poll = v1->rfl_poll;
  if ( rfl_poll )
  {
    do
    {
      poll_listen((unsigned int)rfl_poll->rfd->fd, 1LL, refcount, numrrand);
      rfl_poll = rfl_poll->next;
    }
    while ( rfl_poll );
    v1 = dnsmasq_daemon_0;
  }
  listeners = v1->listeners;
  if ( listeners )
  {
    do
    {
      fd = (unsigned int)listeners->fd;
      if ( (_DWORD)fd != -1 && !wait )
        poll_listen(fd, 1LL, refcount, numrrand);
      tcpfd = (unsigned int)listeners->tcpfd;
      v18 = dnsmasq_daemon_0;
      if ( (_DWORD)tcpfd != -1 )
      {
        tcp_pids = dnsmasq_daemon_0->tcp_pids;
        numrrand = dnsmasq_daemon_0->tcp_pipes;
        while ( 1 )
        {
          refcount = (unsigned int)*tcp_pids;
          if ( !(_DWORD)refcount )
          {
            refcount = (unsigned int)tcp_pids[20];
            if ( (_DWORD)refcount == -1 )
              break;
          }
          if ( numrrand == ++tcp_pids )
            goto LABEL_19;
        }
        poll_listen(tcpfd, 1LL, refcount, numrrand);
        v18 = dnsmasq_daemon_0;
      }
LABEL_19:
      if ( v18->tftp_max >= v4 )
      {
        tftpfd = (unsigned int)listeners->tftpfd;
        if ( (_DWORD)tftpfd != -1 )
          poll_listen(tftpfd, 1LL, refcount, numrrand);
      }
      listeners = listeners->next;
    }
    while ( listeners );
    v1 = dnsmasq_daemon_0;
  }
  if ( (v1->options[0] & 0x40) == 0 )
  {
    v20 = 0;
    while ( 1 )
    {
      v21 = (unsigned int)v1->tcp_pipes[v20];
      if ( (_DWORD)v21 != -1 )
        poll_listen(v21, 1LL, refcount, numrrand);
      if ( ++v20 == 20 )
        break;
      v1 = dnsmasq_daemon_0;
    }
  }
  return wait;
}
