__int64 __usercall set_dns_listeners@<edx:eax>(time_t now@<eax>)
{
  int v2; // esi
  tftp_transfer *tftp_trans; // edi
  serverfd *i; // edi
  dnsmasq_daemon *v5; // edx
  int v6; // edi
  int v7; // eax
  randfd_list *j; // edi
  listener *k; // edi
  int m; // esi
  dnsmasq_daemon *tcp_pids; // eax
  int tcpfd; // ecx
  int tftpfd; // eax
  int v14; // eax
  __int64 result; // rax
  int wait; // [esp+8h] [ebp-24h] BYREF
  unsigned int v17; // [esp+Ch] [ebp-20h]

  v17 = __readgsdword(0x14u);
  wait = 0;
  v2 = 0;
  if ( (dnsmasq_daemon_0->options[1] & 0x10000000) == 0 )
  {
    tftp_trans = dnsmasq_daemon_0->tftp_trans;
    if ( tftp_trans )
    {
      do
      {
        ++v2;
        poll_listen(tftp_trans->sockfd, 1);
        tftp_trans = tftp_trans->next;
      }
      while ( tftp_trans );
    }
    else
    {
      v2 = 0;
    }
  }
  if ( dnsmasq_daemon_0->port )
    get_new_frec(now, &wait, 0);
  for ( i = dnsmasq_daemon_0->sfds; i; i = i->next )
    poll_listen(i->fd, 1);
  v5 = dnsmasq_daemon_0;
  if ( dnsmasq_daemon_0->numrrand > 0 )
  {
    v6 = 0;
    do
    {
      v7 = (int)&v5->randomsocks[v6];
      if ( *(_WORD *)(v7 + 8) )
        poll_listen(*(_DWORD *)(v7 + 4), 1);
      ++v6;
      v5 = dnsmasq_daemon_0;
    }
    while ( dnsmasq_daemon_0->numrrand > v6 );
  }
  for ( j = v5->rfl_poll; j; j = j->next )
    poll_listen(j->rfd->fd, 1);
  for ( k = dnsmasq_daemon_0->listeners; k; k = k->next )
  {
    if ( k->fd != -1 && !wait )
      poll_listen(k->fd, 1);
    tcpfd = k->tcpfd;
    if ( tcpfd != -1 )
    {
      tcp_pids = (dnsmasq_daemon *)dnsmasq_daemon_0->tcp_pids;
      while ( tcp_pids->options[0] || tcp_pids->auth_zones != (auth_zone *)-1 )
      {
        tcp_pids = (dnsmasq_daemon *)((char *)tcp_pids + 4);
        if ( tcp_pids == (dnsmasq_daemon *)dnsmasq_daemon_0->tcp_pipes )
          goto LABEL_29;
      }
      poll_listen(tcpfd, 1);
    }
LABEL_29:
    if ( dnsmasq_daemon_0->tftp_max >= v2 )
    {
      tftpfd = k->tftpfd;
      if ( tftpfd != -1 )
        poll_listen(tftpfd, 1);
    }
  }
  if ( (dnsmasq_daemon_0->options[0] & 0x40) == 0 )
  {
    for ( m = 0; m != 20; ++m )
    {
      v14 = dnsmasq_daemon_0->tcp_pipes[m];
      if ( v14 != -1 )
        poll_listen(v14, 1);
    }
  }
  LODWORD(result) = wait;
  HIDWORD(result) = v17 - __readgsdword(0x14u);
  return result;
}
