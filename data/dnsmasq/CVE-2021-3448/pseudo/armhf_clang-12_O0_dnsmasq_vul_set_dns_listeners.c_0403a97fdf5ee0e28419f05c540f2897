int __cdecl set_dns_listeners(time_t now)
{
  tftp_transfer *i; // [sp+4h] [bp-1Ch]
  int v3; // [sp+8h] [bp-18h]
  int j; // [sp+Ch] [bp-14h]
  int k; // [sp+Ch] [bp-14h]
  int m; // [sp+Ch] [bp-14h]
  int v7; // [sp+10h] [bp-10h] BYREF
  listener *listener; // [sp+14h] [bp-Ch]
  serverfd *serverfdp; // [sp+18h] [bp-8h]
  time_t nowa; // [sp+1Ch] [bp-4h]

  nowa = now;
  v7 = 0;
  v3 = 0;
  if ( (dnsmasq_daemon_0->options[1] & 0x10000000) == 0 )
  {
    for ( i = dnsmasq_daemon_0->tftp_trans; i; i = i->next )
    {
      ++v3;
      poll_listen(i->sockfd, 1);
    }
  }
  if ( dnsmasq_daemon_0->port )
    get_new_frec(nowa, &v7, 0);
  for ( serverfdp = dnsmasq_daemon_0->sfds; serverfdp; serverfdp = serverfdp->next )
    poll_listen(serverfdp->fd, 1);
  if ( dnsmasq_daemon_0->port && !dnsmasq_daemon_0->osport )
  {
    for ( j = 0; j <= 63; ++j )
    {
      if ( dnsmasq_daemon_0->randomsocks[j].refcount )
        poll_listen(dnsmasq_daemon_0->randomsocks[j].fd, 1);
    }
  }
  for ( listener = dnsmasq_daemon_0->listeners; listener; listener = listener->next )
  {
    if ( listener->fd != -1 && !v7 )
      poll_listen(listener->fd, 1);
    if ( listener->tcpfd != -1 )
    {
      for ( k = 0; k <= 19; ++k )
      {
        if ( !dnsmasq_daemon_0->tcp_pids[k] && dnsmasq_daemon_0->tcp_pipes[k] == -1 )
        {
          poll_listen(listener->tcpfd, 1);
          break;
        }
      }
    }
    if ( v3 <= dnsmasq_daemon_0->tftp_max && listener->tftpfd != -1 )
      poll_listen(listener->tftpfd, 1);
  }
  if ( (dnsmasq_daemon_0->options[0] & 0x40) == 0 )
  {
    for ( m = 0; m <= 19; ++m )
    {
      if ( dnsmasq_daemon_0->tcp_pipes[m] != -1 )
        poll_listen(dnsmasq_daemon_0->tcp_pipes[m], 1);
    }
  }
  return v7;
}
