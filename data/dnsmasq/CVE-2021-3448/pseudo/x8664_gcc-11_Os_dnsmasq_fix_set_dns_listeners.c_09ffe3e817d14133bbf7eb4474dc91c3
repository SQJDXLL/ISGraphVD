int __fastcall set_dns_listeners(time_t now)
{
  int v1; // ebp
  tftp_transfer *i; // rbx
  serverfd *j; // rbx
  randfd *v4; // rax
  randfd_list *k; // rbx
  listener *m; // rbx
  __int64 fd; // rdi
  __int64 tcpfd; // rdi
  __int64 v9; // rax
  __int64 tftpfd; // rdi
  int n; // ebx
  __int64 v13; // rdi
  int wait; // [rsp+4h] [rbp-24h] BYREF
  unsigned __int64 v15; // [rsp+8h] [rbp-20h]

  v1 = 0;
  v15 = __readfsqword(0x28u);
  wait = 0;
  if ( (dnsmasq_daemon_0->options[1] & 0x10000000) == 0 )
  {
    for ( i = dnsmasq_daemon_0->tftp_trans; i; i = i->next )
    {
      ++v1;
      poll_listen((unsigned int)i->sockfd, 1LL);
    }
  }
  if ( dnsmasq_daemon_0->port )
    get_new_frec(now, &wait, 0LL);
  for ( j = dnsmasq_daemon_0->sfds; j; j = j->next )
    poll_listen((unsigned int)j->fd, 1LL);
  while ( dnsmasq_daemon_0->numrrand > (int)j )
  {
    v4 = &dnsmasq_daemon_0->randomsocks[(_QWORD)j];
    if ( v4->refcount )
      poll_listen((unsigned int)v4->fd, 1LL);
    j = (serverfd *)((char *)j + 1);
  }
  for ( k = dnsmasq_daemon_0->rfl_poll; k; k = k->next )
    poll_listen((unsigned int)k->rfd->fd, 1LL);
  for ( m = dnsmasq_daemon_0->listeners; m; m = m->next )
  {
    fd = (unsigned int)m->fd;
    if ( (_DWORD)fd != -1 && !wait )
      poll_listen(fd, 1LL);
    tcpfd = (unsigned int)m->tcpfd;
    if ( (_DWORD)tcpfd != -1 )
    {
      v9 = 0LL;
      while ( dnsmasq_daemon_0->tcp_pids[v9] || dnsmasq_daemon_0->tcp_pipes[v9] != -1 )
      {
        if ( ++v9 == 20 )
          goto LABEL_28;
      }
      poll_listen(tcpfd, 1LL);
    }
LABEL_28:
    if ( dnsmasq_daemon_0->tftp_max >= v1 )
    {
      tftpfd = (unsigned int)m->tftpfd;
      if ( (_DWORD)tftpfd != -1 )
        poll_listen(tftpfd, 1LL);
    }
  }
  if ( (dnsmasq_daemon_0->options[0] & 0x40) == 0 )
  {
    for ( n = 0; n != 20; ++n )
    {
      v13 = (unsigned int)dnsmasq_daemon_0->tcp_pipes[n];
      if ( (_DWORD)v13 != -1 )
        poll_listen(v13, 1LL);
    }
  }
  return wait;
}
