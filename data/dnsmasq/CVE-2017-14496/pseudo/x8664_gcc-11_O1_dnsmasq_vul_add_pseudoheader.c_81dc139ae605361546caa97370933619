size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int8 *pseudoheader; // rax
  int v11; // r15d
  unsigned __int8 *v12; // rbx
  unsigned __int8 *v13; // r12
  __int16 v14; // di
  unsigned __int8 v15; // si
  __int16 v16; // cx
  unsigned __int8 v17; // dl
  unsigned __int16 v18; // ax
  int v19; // ebp
  unsigned __int16 v20; // dx
  unsigned __int16 v21; // ax
  unsigned __int8 *v22; // rdi
  int v23; // ecx
  int v24; // r13d
  _BYTE *v25; // r12
  unsigned __int8 *v27; // rax
  char *v28; // rbx
  __int64 v29; // rdi
  _BYTE *v30; // rax
  _BYTE *v31; // r12
  _BYTE *v32; // rbp
  unsigned __int64 plena; // [rsp+0h] [rbp-88h]
  unsigned __int8 *p; // [rsp+20h] [rbp-68h]
  unsigned __int16 flags; // [rsp+2Ch] [rbp-5Ch]
  unsigned __int16 rcode; // [rsp+2Eh] [rbp-5Ah]
  int is_sign; // [rsp+38h] [rbp-50h] BYREF
  int is_last; // [rsp+3Ch] [rbp-4Ch] BYREF
  unsigned __int8 *udp_len[9]; // [rsp+40h] [rbp-48h] BYREF

  plena = plen;
  udp_len[1] = (unsigned __int8 *)__readfsqword(0x28u);
  pseudoheader = find_pseudoheader(header, plen, 0LL, udp_len, &is_sign, &is_last);
  v11 = is_sign;
  if ( is_sign )
    return plena;
  v12 = pseudoheader;
  if ( !pseudoheader )
  {
    flags = (set_do != 0) << 15;
    rcode = 0;
    goto LABEL_34;
  }
  v13 = udp_len[0];
  v14 = *udp_len[0];
  v15 = udp_len[0][1];
  v16 = udp_len[0][2];
  v17 = udp_len[0][3];
  v18 = _byteswap_ushort(*((_WORD *)udp_len[0] + 2));
  flags = v18;
  if ( set_do )
  {
    flags = v18 | 0x8000;
    udp_len[0][4] = (unsigned __int16)(v18 | 0x8000) >> 8;
    v13[5] = v18;
  }
  v19 = v13[7] | (v13[6] << 8);
  v12 = v13 + 8;
  p = v13 + 8;
  if ( v19 + v13 + 8 - (unsigned __int8 *)header <= plena && optno )
  {
    udp_sz = v15 | (unsigned __int16)(v14 << 8);
    rcode = v17 | (unsigned __int16)(v16 << 8);
    if ( v19 <= 4 )
    {
      if ( is_last )
      {
        v12 = v13 + 8;
        goto LABEL_20;
      }
    }
    else
    {
      v20 = _byteswap_ushort(*((_WORD *)v13 + 4));
      v21 = _byteswap_ushort(*((_WORD *)v13 + 5));
      v22 = v13 + 12;
      v23 = v21;
      if ( v19 < v21 )
      {
LABEL_10:
        is_last = 0;
        v12 = 0LL;
LABEL_11:
        plena = rrfilter(header, plena, 0LL);
        goto LABEL_34;
      }
      v24 = v11;
      while ( 1 )
      {
        if ( v20 == optno )
        {
          if ( !replace )
            return plena;
          v19 -= v23 + 4;
          memcpy(v12, &v12[v21 + 4], v19 - v24);
          v13[6] = BYTE1(v19);
          v13[7] = v19;
        }
        else
        {
          v12 = &v22[v21];
          v24 += v23 + 4;
        }
        if ( v24 + 4 >= v19 )
          break;
        v20 = _byteswap_ushort(*(_WORD *)v12);
        v21 = _byteswap_ushort(*((_WORD *)v12 + 1));
        v22 = v12 + 4;
        v23 = v21;
        if ( v21 + v24 > v19 )
          goto LABEL_10;
      }
      if ( is_last )
      {
        if ( v12 )
        {
LABEL_20:
          if ( limit - (v12 + 4) < (__int64)optlen )
            return plena;
          v25 = v13 + 6;
LABEL_22:
          if ( optno && replace != 2 )
          {
            *v12 = BYTE1(optno);
            v12[1] = optno;
            v12[2] = BYTE1(optlen);
            v12[3] = optlen;
            v28 = (char *)(v12 + 4);
            memcpy(v28, opt, optlen);
            v12 = (unsigned __int8 *)&v28[optlen];
            *v25 = (unsigned __int16)((_WORD)v12 - (_WORD)p) >> 8;
            v25[1] = (_BYTE)v12 - (_BYTE)p;
          }
          return v12 - (unsigned __int8 *)header;
        }
        v11 = v19;
LABEL_34:
        v29 = skip_questions(header, plena);
        if ( !v29 )
          return plena;
        v30 = (_BYTE *)skip_section(
                         v29,
                         (unsigned __int16)__ROL2__(header->arcount, 8)
                       + (unsigned __int16)__ROL2__(header->nscount, 8)
                       + (unsigned int)(unsigned __int16)__ROL2__(header->ancount, 8),
                         header,
                         plena);
        v31 = v30;
        if ( !v30 )
          return plena;
        *v30 = 0;
        v30[1] = 0;
        v30[2] = 41;
        v30[3] = HIBYTE(udp_sz);
        v30[4] = udp_sz;
        v30[5] = HIBYTE(rcode);
        v30[6] = rcode;
        v30[7] = HIBYTE(flags);
        v30[8] = flags;
        v30[9] = BYTE1(v11);
        v30[10] = v11;
        v32 = v30 + 11;
        LOWORD(p) = (_WORD)v30 + 11;
        if ( v12 )
        {
          memcpy(v30 + 11, v12, v11);
          free(v12);
          v12 = &v32[v11];
        }
        else
        {
          v12 = v30 + 11;
        }
        if ( limit - (v12 + 4) < (__int64)optlen )
          return plena;
        v25 = v31 + 9;
        header->arcount = __ROL2__(__ROL2__(header->arcount, 8) + 1, 8);
        goto LABEL_22;
      }
    }
    if ( v19 )
    {
      v27 = (unsigned __int8 *)whine_malloc(v19);
      v12 = v27;
      v11 = v19;
      if ( v27 )
        memcpy(v27, p, v19);
    }
    else
    {
      v11 = 0;
      v12 = 0LL;
    }
    goto LABEL_11;
  }
  return plena;
}
