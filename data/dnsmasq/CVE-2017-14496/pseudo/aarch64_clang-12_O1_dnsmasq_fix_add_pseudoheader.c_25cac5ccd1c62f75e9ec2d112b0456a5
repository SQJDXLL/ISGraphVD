size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int64 v15; // x20
  unsigned __int8 *pseudoheader; // x0
  char v19; // w27
  unsigned __int8 *v20; // x22
  unsigned __int64 v21; // x21
  int v22; // w23
  int v23; // w8
  unsigned __int16 *v24; // x28
  unsigned __int64 v25; // x25
  unsigned __int64 v26; // x9
  int v27; // w8
  unsigned __int8 v28; // w12
  unsigned __int8 v29; // w13
  unsigned __int8 v30; // w11
  void *v31; // x15
  unsigned __int8 v32; // w14
  __int64 v33; // x0
  void *v34; // x0
  unsigned __int8 *v35; // x0
  __int64 v36; // x0
  __int64 v37; // x25
  __uint16_t v38; // w28
  int v39; // w22
  __uint16_t v40; // w0
  __int64 v41; // x0
  int v42; // w26
  _WORD *v43; // x11
  size_t v44; // x2
  __int64 v45; // x21
  __uint16_t v46; // w0
  void *ptr; // [xsp+8h] [xbp-58h]
  void *ptra; // [xsp+8h] [xbp-58h]
  size_t v49; // [xsp+10h] [xbp-50h]
  _WORD *v50; // [xsp+18h] [xbp-48h]
  void *src; // [xsp+20h] [xbp-40h]
  unsigned __int8 *v52; // [xsp+28h] [xbp-38h]
  unsigned __int8 *v53; // [xsp+28h] [xbp-38h]
  unsigned __int8 v54; // [xsp+30h] [xbp-30h]
  unsigned __int8 v55; // [xsp+30h] [xbp-30h]
  unsigned __int8 v56; // [xsp+34h] [xbp-2Ch]
  unsigned __int8 v57; // [xsp+34h] [xbp-2Ch]
  unsigned __int8 v58; // [xsp+38h] [xbp-28h]
  unsigned __int8 v59; // [xsp+38h] [xbp-28h]
  unsigned __int8 v60; // [xsp+3Ch] [xbp-24h]
  unsigned __int8 v61; // [xsp+3Ch] [xbp-24h]
  unsigned __int8 *limita; // [xsp+40h] [xbp-20h]
  unsigned __int8 *limitb; // [xsp+40h] [xbp-20h]
  int is_last; // [xsp+50h] [xbp-10h] BYREF
  int is_sign; // [xsp+54h] [xbp-Ch] BYREF
  unsigned __int8 *udp_len; // [xsp+58h] [xbp-8h] BYREF

  v15 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0uLL, &udp_len, &is_sign, &is_last);
  if ( is_sign )
    return v15;
  if ( set_do )
    v19 = 0x80;
  else
    v19 = 0;
  if ( !pseudoheader )
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    LODWORD(v21) = 0;
    v31 = 0LL;
    v32 = HIBYTE(udp_sz);
LABEL_40:
    ptra = v31;
    v55 = v32;
    v57 = v29;
    v59 = v28;
    v61 = v30;
    v36 = skip_questions(header, v15);
    if ( !v36 )
      return v15;
    v37 = v36;
    limitb = limit;
    v53 = opt;
    v38 = _bswap_16(header->ancount);
    v39 = _bswap_16(header->nscount) + v38;
    v40 = _bswap_16(header->arcount);
    v41 = skip_section(v37, v39 + (unsigned int)v40, header, v15);
    if ( !v41 )
      return v15;
    limit = limitb;
    if ( v41 + 0xB > (unsigned __int64)limitb )
      return v15;
    *(_BYTE *)(v41 + 7) = v19;
    opt = v53;
    *(_BYTE *)(v41 + 3) = v55;
    *(_WORD *)v41 = 0;
    *(_BYTE *)(v41 + 5) = v57;
    *(_BYTE *)(v41 + 4) = udp_sz;
    *(_BYTE *)(v41 + 2) = 41;
    v42 = v41 + 0xB;
    *(_BYTE *)(v41 + 6) = v59;
    v25 = v41 + 0xB;
    *(_BYTE *)(v41 + 8) = v61;
    *(_BYTE *)(v41 + 9) = BYTE1(v21);
    v43 = (_WORD *)(v41 + 9);
    *(_BYTE *)(v41 + 10) = v21;
    if ( ptra )
    {
      v44 = (int)v21;
      v25 = v41 + 0xB + (int)v21;
      if ( v25 > (unsigned __int64)limitb )
      {
        free(ptra);
        return v15;
      }
      v45 = v41 + 9;
      memcpy((void *)(v41 + 0xB), ptra, v44);
      free(ptra);
      v43 = (_WORD *)v45;
    }
    v50 = v43;
    LODWORD(src) = v42;
    if ( (__int64)&limitb[-v25 - 4] >= (int)optlen )
    {
      v46 = _bswap_16(header->arcount);
      header->arcount = _bswap_16(v46 + 1);
    }
LABEL_33:
    v35 = (unsigned __int8 *)(v25 + 4);
    if ( (__int64)&limit[-v25 - 4] < (int)optlen )
      return v15;
    if ( optno && replace != 2 )
    {
      if ( v35 > limit )
        return v15;
      *(_BYTE *)(v25 + 1) = optno;
      *(_BYTE *)(v25 + 3) = optlen;
      *(_BYTE *)v25 = BYTE1(optno);
      *(_BYTE *)(v25 + 2) = BYTE1(optlen);
      v25 = (unsigned __int64)&v35[optlen];
      if ( &v35[optlen] > limit )
        return v15;
      memcpy(v35, opt, optlen);
      *v50 = bswap32(v25 - (_DWORD)src) >> 16;
    }
    return v25 - (_QWORD)header;
  }
  limita = limit;
  v20 = udp_len;
  v19 = udp_len[4];
  if ( set_do )
  {
    v19 |= 0x80u;
    udp_len[4] = v19;
  }
  LOBYTE(udp_sz) = v20[1];
  v21 = bswap64((unsigned __int64)*((unsigned __int16 *)v20 + 3) << 48);
  v50 = v20 + 6;
  src = v20 + 8;
  if ( !optno || v20 + 8 - (unsigned __int8 *)header + v21 > v15 )
    return v15;
  v49 = optlen;
  v52 = opt;
  v58 = v20[3];
  v60 = v20[5];
  v56 = v20[2];
  v54 = *v20;
  if ( (unsigned int)v21 < 5 )
  {
    v24 = (unsigned __int16 *)(v20 + 8);
LABEL_22:
    if ( is_last )
    {
      v31 = 0LL;
      v27 = 1;
      v25 = (unsigned __int64)v24;
      goto LABEL_24;
    }
LABEL_27:
    if ( (_DWORD)v21 && (v34 = (void *)whine_malloc((int)v21)) != 0LL )
    {
      ptr = v34;
      memcpy(v34, src, (int)v21);
    }
    else
    {
      ptr = 0LL;
    }
    optlen = v49;
    opt = v52;
    limit = limita;
    v33 = rrfilter(header, v15, 0LL);
    v28 = v58;
    v30 = v60;
    v29 = v56;
    v32 = v54;
    v31 = ptr;
    v25 = 0LL;
LABEL_32:
    v15 = v33;
    if ( v25 )
      goto LABEL_33;
    goto LABEL_40;
  }
  v22 = 0;
  v23 = 4;
  v24 = (unsigned __int16 *)(v20 + 8);
  while ( 1 )
  {
    v25 = (unsigned __int64)(v24 + 2);
    v26 = bswap64((unsigned __int64)v24[1] << 48);
    if ( (int)v26 + v23 > (int)v21 )
    {
      LODWORD(v21) = 0;
      is_last = 0;
      goto LABEL_27;
    }
    if ( bswap32(*v24 << 16) == optno )
      break;
    v24 = (unsigned __int16 *)(v25 + (unsigned int)v26);
    v22 += v26 + 4;
LABEL_14:
    v23 = v22 + 4;
    if ( v22 + 4 >= (int)v21 )
      goto LABEL_22;
  }
  v27 = replace;
  if ( replace )
  {
    LODWORD(v21) = v21 - v26 - 4;
    memcpy(v24, (const void *)(v25 + v26), (int)v21 - v22);
    *((_WORD *)v20 + 3) = bswap32(v21) >> 16;
    goto LABEL_14;
  }
  v31 = 0LL;
LABEL_24:
  optlen = v49;
  opt = v52;
  limit = limita;
  v28 = v58;
  v30 = v60;
  v29 = v56;
  v32 = v54;
  v33 = v15;
  if ( v27 )
    goto LABEL_32;
  return v15;
}
