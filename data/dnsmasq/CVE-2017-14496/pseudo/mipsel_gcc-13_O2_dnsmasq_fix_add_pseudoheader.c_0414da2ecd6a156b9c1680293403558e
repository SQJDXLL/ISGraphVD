size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int a5,
        int a6,
        int a7,
        int a8,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int8 *pseudoheader; // $v0
  size_t v17; // $s0
  int v18; // $s7
  unsigned __int8 *v19; // $fp
  unsigned __int8 *v20; // $fp
  unsigned int v21; // $v0
  __int16 v22; // $s4
  unsigned int v23; // $v0
  int v24; // $t0
  size_t result; // $v0
  unsigned __int8 *v26; // $s6
  unsigned int v27; // $a0
  unsigned int v28; // $v0
  int v29; // $v1
  int v30; // $a0
  unsigned __int8 *v31; // $a1
  int v32; // $t3
  unsigned int v33; // $a1
  unsigned int v34; // $a0
  int v35; // $v1
  unsigned __int8 *v36; // $a0
  _BYTE *v37; // $s4
  int v38; // $a0
  _BYTE *v39; // $v0
  _BYTE *v40; // $t0
  _BYTE *v41; // $a3
  unsigned __int8 *v42; // $v0
  int v43; // $t0
  int t_sb; // [sp+20h] [-28h]
  __int16 t_s; // [sp+20h] [-28h]
  _BYTE *t_sc; // [sp+20h] [-28h]
  size_t t_sa; // [sp+20h] [-28h]
  int i; // [sp+24h] [-24h]
  unsigned __int8 *t_cp; // [sp+2Ch] [-1Ch]
  unsigned int v50; // [sp+30h] [-18h]
  unsigned int v51; // [sp+34h] [-14h]
  unsigned __int8 *udp_len; // [sp+38h] [-10h] BYREF
  int is_sign; // [sp+3Ch] [-Ch] BYREF
  int is_last; // [sp+40h] [-8h] BYREF

  v17 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  v18 = is_sign;
  if ( is_sign )
    return v17;
  v19 = pseudoheader;
  if ( pseudoheader )
  {
    v20 = udp_len;
    v21 = (udp_len[5] << 8) | udp_len[4];
    v50 = (udp_len[1] << 8) | *udp_len;
    v51 = (udp_len[3] << 8) | udp_len[2];
    v22 = ((_WORD)v21 << 8) | (v21 >> 8);
    if ( set_do )
    {
      v22 |= 0x8000u;
      udp_len[4] = HIBYTE(v22);
      v20[5] = v22;
    }
    v23 = (v20[7] << 8) | v20[6];
    t_cp = v20 + 8;
    v24 = (unsigned __int16)(((_WORD)v23 << 8) | (v23 >> 8));
    result = v17;
    if ( v17 < v20 + 8 - (unsigned __int8 *)header + v24 )
      return result;
    if ( !optno )
      return v17;
    v26 = v20 + 8;
    if ( v24 < 5 )
    {
LABEL_16:
      if ( is_last )
      {
        v36 = v26 + 4;
        result = v17;
        if ( limit - (v26 + 4) < (int)optlen )
          return result;
        v37 = v20 + 6;
        goto LABEL_19;
      }
      if ( v24 )
      {
        t_sa = v24;
        v42 = (unsigned __int8 *)whine_malloc(v24);
        v19 = v42;
        v43 = t_sa;
        if ( v42 )
        {
          memcpy(v42, t_cp, t_sa);
          v43 = t_sa;
        }
        v18 = v43;
        goto LABEL_38;
      }
    }
    else
    {
      v27 = (v20[11] << 8) | v20[10];
      v28 = (v20[9] << 8) | v20[8];
      v29 = (unsigned __int16)(((_WORD)v27 << 8) | (v27 >> 8));
      v30 = (unsigned __int16)(((_WORD)v28 << 8) | (v28 >> 8));
      v31 = v20 + 0xC;
      if ( v24 >= v29 + 4 )
      {
        v26 = v20 + 8;
        v32 = 0;
        do
        {
          if ( v30 == optno )
          {
            v35 = v29 + 4;
            if ( !replace )
              return v17;
            i = v32;
            t_sb = v24 - v35;
            memcpy(v26, &v26[v35], v24 - v35 - v32);
            v24 = t_sb;
            v32 = i;
            v20[6] = BYTE1(t_sb);
            v20[7] = t_sb;
          }
          else
          {
            v26 = &v31[v29];
            v32 += v29 + 4;
          }
          if ( v32 + 4 >= v24 )
            goto LABEL_16;
          v33 = (v26[3] << 8) | v26[2];
          v34 = (v26[1] << 8) | *v26;
          v29 = (unsigned __int16)(((_WORD)v33 << 8) | (v33 >> 8));
          v30 = (unsigned __int16)(((_WORD)v34 << 8) | (v34 >> 8));
          v31 = v26 + 4;
        }
        while ( v24 >= v29 + v32 + 4 );
      }
      is_last = 0;
    }
    v19 = 0;
LABEL_38:
    t_s = ((_WORD)v51 << 8) | (v51 >> 8);
    udp_sz = ((_WORD)v50 << 8) | (v50 >> 8);
    v17 = rrfilter(header, v17, 0);
    goto LABEL_24;
  }
  t_s = 0;
  v22 = (set_do != 0) << 15;
LABEL_24:
  v38 = skip_questions(header, v17);
  if ( !v38 )
    return v17;
  v39 = (_BYTE *)skip_section(
                   v38,
                   (unsigned __int16)((header->ancount << 8) | HIBYTE(header->ancount))
                 + (unsigned __int16)((header->nscount << 8) | HIBYTE(header->nscount))
                 + (unsigned __int16)((header->arcount << 8) | HIBYTE(header->arcount)),
                   header,
                   v17);
  v40 = v39;
  if ( !v39 )
    return v17;
  v41 = v39 + 0xB;
  t_cp = v39 + 0xB;
  if ( limit < v39 + 0xB )
    return v17;
  *v39 = 0;
  v39[1] = 0;
  v39[2] = 41;
  v39[3] = HIBYTE(udp_sz);
  v39[4] = udp_sz;
  v39[5] = HIBYTE(t_s);
  v39[6] = t_s;
  v39[7] = HIBYTE(v22);
  v39[8] = v22;
  v39[9] = BYTE1(v18);
  v39[10] = v18;
  if ( v19 )
  {
    v26 = &v41[v18];
    if ( limit >= &v41[v18] )
    {
      t_sc = v39;
      memcpy(t_cp, v19, v18);
      free(v19);
      v40 = t_sc;
      goto LABEL_30;
    }
    free(v19);
    return v17;
  }
  v26 = v39 + 0xB;
LABEL_30:
  v36 = v26 + 4;
  result = v17;
  if ( limit - (v26 + 4) >= (int)optlen )
  {
    header->arcount = ((((unsigned __int16)(header->arcount << 8) | HIBYTE(header->arcount)) + 1) << 8) | ((unsigned __int16)(((header->arcount << 8) | HIBYTE(header->arcount)) + 1) >> 8);
    if ( !optno )
      return v26 - (unsigned __int8 *)header;
    v37 = v40 + 9;
LABEL_19:
    result = v26 - (unsigned __int8 *)header;
    if ( replace == 2 )
      return result;
    if ( limit >= v36 )
    {
      v26[2] = BYTE1(optlen);
      *v26 = BYTE1(optno);
      v26[1] = optno;
      v26[3] = optlen;
      v26 = &v36[optlen];
      if ( limit >= &v36[optlen] )
      {
        memcpy(v36, opt, optlen);
        *v37 = (unsigned __int16)((_WORD)v26 - (_WORD)t_cp) >> 8;
        v37[1] = (_BYTE)v26 - (_BYTE)t_cp;
        return v26 - (unsigned __int8 *)header;
      }
    }
    return v17;
  }
  return result;
}
