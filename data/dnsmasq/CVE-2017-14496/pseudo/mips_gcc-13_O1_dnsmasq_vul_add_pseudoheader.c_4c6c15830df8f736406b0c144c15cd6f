int __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int a5,
        int a6,
        int a7,
        int a8,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  size_t v14; // $s4
  unsigned __int8 *pseudoheader; // $v0
  int v17; // $s7
  unsigned __int8 *v18; // $s0
  unsigned __int8 *v19; // $s3
  unsigned __int16 v20; // $v0
  int v21; // $s1
  int v22; // $fp
  unsigned __int8 *v23; // $a2
  int v24; // $v0
  int v25; // $a1
  int v26; // $v1
  int v27; // $s2
  unsigned __int8 *v28; // $s0
  __int16 v29; // $s3
  int v30; // $v1
  unsigned __int8 *v31; // $s1
  _WORD *v32; // $s3
  unsigned __int8 *v33; // $v0
  int v34; // $a0
  int v35; // $v0
  int v36; // $s2
  u16 t_s; // [sp+2Eh] [-22h]
  int v40; // [sp+30h] [-20h]
  __int16 v41; // [sp+36h] [-1Ah]
  int v42; // [sp+38h] [-18h]
  __int16 v43; // [sp+3Eh] [-12h]
  unsigned __int8 *udp_len; // [sp+40h] [-10h] BYREF
  int is_sign; // [sp+44h] [-Ch] BYREF
  int is_last; // [sp+48h] [-8h] BYREF

  v14 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  v17 = is_sign;
  if ( is_sign )
    return v14;
  v18 = pseudoheader;
  if ( !pseudoheader )
  {
    t_s = (set_do != 0) << 15;
    v29 = 0;
    goto LABEL_33;
  }
  v19 = udp_len;
  v40 = *udp_len;
  v41 = udp_len[1];
  v42 = udp_len[2];
  v43 = udp_len[3];
  v20 = _byteswap_ushort(*((_WORD *)udp_len + 2));
  if ( set_do )
  {
    t_s = v20 | 0x8000;
    udp_len[4] = (unsigned __int16)(v20 | 0x8000) >> 8;
    v19[5] = v20;
  }
  else
  {
    t_s = v20;
  }
  v21 = (v19[6] << 8) | v19[7];
  LOWORD(v22) = (_WORD)v19 + 8;
  if ( v14 < v19 + 8 - (unsigned __int8 *)header + v21 || !optno )
    return v14;
  v23 = v19 + 0xC;
  if ( v21 < 5 )
  {
    v28 = v19 + 8;
    if ( is_last )
    {
      v31 = v19 + 0xC;
      goto LABEL_21;
    }
    goto LABEL_25;
  }
  v24 = _byteswap_ushort(*((_WORD *)v19 + 4));
  v25 = _byteswap_ushort(*((_WORD *)v19 + 5));
  v26 = v25;
  if ( v21 < v25 )
  {
LABEL_11:
    is_last = 0;
    v18 = 0;
LABEL_12:
    udp_sz = (HIWORD(v40) << 8) | v41;
    v29 = (HIWORD(v42) << 8) | v43;
    v14 = rrfilter(header, v14, 0);
LABEL_33:
    v34 = skip_questions(header, v14);
    if ( !v34 )
      return v14;
    v35 = skip_section(v34, header->ancount + header->nscount + header->arcount, header, v14);
    v36 = v35;
    if ( !v35 )
      return v14;
    *(_BYTE *)v35 = 0;
    *(_BYTE *)(v35 + 1) = 0;
    *(_BYTE *)(v35 + 2) = 41;
    *(_WORD *)(v35 + 3) = udp_sz;
    *(_WORD *)(v35 + 5) = v29;
    *(_WORD *)(v35 + 7) = t_s;
    *(_WORD *)(v35 + 9) = v17;
    v22 = v35 + 0xB;
    if ( v18 )
    {
      memcpy((void *)(v35 + 0xB), v18, v17);
      free(v18);
      v28 = (unsigned __int8 *)(v22 + v17);
    }
    else
    {
      v28 = (unsigned __int8 *)(v35 + 0xB);
    }
    v31 = v28 + 4;
    if ( limit - (v28 + 4) < (int)optlen )
      return v14;
    ++header->arcount;
    v32 = (_WORD *)(v36 + 9);
    if ( !optno )
      return v28 - (unsigned __int8 *)header;
    goto LABEL_23;
  }
  v27 = 0;
  v28 = v19 + 8;
  while ( 1 )
  {
    if ( v24 == optno )
    {
      v30 = v26 + 4;
      if ( !replace )
        return v14;
      v21 -= v30;
      memcpy(v28, &v28[v25 + 4], v21 - v27);
      *((_WORD *)v19 + 3) = v21;
    }
    else
    {
      v28 = &v23[v25];
      v27 += v26 + 4;
    }
    v23 = v28 + 4;
    if ( v27 + 4 >= v21 )
      break;
    v24 = _byteswap_ushort(*(_WORD *)v28);
    v25 = _byteswap_ushort(*((_WORD *)v28 + 1));
    v26 = v25;
    if ( v21 < v25 + v27 )
      goto LABEL_11;
  }
  if ( !is_last )
  {
LABEL_25:
    if ( v21 )
    {
      v33 = (unsigned __int8 *)whine_malloc(v21);
      v18 = v33;
      if ( v33 )
        memcpy(v33, v19 + 8, v21);
      v17 = v21;
    }
    else
    {
      v17 = 0;
      v18 = 0;
    }
    goto LABEL_12;
  }
  v31 = v28 + 4;
LABEL_21:
  if ( limit - v31 < (int)optlen )
    return v14;
  v32 = v19 + 6;
LABEL_23:
  v14 = v28 - (unsigned __int8 *)header;
  if ( replace != 2 )
  {
    *(_WORD *)v28 = optno;
    *((_WORD *)v28 + 1) = optlen;
    memcpy(v31, opt, optlen);
    v28 = &v31[optlen];
    *v32 = (_WORD)v31 + HIWORD(optlen) - v22;
    return v28 - (unsigned __int8 *)header;
  }
  return v14;
}
