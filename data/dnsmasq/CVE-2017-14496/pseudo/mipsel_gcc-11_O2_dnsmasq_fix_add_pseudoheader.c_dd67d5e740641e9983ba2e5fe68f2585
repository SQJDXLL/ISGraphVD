int __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int a5,
        int a6,
        int a7,
        int a8,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int8 *pseudoheader; // $v0
  size_t v16; // $s0
  int v17; // $s4
  unsigned __int8 *v18; // $fp
  unsigned __int8 *v19; // $fp
  unsigned int v20; // $v0
  __int16 v21; // $s3
  unsigned int v22; // $v0
  signed int v23; // $s7
  int result; // $v0
  unsigned __int8 *v25; // $s6
  unsigned int v26; // $a0
  unsigned int v27; // $v0
  int v28; // $v1
  int v29; // $a0
  unsigned __int8 *v30; // $a1
  int v31; // $t3
  unsigned int v32; // $a1
  unsigned int v33; // $a0
  int v34; // $v1
  __int16 v35; // $s7
  int v36; // $a0
  unsigned __int8 *v37; // $v0
  _BYTE *v38; // $v0
  _BYTE *v39; // $a3
  _BYTE *v40; // $s3
  unsigned __int8 *v41; // $a0
  unsigned __int8 *v42; // $s6
  int i; // [sp+20h] [-28h]
  unsigned __int8 *t_cp; // [sp+2Ch] [-1Ch]
  unsigned int v46; // [sp+30h] [-18h]
  unsigned int v47; // [sp+34h] [-14h]
  unsigned __int8 *udp_len; // [sp+38h] [-10h] BYREF
  int is_sign; // [sp+3Ch] [-Ch] BYREF
  int is_last; // [sp+40h] [-8h] BYREF

  v16 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  v17 = is_sign;
  if ( is_sign )
    return v16;
  v18 = pseudoheader;
  if ( pseudoheader )
  {
    v19 = udp_len;
    v20 = (udp_len[5] << 8) | udp_len[4];
    v46 = (udp_len[1] << 8) | *udp_len;
    v47 = (udp_len[3] << 8) | udp_len[2];
    v21 = ((_WORD)v20 << 8) | (v20 >> 8);
    if ( set_do )
    {
      v21 |= 0x8000u;
      udp_len[4] = HIBYTE(v21);
      v19[5] = v21;
    }
    v22 = (v19[7] << 8) | v19[6];
    t_cp = v19 + 8;
    v23 = (unsigned __int16)(((_WORD)v22 << 8) | (v22 >> 8));
    result = v16;
    if ( v16 < v19 + 8 - (unsigned __int8 *)header + v23 )
      return result;
    if ( !optno )
      return v16;
    v25 = v19 + 8;
    if ( v23 < 5 )
    {
LABEL_20:
      if ( is_last )
      {
        v41 = v25 + 4;
        result = v16;
        if ( limit - (v25 + 4) < (int)optlen )
          return result;
        v40 = v19 + 6;
        goto LABEL_37;
      }
      if ( v23 )
      {
        v37 = (unsigned __int8 *)whine_malloc(v23);
        v18 = v37;
        if ( v37 )
          memcpy(v37, t_cp, v23);
        v17 = v23;
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
    else
    {
      v26 = (v19[11] << 8) | v19[10];
      v27 = (v19[9] << 8) | v19[8];
      v28 = (unsigned __int16)(((_WORD)v26 << 8) | (v26 >> 8));
      v29 = (unsigned __int16)(((_WORD)v27 << 8) | (v27 >> 8));
      v30 = v19 + 0xC;
      if ( v23 >= v28 + 4 )
      {
        v25 = v19 + 8;
        v31 = 0;
        do
        {
          if ( v29 == optno )
          {
            v34 = v28 + 4;
            if ( !replace )
              return v16;
            v23 -= v34;
            i = v31;
            memcpy(v25, &v25[v34], v23 - v31);
            v31 = i;
            v19[6] = BYTE1(v23);
            v19[7] = v23;
          }
          else
          {
            v25 = &v30[v28];
            v31 += v28 + 4;
          }
          if ( v31 + 4 >= v23 )
            goto LABEL_20;
          v32 = (v25[3] << 8) | v25[2];
          v33 = (v25[1] << 8) | *v25;
          v28 = (unsigned __int16)(((_WORD)v32 << 8) | (v32 >> 8));
          v29 = (unsigned __int16)(((_WORD)v33 << 8) | (v33 >> 8));
          v30 = v25 + 4;
        }
        while ( v23 >= v28 + v31 + 4 );
      }
      is_last = 0;
      v18 = 0;
    }
    udp_sz = ((_WORD)v46 << 8) | (v46 >> 8);
    v35 = ((_WORD)v47 << 8) | (v47 >> 8);
    v16 = rrfilter(header, v16, 0);
  }
  else
  {
    v35 = 0;
    v21 = (set_do != 0) << 15;
  }
  v36 = skip_questions(header, v16);
  if ( !v36 )
    return v16;
  v38 = (_BYTE *)skip_section(
                   v36,
                   (unsigned __int16)((header->ancount << 8) | HIBYTE(header->ancount))
                 + (unsigned __int16)((header->nscount << 8) | HIBYTE(header->nscount))
                 + (unsigned __int16)((header->arcount << 8) | HIBYTE(header->arcount)),
                   header,
                   v16);
  if ( !v38 )
    return v16;
  v39 = v38 + 0xB;
  if ( limit < v38 + 0xB )
    return v16;
  v38[8] = v21;
  *v38 = 0;
  v38[1] = 0;
  v38[2] = 41;
  v38[3] = HIBYTE(udp_sz);
  v38[4] = udp_sz;
  v38[5] = HIBYTE(v35);
  v38[6] = v35;
  v38[7] = HIBYTE(v21);
  v40 = v38 + 9;
  v38[9] = BYTE1(v17);
  v38[10] = v17;
  t_cp = v38 + 0xB;
  if ( v18 )
  {
    v25 = &v39[v17];
    if ( limit < &v39[v17] )
    {
      free(v18);
      return v16;
    }
    memcpy(t_cp, v18, v17);
    free(v18);
  }
  else
  {
    v25 = v38 + 0xB;
  }
  v41 = v25 + 4;
  result = v16;
  if ( limit - (v25 + 4) < (int)optlen )
    return result;
  header->arcount = ((((unsigned __int16)(header->arcount << 8) | HIBYTE(header->arcount)) + 1) << 8) | ((unsigned __int16)(((header->arcount << 8) | HIBYTE(header->arcount)) + 1) >> 8);
  if ( !optno )
    return v25 - (unsigned __int8 *)header;
LABEL_37:
  result = v25 - (unsigned __int8 *)header;
  if ( replace != 2 )
  {
    if ( limit >= v41 )
    {
      v25[2] = BYTE1(optlen);
      *v25 = BYTE1(optno);
      v25[1] = optno;
      v25[3] = optlen;
      v42 = &v41[optlen];
      if ( limit >= &v41[optlen] )
      {
        memcpy(v41, opt, optlen);
        *v40 = (unsigned __int16)((_WORD)v42 - (_WORD)t_cp) >> 8;
        v40[1] = (_BYTE)v42 - (_BYTE)t_cp;
        return v42 - (unsigned __int8 *)header;
      }
    }
    return v16;
  }
  return result;
}
