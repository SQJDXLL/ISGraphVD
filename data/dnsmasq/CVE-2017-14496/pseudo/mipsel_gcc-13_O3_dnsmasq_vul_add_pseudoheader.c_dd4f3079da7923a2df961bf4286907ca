size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int a5,
        int a6,
        int a7,
        int a8,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int8 *pseudoheader; // $v0
  size_t v17; // $s0
  int v18; // $fp
  unsigned __int8 *v19; // $t0
  unsigned __int8 *v20; // $s7
  unsigned int v21; // $v0
  __int16 v22; // $s4
  unsigned int v23; // $v0
  signed int v24; // $s6
  unsigned __int8 *v25; // $a3
  size_t result; // $v0
  unsigned __int8 *v27; // $a0
  unsigned int v28; // $v0
  unsigned int v29; // $a0
  signed int v30; // $v1
  int v31; // $v0
  unsigned __int8 *v32; // $a2
  int v33; // $t2
  int v34; // $v0
  unsigned int v35; // $a2
  unsigned int v36; // $a1
  int v37; // $v1
  unsigned int v38; // $v0
  unsigned int v39; // $a1
  __int16 v40; // $s7
  int v41; // $a0
  _BYTE *v42; // $v0
  _BYTE *v43; // $v1
  _BYTE *v44; // $s4
  void *v45; // $a3
  _BYTE *v46; // $s0
  char *v47; // $a3
  void *v48; // $t0
  int v49; // $v0
  void *v50; // $v0
  int ia; // [sp+24h] [-24h]
  unsigned __int8 *i; // [sp+24h] [-24h]
  int ib; // [sp+24h] [-24h]
  unsigned __int8 *datap; // [sp+2Ch] [-1Ch]
  unsigned int v55; // [sp+30h] [-18h]
  _BYTE *v56; // [sp+30h] [-18h]
  unsigned int v57; // [sp+34h] [-14h]
  unsigned __int8 *udp_len; // [sp+38h] [-10h] BYREF
  int is_sign; // [sp+3Ch] [-Ch] BYREF
  int is_last; // [sp+40h] [-8h] BYREF

  v17 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  v18 = is_sign;
  if ( is_sign )
    return v17;
  v19 = pseudoheader;
  if ( pseudoheader )
  {
    v20 = udp_len;
    v21 = (udp_len[5] << 8) | udp_len[4];
    v57 = (udp_len[1] << 8) | *udp_len;
    v55 = (udp_len[3] << 8) | udp_len[2];
    v22 = ((_WORD)v21 << 8) | (v21 >> 8);
    if ( set_do )
    {
      v22 |= 0x8000u;
      udp_len[4] = HIBYTE(v22);
      v20[5] = v22;
    }
    v23 = (v20[7] << 8) | v20[6];
    v24 = (unsigned __int16)(((_WORD)v23 << 8) | (v23 >> 8));
    datap = v20 + 8;
    v25 = v20 + 8;
    result = v17;
    if ( v17 < v20 + 8 - (unsigned __int8 *)header + v24 )
      return result;
    if ( !optno )
      return v17;
    v27 = v20 + 8;
    if ( v24 < 5 )
    {
LABEL_29:
      v34 = is_last;
    }
    else
    {
      v28 = (v20[11] << 8) | v20[10];
      v29 = (v20[9] << 8) | v20[8];
      v30 = (unsigned __int16)(((_WORD)v28 << 8) | (v28 >> 8));
      v31 = (unsigned __int16)(((_WORD)v29 << 8) | (v29 >> 8));
      v32 = v20 + 0xC;
      if ( v24 < v30 )
      {
LABEL_36:
        is_last = 0;
        goto LABEL_37;
      }
      v33 = 0;
      if ( !replace )
      {
        while ( v31 != optno )
        {
          v33 += v30 + 4;
          v27 = &v32[v30];
          if ( v33 + 4 >= v24 )
            goto LABEL_29;
          v38 = (v27[3] << 8) | v27[2];
          v39 = (v27[1] << 8) | *v27;
          v30 = (unsigned __int16)(((_WORD)v38 << 8) | (v38 >> 8));
          v31 = (unsigned __int16)(((_WORD)v39 << 8) | (v39 >> 8));
          v32 = v27 + 4;
          if ( v24 < v30 + v33 )
            goto LABEL_36;
        }
        return v17;
      }
      v27 = v20 + 8;
      while ( 1 )
      {
        if ( v31 == optno )
        {
          v37 = v30 + 4;
          v24 -= v37;
          ia = v33;
          v27 = (unsigned __int8 *)memcpy(v27, &v27[v37], v24 - v33);
          v33 = ia;
          v20[6] = BYTE1(v24);
          v20[7] = v24;
        }
        else
        {
          v27 = &v32[v30];
          v33 += v30 + 4;
        }
        v34 = is_last;
        if ( v33 + 4 >= v24 )
          break;
        v35 = (v27[3] << 8) | v27[2];
        v36 = (v27[1] << 8) | *v27;
        v30 = (unsigned __int16)(((_WORD)v35 << 8) | (v35 >> 8));
        v31 = (unsigned __int16)(((_WORD)v36 << 8) | (v36 >> 8));
        v32 = v27 + 4;
        if ( v24 < v33 + v30 )
          goto LABEL_36;
      }
    }
    if ( v34 )
    {
      v45 = v27 + 4;
      result = v17;
      if ( limit - (v27 + 4) >= (int)optlen )
      {
        v46 = v20 + 6;
        goto LABEL_33;
      }
      return result;
    }
    if ( v24 )
    {
      v50 = (void *)whine_malloc(v24);
      v48 = v50;
      if ( v50 )
        v48 = memcpy(v50, datap, v24);
      v18 = v24;
      goto LABEL_38;
    }
LABEL_37:
    v48 = 0;
LABEL_38:
    ib = (int)v48;
    v49 = rrfilter(header, v17, 0, v25);
    udp_sz = ((_WORD)v57 << 8) | (v57 >> 8);
    v19 = (unsigned __int8 *)ib;
    v40 = ((_WORD)v55 << 8) | (v55 >> 8);
    v17 = v49;
    goto LABEL_22;
  }
  v40 = 0;
  v22 = (set_do != 0) << 15;
LABEL_22:
  i = v19;
  v41 = skip_questions(header, v17);
  if ( !v41 )
    return v17;
  v42 = (_BYTE *)skip_section(
                   v41,
                   (unsigned __int16)((header->ancount << 8) | HIBYTE(header->ancount))
                 + (unsigned __int16)((header->nscount << 8) | HIBYTE(header->nscount))
                 + (unsigned __int16)((header->arcount << 8) | HIBYTE(header->arcount)),
                   header,
                   v17);
  v43 = v42;
  if ( !v42 )
    return v17;
  v42[9] = BYTE1(v18);
  v42[8] = v22;
  *v42 = 0;
  v42[1] = 0;
  v42[2] = 41;
  v42[3] = HIBYTE(udp_sz);
  v42[4] = udp_sz;
  v42[5] = HIBYTE(v40);
  v42[6] = v40;
  v42[7] = HIBYTE(v22);
  v42[10] = v18;
  v44 = v42 + 0xB;
  LOWORD(datap) = (_WORD)v42 + 0xB;
  if ( i )
  {
    v56 = v42;
    memcpy(v42 + 0xB, i, v18);
    free(i);
    v43 = v56;
    v27 = &v44[v18];
  }
  else
  {
    v27 = v42 + 0xB;
  }
  v45 = v27 + 4;
  result = v17;
  if ( limit - (v27 + 4) >= (int)optlen )
  {
    header->arcount = ((((unsigned __int16)(header->arcount << 8) | HIBYTE(header->arcount)) + 1) << 8) | ((unsigned __int16)(((header->arcount << 8) | HIBYTE(header->arcount)) + 1) >> 8);
    if ( !optno )
      return v27 - (unsigned __int8 *)header;
    v46 = v43 + 9;
LABEL_33:
    if ( replace != 2 )
    {
      v27[2] = BYTE1(optlen);
      *v27 = BYTE1(optno);
      v27[1] = optno;
      v27[3] = optlen;
      v47 = (char *)memcpy(v45, opt, optlen);
      v27 = (unsigned __int8 *)&v47[optlen];
      *v46 = (unsigned __int16)((_WORD)v47 + optlen - (_WORD)datap) >> 8;
      v46[1] = (_BYTE)v47 + optlen - (_BYTE)datap;
    }
    return v27 - (unsigned __int8 *)header;
  }
  return result;
}
