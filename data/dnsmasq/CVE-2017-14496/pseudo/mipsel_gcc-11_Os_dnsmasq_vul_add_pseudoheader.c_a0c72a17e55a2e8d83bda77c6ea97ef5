int __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int a5,
        int a6,
        int a7,
        int a8,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  int v13; // $s3
  unsigned __int8 *pseudoheader; // $v0
  size_t v16; // $s1
  int v17; // $fp
  unsigned __int8 *v18; // $s4
  unsigned __int8 *v19; // $s4
  unsigned int v20; // $s5
  unsigned int v21; // $v0
  __int16 v22; // $s2
  unsigned int v23; // $v0
  char *v24; // $s3
  int v25; // $t2
  char *v26; // $a3
  _BYTE *v27; // $s2
  unsigned __int8 *v28; // $v0
  _BYTE *v29; // $v0
  unsigned int v30; // $v0
  unsigned __int16 v31; // $a0
  unsigned int v32; // $v0
  int v33; // $a1
  int v34; // $s5
  int v35; // $a0
  _BYTE *v36; // $v0
  int v37; // $a1
  unsigned __int8 *v38; // $v0
  unsigned int v40; // [sp+24h] [-24h]
  int i; // [sp+34h] [-14h]
  unsigned __int8 *udp_len; // [sp+38h] [-10h] BYREF
  int is_sign; // [sp+3Ch] [-Ch] BYREF
  int is_last; // [sp+40h] [-8h] BYREF

  LOWORD(v13) = udp_sz;
  v16 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  v17 = is_sign;
  if ( is_sign )
    return v16;
  v18 = pseudoheader;
  if ( pseudoheader )
  {
    v19 = udp_len;
    v40 = (udp_len[1] << 8) | *udp_len;
    v20 = (udp_len[3] << 8) | udp_len[2];
    v21 = (udp_len[5] << 8) | udp_len[4];
    v22 = ((_WORD)v21 << 8) | (v21 >> 8);
    if ( set_do )
    {
      v22 |= 0x8000u;
      udp_len[4] = HIBYTE(v22);
      v19[5] = v22;
    }
    v23 = (v19[7] << 8) | v19[6];
    v24 = (char *)(v19 + 8);
    v17 = (unsigned __int16)(((_WORD)v23 << 8) | (v23 >> 8));
    if ( v16 < v19 + 8 - (unsigned __int8 *)header + v17 )
      return v16;
    v25 = 0;
    if ( !optno )
      return v16;
    v26 = (char *)(v19 + 8);
    while ( v25 + 4 < v17 )
    {
      v30 = ((unsigned __int8)v26[1] << 8) | (unsigned __int8)*v26;
      v31 = ((_WORD)v30 << 8) | (v30 >> 8);
      v32 = ((unsigned __int8)v26[3] << 8) | (unsigned __int8)v26[2];
      v33 = (unsigned __int16)(((_WORD)v32 << 8) | (v32 >> 8));
      if ( v17 < v33 + v25 )
      {
        is_last = 0;
        v17 = 0;
        v18 = 0;
        goto LABEL_19;
      }
      if ( v31 == optno )
      {
        v37 = v33 + 4;
        if ( !replace )
          return v16;
        v17 -= v37;
        i = v25;
        v26 = (char *)memcpy(v26, &v26[v37], v17 - v25);
        v25 = i;
        v19[6] = BYTE1(v17);
        v19[7] = v17;
      }
      else
      {
        v26 += v33 + 4;
        v25 += v33 + 4;
      }
    }
    if ( is_last )
    {
      v27 = v19 + 6;
      goto LABEL_11;
    }
    v18 = 0;
    if ( v17 )
    {
      v38 = (unsigned __int8 *)whine_malloc(v17);
      v18 = v38;
      if ( v38 )
        memcpy(v38, v24, v17);
    }
LABEL_19:
    v13 = (v40 << 8) | (v40 >> 8);
    v34 = (v20 << 8) | (v20 >> 8);
    v16 = rrfilter(header, v16, 0);
  }
  else
  {
    LOWORD(v34) = 0;
    v22 = (set_do != 0) << 15;
  }
  v35 = skip_questions(header, v16);
  if ( v35 )
  {
    v36 = (_BYTE *)skip_section(
                     v35,
                     (unsigned __int16)((header->ancount << 8) | HIBYTE(header->ancount))
                   + (unsigned __int16)((header->nscount << 8) | HIBYTE(header->nscount))
                   + (unsigned __int16)((header->arcount << 8) | HIBYTE(header->arcount)),
                     header,
                     v16);
    if ( v36 )
    {
      *v36 = 0;
      v36[1] = 0;
      v36[2] = 41;
      v36[3] = BYTE1(v13);
      v36[5] = BYTE1(v34);
      v36[7] = HIBYTE(v22);
      v36[4] = v13;
      v24 = v36 + 0xB;
      v36[8] = v22;
      v36[6] = v34;
      v27 = v36 + 9;
      v36[9] = BYTE1(v17);
      v36[10] = v17;
      v26 = v36 + 0xB;
      if ( v18 )
      {
        memcpy(v24, v18, v17);
        free(v18);
        v26 = &v24[v17];
      }
      v28 = limit;
      if ( limit - (unsigned __int8 *)(v26 + 4) >= (int)optlen )
      {
        header->arcount = ((((unsigned __int16)(header->arcount << 8) | HIBYTE(header->arcount)) + 1) << 8) | ((unsigned __int16)(((header->arcount << 8) | HIBYTE(header->arcount)) + 1) >> 8);
LABEL_11:
        v28 = limit;
      }
      if ( v28 - (unsigned __int8 *)(v26 + 4) >= (int)optlen )
      {
        v16 = v26 - (char *)header;
        if ( optno )
        {
          if ( replace != 2 )
          {
            *v26 = BYTE1(optno);
            v26[1] = optno;
            v26[2] = BYTE1(optlen);
            v26[3] = optlen;
            v29 = memcpy(v26 + 4, opt, optlen);
            *v27 = (unsigned __int16)((_WORD)v29 + optlen - (_WORD)v24) >> 8;
            v27[1] = (_BYTE)v29 + optlen - (_BYTE)v24;
            return &v29[optlen] - (_BYTE *)header;
          }
        }
      }
    }
  }
  return v16;
}
