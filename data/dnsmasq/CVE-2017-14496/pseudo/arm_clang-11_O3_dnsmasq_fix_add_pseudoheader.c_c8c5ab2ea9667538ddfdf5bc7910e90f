size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned int v9; // r9
  dns_header *v10; // r5
  unsigned int v11; // r10
  void *v13; // r8
  unsigned __int8 *pseudoheader; // r0
  char v16; // r4
  unsigned __int8 *v17; // r2
  unsigned __int8 *v18; // r7
  int v19; // r8
  unsigned __int8 v20; // r10
  unsigned __int8 v21; // lr
  unsigned __int8 v22; // r12
  unsigned __int8 v23; // r6
  unsigned __int8 v24; // r3
  _BYTE *v25; // r11
  int v26; // r6
  unsigned __int8 *v27; // r10
  int v28; // r5
  int v29; // r0
  int v30; // r2
  unsigned __int8 *v31; // r0
  unsigned __int8 v32; // r11
  size_t v33; // r2
  __int16 v34; // r4
  unsigned __int8 *v35; // r0
  void *v36; // r0
  void *v37; // r7
  int v38; // r0
  int v39; // r1
  int v40; // r2
  int v41; // r0
  int v42; // r0
  _BYTE *v43; // r0
  char *v44; // r1
  unsigned int v45; // r0
  bool v46; // zf
  unsigned __int8 v47; // [sp+8h] [bp-50h]
  dns_header *v48; // [sp+Ch] [bp-4Ch]
  unsigned __int8 v49; // [sp+10h] [bp-48h]
  unsigned int v50; // [sp+14h] [bp-44h]
  void *dest; // [sp+18h] [bp-40h]
  unsigned __int8 v52; // [sp+1Ch] [bp-3Ch]
  unsigned __int8 v53; // [sp+20h] [bp-38h]
  unsigned __int8 *v54; // [sp+24h] [bp-34h]
  int v55; // [sp+28h] [bp-30h] BYREF
  int v56; // [sp+2Ch] [bp-2Ch] BYREF
  unsigned __int8 *v57; // [sp+30h] [bp-28h] BYREF

  v9 = plen;
  v10 = header;
  v11 = udp_sz;
  v13 = 0;
  pseudoheader = find_pseudoheader(header, plen, 0u, &v57, &v56, &v55);
  if ( v56 )
    return v9;
  v16 = set_do;
  if ( set_do )
    v16 = 0x80;
  if ( !pseudoheader )
  {
    v26 = 0;
    v32 = 0;
    v50 = v11 >> 8;
    v49 = 0;
    v52 = 0;
    goto LABEL_38;
  }
  v17 = limit;
  v18 = v57;
  v19 = optno;
  if ( set_do )
    LOBYTE(pseudoheader) = 0x80;
  v16 = v57[4];
  v20 = v57[5];
  v21 = *v57;
  v22 = v57[1];
  v23 = v57[2];
  v24 = v57[3];
  if ( set_do )
  {
    v16 |= (unsigned __int8)pseudoheader;
    v57[4] = v16;
  }
  if ( !optno )
    return v9;
  v52 = v23;
  v53 = v24;
  v25 = v18 + 6;
  v26 = v18[7] | (v18[6] << 8);
  dest = v18 + 8;
  if ( v18 + 8 - (unsigned __int8 *)v10 + v26 > v9 )
    return v9;
  v54 = v17;
  v47 = v22;
  v48 = v10;
  v49 = v20;
  LOBYTE(v50) = v21;
  if ( (unsigned int)v26 >= 5 )
  {
    if ( replace )
    {
      v27 = v18 + 8;
      v28 = 0;
      v29 = 4;
      while ( 1 )
      {
        v30 = v27[3] | (v27[2] << 8);
        if ( v30 + v29 > v26 )
          break;
        v31 = v27 + 4;
        if ( (v27[1] | (*v27 << 8)) == optno )
        {
          v26 = v26 - v30 - 4;
          memcpy(v27, &v31[v30], v26 - v28);
          v18[7] = v26;
          v18[6] = BYTE1(v26);
          v29 = v28 + 4;
          if ( v28 + 4 >= v26 )
            goto LABEL_22;
        }
        else
        {
          v27 = &v31[v30];
          v28 += v30 + 4;
          v29 = v28 + 4;
          if ( v28 + 4 >= v26 )
            goto LABEL_22;
        }
      }
    }
    else
    {
      v27 = v18 + 8;
      v38 = 0;
      v39 = 4;
      while ( 1 )
      {
        v40 = v27[3] | (v27[2] << 8);
        if ( v40 + v39 > v26 )
          break;
        if ( (v27[1] | (*v27 << 8)) == optno )
          return v9;
        v41 = v38 + v40;
        v27 += v40 + 4;
        v39 = v41 + 8;
        v38 = v41 + 4;
        if ( v39 >= v26 )
          goto LABEL_22;
      }
    }
    limit = v54;
    v26 = 0;
    v13 = 0;
    v55 = 0;
    goto LABEL_36;
  }
  v27 = v18 + 8;
LABEL_22:
  if ( !v55 )
  {
    limit = v54;
    v13 = 0;
    if ( v26 )
    {
      v36 = (void *)whine_malloc(v26);
      if ( v36 )
      {
        v37 = v36;
        memcpy(v36, dest, v26);
        v13 = v37;
      }
      LOBYTE(v11) = v47;
      v10 = v48;
      limit = v54;
      goto LABEL_37;
    }
    v26 = 0;
LABEL_36:
    LOBYTE(v11) = v47;
    v10 = v48;
LABEL_37:
    v32 = v53;
    v9 = rrfilter(v10, v9, 0);
LABEL_38:
    v42 = skip_questions(v10, v9);
    if ( !v42 )
      return v9;
    v43 = (_BYTE *)skip_section(
                     v42,
                     ((unsigned int)((v10->nscount << 8) & 0xFF0000 | (v10->nscount << 24)) >> 16)
                   + ((unsigned int)((v10->ancount << 8) & 0xFF0000 | (v10->ancount << 24)) >> 0x10)
                   + ((unsigned int)((v10->arcount << 8) & 0xFF0000 | (v10->arcount << 24)) >> 0x10),
                     v10,
                     v9);
    if ( !v43 )
      return v9;
    v44 = v43 + 0xB;
    if ( v43 + 0xB > limit )
      return v9;
    v43[7] = v16;
    v43[4] = v11;
    v43[10] = v26;
    v27 = v43 + 0xB;
    v34 = (_WORD)v43 + 0xB;
    v48 = v10;
    v43[8] = v49;
    v43[6] = v32;
    v43[5] = v52;
    v43[3] = v50;
    v43[2] = 41;
    v43[1] = 0;
    *v43 = 0;
    v43[9] = BYTE1(v26);
    v25 = v43 + 9;
    if ( v13 )
    {
      v27 = (unsigned __int8 *)&v44[v26];
      if ( &v44[v26] > (char *)limit )
      {
        free(v13);
        return v9;
      }
      memcpy(v44, v13, v26);
      free(v13);
    }
    v33 = optlen;
    if ( limit - v27 - 4 >= (int)optlen )
    {
      v45 = ((unsigned int)((v10->arcount << 8) & 0xFF0000 | (v10->arcount << 24)) >> 0x10) + 1;
      v10->arcount = ((v45 << 8) & 0xFF0000 | (v45 << 24)) >> 16;
    }
    v19 = optno;
    v35 = v27 + 4;
    if ( limit - (v27 + 4) < (int)optlen )
      return v9;
    goto LABEL_48;
  }
  limit = v54;
  v33 = optlen;
  v34 = (__int16)dest;
  v35 = v27 + 4;
  if ( v54 - (v27 + 4) < (int)optlen )
    return v9;
LABEL_48:
  v46 = v19 == 0;
  if ( v19 )
    v46 = replace == 2;
  if ( v46 )
    return v27 - (unsigned __int8 *)v48;
  if ( v35 > limit )
    return v9;
  v27[3] = v33;
  v27[1] = v19;
  v27[2] = BYTE1(v33);
  *v27 = BYTE1(v19);
  v27 = &v35[v33];
  if ( &v35[v33] > limit )
    return v9;
  memcpy(v35, opt, v33);
  v25[1] = (_BYTE)v27 - v34;
  *v25 = (unsigned __int16)((_WORD)v27 - v34) >> 8;
  return v27 - (unsigned __int8 *)v48;
}
