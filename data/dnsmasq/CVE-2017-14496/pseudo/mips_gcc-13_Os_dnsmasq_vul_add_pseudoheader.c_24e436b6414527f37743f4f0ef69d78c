int __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int a5,
        int a6,
        int a7,
        int a8,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int8 *pseudoheader; // $v0
  size_t v16; // $s2
  int v17; // $s4
  unsigned __int8 *v18; // $s1
  unsigned __int8 *v19; // $s1
  unsigned __int16 v20; // $s7
  unsigned __int16 v21; // $s3
  char *v22; // $fp
  int v23; // $a3
  char *v24; // $a0
  _WORD *v25; // $s1
  unsigned __int8 *v26; // $v0
  int v27; // $a0
  int v28; // $v0
  int v29; // $a3
  _BYTE *v30; // $v0
  int v31; // $a1
  int v32; // $a1
  int v33; // $a1
  int i; // [sp+2Ch] [-14h]
  int ia; // [sp+2Ch] [-14h]
  unsigned __int8 *udp_len; // [sp+30h] [-10h] BYREF
  int is_sign; // [sp+34h] [-Ch] BYREF
  int is_last; // [sp+38h] [-8h] BYREF

  v16 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  v17 = is_sign;
  if ( is_sign )
    return v16;
  v18 = pseudoheader;
  if ( pseudoheader )
  {
    v19 = udp_len;
    udp_sz = _byteswap_ushort(*(_WORD *)udp_len);
    v20 = _byteswap_ushort(*((_WORD *)udp_len + 1));
    v21 = _byteswap_ushort(*((_WORD *)udp_len + 2));
    if ( set_do )
    {
      v21 |= 0x8000u;
      udp_len[4] = HIBYTE(v21);
      v19[5] = v21;
    }
    v22 = (char *)(v19 + 8);
    v17 = v19[7] | (v19[6] << 8);
    if ( v16 < v19 + 8 - (unsigned __int8 *)header + v17 )
      return v16;
    v23 = 0;
    if ( !optno )
      return v16;
    v24 = (char *)(v19 + 8);
    while ( v23 + 4 < v17 )
    {
      v31 = (unsigned __int8)v24[3] | ((unsigned __int8)v24[2] << 8);
      if ( v17 < v31 + v23 )
      {
        is_last = 0;
LABEL_27:
        v17 = 0;
        v18 = 0;
        goto LABEL_13;
      }
      if ( ((unsigned __int8)v24[1] | ((unsigned __int8)*v24 << 8)) == optno )
      {
        v32 = v31 + 4;
        if ( !replace )
          return v16;
        v17 -= v32;
        ia = v23;
        v24 = (char *)memcpy(v24, &v24[v32], v17 - v23);
        v23 = ia;
        *((_WORD *)v19 + 3) = v17;
      }
      else
      {
        v33 = v31 + 4;
        v24 += v33;
        v23 += v33;
      }
    }
    v25 = v19 + 6;
    if ( is_last )
      goto LABEL_20;
    if ( !v17 )
      goto LABEL_27;
    v26 = (unsigned __int8 *)whine_malloc(v17);
    v18 = v26;
    if ( v26 )
      memcpy(v26, v22, v17);
LABEL_13:
    v16 = rrfilter(header, v16, 0);
  }
  else
  {
    v20 = 0;
    v21 = (set_do != 0) << 15;
  }
  v27 = skip_questions(header, v16);
  if ( v27 )
  {
    v28 = skip_section(v27, header->ancount + header->nscount + header->arcount, header, v16);
    v29 = v28;
    if ( v28 )
    {
      *(_BYTE *)v28 = 0;
      *(_BYTE *)(v28 + 1) = 0;
      *(_BYTE *)(v28 + 2) = 41;
      *(_BYTE *)(v28 + 3) = HIBYTE(udp_sz);
      *(_BYTE *)(v28 + 5) = HIBYTE(v20);
      *(_BYTE *)(v28 + 7) = HIBYTE(v21);
      v22 = (char *)(v28 + 0xB);
      *(_BYTE *)(v28 + 4) = udp_sz;
      *(_BYTE *)(v28 + 6) = v20;
      *(_BYTE *)(v28 + 8) = v21;
      *(_WORD *)(v28 + 9) = v17;
      v24 = (char *)(v28 + 0xB);
      if ( v18 )
      {
        i = v28;
        memcpy(v24, v18, v17);
        free(v18);
        v29 = i;
        v24 = &v22[v17];
      }
      v25 = (_WORD *)(v29 + 9);
      if ( limit - (unsigned __int8 *)(v24 + 4) >= (int)optlen )
        ++header->arcount;
LABEL_20:
      if ( limit - (unsigned __int8 *)(v24 + 4) >= (int)optlen )
      {
        v16 = v24 - (char *)header;
        if ( optno )
        {
          if ( replace != 2 )
          {
            *(_WORD *)v24 = optno;
            *((_WORD *)v24 + 1) = optlen;
            v30 = memcpy(v24 + 4, opt, optlen);
            *v25 = (_WORD)v30 + optlen - (_WORD)v22;
            return &v30[optlen] - (_BYTE *)header;
          }
        }
      }
    }
  }
  return v16;
}
