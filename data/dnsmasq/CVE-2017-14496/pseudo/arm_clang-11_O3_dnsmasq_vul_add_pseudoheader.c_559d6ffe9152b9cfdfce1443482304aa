size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned int v9; // r10
  unsigned int v11; // r6
  void *v13; // r8
  unsigned __int8 *pseudoheader; // r0
  int v16; // r4
  char v17; // r3
  unsigned __int8 *v18; // r4
  int v19; // r8
  unsigned __int8 *v20; // lr
  unsigned __int8 v21; // r7
  unsigned __int8 v22; // r2
  unsigned __int8 v23; // r12
  unsigned __int8 v24; // r3
  unsigned __int8 v25; // r5
  unsigned __int8 v26; // r6
  unsigned __int8 *v27; // r6
  int v28; // r9
  int v29; // r5
  int v30; // r0
  int v31; // r1
  unsigned __int8 *v32; // r2
  int v33; // r0
  int v34; // r2
  int v35; // r1
  char *v36; // r7
  void *v37; // r0
  void *v38; // r6
  int v39; // r0
  _BYTE *v40; // r0
  _BYTE *v41; // r2
  unsigned __int8 *v42; // r0
  unsigned __int8 *v43; // r6
  unsigned int v44; // r0
  bool v45; // zf
  __int16 v46; // r0
  unsigned __int8 v47; // [sp+Ch] [bp-54h]
  _BYTE *v48; // [sp+14h] [bp-4Ch]
  void *src; // [sp+18h] [bp-48h]
  unsigned int v50; // [sp+1Ch] [bp-44h]
  unsigned __int8 v51; // [sp+20h] [bp-40h]
  unsigned __int8 v52; // [sp+24h] [bp-3Ch]
  unsigned __int8 v53; // [sp+28h] [bp-38h]
  char v54; // [sp+2Ch] [bp-34h]
  int v55; // [sp+30h] [bp-30h] BYREF
  int v56; // [sp+34h] [bp-2Ch] BYREF
  unsigned __int8 *v57; // [sp+38h] [bp-28h] BYREF

  v9 = plen;
  v11 = udp_sz;
  v13 = 0;
  pseudoheader = find_pseudoheader(header, plen, 0u, &v57, &v56, &v55);
  if ( v56 )
    return v9;
  v16 = optlen;
  v17 = set_do;
  if ( set_do )
    v17 = 0x80;
  if ( !pseudoheader )
  {
    v54 = v17;
    v28 = 0;
    v50 = v11 >> 8;
    v53 = 0;
    v52 = 0;
    v51 = 0;
    goto LABEL_34;
  }
  v18 = v57;
  v19 = optno;
  v20 = limit;
  if ( set_do )
    LOBYTE(pseudoheader) = 0x80;
  v21 = v57[4];
  v22 = v57[5];
  v23 = *v57;
  v24 = v57[1];
  v25 = v57[2];
  v26 = v57[3];
  if ( set_do )
  {
    v21 |= (unsigned __int8)pseudoheader;
    v57[4] = v21;
  }
  if ( !optno )
    return v9;
  v53 = v22;
  v51 = v26;
  v52 = v25;
  v54 = v21;
  v27 = v18 + 8;
  v28 = v18[7] | (v18[6] << 8);
  if ( v18 + 8 - (unsigned __int8 *)header + v28 > v9 )
    return v9;
  v47 = v24;
  v48 = v18 + 6;
  src = v18 + 8;
  LOBYTE(v50) = v23;
  if ( (unsigned int)v28 >= 5 )
  {
    if ( replace )
    {
      v29 = 0;
      while ( 1 )
      {
        v30 = v27[3] | (v27[2] << 8);
        v31 = v30 + v29;
        if ( v30 + v29 > v28 )
          break;
        v32 = v27 + 4;
        if ( (v27[1] | (*v27 << 8)) == optno )
        {
          v28 = v28 - v30 - 4;
          memcpy(v27, &v32[v30], v28 - v29);
          v18[7] = v28;
          v18[6] = BYTE1(v28);
          if ( v29 + 4 >= v28 )
            goto LABEL_25;
        }
        else
        {
          v27 = &v32[v30];
          v29 = v31 + 4;
          if ( v31 + 8 >= v28 )
            goto LABEL_25;
        }
      }
    }
    else
    {
      v33 = 0;
      while ( 1 )
      {
        v34 = v27[3] | (v27[2] << 8);
        v35 = v34 + v33;
        if ( v34 + v33 > v28 )
          break;
        if ( (v27[1] | (*v27 << 8)) == optno )
          return v9;
        v27 += v34 + 4;
        v33 = v35 + 4;
        if ( v35 + 8 >= v28 )
          goto LABEL_25;
      }
    }
    v16 = optlen;
    limit = v20;
    v28 = 0;
    v13 = 0;
    v55 = 0;
    goto LABEL_33;
  }
LABEL_25:
  if ( !v55 )
  {
    v16 = optlen;
    limit = v20;
    v13 = 0;
    if ( v28 )
    {
      v37 = (void *)whine_malloc(v28);
      if ( v37 )
      {
        v38 = v37;
        memcpy(v37, src, v28);
        v13 = v38;
      }
    }
    else
    {
      v28 = 0;
    }
LABEL_33:
    LOBYTE(v11) = v47;
    v9 = rrfilter(header, v9, 0);
LABEL_34:
    v39 = skip_questions(header, v9);
    if ( !v39 )
      return v9;
    v40 = (_BYTE *)skip_section(
                     v39,
                     ((unsigned int)((header->nscount << 8) & 0xFF0000 | (header->nscount << 24)) >> 16)
                   + ((unsigned int)((header->ancount << 8) & 0xFF0000 | (header->ancount << 24)) >> 0x10)
                   + ((unsigned int)((header->arcount << 8) & 0xFF0000 | (header->arcount << 24)) >> 0x10),
                     header,
                     v9);
    if ( !v40 )
      return v9;
    v40[10] = v28;
    v40[4] = v11;
    v41 = v40;
    v40[8] = v53;
    v40[7] = v54;
    v40[6] = v51;
    v40[5] = v52;
    v40[3] = v50;
    v40[2] = 41;
    v40[1] = 0;
    *v40 = 0;
    v42 = v40 + 0xB;
    v41[9] = BYTE1(v28);
    v27 = v42;
    v48 = v41 + 9;
    if ( v13 )
    {
      v43 = v42;
      memcpy(v42, v13, v28);
      free(v13);
      LOWORD(v42) = (_WORD)v43;
      v27 = &v43[v28];
    }
    LOWORD(src) = (_WORD)v42;
    if ( limit - v27 - 4 >= v16 )
    {
      v44 = ((unsigned int)((header->arcount << 8) & 0xFF0000 | (header->arcount << 24)) >> 0x10) + 1;
      header->arcount = ((v44 << 8) & 0xFF0000 | (v44 << 24)) >> 16;
    }
    v19 = optno;
    v36 = (char *)(v27 + 4);
    if ( limit - (v27 + 4) < v16 )
      return v9;
    goto LABEL_41;
  }
  v16 = optlen;
  v36 = (char *)(v27 + 4);
  if ( v20 - (v27 + 4) < (int)optlen )
    return v9;
LABEL_41:
  v45 = v19 == 0;
  if ( v19 )
    v45 = replace == 2;
  if ( !v45 )
  {
    v27[3] = v16;
    v27[1] = v19;
    v27[2] = BYTE1(v16);
    *v27 = BYTE1(v19);
    memcpy(v36, opt, v16);
    v27 = (unsigned __int8 *)&v36[v16];
    v46 = (_WORD)v36 + v16 - (_WORD)src;
    v48[1] = v46;
    *v48 = HIBYTE(v46);
  }
  return v27 - (unsigned __int8 *)header;
}
