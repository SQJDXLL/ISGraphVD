size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int8 *pseudoheader; // rax
  __int64 v14; // rdx
  __int64 v15; // rbp
  int v17; // ebx
  __int16 v18; // si
  unsigned __int8 *v19; // rsi
  __int16 v20; // bx
  __int64 v21; // r8
  dns_header *v22; // rcx
  unsigned __int64 v23; // rdx
  __int16 v24; // r12
  dns_header *v25; // r14
  int v26; // ebp
  unsigned __int8 *v27; // rbx
  unsigned __int64 v28; // rax
  _BYTE *v29; // rsi
  unsigned __int64 v30; // r13
  void *v31; // r15
  __int16 v32; // r14
  dns_header *v33; // r13
  void *v34; // rsi
  u16 *p_ancount; // r14
  signed __int64 v36; // rdx
  unsigned __int8 *v37; // r15
  __int16 v38; // r12
  unsigned int v39; // eax
  size_t v40; // rbp
  void *v41; // rax
  __int64 v42; // rax
  __m128i v43; // xmm0
  __m128i v44; // xmm0
  __int64 v45; // rax
  int v46; // ecx
  __int64 v47; // r14
  __int64 v48; // rbx
  _BYTE *v49; // r13
  void *v50; // rdi
  signed __int64 v51; // rbx
  unsigned __int8 *v52; // r13
  unsigned int v54; // [rsp+14h] [rbp-74h]
  __int16 v56; // [rsp+24h] [rbp-64h]
  void *dest; // [rsp+28h] [rbp-60h]
  char *desta; // [rsp+28h] [rbp-60h]
  __int16 v59; // [rsp+30h] [rbp-58h]
  int is_last; // [rsp+34h] [rbp-54h] BYREF
  unsigned __int8 *v61; // [rsp+38h] [rbp-50h]
  void *src; // [rsp+40h] [rbp-48h]
  unsigned __int8 *v63; // [rsp+48h] [rbp-40h] BYREF
  int is_sign[13]; // [rsp+54h] [rbp-34h] BYREF

  pseudoheader = find_pseudoheader(header, plen, 0LL, &v63, is_sign, &is_last);
  if ( is_sign[0] )
    return plen;
  v61 = limit;
  src = opt;
  v17 = 0;
  v54 = optno;
  HIBYTE(v18) = 0;
  LOBYTE(v14) = set_do != 0;
  if ( !pseudoheader )
  {
    LOBYTE(v18) = set_do != 0;
    v59 = v18 << 15;
    v31 = 0LL;
    v32 = 0;
    v33 = header;
    v15 = plen;
    goto LABEL_30;
  }
  v19 = v63;
  v20 = __ROL2__(*((_WORD *)v63 + 2), 8);
  if ( set_do )
  {
    v20 |= 0x8000u;
    v63[4] = HIBYTE(v20);
  }
  v21 = (unsigned int)optno;
  v22 = header;
  if ( !optno )
    return plen;
  v23 = _byteswap_uint64((unsigned __int64)*((unsigned __int16 *)v19 + 3) << 48);
  if ( v23 + v19 + 8 - (unsigned __int8 *)header > plen )
    return plen;
  dest = v19 + 8;
  v59 = v20;
  v24 = *(_WORD *)v19;
  v25 = (dns_header *)v19;
  v56 = *((_WORD *)v19 + 1);
  if ( (unsigned int)v23 >= 5 )
  {
    v26 = 0;
    v27 = v19 + 8;
    while ( 1 )
    {
      v28 = _byteswap_uint64((unsigned __int64)*((unsigned __int16 *)v27 + 1) << 48);
      if ( (int)v28 + v26 > (int)v23 )
        break;
      v29 = v27 + 4;
      if ( _byteswap_ulong(*(unsigned __int16 *)v27 << 16) == (_DWORD)v21 )
      {
        if ( !replace )
          return plen;
        v19 = &v29[v28];
        v30 = (unsigned int)(v23 - v28 - 4);
        memcpy(v27, v19, (int)v30 - v26);
        v23 = v30;
        v21 = v54;
        v22 = v25;
        v25->ancount = __ROL2__(v30, 8);
      }
      else
      {
        v22 = (dns_header *)(unsigned int)v28;
        v19 = &v29[(unsigned int)v28];
        v26 += v28 + 4;
        v27 = v19;
      }
      if ( v26 + 4 >= (int)v23 )
        goto LABEL_20;
    }
    is_last = 0;
    v17 = 0;
LABEL_26:
    v31 = 0LL;
    goto LABEL_27;
  }
  v27 = v19 + 8;
LABEL_20:
  v33 = header;
  if ( is_last )
  {
    v34 = src;
    p_ancount = &v25->ancount;
    v36 = optlen;
    v37 = v61;
    v15 = plen;
    v38 = (__int16)dest;
    v39 = v21;
    goto LABEL_37;
  }
  if ( !(_DWORD)v23 )
  {
    v17 = 0;
    v31 = 0LL;
    goto LABEL_29;
  }
  v17 = v23;
  v40 = (int)v23;
  v41 = (void *)whine_malloc((int)v23, v19, v23, v22, v21);
  if ( !v41 )
    goto LABEL_26;
  v31 = v41;
  memcpy(v41, dest, v40);
LABEL_27:
  v33 = header;
LABEL_29:
  udp_sz = __ROL2__(v24, 8);
  v32 = __ROL2__(v56, 8);
  v15 = rrfilter(v33, plen, 0LL);
LABEL_30:
  v42 = skip_questions(v33, v15, v14);
  if ( !v42 )
    return v15;
  v43 = _mm_cvtsi32_si128(*(_DWORD *)&v33->ancount);
  v44 = _mm_or_si128(_mm_slli_epi16(v43, 8u), _mm_srli_epi16(v43, 8u));
  v45 = skip_section(
          v42,
          _mm_cvtsi128_si32(_mm_add_epi32(_mm_srli_epi32(v44, 0x10u), _mm_unpacklo_epi16(v44, (__m128i)0LL)))
        + (unsigned int)(unsigned __int16)__ROL2__(v33->arcount, 8),
          v33,
          v15);
  if ( !v45 )
    return v15;
  *(_WORD *)v45 = 0;
  *(_BYTE *)(v45 + 2) = 41;
  *(_BYTE *)(v45 + 3) = HIBYTE(udp_sz);
  *(_BYTE *)(v45 + 4) = udp_sz;
  *(_BYTE *)(v45 + 5) = HIBYTE(v32);
  *(_BYTE *)(v45 + 6) = v32;
  *(_BYTE *)(v45 + 7) = HIBYTE(v59);
  *(_BYTE *)(v45 + 8) = v59;
  v46 = v17;
  *(_BYTE *)(v45 + 9) = BYTE1(v17);
  *(_BYTE *)(v45 + 10) = v17;
  v47 = v45;
  v38 = v45 + 11;
  v27 = (unsigned __int8 *)(v45 + 11);
  if ( v31 )
  {
    v48 = v46;
    desta = (char *)(v45 + 11);
    memcpy((void *)(v45 + 11), v31, v46);
    v38 = (__int16)desta;
    free(v31);
    v27 = (unsigned __int8 *)&desta[v48];
  }
  p_ancount = (u16 *)(v47 + 9);
  v37 = v61;
  v36 = optlen;
  v34 = src;
  if ( v61 - v27 - 4 >= (__int64)optlen )
  {
    v33->arcount = __ROL2__(__ROL2__(v33->arcount, 8) + 1, 8);
    v36 = optlen;
  }
  v39 = v54;
LABEL_37:
  v49 = v27 + 4;
  if ( v37 - (v27 + 4) >= v36 )
  {
    if ( v39 && replace != 2 )
    {
      *v27 = BYTE1(v39);
      v27[1] = v39;
      v27[2] = BYTE1(v36);
      v27[3] = v36;
      v50 = v27 + 4;
      v51 = v36;
      memcpy(v50, v34, v36);
      v52 = &v49[v51];
      *p_ancount = __ROL2__((_WORD)v52 - v38, 8);
      v27 = v52;
    }
    return v27 - (unsigned __int8 *)header;
  }
  return v15;
}
