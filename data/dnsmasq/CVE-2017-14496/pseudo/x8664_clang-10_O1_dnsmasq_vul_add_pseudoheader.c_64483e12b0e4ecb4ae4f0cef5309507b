size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int16 *v10; // rbp
  size_t v13; // r14
  unsigned __int8 *pseudoheader; // rax
  __int64 v17; // rcx
  __int16 v18; // si
  unsigned __int16 *v19; // rsi
  int v20; // eax
  __int16 v21; // bx
  __int64 v22; // rdx
  void *v23; // r9
  unsigned __int16 *v24; // rdi
  unsigned int v25; // r10d
  unsigned __int64 v26; // rbx
  __int64 v27; // r8
  char v28; // r13
  int v29; // r13d
  unsigned __int64 v30; // rax
  int v31; // edi
  __int64 v32; // r15
  __int64 v33; // rax
  void *v34; // rax
  __int64 v35; // rdx
  __int16 v36; // bx
  _WORD *v37; // r14
  __int64 v38; // rbp
  __int64 v39; // rax
  __int64 v40; // r15
  int v41; // r13d
  int v42; // ebp
  __uint16_t v43; // ax
  __int64 v44; // rax
  int v45; // ecx
  __int64 v46; // r15
  __int64 v47; // rbx
  __int64 v48; // r15
  __uint16_t v49; // ax
  __uint16_t v50; // ax
  unsigned int v51; // [rsp+4h] [rbp-84h]
  __int16 v52; // [rsp+8h] [rbp-80h]
  __int16 v53; // [rsp+8h] [rbp-80h]
  __int16 v54; // [rsp+Ch] [rbp-7Ch]
  void *ptr; // [rsp+10h] [rbp-78h]
  void *ptra; // [rsp+10h] [rbp-78h]
  void *src; // [rsp+18h] [rbp-70h]
  int is_last; // [rsp+24h] [rbp-64h] BYREF
  unsigned __int8 *v59; // [rsp+28h] [rbp-60h]
  int v60; // [rsp+30h] [rbp-58h]
  int is_sign; // [rsp+34h] [rbp-54h] BYREF
  unsigned __int64 v62; // [rsp+38h] [rbp-50h]
  __int64 v63; // [rsp+40h] [rbp-48h]
  void *v64; // [rsp+48h] [rbp-40h]
  unsigned __int8 *v65; // [rsp+50h] [rbp-38h] BYREF

  LODWORD(v10) = optno;
  v13 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0LL, &v65, &is_sign, &is_last);
  if ( is_sign )
    return v13;
  v62 = 0LL;
  v51 = (unsigned int)v10;
  v17 = (unsigned int)set_do;
  HIBYTE(v18) = 0;
  v64 = opt;
  if ( !pseudoheader )
  {
    LOBYTE(v18) = set_do != 0;
    v54 = v18 << 15;
    v53 = 0;
    v23 = 0LL;
    v24 = 0LL;
    v25 = (unsigned int)v10;
    goto LABEL_32;
  }
  v19 = (unsigned __int16 *)v65;
  v20 = *(unsigned __int16 *)v65;
  v52 = *((_WORD *)v65 + 1);
  v21 = __ROL2__(*((_WORD *)v65 + 2), 8);
  v22 = (unsigned int)v10;
  v59 = limit;
  if ( set_do )
  {
    v54 = v21 | 0x8000;
    v65[4] = (unsigned __int16)(v21 | 0x8000) >> 8;
  }
  else
  {
    v54 = v21;
  }
  v26 = _byteswap_uint64((unsigned __int64)v19[3] << 48);
  v27 = (__int64)v19;
  v10 = v19 + 4;
  v23 = 0LL;
  v28 = 0;
  v60 = v20;
  if ( !(_DWORD)v22 || v26 + (char *)v10 - (char *)header > v13 )
  {
    v25 = v22;
    v24 = v19 + 4;
    v33 = v13;
    goto LABEL_30;
  }
  src = v19 + 4;
  if ( (unsigned int)v26 >= 5 )
  {
    v29 = 0;
    do
    {
      v30 = _byteswap_uint64((unsigned __int64)v10[1] << 48);
      v19 = v10 + 2;
      v17 = (unsigned int)(v30 + v29);
      if ( (int)v17 > (int)v26 )
      {
        is_last = 0;
        v26 = 0LL;
        v10 += 2;
        break;
      }
      v31 = v26;
      if ( _byteswap_ulong(*v10 << 16) == (_DWORD)v22 )
      {
        if ( !replace )
        {
          v25 = v22;
          v28 = 0;
          v23 = 0LL;
          v33 = v13;
          LOWORD(v10) = (_WORD)src;
          v24 = v19;
          goto LABEL_30;
        }
        v26 = (unsigned int)(v26 - v30 - 4);
        v19 = (unsigned __int16 *)((char *)v19 + v30);
        v32 = v27;
        memcpy(v10, v19, v31 - (int)v30 - 4 - v29);
        v22 = v51;
        v27 = v32;
        *(_WORD *)(v32 + 6) = __ROL2__(v26, 8);
      }
      else
      {
        v17 = (unsigned int)v30;
        v10 = (unsigned __int16 *)((char *)v19 + (unsigned int)v30);
        v29 += v30 + 4;
      }
    }
    while ( v29 + 4 < (int)v26 );
  }
  v28 = 1;
  if ( is_last )
  {
    v25 = v22;
    v23 = 0LL;
    v24 = v10;
    v33 = v13;
    LOWORD(v10) = (_WORD)src;
    goto LABEL_30;
  }
  v63 = v27;
  if ( (_DWORD)v26 )
  {
    v34 = (void *)whine_malloc((int)v26, v19, v22, v17, v27, v23);
    if ( v34 )
    {
      ptr = v34;
      LOWORD(v10) = (_WORD)src;
      memcpy(v34, src, (int)v26);
      goto LABEL_29;
    }
    ptr = 0LL;
  }
  else
  {
    ptr = 0LL;
  }
  LOWORD(v10) = (_WORD)src;
LABEL_29:
  v33 = rrfilter(header, v13, 0LL);
  v24 = 0LL;
  v25 = v51;
  v27 = v63;
  v23 = ptr;
LABEL_30:
  if ( !v28 )
    return v13;
  v62 = v26;
  udp_sz = __ROL2__(v60, 8);
  v53 = __ROL2__(v52, 8);
  v17 = v27 + 6;
  v13 = v33;
  limit = v59;
LABEL_32:
  v35 = optlen;
  if ( !v24 )
  {
    ptra = v23;
    v39 = skip_questions(header, v13, optlen);
    if ( !v39 )
      return v13;
    v40 = v39;
    v59 = limit;
    v41 = _bswap_16(header->ancount);
    v42 = v41 + _bswap_16(header->nscount);
    v43 = _bswap_16(header->arcount);
    v44 = skip_section(v40, v42 + (unsigned int)v43, header, v13);
    if ( !v44 )
      return v13;
    *(_WORD *)v44 = 0;
    *(_BYTE *)(v44 + 2) = 41;
    *(_BYTE *)(v44 + 3) = HIBYTE(udp_sz);
    *(_BYTE *)(v44 + 4) = udp_sz;
    *(_BYTE *)(v44 + 5) = HIBYTE(v53);
    *(_BYTE *)(v44 + 6) = v53;
    *(_BYTE *)(v44 + 7) = HIBYTE(v54);
    *(_BYTE *)(v44 + 8) = v54;
    v45 = v62;
    *(_BYTE *)(v44 + 9) = BYTE1(v62);
    *(_BYTE *)(v44 + 10) = v45;
    v46 = v44;
    v10 = (unsigned __int16 *)(v44 + 11);
    v24 = (unsigned __int16 *)(v44 + 11);
    if ( ptra )
    {
      v47 = v45;
      memcpy((void *)(v44 + 11), ptra, v45);
      free(ptra);
      v24 = (unsigned __int16 *)((char *)v10 + v47);
    }
    v48 = v46 + 9;
    limit = v59;
    v35 = optlen;
    if ( v59 - (unsigned __int8 *)v24 - 4 >= (__int64)optlen )
    {
      v49 = _bswap_16(header->arcount);
      v50 = _bswap_16(v49 + 1);
      v17 = v48;
      header->arcount = v50;
      v35 = optlen;
    }
    else
    {
      v17 = v48;
    }
    v25 = v51;
  }
  if ( limit - (unsigned __int8 *)(v24 + 2) >= v35 )
  {
    if ( v25 && replace != 2 )
    {
      *(_BYTE *)v24 = BYTE1(v25);
      *((_BYTE *)v24 + 1) = v25;
      *((_BYTE *)v24 + 2) = BYTE1(v35);
      *((_BYTE *)v24 + 3) = v35;
      v36 = (__int16)v10;
      v37 = (_WORD *)v17;
      v38 = v35;
      memcpy(v24 + 2, v64, v35);
      *v37 = __ROL2__(v38 + (_WORD)v24 + 4 - v36, 8);
      v24 = (unsigned __int16 *)((char *)v24 + v38 + 4);
    }
    return (char *)v24 - (char *)header;
  }
  return v13;
}
