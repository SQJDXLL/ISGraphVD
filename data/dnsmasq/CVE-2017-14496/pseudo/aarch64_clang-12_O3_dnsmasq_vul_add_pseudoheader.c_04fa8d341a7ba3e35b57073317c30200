signed __int64 __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int64 v15; // x22
  unsigned __int8 *pseudoheader; // x0
  char v19; // w21
  unsigned __int8 *v20; // x20
  _WORD *v21; // x26
  unsigned __int64 v22; // x28
  unsigned __int16 *v23; // x27
  int v24; // w24
  unsigned __int64 v25; // x8
  unsigned __int16 *v26; // x9
  unsigned __int8 v27; // w26
  __int64 v28; // x0
  __int64 v29; // x21
  __int64 v30; // x8
  void *v31; // x0
  int v32; // w8
  unsigned __int64 v33; // x9
  int v34; // w8
  int v35; // w9
  __int64 v36; // x0
  unsigned __int16 *v37; // x25
  size_t n; // [xsp+0h] [xbp-50h]
  void *src; // [xsp+8h] [xbp-48h]
  unsigned __int8 *v40; // [xsp+10h] [xbp-40h]
  unsigned __int8 v41; // [xsp+18h] [xbp-38h]
  int v42; // [xsp+1Ch] [xbp-34h]
  unsigned __int8 *v43; // [xsp+20h] [xbp-30h]
  void *dest; // [xsp+28h] [xbp-28h]
  __int64 v45; // [xsp+34h] [xbp-1Ch]
  unsigned __int8 v46; // [xsp+3Ch] [xbp-14h]
  int is_last; // [xsp+40h] [xbp-10h] BYREF
  int is_sign; // [xsp+44h] [xbp-Ch] BYREF
  unsigned __int8 *udp_len; // [xsp+48h] [xbp-8h] BYREF

  v15 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0uLL, &udp_len, &is_sign, &is_last);
  if ( is_sign )
    return v15;
  if ( set_do )
    v19 = 0x80;
  else
    v19 = 0;
  if ( !pseudoheader )
  {
    v42 = replace;
    src = 0LL;
    LODWORD(v22) = 0;
    v27 = 0;
    v46 = 0;
    v45 = HIBYTE(udp_sz);
    v28 = skip_questions(header, v15);
    if ( !v28 )
      return v15;
    goto LABEL_37;
  }
  v43 = limit;
  v20 = udp_len;
  v19 = udp_len[4];
  if ( set_do )
  {
    v19 |= 0x80u;
    udp_len[4] = v19;
  }
  LOBYTE(udp_sz) = v20[1];
  v41 = v20[5];
  v21 = v20 + 6;
  if ( optno )
  {
    v46 = v20[2];
    v22 = bswap64((unsigned __int64)*((unsigned __int16 *)v20 + 3) << 48);
    LOBYTE(v45) = *v20;
    BYTE4(v45) = v20[3];
    dest = v20 + 8;
    if ( v20 + 8 - (unsigned __int8 *)header + v22 <= v15 )
    {
      n = optlen;
      v40 = opt;
      v42 = replace;
      if ( (unsigned int)v22 < 5 )
      {
        v23 = (unsigned __int16 *)(v20 + 8);
LABEL_22:
        if ( is_last )
        {
          optlen = n;
          limit = v43;
          LODWORD(v29) = (_DWORD)dest;
          v30 = (int)n;
LABEL_42:
          v37 = v23 + 2;
          if ( v30 <= limit - (unsigned __int8 *)(v23 + 2) )
          {
            if ( optno && v42 != 2 )
            {
              *((_BYTE *)v23 + 1) = optno;
              *(_BYTE *)v23 = BYTE1(optno);
              *((_BYTE *)v23 + 2) = BYTE1(optlen);
              *((_BYTE *)v23 + 3) = optlen;
              memcpy(v23 + 2, v40, optlen);
              v23 = (unsigned __int16 *)((char *)v37 + optlen);
              *v21 = bswap32((_DWORD)v37 + optlen - v29) >> 16;
            }
            return (char *)v23 - (char *)header;
          }
          return v15;
        }
        optlen = n;
        limit = v43;
        if ( (_DWORD)v22 )
        {
          v31 = (void *)whine_malloc((int)v22);
          v27 = v41;
          if ( v31 )
          {
            src = v31;
            memcpy(v31, dest, (int)v22);
          }
          else
          {
            src = 0LL;
          }
          opt = v40;
        }
        else
        {
          opt = v40;
          v27 = v41;
          src = 0LL;
        }
      }
      else
      {
        if ( replace )
        {
          v23 = (unsigned __int16 *)(v20 + 8);
          v24 = 0;
          while ( 1 )
          {
            v25 = bswap64((unsigned __int64)v23[1] << 48);
            if ( (int)v25 + v24 > (int)v22 )
              break;
            v26 = v23 + 2;
            if ( bswap32(*v23 << 16) == optno )
            {
              LODWORD(v22) = v22 - v25 - 4;
              memcpy(v23, (char *)v26 + v25, (int)v22 - v24);
              *((_WORD *)v20 + 3) = bswap32(v22) >> 16;
              if ( v24 + 4 >= (int)v22 )
                goto LABEL_22;
            }
            else
            {
              v23 = (unsigned __int16 *)((char *)v26 + (unsigned int)v25);
              v24 += v25 + 4;
              if ( v24 + 4 >= (int)v22 )
                goto LABEL_22;
            }
          }
        }
        else
        {
          v23 = (unsigned __int16 *)(v20 + 8);
          v32 = 0;
          while ( 1 )
          {
            v33 = bswap64((unsigned __int64)v23[1] << 48);
            if ( (int)v33 + v32 > (int)v22 )
              break;
            if ( bswap32(*v23 << 16) == optno )
              return v15;
            v34 = v32 + v33;
            v23 = (unsigned __int16 *)((char *)v23 + v33 + 4);
            v35 = v34 + 8;
            v32 = v34 + 4;
            if ( v35 >= (int)v22 )
              goto LABEL_22;
          }
        }
        optlen = n;
        opt = v40;
        limit = v43;
        v27 = v41;
        LODWORD(v22) = 0;
        src = 0LL;
        is_last = 0;
      }
      v15 = rrfilter(header, v15, 0LL);
      v28 = skip_questions(header, v15);
      if ( !v28 )
        return v15;
LABEL_37:
      v36 = skip_section(
              v28,
              (bswap32(header->nscount) >> 0x10)
            + (bswap32(header->ancount) >> 0x10)
            + (bswap32(header->arcount) >> 0x10),
              header,
              v15);
      if ( !v36 )
        return v15;
      *(_BYTE *)(v36 + 2) = 41;
      *(_BYTE *)(v36 + 3) = v45;
      *(_BYTE *)(v36 + 7) = v19;
      *(_BYTE *)(v36 + 8) = v27;
      *(_BYTE *)(v36 + 5) = v46;
      v29 = v36 + 0xB;
      v40 = opt;
      *(_WORD *)v36 = 0;
      *(_BYTE *)(v36 + 6) = BYTE4(v45);
      *(_BYTE *)(v36 + 4) = udp_sz;
      *(_BYTE *)(v36 + 9) = BYTE1(v22);
      v21 = (_WORD *)(v36 + 9);
      v23 = (unsigned __int16 *)(v36 + 0xB);
      *(_BYTE *)(v36 + 10) = v22;
      if ( src )
      {
        memcpy((void *)(v36 + 0xB), src, (int)v22);
        free(src);
        v23 = (unsigned __int16 *)(v29 + (int)v22);
      }
      v30 = (int)optlen;
      if ( (int)optlen <= limit - (unsigned __int8 *)v23 - 4 )
        header->arcount = bswap32((bswap32(header->arcount) >> 0x10) + 1) >> 16;
      goto LABEL_42;
    }
  }
  return v15;
}
