size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  size_t v11; // r12
  unsigned __int8 *pseudoheader; // rax
  int v13; // r8d
  unsigned __int8 *v14; // r13
  unsigned __int8 *v15; // rdx
  __int16 v16; // r15
  __int16 v17; // bp
  __int16 v18; // ax
  char *v19; // rbx
  unsigned __int16 v20; // ax
  int v21; // r8d
  int v22; // r9d
  unsigned __int8 *v23; // rax
  unsigned __int16 v24; // si
  unsigned __int16 v25; // di
  __int16 v26; // cx
  _WORD *v27; // r15
  unsigned __int8 *v28; // rax
  __int64 v29; // rax
  __int16 v30; // bx
  __int64 v31; // rdi
  unsigned __int16 v32; // dx
  unsigned __int16 v33; // ax
  __int64 v34; // rax
  __int16 v35; // bx
  char v36; // t2
  __int16 v37; // dx
  u16 v38; // dx
  char v39; // t1
  __int16 v40; // cx
  __int16 v41; // dx
  unsigned __int64 v46; // [rsp+20h] [rbp-68h]
  int v47; // [rsp+20h] [rbp-68h]
  __int16 v48; // [rsp+28h] [rbp-60h]
  int v49; // [rsp+28h] [rbp-60h]
  int rdlen; // [rsp+2Ch] [rbp-5Ch]
  int is_sign; // [rsp+38h] [rbp-50h] BYREF
  int is_last; // [rsp+3Ch] [rbp-4Ch] BYREF
  unsigned __int8 *udp_len[9]; // [rsp+40h] [rbp-48h] BYREF

  v11 = plen;
  udp_len[1] = (unsigned __int8 *)__readfsqword(0x28u);
  pseudoheader = find_pseudoheader(header, plen, 0LL, udp_len, &is_sign, &is_last);
  v13 = is_sign;
  if ( is_sign )
    return v11;
  v14 = pseudoheader;
  if ( pseudoheader )
  {
    v15 = udp_len[0];
    v16 = *(_WORD *)udp_len[0];
    v48 = *((_WORD *)udp_len[0] + 1);
    v17 = __ROL2__(*((_WORD *)udp_len[0] + 2), 8);
    if ( set_do )
    {
      v17 |= 0x8000u;
      LOBYTE(v18) = HIBYTE(v17);
      HIBYTE(v18) = v17;
      *((_WORD *)udp_len[0] + 2) = v18;
    }
    v19 = (char *)(v15 + 8);
    HIBYTE(v20) = *((_WORD *)v15 + 3);
    LOBYTE(v20) = HIBYTE(*((_WORD *)v15 + 3));
    v21 = v20;
    if ( v15 + 8 - (unsigned __int8 *)header + (unsigned __int64)v20 > plen || !optno )
      return v11;
    v22 = 0;
    v23 = v15 + 8;
    while ( v22 + 4 < v21 )
    {
      v24 = __ROL2__(*((_WORD *)v23 + 1), 8);
      v25 = __ROL2__(*(_WORD *)v23, 8);
      if ( v24 + v22 > v21 )
      {
        is_last = 0;
        v21 = 0;
        v14 = 0LL;
        goto LABEL_20;
      }
      if ( v25 == optno )
      {
        if ( !replace )
          return v11;
        v21 -= v24 + 4;
        qmemcpy(v23, &v23[v24 + 4], v21 - v22);
        LOBYTE(v26) = BYTE1(v21);
        HIBYTE(v26) = v21;
        *((_WORD *)v15 + 3) = v26;
      }
      else
      {
        v22 += v24 + 4;
        v23 += v24 + 4;
      }
    }
    if ( is_last )
    {
      v27 = v15 + 6;
      goto LABEL_28;
    }
    v14 = 0LL;
    if ( v21 )
    {
      rdlen = v21;
      v46 = v21;
      v28 = (unsigned __int8 *)whine_malloc(v21);
      v21 = rdlen;
      v14 = v28;
      if ( v28 )
        qmemcpy(v28, v19, v46);
    }
LABEL_20:
    v47 = v21;
    udp_sz = __ROL2__(v16, 8);
    v29 = rrfilter(header, v11, 0LL);
    v13 = v47;
    LOBYTE(v30) = HIBYTE(v48);
    HIBYTE(v30) = v48;
    v11 = v29;
  }
  else
  {
    v30 = 0;
    v17 = (set_do != 0) << 15;
  }
  v49 = v13;
  v31 = skip_questions(header, v11);
  if ( v31 )
  {
    HIBYTE(v32) = header->nscount;
    LOBYTE(v32) = HIBYTE(header->nscount);
    HIBYTE(v33) = header->arcount;
    LOBYTE(v33) = HIBYTE(header->arcount);
    v34 = skip_section(v31, v33 + v32 + (unsigned int)(unsigned __int16)__ROL2__(header->ancount, 8), header, v11);
    if ( v34 )
    {
      v36 = HIBYTE(v30);
      HIBYTE(v35) = v30;
      LOBYTE(v35) = v36;
      *(_WORD *)(v34 + 3) = __ROL2__(udp_sz, 8);
      v27 = (_WORD *)(v34 + 9);
      *(_WORD *)v34 = 0;
      LOBYTE(v37) = BYTE1(v49);
      HIBYTE(v37) = v49;
      *(_BYTE *)(v34 + 2) = 41;
      *(_WORD *)(v34 + 7) = __ROL2__(v17, 8);
      *(_WORD *)(v34 + 5) = v35;
      v19 = (char *)(v34 + 11);
      *(_WORD *)(v34 + 9) = v37;
      v23 = (unsigned __int8 *)(v34 + 11);
      if ( v14 )
      {
        qmemcpy(v19, v14, v49);
        free(v14);
        v23 = (unsigned __int8 *)&v19[v49];
      }
      if ( limit - (v23 + 4) >= (__int64)optlen )
      {
        HIBYTE(v38) = header->arcount;
        LOBYTE(v38) = HIBYTE(header->arcount);
        ++v38;
        v39 = HIBYTE(v38);
        HIBYTE(v38) = v38;
        LOBYTE(v38) = v39;
        header->arcount = v38;
      }
LABEL_28:
      if ( limit - (v23 + 4) >= (__int64)optlen )
      {
        if ( optno && replace != 2 )
        {
          LOBYTE(v40) = BYTE1(optlen);
          HIBYTE(v40) = optlen;
          *(_WORD *)v23 = __ROL2__(optno, 8);
          *((_WORD *)v23 + 1) = v40;
          qmemcpy(v23 + 4, opt, optlen);
          v23 += optlen + 4;
          HIBYTE(v41) = (_BYTE)v23 - (_BYTE)v19;
          LOBYTE(v41) = (unsigned __int16)((_WORD)v23 - (_WORD)v19) >> 8;
          *v27 = v41;
        }
        return v23 - (unsigned __int8 *)header;
      }
    }
  }
  return v11;
}
