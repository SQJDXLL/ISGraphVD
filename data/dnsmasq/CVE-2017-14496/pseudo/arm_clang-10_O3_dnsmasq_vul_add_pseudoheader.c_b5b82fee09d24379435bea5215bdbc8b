int __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned int udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  size_t v9; // r9
  void *v13; // r6
  unsigned __int8 *pseudoheader; // r0
  int v16; // r12
  char v17; // r4
  unsigned __int8 *v18; // r6
  unsigned __int8 v19; // r4
  unsigned __int8 v20; // r10
  unsigned __int8 v21; // r2
  unsigned __int8 v22; // r3
  unsigned __int8 v23; // r7
  int v24; // r7
  int v25; // r4
  unsigned __int8 *v26; // r10
  int v27; // r0
  int v28; // r1
  unsigned __int8 *v29; // r2
  int v30; // r5
  size_t v31; // r4
  char *v32; // r6
  void *v33; // r0
  void *v34; // r10
  int v35; // r0
  int v36; // r2
  int v37; // r1
  int v38; // r0
  _BYTE *v39; // r0
  _BYTE *v40; // r5
  unsigned __int8 *v41; // r0
  _BYTE *v42; // r5
  unsigned __int8 *v43; // r4
  unsigned int v44; // r0
  bool v45; // zf
  __int16 v46; // r0
  unsigned __int8 v47; // [sp+Ch] [bp-4Ch]
  unsigned __int8 v48; // [sp+10h] [bp-48h]
  void *src; // [sp+14h] [bp-44h]
  _BYTE *v50; // [sp+18h] [bp-40h]
  unsigned __int8 v51; // [sp+1Ch] [bp-3Ch]
  unsigned int v52; // [sp+20h] [bp-38h]
  unsigned __int8 v53; // [sp+24h] [bp-34h]
  unsigned __int8 *v54; // [sp+28h] [bp-30h]
  unsigned __int8 v55; // [sp+2Ch] [bp-2Ch]
  int is_last; // [sp+30h] [bp-28h] BYREF
  int is_sign; // [sp+34h] [bp-24h] BYREF
  unsigned __int8 *udp_len; // [sp+38h] [bp-20h] BYREF

  v9 = plen;
  v13 = 0;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  if ( is_sign )
    return v9;
  v16 = optno;
  v17 = set_do;
  if ( set_do )
    v17 = 0x80;
  if ( !pseudoheader )
  {
    v54 = limit;
    v24 = 0;
    v52 = udp_sz >> 8;
    v51 = 0;
    v53 = 0;
    v55 = 0;
    goto LABEL_34;
  }
  v18 = udp_len;
  v19 = udp_len[4];
  v20 = udp_len[5];
  v21 = *udp_len;
  v22 = udp_len[1];
  v23 = udp_len[2];
  v55 = udp_len[3];
  if ( set_do )
  {
    v19 |= 0x80u;
    udp_len[4] = v19;
  }
  if ( !optno )
    return v9;
  v54 = limit;
  v53 = v23;
  v50 = v18 + 6;
  v24 = v18[7] | (v18[6] << 8);
  if ( v18 + 8 - (unsigned __int8 *)header + v24 > v9 )
    return v9;
  v48 = v22;
  v47 = v19;
  LOBYTE(v52) = v21;
  v51 = v20;
  src = v18 + 8;
  if ( (unsigned int)v24 >= 5 )
  {
    if ( replace )
    {
      v25 = 0;
      v26 = v18 + 8;
      while ( 1 )
      {
        v27 = v26[3] | (v26[2] << 8);
        v28 = v27 + v25;
        if ( v27 + v25 > v24 )
          break;
        v29 = v26 + 4;
        if ( (v26[1] | (*v26 << 8)) == v16 )
        {
          v30 = v16;
          v24 = v24 - v27 - 4;
          memcpy(v26, &v29[v27], v24 - v25);
          v16 = v30;
          v18[7] = v24;
          v18[6] = BYTE1(v24);
          if ( v25 + 4 >= v24 )
            goto LABEL_20;
        }
        else
        {
          v26 = &v29[v27];
          v25 = v28 + 4;
          if ( v28 + 8 >= v24 )
            goto LABEL_20;
        }
      }
    }
    else
    {
      v35 = 0;
      v26 = v18 + 8;
      while ( 1 )
      {
        v36 = v26[3] | (v26[2] << 8);
        v37 = v36 + v35;
        if ( v36 + v35 > v24 )
          break;
        if ( (v26[1] | (*v26 << 8)) == optno )
          return v9;
        v26 += v36 + 4;
        v35 = v37 + 4;
        if ( v37 + 8 >= v24 )
          goto LABEL_20;
      }
    }
    v24 = 0;
    v13 = 0;
    is_last = 0;
    goto LABEL_33;
  }
  v26 = v18 + 8;
LABEL_20:
  if ( !is_last )
  {
    v13 = 0;
    if ( v24 )
    {
      v33 = (void *)whine_malloc(v24);
      if ( v33 )
      {
        v34 = v33;
        memcpy(v33, src, v24);
        v13 = v34;
      }
    }
    else
    {
      v24 = 0;
    }
LABEL_33:
    LOBYTE(udp_sz) = v48;
    v17 = v47;
    v9 = rrfilter(header, v9, 0);
LABEL_34:
    v38 = skip_questions(header, v9);
    if ( !v38 )
      return v9;
    v39 = (_BYTE *)skip_section(
                     v38,
                     ((unsigned int)((header->nscount << 8) & 0xFF0000 | (header->nscount << 24)) >> 16)
                   + ((unsigned int)((header->ancount << 8) & 0xFF0000 | (header->ancount << 24)) >> 0x10)
                   + ((unsigned int)((header->arcount << 8) & 0xFF0000 | (header->arcount << 24)) >> 0x10),
                     header,
                     v9);
    if ( !v39 )
      return v9;
    v39[10] = v24;
    v39[7] = v17;
    v39[4] = udp_sz;
    v40 = v39;
    v39[8] = v51;
    v39[6] = v55;
    v39[5] = v53;
    v39[3] = v52;
    v39[2] = 41;
    v39[1] = 0;
    *v39 = 0;
    v41 = v39 + 0xB;
    v40[9] = BYTE1(v24);
    v42 = v40 + 9;
    v26 = v41;
    if ( v13 )
    {
      v43 = v41;
      memcpy(v41, v13, v24);
      free(v13);
      LOWORD(v41) = (_WORD)v43;
      v26 = &v43[v24];
    }
    v31 = optlen;
    LOWORD(src) = (_WORD)v41;
    v50 = v42;
    if ( v54 - v26 - 4 >= (int)optlen )
    {
      v44 = ((unsigned int)((header->arcount << 8) & 0xFF0000 | (header->arcount << 24)) >> 0x10) + 1;
      header->arcount = ((v44 << 8) & 0xFF0000 | (v44 << 24)) >> 16;
    }
    v16 = optno;
    v32 = (char *)(v26 + 4);
    if ( v54 - (v26 + 4) < (int)optlen )
      return v9;
    goto LABEL_41;
  }
  v31 = optlen;
  v32 = (char *)(v26 + 4);
  if ( v54 - (v26 + 4) < (int)optlen )
    return v9;
LABEL_41:
  v45 = v16 == 0;
  if ( v16 )
    v45 = replace == 2;
  if ( !v45 )
  {
    v26[3] = v31;
    v26[1] = v16;
    v26[2] = BYTE1(v31);
    *v26 = BYTE1(v16);
    memcpy(v32, opt, v31);
    v26 = (unsigned __int8 *)&v32[v31];
    v46 = (_WORD)v32 + v31 - (_WORD)src;
    v50[1] = v46;
    *v50 = HIBYTE(v46);
  }
  return v26 - (unsigned __int8 *)header;
}
