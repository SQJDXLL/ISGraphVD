int __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int a5,
        int a6,
        int a7,
        int a8,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  int v14; // $s4
  unsigned __int8 *pseudoheader; // $v0
  size_t v17; // $s1
  int v18; // $fp
  unsigned __int8 *v19; // $s7
  unsigned __int8 *v20; // $s7
  unsigned int v21; // $v0
  __int16 v22; // $s2
  unsigned int v23; // $v0
  const void *v24; // $s5
  int v25; // $t1
  char *v26; // $s4
  _BYTE *v27; // $s2
  unsigned int v28; // $a0
  unsigned int v29; // $v0
  unsigned __int16 v30; // $a2
  unsigned int v31; // $v0
  int v32; // $a1
  int v33; // $a0
  _BYTE *v34; // $v0
  char *v35; // $v1
  int v36; // $a1
  unsigned __int8 *v37; // $v0
  unsigned int v39; // [sp+24h] [-24h]
  unsigned int v40; // [sp+28h] [-20h]
  int i; // [sp+34h] [-14h]
  unsigned __int8 *udp_len; // [sp+38h] [-10h] BYREF
  int is_sign; // [sp+3Ch] [-Ch] BYREF
  int is_last; // [sp+40h] [-8h] BYREF

  LOWORD(v14) = udp_sz;
  v17 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  v18 = is_sign;
  if ( is_sign )
    return v17;
  v19 = pseudoheader;
  if ( pseudoheader )
  {
    v20 = udp_len;
    v40 = (udp_len[1] << 8) | *udp_len;
    v39 = (udp_len[3] << 8) | udp_len[2];
    v21 = (udp_len[5] << 8) | udp_len[4];
    v22 = ((_WORD)v21 << 8) | (v21 >> 8);
    if ( set_do )
    {
      v22 |= 0x8000u;
      udp_len[4] = HIBYTE(v22);
      v20[5] = v22;
    }
    v23 = (v20[7] << 8) | v20[6];
    v24 = v20 + 8;
    v18 = (unsigned __int16)(((_WORD)v23 << 8) | (v23 >> 8));
    if ( v17 < v20 + 8 - (unsigned __int8 *)header + v18 )
      return v17;
    v25 = 0;
    if ( !optno )
      return v17;
    v26 = (char *)(v20 + 8);
    while ( v25 + 4 < v18 )
    {
      v29 = ((unsigned __int8)v26[1] << 8) | (unsigned __int8)*v26;
      v30 = ((_WORD)v29 << 8) | (v29 >> 8);
      v31 = ((unsigned __int8)v26[3] << 8) | (unsigned __int8)v26[2];
      v32 = (unsigned __int16)(((_WORD)v31 << 8) | (v31 >> 8));
      if ( v18 < v32 + v25 + 4 )
      {
        is_last = 0;
        v18 = 0;
        v19 = 0;
        goto LABEL_21;
      }
      if ( v30 == optno )
      {
        v36 = v32 + 4;
        if ( !replace )
          return v17;
        v18 -= v36;
        i = v25;
        memcpy(v26, &v26[v36], v18 - v25);
        v25 = i;
        v20[6] = BYTE1(v18);
        v20[7] = v18;
      }
      else
      {
        v26 += v32 + 4;
        v25 += v32 + 4;
      }
    }
    if ( is_last )
    {
      v27 = v20 + 6;
      goto LABEL_11;
    }
    v19 = 0;
    if ( v18 )
    {
      v37 = (unsigned __int8 *)whine_malloc(v18);
      v19 = v37;
      if ( v37 )
        memcpy(v37, v24, v18);
    }
LABEL_21:
    v14 = (v40 << 8) | (v40 >> 8);
    v24 = (const void *)((v39 << 8) | (v39 >> 8));
    v17 = rrfilter(header, v17, 0);
  }
  else
  {
    LOWORD(v24) = 0;
    v22 = (set_do != 0) << 15;
  }
  v33 = skip_questions(header, v17);
  if ( v33 )
  {
    v34 = (_BYTE *)skip_section(
                     v33,
                     (unsigned __int16)((header->ancount << 8) | HIBYTE(header->ancount))
                   + (unsigned __int16)((header->nscount << 8) | HIBYTE(header->nscount))
                   + (unsigned __int16)((header->arcount << 8) | HIBYTE(header->arcount)),
                     header,
                     v17);
    if ( v34 )
    {
      v35 = v34 + 0xB;
      if ( limit >= v34 + 0xB )
      {
        v34[2] = 41;
        v34[3] = BYTE1(v14);
        v34[5] = BYTE1(v24);
        v34[7] = HIBYTE(v22);
        v34[6] = (_BYTE)v24;
        v34[8] = v22;
        *v34 = 0;
        v34[1] = 0;
        v34[4] = v14;
        v27 = v34 + 9;
        v34[9] = BYTE1(v18);
        v34[10] = v18;
        LOWORD(v24) = (_WORD)v34 + 0xB;
        if ( v19 )
        {
          v26 = &v35[v18];
          if ( limit < (unsigned __int8 *)&v35[v18] )
          {
            free(v19);
            return v17;
          }
          memcpy(v35, v19, v18);
          free(v19);
        }
        else
        {
          v26 = v34 + 0xB;
        }
        v28 = (unsigned int)(v26 + 4);
        if ( limit - (unsigned __int8 *)(v26 + 4) >= (int)optlen )
        {
          header->arcount = ((((unsigned __int16)(header->arcount << 8) | HIBYTE(header->arcount)) + 1) << 8) | ((unsigned __int16)(((header->arcount << 8) | HIBYTE(header->arcount)) + 1) >> 8);
LABEL_11:
          v28 = (unsigned int)(v26 + 4);
        }
        if ( (int)&limit[-v28] >= (int)optlen )
        {
          if ( !optno || replace == 2 )
            return v26 - (char *)header;
          if ( (unsigned int)limit >= v28 )
          {
            v26[3] = optlen;
            *v26 = BYTE1(optno);
            v26[1] = optno;
            v26[2] = BYTE1(optlen);
            v26 = (char *)(v28 + optlen);
            if ( (unsigned int)limit >= v28 + optlen )
            {
              memcpy((void *)v28, opt, optlen);
              *v27 = (unsigned __int16)((_WORD)v26 - (_WORD)v24) >> 8;
              v27[1] = (_BYTE)v26 - (_BYTE)v24;
              return v26 - (char *)header;
            }
          }
        }
      }
    }
  }
  return v17;
}
