size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  int v9; // r10
  unsigned int v11; // r9
  unsigned __int8 *pseudoheader; // r0
  int v13; // r5
  unsigned __int8 *v14; // r6
  unsigned __int8 *v15; // r4
  unsigned int v16; // r3
  int v17; // r8
  unsigned int v18; // r3
  unsigned __int8 *v19; // r11
  unsigned int v20; // r3
  int v21; // r6
  unsigned __int8 *v22; // r10
  unsigned int v23; // r1
  int v24; // r2
  unsigned int v25; // r12
  int v26; // r1
  int v27; // r0
  _BYTE *v28; // r0
  _BYTE *v29; // r4
  int v30; // r1
  int v31; // r1
  unsigned __int8 *v32; // r0
  _BYTE *v33; // r4
  unsigned __int8 *v34; // r0
  bool v35; // zf
  unsigned __int16 v36; // r2
  unsigned int v39; // [sp+Ch] [bp-44h]
  __int16 v40; // [sp+Ch] [bp-44h]
  unsigned int v41; // [sp+10h] [bp-40h]
  unsigned __int8 *udp_len; // [sp+18h] [bp-38h] BYREF
  int is_sign; // [sp+1Ch] [bp-34h] BYREF
  int is_last; // [sp+20h] [bp-30h] BYREF

  LOWORD(v9) = udp_sz;
  v11 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  v13 = is_sign;
  if ( is_sign )
    return v11;
  v14 = pseudoheader;
  if ( pseudoheader )
  {
    v15 = udp_len;
    v41 = *udp_len | (udp_len[1] << 8);
    v39 = udp_len[2] | (udp_len[3] << 8);
    v16 = udp_len[4] | (udp_len[5] << 8);
    v17 = (unsigned __int16)((v16 >> 8) | ((_WORD)v16 << 8));
    if ( set_do )
    {
      v18 = ~((unsigned int)~(v17 << 17) >> 17) << 16;
      LOWORD(v17) = ~((unsigned int)~(v17 << 17) >> 17);
      udp_len[4] = HIBYTE(v18);
      v15[5] = v17;
    }
    v19 = v15 + 8;
    v20 = v15[6] | (v15[7] << 8);
    v13 = (unsigned __int16)((v20 >> 8) | ((_WORD)v20 << 8));
    v21 = optno == 0;
    if ( v15 + 8 - (unsigned __int8 *)header + v13 > v11 )
      v21 = 1;
    if ( v21 )
      return v11;
    v22 = v15 + 8;
    while ( v21 + 4 < v13 )
    {
      v23 = *v22 | (v22[1] << 8);
      v24 = (v23 >> 8) | (v23 << 8);
      v25 = v22[2] | (v22[3] << 8);
      v26 = (unsigned __int16)((v25 >> 8) | ((_WORD)v25 << 8));
      if ( v26 + v21 + 4 > v13 )
      {
        is_last = 0;
        goto LABEL_12;
      }
      if ( (unsigned __int16)v24 == optno )
      {
        if ( !replace )
          return v11;
        v31 = v26 + 4;
        v13 -= v31;
        memcpy(v22, &v22[v31], v13 - v21);
        v15[6] = (unsigned int)(v13 << 16) >> 24;
        v15[7] = v13;
      }
      else
      {
        v30 = v26 + 4;
        v22 += v30;
        v21 += v30;
      }
    }
    if ( !is_last )
    {
      if ( v13 )
      {
        v32 = (unsigned __int8 *)whine_malloc(v13);
        v14 = v32;
        if ( v32 )
          memcpy(v32, v15 + 8, v13);
      }
      else
      {
LABEL_12:
        v13 = 0;
        v14 = 0;
      }
      v9 = (v41 >> 8) | (v41 << 8);
      v40 = (v39 >> 8) | ((_WORD)v39 << 8);
      v11 = rrfilter(header, v11, 0);
      goto LABEL_14;
    }
    v33 = v15 + 6;
  }
  else
  {
    LOWORD(v17) = (set_do != 0) << 15;
    v40 = 0;
LABEL_14:
    v27 = skip_questions(header, v11);
    if ( !v27 )
      return v11;
    v28 = (_BYTE *)skip_section(
                     v27,
                     (unsigned __int16)(HIBYTE(header->ancount) | (header->ancount << 8))
                   + (unsigned __int16)(HIBYTE(header->nscount) | (header->nscount << 8))
                   + (unsigned __int16)(HIBYTE(header->arcount) | (header->arcount << 8)),
                     header,
                     v11);
    v29 = v28;
    if ( !v28 )
      return v11;
    v19 = v28 + 0xB;
    if ( v28 + 0xB > limit )
      return v11;
    *v28 = 0;
    v28[1] = 0;
    v28[2] = 41;
    v28[3] = BYTE1(v9);
    v28[5] = HIBYTE(v40);
    v28[7] = BYTE1(v17);
    v28[4] = v9;
    v28[6] = v40;
    v28[8] = v17;
    v28[9] = (unsigned int)(v13 << 16) >> 24;
    v28[10] = v13;
    if ( v14 )
    {
      v22 = &v19[v13];
      if ( &v19[v13] > limit )
      {
        free(v14);
        return v11;
      }
      memcpy(v28 + 0xB, v14, v13);
      free(v14);
    }
    else
    {
      v22 = v28 + 0xB;
    }
    if ( limit - (v22 + 4) >= (int)optlen )
    {
      v36 = (HIBYTE(header->arcount) | (header->arcount << 8)) + 1;
      header->arcount = HIBYTE(v36) | (v36 << 8);
    }
    v33 = v29 + 9;
  }
  v34 = v22 + 4;
  if ( limit - (v22 + 4) >= (int)optlen )
  {
    v35 = optno == 0;
    if ( optno )
      v35 = replace == 2;
    if ( v35 )
      return v22 - (unsigned __int8 *)header;
    if ( v34 <= limit )
    {
      v22[1] = optno;
      *v22 = (unsigned int)(optno << 16) >> 24;
      v22[3] = optlen;
      v22[2] = optlen << 16 >> 24;
      v22 = &v34[optlen];
      if ( &v34[optlen] <= limit )
      {
        memcpy(v34, opt, optlen);
        *v33 = (unsigned int)((v22 - v19) << 16) >> 24;
        v33[1] = (_BYTE)v22 - (_BYTE)v19;
        return v22 - (unsigned __int8 *)header;
      }
    }
  }
  return v11;
}
