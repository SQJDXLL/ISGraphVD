size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int a5,
        int a6,
        int a7,
        int a8,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int8 *pseudoheader; // $v0
  size_t v17; // $s0
  int v18; // $fp
  unsigned __int8 *v19; // $t0
  unsigned __int8 *v20; // $s7
  unsigned __int16 v21; // $s6
  int v22; // $a3
  unsigned __int8 *v23; // $a0
  int v24; // $v1
  int v25; // $v0
  unsigned __int8 *v26; // $a2
  int v27; // $t2
  int v28; // $v0
  int v29; // $v1
  unsigned __int8 *v30; // $v0
  int v31; // $a1
  size_t result; // $v0
  int v33; // $a0
  int v34; // $v0
  int v35; // $s7
  void *v36; // $a3
  _WORD *v37; // $s0
  char *v38; // $a3
  unsigned __int8 *v39; // $t0
  unsigned __int8 *v40; // $v0
  int v41; // $a3
  unsigned __int8 *v42; // $v0
  int t_sb; // [sp+24h] [-24h]
  unsigned __int8 *t_s; // [sp+24h] [-24h]
  unsigned __int8 *t_sc; // [sp+24h] [-24h]
  size_t t_sa; // [sp+24h] [-24h]
  int i; // [sp+28h] [-20h]
  unsigned __int16 v48; // [sp+32h] [-16h]
  unsigned __int8 *datap; // [sp+34h] [-14h]
  unsigned __int8 *udp_len; // [sp+38h] [-10h] BYREF
  int is_sign; // [sp+3Ch] [-Ch] BYREF
  int is_last; // [sp+40h] [-8h] BYREF

  v17 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  v18 = is_sign;
  if ( is_sign )
    return v17;
  v19 = pseudoheader;
  if ( pseudoheader )
  {
    v20 = udp_len;
    v21 = _byteswap_ushort(*((_WORD *)udp_len + 2));
    udp_sz = _byteswap_ushort(*(_WORD *)udp_len);
    v48 = _byteswap_ushort(*((_WORD *)udp_len + 1));
    if ( set_do )
    {
      v21 |= 0x8000u;
      udp_len[4] = HIBYTE(v21);
      v20[5] = v21;
    }
    v22 = v20[7] | (v20[6] << 8);
    datap = v20 + 8;
    if ( v17 < v20 + 8 - (unsigned __int8 *)header + v22 || !optno )
      return v17;
    v23 = v20 + 8;
    if ( v22 < 5 )
    {
LABEL_30:
      v28 = is_last;
    }
    else
    {
      v24 = v20[11] | (v20[10] << 8);
      v25 = v20[9] | (v20[8] << 8);
      v26 = v20 + 0xC;
      if ( v22 < v24 )
      {
LABEL_37:
        is_last = 0;
        goto LABEL_38;
      }
      v27 = 0;
      if ( !replace )
      {
        v31 = 0;
        while ( v25 != optno )
        {
          v31 += v24 + 4;
          v23 = &v26[v24];
          if ( v31 + 4 >= v22 )
            goto LABEL_30;
          v24 = v23[3] | (v23[2] << 8);
          v25 = v23[1] | (*v23 << 8);
          v26 = v23 + 4;
          if ( v22 < v24 + v31 )
            goto LABEL_37;
        }
        return v17;
      }
      v23 = v20 + 8;
      while ( 1 )
      {
        if ( v25 == optno )
        {
          v29 = v24 + 4;
          i = v27;
          t_sb = v22 - v29;
          v30 = (unsigned __int8 *)memcpy(v23, &v23[v29], v22 - v29 - v27);
          v22 = t_sb;
          v23 = v30;
          v27 = i;
          *((_WORD *)v20 + 3) = t_sb;
        }
        else
        {
          v23 = &v26[v24];
          v27 += v24 + 4;
        }
        v28 = is_last;
        if ( v27 + 4 >= v22 )
          break;
        v24 = v23[3] | (v23[2] << 8);
        v25 = v23[1] | (*v23 << 8);
        v26 = v23 + 4;
        if ( v22 < v27 + v24 )
          goto LABEL_37;
      }
    }
    if ( v28 )
    {
      v36 = v23 + 4;
      result = v17;
      if ( limit - (v23 + 4) >= (int)optlen )
      {
        v37 = v20 + 6;
        goto LABEL_34;
      }
      return result;
    }
    if ( v22 )
    {
      t_sa = v22;
      v40 = (unsigned __int8 *)whine_malloc(v22);
      v39 = v40;
      v41 = t_sa;
      if ( v40 )
      {
        v42 = (unsigned __int8 *)memcpy(v40, datap, t_sa);
        v41 = t_sa;
        v39 = v42;
      }
      v18 = v41;
      goto LABEL_39;
    }
LABEL_38:
    v39 = 0;
LABEL_39:
    t_sc = v39;
    v17 = rrfilter(header, v17, 0);
    v19 = t_sc;
    goto LABEL_23;
  }
  v48 = 0;
  v21 = (set_do != 0) << 15;
LABEL_23:
  t_s = v19;
  v33 = skip_questions(header, v17);
  if ( !v33 )
    return v17;
  v34 = skip_section(v33, header->ancount + header->nscount + header->arcount, header, v17);
  v35 = v34;
  if ( !v34 )
    return v17;
  *(_BYTE *)(v34 + 9) = BYTE2(v18);
  *(_BYTE *)(v34 + 4) = udp_sz;
  *(_BYTE *)v34 = 0;
  *(_WORD *)(v34 + 1) = 41;
  *(_BYTE *)(v34 + 3) = HIBYTE(udp_sz);
  *(_WORD *)(v34 + 5) = v48;
  *(_WORD *)(v34 + 7) = v21;
  *(_BYTE *)(v34 + 10) = v18;
  LOWORD(datap) = v34 + 0xB;
  if ( t_s )
  {
    memcpy((void *)(v34 + 0xB), t_s, v18);
    free(t_s);
    v23 = (unsigned __int8 *)(v35 + 0xB + v18);
  }
  else
  {
    v23 = (unsigned __int8 *)(v34 + 0xB);
  }
  v36 = v23 + 4;
  result = v17;
  if ( limit - (v23 + 4) >= (int)optlen )
  {
    ++header->arcount;
    if ( !optno )
      return v23 - (unsigned __int8 *)header;
    v37 = (_WORD *)(v35 + 9);
LABEL_34:
    if ( replace != 2 )
    {
      v23[2] = BYTE2(optlen);
      *(_WORD *)v23 = optno;
      v23[3] = optlen;
      v38 = (char *)memcpy(v36, opt, optlen);
      v23 = (unsigned __int8 *)&v38[optlen];
      *v37 = (_WORD)v38 + optlen - (_WORD)datap;
    }
    return v23 - (unsigned __int8 *)header;
  }
  return result;
}
