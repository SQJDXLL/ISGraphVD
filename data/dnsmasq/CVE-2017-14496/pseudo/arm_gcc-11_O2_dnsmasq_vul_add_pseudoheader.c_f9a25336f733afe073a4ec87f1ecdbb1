size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  int v9; // r9
  unsigned int v11; // r4
  unsigned __int8 *pseudoheader; // r0
  int v13; // r10
  unsigned __int8 *v14; // r6
  unsigned __int8 *v15; // r3
  unsigned int v16; // r2
  int v17; // r5
  unsigned int v18; // r2
  int v19; // r6
  unsigned int v20; // r2
  signed int v21; // r11
  unsigned int v22; // r1
  unsigned int v23; // r0
  signed int v24; // r2
  int v25; // r1
  unsigned __int8 *v26; // r0
  char *v27; // r9
  unsigned __int8 *v28; // r10
  unsigned int v29; // r1
  unsigned int v30; // r0
  int v31; // r2
  __int16 v32; // r5
  int v33; // r11
  int v34; // r0
  char *v36; // r5
  _BYTE *v37; // r4
  bool v38; // zf
  int v39; // r2
  _BYTE *v40; // r0
  _BYTE *v41; // r3
  void *v42; // r0
  unsigned __int16 v43; // r3
  unsigned __int8 *v44; // r0
  void *v46; // [sp+10h] [bp-48h]
  unsigned int v47; // [sp+14h] [bp-44h]
  _BYTE *v48; // [sp+14h] [bp-44h]
  unsigned int v49; // [sp+18h] [bp-40h]
  unsigned __int8 *udp_len; // [sp+20h] [bp-38h] BYREF
  int is_sign; // [sp+24h] [bp-34h] BYREF
  int is_last; // [sp+28h] [bp-30h] BYREF

  LOWORD(v9) = udp_sz;
  v11 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  v13 = is_sign;
  if ( is_sign )
    return v11;
  v14 = pseudoheader;
  if ( !pseudoheader )
  {
    v32 = set_do;
    if ( set_do )
      v32 = 1;
    LOWORD(v17) = v32 << 15;
    LOWORD(v33) = 0;
LABEL_20:
    v34 = skip_questions(header, v11);
    if ( v34 )
    {
      v40 = (_BYTE *)skip_section(
                       v34,
                       (unsigned __int16)(HIBYTE(header->ancount) | (header->ancount << 8))
                     + (unsigned __int16)(HIBYTE(header->nscount) | (header->nscount << 8))
                     + (unsigned __int16)(HIBYTE(header->arcount) | (header->arcount << 8)),
                       header,
                       v11);
      v41 = v40;
      if ( v40 )
      {
        v40[9] = (unsigned int)(v13 << 16) >> 24;
        v40[4] = v9;
        v40[6] = v33;
        v40[8] = v17;
        *v40 = 0;
        v40[1] = 0;
        v42 = v40 + 0xB;
        v41[3] = BYTE1(v9);
        v41[5] = BYTE1(v33);
        v41[7] = BYTE1(v17);
        v41[10] = v13;
        v41[2] = 41;
        v46 = v41 + 0xB;
        if ( v14 )
        {
          v27 = &v41[v13 + 0xB];
          v48 = v41;
          memcpy(v42, v14, v13);
          free(v14);
          v41 = v48;
        }
        else
        {
          v27 = v41 + 0xB;
        }
        v36 = v27 + 4;
        if ( limit - (unsigned __int8 *)(v27 + 4) >= (int)optlen )
        {
          v37 = v41 + 9;
          v43 = (HIBYTE(header->arcount) | (header->arcount << 8)) + 1;
          header->arcount = HIBYTE(v43) | (v43 << 8);
          goto LABEL_29;
        }
      }
    }
    return v11;
  }
  v15 = udp_len;
  v16 = udp_len[4] | (udp_len[5] << 8);
  v47 = *udp_len | (udp_len[1] << 8);
  v17 = (unsigned __int16)((v16 >> 8) | ((_WORD)v16 << 8));
  v49 = udp_len[2] | (udp_len[3] << 8);
  if ( set_do )
  {
    v18 = ~((unsigned int)~(v17 << 17) >> 17) << 16;
    LOWORD(v17) = ~((unsigned int)~(v17 << 17) >> 17);
    udp_len[4] = HIBYTE(v18);
    v15[5] = v17;
  }
  v19 = optno == 0;
  v20 = v15[6] | (v15[7] << 8);
  v21 = (unsigned __int16)((v20 >> 8) | ((_WORD)v20 << 8));
  v46 = v15 + 8;
  if ( v15 + 8 - (unsigned __int8 *)header + v21 > v11 )
    v19 = 1;
  if ( v19 )
    return v11;
  if ( (unsigned __int16)((v20 >> 8) | ((_WORD)v20 << 8)) <= 4u )
  {
    v27 = (char *)(v15 + 8);
  }
  else
  {
    v22 = v15[10] | (v15[11] << 8);
    v23 = v15[8] | (v15[9] << 8);
    v24 = (unsigned __int16)((v22 >> 8) | ((_WORD)v22 << 8));
    v25 = (unsigned __int16)((v23 >> 8) | ((_WORD)v23 << 8));
    v26 = v15 + 0xC;
    if ( v24 > v21 )
    {
LABEL_23:
      v14 = 0;
      is_last = 0;
LABEL_24:
      v9 = (v47 >> 8) | (v47 << 8);
      v33 = (v49 >> 8) | (v49 << 8);
      v11 = rrfilter(header, v11, 0);
      goto LABEL_20;
    }
    v27 = (char *)(v15 + 8);
    v28 = v15;
    while ( 1 )
    {
      if ( v25 == optno )
      {
        if ( !replace )
          return v11;
        v31 = v24 + 4;
        v21 -= v31;
        memcpy(v27, &v27[v31], v21 - v19);
        v28[7] = v21;
        v28[6] = (unsigned int)(v21 << 16) >> 24;
      }
      else
      {
        v27 = (char *)&v26[v24];
        v19 += v24 + 4;
      }
      if ( v19 + 4 >= v21 )
        break;
      v29 = (unsigned __int8)v27[2] | ((unsigned __int8)v27[3] << 8);
      v30 = (unsigned __int8)*v27 | ((unsigned __int8)v27[1] << 8);
      v24 = (unsigned __int16)((v29 >> 8) | ((_WORD)v29 << 8));
      v25 = (unsigned __int16)((v30 >> 8) | ((_WORD)v30 << 8));
      v26 = (unsigned __int8 *)(v27 + 4);
      if ( v24 + v19 > v21 )
      {
        v13 = 0;
        goto LABEL_23;
      }
    }
    v15 = v28;
  }
  if ( !is_last )
  {
    if ( v21 )
    {
      v44 = (unsigned __int8 *)whine_malloc(v21);
      v14 = v44;
      if ( v44 )
        memcpy(v44, v46, v21);
      v13 = v21;
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
    goto LABEL_24;
  }
  v36 = v27 + 4;
  if ( limit - (unsigned __int8 *)(v27 + 4) < (int)optlen )
    return v11;
  v37 = v15 + 6;
LABEL_29:
  v38 = optno == 0;
  if ( optno )
    v38 = replace == 2;
  if ( !v38 )
  {
    v27[1] = optno;
    v27[3] = optlen;
    v27[2] = optlen << 16 >> 24;
    *v27 = (unsigned int)(optno << 16) >> 24;
    memcpy(v36, opt, optlen);
    v27 = &v36[optlen];
    v39 = &v36[optlen] - (_BYTE *)v46;
    *v37 = (unsigned int)(v39 << 16) >> 24;
    v37[1] = v39;
  }
  return v27 - (char *)header;
}
