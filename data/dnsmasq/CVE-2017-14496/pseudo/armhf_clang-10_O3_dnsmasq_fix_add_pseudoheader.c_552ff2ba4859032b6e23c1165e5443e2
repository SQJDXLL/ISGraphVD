unsigned __int8 *__fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned int udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  size_t v9; // r9
  dns_header *v10; // r5
  void *v13; // r8
  unsigned __int8 *pseudoheader; // r0
  int v16; // r4
  char v17; // r3
  unsigned __int8 *v18; // r7
  unsigned __int8 v19; // r6
  unsigned __int8 v20; // lr
  unsigned __int8 v21; // r10
  unsigned __int8 v22; // r12
  unsigned __int8 v23; // r2
  unsigned __int8 v24; // r3
  _BYTE *v25; // r8
  int v26; // r6
  unsigned __int8 *v27; // r10
  int v28; // r5
  int v29; // r0
  int v30; // r2
  unsigned __int8 *v31; // r0
  unsigned __int8 v32; // r4
  unsigned __int8 *v33; // r7
  size_t v34; // r2
  char *v35; // r5
  unsigned __int8 *v36; // r0
  void *v37; // r0
  int v38; // r0
  int v39; // r1
  int v40; // r2
  int v41; // r0
  int v42; // r0
  _BYTE *v43; // r0
  unsigned int v44; // r0
  bool v45; // zf
  unsigned __int8 v46; // [sp+Ch] [bp-4Ch]
  unsigned __int8 v47; // [sp+10h] [bp-48h]
  unsigned __int8 v48; // [sp+14h] [bp-44h]
  unsigned int v49; // [sp+18h] [bp-40h]
  unsigned __int8 *v50; // [sp+1Ch] [bp-3Ch]
  dns_header *v51; // [sp+20h] [bp-38h]
  unsigned __int8 v52; // [sp+24h] [bp-34h]
  char v53; // [sp+24h] [bp-34h]
  void *dest; // [sp+28h] [bp-30h]
  void *desta; // [sp+28h] [bp-30h]
  char v56; // [sp+2Ch] [bp-2Ch]
  int is_last; // [sp+30h] [bp-28h] BYREF
  int is_sign; // [sp+34h] [bp-24h] BYREF
  unsigned __int8 *udp_len; // [sp+38h] [bp-20h] BYREF

  v9 = plen;
  v10 = header;
  v13 = 0;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  if ( is_sign )
    return (unsigned __int8 *)v9;
  v16 = optno;
  v17 = set_do;
  if ( set_do )
    v17 = 0x80;
  if ( !pseudoheader )
  {
    v56 = v17;
    v26 = 0;
    v32 = 0;
    v49 = udp_sz >> 8;
    v48 = 0;
    v47 = 0;
    goto LABEL_37;
  }
  v18 = udp_len;
  v50 = limit;
  if ( set_do )
    LOBYTE(pseudoheader) = 0x80;
  v19 = udp_len[4];
  v20 = udp_len[5];
  v21 = *udp_len;
  v22 = udp_len[1];
  v23 = udp_len[2];
  v24 = udp_len[3];
  if ( set_do )
  {
    v19 |= (unsigned __int8)pseudoheader;
    udp_len[4] = v19;
  }
  if ( !optno )
    return (unsigned __int8 *)v9;
  v56 = v19;
  v46 = v24;
  v25 = v18 + 6;
  v26 = v18[7] | (v18[6] << 8);
  dest = v18 + 8;
  if ( v18 + 8 - (unsigned __int8 *)v10 + v26 > v9 )
    return (unsigned __int8 *)v9;
  v51 = v10;
  v52 = v22;
  LOBYTE(v49) = v21;
  v48 = v20;
  v47 = v23;
  if ( (unsigned int)v26 >= 5 )
  {
    if ( replace )
    {
      v27 = v18 + 8;
      v28 = 0;
      v29 = 4;
      while ( 1 )
      {
        v30 = v27[3] | (v27[2] << 8);
        if ( v30 + v29 > v26 )
          break;
        v31 = v27 + 4;
        if ( (v27[1] | (*v27 << 8)) == optno )
        {
          v26 = v26 - v30 - 4;
          memcpy(v27, &v31[v30], v26 - v28);
          v18[7] = v26;
          v18[6] = BYTE1(v26);
          v29 = v28 + 4;
          if ( v28 + 4 >= v26 )
            goto LABEL_22;
        }
        else
        {
          v27 = &v31[v30];
          v28 += v30 + 4;
          v29 = v28 + 4;
          if ( v28 + 4 >= v26 )
            goto LABEL_22;
        }
      }
    }
    else
    {
      v27 = v18 + 8;
      v38 = 0;
      v39 = 4;
      while ( 1 )
      {
        v40 = v27[3] | (v27[2] << 8);
        if ( v40 + v39 > v26 )
          break;
        if ( (v27[1] | (*v27 << 8)) == optno )
          return (unsigned __int8 *)v9;
        v41 = v38 + v40;
        v27 += v40 + 4;
        v39 = v41 + 8;
        v38 = v41 + 4;
        if ( v39 >= v26 )
          goto LABEL_22;
      }
    }
    limit = v50;
    v26 = 0;
    v13 = 0;
    is_last = 0;
    goto LABEL_35;
  }
  v27 = v18 + 8;
LABEL_22:
  if ( !is_last )
  {
    limit = v50;
    v13 = 0;
    if ( v26 )
    {
      v37 = (void *)whine_malloc(v26);
      if ( !v37 )
      {
        v10 = v51;
        LOBYTE(udp_sz) = v52;
        v32 = v46;
        v13 = 0;
        goto LABEL_36;
      }
      v13 = v37;
      memcpy(v37, dest, v26);
    }
    else
    {
      v26 = 0;
    }
LABEL_35:
    v10 = v51;
    LOBYTE(udp_sz) = v52;
    v32 = v46;
LABEL_36:
    v9 = rrfilter(v10, v9, 0);
LABEL_37:
    v42 = skip_questions(v10, v9);
    if ( !v42 )
      return (unsigned __int8 *)v9;
    v53 = udp_sz;
    desta = v13;
    v51 = v10;
    v43 = (_BYTE *)skip_section(
                     v42,
                     ((unsigned int)((v10->nscount << 8) & 0xFF0000 | (v10->nscount << 24)) >> 16)
                   + ((unsigned int)((v10->ancount << 8) & 0xFF0000 | (v10->ancount << 24)) >> 0x10)
                   + ((unsigned int)((v10->arcount << 8) & 0xFF0000 | (v10->arcount << 24)) >> 0x10),
                     v10,
                     v9);
    if ( !v43 )
      return (unsigned __int8 *)v9;
    v35 = v43 + 0xB;
    if ( v43 + 0xB > limit )
      return (unsigned __int8 *)v9;
    v43[10] = v26;
    v43[6] = v32;
    v33 = limit;
    v27 = v43 + 0xB;
    v43[8] = v48;
    v43[7] = v56;
    v43[5] = v47;
    v43[4] = v53;
    v43[3] = v49;
    v43[2] = 41;
    v43[1] = 0;
    *v43 = 0;
    v43[9] = BYTE1(v26);
    v25 = v43 + 9;
    if ( desta )
    {
      v27 = (unsigned __int8 *)&v35[v26];
      if ( &v35[v26] > (char *)v33 )
      {
        free(desta);
        return (unsigned __int8 *)v9;
      }
      memcpy(v35, desta, v26);
      free(desta);
    }
    v34 = optlen;
    if ( v33 - v27 - 4 >= (int)optlen )
    {
      v44 = ((unsigned int)((v51->arcount << 8) & 0xFF0000 | (v51->arcount << 24)) >> 0x10) + 1;
      v51->arcount = ((v44 << 8) & 0xFF0000 | (v44 << 24)) >> 16;
    }
    v16 = optno;
    v36 = v27 + 4;
    if ( v33 - (v27 + 4) < (int)optlen )
      return (unsigned __int8 *)v9;
    goto LABEL_47;
  }
  v33 = v50;
  v34 = optlen;
  LOWORD(v35) = (_WORD)dest;
  v36 = v27 + 4;
  if ( v50 - (v27 + 4) < (int)optlen )
    return (unsigned __int8 *)v9;
LABEL_47:
  v45 = v16 == 0;
  if ( v16 )
    v45 = replace == 2;
  if ( v45 )
    return (unsigned __int8 *)(v27 - (unsigned __int8 *)v51);
  if ( v36 > v33 )
    return (unsigned __int8 *)v9;
  v27[3] = v34;
  v27[1] = v16;
  v27[2] = BYTE1(v34);
  *v27 = BYTE1(v16);
  v27 = &v36[v34];
  if ( &v36[v34] > v33 )
    return (unsigned __int8 *)v9;
  memcpy(v36, opt, v34);
  v25[1] = (_BYTE)v27 - (_BYTE)v35;
  *v25 = (unsigned __int16)((_WORD)v27 - (_WORD)v35) >> 8;
  return (unsigned __int8 *)(v27 - (unsigned __int8 *)v51);
}
