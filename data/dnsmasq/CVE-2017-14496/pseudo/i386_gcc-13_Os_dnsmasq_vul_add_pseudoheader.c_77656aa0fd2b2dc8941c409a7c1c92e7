size_t __cdecl add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int8 *v10; // edx
  unsigned __int16 v11; // ax
  __int16 v12; // ax
  unsigned __int16 v13; // ax
  unsigned __int8 *v14; // eax
  int v15; // ebx
  unsigned __int16 v16; // cx
  unsigned __int16 v17; // si
  int v18; // esi
  __int16 v19; // cx
  int v20; // esi
  unsigned __int8 *v21; // eax
  __int16 v22; // si
  size_t v23; // eax
  int v24; // ebx
  unsigned __int16 v25; // cx
  unsigned __int16 v26; // ax
  unsigned __int16 v27; // dx
  int v28; // eax
  int v29; // edx
  __int16 v30; // ax
  unsigned __int8 *v31; // edi
  u16 v32; // cx
  char v33; // tt
  __int16 v34; // cx
  __int16 v36; // [esp-8h] [ebp-4Ch]
  __int16 v37; // [esp-6h] [ebp-4Ah]
  unsigned __int16 flags; // [esp+0h] [ebp-44h]
  int flagsa; // [esp+0h] [ebp-44h]
  unsigned __int8 *datap; // [esp+4h] [ebp-40h]
  unsigned __int8 *code; // [esp+Ch] [ebp-38h]
  signed int rdlen; // [esp+14h] [ebp-30h]
  unsigned __int8 *t_cp; // [esp+18h] [ebp-2Ch] BYREF
  int is_sign; // [esp+1Ch] [ebp-28h] BYREF
  int is_last[9]; // [esp+20h] [ebp-24h] BYREF

  is_last[1] = __readgsdword(0x14u);
  code = find_pseudoheader(header, plen, 0, &t_cp, &is_sign, is_last);
  rdlen = is_sign;
  if ( is_sign )
    return plen;
  if ( code )
  {
    v10 = t_cp;
    v37 = *(_WORD *)t_cp;
    v36 = *((_WORD *)t_cp + 1);
    HIBYTE(v11) = *((_WORD *)t_cp + 2);
    LOBYTE(v11) = HIBYTE(*((_WORD *)t_cp + 2));
    flags = v11;
    if ( set_do )
    {
      flags = v11 | 0x8000;
      LOBYTE(v12) = (unsigned __int16)(v11 | 0x8000) >> 8;
      HIBYTE(v12) = HIBYTE(*((_WORD *)t_cp + 2));
      *((_WORD *)t_cp + 2) = v12;
    }
    HIBYTE(v13) = *((_WORD *)v10 + 3);
    LOBYTE(v13) = HIBYTE(*((_WORD *)v10 + 3));
    rdlen = v13;
    datap = v10 + 8;
    if ( plen < (unsigned int)v13 + v10 + 8 - (unsigned __int8 *)header || !optno )
      return plen;
    v14 = v10 + 8;
    v15 = 0;
    while ( v15 + 4 < rdlen )
    {
      v17 = __ROL2__(*((_WORD *)v14 + 1), 8);
      if ( v17 + v15 > rdlen )
      {
        is_last[0] = 0;
LABEL_19:
        rdlen = 0;
        code = 0;
        goto LABEL_20;
      }
      LOBYTE(v16) = HIBYTE(*(_WORD *)v14);
      HIBYTE(v16) = *(_WORD *)v14;
      if ( v16 == optno )
      {
        if ( !replace )
          return plen;
        v18 = v17 + 4;
        rdlen -= v18;
        qmemcpy(v14, &v14[v18], rdlen - v15);
        LOBYTE(v19) = BYTE1(rdlen);
        HIBYTE(v19) = rdlen;
        *((_WORD *)v10 + 3) = v19;
      }
      else
      {
        v20 = v17 + 4;
        v14 += v20;
        v15 += v20;
      }
    }
    v10 += 6;
    if ( is_last[0] )
      goto LABEL_29;
    if ( !rdlen )
      goto LABEL_19;
    v21 = (unsigned __int8 *)whine_malloc(rdlen);
    code = v21;
    if ( v21 )
      qmemcpy(v21, datap, rdlen);
LABEL_20:
    udp_sz = __ROL2__(v37, 8);
    v22 = __ROL2__(v36, 8);
    v23 = rrfilter(header, plen, 0, v10);
    plen = v23;
  }
  else
  {
    v22 = 0;
    v23 = (set_do != 0) << 15;
    flags = (set_do != 0) << 15;
  }
  v24 = skip_questions(header, plen, v23, v23);
  if ( v24 )
  {
    HIBYTE(v25) = header->ancount;
    LOBYTE(v25) = HIBYTE(header->ancount);
    HIBYTE(v26) = header->nscount;
    LOBYTE(v26) = HIBYTE(header->nscount);
    HIBYTE(v27) = header->arcount;
    LOBYTE(v27) = HIBYTE(header->arcount);
    v28 = skip_section(v24, v27 + v25 + v26, header, plen);
    v29 = v28;
    if ( v28 )
    {
      *(_WORD *)v28 = 0;
      *(_BYTE *)(v28 + 2) = 41;
      *(_WORD *)(v28 + 3) = __ROL2__(udp_sz, 8);
      *(_WORD *)(v28 + 5) = __ROL2__(v22, 8);
      LOBYTE(v30) = HIBYTE(flags);
      HIBYTE(v30) = flags;
      *(_WORD *)(v29 + 7) = v30;
      LOBYTE(v30) = BYTE1(rdlen);
      HIBYTE(v30) = rdlen;
      *(_WORD *)(v29 + 9) = v30;
      v14 = (unsigned __int8 *)(v29 + 11);
      LOWORD(datap) = v29 + 11;
      if ( code )
      {
        flagsa = v29;
        qmemcpy(v14, code, rdlen);
        v31 = &v14[rdlen];
        free(code);
        v29 = flagsa;
        v14 = v31;
      }
      if ( limit - (v14 + 4) >= (int)optlen )
      {
        HIBYTE(v32) = header->arcount;
        LOBYTE(v32) = HIBYTE(header->arcount);
        ++v32;
        v33 = HIBYTE(v32);
        HIBYTE(v32) = v32;
        LOBYTE(v32) = v33;
        header->arcount = v32;
      }
      v10 = (unsigned __int8 *)(v29 + 9);
LABEL_29:
      if ( limit - (v14 + 4) >= (int)optlen )
      {
        if ( optno && replace != 2 )
        {
          LOBYTE(v34) = BYTE1(optno);
          HIBYTE(v34) = optno;
          *(_WORD *)v14 = v34;
          LOBYTE(v34) = BYTE1(optlen);
          HIBYTE(v34) = optlen;
          *((_WORD *)v14 + 1) = v34;
          qmemcpy(v14 + 4, opt, optlen);
          v14 += optlen + 4;
          HIBYTE(v34) = (_BYTE)v14 - (_BYTE)datap;
          LOBYTE(v34) = (unsigned __int16)((_WORD)v14 - (_WORD)datap) >> 8;
          *(_WORD *)v10 = v34;
        }
        return v14 - (unsigned __int8 *)header;
      }
    }
  }
  return plen;
}
