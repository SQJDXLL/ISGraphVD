int __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned int udp_sz,
        int a5,
        int a6,
        int a7,
        int a8,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  _BYTE *v13; // $fp
  size_t v16; // $s1
  unsigned __int8 v18; // $s2
  unsigned __int8 *pseudoheader; // $v0
  int v21; // $a2
  unsigned __int8 *v22; // $fp
  unsigned __int8 v23; // $v0
  char v24; // $at
  unsigned int v25; // $v1
  unsigned __int8 v26; // $a0
  unsigned __int8 v27; // $a1
  int v28; // $s5
  unsigned __int8 *v29; // $s4
  int v30; // $v0
  int v31; // $s6
  unsigned __int8 *v32; // $s7
  int v33; // $v0
  unsigned __int8 *v34; // $s4
  unsigned __int8 *v35; // $a1
  int v36; // $s4
  void *v37; // $v0
  void *v38; // $s7
  _BYTE *v39; // $s3
  __int16 v40; // $at
  int v41; // $v0
  int v42; // $s4
  int v43; // $fp
  int v44; // $v0
  int v45; // $s6
  _BYTE *v46; // $v0
  _BYTE *v47; // $fp
  __uint16_t v48; // $v0
  int v49; // [sp+18h] [-30h]
  int v50; // [sp+18h] [-30h]
  void *src; // [sp+1Ch] [-2Ch]
  unsigned __int8 v52; // [sp+20h] [-28h]
  unsigned __int8 v53; // [sp+20h] [-28h]
  unsigned __int8 v54; // [sp+24h] [-24h]
  unsigned __int8 v55; // [sp+24h] [-24h]
  unsigned __int8 v56; // [sp+28h] [-20h]
  char v57; // [sp+28h] [-20h]
  unsigned __int8 v58; // [sp+2Ch] [-1Ch]
  void *v59; // [sp+30h] [-18h]
  unsigned __int8 *v60; // [sp+34h] [-14h]
  int is_last; // [sp+3Ch] [-Ch] BYREF
  int is_sign; // [sp+40h] [-8h] BYREF
  unsigned __int8 *v63; // [sp+44h] [-4h] BYREF

  v16 = plen;
  v18 = 0;
  pseudoheader = find_pseudoheader(header, plen, 0u, &v63, &is_sign, &is_last);
  if ( is_sign )
    return v16;
  v21 = optno;
  v60 = limit;
  if ( pseudoheader )
  {
    v22 = v63;
    v23 = v63[4];
    if ( set_do )
    {
      v58 = v23 | 0x80;
      v63[4] = v23 | 0x80;
    }
    else
    {
      v58 = v63[4];
    }
    v18 = v22[3];
    LOBYTE(udp_sz) = v22[1];
    v28 = (v22[6] << 8) | v22[7];
    src = v22 + 8;
    if ( !optno || v16 < v22 + 8 - (unsigned __int8 *)header + v28 )
      return v16;
    v59 = 0;
    v52 = v22[5];
    v54 = v22[2];
    v56 = *v22;
    if ( (unsigned int)v28 < 5 )
    {
      v32 = v22 + 8;
    }
    else
    {
      v31 = 0;
      v32 = v22 + 8;
      while ( 1 )
      {
        v33 = (v32[2] << 8) | v32[3];
        v34 = v32 + 4;
        if ( v28 < v33 + v31 )
          break;
        if ( ((*v32 << 8) | v32[1]) == v21 )
        {
          if ( !replace )
            return v16;
          v35 = &v34[v33];
          v28 = v28 - v33 - 4;
          v36 = v21;
          memcpy(v32, v35, v28 - v31);
          v21 = v36;
          v22[7] = v28;
          v22[6] = BYTE1(v28);
        }
        else
        {
          v32 = &v34[v33];
          v31 += v33 + 4;
        }
        if ( v31 + 4 >= v28 )
          goto LABEL_24;
      }
      is_last = 0;
      v28 = 0;
      v32 += 4;
    }
LABEL_24:
    if ( is_last )
    {
      v29 = v32;
      v30 = v16;
      LOBYTE(v25) = v56;
      v26 = v54;
      v27 = v52;
      v13 = v22 + 6;
    }
    else
    {
      v49 = v21;
      v29 = 0;
      v37 = 0;
      if ( v28 )
      {
        v38 = (void *)whine_malloc(v28);
        v37 = 0;
        if ( v38 )
        {
          memcpy(v38, src, v28);
          v37 = v38;
        }
      }
      v59 = v37;
      v30 = rrfilter(header, v16, 0);
      v21 = v49;
      LOBYTE(v25) = v56;
      v26 = v54;
      v27 = v52;
      v13 = v22 + 6;
    }
  }
  else
  {
    v24 = 0x80;
    if ( !set_do )
      v24 = 0;
    v58 = v24;
    v25 = udp_sz >> 8;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v59 = 0;
    v29 = 0;
    v30 = v16;
  }
  v16 = v30;
  if ( !v29 )
  {
    v53 = v27;
    v55 = v26;
    v57 = v25;
    v50 = v21;
    v41 = skip_questions(header, v30);
    if ( !v41 )
      return v16;
    v42 = v41;
    v43 = _bswap_16(header->ancount);
    v45 = _bswap_16(header->nscount) + v43;
    v44 = _bswap_16(header->arcount);
    v46 = (_BYTE *)skip_section(v42, v45 + v44, header, v16);
    if ( !v46 )
      return v16;
    v47 = v46;
    v46[10] = v28;
    v46[8] = v53;
    v46[7] = v58;
    v46[6] = v18;
    v46[5] = v55;
    v46[4] = udp_sz;
    v46[3] = v57;
    v46[2] = 41;
    v46[1] = 0;
    *v46 = 0;
    v46[9] = BYTE1(v28);
    v29 = v46 + 0xB;
    if ( v59 )
    {
      memcpy(v46 + 0xB, v59, v28);
      free(v59);
      v29 = &v47[v28 + 0xB];
    }
    LOWORD(src) = (_WORD)v47 + 0xB;
    v13 = v47 + 9;
    if ( v60 - v29 - 4 >= (int)optlen )
    {
      v48 = _bswap_16(header->arcount);
      header->arcount = _bswap_16(v48 + 1);
    }
    v21 = v50;
  }
  v39 = v29 + 4;
  if ( v60 - (v29 + 4) >= (int)optlen )
  {
    if ( v21 && replace != 2 )
    {
      v29[3] = optlen;
      v29[1] = v21;
      v29[2] = BYTE1(optlen);
      *v29 = BYTE1(v21);
      memcpy(v29 + 4, opt, optlen);
      v29 = &v39[optlen];
      v40 = (_WORD)v39 + optlen - (_WORD)src;
      v13[1] = v40;
      *v13 = HIBYTE(v40);
    }
    return v29 - (unsigned __int8 *)header;
  }
  return v16;
}
