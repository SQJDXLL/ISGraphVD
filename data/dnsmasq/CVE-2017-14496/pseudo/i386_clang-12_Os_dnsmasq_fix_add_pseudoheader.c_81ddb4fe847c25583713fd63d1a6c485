int __cdecl add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        signed int optlen,
        int set_do,
        int replace)
{
  int v9; // ebp
  dns_header *v10; // edi
  unsigned __int8 *pseudoheader; // eax
  unsigned __int8 *v13; // esi
  __int16 v14; // bx
  unsigned __int8 *v15; // edi
  __int16 v16; // ax
  signed int v17; // ebx
  int v18; // esi
  int v19; // ebp
  int v20; // ecx
  unsigned __int32 v21; // eax
  int v22; // ecx
  _WORD *v23; // edi
  signed int v24; // edx
  size_t v25; // esi
  void *v26; // eax
  void *v27; // edi
  int v28; // eax
  __m128i v29; // xmm0
  __m128i v30; // xmm0
  int v31; // eax
  int v32; // edi
  char *v33; // ecx
  unsigned __int8 *v34; // eax
  __int16 v35; // [esp+Eh] [ebp-2Eh]
  __int16 v37; // [esp+10h] [ebp-2Ch]
  __int16 v38; // [esp+10h] [ebp-2Ch]
  void *ptr; // [esp+14h] [ebp-28h]
  void *src; // [esp+18h] [ebp-24h]
  __int16 v41; // [esp+1Ch] [ebp-20h]
  int is_last; // [esp+20h] [ebp-1Ch] BYREF
  unsigned __int8 *v43; // [esp+24h] [ebp-18h] BYREF
  int is_sign[5]; // [esp+28h] [ebp-14h] BYREF

  v9 = plen;
  v10 = header;
  pseudoheader = find_pseudoheader(header, plen, 0, &v43, is_sign, &is_last);
  if ( is_sign[0] )
    return v9;
  v13 = limit;
  HIBYTE(v14) = 0;
  if ( !pseudoheader )
  {
    LOBYTE(v14) = set_do != 0;
    v41 = v14 << 15;
    ptr = 0;
    v17 = 0;
    v38 = 0;
    goto LABEL_26;
  }
  v15 = v43;
  v16 = __ROL2__(*((_WORD *)v43 + 2), 8);
  if ( set_do )
  {
    v16 |= 0x8000u;
    v43[4] = HIBYTE(v16);
  }
  if ( optno )
  {
    v41 = v16;
    v17 = _byteswap_ulong(*((unsigned __int16 *)v15 + 3) << 16);
    v18 = (int)(v15 + 8);
    if ( v17 + v15 + 8 - (unsigned __int8 *)header <= plen )
    {
      src = v15 + 8;
      v35 = *(_WORD *)v15;
      v37 = *((_WORD *)v15 + 1);
      if ( (unsigned int)v17 >= 5 )
      {
        v19 = 0;
        v20 = 4;
        do
        {
          v21 = _byteswap_ulong(*(unsigned __int16 *)(v18 + 2) << 16);
          if ( (int)(v21 + v20) > v17 )
          {
            is_last = 0;
            v17 = 0;
            ptr = 0;
            v25 = plen;
            goto LABEL_25;
          }
          v22 = v18 + 4;
          if ( _byteswap_ulong(*(unsigned __int16 *)v18 << 16) == optno )
          {
            if ( !replace )
              return plen;
            v17 = v17 - v21 - 4;
            memcpy((void *)v18, (const void *)(v21 + v22), v17 - v19);
            *((_WORD *)v15 + 3) = __ROL2__(v17, 8);
          }
          else
          {
            v19 += v21 + 4;
            v18 = v21 + v22;
          }
          v20 = v19 + 4;
        }
        while ( v19 + 4 < v17 );
      }
      if ( is_last )
      {
        v23 = v15 + 6;
        v9 = plen;
        v24 = optlen;
        goto LABEL_35;
      }
      v25 = plen;
      if ( v17 )
      {
        ptr = 0;
        v26 = (void *)whine_malloc(v17);
        if ( v26 )
        {
          v27 = v26;
          memcpy(v26, src, v17);
          ptr = v27;
        }
      }
      else
      {
        ptr = 0;
        v17 = 0;
      }
LABEL_25:
      v10 = header;
      udp_sz = __ROL2__(v35, 8);
      v38 = __ROL2__(v37, 8);
      v9 = rrfilter(header, v25, 0);
      v13 = limit;
LABEL_26:
      v28 = skip_questions(v10, v9);
      if ( !v28 )
        return v9;
      v29 = _mm_cvtsi32_si128(*(_DWORD *)&v10->ancount);
      v30 = _mm_or_si128(_mm_slli_epi16(v29, 8u), _mm_srli_epi16(v29, 8u));
      v31 = skip_section(
              v28,
              _mm_cvtsi128_si32(_mm_add_epi32(_mm_srli_epi32(v30, 0x10u), _mm_unpacklo_epi16(v30, (__m128i)0LL)))
            + (unsigned __int16)__ROL2__(v10->arcount, 8),
              v10,
              v9);
      if ( !v31 )
        return v9;
      v32 = v31;
      v33 = (char *)(v31 + 11);
      if ( v31 + 11 > (unsigned int)v13 )
        return v9;
      *(_WORD *)v31 = 0;
      *(_BYTE *)(v31 + 2) = 41;
      *(_BYTE *)(v31 + 3) = HIBYTE(udp_sz);
      *(_BYTE *)(v31 + 4) = udp_sz;
      *(_BYTE *)(v31 + 5) = HIBYTE(v38);
      *(_BYTE *)(v31 + 6) = v38;
      *(_BYTE *)(v31 + 7) = HIBYTE(v41);
      *(_BYTE *)(v31 + 8) = v41;
      *(_BYTE *)(v31 + 9) = BYTE1(v17);
      *(_BYTE *)(v31 + 10) = v17;
      v18 = v31 + 11;
      LOWORD(src) = v31 + 11;
      if ( ptr )
      {
        v18 = (int)&v33[v17];
        if ( &v33[v17] > (char *)limit )
        {
          free(ptr);
          return v9;
        }
        memcpy(v33, ptr, v17);
        free(ptr);
      }
      v23 = (_WORD *)(v32 + 9);
      v24 = optlen;
      if ( (int)&limit[-v18 - 4] >= optlen )
        header->arcount = __ROL2__(__ROL2__(header->arcount, 8) + 1, 8);
LABEL_35:
      v34 = (unsigned __int8 *)(v18 + 4);
      if ( (int)&limit[-v18 - 4] < v24 )
        return v9;
      if ( optno && replace != 2 )
      {
        if ( v34 > limit )
          return v9;
        *(_BYTE *)v18 = BYTE1(optno);
        *(_BYTE *)(v18 + 1) = optno;
        *(_BYTE *)(v18 + 2) = BYTE1(v24);
        *(_BYTE *)(v18 + 3) = v24;
        v18 = (int)&v34[v24];
        if ( &v34[v24] > limit )
          return v9;
        memcpy(v34, opt, v24);
        *v23 = __ROL2__(v18 - (_WORD)src, 8);
      }
      return v18 - (_DWORD)header;
    }
  }
  return v9;
}
