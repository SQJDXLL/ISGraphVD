int __cdecl add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        signed int optlen,
        int set_do,
        int replace)
{
  size_t v9; // ebp
  dns_header *v10; // edi
  unsigned __int8 *pseudoheader; // eax
  unsigned __int8 *v13; // esi
  __int16 v14; // bx
  unsigned __int8 *v15; // edi
  __int16 v16; // dx
  __int16 v17; // si
  __int16 v18; // ax
  int v19; // esi
  signed int v20; // ebx
  int v21; // ebp
  int v22; // ecx
  unsigned __int32 v23; // eax
  int v24; // ecx
  signed int v25; // edx
  _WORD *v26; // edi
  size_t v27; // esi
  void *v28; // eax
  void *v29; // edi
  int v30; // eax
  int v31; // eax
  __m128i v32; // xmm1
  __m128i v33; // xmm0
  int v34; // eax
  char *v35; // ecx
  int v36; // edi
  unsigned __int8 *v37; // eax
  __int16 v38; // [esp+Eh] [ebp-2Eh]
  void *ptr; // [esp+10h] [ebp-2Ch]
  __int16 v41; // [esp+14h] [ebp-28h]
  __int16 v42; // [esp+14h] [ebp-28h]
  void *src; // [esp+18h] [ebp-24h]
  __int16 v44; // [esp+1Ch] [ebp-20h]
  int is_last; // [esp+20h] [ebp-1Ch] BYREF
  unsigned __int8 *v46; // [esp+24h] [ebp-18h] BYREF
  int is_sign[5]; // [esp+28h] [ebp-14h] BYREF

  v9 = plen;
  v10 = header;
  pseudoheader = find_pseudoheader(header, plen, 0, &v46, is_sign, &is_last);
  if ( is_sign[0] )
    return v9;
  v13 = limit;
  HIBYTE(v14) = 0;
  if ( !pseudoheader )
  {
    LOBYTE(v14) = set_do != 0;
    ptr = 0;
    v42 = 0;
    v44 = v14 << 15;
    v20 = 0;
    goto LABEL_26;
  }
  v15 = v46;
  v16 = *(_WORD *)v46;
  v17 = *((_WORD *)v46 + 1);
  v18 = __ROL2__(*((_WORD *)v46 + 2), 8);
  if ( set_do )
  {
    v18 |= 0x8000u;
    v46[4] = HIBYTE(v18);
  }
  if ( optno )
  {
    v41 = v17;
    v19 = (int)(v15 + 8);
    v44 = v18;
    v38 = v16;
    v20 = _byteswap_ulong(*((unsigned __int16 *)v15 + 3) << 16);
    if ( v20 + v15 + 8 - (unsigned __int8 *)header <= plen )
    {
      src = v15 + 8;
      if ( (unsigned int)v20 >= 5 )
      {
        v21 = 0;
        v22 = 4;
        do
        {
          v23 = _byteswap_ulong(*(unsigned __int16 *)(v19 + 2) << 16);
          if ( (int)(v23 + v22) > v20 )
          {
            v27 = plen;
            is_last = 0;
            v20 = 0;
            ptr = 0;
            goto LABEL_25;
          }
          v24 = v19 + 4;
          if ( _byteswap_ulong(*(unsigned __int16 *)v19 << 16) == optno )
          {
            if ( !replace )
              return plen;
            v20 = v20 - v23 - 4;
            memcpy((void *)v19, (const void *)(v23 + v24), v20 - v21);
            *((_WORD *)v15 + 3) = __ROL2__(v20, 8);
          }
          else
          {
            v21 += v23 + 4;
            v19 = v23 + v24;
          }
          v22 = v21 + 4;
        }
        while ( v21 + 4 < v20 );
      }
      if ( is_last )
      {
        v9 = plen;
        v25 = optlen;
        v26 = v15 + 6;
        goto LABEL_35;
      }
      v27 = plen;
      if ( v20 )
      {
        ptr = 0;
        v28 = (void *)whine_malloc(v20);
        if ( v28 )
        {
          v29 = v28;
          memcpy(v28, src, v20);
          ptr = v29;
        }
      }
      else
      {
        ptr = 0;
        v20 = 0;
      }
LABEL_25:
      v10 = header;
      udp_sz = __ROL2__(v38, 8);
      v42 = __ROL2__(v41, 8);
      v30 = rrfilter(header, v27, 0);
      v13 = limit;
      v9 = v30;
LABEL_26:
      v31 = skip_questions(v10, v9);
      if ( !v31 )
        return v9;
      v32 = _mm_cvtsi32_si128(*(_DWORD *)&v10->ancount);
      v33 = _mm_unpacklo_epi16(_mm_or_si128(_mm_slli_epi16(v32, 8u), _mm_srli_epi16(v32, 8u)), (__m128i)0LL);
      v34 = skip_section(
              v31,
              _mm_cvtsi128_si32(_mm_add_epi32(_mm_shuffle_epi32(v33, 229), v33))
            + (unsigned __int16)__ROL2__(v10->arcount, 8),
              v10,
              v9);
      if ( !v34 )
        return v9;
      v35 = (char *)(v34 + 11);
      v36 = v34;
      if ( v34 + 11 > (unsigned int)v13 )
        return v9;
      *(_WORD *)v34 = 0;
      *(_BYTE *)(v34 + 2) = 41;
      v19 = v34 + 11;
      LOWORD(src) = v34 + 11;
      *(_BYTE *)(v34 + 3) = HIBYTE(udp_sz);
      *(_BYTE *)(v34 + 4) = udp_sz;
      *(_BYTE *)(v34 + 5) = HIBYTE(v42);
      *(_BYTE *)(v34 + 6) = v42;
      *(_BYTE *)(v34 + 7) = HIBYTE(v44);
      *(_BYTE *)(v34 + 8) = v44;
      *(_BYTE *)(v34 + 9) = BYTE1(v20);
      *(_BYTE *)(v34 + 10) = v20;
      if ( ptr )
      {
        v19 = (int)&v35[v20];
        if ( &v35[v20] > (char *)limit )
        {
          free(ptr);
          return v9;
        }
        memcpy(v35, ptr, v20);
        free(ptr);
      }
      v25 = optlen;
      v26 = (_WORD *)(v36 + 9);
      if ( (int)&limit[-v19 - 4] >= optlen )
        header->arcount = __ROL2__(__ROL2__(header->arcount, 8) + 1, 8);
LABEL_35:
      v37 = (unsigned __int8 *)(v19 + 4);
      if ( (int)&limit[-v19 - 4] < v25 )
        return v9;
      if ( optno && replace != 2 )
      {
        if ( v37 > limit )
          return v9;
        *(_BYTE *)v19 = BYTE1(optno);
        *(_BYTE *)(v19 + 1) = optno;
        *(_BYTE *)(v19 + 2) = BYTE1(v25);
        *(_BYTE *)(v19 + 3) = v25;
        v19 = (int)&v37[v25];
        if ( &v37[v25] > limit )
          return v9;
        memcpy(v37, opt, v25);
        *v26 = __ROL2__(v19 - (_WORD)src, 8);
      }
      return v19 - (_DWORD)header;
    }
  }
  return v9;
}
