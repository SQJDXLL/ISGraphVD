int __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned int udp_sz,
        int a5,
        int a6,
        int a7,
        int a8,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  _BYTE *v13; // $fp
  size_t v16; // $s5
  unsigned __int8 v18; // $s1
  unsigned __int8 *pseudoheader; // $v0
  int v21; // $a1
  unsigned __int8 *v22; // $fp
  unsigned __int8 v23; // $a0
  unsigned __int8 *v24; // $s7
  int v25; // $s4
  int v26; // $s6
  int v27; // $v0
  int v28; // $v1
  unsigned __int8 *v29; // $s2
  char v30; // $at
  unsigned int v31; // $v1
  unsigned __int8 v32; // $a2
  unsigned __int8 v33; // $a3
  void *v34; // $v0
  unsigned __int8 *v35; // $s2
  int v36; // $s7
  void *v37; // $v0
  void *v38; // $s7
  signed int v39; // $s5
  unsigned __int8 *v40; // $a0
  int v41; // $v0
  int v42; // $s2
  int v43; // $s5
  int v44; // $v0
  int v45; // $s5
  _BYTE *v46; // $v0
  char *v47; // $fp
  _BYTE *v48; // $s5
  size_t v49; // $a2
  bool v50; // dc
  __uint16_t v51; // $v0
  void *v52; // [sp+20h] [-30h]
  void *v53; // [sp+20h] [-30h]
  void *src; // [sp+24h] [-2Ch]
  unsigned __int8 v55; // [sp+28h] [-28h]
  unsigned __int8 v56; // [sp+28h] [-28h]
  unsigned __int8 v57; // [sp+2Ch] [-24h]
  unsigned __int8 v58; // [sp+2Ch] [-24h]
  unsigned __int8 v59; // [sp+30h] [-20h]
  char v60; // [sp+30h] [-20h]
  char v61; // [sp+34h] [-1Ch]
  unsigned __int8 *v62; // [sp+38h] [-18h]
  int is_last; // [sp+44h] [-Ch] BYREF
  int is_sign; // [sp+48h] [-8h] BYREF
  unsigned __int8 *v65; // [sp+4Ch] [-4h] BYREF

  v16 = plen;
  v18 = 0;
  pseudoheader = find_pseudoheader(header, plen, 0u, &v65, &is_sign, &is_last);
  if ( is_sign )
    return v16;
  v21 = optno;
  v62 = limit;
  if ( pseudoheader )
  {
    v22 = v65;
    v23 = v65[4];
    if ( set_do )
    {
      v23 |= 0x80u;
      v65[4] = v23;
    }
    v18 = v22[3];
    LOBYTE(udp_sz) = v22[1];
    v24 = v22 + 8;
    v25 = (v22[6] << 8) | v22[7];
    src = v22 + 8;
    v61 = v23;
    if ( !optno || v16 < v24 - (unsigned __int8 *)header + v25 )
      return v16;
    v59 = *v22;
    v57 = v22[2];
    v55 = v22[5];
    if ( (unsigned int)v25 >= 5 )
    {
      v26 = 0;
      v27 = 4;
      while ( 1 )
      {
        v28 = (v24[2] << 8) | v24[3];
        v29 = v24 + 4;
        if ( v25 < v28 + v27 )
          break;
        if ( ((*v24 << 8) | v24[1]) == v21 )
        {
          if ( !replace )
            return v16;
          v25 = v25 - v28 - 4;
          memcpy(v24, &v29[v28], v25 - v26);
          v21 = optno;
          v22[7] = v25;
          v22[6] = BYTE1(v25);
        }
        else
        {
          v24 = &v29[v28];
          v26 += v28 + 4;
        }
        v27 = v26 + 4;
        if ( v26 + 4 >= v25 )
          goto LABEL_22;
      }
      is_last = 0;
      v25 = 0;
      v24 += 4;
    }
LABEL_22:
    if ( is_last )
    {
      v35 = v24;
      v36 = v16;
      LOBYTE(v31) = v59;
      v32 = v57;
      v33 = v55;
      v34 = 0;
      v13 = v22 + 6;
    }
    else
    {
      v35 = 0;
      v37 = 0;
      if ( v25 )
      {
        v38 = (void *)whine_malloc(v25);
        v37 = 0;
        if ( v38 )
        {
          memcpy(v38, src, v25);
          v37 = v38;
        }
      }
      v52 = v37;
      v36 = rrfilter(header, v16, 0);
      v34 = v52;
      v21 = optno;
      LOBYTE(v31) = v59;
      v32 = v57;
      v33 = v55;
      v13 = v22 + 6;
    }
  }
  else
  {
    v30 = 0x80;
    if ( !set_do )
      v30 = 0;
    v61 = v30;
    v31 = udp_sz >> 8;
    v32 = 0;
    v33 = 0;
    v25 = 0;
    v34 = 0;
    v35 = 0;
    v36 = v16;
  }
  v39 = optlen;
  if ( !v35 )
  {
    v53 = v34;
    v56 = v33;
    v58 = v32;
    v60 = v31;
    v41 = skip_questions(header, v36);
    if ( !v41 )
      return v36;
    v42 = v41;
    v43 = _bswap_16(header->ancount);
    v45 = _bswap_16(header->nscount) + v43;
    v44 = _bswap_16(header->arcount);
    v46 = (_BYTE *)skip_section(v42, v45 + v44, header, v36);
    if ( !v46 )
      return v36;
    v47 = v46 + 0xB;
    v48 = v46;
    if ( v62 < v46 + 0xB )
      return v36;
    v46[10] = v25;
    v46[8] = v56;
    v46[7] = v61;
    v46[6] = v18;
    v46[5] = v58;
    v46[4] = udp_sz;
    v46[3] = v60;
    v46[2] = 41;
    v46[1] = 0;
    *v46 = 0;
    v46[9] = BYTE1(v25);
    v35 = v46 + 0xB;
    if ( v53 )
    {
      v35 = (unsigned __int8 *)&v47[v25];
      if ( v62 < (unsigned __int8 *)&v47[v25] )
      {
        free(v53);
        return v36;
      }
      memcpy(v47, v53, v25);
      free(v53);
    }
    LOWORD(src) = (_WORD)v47;
    v13 = v48 + 9;
    v39 = optlen;
    if ( v62 - v35 - 4 >= (int)optlen )
    {
      v51 = _bswap_16(header->arcount);
      header->arcount = _bswap_16(v51 + 1);
    }
    v21 = optno;
  }
  v40 = v35 + 4;
  if ( v62 - (v35 + 4) >= v39 )
  {
    if ( v21 && replace != 2 )
    {
      if ( v62 < v40 )
        return v36;
      v35[3] = v39;
      v35[1] = v21;
      v35[2] = BYTE1(v39);
      *v35 = BYTE1(v21);
      v35 = &v40[v39];
      v49 = v39;
      v50 = v62 < &v40[v39];
      v16 = v36;
      if ( v50 )
        return v16;
      memcpy(v40, opt, v49);
      v13[1] = (_BYTE)v35 - (_BYTE)src;
      *v13 = (unsigned __int16)((_WORD)v35 - (_WORD)src) >> 8;
    }
    return v35 - (unsigned __int8 *)header;
  }
  return v36;
}
