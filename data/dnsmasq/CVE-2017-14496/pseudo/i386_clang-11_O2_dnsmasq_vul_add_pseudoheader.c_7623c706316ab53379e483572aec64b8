int __cdecl add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        int optlen,
        int set_do,
        int replace)
{
  int v9; // esi
  dns_header *v10; // ebp
  unsigned __int8 *pseudoheader; // eax
  __int16 v13; // bx
  unsigned __int8 *v14; // edi
  __int16 v15; // dx
  __int16 v16; // bx
  __int16 v17; // ax
  signed int v18; // ebx
  int v19; // esi
  int v20; // ebp
  unsigned __int32 v21; // eax
  int v22; // ecx
  _WORD *v23; // edi
  void *v24; // eax
  void *v25; // edi
  int v26; // eax
  __m128i v27; // xmm1
  __m128i v28; // xmm0
  int v29; // eax
  int v30; // edi
  char *v31; // ebx
  __int16 v32; // [esp+Ah] [ebp-32h]
  char *dest; // [esp+Ch] [ebp-30h]
  void *src; // [esp+10h] [ebp-2Ch]
  __int16 v36; // [esp+14h] [ebp-28h]
  __int16 v37; // [esp+14h] [ebp-28h]
  size_t v38; // [esp+18h] [ebp-24h]
  __int16 v39; // [esp+1Ch] [ebp-20h]
  int is_last; // [esp+20h] [ebp-1Ch] BYREF
  int is_sign; // [esp+24h] [ebp-18h] BYREF
  unsigned __int8 *v42; // [esp+28h] [ebp-14h] BYREF

  v9 = plen;
  v10 = header;
  pseudoheader = find_pseudoheader(header, plen, 0, &v42, &is_sign, &is_last);
  if ( is_sign )
    return v9;
  HIBYTE(v13) = 0;
  if ( pseudoheader )
  {
    v14 = v42;
    v15 = *(_WORD *)v42;
    v16 = *((_WORD *)v42 + 1);
    v17 = __ROL2__(*((_WORD *)v42 + 2), 8);
    if ( set_do )
    {
      v17 |= 0x8000u;
      v42[4] = HIBYTE(v17);
    }
    v38 = plen;
    if ( !optno )
      return v38;
    v36 = v16;
    v39 = v17;
    v32 = v15;
    dest = (char *)(v14 + 8);
    v18 = _byteswap_ulong(*((unsigned __int16 *)v14 + 3) << 16);
    if ( v18 + v14 + 8 - (unsigned __int8 *)header > plen )
      return v38;
    if ( (unsigned int)v18 < 5 )
    {
      v19 = (int)(v14 + 8);
LABEL_19:
      v10 = header;
      if ( is_last )
      {
        v23 = v14 + 6;
LABEL_33:
        v31 = (char *)(v19 + 4);
        if ( (int)&limit[-v19 - 4] < optlen )
          return v38;
        if ( optno && replace != 2 )
        {
          *(_BYTE *)v19 = BYTE1(optno);
          *(_BYTE *)(v19 + 1) = optno;
          *(_BYTE *)(v19 + 2) = BYTE1(optlen);
          *(_BYTE *)(v19 + 3) = optlen;
          memcpy(v31, opt, optlen);
          v19 = (int)&v31[optlen];
          *v23 = __ROL2__(optlen + (_WORD)v31 - (_WORD)dest, 8);
        }
        return v19 - (_DWORD)v10;
      }
      if ( v18 )
      {
        src = 0;
        v24 = (void *)whine_malloc(v18);
        if ( v24 )
        {
          v25 = v24;
          memcpy(v24, dest, v18);
          src = v25;
        }
      }
      else
      {
        src = 0;
        v18 = 0;
      }
    }
    else
    {
      v19 = (int)(v14 + 8);
      v20 = 0;
      while ( 1 )
      {
        v21 = _byteswap_ulong(*(unsigned __int16 *)(v19 + 2) << 16);
        if ( (int)(v21 + v20) > v18 )
          break;
        v22 = v19 + 4;
        if ( _byteswap_ulong(*(unsigned __int16 *)v19 << 16) == optno )
        {
          if ( !replace )
            return v38;
          v18 = v18 - v21 - 4;
          memcpy((void *)v19, (const void *)(v21 + v22), v18 - v20);
          *((_WORD *)v14 + 3) = __ROL2__(v18, 8);
        }
        else
        {
          v20 += v21 + 4;
          v19 = v21 + v22;
        }
        if ( v20 + 4 >= v18 )
          goto LABEL_19;
      }
      v10 = header;
      is_last = 0;
      v18 = 0;
      src = 0;
    }
    udp_sz = __ROL2__(v32, 8);
    v37 = __ROL2__(v36, 8);
    v9 = rrfilter(v10, plen, 0);
  }
  else
  {
    LOBYTE(v13) = set_do != 0;
    src = 0;
    v37 = 0;
    v39 = v13 << 15;
    v18 = 0;
  }
  v26 = skip_questions(v10, v9);
  v38 = v9;
  if ( v26 )
  {
    v27 = _mm_cvtsi32_si128(*(_DWORD *)&v10->ancount);
    v28 = _mm_unpacklo_epi16(_mm_or_si128(_mm_slli_epi16(v27, 8u), _mm_srli_epi16(v27, 8u)), (__m128i)0LL);
    v29 = skip_section(
            v26,
            _mm_cvtsi128_si32(_mm_add_epi32(_mm_shuffle_epi32(v28, 229), v28))
          + (unsigned __int16)__ROL2__(v10->arcount, 8),
            v10,
            v9);
    if ( v29 )
    {
      *(_WORD *)v29 = 0;
      v30 = v29;
      *(_BYTE *)(v29 + 2) = 41;
      *(_BYTE *)(v29 + 3) = HIBYTE(udp_sz);
      *(_BYTE *)(v29 + 4) = udp_sz;
      *(_BYTE *)(v29 + 5) = HIBYTE(v37);
      *(_BYTE *)(v29 + 6) = v37;
      *(_BYTE *)(v29 + 7) = HIBYTE(v39);
      *(_BYTE *)(v29 + 8) = v39;
      *(_BYTE *)(v29 + 9) = BYTE1(v18);
      *(_BYTE *)(v29 + 10) = v18;
      v19 = v29 + 11;
      dest = (char *)(v29 + 11);
      if ( src )
      {
        memcpy((void *)(v29 + 11), src, v18);
        free(src);
        v19 = (int)&dest[v18];
      }
      v23 = (_WORD *)(v30 + 9);
      if ( (int)&limit[-v19 - 4] >= optlen )
        v10->arcount = __ROL2__(__ROL2__(v10->arcount, 8) + 1, 8);
      goto LABEL_33;
    }
  }
  return v38;
}
