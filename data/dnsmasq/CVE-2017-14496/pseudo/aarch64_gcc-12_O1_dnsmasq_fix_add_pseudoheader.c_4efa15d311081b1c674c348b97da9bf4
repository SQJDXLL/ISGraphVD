size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int64 v10; // x24
  unsigned __int8 *pseudoheader; // x0
  int v15; // w26
  unsigned __int8 *v16; // x21
  unsigned __int8 *v17; // x21
  __int16 v18; // w27
  unsigned __int8 *v19; // x4
  __int64 v20; // x3
  __int16 v21; // w2
  unsigned __int16 v22; // w0
  int v23; // w20
  char *v24; // x28
  unsigned __int64 v25; // x0
  bool v26; // cc
  int v28; // w2
  unsigned int v29; // w1
  int v30; // w22
  unsigned __int8 *v31; // x19
  unsigned __int8 *v32; // x0
  _BYTE *v33; // x21
  bool v34; // zf
  __int16 v35; // w28
  __int64 v36; // x0
  _BYTE *v37; // x0
  _BYTE *v38; // x20
  unsigned __int8 *v39; // x0
  __int16 t_s; // [xsp+78h] [xbp+78h]
  __int16 t_s_0; // [xsp+7Ch] [xbp+7Ch]
  int is_sign; // [xsp+88h] [xbp+88h] BYREF
  int is_last; // [xsp+8Ch] [xbp+8Ch] BYREF
  unsigned __int8 *udp_len; // [xsp+90h] [xbp+90h] BYREF

  v10 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0uLL, &udp_len, &is_sign, &is_last);
  v15 = is_sign;
  if ( is_sign )
    return v10;
  v16 = pseudoheader;
  if ( !pseudoheader )
  {
    t_s = (set_do != 0) << 15;
    t_s_0 = 0;
    goto LABEL_48;
  }
  v17 = udp_len;
  v18 = *udp_len;
  v19 = (unsigned __int8 *)udp_len[1];
  v20 = udp_len[2];
  v21 = udp_len[3];
  v22 = _byteswap_ushort(*((_WORD *)udp_len + 2));
  if ( set_do )
  {
    t_s = v22 | 0x8000;
    udp_len[4] = (unsigned __int16)(v22 | 0x8000) >> 8;
    v17[5] = v22;
  }
  else
  {
    t_s = v22;
  }
  v23 = v17[7] | (v17[6] << 8);
  v24 = (char *)(v17 + 8);
  v25 = v17 + 8 - (unsigned __int8 *)header + _byteswap_ushort(*((_WORD *)v17 + 3));
  if ( optno )
    v26 = v25 > v10;
  else
    v26 = 1;
  if ( v26 )
    return v10;
  udp_sz = (unsigned __int16)v19 | (v18 << 8);
  t_s_0 = v21 | ((_WORD)v20 << 8);
  if ( v23 <= 4 )
  {
    v31 = v17 + 8;
    if ( is_last )
      goto LABEL_25;
LABEL_57:
    if ( v23 )
    {
      v39 = (unsigned __int8 *)whine_malloc(v23);
      v16 = v39;
      v15 = v23;
      if ( v39 )
        memcpy(v39, v24, v23);
    }
    else
    {
      v15 = 0;
      v16 = 0LL;
    }
    goto LABEL_16;
  }
  v28 = v17[9] | (v17[8] << 8);
  v29 = v17[11] | (v17[10] << 8);
  v19 = v17 + 0xC;
  v20 = v29;
  if ( v23 >= (int)(v29 + 4) )
  {
    v30 = 0;
    v31 = v17 + 8;
    while ( 1 )
    {
      if ( v28 == optno )
      {
        if ( !replace )
          return v10;
        v23 -= v20 + 4;
        memcpy(v31, &v31[v29 + 4], v23 - v30);
        v17[6] = BYTE1(v23);
        v17[7] = v23;
      }
      else
      {
        v31 = &v19[(unsigned __int16)v29];
        v20 = (unsigned int)(v20 + 4);
        v30 += v20;
      }
      if ( v30 + 4 >= v23 )
        break;
      v28 = v31[1] | (*v31 << 8);
      v29 = v31[3] | (v31[2] << 8);
      v19 = v31 + 4;
      v20 = v29;
      if ( (int)(v29 + v30 + 4) > v23 )
        goto LABEL_15;
    }
    if ( is_last )
    {
      if ( v31 )
      {
LABEL_25:
        v32 = v31 + 4;
        if ( limit - (v31 + 4) < (__int64)optlen )
          return v10;
        v33 = v17 + 6;
        goto LABEL_27;
      }
      v15 = v23;
      v16 = 0LL;
      goto LABEL_48;
    }
    goto LABEL_57;
  }
LABEL_15:
  is_last = 0;
  v16 = 0LL;
LABEL_16:
  v10 = rrfilter(header, v10, 0LL, v20, v19);
LABEL_48:
  v36 = skip_questions(header, v10);
  if ( v36 )
  {
    v37 = (_BYTE *)skip_section(
                     v36,
                     (unsigned __int16)__rev16(header->nscount)
                   + (unsigned __int16)__rev16(header->ancount)
                   + (unsigned int)(unsigned __int16)__rev16(header->arcount),
                     header,
                     v10);
    v38 = v37;
    if ( v37 )
    {
      v24 = v37 + 0xB;
      if ( v37 + 0xB <= limit )
      {
        *v37 = 0;
        v37[1] = 0;
        v37[2] = 41;
        v37[3] = HIBYTE(udp_sz);
        v37[4] = udp_sz;
        v37[5] = HIBYTE(t_s_0);
        v37[6] = t_s_0;
        v37[7] = HIBYTE(t_s);
        v37[8] = t_s;
        v37[9] = BYTE1(v15);
        v37[10] = v15;
        if ( v16 )
        {
          v31 = (unsigned __int8 *)&v24[v15];
          if ( v31 > limit )
          {
            free(v16);
            return v10;
          }
          memcpy(v24, v16, v15);
          free(v16);
        }
        else
        {
          v31 = v37 + 0xB;
        }
        v32 = v31 + 4;
        if ( limit - (v31 + 4) < (__int64)optlen )
          return v10;
        v33 = v38 + 9;
        header->arcount = __rev16((unsigned __int16)__rev16(header->arcount) + 1);
LABEL_27:
        if ( optno )
          v34 = replace == 2;
        else
          v34 = 1;
        if ( !v34 )
        {
          if ( limit < v32 )
            return v10;
          *v31 = BYTE1(optno);
          v31[1] = optno;
          v31[2] = BYTE1(optlen);
          v31[3] = optlen;
          v31 = &v32[optlen];
          if ( &v32[optlen] > limit )
            return v10;
          memcpy(v32, opt, optlen);
          v35 = (_WORD)v31 - (_WORD)v24;
          *v33 = HIBYTE(v35);
          v33[1] = v35;
        }
        return v31 - (unsigned __int8 *)header;
      }
    }
  }
  return v10;
}
