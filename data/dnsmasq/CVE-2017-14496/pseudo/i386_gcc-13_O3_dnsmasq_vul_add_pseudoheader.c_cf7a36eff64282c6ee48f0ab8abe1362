size_t __cdecl add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int8 *pseudoheader; // ebp
  unsigned __int8 *v11; // ecx
  u16 v12; // ax
  int v13; // edi
  signed int v14; // esi
  unsigned __int8 *v15; // ebx
  unsigned __int16 v16; // dx
  int v17; // eax
  int v18; // ebp
  int v19; // eax
  int v20; // ebx
  unsigned __int8 *v21; // edi
  __int16 v22; // ax
  __int16 v23; // dx
  __int16 v25; // di
  int v26; // ebx
  int v27; // eax
  int v28; // edx
  size_t v29; // ecx
  char *v30; // esi
  _WORD *v31; // ebp
  unsigned __int8 *v32; // eax
  int rdlen; // [esp+2Ch] [ebp-40h]
  int rdlena; // [esp+2Ch] [ebp-40h]
  unsigned __int8 *t_cp; // [esp+30h] [ebp-3Ch]
  u16 t_s; // [esp+36h] [ebp-36h]
  unsigned __int8 *datap; // [esp+38h] [ebp-34h]
  __int16 v38; // [esp+3Ch] [ebp-30h]
  __int16 v39; // [esp+3Eh] [ebp-2Eh]
  unsigned __int8 *udp_len; // [esp+40h] [ebp-2Ch] BYREF
  int is_sign; // [esp+44h] [ebp-28h] BYREF
  int is_last[9]; // [esp+48h] [ebp-24h] BYREF

  is_last[1] = __readgsdword(0x14u);
  pseudoheader = find_pseudoheader(header, plen, 0, &udp_len, &is_sign, is_last);
  rdlen = is_sign;
  if ( is_sign )
    return plen;
  if ( !pseudoheader )
  {
    v25 = 0;
    t_s = (set_do != 0) << 15;
    goto LABEL_22;
  }
  v11 = udp_len;
  v39 = *(_WORD *)udp_len;
  v38 = *((_WORD *)udp_len + 1);
  v12 = __ROL2__(*((_WORD *)udp_len + 2), 8);
  t_s = v12;
  if ( set_do )
  {
    t_s = v12 | 0x8000;
    *((_WORD *)udp_len + 2) = __ROL2__(v12 | 0x8000, 8);
  }
  v13 = (int)(v11 + 8);
  datap = v11 + 8;
  v14 = (unsigned __int16)__ROL2__(*((_WORD *)v11 + 3), 8);
  if ( plen < (unsigned int)(unsigned __int16)v14 + v11 + 8 - (unsigned __int8 *)header || !optno )
    return plen;
  if ( (unsigned __int16)v14 > 4u )
  {
    v15 = v11 + 12;
    v16 = __ROL2__(*((_WORD *)v11 + 4), 8);
    v17 = (unsigned __int16)__ROL2__(*((_WORD *)v11 + 5), 8);
    if ( (unsigned __int16)v14 < (int)(unsigned __int16)v17 )
    {
LABEL_35:
      is_last[0] = 0;
      goto LABEL_36;
    }
    if ( !replace )
    {
      t_cp = v11;
      v20 = 0;
      v21 = v11 + 12;
      while ( v16 != optno )
      {
        v20 += v17 + 4;
        v13 = (int)&v21[v17];
        if ( v20 + 4 >= (unsigned __int16)v14 )
          goto LABEL_28;
        v22 = *(_WORD *)(v13 + 2);
        v23 = *(_WORD *)v13;
        v21 = (unsigned __int8 *)(v13 + 4);
        v16 = __ROL2__(v23, 8);
        v17 = (unsigned __int16)__ROL2__(v22, 8);
        if ( (unsigned __int16)v17 + v20 > (unsigned __int16)v14 )
          goto LABEL_35;
      }
      return plen;
    }
    t_cp = v11;
    v18 = 0;
    while ( 1 )
    {
      if ( v16 == optno )
      {
        v19 = v17 + 4;
        v14 -= v19;
        memcpy((void *)v13, (const void *)(v13 + v19), v14 - v18);
        *((_WORD *)t_cp + 3) = __ROL2__(v14, 8);
      }
      else
      {
        v13 = (int)&v15[v17];
        v18 += v17 + 4;
      }
      if ( v18 + 4 >= v14 )
        break;
      v15 = (unsigned __int8 *)(v13 + 4);
      v16 = __ROL2__(*(_WORD *)v13, 8);
      v17 = (unsigned __int16)__ROL2__(*(_WORD *)(v13 + 2), 8);
      if ( v18 + (unsigned __int16)v17 > v14 )
        goto LABEL_35;
    }
LABEL_28:
    v11 = t_cp;
  }
  if ( is_last[0] )
  {
    v30 = (char *)(v13 + 4);
    v31 = v11 + 6;
    if ( (int)&limit[-v13 - 4] >= (int)optlen )
      goto LABEL_31;
    return plen;
  }
  if ( v14 )
  {
    v32 = (unsigned __int8 *)whine_malloc(v14);
    pseudoheader = v32;
    if ( v32 )
      memcpy(v32, datap, v14);
    rdlen = v14;
    goto LABEL_37;
  }
LABEL_36:
  pseudoheader = 0;
LABEL_37:
  udp_sz = __ROL2__(v39, 8);
  v25 = __ROL2__(v38, 8);
  plen = rrfilter(header, plen, 0);
LABEL_22:
  v26 = skip_questions(header, plen);
  if ( !v26 )
    return plen;
  v27 = skip_section(
          v26,
          (unsigned __int16)__ROL2__(header->arcount, 8)
        + (unsigned __int16)__ROL2__(header->ancount, 8)
        + (unsigned __int16)__ROL2__(header->nscount, 8),
          header,
          plen);
  v28 = v27;
  if ( !v27 )
    return plen;
  v29 = rdlen;
  *(_BYTE *)(v27 + 2) = 41;
  *(_WORD *)v27 = 0;
  *(_WORD *)(v27 + 3) = __ROL2__(udp_sz, 8);
  *(_WORD *)(v27 + 5) = __ROL2__(v25, 8);
  *(_WORD *)(v27 + 7) = __ROL2__(t_s, 8);
  *(_WORD *)(v27 + 9) = __ROL2__(rdlen, 8);
  LOWORD(datap) = v27 + 11;
  v13 = v27 + 11;
  if ( pseudoheader )
  {
    rdlena = v27;
    v13 = v27 + 11 + v29;
    memcpy((void *)(v27 + 11), pseudoheader, v29);
    free(pseudoheader);
    v28 = rdlena;
  }
  v30 = (char *)(v13 + 4);
  if ( (int)&limit[-v13 - 4] < (int)optlen )
    return plen;
  v31 = (_WORD *)(v28 + 9);
  header->arcount = __ROL2__(__ROL2__(header->arcount, 8) + 1, 8);
LABEL_31:
  if ( optno )
  {
    if ( replace != 2 )
    {
      *(_WORD *)v13 = __ROL2__(optno, 8);
      *(_WORD *)(v13 + 2) = __ROL2__(optlen, 8);
      memcpy(v30, opt, optlen);
      v13 = (int)&v30[optlen];
      *v31 = __ROL2__(optlen + (_WORD)v30 - (_WORD)datap, 8);
    }
  }
  return v13 - (_DWORD)header;
}
