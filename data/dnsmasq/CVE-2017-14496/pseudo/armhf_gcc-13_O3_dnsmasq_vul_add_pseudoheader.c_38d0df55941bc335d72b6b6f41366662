size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  int v9; // r9
  unsigned int v11; // r4
  unsigned __int8 *pseudoheader; // r0
  int v13; // r10
  unsigned __int8 *v14; // r7
  unsigned __int8 *v15; // r9
  unsigned int v16; // r2
  int v17; // r5
  unsigned int v18; // r2
  unsigned __int8 *v19; // r3
  unsigned int v20; // r2
  signed int v21; // r11
  int v22; // r7
  unsigned int v23; // r1
  unsigned __int8 *v24; // r12
  unsigned int v25; // r0
  signed int v26; // r2
  int v27; // r1
  unsigned int v28; // r1
  unsigned int v29; // r0
  int v30; // r2
  unsigned __int8 *v31; // r0
  int v32; // r7
  int v33; // r0
  unsigned int v34; // r1
  unsigned int v35; // r0
  __int16 v37; // r5
  int v38; // r11
  int v39; // r0
  _BYTE *v40; // r0
  _BYTE *v41; // r5
  char *v42; // r5
  _BYTE *v43; // r4
  unsigned __int16 v44; // r1
  unsigned __int8 *v45; // r0
  bool v46; // zf
  int v47; // r9
  void *src; // [sp+14h] [bp-44h]
  unsigned int v50; // [sp+18h] [bp-40h]
  _BYTE *v51; // [sp+18h] [bp-40h]
  unsigned int v52; // [sp+1Ch] [bp-3Ch]
  unsigned __int8 *udp_len; // [sp+20h] [bp-38h] BYREF
  int is_sign; // [sp+24h] [bp-34h] BYREF
  int is_last; // [sp+28h] [bp-30h] BYREF

  LOWORD(v9) = udp_sz;
  v11 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  v13 = is_sign;
  if ( is_sign )
    return v11;
  v14 = pseudoheader;
  if ( pseudoheader )
  {
    v15 = udp_len;
    v16 = udp_len[4] | (udp_len[5] << 8);
    v52 = *udp_len | (udp_len[1] << 8);
    v17 = (unsigned __int16)((v16 >> 8) | ((_WORD)v16 << 8));
    v50 = udp_len[2] | (udp_len[3] << 8);
    if ( set_do )
    {
      v18 = ~((unsigned int)~(v17 << 17) >> 17) << 16;
      LOWORD(v17) = ~((unsigned int)~(v17 << 17) >> 17);
      udp_len[4] = HIBYTE(v18);
      v15[5] = v17;
    }
    v19 = v15 + 8;
    v20 = v15[6] | (v15[7] << 8);
    v21 = (unsigned __int16)((v20 >> 8) | ((_WORD)v20 << 8));
    v22 = optno == 0;
    if ( v15 + 8 - (unsigned __int8 *)header + v21 > v11 )
      v22 = 1;
    src = v15 + 8;
    if ( v22 )
      return v11;
    if ( (unsigned __int16)((v20 >> 8) | ((_WORD)v20 << 8)) > 4u )
    {
      v23 = v15[10] | (v15[11] << 8);
      v24 = v15 + 0xC;
      v25 = v15[8] | (v15[9] << 8);
      v26 = (unsigned __int16)((v23 >> 8) | ((_WORD)v23 << 8));
      v27 = (unsigned __int16)((v25 >> 8) | ((_WORD)v25 << 8));
      if ( v21 < v26 )
      {
LABEL_45:
        is_last = 0;
        goto LABEL_46;
      }
      if ( !replace )
      {
        v32 = 0;
        while ( v27 != optno )
        {
          v32 += v26 + 4;
          v19 = &v24[v26];
          if ( v32 + 4 >= v21 )
            goto LABEL_31;
          v33 = v24[v26];
          v24 = v19 + 4;
          v34 = v19[2] | (v19[3] << 8);
          v35 = v33 | (v19[1] << 8);
          v26 = (unsigned __int16)((v34 >> 8) | ((_WORD)v34 << 8));
          v27 = (unsigned __int16)((v35 >> 8) | ((_WORD)v35 << 8));
          if ( v26 + v32 > v21 )
            goto LABEL_45;
        }
        return v11;
      }
      while ( 1 )
      {
        if ( v27 == optno )
        {
          v30 = v26 + 4;
          v21 -= v30;
          v31 = (unsigned __int8 *)memcpy(v19, &v19[v30], v21 - v22);
          v15[7] = v21;
          v15[6] = (unsigned int)(v21 << 16) >> 24;
          v19 = v31;
        }
        else
        {
          v19 = &v24[v26];
          v22 += v26 + 4;
        }
        if ( v22 + 4 >= v21 )
          break;
        v28 = v19[2] | (v19[3] << 8);
        v24 = v19 + 4;
        v29 = *v19 | (v19[1] << 8);
        v26 = (unsigned __int16)((v28 >> 8) | ((_WORD)v28 << 8));
        v27 = (unsigned __int16)((v29 >> 8) | ((_WORD)v29 << 8));
        if ( v22 + v26 > v21 )
          goto LABEL_45;
      }
    }
LABEL_31:
    if ( !is_last )
    {
      if ( v21 )
      {
        v45 = (unsigned __int8 *)whine_malloc(v21);
        v14 = v45;
        if ( v45 )
          memcpy(v45, src, v21);
        v13 = v21;
        goto LABEL_36;
      }
LABEL_46:
      v14 = 0;
LABEL_36:
      v9 = (v52 >> 8) | (v52 << 8);
      v38 = (v50 >> 8) | (v50 << 8);
      v11 = rrfilter(header, v11, 0);
      goto LABEL_25;
    }
    v42 = (char *)(v19 + 4);
    if ( limit - (v19 + 4) >= (int)optlen )
    {
      v43 = v15 + 6;
      goto LABEL_40;
    }
    return v11;
  }
  v37 = set_do;
  if ( set_do )
    v37 = 1;
  LOWORD(v17) = v37 << 15;
  LOWORD(v38) = 0;
LABEL_25:
  v39 = skip_questions(header, v11);
  if ( !v39 )
    return v11;
  v40 = (_BYTE *)skip_section(
                   v39,
                   (unsigned __int16)(HIBYTE(header->ancount) | (header->ancount << 8))
                 + (unsigned __int16)(HIBYTE(header->nscount) | (header->nscount << 8))
                 + (unsigned __int16)(HIBYTE(header->arcount) | (header->arcount << 8)),
                   header,
                   v11);
  v51 = v40;
  if ( !v40 )
    return v11;
  v40[9] = (unsigned int)(v13 << 16) >> 24;
  v40[4] = v9;
  v40[6] = v38;
  v40[8] = v17;
  *v40 = 0;
  v40[1] = 0;
  v40[3] = BYTE1(v9);
  v40[5] = BYTE1(v38);
  v40[7] = BYTE1(v17);
  v40[10] = v13;
  v40[2] = 41;
  v19 = v40 + 0xB;
  v41 = v40 + 0xB;
  src = v40 + 0xB;
  if ( v14 )
  {
    memcpy(v19, v14, v13);
    free(v14);
    v19 = &v41[v13];
  }
  v42 = (char *)(v19 + 4);
  if ( limit - (v19 + 4) < (int)optlen )
    return v11;
  v43 = v51 + 9;
  v44 = (HIBYTE(header->arcount) | (header->arcount << 8)) + 1;
  header->arcount = HIBYTE(v44) | (v44 << 8);
LABEL_40:
  v46 = optno == 0;
  if ( optno )
    v46 = replace == 2;
  if ( !v46 )
  {
    v19[1] = optno;
    v19[3] = optlen;
    v19[2] = optlen << 16 >> 24;
    *v19 = (unsigned int)(optno << 16) >> 24;
    memcpy(v42, opt, optlen);
    v19 = (unsigned __int8 *)&v42[optlen];
    v47 = &v42[optlen] - (_BYTE *)src;
    *v43 = (unsigned int)(v47 << 16) >> 24;
    v43[1] = v47;
  }
  return v19 - (unsigned __int8 *)header;
}
