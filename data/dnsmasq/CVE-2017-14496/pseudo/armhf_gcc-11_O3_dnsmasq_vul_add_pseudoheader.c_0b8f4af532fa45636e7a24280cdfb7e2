size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned int v9; // r9
  unsigned int v11; // r4
  unsigned __int8 *pseudoheader; // r0
  int v13; // r10
  unsigned __int8 *v14; // r6
  unsigned __int8 *v15; // r3
  unsigned int v16; // r2
  unsigned int v17; // r5
  unsigned int v18; // r2
  unsigned __int8 *v19; // r9
  unsigned int v20; // r2
  signed int v21; // r11
  int v22; // r6
  unsigned int v23; // r1
  unsigned int v24; // r0
  signed int v25; // r2
  int v26; // r1
  unsigned __int8 *v27; // r0
  unsigned __int8 *v28; // r10
  unsigned int v29; // r1
  unsigned int v30; // r0
  int v31; // r2
  int v32; // lr
  int v33; // r12
  unsigned int v34; // r1
  unsigned int v35; // r12
  int v37; // r5
  unsigned int v38; // r11
  int v39; // r0
  _BYTE *v40; // r0
  _BYTE *v41; // r3
  _BYTE *v42; // r1
  unsigned int v43; // r11
  unsigned int v44; // r5
  void *v45; // r0
  char *v46; // r5
  _BYTE *v47; // r4
  unsigned __int16 v48; // r3
  bool v49; // zf
  int v50; // r2
  unsigned __int8 *v51; // r0
  void *v53; // [sp+10h] [bp-48h]
  unsigned int v54; // [sp+14h] [bp-44h]
  _BYTE *v55; // [sp+14h] [bp-44h]
  unsigned int v56; // [sp+18h] [bp-40h]
  unsigned __int8 *udp_len; // [sp+20h] [bp-38h] BYREF
  int is_sign; // [sp+24h] [bp-34h] BYREF
  int is_last; // [sp+28h] [bp-30h] BYREF

  v9 = udp_sz;
  v11 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  v13 = is_sign;
  if ( is_sign )
    return v11;
  v14 = pseudoheader;
  if ( pseudoheader )
  {
    v15 = udp_len;
    v16 = udp_len[4] | (udp_len[5] << 8);
    v54 = *udp_len | (udp_len[1] << 8);
    v17 = (unsigned __int16)((v16 >> 8) | ((_WORD)v16 << 8));
    v56 = udp_len[2] | (udp_len[3] << 8);
    if ( set_do )
    {
      v18 = ~(~(v17 << 17) >> 17) << 16;
      v17 = (unsigned __int16)~(~(v17 << 17) >> 17);
      udp_len[4] = HIBYTE(v18);
      v15[5] = v17;
    }
    v19 = v15 + 8;
    v20 = v15[6] | (v15[7] << 8);
    v21 = (unsigned __int16)((v20 >> 8) | ((_WORD)v20 << 8));
    v22 = optno == 0;
    if ( v15 + 8 - (unsigned __int8 *)header + v21 > v11 )
      v22 = 1;
    v53 = v15 + 8;
    if ( v22 )
      return v11;
    if ( (unsigned __int16)((v20 >> 8) | ((_WORD)v20 << 8)) > 4u )
    {
      v23 = v15[10] | (v15[11] << 8);
      v24 = v15[8] | (v15[9] << 8);
      v25 = (unsigned __int16)((v23 >> 8) | ((_WORD)v23 << 8));
      v26 = (unsigned __int16)((v24 >> 8) | ((_WORD)v24 << 8));
      v27 = v15 + 0xC;
      if ( v25 <= v21 )
      {
        if ( !replace )
        {
          v32 = 0;
          while ( v26 != optno )
          {
            v32 += v25 + 4;
            v19 = &v27[v25];
            if ( v32 + 4 >= v21 )
              goto LABEL_34;
            v33 = v27[v25];
            v27 = v19 + 4;
            v34 = v19[2] | (v19[3] << 8);
            v35 = v33 | (v19[1] << 8);
            v25 = (unsigned __int16)((v34 >> 8) | ((_WORD)v34 << 8));
            v26 = (unsigned __int16)((v35 >> 8) | ((_WORD)v35 << 8));
            if ( v25 + v32 > v21 )
              goto LABEL_43;
          }
          return v11;
        }
        v28 = v15;
        do
        {
          if ( v26 == optno )
          {
            v31 = v25 + 4;
            v21 -= v31;
            memcpy(v19, &v19[v31], v21 - v22);
            v28[7] = v21;
            v28[6] = (unsigned int)(v21 << 16) >> 24;
          }
          else
          {
            v19 = &v27[v25];
            v22 += v25 + 4;
          }
          if ( v22 + 4 >= v21 )
          {
            v15 = v28;
            goto LABEL_34;
          }
          v29 = v19[2] | (v19[3] << 8);
          v30 = *v19 | (v19[1] << 8);
          v25 = (unsigned __int16)((v29 >> 8) | ((_WORD)v29 << 8));
          v26 = (unsigned __int16)((v30 >> 8) | ((_WORD)v30 << 8));
          v27 = v19 + 4;
        }
        while ( v25 + v22 <= v21 );
        v13 = 0;
      }
LABEL_43:
      v14 = 0;
      is_last = 0;
      goto LABEL_44;
    }
LABEL_34:
    if ( !is_last )
    {
      if ( v21 )
      {
        v51 = (unsigned __int8 *)whine_malloc(v21);
        v14 = v51;
        if ( v51 )
          memcpy(v51, v53, v21);
        v13 = v21;
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
LABEL_44:
      v9 = (unsigned __int16)((v54 >> 8) | ((_WORD)v54 << 8));
      v38 = (unsigned __int16)((v56 >> 8) | ((_WORD)v56 << 8));
      v11 = rrfilter(header, v11, 0);
      goto LABEL_25;
    }
    v46 = (char *)(v19 + 4);
    if ( limit - (v19 + 4) >= (int)optlen )
    {
      v47 = v15 + 6;
      goto LABEL_37;
    }
    return v11;
  }
  v37 = set_do;
  if ( set_do )
    v37 = 1;
  v17 = v37 << 15;
  v38 = 0;
LABEL_25:
  v39 = skip_questions(header, v11);
  if ( !v39 )
    return v11;
  v40 = (_BYTE *)skip_section(
                   v39,
                   (unsigned __int16)(HIBYTE(header->ancount) | (header->ancount << 8))
                 + (unsigned __int16)(HIBYTE(header->nscount) | (header->nscount << 8))
                 + (unsigned __int16)(HIBYTE(header->arcount) | (header->arcount << 8)),
                   header,
                   v11);
  v41 = v40;
  if ( !v40 )
    return v11;
  v40[9] = (unsigned int)(v13 << 16) >> 24;
  v42 = v40 + 0xB;
  v40[4] = v9;
  v40[6] = v38;
  v19 = (unsigned __int8 *)(v9 >> 8);
  v43 = v38 >> 8;
  v40[8] = v17;
  *v40 = 0;
  v44 = v17 >> 8;
  v40[1] = 0;
  v40[3] = (_BYTE)v19;
  v45 = v40 + 0xB;
  if ( !v14 )
    v19 = v41 + 0xB;
  v41[5] = v43;
  v41[7] = v44;
  v41[10] = v13;
  v41[2] = 41;
  v53 = v41 + 0xB;
  if ( v14 )
  {
    v19 = &v42[v13];
    v55 = v41;
    memcpy(v45, v14, v13);
    free(v14);
    v41 = v55;
  }
  v46 = (char *)(v19 + 4);
  if ( limit - (v19 + 4) < (int)optlen )
    return v11;
  v47 = v41 + 9;
  v48 = (HIBYTE(header->arcount) | (header->arcount << 8)) + 1;
  header->arcount = HIBYTE(v48) | (v48 << 8);
LABEL_37:
  v49 = optno == 0;
  if ( optno )
    v49 = replace == 2;
  if ( !v49 )
  {
    v19[1] = optno;
    v19[3] = optlen;
    v19[2] = optlen << 16 >> 24;
    *v19 = (unsigned int)(optno << 16) >> 24;
    memcpy(v46, opt, optlen);
    v19 = (unsigned __int8 *)&v46[optlen];
    v50 = &v46[optlen] - (_BYTE *)v53;
    *v47 = (unsigned int)(v50 << 16) >> 24;
    v47[1] = v50;
  }
  return v19 - (unsigned __int8 *)header;
}
