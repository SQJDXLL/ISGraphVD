int __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned int udp_sz,
        int a5,
        int a6,
        int a7,
        int a8,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  _WORD *v13; // $fp
  size_t v16; // $s1
  unsigned __int8 *pseudoheader; // $v0
  unsigned __int8 *v20; // $fp
  unsigned __int8 v21; // $a3
  unsigned __int8 v22; // $v0
  unsigned __int8 v23; // $a0
  unsigned __int8 v24; // $a2
  unsigned __int8 v25; // $a1
  char v26; // $at
  unsigned int v27; // $a1
  unsigned __int8 v28; // $a2
  unsigned __int8 v29; // $a3
  int v30; // $s5
  void *v31; // $v1
  unsigned __int8 *v32; // $s4
  int v33; // $v0
  int v34; // $s2
  unsigned __int8 *v35; // $s7
  int v36; // $v0
  unsigned __int8 *v37; // $s4
  void *v38; // $v0
  void *v39; // $s7
  void *v40; // $s7
  _BYTE *v41; // $s3
  int v42; // $v0
  int v43; // $s4
  int v44; // $fp
  int v45; // $v0
  int v46; // $s2
  _BYTE *v47; // $v0
  _BYTE *v48; // $fp
  __uint16_t v49; // $v0
  void *src; // [sp+1Ch] [-2Ch]
  void *srca; // [sp+1Ch] [-2Ch]
  unsigned __int8 v52; // [sp+23h] [-25h]
  unsigned __int8 v53; // [sp+23h] [-25h]
  unsigned __int8 v54; // [sp+27h] [-21h]
  unsigned __int8 v55; // [sp+27h] [-21h]
  unsigned __int8 v56; // [sp+2Bh] [-1Dh]
  char v57; // [sp+2Bh] [-1Dh]
  unsigned __int8 v58; // [sp+2Fh] [-19h]
  unsigned __int8 v59; // [sp+33h] [-15h]
  unsigned __int8 *v60; // [sp+34h] [-14h]
  int is_last; // [sp+3Ch] [-Ch] BYREF
  int is_sign; // [sp+40h] [-8h] BYREF
  unsigned __int8 *v63; // [sp+44h] [-4h] BYREF

  v16 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0u, &v63, &is_sign, &is_last);
  if ( is_sign )
    return v16;
  v60 = limit;
  if ( pseudoheader )
  {
    v20 = v63;
    v21 = v63[5];
    v22 = v63[4];
    v23 = v63[3];
    v24 = v63[2];
    LOBYTE(udp_sz) = v63[1];
    v25 = *v63;
    if ( set_do )
    {
      v58 = v22 | 0x80;
      v63[4] = v22 | 0x80;
    }
    else
    {
      v58 = v63[4];
    }
    v30 = (v20[6] << 8) | v20[7];
    v59 = v23;
    src = v20 + 8;
    if ( !optno || v16 < v20 + 8 - (unsigned __int8 *)header + v30 )
      return v16;
    v52 = v21;
    v54 = v24;
    v56 = v25;
    if ( (unsigned int)v30 < 5 )
    {
      v35 = v20 + 8;
    }
    else
    {
      v34 = 0;
      v35 = v20 + 8;
      while ( 1 )
      {
        v36 = (v35[2] << 8) | v35[3];
        v37 = v35 + 4;
        if ( v30 < v36 + v34 )
          break;
        if ( ((*v35 << 8) | v35[1]) == optno )
        {
          if ( !replace )
            return v16;
          v30 = v30 - v36 - 4;
          memcpy(v35, &v37[v36], v30 - v34);
          *((_WORD *)v20 + 3) = v30;
        }
        else
        {
          v35 = &v37[v36];
          v34 += v36 + 4;
        }
        if ( v34 + 4 >= v30 )
          goto LABEL_24;
      }
      is_last = 0;
      v30 = 0;
      v35 += 4;
    }
LABEL_24:
    if ( is_last )
    {
      v32 = v35;
      v33 = v16;
      LOBYTE(v27) = v56;
      v28 = v54;
      v29 = v52;
      v31 = 0;
      v13 = v20 + 6;
    }
    else
    {
      v32 = 0;
      v38 = 0;
      if ( v30 )
      {
        v39 = (void *)whine_malloc(v30);
        v38 = 0;
        if ( v39 )
        {
          memcpy(v39, src, v30);
          v38 = v39;
        }
      }
      v40 = v38;
      v33 = rrfilter(header, v16, 0);
      v31 = v40;
      LOBYTE(v27) = v56;
      v28 = v54;
      v29 = v52;
      v13 = v20 + 6;
    }
  }
  else
  {
    v59 = 0;
    v26 = 0x80;
    if ( !set_do )
      v26 = 0;
    v58 = v26;
    v27 = udp_sz >> 8;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = v16;
  }
  v16 = v33;
  if ( !v32 )
  {
    srca = v31;
    v53 = v29;
    v55 = v28;
    v57 = v27;
    v42 = skip_questions(header, v33);
    if ( !v42 )
      return v16;
    v43 = v42;
    v44 = _bswap_16(header->ancount);
    v46 = _bswap_16(header->nscount) + v44;
    v45 = _bswap_16(header->arcount);
    v47 = (_BYTE *)skip_section(v43, v46 + v45, header, v16);
    if ( !v47 )
      return v16;
    v48 = v47;
    v47[10] = v30;
    v47[8] = v53;
    v47[7] = v58;
    v47[6] = v59;
    v47[5] = v55;
    v47[4] = udp_sz;
    v47[3] = v57;
    v47[2] = 41;
    v47[1] = 0;
    *v47 = 0;
    v47[9] = BYTE2(v30);
    v32 = v47 + 0xB;
    if ( srca )
    {
      memcpy(v47 + 0xB, srca, v30);
      free(srca);
      v32 = &v48[v30 + 0xB];
    }
    LOWORD(src) = (_WORD)v48 + 0xB;
    v13 = v48 + 9;
    if ( v60 - v32 - 4 >= (int)optlen )
    {
      v49 = _bswap_16(header->arcount);
      header->arcount = _bswap_16(v49 + 1);
    }
  }
  v41 = v32 + 4;
  if ( v60 - (v32 + 4) >= (int)optlen )
  {
    if ( optno && replace != 2 )
    {
      v32[3] = optlen;
      v32[1] = optno;
      v32[2] = BYTE2(optlen);
      *v32 = BYTE2(optno);
      memcpy(v32 + 4, opt, optlen);
      v32 = &v41[optlen];
      *v13 = (_WORD)v41 + optlen - (_WORD)src;
    }
    return v32 - (unsigned __int8 *)header;
  }
  return v16;
}
