size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int64 v15; // x19
  unsigned __int8 *pseudoheader; // x0
  char v19; // w28
  unsigned __int8 *v20; // x21
  unsigned __int8 v21; // w11
  unsigned __int8 v22; // w9
  unsigned __int8 v23; // w10
  _WORD *v24; // x26
  unsigned __int64 v25; // x22
  unsigned __int64 v26; // x27
  int v27; // w23
  int v28; // w8
  unsigned __int64 v29; // x9
  unsigned __int64 v30; // x8
  unsigned __int8 v31; // w26
  int v32; // w25
  __int64 v33; // x8
  void *v34; // x0
  __int64 v35; // x0
  __int64 v36; // x0
  unsigned __int8 *v37; // x0
  size_t n; // [xsp+0h] [xbp-50h]
  unsigned __int8 *src; // [xsp+8h] [xbp-48h]
  void *ptr; // [xsp+10h] [xbp-40h]
  unsigned __int8 v41; // [xsp+18h] [xbp-38h]
  unsigned __int8 v42; // [xsp+1Ch] [xbp-34h]
  unsigned __int8 *v43; // [xsp+20h] [xbp-30h]
  void *dest; // [xsp+28h] [xbp-28h]
  __int64 v45; // [xsp+34h] [xbp-1Ch]
  int is_last; // [xsp+40h] [xbp-10h] BYREF
  int is_sign; // [xsp+44h] [xbp-Ch] BYREF
  unsigned __int8 *udp_len; // [xsp+48h] [xbp-8h] BYREF

  v15 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0uLL, &udp_len, &is_sign, &is_last);
  if ( is_sign )
    return v15;
  if ( set_do )
    v19 = 0x80;
  else
    v19 = 0;
  if ( !pseudoheader )
  {
    ptr = 0LL;
    LODWORD(v25) = 0;
    v31 = 0;
    v42 = 0;
    v45 = HIBYTE(udp_sz);
    goto LABEL_30;
  }
  v43 = limit;
  v20 = udp_len;
  v21 = *udp_len;
  LOBYTE(udp_sz) = udp_len[1];
  v22 = udp_len[2];
  v23 = udp_len[3];
  v19 = udp_len[4];
  v41 = udp_len[5];
  if ( set_do )
  {
    v19 |= 0x80u;
    udp_len[4] = v19;
  }
  v24 = v20 + 6;
  if ( optno )
  {
    LOBYTE(v45) = v21;
    BYTE4(v45) = v23;
    v25 = bswap64((unsigned __int64)*((unsigned __int16 *)v20 + 3) << 48);
    dest = v20 + 8;
    if ( v20 + 8 - (unsigned __int8 *)header + v25 <= v15 )
    {
      n = optlen;
      src = opt;
      v42 = v22;
      if ( (unsigned int)v25 < 5 )
      {
        v26 = (unsigned __int64)(v20 + 8);
LABEL_21:
        if ( is_last )
        {
          optlen = n;
          limit = v43;
          v32 = (int)dest;
          v33 = (int)n;
          goto LABEL_39;
        }
        optlen = n;
        limit = v43;
        if ( (_DWORD)v25 && (v34 = (void *)whine_malloc((int)v25)) != 0LL )
        {
          ptr = v34;
          memcpy(v34, dest, (int)v25);
        }
        else
        {
          ptr = 0LL;
        }
        opt = src;
      }
      else
      {
        v26 = (unsigned __int64)(v20 + 8);
        v27 = 0;
        v28 = 4;
        while ( 1 )
        {
          v29 = bswap64((unsigned __int64)*(unsigned __int16 *)(v26 + 2) << 48);
          if ( (int)v29 + v28 > (int)v25 )
            break;
          v30 = v26 + 4;
          if ( bswap32(*(unsigned __int16 *)v26 << 16) == optno )
          {
            if ( !replace )
              return v15;
            LODWORD(v25) = v25 - v29 - 4;
            memcpy((void *)v26, (const void *)(v30 + v29), (int)v25 - v27);
            *((_WORD *)v20 + 3) = bswap32(v25) >> 16;
          }
          else
          {
            v26 = v30 + v29;
            v27 += v29 + 4;
          }
          v28 = v27 + 4;
          if ( v27 + 4 >= (int)v25 )
            goto LABEL_21;
        }
        optlen = n;
        opt = src;
        limit = v43;
        LODWORD(v25) = 0;
        ptr = 0LL;
        is_last = 0;
      }
      v31 = v41;
      v15 = rrfilter(header, v15, 0LL);
LABEL_30:
      v35 = skip_questions(header, v15);
      if ( !v35 )
        return v15;
      v36 = skip_section(
              v35,
              (bswap32(header->nscount) >> 0x10)
            + (bswap32(header->ancount) >> 0x10)
            + (bswap32(header->arcount) >> 0x10),
              header,
              v15);
      if ( !v36 || v36 + 0xB > (unsigned __int64)limit )
        return v15;
      *(_BYTE *)(v36 + 2) = 41;
      *(_BYTE *)(v36 + 3) = v45;
      *(_BYTE *)(v36 + 8) = v31;
      src = opt;
      *(_BYTE *)(v36 + 5) = v42;
      *(_WORD *)v36 = 0;
      *(_BYTE *)(v36 + 4) = udp_sz;
      *(_BYTE *)(v36 + 7) = v19;
      *(_BYTE *)(v36 + 6) = BYTE4(v45);
      *(_BYTE *)(v36 + 9) = BYTE1(v25);
      v24 = (_WORD *)(v36 + 9);
      v26 = v36 + 0xB;
      v32 = v36 + 0xB;
      *(_BYTE *)(v36 + 10) = v25;
      if ( ptr )
      {
        v26 = v36 + 0xB + (int)v25;
        if ( v26 > (unsigned __int64)limit )
        {
          free(ptr);
          return v15;
        }
        memcpy((void *)(v36 + 0xB), ptr, (int)v25);
        free(ptr);
      }
      v33 = (int)optlen;
      if ( (int)optlen <= (__int64)&limit[-v26 - 4] )
        header->arcount = bswap32((bswap32(header->arcount) >> 0x10) + 1) >> 16;
LABEL_39:
      v37 = (unsigned __int8 *)(v26 + 4);
      if ( v33 > (__int64)&limit[-v26 - 4] )
        return v15;
      if ( optno && replace != 2 )
      {
        if ( v37 > limit )
          return v15;
        *(_BYTE *)(v26 + 1) = optno;
        *(_BYTE *)(v26 + 3) = optlen;
        *(_BYTE *)v26 = BYTE1(optno);
        *(_BYTE *)(v26 + 2) = BYTE1(optlen);
        v26 = (unsigned __int64)&v37[optlen];
        if ( &v37[optlen] > limit )
          return v15;
        memcpy(v37, src, optlen);
        *v24 = bswap32(v26 - v32) >> 16;
      }
      return v26 - (_QWORD)header;
    }
  }
  return v15;
}
