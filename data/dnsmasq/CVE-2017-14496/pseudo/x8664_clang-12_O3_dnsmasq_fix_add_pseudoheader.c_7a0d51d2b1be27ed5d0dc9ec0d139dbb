size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int64 v13; // r15
  unsigned __int8 *pseudoheader; // rax
  __int64 v16; // rdx
  _BYTE *v18; // rsi
  unsigned __int8 *v19; // rbp
  __int16 v20; // ax
  unsigned __int64 v21; // rdx
  unsigned __int8 *v22; // rbx
  __int16 v23; // ax
  __int16 v24; // cx
  int v25; // r13d
  int v26; // ecx
  unsigned __int64 v27; // rax
  _BYTE *v28; // rsi
  unsigned __int8 *v29; // r12
  unsigned __int64 v30; // rbp
  __int16 v31; // r12
  int v32; // eax
  int v33; // edx
  unsigned __int64 v34; // rcx
  _WORD *v35; // rbp
  signed __int64 v36; // rcx
  size_t v37; // rbp
  void *v38; // rax
  __int64 v39; // rax
  __m128i v40; // xmm0
  __m128i v41; // xmm0
  __int64 v42; // rax
  __int64 v43; // rbp
  unsigned __int8 *v44; // rdi
  int v45; // eax
  unsigned __int8 *v46; // rdi
  __int16 v47; // [rsp+Ch] [rbp-7Ch]
  __int16 v48; // [rsp+10h] [rbp-78h]
  int v49; // [rsp+14h] [rbp-74h]
  void *ptr; // [rsp+18h] [rbp-70h]
  unsigned __int8 *v51; // [rsp+20h] [rbp-68h]
  __int16 v52; // [rsp+28h] [rbp-60h]
  int is_last; // [rsp+2Ch] [rbp-5Ch] BYREF
  unsigned __int64 v54; // [rsp+30h] [rbp-58h]
  void *src; // [rsp+38h] [rbp-50h]
  void *v56; // [rsp+40h] [rbp-48h]
  int is_sign; // [rsp+4Ch] [rbp-3Ch] BYREF
  unsigned __int8 *v58; // [rsp+50h] [rbp-38h] BYREF

  v13 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0LL, &v58, &is_sign, &is_last);
  if ( is_sign )
    return v13;
  v54 = 0LL;
  v51 = limit;
  v18 = 0LL;
  LOBYTE(v16) = set_do != 0;
  v49 = optno;
  if ( !pseudoheader )
  {
    LOBYTE(v18) = set_do != 0;
    v52 = (_WORD)v18 << 15;
    ptr = 0LL;
    v31 = 0;
    goto LABEL_31;
  }
  v19 = v58;
  v20 = __ROL2__(*((_WORD *)v58 + 2), 8);
  if ( set_do )
  {
    v20 |= 0x8000u;
    v58[4] = HIBYTE(v20);
  }
  if ( optno )
  {
    v52 = v20;
    v21 = _byteswap_uint64((unsigned __int64)*((unsigned __int16 *)v19 + 3) << 48);
    v22 = v19 + 8;
    if ( v21 + v19 + 8 - (unsigned __int8 *)header <= v13 )
    {
      v23 = *(_WORD *)v19;
      v24 = *((_WORD *)v19 + 1);
      v56 = opt;
      v48 = v23;
      src = v19 + 8;
      v47 = v24;
      if ( (unsigned int)v21 >= 5 )
      {
        if ( replace )
        {
          v25 = 0;
          v26 = 4;
          while ( 1 )
          {
            v27 = _byteswap_uint64((unsigned __int64)*((unsigned __int16 *)v22 + 1) << 48);
            if ( (int)v27 + v26 > (int)v21 )
              break;
            v28 = v22 + 4;
            if ( _byteswap_ulong(*(unsigned __int16 *)v22 << 16) == v49 )
            {
              v29 = v19;
              v30 = (unsigned int)(v21 - v27 - 4);
              v18 = &v28[v27];
              memcpy(v22, v18, (int)v21 - (int)v27 - 4 - v25);
              v21 = v30;
              v19 = v29;
              *((_WORD *)v29 + 3) = __ROL2__(v21, 8);
              v26 = v25 + 4;
              if ( v25 + 4 >= (int)v21 )
                goto LABEL_22;
            }
            else
            {
              v18 = &v28[(unsigned int)v27];
              v25 += v27 + 4;
              v22 = v18;
              v26 = v25 + 4;
              if ( v25 + 4 >= (int)v21 )
                goto LABEL_22;
            }
          }
        }
        else
        {
          v32 = 0;
          v18 = (_BYTE *)v21;
          v33 = 4;
          while ( 1 )
          {
            v34 = _byteswap_uint64((unsigned __int64)*((unsigned __int16 *)v22 + 1) << 48);
            if ( (int)v34 + v33 > (int)v18 )
              break;
            if ( _byteswap_ulong(*(unsigned __int16 *)v22 << 16) == optno )
              return v13;
            v22 += v34 + 4;
            v33 = v32 + v34 + 8;
            v32 += v34 + 4;
            if ( v33 >= (int)v18 )
            {
              v21 = (unsigned __int64)v18;
              goto LABEL_22;
            }
          }
        }
        is_last = 0;
        v54 = 0LL;
        ptr = 0LL;
        opt = (unsigned __int8 *)v56;
        goto LABEL_30;
      }
LABEL_22:
      if ( is_last )
      {
        v35 = v19 + 6;
        opt = (unsigned __int8 *)v56;
        v36 = optlen;
        goto LABEL_40;
      }
      opt = (unsigned __int8 *)v56;
      if ( (_DWORD)v21 )
      {
        v54 = v21;
        v37 = (int)v21;
        v38 = (void *)whine_malloc((int)v21, v18);
        if ( v38 )
        {
          ptr = v38;
          memcpy(v38, src, v37);
LABEL_30:
          udp_sz = __ROL2__(v48, 8);
          v31 = __ROL2__(v47, 8);
          v13 = rrfilter(header, v13, 0LL);
LABEL_31:
          v39 = skip_questions(header, v13, v16);
          if ( !v39 )
            return v13;
          v40 = _mm_cvtsi32_si128(*(_DWORD *)&header->ancount);
          v41 = _mm_or_si128(_mm_slli_epi16(v40, 8u), _mm_srli_epi16(v40, 8u));
          v42 = skip_section(
                  v39,
                  _mm_cvtsi128_si32(_mm_add_epi32(_mm_srli_epi32(v41, 0x10u), _mm_unpacklo_epi16(v41, (__m128i)0LL)))
                + (unsigned int)(unsigned __int16)__ROL2__(header->arcount, 8),
                  header,
                  v13);
          if ( !v42 )
            return v13;
          v43 = v42;
          v44 = (unsigned __int8 *)(v42 + 11);
          if ( v42 + 11 > (unsigned __int64)v51 )
            return v13;
          *(_WORD *)v42 = 0;
          *(_BYTE *)(v42 + 2) = 41;
          *(_BYTE *)(v42 + 3) = HIBYTE(udp_sz);
          *(_BYTE *)(v42 + 4) = udp_sz;
          *(_BYTE *)(v42 + 5) = HIBYTE(v31);
          *(_BYTE *)(v42 + 6) = v31;
          *(_BYTE *)(v42 + 7) = HIBYTE(v52);
          *(_BYTE *)(v42 + 8) = v52;
          v45 = v54;
          *(_BYTE *)(v43 + 9) = BYTE1(v54);
          *(_BYTE *)(v43 + 10) = v45;
          v22 = v44;
          src = v44;
          if ( ptr )
          {
            v22 = &v44[v45];
            if ( v22 > v51 )
            {
              free(ptr);
              return v13;
            }
            memcpy(v44, ptr, v45);
            free(ptr);
          }
          v35 = (_WORD *)(v43 + 9);
          v36 = optlen;
          if ( v51 - v22 - 4 >= (__int64)optlen )
            header->arcount = __ROL2__(__ROL2__(header->arcount, 8) + 1, 8);
LABEL_40:
          v46 = v22 + 4;
          if ( v51 - (v22 + 4) < v36 )
            return v13;
          if ( v49 && replace != 2 )
          {
            if ( v46 > v51 )
              return v13;
            *v22 = BYTE1(v49);
            v22[1] = v49;
            v22[2] = BYTE1(optlen);
            v22[3] = optlen;
            v22 = &v46[optlen];
            if ( &v46[optlen] > v51 )
              return v13;
            memcpy(v46, opt, optlen);
            *v35 = __ROL2__((_WORD)v22 - (_WORD)src, 8);
          }
          return v22 - (unsigned __int8 *)header;
        }
      }
      else
      {
        v54 = 0LL;
      }
      ptr = 0LL;
      goto LABEL_30;
    }
  }
  return v13;
}
