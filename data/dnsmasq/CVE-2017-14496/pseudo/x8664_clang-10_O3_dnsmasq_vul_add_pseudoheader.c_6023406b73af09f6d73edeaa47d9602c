size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int64 v13; // r14
  unsigned __int8 *pseudoheader; // rax
  __int64 v15; // rdx
  __int16 v17; // si
  unsigned __int8 *v18; // rsi
  __int16 v19; // ax
  __int16 v20; // dx
  unsigned __int64 v21; // rdx
  char *v22; // rbx
  int v23; // ebp
  unsigned __int64 v24; // rax
  _BYTE *v25; // rsi
  unsigned __int64 v26; // r12
  void *v27; // r13
  __int16 v28; // bx
  int v29; // eax
  unsigned __int64 v30; // rcx
  unsigned __int64 v31; // rsi
  int v32; // edx
  bool v33; // cc
  unsigned __int8 *v34; // rcx
  _WORD *v35; // rbp
  size_t v36; // rbx
  void *v37; // rax
  __int64 v38; // rax
  __int64 v39; // rax
  int v40; // ecx
  void *v41; // rbp
  char *v42; // r13
  __int64 v43; // rbx
  __int16 v44; // [rsp+Ch] [rbp-7Ch]
  __int16 v45; // [rsp+10h] [rbp-78h]
  int v46; // [rsp+14h] [rbp-74h]
  __int16 v47; // [rsp+18h] [rbp-70h]
  int is_last; // [rsp+1Ch] [rbp-6Ch] BYREF
  unsigned __int64 v49; // [rsp+20h] [rbp-68h]
  __int64 v50; // [rsp+28h] [rbp-60h]
  void *v51; // [rsp+30h] [rbp-58h]
  void *src; // [rsp+38h] [rbp-50h]
  unsigned __int8 *v53; // [rsp+40h] [rbp-48h]
  int is_sign; // [rsp+4Ch] [rbp-3Ch] BYREF
  unsigned __int8 *v55; // [rsp+50h] [rbp-38h] BYREF

  v13 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0LL, &v55, &is_sign, &is_last);
  if ( is_sign )
    return v13;
  v49 = 0LL;
  HIBYTE(v17) = 0;
  LOBYTE(v15) = set_do != 0;
  v46 = optno;
  if ( !pseudoheader )
  {
    v53 = limit;
    LOBYTE(v17) = set_do != 0;
    v47 = v17 << 15;
    v27 = 0LL;
    v28 = 0;
    goto LABEL_30;
  }
  v18 = v55;
  v19 = *(_WORD *)v55;
  v45 = *((_WORD *)v55 + 1);
  v20 = __ROL2__(*((_WORD *)v55 + 2), 8);
  if ( set_do )
  {
    v20 |= 0x8000u;
    v55[4] = HIBYTE(v20);
  }
  if ( optno )
  {
    v47 = v20;
    v44 = v19;
    v21 = _byteswap_uint64((unsigned __int64)*((unsigned __int16 *)v18 + 3) << 48);
    v22 = (char *)(v18 + 8);
    if ( v21 + v18 + 8 - (unsigned __int8 *)header <= v13 )
    {
      v51 = opt;
      v50 = (__int64)v18;
      src = v18 + 8;
      if ( (unsigned int)v21 >= 5 )
      {
        if ( replace )
        {
          v23 = 0;
          while ( 1 )
          {
            v24 = _byteswap_uint64((unsigned __int64)*((unsigned __int16 *)v22 + 1) << 48);
            if ( (int)v24 + v23 > (int)v21 )
              break;
            v25 = v22 + 4;
            if ( _byteswap_ulong(*(unsigned __int16 *)v22 << 16) == v46 )
            {
              v26 = (unsigned int)(v21 - v24 - 4);
              memcpy(v22, &v25[v24], (int)v26 - v23);
              v21 = v26;
              *(_WORD *)(v50 + 6) = __ROL2__(v26, 8);
              if ( v23 + 4 >= (int)v26 )
                goto LABEL_21;
            }
            else
            {
              v23 += v24 + 4;
              v22 = &v25[(unsigned int)v24];
              if ( v23 + 4 >= (int)v21 )
                goto LABEL_21;
            }
          }
        }
        else
        {
          v29 = 0;
          while ( 1 )
          {
            v30 = _byteswap_uint64((unsigned __int64)*((unsigned __int16 *)v22 + 1) << 48);
            v31 = v21;
            if ( (int)v30 + v29 > (int)v21 )
              break;
            if ( _byteswap_ulong(*(unsigned __int16 *)v22 << 16) == v46 )
              return v13;
            v22 += v30 + 4;
            v32 = v29 + v30 + 8;
            v29 += v30 + 4;
            v33 = v32 < (int)v31;
            v21 = v31;
            if ( !v33 )
              goto LABEL_21;
          }
        }
        v53 = limit;
        is_last = 0;
        v49 = 0LL;
        v27 = 0LL;
        opt = (unsigned __int8 *)v51;
        goto LABEL_29;
      }
LABEL_21:
      if ( is_last )
      {
        v34 = limit;
        v35 = (_WORD *)(v50 + 6);
        opt = (unsigned __int8 *)v51;
LABEL_36:
        if ( v34 - (unsigned __int8 *)(v22 + 4) >= (__int64)optlen )
        {
          if ( v46 && replace != 2 )
          {
            *v22 = BYTE1(v46);
            v22[1] = v46;
            v22[2] = BYTE1(optlen);
            v22[3] = optlen;
            memcpy(v22 + 4, opt, optlen);
            *v35 = __ROL2__(optlen + (_WORD)v22 + 4 - (_WORD)src, 8);
            v22 += optlen + 4;
          }
          return v22 - (char *)header;
        }
        return v13;
      }
      v53 = limit;
      opt = (unsigned __int8 *)v51;
      if ( (_DWORD)v21 )
      {
        v49 = v21;
        v36 = (int)v21;
        v37 = (void *)whine_malloc((int)v21);
        if ( v37 )
        {
          v27 = v37;
          memcpy(v37, src, v36);
LABEL_29:
          udp_sz = __ROL2__(v44, 8);
          v28 = __ROL2__(v45, 8);
          v13 = rrfilter(header, v13, 0LL);
LABEL_30:
          v38 = skip_questions(header, v13, v15);
          if ( !v38 )
            return v13;
          v39 = skip_section(
                  v38,
                  (unsigned __int16)__ROL2__(header->ancount, 8)
                + (unsigned __int16)__ROL2__(header->nscount, 8)
                + (unsigned int)(unsigned __int16)__ROL2__(header->arcount, 8),
                  header,
                  v13);
          if ( !v39 )
            return v13;
          *(_WORD *)v39 = 0;
          *(_BYTE *)(v39 + 2) = 41;
          *(_BYTE *)(v39 + 3) = HIBYTE(udp_sz);
          *(_BYTE *)(v39 + 4) = udp_sz;
          *(_BYTE *)(v39 + 5) = HIBYTE(v28);
          *(_BYTE *)(v39 + 6) = v28;
          *(_BYTE *)(v39 + 7) = HIBYTE(v47);
          *(_BYTE *)(v39 + 8) = v47;
          v40 = v49;
          *(_BYTE *)(v39 + 9) = BYTE1(v49);
          *(_BYTE *)(v39 + 10) = v40;
          v41 = v27;
          v42 = (char *)(v39 + 11);
          v22 = (char *)(v39 + 11);
          v50 = v39;
          if ( v41 )
          {
            v43 = v40;
            memcpy((void *)(v39 + 11), v41, v40);
            free(v41);
            v22 = &v42[v43];
          }
          src = v42;
          v35 = (_WORD *)(v50 + 9);
          v34 = v53;
          if ( v53 - (unsigned __int8 *)v22 - 4 >= (__int64)optlen )
            header->arcount = __ROL2__(__ROL2__(header->arcount, 8) + 1, 8);
          goto LABEL_36;
        }
      }
      else
      {
        v49 = 0LL;
      }
      v27 = 0LL;
      goto LABEL_29;
    }
  }
  return v13;
}
