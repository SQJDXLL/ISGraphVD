int __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned int udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  size_t v11; // r9
  dns_header *v12; // r8
  unsigned __int8 *pseudoheader; // r0
  int v15; // r3
  char v16; // r5
  unsigned __int8 *v17; // r7
  unsigned int v18; // r12
  unsigned __int8 v19; // lr
  int v20; // r6
  unsigned __int8 *v21; // r10
  dns_header *v22; // r5
  int v23; // r8
  int v24; // r0
  unsigned __int8 *v25; // r9
  int v26; // r2
  int v27; // r7
  int v28; // r0
  void *v29; // r0
  void *v30; // r9
  signed int v31; // r2
  unsigned __int8 *v32; // r0
  bool v33; // zf
  int v34; // r0
  int v35; // r7
  size_t v36; // r10
  int v37; // r9
  int v38; // r4
  int v39; // r0
  int v40; // r0
  _BYTE *v41; // r7
  unsigned __int8 *v42; // r0
  _BYTE *v43; // r7
  __uint16_t v44; // r0
  size_t v45; // [sp+8h] [bp-50h]
  _BYTE *v46; // [sp+Ch] [bp-4Ch]
  char v47; // [sp+Ch] [bp-4Ch]
  char v48; // [sp+14h] [bp-44h]
  char v49; // [sp+14h] [bp-44h]
  char v50; // [sp+18h] [bp-40h]
  unsigned __int8 v51; // [sp+1Ch] [bp-3Ch]
  unsigned __int8 v52; // [sp+20h] [bp-38h]
  void *ptr; // [sp+24h] [bp-34h]
  unsigned __int8 *dest; // [sp+28h] [bp-30h]
  unsigned __int8 *v55; // [sp+2Ch] [bp-2Ch]
  int is_last; // [sp+30h] [bp-28h] BYREF
  int is_sign; // [sp+34h] [bp-24h] BYREF
  unsigned __int8 *udp_len; // [sp+38h] [bp-20h] BYREF

  v11 = plen;
  v12 = header;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  if ( is_sign )
    return v11;
  v55 = limit;
  v15 = optno;
  v16 = set_do;
  if ( set_do )
    v16 = 0x80;
  if ( !pseudoheader )
  {
    v52 = 0;
    v18 = udp_sz >> 8;
    v19 = 0;
    v51 = 0;
    v20 = 0;
    ptr = 0;
    v21 = 0;
    goto LABEL_33;
  }
  v17 = udp_len;
  v51 = udp_len[5];
  v16 = udp_len[4];
  LOBYTE(v18) = *udp_len;
  LOBYTE(udp_sz) = udp_len[1];
  v19 = udp_len[2];
  v52 = udp_len[3];
  if ( set_do )
  {
    v16 |= 0x80u;
    udp_len[4] = v16;
  }
  v20 = v17[7] | (v17[6] << 8);
  v46 = v17 + 6;
  v21 = v17 + 8;
  ptr = 0;
  dest = v17 + 8;
  if ( optno )
  {
    if ( v21 - (unsigned __int8 *)v12 + v20 > v11 )
    {
      v27 = 0;
      v21 = dest;
      v28 = v11;
    }
    else
    {
      v45 = v11;
      v50 = v16;
      v48 = v18;
      v22 = v12;
      if ( (unsigned int)v20 >= 5 )
      {
        v23 = 0;
        v24 = 4;
        v25 = v17 + 8;
        while ( 1 )
        {
          v26 = v25[3] | (v25[2] << 8);
          v21 = v25 + 4;
          if ( v26 + v24 > v20 )
          {
            v20 = 0;
            is_last = 0;
            v25 += 4;
            goto LABEL_23;
          }
          if ( (v25[1] | (*v25 << 8)) == v15 )
          {
            if ( !replace )
            {
              v27 = 0;
              ptr = 0;
LABEL_25:
              v11 = v45;
              v28 = v45;
              v12 = v22;
              goto LABEL_30;
            }
            v20 = v20 - v26 - 4;
            memcpy(v25, &v21[v26], v20 - v23);
            v15 = optno;
            v17[7] = v20;
            v17[6] = BYTE1(v20);
          }
          else
          {
            v25 = &v21[v26];
            v23 += v26 + 4;
          }
          v24 = v23 + 4;
          if ( v23 + 4 >= v20 )
            goto LABEL_23;
        }
      }
      v25 = v17 + 8;
LABEL_23:
      v27 = 1;
      if ( is_last )
      {
        v21 = v25;
        goto LABEL_25;
      }
      v21 = 0;
      v29 = 0;
      if ( v20 )
      {
        v30 = (void *)whine_malloc(v20);
        v29 = 0;
        if ( v30 )
        {
          memcpy(v30, dest, v20);
          v29 = v30;
        }
      }
      ptr = v29;
      v12 = v22;
      v11 = v45;
      v28 = rrfilter(v22, v45, 0);
      v15 = optno;
LABEL_30:
      v16 = v50;
      LOBYTE(v18) = v48;
    }
  }
  else
  {
    v27 = 0;
    v28 = v11;
  }
  if ( v27 )
  {
    v11 = v28;
LABEL_33:
    v31 = optlen;
    if ( !v21 )
    {
      v49 = v18;
      v34 = skip_questions(v12, v11, optlen, v15);
      if ( !v34 )
        return v11;
      v35 = v34;
      v47 = udp_sz;
      v36 = v11;
      v37 = _bswap_16(v12->ancount);
      v38 = _bswap_16(v12->nscount) + v37;
      v11 = v36;
      v39 = _bswap_16(v12->arcount);
      v40 = skip_section(v35, v38 + v39, v12, v36);
      if ( !v40 )
        return v11;
      v41 = (_BYTE *)v40;
      v42 = (unsigned __int8 *)(v40 + 0xB);
      if ( v42 > v55 )
        return v11;
      v41[10] = v20;
      v41[8] = v51;
      v41[7] = v16;
      v41[6] = v52;
      v41[5] = v19;
      LOWORD(dest) = (_WORD)v42;
      v41[4] = v47;
      v41[3] = v49;
      v41[2] = 41;
      v41[1] = 0;
      *v41 = 0;
      v41[9] = BYTE1(v20);
      v43 = v41 + 9;
      v21 = v42;
      if ( ptr )
      {
        v21 = &v42[v20];
        if ( &v42[v20] > v55 )
        {
          free(ptr);
          return v11;
        }
        memcpy(v42, ptr, v20);
        free(ptr);
      }
      v46 = v43;
      if ( v55 - v21 - 4 >= (int)optlen )
      {
        v44 = _bswap_16(v12->arcount);
        v12->arcount = _bswap_16(v44 + 1);
      }
      v15 = optno;
      v31 = optlen;
    }
    v32 = v21 + 4;
    if ( v55 - (v21 + 4) < v31 )
      return v11;
    v33 = v15 == 0;
    if ( v15 )
      v33 = replace == 2;
    if ( !v33 )
    {
      if ( v32 > v55 )
        return v11;
      v21[3] = v31;
      v21[1] = v15;
      v21[2] = BYTE1(v31);
      *v21 = BYTE1(v15);
      v21 = &v32[v31];
      if ( &v32[v31] > v55 )
        return v11;
      memcpy(v32, opt, v31);
      v46[1] = (_BYTE)v21 - (_BYTE)dest;
      *v46 = (unsigned __int16)((_WORD)v21 - (_WORD)dest) >> 8;
    }
    return v21 - (unsigned __int8 *)v12;
  }
  return v11;
}
