size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int a5,
        int a6,
        int a7,
        int t_sa,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  size_t v14; // $s4
  unsigned __int8 *pseudoheader; // $v0
  int v16; // $fp
  unsigned __int8 *v17; // $s2
  unsigned __int8 *v18; // $s2
  __int16 v19; // $a0
  __int16 v20; // $a2
  __int16 v21; // $v1
  unsigned __int16 v22; // $s7
  __int16 v23; // $a1
  int v24; // $s1
  unsigned __int8 *v25; // $s0
  __int16 v26; // $a0
  unsigned __int8 *v27; // $a2
  int v28; // $v1
  int v29; // $a1
  int v30; // $a0
  int v31; // $s3
  int v32; // $a0
  unsigned int v33; // $v1
  _BYTE *v34; // $s2
  void *v35; // $a0
  unsigned __int8 *v36; // $v0
  int v37; // $a0
  _BYTE *v38; // $v0
  _BYTE *v39; // $s1
  _BYTE *v40; // $v0
  unsigned __int8 *p; // [sp+28h] [-18h]
  __int16 t_s_0; // [sp+2Ch] [-14h]
  unsigned __int8 *udp_len; // [sp+30h] [-10h] BYREF
  int is_sign; // [sp+34h] [-Ch] BYREF
  int is_last; // [sp+38h] [-8h] BYREF

  v14 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  v16 = is_sign;
  if ( is_sign )
    return v14;
  v17 = pseudoheader;
  if ( !pseudoheader )
  {
    v22 = (set_do != 0) << 15;
    t_s_0 = 0;
LABEL_37:
    v37 = skip_questions(header, v14);
    if ( !v37 )
      return v14;
    v38 = (_BYTE *)skip_section(
                     v37,
                     (unsigned __int16)((header->ancount << 8) | HIBYTE(header->ancount))
                   + (unsigned __int16)((header->nscount << 8) | HIBYTE(header->nscount))
                   + (unsigned __int16)((header->arcount << 8) | HIBYTE(header->arcount)),
                     header,
                     v14);
    v39 = v38;
    if ( !v38 || limit < v38 + 11 )
      return v14;
    *v38 = 0;
    v38[1] = 0;
    v38[2] = 41;
    v38[3] = HIBYTE(udp_sz);
    v38[4] = udp_sz;
    v38[5] = HIBYTE(t_s_0);
    v38[6] = t_s_0;
    v38[7] = HIBYTE(v22);
    v38[8] = v22;
    v38[9] = BYTE1(v16);
    v38[10] = v16;
    v40 = v38 + 0xB;
    p = v39 + 0xB;
    if ( v17 )
    {
      v25 = &v40[v16];
      if ( limit < &v40[v16] )
      {
        free(v17);
        return v14;
      }
      memcpy(p, v17, v16);
      free(v17);
    }
    else
    {
      v25 = v39 + 0xB;
    }
    v33 = (unsigned int)(v25 + 4);
    if ( limit - (v25 + 4) < (int)optlen )
      return v14;
    v34 = v39 + 9;
    header->arcount = ((((unsigned __int16)(header->arcount << 8) | HIBYTE(header->arcount)) + 1) << 8) | ((unsigned __int16)(((header->arcount << 8) | HIBYTE(header->arcount)) + 1) >> 8);
    if ( !optno )
      return v25 - (unsigned __int8 *)header;
    goto LABEL_23;
  }
  v18 = udp_len;
  v19 = *udp_len;
  v20 = udp_len[1];
  v21 = udp_len[2];
  v22 = _byteswap_ushort(*((_WORD *)udp_len + 2));
  v23 = udp_len[3];
  if ( set_do )
  {
    v22 |= 0x8000u;
    udp_len[4] = HIBYTE(v22);
    v18[5] = v22;
  }
  v24 = (v18[6] << 8) | v18[7];
  v25 = v18 + 8;
  p = v18 + 8;
  if ( v14 < v18 + 8 - (unsigned __int8 *)header + v24 )
    return v14;
  v26 = v19 << 8;
  if ( !optno )
    return v14;
  udp_sz = v26 | v20;
  t_s_0 = (v21 << 8) | v23;
  v27 = v18 + 0xC;
  if ( v24 < 5 )
  {
    v25 = v18 + 8;
    if ( is_last )
    {
      v33 = (unsigned int)(v18 + 0xC);
      goto LABEL_21;
    }
    goto LABEL_27;
  }
  v28 = (v18[8] << 8) | v18[9];
  v29 = (v18[10] << 8) | v18[11];
  v30 = v29;
  if ( v24 < v29 + 4 )
  {
LABEL_10:
    is_last = 0;
    v17 = 0;
LABEL_11:
    v14 = rrfilter(header, v14, 0);
    goto LABEL_37;
  }
  v31 = 0;
  while ( 1 )
  {
    if ( v28 == optno )
    {
      v32 = v30 + 4;
      if ( !replace )
        return v14;
      v24 -= v32;
      memcpy(v25, &v25[v29 + 4], v24 - v31);
      v18[6] = BYTE1(v24);
      v18[7] = v24;
    }
    else
    {
      v25 = &v27[v29];
      v31 += v30 + 4;
    }
    v27 = v25 + 4;
    if ( v31 + 4 >= v24 )
      break;
    v28 = (*v25 << 8) | v25[1];
    v29 = (v25[2] << 8) | v25[3];
    v30 = v29;
    if ( v24 < v29 + v31 + 4 )
      goto LABEL_10;
  }
  if ( !is_last )
  {
LABEL_27:
    if ( v24 )
    {
      v36 = (unsigned __int8 *)whine_malloc(v24);
      v17 = v36;
      if ( v36 )
        memcpy(v36, p, v24);
      v16 = v24;
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    goto LABEL_11;
  }
  v16 = v24;
  if ( !v25 )
  {
    v17 = 0;
    goto LABEL_37;
  }
  v33 = (unsigned int)(v25 + 4);
LABEL_21:
  if ( (int)&limit[-v33] < (int)optlen )
    return v14;
  v34 = v18 + 6;
LABEL_23:
  if ( replace == 2 )
    return v25 - (unsigned __int8 *)header;
  if ( (unsigned int)limit >= v33 )
  {
    *v25 = BYTE1(optno);
    v25[1] = optno;
    v25[2] = BYTE1(optlen);
    v25[3] = optlen;
    v35 = v25 + 4;
    v25 += optlen + 4;
    if ( limit >= v25 )
    {
      memcpy(v35, opt, optlen);
      *v34 = (unsigned __int16)((_WORD)v25 - (_WORD)p) >> 8;
      v34[1] = (_BYTE)v25 - (_BYTE)p;
      return v25 - (unsigned __int8 *)header;
    }
  }
  return v14;
}
