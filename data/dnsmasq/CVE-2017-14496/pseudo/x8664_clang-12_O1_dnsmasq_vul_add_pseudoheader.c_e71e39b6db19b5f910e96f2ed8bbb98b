size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned int v11; // ebx
  size_t v13; // r14
  dns_header *v14; // r12
  unsigned __int8 *pseudoheader; // rax
  unsigned __int8 *v16; // rdx
  __int16 v17; // r11
  __int64 v19; // r8
  unsigned __int64 v20; // rbx
  __int16 v21; // di
  unsigned __int8 *v22; // rdx
  __int16 v23; // ax
  unsigned int v24; // r10d
  __int64 v25; // rcx
  __int64 v26; // r9
  int v27; // r13d
  unsigned __int16 *v28; // r12
  unsigned __int64 v29; // rax
  unsigned __int16 *v30; // rbp
  int v31; // edi
  unsigned __int8 *v32; // r15
  __int16 v33; // di
  void *v34; // r9
  __int16 v35; // cx
  char v36; // r13
  __int64 v37; // rax
  __int16 v38; // cx
  void *v39; // rax
  __int64 v40; // rsi
  unsigned __int16 *v41; // rax
  __int16 v42; // bx
  unsigned __int8 *v43; // r14
  __int64 v44; // rax
  __int64 v45; // r15
  int v46; // r13d
  int v47; // ebp
  __uint16_t v48; // ax
  __int64 v49; // rax
  _BYTE *v50; // rdx
  int v51; // eax
  unsigned __int16 *v52; // rbx
  __int64 v53; // rbx
  _BYTE *v54; // r15
  _BYTE *v55; // r13
  unsigned __int8 *v56; // r15
  __int16 v57; // bx
  __uint16_t v58; // ax
  __uint16_t v59; // ax
  int v60; // [rsp+0h] [rbp-88h]
  __int16 v61; // [rsp+4h] [rbp-84h]
  __int16 v62; // [rsp+4h] [rbp-84h]
  __int16 v63; // [rsp+8h] [rbp-80h]
  __int16 v64; // [rsp+8h] [rbp-80h]
  __int16 v65; // [rsp+Ch] [rbp-7Ch]
  void *ptr; // [rsp+10h] [rbp-78h]
  void *ptra; // [rsp+10h] [rbp-78h]
  dns_header *v68; // [rsp+18h] [rbp-70h]
  int is_last; // [rsp+24h] [rbp-64h] BYREF
  void *src; // [rsp+28h] [rbp-60h]
  unsigned __int8 *v71; // [rsp+30h] [rbp-58h]
  int is_sign; // [rsp+3Ch] [rbp-4Ch] BYREF
  unsigned __int8 *v73; // [rsp+40h] [rbp-48h]
  void *v74; // [rsp+48h] [rbp-40h]
  unsigned __int8 *v75; // [rsp+50h] [rbp-38h] BYREF

  v11 = udp_sz;
  v13 = plen;
  v14 = header;
  pseudoheader = find_pseudoheader(header, plen, 0LL, &v75, &is_sign, &is_last);
  if ( is_sign )
    return v13;
  v19 = v11;
  LODWORD(v20) = 0;
  v60 = optno;
  HIBYTE(v21) = 0;
  LOBYTE(v16) = set_do != 0;
  v74 = opt;
  if ( pseudoheader )
  {
    v22 = v75;
    v23 = __ROL2__(*((_WORD *)v75 + 2), 8);
    v24 = optno;
    v71 = limit;
    if ( set_do )
    {
      v23 |= 0x8000u;
      v75[4] = HIBYTE(v23);
    }
    v25 = *(unsigned __int16 *)v22;
    v63 = *((_WORD *)v22 + 1);
    v20 = _byteswap_uint64((unsigned __int64)*((unsigned __int16 *)v22 + 3) << 48);
    v26 = 0LL;
    v65 = v23;
    if ( !optno || v20 + v22 + 8 - (unsigned __int8 *)v14 > plen )
      return v13;
    v61 = *(_WORD *)v22;
    src = v22 + 8;
    v68 = v14;
    if ( (unsigned int)v20 >= 5 )
    {
      v27 = 0;
      v28 = (unsigned __int16 *)(v22 + 8);
      while ( 1 )
      {
        v29 = _byteswap_uint64((unsigned __int64)v28[1] << 48);
        v30 = v28 + 2;
        v25 = (unsigned int)(v29 + v27);
        if ( (int)v25 > (int)v20 )
        {
          is_last = 0;
          LODWORD(v20) = 0;
          v28 += 2;
          goto LABEL_20;
        }
        v31 = v20;
        plen = v24;
        if ( _byteswap_ulong(*v28 << 16) == v24 )
        {
          if ( !replace )
          {
            v36 = 0;
            v34 = 0LL;
            v37 = v13;
LABEL_22:
            v38 = v61;
            v17 = (__int16)src;
            v14 = v68;
            if ( v36 )
              goto LABEL_31;
            return v13;
          }
          LODWORD(v20) = v20 - v29 - 4;
          v32 = v22;
          plen = (size_t)v30 + v29;
          memcpy(v28, (char *)v30 + v29, v31 - (int)v29 - 4 - v27);
          v22 = v32;
          v24 = v60;
          *((_WORD *)v32 + 3) = __ROL2__(v20, 8);
        }
        else
        {
          v25 = (unsigned int)v29;
          v27 += v29 + 4;
          v28 = (unsigned __int16 *)((char *)v30 + (unsigned int)v29);
        }
        if ( v27 + 4 >= (int)v20 )
          goto LABEL_20;
      }
    }
    v28 = (unsigned __int16 *)(v22 + 8);
LABEL_20:
    v36 = 1;
    if ( is_last )
    {
      v34 = 0LL;
      v30 = v28;
      v37 = v13;
      goto LABEL_22;
    }
    v73 = v22;
    if ( (_DWORD)v20 )
    {
      v39 = (void *)whine_malloc((int)v20, plen, v22, v25, v19, v26);
      if ( v39 )
      {
        ptr = v39;
        memcpy(v39, src, (int)v20);
      }
      else
      {
        ptr = 0LL;
      }
    }
    else
    {
      ptr = 0LL;
    }
    v14 = v68;
    v30 = 0LL;
    v37 = rrfilter(v68, v13, 0LL, v25, v19, v26);
    v24 = v60;
    v22 = v73;
    v38 = v61;
    v34 = ptr;
    v17 = (__int16)src;
LABEL_31:
    v35 = __ROL2__(v38, 8);
    v64 = __ROL2__(v63, 8);
    v16 = v22 + 6;
    v13 = v37;
    limit = v71;
    v33 = v65;
  }
  else
  {
    LOBYTE(v21) = set_do != 0;
    v33 = v21 << 15;
    v64 = 0;
    v34 = 0LL;
    v30 = 0LL;
    v24 = v60;
    v35 = v19;
  }
  v40 = optlen;
  if ( !v30 )
  {
    ptra = v34;
    v62 = v35;
    v44 = skip_questions(v14, v13, v16);
    if ( !v44 )
      return v13;
    v45 = v44;
    v71 = limit;
    v46 = _bswap_16(v14->ancount);
    v47 = v46 + _bswap_16(v14->nscount);
    v48 = _bswap_16(v14->arcount);
    v49 = skip_section(v45, v47 + (unsigned int)v48, v14, v13);
    if ( !v49 )
      return v13;
    v50 = (_BYTE *)v49;
    *(_WORD *)v49 = 0;
    *(_BYTE *)(v49 + 2) = 41;
    *(_BYTE *)(v49 + 3) = HIBYTE(v62);
    *(_BYTE *)(v49 + 4) = v62;
    *(_BYTE *)(v49 + 5) = HIBYTE(v64);
    *(_BYTE *)(v49 + 6) = v64;
    *(_BYTE *)(v49 + 7) = HIBYTE(v33);
    *(_BYTE *)(v49 + 8) = v33;
    v51 = v20;
    v50[9] = BYTE1(v20);
    v50[10] = v20;
    v17 = (_WORD)v50 + 11;
    v52 = (unsigned __int16 *)(v50 + 11);
    if ( ptra )
    {
      v53 = v51;
      v54 = v50;
      v55 = v50 + 11;
      memcpy(v50 + 11, ptra, v51);
      free(ptra);
      v17 = (__int16)v55;
      v50 = v54;
      v52 = (unsigned __int16 *)&v55[v53];
    }
    v16 = v50 + 9;
    limit = v71;
    v30 = v52;
    if ( v71 - (unsigned __int8 *)v52 - 4 >= (__int64)optlen )
    {
      v56 = v16;
      v57 = v17;
      v58 = _bswap_16(v14->arcount);
      v59 = _bswap_16(v58 + 1);
      v17 = v57;
      v16 = v56;
      v14->arcount = v59;
    }
    v24 = v60;
    v40 = optlen;
  }
  if ( limit - (unsigned __int8 *)(v30 + 2) >= v40 )
  {
    v41 = v30;
    if ( v24 && replace != 2 )
    {
      *(_BYTE *)v30 = BYTE1(v24);
      *((_BYTE *)v30 + 1) = v24;
      *((_BYTE *)v30 + 2) = BYTE1(v40);
      *((_BYTE *)v30 + 3) = v40;
      v42 = v17;
      v43 = v16;
      memcpy(v30 + 2, v74, v40);
      *(_WORD *)v43 = __ROL2__(v40 + (_WORD)v30 + 4 - v42, 8);
      v41 = (unsigned __int16 *)((char *)v30 + v40 + 4);
    }
    return (char *)v41 - (char *)v14;
  }
  return v13;
}
