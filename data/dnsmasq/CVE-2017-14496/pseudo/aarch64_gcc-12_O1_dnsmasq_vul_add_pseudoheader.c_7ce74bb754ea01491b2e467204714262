size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int64 v10; // x24
  unsigned __int8 *pseudoheader; // x0
  int v15; // w26
  unsigned __int8 *v16; // x19
  unsigned __int8 *v17; // x22
  __int16 v18; // w27
  __int16 v19; // w4
  __int16 v20; // w3
  __int16 v21; // w2
  unsigned __int16 v22; // w0
  int v23; // w20
  _BYTE *v24; // x28
  unsigned __int64 v25; // x0
  bool v26; // cc
  int v28; // w0
  int v29; // w1
  unsigned __int8 *v30; // x4
  int v31; // w2
  int v32; // w21
  char *v33; // x21
  _BYTE *v34; // x22
  bool v35; // zf
  __int16 v36; // w28
  __int64 v37; // x0
  _BYTE *v38; // x0
  _BYTE *v39; // x22
  unsigned __int8 *v40; // x0
  __int16 t_s; // [xsp+78h] [xbp+78h]
  __int16 t_s_0; // [xsp+7Ch] [xbp+7Ch]
  int is_sign; // [xsp+88h] [xbp+88h] BYREF
  int is_last; // [xsp+8Ch] [xbp+8Ch] BYREF
  unsigned __int8 *udp_len; // [xsp+90h] [xbp+90h] BYREF

  v10 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0uLL, &udp_len, &is_sign, &is_last);
  v15 = is_sign;
  if ( is_sign )
    return v10;
  v16 = pseudoheader;
  if ( pseudoheader )
  {
    v17 = udp_len;
    v18 = *udp_len;
    v19 = udp_len[1];
    v20 = udp_len[2];
    v21 = udp_len[3];
    v22 = _byteswap_ushort(*((_WORD *)udp_len + 2));
    if ( set_do )
    {
      t_s = v22 | 0x8000;
      udp_len[4] = (unsigned __int16)(v22 | 0x8000) >> 8;
      v17[5] = v22;
    }
    else
    {
      t_s = v22;
    }
    v23 = v17[7] | (v17[6] << 8);
    LOWORD(v24) = (_WORD)v17 + 8;
    v25 = v17 + 8 - (unsigned __int8 *)header + _byteswap_ushort(*((_WORD *)v17 + 3));
    if ( optno )
      v26 = v25 > v10;
    else
      v26 = 1;
    if ( v26 )
      return v10;
    udp_sz = v19 | (v18 << 8);
    t_s_0 = v21 | (v20 << 8);
    if ( v23 <= 4 )
    {
      v16 = v17 + 8;
      if ( is_last )
        goto LABEL_25;
    }
    else
    {
      v28 = v17[9] | (v17[8] << 8);
      v29 = v17[11] | (v17[10] << 8);
      v30 = v17 + 0xC;
      v31 = v29;
      if ( v23 < v29 )
      {
LABEL_15:
        is_last = 0;
        v16 = 0LL;
LABEL_16:
        v10 = rrfilter(header, v10, 0LL);
        goto LABEL_42;
      }
      v32 = 0;
      v16 = v17 + 8;
      while ( 1 )
      {
        if ( v28 == optno )
        {
          if ( !replace )
            return v10;
          v23 -= v31 + 4;
          memcpy(v16, &v16[v29 + 4], v23 - v32);
          v17[6] = BYTE1(v23);
          v17[7] = v23;
        }
        else
        {
          v16 = &v30[(unsigned __int16)v29];
          v32 += v31 + 4;
        }
        if ( v32 + 4 >= v23 )
          break;
        v28 = v16[1] | (*v16 << 8);
        v29 = v16[3] | (v16[2] << 8);
        v30 = v16 + 4;
        v31 = v29;
        if ( v29 + v32 > v23 )
          goto LABEL_15;
      }
      if ( is_last )
      {
        if ( v16 )
        {
LABEL_25:
          v33 = (char *)(v16 + 4);
          if ( limit - (v16 + 4) < (__int64)optlen )
            return v10;
          v34 = v17 + 6;
          goto LABEL_27;
        }
        v15 = v23;
        goto LABEL_42;
      }
    }
    if ( v23 )
    {
      v40 = (unsigned __int8 *)whine_malloc(v23);
      v16 = v40;
      v15 = v23;
      if ( v40 )
        memcpy(v40, v17 + 8, v23);
    }
    else
    {
      v15 = 0;
      v16 = 0LL;
    }
    goto LABEL_16;
  }
  t_s = (set_do != 0) << 15;
  t_s_0 = 0;
LABEL_42:
  v37 = skip_questions(header, v10);
  if ( v37 )
  {
    v38 = (_BYTE *)skip_section(
                     v37,
                     (unsigned __int16)__rev16(header->nscount)
                   + (unsigned __int16)__rev16(header->ancount)
                   + (unsigned int)(unsigned __int16)__rev16(header->arcount),
                     header,
                     v10);
    v39 = v38;
    if ( v38 )
    {
      *v38 = 0;
      v38[1] = 0;
      v38[2] = 41;
      v38[3] = HIBYTE(udp_sz);
      v38[4] = udp_sz;
      v38[5] = HIBYTE(t_s_0);
      v38[6] = t_s_0;
      v38[7] = HIBYTE(t_s);
      v38[8] = t_s;
      v38[9] = BYTE1(v15);
      v38[10] = v15;
      v24 = v38 + 0xB;
      if ( v16 )
      {
        memcpy(v38 + 0xB, v16, v15);
        free(v16);
        v16 = &v24[v15];
      }
      else
      {
        v16 = v38 + 0xB;
      }
      v33 = (char *)(v16 + 4);
      if ( limit - (v16 + 4) >= (__int64)optlen )
      {
        v34 = v39 + 9;
        header->arcount = __rev16((unsigned __int16)__rev16(header->arcount) + 1);
LABEL_27:
        if ( optno )
          v35 = replace == 2;
        else
          v35 = 1;
        if ( !v35 )
        {
          *v16 = BYTE1(optno);
          v16[1] = optno;
          v16[2] = BYTE1(optlen);
          v16[3] = optlen;
          memcpy(v33, opt, optlen);
          v16 = (unsigned __int8 *)&v33[optlen];
          v36 = (_WORD)v33 + optlen - (_WORD)v24;
          *v34 = HIBYTE(v36);
          v34[1] = v36;
        }
        return v16 - (unsigned __int8 *)header;
      }
    }
  }
  return v10;
}
