size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int a5,
        int a6,
        int a7,
        int a8,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int8 *pseudoheader; // $v0
  size_t v16; // $s2
  int v17; // $t0
  unsigned __int8 *v18; // $s0
  unsigned __int8 *v19; // $s0
  unsigned __int16 v20; // $s4
  char *v21; // $s5
  int v22; // $s7
  int v23; // $t0
  unsigned __int8 *v24; // $fp
  _WORD *v25; // $s0
  unsigned __int8 *v26; // $v0
  int v27; // $a1
  int v28; // $a0
  int v29; // $v0
  int v30; // $v1
  int v31; // $a1
  int v32; // $a1
  unsigned __int8 *v33; // $a0
  int v35; // [sp+20h] [-20h]
  unsigned __int16 rcode; // [sp+22h] [-1Eh]
  int i; // [sp+2Ch] [-14h]
  int ia; // [sp+2Ch] [-14h]
  unsigned __int8 *udp_len; // [sp+30h] [-10h] BYREF
  int is_sign; // [sp+34h] [-Ch] BYREF
  int is_last; // [sp+38h] [-8h] BYREF

  v16 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  v17 = is_sign;
  if ( is_sign )
    return v16;
  v18 = pseudoheader;
  if ( pseudoheader )
  {
    v19 = udp_len;
    udp_sz = _byteswap_ushort(*(_WORD *)udp_len);
    rcode = _byteswap_ushort(*((_WORD *)udp_len + 1));
    v20 = _byteswap_ushort(*((_WORD *)udp_len + 2));
    if ( set_do )
    {
      v20 |= 0x8000u;
      udp_len[4] = HIBYTE(v20);
      v19[5] = v20;
    }
    v21 = (char *)(v19 + 8);
    v22 = v19[7] | (v19[6] << 8);
    if ( v16 < v19 + 8 - (unsigned __int8 *)header + v22 )
      return v16;
    v23 = 0;
    if ( !optno )
      return v16;
    v24 = v19 + 8;
    while ( v23 + 4 < v22 )
    {
      v27 = v24[3] | (v24[2] << 8);
      if ( v22 < v27 + v23 + 4 )
      {
        is_last = 0;
LABEL_15:
        v22 = 0;
        v18 = 0;
        goto LABEL_16;
      }
      if ( (v24[1] | (*v24 << 8)) == optno )
      {
        v31 = v27 + 4;
        if ( !replace )
          return v16;
        v22 -= v31;
        ia = v23;
        memcpy(v24, &v24[v31], v22 - v23);
        v23 = ia;
        *((_WORD *)v19 + 3) = v22;
      }
      else
      {
        v32 = v27 + 4;
        v24 += v32;
        v23 += v32;
      }
    }
    v25 = v19 + 6;
    if ( is_last )
      goto LABEL_28;
    if ( !v22 )
      goto LABEL_15;
    v26 = (unsigned __int8 *)whine_malloc(v22);
    v18 = v26;
    if ( v26 )
      memcpy(v26, v21, v22);
LABEL_16:
    v16 = rrfilter(header, v16, 0);
    v17 = v22;
  }
  else
  {
    rcode = 0;
    v20 = (set_do != 0) << 15;
  }
  i = v17;
  v28 = skip_questions(header, v16);
  if ( v28 )
  {
    v29 = skip_section(v28, header->ancount + header->nscount + header->arcount, header, v16);
    v30 = v29;
    if ( v29 )
    {
      v21 = (char *)(v29 + 0xB);
      if ( (unsigned int)limit >= v29 + 0xB )
      {
        *(_BYTE *)v29 = 0;
        *(_WORD *)(v29 + 1) = 41;
        *(_BYTE *)(v29 + 3) = HIBYTE(udp_sz);
        *(_BYTE *)(v29 + 8) = v20;
        *(_BYTE *)(v29 + 4) = udp_sz;
        *(_BYTE *)(v29 + 10) = i;
        *(_WORD *)(v29 + 5) = rcode;
        *(_BYTE *)(v29 + 7) = HIBYTE(v20);
        *(_BYTE *)(v29 + 9) = BYTE2(i);
        if ( v18 )
        {
          v24 = (unsigned __int8 *)&v21[i];
          if ( limit < (unsigned __int8 *)&v21[i] )
          {
            free(v18);
            return v16;
          }
          v35 = v29;
          memcpy(v21, v18, i);
          free(v18);
          v30 = v35;
        }
        else
        {
          v24 = (unsigned __int8 *)(v29 + 0xB);
        }
        if ( limit - (v24 + 4) >= (int)optlen )
          ++header->arcount;
        v25 = (_WORD *)(v30 + 9);
LABEL_28:
        v33 = v24 + 4;
        if ( limit - (v24 + 4) >= (int)optlen )
        {
          if ( !optno || replace == 2 )
            return v24 - (unsigned __int8 *)header;
          if ( limit >= v33 )
          {
            v24[3] = optlen;
            *(_WORD *)v24 = optno;
            v24[2] = BYTE2(optlen);
            v24 = &v33[optlen];
            if ( limit >= &v33[optlen] )
            {
              memcpy(v33, opt, optlen);
              *v25 = (_WORD)v24 - (_WORD)v21;
              return v24 - (unsigned __int8 *)header;
            }
          }
        }
      }
    }
  }
  return v16;
}
