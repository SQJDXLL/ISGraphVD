size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned int v9; // r9
  unsigned int v11; // r10
  unsigned __int8 *pseudoheader; // r0
  int v15; // r11
  int v16; // r5
  char v17; // r6
  unsigned __int8 *v18; // r6
  unsigned __int8 v19; // r2
  unsigned __int8 *v20; // r10
  int v21; // r7
  int v22; // r11
  int v23; // r0
  unsigned __int8 *v24; // r2
  unsigned __int8 *v25; // r3
  unsigned int v26; // r5
  void *v27; // r0
  void *v28; // r10
  int v29; // r0
  _BYTE *v30; // r0
  _BYTE *v31; // r4
  unsigned int v32; // r0
  unsigned __int8 *v33; // r6
  bool v34; // zf
  __int16 v35; // r0
  unsigned __int8 v36; // [sp+8h] [bp-58h]
  unsigned __int8 v37; // [sp+Ch] [bp-54h]
  unsigned __int8 v38; // [sp+10h] [bp-50h]
  _BYTE *v39; // [sp+14h] [bp-4Ch]
  void *src; // [sp+18h] [bp-48h]
  void *v41; // [sp+1Ch] [bp-44h]
  unsigned __int8 v42; // [sp+20h] [bp-40h]
  unsigned __int8 v43; // [sp+24h] [bp-3Ch]
  unsigned __int8 v44; // [sp+28h] [bp-38h]
  unsigned __int8 *v45; // [sp+2Ch] [bp-34h]
  int v46; // [sp+30h] [bp-30h] BYREF
  int v47; // [sp+34h] [bp-2Ch] BYREF
  unsigned __int8 *v48; // [sp+38h] [bp-28h] BYREF

  v9 = plen;
  v11 = udp_sz;
  pseudoheader = find_pseudoheader(header, plen, 0u, &v48, &v47, &v46);
  if ( v47 )
    return v9;
  v15 = optlen;
  v16 = optno;
  v17 = set_do;
  if ( set_do )
    v17 = 0x80;
  if ( !pseudoheader )
  {
    v45 = limit;
    v26 = v11 >> 8;
    v21 = 0;
    v41 = 0;
    v44 = 0;
    v43 = 0;
    v42 = 0;
    goto LABEL_29;
  }
  v18 = v48;
  if ( set_do )
    LOBYTE(pseudoheader) = 0x80;
  v19 = v48[4];
  if ( set_do )
  {
    v19 |= (unsigned __int8)pseudoheader;
    v48[4] = v19;
  }
  if ( optno )
  {
    v45 = limit;
    v20 = v18 + 8;
    v21 = v18[7] | (v18[6] << 8);
    if ( v18 + 8 - (unsigned __int8 *)header + v21 <= v9 )
    {
      v39 = v18 + 6;
      v37 = v19;
      src = v18 + 8;
      v44 = v18[5];
      v36 = *v18;
      v38 = v18[1];
      v43 = v18[2];
      v42 = v18[3];
      if ( (unsigned int)v21 < 5 )
      {
LABEL_20:
        if ( v46 )
        {
          v15 = optlen;
          v25 = limit;
LABEL_36:
          v33 = v20 + 4;
          if ( v25 - (v20 + 4) >= v15 )
          {
            v34 = v16 == 0;
            if ( v16 )
              v34 = replace == 2;
            if ( !v34 )
            {
              v20[3] = v15;
              v20[1] = v16;
              v20[2] = BYTE1(v15);
              *v20 = BYTE1(v16);
              memcpy(v20 + 4, opt, v15);
              v20 = &v33[v15];
              v35 = (_WORD)v33 + v15 - (_WORD)src;
              v39[1] = v35;
              *v39 = HIBYTE(v35);
            }
            return v20 - (unsigned __int8 *)header;
          }
          return v9;
        }
        v41 = 0;
        if ( v21 )
        {
          v27 = (void *)whine_malloc(v21);
          if ( v27 )
          {
            v28 = v27;
            memcpy(v27, src, v21);
            v41 = v28;
          }
        }
        else
        {
          v21 = 0;
        }
      }
      else
      {
        v22 = 0;
        while ( 1 )
        {
          v23 = v20[3] | (v20[2] << 8);
          if ( v23 + v22 > v21 )
            break;
          v24 = v20 + 4;
          if ( (v20[1] | (*v20 << 8)) == v16 )
          {
            if ( !replace )
              return v9;
            v21 = v21 - v23 - 4;
            memcpy(v20, &v24[v23], v21 - v22);
            v16 = optno;
            v18[7] = v21;
            v18[6] = BYTE1(v21);
          }
          else
          {
            v20 = &v24[v23];
            v22 += v23 + 4;
          }
          if ( v22 + 4 >= v21 )
            goto LABEL_20;
        }
        v21 = 0;
        v46 = 0;
        v41 = 0;
      }
      v15 = optlen;
      LOBYTE(v26) = v36;
      v17 = v37;
      LOBYTE(v11) = v38;
      v9 = rrfilter(header, v9, 0);
LABEL_29:
      v29 = skip_questions(header, v9);
      if ( !v29 )
        return v9;
      v30 = (_BYTE *)skip_section(
                       v29,
                       ((unsigned int)((header->nscount << 8) & 0xFF0000 | (header->nscount << 24)) >> 16)
                     + ((unsigned int)((header->ancount << 8) & 0xFF0000 | (header->ancount << 24)) >> 0x10)
                     + ((unsigned int)((header->arcount << 8) & 0xFF0000 | (header->arcount << 24)) >> 0x10),
                       header,
                       v9);
      if ( !v30 )
        return v9;
      v30[3] = v26;
      v31 = v30 + 0xB;
      v30[4] = v11;
      v30[10] = v21;
      v30[7] = v17;
      v20 = v30 + 0xB;
      v30[8] = v44;
      v30[6] = v42;
      v30[5] = v43;
      v30[2] = 41;
      v30[1] = 0;
      *v30 = 0;
      v30[9] = BYTE1(v21);
      v39 = v30 + 9;
      if ( v41 )
      {
        memcpy(v30 + 0xB, v41, v21);
        free(v41);
        v20 = &v31[v21];
      }
      v25 = v45;
      LOWORD(src) = (_WORD)v31;
      if ( v45 - v20 - 4 >= v15 )
      {
        v32 = ((unsigned int)((header->arcount << 8) & 0xFF0000 | (header->arcount << 24)) >> 0x10) + 1;
        header->arcount = ((v32 << 8) & 0xFF0000 | (v32 << 24)) >> 16;
      }
      v16 = optno;
      goto LABEL_36;
    }
  }
  return v9;
}
