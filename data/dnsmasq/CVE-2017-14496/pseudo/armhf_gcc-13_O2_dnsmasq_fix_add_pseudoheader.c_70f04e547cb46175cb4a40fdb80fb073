size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  int v9; // r9
  unsigned int v11; // r4
  unsigned __int8 *pseudoheader; // r0
  int v13; // r10
  unsigned __int8 *v14; // r7
  unsigned __int8 *v15; // r3
  unsigned int v16; // r2
  unsigned __int8 *v17; // r5
  unsigned int v18; // r2
  int v19; // r7
  unsigned int v20; // r2
  signed int v21; // r11
  unsigned int v22; // r1
  unsigned int v23; // r0
  int v24; // r2
  int v25; // r1
  unsigned __int8 *v26; // r0
  unsigned __int8 *v27; // r9
  unsigned int v28; // r12
  unsigned int v29; // r0
  int v30; // r2
  unsigned __int8 *v31; // r0
  _BYTE *v32; // r5
  bool v33; // zf
  __int16 v35; // r5
  int v36; // r11
  int v37; // r0
  _BYTE *v38; // r3
  _BYTE *v39; // r1
  unsigned __int16 v40; // r3
  unsigned __int8 *v41; // r0
  void *dest; // [sp+10h] [bp-48h]
  unsigned int v44; // [sp+14h] [bp-44h]
  _BYTE *v45; // [sp+14h] [bp-44h]
  unsigned int v46; // [sp+18h] [bp-40h]
  __int16 v47; // [sp+1Ch] [bp-3Ch]
  unsigned __int8 *udp_len; // [sp+20h] [bp-38h] BYREF
  int is_sign; // [sp+24h] [bp-34h] BYREF
  int is_last; // [sp+28h] [bp-30h] BYREF

  LOWORD(v9) = udp_sz;
  v11 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  v13 = is_sign;
  if ( is_sign )
    return v11;
  v14 = pseudoheader;
  if ( !pseudoheader )
  {
    v35 = set_do;
    if ( set_do )
      v35 = 1;
    LOWORD(v17) = v35 << 15;
    LOWORD(v36) = 0;
    goto LABEL_33;
  }
  v15 = udp_len;
  v16 = udp_len[4] | (udp_len[5] << 8);
  v44 = *udp_len | (udp_len[1] << 8);
  v17 = (unsigned __int8 *)(unsigned __int16)((v16 >> 8) | ((_WORD)v16 << 8));
  v46 = udp_len[2] | (udp_len[3] << 8);
  if ( set_do )
  {
    v18 = ~((unsigned int)~((_DWORD)v17 << 17) >> 17) << 16;
    LOWORD(v17) = ~((unsigned int)~((_DWORD)v17 << 17) >> 17);
    udp_len[4] = HIBYTE(v18);
    v15[5] = (unsigned __int8)v17;
  }
  v19 = optno == 0;
  v20 = v15[6] | (v15[7] << 8);
  v21 = (unsigned __int16)((v20 >> 8) | ((_WORD)v20 << 8));
  dest = v15 + 8;
  if ( v15 + 8 - (unsigned __int8 *)header + v21 > v11 )
    v19 = 1;
  if ( v19 )
    return v11;
  if ( (unsigned __int16)((v20 >> 8) | ((_WORD)v20 << 8)) <= 4u )
  {
    v27 = v15 + 8;
  }
  else
  {
    v22 = v15[10] | (v15[11] << 8);
    v23 = v15[8] | (v15[9] << 8);
    v24 = (unsigned __int16)((v22 >> 8) | ((_WORD)v22 << 8));
    v25 = (unsigned __int16)((v23 >> 8) | ((_WORD)v23 << 8));
    v26 = v15 + 0xC;
    if ( v21 < v24 + 4 )
    {
LABEL_41:
      is_last = 0;
      goto LABEL_42;
    }
    v47 = (__int16)v17;
    v27 = v15 + 8;
    v17 = v15;
    while ( 1 )
    {
      if ( v25 == optno )
      {
        if ( !replace )
          return v11;
        v30 = v24 + 4;
        v21 -= v30;
        memcpy(v27, &v27[v30], v21 - v19);
        v17[7] = v21;
        v17[6] = (unsigned int)(v21 << 16) >> 24;
      }
      else
      {
        v27 = &v26[v24];
        v19 += v24 + 4;
      }
      if ( v19 + 4 >= v21 )
        break;
      v28 = v27[2] | (v27[3] << 8);
      v29 = *v27 | (v27[1] << 8);
      v24 = (unsigned __int16)((v28 >> 8) | ((_WORD)v28 << 8));
      v25 = (unsigned __int16)((v29 >> 8) | ((_WORD)v29 << 8));
      v26 = v27 + 4;
      if ( v24 + v19 + 4 > v21 )
      {
        LOWORD(v17) = v47;
        goto LABEL_41;
      }
    }
    v15 = v17;
    LOWORD(v17) = v47;
  }
  if ( is_last )
  {
    v31 = v27 + 4;
    if ( limit - (v27 + 4) >= (int)optlen )
    {
      v32 = v15 + 6;
      goto LABEL_23;
    }
    return v11;
  }
  if ( v21 )
  {
    v41 = (unsigned __int8 *)whine_malloc(v21);
    v14 = v41;
    if ( v41 )
      memcpy(v41, dest, v21);
    v13 = v21;
    goto LABEL_43;
  }
LABEL_42:
  v14 = 0;
LABEL_43:
  v9 = (v44 >> 8) | (v44 << 8);
  v36 = (v46 >> 8) | (v46 << 8);
  v11 = rrfilter(header, v11, 0);
LABEL_33:
  v37 = skip_questions(header, v11);
  if ( !v37 )
    return v11;
  v38 = (_BYTE *)skip_section(
                   v37,
                   (unsigned __int16)(HIBYTE(header->ancount) | (header->ancount << 8))
                 + (unsigned __int16)(HIBYTE(header->nscount) | (header->nscount << 8))
                 + (unsigned __int16)(HIBYTE(header->arcount) | (header->arcount << 8)),
                   header,
                   v11);
  if ( !v38 )
    return v11;
  v39 = v38 + 0xB;
  dest = v38 + 0xB;
  if ( v38 + 0xB > limit )
    return v11;
  v38[9] = (unsigned int)(v13 << 16) >> 24;
  v38[4] = v9;
  v38[6] = v36;
  v38[8] = (_BYTE)v17;
  *v38 = 0;
  v38[1] = 0;
  v38[3] = BYTE1(v9);
  v38[5] = BYTE1(v36);
  v38[7] = BYTE1(v17);
  v38[10] = v13;
  v38[2] = 41;
  if ( v14 )
  {
    v27 = &v39[v13];
    if ( &v39[v13] > limit )
    {
      free(v14);
      return v11;
    }
    v45 = v38;
    memcpy(dest, v14, v13);
    free(v14);
    v38 = v45;
  }
  else
  {
    v27 = v38 + 0xB;
  }
  v31 = v27 + 4;
  if ( limit - (v27 + 4) >= (int)optlen )
  {
    v32 = v38 + 9;
    v40 = (HIBYTE(header->arcount) | (header->arcount << 8)) + 1;
    header->arcount = HIBYTE(v40) | (v40 << 8);
LABEL_23:
    v33 = optno == 0;
    if ( optno )
      v33 = replace == 2;
    if ( !v33 )
    {
      if ( limit < v31 )
        return v11;
      v27[1] = optno;
      v27[3] = optlen;
      v27[2] = optlen << 16 >> 24;
      *v27 = (unsigned int)(optno << 16) >> 24;
      v27 = &v31[optlen];
      if ( &v31[optlen] > limit )
        return v11;
      memcpy(v31, opt, optlen);
      *v32 = (unsigned int)((v27 - (_BYTE *)dest) << 16) >> 24;
      v32[1] = (_BYTE)v27 - (_BYTE)dest;
    }
    return v27 - (unsigned __int8 *)header;
  }
  return v11;
}
