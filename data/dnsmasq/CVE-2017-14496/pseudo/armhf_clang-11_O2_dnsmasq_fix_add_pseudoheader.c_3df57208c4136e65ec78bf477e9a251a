size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned int v9; // r9
  unsigned int v11; // r10
  void *v13; // r11
  unsigned __int8 *pseudoheader; // r0
  int v16; // r4
  char v17; // r5
  unsigned __int8 *v18; // r7
  unsigned __int8 v19; // r3
  unsigned __int8 v20; // r12
  unsigned __int8 v21; // lr
  unsigned __int8 v22; // r10
  unsigned __int8 v23; // r5
  unsigned __int8 v24; // r2
  _BYTE *v25; // r11
  int v26; // r6
  int v27; // r5
  int v28; // r0
  unsigned __int8 *v29; // r10
  int v30; // r2
  unsigned __int8 *v31; // r0
  int v32; // r2
  void *v33; // r0
  void *v34; // r7
  int v35; // r0
  _BYTE *v36; // r0
  char *v37; // r1
  __int16 v38; // r4
  unsigned int v39; // r0
  unsigned __int8 *v40; // r0
  bool v41; // zf
  unsigned __int8 v42; // [sp+8h] [bp-50h]
  unsigned __int8 v43; // [sp+Ch] [bp-4Ch]
  void *src; // [sp+10h] [bp-48h]
  unsigned __int8 v45; // [sp+14h] [bp-44h]
  unsigned __int8 v46; // [sp+18h] [bp-40h]
  unsigned __int8 v47; // [sp+1Ch] [bp-3Ch]
  unsigned int v48; // [sp+20h] [bp-38h]
  unsigned __int8 *ptr; // [sp+24h] [bp-34h]
  void *ptra; // [sp+24h] [bp-34h]
  int v51; // [sp+28h] [bp-30h] BYREF
  int v52; // [sp+2Ch] [bp-2Ch] BYREF
  unsigned __int8 *v53; // [sp+30h] [bp-28h] BYREF

  v9 = plen;
  v11 = udp_sz;
  v13 = 0;
  pseudoheader = find_pseudoheader(header, plen, 0u, &v53, &v52, &v51);
  if ( v52 )
    return v9;
  v16 = optno;
  v17 = set_do;
  if ( set_do )
    v17 = 0x80;
  if ( !pseudoheader )
  {
    v26 = 0;
    v48 = v11 >> 8;
    v47 = 0;
    v46 = 0;
    v45 = 0;
    goto LABEL_30;
  }
  ptr = limit;
  v18 = v53;
  if ( set_do )
    LOBYTE(pseudoheader) = 0x80;
  v19 = v53[4];
  v20 = v53[5];
  v21 = *v53;
  v22 = v53[1];
  v23 = v53[2];
  v24 = v53[3];
  if ( set_do )
  {
    v19 |= (unsigned __int8)pseudoheader;
    v53[4] = v19;
  }
  if ( optno )
  {
    v25 = v18 + 6;
    v26 = v18[7] | (v18[6] << 8);
    if ( v18 + 8 - (unsigned __int8 *)header + v26 <= v9 )
    {
      v43 = v22;
      v42 = v19;
      src = v18 + 8;
      v45 = v24;
      v46 = v23;
      v47 = v20;
      LOBYTE(v48) = v21;
      if ( (unsigned int)v26 < 5 )
      {
        v29 = v18 + 8;
LABEL_22:
        if ( v51 )
        {
          limit = ptr;
          v32 = optlen;
          goto LABEL_40;
        }
        v13 = 0;
        if ( v26 )
        {
          v33 = (void *)whine_malloc(v26);
          if ( v33 )
          {
            v34 = v33;
            memcpy(v33, src, v26);
            v13 = v34;
          }
        }
        else
        {
          v26 = 0;
        }
      }
      else
      {
        v27 = 0;
        v28 = 4;
        v29 = v18 + 8;
        while ( 1 )
        {
          v30 = v29[3] | (v29[2] << 8);
          if ( v30 + v28 > v26 )
            break;
          v31 = v29 + 4;
          if ( (v29[1] | (*v29 << 8)) == v16 )
          {
            if ( !replace )
              return v9;
            v26 = v26 - v30 - 4;
            memcpy(v29, &v31[v30], v26 - v27);
            v16 = optno;
            v18[7] = v26;
            v18[6] = BYTE1(v26);
          }
          else
          {
            v29 = &v31[v30];
            v27 += v30 + 4;
          }
          v28 = v27 + 4;
          if ( v27 + 4 >= v26 )
            goto LABEL_22;
        }
        v26 = 0;
        v13 = 0;
        v51 = 0;
      }
      limit = ptr;
      LOBYTE(v11) = v43;
      v17 = v42;
      v9 = rrfilter(header, v9, 0);
LABEL_30:
      v35 = skip_questions(header, v9);
      if ( !v35 )
        return v9;
      ptra = v13;
      v36 = (_BYTE *)skip_section(
                       v35,
                       ((unsigned int)((header->nscount << 8) & 0xFF0000 | (header->nscount << 24)) >> 16)
                     + ((unsigned int)((header->ancount << 8) & 0xFF0000 | (header->ancount << 24)) >> 0x10)
                     + ((unsigned int)((header->arcount << 8) & 0xFF0000 | (header->arcount << 24)) >> 0x10),
                       header,
                       v9);
      if ( !v36 )
        return v9;
      v37 = v36 + 0xB;
      if ( v36 + 0xB > limit )
        return v9;
      v36[10] = v26;
      v36[7] = v17;
      v36[4] = v11;
      v29 = v36 + 0xB;
      v36[8] = v47;
      v36[6] = v45;
      v36[5] = v46;
      v36[3] = v48;
      v36[2] = 41;
      v36[1] = 0;
      *v36 = 0;
      v36[9] = BYTE1(v26);
      v25 = v36 + 9;
      if ( ptra )
      {
        v29 = (unsigned __int8 *)&v37[v26];
        if ( &v37[v26] > (char *)limit )
        {
          free(ptra);
          return v9;
        }
        v38 = (_WORD)v36 + 0xB;
        memcpy(v37, ptra, v26);
        free(ptra);
        LOWORD(v37) = v38;
      }
      v32 = optlen;
      LOWORD(src) = (_WORD)v37;
      if ( limit - v29 - 4 >= (int)optlen )
      {
        v39 = ((unsigned int)((header->arcount << 8) & 0xFF0000 | (header->arcount << 24)) >> 0x10) + 1;
        header->arcount = ((v39 << 8) & 0xFF0000 | (v39 << 24)) >> 16;
      }
      v16 = optno;
LABEL_40:
      v40 = v29 + 4;
      if ( limit - (v29 + 4) < v32 )
        return v9;
      v41 = v16 == 0;
      if ( v16 )
        v41 = replace == 2;
      if ( !v41 )
      {
        if ( v40 > limit )
          return v9;
        v29[3] = v32;
        v29[1] = v16;
        v29[2] = BYTE1(v32);
        *v29 = BYTE1(v16);
        v29 = &v40[v32];
        if ( &v40[v32] > limit )
          return v9;
        memcpy(v40, opt, v32);
        v25[1] = (_BYTE)v29 - (_BYTE)src;
        *v25 = (unsigned __int16)((_WORD)v29 - (_WORD)src) >> 8;
      }
      return v29 - (unsigned __int8 *)header;
    }
  }
  return v9;
}
