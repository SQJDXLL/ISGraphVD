size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned int v9; // r8
  unsigned __int8 *pseudoheader; // r0
  int v11; // r11
  unsigned __int8 *v12; // r4
  unsigned __int8 *v13; // r6
  __int16 v14; // r12
  __int16 v15; // r0
  __int16 v16; // r1
  __int16 v17; // r2
  int v18; // r3
  __int16 v19; // r10
  unsigned int v20; // r3
  int v21; // r5
  _BOOL4 v22; // r3
  int v24; // r3
  int v25; // r1
  unsigned __int8 *v26; // r12
  int v27; // r2
  int v28; // r7
  char *v29; // r7
  _BYTE *v30; // r6
  bool v31; // zf
  unsigned __int8 *v32; // r0
  int v33; // r2
  __int16 v34; // r10
  int v35; // r0
  _BYTE *v36; // r0
  _BYTE *v37; // r6
  unsigned __int16 v38; // r3
  _BYTE *src; // [sp+18h] [bp-40h]
  __int16 v43; // [sp+1Ch] [bp-3Ch]
  unsigned __int8 *udp_len; // [sp+20h] [bp-38h] BYREF
  int is_sign; // [sp+24h] [bp-34h] BYREF
  int is_last; // [sp+28h] [bp-30h] BYREF

  v9 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  v11 = is_sign;
  if ( is_sign )
    return v9;
  v12 = pseudoheader;
  if ( !pseudoheader )
  {
    v34 = set_do;
    if ( set_do )
      v34 = 1;
    v19 = v34 << 15;
    v43 = 0;
    goto LABEL_40;
  }
  v13 = udp_len;
  v14 = *udp_len;
  v15 = udp_len[1];
  v16 = udp_len[2];
  v17 = udp_len[3];
  v18 = (__int16)_byteswap_ushort(*((_WORD *)udp_len + 2));
  if ( set_do )
  {
    v20 = ~((unsigned int)~(v18 << 17) >> 17);
    v19 = v20;
    udp_len[4] = v20 << 16 >> 24;
    v13[5] = v20;
  }
  else
  {
    v19 = v18;
  }
  v21 = v13[7] | (v13[6] << 8);
  v12 = v13 + 8;
  src = v13 + 8;
  v22 = optno == 0;
  if ( v13 + 8 - (unsigned __int8 *)header + v21 > v9 )
    v22 = 1;
  if ( !v22 )
  {
    udp_sz = v15 | (v14 << 8);
    v43 = v17 | (v16 << 8);
    if ( v21 <= 4 )
    {
      v24 = is_last;
      if ( is_last )
      {
        v12 = v13 + 8;
        goto LABEL_23;
      }
    }
    else
    {
      v24 = v13[9] | (v13[8] << 8);
      v25 = v13[11] | (v13[10] << 8);
      v26 = v13 + 0xC;
      v27 = v25;
      if ( v21 < v25 )
      {
LABEL_13:
        v12 = 0;
        is_last = 0;
LABEL_14:
        v9 = rrfilter(header, v9, 0, v24);
        goto LABEL_40;
      }
      v28 = 0;
      while ( 1 )
      {
        if ( v24 == optno )
        {
          if ( !replace )
            return v9;
          v21 -= v27 + 4;
          memcpy(v12, &v12[v25 + 4], v21 - v28);
          v13[6] = (unsigned int)(v21 << 16) >> 24;
          v13[7] = v21;
        }
        else
        {
          v12 = &v26[v25];
          v28 += v27 + 4;
        }
        if ( v28 + 4 >= v21 )
          break;
        v24 = v12[1] | (*v12 << 8);
        v25 = v12[3] | (v12[2] << 8);
        v26 = v12 + 4;
        v27 = v25;
        if ( v25 + v28 > v21 )
          goto LABEL_13;
      }
      v24 = is_last;
      if ( is_last )
      {
        if ( v12 )
        {
LABEL_23:
          v29 = (char *)(v12 + 4);
          if ( limit - (v12 + 4) < (int)optlen )
            return v9;
          v30 = v13 + 6;
LABEL_25:
          v31 = optno == 0;
          if ( optno )
            v31 = replace == 2;
          if ( !v31 )
          {
            *v12 = (unsigned int)(optno << 16) >> 24;
            v12[1] = optno;
            v12[2] = optlen << 16 >> 24;
            v12[3] = optlen;
            memcpy(v29, opt, optlen);
            v12 = (unsigned __int8 *)&v29[optlen];
            v33 = &v29[optlen] - src;
            *v30 = (unsigned int)(v33 << 16) >> 24;
            v30[1] = v33;
          }
          return v12 - (unsigned __int8 *)header;
        }
        v11 = v21;
LABEL_40:
        v35 = skip_questions(header, v9);
        if ( !v35 )
          return v9;
        v36 = (_BYTE *)skip_section(
                         v35,
                         (unsigned __int16)(HIBYTE(header->ancount) | (header->ancount << 8))
                       + (unsigned __int16)(HIBYTE(header->nscount) | (header->nscount << 8))
                       + (unsigned __int16)(HIBYTE(header->arcount) | (header->arcount << 8)),
                         header,
                         v9);
        v37 = v36;
        if ( !v36 )
          return v9;
        *v36 = 0;
        v36[1] = 0;
        v36[2] = 41;
        v36[3] = HIBYTE(udp_sz);
        v36[4] = udp_sz;
        v36[5] = HIBYTE(v43);
        v36[6] = v43;
        v36[7] = HIBYTE(v19);
        v36[8] = v19;
        v36[9] = (unsigned int)(v11 << 16) >> 24;
        v36[10] = v11;
        src = v36 + 0xB;
        if ( v12 )
        {
          memcpy(v36 + 0xB, v12, v11);
          free(v12);
          v12 = &v37[v11 + 0xB];
        }
        else
        {
          v12 = v36 + 0xB;
        }
        v29 = (char *)(v12 + 4);
        if ( limit - (v12 + 4) < (int)optlen )
          return v9;
        v30 = v37 + 9;
        v38 = (HIBYTE(header->arcount) | (header->arcount << 8)) + 1;
        header->arcount = HIBYTE(v38) | (v38 << 8);
        goto LABEL_25;
      }
    }
    if ( v21 )
    {
      v32 = (unsigned __int8 *)whine_malloc(v21);
      v12 = v32;
      if ( v32 )
        memcpy(v32, src, v21);
      v11 = v21;
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    goto LABEL_14;
  }
  return v9;
}
