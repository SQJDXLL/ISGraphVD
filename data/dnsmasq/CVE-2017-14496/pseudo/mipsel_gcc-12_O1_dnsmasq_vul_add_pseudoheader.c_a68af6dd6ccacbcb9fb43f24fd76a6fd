size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int a5,
        int a6,
        int a7,
        int t_s_0a,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  size_t v14; // $s4
  unsigned __int8 *pseudoheader; // $v0
  int v16; // $s7
  unsigned __int8 *v17; // $s0
  unsigned __int8 *v18; // $s3
  __int16 v19; // $a0
  __int16 v20; // $a2
  __int16 v21; // $v1
  __int16 v22; // $a1
  unsigned __int16 v23; // $v0
  int v24; // $s1
  _BYTE *v25; // $fp
  __int16 v26; // $a0
  unsigned __int8 *v27; // $a2
  int v28; // $v0
  int v29; // $a1
  int v30; // $v1
  int v31; // $s2
  int v32; // $v1
  unsigned __int8 *v33; // $s1
  _BYTE *v34; // $s3
  __int16 v35; // $fp
  unsigned __int8 *v36; // $v0
  int v37; // $a0
  _BYTE *v38; // $v0
  _BYTE *v39; // $s3
  __int16 t_s; // [sp+28h] [-18h]
  __int16 t_s_1; // [sp+2Ch] [-14h]
  unsigned __int8 *udp_len; // [sp+30h] [-10h] BYREF
  int is_sign; // [sp+34h] [-Ch] BYREF
  int is_last; // [sp+38h] [-8h] BYREF

  v14 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  v16 = is_sign;
  if ( is_sign )
    return v14;
  v17 = pseudoheader;
  if ( !pseudoheader )
  {
    t_s = (set_do != 0) << 15;
    t_s_1 = 0;
    goto LABEL_34;
  }
  v18 = udp_len;
  v19 = *udp_len;
  v20 = udp_len[1];
  v21 = udp_len[2];
  v22 = udp_len[3];
  v23 = _byteswap_ushort(*((_WORD *)udp_len + 2));
  if ( set_do )
  {
    t_s = v23 | 0x8000;
    udp_len[4] = (unsigned __int16)(v23 | 0x8000) >> 8;
    v18[5] = v23;
  }
  else
  {
    t_s = v23;
  }
  v24 = (v18[6] << 8) | v18[7];
  LOWORD(v25) = (_WORD)v18 + 8;
  if ( v14 < v18 + 8 - (unsigned __int8 *)header + v24 )
    return v14;
  v26 = v19 << 8;
  if ( !optno )
    return v14;
  udp_sz = v26 | v20;
  t_s_1 = (v21 << 8) | v22;
  v27 = v18 + 0xC;
  if ( v24 < 5 )
  {
    v17 = v18 + 8;
    if ( is_last )
    {
      v33 = v18 + 0xC;
      goto LABEL_22;
    }
    goto LABEL_26;
  }
  v28 = (v18[8] << 8) | v18[9];
  v29 = (v18[10] << 8) | v18[11];
  v30 = v29;
  if ( v24 < v29 )
  {
LABEL_11:
    is_last = 0;
    v17 = 0;
LABEL_12:
    v14 = rrfilter(header, v14, 0);
LABEL_34:
    v37 = skip_questions(header, v14);
    if ( !v37 )
      return v14;
    v38 = (_BYTE *)skip_section(
                     v37,
                     (unsigned __int16)((header->ancount << 8) | HIBYTE(header->ancount))
                   + (unsigned __int16)((header->nscount << 8) | HIBYTE(header->nscount))
                   + (unsigned __int16)((header->arcount << 8) | HIBYTE(header->arcount)),
                     header,
                     v14);
    v39 = v38;
    if ( !v38 )
      return v14;
    *v38 = 0;
    v38[1] = 0;
    v38[2] = 41;
    v38[3] = HIBYTE(udp_sz);
    v38[4] = udp_sz;
    v38[5] = HIBYTE(t_s_1);
    v38[6] = t_s_1;
    v38[7] = HIBYTE(t_s);
    v38[8] = t_s;
    v38[9] = BYTE1(v16);
    v38[10] = v16;
    v25 = v38 + 0xB;
    if ( v17 )
    {
      memcpy(v38 + 0xB, v17, v16);
      free(v17);
      v17 = &v25[v16];
    }
    else
    {
      v17 = v38 + 0xB;
    }
    v33 = v17 + 4;
    if ( limit - (v17 + 4) < (int)optlen )
      return v14;
    header->arcount = ((((unsigned __int16)(header->arcount << 8) | HIBYTE(header->arcount)) + 1) << 8) | ((unsigned __int16)(((header->arcount << 8) | HIBYTE(header->arcount)) + 1) >> 8);
    v34 = v39 + 9;
    if ( !optno )
      return v17 - (unsigned __int8 *)header;
    goto LABEL_24;
  }
  v31 = 0;
  v17 = v18 + 8;
  while ( 1 )
  {
    if ( v28 == optno )
    {
      v32 = v30 + 4;
      if ( !replace )
        return v14;
      v24 -= v32;
      memcpy(v17, &v17[v29 + 4], v24 - v31);
      v18[6] = BYTE1(v24);
      v18[7] = v24;
    }
    else
    {
      v17 = &v27[v29];
      v31 += v30 + 4;
    }
    v27 = v17 + 4;
    if ( v31 + 4 >= v24 )
      break;
    v28 = (*v17 << 8) | v17[1];
    v29 = (v17[2] << 8) | v17[3];
    v30 = v29;
    if ( v24 < v29 + v31 )
      goto LABEL_11;
  }
  if ( !is_last )
  {
LABEL_26:
    if ( v24 )
    {
      v36 = (unsigned __int8 *)whine_malloc(v24);
      v17 = v36;
      if ( v36 )
        memcpy(v36, v18 + 8, v24);
      v16 = v24;
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    goto LABEL_12;
  }
  v16 = v24;
  if ( !v17 )
    goto LABEL_34;
  v33 = v17 + 4;
LABEL_22:
  if ( limit - v33 < (int)optlen )
    return v14;
  v34 = v18 + 6;
LABEL_24:
  v14 = v17 - (unsigned __int8 *)header;
  if ( replace != 2 )
  {
    *v17 = BYTE1(optno);
    v17[1] = optno;
    v17[2] = BYTE1(optlen);
    v17[3] = optlen;
    memcpy(v33, opt, optlen);
    v17 = &v33[optlen];
    v35 = (_WORD)v33 + optlen - (_WORD)v25;
    *v34 = HIBYTE(v35);
    v34[1] = v35;
    return v17 - (unsigned __int8 *)header;
  }
  return v14;
}
