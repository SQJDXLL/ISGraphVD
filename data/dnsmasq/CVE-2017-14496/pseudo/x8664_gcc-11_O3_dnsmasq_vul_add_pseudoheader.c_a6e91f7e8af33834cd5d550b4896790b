size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  size_t v11; // rbp
  unsigned __int8 *pseudoheader; // rax
  int v14; // r13d
  unsigned __int8 *v15; // r8
  unsigned __int8 *v16; // r14
  __int16 v17; // ax
  char *v18; // rdi
  __int64 v19; // r15
  unsigned __int8 *v20; // r11
  unsigned __int16 v21; // ax
  unsigned __int16 v22; // dx
  int v23; // esi
  int v24; // r8d
  int v25; // r13d
  int v26; // ebx
  int v27; // r15d
  unsigned __int8 *v28; // rdi
  __int16 v29; // ax
  __int16 v30; // dx
  size_t v31; // r10
  __int16 v33; // r15
  __int64 v34; // rax
  __int64 v35; // rax
  char *v36; // rcx
  unsigned __int8 *v37; // r8
  __int64 v38; // r14
  void *v39; // r8
  _WORD *v40; // rbp
  char *v41; // rax
  unsigned __int8 *v42; // r8
  __int64 v43; // rax
  unsigned __int8 *v44; // rax
  __int16 t_s; // [rsp+10h] [rbp-78h]
  unsigned __int8 *t_sa; // [rsp+10h] [rbp-78h]
  unsigned __int8 *buff; // [rsp+18h] [rbp-70h]
  unsigned __int8 *buffa; // [rsp+18h] [rbp-70h]
  __int16 src; // [rsp+20h] [rbp-68h]
  unsigned __int8 *srca; // [rsp+20h] [rbp-68h]
  char *srcb; // [rsp+20h] [rbp-68h]
  __int16 v54; // [rsp+2Ah] [rbp-5Eh]
  int v55; // [rsp+2Ch] [rbp-5Ch]
  int is_sign; // [rsp+38h] [rbp-50h] BYREF
  int is_last; // [rsp+3Ch] [rbp-4Ch] BYREF
  unsigned __int8 *udp_len[9]; // [rsp+40h] [rbp-48h] BYREF

  v11 = plen;
  udp_len[1] = (unsigned __int8 *)__readfsqword(0x28u);
  pseudoheader = find_pseudoheader(header, plen, 0LL, udp_len, &is_sign, &is_last);
  v14 = is_sign;
  if ( is_sign )
    return v11;
  v15 = pseudoheader;
  if ( !pseudoheader )
  {
    v33 = 0;
    t_s = (set_do != 0) << 15;
    goto LABEL_23;
  }
  v16 = udp_len[0];
  src = *(_WORD *)udp_len[0];
  v54 = *((_WORD *)udp_len[0] + 1);
  v17 = __ROL2__(*((_WORD *)udp_len[0] + 2), 8);
  t_s = v17;
  if ( set_do )
  {
    t_s = v17 | 0x8000;
    *((_WORD *)udp_len[0] + 2) = __ROL2__(v17 | 0x8000, 8);
  }
  v18 = (char *)(v16 + 8);
  buff = v16 + 8;
  v19 = (unsigned __int16)__ROL2__(*((_WORD *)v16 + 3), 8);
  if ( v16 + 8 - (unsigned __int8 *)header + v19 > plen || !optno )
    return v11;
  if ( (int)v19 <= 4 )
  {
LABEL_30:
    if ( !is_last )
    {
      if ( (_DWORD)v19 )
      {
        v14 = v19;
        v44 = (unsigned __int8 *)whine_malloc((int)v19);
        v42 = v44;
        if ( v44 )
          v42 = (unsigned __int8 *)memcpy(v44, buff, (int)v19);
      }
      else
      {
        v14 = 0;
        v42 = 0LL;
      }
      goto LABEL_39;
    }
    v39 = v18 + 4;
    if ( limit - (unsigned __int8 *)(v18 + 4) >= (__int64)optlen )
    {
      v40 = v16 + 6;
LABEL_33:
      if ( optno && replace != 2 )
      {
        *(_WORD *)v18 = __ROL2__(optno, 8);
        *((_WORD *)v18 + 1) = __ROL2__(optlen, 8);
        v41 = (char *)memcpy(v39, opt, optlen);
        v18 = &v41[optlen];
        *v40 = __ROL2__((_WORD)v41 + optlen - (_WORD)buff, 8);
      }
      return v18 - (char *)header;
    }
    return v11;
  }
  v20 = v16 + 12;
  v21 = __ROL2__(*((_WORD *)v16 + 5), 8);
  v22 = __ROL2__(*((_WORD *)v16 + 4), 8);
  v23 = v21;
  if ( v21 <= (int)v19 )
  {
    v24 = 0;
    if ( replace )
    {
      v55 = v14;
      v25 = optno;
      v26 = v19;
      v27 = 0;
      do
      {
        if ( v22 == v25 )
        {
          v26 -= v23 + 4;
          v18 = (char *)memcpy(v18, &v18[v21 + 4], v26 - v27);
          *((_WORD *)v16 + 3) = __ROL2__(v26, 8);
        }
        else
        {
          v27 += v23 + 4;
          v18 = (char *)&v20[v21];
        }
        if ( v27 + 4 >= v26 )
        {
          LODWORD(v19) = v26;
          optno = v25;
          goto LABEL_30;
        }
        v20 = (unsigned __int8 *)(v18 + 4);
        v21 = __ROL2__(*((_WORD *)v18 + 1), 8);
        v22 = __ROL2__(*(_WORD *)v18, 8);
        v23 = v21;
      }
      while ( v21 + v27 <= v26 );
      optno = v25;
      v14 = v55;
      goto LABEL_38;
    }
    v28 = v16 + 12;
    while ( v22 != optno )
    {
      v24 += v23 + 4;
      v18 = (char *)&v28[v21];
      if ( v24 + 4 >= (int)v19 )
        goto LABEL_30;
      v29 = *((_WORD *)v18 + 1);
      v30 = *(_WORD *)v18;
      v28 = (unsigned __int8 *)(v18 + 4);
      v21 = __ROL2__(v29, 8);
      v22 = __ROL2__(v30, 8);
      v23 = v21;
      if ( v21 + v24 > (int)v19 )
        goto LABEL_38;
    }
    return v11;
  }
LABEL_38:
  is_last = 0;
  v42 = 0LL;
LABEL_39:
  buffa = v42;
  v43 = rrfilter(header, v11, 0LL);
  udp_sz = __ROL2__(src, 8);
  v15 = buffa;
  v33 = __ROL2__(v54, 8);
  v11 = v43;
LABEL_23:
  buff = v15;
  v34 = skip_questions(header, v11);
  v31 = v11;
  if ( v34 )
  {
    srca = buff;
    v35 = skip_section(
            v34,
            (unsigned __int16)__ROL2__(header->arcount, 8)
          + (unsigned __int16)__ROL2__(header->nscount, 8)
          + (unsigned int)(unsigned __int16)__ROL2__(header->ancount, 8),
            header,
            v11);
    v31 = v11;
    v36 = (char *)v35;
    if ( v35 )
    {
      *(_BYTE *)(v35 + 2) = 41;
      *(_WORD *)v35 = 0;
      v37 = buff;
      *(_QWORD *)(v35 + 3) = HIBYTE(udp_sz) | (((unsigned __int8)udp_sz | ((HIBYTE(v33) | (((unsigned __int8)v33 | ((HIBYTE(t_s) | (((unsigned __int8)t_s | ((BYTE1(v14) | ((unsigned __int64)(unsigned __int8)v14 << 8)) << 8)) << 8)) << 8)) << 8)) << 8)) << 8);
      LOWORD(buff) = v35 + 11;
      v38 = v35 + 11;
      v18 = (char *)(v35 + 11);
      if ( srca )
      {
        srcb = (char *)v35;
        t_sa = v37;
        memcpy(v18, v37, v14);
        free(t_sa);
        v36 = srcb;
        v18 = (char *)(v38 + v14);
      }
      v39 = v18 + 4;
      v31 = v11;
      if ( limit - (unsigned __int8 *)(v18 + 4) >= (__int64)optlen )
      {
        v40 = v36 + 9;
        header->arcount = __ROL2__(__ROL2__(header->arcount, 8) + 1, 8);
        goto LABEL_33;
      }
    }
  }
  return v31;
}
