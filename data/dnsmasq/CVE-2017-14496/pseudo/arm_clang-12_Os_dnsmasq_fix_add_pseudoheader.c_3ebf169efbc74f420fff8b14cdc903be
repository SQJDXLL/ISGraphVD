size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned int v9; // r9
  unsigned int v11; // r6
  void *v13; // r5
  unsigned __int8 *pseudoheader; // r0
  int v16; // r4
  char v17; // r2
  unsigned __int8 *v18; // r7
  unsigned __int8 v19; // r2
  _BYTE *v20; // r11
  unsigned __int8 *v21; // r10
  int v22; // r6
  int v23; // r5
  int v24; // r0
  int v25; // r2
  unsigned __int8 *v26; // r0
  int v27; // r2
  unsigned int v28; // r4
  void *v29; // r0
  void *v30; // r7
  int v31; // r0
  _BYTE *v32; // r0
  char *v33; // r1
  __int16 v34; // r4
  unsigned int v35; // r0
  unsigned __int8 *v36; // r0
  bool v37; // zf
  unsigned __int8 v38; // [sp+8h] [bp-50h]
  void *src; // [sp+Ch] [bp-4Ch]
  unsigned __int8 v40; // [sp+10h] [bp-48h]
  unsigned __int8 v41; // [sp+14h] [bp-44h]
  unsigned __int8 v42; // [sp+18h] [bp-40h]
  char v43; // [sp+1Ch] [bp-3Ch]
  unsigned __int8 v44; // [sp+20h] [bp-38h]
  unsigned __int8 *v45; // [sp+24h] [bp-34h]
  int v46; // [sp+28h] [bp-30h] BYREF
  int v47; // [sp+2Ch] [bp-2Ch] BYREF
  unsigned __int8 *v48; // [sp+30h] [bp-28h] BYREF

  v9 = plen;
  v11 = udp_sz;
  v13 = 0;
  pseudoheader = find_pseudoheader(header, plen, 0u, &v48, &v47, &v46);
  if ( v47 )
    return v9;
  v16 = optno;
  v17 = set_do;
  if ( set_do )
    v17 = 0x80;
  if ( !pseudoheader )
  {
    v43 = v17;
    v44 = v11;
    v28 = v11 >> 8;
    v22 = 0;
    v42 = 0;
    v41 = 0;
    v40 = 0;
    goto LABEL_29;
  }
  v45 = limit;
  v18 = v48;
  if ( set_do )
    LOBYTE(pseudoheader) = 0x80;
  v19 = v48[4];
  if ( set_do )
  {
    v19 |= (unsigned __int8)pseudoheader;
    v48[4] = v19;
  }
  if ( optno )
  {
    v20 = v18 + 6;
    v21 = v18 + 8;
    v22 = v18[7] | (v18[6] << 8);
    if ( v18 + 8 - (unsigned __int8 *)header + v22 <= v9 )
    {
      src = v18 + 8;
      v38 = *v18;
      v40 = v18[3];
      v44 = v18[1];
      v41 = v18[2];
      v42 = v18[5];
      v43 = v19;
      if ( (unsigned int)v22 < 5 )
      {
LABEL_20:
        if ( v46 )
        {
          limit = v45;
          v27 = optlen;
          goto LABEL_39;
        }
        v13 = 0;
        if ( v22 )
        {
          v29 = (void *)whine_malloc(v22);
          if ( v29 )
          {
            v30 = v29;
            memcpy(v29, src, v22);
            v13 = v30;
          }
        }
        else
        {
          v22 = 0;
        }
      }
      else
      {
        v23 = 0;
        v24 = 4;
        while ( 1 )
        {
          v25 = v21[3] | (v21[2] << 8);
          if ( v25 + v24 > v22 )
            break;
          v26 = v21 + 4;
          if ( (v21[1] | (*v21 << 8)) == v16 )
          {
            if ( !replace )
              return v9;
            v22 = v22 - v25 - 4;
            memcpy(v21, &v26[v25], v22 - v23);
            v16 = optno;
            v18[7] = v22;
            v18[6] = BYTE1(v22);
          }
          else
          {
            v21 = &v26[v25];
            v23 += v25 + 4;
          }
          v24 = v23 + 4;
          if ( v23 + 4 >= v22 )
            goto LABEL_20;
        }
        v22 = 0;
        v13 = 0;
        v46 = 0;
      }
      limit = v45;
      LOBYTE(v28) = v38;
      v9 = rrfilter(header, v9, 0);
LABEL_29:
      v31 = skip_questions(header, v9);
      if ( !v31 )
        return v9;
      v32 = (_BYTE *)skip_section(
                       v31,
                       ((unsigned int)((header->nscount << 8) & 0xFF0000 | (header->nscount << 24)) >> 16)
                     + ((unsigned int)((header->ancount << 8) & 0xFF0000 | (header->ancount << 24)) >> 0x10)
                     + ((unsigned int)((header->arcount << 8) & 0xFF0000 | (header->arcount << 24)) >> 0x10),
                       header,
                       v9);
      if ( !v32 )
        return v9;
      v33 = v32 + 0xB;
      if ( v32 + 0xB > limit )
        return v9;
      v32[10] = v22;
      v32[3] = v28;
      v21 = v32 + 0xB;
      v32[8] = v42;
      v32[7] = v43;
      v32[6] = v40;
      v32[5] = v41;
      v32[4] = v44;
      v32[2] = 41;
      v32[1] = 0;
      *v32 = 0;
      v32[9] = BYTE1(v22);
      v20 = v32 + 9;
      if ( v13 )
      {
        v21 = (unsigned __int8 *)&v33[v22];
        if ( &v33[v22] > (char *)limit )
        {
          free(v13);
          return v9;
        }
        v34 = (_WORD)v32 + 0xB;
        memcpy(v33, v13, v22);
        free(v13);
        LOWORD(v33) = v34;
      }
      v27 = optlen;
      LOWORD(src) = (_WORD)v33;
      if ( limit - v21 - 4 >= (int)optlen )
      {
        v35 = ((unsigned int)((header->arcount << 8) & 0xFF0000 | (header->arcount << 24)) >> 0x10) + 1;
        header->arcount = ((v35 << 8) & 0xFF0000 | (v35 << 24)) >> 16;
      }
      v16 = optno;
LABEL_39:
      v36 = v21 + 4;
      if ( limit - (v21 + 4) < v27 )
        return v9;
      v37 = v16 == 0;
      if ( v16 )
        v37 = replace == 2;
      if ( !v37 )
      {
        if ( v36 > limit )
          return v9;
        v21[3] = v27;
        v21[1] = v16;
        v21[2] = BYTE1(v27);
        *v21 = BYTE1(v16);
        v21 = &v36[v27];
        if ( &v36[v27] > limit )
          return v9;
        memcpy(v36, opt, v27);
        v20[1] = (_BYTE)v21 - (_BYTE)src;
        *v20 = (unsigned __int16)((_WORD)v21 - (_WORD)src) >> 8;
      }
      return v21 - (unsigned __int8 *)header;
    }
  }
  return v9;
}
