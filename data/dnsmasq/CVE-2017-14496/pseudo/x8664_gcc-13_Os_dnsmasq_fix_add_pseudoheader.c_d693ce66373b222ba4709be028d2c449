size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int8 *pseudoheader; // rax
  int v13; // r8d
  unsigned __int8 *v14; // r12
  unsigned __int8 *v15; // rax
  __int16 v16; // r15
  __int16 v17; // bp
  __int16 v18; // dx
  unsigned __int8 *v19; // rdx
  int v20; // r8d
  int v21; // r9d
  unsigned __int64 v22; // r14
  unsigned __int16 v23; // si
  unsigned __int16 v24; // di
  __int16 v25; // cx
  _WORD *v26; // rax
  unsigned __int64 v27; // r14
  unsigned __int8 *v28; // rax
  int v29; // r8d
  __int64 v30; // rax
  __int16 v31; // r14
  __int64 v32; // rax
  u16 v33; // cx
  char v34; // tt
  unsigned __int8 *v35; // r8
  __int16 v36; // cx
  __int16 v37; // dx
  char v38; // t1
  __int64 v39; // rdi
  unsigned __int16 v40; // dx
  unsigned __int16 v41; // ax
  __int16 v42; // cx
  size_t plena; // [rsp+0h] [rbp-88h]
  __int16 p; // [rsp+10h] [rbp-78h]
  __int16 pb; // [rsp+10h] [rbp-78h]
  int pa; // [rsp+10h] [rbp-78h]
  int rdlen; // [rsp+20h] [rbp-68h]
  int rdlena; // [rsp+20h] [rbp-68h]
  __int64 rdlenb; // [rsp+20h] [rbp-68h]
  unsigned __int8 *datap; // [rsp+28h] [rbp-60h]
  int is_sign; // [rsp+38h] [rbp-50h] BYREF
  int is_last; // [rsp+3Ch] [rbp-4Ch] BYREF
  unsigned __int8 *t_cp[9]; // [rsp+40h] [rbp-48h] BYREF

  plena = plen;
  t_cp[1] = (unsigned __int8 *)__readfsqword(0x28u);
  pseudoheader = find_pseudoheader(header, plen, 0LL, t_cp, &is_sign, &is_last);
  v13 = is_sign;
  if ( is_sign )
    return plena;
  v14 = pseudoheader;
  if ( pseudoheader )
  {
    v15 = t_cp[0];
    v16 = *(_WORD *)t_cp[0];
    p = *((_WORD *)t_cp[0] + 1);
    v17 = __ROL2__(*((_WORD *)t_cp[0] + 2), 8);
    if ( set_do )
    {
      v17 |= 0x8000u;
      LOBYTE(v18) = HIBYTE(v17);
      HIBYTE(v18) = v17;
      *((_WORD *)t_cp[0] + 2) = v18;
    }
    v19 = v15 + 8;
    LOWORD(v20) = __ROL2__(*((_WORD *)v15 + 3), 8);
    if ( plen < (unsigned __int64)(unsigned __int16)v20 + v15 + 8 - (unsigned __int8 *)header || !optno )
      return plena;
    v20 = (unsigned __int16)v20;
    v21 = 0;
    v22 = (unsigned __int64)(v15 + 8);
    while ( v21 + 4 < v20 )
    {
      v23 = __ROL2__(*(_WORD *)(v22 + 2), 8);
      v24 = __ROL2__(*(_WORD *)v22, 8);
      if ( v23 + v21 + 4 > v20 )
      {
        is_last = 0;
LABEL_19:
        v29 = 0;
        v14 = 0LL;
        goto LABEL_20;
      }
      if ( v24 == optno )
      {
        if ( !replace )
          return plena;
        v20 -= v23 + 4;
        qmemcpy((void *)v22, (const void *)(v22 + v23 + 4), v20 - v21);
        LOBYTE(v25) = BYTE1(v20);
        HIBYTE(v25) = v20;
        *((_WORD *)v15 + 3) = v25;
      }
      else
      {
        v21 += v23 + 4;
        v22 += v23 + 4LL;
      }
    }
    v26 = v15 + 6;
    if ( is_last )
      goto LABEL_25;
    datap = v19;
    if ( !v20 )
      goto LABEL_19;
    v27 = v20;
    rdlen = v20;
    v28 = (unsigned __int8 *)whine_malloc(v20);
    v29 = rdlen;
    v14 = v28;
    if ( v28 )
      qmemcpy(v28, datap, v27);
LABEL_20:
    rdlena = v29;
    udp_sz = __ROL2__(v16, 8);
    v30 = rrfilter(header, plena, 0LL);
    v31 = __ROL2__(p, 8);
    v13 = rdlena;
    plena = v30;
  }
  else
  {
    v31 = 0;
    v17 = (set_do != 0) << 15;
  }
  pa = v13;
  v39 = skip_questions(header, plena);
  if ( v39 )
  {
    HIBYTE(v40) = header->nscount;
    LOBYTE(v40) = HIBYTE(header->nscount);
    HIBYTE(v41) = header->arcount;
    LOBYTE(v41) = HIBYTE(header->arcount);
    v32 = skip_section(v39, v41 + v40 + (unsigned int)(unsigned __int16)__ROL2__(header->ancount, 8), header, plena);
    if ( v32 )
    {
      v19 = (unsigned __int8 *)(v32 + 11);
      if ( (unsigned __int64)limit >= v32 + 11 )
      {
        *(_WORD *)v32 = 0;
        *(_BYTE *)(v32 + 2) = 41;
        *(_WORD *)(v32 + 3) = __ROL2__(udp_sz, 8);
        LOBYTE(v42) = BYTE1(pa);
        HIBYTE(v42) = pa;
        *(_WORD *)(v32 + 5) = __ROL2__(v31, 8);
        *(_WORD *)(v32 + 7) = __ROL2__(v17, 8);
        *(_WORD *)(v32 + 9) = v42;
        if ( v14 )
        {
          v22 = (unsigned __int64)&v19[pa];
          if ( (unsigned __int64)limit < v22 )
          {
            free(v14);
            return plena;
          }
          rdlenb = v32;
          qmemcpy(v19, v14, pa);
          pb = v32 + 11;
          free(v14);
          LOWORD(v19) = pb;
          v32 = rdlenb;
        }
        else
        {
          v22 = v32 + 11;
        }
        if ( (__int64)&limit[-v22 - 4] >= (__int64)optlen )
        {
          HIBYTE(v33) = header->arcount;
          LOBYTE(v33) = HIBYTE(header->arcount);
          ++v33;
          v34 = HIBYTE(v33);
          HIBYTE(v33) = v33;
          LOBYTE(v33) = v34;
          header->arcount = v33;
        }
        v26 = (_WORD *)(v32 + 9);
LABEL_25:
        v35 = (unsigned __int8 *)(v22 + 4);
        if ( (__int64)&limit[-v22 - 4] >= (__int64)optlen )
        {
          if ( !optno || replace == 2 )
            return v22 - (_QWORD)header;
          if ( limit >= v35 )
          {
            *(_WORD *)v22 = __ROL2__(optno, 8);
            LOBYTE(v36) = BYTE1(optlen);
            HIBYTE(v36) = optlen;
            *(_WORD *)(v22 + 2) = v36;
            v22 = (unsigned __int64)&v35[optlen];
            if ( limit >= &v35[optlen] )
            {
              qmemcpy(v35, opt, optlen);
              v37 = v22 - (_WORD)v19;
              v38 = HIBYTE(v37);
              HIBYTE(v37) = v37;
              LOBYTE(v37) = v38;
              *v26 = v37;
              return v22 - (_QWORD)header;
            }
          }
        }
      }
    }
  }
  return plena;
}
