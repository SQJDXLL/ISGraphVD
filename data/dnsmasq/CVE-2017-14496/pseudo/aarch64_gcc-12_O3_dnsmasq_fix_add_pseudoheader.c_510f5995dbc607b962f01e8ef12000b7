size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  uint32x2_t v9; // d8
  unsigned __int64 v11; // x19
  unsigned __int32 v14; // w25
  unsigned __int8 *pseudoheader; // x0
  int v17; // w23
  unsigned __int8 *v18; // x27
  unsigned __int16 *v19; // x27
  unsigned int v20; // w21
  unsigned __int16 *v21; // x25
  unsigned __int16 v22; // w0
  int v23; // w2
  unsigned __int64 v24; // x0
  bool v25; // cc
  signed int v26; // w24
  unsigned __int16 *v27; // x9
  unsigned int v28; // w3
  unsigned int v29; // w0
  int v30; // w1
  int v31; // w26
  unsigned __int8 *v32; // x0
  _WORD *v33; // x27
  bool v34; // zf
  __int64 v36; // x0
  __int64 v37; // x0
  uint32x2_t v38; // d0
  uint32x2_t v39; // d1
  __int64 v40; // x24
  char *v41; // x3
  __int64 v42; // d0
  unsigned __int8 *v43; // x0
  int v44; // w10
  unsigned int v45; // w1
  unsigned __int8 *p; // [xsp+80h] [xbp+80h]
  unsigned __int16 v49; // [xsp+88h] [xbp+88h]
  unsigned __int16 v50; // [xsp+8Ch] [xbp+8Ch]
  int is_sign; // [xsp+98h] [xbp+98h] BYREF
  int is_last; // [xsp+9Ch] [xbp+9Ch] BYREF
  unsigned __int8 *udp_len; // [xsp+A0h] [xbp+A0h] BYREF

  v11 = plen;
  v14 = udp_sz;
  pseudoheader = find_pseudoheader(header, plen, 0uLL, &udp_len, &is_sign, &is_last);
  v17 = is_sign;
  if ( is_sign )
    return v11;
  v18 = pseudoheader;
  if ( pseudoheader )
  {
    v19 = (unsigned __int16 *)udp_len;
    v49 = *(_WORD *)udp_len;
    v50 = *((_WORD *)udp_len + 1);
    v20 = (unsigned __int16)__rev16(*((unsigned __int16 *)udp_len + 2));
    if ( set_do )
    {
      v20 |= 0x8000u;
      *((_WORD *)udp_len + 2) = __rev16(v20);
    }
    v21 = v19 + 4;
    p = (unsigned __int8 *)(v19 + 4);
    v22 = __rev16(v19[3]);
    v23 = v22;
    v24 = (char *)(v19 + 4) - (char *)header + v22;
    if ( optno )
      v25 = v24 > v11;
    else
      v25 = 1;
    if ( v25 )
      return v11;
    v26 = v23;
    if ( v23 > 4 )
    {
      v27 = v19 + 6;
      v28 = (unsigned __int16)__rev16(v19[5]);
      v29 = v28 + 4;
      v30 = (unsigned __int16)__rev16(v19[4]);
      if ( v23 < (int)(v28 + 4) )
      {
LABEL_40:
        is_last = 0;
        goto LABEL_41;
      }
      if ( !replace )
      {
        v44 = 0;
        while ( v30 != optno )
        {
          v21 = (unsigned __int16 *)((char *)v27 + (unsigned __int16)v28);
          v44 += v28 + 4;
          if ( v44 + 4 >= v23 )
          {
            if ( is_last )
              goto LABEL_20;
            goto LABEL_44;
          }
          v45 = *(unsigned __int16 *)((char *)v27 + v28);
          v27 = v21 + 2;
          v28 = (unsigned __int16)__rev16(v21[1]);
          v30 = (unsigned __int16)__rev16(v45);
          if ( (int)(v28 + v44 + 4) > v23 )
            goto LABEL_40;
        }
        return v11;
      }
      v31 = 0;
      while ( 1 )
      {
        if ( v30 == optno )
        {
          v26 -= v29;
          memcpy(v21, (char *)v21 + (unsigned __int16)(v28 + 4), v26 - v31);
          v19[3] = __rev16(v26);
        }
        else
        {
          v21 = (unsigned __int16 *)((char *)v27 + (unsigned __int16)v28);
          v31 += v29;
        }
        if ( v31 + 4 >= v26 )
          break;
        v27 = v21 + 2;
        v28 = (unsigned __int16)__rev16(v21[1]);
        v30 = (unsigned __int16)__rev16(*v21);
        if ( (int)(v28 + v31 + 4) > v26 )
          goto LABEL_40;
        v29 = v28 + 4;
      }
    }
    if ( is_last )
    {
LABEL_20:
      v32 = (unsigned __int8 *)(v21 + 2);
      if ( limit - (unsigned __int8 *)(v21 + 2) < (__int64)optlen )
        return v11;
      v33 = v19 + 3;
      goto LABEL_22;
    }
    if ( v26 )
    {
LABEL_44:
      v43 = (unsigned __int8 *)whine_malloc(v26);
      v18 = v43;
      if ( v43 )
        memcpy(v43, p, v26);
      v17 = v26;
      goto LABEL_42;
    }
LABEL_41:
    v18 = 0LL;
LABEL_42:
    v14 = (unsigned __int16)__rev16(v49);
    v9.n64_u32[0] = (unsigned __int16)__rev16(v50);
    v11 = rrfilter(header, v11, 0LL);
    goto LABEL_30;
  }
  v9.n64_u32[0] = 0;
  v20 = (set_do != 0) << 15;
LABEL_30:
  v36 = skip_questions(header, v11);
  if ( !v36 )
    return v11;
  v37 = skip_section(
          v36,
          (unsigned __int16)__rev16(header->nscount)
        + (unsigned __int16)__rev16(header->ancount)
        + (unsigned int)(unsigned __int16)__rev16(header->arcount),
          header,
          v11);
  v40 = v37;
  if ( !v37 )
    return v11;
  v41 = (char *)(v37 + 0xB);
  LODWORD(p) = v37 + 0xB;
  if ( v37 + 0xB > (unsigned __int64)limit )
    return v11;
  v38.n64_u32[0] = v14;
  v39.n64_u32[0] = v20;
  LOBYTE(v42) = vshr_n_u32(v38, 8uLL).n64_u8[0];
  *(_WORD *)v37 = 0;
  *(_BYTE *)(v37 + 2) = 41;
  BYTE1(v42) = v14;
  BYTE2(v42) = vshr_n_u32(v9, 8uLL).n64_u8[0];
  BYTE3(v42) = v9.n64_u8[0];
  BYTE4(v42) = vshr_n_u32(v39, 8uLL).n64_u8[0];
  BYTE5(v42) = v20;
  BYTE6(v42) = BYTE1(v17);
  HIBYTE(v42) = v17;
  *(_QWORD *)(v37 + 3) = v42;
  if ( v18 )
  {
    v21 = (unsigned __int16 *)&v41[v17];
    if ( v21 > (unsigned __int16 *)limit )
    {
      free(v18);
      return v11;
    }
    memcpy(v41, v18, v17);
    free(v18);
  }
  else
  {
    v21 = (unsigned __int16 *)(v37 + 0xB);
  }
  v32 = (unsigned __int8 *)(v21 + 2);
  if ( limit - (unsigned __int8 *)(v21 + 2) < (__int64)optlen )
    return v11;
  v33 = (_WORD *)(v40 + 9);
  header->arcount = __rev16((unsigned __int16)__rev16(header->arcount) + 1);
LABEL_22:
  if ( optno )
    v34 = replace == 2;
  else
    v34 = 1;
  if ( !v34 )
  {
    if ( limit < v32 )
      return v11;
    *v21 = __rev16(optno);
    v21[1] = __rev16(optlen);
    v21 = (unsigned __int16 *)&v32[optlen];
    if ( &v32[optlen] > limit )
      return v11;
    memcpy(v32, opt, optlen);
    *v33 = __rev16((_DWORD)v21 - (_DWORD)p);
  }
  return (char *)v21 - (char *)header;
}
