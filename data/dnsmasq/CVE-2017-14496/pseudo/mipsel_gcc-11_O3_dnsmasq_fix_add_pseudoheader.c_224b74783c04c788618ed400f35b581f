int __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int a5,
        int a6,
        int a7,
        int a8,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int8 *pseudoheader; // $v0
  size_t v16; // $s0
  int v17; // $s4
  unsigned __int8 *v18; // $fp
  unsigned __int8 *v19; // $fp
  unsigned int v20; // $v0
  __int16 v21; // $s3
  unsigned int v22; // $v0
  unsigned __int8 *v23; // $s6
  signed int v24; // $s7
  int v25; // $v0
  unsigned int v26; // $v1
  unsigned int v27; // $v0
  int v28; // $a1
  unsigned int v29; // $a0
  int v30; // $v0
  int v31; // $v1
  unsigned __int8 *v32; // $a0
  int v33; // $t3
  unsigned int v34; // $a0
  unsigned int v35; // $v1
  int v36; // $a2
  unsigned int v37; // $v1
  unsigned int v38; // $v0
  int result; // $v0
  __int16 v40; // $s7
  int v41; // $a0
  _BYTE *v42; // $v0
  char *v43; // $a3
  _BYTE *v44; // $s3
  unsigned __int8 *v45; // $a0
  unsigned __int8 *v46; // $v0
  unsigned __int8 *v47; // $s6
  int i; // [sp+20h] [-28h]
  unsigned __int8 *p; // [sp+2Ch] [-1Ch]
  unsigned int v51; // [sp+30h] [-18h]
  unsigned int v52; // [sp+34h] [-14h]
  unsigned __int8 *udp_len; // [sp+38h] [-10h] BYREF
  int is_sign; // [sp+3Ch] [-Ch] BYREF
  int is_last; // [sp+40h] [-8h] BYREF

  v16 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  v17 = is_sign;
  if ( is_sign )
    return v16;
  v18 = pseudoheader;
  if ( pseudoheader )
  {
    v19 = udp_len;
    v20 = (udp_len[5] << 8) | udp_len[4];
    v51 = (udp_len[1] << 8) | *udp_len;
    v52 = (udp_len[3] << 8) | udp_len[2];
    v21 = ((_WORD)v20 << 8) | (v20 >> 8);
    if ( set_do )
    {
      v21 |= 0x8000u;
      udp_len[4] = HIBYTE(v21);
      v19[5] = v21;
    }
    v22 = (v19[7] << 8) | v19[6];
    v23 = v19 + 8;
    v24 = (unsigned __int16)(((_WORD)v22 << 8) | (v22 >> 8));
    p = v19 + 8;
    if ( v16 < v19 + 8 - (unsigned __int8 *)header + v24 || !optno )
      return v16;
    v25 = is_last;
    if ( v24 >= 5 )
    {
      v26 = (v19[11] << 8) | v19[10];
      v27 = (v19[9] << 8) | v19[8];
      v28 = (unsigned __int16)(((_WORD)v26 << 8) | (v26 >> 8));
      v29 = v27 >> 8;
      LOWORD(v26) = (_WORD)v27 << 8;
      v30 = v28 + 4;
      v31 = (unsigned __int16)(v26 | v29);
      v32 = v19 + 0xC;
      if ( v24 < v28 + 4 )
      {
LABEL_39:
        is_last = 0;
        v18 = 0;
LABEL_40:
        udp_sz = ((_WORD)v51 << 8) | (v51 >> 8);
        v40 = ((_WORD)v52 << 8) | (v52 >> 8);
        v16 = rrfilter(header, v16, 0);
        goto LABEL_24;
      }
      v33 = 0;
      if ( !replace )
      {
        v36 = 0;
        while ( v31 != optno )
        {
          v36 += v28 + 4;
          v23 = &v32[v28];
          if ( v36 + 4 >= v24 )
            goto LABEL_33;
          v37 = (v23[3] << 8) | v23[2];
          v38 = (v23[1] << 8) | *v23;
          v28 = (unsigned __int16)(((_WORD)v37 << 8) | (v37 >> 8));
          v31 = (unsigned __int16)(((_WORD)v38 << 8) | (v38 >> 8));
          v32 = v23 + 4;
          if ( v24 < v28 + v36 + 4 )
            goto LABEL_39;
        }
        return v16;
      }
      while ( 1 )
      {
        if ( v31 == optno )
        {
          v24 -= v30;
          i = v33;
          memcpy(v23, &v23[v28 + 4], v24 - v33);
          v33 = i;
          v19[6] = BYTE1(v24);
          v19[7] = v24;
        }
        else
        {
          v23 = &v32[v28];
          v33 += v30;
        }
        if ( v33 + 4 >= v24 )
          break;
        v34 = (v23[3] << 8) | v23[2];
        v35 = (v23[1] << 8) | *v23;
        v28 = (unsigned __int16)(((_WORD)v34 << 8) | (v34 >> 8));
        v31 = (unsigned __int16)(((_WORD)v35 << 8) | (v35 >> 8));
        v32 = v23 + 4;
        if ( v24 < v28 + v33 + 4 )
          goto LABEL_39;
        v30 = v28 + 4;
      }
LABEL_33:
      v25 = is_last;
    }
    if ( v25 )
    {
      v45 = v23 + 4;
      result = v16;
      if ( limit - (v23 + 4) < (int)optlen )
        return result;
      v44 = v19 + 6;
      goto LABEL_43;
    }
    if ( v24 )
    {
      v46 = (unsigned __int8 *)whine_malloc(v24);
      v18 = v46;
      if ( v46 )
        memcpy(v46, p, v24);
      v17 = v24;
    }
    else
    {
      v17 = 0;
      v18 = 0;
    }
    goto LABEL_40;
  }
  v40 = 0;
  v21 = (set_do != 0) << 15;
LABEL_24:
  v41 = skip_questions(header, v16);
  if ( !v41 )
    return v16;
  v42 = (_BYTE *)skip_section(
                   v41,
                   (unsigned __int16)((header->ancount << 8) | HIBYTE(header->ancount))
                 + (unsigned __int16)((header->nscount << 8) | HIBYTE(header->nscount))
                 + (unsigned __int16)((header->arcount << 8) | HIBYTE(header->arcount)),
                   header,
                   v16);
  if ( !v42 )
    return v16;
  v43 = v42 + 0xB;
  if ( limit < v42 + 0xB )
    return v16;
  v42[8] = v21;
  *v42 = 0;
  v42[1] = 0;
  v42[2] = 41;
  v42[3] = HIBYTE(udp_sz);
  v42[4] = udp_sz;
  v42[5] = HIBYTE(v40);
  v42[6] = v40;
  v42[7] = HIBYTE(v21);
  v44 = v42 + 9;
  v42[9] = BYTE1(v17);
  v42[10] = v17;
  LOWORD(p) = (_WORD)v42 + 0xB;
  if ( v18 )
  {
    v23 = (unsigned __int8 *)&v43[v17];
    if ( limit < (unsigned __int8 *)&v43[v17] )
    {
      free(v18);
      return v16;
    }
    memcpy(v43, v18, v17);
    free(v18);
  }
  else
  {
    v23 = v42 + 0xB;
  }
  v45 = v23 + 4;
  result = v16;
  if ( limit - (v23 + 4) < (int)optlen )
    return result;
  header->arcount = ((((unsigned __int16)(header->arcount << 8) | HIBYTE(header->arcount)) + 1) << 8) | ((unsigned __int16)(((header->arcount << 8) | HIBYTE(header->arcount)) + 1) >> 8);
  if ( !optno )
    return v23 - (unsigned __int8 *)header;
LABEL_43:
  result = v23 - (unsigned __int8 *)header;
  if ( replace != 2 )
  {
    if ( limit >= v45 )
    {
      v23[2] = BYTE1(optlen);
      *v23 = BYTE1(optno);
      v23[1] = optno;
      v23[3] = optlen;
      v47 = &v45[optlen];
      if ( limit >= &v45[optlen] )
      {
        memcpy(v45, opt, optlen);
        *v44 = (unsigned __int16)((_WORD)v47 - (_WORD)p) >> 8;
        v44[1] = (_BYTE)v47 - (_BYTE)p;
        return v47 - (unsigned __int8 *)header;
      }
    }
    return v16;
  }
  return result;
}
