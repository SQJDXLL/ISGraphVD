size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int a5,
        int a6,
        int a7,
        int a8,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int8 *pseudoheader; // $v0
  size_t v17; // $s0
  int v18; // $s3
  unsigned __int8 *v19; // $fp
  unsigned __int8 *v20; // $fp
  unsigned int v21; // $v0
  __int16 v22; // $s4
  unsigned int v23; // $v0
  signed int v24; // $s7
  unsigned int v25; // $v0
  unsigned int v26; // $a0
  signed int v27; // $v1
  int v28; // $v0
  unsigned __int8 *v29; // $a1
  char *v30; // $s6
  int v31; // $t3
  unsigned int v32; // $a1
  unsigned int v33; // $a0
  int v34; // $v1
  __int16 v35; // $s7
  int v36; // $a0
  size_t result; // $v0
  signed int v38; // $v0
  char *v39; // $a0
  _BOOL4 v40; // $s1
  _BYTE *v41; // $fp
  _BYTE *v42; // $v0
  _BYTE *v43; // $t0
  _BYTE *v44; // $s4
  unsigned __int8 *v45; // $v0
  int i; // [sp+24h] [-24h]
  int ia; // [sp+24h] [-24h]
  unsigned __int8 *t_cp; // [sp+2Ch] [-1Ch]
  unsigned int v49; // [sp+30h] [-18h]
  unsigned int v50; // [sp+34h] [-14h]
  unsigned __int8 *udp_len; // [sp+38h] [-10h] BYREF
  int is_sign; // [sp+3Ch] [-Ch] BYREF
  int is_last; // [sp+40h] [-8h] BYREF

  v17 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  v18 = is_sign;
  if ( is_sign )
    return v17;
  v19 = pseudoheader;
  if ( pseudoheader )
  {
    v20 = udp_len;
    v21 = (udp_len[5] << 8) | udp_len[4];
    v50 = (udp_len[1] << 8) | *udp_len;
    v49 = (udp_len[3] << 8) | udp_len[2];
    v22 = ((_WORD)v21 << 8) | (v21 >> 8);
    if ( set_do )
    {
      v22 |= 0x8000u;
      udp_len[4] = HIBYTE(v22);
      v20[5] = v22;
    }
    v23 = (v20[7] << 8) | v20[6];
    t_cp = v20 + 8;
    v24 = (unsigned __int16)(((_WORD)v23 << 8) | (v23 >> 8));
    if ( v17 < v20 + 8 - (unsigned __int8 *)header + v24 || !optno )
      return v17;
    if ( (unsigned __int16)(((_WORD)v23 << 8) | (v23 >> 8)) < 5u )
    {
      v30 = (char *)(v20 + 8);
      if ( is_last )
      {
        v38 = optlen;
LABEL_24:
        v39 = v30 + 4;
        v40 = limit - (unsigned __int8 *)(v30 + 4) < v38;
        result = v17;
        if ( v40 )
          return result;
        v41 = v20 + 6;
        goto LABEL_26;
      }
    }
    else
    {
      v25 = (v20[11] << 8) | v20[10];
      v26 = (v20[9] << 8) | v20[8];
      v27 = (unsigned __int16)(((_WORD)v25 << 8) | (v25 >> 8));
      v28 = (unsigned __int16)(((_WORD)v26 << 8) | (v26 >> 8));
      v29 = v20 + 0xC;
      if ( v24 < v27 )
      {
LABEL_20:
        is_last = 0;
        goto LABEL_21;
      }
      v30 = (char *)(v20 + 8);
      v31 = 0;
      while ( 1 )
      {
        if ( v28 == optno )
        {
          v34 = v27 + 4;
          if ( !replace )
            return v17;
          v24 -= v34;
          i = v31;
          memcpy(v30, &v30[v34], v24 - v31);
          v31 = i;
          v20[6] = BYTE1(v24);
          v20[7] = v24;
        }
        else
        {
          v30 = (char *)&v29[v27];
          v31 += v27 + 4;
        }
        if ( v31 + 4 >= v24 )
          break;
        v32 = ((unsigned __int8)v30[3] << 8) | (unsigned __int8)v30[2];
        v33 = ((unsigned __int8)v30[1] << 8) | (unsigned __int8)*v30;
        v27 = (unsigned __int16)(((_WORD)v32 << 8) | (v32 >> 8));
        v28 = (unsigned __int16)(((_WORD)v33 << 8) | (v33 >> 8));
        v29 = (unsigned __int8 *)(v30 + 4);
        if ( v24 < v27 + v31 )
          goto LABEL_20;
      }
      v38 = optlen;
      if ( is_last )
        goto LABEL_24;
    }
    if ( v24 )
    {
      v45 = (unsigned __int8 *)whine_malloc(v24);
      v19 = v45;
      if ( v45 )
        memcpy(v45, t_cp, v24);
      v18 = v24;
      goto LABEL_22;
    }
LABEL_21:
    v19 = 0;
LABEL_22:
    udp_sz = ((_WORD)v50 << 8) | (v50 >> 8);
    v35 = ((_WORD)v49 << 8) | (v49 >> 8);
    v17 = rrfilter(header, v17, 0);
    goto LABEL_17;
  }
  v35 = 0;
  v22 = (set_do != 0) << 15;
LABEL_17:
  v36 = skip_questions(header, v17);
  if ( !v36 )
    return v17;
  v42 = (_BYTE *)skip_section(
                   v36,
                   (unsigned __int16)((header->ancount << 8) | HIBYTE(header->ancount))
                 + (unsigned __int16)((header->nscount << 8) | HIBYTE(header->nscount))
                 + (unsigned __int16)((header->arcount << 8) | HIBYTE(header->arcount)),
                   header,
                   v17);
  v43 = v42;
  if ( !v42 )
    return v17;
  v42[9] = BYTE1(v18);
  v42[8] = v22;
  *v42 = 0;
  v42[1] = 0;
  v42[2] = 41;
  v42[3] = HIBYTE(udp_sz);
  v42[4] = udp_sz;
  v42[5] = HIBYTE(v35);
  v42[6] = v35;
  v42[7] = HIBYTE(v22);
  v42[10] = v18;
  v44 = v42 + 0xB;
  LOWORD(t_cp) = (_WORD)v42 + 0xB;
  if ( v19 )
  {
    ia = (int)v42;
    memcpy(v42 + 0xB, v19, v18);
    v30 = &v44[v18];
    free(v19);
    v43 = (_BYTE *)ia;
  }
  else
  {
    v30 = v42 + 0xB;
  }
  v39 = v30 + 4;
  result = v17;
  if ( limit - (unsigned __int8 *)(v30 + 4) >= (int)optlen )
  {
    v41 = v43 + 9;
    header->arcount = ((((unsigned __int16)(header->arcount << 8) | HIBYTE(header->arcount)) + 1) << 8) | ((unsigned __int16)(((header->arcount << 8) | HIBYTE(header->arcount)) + 1) >> 8);
    if ( !optno )
      return v30 - (char *)header;
LABEL_26:
    if ( replace != 2 )
    {
      *v30 = BYTE1(optno);
      v30[2] = BYTE1(optlen);
      v30[1] = optno;
      v30[3] = optlen;
      v30 = &v39[optlen];
      memcpy(v39, opt, optlen);
      *v41 = (unsigned __int16)((_WORD)v30 - (_WORD)t_cp) >> 8;
      v41[1] = (_BYTE)v30 - (_BYTE)t_cp;
    }
    return v30 - (char *)header;
  }
  return result;
}
