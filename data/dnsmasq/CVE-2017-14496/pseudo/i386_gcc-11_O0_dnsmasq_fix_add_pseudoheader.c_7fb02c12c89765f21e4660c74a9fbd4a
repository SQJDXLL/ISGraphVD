size_t __cdecl add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  __int16 v9; // ax
  int v11; // esi
  int v12; // esi
  uint16_t v13; // ax
  unsigned __int8 *v14; // eax
  uint16_t v15; // ax
  unsigned __int16 flags; // [esp+1Ch] [ebp-8Ch]
  unsigned __int16 rcode; // [esp+1Eh] [ebp-8Ah]
  unsigned __int16 code; // [esp+22h] [ebp-86h]
  unsigned __int16 len; // [esp+24h] [ebp-84h]
  unsigned __int8 t_s_0; // [esp+26h] [ebp-82h]
  unsigned __int8 t_s_5; // [esp+30h] [ebp-78h]
  unsigned __int8 t_s_8; // [esp+36h] [ebp-72h]
  unsigned __int8 *udp_len; // [esp+38h] [ebp-70h] BYREF
  int is_sign; // [esp+3Ch] [ebp-6Ch] BYREF
  int is_last; // [esp+40h] [ebp-68h] BYREF
  unsigned __int8 *lenp; // [esp+44h] [ebp-64h]
  unsigned __int8 *datap; // [esp+48h] [ebp-60h]
  unsigned __int8 *p; // [esp+4Ch] [ebp-5Ch]
  unsigned __int8 *buff; // [esp+50h] [ebp-58h]
  int rdlen; // [esp+54h] [ebp-54h]
  int i; // [esp+58h] [ebp-50h]
  unsigned __int8 *t_cp; // [esp+5Ch] [ebp-4Ch]
  unsigned __int8 *t_cp_0; // [esp+60h] [ebp-48h]
  unsigned __int8 *t_cp_1; // [esp+64h] [ebp-44h]
  unsigned __int8 *t_cp_2; // [esp+68h] [ebp-40h]
  unsigned __int8 *t_cp_3; // [esp+6Ch] [ebp-3Ch]
  unsigned __int8 *t_cp_4; // [esp+70h] [ebp-38h]
  unsigned __int8 *t_cp_5; // [esp+74h] [ebp-34h]
  unsigned __int8 *t_cp_6; // [esp+78h] [ebp-30h]
  unsigned __int8 *t_cp_7; // [esp+7Ch] [ebp-2Ch]
  unsigned __int8 *t_cp_8; // [esp+80h] [ebp-28h]
  unsigned __int8 *t_cp_9; // [esp+84h] [ebp-24h]
  unsigned __int8 *t_cp_10; // [esp+88h] [ebp-20h]
  unsigned __int8 *t_cp_11; // [esp+8Ch] [ebp-1Ch]
  unsigned __int8 *t_cp_12; // [esp+90h] [ebp-18h]
  unsigned __int8 *t_cp_13; // [esp+94h] [ebp-14h]
  unsigned __int8 *t_cp_14; // [esp+98h] [ebp-10h]
  unsigned int v49; // [esp+9Ch] [ebp-Ch]

  v49 = __readgsdword(0x14u);
  buff = 0;
  rdlen = 0;
  if ( set_do )
    v9 = 0x8000;
  else
    v9 = 0;
  flags = v9;
  rcode = 0;
  p = find_pseudoheader(header, plen, 0, &udp_len, &is_sign, &is_last);
  if ( is_sign )
    return plen;
  if ( p )
  {
    p = udp_len;
    t_cp = udp_len;
    udp_sz = _byteswap_ushort(*(_WORD *)udp_len);
    p = udp_len + 2;
    t_cp_0 = udp_len + 2;
    rcode = _byteswap_ushort(*((_WORD *)udp_len + 1));
    p = udp_len + 4;
    t_cp_1 = udp_len + 4;
    flags = _byteswap_ushort(*((_WORD *)udp_len + 2));
    p = udp_len + 6;
    if ( set_do )
    {
      p -= 2;
      flags |= 0x8000u;
      t_cp_2 = p + 1;
      *p = HIBYTE(flags);
      *t_cp_2 = flags;
      p += 2;
    }
    lenp = p;
    t_cp_3 = p;
    rdlen = (*p << 8) | p[1];
    p += 2;
    if ( plen < p - (unsigned __int8 *)header + rdlen )
      return plen;
    datap = p;
    if ( !optno )
      return plen;
    i = 0;
    while ( rdlen > i + 4 )
    {
      t_cp_4 = p;
      code = _byteswap_ushort(*(_WORD *)p);
      p += 2;
      t_cp_5 = p;
      len = _byteswap_ushort(*(_WORD *)p);
      p += 2;
      if ( rdlen < i + 4 + len )
      {
        rdlen = 0;
        is_last = 0;
        break;
      }
      if ( optno == code )
      {
        if ( !replace )
          return plen;
        p -= 4;
        rdlen -= len + 4;
        memcpy(p, &p[len + 4], rdlen - i);
        t_s_0 = rdlen;
        t_cp_6 = lenp + 1;
        *lenp = BYTE1(rdlen);
        *t_cp_6 = t_s_0;
        lenp += 2;
        lenp -= 2;
      }
      else
      {
        p += len;
        i += len + 4;
      }
    }
    if ( !is_last )
    {
      if ( rdlen )
      {
        buff = (unsigned __int8 *)whine_malloc(rdlen);
        if ( buff )
          memcpy(buff, datap, rdlen);
      }
      plen = rrfilter(header, plen, 0);
      p = 0;
    }
  }
  if ( !p )
  {
    p = (unsigned __int8 *)skip_questions(header, plen);
    if ( !p )
      return plen;
    v11 = ntohs(header->ancount);
    v12 = ntohs(header->nscount) + v11;
    v13 = ntohs(header->arcount);
    p = (unsigned __int8 *)skip_section(p, v12 + v13, header, plen);
    if ( !p )
      return plen;
    if ( limit < p + 11 )
      return plen;
    v14 = p++;
    *v14 = 0;
    t_cp_7 = p + 1;
    *p = 0;
    *t_cp_7 = 41;
    p += 2;
    t_cp_8 = p + 1;
    *p = HIBYTE(udp_sz);
    *t_cp_8 = udp_sz;
    p += 2;
    t_cp_9 = p + 1;
    *p = HIBYTE(rcode);
    *t_cp_9 = rcode;
    p += 2;
    t_cp_10 = p + 1;
    *p = HIBYTE(flags);
    *t_cp_10 = flags;
    p += 2;
    lenp = p;
    t_s_5 = rdlen;
    t_cp_11 = p + 1;
    *p = BYTE1(rdlen);
    *t_cp_11 = t_s_5;
    p += 2;
    datap = p;
    if ( buff )
    {
      if ( limit < &p[rdlen] )
      {
        free(buff);
        return plen;
      }
      memcpy(p, buff, rdlen);
      free(buff);
      p += rdlen;
    }
    if ( limit - (p + 4) >= (int)optlen )
    {
      v15 = ntohs(header->arcount);
      header->arcount = htons(v15 + 1);
    }
  }
  if ( limit - (p + 4) < (int)optlen )
    return plen;
  if ( optno && replace != 2 )
  {
    if ( limit < p + 4 )
      return plen;
    t_cp_12 = p + 1;
    *p = BYTE1(optno);
    *t_cp_12 = optno;
    p += 2;
    t_cp_13 = p + 1;
    *p = BYTE1(optlen);
    *t_cp_13 = optlen;
    p += 2;
    if ( limit < &p[optlen] )
      return plen;
    memcpy(p, opt, optlen);
    p += optlen;
    t_s_8 = (_BYTE)p - (_BYTE)datap;
    t_cp_14 = lenp + 1;
    *lenp = (unsigned __int16)((_WORD)p - (_WORD)datap) >> 8;
    *t_cp_14 = t_s_8;
    lenp += 2;
  }
  return p - (unsigned __int8 *)header;
}
