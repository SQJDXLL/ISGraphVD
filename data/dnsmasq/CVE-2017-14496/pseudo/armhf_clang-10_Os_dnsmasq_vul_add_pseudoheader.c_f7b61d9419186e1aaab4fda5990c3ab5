int __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned int udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  size_t v9; // r9
  void *v13; // r6
  unsigned __int8 *pseudoheader; // r0
  int v16; // r12
  char v17; // r4
  unsigned __int8 *v18; // r6
  unsigned __int8 v19; // r3
  unsigned __int8 v20; // lr
  unsigned __int8 v21; // r10
  unsigned __int8 v22; // r2
  unsigned __int8 v23; // r4
  unsigned __int8 v24; // r7
  int v25; // r7
  unsigned __int8 *v26; // r10
  int v27; // r4
  int v28; // r0
  unsigned __int8 *v29; // r2
  signed int v30; // r4
  unsigned __int8 *v31; // r3
  void *v32; // r0
  void *v33; // r10
  int v34; // r0
  _BYTE *v35; // r0
  _BYTE *v36; // r5
  _BYTE *v37; // r6
  unsigned int v38; // r0
  unsigned __int8 *v39; // r6
  bool v40; // zf
  __int16 v41; // r0
  unsigned __int8 v42; // [sp+Ch] [bp-4Ch]
  unsigned __int8 src; // [sp+10h] [bp-48h]
  void *srca; // [sp+10h] [bp-48h]
  _BYTE *v45; // [sp+14h] [bp-44h]
  unsigned __int8 v46; // [sp+18h] [bp-40h]
  unsigned __int8 v47; // [sp+1Ch] [bp-3Ch]
  unsigned int v48; // [sp+20h] [bp-38h]
  unsigned __int8 v49; // [sp+24h] [bp-34h]
  void *dest; // [sp+28h] [bp-30h]
  unsigned __int8 *v51; // [sp+2Ch] [bp-2Ch]
  int is_last; // [sp+30h] [bp-28h] BYREF
  int is_sign; // [sp+34h] [bp-24h] BYREF
  unsigned __int8 *udp_len; // [sp+38h] [bp-20h] BYREF

  v9 = plen;
  v13 = 0;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  if ( is_sign )
    return v9;
  v16 = optno;
  v17 = set_do;
  if ( set_do )
    v17 = 0x80;
  if ( !pseudoheader )
  {
    v51 = limit;
    v25 = 0;
    v48 = udp_sz >> 8;
    v47 = 0;
    v46 = 0;
    v49 = 0;
    goto LABEL_31;
  }
  v18 = udp_len;
  if ( set_do )
    LOBYTE(pseudoheader) = 0x80;
  v19 = udp_len[4];
  v20 = udp_len[5];
  v21 = *udp_len;
  v22 = udp_len[1];
  v23 = udp_len[2];
  v24 = udp_len[3];
  if ( set_do )
  {
    v19 |= (unsigned __int8)pseudoheader;
    udp_len[4] = v19;
  }
  if ( optno )
  {
    v51 = limit;
    v49 = v24;
    v45 = v18 + 6;
    v25 = v18[7] | (v18[6] << 8);
    dest = v18 + 8;
    if ( v18 + 8 - (unsigned __int8 *)header + v25 <= v9 )
    {
      v46 = v23;
      v47 = v20;
      LOBYTE(v48) = v21;
      v42 = v19;
      src = v22;
      if ( (unsigned int)v25 < 5 )
      {
        v26 = v18 + 8;
LABEL_23:
        if ( is_last )
        {
          v30 = optlen;
          v31 = limit;
LABEL_38:
          v39 = v26 + 4;
          if ( v31 - (v26 + 4) >= v30 )
          {
            v40 = v16 == 0;
            if ( v16 )
              v40 = replace == 2;
            if ( !v40 )
            {
              v26[3] = v30;
              v26[1] = v16;
              v26[2] = BYTE1(v30);
              *v26 = BYTE1(v16);
              memcpy(v26 + 4, opt, v30);
              v26 = &v39[v30];
              v41 = (_WORD)v39 + v30 - (_WORD)dest;
              v45[1] = v41;
              *v45 = HIBYTE(v41);
            }
            return v26 - (unsigned __int8 *)header;
          }
          return v9;
        }
        v13 = 0;
        if ( v25 )
        {
          v32 = (void *)whine_malloc(v25);
          if ( v32 )
          {
            v33 = v32;
            memcpy(v32, dest, v25);
            v13 = v33;
          }
        }
        else
        {
          v25 = 0;
        }
      }
      else
      {
        v26 = v18 + 8;
        v27 = 0;
        while ( 1 )
        {
          v28 = v26[3] | (v26[2] << 8);
          if ( v28 + v27 > v25 )
            break;
          v29 = v26 + 4;
          if ( (v26[1] | (*v26 << 8)) == v16 )
          {
            if ( !replace )
              return v9;
            v25 = v25 - v28 - 4;
            memcpy(v26, &v29[v28], v25 - v27);
            v16 = optno;
            v18[7] = v25;
            v18[6] = BYTE1(v25);
          }
          else
          {
            v26 = &v29[v28];
            v27 += v28 + 4;
          }
          if ( v27 + 4 >= v25 )
            goto LABEL_23;
        }
        v25 = 0;
        v13 = 0;
        is_last = 0;
      }
      LOBYTE(udp_sz) = src;
      v17 = v42;
      v9 = rrfilter(header, v9, 0);
LABEL_31:
      v34 = skip_questions(header, v9);
      if ( !v34 )
        return v9;
      srca = v13;
      v35 = (_BYTE *)skip_section(
                       v34,
                       ((unsigned int)((header->nscount << 8) & 0xFF0000 | (header->nscount << 24)) >> 16)
                     + ((unsigned int)((header->ancount << 8) & 0xFF0000 | (header->ancount << 24)) >> 0x10)
                     + ((unsigned int)((header->arcount << 8) & 0xFF0000 | (header->arcount << 24)) >> 0x10),
                       header,
                       v9);
      if ( !v35 )
        return v9;
      v35[7] = v17;
      v36 = v35 + 0xB;
      v35[4] = udp_sz;
      v35[10] = v25;
      v26 = v35 + 0xB;
      v35[8] = v47;
      v35[6] = v49;
      v35[5] = v46;
      v35[3] = v48;
      v35[2] = 41;
      v35[1] = 0;
      *v35 = 0;
      v35[9] = BYTE1(v25);
      v37 = v35 + 9;
      if ( srca )
      {
        memcpy(v35 + 0xB, srca, v25);
        free(srca);
        v26 = &v36[v25];
      }
      v31 = v51;
      v30 = optlen;
      LOWORD(dest) = (_WORD)v36;
      v45 = v37;
      if ( v51 - v26 - 4 >= (int)optlen )
      {
        v38 = ((unsigned int)((header->arcount << 8) & 0xFF0000 | (header->arcount << 24)) >> 0x10) + 1;
        header->arcount = ((v38 << 8) & 0xFF0000 | (v38 << 24)) >> 16;
      }
      v16 = optno;
      goto LABEL_38;
    }
  }
  return v9;
}
