size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  dns_header *v10; // r12
  size_t v12; // rbx
  unsigned __int8 *pseudoheader; // rax
  __int64 v14; // r9
  unsigned __int8 *v15; // r10
  unsigned __int8 *v16; // rdi
  __int64 v17; // r8
  int v18; // r15d
  __int64 v19; // rdx
  unsigned __int8 *v20; // r11
  __int64 v21; // rcx
  int v22; // r12d
  unsigned __int8 *v23; // r13
  unsigned __int8 *v24; // rdi
  int v25; // r14d
  int v26; // ebp
  unsigned int v27; // r15d
  unsigned __int64 v28; // r14
  unsigned __int8 *v29; // r8
  _WORD *v30; // r15
  __int16 v32; // r15
  __int16 v33; // r8
  __int64 v34; // rax
  __int64 v35; // rax
  __int64 v36; // rcx
  dns_header *v37; // r10
  __int64 v38; // rax
  dns_header *v39; // rax
  dns_header *v40; // rax
  void *rdlen; // [rsp+18h] [rbp-80h]
  int rdlena; // [rsp+18h] [rbp-80h]
  int rdlenb; // [rsp+18h] [rbp-80h]
  __int16 ptr; // [rsp+20h] [rbp-78h]
  __int16 ptra; // [rsp+20h] [rbp-78h]
  int ptrb; // [rsp+20h] [rbp-78h]
  __int16 buff; // [rsp+28h] [rbp-70h]
  unsigned __int8 *buffa; // [rsp+28h] [rbp-70h]
  __int16 buffb; // [rsp+28h] [rbp-70h]
  unsigned __int8 *buffc; // [rsp+28h] [rbp-70h]
  unsigned __int16 flags; // [rsp+30h] [rbp-68h]
  unsigned __int8 *flagsa; // [rsp+30h] [rbp-68h]
  __int16 flagsc; // [rsp+30h] [rbp-68h]
  __int16 flagsb; // [rsp+30h] [rbp-68h]
  dns_header *headera; // [rsp+38h] [rbp-60h]
  dns_header *headerb; // [rsp+38h] [rbp-60h]
  int is_sign; // [rsp+48h] [rbp-50h] BYREF
  int is_last; // [rsp+4Ch] [rbp-4Ch] BYREF
  unsigned __int8 *t_cp[9]; // [rsp+50h] [rbp-48h] BYREF

  v10 = header;
  v12 = plen;
  t_cp[1] = (unsigned __int8 *)__readfsqword(0x28u);
  pseudoheader = find_pseudoheader(header, plen, 0LL, t_cp, &is_sign, &is_last);
  v14 = (unsigned int)is_sign;
  if ( is_sign )
    return v12;
  v15 = pseudoheader;
  if ( !pseudoheader )
  {
    v32 = 0;
    v33 = (set_do != 0) << 15;
    goto LABEL_25;
  }
  v16 = t_cp[0];
  v17 = *((unsigned __int16 *)t_cp[0] + 2);
  ptr = *(_WORD *)t_cp[0];
  LOWORD(v17) = __ROL2__(v17, 8);
  buff = *((_WORD *)t_cp[0] + 1);
  if ( set_do )
  {
    LOWORD(v17) = v17 | 0x8000;
    *((_WORD *)t_cp[0] + 2) = __ROL2__(v17, 8);
  }
  rdlen = v16 + 8;
  LOWORD(v18) = __ROL2__(*((_WORD *)v16 + 3), 8);
  v19 = (unsigned __int16)v18;
  if ( plen < (unsigned __int64)(unsigned __int16)v18 + v16 + 8 - (unsigned __int8 *)v10 || !optno )
    return v12;
  v18 = (unsigned __int16)v18;
  if ( (unsigned __int16)v18 > 4u )
  {
    v21 = *((unsigned __int16 *)v16 + 4);
    v20 = v16 + 12;
    LOWORD(v19) = __ROL2__(*((_WORD *)v16 + 5), 8);
    LOWORD(v21) = __ROL2__(v21, 8);
    plen = (unsigned __int16)v19;
    if ( (unsigned __int16)v18 >= (unsigned __int16)v19 + 4 )
    {
      headera = v10;
      v22 = 0;
      v23 = v16;
      v24 = v16 + 8;
      flags = v17;
      v25 = optno;
      v26 = (unsigned __int16)v18;
      v27 = v14;
      do
      {
        if ( (unsigned __int16)v21 == v25 )
        {
          if ( !replace )
            return v12;
          v26 -= plen + 4;
          plen = (size_t)&v24[(unsigned __int16)v19 + 4];
          v24 = (unsigned __int8 *)memcpy(v24, (const void *)plen, v26 - v22);
          *((_WORD *)v23 + 3) = __ROL2__(v26, 8);
        }
        else
        {
          v19 = (unsigned __int16)v19;
          v22 += plen + 4;
          v24 = &v20[(unsigned __int16)v19];
        }
        if ( v22 + 4 >= v26 )
        {
          v17 = flags;
          v10 = headera;
          v14 = v27;
          v18 = v26;
          optno = v25;
          v28 = (unsigned __int64)v24;
          v16 = v23;
          goto LABEL_17;
        }
        v21 = *(unsigned __int16 *)v24;
        v20 = v24 + 4;
        LOWORD(v19) = __ROL2__(*((_WORD *)v24 + 1), 8);
        LOWORD(v21) = __ROL2__(v21, 8);
        plen = (unsigned __int16)v19;
      }
      while ( (unsigned __int16)v19 + v22 + 4 <= v26 );
      LOWORD(v17) = flags;
      v10 = headera;
      LODWORD(v14) = v27;
      optno = v25;
    }
    is_last = 0;
    goto LABEL_35;
  }
  v28 = (unsigned __int64)(v16 + 8);
LABEL_17:
  v21 = (unsigned int)is_last;
  if ( !is_last )
  {
    if ( v18 )
    {
      flagsb = v17;
      v39 = (dns_header *)whine_malloc(v18, plen, v19, (unsigned int)is_last, v17, v14);
      LOWORD(v17) = flagsb;
      v37 = v39;
      if ( v39 )
      {
        v40 = (dns_header *)memcpy(v39, rdlen, v18);
        LOWORD(v17) = flagsb;
        v37 = v40;
      }
      LODWORD(v14) = v18;
      goto LABEL_36;
    }
LABEL_35:
    v37 = 0LL;
LABEL_36:
    headerb = v37;
    flagsc = v17;
    udp_sz = __ROL2__(ptr, 8);
    rdlenb = v14;
    v32 = __ROL2__(buff, 8);
    v38 = rrfilter(v10, v12, 0LL, v21);
    LODWORD(v14) = rdlenb;
    v33 = flagsc;
    v15 = (unsigned __int8 *)headerb;
    v12 = v38;
LABEL_25:
    buffa = v15;
    ptra = v33;
    rdlena = v14;
    v34 = skip_questions(v10, v12);
    if ( !v34 )
      return v12;
    flagsa = buffa;
    buffb = ptra;
    ptrb = rdlena;
    v35 = skip_section(
            v34,
            (unsigned __int16)__ROL2__(v10->arcount, 8)
          + (unsigned __int16)__ROL2__(v10->nscount, 8)
          + (unsigned int)(unsigned __int16)__ROL2__(v10->ancount, 8),
            v10,
            v12);
    v36 = v35;
    if ( !v35 )
      return v12;
    rdlen = (void *)(v35 + 11);
    if ( (unsigned __int64)limit < v35 + 11 )
      return v12;
    *(_BYTE *)(v35 + 2) = 41;
    *(_WORD *)v35 = 0;
    *(_QWORD *)(v35 + 3) = HIBYTE(udp_sz) | (((unsigned __int8)udp_sz | ((HIBYTE(v32) | (((unsigned __int8)v32 | ((HIBYTE(buffb) | (((unsigned __int8)buffb | ((BYTE1(ptrb) | ((unsigned __int64)(unsigned __int8)ptrb << 8)) << 8)) << 8)) << 8)) << 8)) << 8)) << 8);
    if ( flagsa )
    {
      v28 = v35 + 11 + ptrb;
      if ( (unsigned __int64)limit < v28 )
      {
        free(flagsa);
        return v12;
      }
      buffc = (unsigned __int8 *)v35;
      memcpy(rdlen, flagsa, ptrb);
      free(flagsa);
      v36 = (__int64)buffc;
    }
    else
    {
      v28 = v35 + 11;
    }
    v29 = (unsigned __int8 *)(v28 + 4);
    if ( (__int64)&limit[-v28 - 4] >= (__int64)optlen )
    {
      v30 = (_WORD *)(v36 + 9);
      v10->arcount = __ROL2__(__ROL2__(v10->arcount, 8) + 1, 8);
      goto LABEL_19;
    }
    return v12;
  }
  v29 = (unsigned __int8 *)(v28 + 4);
  v30 = v16 + 6;
  if ( (__int64)&limit[-v28 - 4] < (__int64)optlen )
    return v12;
LABEL_19:
  if ( optno && replace != 2 )
  {
    if ( limit < v29 )
      return v12;
    *(_DWORD *)v28 = BYTE1(optno) | (((unsigned __int8)optno | ((BYTE1(optlen) | ((unsigned __int8)optlen << 8)) << 8)) << 8);
    v28 = (unsigned __int64)&v29[optlen];
    if ( limit < &v29[optlen] )
      return v12;
    memcpy(v29, opt, optlen);
    *v30 = __ROL2__(v28 - (_WORD)rdlen, 8);
  }
  return v28 - (_QWORD)v10;
}
