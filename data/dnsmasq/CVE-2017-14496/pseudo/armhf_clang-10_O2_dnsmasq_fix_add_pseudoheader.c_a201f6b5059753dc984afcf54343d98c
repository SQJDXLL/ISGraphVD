unsigned __int8 *__fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned int udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  size_t v9; // r8
  dns_header *v10; // r4
  void *v13; // r9
  unsigned __int8 *pseudoheader; // r0
  int v16; // r5
  char v17; // r2
  unsigned __int8 *v18; // r7
  unsigned __int8 v19; // r3
  unsigned __int8 v20; // lr
  unsigned __int8 v21; // r12
  unsigned __int8 v22; // r9
  unsigned __int8 v23; // r10
  unsigned __int8 v24; // r2
  int v25; // r6
  int v26; // r4
  int v27; // r9
  int v28; // r0
  unsigned __int8 *v29; // r10
  int v30; // r2
  unsigned __int8 *v31; // r0
  unsigned __int8 *v32; // r7
  signed int v33; // r2
  void *v34; // r0
  void *v35; // r4
  int v36; // r0
  char v37; // r5
  _BYTE *v38; // r0
  char *v39; // r1
  __int16 v40; // r5
  unsigned int v41; // r0
  unsigned __int8 *v42; // r0
  bool v43; // zf
  unsigned __int8 v44; // [sp+8h] [bp-50h]
  void *src; // [sp+Ch] [bp-4Ch]
  _BYTE *v46; // [sp+10h] [bp-48h]
  unsigned __int8 v47; // [sp+14h] [bp-44h]
  unsigned __int8 v48; // [sp+18h] [bp-40h]
  unsigned __int8 v49; // [sp+1Ch] [bp-3Ch]
  unsigned int v50; // [sp+20h] [bp-38h]
  unsigned __int8 *v51; // [sp+24h] [bp-34h]
  dns_header *v52; // [sp+28h] [bp-30h]
  char v53; // [sp+2Ch] [bp-2Ch]
  int is_last; // [sp+30h] [bp-28h] BYREF
  int is_sign; // [sp+34h] [bp-24h] BYREF
  unsigned __int8 *udp_len; // [sp+38h] [bp-20h] BYREF

  v9 = plen;
  v10 = header;
  v13 = 0;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  if ( is_sign )
    return (unsigned __int8 *)v9;
  v16 = optno;
  v17 = set_do;
  if ( set_do )
    v17 = 0x80;
  if ( !pseudoheader )
  {
    v53 = v17;
    v25 = 0;
    v50 = udp_sz >> 8;
    v49 = 0;
    v48 = 0;
    v47 = 0;
    goto LABEL_30;
  }
  v18 = udp_len;
  v51 = limit;
  if ( set_do )
    LOBYTE(pseudoheader) = 0x80;
  v19 = udp_len[4];
  v20 = udp_len[5];
  v21 = *udp_len;
  v22 = udp_len[1];
  v23 = udp_len[2];
  v24 = udp_len[3];
  if ( set_do )
  {
    v19 |= (unsigned __int8)pseudoheader;
    udp_len[4] = v19;
  }
  if ( optno )
  {
    v53 = v19;
    v46 = v18 + 6;
    v25 = v18[7] | (v18[6] << 8);
    if ( v18 + 8 - (unsigned __int8 *)v10 + v25 <= v9 )
    {
      v52 = v10;
      v44 = v22;
      LOBYTE(v50) = v21;
      src = v18 + 8;
      v47 = v24;
      v48 = v23;
      v49 = v20;
      if ( (unsigned int)v25 < 5 )
      {
        v26 = replace;
        v29 = v18 + 8;
LABEL_22:
        if ( is_last )
        {
          v32 = v51;
          v33 = optlen;
          goto LABEL_40;
        }
        limit = v51;
        v13 = 0;
        if ( v25 )
        {
          v34 = (void *)whine_malloc(v25);
          if ( v34 )
          {
            v35 = v34;
            memcpy(v34, src, v25);
            v13 = v35;
          }
        }
        else
        {
          v25 = 0;
        }
      }
      else
      {
        v26 = replace;
        v27 = 0;
        v28 = 4;
        v29 = v18 + 8;
        while ( 1 )
        {
          v30 = v29[3] | (v29[2] << 8);
          if ( v30 + v28 > v25 )
            break;
          v31 = v29 + 4;
          if ( (v29[1] | (*v29 << 8)) == v16 )
          {
            if ( !replace )
              return (unsigned __int8 *)v9;
            v25 = v25 - v30 - 4;
            memcpy(v29, &v31[v30], v25 - v27);
            v16 = optno;
            v18[7] = v25;
            v18[6] = BYTE1(v25);
          }
          else
          {
            v29 = &v31[v30];
            v27 += v30 + 4;
          }
          v28 = v27 + 4;
          if ( v27 + 4 >= v25 )
            goto LABEL_22;
        }
        limit = v51;
        v25 = 0;
        v13 = 0;
        is_last = 0;
      }
      v10 = v52;
      LOBYTE(udp_sz) = v44;
      v9 = rrfilter(v52, v9, 0);
LABEL_30:
      v36 = skip_questions(v10, v9);
      if ( !v36 )
        return (unsigned __int8 *)v9;
      v37 = udp_sz;
      v52 = v10;
      v38 = (_BYTE *)skip_section(
                       v36,
                       ((unsigned int)((v10->nscount << 8) & 0xFF0000 | (v10->nscount << 24)) >> 16)
                     + ((unsigned int)((v10->ancount << 8) & 0xFF0000 | (v10->ancount << 24)) >> 0x10)
                     + ((unsigned int)((v10->arcount << 8) & 0xFF0000 | (v10->arcount << 24)) >> 0x10),
                       v10,
                       v9);
      if ( !v38 )
        return (unsigned __int8 *)v9;
      v39 = v38 + 0xB;
      if ( v38 + 0xB > limit )
        return (unsigned __int8 *)v9;
      v26 = replace;
      v32 = limit;
      v38[10] = v25;
      v38[4] = v37;
      v29 = v38 + 0xB;
      v38[8] = v49;
      v38[7] = v53;
      v38[6] = v47;
      v38[5] = v48;
      v38[3] = v50;
      v38[2] = 41;
      v38[1] = 0;
      *v38 = 0;
      v38[9] = BYTE1(v25);
      v46 = v38 + 9;
      if ( v13 )
      {
        v29 = (unsigned __int8 *)&v39[v25];
        if ( &v39[v25] > (char *)v32 )
        {
          free(v13);
          return (unsigned __int8 *)v9;
        }
        v40 = (_WORD)v38 + 0xB;
        memcpy(v39, v13, v25);
        free(v13);
        LOWORD(v39) = v40;
      }
      v33 = optlen;
      LOWORD(src) = (_WORD)v39;
      if ( v32 - v29 - 4 >= (int)optlen )
      {
        v41 = ((unsigned int)((v52->arcount << 8) & 0xFF0000 | (v52->arcount << 24)) >> 0x10) + 1;
        v52->arcount = ((v41 << 8) & 0xFF0000 | (v41 << 24)) >> 16;
      }
      v16 = optno;
LABEL_40:
      v42 = v29 + 4;
      if ( v32 - (v29 + 4) < v33 )
        return (unsigned __int8 *)v9;
      v43 = v16 == 0;
      if ( v16 )
        v43 = v26 == 2;
      if ( !v43 )
      {
        if ( v42 > v32 )
          return (unsigned __int8 *)v9;
        v29[3] = v33;
        v29[1] = v16;
        v29[2] = BYTE1(v33);
        *v29 = BYTE1(v16);
        v29 = &v42[v33];
        if ( &v42[v33] > v32 )
          return (unsigned __int8 *)v9;
        memcpy(v42, opt, v33);
        v46[1] = (_BYTE)v29 - (_BYTE)src;
        *v46 = (unsigned __int16)((_WORD)v29 - (_WORD)src) >> 8;
      }
      return (unsigned __int8 *)(v29 - (unsigned __int8 *)v52);
    }
  }
  return (unsigned __int8 *)v9;
}
