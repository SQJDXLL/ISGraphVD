size_t __cdecl add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  __int16 v9; // r3
  int v11; // r4
  int v12; // r4
  int v13; // r0
  unsigned __int8 *v14; // r3
  uint16_t v15; // r0
  unsigned int plena; // [sp+18h] [bp-9Ch]
  unsigned __int16 flags; // [sp+24h] [bp-90h]
  unsigned __int16 rcode; // [sp+26h] [bp-8Eh]
  unsigned __int16 code; // [sp+2Ah] [bp-8Ah]
  unsigned __int16 len; // [sp+2Ch] [bp-88h]
  unsigned __int8 t_s_0; // [sp+2Eh] [bp-86h]
  unsigned __int8 t_s_5; // [sp+38h] [bp-7Ch]
  unsigned __int8 t_s_8; // [sp+3Eh] [bp-76h]
  unsigned __int8 *udp_len; // [sp+40h] [bp-74h] BYREF
  int is_sign; // [sp+44h] [bp-70h] BYREF
  int is_last; // [sp+48h] [bp-6Ch] BYREF
  unsigned __int8 *lenp; // [sp+4Ch] [bp-68h]
  unsigned __int8 *datap; // [sp+50h] [bp-64h]
  unsigned __int8 *p; // [sp+54h] [bp-60h]
  unsigned __int8 *buff; // [sp+58h] [bp-5Ch]
  int rdlen; // [sp+5Ch] [bp-58h]
  int i; // [sp+60h] [bp-54h]
  unsigned __int8 *t_cp; // [sp+64h] [bp-50h]
  unsigned __int8 *t_cp_0; // [sp+68h] [bp-4Ch]
  unsigned __int8 *t_cp_1; // [sp+6Ch] [bp-48h]
  unsigned __int8 *t_cp_2; // [sp+70h] [bp-44h]
  unsigned __int8 *t_cp_3; // [sp+74h] [bp-40h]
  unsigned __int8 *t_cp_4; // [sp+78h] [bp-3Ch]
  unsigned __int8 *t_cp_5; // [sp+7Ch] [bp-38h]
  unsigned __int8 *t_cp_6; // [sp+80h] [bp-34h]
  unsigned __int8 *t_cp_7; // [sp+84h] [bp-30h]
  unsigned __int8 *t_cp_8; // [sp+88h] [bp-2Ch]
  unsigned __int8 *t_cp_9; // [sp+8Ch] [bp-28h]
  unsigned __int8 *t_cp_10; // [sp+90h] [bp-24h]
  unsigned __int8 *t_cp_11; // [sp+94h] [bp-20h]
  unsigned __int8 *t_cp_12; // [sp+98h] [bp-1Ch]
  unsigned __int8 *t_cp_13; // [sp+9Ch] [bp-18h]
  unsigned __int8 *t_cp_14; // [sp+A0h] [bp-14h]

  plena = plen;
  buff = 0;
  rdlen = 0;
  if ( set_do )
    v9 = 0x8000;
  else
    v9 = 0;
  flags = v9;
  rcode = 0;
  p = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  if ( is_sign )
    return plena;
  if ( p )
  {
    p = udp_len;
    t_cp = udp_len;
    udp_sz = _byteswap_ushort(*(_WORD *)udp_len);
    p = udp_len + 2;
    t_cp_0 = udp_len + 2;
    rcode = _byteswap_ushort(*((_WORD *)udp_len + 1));
    p = udp_len + 4;
    t_cp_1 = udp_len + 4;
    flags = _byteswap_ushort(*((_WORD *)udp_len + 2));
    p = udp_len + 6;
    if ( set_do )
    {
      p += -0x2;
      flags = ~((unsigned int)~(flags << 17) >> 17);
      t_cp_2 = p + 1;
      *p = HIBYTE(flags);
      *t_cp_2 = flags;
      p += 2;
    }
    lenp = p;
    t_cp_3 = p;
    rdlen = (*p << 8) | p[1];
    p += 2;
    if ( plena < p - (unsigned __int8 *)header + rdlen )
      return plena;
    datap = p;
    if ( !optno )
      return plena;
    i = 0;
    while ( rdlen > i + 4 )
    {
      t_cp_4 = p;
      code = _byteswap_ushort(*(_WORD *)p);
      p += 2;
      t_cp_5 = p;
      len = _byteswap_ushort(*(_WORD *)p);
      p += 2;
      if ( rdlen < len + i )
      {
        rdlen = 0;
        is_last = 0;
        break;
      }
      if ( optno == code )
      {
        if ( !replace )
          return plena;
        p += -0x4;
        rdlen -= len + 4;
        memcpy(p, &p[len + 4], rdlen - i);
        t_s_0 = rdlen;
        t_cp_6 = lenp + 1;
        *lenp = BYTE1(rdlen);
        *t_cp_6 = t_s_0;
        lenp += 2;
        lenp += -0x2;
      }
      else
      {
        p += len;
        i += len + 4;
      }
    }
    if ( !is_last )
    {
      if ( rdlen )
      {
        buff = (unsigned __int8 *)whine_malloc(rdlen);
        if ( buff )
          memcpy(buff, datap, rdlen);
      }
      plena = rrfilter(header, plena, 0);
      p = 0;
    }
  }
  if ( !p )
  {
    p = (unsigned __int8 *)skip_questions(header, plena);
    if ( !p )
      return plena;
    v11 = ntohs(header->ancount);
    v12 = v11 + ntohs(header->nscount);
    v13 = ntohs(header->arcount);
    p = (unsigned __int8 *)skip_section(p, v12 + v13, header, plena);
    if ( !p )
      return plena;
    v14 = p++;
    *v14 = 0;
    t_cp_7 = p + 1;
    *p = 0;
    *t_cp_7 = 41;
    p += 2;
    t_cp_8 = p + 1;
    *p = HIBYTE(udp_sz);
    *t_cp_8 = udp_sz;
    p += 2;
    t_cp_9 = p + 1;
    *p = HIBYTE(rcode);
    *t_cp_9 = rcode;
    p += 2;
    t_cp_10 = p + 1;
    *p = HIBYTE(flags);
    *t_cp_10 = flags;
    p += 2;
    lenp = p;
    t_s_5 = rdlen;
    t_cp_11 = p + 1;
    *p = BYTE1(rdlen);
    *t_cp_11 = t_s_5;
    p += 2;
    datap = p;
    if ( buff )
    {
      memcpy(p, buff, rdlen);
      free(buff);
      p += rdlen;
    }
    if ( limit - (p + 4) >= (int)optlen )
    {
      v15 = ntohs(header->arcount);
      header->arcount = htons(v15 + 1);
    }
  }
  if ( limit - (p + 4) < (int)optlen )
    return plena;
  if ( optno && replace != 2 )
  {
    t_cp_12 = p + 1;
    *p = BYTE1(optno);
    *t_cp_12 = optno;
    p += 2;
    t_cp_13 = p + 1;
    *p = BYTE1(optlen);
    *t_cp_13 = optlen;
    p += 2;
    memcpy(p, opt, optlen);
    p += optlen;
    t_s_8 = (_BYTE)p - (_BYTE)datap;
    t_cp_14 = lenp + 1;
    *lenp = (unsigned __int16)((_WORD)p - (_WORD)datap) >> 8;
    *t_cp_14 = t_s_8;
    lenp += 2;
  }
  return p - (unsigned __int8 *)header;
}
