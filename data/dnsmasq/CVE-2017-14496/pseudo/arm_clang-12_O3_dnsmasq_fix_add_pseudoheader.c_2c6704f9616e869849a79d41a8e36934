size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned int v9; // r9
  dns_header *v10; // r5
  unsigned int v11; // r10
  void *v13; // r8
  unsigned __int8 *pseudoheader; // r0
  int v16; // r2
  char v17; // r4
  unsigned __int8 *v18; // r3
  unsigned __int8 *v19; // r7
  int v20; // r8
  _BYTE *v21; // r11
  unsigned __int8 *v22; // r10
  int v23; // r6
  int v24; // r5
  int v25; // r0
  int v26; // r2
  unsigned __int8 *v27; // r0
  int v28; // r0
  int v29; // r1
  int v30; // r2
  int v31; // r0
  unsigned __int8 *v32; // r3
  size_t v33; // r2
  unsigned __int8 *v34; // r0
  void *v35; // r0
  void *v36; // r7
  int v37; // r0
  _BYTE *v38; // r0
  char *v39; // r7
  unsigned int v40; // r0
  bool v41; // zf
  unsigned __int8 v42; // [sp+8h] [bp-50h]
  void *src; // [sp+Ch] [bp-4Ch]
  dns_header *v44; // [sp+10h] [bp-48h]
  unsigned __int8 v45; // [sp+14h] [bp-44h]
  unsigned __int8 v46; // [sp+18h] [bp-40h]
  unsigned __int8 v47; // [sp+1Ch] [bp-3Ch]
  unsigned int v48; // [sp+20h] [bp-38h]
  unsigned __int8 *v49; // [sp+24h] [bp-34h]
  unsigned __int8 *v50; // [sp+24h] [bp-34h]
  int v51; // [sp+28h] [bp-30h] BYREF
  int v52; // [sp+2Ch] [bp-2Ch] BYREF
  unsigned __int8 *v53; // [sp+30h] [bp-28h] BYREF

  v9 = plen;
  v10 = header;
  v11 = udp_sz;
  v13 = 0;
  pseudoheader = find_pseudoheader(header, plen, 0u, &v53, &v52, &v51);
  if ( v52 )
    return v9;
  v16 = replace;
  v17 = set_do;
  if ( set_do )
    v17 = 0x80;
  if ( !pseudoheader )
  {
    v23 = 0;
    v48 = v11 >> 8;
    v47 = 0;
    v46 = 0;
    v45 = 0;
    goto LABEL_36;
  }
  v18 = limit;
  v19 = v53;
  v20 = optno;
  if ( set_do )
    LOBYTE(pseudoheader) = 0x80;
  v17 = v53[4];
  if ( set_do )
  {
    v17 |= (unsigned __int8)pseudoheader;
    v53[4] = v17;
  }
  if ( !optno )
    return v9;
  v21 = v19 + 6;
  v22 = v19 + 8;
  v23 = v19[7] | (v19[6] << 8);
  if ( v19 + 8 - (unsigned __int8 *)v10 + v23 > v9 )
    return v9;
  v49 = v18;
  v44 = v10;
  src = v19 + 8;
  v47 = v19[5];
  v46 = v19[2];
  LOBYTE(v48) = *v19;
  v45 = v19[3];
  v42 = v19[1];
  if ( (unsigned int)v23 >= 5 )
  {
    if ( replace )
    {
      v24 = 0;
      v25 = 4;
      while ( 1 )
      {
        v26 = v22[3] | (v22[2] << 8);
        if ( v26 + v25 > v23 )
          break;
        v27 = v22 + 4;
        if ( (v22[1] | (*v22 << 8)) == optno )
        {
          v23 = v23 - v26 - 4;
          memcpy(v22, &v27[v26], v23 - v24);
          v19[7] = v23;
          v19[6] = BYTE1(v23);
          v25 = v24 + 4;
          if ( v24 + 4 >= v23 )
            goto LABEL_25;
        }
        else
        {
          v22 = &v27[v26];
          v24 += v26 + 4;
          v25 = v24 + 4;
          if ( v24 + 4 >= v23 )
            goto LABEL_25;
        }
      }
    }
    else
    {
      v28 = 0;
      v29 = 4;
      while ( 1 )
      {
        v30 = v22[3] | (v22[2] << 8);
        if ( v30 + v29 > v23 )
          break;
        if ( (v22[1] | (*v22 << 8)) == optno )
          return v9;
        v31 = v28 + v30;
        v22 += v30 + 4;
        v29 = v31 + 8;
        v28 = v31 + 4;
        if ( v29 >= v23 )
          goto LABEL_25;
      }
    }
    limit = v49;
    v23 = 0;
    v13 = 0;
    v51 = 0;
    goto LABEL_34;
  }
LABEL_25:
  if ( !v51 )
  {
    limit = v49;
    v13 = 0;
    if ( v23 )
    {
      v35 = (void *)whine_malloc(v23);
      if ( v35 )
      {
        v36 = v35;
        memcpy(v35, src, v23);
        v13 = v36;
      }
      LOBYTE(v11) = v42;
      v10 = v44;
      limit = v49;
      goto LABEL_35;
    }
    v23 = 0;
LABEL_34:
    LOBYTE(v11) = v42;
    v10 = v44;
LABEL_35:
    v9 = rrfilter(v10, v9, 0);
LABEL_36:
    v37 = skip_questions(v10, v9, v16);
    if ( !v37 )
      return v9;
    v50 = limit;
    v38 = (_BYTE *)skip_section(
                     v37,
                     ((unsigned int)((v10->nscount << 8) & 0xFF0000 | (v10->nscount << 24)) >> 16)
                   + ((unsigned int)((v10->ancount << 8) & 0xFF0000 | (v10->ancount << 24)) >> 0x10)
                   + ((unsigned int)((v10->arcount << 8) & 0xFF0000 | (v10->arcount << 24)) >> 0x10),
                     v10,
                     v9);
    if ( !v38 )
      return v9;
    v32 = limit;
    v39 = v38 + 0xB;
    if ( v38 + 0xB > v50 )
      return v9;
    v38[4] = v11;
    v38[10] = v23;
    v38[7] = v17;
    v22 = v38 + 0xB;
    v44 = v10;
    v38[8] = v47;
    v38[6] = v45;
    v38[5] = v46;
    v38[3] = v48;
    v38[2] = 41;
    v38[1] = 0;
    *v38 = 0;
    v38[9] = BYTE1(v23);
    v21 = v38 + 9;
    if ( v13 )
    {
      v22 = (unsigned __int8 *)&v39[v23];
      if ( &v39[v23] > (char *)v50 )
      {
        free(v13);
        return v9;
      }
      memcpy(v39, v13, v23);
      free(v13);
      v32 = v50;
    }
    v33 = optlen;
    LOWORD(src) = (_WORD)v39;
    if ( v32 - v22 - 4 >= (int)optlen )
    {
      v40 = ((unsigned int)((v10->arcount << 8) & 0xFF0000 | (v10->arcount << 24)) >> 0x10) + 1;
      v32 = v50;
      v10->arcount = ((v40 << 8) & 0xFF0000 | (v40 << 24)) >> 16;
    }
    v20 = optno;
    v34 = v22 + 4;
    if ( v32 - (v22 + 4) < (int)optlen )
      return v9;
    goto LABEL_46;
  }
  v32 = v49;
  v33 = optlen;
  v34 = v22 + 4;
  if ( v49 - (v22 + 4) < (int)optlen )
    return v9;
LABEL_46:
  v41 = v20 == 0;
  if ( v20 )
    v41 = replace == 2;
  if ( v41 )
    return v22 - (unsigned __int8 *)v44;
  if ( v34 > v32 )
    return v9;
  v22[3] = v33;
  v22[1] = v20;
  v22[2] = BYTE1(v33);
  *v22 = BYTE1(v20);
  v22 = &v34[v33];
  if ( &v34[v33] > v32 )
    return v9;
  memcpy(v34, opt, v33);
  v21[1] = (_BYTE)v22 - (_BYTE)src;
  *v21 = (unsigned __int16)((_WORD)v22 - (_WORD)src) >> 8;
  return v22 - (unsigned __int8 *)v44;
}
