int __cdecl add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        int optlen,
        int set_do,
        int replace)
{
  int v9; // esi
  dns_header *v10; // ebp
  unsigned __int8 *pseudoheader; // eax
  __int16 v13; // bx
  unsigned __int8 *v14; // edi
  __int16 v15; // ax
  signed int v16; // ebx
  int v17; // ebp
  char *v18; // esi
  unsigned __int32 v19; // eax
  _BYTE *v20; // ecx
  _WORD *v21; // edi
  void *v22; // eax
  void *v23; // edi
  int v24; // eax
  __m128i v25; // xmm0
  __m128i v26; // xmm0
  int v27; // eax
  int v28; // edi
  char *v29; // ebx
  char *v30; // ebx
  __int16 v31; // [esp+Ah] [ebp-32h]
  char *dest; // [esp+Ch] [ebp-30h]
  void *src; // [esp+10h] [ebp-2Ch]
  __int16 v35; // [esp+14h] [ebp-28h]
  __int16 v36; // [esp+14h] [ebp-28h]
  size_t v37; // [esp+18h] [ebp-24h]
  __int16 v38; // [esp+1Ch] [ebp-20h]
  int is_last; // [esp+20h] [ebp-1Ch] BYREF
  int is_sign; // [esp+24h] [ebp-18h] BYREF
  unsigned __int8 *v41; // [esp+28h] [ebp-14h] BYREF

  v9 = plen;
  v10 = header;
  pseudoheader = find_pseudoheader(header, plen, 0, &v41, &is_sign, &is_last);
  if ( is_sign )
    return v9;
  HIBYTE(v13) = 0;
  if ( pseudoheader )
  {
    v14 = v41;
    v15 = __ROL2__(*((_WORD *)v41 + 2), 8);
    if ( set_do )
    {
      v15 |= 0x8000u;
      v41[4] = HIBYTE(v15);
    }
    v37 = plen;
    if ( !optno )
      return v37;
    v38 = v15;
    v16 = _byteswap_ulong(*((unsigned __int16 *)v14 + 3) << 16);
    dest = (char *)(v14 + 8);
    if ( v16 + v14 + 8 - (unsigned __int8 *)header > plen )
      return v37;
    v31 = *(_WORD *)v14;
    v35 = *((_WORD *)v14 + 1);
    if ( (unsigned int)v16 < 5 )
    {
      v18 = (char *)(v14 + 8);
LABEL_19:
      v10 = header;
      if ( is_last )
      {
        v21 = v14 + 6;
LABEL_33:
        v29 = v18 + 4;
        if ( limit - (unsigned __int8 *)(v18 + 4) < optlen )
          return v37;
        if ( optno && replace != 2 )
        {
          *v18 = BYTE1(optno);
          v18[1] = optno;
          v18[2] = BYTE1(optlen);
          v18[3] = optlen;
          memcpy(v29, opt, optlen);
          v30 = &v29[optlen];
          *v21 = __ROL2__((_WORD)v30 - (_WORD)dest, 8);
          v18 = v30;
        }
        return v18 - (char *)v10;
      }
      if ( v16 )
      {
        src = 0;
        v22 = (void *)whine_malloc(v16);
        if ( v22 )
        {
          v23 = v22;
          memcpy(v22, dest, v16);
          src = v23;
        }
      }
      else
      {
        src = 0;
        v16 = 0;
      }
    }
    else
    {
      v17 = 0;
      v18 = (char *)(v14 + 8);
      while ( 1 )
      {
        v19 = _byteswap_ulong(*((unsigned __int16 *)v18 + 1) << 16);
        if ( (int)(v19 + v17) > v16 )
          break;
        v20 = v18 + 4;
        if ( _byteswap_ulong(*(unsigned __int16 *)v18 << 16) == optno )
        {
          if ( !replace )
            return v37;
          v16 = v16 - v19 - 4;
          memcpy(v18, &v20[v19], v16 - v17);
          *((_WORD *)v14 + 3) = __ROL2__(v16, 8);
        }
        else
        {
          v17 += v19 + 4;
          v18 = &v20[v19];
        }
        if ( v17 + 4 >= v16 )
          goto LABEL_19;
      }
      is_last = 0;
      v16 = 0;
      src = 0;
      v10 = header;
    }
    udp_sz = __ROL2__(v31, 8);
    v36 = __ROL2__(v35, 8);
    v9 = rrfilter(v10, plen, 0);
  }
  else
  {
    LOBYTE(v13) = set_do != 0;
    v38 = v13 << 15;
    src = 0;
    v16 = 0;
    v36 = 0;
  }
  v24 = skip_questions(v10, v9);
  v37 = v9;
  if ( v24 )
  {
    v25 = _mm_cvtsi32_si128(*(_DWORD *)&v10->ancount);
    v26 = _mm_or_si128(_mm_slli_epi16(v25, 8u), _mm_srli_epi16(v25, 8u));
    v27 = skip_section(
            v24,
            _mm_cvtsi128_si32(_mm_add_epi32(_mm_srli_epi32(v26, 0x10u), _mm_unpacklo_epi16(v26, (__m128i)0LL)))
          + (unsigned __int16)__ROL2__(v10->arcount, 8),
            v10,
            v9);
    if ( v27 )
    {
      v28 = v27;
      *(_WORD *)v27 = 0;
      *(_BYTE *)(v27 + 2) = 41;
      *(_BYTE *)(v27 + 3) = HIBYTE(udp_sz);
      *(_BYTE *)(v27 + 4) = udp_sz;
      *(_BYTE *)(v27 + 5) = HIBYTE(v36);
      *(_BYTE *)(v27 + 6) = v36;
      *(_BYTE *)(v27 + 7) = HIBYTE(v38);
      *(_BYTE *)(v27 + 8) = v38;
      *(_BYTE *)(v27 + 9) = BYTE1(v16);
      *(_BYTE *)(v27 + 10) = v16;
      v18 = (char *)(v27 + 11);
      dest = (char *)(v27 + 11);
      if ( src )
      {
        memcpy((void *)(v27 + 11), src, v16);
        free(src);
        v18 = &dest[v16];
      }
      v21 = (_WORD *)(v28 + 9);
      if ( limit - (unsigned __int8 *)v18 - 4 >= optlen )
        v10->arcount = __ROL2__(__ROL2__(v10->arcount, 8) + 1, 8);
      goto LABEL_33;
    }
  }
  return v37;
}
