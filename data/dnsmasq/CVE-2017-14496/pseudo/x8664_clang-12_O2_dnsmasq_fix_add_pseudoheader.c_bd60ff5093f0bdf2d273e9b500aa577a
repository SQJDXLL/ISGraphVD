size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int64 v13; // rbx
  unsigned __int8 *pseudoheader; // rax
  __int64 v15; // rdx
  size_t v16; // r12
  __int16 v18; // si
  unsigned __int8 *v19; // rdx
  __int16 v20; // ax
  unsigned __int64 v21; // rsi
  unsigned __int64 v22; // rbp
  __int16 v23; // cx
  unsigned __int8 *v24; // r12
  int v25; // r13d
  int v26; // ecx
  __int64 v27; // rdx
  unsigned __int64 v28; // rax
  unsigned __int64 v29; // rsi
  __int16 v30; // r14
  dns_header *v31; // rbp
  unsigned int v32; // ebx
  _WORD *v33; // r14
  void *v34; // rsi
  signed __int64 v35; // rdx
  unsigned __int8 *v36; // rcx
  void *v37; // rax
  __int64 v38; // rax
  __m128i v39; // xmm0
  __m128i v40; // xmm0
  __int64 v41; // rax
  __int64 v42; // r12
  void *v43; // r13
  unsigned __int8 *v44; // rdi
  unsigned __int64 v45; // [rsp+0h] [rbp-88h]
  unsigned int v46; // [rsp+Ch] [rbp-7Ch]
  __int16 v48; // [rsp+18h] [rbp-70h]
  __int16 v49; // [rsp+1Ch] [rbp-6Ch]
  void *ptr; // [rsp+28h] [rbp-60h]
  __int16 v51; // [rsp+30h] [rbp-58h]
  int is_last; // [rsp+34h] [rbp-54h] BYREF
  void *src; // [rsp+38h] [rbp-50h]
  void *v54; // [rsp+40h] [rbp-48h]
  int is_sign; // [rsp+4Ch] [rbp-3Ch] BYREF
  unsigned __int8 *v56; // [rsp+50h] [rbp-38h] BYREF

  LODWORD(v13) = 0;
  v45 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0LL, &v56, &is_sign, &is_last);
  if ( is_sign )
    return v45;
  v54 = opt;
  v46 = optno;
  HIBYTE(v18) = 0;
  LOBYTE(v15) = set_do != 0;
  if ( pseudoheader )
  {
    v19 = v56;
    v20 = __ROL2__(*((_WORD *)v56 + 2), 8);
    if ( set_do )
    {
      v20 |= 0x8000u;
      v56[4] = HIBYTE(v20);
    }
    v21 = (unsigned int)optno;
    if ( !optno )
      return v45;
    v51 = v20;
    v13 = _byteswap_uint64((unsigned __int64)*((unsigned __int16 *)v19 + 3) << 48);
    v22 = (unsigned __int64)(v19 + 8);
    v16 = v45;
    if ( v13 + v19 + 8 - (unsigned __int8 *)header > v45 )
      return v16;
    v23 = *((_WORD *)v19 + 1);
    v49 = *(_WORD *)v19;
    src = v19 + 8;
    v48 = v23;
    v24 = v19;
    if ( (unsigned int)v13 < 5 )
    {
      v27 = (unsigned int)v21;
LABEL_19:
      if ( is_last )
      {
        v32 = v27;
        v33 = v24 + 6;
        v34 = v54;
        v35 = optlen;
        v36 = limit;
        goto LABEL_38;
      }
      if ( (_DWORD)v13 )
      {
        v37 = (void *)whine_malloc((int)v13, v21, v27);
        if ( v37 )
        {
          ptr = v37;
          memcpy(v37, src, (int)v13);
LABEL_27:
          v31 = header;
          udp_sz = __ROL2__(v49, 8);
          v30 = __ROL2__(v48, 8);
          v16 = rrfilter(header, v45, 0LL);
          goto LABEL_28;
        }
LABEL_26:
        ptr = 0LL;
        goto LABEL_27;
      }
    }
    else
    {
      v25 = 0;
      v26 = 4;
      v27 = (unsigned int)v21;
      while ( 1 )
      {
        v28 = _byteswap_uint64((unsigned __int64)*(unsigned __int16 *)(v22 + 2) << 48);
        if ( (int)v28 + v26 > (int)v13 )
          break;
        v29 = v22 + 4;
        if ( _byteswap_ulong(*(unsigned __int16 *)v22 << 16) == (_DWORD)v27 )
        {
          if ( !replace )
            return v45;
          LODWORD(v13) = v13 - v28 - 4;
          v21 = v28 + v29;
          memcpy((void *)v22, (const void *)v21, (int)v13 - v25);
          v27 = v46;
          *((_WORD *)v24 + 3) = __ROL2__(v13, 8);
        }
        else
        {
          v21 = (unsigned int)v28 + v29;
          v25 += v28 + 4;
          v22 = v21;
        }
        v26 = v25 + 4;
        if ( v25 + 4 >= (int)v13 )
          goto LABEL_19;
      }
      is_last = 0;
    }
    LODWORD(v13) = 0;
    goto LABEL_26;
  }
  LOBYTE(v18) = set_do != 0;
  v51 = v18 << 15;
  ptr = 0LL;
  v30 = 0;
  v31 = header;
  v16 = v45;
LABEL_28:
  v38 = skip_questions(v31, v16, v15);
  if ( !v38 )
    return v16;
  v39 = _mm_cvtsi32_si128(*(_DWORD *)&v31->ancount);
  v40 = _mm_or_si128(_mm_slli_epi16(v39, 8u), _mm_srli_epi16(v39, 8u));
  v45 = v16;
  v41 = skip_section(
          v38,
          _mm_cvtsi128_si32(_mm_add_epi32(_mm_srli_epi32(v40, 0x10u), _mm_unpacklo_epi16(v40, (__m128i)0LL)))
        + (unsigned int)(unsigned __int16)__ROL2__(v31->arcount, 8),
          v31,
          v16);
  if ( !v41 || v41 + 11 > (unsigned __int64)limit )
    return v45;
  *(_WORD *)v41 = 0;
  *(_BYTE *)(v41 + 2) = 41;
  *(_BYTE *)(v41 + 3) = HIBYTE(udp_sz);
  *(_BYTE *)(v41 + 4) = udp_sz;
  *(_BYTE *)(v41 + 5) = HIBYTE(v30);
  *(_BYTE *)(v41 + 6) = v30;
  *(_BYTE *)(v41 + 7) = HIBYTE(v51);
  *(_BYTE *)(v41 + 8) = v51;
  *(_BYTE *)(v41 + 9) = BYTE1(v13);
  v42 = v41;
  *(_BYTE *)(v41 + 10) = v13;
  v43 = (void *)(v41 + 11);
  v22 = v41 + 11;
  if ( ptr )
  {
    v22 = (unsigned __int64)v43 + (int)v13;
    if ( v22 > (unsigned __int64)limit )
    {
      free(ptr);
      return v45;
    }
    memcpy((void *)(v41 + 11), ptr, (int)v13);
    free(ptr);
  }
  src = v43;
  v33 = (_WORD *)(v42 + 9);
  v36 = limit;
  v35 = optlen;
  if ( (__int64)&limit[-v22 - 4] >= (__int64)optlen )
    header->arcount = __ROL2__(__ROL2__(header->arcount, 8) + 1, 8);
  v32 = v46;
  v34 = v54;
LABEL_38:
  v44 = (unsigned __int8 *)(v22 + 4);
  if ( (__int64)&v36[-v22 - 4] >= v35 )
  {
    if ( v32 && replace != 2 )
    {
      if ( v44 > v36 )
        return v45;
      *(_BYTE *)v22 = BYTE1(v32);
      *(_BYTE *)(v22 + 1) = v32;
      *(_BYTE *)(v22 + 2) = BYTE1(v35);
      *(_BYTE *)(v22 + 3) = v35;
      v22 = (unsigned __int64)&v44[v35];
      v16 = v45;
      if ( &v44[v35] > v36 )
        return v16;
      memcpy(v44, v34, v35);
      *v33 = __ROL2__(v22 - (_WORD)src, 8);
    }
    return v22 - (_QWORD)header;
  }
  return v45;
}
