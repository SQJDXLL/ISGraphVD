size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int64 v13; // r15
  unsigned __int8 *pseudoheader; // rax
  __int64 v16; // rdx
  __int16 v18; // si
  unsigned __int8 *v19; // rbp
  __int16 v20; // dx
  __int16 v21; // ax
  __int16 v22; // bx
  unsigned __int64 v23; // rcx
  __int64 v24; // r12
  int v25; // r13d
  int v26; // ecx
  unsigned __int8 *v27; // rbx
  unsigned __int64 v28; // rax
  _BYTE *v29; // rsi
  __int16 v30; // r12
  _WORD *v31; // rbp
  signed __int64 v32; // rcx
  unsigned __int8 *v33; // rsi
  int v34; // eax
  int v35; // edx
  int v36; // edi
  unsigned __int64 v37; // rcx
  void *v38; // rax
  __int64 v39; // rax
  __m128i v40; // xmm0
  __m128i v41; // xmm0
  __int64 v42; // rax
  __int64 v43; // rbp
  int v44; // eax
  unsigned __int8 *v45; // rdi
  __int16 v46; // [rsp+Ch] [rbp-7Ch]
  __int16 v47; // [rsp+10h] [rbp-78h]
  int v48; // [rsp+14h] [rbp-74h]
  void *dest; // [rsp+18h] [rbp-70h]
  void *ptr; // [rsp+20h] [rbp-68h]
  unsigned __int8 *v51; // [rsp+28h] [rbp-60h]
  __int16 v52; // [rsp+30h] [rbp-58h]
  int is_last; // [rsp+34h] [rbp-54h] BYREF
  __int64 v54; // [rsp+38h] [rbp-50h]
  void *src; // [rsp+40h] [rbp-48h]
  int is_sign; // [rsp+4Ch] [rbp-3Ch] BYREF
  unsigned __int8 *v57; // [rsp+50h] [rbp-38h] BYREF

  v13 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0LL, &v57, &is_sign, &is_last);
  if ( is_sign )
    return v13;
  v54 = 0LL;
  v51 = limit;
  HIBYTE(v18) = 0;
  LOBYTE(v16) = set_do != 0;
  v48 = optno;
  if ( !pseudoheader )
  {
    LOBYTE(v18) = set_do != 0;
    v52 = v18 << 15;
    ptr = 0LL;
    v30 = 0;
    goto LABEL_32;
  }
  v19 = v57;
  v20 = *(_WORD *)v57;
  v21 = *((_WORD *)v57 + 1);
  v22 = __ROL2__(*((_WORD *)v57 + 2), 8);
  if ( set_do )
  {
    v22 |= 0x8000u;
    v57[4] = HIBYTE(v22);
  }
  if ( optno )
  {
    v47 = v21;
    v23 = _byteswap_uint64((unsigned __int64)*((unsigned __int16 *)v19 + 3) << 48);
    if ( v23 + v19 + 8 - (unsigned __int8 *)header <= v13 )
    {
      dest = v19 + 8;
      v24 = v23;
      src = opt;
      v46 = v20;
      v52 = v22;
      if ( (unsigned int)v23 >= 5 )
      {
        if ( replace )
        {
          v25 = 0;
          v26 = 4;
          v27 = v19 + 8;
          while ( 1 )
          {
            v28 = _byteswap_uint64((unsigned __int64)*((unsigned __int16 *)v27 + 1) << 48);
            if ( (int)v28 + v26 > (int)v24 )
              break;
            v29 = v27 + 4;
            if ( _byteswap_ulong(*(unsigned __int16 *)v27 << 16) == v48 )
            {
              v24 = (unsigned int)(v24 - v28 - 4);
              memcpy(v27, &v29[v28], (int)v24 - v25);
              *((_WORD *)v19 + 3) = __ROL2__(v24, 8);
              v26 = v25 + 4;
              if ( v25 + 4 >= (int)v24 )
                goto LABEL_18;
            }
            else
            {
              v25 += v28 + 4;
              v27 = &v29[(unsigned int)v28];
              v26 = v25 + 4;
              if ( v25 + 4 >= (int)v24 )
                goto LABEL_18;
            }
          }
        }
        else
        {
          v34 = 0;
          v35 = 4;
          v27 = v19 + 8;
          v36 = v23;
          while ( 1 )
          {
            v37 = _byteswap_uint64((unsigned __int64)*((unsigned __int16 *)v27 + 1) << 48);
            if ( (int)v37 + v35 > v36 )
              break;
            if ( _byteswap_ulong(*(unsigned __int16 *)v27 << 16) == v48 )
              return v13;
            v27 += v37 + 4;
            v35 = v34 + v37 + 8;
            v34 += v37 + 4;
            v36 = v24;
            if ( v35 >= (int)v24 )
            {
              if ( is_last )
                goto LABEL_19;
              goto LABEL_25;
            }
          }
        }
        is_last = 0;
        v54 = 0LL;
        ptr = 0LL;
        opt = (unsigned __int8 *)src;
        goto LABEL_31;
      }
      v27 = v19 + 8;
LABEL_18:
      if ( is_last )
      {
LABEL_19:
        v31 = v19 + 6;
        opt = (unsigned __int8 *)src;
        v32 = optlen;
        LOWORD(v33) = (_WORD)dest;
        goto LABEL_41;
      }
LABEL_25:
      opt = (unsigned __int8 *)src;
      if ( (_DWORD)v24 )
      {
        v54 = v24;
        v38 = (void *)whine_malloc((int)v24);
        if ( v38 )
        {
          ptr = v38;
          memcpy(v38, dest, (int)v24);
LABEL_31:
          udp_sz = __ROL2__(v46, 8);
          v30 = __ROL2__(v47, 8);
          v13 = rrfilter(header, v13, 0LL);
LABEL_32:
          v39 = skip_questions(header, v13, v16);
          if ( !v39 )
            return v13;
          v40 = _mm_cvtsi32_si128(*(_DWORD *)&header->ancount);
          v41 = _mm_unpacklo_epi16(_mm_or_si128(_mm_slli_epi16(v40, 8u), _mm_srli_epi16(v40, 8u)), (__m128i)0LL);
          v42 = skip_section(
                  v39,
                  _mm_cvtsi128_si32(_mm_add_epi32(_mm_shuffle_epi32(v41, 229), v41))
                + (unsigned int)(unsigned __int16)__ROL2__(header->arcount, 8),
                  header,
                  v13);
          if ( !v42 )
            return v13;
          v43 = v42;
          v33 = (unsigned __int8 *)(v42 + 11);
          if ( v42 + 11 > (unsigned __int64)v51 )
            return v13;
          *(_WORD *)v42 = 0;
          *(_BYTE *)(v42 + 2) = 41;
          *(_BYTE *)(v42 + 3) = HIBYTE(udp_sz);
          *(_BYTE *)(v42 + 4) = udp_sz;
          *(_BYTE *)(v42 + 5) = HIBYTE(v30);
          *(_BYTE *)(v42 + 6) = v30;
          *(_BYTE *)(v42 + 7) = HIBYTE(v52);
          *(_BYTE *)(v42 + 8) = v52;
          v44 = v54;
          *(_BYTE *)(v43 + 9) = BYTE1(v54);
          *(_BYTE *)(v43 + 10) = v44;
          v27 = v33;
          if ( ptr )
          {
            v27 = &v33[v44];
            if ( v27 > v51 )
            {
              free(ptr);
              return v13;
            }
            memcpy(v33, ptr, v44);
            free(ptr);
          }
          v31 = (_WORD *)(v43 + 9);
          v32 = optlen;
          if ( v51 - v27 - 4 >= (__int64)optlen )
            header->arcount = __ROL2__(__ROL2__(header->arcount, 8) + 1, 8);
LABEL_41:
          v45 = v27 + 4;
          if ( v51 - (v27 + 4) < v32 )
            return v13;
          if ( v48 && replace != 2 )
          {
            if ( v45 > v51 )
              return v13;
            *v27 = BYTE1(v48);
            v27[1] = v48;
            v27[2] = BYTE1(optlen);
            v27[3] = optlen;
            v27 = &v45[optlen];
            if ( &v45[optlen] > v51 )
              return v13;
            memcpy(v45, opt, optlen);
            *v31 = __ROL2__((_WORD)v27 - (_WORD)v33, 8);
          }
          return v27 - (unsigned __int8 *)header;
        }
      }
      else
      {
        v54 = 0LL;
      }
      ptr = 0LL;
      goto LABEL_31;
    }
  }
  return v13;
}
