int __cdecl add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        signed int optlen,
        int set_do,
        int replace)
{
  int v9; // ebp
  dns_header *v10; // esi
  unsigned __int8 *pseudoheader; // eax
  __int16 v13; // bx
  unsigned __int8 *v14; // edi
  __int16 v15; // dx
  __int16 v16; // bx
  __int16 v17; // ax
  signed int v18; // ebx
  int v19; // esi
  int v20; // ebp
  int v21; // ecx
  unsigned __int32 v22; // eax
  int v23; // ecx
  signed int v24; // edx
  unsigned __int8 *v25; // ebx
  _WORD *v26; // edi
  size_t v27; // esi
  void *v28; // eax
  void *v29; // edi
  int v30; // eax
  __m128i v31; // xmm1
  __m128i v32; // xmm0
  int v33; // eax
  char *v34; // ecx
  int v35; // edi
  unsigned __int8 *v36; // eax
  size_t v37; // [esp-Ch] [ebp-48h]
  __int16 v38; // [esp+Eh] [ebp-2Eh]
  void *ptr; // [esp+10h] [ebp-2Ch]
  __int16 v41; // [esp+14h] [ebp-28h]
  __int16 v42; // [esp+14h] [ebp-28h]
  void *src; // [esp+18h] [ebp-24h]
  __int16 v44; // [esp+1Ch] [ebp-20h]
  int is_last; // [esp+20h] [ebp-1Ch] BYREF
  int is_sign; // [esp+24h] [ebp-18h] BYREF
  unsigned __int8 *v47; // [esp+28h] [ebp-14h] BYREF

  v9 = plen;
  v10 = header;
  pseudoheader = find_pseudoheader(header, plen, 0, &v47, &is_sign, &is_last);
  if ( is_sign )
    return v9;
  HIBYTE(v13) = 0;
  if ( !pseudoheader )
  {
    LOBYTE(v13) = set_do != 0;
    ptr = 0;
    v42 = 0;
    v44 = v13 << 15;
    v18 = 0;
    goto LABEL_27;
  }
  v14 = v47;
  v15 = *(_WORD *)v47;
  v16 = *((_WORD *)v47 + 1);
  v17 = __ROL2__(*((_WORD *)v47 + 2), 8);
  if ( set_do )
  {
    v17 |= 0x8000u;
    v47[4] = HIBYTE(v17);
  }
  if ( optno )
  {
    v41 = v16;
    v44 = v17;
    v38 = v15;
    v18 = _byteswap_ulong(*((unsigned __int16 *)v14 + 3) << 16);
    if ( v18 + v14 + 8 - (unsigned __int8 *)header <= plen )
    {
      src = v14 + 8;
      if ( (unsigned int)v18 >= 5 )
      {
        v19 = (int)(v14 + 8);
        v20 = 0;
        v21 = 4;
        while ( 1 )
        {
          v22 = _byteswap_ulong(*(unsigned __int16 *)(v19 + 2) << 16);
          if ( (int)(v22 + v21) > v18 )
          {
            v27 = plen;
            is_last = 0;
            v18 = 0;
            ptr = 0;
            goto LABEL_26;
          }
          v23 = v19 + 4;
          if ( _byteswap_ulong(*(unsigned __int16 *)v19 << 16) == optno )
          {
            if ( !replace )
              return plen;
            v18 = v18 - v22 - 4;
            memcpy((void *)v19, (const void *)(v22 + v23), v18 - v20);
            *((_WORD *)v14 + 3) = __ROL2__(v18, 8);
          }
          else
          {
            v20 += v22 + 4;
            v19 = v22 + v23;
          }
          v21 = v20 + 4;
          if ( v20 + 4 >= v18 )
            goto LABEL_18;
        }
      }
      v19 = (int)(v14 + 8);
LABEL_18:
      if ( is_last )
      {
        v9 = plen;
        v24 = optlen;
        v25 = limit;
        v26 = v14 + 6;
        goto LABEL_36;
      }
      v27 = plen;
      if ( v18 )
      {
        ptr = 0;
        v28 = (void *)whine_malloc(v18);
        if ( v28 )
        {
          v29 = v28;
          memcpy(v28, src, v18);
          ptr = v29;
        }
      }
      else
      {
        ptr = 0;
        v18 = 0;
      }
LABEL_26:
      udp_sz = __ROL2__(v38, 8);
      v42 = __ROL2__(v41, 8);
      v37 = v27;
      v10 = header;
      v9 = rrfilter(header, v37, 0);
LABEL_27:
      v30 = skip_questions(v10, v9);
      if ( !v30 )
        return v9;
      v31 = _mm_cvtsi32_si128(*(_DWORD *)&v10->ancount);
      v32 = _mm_unpacklo_epi16(_mm_or_si128(_mm_slli_epi16(v31, 8u), _mm_srli_epi16(v31, 8u)), (__m128i)0LL);
      v33 = skip_section(
              v30,
              _mm_cvtsi128_si32(_mm_add_epi32(_mm_shuffle_epi32(v32, 229), v32))
            + (unsigned __int16)__ROL2__(v10->arcount, 8),
              v10,
              v9);
      if ( !v33 )
        return v9;
      v34 = (char *)(v33 + 11);
      v35 = v33;
      if ( v33 + 11 > (unsigned int)limit )
        return v9;
      *(_WORD *)v33 = 0;
      *(_BYTE *)(v33 + 2) = 41;
      v19 = v33 + 11;
      LOWORD(src) = v33 + 11;
      *(_BYTE *)(v33 + 3) = HIBYTE(udp_sz);
      *(_BYTE *)(v33 + 4) = udp_sz;
      *(_BYTE *)(v33 + 5) = HIBYTE(v42);
      *(_BYTE *)(v33 + 6) = v42;
      *(_BYTE *)(v33 + 7) = HIBYTE(v44);
      *(_BYTE *)(v33 + 8) = v44;
      *(_BYTE *)(v33 + 9) = BYTE1(v18);
      *(_BYTE *)(v33 + 10) = v18;
      if ( ptr )
      {
        v19 = (int)&v34[v18];
        if ( &v34[v18] > (char *)limit )
        {
          free(ptr);
          return v9;
        }
        memcpy(v34, ptr, v18);
        free(ptr);
      }
      v25 = limit;
      v24 = optlen;
      v26 = (_WORD *)(v35 + 9);
      if ( (int)&limit[-v19 - 4] >= optlen )
        header->arcount = __ROL2__(__ROL2__(header->arcount, 8) + 1, 8);
LABEL_36:
      v36 = (unsigned __int8 *)(v19 + 4);
      if ( (int)&v25[-v19 - 4] < v24 )
        return v9;
      if ( optno && replace != 2 )
      {
        if ( v36 > v25 )
          return v9;
        *(_BYTE *)v19 = BYTE1(optno);
        *(_BYTE *)(v19 + 1) = optno;
        *(_BYTE *)(v19 + 2) = BYTE1(v24);
        *(_BYTE *)(v19 + 3) = v24;
        v19 = (int)&v36[v24];
        if ( &v36[v24] > v25 )
          return v9;
        memcpy(v36, opt, v24);
        *v26 = __ROL2__(v19 - (_WORD)src, 8);
      }
      return v19 - (_DWORD)header;
    }
  }
  return v9;
}
