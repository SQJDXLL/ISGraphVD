size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned int v9; // r10
  unsigned int v11; // r6
  void *v13; // r8
  unsigned __int8 *pseudoheader; // r0
  int v16; // r2
  int v17; // r4
  char v18; // r3
  unsigned __int8 *v19; // r4
  int v20; // r8
  unsigned __int8 v21; // r3
  int v22; // r9
  unsigned __int8 *v23; // r6
  int v24; // r5
  int v25; // r0
  int v26; // r1
  unsigned __int8 *v27; // r2
  char *v28; // r7
  void *v29; // r0
  void *v30; // r6
  int v31; // r0
  int v32; // r2
  int v33; // r1
  int v34; // r0
  _BYTE *v35; // r0
  _BYTE *v36; // r7
  unsigned __int8 *v37; // r0
  _BYTE *v38; // r7
  unsigned __int8 *v39; // r6
  unsigned int v40; // r0
  bool v41; // zf
  __int16 v42; // r0
  unsigned __int8 v43; // [sp+Ch] [bp-54h]
  unsigned __int8 *v44; // [sp+10h] [bp-50h]
  _BYTE *v45; // [sp+14h] [bp-4Ch]
  unsigned __int8 v46; // [sp+18h] [bp-48h]
  unsigned __int8 v47; // [sp+1Ch] [bp-44h]
  unsigned __int8 v48; // [sp+20h] [bp-40h]
  unsigned int v49; // [sp+24h] [bp-3Ch]
  void *dest; // [sp+28h] [bp-38h]
  char v51; // [sp+2Ch] [bp-34h]
  int v52; // [sp+30h] [bp-30h] BYREF
  int v53; // [sp+34h] [bp-2Ch] BYREF
  unsigned __int8 *v54; // [sp+38h] [bp-28h] BYREF

  v9 = plen;
  v11 = udp_sz;
  v13 = 0;
  pseudoheader = find_pseudoheader(header, plen, 0u, &v54, &v53, &v52);
  if ( v53 )
    return v9;
  v16 = replace;
  v17 = optlen;
  v18 = set_do;
  if ( set_do )
    v18 = 0x80;
  if ( !pseudoheader )
  {
    v51 = v18;
    v22 = 0;
    v49 = v11 >> 8;
    v48 = 0;
    v47 = 0;
    v46 = 0;
    goto LABEL_36;
  }
  v19 = v54;
  v20 = optno;
  if ( set_do )
    LOBYTE(pseudoheader) = 0x80;
  v21 = v54[4];
  if ( set_do )
  {
    v21 |= (unsigned __int8)pseudoheader;
    v54[4] = v21;
  }
  if ( !optno )
    return v9;
  v51 = v21;
  v22 = v19[7] | (v19[6] << 8);
  if ( v19 + 8 - (unsigned __int8 *)header + v22 > v9 )
    return v9;
  v45 = v19 + 6;
  dest = v19 + 8;
  v44 = limit;
  v43 = v19[1];
  LOBYTE(v49) = *v19;
  v48 = v19[5];
  v47 = v19[2];
  v46 = v19[3];
  if ( (unsigned int)v22 >= 5 )
  {
    if ( replace )
    {
      v23 = v19 + 8;
      v24 = 0;
      while ( 1 )
      {
        v25 = v23[3] | (v23[2] << 8);
        v26 = v25 + v24;
        if ( v25 + v24 > v22 )
          break;
        v27 = v23 + 4;
        if ( (v23[1] | (*v23 << 8)) == optno )
        {
          v22 = v22 - v25 - 4;
          memcpy(v23, &v27[v25], v22 - v24);
          v19[7] = v22;
          v19[6] = BYTE1(v22);
          if ( v24 + 4 >= v22 )
            goto LABEL_22;
        }
        else
        {
          v23 = &v27[v25];
          v24 = v26 + 4;
          if ( v26 + 8 >= v22 )
            goto LABEL_22;
        }
      }
    }
    else
    {
      v23 = v19 + 8;
      v31 = 0;
      while ( 1 )
      {
        v32 = v23[3] | (v23[2] << 8);
        v33 = v32 + v31;
        if ( v32 + v31 > v22 )
          break;
        if ( (v23[1] | (*v23 << 8)) == optno )
          return v9;
        v23 += v32 + 4;
        v31 = v33 + 4;
        if ( v33 + 8 >= v22 )
          goto LABEL_22;
      }
    }
    v17 = optlen;
    limit = v44;
    v22 = 0;
    v13 = 0;
    v52 = 0;
    goto LABEL_35;
  }
  v23 = v19 + 8;
LABEL_22:
  if ( !v52 )
  {
    v17 = optlen;
    limit = v44;
    v13 = 0;
    if ( v22 )
    {
      v29 = (void *)whine_malloc(v22);
      if ( v29 )
      {
        v30 = v29;
        memcpy(v29, dest, v22);
        v13 = v30;
      }
    }
    else
    {
      v22 = 0;
    }
LABEL_35:
    LOBYTE(v11) = v43;
    v9 = rrfilter(header, v9, 0);
LABEL_36:
    v34 = skip_questions(header, v9, v16);
    if ( !v34 )
      return v9;
    v35 = (_BYTE *)skip_section(
                     v34,
                     ((unsigned int)((header->nscount << 8) & 0xFF0000 | (header->nscount << 24)) >> 16)
                   + ((unsigned int)((header->ancount << 8) & 0xFF0000 | (header->ancount << 24)) >> 0x10)
                   + ((unsigned int)((header->arcount << 8) & 0xFF0000 | (header->arcount << 24)) >> 0x10),
                     header,
                     v9);
    if ( !v35 )
      return v9;
    v35[10] = v22;
    v35[4] = v11;
    v36 = v35;
    v35[8] = v48;
    v35[7] = v51;
    v35[6] = v46;
    v35[5] = v47;
    v35[3] = v49;
    v35[2] = 41;
    v35[1] = 0;
    *v35 = 0;
    v37 = v35 + 0xB;
    v36[9] = BYTE1(v22);
    v38 = v36 + 9;
    v23 = v37;
    if ( v13 )
    {
      v39 = v37;
      memcpy(v37, v13, v22);
      free(v13);
      LOWORD(v37) = (_WORD)v39;
      v23 = &v39[v22];
    }
    LOWORD(dest) = (_WORD)v37;
    v45 = v38;
    if ( limit - v23 - 4 >= v17 )
    {
      v40 = ((unsigned int)((header->arcount << 8) & 0xFF0000 | (header->arcount << 24)) >> 0x10) + 1;
      header->arcount = ((v40 << 8) & 0xFF0000 | (v40 << 24)) >> 16;
    }
    v20 = optno;
    v28 = (char *)(v23 + 4);
    if ( limit - (v23 + 4) < v17 )
      return v9;
    goto LABEL_43;
  }
  v17 = optlen;
  v28 = (char *)(v23 + 4);
  if ( v44 - (v23 + 4) < (int)optlen )
    return v9;
LABEL_43:
  v41 = v20 == 0;
  if ( v20 )
    v41 = replace == 2;
  if ( !v41 )
  {
    v23[3] = v17;
    v23[1] = v20;
    v23[2] = BYTE1(v17);
    *v23 = BYTE1(v20);
    memcpy(v28, opt, v17);
    v23 = (unsigned __int8 *)&v28[v17];
    v42 = (_WORD)v28 + v17 - (_WORD)dest;
    v45[1] = v42;
    *v45 = HIBYTE(v42);
  }
  return v23 - (unsigned __int8 *)header;
}
