size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  int v9; // r9
  unsigned int v11; // r4
  unsigned __int8 *pseudoheader; // r0
  int v13; // r10
  unsigned __int8 *v14; // r7
  unsigned __int8 *v15; // r9
  unsigned int v16; // r2
  int v17; // r5
  unsigned int v18; // r2
  char *v19; // r3
  unsigned int v20; // r2
  signed int v21; // r11
  int v22; // r7
  unsigned int v23; // r1
  unsigned __int8 *v24; // r12
  unsigned int v25; // r0
  signed int v26; // r2
  int v27; // r1
  unsigned int v28; // r1
  unsigned int v29; // r0
  int v30; // r2
  unsigned __int8 *v31; // r0
  __int16 v32; // r5
  int v33; // r11
  int v34; // r0
  unsigned __int8 *v36; // r0
  char *v37; // r5
  _BYTE *v38; // r4
  bool v39; // zf
  int v40; // r9
  _BYTE *v41; // r0
  _BYTE *v42; // r5
  unsigned __int16 v43; // r1
  void *src; // [sp+14h] [bp-44h]
  unsigned int v46; // [sp+18h] [bp-40h]
  _BYTE *v47; // [sp+18h] [bp-40h]
  unsigned int v48; // [sp+1Ch] [bp-3Ch]
  unsigned __int8 *udp_len; // [sp+20h] [bp-38h] BYREF
  int is_sign; // [sp+24h] [bp-34h] BYREF
  int is_last; // [sp+28h] [bp-30h] BYREF

  LOWORD(v9) = udp_sz;
  v11 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  v13 = is_sign;
  if ( is_sign )
    return v11;
  v14 = pseudoheader;
  if ( !pseudoheader )
  {
    v32 = set_do;
    if ( set_do )
      v32 = 1;
    LOWORD(v17) = v32 << 15;
    LOWORD(v33) = 0;
LABEL_22:
    v34 = skip_questions(header, v11);
    if ( v34 )
    {
      v41 = (_BYTE *)skip_section(
                       v34,
                       (unsigned __int16)(HIBYTE(header->ancount) | (header->ancount << 8))
                     + (unsigned __int16)(HIBYTE(header->nscount) | (header->nscount << 8))
                     + (unsigned __int16)(HIBYTE(header->arcount) | (header->arcount << 8)),
                       header,
                       v11);
      v47 = v41;
      if ( v41 )
      {
        v41[9] = (unsigned int)(v13 << 16) >> 24;
        v41[4] = v9;
        v41[6] = v33;
        v41[8] = v17;
        *v41 = 0;
        v41[1] = 0;
        v41[3] = BYTE1(v9);
        v41[5] = BYTE1(v33);
        v41[7] = BYTE1(v17);
        v41[10] = v13;
        v41[2] = 41;
        v42 = v41 + 0xB;
        src = v41 + 0xB;
        if ( v14 )
        {
          memcpy(v41 + 0xB, v14, v13);
          free(v14);
          v19 = &v42[v13];
        }
        else
        {
          v19 = v41 + 0xB;
        }
        v37 = v19 + 4;
        if ( limit - (unsigned __int8 *)(v19 + 4) >= (int)optlen )
        {
          v38 = v47 + 9;
          v43 = (HIBYTE(header->arcount) | (header->arcount << 8)) + 1;
          header->arcount = HIBYTE(v43) | (v43 << 8);
          goto LABEL_34;
        }
      }
    }
    return v11;
  }
  v15 = udp_len;
  v16 = udp_len[4] | (udp_len[5] << 8);
  v48 = *udp_len | (udp_len[1] << 8);
  v17 = (unsigned __int16)((v16 >> 8) | ((_WORD)v16 << 8));
  v46 = udp_len[2] | (udp_len[3] << 8);
  if ( set_do )
  {
    v18 = ~((unsigned int)~(v17 << 17) >> 17) << 16;
    LOWORD(v17) = ~((unsigned int)~(v17 << 17) >> 17);
    udp_len[4] = HIBYTE(v18);
    v15[5] = v17;
  }
  v19 = (char *)(v15 + 8);
  v20 = v15[6] | (v15[7] << 8);
  v21 = (unsigned __int16)((v20 >> 8) | ((_WORD)v20 << 8));
  v22 = optno == 0;
  if ( v15 + 8 - (unsigned __int8 *)header + v21 > v11 )
    v22 = 1;
  src = v15 + 8;
  if ( v22 )
    return v11;
  if ( (unsigned __int16)((v20 >> 8) | ((_WORD)v20 << 8)) > 4u )
  {
    v23 = v15[10] | (v15[11] << 8);
    v24 = v15 + 0xC;
    v26 = (unsigned __int16)((v23 >> 8) | ((_WORD)v23 << 8));
    if ( v21 >= v26 )
      v19 = (char *)(v15 + 8);
    v25 = v15[8] | (v15[9] << 8);
    v27 = (unsigned __int16)((v25 >> 8) | ((_WORD)v25 << 8));
    if ( v21 >= v26 )
    {
      do
      {
        if ( v27 == optno )
        {
          if ( !replace )
            return v11;
          v30 = v26 + 4;
          v21 -= v30;
          v31 = (unsigned __int8 *)memcpy(v19, &v19[v30], v21 - v22);
          v15[7] = v21;
          v15[6] = (unsigned int)(v21 << 16) >> 24;
          v19 = (char *)v31;
        }
        else
        {
          v19 = (char *)&v24[v26];
          v22 += v26 + 4;
        }
        if ( v22 + 4 >= v21 )
          goto LABEL_25;
        v28 = (unsigned __int8)v19[2] | ((unsigned __int8)v19[3] << 8);
        v24 = (unsigned __int8 *)(v19 + 4);
        v29 = (unsigned __int8)*v19 | ((unsigned __int8)v19[1] << 8);
        v26 = (unsigned __int16)((v28 >> 8) | ((_WORD)v28 << 8));
        v27 = (unsigned __int16)((v29 >> 8) | ((_WORD)v29 << 8));
      }
      while ( v26 + v22 <= v21 );
    }
    is_last = 0;
    goto LABEL_40;
  }
  v19 = (char *)(v15 + 8);
LABEL_25:
  if ( !is_last )
  {
    if ( v21 )
    {
      v36 = (unsigned __int8 *)whine_malloc(v21);
      v14 = v36;
      if ( v36 )
        memcpy(v36, src, v21);
      v13 = v21;
      goto LABEL_30;
    }
LABEL_40:
    v14 = 0;
LABEL_30:
    v9 = (v48 >> 8) | (v48 << 8);
    v33 = (v46 >> 8) | (v46 << 8);
    v11 = rrfilter(header, v11, 0);
    goto LABEL_22;
  }
  v37 = v19 + 4;
  if ( limit - (unsigned __int8 *)(v19 + 4) < (int)optlen )
    return v11;
  v38 = v15 + 6;
LABEL_34:
  v39 = optno == 0;
  if ( optno )
    v39 = replace == 2;
  if ( !v39 )
  {
    v19[1] = optno;
    v19[3] = optlen;
    v19[2] = optlen << 16 >> 24;
    *v19 = (unsigned int)(optno << 16) >> 24;
    memcpy(v37, opt, optlen);
    v19 = &v37[optlen];
    v40 = &v37[optlen] - (_BYTE *)src;
    *v38 = (unsigned int)(v40 << 16) >> 24;
    v38[1] = v40;
  }
  return v19 - (char *)header;
}
