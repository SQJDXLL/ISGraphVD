size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int8 *pseudoheader; // rax
  __int64 v15; // rdx
  __int64 v16; // rbp
  _BYTE *v18; // rsi
  __int16 v19; // r13
  __int16 v20; // dx
  unsigned __int8 *v21; // r12
  __int16 v22; // ax
  int v23; // r8d
  unsigned __int64 v24; // rcx
  unsigned __int64 v25; // rdx
  char *v26; // rbx
  int v27; // ebp
  unsigned __int64 v28; // rax
  _BYTE *v29; // rsi
  unsigned __int64 v30; // r13
  void *v31; // rsi
  unsigned __int8 *v32; // rdi
  __int64 v33; // rdx
  __int16 v34; // r12
  unsigned __int16 v35; // bx
  size_t v36; // rbx
  void *v37; // rax
  __int64 v38; // rax
  __m128i v39; // xmm0
  __m128i v40; // xmm0
  __int64 v41; // rax
  _BYTE *v42; // rcx
  int v43; // eax
  char *v44; // rbx
  char *v45; // r13
  __int64 v46; // r13
  _BYTE *v47; // r13
  unsigned __int8 *v48; // rbp
  void *v49; // rdi
  __int64 v50; // rbx
  char *v51; // r13
  _BYTE *v53; // [rsp+8h] [rbp-80h]
  int v54; // [rsp+14h] [rbp-74h]
  __int16 v55; // [rsp+18h] [rbp-70h]
  __int16 v56; // [rsp+1Ch] [rbp-6Ch]
  void *ptr; // [rsp+20h] [rbp-68h]
  __int16 v58; // [rsp+28h] [rbp-60h]
  int is_last; // [rsp+2Ch] [rbp-5Ch] BYREF
  unsigned __int64 v60; // [rsp+30h] [rbp-58h]
  void *src; // [rsp+38h] [rbp-50h]
  void *v62; // [rsp+40h] [rbp-48h]
  unsigned __int8 *v63; // [rsp+48h] [rbp-40h] BYREF
  int is_sign[13]; // [rsp+54h] [rbp-34h] BYREF

  pseudoheader = find_pseudoheader(header, plen, 0LL, &v63, is_sign, &is_last);
  if ( is_sign[0] )
    return plen;
  v60 = 0LL;
  v62 = opt;
  v54 = optno;
  v18 = 0LL;
  LOBYTE(v15) = set_do != 0;
  if ( !pseudoheader )
  {
    LOBYTE(v18) = set_do != 0;
    v58 = (_WORD)v18 << 15;
    ptr = 0LL;
    v34 = 0;
    v35 = udp_sz;
    v16 = plen;
    goto LABEL_27;
  }
  v19 = *(_WORD *)v63;
  v20 = *((_WORD *)v63 + 1);
  v21 = v63;
  v22 = __ROL2__(*((_WORD *)v63 + 2), 8);
  if ( set_do )
  {
    v22 |= 0x8000u;
    v63[4] = HIBYTE(v22);
  }
  v23 = optno;
  v24 = (unsigned __int64)header;
  if ( !optno )
    return plen;
  v56 = v20;
  v58 = v22;
  v25 = _byteswap_uint64((unsigned __int64)*((unsigned __int16 *)v21 + 3) << 48);
  v26 = (char *)(v21 + 8);
  if ( v25 + v21 + 8 - (unsigned __int8 *)header > plen )
    return plen;
  v55 = v19;
  src = v21 + 8;
  if ( (unsigned int)v25 >= 5 )
  {
    v27 = 0;
    while ( 1 )
    {
      v28 = _byteswap_uint64((unsigned __int64)*((unsigned __int16 *)v26 + 1) << 48);
      if ( (int)v28 + v27 > (int)v25 )
        break;
      v29 = v26 + 4;
      if ( _byteswap_ulong(*(unsigned __int16 *)v26 << 16) == v23 )
      {
        if ( !replace )
          return plen;
        v18 = &v29[v28];
        v30 = (unsigned int)(v25 - v28 - 4);
        memcpy(v26, v18, (int)v30 - v27);
        v24 = (unsigned __int64)v21;
        v25 = v30;
        v23 = v54;
        *((_WORD *)v21 + 3) = __ROL2__(v30, 8);
      }
      else
      {
        v24 = (unsigned int)v28;
        v18 = &v29[(unsigned int)v28];
        v27 += v28 + 4;
        v26 = v18;
      }
      if ( v27 + 4 >= (int)v25 )
        goto LABEL_17;
    }
    is_last = 0;
LABEL_24:
    v60 = 0LL;
    goto LABEL_25;
  }
LABEL_17:
  if ( is_last )
  {
    v31 = v62;
    v32 = v21 + 6;
    v33 = optlen;
    v16 = plen;
    goto LABEL_34;
  }
  if ( !(_DWORD)v25 )
    goto LABEL_24;
  v60 = v25;
  v36 = (int)v25;
  v37 = (void *)whine_malloc((int)v25, v18, v25, v24);
  if ( !v37 )
  {
LABEL_25:
    ptr = 0LL;
    goto LABEL_26;
  }
  ptr = v37;
  memcpy(v37, src, v36);
LABEL_26:
  v35 = __ROL2__(v55, 8);
  v34 = __ROL2__(v56, 8);
  v16 = rrfilter(header, plen, 0LL);
LABEL_27:
  v38 = skip_questions(header, v16, v15);
  if ( !v38 )
    return v16;
  v39 = _mm_cvtsi32_si128(*(_DWORD *)&header->ancount);
  v40 = _mm_unpacklo_epi16(_mm_or_si128(_mm_slli_epi16(v39, 8u), _mm_srli_epi16(v39, 8u)), (__m128i)0LL);
  v41 = skip_section(
          v38,
          _mm_cvtsi128_si32(_mm_add_epi32(_mm_shuffle_epi32(v40, 229), v40))
        + (unsigned int)(unsigned __int16)__ROL2__(header->arcount, 8),
          header,
          v16);
  if ( !v41 )
    return v16;
  v42 = (_BYTE *)v41;
  *(_WORD *)v41 = 0;
  *(_BYTE *)(v41 + 2) = 41;
  *(_BYTE *)(v41 + 3) = HIBYTE(v35);
  *(_BYTE *)(v41 + 4) = v35;
  *(_BYTE *)(v41 + 5) = HIBYTE(v34);
  *(_BYTE *)(v41 + 6) = v34;
  *(_BYTE *)(v41 + 7) = HIBYTE(v58);
  *(_BYTE *)(v41 + 8) = v58;
  v43 = v60;
  v42[9] = BYTE1(v60);
  v42[10] = v43;
  v44 = v42 + 11;
  v45 = v42 + 11;
  if ( ptr )
  {
    v46 = v43;
    v53 = v42;
    memcpy(v42 + 11, ptr, v43);
    free(ptr);
    v42 = v53;
    v45 = &v44[v46];
  }
  src = v44;
  v32 = v42 + 9;
  v33 = optlen;
  v31 = v62;
  v26 = v45;
  if ( limit - (unsigned __int8 *)v45 - 4 >= (__int64)optlen )
  {
    header->arcount = __ROL2__(__ROL2__(header->arcount, 8) + 1, 8);
    v33 = optlen;
  }
  v23 = v54;
LABEL_34:
  v47 = v26 + 4;
  if ( limit - (unsigned __int8 *)(v26 + 4) >= v33 )
  {
    if ( v23 && replace != 2 )
    {
      *v26 = BYTE1(v23);
      v26[1] = v23;
      v26[2] = BYTE1(v33);
      v26[3] = v33;
      v48 = v32;
      v49 = v26 + 4;
      v50 = v33;
      memcpy(v49, v31, v33);
      v51 = &v47[v50];
      *(_WORD *)v48 = __ROL2__((_WORD)v51 - (_WORD)src, 8);
      v26 = v51;
    }
    return v26 - (char *)header;
  }
  return v16;
}
