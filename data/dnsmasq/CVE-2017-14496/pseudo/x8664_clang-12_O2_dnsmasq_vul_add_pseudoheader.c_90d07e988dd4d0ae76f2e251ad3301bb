size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int64 v13; // r14
  unsigned __int8 *pseudoheader; // rax
  __int64 v15; // rdx
  __int16 v17; // si
  unsigned __int8 *v18; // rsi
  __int16 v19; // ax
  unsigned __int64 v20; // rdx
  unsigned __int8 *v21; // r12
  char *v22; // rbx
  int v23; // ebp
  unsigned __int64 v24; // rax
  _BYTE *v25; // rsi
  unsigned __int64 v26; // r13
  unsigned __int8 *v27; // rsi
  _WORD *v28; // rbp
  size_t v29; // rbx
  void *v30; // rax
  __int64 v31; // rax
  __m128i v32; // xmm0
  __m128i v33; // xmm0
  __int64 v34; // rax
  int v35; // ecx
  char *v36; // rbp
  __int64 v37; // rbx
  int v38; // [rsp+4h] [rbp-84h]
  __int16 v39; // [rsp+8h] [rbp-80h]
  __int16 v40; // [rsp+8h] [rbp-80h]
  __int64 v41; // [rsp+8h] [rbp-80h]
  __int16 v42; // [rsp+14h] [rbp-74h]
  unsigned __int8 *v43; // [rsp+18h] [rbp-70h]
  unsigned __int8 *v44; // [rsp+20h] [rbp-68h]
  void *ptr; // [rsp+28h] [rbp-60h]
  __int16 v46; // [rsp+30h] [rbp-58h]
  int is_last; // [rsp+34h] [rbp-54h] BYREF
  unsigned __int64 v48; // [rsp+38h] [rbp-50h]
  void *src; // [rsp+40h] [rbp-48h]
  int is_sign; // [rsp+4Ch] [rbp-3Ch] BYREF
  unsigned __int8 *v51; // [rsp+50h] [rbp-38h] BYREF

  v13 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0LL, &v51, &is_sign, &is_last);
  if ( is_sign )
    return v13;
  v48 = 0LL;
  HIBYTE(v17) = 0;
  LOBYTE(v15) = set_do != 0;
  if ( !pseudoheader )
  {
    LOBYTE(v17) = set_do != 0;
    v46 = v17 << 15;
    ptr = 0LL;
    v40 = 0;
    goto LABEL_26;
  }
  v18 = v51;
  v19 = __ROL2__(*((_WORD *)v51 + 2), 8);
  if ( set_do )
  {
    v19 |= 0x8000u;
    v51[4] = HIBYTE(v19);
  }
  if ( optno )
  {
    v46 = v19;
    v20 = _byteswap_uint64((unsigned __int64)*((unsigned __int16 *)v18 + 3) << 48);
    if ( v20 + v18 + 8 - (unsigned __int8 *)header <= v13 )
    {
      v43 = opt;
      v44 = limit;
      v38 = optno;
      v42 = *(_WORD *)v18;
      v21 = v18;
      v39 = *((_WORD *)v18 + 1);
      src = v18 + 8;
      v22 = (char *)(v18 + 8);
      if ( (unsigned int)v20 < 5 )
      {
LABEL_17:
        if ( is_last )
        {
          v27 = v43;
          v28 = v21 + 6;
          limit = v44;
LABEL_32:
          if ( limit - (unsigned __int8 *)(v22 + 4) >= (__int64)optlen )
          {
            if ( v38 && replace != 2 )
            {
              *v22 = BYTE1(v38);
              v22[1] = v38;
              v22[2] = BYTE1(optlen);
              v22[3] = optlen;
              memcpy(v22 + 4, v27, optlen);
              *v28 = __ROL2__(optlen + (_WORD)v22 + 4 - (_WORD)src, 8);
              v22 += optlen + 4;
            }
            return v22 - (char *)header;
          }
          return v13;
        }
        if ( (_DWORD)v20 )
        {
          v48 = v20;
          v29 = (int)v20;
          v30 = (void *)whine_malloc((int)v20);
          if ( v30 )
          {
            ptr = v30;
            memcpy(v30, src, v29);
LABEL_25:
            optno = v38;
            limit = v44;
            opt = v43;
            udp_sz = __ROL2__(v42, 8);
            v40 = __ROL2__(v39, 8);
            v13 = rrfilter(header, v13, 0LL);
LABEL_26:
            v31 = skip_questions(header, v13, v15);
            if ( !v31 )
              return v13;
            v32 = _mm_cvtsi32_si128(*(_DWORD *)&header->ancount);
            v33 = _mm_or_si128(_mm_slli_epi16(v32, 8u), _mm_srli_epi16(v32, 8u));
            v34 = skip_section(
                    v31,
                    _mm_cvtsi128_si32(_mm_add_epi32(_mm_srli_epi32(v33, 0x10u), _mm_unpacklo_epi16(v33, (__m128i)0LL)))
                  + (unsigned int)(unsigned __int16)__ROL2__(header->arcount, 8),
                    header,
                    v13);
            if ( !v34 )
              return v13;
            v38 = optno;
            *(_WORD *)v34 = 0;
            *(_BYTE *)(v34 + 2) = 41;
            *(_BYTE *)(v34 + 3) = HIBYTE(udp_sz);
            *(_BYTE *)(v34 + 4) = udp_sz;
            *(_BYTE *)(v34 + 5) = HIBYTE(v40);
            *(_BYTE *)(v34 + 6) = v40;
            *(_BYTE *)(v34 + 7) = HIBYTE(v46);
            *(_BYTE *)(v34 + 8) = v46;
            v35 = v48;
            *(_BYTE *)(v34 + 9) = BYTE1(v48);
            *(_BYTE *)(v34 + 10) = v35;
            v36 = (char *)(v34 + 11);
            v22 = (char *)(v34 + 11);
            v41 = v34;
            if ( ptr )
            {
              v37 = v35;
              memcpy((void *)(v34 + 11), ptr, v35);
              free(ptr);
              v22 = &v36[v37];
            }
            src = v36;
            v28 = (_WORD *)(v41 + 9);
            v27 = opt;
            if ( limit - (unsigned __int8 *)v22 - 4 >= (__int64)optlen )
              header->arcount = __ROL2__(__ROL2__(header->arcount, 8) + 1, 8);
            goto LABEL_32;
          }
LABEL_24:
          ptr = 0LL;
          goto LABEL_25;
        }
      }
      else
      {
        v23 = 0;
        while ( 1 )
        {
          v24 = _byteswap_uint64((unsigned __int64)*((unsigned __int16 *)v22 + 1) << 48);
          if ( (int)v24 + v23 > (int)v20 )
            break;
          v25 = v22 + 4;
          if ( _byteswap_ulong(*(unsigned __int16 *)v22 << 16) == v38 )
          {
            if ( !replace )
              return v13;
            v26 = (unsigned int)(v20 - v24 - 4);
            memcpy(v22, &v25[v24], (int)v26 - v23);
            v20 = v26;
            *((_WORD *)v21 + 3) = __ROL2__(v26, 8);
          }
          else
          {
            v23 += v24 + 4;
            v22 = &v25[(unsigned int)v24];
          }
          if ( v23 + 4 >= (int)v20 )
            goto LABEL_17;
        }
        is_last = 0;
      }
      v48 = 0LL;
      goto LABEL_24;
    }
  }
  return v13;
}
