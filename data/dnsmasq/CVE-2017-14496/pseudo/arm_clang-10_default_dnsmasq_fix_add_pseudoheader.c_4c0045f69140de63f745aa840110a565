size_t __cdecl add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  __int16 v9; // r1
  int v10; // r0
  unsigned __int8 *v11; // r0
  uint16_t v12; // r0
  int v14; // [sp+Ch] [bp-ECh]
  int v15; // [sp+10h] [bp-E8h]
  unsigned __int8 *v16; // [sp+14h] [bp-E4h]
  unsigned __int8 *v17; // [sp+38h] [bp-C0h]
  unsigned __int8 v18; // [sp+3Eh] [bp-BAh]
  unsigned __int8 *v19; // [sp+40h] [bp-B8h]
  unsigned __int8 *v20; // [sp+48h] [bp-B0h]
  unsigned __int8 *v21; // [sp+50h] [bp-A8h]
  unsigned __int8 v22; // [sp+56h] [bp-A2h]
  unsigned __int8 *v23; // [sp+58h] [bp-A0h]
  unsigned __int8 *v24; // [sp+60h] [bp-98h]
  unsigned __int8 *v25; // [sp+68h] [bp-90h]
  unsigned __int8 v26; // [sp+6Eh] [bp-8Ah]
  unsigned __int8 *v27; // [sp+70h] [bp-88h]
  unsigned __int8 *v28; // [sp+78h] [bp-80h]
  unsigned __int8 t_s_0; // [sp+7Eh] [bp-7Ah]
  unsigned __int8 *t_cp_2; // [sp+8Ch] [bp-6Ch]
  unsigned __int16 len; // [sp+A0h] [bp-58h]
  unsigned __int16 code; // [sp+A2h] [bp-56h]
  int i; // [sp+A4h] [bp-54h]
  unsigned __int16 rcode; // [sp+A8h] [bp-50h]
  unsigned __int16 flags; // [sp+AAh] [bp-4Eh]
  int is_last; // [sp+ACh] [bp-4Ch] BYREF
  int is_sign; // [sp+B0h] [bp-48h] BYREF
  int rdlen; // [sp+B4h] [bp-44h]
  unsigned __int8 *buff; // [sp+B8h] [bp-40h]
  unsigned __int8 *udp_len; // [sp+BCh] [bp-3Ch] BYREF
  unsigned __int8 *p; // [sp+C0h] [bp-38h]
  unsigned __int8 *datap; // [sp+C4h] [bp-34h]
  unsigned __int8 *lenp; // [sp+C8h] [bp-30h]
  unsigned __int16 udp_sza; // [sp+CEh] [bp-2Ah]
  unsigned __int8 *limita; // [sp+D0h] [bp-28h]
  size_t plena; // [sp+D4h] [bp-24h]
  dns_header *headera; // [sp+D8h] [bp-20h]

  headera = header;
  plena = plen;
  limita = limit;
  udp_sza = udp_sz;
  buff = 0;
  rdlen = 0;
  v9 = set_do;
  if ( set_do )
    v9 = 1;
  flags = v9 << 15;
  rcode = 0;
  p = find_pseudoheader(headera, plena, 0u, &udp_len, &is_sign, &is_last);
  if ( is_sign )
    return plena;
  if ( p )
  {
    p = udp_len;
    udp_sza = _byteswap_ushort(*(_WORD *)udp_len);
    p = udp_len + 2;
    rcode = _byteswap_ushort(*((_WORD *)udp_len + 1));
    p = udp_len + 4;
    flags = _byteswap_ushort(*((_WORD *)udp_len + 2));
    p = udp_len + 6;
    if ( set_do )
    {
      p += -0x2;
      flags |= 0x8000u;
      t_cp_2 = p + 1;
      *p = HIBYTE(flags);
      *t_cp_2 = flags;
      p += 2;
    }
    lenp = p;
    rdlen = p[1] | (*p << 8);
    p += 2;
    if ( p - (unsigned __int8 *)headera + rdlen > plena )
      return plena;
    datap = p;
    if ( !optno )
      return plena;
    i = 0;
    while ( i + 4 < rdlen )
    {
      code = _byteswap_ushort(*(_WORD *)p);
      p += 2;
      len = _byteswap_ushort(*(_WORD *)p);
      p += 2;
      if ( i + len + 4 > rdlen )
      {
        rdlen = 0;
        is_last = 0;
        break;
      }
      if ( code == optno )
      {
        if ( !replace )
          return plena;
        p += -0x4;
        rdlen = rdlen - len - 4;
        memcpy(p, &p[len + 4], rdlen - i);
        t_s_0 = rdlen;
        v28 = lenp + 1;
        *lenp = BYTE1(rdlen);
        *v28 = t_s_0;
        lenp += 2;
        lenp += -0x2;
      }
      else
      {
        p += len;
        i += len + 4;
      }
    }
    if ( !is_last )
    {
      if ( rdlen )
      {
        buff = (unsigned __int8 *)whine_malloc(rdlen);
        if ( buff )
          memcpy(buff, datap, rdlen);
      }
      plena = rrfilter(headera, plena);
      p = 0;
    }
  }
  if ( !p )
  {
    p = (unsigned __int8 *)skip_questions(headera, plena);
    if ( !p )
      return plena;
    v16 = p;
    v15 = ntohs(headera->ancount);
    v14 = v15 + ntohs(headera->nscount);
    v10 = ntohs(headera->arcount);
    p = (unsigned __int8 *)skip_section(v16, v14 + v10, headera, plena);
    if ( !p )
      return plena;
    if ( p + 0xB > limita )
      return plena;
    v11 = p++;
    *v11 = 0;
    v27 = p + 1;
    *p = 0;
    *v27 = 41;
    p += 2;
    v26 = udp_sza;
    v25 = p + 1;
    *p = HIBYTE(udp_sza);
    *v25 = v26;
    p += 2;
    v24 = p + 1;
    *p = HIBYTE(rcode);
    *v24 = rcode;
    p += 2;
    v23 = p + 1;
    *p = HIBYTE(flags);
    *v23 = flags;
    p += 2;
    lenp = p;
    v22 = rdlen;
    v21 = p + 1;
    *p = BYTE1(rdlen);
    *v21 = v22;
    p += 2;
    datap = p;
    if ( buff )
    {
      if ( &p[rdlen] > limita )
      {
        free(buff);
        return plena;
      }
      memcpy(p, buff, rdlen);
      free(buff);
      p += rdlen;
    }
    if ( (int)optlen <= limita - p - 4 )
    {
      v12 = ntohs(headera->arcount);
      headera->arcount = htons(v12 + 1);
    }
  }
  if ( (int)optlen <= limita - p - 4 )
  {
    if ( optno && replace != 2 )
    {
      if ( p + 4 > limita )
        return plena;
      v20 = p + 1;
      *p = BYTE1(optno);
      *v20 = optno;
      p += 2;
      v19 = p + 1;
      *p = BYTE1(optlen);
      *v19 = optlen;
      p += 2;
      if ( &p[optlen] > limita )
        return plena;
      memcpy(p, opt, optlen);
      p += optlen;
      v18 = (_BYTE)p - (_BYTE)datap;
      v17 = lenp + 1;
      *lenp = (unsigned __int16)((_WORD)p - (_WORD)datap) >> 8;
      *v17 = v18;
      lenp += 2;
    }
    return p - (unsigned __int8 *)headera;
  }
  return plena;
}
