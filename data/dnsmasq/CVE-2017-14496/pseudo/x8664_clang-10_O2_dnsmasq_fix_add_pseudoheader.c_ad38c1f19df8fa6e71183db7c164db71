size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int64 v13; // rbx
  unsigned __int8 *pseudoheader; // rax
  __int64 v15; // rdx
  __int64 v16; // r15
  __int16 v18; // si
  unsigned __int8 *v19; // rdx
  __int16 v20; // r12
  _BYTE *v21; // rsi
  __int16 v22; // ax
  char *v23; // rbp
  unsigned __int8 *v24; // r12
  int v25; // r13d
  int v26; // ecx
  __int64 v27; // rdx
  unsigned __int64 v28; // rax
  _BYTE *v29; // rsi
  void *v30; // r13
  __int16 v31; // bp
  dns_header *v32; // r14
  unsigned int v33; // ebx
  _WORD *v34; // r12
  void *v35; // rsi
  signed __int64 v36; // rdx
  unsigned __int64 v37; // rcx
  size_t v38; // r15
  void *v39; // rax
  __int16 v40; // r12
  __int64 v41; // rax
  __int64 v42; // rax
  void *v43; // rsi
  char *v44; // r13
  __int64 v45; // r12
  char *v46; // rdi
  unsigned int v47; // [rsp+4h] [rbp-74h]
  __int16 v49; // [rsp+14h] [rbp-64h]
  __int16 v50; // [rsp+18h] [rbp-60h]
  int is_last; // [rsp+1Ch] [rbp-5Ch] BYREF
  void *src; // [rsp+20h] [rbp-58h]
  void *v53; // [rsp+28h] [rbp-50h]
  unsigned __int8 *v54; // [rsp+30h] [rbp-48h]
  int v55; // [rsp+38h] [rbp-40h]
  int is_sign; // [rsp+3Ch] [rbp-3Ch] BYREF
  unsigned __int8 *v57; // [rsp+40h] [rbp-38h] BYREF

  LODWORD(v13) = 0;
  pseudoheader = find_pseudoheader(header, plen, 0LL, &v57, &is_sign, &is_last);
  if ( is_sign )
    return plen;
  v53 = opt;
  v54 = limit;
  v47 = optno;
  HIBYTE(v18) = 0;
  LOBYTE(v15) = set_do != 0;
  if ( !pseudoheader )
  {
    LOBYTE(v18) = set_do != 0;
    v50 = v18 << 15;
    v30 = 0LL;
    v31 = 0;
    v32 = header;
    v16 = plen;
    goto LABEL_29;
  }
  v19 = v57;
  v20 = *(_WORD *)v57;
  v21 = (_BYTE *)*((unsigned __int16 *)v57 + 1);
  v22 = __ROL2__(*((_WORD *)v57 + 2), 8);
  if ( set_do )
  {
    v22 |= 0x8000u;
    v57[4] = HIBYTE(v22);
  }
  if ( !optno )
    return plen;
  v55 = (int)v21;
  v50 = v22;
  v49 = v20;
  v13 = _byteswap_uint64((unsigned __int64)*((unsigned __int16 *)v19 + 3) << 48);
  v23 = (char *)(v19 + 8);
  if ( v13 + v19 + 8 - (unsigned __int8 *)header > plen )
    return plen;
  src = v19 + 8;
  v24 = v19;
  if ( (unsigned int)v13 >= 5 )
  {
    v25 = 0;
    v26 = 4;
    v27 = v47;
    while ( 1 )
    {
      v28 = _byteswap_uint64((unsigned __int64)*((unsigned __int16 *)v23 + 1) << 48);
      if ( (int)v28 + v26 > (int)v13 )
        break;
      v29 = v23 + 4;
      if ( _byteswap_ulong(*(unsigned __int16 *)v23 << 16) == (_DWORD)v27 )
      {
        if ( !replace )
          return plen;
        LODWORD(v13) = v13 - v28 - 4;
        v21 = &v29[v28];
        memcpy(v23, v21, (int)v13 - v25);
        v27 = v47;
        *((_WORD *)v24 + 3) = __ROL2__(v13, 8);
      }
      else
      {
        v21 = &v29[(unsigned int)v28];
        v25 += v28 + 4;
        v23 = v21;
      }
      v26 = v25 + 4;
      if ( v25 + 4 >= (int)v13 )
        goto LABEL_19;
    }
    is_last = 0;
    LODWORD(v13) = 0;
    v30 = 0LL;
    v40 = v49;
    v32 = header;
    v38 = plen;
    goto LABEL_28;
  }
  v27 = v47;
LABEL_19:
  v32 = header;
  if ( is_last )
  {
    v33 = v27;
    v34 = v24 + 6;
    v35 = v53;
    v36 = optlen;
    v37 = (unsigned __int64)v54;
    v16 = plen;
    goto LABEL_39;
  }
  v38 = plen;
  if ( !(_DWORD)v13 )
  {
    LODWORD(v13) = 0;
    goto LABEL_26;
  }
  v39 = (void *)whine_malloc((int)v13, v21, v27);
  if ( !v39 )
  {
LABEL_26:
    v30 = 0LL;
    goto LABEL_27;
  }
  v30 = v39;
  memcpy(v39, src, (int)v13);
LABEL_27:
  v40 = v49;
LABEL_28:
  udp_sz = __ROL2__(v40, 8);
  v31 = __ROL2__(v55, 8);
  v16 = rrfilter(v32, v38, 0LL);
LABEL_29:
  v41 = skip_questions(v32, v16, v15);
  if ( !v41 )
    return v16;
  v42 = skip_section(
          v41,
          (unsigned __int16)__ROL2__(v32->ancount, 8)
        + (unsigned __int16)__ROL2__(v32->nscount, 8)
        + (unsigned int)(unsigned __int16)__ROL2__(v32->arcount, 8),
          v32,
          v16);
  if ( !v42 )
    return v16;
  v43 = v30;
  v44 = (char *)(v42 + 11);
  v37 = (unsigned __int64)v54;
  if ( v42 + 11 > (unsigned __int64)v54 )
    return v16;
  *(_WORD *)v42 = 0;
  *(_BYTE *)(v42 + 2) = 41;
  *(_BYTE *)(v42 + 3) = HIBYTE(udp_sz);
  *(_BYTE *)(v42 + 4) = udp_sz;
  *(_BYTE *)(v42 + 5) = HIBYTE(v31);
  *(_BYTE *)(v42 + 6) = v31;
  *(_BYTE *)(v42 + 7) = HIBYTE(v50);
  *(_BYTE *)(v42 + 8) = v50;
  *(_BYTE *)(v42 + 9) = BYTE1(v13);
  v45 = v42;
  *(_BYTE *)(v42 + 10) = v13;
  v23 = (char *)(v42 + 11);
  if ( v43 )
  {
    v23 = &v44[(int)v13];
    if ( (unsigned __int64)v23 > v37 )
    {
      free(v43);
      return v16;
    }
    memcpy((void *)(v42 + 11), v43, (int)v13);
    free(v43);
    v37 = (unsigned __int64)v54;
  }
  src = v44;
  v34 = (_WORD *)(v45 + 9);
  v36 = optlen;
  if ( (__int64)(v37 - (_QWORD)v23 - 4) >= (__int64)optlen )
    v32->arcount = __ROL2__(__ROL2__(v32->arcount, 8) + 1, 8);
  v33 = v47;
  v35 = v53;
LABEL_39:
  v46 = v23 + 4;
  if ( (__int64)(v37 - (_QWORD)(v23 + 4)) < v36 )
    return v16;
  if ( !v33 || replace == 2 )
    return v23 - (char *)v32;
  if ( (unsigned __int64)v46 <= v37 )
  {
    *v23 = BYTE1(v33);
    v23[1] = v33;
    v23[2] = BYTE1(v36);
    v23[3] = v36;
    v23 = &v46[v36];
    if ( (unsigned __int64)&v46[v36] <= v37 )
    {
      memcpy(v46, v35, v36);
      *v34 = __ROL2__((_WORD)v23 - (_WORD)src, 8);
      return v23 - (char *)v32;
    }
  }
  return v16;
}
