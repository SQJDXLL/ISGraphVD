size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  int v9; // r10
  unsigned int v11; // r9
  unsigned __int8 *pseudoheader; // r0
  int v13; // r4
  unsigned __int8 *v14; // r6
  unsigned __int8 *v15; // r6
  unsigned int v16; // r3
  int v17; // r8
  unsigned int v18; // r3
  char *v19; // r5
  unsigned int v20; // r3
  int v21; // r10
  unsigned __int8 *v22; // r3
  unsigned int v23; // r1
  int v24; // r2
  unsigned int v25; // r0
  int v26; // r1
  int v27; // r1
  unsigned __int8 *v28; // r0
  _BYTE *v29; // r8
  unsigned __int8 *v30; // r0
  int v31; // r5
  int v32; // r0
  _BYTE *v33; // r0
  unsigned __int16 v34; // r2
  unsigned __int8 *v35; // r4
  bool v36; // zf
  size_t v37; // r5
  unsigned int limita; // [sp+Ch] [bp-4Ch]
  unsigned int v40; // [sp+10h] [bp-48h]
  unsigned __int8 *udp_len; // [sp+18h] [bp-40h] BYREF
  int is_sign; // [sp+1Ch] [bp-3Ch] BYREF
  int is_last; // [sp+20h] [bp-38h] BYREF

  LOWORD(v9) = udp_sz;
  v11 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  v13 = is_sign;
  if ( is_sign )
    return v11;
  v14 = pseudoheader;
  if ( pseudoheader )
  {
    v15 = udp_len;
    v40 = *udp_len | (udp_len[1] << 8);
    limita = udp_len[2] | (udp_len[3] << 8);
    v16 = udp_len[4] | (udp_len[5] << 8);
    v17 = (unsigned __int16)((v16 >> 8) | ((_WORD)v16 << 8));
    if ( set_do )
    {
      v18 = ~((unsigned int)~(v17 << 17) >> 17) << 16;
      LOWORD(v17) = ~((unsigned int)~(v17 << 17) >> 17);
      udp_len[4] = HIBYTE(v18);
      v15[5] = v17;
    }
    v19 = (char *)(v15 + 8);
    v20 = v15[6] | (v15[7] << 8);
    v13 = (unsigned __int16)((v20 >> 8) | ((_WORD)v20 << 8));
    v21 = optno == 0;
    if ( v15 + 8 - (unsigned __int8 *)header + v13 > v11 )
      v21 = 1;
    if ( v21 )
      return v11;
    v22 = v15 + 8;
    while ( v21 + 4 < v13 )
    {
      v23 = *v22 | (v22[1] << 8);
      v24 = (v23 >> 8) | (v23 << 8);
      v25 = v22[2] | (v22[3] << 8);
      v26 = (unsigned __int16)((v25 >> 8) | ((_WORD)v25 << 8));
      if ( v26 + v21 > v13 )
      {
        v13 = 0;
        is_last = 0;
LABEL_12:
        v14 = (unsigned __int8 *)v13;
        goto LABEL_22;
      }
      if ( (unsigned __int16)v24 == optno )
      {
        if ( !replace )
          return v11;
        v27 = v26 + 4;
        v13 -= v27;
        v28 = (unsigned __int8 *)memcpy(v22, &v22[v27], v13 - v21);
        v15[6] = (unsigned int)(v13 << 16) >> 24;
        v15[7] = v13;
        v22 = v28;
      }
      else
      {
        v22 += v26 + 4;
        v21 += v26 + 4;
      }
    }
    if ( is_last )
    {
      v29 = v15 + 6;
      goto LABEL_31;
    }
    if ( !v13 )
      goto LABEL_12;
    v30 = (unsigned __int8 *)whine_malloc(v13);
    v14 = v30;
    if ( v30 )
      memcpy(v30, v19, v13);
LABEL_22:
    v9 = (v40 >> 8) | (v40 << 8);
    v31 = (limita >> 8) | (limita << 8);
    v11 = rrfilter(header, v11, 0);
  }
  else
  {
    LOWORD(v17) = (set_do != 0) << 15;
    LOWORD(v31) = 0;
  }
  v32 = skip_questions(header, v11);
  if ( v32 )
  {
    v33 = (_BYTE *)skip_section(
                     v32,
                     (unsigned __int16)(HIBYTE(header->ancount) | (header->ancount << 8))
                   + (unsigned __int16)(HIBYTE(header->nscount) | (header->nscount << 8))
                   + (unsigned __int16)(HIBYTE(header->arcount) | (header->arcount << 8)),
                     header,
                     v11);
    if ( v33 )
    {
      *v33 = 0;
      v33[1] = 0;
      v33[2] = 41;
      v33[3] = BYTE1(v9);
      v33[5] = BYTE1(v31);
      v33[7] = BYTE1(v17);
      v22 = (unsigned __int8 *)((unsigned int)(v13 << 16) >> 24);
      v33[6] = v31;
      v19 = v33 + 0xB;
      v33[8] = v17;
      v33[9] = (_BYTE)v22;
      v29 = v33 + 9;
      if ( !v14 )
        v22 = v33 + 0xB;
      v33[4] = v9;
      v33[10] = v13;
      if ( v14 )
      {
        memcpy(v33 + 0xB, v14, v13);
        free(v14);
        v22 = (unsigned __int8 *)&v19[v13];
      }
      if ( limit - (v22 + 4) >= (int)optlen )
      {
        v34 = (HIBYTE(header->arcount) | (header->arcount << 8)) + 1;
        header->arcount = HIBYTE(v34) | (v34 << 8);
      }
LABEL_31:
      v35 = v22 + 4;
      if ( limit - (v22 + 4) >= (int)optlen )
      {
        v36 = optno == 0;
        if ( optno )
          v36 = replace == 2;
        if ( !v36 )
        {
          *v22 = (unsigned int)(optno << 16) >> 24;
          v22[3] = optlen;
          v22[1] = optno;
          v22[2] = optlen << 16 >> 24;
          memcpy(v22 + 4, opt, optlen);
          v22 = &v35[optlen];
          v37 = &v35[optlen] - (unsigned __int8 *)v19;
          *v29 = v37 << 16 >> 24;
          v29[1] = v37;
        }
        return v22 - (unsigned __int8 *)header;
      }
    }
  }
  return v11;
}
