int __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int a5,
        int a6,
        int a7,
        int a8,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int8 *pseudoheader; // $v0
  size_t v16; // $s0
  int v17; // $s4
  unsigned __int8 *v18; // $fp
  unsigned __int8 *v19; // $fp
  unsigned __int16 v20; // $s6
  int v21; // $t0
  unsigned __int8 *v22; // $s7
  int v23; // $v1
  int v24; // $v0
  unsigned __int8 *v25; // $a1
  int v26; // $t3
  int v27; // $v0
  int v28; // $v1
  int v29; // $a0
  int result; // $v0
  unsigned __int8 *v31; // $v0
  int v32; // $v0
  int v33; // $a3
  _WORD *v34; // $s1
  unsigned __int8 *v35; // $a0
  unsigned __int8 *v36; // $s7
  int rdlena; // [sp+20h] [-28h]
  int rdlen; // [sp+20h] [-28h]
  int i; // [sp+24h] [-24h]
  unsigned __int8 *t_cp; // [sp+30h] [-18h]
  u16 t_s; // [sp+36h] [-12h]
  unsigned __int8 *udp_len; // [sp+38h] [-10h] BYREF
  int is_sign; // [sp+3Ch] [-Ch] BYREF
  int is_last; // [sp+40h] [-8h] BYREF

  v16 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  v17 = is_sign;
  if ( is_sign )
    return v16;
  v18 = pseudoheader;
  if ( pseudoheader )
  {
    v19 = udp_len;
    v20 = _byteswap_ushort(*((_WORD *)udp_len + 2));
    udp_sz = _byteswap_ushort(*(_WORD *)udp_len);
    t_s = _byteswap_ushort(*((_WORD *)udp_len + 1));
    if ( set_do )
    {
      v20 |= 0x8000u;
      udp_len[4] = HIBYTE(v20);
      v19[5] = v20;
    }
    v21 = v19[7] | (v19[6] << 8);
    t_cp = v19 + 8;
    if ( v16 < v19 + 8 - (unsigned __int8 *)header + v21 || !optno )
      return v16;
    v22 = v19 + 8;
    if ( v21 < 5 )
    {
      v27 = is_last;
LABEL_21:
      if ( v27 )
      {
        v35 = v22 + 4;
        result = v16;
        if ( limit - (v22 + 4) < (int)optlen )
          return result;
        v34 = v19 + 6;
        goto LABEL_38;
      }
      if ( v21 )
      {
        rdlen = v21;
        v31 = (unsigned __int8 *)whine_malloc(v21);
        v18 = v31;
        if ( v31 )
          memcpy(v31, t_cp, rdlen);
        v17 = rdlen;
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
    else
    {
      v23 = v19[11] | (v19[10] << 8);
      v24 = v19[9] | (v19[8] << 8);
      v25 = v19 + 0xC;
      if ( v21 >= v23 + 4 )
      {
        v22 = v19 + 8;
        v26 = 0;
        do
        {
          if ( v24 == optno )
          {
            v28 = v23 + 4;
            if ( !replace )
              return v16;
            i = v26;
            rdlena = v21 - v28;
            memcpy(v22, &v22[v28], v21 - v28 - v26);
            v21 = rdlena;
            v26 = i;
            *((_WORD *)v19 + 3) = rdlena;
          }
          else
          {
            v22 = &v25[v23];
            v26 += v23 + 4;
          }
          v27 = is_last;
          if ( v26 + 4 >= v21 )
            goto LABEL_21;
          v23 = v22[3] | (v22[2] << 8);
          v24 = v22[1] | (*v22 << 8);
          v25 = v22 + 4;
        }
        while ( v21 >= v23 + v26 + 4 );
      }
      is_last = 0;
      v18 = 0;
    }
    v16 = rrfilter(header, v16, 0);
  }
  else
  {
    t_s = 0;
    v20 = (set_do != 0) << 15;
  }
  v29 = skip_questions(header, v16);
  if ( !v29 )
    return v16;
  v32 = skip_section(v29, header->ancount + header->nscount + header->arcount, header, v16);
  if ( !v32 )
    return v16;
  v33 = v32 + 0xB;
  if ( (unsigned int)limit < v32 + 0xB )
    return v16;
  *(_BYTE *)(v32 + 4) = udp_sz;
  *(_BYTE *)v32 = 0;
  *(_WORD *)(v32 + 1) = 41;
  *(_BYTE *)(v32 + 3) = HIBYTE(udp_sz);
  *(_WORD *)(v32 + 5) = t_s;
  *(_WORD *)(v32 + 7) = v20;
  v34 = (_WORD *)(v32 + 9);
  *(_WORD *)(v32 + 9) = v17;
  t_cp = (unsigned __int8 *)(v32 + 0xB);
  if ( v18 )
  {
    v22 = (unsigned __int8 *)(v33 + v17);
    if ( (unsigned int)limit < v33 + v17 )
    {
      free(v18);
      return v16;
    }
    memcpy(t_cp, v18, v17);
    free(v18);
  }
  else
  {
    v22 = (unsigned __int8 *)(v32 + 0xB);
  }
  v35 = v22 + 4;
  result = v16;
  if ( limit - (v22 + 4) < (int)optlen )
    return result;
  ++header->arcount;
  if ( !optno )
    return v22 - (unsigned __int8 *)header;
LABEL_38:
  result = v22 - (unsigned __int8 *)header;
  if ( replace != 2 )
  {
    if ( limit >= v35 )
    {
      v22[2] = BYTE2(optlen);
      *(_WORD *)v22 = optno;
      v22[3] = optlen;
      v36 = &v35[optlen];
      if ( limit >= &v35[optlen] )
      {
        memcpy(v35, opt, optlen);
        *v34 = (_WORD)v36 - (_WORD)t_cp;
        return v36 - (unsigned __int8 *)header;
      }
    }
    return v16;
  }
  return result;
}
