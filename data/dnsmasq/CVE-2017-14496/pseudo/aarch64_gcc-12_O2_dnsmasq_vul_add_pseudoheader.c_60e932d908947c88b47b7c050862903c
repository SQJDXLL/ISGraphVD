size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  uint32x2_t v9; // d8
  unsigned __int64 v11; // x19
  unsigned __int32 v15; // w25
  unsigned __int8 *pseudoheader; // x0
  int v17; // w21
  unsigned __int8 *v18; // x27
  unsigned __int16 *v19; // x27
  unsigned int v20; // w22
  char *v21; // x25
  unsigned __int16 v22; // w0
  signed int v23; // w28
  unsigned __int64 v24; // x0
  bool v25; // cc
  unsigned __int16 *v27; // x2
  int v28; // w26
  signed int v29; // w3
  int v30; // w1
  __int64 v31; // x0
  __int64 v32; // x26
  uint32x2_t v33; // d0
  uint32x2_t v34; // d1
  __int64 v35; // d0
  char *v36; // x0
  _WORD *v37; // x27
  bool v38; // zf
  unsigned __int8 *v39; // x0
  unsigned __int8 *p; // [xsp+80h] [xbp+80h]
  unsigned __int16 v43; // [xsp+88h] [xbp+88h]
  unsigned __int16 v44; // [xsp+8Ch] [xbp+8Ch]
  int is_sign; // [xsp+98h] [xbp+98h] BYREF
  int is_last; // [xsp+9Ch] [xbp+9Ch] BYREF
  unsigned __int8 *udp_len; // [xsp+A0h] [xbp+A0h] BYREF

  v11 = plen;
  v15 = udp_sz;
  pseudoheader = find_pseudoheader(header, plen, 0uLL, &udp_len, &is_sign, &is_last);
  v17 = is_sign;
  if ( is_sign )
    return v11;
  v18 = pseudoheader;
  if ( pseudoheader )
  {
    v19 = (unsigned __int16 *)udp_len;
    v43 = *(_WORD *)udp_len;
    v44 = *((_WORD *)udp_len + 1);
    v20 = (unsigned __int16)__rev16(*((unsigned __int16 *)udp_len + 2));
    if ( set_do )
    {
      v20 |= 0x8000u;
      *((_WORD *)udp_len + 2) = __rev16(v20);
    }
    v21 = (char *)(v19 + 4);
    p = (unsigned __int8 *)(v19 + 4);
    v22 = __rev16(v19[3]);
    v23 = v22;
    v24 = (char *)(v19 + 4) - (char *)header + v22;
    if ( optno )
      v25 = v24 > v11;
    else
      v25 = 1;
    if ( v25 )
      return v11;
    if ( v23 <= 4 )
    {
      if ( is_last )
      {
        v21 = (char *)(v19 + 4);
LABEL_31:
        v36 = v21 + 4;
        if ( limit - (unsigned __int8 *)(v21 + 4) >= (__int64)optlen )
        {
          v37 = v19 + 3;
          goto LABEL_33;
        }
        return v11;
      }
    }
    else
    {
      v27 = v19 + 6;
      v28 = 0;
      v29 = (unsigned __int16)__rev16(v19[5]);
      v30 = (unsigned __int16)__rev16(v19[4]);
      if ( v23 < v29 )
      {
LABEL_27:
        is_last = 0;
        goto LABEL_28;
      }
      while ( 1 )
      {
        if ( v30 == optno )
        {
          if ( !replace )
            return v11;
          v23 -= v29 + 4;
          memcpy(v21, &v21[v29 + 4], v23 - v28);
          v19[3] = __rev16(v23);
        }
        else
        {
          v21 = (char *)v27 + (unsigned __int16)v29;
          v28 += v29 + 4;
        }
        if ( v28 + 4 >= v23 )
          break;
        v27 = (unsigned __int16 *)(v21 + 4);
        v29 = (unsigned __int16)__rev16(*((unsigned __int16 *)v21 + 1));
        v30 = (unsigned __int16)__rev16(*(unsigned __int16 *)v21);
        if ( v29 + v28 > v23 )
          goto LABEL_27;
      }
      if ( is_last )
        goto LABEL_31;
    }
    if ( v23 )
    {
      v39 = (unsigned __int8 *)whine_malloc(v23);
      v18 = v39;
      if ( v39 )
        memcpy(v39, p, v23);
      v17 = v23;
      goto LABEL_29;
    }
LABEL_28:
    v18 = 0LL;
LABEL_29:
    v15 = (unsigned __int16)__rev16(v43);
    v9.n64_u32[0] = (unsigned __int16)__rev16(v44);
    v11 = rrfilter(header, v11, 0LL);
    goto LABEL_21;
  }
  v9.n64_u32[0] = 0;
  v20 = (set_do != 0) << 15;
LABEL_21:
  v31 = skip_questions(header, v11);
  if ( !v31 )
    return v11;
  v32 = skip_section(
          v31,
          (unsigned __int16)__rev16(header->nscount)
        + (unsigned __int16)__rev16(header->ancount)
        + (unsigned int)(unsigned __int16)__rev16(header->arcount),
          header,
          v11);
  if ( !v32 )
    return v11;
  v33.n64_u32[0] = v15;
  v34.n64_u32[0] = v20;
  LOBYTE(v35) = vshr_n_u32(v33, 8uLL).n64_u8[0];
  *(_WORD *)v32 = 0;
  *(_BYTE *)(v32 + 2) = 41;
  BYTE1(v35) = v15;
  LODWORD(p) = v32 + 0xB;
  v21 = (char *)(v32 + 0xB);
  BYTE2(v35) = vshr_n_u32(v9, 8uLL).n64_u8[0];
  BYTE3(v35) = v9.n64_u8[0];
  BYTE4(v35) = vshr_n_u32(v34, 8uLL).n64_u8[0];
  BYTE5(v35) = v20;
  BYTE6(v35) = BYTE1(v17);
  HIBYTE(v35) = v17;
  *(_QWORD *)(v32 + 3) = v35;
  if ( v18 )
  {
    v21 = (char *)(v32 + 0xB + v17);
    memcpy((void *)(v32 + 0xB), v18, v17);
    free(v18);
  }
  v36 = v21 + 4;
  if ( limit - (unsigned __int8 *)(v21 + 4) < (__int64)optlen )
    return v11;
  v37 = (_WORD *)(v32 + 9);
  header->arcount = __rev16((unsigned __int16)__rev16(header->arcount) + 1);
LABEL_33:
  if ( optno )
    v38 = replace == 2;
  else
    v38 = 1;
  if ( !v38 )
  {
    *(_WORD *)v21 = __rev16(optno);
    *((_WORD *)v21 + 1) = __rev16(optlen);
    v21 = &v36[optlen];
    memcpy(v36, opt, optlen);
    *v37 = __rev16((_DWORD)v21 - (_DWORD)p);
  }
  return v21 - (char *)header;
}
