size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int a5,
        int a6,
        int a7,
        int a8,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int8 *pseudoheader; // $v0
  size_t v17; // $s0
  int v18; // $s4
  unsigned __int8 *v19; // $s7
  unsigned __int8 *v20; // $s7
  unsigned __int16 v21; // $s6
  unsigned __int8 *v22; // $fp
  int v23; // $t0
  int v24; // $v0
  int v25; // $v1
  int v26; // $v0
  unsigned __int8 *v27; // $a1
  int v28; // $t3
  int j; // $a0
  int v30; // $v1
  int v31; // $a0
  size_t result; // $v0
  int v33; // $a0
  int v34; // $v0
  int v35; // $v1
  int v36; // $s2
  void *v37; // $a0
  _WORD *v38; // $s0
  bool v39; // dc
  signed int v40; // $v0
  _BOOL4 v41; // $s1
  size_t v42; // $fp
  unsigned __int8 *v43; // $v0
  int v44; // $t0
  int rdlena; // [sp+24h] [-24h]
  int rdlenb; // [sp+24h] [-24h]
  int rdlen; // [sp+24h] [-24h]
  int i; // [sp+28h] [-20h]
  u16 t_s; // [sp+32h] [-16h]
  unsigned __int8 *datap; // [sp+34h] [-14h]
  unsigned __int8 *udp_len; // [sp+38h] [-10h] BYREF
  int is_sign; // [sp+3Ch] [-Ch] BYREF
  int is_last; // [sp+40h] [-8h] BYREF

  v17 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0u, &udp_len, &is_sign, &is_last);
  v18 = is_sign;
  if ( is_sign )
    return v17;
  v19 = pseudoheader;
  if ( pseudoheader )
  {
    v20 = udp_len;
    v21 = _byteswap_ushort(*((_WORD *)udp_len + 2));
    udp_sz = _byteswap_ushort(*(_WORD *)udp_len);
    t_s = _byteswap_ushort(*((_WORD *)udp_len + 1));
    if ( set_do )
    {
      v21 |= 0x8000u;
      udp_len[4] = HIBYTE(v21);
      v20[5] = v21;
    }
    v22 = v20 + 8;
    v23 = v20[7] | (v20[6] << 8);
    datap = v20 + 8;
    if ( v17 < v20 + 8 - (unsigned __int8 *)header + v23 || !optno )
      return v17;
    v24 = is_last;
    if ( v23 >= 5 )
    {
      v25 = v20[11] | (v20[10] << 8);
      v26 = v20[9] | (v20[8] << 8);
      v27 = v20 + 0xC;
      if ( v23 < v25 )
      {
LABEL_36:
        is_last = 0;
        v19 = 0;
LABEL_37:
        v17 = rrfilter(header, v17, 0);
        goto LABEL_24;
      }
      v28 = 0;
      if ( !replace )
      {
        v31 = 0;
        while ( v26 != optno )
        {
          v31 += v25 + 4;
          v22 = &v27[v25];
          if ( v31 + 4 >= v23 )
          {
            if ( !is_last )
              goto LABEL_39;
            v40 = optlen;
            goto LABEL_32;
          }
          v25 = v22[3] | (v22[2] << 8);
          v26 = v22[1] | (*v22 << 8);
          v27 = v22 + 4;
          if ( v23 < v25 + v31 )
            goto LABEL_36;
        }
        return v17;
      }
      for ( j = optno; ; j = optno )
      {
        if ( v26 == j )
        {
          v30 = v25 + 4;
          i = v28;
          rdlena = v23 - v30;
          memcpy(v22, &v22[v30], v23 - v30 - v28);
          v23 = rdlena;
          v28 = i;
          *((_WORD *)v20 + 3) = rdlena;
        }
        else
        {
          v22 = &v27[v25];
          v28 += v25 + 4;
        }
        v24 = is_last;
        if ( v28 + 4 >= v23 )
          break;
        v25 = v22[3] | (v22[2] << 8);
        v26 = v22[1] | (*v22 << 8);
        v27 = v22 + 4;
        if ( v23 < v25 + v28 )
          goto LABEL_36;
      }
    }
    v39 = v24 == 0;
    v40 = optlen;
    if ( !v39 )
    {
LABEL_32:
      v37 = v22 + 4;
      v41 = limit - (v22 + 4) < v40;
      result = v17;
      if ( !v41 )
      {
        v38 = v20 + 6;
LABEL_34:
        if ( replace != 2 )
        {
          *v22 = BYTE2(optno);
          v22[2] = BYTE2(optlen);
          v22[1] = optno;
          v22[3] = optlen;
          v42 = (size_t)v37 + optlen;
          memcpy(v37, opt, optlen);
          *v38 = v42 - (_WORD)datap;
          return v42 - (_DWORD)header;
        }
        return v22 - (unsigned __int8 *)header;
      }
      return result;
    }
    v19 = 0;
    if ( v23 )
    {
LABEL_39:
      rdlen = v23;
      v43 = (unsigned __int8 *)whine_malloc(v23);
      v19 = v43;
      v44 = rdlen;
      if ( v43 )
      {
        memcpy(v43, datap, rdlen);
        v44 = rdlen;
      }
      v18 = v44;
    }
    goto LABEL_37;
  }
  t_s = 0;
  v21 = (set_do != 0) << 15;
LABEL_24:
  v33 = skip_questions(header, v17);
  if ( !v33 )
    return v17;
  v34 = skip_section(v33, header->ancount + header->nscount + header->arcount, header, v17);
  v35 = v34;
  if ( !v34 )
    return v17;
  *(_BYTE *)(v34 + 9) = BYTE2(v18);
  *(_BYTE *)(v34 + 4) = udp_sz;
  *(_BYTE *)v34 = 0;
  *(_WORD *)(v34 + 1) = 41;
  *(_BYTE *)(v34 + 3) = HIBYTE(udp_sz);
  *(_WORD *)(v34 + 5) = t_s;
  *(_WORD *)(v34 + 7) = v21;
  *(_BYTE *)(v34 + 10) = v18;
  v36 = v34 + 0xB;
  LOWORD(datap) = v34 + 0xB;
  if ( v19 )
  {
    rdlenb = v34;
    memcpy((void *)(v34 + 0xB), v19, v18);
    v22 = (unsigned __int8 *)(v36 + v18);
    free(v19);
    v35 = rdlenb;
  }
  else
  {
    v22 = (unsigned __int8 *)(v34 + 0xB);
  }
  v37 = v22 + 4;
  result = v17;
  if ( limit - (v22 + 4) >= (int)optlen )
  {
    ++header->arcount;
    v38 = (_WORD *)(v35 + 9);
    if ( !optno )
      return v22 - (unsigned __int8 *)header;
    goto LABEL_34;
  }
  return result;
}
