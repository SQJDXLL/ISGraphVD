size_t __fastcall add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int64 v15; // x19
  unsigned __int8 *pseudoheader; // x0
  char v19; // w28
  unsigned __int8 *v20; // x21
  _WORD *v21; // x26
  unsigned __int64 v22; // x22
  unsigned __int64 v23; // x27
  int v24; // w23
  int v25; // w8
  unsigned __int64 v26; // x9
  unsigned __int64 v27; // x8
  unsigned __int8 v28; // w26
  int v29; // w25
  __int64 v30; // x8
  void *v31; // x0
  __int64 v32; // x0
  __int64 v33; // x0
  unsigned __int8 *v34; // x0
  size_t n; // [xsp+0h] [xbp-50h]
  unsigned __int8 *src; // [xsp+8h] [xbp-48h]
  void *ptr; // [xsp+10h] [xbp-40h]
  unsigned __int8 v38; // [xsp+18h] [xbp-38h]
  unsigned __int8 v39; // [xsp+1Ch] [xbp-34h]
  unsigned __int8 *v40; // [xsp+20h] [xbp-30h]
  void *dest; // [xsp+28h] [xbp-28h]
  __int64 v42; // [xsp+34h] [xbp-1Ch]
  int is_last; // [xsp+40h] [xbp-10h] BYREF
  int is_sign; // [xsp+44h] [xbp-Ch] BYREF
  unsigned __int8 *udp_len; // [xsp+48h] [xbp-8h] BYREF

  v15 = plen;
  pseudoheader = find_pseudoheader(header, plen, 0uLL, &udp_len, &is_sign, &is_last);
  if ( is_sign )
    return v15;
  if ( set_do )
    v19 = 0x80;
  else
    v19 = 0;
  if ( !pseudoheader )
  {
    ptr = 0LL;
    LODWORD(v22) = 0;
    v28 = 0;
    v39 = 0;
    v42 = HIBYTE(udp_sz);
    goto LABEL_31;
  }
  v40 = limit;
  v20 = udp_len;
  v19 = udp_len[4];
  if ( set_do )
  {
    v19 |= 0x80u;
    udp_len[4] = v19;
  }
  LOBYTE(udp_sz) = v20[1];
  v38 = v20[5];
  v21 = v20 + 6;
  if ( optno )
  {
    LOBYTE(v42) = *v20;
    BYTE4(v42) = v20[3];
    v22 = bswap64((unsigned __int64)*((unsigned __int16 *)v20 + 3) << 48);
    dest = v20 + 8;
    if ( v20 + 8 - (unsigned __int8 *)header + v22 <= v15 )
    {
      n = optlen;
      src = opt;
      v39 = v20[2];
      if ( (unsigned int)v22 < 5 )
      {
        v23 = (unsigned __int64)(v20 + 8);
LABEL_22:
        if ( is_last )
        {
          optlen = n;
          limit = v40;
          v29 = (int)dest;
          v30 = (int)n;
          goto LABEL_40;
        }
        optlen = n;
        limit = v40;
        if ( (_DWORD)v22 && (v31 = (void *)whine_malloc((int)v22)) != 0LL )
        {
          ptr = v31;
          memcpy(v31, dest, (int)v22);
        }
        else
        {
          ptr = 0LL;
        }
        opt = src;
      }
      else
      {
        v23 = (unsigned __int64)(v20 + 8);
        v24 = 0;
        v25 = 4;
        while ( 1 )
        {
          v26 = bswap64((unsigned __int64)*(unsigned __int16 *)(v23 + 2) << 48);
          if ( (int)v26 + v25 > (int)v22 )
            break;
          v27 = v23 + 4;
          if ( bswap32(*(unsigned __int16 *)v23 << 16) == optno )
          {
            if ( !replace )
              return v15;
            LODWORD(v22) = v22 - v26 - 4;
            memcpy((void *)v23, (const void *)(v27 + v26), (int)v22 - v24);
            *((_WORD *)v20 + 3) = bswap32(v22) >> 16;
          }
          else
          {
            v23 = v27 + (unsigned int)v26;
            v24 += v26 + 4;
          }
          v25 = v24 + 4;
          if ( v24 + 4 >= (int)v22 )
            goto LABEL_22;
        }
        optlen = n;
        opt = src;
        limit = v40;
        LODWORD(v22) = 0;
        ptr = 0LL;
        is_last = 0;
      }
      v28 = v38;
      v15 = rrfilter(header, v15, 0LL);
LABEL_31:
      v32 = skip_questions(header, v15);
      if ( !v32 )
        return v15;
      v33 = skip_section(
              v32,
              (bswap32(header->nscount) >> 0x10)
            + (bswap32(header->ancount) >> 0x10)
            + (bswap32(header->arcount) >> 0x10),
              header,
              v15);
      if ( !v33 || v33 + 0xB > (unsigned __int64)limit )
        return v15;
      *(_BYTE *)(v33 + 2) = 41;
      *(_BYTE *)(v33 + 3) = v42;
      *(_BYTE *)(v33 + 8) = v28;
      src = opt;
      *(_BYTE *)(v33 + 5) = v39;
      *(_WORD *)v33 = 0;
      *(_BYTE *)(v33 + 4) = udp_sz;
      *(_BYTE *)(v33 + 7) = v19;
      *(_BYTE *)(v33 + 6) = BYTE4(v42);
      *(_BYTE *)(v33 + 9) = BYTE1(v22);
      v21 = (_WORD *)(v33 + 9);
      v23 = v33 + 0xB;
      v29 = v33 + 0xB;
      *(_BYTE *)(v33 + 10) = v22;
      if ( ptr )
      {
        v23 = v33 + 0xB + (int)v22;
        if ( v23 > (unsigned __int64)limit )
        {
          free(ptr);
          return v15;
        }
        memcpy((void *)(v33 + 0xB), ptr, (int)v22);
        free(ptr);
      }
      v30 = (int)optlen;
      if ( (int)optlen <= (__int64)&limit[-v23 - 4] )
        header->arcount = bswap32((bswap32(header->arcount) >> 0x10) + 1) >> 16;
LABEL_40:
      v34 = (unsigned __int8 *)(v23 + 4);
      if ( v30 > (__int64)&limit[-v23 - 4] )
        return v15;
      if ( optno && replace != 2 )
      {
        if ( v34 > limit )
          return v15;
        *(_BYTE *)(v23 + 1) = optno;
        *(_BYTE *)(v23 + 3) = optlen;
        *(_BYTE *)v23 = BYTE1(optno);
        *(_BYTE *)(v23 + 2) = BYTE1(optlen);
        v23 = (unsigned __int64)&v34[optlen];
        if ( &v34[optlen] > limit )
          return v15;
        memcpy(v34, src, optlen);
        *v21 = bswap32(v23 - v29) >> 16;
      }
      return v23 - (_QWORD)header;
    }
  }
  return v15;
}
