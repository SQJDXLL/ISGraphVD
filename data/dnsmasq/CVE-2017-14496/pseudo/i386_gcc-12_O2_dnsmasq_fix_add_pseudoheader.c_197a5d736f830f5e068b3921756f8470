size_t __cdecl add_pseudoheader(
        dns_header *header,
        size_t plen,
        unsigned __int8 *limit,
        unsigned __int16 udp_sz,
        int optno,
        unsigned __int8 *opt,
        size_t optlen,
        int set_do,
        int replace)
{
  unsigned __int8 *ptr; // edi
  unsigned __int8 *v11; // ecx
  u16 v12; // ax
  unsigned __int8 *v13; // esi
  signed int v14; // ebp
  int v15; // edi
  unsigned __int16 v16; // ax
  int v17; // ebx
  unsigned __int16 v18; // dx
  unsigned __int8 *v19; // eax
  _WORD *v20; // edi
  __int16 v22; // bp
  int v23; // ebx
  int v24; // eax
  unsigned __int8 *v25; // ecx
  int v26; // edx
  unsigned __int8 *v27; // eax
  unsigned __int8 *p; // [esp+18h] [ebp-54h]
  unsigned __int8 *pa; // [esp+18h] [ebp-54h]
  size_t rdlen; // [esp+28h] [ebp-44h]
  unsigned __int8 *t_cp; // [esp+30h] [ebp-3Ch]
  unsigned __int8 *datap; // [esp+34h] [ebp-38h]
  u16 t_s; // [esp+38h] [ebp-34h]
  __int16 v34; // [esp+3Ah] [ebp-32h]
  __int16 v35; // [esp+3Ch] [ebp-30h]
  unsigned __int16 code; // [esp+3Eh] [ebp-2Eh]
  unsigned __int8 *udp_len; // [esp+40h] [ebp-2Ch] BYREF
  int is_sign; // [esp+44h] [ebp-28h] BYREF
  int is_last[9]; // [esp+48h] [ebp-24h] BYREF

  is_last[1] = __readgsdword(0x14u);
  ptr = find_pseudoheader(header, plen, 0, &udp_len, &is_sign, is_last);
  rdlen = is_sign;
  if ( is_sign )
    return plen;
  if ( !ptr )
  {
    v22 = 0;
    t_s = (set_do != 0) << 15;
    goto LABEL_25;
  }
  v11 = udp_len;
  v34 = *(_WORD *)udp_len;
  v35 = *((_WORD *)udp_len + 1);
  v12 = __ROL2__(*((_WORD *)udp_len + 2), 8);
  t_s = v12;
  if ( set_do )
  {
    t_s = v12 | 0x8000;
    *((_WORD *)udp_len + 2) = __ROL2__(v12 | 0x8000, 8);
  }
  v13 = v11 + 8;
  datap = v11 + 8;
  v14 = (unsigned __int16)__ROL2__(*((_WORD *)v11 + 3), 8);
  if ( plen < v14 + v11 + 8 - (unsigned __int8 *)header || !optno )
    return plen;
  if ( v14 <= 4 )
  {
    if ( is_last[0] )
    {
      v13 = v11 + 8;
      goto LABEL_17;
    }
    goto LABEL_38;
  }
  p = v11 + 12;
  v15 = 0;
  code = __ROL2__(*((_WORD *)v11 + 4), 8);
  v16 = __ROL2__(*((_WORD *)v11 + 5), 8);
  v17 = v16;
  if ( v14 < v16 + 4 )
  {
LABEL_33:
    is_last[0] = 0;
    goto LABEL_34;
  }
  t_cp = v11;
  v18 = code;
  while ( 1 )
  {
    if ( v18 == optno )
    {
      if ( !replace )
        return plen;
      v14 -= v17 + 4;
      memcpy(v13, &v13[(unsigned __int16)(v16 + 4)], v14 - v15);
      *((_WORD *)t_cp + 3) = __ROL2__(v14, 8);
    }
    else
    {
      v15 += v17 + 4;
      v13 = &p[v17];
    }
    if ( v15 + 4 >= v14 )
      break;
    p = v13 + 4;
    v16 = __ROL2__(*((_WORD *)v13 + 1), 8);
    v18 = __ROL2__(*(_WORD *)v13, 8);
    v17 = v16;
    if ( v16 + v15 + 4 > v14 )
      goto LABEL_33;
  }
  v11 = t_cp;
  if ( !is_last[0] )
  {
LABEL_38:
    if ( v14 )
    {
      v27 = (unsigned __int8 *)whine_malloc(v14);
      ptr = v27;
      if ( v27 )
        memcpy(v27, datap, v14);
      rdlen = v14;
      goto LABEL_35;
    }
LABEL_34:
    ptr = 0;
LABEL_35:
    udp_sz = __ROL2__(v34, 8);
    v22 = __ROL2__(v35, 8);
    plen = rrfilter(header, plen, 0);
LABEL_25:
    v23 = skip_questions(header, plen);
    if ( !v23 )
      return plen;
    v24 = skip_section(
            v23,
            (unsigned __int16)__ROL2__(header->arcount, 8)
          + (unsigned __int16)__ROL2__(header->ancount, 8)
          + (unsigned __int16)__ROL2__(header->nscount, 8),
            header,
            plen);
    v25 = (unsigned __int8 *)v24;
    if ( !v24 )
      return plen;
    v26 = v24 + 11;
    datap = (unsigned __int8 *)(v24 + 11);
    if ( (unsigned int)limit < v24 + 11 )
      return plen;
    *(_BYTE *)(v24 + 2) = 41;
    *(_WORD *)(v24 + 3) = __ROL2__(udp_sz, 8);
    *(_WORD *)v24 = LC1;
    *(_WORD *)(v24 + 5) = __ROL2__(v22, 8);
    *(_WORD *)(v24 + 7) = __ROL2__(t_s, 8);
    *(_WORD *)(v24 + 9) = __ROL2__(rdlen, 8);
    if ( ptr )
    {
      v13 = (unsigned __int8 *)(v26 + rdlen);
      if ( (unsigned int)limit < v26 + rdlen )
      {
        free(ptr);
        return plen;
      }
      pa = (unsigned __int8 *)v24;
      memcpy(datap, ptr, rdlen);
      free(ptr);
      v25 = pa;
    }
    else
    {
      v13 = (unsigned __int8 *)(v24 + 11);
    }
    v19 = v13 + 4;
    if ( limit - (v13 + 4) >= (int)optlen )
    {
      v20 = v25 + 9;
      header->arcount = __ROL2__(__ROL2__(header->arcount, 8) + 1, 8);
      goto LABEL_19;
    }
    return plen;
  }
LABEL_17:
  v19 = v13 + 4;
  if ( limit - (v13 + 4) < (int)optlen )
    return plen;
  v20 = v11 + 6;
LABEL_19:
  if ( optno && replace != 2 )
  {
    if ( limit < v19 )
      return plen;
    *(_WORD *)v13 = __ROL2__(optno, 8);
    *((_WORD *)v13 + 1) = __ROL2__(optlen, 8);
    v13 = &v19[optlen];
    if ( limit < &v19[optlen] )
      return plen;
    memcpy(v19, opt, optlen);
    *v20 = __ROL2__((_WORD)v13 - (_WORD)datap, 8);
  }
  return v13 - (unsigned __int8 *)header;
}
