void __fastcall receive_query(listener *listen, time_t now)
{
  int family; // r6
  int v3; // r3
  int v5; // r2
  int v6; // r2
  unsigned int v7; // r6
  dns_header *v8; // r8
  in_addr_t s_addr; // r7
  int fd; // r0
  signed int v11; // r10
  int v12; // r2
  irec *iface; // r2
  dns_header *v14; // r2
  _DWORD *v15; // r9
  in6_addr *p_sin6_addr; // r1
  int v17; // r2
  int v18; // r0
  struct cmsghdr *msg_control; // r1
  char *i; // r12
  int j; // r0
  _DWORD *v22; // r2
  int v23; // r3
  int v24; // r9
  const char *v25; // r0
  int v26; // r0
  int v27; // r2
  bool v28; // zf
  in6_addr *p_sin6_flowinfo; // r2
  int v30; // r3
  int v31; // r0
  int pseudoheader; // r0
  unsigned int v33; // r1
  unsigned int v34; // r1
  int v35; // r3
  unsigned int v36; // r1
  char *v37; // r1
  size_t v38; // r3
  unsigned int v39; // r1
  uint32_t v40; // r1
  __int64 v41; // r2
  int k; // r3
  int m; // r9
  int v44; // r9
  size_t v45; // r3
  int v46; // r12
  unsigned int v47; // r1
  int v48; // r2
  int v49; // r0
  int v50; // [sp+14h] [bp-DCh]
  int nowa; // [sp+18h] [bp-D8h]
  dns_header *v52; // [sp+1Ch] [bp-D4h]
  unsigned __int8 *t_cp; // [sp+24h] [bp-CCh]
  unsigned __int16 type; // [sp+2Ah] [bp-C6h] BYREF
  unsigned __int8 *pheader; // [sp+2Ch] [bp-C4h]
  int auth_dns; // [sp+30h] [bp-C0h] BYREF
  msghdr msg; // [sp+34h] [bp-BCh] BYREF
  iovec iov[1]; // [sp+50h] [bp-A0h] BYREF
  all_addr dst_addr; // [sp+58h] [bp-98h] BYREF
  mysockaddr source_addr; // [sp+68h] [bp-88h] BYREF
  union {cmsghdr align;char control6[32];char control[24];} control_u; // [sp+84h] [bp-6Ch] BYREF
  ifreq ifr; // [sp+A4h] [bp-4Ch] BYREF

  auth_dns = 0;
  v3 = dnsmasq_daemon_0;
  v5 = *dnsmasq_daemon_0;
  dst_addr.addr.addr4.s_addr = 0;
  v6 = v5 & 0x2000;
  if ( v6 )
    family = listen->family;
  *(_DWORD *)(dnsmasq_daemon_0 + 528) = 0;
  if ( v6 )
    family -= 0xA;
  if ( v6 )
    v7 = __clz(family);
  else
    v7 = 1;
  if ( v6 )
    v7 >>= 5;
  v8 = *(dns_header **)(v3 + 476);
  v52 = 0;
  if ( v6 && (iface = listen->iface) != 0 && (auth_dns = iface->dns_auth, listen->family == 2) )
  {
    s_addr = iface->addr.in.sin_addr.s_addr;
    v14 = (dns_header *)iface->netmask.s_addr;
    dst_addr.addr.addr4.s_addr = s_addr;
    v52 = v14;
  }
  else
  {
    s_addr = 0;
  }
  iov[0].iov_len = *(unsigned __int16 *)(v3 + 0x1B0);
  msg.msg_control = &control_u;
  msg.msg_controllen = 32;
  msg.msg_name = &source_addr;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  fd = listen->fd;
  iov[0].iov_base = v8;
  msg.msg_flags = 0;
  msg.msg_iovlen = 1;
  v11 = recvmsg(fd, &msg, 0);
  if ( v11 > 11 )
  {
    nowa = msg.msg_flags & 0x20;
    if ( (msg.msg_flags & 0x20) == 0 && (v8->hb3 & 0x80u) == 0 )
    {
      v12 = listen->family;
      source_addr.sa.sa_family = v12;
      if ( v12 == 2 )
      {
        if ( !source_addr.in.sin_port )
          return;
      }
      else
      {
        if ( !source_addr.in.sin_port )
          return;
        source_addr.in.sin_addr.s_addr = msg.msg_flags & 0x20;
      }
      if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x20000) != 0 )
      {
        v15 = *(_DWORD **)(dnsmasq_daemon_0 + 1136);
        if ( v12 == 10 )
        {
          p_sin6_addr = &source_addr.in6.sin6_addr;
          while ( v15 )
          {
            if ( (v15[4] & 2) != 0 )
            {
              t_cp = (unsigned __int8 *)p_sin6_addr;
              v18 = is_same_net6(v15);
              p_sin6_addr = (in6_addr *)t_cp;
              if ( v18 )
                goto LABEL_35;
            }
            v15 = (_DWORD *)v15[6];
          }
        }
        else
        {
          while ( v15 )
          {
            v17 = _bswapsi2(-1 << (0x20 - v15[5]));
            if ( (v15[4] & 2) == 0 && is_same_net(*v15, source_addr.in.sin_addr.s_addr, v17) )
              goto LABEL_35;
            v15 = (_DWORD *)v15[6];
          }
        }
        if ( !warned_2 )
        {
          my_syslog(4, "Ignoring query from non-local network");
          warned_2 = 1;
        }
      }
      else
      {
LABEL_35:
        if ( v7 )
        {
          if ( msg.msg_controllen <= 0xB )
            return;
          if ( listen->family == 2 )
          {
            msg_control = (struct cmsghdr *)msg.msg_control;
            v7 = 0;
            while ( msg_control )
            {
              if ( !msg_control->cmsg_level && msg_control->cmsg_type == 8 )
              {
                s_addr = *(_DWORD *)&msg_control->__cmsg_data[4];
                v7 = *(_DWORD *)msg_control->__cmsg_data;
                dst_addr.addr.addr4.s_addr = s_addr;
              }
              msg_control = _cmsg_nxthdr(&msg, msg_control);
            }
          }
          else
          {
            v7 = 0;
          }
          if ( listen->family == 10 && msg.msg_controllen > 0xB )
          {
            for ( i = (char *)msg.msg_control; i; i = (char *)_cmsg_nxthdr(&msg, (struct cmsghdr *)i) )
            {
              if ( *((_DWORD *)i + 1) == 41 && *((_DWORD *)i + 2) == *(_DWORD *)(dnsmasq_daemon_0 + 1132) )
              {
                v40 = *((_DWORD *)i + 4);
                v41 = *(_QWORD *)(i + 20);
                v7 = *((_DWORD *)i + 7);
                dst_addr.addr.addr4.s_addr = *((_DWORD *)i + 3);
                dst_addr.addr.addr6.__in6_u.__u6_addr32[1] = v40;
                *((_QWORD *)&dst_addr.addr.dnssec + 1) = v41;
              }
            }
          }
          if ( !indextoname(listen->fd, v7) )
            return;
          if ( !iface_check(listen->family, &dst_addr, &ifr, &auth_dns) )
          {
            if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) == 0 )
              enumerate_interfaces();
            if ( !loopback_exception(listen->fd, listen->family, &dst_addr, &ifr)
              && !label_exception(v7, listen->family, &dst_addr) )
            {
              return;
            }
          }
          if ( listen->family == 2 && (*dnsmasq_daemon_0 & 0x40000) != 0 )
          {
            for ( j = *(_DWORD *)(dnsmasq_daemon_0 + 508); j; j = *(_DWORD *)(j + 80) )
            {
              if ( *(_WORD *)j == 2 && *(_DWORD *)(j + 4) == s_addr )
                goto LABEL_99;
            }
            if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) == 0 )
              enumerate_interfaces();
LABEL_99:
            for ( k = *(_DWORD *)(dnsmasq_daemon_0 + 508); ; k = *(_DWORD *)(k + 80) )
            {
              if ( !k )
              {
                s_addr = 0;
                goto LABEL_55;
              }
              if ( *(_WORD *)k == 2 && *(_DWORD *)(k + 4) == s_addr )
                break;
            }
            v52 = *(dns_header **)(k + 28);
          }
        }
LABEL_55:
        v22 = (_DWORD *)dnsmasq_daemon_0;
        v23 = *(_DWORD *)(dnsmasq_daemon_0 + 1140) + 1;
        *(_DWORD *)(dnsmasq_daemon_0 + 1140) = v23;
        v22[286] = v23;
        v22[287] = &source_addr;
        v24 = extract_request(v8, v11, v22[121], &type);
        if ( !v24 )
          goto LABEL_67;
        if ( auth_dns )
          v25 = "auth";
        else
          v25 = "query";
        v26 = querystr(v25, type);
        v27 = listen->family;
        v28 = v27 == 2;
        if ( v27 == 2 )
          p_sin6_flowinfo = (in6_addr *)&source_addr.in6.sin6_flowinfo;
        else
          p_sin6_flowinfo = &source_addr.in6.sin6_addr;
        v30 = v26;
        if ( v28 )
          v31 = 524424;
        else
          v31 = 524552;
        log_query(v31, *(_DWORD *)(dnsmasq_daemon_0 + 484), p_sin6_flowinfo, v30);
        if ( !auth_dns && (*dnsmasq_daemon_0 & 0x40000) == 0 )
        {
          for ( m = *(_DWORD *)(dnsmasq_daemon_0 + 80); m; m = *(_DWORD *)(m + 16) )
          {
            if ( in_zone(m, *(_DWORD *)(dnsmasq_daemon_0 + 484), 0) )
            {
              v24 = 1;
              auth_dns = 1;
              goto LABEL_66;
            }
          }
        }
        v24 = 0;
LABEL_66:
        if ( !detect_loop(*(_DWORD *)(dnsmasq_daemon_0 + 484), type) )
        {
LABEL_67:
          pseudoheader = find_pseudoheader(v8, v11);
          if ( pseudoheader )
          {
            pseudoheader = 1;
            v34 = *pheader | (pheader[1] << 8);
            v35 = (v34 >> 8) | (v34 << 8);
            v36 = pheader[4];
            pheader += 6;
            nowa = v36 >> 7;
            v33 = *(unsigned __int16 *)(dnsmasq_daemon_0 + 0x1B0);
            if ( v33 >= (unsigned __int16)v35 )
              v33 = (unsigned __int16)v35;
          }
          else
          {
            v33 = 512;
          }
          v37 = (char *)v8 + v33;
          if ( !auth_dns )
          {
            if ( (v8->hb4 & 0x20) != 0 )
              v44 = 1;
            else
              v44 = nowa;
            v45 = answer_request(v8, v37, v11, s_addr, v52, now, v44, nowa, pseudoheader);
            if ( v45 )
            {
              v46 = *dnsmasq_daemon_0;
              if ( (*dnsmasq_daemon_0 & 0x2000) != 0 )
                v47 = 1;
              else
                v47 = *(_DWORD *)(dnsmasq_daemon_0 + 4);
              if ( (v46 & 0x2000) == 0 )
                v47 >>= 7;
              if ( (v46 & 0x2000) == 0 )
                v47 &= 1u;
              send_from(listen->fd, v47, (char *)v8, v45, &source_addr, &dst_addr, v7);
              v48 = dnsmasq_daemon_0;
            }
            else
            {
              v49 = forward_query(listen->fd, &source_addr, &dst_addr, v7, v8, v11, now, 0u, v44, v50);
              v48 = dnsmasq_daemon_0;
              if ( v49 )
              {
                ++*(_DWORD *)(dnsmasq_daemon_0 + 492);
                return;
              }
            }
            ++*(_DWORD *)(v48 + 488);
            return;
          }
          v38 = answer_auth(v8, v37, v11, now, &source_addr, v24, nowa, pseudoheader);
          if ( v38 )
          {
            v39 = *dnsmasq_daemon_0;
            if ( (*dnsmasq_daemon_0 & 0x2000) == 0 )
              v39 = *(_DWORD *)(dnsmasq_daemon_0 + 4);
            if ( (*dnsmasq_daemon_0 & 0x2000) == 0 )
              v39 >>= 7;
            if ( (*dnsmasq_daemon_0 & 0x2000) == 0 )
              v39 &= 1u;
            if ( (*dnsmasq_daemon_0 & 0x2000) != 0 )
              v39 = 1;
            send_from(listen->fd, v39, (char *)v8, v38, &source_addr, &dst_addr, v7);
            ++*(_DWORD *)(dnsmasq_daemon_0 + 496);
          }
        }
      }
    }
  }
}
