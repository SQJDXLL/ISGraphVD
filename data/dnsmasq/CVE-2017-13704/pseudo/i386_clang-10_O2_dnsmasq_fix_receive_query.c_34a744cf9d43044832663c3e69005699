void __cdecl receive_query(listener *listen, dns_header *now)
{
  int v2; // eax
  bool v3; // bl
  all_addr *v4; // edi
  in_addr_t s_addr; // esi
  irec *iface; // ecx
  int v7; // edx
  ssize_t v8; // eax
  unsigned int v9; // esi
  int family; // eax
  listener *v11; // ebp
  _DWORD *msg_control; // edx
  char *v13; // ebx
  unsigned int v14; // ebp
  _DWORD *v15; // ebp
  bool v16; // zf
  int v17; // ebp
  listener *v18; // ebp
  _DWORD *v19; // eax
  int v20; // ecx
  const char *v21; // ecx
  int v22; // eax
  int v23; // ecx
  int v24; // eax
  int v25; // ebx
  char *v26; // ecx
  char *v27; // eax
  __int64 v28; // xmm0_8
  unsigned int v29; // ebx
  char *v30; // ebx
  int v31; // eax
  int v32; // edx
  __int16 v33; // dx
  unsigned int v34; // ecx
  int v35; // edx
  time_t v36; // ecx
  int v37; // eax
  int v38; // edx
  size_t v39; // eax
  int v40; // edx
  time_t v41; // ebx
  size_t v42; // eax
  int v43; // esi
  int v44; // eax
  frec *v45; // [esp-4h] [ebp-D0h]
  int v46; // [esp+0h] [ebp-CCh]
  mysockaddr *udpaddr; // [esp+4h] [ebp-C8h]
  in_addr_t v48; // [esp+8h] [ebp-C4h]
  int dns_auth; // [esp+Ch] [ebp-C0h] BYREF
  unsigned __int16 v50; // [esp+12h] [ebp-BAh] BYREF
  int v51; // [esp+14h] [ebp-B8h]
  int v52; // [esp+18h] [ebp-B4h]
  int v53; // [esp+1Ch] [ebp-B0h]
  all_addr source; // [esp+20h] [ebp-ACh] BYREF
  mysockaddr to; // [esp+30h] [ebp-9Ch] BYREF
  struct msghdr message; // [esp+50h] [ebp-7Ch] BYREF
  int v57[2]; // [esp+70h] [ebp-5Ch] BYREF
  int v58[8]; // [esp+78h] [ebp-54h] BYREF
  char v59; // [esp+98h] [ebp-34h] BYREF

  v2 = dnsmasq_daemon;
  v3 = 1;
  v4 = *(all_addr **)(dnsmasq_daemon + 476);
  dns_auth = 0;
  if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) != 0 )
    v3 = listen->family == 10;
  *(_DWORD *)(dnsmasq_daemon + 528) = 0;
  source.addr.addr4.s_addr = 0;
  s_addr = 0;
  if ( (*(_BYTE *)(v2 + 1) & 0x20) != 0 && (iface = listen->iface) != 0 )
  {
    dns_auth = iface->dns_auth;
    v7 = 0;
    if ( listen->family == 2 )
    {
      s_addr = iface->addr.in.sin_addr.s_addr;
      source.addr.addr4.s_addr = s_addr;
      v7 = iface->netmask.s_addr;
    }
  }
  else
  {
    v7 = 0;
  }
  v57[0] = (int)v4;
  v53 = v7;
  v48 = s_addr;
  v57[1] = *(unsigned __int16 *)(v2 + 432);
  message.msg_control = &v59;
  message.msg_controllen = 32;
  message.msg_flags = 0;
  message.msg_name = &to;
  message.msg_namelen = 28;
  message.msg_iov = (iovec *)v57;
  message.msg_iovlen = 1;
  v8 = recvmsg(listen->fd, &message, 0);
  if ( v8 < 12 || (message.msg_flags & 0x20) != 0 || (v4->addr.addr6.__in6_u.__u6_addr8[2] & 0x80u) != 0 )
    return;
  v9 = v8;
  memset((void *)(v8 + *(_DWORD *)(dnsmasq_daemon + 476)), 0, *(unsigned __int16 *)(dnsmasq_daemon + 432) - v8);
  family = listen->family;
  to.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !to.in.sin_port )
      return;
  }
  else
  {
    if ( !to.in.sin_port )
      return;
    to.in.sin_addr.s_addr = 0;
  }
  if ( (*(_BYTE *)(dnsmasq_daemon + 6) & 2) != 0 )
  {
    v17 = *(_DWORD *)(dnsmasq_daemon + 1136);
    if ( family == 10 )
    {
      while ( v17 )
      {
        if ( (*(_BYTE *)(v17 + 16) & 2) != 0 && is_same_net6(v17, &to.in6.sin6_addr, *(_DWORD *)(v17 + 20)) )
          goto LABEL_17;
        v17 = *(_DWORD *)(v17 + 24);
      }
    }
    else
    {
      while ( v17 )
      {
        if ( (*(_BYTE *)(v17 + 16) & 2) == 0
          && is_same_net(*(_DWORD *)v17, to.in.sin_addr.s_addr, _byteswap_ulong(-1 << -*(_BYTE *)(v17 + 20))) )
        {
          goto LABEL_17;
        }
        v17 = *(_DWORD *)(v17 + 24);
      }
    }
    if ( !receive_query_warned )
    {
      my_syslog(4, "Ignoring query from non-local network");
      receive_query_warned = 1;
    }
    return;
  }
LABEL_17:
  v51 = 0;
  if ( v3 )
  {
    if ( message.msg_controllen < 0xC )
      return;
    v11 = listen;
    udpaddr = 0;
    if ( listen->family == 2 )
    {
      msg_control = message.msg_control;
      if ( !message.msg_control )
      {
        udpaddr = 0;
LABEL_72:
        if ( !indextoname(v11->fd, udpaddr, v58) )
          return;
        if ( !iface_check(listen->family, &source, v58, &dns_auth) )
        {
          if ( *(char *)(dnsmasq_daemon + 4) >= 0 )
            enumerate_interfaces(0);
          if ( !loopback_exception(listen->fd, listen->family, &source, v58)
            && !label_exception(udpaddr, listen->family, &source) )
          {
            return;
          }
        }
        v18 = listen;
        if ( listen->family == 2 && (*(_BYTE *)(dnsmasq_daemon + 2) & 4) != 0 )
        {
          v31 = *(_DWORD *)(dnsmasq_daemon + 508);
          if ( v31 )
          {
            v32 = *(_DWORD *)(dnsmasq_daemon + 508);
            while ( *(_WORD *)v32 != 2 || *(_DWORD *)(v32 + 4) != v48 )
            {
              v32 = *(_DWORD *)(v32 + 80);
              if ( !v32 )
                goto LABEL_108;
            }
          }
          else
          {
LABEL_108:
            if ( *(char *)(dnsmasq_daemon + 4) >= 0 )
            {
              enumerate_interfaces(0);
              v31 = *(_DWORD *)(dnsmasq_daemon + 508);
            }
          }
          if ( v31 )
          {
            while ( *(_WORD *)v31 != 2 || *(_DWORD *)(v31 + 4) != v48 )
            {
              v31 = *(_DWORD *)(v31 + 80);
              if ( !v31 )
                goto LABEL_116;
            }
            v53 = *(_DWORD *)(v31 + 28);
          }
          else
          {
LABEL_116:
            v48 = 0;
          }
        }
        goto LABEL_45;
      }
      v13 = (char *)message.msg_control + message.msg_controllen;
      v52 = listen->family;
      udpaddr = 0;
      while ( 1 )
      {
        if ( !msg_control[1] && msg_control[2] == 8 )
        {
          source.addr.addr4.s_addr = msg_control[4];
          v48 = source.addr.addr4.s_addr;
          udpaddr = (mysockaddr *)msg_control[3];
        }
        if ( *msg_control < 0xCu )
          break;
        v14 = (*msg_control + 3) & 0xFFFFFFFC;
        if ( (char *)msg_control + v14 + 12 > v13 )
          break;
        v15 = (_DWORD *)((char *)msg_control + v14);
        if ( (char *)v15 + ((*v15 + 3) & 0xFFFFFFFC) > v13 )
          break;
        v16 = msg_control == 0;
        msg_control = v15;
        v11 = listen;
        if ( v16 )
          goto LABEL_59;
      }
      v11 = listen;
    }
    else
    {
      v52 = listen->family;
    }
LABEL_59:
    if ( v52 == 10 )
    {
      v26 = (char *)message.msg_control;
      if ( message.msg_control )
      {
        v27 = (char *)message.msg_control + message.msg_controllen;
        while ( 1 )
        {
          if ( *((_DWORD *)v26 + 1) == 41 && *((_DWORD *)v26 + 2) == *(_DWORD *)(dnsmasq_daemon + 1132) )
          {
            v28 = *(_QWORD *)(v26 + 12);
            *((_QWORD *)&source.addr.dnssec + 1) = *(_QWORD *)(v26 + 20);
            *(_QWORD *)&source.addr.addr4.s_addr = v28;
            udpaddr = (mysockaddr *)*((_DWORD *)v26 + 7);
          }
          if ( *(_DWORD *)v26 < 0xCu )
            break;
          v29 = (*(_DWORD *)v26 + 3) & 0xFFFFFFFC;
          if ( &v26[v29 + 12] > v27 )
            break;
          v30 = &v26[v29];
          if ( &v30[(*(_DWORD *)v30 + 3) & 0xFFFFFFFC] > v27 )
            break;
          v11 = listen;
          v16 = v26 == 0;
          v26 = v30;
          if ( v16 )
            goto LABEL_72;
        }
        v11 = listen;
      }
    }
    goto LABEL_72;
  }
  v18 = listen;
  udpaddr = 0;
LABEL_45:
  v19 = (_DWORD *)dnsmasq_daemon;
  v20 = *(_DWORD *)(dnsmasq_daemon + 1140) + 1;
  *(_DWORD *)(dnsmasq_daemon + 1140) = v20;
  v19[286] = v20;
  v19[287] = &to;
  if ( !extract_request(v4, v9, v19[121], &v50) )
    goto LABEL_119;
  v21 = "auth";
  if ( !dns_auth )
    v21 = "query";
  v22 = querystr(v21, v50);
  v23 = *(_DWORD *)(dnsmasq_daemon + 484);
  if ( v18->family == 2 )
    log_query(524424, v23, &to.in6.sin6_flowinfo, v22);
  else
    log_query(524552, v23, &to.in6.sin6_addr, v22);
  v51 = 0;
  if ( !dns_auth )
  {
    v24 = dnsmasq_daemon;
    if ( (*(_BYTE *)(dnsmasq_daemon + 2) & 4) == 0 )
    {
      v25 = *(_DWORD *)(dnsmasq_daemon + 80);
      if ( v25 )
      {
        while ( !in_zone(v25, *(_DWORD *)(v24 + 484), 0) )
        {
          v25 = *(_DWORD *)(v25 + 16);
          if ( !v25 )
            goto LABEL_87;
          v24 = dnsmasq_daemon;
        }
        dns_auth = 1;
        v51 = 1;
      }
    }
  }
LABEL_87:
  if ( !detect_loop(*(_DWORD *)(dnsmasq_daemon + 484), v50) )
  {
LABEL_119:
    if ( find_pseudoheader(v4, v9, 0, v58, 0, 0) )
    {
      v33 = *(_WORD *)v58[0];
      v34 = *(unsigned __int8 *)(v58[0] + 4);
      v58[0] += 6;
      LOWORD(v35) = __ROL2__(v33, 8);
      v36 = v34 >> 7;
      if ( (unsigned __int16)v35 > (unsigned __int16)*(_DWORD *)(dnsmasq_daemon + 432) )
        v35 = *(_DWORD *)(dnsmasq_daemon + 432);
      v37 = (unsigned __int16)v35;
      v38 = 1;
    }
    else
    {
      v37 = 512;
      v38 = 0;
      v36 = 0;
    }
    if ( !dns_auth )
    {
      v41 = 1;
      if ( (v4->addr.addr6.__in6_u.__u6_addr8[3] & 0x20) == 0 )
        v41 = v36;
      v42 = answer_request(v4, (char *)v4 + v37, v9, v48, v53, now, v41, v36, v38);
      if ( v42 )
      {
        v43 = 1;
        if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
          v43 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
        send_from(listen->fd, v43, (char *)v4, v42, &to, &source, (unsigned int)udpaddr);
        v44 = dnsmasq_daemon;
      }
      else
      {
        v16 = forward_query((int)&source, udpaddr, v4, v9, now, 0, v41, v45, v46, (int)udpaddr) == 0;
        v44 = dnsmasq_daemon;
        if ( !v16 )
        {
          ++*(_DWORD *)(dnsmasq_daemon + 492);
          return;
        }
      }
      ++*(_DWORD *)(v44 + 488);
      return;
    }
    v39 = answer_auth(v4, (char *)v4 + v37, v9, now, &to, v51, v36, v38);
    if ( v39 )
    {
      v40 = 1;
      if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
        v40 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
      send_from(v18->fd, v40, (char *)v4, v39, &to, &source, (unsigned int)udpaddr);
      ++*(_DWORD *)(dnsmasq_daemon + 496);
    }
  }
}
