void __cdecl receive_query(listener *listen, time_t now)
{
  _DWORD *v2; // eax
  dns_header *v3; // edi
  irec *iface; // edx
  ssize_t v5; // ecx
  int family; // eax
  _DWORD *v7; // edx
  int v8; // esi
  int v9; // edx
  char *v10; // ecx
  unsigned int v11; // eax
  unsigned int v12; // edx
  int v13; // esi
  unsigned __int32 v14; // eax
  unsigned int *msg_control; // ecx
  unsigned int v16; // eax
  unsigned int v17; // edx
  int v18; // eax
  _DWORD *v19; // edx
  int v20; // eax
  const char *v21; // eax
  int v22; // eax
  int v23; // esi
  int v24; // eax
  int v25; // eax
  in_addr_t v26; // edx
  unsigned __int16 v27; // dx
  unsigned int v28; // ecx
  unsigned __int16 v29; // ax
  int v30; // edx
  int v31; // esi
  size_t v32; // eax
  int v33; // edx
  size_t v34; // eax
  int v35; // edx
  in_addr dst_addr_4; // [esp+8h] [ebp-D8h]
  int check_dst; // [esp+Ch] [ebp-D4h]
  size_t n; // [esp+10h] [ebp-D0h]
  in_addr_t s_addr; // [esp+14h] [ebp-CCh]
  int ad_reqd; // [esp+18h] [ebp-C8h]
  char *local_auth; // [esp+1Ch] [ebp-C4h]
  char *local_autha; // [esp+1Ch] [ebp-C4h]
  int local_authb; // [esp+1Ch] [ebp-C4h]
  unsigned __int16 type; // [esp+26h] [ebp-BAh] BYREF
  unsigned __int8 *t_cp; // [esp+28h] [ebp-B8h] BYREF
  int auth_dns; // [esp+2Ch] [ebp-B4h] BYREF
  msghdr msg; // [esp+30h] [ebp-B0h] BYREF
  iovec iov[1]; // [esp+4Ch] [ebp-94h] BYREF
  all_addr dst_addr; // [esp+54h] [ebp-8Ch] BYREF
  mysockaddr source_addr; // [esp+64h] [ebp-7Ch] BYREF
  union {cmsghdr align;char control6[32];char control[24];} control_u; // [esp+80h] [ebp-60h] BYREF
  ifreq ifr; // [esp+A0h] [ebp-40h] BYREF
  unsigned int v53; // [esp+C0h] [ebp-20h]

  v53 = __readgsdword(0x14u);
  v2 = dnsmasq_daemon_0;
  v3 = (dns_header *)dnsmasq_daemon_0[119];
  auth_dns = 0;
  check_dst = 1;
  if ( (*dnsmasq_daemon_0 & 0x2000) != 0 )
    check_dst = listen->family == 10;
  dnsmasq_daemon_0[132] = 0;
  dst_addr.addr.addr4.s_addr = 0;
  s_addr = 0;
  dst_addr_4.s_addr = *v2 & 0x2000;
  if ( dst_addr_4.s_addr )
  {
    iface = listen->iface;
    dst_addr_4.s_addr = 0;
    if ( iface )
    {
      auth_dns = iface->dns_auth;
      if ( listen->family == 2 )
      {
        dst_addr.addr.addr4.s_addr = iface->addr.in.sin_addr.s_addr;
        dst_addr_4.s_addr = dst_addr.addr.addr4.s_addr;
        s_addr = iface->netmask.s_addr;
      }
    }
  }
  iov[0].iov_base = v3;
  iov[0].iov_len = *((unsigned __int16 *)v2 + 216);
  msg.msg_control = &control_u;
  msg.msg_controllen = 32;
  msg.msg_flags = 0;
  msg.msg_name = &source_addr;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  msg.msg_iovlen = 1;
  v5 = recvmsg(listen->fd, &msg, 0);
  n = v5;
  if ( v5 <= 11 )
    return;
  ad_reqd = msg.msg_flags & 0x20;
  if ( (msg.msg_flags & 0x20) != 0 || (v3->hb3 & 0x80u) != 0 )
    return;
  memset((void *)(dnsmasq_daemon_0[119] + v5), 0, *((unsigned __int16 *)dnsmasq_daemon_0 + 216) - v5);
  family = listen->family;
  source_addr.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
    v7 = dnsmasq_daemon_0;
    if ( (*((_BYTE *)dnsmasq_daemon_0 + 6) & 2) == 0 )
      goto LABEL_18;
  }
  else
  {
    if ( !source_addr.in.sin_port )
      return;
    source_addr.in.sin_addr.s_addr = 0;
    v7 = dnsmasq_daemon_0;
    if ( (*((_BYTE *)dnsmasq_daemon_0 + 6) & 2) == 0 )
      goto LABEL_18;
    if ( family == 10 )
    {
      v8 = dnsmasq_daemon_0[284];
      if ( v8 )
      {
        while ( (*(_BYTE *)(v8 + 16) & 2) == 0 || !is_same_net6(v8, &source_addr.in6.sin6_addr, *(_DWORD *)(v8 + 20)) )
        {
          v8 = *(_DWORD *)(v8 + 24);
          if ( !v8 )
            goto LABEL_34;
        }
        goto LABEL_18;
      }
LABEL_34:
      if ( !warned_2 )
      {
        my_syslog(4, "Ignoring query from non-local network");
        warned_2 = 1;
      }
      return;
    }
  }
  v13 = v7[284];
  if ( !v13 )
    goto LABEL_34;
  while ( 1 )
  {
    v14 = _byteswap_ulong(-1 << (32 - *(_BYTE *)(v13 + 20)));
    if ( (*(_BYTE *)(v13 + 16) & 2) == 0 )
    {
      if ( is_same_net(*(_DWORD *)v13, source_addr.in.sin_addr.s_addr, v14) )
        break;
    }
    v13 = *(_DWORD *)(v13 + 24);
    if ( !v13 )
      goto LABEL_34;
  }
LABEL_18:
  if ( check_dst )
  {
    if ( msg.msg_controllen <= 0xB )
      return;
    v9 = listen->family;
    if ( v9 == 2 )
    {
      if ( !msg.msg_control )
      {
        check_dst = ad_reqd;
        v18 = indextoname(listen->fd, ad_reqd, &ifr);
LABEL_53:
        if ( !v18 )
          return;
        if ( !iface_check(listen->family, &dst_addr, &ifr, &auth_dns) )
        {
          if ( *((char *)dnsmasq_daemon_0 + 4) >= 0 )
            enumerate_interfaces(0);
          if ( !loopback_exception(listen->fd, listen->family, &dst_addr, &ifr)
            && !label_exception(check_dst, listen->family, &dst_addr) )
          {
            return;
          }
        }
        if ( listen->family == 2 && (*dnsmasq_daemon_0 & 0x40000) != 0 )
        {
          v24 = dnsmasq_daemon_0[127];
          if ( v24 )
          {
            while ( *(_WORD *)v24 != 2 || *(_DWORD *)(v24 + 4) != dst_addr_4.s_addr )
            {
              v24 = *(_DWORD *)(v24 + 80);
              if ( !v24 )
              {
                if ( *((char *)dnsmasq_daemon_0 + 4) < 0 )
                {
                  v25 = dnsmasq_daemon_0[127];
                  v26 = dst_addr_4.s_addr;
                  goto LABEL_83;
                }
                goto LABEL_80;
              }
            }
            v25 = dnsmasq_daemon_0[127];
            v26 = dst_addr_4.s_addr;
            do
            {
LABEL_83:
              if ( *(_WORD *)v25 == 2 && *(_DWORD *)(v25 + 4) == v26 )
              {
                s_addr = *(_DWORD *)(v25 + 28);
                goto LABEL_60;
              }
              v25 = *(_DWORD *)(v25 + 80);
            }
            while ( v25 );
            dst_addr_4.s_addr = 0;
          }
          else if ( *((char *)dnsmasq_daemon_0 + 4) >= 0 )
          {
LABEL_80:
            enumerate_interfaces(0);
            v25 = dnsmasq_daemon_0[127];
            if ( v25 )
            {
              v26 = dst_addr_4.s_addr;
              goto LABEL_83;
            }
            dst_addr_4.s_addr = 0;
          }
          else
          {
            dst_addr_4.s_addr = 0;
          }
        }
        goto LABEL_60;
      }
      msg_control = (unsigned int *)msg.msg_control;
      check_dst = ad_reqd;
      local_autha = (char *)msg.msg_control + msg.msg_controllen;
      while ( 1 )
      {
        if ( !msg_control[1] && msg_control[2] == 8 )
        {
          dst_addr.addr.addr4.s_addr = msg_control[4];
          dst_addr_4.s_addr = dst_addr.addr.addr4.s_addr;
          check_dst = msg_control[3];
        }
        v16 = *msg_control;
        v17 = (-*msg_control & 3) + 12;
        if ( *msg_control <= 0xB
          || v17 > local_autha - (char *)msg_control
          || v16 > local_autha - (char *)msg_control - v17 )
        {
          break;
        }
        msg_control = (unsigned int *)((char *)msg_control + ((v16 + 3) & 0xFFFFFFFC));
      }
    }
    else
    {
      check_dst = ad_reqd;
      if ( v9 == 10 )
      {
        if ( msg.msg_control )
        {
          v10 = (char *)msg.msg_control;
          local_auth = (char *)msg.msg_control + msg.msg_controllen;
          while ( 1 )
          {
            if ( *((_DWORD *)v10 + 1) == 41 && *((_DWORD *)v10 + 2) == dnsmasq_daemon_0[283] )
            {
              dst_addr = *(all_addr *)(v10 + 12);
              check_dst = *((_DWORD *)v10 + 7);
            }
            v11 = *(_DWORD *)v10;
            v12 = (-*(_DWORD *)v10 & 3) + 12;
            if ( *(_DWORD *)v10 <= 0xBu || v12 > local_auth - v10 || v11 > local_auth - v10 - v12 )
              break;
            v10 += (v11 + 3) & 0xFFFFFFFC;
          }
        }
        else
        {
          check_dst = ad_reqd;
        }
      }
    }
    v18 = indextoname(listen->fd, check_dst, &ifr);
    goto LABEL_53;
  }
LABEL_60:
  v19 = dnsmasq_daemon_0;
  v20 = dnsmasq_daemon_0[285] + 1;
  dnsmasq_daemon_0[285] = v20;
  v19[286] = v20;
  v19[287] = &source_addr;
  if ( !extract_request(v3, n, v19[121], &type) )
  {
    local_authb = ad_reqd;
LABEL_92:
    if ( find_pseudoheader(v3, n, 0, &t_cp, 0, 0) )
    {
      v27 = _byteswap_ushort(*(_WORD *)t_cp);
      v28 = t_cp[4];
      t_cp += 6;
      ad_reqd = v28 >> 7;
      v29 = *((_WORD *)dnsmasq_daemon_0 + 216);
      if ( v27 <= v29 )
        v29 = v27;
      v30 = 1;
    }
    else
    {
      v30 = ad_reqd;
      v29 = 512;
    }
    if ( auth_dns )
    {
      v34 = answer_auth(v3, (char *)v3 + v29, n, now, &source_addr, local_authb, ad_reqd, v30);
      if ( v34 )
      {
        v35 = 1;
        if ( (*dnsmasq_daemon_0 & 0x2000) == 0 )
          v35 = (dnsmasq_daemon_0[1] >> 7) & 1;
        send_from(listen->fd, v35, (char *)v3, v34, &source_addr, &dst_addr, check_dst);
        ++dnsmasq_daemon_0[124];
      }
    }
    else
    {
      v31 = 1;
      if ( (v3->hb4 & 0x20) == 0 )
        v31 = ad_reqd;
      v32 = answer_request(v3, (char *)v3 + v29, n, dst_addr_4.s_addr, s_addr, now, v31, ad_reqd, v30);
      if ( v32 )
      {
        v33 = 1;
        if ( (*dnsmasq_daemon_0 & 0x2000) == 0 )
          v33 = (dnsmasq_daemon_0[1] >> 7) & 1;
        send_from(listen->fd, v33, (char *)v3, v32, &source_addr, &dst_addr, check_dst);
        ++dnsmasq_daemon_0[122];
      }
      else if ( forward_query(listen->fd, &source_addr, &dst_addr, check_dst, v3, n, now, 0, v31, ad_reqd) )
      {
        ++dnsmasq_daemon_0[123];
      }
      else
      {
        ++dnsmasq_daemon_0[122];
      }
    }
    return;
  }
  v21 = "auth";
  if ( !auth_dns )
    v21 = "query";
  v22 = querystr(v21, type);
  if ( listen->family == 2 )
    log_query(524424, dnsmasq_daemon_0[121], &source_addr.in6.sin6_flowinfo, v22);
  else
    log_query(524552, dnsmasq_daemon_0[121], &source_addr.in6.sin6_addr, v22);
  local_authb = auth_dns;
  if ( auth_dns )
  {
    local_authb = ad_reqd;
  }
  else if ( (*dnsmasq_daemon_0 & 0x40000) == 0 )
  {
    v23 = dnsmasq_daemon_0[20];
    if ( v23 )
    {
      while ( !in_zone(v23, dnsmasq_daemon_0[121], 0) )
      {
        v23 = *(_DWORD *)(v23 + 16);
        if ( !v23 )
        {
          local_authb = 0;
          goto LABEL_91;
        }
      }
      auth_dns = 1;
      local_authb = 1;
    }
  }
LABEL_91:
  if ( !detect_loop(dnsmasq_daemon_0[121], type) )
    goto LABEL_92;
}
