void __fastcall receive_query(listener *listen, time_t now)
{
  irec *iface; // r3
  in_addr_t s_addr; // r7
  _BOOL4 v5; // r8
  int v6; // r0
  dns_header *v7; // r10
  bool v8; // zf
  in_addr_t v9; // r1
  ssize_t v10; // r0
  size_t v11; // r9
  int family; // r0
  int v13; // r4
  int v14; // r0
  unsigned int v15; // r8
  struct cmsghdr *msg_control; // r1
  char *v17; // r1
  unsigned int v18; // r4
  uint32_t v19; // r3
  __int64 v20; // r4
  _DWORD *v21; // r0
  unsigned __int16 *v22; // r2
  int v23; // r3
  bool v24; // zf
  int v25; // r4
  int v26; // r1
  bool v27; // zf
  _DWORD *v28; // r0
  int v29; // r2
  int v30; // r1
  const char *v31; // r0
  int v32; // r3
  in6_addr *p_sin6_flowinfo; // r2
  int v34; // r0
  unsigned int v35; // r1
  int v36; // r8
  int v37; // r4
  int v38; // r5
  int v39; // r1
  int v40; // r2
  unsigned int v41; // r3
  unsigned int v42; // r0
  int v43; // r1
  size_t v44; // r0
  int v45; // r2
  unsigned int v46; // r1
  int v47; // r8
  int v48; // r4
  size_t v49; // r3
  int fd; // r0
  int v51; // [sp+14h] [bp-C4h]
  unsigned int dst_iface; // [sp+18h] [bp-C0h]
  unsigned int dst_ifacea; // [sp+18h] [bp-C0h]
  in_addr_t v54; // [sp+1Ch] [bp-BCh]
  int v56[8]; // [sp+24h] [bp-B4h] BYREF
  char v57; // [sp+44h] [bp-94h] BYREF
  struct msghdr message; // [sp+64h] [bp-74h] BYREF
  iovec iov[1]; // [sp+80h] [bp-58h] BYREF
  int auth_dns; // [sp+88h] [bp-50h] BYREF
  all_addr dst_addr; // [sp+8Ch] [bp-4Ch] BYREF
  unsigned __int16 type; // [sp+9Eh] [bp-3Ah] BYREF
  mysockaddr source_addr; // [sp+A0h] [bp-38h] BYREF

  s_addr = 0;
  v5 = 1;
  auth_dns = 0;
  v6 = dnsmasq_daemon;
  v7 = *(dns_header **)(dnsmasq_daemon + 476);
  if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) != 0 )
  {
    iface = (irec *)(listen->family - 0xA);
    v5 = listen->family == 0xA;
  }
  dst_addr.addr.addr4.s_addr = 0;
  *(_DWORD *)(dnsmasq_daemon + 528) = 0;
  v8 = (*(_BYTE *)(v6 + 1) & 0x20) == 0;
  if ( (*(_BYTE *)(v6 + 1) & 0x20) != 0 )
  {
    iface = listen->iface;
    v8 = iface == 0;
  }
  if ( v8 )
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    auth_dns = iface->dns_auth;
    if ( listen->family == 2 )
    {
      s_addr = iface->addr.in.sin_addr.s_addr;
      v9 = iface->netmask.s_addr;
      dst_addr.addr.addr4.s_addr = s_addr;
    }
  }
  v54 = v9;
  iov[0].iov_base = v7;
  message.msg_controllen = 32;
  message.msg_control = &v57;
  message.msg_iovlen = 1;
  message.msg_iov = iov;
  message.msg_namelen = 28;
  message.msg_name = &source_addr;
  iov[0].iov_len = *(unsigned __int16 *)(v6 + 432);
  message.msg_flags = 0;
  v10 = recvmsg(listen->fd, &message, 0);
  if ( v10 < 12 )
    return;
  v11 = v10;
  if ( (message.msg_flags & 0x20) != 0 || (v7->hb3 & 0x80u) != 0 )
    return;
  memset((void *)(*(_DWORD *)(dnsmasq_daemon + 476) + v10), 0, *(unsigned __int16 *)(dnsmasq_daemon + 432) - v10);
  family = listen->family;
  source_addr.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
  }
  else
  {
    if ( !source_addr.in.sin_port )
      return;
    source_addr.in.sin_addr.s_addr = 0;
  }
  if ( (*(_BYTE *)(dnsmasq_daemon + 6) & 2) != 0 )
  {
    v25 = *(_DWORD *)(dnsmasq_daemon + 1136);
    if ( family == 10 )
    {
      if ( v25 )
      {
        while ( (*(_BYTE *)(v25 + 16) & 2) == 0 || !is_same_net6(v25, &source_addr.in6.sin6_addr, *(_DWORD *)(v25 + 20)) )
        {
          v25 = *(_DWORD *)(v25 + 24);
          if ( !v25 )
            goto LABEL_75;
        }
        goto LABEL_19;
      }
    }
    else
    {
      for ( ; v25; v25 = *(_DWORD *)(v25 + 24) )
      {
        if ( (*(_BYTE *)(v25 + 16) & 2) == 0 )
        {
          v35 = -1 << (0x20 - *(_DWORD *)(v25 + 20));
          if ( is_same_net(
                 *(_DWORD *)v25,
                 source_addr.in.sin_addr.s_addr,
                 (v35 << 8) & 0xFF0000 | (v35 << 24) | (v35 >> 8) & 0xFF00 | HIBYTE(v35)) )
          {
            goto LABEL_19;
          }
        }
      }
    }
LABEL_75:
    if ( !receive_query_warned )
    {
      my_syslog(4, "Ignoring query from non-local network");
      receive_query_warned = 1;
    }
    return;
  }
LABEL_19:
  v13 = 0;
  if ( v5 )
  {
    if ( message.msg_controllen < 0xC )
      return;
    v14 = listen->family;
    v15 = 0;
    if ( v14 == 2 )
    {
      msg_control = (struct cmsghdr *)message.msg_control;
      v15 = 0;
      if ( !message.msg_control )
      {
LABEL_37:
        if ( !indextoname(listen->fd, v15, v56) )
          return;
        if ( !iface_check(listen->family, &dst_addr, v56, &auth_dns) )
        {
          if ( (*(_BYTE *)(dnsmasq_daemon + 4) & 0x80) == 0 )
            enumerate_interfaces(0);
          if ( !loopback_exception(listen->fd, listen->family, &dst_addr, v56)
            && !label_exception(v15, listen->family, &dst_addr) )
          {
            return;
          }
        }
        if ( listen->family == 2 && (*(_BYTE *)(dnsmasq_daemon + 2) & 4) != 0 )
        {
          v21 = *(_DWORD **)(dnsmasq_daemon + 508);
          if ( !v21 )
          {
LABEL_51:
            if ( (*(_BYTE *)(dnsmasq_daemon + 4) & 0x80) == 0 )
            {
              enumerate_interfaces(0);
              v21 = *(_DWORD **)(dnsmasq_daemon + 508);
            }
            goto LABEL_63;
          }
          v22 = *(unsigned __int16 **)(dnsmasq_daemon + 508);
          while ( 1 )
          {
            v23 = *v22;
            v24 = v23 == 2;
            if ( v23 == 2 )
              v24 = *((_DWORD *)v22 + 1) == s_addr;
            if ( v24 )
              break;
            v22 = (unsigned __int16 *)*((_DWORD *)v22 + 20);
            if ( !v22 )
              goto LABEL_51;
          }
          while ( 1 )
          {
LABEL_63:
            if ( !v21 )
            {
              s_addr = 0;
              goto LABEL_66;
            }
            v26 = *(unsigned __int16 *)v21;
            v27 = v26 == 2;
            if ( v26 == 2 )
              v27 = v21[1] == s_addr;
            if ( v27 )
              break;
            v21 = (_DWORD *)v21[20];
          }
          v54 = v21[7];
        }
        goto LABEL_66;
      }
      do
      {
        if ( !msg_control->cmsg_level && msg_control->cmsg_type == 8 )
        {
          s_addr = *(_DWORD *)&msg_control->__cmsg_data[4];
          v15 = *(_DWORD *)msg_control->__cmsg_data;
          dst_addr.addr.addr4.s_addr = s_addr;
        }
        msg_control = _cmsg_nxthdr(&message, msg_control);
      }
      while ( msg_control );
      v14 = listen->family;
      v13 = 0;
    }
    if ( v14 == 10 )
    {
      v17 = (char *)message.msg_control;
      if ( message.msg_control )
      {
        if ( message.msg_controllen >= 0xC )
        {
          v18 = v15;
          do
          {
            if ( *((_DWORD *)v17 + 1) == 41 && *((_DWORD *)v17 + 2) == *(_DWORD *)(dnsmasq_daemon + 1132) )
            {
              v19 = *((_DWORD *)v17 + 4);
              v20 = *(_QWORD *)(v17 + 20);
              dst_addr.addr.addr4.s_addr = *((_DWORD *)v17 + 3);
              dst_addr.addr.addr6.__in6_u.__u6_addr32[1] = v19;
              *((_QWORD *)&dst_addr.addr.dnssec + 1) = v20;
              v18 = *((_DWORD *)v17 + 7);
            }
            v17 = (char *)_cmsg_nxthdr(&message, (struct cmsghdr *)v17);
          }
          while ( v17 );
          v15 = v18;
          v13 = 0;
        }
      }
    }
    goto LABEL_37;
  }
  v15 = 0;
LABEL_66:
  v28 = (_DWORD *)dnsmasq_daemon;
  *(_DWORD *)(dnsmasq_daemon + 1148) = &source_addr;
  v29 = v28[121];
  v30 = v28[285] + 1;
  v28[286] = v30;
  v28[285] = v30;
  if ( !extract_request(v7, v11, v29, &type) )
    goto LABEL_87;
  v31 = "auth";
  if ( !auth_dns )
    v31 = "query";
  v32 = querystr(v31, type);
  if ( listen->family == 2 )
  {
    p_sin6_flowinfo = (in6_addr *)&source_addr.in6.sin6_flowinfo;
    v34 = 524424;
  }
  else
  {
    p_sin6_flowinfo = &source_addr.in6.sin6_addr;
    v34 = 524552;
  }
  log_query(v34, *(_DWORD *)(dnsmasq_daemon + 484), p_sin6_flowinfo, v32);
  dst_iface = v15;
  v36 = 0;
  if ( !auth_dns && (*(_BYTE *)(dnsmasq_daemon + 2) & 4) == 0 )
  {
    v37 = *(_DWORD *)(dnsmasq_daemon + 80);
    if ( v37 )
    {
      if ( in_zone(*(_DWORD *)(dnsmasq_daemon + 80), *(_DWORD *)(dnsmasq_daemon + 484), 0) )
      {
LABEL_85:
        v36 = 1;
        auth_dns = 1;
      }
      else
      {
        v36 = 0;
        while ( 1 )
        {
          v37 = *(_DWORD *)(v37 + 16);
          if ( !v37 )
            break;
          if ( in_zone(v37, *(_DWORD *)(dnsmasq_daemon + 484), 0) )
            goto LABEL_85;
        }
      }
    }
  }
  v13 = v36;
  v15 = dst_iface;
  if ( !detect_loop(*(_DWORD *)(dnsmasq_daemon + 484), type) )
  {
LABEL_87:
    v38 = 0;
    if ( find_pseudoheader(v7, v11, 0, v56, 0, 0) )
    {
      v39 = *(unsigned __int8 *)v56[0];
      v40 = *(unsigned __int8 *)(v56[0] + 1);
      v41 = *(unsigned __int8 *)(v56[0] + 4);
      v56[0] += 6;
      v42 = v40 | (v39 << 8);
      v43 = v41 >> 7;
      if ( v42 > *(unsigned __int16 *)(dnsmasq_daemon + 432) )
        v42 = *(unsigned __int16 *)(dnsmasq_daemon + 432);
      v38 = 1;
    }
    else
    {
      v42 = 512;
      v43 = 0;
    }
    if ( auth_dns )
    {
      v44 = answer_auth(v7, (char *)v7 + v42, v11, now, &source_addr, v13, v43, v38);
      if ( v44 )
      {
        v45 = dnsmasq_daemon;
        v46 = 1;
        if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
        {
          v46 = *(_DWORD *)(dnsmasq_daemon + 4);
          v45 = 1;
        }
        if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
          v46 = v45 & (v46 >> 7);
        send_from(listen->fd, v46, (char *)v7, v44, &source_addr, &dst_addr, v15);
        ++*(_DWORD *)(dnsmasq_daemon + 496);
      }
    }
    else
    {
      dst_ifacea = v15;
      v47 = 1;
      v48 = 1;
      if ( (v7->hb4 & 0x20) == 0 )
        v47 = v43;
      v49 = answer_request(v7, (char *)v7 + v42, v11, s_addr, v54, now, v47, v43, v38);
      fd = listen->fd;
      if ( v49 )
      {
        if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
          v48 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
        send_from(fd, v48, (char *)v7, v49, &source_addr, &dst_addr, dst_ifacea);
        ++*(_DWORD *)(dnsmasq_daemon + 488);
      }
      else if ( forward_query(fd, &source_addr, &dst_addr, dst_ifacea, v7, v11, now, 0u, v47, v51) )
      {
        ++*(_DWORD *)(dnsmasq_daemon + 492);
      }
      else
      {
        ++*(_DWORD *)(dnsmasq_daemon + 488);
      }
    }
  }
}
