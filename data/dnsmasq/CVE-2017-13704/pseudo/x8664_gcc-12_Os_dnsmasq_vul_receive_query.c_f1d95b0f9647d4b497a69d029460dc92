void __fastcall receive_query(listener *listen, time_t now)
{
  __int64 v3; // rax
  dns_header *v4; // r12
  unsigned int s_addr; // ebp
  int family; // ecx
  irec *iface; // rdx
  unsigned int v8; // r13d
  in_addr_t v9; // r15d
  size_t v10; // rax
  int fd; // edi
  __int64 v12; // r14
  int v13; // edx
  __int64 v14; // rax
  addrlist *v15; // rcx
  int v16; // eax
  unsigned int *i; // r8
  __int64 v18; // rdx
  int v19; // eax
  void *j; // rsi
  void *k; // rsi
  __int64 m; // rax
  __int64 ii; // rax
  __int64 v24; // rax
  int v25; // edx
  __int64 v26; // rdx
  const char *v27; // rdi
  __int64 v28; // rcx
  in6_addr *p_sin6_flowinfo; // rdx
  __int64 v30; // rdi
  __int64 jj; // rcx
  __int64 v32; // r8
  __int16 v33; // si
  unsigned __int8 *v34; // rax
  __int16 v35; // dx
  unsigned __int16 v36; // si
  char v37; // t0
  __int64 v38; // rax
  char *v39; // rsi
  size_t v40; // rax
  __int64 v41; // r10
  size_t v42; // rcx
  signed __int64 n; // [rsp+0h] [rbp-158h]
  unsigned int ad_reqd; // [rsp+10h] [rbp-148h]
  __int64 ad_reqda; // [rsp+10h] [rbp-148h]
  int ad_reqdb; // [rsp+10h] [rbp-148h]
  unsigned int *v48; // [rsp+20h] [rbp-138h]
  addrlist *addr; // [rsp+28h] [rbp-130h]
  unsigned __int16 type; // [rsp+3Ah] [rbp-11Eh] BYREF
  int auth_dns; // [rsp+3Ch] [rbp-11Ch] BYREF
  unsigned __int8 *t_cp; // [rsp+40h] [rbp-118h] BYREF
  msghdr msg; // [rsp+48h] [rbp-110h] BYREF
  iovec iov[1]; // [rsp+80h] [rbp-D8h] BYREF
  all_addr dst_addr; // [rsp+94h] [rbp-C4h] BYREF
  mysockaddr source_addr; // [rsp+A4h] [rbp-B4h] BYREF
  ifreq ifr; // [rsp+C0h] [rbp-98h] BYREF
  union {cmsghdr align;char control6[40];char control[32];} control_u; // [rsp+F0h] [rbp-68h] BYREF
  unsigned __int64 v59; // [rsp+118h] [rbp-40h]

  v59 = __readfsqword(0x28u);
  v3 = *(_QWORD *)&dnsmasq_daemon_0;
  auth_dns = 0;
  v4 = *(dns_header **)(*(_QWORD *)&dnsmasq_daemon_0 + 848LL);
  s_addr = **(_DWORD **)&dnsmasq_daemon_0 & 0x2000;
  if ( s_addr )
  {
    family = listen->family;
    iface = listen->iface;
    v8 = family == 10;
    v9 = 0;
    *(_QWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 944LL) = 0LL;
    s_addr = 0;
    dst_addr.addr.addr4.s_addr = 0;
    if ( iface )
    {
      s_addr = 0;
      auth_dns = iface->dns_auth;
      if ( family == 2 )
      {
        s_addr = iface->addr.in.sin_addr.s_addr;
        v9 = iface->netmask.s_addr;
        dst_addr.addr.addr4.s_addr = s_addr;
      }
    }
  }
  else
  {
    v9 = 0;
    v8 = 1;
    *(_QWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 944LL) = 0LL;
    dst_addr.addr.addr4.s_addr = 0;
  }
  v10 = *(unsigned __int16 *)(v3 + 768);
  fd = listen->fd;
  iov[0].iov_base = v4;
  msg.msg_controllen = 40LL;
  iov[0].iov_len = v10;
  msg.msg_control = &control_u;
  msg.msg_flags = 0;
  msg.msg_name = &source_addr;
  msg.msg_iov = iov;
  msg.msg_namelen = 28;
  msg.msg_iovlen = 1LL;
  n = recvmsg(fd, &msg, 0);
  if ( n <= 11 )
    return;
  v12 = msg.msg_flags & 0x20;
  if ( (msg.msg_flags & 0x20) != 0 || (v4->hb3 & 0x80u) != 0 )
    return;
  v13 = listen->family;
  source_addr.sa.sa_family = v13;
  if ( v13 == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
    v14 = *(_QWORD *)&dnsmasq_daemon_0;
    if ( (*(_BYTE *)(*(_QWORD *)&dnsmasq_daemon_0 + 6LL) & 2) == 0 )
      goto LABEL_30;
    goto LABEL_22;
  }
  if ( !source_addr.in.sin_port )
    return;
  source_addr.in.sin_addr.s_addr = 0;
  v14 = *(_QWORD *)&dnsmasq_daemon_0;
  if ( (*(_BYTE *)(*(_QWORD *)&dnsmasq_daemon_0 + 6LL) & 2) != 0 )
  {
    v15 = *(addrlist **)(*(_QWORD *)&dnsmasq_daemon_0 + 1568LL);
    if ( v13 == 10 )
    {
      while ( v15 )
      {
        if ( (v15->flags & 2) != 0 )
        {
          addr = v15;
          v16 = is_same_net6(v15, &source_addr.in6.sin6_addr, (unsigned int)v15->prefixlen);
          v15 = addr;
          if ( v16 )
            goto LABEL_30;
        }
        v15 = v15->next;
      }
      goto LABEL_28;
    }
LABEL_22:
    for ( i = *(unsigned int **)(v14 + 1568); i; i = (unsigned int *)*((_QWORD *)i + 3) )
    {
      v18 = _byteswap_ulong(-1 << (32 - *((_BYTE *)i + 20)));
      if ( (i[4] & 2) == 0 )
      {
        v48 = i;
        v19 = is_same_net(*i, source_addr.in.sin_addr.s_addr, v18);
        i = v48;
        if ( v19 )
          goto LABEL_30;
      }
    }
LABEL_28:
    if ( !warned_2 )
    {
      my_syslog(4LL, "Ignoring query from non-local network");
      warned_2 = 1;
    }
    return;
  }
LABEL_30:
  if ( v8 )
  {
    if ( msg.msg_controllen <= 0xF )
      return;
    v8 = 0;
    if ( listen->family == 2 )
    {
      for ( j = msg.msg_control; j; j = _cmsg_nxthdr(&msg, (struct cmsghdr *)j) )
      {
        if ( *((_QWORD *)j + 1) == 0x800000000LL )
        {
          s_addr = *((_DWORD *)j + 5);
          v8 = *((_DWORD *)j + 4);
          dst_addr.addr.addr4.s_addr = s_addr;
        }
      }
    }
    if ( listen->family == 10 && msg.msg_controllen > 0xF )
    {
      for ( k = msg.msg_control; k; k = _cmsg_nxthdr(&msg, (struct cmsghdr *)k) )
      {
        if ( *((_DWORD *)k + 2) == 41 && *((_DWORD *)k + 3) == *(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 1560LL) )
        {
          v8 = *((_DWORD *)k + 8);
          dst_addr = (all_addr)*((_OWORD *)k + 1);
        }
      }
    }
    if ( !(unsigned int)indextoname((unsigned int)listen->fd, v8, &ifr) )
      return;
    if ( !(unsigned int)iface_check((unsigned int)listen->family, &dst_addr, &ifr, &auth_dns) )
    {
      if ( *(char *)(*(_QWORD *)&dnsmasq_daemon_0 + 4LL) >= 0 )
        enumerate_interfaces(0LL);
      if ( !(unsigned int)loopback_exception((unsigned int)listen->fd, (unsigned int)listen->family, &dst_addr, &ifr)
        && !(unsigned int)label_exception(v8, (unsigned int)listen->family, &dst_addr) )
      {
        return;
      }
    }
    if ( listen->family == 2 && _bittest(*(const signed __int32 **)&dnsmasq_daemon_0, 0x12u) )
    {
      for ( m = *(_QWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 904LL); m; m = *(_QWORD *)(m + 88) )
      {
        if ( *(_WORD *)m == 2 && *(_DWORD *)(m + 4) == s_addr )
          goto LABEL_63;
      }
      if ( *(char *)(*(_QWORD *)&dnsmasq_daemon_0 + 4LL) >= 0 )
        enumerate_interfaces(0LL);
LABEL_63:
      for ( ii = *(_QWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 904LL); ; ii = *(_QWORD *)(ii + 88) )
      {
        if ( !ii )
        {
          s_addr = 0;
          goto LABEL_69;
        }
        if ( *(_WORD *)ii == 2 && *(_DWORD *)(ii + 4) == s_addr )
          break;
      }
      v9 = *(_DWORD *)(ii + 28);
    }
  }
LABEL_69:
  v24 = *(_QWORD *)&dnsmasq_daemon_0;
  v25 = *(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 1576LL) + 1;
  *(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 1576LL) = v25;
  *(_DWORD *)(v24 + 1580) = v25;
  v26 = *(_QWORD *)(v24 + 864);
  *(_QWORD *)(v24 + 1584) = &source_addr;
  if ( !(unsigned int)extract_request(v4, n, v26, &type) )
  {
    ad_reqd = 0;
LABEL_86:
    if ( find_pseudoheader(v4, n, 0LL, &t_cp, 0LL, 0LL) )
    {
      v33 = *(_WORD *)t_cp;
      v34 = t_cp + 6;
      t_cp += 4;
      v35 = *((_WORD *)v34 - 1);
      t_cp = v34;
      v36 = __ROL2__(v33, 8);
      v37 = HIBYTE(v35);
      HIBYTE(v35) = v35;
      LOBYTE(v35) = v37;
      v12 = (unsigned int)v35 >> 31;
      if ( v36 > (unsigned __int16)*(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 768LL) )
        v36 = *(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 768LL);
      v38 = 1LL;
    }
    else
    {
      v38 = 0LL;
      v36 = 512;
    }
    v39 = (char *)v4 + v36;
    if ( auth_dns )
    {
      v40 = answer_auth(v4, v39, n, now, &source_addr, ad_reqd, v12, v38);
      if ( v40 )
      {
        send_from(
          listen->fd,
          (**(_QWORD **)&dnsmasq_daemon_0 & 0x8000002000LL) != 0,
          (char *)v4,
          v40,
          &source_addr,
          &dst_addr,
          v8);
        ++*(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 880LL);
      }
    }
    else
    {
      v41 = 1LL;
      if ( (v4->hb4 & 0x20) == 0 )
        v41 = (unsigned int)v12;
      ad_reqdb = v41;
      v42 = answer_request(v4, v39, n, s_addr, v9, now, v41, v12, v38, v32);
      if ( v42 )
      {
        send_from(
          listen->fd,
          (**(_QWORD **)&dnsmasq_daemon_0 & 0x8000002000LL) != 0,
          (char *)v4,
          v42,
          &source_addr,
          &dst_addr,
          v8);
        ++*(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 872LL);
      }
      else if ( forward_query(listen->fd, &source_addr, &dst_addr, v8, v4, n, now, 0LL, ad_reqdb, 0) )
      {
        ++*(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 876LL);
      }
      else
      {
        ++*(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 872LL);
      }
    }
    return;
  }
  v27 = "query";
  if ( auth_dns )
    v27 = "auth";
  v28 = querystr(v27, type);
  if ( listen->family == 2 )
  {
    p_sin6_flowinfo = (in6_addr *)&source_addr.in6.sin6_flowinfo;
    v30 = 524424LL;
  }
  else
  {
    p_sin6_flowinfo = &source_addr.in6.sin6_addr;
    v30 = 524552LL;
  }
  log_query(v30, *(_QWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 864LL), p_sin6_flowinfo, v28);
  if ( !auth_dns && !_bittest(*(const signed __int32 **)&dnsmasq_daemon_0, 0x12u) )
  {
    for ( jj = *(_QWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 144LL); jj; jj = *(_QWORD *)(ad_reqda + 32) )
    {
      ad_reqda = jj;
      if ( (unsigned int)in_zone(jj, *(_QWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 864LL), 0LL) )
      {
        auth_dns = 1;
        ad_reqd = 1;
        goto LABEL_83;
      }
    }
  }
  ad_reqd = 0;
LABEL_83:
  if ( !(unsigned int)detect_loop(*(_QWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 864LL), type) )
    goto LABEL_86;
}
