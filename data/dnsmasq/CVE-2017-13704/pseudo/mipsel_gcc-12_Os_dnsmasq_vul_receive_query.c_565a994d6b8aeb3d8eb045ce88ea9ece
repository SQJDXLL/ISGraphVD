void __fastcall receive_query(listener *listen, time_t now)
{
  int v2; // $v0
  int s_addr; // $s1
  dns_header *v4; // $s4
  int family; // $a0
  irec *v7; // $v1
  unsigned int iface; // $s3
  int fd; // $a0
  signed int v10; // $s6
  int v11; // $s5
  int v12; // $v1
  int v13; // $v0
  int v14; // $v1
  struct cmsghdr *j; // $a1
  struct cmsghdr *k; // $v1
  int m; // $v0
  int n; // $v0
  int v19; // $v0
  int v20; // $a2
  int v21; // $v1
  const char *v22; // $a0
  int v23; // $a3
  in6_addr *p_sin6_flowinfo; // $a2
  int v25; // $a0
  unsigned int v26; // $v0
  unsigned int v27; // $s5
  unsigned int v28; // $a1
  unsigned int v29; // $v0
  char *v30; // $a1
  size_t v31; // $a3
  int v32; // $a1
  int v33; // $a0
  addrlist *v34; // $a0
  addrlist *i; // $v1
  int v36; // $v0
  addrlist *v37; // $v1
  int v38; // $v0
  int v39; // $v0
  int ii; // $a0
  int v41; // $v1
  size_t v42; // $a3
  int v43; // $a0
  int v44; // $a1
  int v45; // $v1
  int v46; // $v0
  int v47; // [sp+24h] [-BCh]
  int ad_reqd; // [sp+30h] [-B0h]
  int ad_reqda; // [sp+30h] [-B0h]
  addrlist *addr; // [sp+34h] [-ACh]
  addrlist *addr_0; // [sp+3Ch] [-A4h]
  addrlist *addr_0a; // [sp+3Ch] [-A4h]
  unsigned __int16 type; // [sp+42h] [-9Eh] BYREF
  unsigned __int8 *t_cp; // [sp+44h] [-9Ch] BYREF
  int auth_dns; // [sp+48h] [-98h] BYREF
  msghdr msg; // [sp+4Ch] [-94h] BYREF
  iovec iov[1]; // [sp+68h] [-78h] BYREF
  all_addr dst_addr; // [sp+70h] [-70h] BYREF
  mysockaddr source_addr; // [sp+80h] [-60h] BYREF
  union {cmsghdr align;char control6[32];char control[24];} control_u; // [sp+9Ch] [-44h] BYREF
  ifreq ifr; // [sp+BCh] [-24h] BYREF

  v2 = dnsmasq_daemon_0;
  s_addr = *dnsmasq_daemon_0 & 0x2000;
  v4 = *(dns_header **)(dnsmasq_daemon_0 + 476);
  auth_dns = 0;
  if ( s_addr )
  {
    family = listen->family;
    v7 = listen->iface;
    iface = family == 0xA;
    *(_DWORD *)(dnsmasq_daemon_0 + 528) = 0;
    dst_addr.addr.addr4.s_addr = 0;
    s_addr = 0;
    if ( v7 )
    {
      auth_dns = v7->dns_auth;
      if ( family == 2 )
      {
        s_addr = v7->addr.in.sin_addr.s_addr;
        dst_addr.addr.addr4.s_addr = s_addr;
      }
    }
  }
  else
  {
    *(_DWORD *)(dnsmasq_daemon_0 + 528) = 0;
    dst_addr.addr.addr4.s_addr = 0;
    iface = 1;
  }
  iov[0].iov_len = *(unsigned __int16 *)(v2 + 432);
  msg.msg_control = &control_u;
  msg.msg_controllen = 32;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  msg.msg_iovlen = 1;
  fd = listen->fd;
  iov[0].iov_base = v4;
  msg.msg_flags = 0;
  msg.msg_name = &source_addr;
  v10 = recvmsg(fd, &msg, 0);
  if ( v10 < 12 )
    return;
  v11 = msg.msg_flags & 0x20;
  if ( (msg.msg_flags & 0x20) != 0 || (v4->hb3 & 0x80u) != 0 )
    return;
  v12 = listen->family;
  source_addr.sa.sa_family = v12;
  if ( v12 != 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
    v13 = dnsmasq_daemon_0;
    v33 = *(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x20000;
    source_addr.in.sin_addr.s_addr = 0;
    if ( !v33 )
      goto LABEL_12;
    v34 = *(addrlist **)(dnsmasq_daemon_0 + 1136);
    if ( v12 == 10 )
    {
      while ( v34 )
      {
        if ( (v34->flags & 2) != 0 )
        {
          addr_0 = v34;
          v38 = is_same_net6();
          v34 = addr_0;
          if ( v38 )
            goto LABEL_12;
        }
        v34 = v34->next;
      }
      goto LABEL_59;
    }
LABEL_52:
    for ( i = *(addrlist **)(v13 + 1136); i; i = v37->next )
    {
      addr = i;
      v36 = _bswapsi2(-1 << (32 - i->prefixlen));
      v37 = addr;
      if ( (addr->flags & 2) == 0 )
      {
        v39 = is_same_net(addr->addr.addr.addr4.s_addr, source_addr.in.sin_addr.s_addr, v36);
        v37 = addr;
        if ( v39 )
          goto LABEL_12;
      }
    }
LABEL_59:
    if ( !warned_2 )
    {
      my_syslog(4, "Ignoring query from non-local network");
      warned_2 = 1;
    }
    return;
  }
  if ( !source_addr.in.sin_port )
    return;
  v13 = dnsmasq_daemon_0;
  if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x20000) != 0 )
    goto LABEL_52;
LABEL_12:
  if ( iface )
  {
    if ( msg.msg_controllen < 0xC )
      return;
    v14 = listen->family;
    iface = 0;
    if ( v14 == 2 )
    {
      for ( j = (struct cmsghdr *)msg.msg_control; j; j = _cmsg_nxthdr(&msg, j) )
      {
        if ( !j->cmsg_level && j->cmsg_type == 8 )
        {
          s_addr = *(_DWORD *)&j->__cmsg_data[4];
          iface = *(_DWORD *)j->__cmsg_data;
          dst_addr.addr.addr4.s_addr = s_addr;
        }
      }
      v14 = listen->family;
    }
    if ( v14 == 10 && msg.msg_controllen >= 0xC )
    {
      for ( k = (struct cmsghdr *)msg.msg_control; k; k = _cmsg_nxthdr(&msg, k) )
      {
        if ( k->cmsg_level == 41 && k->cmsg_type == *(_DWORD *)(dnsmasq_daemon_0 + 1132) )
        {
          addr_0a = (addrlist *)k;
          memcpy(&dst_addr, k->__cmsg_data, sizeof(dst_addr));
          k = (struct cmsghdr *)addr_0a;
          iface = addr_0a[1].addr.addr.addr4.s_addr;
        }
      }
    }
    if ( !indextoname(listen->fd, iface, &ifr) )
      return;
    if ( !iface_check(listen->family, &dst_addr, &ifr, &auth_dns) )
    {
      if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) == 0 )
        enumerate_interfaces(0);
      if ( !loopback_exception(listen->fd, listen->family, &dst_addr, &ifr)
        && !label_exception(iface, listen->family, &dst_addr) )
      {
        return;
      }
    }
    if ( listen->family == 2 && (*dnsmasq_daemon_0 & 0x40000) != 0 )
    {
      for ( m = *(_DWORD *)(dnsmasq_daemon_0 + 508); m; m = *(_DWORD *)(m + 80) )
      {
        if ( *(_WORD *)m == 2 && *(_DWORD *)(m + 4) == s_addr )
          goto LABEL_30;
      }
      if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) == 0 )
        enumerate_interfaces(0);
LABEL_30:
      for ( n = *(_DWORD *)(dnsmasq_daemon_0 + 508); n; n = *(_DWORD *)(n + 80) )
      {
        if ( *(_WORD *)n == 2 && *(_DWORD *)(n + 4) == s_addr )
          goto LABEL_33;
      }
      s_addr = 0;
    }
  }
LABEL_33:
  v19 = dnsmasq_daemon_0;
  v20 = *(_DWORD *)(dnsmasq_daemon_0 + 484);
  v21 = *(_DWORD *)(dnsmasq_daemon_0 + 1140) + 1;
  *(_DWORD *)(dnsmasq_daemon_0 + 1140) = v21;
  *(_DWORD *)(v19 + 1144) = v21;
  *(_DWORD *)(v19 + 1148) = &source_addr;
  if ( !extract_request(v4, v10, v20, &type) )
    goto LABEL_107;
  if ( auth_dns )
    v22 = "auth";
  else
    v22 = "query";
  v23 = querystr(v22, type);
  if ( listen->family == 2 )
  {
    p_sin6_flowinfo = (in6_addr *)&source_addr.in6.sin6_flowinfo;
    v25 = 524424;
  }
  else
  {
    p_sin6_flowinfo = &source_addr.in6.sin6_addr;
    v25 = 524552;
  }
  log_query(v25, *(_DWORD *)(dnsmasq_daemon_0 + 484), p_sin6_flowinfo, v23);
  if ( !auth_dns && (*dnsmasq_daemon_0 & 0x40000) == 0 )
  {
    for ( ii = *(_DWORD *)(dnsmasq_daemon_0 + 80); ii; ii = *(_DWORD *)(ad_reqd + 16) )
    {
      ad_reqd = ii;
      if ( in_zone(ii, *(_DWORD *)(dnsmasq_daemon_0 + 484), 0) )
      {
        auth_dns = 1;
        break;
      }
    }
  }
  if ( !detect_loop(*(_DWORD *)(dnsmasq_daemon_0 + 484), type) )
  {
LABEL_107:
    if ( find_pseudoheader(v4, v10, 0, &t_cp) )
    {
      v26 = (t_cp[1] << 8) | *t_cp;
      v27 = t_cp[4];
      t_cp += 6;
      v28 = *(unsigned __int16 *)(dnsmasq_daemon_0 + 432);
      v29 = (unsigned __int16)(((_WORD)v26 << 8) | (v26 >> 8));
      v11 = v27 >> 7;
      if ( v29 < v28 )
        LOWORD(v28) = v29;
      v28 = (unsigned __int16)v28;
    }
    else
    {
      v28 = 512;
    }
    v30 = (char *)v4 + v28;
    if ( !auth_dns )
    {
      v41 = 1;
      if ( (v4->hb4 & 0x20) == 0 )
        v41 = v11;
      ad_reqda = v41;
      v42 = answer_request(v4, v30, v10, s_addr);
      v43 = listen->fd;
      if ( v42 )
      {
        v44 = 1;
        if ( (*dnsmasq_daemon_0 & 0x2000) == 0 )
          v44 = (*(_DWORD *)(dnsmasq_daemon_0 + 4) >> 7) & 1;
        send_from(v43, v44, (char *)v4, v42, &source_addr, &dst_addr, iface);
        v45 = dnsmasq_daemon_0;
      }
      else
      {
        v46 = forward_query(v43, &source_addr, &dst_addr, iface, v4, v10, now, 0u, ad_reqda, v47);
        v45 = dnsmasq_daemon_0;
        if ( v46 )
        {
          ++*(_DWORD *)(dnsmasq_daemon_0 + 492);
          return;
        }
      }
      ++*(_DWORD *)(v45 + 488);
      return;
    }
    v31 = answer_auth(v4, v30, v10, now);
    if ( v31 )
    {
      v32 = 1;
      if ( (*dnsmasq_daemon_0 & 0x2000) == 0 )
        v32 = (*(_DWORD *)(dnsmasq_daemon_0 + 4) >> 7) & 1;
      send_from(listen->fd, v32, (char *)v4, v31, &source_addr, &dst_addr, iface);
      ++*(_DWORD *)(dnsmasq_daemon_0 + 496);
    }
  }
}
