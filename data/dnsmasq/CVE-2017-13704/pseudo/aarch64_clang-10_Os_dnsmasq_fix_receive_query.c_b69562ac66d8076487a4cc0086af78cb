void __fastcall receive_query(listener *listen, time_t now)
{
  __int64 v2; // x8
  dns_header *v5; // x19
  _BOOL4 v6; // w28
  in_addr_t s_addr; // w26
  in_addr_t v8; // w27
  irec *iface; // x9
  size_t v10; // x8
  ssize_t v11; // w0
  unsigned int v12; // w23
  int family; // w8
  int v14; // w8
  struct cmsghdr *v15; // x1
  unsigned int v16; // w22
  unsigned int *v17; // x22
  __int64 v18; // x8
  __int64 v19; // x2
  int v20; // w9
  const char *v21; // x0
  __int64 v22; // x3
  in6_addr *p_sin6_flowinfo; // x2
  __int64 v24; // x0
  __int64 v25; // x24
  __int64 v26; // x8
  __int64 v27; // x7
  __int64 v28; // x9
  unsigned int v29; // w11
  unsigned int v30; // w8
  unsigned int v31; // w10
  unsigned int v32; // w8
  __int64 v33; // x9
  size_t v34; // x0
  int v35; // w1
  unsigned int v36; // w24
  size_t v37; // x0
  int fd; // w8
  int v39; // w1
  void *msg_control; // x1
  int v41; // w0
  __int64 v42; // x8
  __int64 v43; // x8
  __int64 v44; // x10
  int v45; // [xsp+8h] [xbp-E8h]
  __int64 v46[5]; // [xsp+10h] [xbp-E0h] BYREF
  char v47; // [xsp+38h] [xbp-B8h] BYREF
  struct msghdr message; // [xsp+60h] [xbp-90h] BYREF
  iovec iov[1]; // [xsp+98h] [xbp-58h] BYREF
  int auth_dns; // [xsp+ACh] [xbp-44h] BYREF
  all_addr dst_addr; // [xsp+B0h] [xbp-40h] BYREF
  unsigned __int16 type; // [xsp+C4h] [xbp-2Ch] BYREF
  mysockaddr source_addr; // [xsp+C8h] [xbp-28h] BYREF

  v2 = dnsmasq_daemon;
  v5 = *(dns_header **)(dnsmasq_daemon + 848LL);
  auth_dns = 0;
  v6 = (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) == 0 || listen->family == 10;
  *(_QWORD *)(dnsmasq_daemon + 944LL) = 0LL;
  dst_addr.addr.addr4.s_addr = 0;
  s_addr = 0;
  v8 = 0;
  if ( (*(_BYTE *)(v2 + 1) & 0x20) != 0 )
  {
    iface = listen->iface;
    if ( iface && (auth_dns = iface->dns_auth, listen->family == 2) )
    {
      s_addr = iface->addr.in.sin_addr.s_addr;
      dst_addr.addr.addr4.s_addr = s_addr;
      v8 = iface->netmask.s_addr;
    }
    else
    {
      s_addr = 0;
      v8 = 0;
    }
  }
  v10 = *(unsigned __int16 *)(v2 + 768);
  message.msg_control = &v47;
  message.msg_controllen = 40LL;
  message.msg_name = &source_addr;
  message.msg_namelen = 28;
  iov[0].iov_base = v5;
  iov[0].iov_len = v10;
  message.msg_flags = 0;
  message.msg_iov = iov;
  message.msg_iovlen = 1LL;
  v11 = recvmsg(listen->fd, &message, 0);
  if ( v11 < 12 || (message.msg_flags & 0x20) != 0 || ((char)v5->hb3 & 0x80000000) != 0 )
    return;
  v12 = v11;
  memset(
    (void *)(*(_QWORD *)(dnsmasq_daemon + 848LL) + (unsigned int)v11),
    0,
    *(unsigned __int16 *)(dnsmasq_daemon + 768LL) - (__int64)v11);
  family = listen->family;
  source_addr.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
  }
  else
  {
    if ( !source_addr.in.sin_port )
      return;
    source_addr.in.sin_addr.s_addr = 0;
  }
  if ( (*(_BYTE *)(dnsmasq_daemon + 6LL) & 2) != 0 )
  {
    v17 = *(unsigned int **)(dnsmasq_daemon + 1568LL);
    if ( family == 10 )
    {
      if ( v17 )
      {
        while ( (v17[4] & 2) == 0 || !(unsigned int)is_same_net6(v17, &source_addr.in6.sin6_addr, v17[5]) )
        {
          v17 = (unsigned int *)*((_QWORD *)v17 + 3);
          if ( !v17 )
            goto LABEL_45;
        }
        goto LABEL_18;
      }
    }
    else if ( v17 )
    {
      while ( (v17[4] & 2) != 0
           || !(unsigned int)is_same_net(*v17, source_addr.in.sin_addr.s_addr, bswap32(-1 << -*((_BYTE *)v17 + 20))) )
      {
        v17 = (unsigned int *)*((_QWORD *)v17 + 3);
        if ( !v17 )
          goto LABEL_45;
      }
      goto LABEL_18;
    }
LABEL_45:
    if ( (receive_query_warned & 1) == 0 )
    {
      my_syslog(4LL, "Ignoring query from non-local network");
      receive_query_warned = 1;
    }
    return;
  }
LABEL_18:
  if ( !v6 )
  {
    v16 = 0;
    goto LABEL_35;
  }
  if ( message.msg_controllen < 0x10 )
    return;
  v14 = listen->family;
  if ( v14 != 2 )
  {
    v16 = 0;
LABEL_73:
    if ( v14 == 10 )
    {
      msg_control = message.msg_control;
      if ( message.msg_control )
      {
        if ( message.msg_controllen >= 0x10 )
        {
          do
          {
            if ( *((_DWORD *)msg_control + 2) == 41
              && *((_DWORD *)msg_control + 3) == *(_DWORD *)(dnsmasq_daemon + 1560LL) )
            {
              dst_addr = (all_addr)*((_OWORD *)msg_control + 1);
              v16 = *((_DWORD *)msg_control + 8);
            }
            msg_control = _cmsg_nxthdr(&message, (struct cmsghdr *)msg_control);
          }
          while ( msg_control );
        }
      }
    }
    goto LABEL_86;
  }
  v15 = (struct cmsghdr *)message.msg_control;
  if ( message.msg_control )
  {
    v16 = 0;
    do
    {
      if ( !v15->cmsg_level && v15->cmsg_type == 8 )
      {
        v16 = *(_DWORD *)v15->__cmsg_data;
        s_addr = *(_DWORD *)&v15->__cmsg_data[4];
        dst_addr.addr.addr4.s_addr = s_addr;
      }
      v15 = _cmsg_nxthdr(&message, v15);
    }
    while ( v15 );
    v14 = listen->family;
    goto LABEL_73;
  }
  v16 = 0;
LABEL_86:
  if ( !(unsigned int)indextoname((unsigned int)listen->fd, v16, v46) )
    return;
  if ( !(unsigned int)iface_check((unsigned int)listen->family, &dst_addr, v46, &auth_dns) )
  {
    if ( (*(_BYTE *)(dnsmasq_daemon + 4LL) & 0x80) == 0 )
      enumerate_interfaces(0LL);
    if ( !(unsigned int)loopback_exception((unsigned int)listen->fd, (unsigned int)listen->family, &dst_addr, v46)
      && !(unsigned int)label_exception(v16, (unsigned int)listen->family, &dst_addr) )
    {
      return;
    }
  }
  if ( listen->family == 2 && (*(_BYTE *)(dnsmasq_daemon + 2LL) & 4) != 0 )
  {
    v43 = *(_QWORD *)(dnsmasq_daemon + 904LL);
    if ( v43 )
    {
      v44 = *(_QWORD *)(dnsmasq_daemon + 904LL);
      do
      {
        if ( *(_WORD *)v44 == 2 && *(_DWORD *)(v44 + 4) == s_addr )
          goto LABEL_104;
        v44 = *(_QWORD *)(v44 + 88);
      }
      while ( v44 );
    }
    if ( (*(_BYTE *)(dnsmasq_daemon + 4LL) & 0x80) == 0 )
    {
      enumerate_interfaces(0LL);
      v43 = *(_QWORD *)(dnsmasq_daemon + 904LL);
    }
    while ( 1 )
    {
LABEL_104:
      if ( !v43 )
      {
        s_addr = 0;
        goto LABEL_35;
      }
      if ( *(_WORD *)v43 == 2 && *(_DWORD *)(v43 + 4) == s_addr )
        break;
      v43 = *(_QWORD *)(v43 + 88);
    }
    v8 = *(_DWORD *)(v43 + 28);
  }
LABEL_35:
  v18 = dnsmasq_daemon;
  v19 = *(_QWORD *)(dnsmasq_daemon + 864LL);
  v20 = *(_DWORD *)(dnsmasq_daemon + 1576LL) + 1;
  *(_DWORD *)(dnsmasq_daemon + 1576LL) = v20;
  *(_DWORD *)(v18 + 1580) = v20;
  *(_QWORD *)(v18 + 1584) = &source_addr;
  if ( (unsigned int)extract_request(v5, v12, v19, &type) )
  {
    if ( auth_dns )
      v21 = "auth";
    else
      v21 = "query";
    v22 = querystr(v21, type);
    if ( listen->family == 2 )
    {
      p_sin6_flowinfo = (in6_addr *)&source_addr.in6.sin6_flowinfo;
      v24 = 524424LL;
    }
    else
    {
      p_sin6_flowinfo = &source_addr.in6.sin6_addr;
      v24 = 524552LL;
    }
    log_query(v24, *(_QWORD *)(dnsmasq_daemon + 864LL), p_sin6_flowinfo, v22);
    if ( auth_dns || (v26 = dnsmasq_daemon, (*(_BYTE *)(dnsmasq_daemon + 2LL) & 4) != 0) )
    {
      LODWORD(v25) = 0;
    }
    else
    {
      v25 = *(_QWORD *)(dnsmasq_daemon + 144LL);
      if ( v25 )
      {
        while ( !(unsigned int)in_zone(v25, *(_QWORD *)(v26 + 864), 0LL) )
        {
          v25 = *(_QWORD *)(v25 + 32);
          if ( !v25 )
            goto LABEL_56;
          v26 = dnsmasq_daemon;
        }
        LODWORD(v25) = 1;
        auth_dns = 1;
      }
    }
LABEL_56:
    if ( (unsigned int)detect_loop(*(_QWORD *)(dnsmasq_daemon + 864LL), type) )
      return;
  }
  else
  {
    LODWORD(v25) = 0;
  }
  if ( find_pseudoheader(v5, v12, 0LL, v46, 0LL, 0LL) )
  {
    v27 = 1LL;
    v28 = v46[0] + 6;
    v29 = *(unsigned __int16 *)v46[0];
    v46[0] += 4LL;
    v30 = *(unsigned __int8 *)v46[0];
    v46[0] = v28;
    v31 = bswap32(v29) >> 0x10;
    v32 = v30 >> 7;
    if ( v31 <= *(unsigned __int16 *)(dnsmasq_daemon + 768LL) )
      v33 = v31;
    else
      v33 = *(unsigned __int16 *)(dnsmasq_daemon + 768LL);
  }
  else
  {
    v27 = 0LL;
    v32 = 0;
    v33 = 512LL;
  }
  if ( auth_dns )
  {
    v34 = answer_auth(v5, (char *)v5 + v33, v12, now, &source_addr, (unsigned int)v25, v32, v27);
    if ( v34 )
    {
      if ( (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) != 0 )
        v35 = 1;
      else
        v35 = (*(_DWORD *)(dnsmasq_daemon + 4LL) >> 7) & 1;
      send_from(listen->fd, v35, (char *)v5, v34, &source_addr, &dst_addr, v16);
      ++*(_DWORD *)(dnsmasq_daemon + 880LL);
    }
  }
  else
  {
    if ( (v5->hb4 & 0x20) != 0 )
      v36 = 1;
    else
      v36 = v32;
    v37 = answer_request(v5, (char *)v5 + v33, v12, s_addr, v8, now, v36, v32, v27);
    fd = listen->fd;
    if ( v37 )
    {
      if ( (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) != 0 )
        v39 = 1;
      else
        v39 = (*(_DWORD *)(dnsmasq_daemon + 4LL) >> 7) & 1;
      send_from(fd, v39, (char *)v5, v37, &source_addr, &dst_addr, v16);
      v42 = dnsmasq_daemon;
    }
    else
    {
      v41 = forward_query(fd, &source_addr, &dst_addr, v16, v5, v12, now, 0uLL, v36, v45);
      v42 = dnsmasq_daemon;
      if ( v41 )
      {
        ++*(_DWORD *)(dnsmasq_daemon + 876LL);
        return;
      }
    }
    ++*(_DWORD *)(v42 + 872);
  }
}
