void __fastcall receive_query(listener *listen, time_t now)
{
  __int64 v4; // rax
  dns_header *v5; // r15
  bool v6; // r13
  in_addr_t s_addr; // esi
  irec *iface; // rcx
  unsigned int v9; // edx
  ssize_t v10; // rax
  size_t v11; // r12
  int family; // eax
  __int64 v13; // rcx
  time_t v14; // r14
  int v15; // r8d
  __int64 v16; // r13
  _DWORD *msg_control; // rdx
  char *v18; // rsi
  unsigned __int64 v19; // rdi
  _QWORD *v20; // rdi
  bool v21; // zf
  unsigned int *v22; // rcx
  char *v23; // rax
  unsigned __int64 v24; // rsi
  unsigned int *v25; // rsi
  __int64 v26; // rax
  int v27; // esi
  __int64 v28; // rdx
  unsigned int *v29; // r14
  __int64 v30; // rax
  int v31; // ecx
  const char *v32; // rdi
  __int64 v33; // rax
  in6_addr *p_sin6_flowinfo; // rdx
  __int64 v35; // rdi
  __int64 v36; // rax
  __int64 v37; // r14
  __int64 v38; // rbp
  __int64 v39; // rcx
  unsigned __int16 v40; // dx
  unsigned int v41; // eax
  __int64 v42; // rax
  __int64 v43; // rsi
  size_t v44; // rax
  int v45; // esi
  time_t v46; // r9
  int v47; // r14d
  int v48; // r13d
  __int64 v49; // rcx
  size_t v50; // rax
  int fd; // edi
  int v52; // [rsp-8h] [rbp-130h]
  int dns_auth; // [rsp+0h] [rbp-128h] BYREF
  unsigned __int16 v54; // [rsp+6h] [rbp-122h] BYREF
  unsigned int dst_iface[2]; // [rsp+8h] [rbp-120h]
  time_t v56; // [rsp+10h] [rbp-118h]
  unsigned int v57; // [rsp+1Ch] [rbp-10Ch]
  all_addr source; // [rsp+20h] [rbp-108h] BYREF
  mysockaddr to; // [rsp+38h] [rbp-F0h] BYREF
  struct msghdr message; // [rsp+58h] [rbp-D0h] BYREF
  __int64 v61[3]; // [rsp+90h] [rbp-98h] BYREF
  __int64 v62[5]; // [rsp+A8h] [rbp-80h] BYREF
  char v63; // [rsp+D0h] [rbp-58h] BYREF

  v4 = dnsmasq_daemon;
  v5 = *(dns_header **)(dnsmasq_daemon + 848LL);
  dns_auth = 0;
  v6 = 1;
  if ( (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) != 0 )
    v6 = listen->family == 10;
  *(_QWORD *)(dnsmasq_daemon + 944LL) = 0LL;
  source.addr.addr4.s_addr = 0;
  s_addr = 0;
  if ( (*(_BYTE *)(v4 + 1) & 0x20) != 0 && (iface = listen->iface) != 0LL )
  {
    dns_auth = iface->dns_auth;
    v9 = 0;
    if ( listen->family == 2 )
    {
      s_addr = iface->addr.in.sin_addr.s_addr;
      source.addr.addr4.s_addr = s_addr;
      v9 = iface->netmask.s_addr;
    }
  }
  else
  {
    v9 = 0;
  }
  v57 = v9;
  LODWORD(v56) = s_addr;
  v61[0] = (__int64)v5;
  v61[1] = *(unsigned __int16 *)(v4 + 768);
  message.msg_control = &v63;
  message.msg_controllen = 40LL;
  message.msg_flags = 0;
  message.msg_name = &to;
  message.msg_namelen = 28;
  message.msg_iov = (iovec *)v61;
  message.msg_iovlen = 1LL;
  v10 = recvmsg(listen->fd, &message, 0);
  if ( v10 < 12 || (message.msg_flags & 0x20) != 0 || (v5->hb3 & 0x80u) != 0 )
    return;
  v11 = v10;
  family = listen->family;
  to.sa.sa_family = family;
  if ( family != 2 )
  {
    if ( !to.in.sin_port )
      return;
    to.in.sin_addr.s_addr = 0;
    v13 = dnsmasq_daemon;
    if ( (*(_BYTE *)(dnsmasq_daemon + 6LL) & 2) != 0 )
      goto LABEL_49;
LABEL_17:
    *(_QWORD *)dst_iface = 0LL;
    if ( !v6 )
    {
      v16 = 0LL;
      v14 = now;
      goto LABEL_64;
    }
    if ( message.msg_controllen < 0x10 )
      return;
    v14 = now;
    v15 = listen->family;
    v16 = 0LL;
    if ( v15 == 2 )
    {
      msg_control = message.msg_control;
      v16 = 0LL;
      if ( !message.msg_control )
      {
LABEL_39:
        if ( !(unsigned int)indextoname((unsigned int)listen->fd, (unsigned int)v16, v62) )
          return;
        if ( !(unsigned int)iface_check((unsigned int)listen->family, &source, v62, &dns_auth) )
        {
          if ( *(char *)(dnsmasq_daemon + 4LL) >= 0 )
            enumerate_interfaces(0LL);
          if ( !(unsigned int)loopback_exception((unsigned int)listen->fd, (unsigned int)listen->family, &source, v62)
            && !(unsigned int)label_exception((unsigned int)v16, (unsigned int)listen->family, &source) )
          {
            return;
          }
        }
        if ( listen->family == 2 && (*(_BYTE *)(dnsmasq_daemon + 2LL) & 4) != 0 )
        {
          v26 = *(_QWORD *)(dnsmasq_daemon + 904LL);
          v27 = v56;
          if ( v26 )
          {
            v28 = *(_QWORD *)(dnsmasq_daemon + 904LL);
            while ( *(_WORD *)v28 != 2 || *(_DWORD *)(v28 + 4) != (_DWORD)v56 )
            {
              v28 = *(_QWORD *)(v28 + 88);
              if ( !v28 )
                goto LABEL_103;
            }
          }
          else
          {
LABEL_103:
            if ( *(char *)(dnsmasq_daemon + 4LL) >= 0 )
            {
              enumerate_interfaces(0LL);
              v27 = v56;
              v26 = *(_QWORD *)(dnsmasq_daemon + 904LL);
            }
          }
          if ( v26 )
          {
            while ( *(_WORD *)v26 != 2 || *(_DWORD *)(v26 + 4) != v27 )
            {
              v26 = *(_QWORD *)(v26 + 88);
              if ( !v26 )
                goto LABEL_106;
            }
            v57 = *(_DWORD *)(v26 + 28);
          }
          else
          {
LABEL_106:
            LODWORD(v56) = 0;
          }
        }
LABEL_64:
        v30 = dnsmasq_daemon;
        v31 = *(_DWORD *)(dnsmasq_daemon + 1576LL) + 1;
        *(_DWORD *)(dnsmasq_daemon + 1576LL) = v31;
        *(_DWORD *)(v30 + 1580) = v31;
        *(_QWORD *)(v30 + 1584) = &to;
        if ( !(unsigned int)extract_request(v5, v11, *(_QWORD *)(v30 + 864), &v54) )
        {
LABEL_85:
          v38 = 0LL;
          if ( find_pseudoheader(v5, v11, 0LL, v62, 0LL, 0LL) )
          {
            v39 = v62[0];
            v40 = __ROL2__(*(_WORD *)v62[0], 8);
            v62[0] += 4LL;
            v41 = *(unsigned __int8 *)v62[0];
            v62[0] = v39 + 6;
            v42 = v41 >> 7;
            if ( v40 > (unsigned __int16)*(_DWORD *)(dnsmasq_daemon + 768LL) )
              v40 = *(_DWORD *)(dnsmasq_daemon + 768LL);
            v43 = v40;
            v38 = 1LL;
          }
          else
          {
            v43 = 512LL;
            v42 = 0LL;
          }
          if ( dns_auth )
          {
            v44 = answer_auth(v5, (char *)v5 + v43, v11, v14, &to, *(_QWORD *)dst_iface, v42, v38);
            if ( v44 )
            {
              v45 = 1;
              if ( (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) == 0 )
                v45 = (*(_DWORD *)(dnsmasq_daemon + 4LL) >> 7) & 1;
              send_from(listen->fd, v45, (char *)v5, v44, &to, &source, v16);
              ++*(_DWORD *)(dnsmasq_daemon + 880LL);
            }
          }
          else
          {
            *(_QWORD *)dst_iface = v16;
            v46 = v14;
            v47 = 1;
            v48 = 1;
            if ( (v5->hb4 & 0x20) == 0 )
              v48 = v42;
            v49 = (unsigned int)v56;
            v56 = v46;
            v50 = answer_request(v5, (char *)v5 + v43, v11, v49, v57);
            fd = listen->fd;
            if ( v50 )
            {
              if ( (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) == 0 )
                v47 = (*(_DWORD *)(dnsmasq_daemon + 4LL) >> 7) & 1;
              send_from(fd, v47, (char *)v5, v50, &to, &source, dst_iface[0]);
              ++*(_DWORD *)(dnsmasq_daemon + 872LL);
            }
            else if ( forward_query(fd, &to, &source, dst_iface[0], v5, v11, v56, 0LL, v48, v52) )
            {
              ++*(_DWORD *)(dnsmasq_daemon + 876LL);
            }
            else
            {
              ++*(_DWORD *)(dnsmasq_daemon + 872LL);
            }
          }
          return;
        }
        v32 = "auth";
        if ( !dns_auth )
          v32 = "query";
        v33 = querystr(v32, v54);
        if ( listen->family == 2 )
        {
          p_sin6_flowinfo = (in6_addr *)&to.in6.sin6_flowinfo;
          v35 = 524424LL;
        }
        else
        {
          p_sin6_flowinfo = &to.in6.sin6_addr;
          v35 = 524552LL;
        }
        log_query(v35, *(_QWORD *)(dnsmasq_daemon + 864LL), p_sin6_flowinfo, v33);
        if ( dns_auth )
        {
          v36 = 0LL;
LABEL_76:
          *(_QWORD *)dst_iface = v36;
          goto LABEL_84;
        }
        *(_QWORD *)dst_iface = 0LL;
        if ( (*(_BYTE *)(dnsmasq_daemon + 2LL) & 4) == 0 )
        {
          v37 = *(_QWORD *)(dnsmasq_daemon + 144LL);
          if ( v37 )
          {
            if ( (unsigned int)in_zone(*(_QWORD *)(dnsmasq_daemon + 144LL), *(_QWORD *)(dnsmasq_daemon + 864LL), 0LL) )
            {
LABEL_83:
              dns_auth = 1;
              v36 = 1LL;
              goto LABEL_76;
            }
            *(_QWORD *)dst_iface = 0LL;
            while ( 1 )
            {
              v37 = *(_QWORD *)(v37 + 32);
              if ( !v37 )
                break;
              if ( (unsigned int)in_zone(v37, *(_QWORD *)(dnsmasq_daemon + 864LL), 0LL) )
                goto LABEL_83;
            }
          }
        }
LABEL_84:
        v14 = now;
        if ( (unsigned int)detect_loop(*(_QWORD *)(dnsmasq_daemon + 864LL), v54) )
          return;
        goto LABEL_85;
      }
      v18 = (char *)message.msg_control + message.msg_controllen;
      do
      {
        if ( !msg_control[2] && msg_control[3] == 8 )
        {
          LODWORD(v56) = msg_control[5];
          source.addr.addr4.s_addr = v56;
          v16 = (unsigned int)msg_control[4];
        }
        if ( *(_QWORD *)msg_control < 0x10uLL )
          break;
        v19 = (*(_QWORD *)msg_control + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if ( (char *)msg_control + v19 + 16 > v18 )
          break;
        v20 = (_QWORD *)((char *)msg_control + v19);
        if ( (char *)v20 + ((*v20 + 7LL) & 0xFFFFFFFFFFFFFFF8LL) > v18 )
          break;
        v21 = msg_control == 0LL;
        msg_control = v20;
      }
      while ( !v21 );
    }
    if ( v15 == 10 )
    {
      v22 = (unsigned int *)message.msg_control;
      if ( message.msg_control )
      {
        v23 = (char *)message.msg_control + message.msg_controllen;
        do
        {
          if ( v22[2] == 41 && v22[3] == *(_DWORD *)(dnsmasq_daemon + 1560LL) )
          {
            source = (all_addr)*((_OWORD *)v22 + 1);
            v16 = v22[8];
          }
          if ( *(_QWORD *)v22 < 0x10uLL )
            break;
          v24 = (*(_QWORD *)v22 + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
          if ( (char *)v22 + v24 + 16 > v23 )
            break;
          v25 = (unsigned int *)((char *)v22 + v24);
          if ( (char *)v25 + ((*(_QWORD *)v25 + 7LL) & 0xFFFFFFFFFFFFFFF8LL) > v23 )
            break;
          v21 = v22 == 0LL;
          v22 = v25;
        }
        while ( !v21 );
      }
    }
    goto LABEL_39;
  }
  if ( !to.in.sin_port )
    return;
  v13 = dnsmasq_daemon;
  if ( (*(_BYTE *)(dnsmasq_daemon + 6LL) & 2) == 0 )
    goto LABEL_17;
LABEL_49:
  v29 = *(unsigned int **)(v13 + 1568);
  if ( family == 10 )
  {
    while ( v29 )
    {
      if ( (v29[4] & 2) != 0 && (unsigned int)is_same_net6(v29, &to.in6.sin6_addr, v29[5]) )
        goto LABEL_17;
      v29 = (unsigned int *)*((_QWORD *)v29 + 3);
    }
  }
  else
  {
    while ( v29 )
    {
      if ( (v29[4] & 2) == 0
        && (unsigned int)is_same_net(*v29, to.in.sin_addr.s_addr, _byteswap_ulong(-1 << -*((_BYTE *)v29 + 20))) )
      {
        goto LABEL_17;
      }
      v29 = (unsigned int *)*((_QWORD *)v29 + 3);
    }
  }
  if ( !receive_query_warned )
  {
    my_syslog(4LL, "Ignoring query from non-local network");
    receive_query_warned = 1;
  }
}
