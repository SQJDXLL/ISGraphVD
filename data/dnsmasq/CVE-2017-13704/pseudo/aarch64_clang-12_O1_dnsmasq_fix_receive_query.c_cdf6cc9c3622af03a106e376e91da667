void __fastcall receive_query(listener *listen, time_t now)
{
  __int64 v2; // x8
  dns_header *v5; // x19
  _BOOL4 v6; // w28
  in_addr_t s_addr; // w26
  in_addr_t v8; // w27
  irec *iface; // x9
  irec *v10; // x9
  void *v11; // x11
  size_t v12; // x8
  ssize_t v13; // w0
  size_t v14; // x22
  int family; // w8
  unsigned int *v16; // x23
  __uint32_t v17; // w0
  unsigned int v18; // w23
  struct cmsghdr *msg_control; // x1
  void *i; // x1
  __int64 v21; // x9
  __int64 v22; // x9
  __int64 v23; // x8
  int v24; // w9
  __int64 v25; // x2
  const char *v26; // x0
  __int64 v27; // x3
  in6_addr *p_sin6_flowinfo; // x2
  __int64 v29; // x0
  __int64 v30; // x24
  __int64 v31; // x8
  __int64 v32; // x7
  unsigned int v33; // w10
  __int64 v34; // x12
  unsigned int v35; // w10
  unsigned int v36; // w8
  __int64 v37; // x9
  size_t v38; // x0
  int v39; // w1
  unsigned int v40; // w24
  size_t v41; // x0
  int fd; // w8
  int v43; // w1
  int v44; // w0
  __int64 v45; // x8
  int v46; // [xsp+8h] [xbp-E8h]
  __int64 v47[5]; // [xsp+10h] [xbp-E0h] BYREF
  char v48; // [xsp+38h] [xbp-B8h] BYREF
  struct msghdr message; // [xsp+60h] [xbp-90h] BYREF
  iovec iov[1]; // [xsp+98h] [xbp-58h] BYREF
  int auth_dns; // [xsp+ACh] [xbp-44h] BYREF
  all_addr dst_addr; // [xsp+B0h] [xbp-40h] BYREF
  unsigned __int16 type; // [xsp+C4h] [xbp-2Ch] BYREF
  mysockaddr source_addr; // [xsp+C8h] [xbp-28h] BYREF

  v2 = dnsmasq_daemon;
  v5 = *(dns_header **)(dnsmasq_daemon + 848LL);
  auth_dns = 0;
  v6 = (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) == 0 || listen->family == 10;
  *(_QWORD *)(dnsmasq_daemon + 944LL) = 0LL;
  dst_addr.addr.addr4.s_addr = 0;
  s_addr = 0;
  v8 = 0;
  if ( (*(_BYTE *)(v2 + 1) & 0x20) != 0 )
  {
    iface = listen->iface;
    if ( iface && (auth_dns = iface->dns_auth, listen->family == 2) )
    {
      v10 = listen->iface;
      s_addr = v10->addr.in.sin_addr.s_addr;
      dst_addr.addr.addr4.s_addr = s_addr;
      v8 = v10->netmask.s_addr;
    }
    else
    {
      s_addr = 0;
      v8 = 0;
    }
  }
  v11 = *(void **)(v2 + 848);
  v12 = *(unsigned __int16 *)(v2 + 768);
  message.msg_control = &v48;
  message.msg_controllen = 40LL;
  message.msg_name = &source_addr;
  message.msg_namelen = 28;
  iov[0].iov_base = v11;
  iov[0].iov_len = v12;
  message.msg_flags = 0;
  message.msg_iov = iov;
  message.msg_iovlen = 1LL;
  v13 = recvmsg(listen->fd, &message, 0);
  if ( v13 < 12 || (message.msg_flags & 0x20) != 0 || ((char)v5->hb3 & 0x80000000) != 0 )
    return;
  v14 = v13;
  memset(
    (void *)(*(_QWORD *)(dnsmasq_daemon + 848LL) + v13),
    0,
    *(unsigned __int16 *)(dnsmasq_daemon + 768LL) - (__int64)v13);
  family = listen->family;
  source_addr.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
  }
  else
  {
    if ( !source_addr.in.sin_port )
      return;
    source_addr.in.sin_addr.s_addr = 0;
  }
  if ( (*(_BYTE *)(dnsmasq_daemon + 6LL) & 2) != 0 )
  {
    v16 = *(unsigned int **)(dnsmasq_daemon + 1568LL);
    if ( family == 10 )
    {
      for ( ; v16; v16 = (unsigned int *)*((_QWORD *)v16 + 3) )
      {
        if ( (v16[4] & 2) != 0 && (unsigned int)is_same_net6(v16, &source_addr.in6.sin6_addr, v16[5]) )
          break;
      }
    }
    else
    {
      for ( ; v16; v16 = (unsigned int *)*((_QWORD *)v16 + 3) )
      {
        if ( (v16[4] & 2) == 0 )
        {
          v17 = _bswap_32(-1 << -*((_BYTE *)v16 + 20));
          if ( (unsigned int)is_same_net(*v16, source_addr.in.sin_addr.s_addr, v17) )
            break;
        }
      }
    }
    if ( !v16 )
    {
      if ( (receive_query_warned & 1) == 0 )
      {
        my_syslog(4LL, "Ignoring query from non-local network");
        receive_query_warned = 1;
      }
      return;
    }
  }
  if ( v6 )
  {
    if ( message.msg_controllen < 0x10 )
      return;
    if ( listen->family == 2 && (msg_control = (struct cmsghdr *)message.msg_control) != 0LL )
    {
      v18 = 0;
      do
      {
        if ( !msg_control->cmsg_level && msg_control->cmsg_type == 8 )
        {
          v18 = *(_DWORD *)msg_control->__cmsg_data;
          s_addr = *(_DWORD *)&msg_control->__cmsg_data[4];
          dst_addr.addr.addr4.s_addr = s_addr;
        }
        msg_control = _cmsg_nxthdr(&message, msg_control);
      }
      while ( msg_control );
    }
    else
    {
      v18 = 0;
    }
    if ( listen->family == 10 && message.msg_controllen >= 0x10 )
    {
      for ( i = message.msg_control; i; i = _cmsg_nxthdr(&message, (struct cmsghdr *)i) )
      {
        if ( *((_DWORD *)i + 2) == 41 && *((_DWORD *)i + 3) == *(_DWORD *)(dnsmasq_daemon + 1560LL) )
        {
          dst_addr = (all_addr)*((_OWORD *)i + 1);
          v18 = *((_DWORD *)i + 8);
        }
      }
    }
    if ( !(unsigned int)indextoname((unsigned int)listen->fd, v18, v47) )
      return;
    if ( !(unsigned int)iface_check((unsigned int)listen->family, &dst_addr, v47, &auth_dns) )
    {
      if ( (*(_BYTE *)(dnsmasq_daemon + 4LL) & 0x80) == 0 )
        enumerate_interfaces(0LL);
      if ( !(unsigned int)loopback_exception((unsigned int)listen->fd, (unsigned int)listen->family, &dst_addr, v47)
        && !(unsigned int)label_exception(v18, (unsigned int)listen->family, &dst_addr) )
      {
        return;
      }
    }
    if ( listen->family == 2 && (*(_BYTE *)(dnsmasq_daemon + 2LL) & 4) != 0 )
    {
      v21 = *(_QWORD *)(dnsmasq_daemon + 904LL);
      if ( v21 )
      {
        while ( *(_WORD *)v21 != 2 || *(_DWORD *)(v21 + 4) != s_addr )
        {
          v21 = *(_QWORD *)(v21 + 88);
          if ( !v21 )
            goto LABEL_57;
        }
      }
      else
      {
LABEL_57:
        if ( (*(_BYTE *)(dnsmasq_daemon + 4LL) & 0x80) == 0 )
          enumerate_interfaces(0LL);
      }
      v22 = *(_QWORD *)(dnsmasq_daemon + 904LL);
      if ( v22 )
      {
        do
        {
          if ( *(_WORD *)v22 == 2 && *(_DWORD *)(v22 + 4) == s_addr )
          {
            v8 = *(_DWORD *)(v22 + 28);
            goto LABEL_74;
          }
          v22 = *(_QWORD *)(v22 + 88);
        }
        while ( v22 );
        s_addr = 0;
      }
      else
      {
        s_addr = 0;
      }
    }
  }
  else
  {
    v18 = 0;
  }
LABEL_74:
  v23 = dnsmasq_daemon;
  v24 = *(_DWORD *)(dnsmasq_daemon + 1576LL);
  v25 = *(_QWORD *)(dnsmasq_daemon + 864LL);
  *(_QWORD *)(dnsmasq_daemon + 1584LL) = &source_addr;
  *(_DWORD *)(v23 + 1576) = ++v24;
  *(_DWORD *)(v23 + 1580) = v24;
  if ( (unsigned int)extract_request(v5, v14, v25, &type) )
  {
    if ( auth_dns )
      v26 = "auth";
    else
      v26 = "query";
    v27 = querystr(v26, type);
    if ( listen->family == 2 )
    {
      p_sin6_flowinfo = (in6_addr *)&source_addr.in6.sin6_flowinfo;
      v29 = 524424LL;
    }
    else
    {
      p_sin6_flowinfo = &source_addr.in6.sin6_addr;
      v29 = 524552LL;
    }
    log_query(v29, *(_QWORD *)(dnsmasq_daemon + 864LL), p_sin6_flowinfo, v27);
    if ( auth_dns || (*(_BYTE *)(dnsmasq_daemon + 2LL) & 4) != 0 )
    {
      LODWORD(v30) = 0;
    }
    else
    {
      v30 = *(_QWORD *)(dnsmasq_daemon + 144LL);
      if ( v30 )
      {
        while ( !(unsigned int)in_zone(v30, *(_QWORD *)(dnsmasq_daemon + 864LL), 0LL) )
        {
          v30 = *(_QWORD *)(v30 + 32);
          if ( !v30 )
            goto LABEL_89;
        }
        LODWORD(v30) = 1;
        auth_dns = 1;
      }
    }
LABEL_89:
    if ( (unsigned int)detect_loop(*(_QWORD *)(dnsmasq_daemon + 864LL), type) )
      return;
  }
  else
  {
    LODWORD(v30) = 0;
  }
  if ( find_pseudoheader(v5, v14, 0LL, v47, 0LL, 0LL) )
  {
    v31 = v47[0];
    v32 = 1LL;
    v33 = *(unsigned __int16 *)v47[0];
    v34 = v47[0] + 6;
    v47[0] += 4LL;
    LODWORD(v31) = *(unsigned __int8 *)(v31 + 4);
    v47[0] = v34;
    v35 = bswap32(v33) >> 0x10;
    v36 = (unsigned int)v31 >> 7;
    if ( v35 <= *(unsigned __int16 *)(dnsmasq_daemon + 768LL) )
      v37 = v35;
    else
      v37 = *(unsigned __int16 *)(dnsmasq_daemon + 768LL);
  }
  else
  {
    v32 = 0LL;
    v36 = 0;
    v37 = 512LL;
  }
  if ( auth_dns )
  {
    v38 = answer_auth(v5, (char *)v5 + v37, v14, now, &source_addr, (unsigned int)v30, v36, v32);
    if ( v38 )
    {
      if ( (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) != 0 )
        v39 = 1;
      else
        v39 = (*(_DWORD *)(dnsmasq_daemon + 4LL) >> 7) & 1;
      send_from(listen->fd, v39, (char *)v5, v38, &source_addr, &dst_addr, v18);
      ++*(_DWORD *)(dnsmasq_daemon + 880LL);
    }
  }
  else
  {
    if ( (v5->hb4 & 0x20) != 0 )
      v40 = 1;
    else
      v40 = v36;
    v41 = answer_request(v5, (char *)v5 + v37, v14, s_addr, v8, now, v40, v36, v32);
    fd = listen->fd;
    if ( v41 )
    {
      if ( (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) != 0 )
        v43 = 1;
      else
        v43 = (*(_DWORD *)(dnsmasq_daemon + 4LL) >> 7) & 1;
      send_from(fd, v43, (char *)v5, v41, &source_addr, &dst_addr, v18);
      v45 = dnsmasq_daemon;
    }
    else
    {
      v44 = forward_query(fd, &source_addr, &dst_addr, v18, v5, v14, now, 0uLL, v40, v46);
      v45 = dnsmasq_daemon;
      if ( v44 )
      {
        ++*(_DWORD *)(dnsmasq_daemon + 876LL);
        return;
      }
    }
    ++*(_DWORD *)(v45 + 872);
  }
}
