void __fastcall receive_query(listener *listen, time_t now)
{
  __int64 v2; // x8
  dns_header *v5; // x19
  _BOOL4 v6; // w28
  in_addr_t s_addr; // w26
  in_addr_t v8; // w27
  irec *iface; // x9
  size_t v10; // x8
  ssize_t v11; // w0
  size_t v12; // x22
  int family; // w9
  __int64 v14; // x8
  __int64 v15; // x23
  unsigned int *v16; // x23
  int v17; // w9
  _DWORD *v18; // x10
  unsigned int v19; // w23
  char *v20; // x11
  __int64 v21; // x8
  int v22; // w9
  __int64 v23; // x2
  const char *v24; // x0
  __int64 v25; // x3
  in6_addr *p_sin6_flowinfo; // x2
  __int64 v27; // x0
  __int64 v28; // x24
  __int64 v29; // x8
  __int64 v30; // x8
  __int64 v31; // x7
  unsigned int v32; // w10
  __int64 v33; // x12
  unsigned int v34; // w10
  unsigned int v35; // w8
  __int64 v36; // x9
  size_t v37; // x0
  int v38; // w1
  unsigned int v39; // w24
  size_t v40; // x0
  int fd; // w8
  int v42; // w1
  char *msg_control; // x9
  char *v44; // x8
  int v45; // w0
  __int64 v46; // x8
  __int64 v47; // x8
  __int64 v48; // x10
  int v49; // [xsp+8h] [xbp-E8h]
  __int64 v50[5]; // [xsp+10h] [xbp-E0h] BYREF
  char v51; // [xsp+38h] [xbp-B8h] BYREF
  struct msghdr message; // [xsp+60h] [xbp-90h] BYREF
  iovec iov[1]; // [xsp+98h] [xbp-58h] BYREF
  int auth_dns; // [xsp+ACh] [xbp-44h] BYREF
  all_addr dst_addr; // [xsp+B0h] [xbp-40h] BYREF
  unsigned __int16 type; // [xsp+C4h] [xbp-2Ch] BYREF
  mysockaddr source_addr; // [xsp+C8h] [xbp-28h] BYREF

  v2 = dnsmasq_daemon;
  v5 = *(dns_header **)(dnsmasq_daemon + 848LL);
  auth_dns = 0;
  v6 = (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) == 0 || listen->family == 10;
  *(_QWORD *)(dnsmasq_daemon + 944LL) = 0LL;
  dst_addr.addr.addr4.s_addr = 0;
  s_addr = 0;
  v8 = 0;
  if ( (*(_BYTE *)(v2 + 1) & 0x20) != 0 )
  {
    iface = listen->iface;
    if ( iface && (auth_dns = iface->dns_auth, listen->family == 2) )
    {
      s_addr = iface->addr.in.sin_addr.s_addr;
      dst_addr.addr.addr4.s_addr = s_addr;
      v8 = iface->netmask.s_addr;
    }
    else
    {
      s_addr = 0;
      v8 = 0;
    }
  }
  v10 = *(unsigned __int16 *)(v2 + 768);
  message.msg_control = &v51;
  message.msg_controllen = 40LL;
  message.msg_name = &source_addr;
  message.msg_namelen = 28;
  iov[0].iov_base = v5;
  iov[0].iov_len = v10;
  message.msg_flags = 0;
  message.msg_iov = iov;
  message.msg_iovlen = 1LL;
  v11 = recvmsg(listen->fd, &message, 0);
  if ( v11 < 12 || (message.msg_flags & 0x20) != 0 || ((char)v5->hb3 & 0x80000000) != 0 )
    return;
  v12 = (unsigned int)v11;
  memset(
    (void *)(*(_QWORD *)(dnsmasq_daemon + 848LL) + (unsigned int)v11),
    0,
    *(unsigned __int16 *)(dnsmasq_daemon + 768LL) - (__int64)v11);
  family = listen->family;
  source_addr.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
    v14 = dnsmasq_daemon;
    if ( (*(_BYTE *)(dnsmasq_daemon + 6LL) & 2) != 0 )
    {
LABEL_25:
      v16 = *(unsigned int **)(v14 + 1568);
      if ( v16 )
      {
        while ( (v16[4] & 2) != 0
             || !(unsigned int)is_same_net(*v16, source_addr.in.sin_addr.s_addr, bswap32(-1 << -*((_BYTE *)v16 + 20))) )
        {
          v16 = (unsigned int *)*((_QWORD *)v16 + 3);
          if ( !v16 )
            goto LABEL_42;
        }
        goto LABEL_30;
      }
LABEL_42:
      if ( (receive_query_warned & 1) == 0 )
      {
        my_syslog(4LL, "Ignoring query from non-local network");
        receive_query_warned = 1;
      }
      return;
    }
  }
  else
  {
    if ( !source_addr.in.sin_port )
      return;
    v14 = dnsmasq_daemon;
    source_addr.in.sin_addr.s_addr = 0;
    if ( (*(_BYTE *)(dnsmasq_daemon + 6LL) & 2) != 0 )
    {
      if ( family != 10 )
        goto LABEL_25;
      v15 = *(_QWORD *)(dnsmasq_daemon + 1568LL);
      if ( !v15 )
        goto LABEL_42;
      while ( (*(_BYTE *)(v15 + 16) & 2) == 0
           || !(unsigned int)is_same_net6(v15, &source_addr.in6.sin6_addr, *(unsigned int *)(v15 + 20)) )
      {
        v15 = *(_QWORD *)(v15 + 24);
        if ( !v15 )
          goto LABEL_42;
      }
    }
  }
LABEL_30:
  if ( !v6 )
  {
    v19 = 0;
    goto LABEL_45;
  }
  if ( message.msg_controllen < 0x10 )
    return;
  v17 = listen->family;
  if ( v17 != 2 )
  {
    v19 = 0;
LABEL_77:
    if ( v17 == 10 )
    {
      msg_control = (char *)message.msg_control;
      if ( message.msg_control )
      {
        v44 = (char *)message.msg_control + message.msg_controllen;
        do
        {
          if ( *((_DWORD *)msg_control + 2) == 41
            && *((_DWORD *)msg_control + 3) == *(_DWORD *)(dnsmasq_daemon + 1560LL) )
          {
            dst_addr = (all_addr)*((_OWORD *)msg_control + 1);
            v19 = *((_DWORD *)msg_control + 8);
          }
          if ( *(_QWORD *)msg_control < 0x10uLL )
            break;
          msg_control += (*(_QWORD *)msg_control + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
          if ( msg_control + 0x10 > v44 )
            break;
        }
        while ( &msg_control[(*(_QWORD *)msg_control + 7LL) & 0xFFFFFFFFFFFFFFF8LL] <= v44 );
      }
    }
    goto LABEL_92;
  }
  v18 = message.msg_control;
  if ( message.msg_control )
  {
    v19 = 0;
    v20 = (char *)message.msg_control + message.msg_controllen;
    do
    {
      if ( !v18[2] && v18[3] == 8 )
      {
        v19 = v18[4];
        s_addr = v18[5];
        dst_addr.addr.addr4.s_addr = s_addr;
      }
      if ( *(_QWORD *)v18 < 0x10uLL )
        break;
      v18 = (_DWORD *)((char *)v18 + ((*(_QWORD *)v18 + 7LL) & 0xFFFFFFFFFFFFFFF8LL));
      if ( v18 + 4 > (_DWORD *)v20 )
        break;
    }
    while ( (char *)v18 + ((*(_QWORD *)v18 + 7LL) & 0xFFFFFFFFFFFFFFF8LL) <= v20 );
    goto LABEL_77;
  }
  v19 = 0;
LABEL_92:
  if ( !(unsigned int)indextoname((unsigned int)listen->fd, v19, v50) )
    return;
  if ( !(unsigned int)iface_check((unsigned int)listen->family, &dst_addr, v50, &auth_dns) )
  {
    if ( (*(_BYTE *)(dnsmasq_daemon + 4LL) & 0x80) == 0 )
      enumerate_interfaces(0LL);
    if ( !(unsigned int)loopback_exception((unsigned int)listen->fd, (unsigned int)listen->family, &dst_addr, v50)
      && !(unsigned int)label_exception(v19, (unsigned int)listen->family, &dst_addr) )
    {
      return;
    }
  }
  if ( listen->family == 2 && (*(_BYTE *)(dnsmasq_daemon + 2LL) & 4) != 0 )
  {
    v47 = *(_QWORD *)(dnsmasq_daemon + 904LL);
    if ( v47 )
    {
      v48 = *(_QWORD *)(dnsmasq_daemon + 904LL);
      while ( *(_WORD *)v48 != 2 || *(_DWORD *)(v48 + 4) != s_addr )
      {
        v48 = *(_QWORD *)(v48 + 88);
        if ( !v48 )
          goto LABEL_111;
      }
    }
    else
    {
LABEL_111:
      if ( (*(_BYTE *)(dnsmasq_daemon + 4LL) & 0x80) == 0 )
      {
        enumerate_interfaces(0LL);
        v47 = *(_QWORD *)(dnsmasq_daemon + 904LL);
      }
    }
    if ( v47 )
    {
      while ( *(_WORD *)v47 != 2 || *(_DWORD *)(v47 + 4) != s_addr )
      {
        v47 = *(_QWORD *)(v47 + 88);
        if ( !v47 )
          goto LABEL_114;
      }
      v8 = *(_DWORD *)(v47 + 28);
    }
    else
    {
LABEL_114:
      s_addr = 0;
    }
  }
LABEL_45:
  v21 = dnsmasq_daemon;
  v22 = *(_DWORD *)(dnsmasq_daemon + 1576LL);
  v23 = *(_QWORD *)(dnsmasq_daemon + 864LL);
  *(_QWORD *)(dnsmasq_daemon + 1584LL) = &source_addr;
  *(_DWORD *)(v21 + 1576) = ++v22;
  *(_DWORD *)(v21 + 1580) = v22;
  if ( (unsigned int)extract_request(v5, v12, v23, &type) )
  {
    if ( auth_dns )
      v24 = "auth";
    else
      v24 = "query";
    v25 = querystr(v24, type);
    if ( listen->family == 2 )
    {
      p_sin6_flowinfo = (in6_addr *)&source_addr.in6.sin6_flowinfo;
      v27 = 524424LL;
    }
    else
    {
      p_sin6_flowinfo = &source_addr.in6.sin6_addr;
      v27 = 524552LL;
    }
    log_query(v27, *(_QWORD *)(dnsmasq_daemon + 864LL), p_sin6_flowinfo, v25);
    if ( auth_dns || (v29 = dnsmasq_daemon, (*(_BYTE *)(dnsmasq_daemon + 2LL) & 4) != 0) )
    {
      LODWORD(v28) = 0;
    }
    else
    {
      v28 = *(_QWORD *)(dnsmasq_daemon + 144LL);
      if ( v28 )
      {
        while ( !(unsigned int)in_zone(v28, *(_QWORD *)(v29 + 864), 0LL) )
        {
          v28 = *(_QWORD *)(v28 + 32);
          if ( !v28 )
            goto LABEL_60;
          v29 = dnsmasq_daemon;
        }
        LODWORD(v28) = 1;
        auth_dns = 1;
      }
    }
LABEL_60:
    if ( (unsigned int)detect_loop(*(_QWORD *)(dnsmasq_daemon + 864LL), type) )
      return;
  }
  else
  {
    LODWORD(v28) = 0;
  }
  if ( find_pseudoheader(v5, v12, 0LL, v50, 0LL, 0LL) )
  {
    v30 = v50[0];
    v31 = 1LL;
    v32 = *(unsigned __int16 *)v50[0];
    v33 = v50[0] + 6;
    v50[0] += 4LL;
    LODWORD(v30) = *(unsigned __int8 *)(v30 + 4);
    v50[0] = v33;
    v34 = bswap32(v32) >> 0x10;
    v35 = (unsigned int)v30 >> 7;
    if ( v34 <= *(unsigned __int16 *)(dnsmasq_daemon + 768LL) )
      v36 = v34;
    else
      v36 = *(unsigned __int16 *)(dnsmasq_daemon + 768LL);
  }
  else
  {
    v31 = 0LL;
    v35 = 0;
    v36 = 512LL;
  }
  if ( auth_dns )
  {
    v37 = answer_auth(v5, (char *)v5 + v36, v12, now, &source_addr, (unsigned int)v28, v35, v31);
    if ( v37 )
    {
      if ( (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) != 0 )
        v38 = 1;
      else
        v38 = (*(_DWORD *)(dnsmasq_daemon + 4LL) >> 7) & 1;
      send_from(listen->fd, v38, (char *)v5, v37, &source_addr, &dst_addr, v19);
      ++*(_DWORD *)(dnsmasq_daemon + 880LL);
    }
  }
  else
  {
    if ( (v5->hb4 & 0x20) != 0 )
      v39 = 1;
    else
      v39 = v35;
    v40 = answer_request(v5, (char *)v5 + v36, v12, s_addr, v8, now, v39, v35, v31);
    fd = listen->fd;
    if ( v40 )
    {
      if ( (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) != 0 )
        v42 = 1;
      else
        v42 = (*(_DWORD *)(dnsmasq_daemon + 4LL) >> 7) & 1;
      send_from(fd, v42, (char *)v5, v40, &source_addr, &dst_addr, v19);
      v46 = dnsmasq_daemon;
    }
    else
    {
      v45 = forward_query(fd, &source_addr, &dst_addr, v19, v5, v12, now, 0uLL, v39, v49);
      v46 = dnsmasq_daemon;
      if ( v45 )
      {
        ++*(_DWORD *)(dnsmasq_daemon + 876LL);
        return;
      }
    }
    ++*(_DWORD *)(v46 + 872);
  }
}
