void __fastcall receive_query(listener *listen, time_t now)
{
  __int64 v4; // x2
  int v5; // w0
  dns_header *v6; // x22
  irec *iface; // x0
  int family; // w1
  in_addr_t s_addr; // w26
  in_addr_t v10; // w24
  unsigned int v11; // w25
  size_t v12; // x5
  int fd; // w0
  signed __int64 v14; // x27
  int v15; // w0
  __int64 v16; // x1
  int v17; // w2
  __int64 v18; // x28
  int v19; // w1
  char *v20; // x2
  char *v21; // x4
  unsigned __int64 v22; // x0
  unsigned __int64 v23; // x1
  __int64 v24; // x1
  unsigned int *v25; // x28
  __int64 v26; // x2
  char *msg_control; // x2
  char *v28; // x4
  unsigned __int64 v29; // x0
  unsigned __int64 v30; // x1
  __int64 v31; // x4
  __int64 v32; // x2
  int v33; // w5
  const char *v34; // x0
  __int64 v35; // x3
  unsigned int v36; // w28
  __int64 v37; // x0
  auth_zone *next; // x3
  unsigned __int8 *v39; // x2
  __int64 v40; // x7
  unsigned __int8 *v41; // x3
  unsigned int v42; // w0
  __int64 v43; // x1
  unsigned __int64 v44; // x2
  char *v45; // x1
  __int64 v46; // x3
  unsigned int v47; // w24
  size_t v48; // x3
  size_t v49; // x3
  __int64 v50; // x0
  __int64 v51; // x1
  int v52; // [xsp+8h] [xbp-8h]
  __int64 do_bit; // [xsp+70h] [xbp+60h]
  auth_zone *zone; // [xsp+78h] [xbp+68h]
  unsigned __int16 type; // [xsp+82h] [xbp+72h] BYREF
  int auth_dns; // [xsp+84h] [xbp+74h] BYREF
  unsigned __int8 *pheader; // [xsp+88h] [xbp+78h] BYREF
  msghdr msg; // [xsp+90h] [xbp+80h] BYREF
  all_addr dst_addr; // [xsp+C8h] [xbp+B8h] BYREF
  iovec iov[1]; // [xsp+D8h] [xbp+C8h] BYREF
  mysockaddr source_addr; // [xsp+E8h] [xbp+D8h] BYREF
  union {cmsghdr align;char control6[40];char control[32];} control_u; // [xsp+108h] [xbp+F8h] BYREF
  ifreq ifr; // [xsp+130h] [xbp+120h] BYREF

  v4 = dnsmasq_daemon_0;
  v5 = *dnsmasq_daemon_0;
  auth_dns = 0;
  v6 = *(dns_header **)(dnsmasq_daemon_0 + 848LL);
  if ( (v5 & 0x2000) != 0 )
  {
    iface = listen->iface;
    dst_addr.addr.addr4.s_addr = 0;
    family = listen->family;
    s_addr = 0;
    *(_QWORD *)(dnsmasq_daemon_0 + 944LL) = 0LL;
    v10 = 0;
    v11 = family == 10;
    if ( iface )
    {
      auth_dns = iface->dns_auth;
      v10 = 0;
      if ( family == 2 )
      {
        s_addr = iface->netmask.s_addr;
        v10 = iface->addr.in.sin_addr.s_addr;
        dst_addr.addr.addr4.s_addr = v10;
      }
    }
  }
  else
  {
    v10 = v5 & 0x2000;
    s_addr = 0;
    v11 = 1;
    dst_addr.addr.addr4.s_addr = 0;
    *(_QWORD *)(dnsmasq_daemon_0 + 944LL) = 0LL;
  }
  v12 = *(unsigned __int16 *)(v4 + 768);
  fd = listen->fd;
  msg.msg_name = &source_addr;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  msg.msg_iovlen = 1LL;
  msg.msg_control = &control_u;
  msg.msg_controllen = 40LL;
  msg.msg_flags = 0;
  iov[0].iov_base = v6;
  iov[0].iov_len = v12;
  v14 = recvmsg(fd, &msg, 0);
  if ( v14 <= 11 )
    return;
  LODWORD(do_bit) = msg.msg_flags & 0x20;
  if ( (msg.msg_flags & 0x20) != 0 || ((char)v6->hb3 & 0x80000000) != 0 )
    return;
  memset(
    (void *)(*(_QWORD *)(dnsmasq_daemon_0 + 848LL) + v14),
    0,
    *(unsigned __int16 *)(dnsmasq_daemon_0 + 768LL) - v14);
  v15 = listen->family;
  source_addr.sa.sa_family = v15;
  if ( v15 == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
    v16 = dnsmasq_daemon_0;
    if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4LL) & 0x20000) == 0 )
      goto LABEL_17;
    goto LABEL_33;
  }
  if ( !source_addr.in.sin_port )
    return;
  v16 = dnsmasq_daemon_0;
  v17 = *(_DWORD *)(dnsmasq_daemon_0 + 4LL);
  source_addr.in.sin_addr.s_addr = 0;
  if ( (v17 & 0x20000) == 0 )
    goto LABEL_17;
  v18 = *(_QWORD *)(dnsmasq_daemon_0 + 1568LL);
  if ( v15 != 10 )
  {
LABEL_33:
    v25 = *(unsigned int **)(v16 + 1568);
    if ( !v25 )
      goto LABEL_39;
    while ( 1 )
    {
      v26 = bswap32(-1 << (32 - v25[5]));
      if ( (v25[4] & 2) == 0 )
      {
        if ( (unsigned int)is_same_net(*v25, source_addr.in.sin_addr.s_addr, v26, 0xFFFFFFFFLL, 32LL) )
          goto LABEL_17;
      }
      v25 = (unsigned int *)*((_QWORD *)v25 + 3);
      if ( !v25 )
        goto LABEL_39;
    }
  }
  if ( !v18 )
  {
LABEL_39:
    if ( !warned_2 )
    {
      my_syslog(4LL, "Ignoring query from non-local network");
      warned_2 = 1;
    }
    return;
  }
  while ( (*(_DWORD *)(v18 + 16) & 2) == 0
       || !(unsigned int)is_same_net6(v18, &source_addr.in6.sin6_addr, *(unsigned int *)(v18 + 20)) )
  {
    v18 = *(_QWORD *)(v18 + 24);
    if ( !v18 )
      goto LABEL_39;
  }
LABEL_17:
  if ( !v11 )
  {
    v31 = dnsmasq_daemon_0;
    goto LABEL_56;
  }
  if ( msg.msg_controllen > 0xF )
  {
    v19 = listen->family;
    if ( v19 == 2 )
    {
      msg_control = (char *)msg.msg_control;
      v11 = 0;
      if ( msg.msg_control )
      {
        v28 = (char *)msg.msg_control + msg.msg_controllen;
        if ( *((_QWORD *)msg.msg_control + 1) == 0x800000000LL )
        {
LABEL_43:
          v11 = *((_DWORD *)msg_control + 4);
          dst_addr.addr.addr4.s_addr = *((_DWORD *)msg_control + 5);
          v10 = dst_addr.addr.addr4.s_addr;
        }
        while ( 1 )
        {
          v29 = *(_QWORD *)msg_control;
          v30 = (-*(_QWORD *)msg_control & 7LL) + 0x10;
          if ( *(_QWORD *)msg_control <= 0xFuLL || v30 > v28 - msg_control || v29 > v28 - msg_control - v30 )
            break;
          msg_control += (v29 + 7) & 0xFFFFFFFFFFFFFFF8LL;
          if ( *((_QWORD *)msg_control + 1) == 0x800000000LL )
            goto LABEL_43;
        }
      }
    }
    else if ( v19 == 10 && (v20 = (char *)msg.msg_control) != 0LL )
    {
      v21 = (char *)msg.msg_control + msg.msg_controllen;
      v11 = 0;
      if ( *((_DWORD *)msg.msg_control + 2) == 41 )
        goto LABEL_27;
      while ( 1 )
      {
        v22 = *(_QWORD *)v20;
        v23 = (-*(_QWORD *)v20 & 7LL) + 0x10;
        if ( *(_QWORD *)v20 <= 0xFuLL || v23 > v21 - v20 || v22 > v21 - v20 - v23 )
          break;
        v20 += (v22 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        if ( *((_DWORD *)v20 + 2) == 41 )
        {
LABEL_27:
          if ( *((_DWORD *)v20 + 3) == *(_DWORD *)(dnsmasq_daemon_0 + 1560LL) )
          {
            v24 = *((_QWORD *)v20 + 3);
            *(_QWORD *)&dst_addr.addr.addr4.s_addr = *((_QWORD *)v20 + 2);
            *((_QWORD *)&dst_addr.addr.dnssec + 1) = v24;
            v11 = *((_DWORD *)v20 + 8);
          }
        }
      }
    }
    else
    {
      v11 = 0;
    }
    if ( (unsigned int)indextoname((unsigned int)listen->fd, v11, &ifr) )
    {
      if ( (unsigned int)iface_check((unsigned int)listen->family, &dst_addr, &ifr, &auth_dns) )
        goto LABEL_55;
      if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4LL) & 0x80) == 0 )
        ((void (*)(void))enumerate_interfaces)();
      if ( (unsigned int)loopback_exception((unsigned int)listen->fd, (unsigned int)listen->family, &dst_addr, &ifr)
        || (unsigned int)label_exception(v11, (unsigned int)listen->family, &dst_addr) )
      {
LABEL_55:
        v31 = dnsmasq_daemon_0;
        if ( listen->family == 2 && (*dnsmasq_daemon_0 & 0x40000) != 0 )
        {
          v50 = *(_QWORD *)(dnsmasq_daemon_0 + 904LL);
          if ( v50 )
          {
            v51 = *(_QWORD *)(dnsmasq_daemon_0 + 904LL);
            while ( *(_WORD *)v51 != 2 || *(_DWORD *)(v51 + 4) != v10 )
            {
              v51 = *(_QWORD *)(v51 + 88);
              if ( !v51 )
              {
                if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4LL) & 0x80) != 0 )
                  break;
                goto LABEL_106;
              }
            }
LABEL_97:
            while ( *(_WORD *)v50 != 2 || *(_DWORD *)(v50 + 4) != v10 )
            {
              v50 = *(_QWORD *)(v50 + 88);
              if ( !v50 )
                goto LABEL_104;
            }
            s_addr = *(_DWORD *)(v50 + 28);
          }
          else
          {
            if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4LL) & 0x80) != 0 )
            {
              v31 = dnsmasq_daemon_0;
            }
            else
            {
LABEL_106:
              enumerate_interfaces(0LL);
              v31 = dnsmasq_daemon_0;
              v50 = *(_QWORD *)(dnsmasq_daemon_0 + 904LL);
              if ( v50 )
                goto LABEL_97;
              v31 = dnsmasq_daemon_0;
            }
LABEL_104:
            v10 = 0;
          }
        }
LABEL_56:
        v32 = *(_QWORD *)(v31 + 864);
        v33 = *(_DWORD *)(v31 + 1576) + 1;
        *(_DWORD *)(v31 + 1576) = v33;
        *(_DWORD *)(v31 + 1580) = v33;
        *(_QWORD *)(v31 + 1584) = &source_addr;
        if ( (unsigned int)extract_request(v6, v14, v32, &type) )
        {
          v34 = "query";
          if ( auth_dns )
            v34 = "auth";
          v35 = querystr(v34, type);
          if ( listen->family == 2 )
            log_query(524424LL, *(_QWORD *)(dnsmasq_daemon_0 + 864LL), &source_addr.in6.sin6_flowinfo, v35);
          else
            log_query(524552LL, *(_QWORD *)(dnsmasq_daemon_0 + 864LL), &source_addr.in6.sin6_addr, v35);
          v36 = auth_dns;
          v37 = dnsmasq_daemon_0;
          if ( auth_dns )
          {
            v36 = 0;
          }
          else if ( (*dnsmasq_daemon_0 & 0x40000) == 0 )
          {
            next = *(auth_zone **)(dnsmasq_daemon_0 + 144LL);
            if ( next )
            {
              while ( 1 )
              {
                zone = next;
                v36 = in_zone(next, *(_QWORD *)(v37 + 864), 0LL);
                if ( v36 )
                  break;
                next = zone->next;
                v37 = dnsmasq_daemon_0;
                if ( !next )
                  goto LABEL_68;
              }
              v37 = dnsmasq_daemon_0;
              v36 = 1;
              auth_dns = 1;
            }
          }
LABEL_68:
          if ( (unsigned int)detect_loop(*(_QWORD *)(v37 + 864), type) )
            return;
        }
        else
        {
          v36 = 0;
        }
        if ( find_pseudoheader(v6, v14, 0LL, &pheader, 0LL, 0LL) )
        {
          v39 = pheader;
          v40 = 1LL;
          v41 = pheader + 6;
          LODWORD(v43) = *(unsigned __int16 *)pheader;
          pheader += 4;
          v42 = *(unsigned __int16 *)(dnsmasq_daemon_0 + 768LL);
          LOWORD(v43) = __rev16(v43);
          LODWORD(v39) = *((unsigned __int16 *)v39 + 2);
          pheader = v41;
          v44 = __rev16((unsigned int)v39);
          if ( v42 <= (unsigned __int16)v43 )
            LOWORD(v43) = v42;
          v43 = (unsigned __int16)v43;
          do_bit = (v44 >> 15) & 1;
        }
        else
        {
          v40 = 0LL;
          v43 = 512LL;
        }
        v45 = (char *)v6 + v43;
        if ( auth_dns )
        {
          v49 = answer_auth(v6, v45, v14, now, &source_addr, v36, (unsigned int)do_bit, v40);
          if ( v49 )
          {
            send_from(
              listen->fd,
              (*dnsmasq_daemon_0 & 0x8000002000LL) != 0,
              (char *)v6,
              v49,
              &source_addr,
              &dst_addr,
              v11);
            ++*(_DWORD *)(dnsmasq_daemon_0 + 880LL);
          }
        }
        else
        {
          v46 = v10;
          if ( (v6->hb4 & 0x20) != 0 )
            v47 = 1;
          else
            v47 = do_bit;
          v48 = answer_request(v6, v45, v14, v46, s_addr, now, v47, (unsigned int)do_bit, v40);
          if ( v48 )
          {
            send_from(
              listen->fd,
              (*dnsmasq_daemon_0 & 0x8000002000LL) != 0,
              (char *)v6,
              v48,
              &source_addr,
              &dst_addr,
              v11);
            ++*(_DWORD *)(dnsmasq_daemon_0 + 872LL);
          }
          else if ( forward_query(listen->fd, &source_addr, &dst_addr, v11, v6, v14, now, 0uLL, v47, v52) )
          {
            ++*(_DWORD *)(dnsmasq_daemon_0 + 876LL);
          }
          else
          {
            ++*(_DWORD *)(dnsmasq_daemon_0 + 872LL);
          }
        }
      }
    }
  }
}
