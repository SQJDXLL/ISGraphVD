void __fastcall receive_query(listener *listen, time_t now)
{
  int v4; // $v0
  char *v5; // $s0
  _BOOL4 v6; // $s1
  in_addr_t s_addr; // $s3
  in_addr_t v8; // $s6
  irec *v9; // $v1
  int v10; // $at
  ssize_t v11; // $v0
  ssize_t v12; // $s4
  int family; // $v0
  int v14; // $v1
  int v15; // $s5
  int v16; // $s5
  mysockaddr *v17; // $s6
  int v18; // $v1
  unsigned int iface; // $s7
  char *msg_control; // $a0
  char *v21; // $a1
  char *v22; // $v1
  char *v23; // $v0
  int v24; // $v0
  int v25; // $a1
  _DWORD *v26; // $at
  int v27; // $v0
  const char *v28; // $a0
  int v29; // $v0
  int v30; // $a1
  unsigned int v31; // $s1
  mysockaddr *v32; // $s7
  int v33; // $s6
  int ad_reqd; // $s1
  unsigned int v35; // $v1
  __int16 v36; // $v0
  __int16 v37; // $a0
  unsigned __int16 v38; // $at
  int v39; // $v0
  frec *v40; // $v1
  size_t v41; // $v0
  int v42; // $a1
  mysockaddr *v43; // $a0
  int v44; // $s6
  time_t v45; // $s5
  size_t v46; // $v0
  int fd; // $a0
  mysockaddr *to; // [sp+10h] [-C8h]
  frec *forward; // [sp+1Ch] [-BCh]
  int v50; // [sp+24h] [-B4h]
  in_addr_t v51; // [sp+28h] [-B0h]
  time_t v52; // [sp+2Ch] [-ACh]
  int v53[8]; // [sp+30h] [-A8h] BYREF
  char v54; // [sp+50h] [-88h] BYREF
  struct msghdr v55; // [sp+70h] [-68h] BYREF
  int v56[3]; // [sp+90h] [-48h] BYREF
  int dns_auth; // [sp+9Ch] [-3Ch] BYREF
  all_addr source; // [sp+A0h] [-38h] BYREF
  unsigned __int16 v59; // [sp+B4h] [-24h] BYREF
  mysockaddr v60; // [sp+B8h] [-20h] BYREF

  v4 = dnsmasq_daemon;
  v5 = *(char **)(dnsmasq_daemon + 476);
  dns_auth = 0;
  v6 = 1;
  if ( (*(_BYTE *)(dnsmasq_daemon + 2) & 0x20) != 0 )
    v6 = listen->family == 0xA;
  *(_DWORD *)(dnsmasq_daemon + 528) = 0;
  source.addr.addr4.s_addr = 0;
  s_addr = 0;
  if ( (*(_BYTE *)(v4 + 2) & 0x20) != 0 )
  {
    v9 = listen->iface;
    if ( v9 )
    {
      dns_auth = v9->dns_auth;
      v8 = 0;
      if ( listen->family == 2 )
      {
        s_addr = v9->addr.in.sin_addr.s_addr;
        source.addr.addr4.s_addr = s_addr;
        v8 = v9->netmask.s_addr;
      }
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v8 = 0;
  }
  v56[0] = (int)v5;
  v10 = *(unsigned __int16 *)(v4 + 432);
  v55.msg_controllen = 32;
  v55.msg_control = &v54;
  v56[1] = v10;
  v55.msg_iovlen = 1;
  v55.msg_iov = (iovec *)v56;
  v55.msg_namelen = 28;
  v55.msg_name = &v60;
  v55.msg_flags = 0;
  v11 = recvmsg(listen->fd, &v55, 0);
  if ( v11 < 0xC || (v55.msg_flags & 0x20) != 0 || v5[2] < 0 )
    return;
  v12 = v11;
  memset((void *)(*(_DWORD *)(dnsmasq_daemon + 476) + v11), 0, *(unsigned __int16 *)(dnsmasq_daemon + 432) - v11);
  family = listen->family;
  v60.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !v60.in.sin_port )
      return;
    v51 = v8;
    v52 = now;
    v14 = dnsmasq_daemon;
    if ( (*(_BYTE *)(dnsmasq_daemon + 5) & 2) == 0 )
      goto LABEL_30;
    goto LABEL_25;
  }
  if ( !v60.in.sin_port )
    return;
  v51 = v8;
  v52 = now;
  v60.in.sin_addr.s_addr = 0;
  v14 = dnsmasq_daemon;
  if ( (*(_BYTE *)(dnsmasq_daemon + 5) & 2) != 0 )
  {
    if ( family == 10 )
    {
      v15 = *(_DWORD *)(dnsmasq_daemon + 1136);
      if ( v15 )
      {
        while ( (*(_BYTE *)(v15 + 19) & 2) == 0 || !is_same_net6(v15, &v60.in6.sin6_addr, *(_DWORD *)(v15 + 20)) )
        {
          v15 = *(_DWORD *)(v15 + 24);
          if ( !v15 )
            goto LABEL_51;
        }
        goto LABEL_30;
      }
LABEL_51:
      if ( !receive_query_warned )
      {
        my_syslog(4, "Ignoring query from non-local network");
        receive_query_warned = 1;
      }
      return;
    }
LABEL_25:
    v16 = *(_DWORD *)(v14 + 1136);
    if ( v16 )
    {
      while ( (*(_BYTE *)(v16 + 19) & 2) != 0
           || !is_same_net(*(_DWORD *)v16, v60.in.sin_addr.s_addr, _bswapw(-1 << (32 - *(_DWORD *)(v16 + 20)))) )
      {
        v16 = *(_DWORD *)(v16 + 24);
        if ( !v16 )
          goto LABEL_51;
      }
      goto LABEL_30;
    }
    goto LABEL_51;
  }
LABEL_30:
  if ( v6 )
  {
    v17 = (mysockaddr *)v51;
    if ( v55.msg_controllen < 0xC )
      return;
    v18 = listen->family;
    iface = 0;
    if ( v18 == 2 )
    {
      msg_control = (char *)v55.msg_control;
      if ( !v55.msg_control )
      {
        iface = 0;
LABEL_55:
        if ( !indextoname(listen->fd, iface, v53) )
          return;
        if ( !iface_check(listen->family, &source, v53, &dns_auth) )
        {
          if ( (*(_BYTE *)(dnsmasq_daemon + 7) & 0x80) == 0 )
            enumerate_interfaces(0);
          if ( !loopback_exception(listen->fd, listen->family, &source, v53)
            && !label_exception(iface, listen->family, &source) )
          {
            return;
          }
        }
        if ( listen->family == 2 && (*(_BYTE *)(dnsmasq_daemon + 1) & 4) != 0 )
        {
          v24 = *(_DWORD *)(dnsmasq_daemon + 508);
          if ( v24 )
          {
            v25 = *(_DWORD *)(dnsmasq_daemon + 508);
            while ( *(_WORD *)v25 != 2 || *(_DWORD *)(v25 + 4) != s_addr )
            {
              v25 = *(_DWORD *)(v25 + 80);
              if ( !v25 )
                goto LABEL_69;
            }
          }
          else
          {
LABEL_69:
            if ( (*(_BYTE *)(dnsmasq_daemon + 7) & 0x80) == 0 )
            {
              enumerate_interfaces(0);
              v24 = *(_DWORD *)(dnsmasq_daemon + 508);
            }
          }
          if ( v24 )
          {
            do
            {
              if ( *(_WORD *)v24 == 2 && *(_DWORD *)(v24 + 4) == s_addr )
              {
                v17 = *(mysockaddr **)(v24 + 28);
                goto LABEL_79;
              }
              v24 = *(_DWORD *)(v24 + 80);
            }
            while ( v24 );
            s_addr = 0;
          }
          else
          {
            s_addr = 0;
          }
        }
        goto LABEL_79;
      }
      v21 = (char *)v55.msg_control + v55.msg_controllen;
      iface = 0;
      do
      {
        if ( !*((_DWORD *)msg_control + 1) && *((_DWORD *)msg_control + 2) == 8 )
        {
          s_addr = *((_DWORD *)msg_control + 4);
          source.addr.addr4.s_addr = s_addr;
          iface = *((_DWORD *)msg_control + 3);
        }
        if ( *(_DWORD *)msg_control < 0xCu )
          break;
        msg_control += (*(_DWORD *)msg_control + 3) & 0xFFFFFFFC;
        if ( v21 < msg_control + 0xC )
          break;
      }
      while ( v21 >= &msg_control[(*(_DWORD *)msg_control + 3) & 0xFFFFFFFC] );
    }
    if ( v18 == 10 )
    {
      v22 = (char *)v55.msg_control;
      if ( v55.msg_control )
      {
        v23 = (char *)v55.msg_control + v55.msg_controllen;
        do
        {
          if ( *((_DWORD *)v22 + 1) == 41 && *((_DWORD *)v22 + 2) == *(_DWORD *)(dnsmasq_daemon + 1132) )
          {
            source = *(all_addr *)(v22 + 12);
            iface = *((_DWORD *)v22 + 7);
          }
          if ( *(_DWORD *)v22 < 0xCu )
            break;
          v22 += (*(_DWORD *)v22 + 3) & 0xFFFFFFFC;
          if ( v23 < v22 + 0xC )
            break;
        }
        while ( v23 >= &v22[(*(_DWORD *)v22 + 3) & 0xFFFFFFFC] );
      }
    }
    goto LABEL_55;
  }
  v17 = (mysockaddr *)v51;
  iface = 0;
LABEL_79:
  v26 = (_DWORD *)dnsmasq_daemon;
  *(_DWORD *)(dnsmasq_daemon + 1148) = &v60;
  v27 = v26[285] + 1;
  v26[286] = v27;
  v26[285] = v27;
  if ( !extract_request(v5, v12, v26[121], &v59) )
    goto LABEL_93;
  v28 = "auth";
  if ( !dns_auth )
    v28 = "query";
  v29 = querystr(v28, v59);
  v30 = *(_DWORD *)(dnsmasq_daemon + 484);
  v31 = iface;
  if ( listen->family == 2 )
    log_query(524424, v30, &v60.in6.sin6_flowinfo, v29);
  else
    log_query(524552, v30, &v60.in6.sin6_addr, v29);
  v32 = v17;
  if ( !dns_auth && (*(_BYTE *)(dnsmasq_daemon + 1) & 4) == 0 )
  {
    v33 = *(_DWORD *)(dnsmasq_daemon + 80);
    if ( v33 )
    {
      if ( in_zone(*(_DWORD *)(dnsmasq_daemon + 80), *(_DWORD *)(dnsmasq_daemon + 484), 0) )
      {
LABEL_91:
        dns_auth = 1;
      }
      else
      {
        while ( 1 )
        {
          v33 = *(_DWORD *)(v33 + 16);
          if ( !v33 )
            break;
          if ( in_zone(v33, *(_DWORD *)(dnsmasq_daemon + 484), 0) )
            goto LABEL_91;
        }
      }
    }
  }
  v17 = v32;
  iface = v31;
  if ( !detect_loop(*(_DWORD *)(dnsmasq_daemon + 484), v59) )
  {
LABEL_93:
    ad_reqd = 0;
    if ( find_pseudoheader(v5, v12, 0, v53) )
    {
      v35 = *(unsigned __int8 *)(v53[0] + 4);
      v36 = *(unsigned __int8 *)(v53[0] + 1);
      v37 = *(unsigned __int8 *)v53[0];
      v53[0] += 6;
      v38 = (v37 << 8) | v36;
      if ( *(unsigned __int16 *)(dnsmasq_daemon + 432) < (unsigned int)v38 )
        v38 = *(_WORD *)(dnsmasq_daemon + 432);
      v39 = v38;
      v40 = (frec *)(v35 >> 7);
      ad_reqd = 1;
    }
    else
    {
      v39 = 512;
      v40 = 0;
    }
    if ( dns_auth )
    {
      v41 = answer_auth(v5, &v5[v39], v12, v52);
      if ( v41 )
      {
        v42 = 1;
        if ( (*(_BYTE *)(dnsmasq_daemon + 2) & 0x20) == 0 )
          v42 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
        send_from(listen->fd, v42, v5, v41, &v60, &source, iface);
        ++*(_DWORD *)(dnsmasq_daemon + 496);
      }
    }
    else
    {
      v43 = v17;
      v44 = 1;
      v45 = 1;
      if ( (v5[3] & 0x20) == 0 )
        v45 = (time_t)v40;
      forward = v40;
      to = v43;
      v46 = answer_request(v5, &v5[v39], v12, s_addr);
      fd = listen->fd;
      if ( v46 )
      {
        if ( (*(_BYTE *)(dnsmasq_daemon + 2) & 0x20) == 0 )
          v44 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
        send_from(fd, v44, v5, v46, &v60, &source, iface);
        ++*(_DWORD *)(dnsmasq_daemon + 488);
      }
      else if ( forward_query(fd, &v60, &source, iface, (dns_header *)to, v52, v45, forward, ad_reqd, v50) )
      {
        ++*(_DWORD *)(dnsmasq_daemon + 492);
      }
      else
      {
        ++*(_DWORD *)(dnsmasq_daemon + 488);
      }
    }
  }
}
