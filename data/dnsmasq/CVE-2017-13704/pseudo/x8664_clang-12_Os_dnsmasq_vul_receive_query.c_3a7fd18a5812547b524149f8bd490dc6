void __fastcall receive_query(listener *listen, time_t now)
{
  __int64 v4; // rax
  dns_header *v5; // r15
  bool v6; // r13
  in_addr_t s_addr; // esi
  irec *iface; // rcx
  unsigned int v9; // edx
  ssize_t v10; // rax
  size_t v11; // r12
  int family; // eax
  __int64 v13; // rcx
  int v14; // ebp
  int v15; // eax
  __int64 v16; // r13
  struct cmsghdr *msg_control; // rax
  unsigned int *v18; // rax
  time_t v19; // r13
  __int64 v20; // rax
  in_addr_t v21; // esi
  __int64 v22; // rdx
  __int64 v23; // rax
  int v24; // ecx
  const char *v25; // rdi
  __int64 v26; // rax
  in6_addr *p_sin6_flowinfo; // rdx
  __int64 v28; // rdi
  __int64 i; // rbp
  unsigned int *j; // rbp
  __int64 v31; // r14
  unsigned int v32; // r14d
  __int64 v33; // rbp
  __int64 v34; // rcx
  unsigned __int16 v35; // dx
  unsigned int v36; // eax
  __int64 v37; // rax
  __int64 v38; // rsi
  size_t v39; // rax
  int v40; // esi
  __int64 v41; // r14
  size_t v42; // rax
  int fd; // edi
  int v44; // esi
  int v45; // [rsp-8h] [rbp-120h]
  in_addr_t v46; // [rsp+0h] [rbp-118h]
  int dns_auth; // [rsp+4h] [rbp-114h] BYREF
  unsigned __int16 v48; // [rsp+Ah] [rbp-10Eh] BYREF
  unsigned int v49; // [rsp+Ch] [rbp-10Ch]
  all_addr source; // [rsp+10h] [rbp-108h] BYREF
  unsigned int dst_iface[2]; // [rsp+20h] [rbp-F8h]
  time_t v52; // [rsp+28h] [rbp-F0h]
  mysockaddr to; // [rsp+30h] [rbp-E8h] BYREF
  __int64 v54[5]; // [rsp+50h] [rbp-C8h] BYREF
  struct msghdr message; // [rsp+78h] [rbp-A0h] BYREF
  _QWORD v56[2]; // [rsp+B0h] [rbp-68h] BYREF
  char v57; // [rsp+C0h] [rbp-58h] BYREF

  v4 = dnsmasq_daemon;
  v5 = *(dns_header **)(dnsmasq_daemon + 848LL);
  dns_auth = 0;
  v6 = 1;
  if ( (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) != 0 )
    v6 = listen->family == 10;
  *(_QWORD *)(dnsmasq_daemon + 944LL) = 0LL;
  source.addr.addr4.s_addr = 0;
  s_addr = 0;
  if ( (*(_BYTE *)(v4 + 1) & 0x20) != 0 && (iface = listen->iface) != 0LL )
  {
    dns_auth = iface->dns_auth;
    v9 = 0;
    if ( listen->family == 2 )
    {
      s_addr = iface->addr.in.sin_addr.s_addr;
      source.addr.addr4.s_addr = s_addr;
      v9 = iface->netmask.s_addr;
    }
  }
  else
  {
    v9 = 0;
  }
  v49 = v9;
  v46 = s_addr;
  v56[0] = v5;
  v56[1] = *(unsigned __int16 *)(v4 + 768);
  message.msg_control = &v57;
  message.msg_controllen = 40LL;
  message.msg_flags = 0;
  message.msg_name = &to;
  message.msg_namelen = 28;
  message.msg_iov = (iovec *)v56;
  message.msg_iovlen = 1LL;
  v10 = recvmsg(listen->fd, &message, 0);
  if ( v10 < 12 || (message.msg_flags & 0x20) != 0 || (v5->hb3 & 0x80u) != 0 )
    return;
  v11 = v10;
  family = listen->family;
  to.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !to.in.sin_port )
      return;
    v52 = now;
    v13 = dnsmasq_daemon;
    if ( (*(_BYTE *)(dnsmasq_daemon + 6LL) & 2) != 0 )
      goto LABEL_67;
  }
  else
  {
    if ( !to.in.sin_port )
      return;
    v52 = now;
    to.in.sin_addr.s_addr = 0;
    v13 = dnsmasq_daemon;
    if ( (*(_BYTE *)(dnsmasq_daemon + 6LL) & 2) != 0 )
    {
      if ( family == 10 )
      {
        for ( i = *(_QWORD *)(dnsmasq_daemon + 1568LL); i; i = *(_QWORD *)(i + 24) )
        {
          if ( (*(_BYTE *)(i + 16) & 2) != 0
            && (unsigned int)is_same_net6(i, &to.in6.sin6_addr, *(unsigned int *)(i + 20)) )
          {
            goto LABEL_17;
          }
        }
        goto LABEL_72;
      }
LABEL_67:
      for ( j = *(unsigned int **)(v13 + 1568); j; j = (unsigned int *)*((_QWORD *)j + 3) )
      {
        if ( (j[4] & 2) == 0
          && (unsigned int)is_same_net(*j, to.in.sin_addr.s_addr, _byteswap_ulong(-1 << -*((_BYTE *)j + 20))) )
        {
          goto LABEL_17;
        }
      }
LABEL_72:
      if ( !receive_query_warned )
      {
        my_syslog(4LL, "Ignoring query from non-local network");
        receive_query_warned = 1;
      }
      return;
    }
  }
LABEL_17:
  v14 = 0;
  if ( !v6 )
  {
    *(_QWORD *)dst_iface = 0LL;
    goto LABEL_55;
  }
  if ( message.msg_controllen < 0x10 )
    return;
  v15 = listen->family;
  v16 = 0LL;
  if ( v15 == 2 )
  {
    msg_control = (struct cmsghdr *)message.msg_control;
    v16 = 0LL;
    if ( !message.msg_control )
      goto LABEL_34;
    do
    {
      if ( !msg_control->cmsg_level && msg_control->cmsg_type == 8 )
      {
        v46 = *(_DWORD *)&msg_control->__cmsg_data[4];
        source.addr.addr4.s_addr = v46;
        v16 = *(unsigned int *)msg_control->__cmsg_data;
      }
      msg_control = _cmsg_nxthdr(&message, msg_control);
    }
    while ( msg_control );
    v15 = listen->family;
  }
  if ( v15 == 10 && message.msg_controllen >= 0x10 )
  {
    v18 = (unsigned int *)message.msg_control;
    if ( message.msg_control )
    {
      do
      {
        if ( v18[2] == 41 && v18[3] == *(_DWORD *)(dnsmasq_daemon + 1560LL) )
        {
          source = (all_addr)*((_OWORD *)v18 + 1);
          v16 = v18[8];
        }
        v18 = (unsigned int *)_cmsg_nxthdr(&message, (struct cmsghdr *)v18);
      }
      while ( v18 );
      v14 = 0;
    }
  }
LABEL_34:
  if ( !(unsigned int)indextoname((unsigned int)listen->fd, (unsigned int)v16, v54) )
    return;
  if ( !(unsigned int)iface_check((unsigned int)listen->family, &source, v54, &dns_auth) )
  {
    if ( *(char *)(dnsmasq_daemon + 4LL) >= 0 )
      enumerate_interfaces(0LL);
    if ( !(unsigned int)loopback_exception((unsigned int)listen->fd, (unsigned int)listen->family, &source, v54)
      && !(unsigned int)label_exception((unsigned int)v16, (unsigned int)listen->family, &source) )
    {
      return;
    }
  }
  *(_QWORD *)dst_iface = v16;
  if ( listen->family == 2 )
  {
    v19 = v52;
    if ( (*(_BYTE *)(dnsmasq_daemon + 2LL) & 4) != 0 )
    {
      v20 = *(_QWORD *)(dnsmasq_daemon + 904LL);
      v21 = v46;
      if ( v20 )
      {
        v22 = *(_QWORD *)(dnsmasq_daemon + 904LL);
        do
        {
          if ( *(_WORD *)v22 == 2 && *(_DWORD *)(v22 + 4) == v46 )
            goto LABEL_52;
          v22 = *(_QWORD *)(v22 + 88);
        }
        while ( v22 );
      }
      if ( *(char *)(dnsmasq_daemon + 4LL) >= 0 )
      {
        enumerate_interfaces(0LL);
        v21 = v46;
        v20 = *(_QWORD *)(dnsmasq_daemon + 904LL);
      }
      while ( 1 )
      {
LABEL_52:
        if ( !v20 )
        {
          v46 = 0;
          goto LABEL_56;
        }
        if ( *(_WORD *)v20 == 2 && *(_DWORD *)(v20 + 4) == v21 )
          break;
        v20 = *(_QWORD *)(v20 + 88);
      }
      v49 = *(_DWORD *)(v20 + 28);
    }
    goto LABEL_56;
  }
LABEL_55:
  v19 = v52;
LABEL_56:
  v23 = dnsmasq_daemon;
  v24 = *(_DWORD *)(dnsmasq_daemon + 1576LL) + 1;
  *(_DWORD *)(dnsmasq_daemon + 1576LL) = v24;
  *(_DWORD *)(v23 + 1580) = v24;
  *(_QWORD *)(v23 + 1584) = &to;
  if ( !(unsigned int)extract_request(v5, v11, *(_QWORD *)(v23 + 864), &v48) )
    goto LABEL_84;
  v25 = "auth";
  if ( !dns_auth )
    v25 = "query";
  v26 = querystr(v25, v48);
  if ( listen->family == 2 )
  {
    p_sin6_flowinfo = (in6_addr *)&to.in6.sin6_flowinfo;
    v28 = 524424LL;
  }
  else
  {
    p_sin6_flowinfo = &to.in6.sin6_addr;
    v28 = 524552LL;
  }
  log_query(v28, *(_QWORD *)(dnsmasq_daemon + 864LL), p_sin6_flowinfo, v26);
  v14 = 0;
  if ( !dns_auth && (*(_BYTE *)(dnsmasq_daemon + 2LL) & 4) == 0 )
  {
    v31 = *(_QWORD *)(dnsmasq_daemon + 144LL);
    if ( v31 )
    {
      if ( (unsigned int)in_zone(*(_QWORD *)(dnsmasq_daemon + 144LL), *(_QWORD *)(dnsmasq_daemon + 864LL), 0LL) )
      {
LABEL_82:
        dns_auth = 1;
        v14 = 1;
      }
      else
      {
        v14 = 0;
        while ( 1 )
        {
          v31 = *(_QWORD *)(v31 + 32);
          if ( !v31 )
            break;
          if ( (unsigned int)in_zone(v31, *(_QWORD *)(dnsmasq_daemon + 864LL), 0LL) )
            goto LABEL_82;
        }
      }
    }
  }
  if ( !(unsigned int)detect_loop(*(_QWORD *)(dnsmasq_daemon + 864LL), v48) )
  {
LABEL_84:
    v32 = v14;
    v33 = 0LL;
    if ( find_pseudoheader(v5, v11, 0LL, v54, 0LL, 0LL) )
    {
      v34 = v54[0];
      v35 = __ROL2__(*(_WORD *)v54[0], 8);
      v54[0] += 4LL;
      v36 = *(unsigned __int8 *)v54[0];
      v54[0] = v34 + 6;
      v37 = v36 >> 7;
      if ( v35 > (unsigned __int16)*(_DWORD *)(dnsmasq_daemon + 768LL) )
        v35 = *(_DWORD *)(dnsmasq_daemon + 768LL);
      v38 = v35;
      v33 = 1LL;
    }
    else
    {
      v38 = 512LL;
      v37 = 0LL;
    }
    if ( dns_auth )
    {
      v39 = answer_auth(v5, (char *)v5 + v38, v11, v19, &to, v32, v37, v33);
      if ( v39 )
      {
        v40 = 1;
        if ( (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) == 0 )
          v40 = (*(_DWORD *)(dnsmasq_daemon + 4LL) >> 7) & 1;
        send_from(listen->fd, v40, (char *)v5, v39, &to, &source, dst_iface[0]);
        ++*(_DWORD *)(dnsmasq_daemon + 880LL);
      }
    }
    else
    {
      v41 = 1LL;
      if ( (v5->hb4 & 0x20) == 0 )
        v41 = (unsigned int)v37;
      v42 = answer_request(v5, (char *)v5 + v38, v11, v46, v49, v19, v41, v37, v33);
      fd = listen->fd;
      if ( v42 )
      {
        v44 = 1;
        if ( (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) == 0 )
          v44 = (*(_DWORD *)(dnsmasq_daemon + 4LL) >> 7) & 1;
        send_from(fd, v44, (char *)v5, v42, &to, &source, dst_iface[0]);
        ++*(_DWORD *)(dnsmasq_daemon + 872LL);
      }
      else if ( forward_query(fd, &to, &source, dst_iface[0], v5, v11, v19, 0LL, v41, v45) )
      {
        ++*(_DWORD *)(dnsmasq_daemon + 876LL);
      }
      else
      {
        ++*(_DWORD *)(dnsmasq_daemon + 872LL);
      }
    }
  }
}
