void __cdecl receive_query(listener *listen, dns_header *now)
{
  int v2; // eax
  listener *v3; // esi
  bool v4; // cl
  all_addr *v5; // edi
  in_addr_t s_addr; // ebp
  int v7; // ebx
  irec *iface; // edx
  signed int v9; // esi
  int family; // eax
  mysockaddr *v11; // edi
  int v12; // eax
  struct cmsghdr *msg_control; // eax
  char *v14; // eax
  __int64 v15; // xmm0_8
  mysockaddr *v16; // eax
  all_addr *v17; // edi
  int v18; // ebx
  int v19; // eax
  int v20; // edx
  int v21; // edi
  unsigned int v22; // ebx
  _DWORD *v23; // eax
  int v24; // ecx
  const char *v25; // ecx
  int v26; // eax
  int v27; // ecx
  int v28; // eax
  int v29; // edi
  all_addr *v30; // ecx
  int v31; // edi
  __int16 v32; // dx
  unsigned int v33; // ecx
  int v34; // edx
  time_t v35; // ecx
  int v36; // eax
  size_t v37; // eax
  int v38; // edx
  time_t v39; // ebx
  size_t v40; // eax
  int v41; // esi
  int v42; // eax
  bool v43; // zf
  frec *v44; // [esp-4h] [ebp-D0h]
  int v45; // [esp+0h] [ebp-CCh]
  int v46; // [esp+4h] [ebp-C8h]
  all_addr *packet; // [esp+8h] [ebp-C4h]
  bool udpaddr; // [esp+Ch] [ebp-C0h]
  mysockaddr *udpaddra; // [esp+Ch] [ebp-C0h]
  mysockaddr *udpaddrb; // [esp+Ch] [ebp-C0h]
  int dns_auth; // [esp+10h] [ebp-BCh] BYREF
  unsigned __int16 v52; // [esp+16h] [ebp-B6h] BYREF
  int v53; // [esp+18h] [ebp-B4h]
  int v54; // [esp+1Ch] [ebp-B0h]
  all_addr source; // [esp+20h] [ebp-ACh] BYREF
  mysockaddr to; // [esp+30h] [ebp-9Ch] BYREF
  struct msghdr message; // [esp+50h] [ebp-7Ch] BYREF
  int v58[8]; // [esp+70h] [ebp-5Ch] BYREF
  _DWORD v59[2]; // [esp+90h] [ebp-3Ch] BYREF
  char v60; // [esp+98h] [ebp-34h] BYREF

  v2 = dnsmasq_daemon;
  v3 = listen;
  v4 = 1;
  v5 = *(all_addr **)(dnsmasq_daemon + 476);
  dns_auth = 0;
  if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) != 0 )
    v4 = listen->family == 10;
  udpaddr = v4;
  s_addr = 0;
  v7 = 0;
  *(_DWORD *)(dnsmasq_daemon + 528) = 0;
  source.addr.addr4.s_addr = 0;
  if ( (*(_BYTE *)(v2 + 1) & 0x20) != 0 )
  {
    iface = listen->iface;
    s_addr = 0;
    v7 = 0;
    if ( iface )
    {
      s_addr = 0;
      v7 = 0;
      dns_auth = iface->dns_auth;
      v3 = listen;
      if ( listen->family == 2 )
      {
        s_addr = iface->addr.in.sin_addr.s_addr;
        source.addr.addr4.s_addr = s_addr;
        v7 = iface->netmask.s_addr;
      }
    }
  }
  v53 = v7;
  v59[0] = v5;
  v59[1] = *(unsigned __int16 *)(v2 + 432);
  message.msg_control = &v60;
  message.msg_controllen = 32;
  message.msg_flags = 0;
  message.msg_name = &to;
  message.msg_namelen = 28;
  message.msg_iov = (iovec *)v59;
  message.msg_iovlen = 1;
  v9 = recvmsg(v3->fd, &message, 0);
  if ( v9 < 12 || (message.msg_flags & 0x20) != 0 || (v5->addr.addr6.__in6_u.__u6_addr8[2] & 0x80u) != 0 )
    return;
  family = listen->family;
  to.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !to.in.sin_port )
      return;
  }
  else
  {
    if ( !to.in.sin_port )
      return;
    to.in.sin_addr.s_addr = 0;
  }
  packet = v5;
  if ( (*(_BYTE *)(dnsmasq_daemon + 6) & 2) != 0 )
  {
    v21 = *(_DWORD *)(dnsmasq_daemon + 1136);
    if ( family == 10 )
    {
      while ( v21 )
      {
        if ( (*(_BYTE *)(v21 + 16) & 2) != 0 && is_same_net6(v21, &to.in6.sin6_addr, *(_DWORD *)(v21 + 20)) )
          goto LABEL_16;
        v21 = *(_DWORD *)(v21 + 24);
      }
    }
    else
    {
      while ( v21 )
      {
        if ( (*(_BYTE *)(v21 + 16) & 2) == 0
          && is_same_net(*(_DWORD *)v21, to.in.sin_addr.s_addr, _byteswap_ulong(-1 << -*(_BYTE *)(v21 + 20))) )
        {
          goto LABEL_16;
        }
        v21 = *(_DWORD *)(v21 + 24);
      }
    }
    if ( !receive_query_warned )
    {
      my_syslog(4, "Ignoring query from non-local network");
      receive_query_warned = 1;
    }
    return;
  }
LABEL_16:
  v54 = 0;
  if ( udpaddr )
  {
    if ( message.msg_controllen < 0xC )
      return;
    v11 = 0;
    v12 = listen->family;
    if ( v12 == 2 )
    {
      msg_control = (struct cmsghdr *)message.msg_control;
      if ( !message.msg_control )
      {
        v16 = 0;
LABEL_34:
        udpaddra = v16;
        if ( !indextoname(listen->fd, v16, v58) )
          return;
        if ( !iface_check(listen->family, &source, v58, &dns_auth) )
        {
          if ( *(char *)(dnsmasq_daemon + 4) >= 0 )
            enumerate_interfaces(0);
          if ( !loopback_exception(listen->fd, listen->family, &source, v58)
            && !label_exception(udpaddra, listen->family, &source) )
          {
            return;
          }
        }
        if ( listen->family == 2 )
        {
          v17 = packet;
          v18 = v53;
          if ( (*(_BYTE *)(dnsmasq_daemon + 2) & 4) != 0 )
          {
            v19 = *(_DWORD *)(dnsmasq_daemon + 508);
            if ( v19 )
            {
              v20 = *(_DWORD *)(dnsmasq_daemon + 508);
              do
              {
                if ( *(_WORD *)v20 == 2 && *(_DWORD *)(v20 + 4) == s_addr )
                  goto LABEL_63;
                v20 = *(_DWORD *)(v20 + 80);
              }
              while ( v20 );
            }
            if ( *(char *)(dnsmasq_daemon + 4) >= 0 )
            {
              enumerate_interfaces(0);
              v19 = *(_DWORD *)(dnsmasq_daemon + 508);
            }
            while ( 1 )
            {
LABEL_63:
              if ( !v19 )
              {
                s_addr = 0;
                goto LABEL_67;
              }
              if ( *(_WORD *)v19 == 2 && *(_DWORD *)(v19 + 4) == s_addr )
                break;
              v19 = *(_DWORD *)(v19 + 80);
            }
            v18 = *(_DWORD *)(v19 + 28);
          }
        }
        else
        {
          v17 = packet;
          v18 = v53;
        }
LABEL_67:
        v53 = v18;
        v22 = (unsigned int)udpaddra;
        goto LABEL_68;
      }
      v11 = 0;
      do
      {
        if ( !msg_control->cmsg_level && msg_control->cmsg_type == 8 )
        {
          s_addr = *(_DWORD *)&msg_control->__cmsg_data[4];
          source.addr.addr4.s_addr = s_addr;
          v11 = *(mysockaddr **)msg_control->__cmsg_data;
        }
        msg_control = _cmsg_nxthdr(&message, msg_control);
      }
      while ( msg_control );
      v12 = listen->family;
    }
    if ( v12 == 10 )
    {
      v14 = (char *)message.msg_control;
      if ( message.msg_control )
      {
        if ( message.msg_controllen >= 0xC )
        {
          do
          {
            if ( *((_DWORD *)v14 + 1) == 41 && *((_DWORD *)v14 + 2) == *(_DWORD *)(dnsmasq_daemon + 1132) )
            {
              v15 = *(_QWORD *)(v14 + 12);
              *((_QWORD *)&source.addr.dnssec + 1) = *(_QWORD *)(v14 + 20);
              *(_QWORD *)&source.addr.addr4.s_addr = v15;
              v11 = (mysockaddr *)*((_DWORD *)v14 + 7);
            }
            v14 = (char *)_cmsg_nxthdr(&message, (struct cmsghdr *)v14);
          }
          while ( v14 );
        }
      }
    }
    v16 = v11;
    goto LABEL_34;
  }
  v17 = packet;
  v22 = 0;
LABEL_68:
  v23 = (_DWORD *)dnsmasq_daemon;
  v24 = *(_DWORD *)(dnsmasq_daemon + 1140) + 1;
  *(_DWORD *)(dnsmasq_daemon + 1140) = v24;
  v23[286] = v24;
  v23[287] = &to;
  if ( !extract_request(v17, v9, v23[121], &v52) )
    goto LABEL_84;
  v25 = "auth";
  if ( !dns_auth )
    v25 = "query";
  v26 = querystr(v25, v52);
  v27 = *(_DWORD *)(dnsmasq_daemon + 484);
  if ( listen->family == 2 )
    log_query(524424, v27, &to.in6.sin6_flowinfo, v26);
  else
    log_query(524552, v27, &to.in6.sin6_addr, v26);
  v54 = 0;
  if ( !dns_auth )
  {
    v28 = dnsmasq_daemon;
    if ( (*(_BYTE *)(dnsmasq_daemon + 2) & 4) == 0 )
    {
      v29 = *(_DWORD *)(dnsmasq_daemon + 80);
      if ( v29 )
      {
        while ( !in_zone(v29, *(_DWORD *)(v28 + 484), 0) )
        {
          v29 = *(_DWORD *)(v29 + 16);
          if ( !v29 )
            goto LABEL_82;
          v28 = dnsmasq_daemon;
        }
        dns_auth = 1;
        v54 = 1;
      }
LABEL_82:
      v17 = packet;
    }
  }
  if ( !detect_loop(*(_DWORD *)(dnsmasq_daemon + 484), v52) )
  {
LABEL_84:
    v30 = v17;
    v31 = 0;
    if ( find_pseudoheader(v30, v9, 0, v58, 0, 0) )
    {
      v32 = *(_WORD *)v58[0];
      v33 = *(unsigned __int8 *)(v58[0] + 4);
      v58[0] += 6;
      LOWORD(v34) = __ROL2__(v32, 8);
      v35 = v33 >> 7;
      if ( (unsigned __int16)v34 > (unsigned __int16)*(_DWORD *)(dnsmasq_daemon + 432) )
        v34 = *(_DWORD *)(dnsmasq_daemon + 432);
      v36 = (unsigned __int16)v34;
      v31 = 1;
    }
    else
    {
      v36 = 512;
      v35 = 0;
    }
    if ( !dns_auth )
    {
      udpaddrb = (mysockaddr *)v22;
      v39 = 1;
      if ( (packet->addr.addr6.__in6_u.__u6_addr8[3] & 0x20) == 0 )
        v39 = v35;
      v40 = answer_request(packet, (char *)packet + v36, v9, s_addr, v53, now, v39, v35, v31);
      if ( v40 )
      {
        v41 = 1;
        if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
          v41 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
        send_from(listen->fd, v41, (char *)packet, v40, &to, &source, (unsigned int)udpaddrb);
        v42 = dnsmasq_daemon;
      }
      else
      {
        v43 = forward_query((int)&source, udpaddrb, packet, v9, now, 0, v39, v44, v45, v46) == 0;
        v42 = dnsmasq_daemon;
        if ( !v43 )
        {
          ++*(_DWORD *)(dnsmasq_daemon + 492);
          return;
        }
      }
      ++*(_DWORD *)(v42 + 488);
      return;
    }
    v37 = answer_auth(packet, (char *)packet + v36, v9, now, &to, v54, v35, v31);
    if ( v37 )
    {
      if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) != 0 )
        v38 = 1;
      else
        v38 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
      send_from(listen->fd, v38, (char *)packet, v37, &to, &source, v22);
      ++*(_DWORD *)(dnsmasq_daemon + 496);
    }
  }
}
