void __fastcall receive_query(listener *listen, time_t now)
{
  __int64 v4; // x2
  int v5; // w0
  dns_header *v6; // x21
  irec *iface; // x0
  int family; // w1
  in_addr_t s_addr; // w26
  in_addr_t v10; // w24
  unsigned int v11; // w25
  size_t v12; // x5
  int fd; // w0
  signed __int64 v14; // x27
  int v15; // w0
  __int64 v16; // x1
  int v17; // w2
  __int64 v18; // x28
  in6_addr *p_sin6_addr; // x1
  int v20; // w0
  int v21; // w1
  char *v22; // x2
  char *v23; // x4
  unsigned __int64 v24; // x0
  unsigned __int64 v25; // x1
  __int64 v26; // x1
  unsigned int *v27; // x28
  __int64 v28; // x2
  char *msg_control; // x2
  char *v30; // x4
  unsigned __int64 v31; // x0
  unsigned __int64 v32; // x1
  __int64 v33; // x4
  __int64 v34; // x2
  int v35; // w5
  const char *v36; // x0
  __int64 v37; // x3
  unsigned int v38; // w28
  __int64 v39; // x0
  auth_zone *next; // x3
  __int64 v41; // x7
  unsigned __int8 *v42; // x2
  unsigned __int8 *v43; // x3
  unsigned int v44; // w0
  __int64 v45; // x1
  unsigned __int64 v46; // x2
  char *v47; // x1
  __int64 v48; // x3
  unsigned int v49; // w24
  size_t v50; // x3
  size_t v51; // x3
  __int64 v52; // x0
  __int64 v53; // x1
  int v54; // [xsp+8h] [xbp-8h]
  __int64 do_bit; // [xsp+78h] [xbp+68h]
  auth_zone *zonea; // [xsp+80h] [xbp+70h]
  auth_zone *zone; // [xsp+80h] [xbp+70h]
  unsigned __int16 type; // [xsp+92h] [xbp+82h] BYREF
  int auth_dns; // [xsp+94h] [xbp+84h] BYREF
  unsigned __int8 *pheader; // [xsp+98h] [xbp+88h] BYREF
  msghdr msg; // [xsp+A0h] [xbp+90h] BYREF
  all_addr dst_addr; // [xsp+D8h] [xbp+C8h] BYREF
  iovec iov[1]; // [xsp+E8h] [xbp+D8h] BYREF
  mysockaddr source_addr; // [xsp+F8h] [xbp+E8h] BYREF
  union {cmsghdr align;char control6[40];char control[32];} control_u; // [xsp+118h] [xbp+108h] BYREF
  ifreq ifr; // [xsp+140h] [xbp+130h] BYREF

  v4 = dnsmasq_daemon_0;
  v5 = *dnsmasq_daemon_0;
  auth_dns = 0;
  v6 = *(dns_header **)(dnsmasq_daemon_0 + 848LL);
  if ( (v5 & 0x2000) != 0 )
  {
    iface = listen->iface;
    dst_addr.addr.addr4.s_addr = 0;
    family = listen->family;
    s_addr = 0;
    *(_QWORD *)(dnsmasq_daemon_0 + 944LL) = 0LL;
    v10 = 0;
    v11 = family == 10;
    if ( iface )
    {
      auth_dns = iface->dns_auth;
      if ( family == 2 )
      {
        s_addr = iface->netmask.s_addr;
        v10 = iface->addr.in.sin_addr.s_addr;
        dst_addr.addr.addr4.s_addr = v10;
      }
    }
  }
  else
  {
    v10 = v5 & 0x2000;
    s_addr = 0;
    v11 = 1;
    dst_addr.addr.addr4.s_addr = 0;
    *(_QWORD *)(dnsmasq_daemon_0 + 944LL) = 0LL;
  }
  v12 = *(unsigned __int16 *)(v4 + 768);
  fd = listen->fd;
  msg.msg_name = &source_addr;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  msg.msg_iovlen = 1LL;
  msg.msg_control = &control_u;
  msg.msg_controllen = 40LL;
  msg.msg_flags = 0;
  iov[0].iov_base = v6;
  iov[0].iov_len = v12;
  v14 = recvmsg(fd, &msg, 0);
  if ( v14 <= 11 )
    return;
  LODWORD(do_bit) = msg.msg_flags & 0x20;
  if ( (msg.msg_flags & 0x20) != 0 || ((char)v6->hb3 & 0x80000000) != 0 )
    return;
  memset(
    (void *)(*(_QWORD *)(dnsmasq_daemon_0 + 848LL) + v14),
    0,
    *(unsigned __int16 *)(dnsmasq_daemon_0 + 768LL) - v14);
  v15 = listen->family;
  source_addr.sa.sa_family = v15;
  if ( v15 == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
    v16 = dnsmasq_daemon_0;
    if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4LL) & 0x20000) == 0 )
      goto LABEL_17;
    goto LABEL_33;
  }
  if ( !source_addr.in.sin_port )
    return;
  v16 = dnsmasq_daemon_0;
  v17 = *(_DWORD *)(dnsmasq_daemon_0 + 4LL);
  source_addr.in.sin_addr.s_addr = 0;
  if ( (v17 & 0x20000) == 0 )
    goto LABEL_17;
  v18 = *(_QWORD *)(dnsmasq_daemon_0 + 1568LL);
  if ( v15 != 10 )
  {
LABEL_33:
    v27 = *(unsigned int **)(v16 + 1568);
    if ( !v27 )
      goto LABEL_86;
    while ( 1 )
    {
      v28 = bswap32(-1 << (32 - v27[5]));
      if ( (v27[4] & 2) == 0 )
      {
        if ( (unsigned int)is_same_net(*v27, source_addr.in.sin_addr.s_addr, v28, 0xFFFFFFFFLL, 32LL) )
          goto LABEL_17;
      }
      v27 = (unsigned int *)*((_QWORD *)v27 + 3);
      if ( !v27 )
        goto LABEL_86;
    }
  }
  p_sin6_addr = &source_addr.in6.sin6_addr;
  if ( !v18 )
  {
LABEL_86:
    if ( !warned_2 )
    {
      my_syslog(4LL, "Ignoring query from non-local network");
      warned_2 = 1;
    }
    return;
  }
  while ( 1 )
  {
    if ( (*(_DWORD *)(v18 + 16) & 2) != 0 )
    {
      zonea = (auth_zone *)p_sin6_addr;
      v20 = is_same_net6(v18);
      p_sin6_addr = (in6_addr *)zonea;
      if ( v20 )
        break;
    }
    v18 = *(_QWORD *)(v18 + 24);
    if ( !v18 )
      goto LABEL_86;
  }
LABEL_17:
  if ( !v11 )
  {
    v33 = dnsmasq_daemon_0;
    goto LABEL_54;
  }
  if ( msg.msg_controllen > 0xF )
  {
    v21 = listen->family;
    if ( v21 == 2 )
    {
      msg_control = (char *)msg.msg_control;
      v11 = 0;
      if ( msg.msg_control )
      {
        v30 = (char *)msg.msg_control + msg.msg_controllen;
        if ( *((_QWORD *)msg.msg_control + 1) == 0x800000000LL )
        {
LABEL_41:
          v11 = *((_DWORD *)msg_control + 4);
          dst_addr.addr.addr4.s_addr = *((_DWORD *)msg_control + 5);
          v10 = dst_addr.addr.addr4.s_addr;
        }
        while ( 1 )
        {
          v31 = *(_QWORD *)msg_control;
          v32 = (-*(_QWORD *)msg_control & 7LL) + 0x10;
          if ( *(_QWORD *)msg_control <= 0xFuLL || v32 > v30 - msg_control || v31 > v30 - msg_control - v32 )
            break;
          msg_control += (v31 + 7) & 0xFFFFFFFFFFFFFFF8LL;
          if ( *((_QWORD *)msg_control + 1) == 0x800000000LL )
            goto LABEL_41;
        }
      }
    }
    else if ( v21 == 10 )
    {
      v22 = (char *)msg.msg_control;
      v11 = 0;
      if ( msg.msg_control )
      {
        v23 = (char *)msg.msg_control + msg.msg_controllen;
        if ( *((_DWORD *)msg.msg_control + 2) == 41 )
          goto LABEL_27;
        while ( 1 )
        {
          v24 = *(_QWORD *)v22;
          v25 = (-*(_QWORD *)v22 & 7LL) + 0x10;
          if ( *(_QWORD *)v22 <= 0xFuLL || v25 > v23 - v22 || v24 > v23 - v22 - v25 )
            break;
          v22 += (v24 + 7) & 0xFFFFFFFFFFFFFFF8LL;
          if ( *((_DWORD *)v22 + 2) == 41 )
          {
LABEL_27:
            if ( *((_DWORD *)v22 + 3) == *(_DWORD *)(dnsmasq_daemon_0 + 1560LL) )
            {
              v26 = *((_QWORD *)v22 + 3);
              *(_QWORD *)&dst_addr.addr.addr4.s_addr = *((_QWORD *)v22 + 2);
              *((_QWORD *)&dst_addr.addr.dnssec + 1) = v26;
              v11 = *((_DWORD *)v22 + 8);
            }
          }
        }
      }
    }
    else
    {
      v11 = 0;
    }
    if ( (unsigned int)indextoname((unsigned int)listen->fd, v11, &ifr) )
    {
      if ( (unsigned int)iface_check((unsigned int)listen->family, &dst_addr, &ifr, &auth_dns) )
        goto LABEL_53;
      if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4LL) & 0x80) == 0 )
        ((void (*)(void))enumerate_interfaces)();
      if ( (unsigned int)loopback_exception((unsigned int)listen->fd, (unsigned int)listen->family, &dst_addr, &ifr)
        || (unsigned int)label_exception(v11, (unsigned int)listen->family, &dst_addr) )
      {
LABEL_53:
        v33 = dnsmasq_daemon_0;
        if ( listen->family == 2 && (*dnsmasq_daemon_0 & 0x40000) != 0 )
        {
          v52 = *(_QWORD *)(dnsmasq_daemon_0 + 904LL);
          if ( v52 )
          {
            v53 = *(_QWORD *)(dnsmasq_daemon_0 + 904LL);
            while ( *(_WORD *)v53 != 2 || *(_DWORD *)(v53 + 4) != v10 )
            {
              v53 = *(_QWORD *)(v53 + 88);
              if ( !v53 )
              {
                if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4LL) & 0x80) != 0 )
                  break;
                goto LABEL_103;
              }
            }
LABEL_96:
            while ( *(_WORD *)v52 != 2 || *(_DWORD *)(v52 + 4) != v10 )
            {
              v52 = *(_QWORD *)(v52 + 88);
              if ( !v52 )
                goto LABEL_104;
            }
            s_addr = *(_DWORD *)(v52 + 28);
          }
          else if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4LL) & 0x80) != 0 )
          {
            v10 = 0;
          }
          else
          {
LABEL_103:
            enumerate_interfaces(0LL);
            v33 = dnsmasq_daemon_0;
            v52 = *(_QWORD *)(dnsmasq_daemon_0 + 904LL);
            if ( v52 )
              goto LABEL_96;
LABEL_104:
            v10 = 0;
          }
        }
LABEL_54:
        v34 = *(_QWORD *)(v33 + 864);
        v35 = *(_DWORD *)(v33 + 1576) + 1;
        *(_DWORD *)(v33 + 1576) = v35;
        *(_DWORD *)(v33 + 1580) = v35;
        *(_QWORD *)(v33 + 1584) = &source_addr;
        if ( (unsigned int)extract_request(v6, v14, v34, &type) )
        {
          v36 = "auth";
          if ( !auth_dns )
            v36 = "query";
          v37 = querystr(v36, type);
          if ( listen->family == 2 )
            log_query(524424LL, *(_QWORD *)(dnsmasq_daemon_0 + 864LL), &source_addr.in6.sin6_flowinfo, v37);
          else
            log_query(524552LL, *(_QWORD *)(dnsmasq_daemon_0 + 864LL), &source_addr.in6.sin6_addr, v37);
          v38 = auth_dns;
          v39 = dnsmasq_daemon_0;
          if ( auth_dns )
          {
            v38 = 0;
          }
          else if ( (*dnsmasq_daemon_0 & 0x40000) == 0 )
          {
            next = *(auth_zone **)(dnsmasq_daemon_0 + 144LL);
            if ( next )
            {
              while ( 1 )
              {
                zone = next;
                v38 = in_zone(next, *(_QWORD *)(v39 + 864), 0LL);
                if ( v38 )
                  break;
                next = zone->next;
                v39 = dnsmasq_daemon_0;
                if ( !next )
                  goto LABEL_66;
              }
              v38 = 1;
              auth_dns = 1;
              v39 = dnsmasq_daemon_0;
            }
          }
LABEL_66:
          if ( (unsigned int)detect_loop(*(_QWORD *)(v39 + 864), type) )
            return;
        }
        else
        {
          v38 = 0;
        }
        if ( find_pseudoheader(v6, v14, 0LL, &pheader, 0LL, 0LL) )
        {
          v41 = 1LL;
          v42 = pheader;
          v43 = pheader + 6;
          LODWORD(v45) = *(unsigned __int16 *)pheader;
          pheader += 4;
          v44 = *(unsigned __int16 *)(dnsmasq_daemon_0 + 768LL);
          LOWORD(v45) = __rev16(v45);
          LODWORD(v42) = *((unsigned __int16 *)v42 + 2);
          pheader = v43;
          v46 = __rev16((unsigned int)v42);
          if ( v44 <= (unsigned __int16)v45 )
            LOWORD(v45) = v44;
          v45 = (unsigned __int16)v45;
          do_bit = (v46 >> 15) & 1;
        }
        else
        {
          v41 = 0LL;
          v45 = 512LL;
        }
        v47 = (char *)v6 + v45;
        if ( auth_dns )
        {
          v51 = answer_auth(v6, v47, v14, now, &source_addr, v38, (unsigned int)do_bit, v41);
          if ( v51 )
          {
            send_from(
              listen->fd,
              (*dnsmasq_daemon_0 & 0x8000002000LL) != 0,
              (char *)v6,
              v51,
              &source_addr,
              &dst_addr,
              v11);
            ++*(_DWORD *)(dnsmasq_daemon_0 + 880LL);
          }
        }
        else
        {
          v48 = v10;
          if ( (v6->hb4 & 0x20) != 0 )
            v49 = 1;
          else
            v49 = do_bit;
          v50 = answer_request(v6, v47, v14, v48, s_addr, now, v49);
          if ( v50 )
          {
            send_from(
              listen->fd,
              (*dnsmasq_daemon_0 & 0x8000002000LL) != 0,
              (char *)v6,
              v50,
              &source_addr,
              &dst_addr,
              v11);
            ++*(_DWORD *)(dnsmasq_daemon_0 + 872LL);
          }
          else if ( forward_query(listen->fd, &source_addr, &dst_addr, v11, v6, v14, now, 0uLL, v49, v54) )
          {
            ++*(_DWORD *)(dnsmasq_daemon_0 + 876LL);
          }
          else
          {
            ++*(_DWORD *)(dnsmasq_daemon_0 + 872LL);
          }
        }
      }
    }
  }
}
