void __cdecl receive_query(listener *listen, time_t now)
{
  const signed __int32 *v2; // eax
  int family; // ecx
  irec *iface; // edx
  int s_addr; // edi
  size_t v6; // eax
  int v7; // edi
  int v8; // ecx
  int v9; // edx
  const signed __int32 *v10; // eax
  signed __int32 v11; // esi
  int i; // esi
  unsigned __int32 v13; // eax
  struct cmsghdr *j; // eax
  struct cmsghdr *msg_control; // eax
  const signed __int32 **v16; // edx
  signed __int32 k; // eax
  signed __int32 m; // eax
  const signed __int32 *v19; // eax
  signed __int32 v20; // ecx
  int v21; // eax
  int v22; // ecx
  const char *v23; // eax
  int v24; // eax
  int v25; // edx
  int v26; // eax
  int v27; // esi
  signed __int32 ii; // esi
  __int16 v29; // dx
  __int16 v30; // ax
  char v31; // t0
  signed __int32 v32; // eax
  char v33; // t1
  int v34; // edx
  char *v35; // eax
  size_t v36; // edx
  int v37; // eax
  size_t v38; // esi
  size_t v39; // edx
  int v40; // eax
  int v41; // [esp+0h] [ebp-D8h]
  int v42; // [esp+4h] [ebp-D4h]
  int do_bit; // [esp+8h] [ebp-D0h]
  int n; // [esp+Ch] [ebp-CCh]
  in_addr dst_addr_4; // [esp+10h] [ebp-C8h]
  int if_index; // [esp+14h] [ebp-C4h]
  mysockaddr *header; // [esp+18h] [ebp-C0h]
  unsigned __int16 type; // [esp+22h] [ebp-B6h] BYREF
  unsigned __int8 *t_cp; // [esp+24h] [ebp-B4h] BYREF
  int auth_dns; // [esp+28h] [ebp-B0h] BYREF
  msghdr msg; // [esp+2Ch] [ebp-ACh] BYREF
  iovec iov[1]; // [esp+48h] [ebp-90h] BYREF
  all_addr dst_addr; // [esp+50h] [ebp-88h] BYREF
  mysockaddr source_addr; // [esp+60h] [ebp-78h] BYREF
  union {cmsghdr align;char control6[32];char control[24];} control_u; // [esp+7Ch] [ebp-5Ch] BYREF
  ifreq ifr; // [esp+9Ch] [ebp-3Ch] BYREF
  unsigned int v57; // [esp+BCh] [ebp-1Ch]

  v57 = __readgsdword(0x14u);
  v2 = dnsmasq_daemon_0;
  header = (mysockaddr *)dnsmasq_daemon_0[119];
  auth_dns = 0;
  dst_addr_4.s_addr = *dnsmasq_daemon_0 & 0x2000;
  if ( dst_addr_4.s_addr )
  {
    family = listen->family;
    if_index = family == 10;
    iface = listen->iface;
    *((_DWORD *)dnsmasq_daemon_0 + 132) = 0;
    dst_addr.addr.addr4.s_addr = 0;
    v42 = 0;
    if ( iface )
    {
      auth_dns = iface->dns_auth;
      dst_addr_4.s_addr = 0;
      if ( family == 2 )
      {
        s_addr = iface->netmask.s_addr;
        dst_addr.addr.addr4.s_addr = iface->addr.in.sin_addr.s_addr;
        dst_addr_4.s_addr = dst_addr.addr.addr4.s_addr;
        v42 = s_addr;
      }
    }
    else
    {
      dst_addr_4.s_addr = 0;
    }
  }
  else
  {
    if_index = 1;
    *((_DWORD *)dnsmasq_daemon_0 + 132) = 0;
    dst_addr.addr.addr4.s_addr = 0;
    v42 = 0;
  }
  v6 = *((unsigned __int16 *)v2 + 216);
  msg.msg_controllen = 32;
  msg.msg_namelen = 28;
  iov[0].iov_len = v6;
  msg.msg_control = &control_u;
  iov[0].iov_base = header;
  v7 = 0;
  msg.msg_name = &source_addr;
  msg.msg_iov = iov;
  msg.msg_flags = 0;
  msg.msg_iovlen = 1;
  n = recvmsg(listen->fd, &msg, 0);
  if ( n <= 11 )
    return;
  do_bit = msg.msg_flags & 0x20;
  if ( (msg.msg_flags & 0x20) != 0 || header->sa.sa_data[0] < 0 )
    return;
  v9 = listen->family;
  source_addr.sa.sa_family = v9;
  if ( v9 == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
    v10 = dnsmasq_daemon_0;
    if ( (*((_BYTE *)dnsmasq_daemon_0 + 6) & 2) == 0 )
      goto LABEL_30;
    goto LABEL_22;
  }
  if ( !source_addr.in.sin_port )
    return;
  source_addr.in.sin_addr.s_addr = 0;
  v10 = dnsmasq_daemon_0;
  if ( (*((_BYTE *)dnsmasq_daemon_0 + 6) & 2) != 0 )
  {
    v11 = dnsmasq_daemon_0[284];
    if ( v9 == 10 )
    {
      while ( v11 )
      {
        if ( (*(_BYTE *)(v11 + 16) & 2) != 0 && is_same_net6(v11, &source_addr.in6.sin6_addr, *(_DWORD *)(v11 + 20), v8) )
          goto LABEL_30;
        v11 = *(_DWORD *)(v11 + 24);
      }
      goto LABEL_28;
    }
LABEL_22:
    for ( i = v10[284]; i; i = *(_DWORD *)(i + 24) )
    {
      v13 = _byteswap_ulong(-1 << (32 - *(_BYTE *)(i + 20)));
      if ( (*(_BYTE *)(i + 16) & 2) == 0 && is_same_net(*(_DWORD *)i, source_addr.in.sin_addr.s_addr, v13, v9) )
        goto LABEL_30;
    }
LABEL_28:
    if ( !warned_2 )
    {
      my_syslog(4, "Ignoring query from non-local network", 0, 0);
      warned_2 = 1;
    }
    return;
  }
LABEL_30:
  if ( if_index )
  {
    if ( msg.msg_controllen <= 0xB )
      return;
    if_index = 0;
    if ( listen->family == 2 )
    {
      for ( j = (struct cmsghdr *)msg.msg_control; j; j = _cmsg_nxthdr(&msg, j) )
      {
        if ( !j->cmsg_level && j->cmsg_type == 8 )
        {
          v7 = *(_DWORD *)j->__cmsg_data;
          dst_addr.addr.addr4.s_addr = *(_DWORD *)&j->__cmsg_data[4];
          dst_addr_4.s_addr = dst_addr.addr.addr4.s_addr;
          if_index = v7;
        }
      }
    }
    msg_control = (struct cmsghdr *)listen;
    if ( listen->family == 10 && msg.msg_controllen > 0xB )
    {
      msg_control = (struct cmsghdr *)msg.msg_control;
      v16 = &dnsmasq_daemon_0;
      while ( msg_control )
      {
        if ( msg_control->cmsg_level == 41 )
        {
          v7 = (*v16)[283];
          if ( msg_control->cmsg_type == v7 )
          {
            qmemcpy(&dst_addr, msg_control->__cmsg_data, sizeof(dst_addr));
            v7 = *(_DWORD *)&msg_control->__cmsg_data[16];
            if_index = v7;
          }
        }
        v41 = (int)v16;
        msg_control = _cmsg_nxthdr(&msg, msg_control);
        v16 = (const signed __int32 **)v41;
      }
    }
    if ( !indextoname(listen->fd, if_index, &ifr, msg_control) )
      return;
    if ( !iface_check(listen->family, &dst_addr, &ifr, &auth_dns) )
    {
      if ( *((char *)dnsmasq_daemon_0 + 4) >= 0 )
        enumerate_interfaces(0);
      if ( !loopback_exception(listen->fd, listen->family, &dst_addr, &ifr)
        && !label_exception(if_index, listen->family, &dst_addr, v7) )
      {
        return;
      }
    }
    if ( listen->family == 2 && _bittest(dnsmasq_daemon_0, 0x12u) )
    {
      for ( k = dnsmasq_daemon_0[127]; k; k = *(_DWORD *)(k + 80) )
      {
        if ( *(_WORD *)k == 2 && *(_DWORD *)(k + 4) == dst_addr_4.s_addr )
          goto LABEL_64;
      }
      if ( *((char *)dnsmasq_daemon_0 + 4) >= 0 )
        enumerate_interfaces(0);
LABEL_64:
      for ( m = dnsmasq_daemon_0[127]; ; m = *(_DWORD *)(m + 80) )
      {
        if ( !m )
        {
          dst_addr_4.s_addr = 0;
          goto LABEL_70;
        }
        if ( *(_WORD *)m == 2 && *(_DWORD *)(m + 4) == dst_addr_4.s_addr )
          break;
      }
      v42 = *(_DWORD *)(m + 28);
    }
  }
LABEL_70:
  v19 = dnsmasq_daemon_0;
  v20 = dnsmasq_daemon_0[285];
  *((_DWORD *)dnsmasq_daemon_0 + 285) = v20 + 1;
  *((_DWORD *)v19 + 286) = v20 + 1;
  *((_DWORD *)v19 + 287) = &source_addr;
  v21 = extract_request(header, n, v19[121], &type);
  if ( !v21 )
  {
    v27 = 0;
LABEL_87:
    if ( find_pseudoheader(header, n, 0, &t_cp, 0, 0, v21, v21) )
    {
      v29 = *((_WORD *)t_cp + 2);
      v30 = *(_WORD *)t_cp;
      t_cp += 6;
      v31 = HIBYTE(v29);
      HIBYTE(v29) = v29;
      LOBYTE(v29) = v31;
      v33 = HIBYTE(v30);
      BYTE1(v32) = v30;
      LOBYTE(v32) = v33;
      do_bit = (unsigned int)v29 >> 31;
      if ( (unsigned __int16)v32 > (unsigned __int16)dnsmasq_daemon_0[108] )
        v32 = dnsmasq_daemon_0[108];
      v34 = 1;
    }
    else
    {
      v34 = 0;
      LOWORD(v32) = 512;
    }
    v35 = (char *)header + (unsigned __int16)v32;
    if ( auth_dns )
    {
      v36 = answer_auth(header, v35, n, now, &source_addr, v27, do_bit, v34);
      if ( v36 )
      {
        v37 = 1;
        if ( !_bittest(dnsmasq_daemon_0, 0xDu) )
          v37 = ((unsigned __int32)dnsmasq_daemon_0[1] >> 7) & 1;
        send_from(listen->fd, v37, (char *)header, v36, &source_addr, &dst_addr, if_index);
        ++dnsmasq_daemon_0[124];
      }
    }
    else
    {
      v38 = 1;
      if ( (header->sa.sa_data[1] & 0x20) == 0 )
        v38 = do_bit;
      v39 = answer_request(header, v35, n, dst_addr_4.s_addr, v42, now, v38, do_bit, v34);
      if ( v39 )
      {
        v40 = 1;
        if ( !_bittest(dnsmasq_daemon_0, 0xDu) )
          v40 = ((unsigned __int32)dnsmasq_daemon_0[1] >> 7) & 1;
        send_from(listen->fd, v40, (char *)header, v39, &source_addr, &dst_addr, if_index);
        ++dnsmasq_daemon_0[122];
      }
      else if ( forward_query(if_index, header, (all_addr *)n, now, 0, v38, 0, 0, v41, v42) )
      {
        ++dnsmasq_daemon_0[123];
      }
      else
      {
        ++dnsmasq_daemon_0[122];
      }
    }
    return;
  }
  v23 = "query";
  if ( auth_dns )
    v23 = "auth";
  v24 = querystr(v23, type, v22, v22);
  if ( listen->family == 2 )
    log_query(524424, dnsmasq_daemon_0[121], &source_addr.in6.sin6_flowinfo, v24);
  else
    log_query(524552, dnsmasq_daemon_0[121], &source_addr.in6.sin6_addr, v24);
  v26 = (int)dnsmasq_daemon_0;
  if ( !auth_dns && !_bittest(dnsmasq_daemon_0, 0x12u) )
  {
    for ( ii = dnsmasq_daemon_0[20]; ; ii = *(_DWORD *)(ii + 16) )
    {
      v26 = dnsmasq_daemon_0[121];
      if ( !ii )
        break;
      v26 = in_zone(ii, v26, 0, v25);
      if ( v26 )
      {
        auth_dns = 1;
        v27 = 1;
        goto LABEL_84;
      }
    }
  }
  v27 = 0;
LABEL_84:
  v21 = detect_loop(dnsmasq_daemon_0[121], type, v26, v26);
  if ( !v21 )
    goto LABEL_87;
}
