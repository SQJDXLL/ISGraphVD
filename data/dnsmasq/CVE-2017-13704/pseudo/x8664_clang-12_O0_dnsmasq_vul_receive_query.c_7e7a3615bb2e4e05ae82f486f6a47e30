void __cdecl receive_query(listener *listen, time_t now)
{
  int v2; // ecx
  const char *v3; // rdi
  unsigned __int16 v4; // ax
  bool v5; // [rsp+23h] [rbp-1BDh]
  bool v6; // [rsp+2Bh] [rbp-1B5h]
  cmsghdr *msg_control; // [rsp+30h] [rbp-1B0h]
  bool v8; // [rsp+43h] [rbp-19Dh]
  int ad_reqd; // [rsp+44h] [rbp-19Ch]
  char *types; // [rsp+60h] [rbp-180h]
  auth_zone *zone; // [rsp+68h] [rbp-178h]
  irec *iface; // [rsp+70h] [rbp-170h]
  irec *ifacea; // [rsp+70h] [rbp-170h]
  ifreq ifr; // [rsp+88h] [rbp-158h] BYREF
  in_addr netmask_0; // [rsp+B0h] [rbp-130h]
  addrlist *addr; // [rsp+B8h] [rbp-128h]
  int check_dst; // [rsp+C4h] [rbp-11Ch]
  union {cmsghdr align;char control6[40];char control[32];} control_u; // [rsp+C8h] [rbp-118h] BYREF
  cmsghdr *cmptr; // [rsp+F0h] [rbp-F0h]
  msghdr msg; // [rsp+F8h] [rbp-E8h] BYREF
  iovec iov[1]; // [rsp+130h] [rbp-B0h] BYREF
  int local_auth; // [rsp+14Ch] [rbp-94h]
  int have_pseudoheader; // [rsp+150h] [rbp-90h]
  int do_bit; // [rsp+154h] [rbp-8Ch]
  int auth_dns; // [rsp+158h] [rbp-88h] BYREF
  int if_index; // [rsp+15Ch] [rbp-84h]
  ssize_t n; // [rsp+160h] [rbp-80h]
  size_t m; // [rsp+168h] [rbp-78h]
  in_addr dst_addr_4; // [rsp+170h] [rbp-70h]
  in_addr netmask; // [rsp+178h] [rbp-68h]
  all_addr dst_addr; // [rsp+180h] [rbp-60h] BYREF
  unsigned __int16 udp_size; // [rsp+194h] [rbp-4Ch]
  unsigned __int16 type; // [rsp+196h] [rbp-4Ah] BYREF
  unsigned __int8 *pheader; // [rsp+198h] [rbp-48h] BYREF
  mysockaddr source_addr; // [rsp+1A0h] [rbp-40h] BYREF
  dns_header *header; // [rsp+1C0h] [rbp-20h]
  time_t nowa; // [rsp+1C8h] [rbp-18h]
  listener *listena; // [rsp+1D0h] [rbp-10h]

  listena = listen;
  nowa = now;
  header = *(dns_header **)(dnsmasq_daemon + 848LL);
  udp_size = 512;
  if_index = 0;
  auth_dns = 0;
  do_bit = 0;
  have_pseudoheader = 0;
  local_auth = 0;
  v8 = 1;
  if ( (*dnsmasq_daemon & 0x2000) != 0 )
    v8 = listena->family == 10;
  check_dst = v8;
  *(_QWORD *)(dnsmasq_daemon + 944LL) = 0LL;
  dst_addr.addr.addr4.s_addr = 0;
  dst_addr_4.s_addr = 0;
  netmask.s_addr = 0;
  if ( (*dnsmasq_daemon & 0x2000) != 0 )
  {
    if ( listena->iface )
    {
      auth_dns = listena->iface->dns_auth;
      if ( listena->family == 2 )
      {
        dst_addr.addr.addr4.s_addr = listena->iface->addr.in.sin_addr.s_addr;
        dst_addr_4.s_addr = dst_addr.addr.addr4.s_addr;
        netmask.s_addr = listena->iface->netmask.s_addr;
      }
    }
  }
  iov[0].iov_base = *(void **)(dnsmasq_daemon + 848LL);
  iov[0].iov_len = *(unsigned __int16 *)(dnsmasq_daemon + 768LL);
  msg.msg_control = &control_u;
  msg.msg_controllen = 40LL;
  msg.msg_flags = 0;
  msg.msg_name = &source_addr;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  msg.msg_iovlen = 1LL;
  n = recvmsg(listena->fd, &msg, 0);
  if ( n >= 12 && (msg.msg_flags & 0x20) == 0 && (header->hb3 & 0x80) == 0 )
  {
    source_addr.sa.sa_family = listena->family;
    if ( listena->family == 2 )
    {
      if ( !source_addr.in.sin_port )
        return;
    }
    else
    {
      if ( !source_addr.in.sin_port )
        return;
      source_addr.in.sin_addr.s_addr = 0;
    }
    if ( (*(_DWORD *)(dnsmasq_daemon + 4LL) & 0x20000) != 0 )
    {
      if ( listena->family == 10 )
      {
        for ( addr = *(addrlist **)(dnsmasq_daemon + 1568LL);
              addr
           && ((addr->flags & 2) == 0
            || !(unsigned int)is_same_net6(addr, &source_addr.in6.sin6_addr, (unsigned int)addr->prefixlen));
              addr = addr->next )
        {
          ;
        }
      }
      else
      {
        for ( addr = *(addrlist **)(dnsmasq_daemon + 1568LL); addr; addr = addr->next )
        {
          netmask_0.s_addr = htonl(-1 << (32 - LOBYTE(addr->prefixlen)));
          if ( (addr->flags & 2) == 0 )
          {
            if ( (unsigned int)is_same_net(
                                 addr->addr.addr.addr4.s_addr,
                                 source_addr.in.sin_addr.s_addr,
                                 netmask_0.s_addr) )
              break;
          }
        }
      }
      if ( !addr )
      {
        if ( !receive_query_warned )
        {
          my_syslog(4LL, "Ignoring query from non-local network");
          receive_query_warned = 1;
        }
        return;
      }
    }
    if ( check_dst )
    {
      if ( msg.msg_controllen < 0x10 )
        return;
      if ( listena->family == 2 )
      {
        for ( cmptr = (cmsghdr *)msg.msg_control; cmptr; cmptr = _cmsg_nxthdr(&msg, cmptr) )
        {
          if ( !cmptr->cmsg_level && cmptr->cmsg_type == 8 )
          {
            dst_addr.addr.addr4.s_addr = *(_DWORD *)&cmptr->__cmsg_data[4];
            dst_addr_4.s_addr = dst_addr.addr.addr4.s_addr;
            if_index = *(_DWORD *)cmptr->__cmsg_data;
          }
        }
      }
      if ( listena->family == 10 )
      {
        if ( msg.msg_controllen < 0x10 )
          msg_control = 0LL;
        else
          msg_control = (cmsghdr *)msg.msg_control;
        for ( cmptr = msg_control; cmptr; cmptr = _cmsg_nxthdr(&msg, cmptr) )
        {
          if ( cmptr->cmsg_level == 41 && cmptr->cmsg_type == *(_DWORD *)(dnsmasq_daemon + 1560LL) )
          {
            dst_addr = *(all_addr *)cmptr->__cmsg_data;
            if_index = *(_DWORD *)&cmptr->__cmsg_data[16];
          }
        }
      }
      if ( !(unsigned int)indextoname((unsigned int)listena->fd, (unsigned int)if_index, &ifr) )
        return;
      if ( !(unsigned int)iface_check((unsigned int)listena->family, &dst_addr, &ifr, &auth_dns) )
      {
        if ( (*(_DWORD *)(dnsmasq_daemon + 4LL) & 0x80) == 0 )
          enumerate_interfaces(0LL);
        if ( !(unsigned int)loopback_exception(
                              (unsigned int)listena->fd,
                              (unsigned int)listena->family,
                              &dst_addr,
                              &ifr)
          && !(unsigned int)label_exception((unsigned int)if_index, (unsigned int)listena->family, &dst_addr) )
        {
          return;
        }
      }
      if ( listena->family == 2 && (*dnsmasq_daemon & 0x40000) != 0 )
      {
        for ( iface = *(irec **)(dnsmasq_daemon + 904LL);
              iface && (iface->addr.sa.sa_family != 2 || iface->addr.in.sin_addr.s_addr != dst_addr_4.s_addr);
              iface = iface->next )
        {
          ;
        }
        if ( !iface && (*(_DWORD *)(dnsmasq_daemon + 4LL) & 0x80) == 0 )
          enumerate_interfaces(0LL);
        for ( ifacea = *(irec **)(dnsmasq_daemon + 904LL);
              ifacea && (ifacea->addr.sa.sa_family != 2 || ifacea->addr.in.sin_addr.s_addr != dst_addr_4.s_addr);
              ifacea = ifacea->next )
        {
          ;
        }
        if ( ifacea )
          netmask.s_addr = ifacea->netmask.s_addr;
        else
          dst_addr_4.s_addr = 0;
      }
    }
    v2 = *(_DWORD *)(dnsmasq_daemon + 1576LL) + 1;
    *(_DWORD *)(dnsmasq_daemon + 1576LL) = v2;
    *(_DWORD *)(dnsmasq_daemon + 1580LL) = v2;
    *(_QWORD *)(dnsmasq_daemon + 1584LL) = &source_addr;
    if ( !(unsigned int)extract_request(header, n, *(_QWORD *)(dnsmasq_daemon + 864LL), &type) )
      goto LABEL_112;
    v3 = "query";
    if ( auth_dns )
      v3 = "auth";
    types = (char *)querystr(v3, type);
    if ( listena->family == 2 )
      log_query(524424LL, *(_QWORD *)(dnsmasq_daemon + 864LL), &source_addr.in6.sin6_flowinfo, types);
    else
      log_query(524552LL, *(_QWORD *)(dnsmasq_daemon + 864LL), &source_addr.in6.sin6_addr, types);
    if ( !auth_dns && (*dnsmasq_daemon & 0x40000) == 0 )
    {
      for ( zone = *(auth_zone **)(dnsmasq_daemon + 144LL); zone; zone = zone->next )
      {
        if ( (unsigned int)in_zone(zone, *(_QWORD *)(dnsmasq_daemon + 864LL), 0LL) )
        {
          auth_dns = 1;
          local_auth = 1;
          break;
        }
      }
    }
    if ( !(unsigned int)detect_loop(*(_QWORD *)(dnsmasq_daemon + 864LL), type) )
    {
LABEL_112:
      if ( find_pseudoheader(header, n, 0LL, &pheader, 0LL) )
      {
        have_pseudoheader = 1;
        udp_size = _byteswap_ushort(*(_WORD *)pheader);
        pheader += 2;
        pheader += 2;
        v4 = _byteswap_ushort(*(_WORD *)pheader);
        pheader += 2;
        if ( (v4 & 0x8000) != 0 )
          do_bit = 1;
        if ( udp_size > (int)*(unsigned __int16 *)(dnsmasq_daemon + 768LL) )
          udp_size = *(_WORD *)(dnsmasq_daemon + 768LL);
      }
      if ( auth_dns )
      {
        m = answer_auth(
              header,
              (char *)header + udp_size,
              n,
              nowa,
              &source_addr,
              (unsigned int)local_auth,
              do_bit,
              have_pseudoheader);
        if ( m )
        {
          v6 = 1;
          if ( (*dnsmasq_daemon & 0x2000) == 0 )
            v6 = (*(_DWORD *)(dnsmasq_daemon + 4LL) & 0x80) != 0;
          send_from(listena->fd, v6, (char *)header, m, &source_addr, &dst_addr, if_index);
          ++*(_DWORD *)(dnsmasq_daemon + 880LL);
        }
      }
      else
      {
        ad_reqd = do_bit;
        if ( (header->hb4 & 0x20) != 0 )
          ad_reqd = 1;
        m = answer_request(
              header,
              (char *)header + udp_size,
              n,
              dst_addr_4.s_addr,
              netmask.s_addr,
              nowa,
              ad_reqd,
              do_bit,
              have_pseudoheader);
        if ( m )
        {
          v5 = 1;
          if ( (*dnsmasq_daemon & 0x2000) == 0 )
            v5 = (*(_DWORD *)(dnsmasq_daemon + 4LL) & 0x80) != 0;
          send_from(listena->fd, v5, (char *)header, m, &source_addr, &dst_addr, if_index);
          ++*(_DWORD *)(dnsmasq_daemon + 872LL);
        }
        else if ( forward_query(listena->fd, &source_addr, &dst_addr, if_index, header, n, nowa, 0LL, ad_reqd, do_bit) )
        {
          ++*(_DWORD *)(dnsmasq_daemon + 876LL);
        }
        else
        {
          ++*(_DWORD *)(dnsmasq_daemon + 872LL);
        }
      }
    }
  }
}
