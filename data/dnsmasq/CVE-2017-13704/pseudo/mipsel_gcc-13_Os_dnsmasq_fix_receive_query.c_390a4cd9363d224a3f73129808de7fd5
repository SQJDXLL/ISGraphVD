void __fastcall receive_query(listener *listen, time_t now)
{
  int v2; // $v0
  int v3; // $v1
  dns_header *v4; // $s4
  unsigned int iface; // $s2
  in_addr_t s_addr; // $s3
  int fd; // $a0
  signed int v9; // $s5
  int v10; // $s6
  int v11; // $v0
  irec *v12; // $v1
  int family; // $a1
  _DWORD *v14; // $fp
  int v15; // $v1
  struct cmsghdr *i; // $a1
  struct cmsghdr *j; // $v1
  int k; // $v0
  int m; // $v0
  int v20; // $v0
  int v21; // $a2
  int v22; // $v1
  const char *v23; // $a0
  int v24; // $a3
  in6_addr *p_sin6_flowinfo; // $a2
  int v26; // $a0
  unsigned int v27; // $v0
  unsigned int v28; // $s6
  unsigned int v29; // $a1
  unsigned int v30; // $v0
  char *v31; // $a1
  size_t v32; // $a3
  int v33; // $a1
  int v34; // $a2
  int n; // $a0
  int v36; // $v1
  size_t v37; // $a3
  int v38; // $a0
  int v39; // $a1
  int v40; // $v1
  int v41; // $v0
  int v42; // [sp+24h] [-BCh]
  int ad_reqd; // [sp+34h] [-ACh]
  int ad_reqda; // [sp+34h] [-ACh]
  cmsghdr *cmptr; // [sp+3Ch] [-A4h]
  unsigned __int16 type; // [sp+42h] [-9Eh] BYREF
  unsigned __int8 *t_cp; // [sp+44h] [-9Ch] BYREF
  int auth_dns; // [sp+48h] [-98h] BYREF
  msghdr msg; // [sp+4Ch] [-94h] BYREF
  iovec iov[1]; // [sp+68h] [-78h] BYREF
  all_addr dst_addr; // [sp+70h] [-70h] BYREF
  mysockaddr source_addr; // [sp+80h] [-60h] BYREF
  union {cmsghdr align;char control6[32];char control[24];} control_u; // [sp+9Ch] [-44h] BYREF
  ifreq ifr; // [sp+BCh] [-24h] BYREF

  v2 = dnsmasq_daemon_0;
  v3 = *dnsmasq_daemon_0 & 0x2000;
  v4 = *(dns_header **)(dnsmasq_daemon_0 + 476);
  auth_dns = 0;
  iface = 1;
  if ( v3 )
    iface = listen->family == 0xA;
  *(_DWORD *)(dnsmasq_daemon_0 + 528) = 0;
  dst_addr.addr.addr4.s_addr = 0;
  if ( v3 )
  {
    v12 = listen->iface;
    s_addr = 0;
    if ( v12 )
    {
      family = listen->family;
      auth_dns = v12->dns_auth;
      if ( family == 2 )
      {
        s_addr = v12->addr.in.sin_addr.s_addr;
        dst_addr.addr.addr4.s_addr = s_addr;
      }
    }
  }
  else
  {
    s_addr = 0;
  }
  iov[0].iov_len = *(unsigned __int16 *)(v2 + 432);
  msg.msg_control = &control_u;
  msg.msg_controllen = 32;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  msg.msg_iovlen = 1;
  fd = listen->fd;
  iov[0].iov_base = v4;
  msg.msg_flags = 0;
  msg.msg_name = &source_addr;
  v9 = recvmsg(fd, &msg, 0);
  if ( v9 >= 12 )
  {
    v10 = msg.msg_flags & 0x20;
    if ( (msg.msg_flags & 0x20) == 0 && (v4->hb3 & 0x80u) == 0 )
    {
      memset((void *)(*(_DWORD *)(dnsmasq_daemon_0 + 476) + v9), 0, *(unsigned __int16 *)(dnsmasq_daemon_0 + 432) - v9);
      v11 = listen->family;
      source_addr.sa.sa_family = v11;
      if ( v11 == 2 )
      {
        if ( !source_addr.in.sin_port )
          return;
      }
      else
      {
        if ( !source_addr.in.sin_port )
          return;
        source_addr.in.sin_addr.s_addr = 0;
      }
      if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x20000) != 0 )
      {
        v14 = *(_DWORD **)(dnsmasq_daemon_0 + 1136);
        if ( v11 == 10 )
        {
          while ( v14 )
          {
            if ( (v14[4] & 2) != 0 && is_same_net6(v14, &source_addr.in6.sin6_addr, v14[5]) )
              goto LABEL_24;
            v14 = (_DWORD *)v14[6];
          }
        }
        else
        {
          while ( v14 )
          {
            v34 = _bswapsi2(-1 << (32 - v14[5]));
            if ( (v14[4] & 2) == 0 && is_same_net(*v14, source_addr.in.sin_addr.s_addr, v34) )
              goto LABEL_24;
            v14 = (_DWORD *)v14[6];
          }
        }
        if ( !warned_2 )
        {
          my_syslog(4, "Ignoring query from non-local network");
          warned_2 = 1;
        }
      }
      else
      {
LABEL_24:
        if ( iface )
        {
          if ( msg.msg_controllen < 0xC )
            return;
          v15 = listen->family;
          iface = 0;
          if ( v15 == 2 )
          {
            for ( i = (struct cmsghdr *)msg.msg_control; i; i = _cmsg_nxthdr(&msg, i) )
            {
              if ( !i->cmsg_level && i->cmsg_type == 8 )
              {
                s_addr = *(_DWORD *)&i->__cmsg_data[4];
                iface = *(_DWORD *)i->__cmsg_data;
                dst_addr.addr.addr4.s_addr = s_addr;
              }
            }
            v15 = listen->family;
          }
          if ( v15 == 10 && msg.msg_controllen >= 0xC )
          {
            for ( j = (struct cmsghdr *)msg.msg_control; j; j = _cmsg_nxthdr(&msg, j) )
            {
              if ( j->cmsg_level == 41 && j->cmsg_type == *(_DWORD *)(dnsmasq_daemon_0 + 1132) )
              {
                cmptr = j;
                memcpy(&dst_addr, j->__cmsg_data, sizeof(dst_addr));
                j = cmptr;
                iface = *(_DWORD *)&cmptr->__cmsg_data[16];
              }
            }
          }
          if ( !indextoname(listen->fd, iface, &ifr) )
            return;
          if ( !iface_check(listen->family, &dst_addr, &ifr, &auth_dns) )
          {
            if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) == 0 )
              enumerate_interfaces(0);
            if ( !loopback_exception(listen->fd, listen->family, &dst_addr, &ifr)
              && !label_exception(iface, listen->family, &dst_addr) )
            {
              return;
            }
          }
          if ( listen->family == 2 && (*dnsmasq_daemon_0 & 0x40000) != 0 )
          {
            for ( k = *(_DWORD *)(dnsmasq_daemon_0 + 508); k; k = *(_DWORD *)(k + 80) )
            {
              if ( *(_WORD *)k == 2 && *(_DWORD *)(k + 4) == s_addr )
                goto LABEL_42;
            }
            if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) == 0 )
              enumerate_interfaces(0);
LABEL_42:
            for ( m = *(_DWORD *)(dnsmasq_daemon_0 + 508); m; m = *(_DWORD *)(m + 80) )
            {
              if ( *(_WORD *)m == 2 && *(_DWORD *)(m + 4) == s_addr )
                goto LABEL_45;
            }
            s_addr = 0;
          }
        }
LABEL_45:
        v20 = dnsmasq_daemon_0;
        v21 = *(_DWORD *)(dnsmasq_daemon_0 + 484);
        v22 = *(_DWORD *)(dnsmasq_daemon_0 + 1140) + 1;
        *(_DWORD *)(dnsmasq_daemon_0 + 1140) = v22;
        *(_DWORD *)(v20 + 1144) = v22;
        *(_DWORD *)(v20 + 1148) = &source_addr;
        if ( !extract_request(v4, v9, v21, &type) )
          goto LABEL_108;
        if ( auth_dns )
          v23 = "auth";
        else
          v23 = "query";
        v24 = querystr(v23, type);
        if ( listen->family == 2 )
        {
          p_sin6_flowinfo = (in6_addr *)&source_addr.in6.sin6_flowinfo;
          v26 = 524424;
        }
        else
        {
          p_sin6_flowinfo = &source_addr.in6.sin6_addr;
          v26 = 524552;
        }
        log_query(v26, *(_DWORD *)(dnsmasq_daemon_0 + 484), p_sin6_flowinfo, v24);
        if ( !auth_dns && (*dnsmasq_daemon_0 & 0x40000) == 0 )
        {
          for ( n = *(_DWORD *)(dnsmasq_daemon_0 + 80); n; n = *(_DWORD *)(ad_reqd + 16) )
          {
            ad_reqd = n;
            if ( in_zone(n, *(_DWORD *)(dnsmasq_daemon_0 + 484), 0) )
            {
              auth_dns = 1;
              break;
            }
          }
        }
        if ( !detect_loop(*(_DWORD *)(dnsmasq_daemon_0 + 484), type) )
        {
LABEL_108:
          if ( find_pseudoheader(v4, v9, 0, &t_cp) )
          {
            v27 = (t_cp[1] << 8) | *t_cp;
            v28 = t_cp[4];
            t_cp += 6;
            v29 = *(unsigned __int16 *)(dnsmasq_daemon_0 + 432);
            v30 = (unsigned __int16)(((_WORD)v27 << 8) | (v27 >> 8));
            v10 = v28 >> 7;
            if ( v30 < v29 )
              LOWORD(v29) = v30;
            v29 = (unsigned __int16)v29;
          }
          else
          {
            v29 = 512;
          }
          v31 = (char *)v4 + v29;
          if ( !auth_dns )
          {
            v36 = 1;
            if ( (v4->hb4 & 0x20) == 0 )
              v36 = v10;
            ad_reqda = v36;
            v37 = answer_request(v4, v31, v9, s_addr);
            v38 = listen->fd;
            if ( v37 )
            {
              v39 = 1;
              if ( (*dnsmasq_daemon_0 & 0x2000) == 0 )
                v39 = (*(_DWORD *)(dnsmasq_daemon_0 + 4) >> 7) & 1;
              send_from(v38, v39, (char *)v4, v37, &source_addr, &dst_addr, iface);
              v40 = dnsmasq_daemon_0;
            }
            else
            {
              v41 = forward_query(v38, &source_addr, &dst_addr, iface, v4, v9, now, 0u, ad_reqda, v42);
              v40 = dnsmasq_daemon_0;
              if ( v41 )
              {
                ++*(_DWORD *)(dnsmasq_daemon_0 + 492);
                return;
              }
            }
            ++*(_DWORD *)(v40 + 488);
            return;
          }
          v32 = answer_auth(v4, v31, v9, now);
          if ( v32 )
          {
            v33 = 1;
            if ( (*dnsmasq_daemon_0 & 0x2000) == 0 )
              v33 = (*(_DWORD *)(dnsmasq_daemon_0 + 4) >> 7) & 1;
            send_from(listen->fd, v33, (char *)v4, v32, &source_addr, &dst_addr, iface);
            ++*(_DWORD *)(dnsmasq_daemon_0 + 496);
          }
        }
      }
    }
  }
}
