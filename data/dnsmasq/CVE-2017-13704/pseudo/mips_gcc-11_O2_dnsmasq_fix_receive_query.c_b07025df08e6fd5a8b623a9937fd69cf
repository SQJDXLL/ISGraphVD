void __fastcall receive_query(listener *listen, time_t now)
{
  int v2; // $v0
  int s_addr; // $s1
  dns_header *v4; // $s4
  unsigned int iface; // $s5
  int family; // $a0
  irec *v8; // $v1
  int fd; // $a0
  signed int v10; // $s7
  int v11; // $s6
  int v12; // $v0
  int v13; // $a1
  int v14; // $a0
  int v15; // $a0
  in6_addr *p_sin6_addr; // $a1
  int v17; // $v0
  int v18; // $a0
  unsigned int *v19; // $a1
  char *v20; // $a3
  unsigned int v21; // $v0
  unsigned int v22; // $a0
  _BOOL4 v23; // $a2
  unsigned int v24; // $v0
  uint32_t v25; // $a2
  uint32_t v26; // $a0
  uint32_t v27; // $v0
  _DWORD *v28; // $a3
  int v29; // $v0
  unsigned int *msg_control; // $a1
  char *v31; // $a3
  unsigned int v32; // $v0
  unsigned int v33; // $v0
  unsigned int v34; // $a0
  _BOOL4 v35; // $a2
  unsigned int v36; // $v0
  _DWORD *v37; // $v0
  int v38; // $a0
  int v39; // $a2
  int *v40; // $a0
  int v41; // $a3
  int v42; // $v0
  int v43; // $a0
  int v44; // $a1
  unsigned int v45; // $a1
  unsigned int v46; // $s6
  char *v47; // $a1
  int v48; // $t0
  size_t v49; // $a3
  int v50; // $a1
  size_t v51; // $a3
  int v52; // $a1
  int v53; // $a0
  int v54; // $a1
  int v55; // [sp+24h] [-BCh]
  int ad_reqdb; // [sp+38h] [-A8h]
  int ad_reqdc; // [sp+38h] [-A8h]
  int ad_reqd; // [sp+38h] [-A8h]
  int ad_reqda; // [sp+38h] [-A8h]
  in6_addr *v60; // [sp+3Ch] [-A4h]
  unsigned __int16 type; // [sp+42h] [-9Eh] BYREF
  unsigned __int8 *t_cp; // [sp+44h] [-9Ch] BYREF
  int auth_dns; // [sp+48h] [-98h] BYREF
  msghdr msg; // [sp+4Ch] [-94h] BYREF
  iovec iov[1]; // [sp+68h] [-78h] BYREF
  all_addr dst_addr; // [sp+70h] [-70h] BYREF
  mysockaddr source_addr; // [sp+80h] [-60h] BYREF
  union {cmsghdr align;char control6[32];char control[24];} control_u; // [sp+9Ch] [-44h] BYREF
  ifreq ifr; // [sp+BCh] [-24h] BYREF

  v2 = dnsmasq_daemon_0;
  s_addr = *dnsmasq_daemon_0 & 0x2000;
  v4 = *(dns_header **)(dnsmasq_daemon_0 + 476);
  auth_dns = 0;
  iface = 1;
  if ( s_addr )
  {
    family = listen->family;
    v8 = listen->iface;
    iface = family == 0xA;
    *(_DWORD *)(dnsmasq_daemon_0 + 528) = 0;
    dst_addr.addr.addr4.s_addr = 0;
    if ( v8 && (auth_dns = v8->dns_auth, family == 2) )
    {
      s_addr = v8->addr.in.sin_addr.s_addr;
      dst_addr.addr.addr4.s_addr = s_addr;
    }
    else
    {
      s_addr = 0;
    }
  }
  else
  {
    *(_DWORD *)(dnsmasq_daemon_0 + 528) = 0;
    dst_addr.addr.addr4.s_addr = 0;
  }
  iov[0].iov_len = *(unsigned __int16 *)(v2 + 432);
  msg.msg_control = &control_u;
  msg.msg_controllen = 32;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  fd = listen->fd;
  iov[0].iov_base = v4;
  msg.msg_flags = 0;
  msg.msg_name = &source_addr;
  msg.msg_iovlen = 1;
  v10 = recvmsg(fd, &msg, 0);
  if ( v10 < 12 )
    return;
  v11 = msg.msg_flags & 0x20;
  if ( (msg.msg_flags & 0x20) != 0 || (v4->hb3 & 0x80u) != 0 )
    return;
  memset((void *)(*(_DWORD *)(dnsmasq_daemon_0 + 476) + v10), 0, *(unsigned __int16 *)(dnsmasq_daemon_0 + 432) - v10);
  v12 = listen->family;
  source_addr.sa.sa_family = v12;
  if ( v12 == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
    v13 = dnsmasq_daemon_0;
    if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x20000) == 0 )
      goto LABEL_18;
    goto LABEL_34;
  }
  if ( !source_addr.in.sin_port )
    return;
  v13 = dnsmasq_daemon_0;
  v14 = *(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x20000;
  source_addr.in.sin_addr.s_addr = 0;
  if ( !v14 )
    goto LABEL_18;
  v15 = *(_DWORD *)(dnsmasq_daemon_0 + 1136);
  if ( v12 != 10 )
  {
LABEL_34:
    v28 = *(_DWORD **)(v13 + 1136);
    if ( !v28 )
      goto LABEL_92;
    while ( 1 )
    {
      if ( (v28[4] & 2) == 0 )
      {
        ad_reqdc = (int)v28;
        v29 = is_same_net(*v28, source_addr.in.sin_addr.s_addr, -1 << (32 - v28[5]));
        v28 = (_DWORD *)ad_reqdc;
        if ( v29 )
          goto LABEL_18;
      }
      v28 = (_DWORD *)v28[6];
      if ( !v28 )
        goto LABEL_92;
    }
  }
  p_sin6_addr = &source_addr.in6.sin6_addr;
  if ( !v15 )
  {
LABEL_92:
    if ( !warned_2 )
    {
      my_syslog(4, "Ignoring query from non-local network");
      warned_2 = 1;
    }
    return;
  }
  while ( 1 )
  {
    if ( (*(_DWORD *)(v15 + 16) & 2) != 0 )
    {
      v60 = p_sin6_addr;
      ad_reqdb = v15;
      v17 = is_same_net6();
      v15 = ad_reqdb;
      p_sin6_addr = v60;
      if ( v17 )
        break;
    }
    v15 = *(_DWORD *)(v15 + 24);
    if ( !v15 )
      goto LABEL_92;
  }
LABEL_18:
  if ( !iface )
  {
    v37 = (_DWORD *)dnsmasq_daemon_0;
    goto LABEL_57;
  }
  if ( msg.msg_controllen >= 0xC )
  {
    v18 = listen->family;
    if ( v18 == 2 )
    {
      msg_control = (unsigned int *)msg.msg_control;
      iface = 0;
      if ( msg.msg_control )
      {
        v31 = (char *)msg.msg_control + msg.msg_controllen;
        if ( *((_DWORD *)msg.msg_control + 1) )
          goto LABEL_45;
        v32 = *((_DWORD *)msg.msg_control + 2);
LABEL_43:
        if ( v32 == 8 )
        {
          s_addr = msg_control[4];
          iface = msg_control[3];
          dst_addr.addr.addr4.s_addr = s_addr;
        }
LABEL_45:
        while ( 1 )
        {
          v33 = *msg_control;
          v34 = (-*msg_control & 3) + 12;
          if ( *msg_control < 0xC )
            break;
          if ( v31 - (char *)msg_control < v34 )
            break;
          v35 = v31 - (char *)msg_control - v34 < v33;
          v36 = v33 + 3;
          if ( v35 )
            break;
          msg_control = (unsigned int *)((char *)msg_control + (v36 & 0xFFFFFFFC));
          if ( !msg_control[1] )
          {
            v32 = msg_control[2];
            goto LABEL_43;
          }
        }
      }
    }
    else
    {
      v19 = (unsigned int *)msg.msg_control;
      if ( v18 == 10 )
      {
        iface = 0;
        if ( msg.msg_control )
        {
          v20 = (char *)msg.msg_control + msg.msg_controllen;
          if ( *((_DWORD *)msg.msg_control + 1) == 41 )
            goto LABEL_28;
          while ( 1 )
          {
            v21 = *v19;
            v22 = (-*v19 & 3) + 12;
            if ( *v19 < 0xC )
              break;
            if ( v20 - (char *)v19 < v22 )
              break;
            v23 = v20 - (char *)v19 - v22 < v21;
            v24 = v21 + 3;
            if ( v23 )
              break;
            v19 = (unsigned int *)((char *)v19 + (v24 & 0xFFFFFFFC));
            if ( v19[1] == 41 )
            {
LABEL_28:
              if ( v19[2] == *(_DWORD *)(dnsmasq_daemon_0 + 1132) )
              {
                v25 = v19[4];
                v26 = v19[5];
                v27 = v19[6];
                iface = v19[7];
                dst_addr.addr.addr4.s_addr = v19[3];
                dst_addr.addr.addr6.__in6_u.__u6_addr32[1] = v25;
                dst_addr.addr.addr6.__in6_u.__u6_addr32[2] = v26;
                dst_addr.addr.addr6.__in6_u.__u6_addr32[3] = v27;
              }
            }
          }
        }
      }
      else
      {
        iface = 0;
      }
    }
    if ( indextoname(listen->fd, iface) )
    {
      if ( iface_check(listen->family, &dst_addr, &ifr, &auth_dns) )
        goto LABEL_56;
      if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) == 0 )
        enumerate_interfaces(0);
      if ( loopback_exception(listen->fd, listen->family, &dst_addr, &ifr)
        || label_exception(iface, listen->family, &dst_addr) )
      {
LABEL_56:
        v37 = (_DWORD *)dnsmasq_daemon_0;
        if ( listen->family == 2 && (*dnsmasq_daemon_0 & 0x40000) != 0 )
        {
          v53 = *(_DWORD *)(dnsmasq_daemon_0 + 508);
          v54 = v53;
          if ( v53 )
          {
            while ( *(_WORD *)v54 != 2 || *(_DWORD *)(v54 + 4) != s_addr )
            {
              v54 = *(_DWORD *)(v54 + 80);
              if ( !v54 )
              {
                if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) != 0 )
                  break;
                goto LABEL_113;
              }
            }
LABEL_105:
            while ( *(_WORD *)v53 != 2 || *(_DWORD *)(v53 + 4) != s_addr )
            {
              v53 = *(_DWORD *)(v53 + 80);
              if ( !v53 )
                goto LABEL_114;
            }
          }
          else if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) != 0 )
          {
            s_addr = 0;
          }
          else
          {
LABEL_113:
            enumerate_interfaces(0);
            v37 = (_DWORD *)dnsmasq_daemon_0;
            v53 = *(_DWORD *)(dnsmasq_daemon_0 + 508);
            if ( v53 )
              goto LABEL_105;
LABEL_114:
            s_addr = 0;
          }
        }
LABEL_57:
        v38 = v37[285] + 1;
        v39 = v37[121];
        v37[285] = v38;
        v37[286] = v38;
        v37[287] = &source_addr;
        if ( !extract_request(v4, v10, v39, &type) )
        {
LABEL_71:
          if ( find_pseudoheader(v4, v10, 0, &t_cp) )
          {
            v45 = *(unsigned __int16 *)(dnsmasq_daemon_0 + 432);
            v46 = t_cp[4];
            if ( (t_cp[1] | (*t_cp << 8)) < v45 )
              v45 = t_cp[1] | (*t_cp << 8);
            t_cp += 6;
            v11 = v46 >> 7;
          }
          else
          {
            v45 = 512;
          }
          v47 = (char *)v4 + v45;
          if ( auth_dns )
          {
            v51 = answer_auth(v4, v47, v10, now);
            if ( v51 )
            {
              if ( (*dnsmasq_daemon_0 & 0x2000) != 0 )
                v52 = 1;
              else
                v52 = (*(_DWORD *)(dnsmasq_daemon_0 + 4) >> 7) & 1;
              send_from(listen->fd, v52, (char *)v4, v51, &source_addr, &dst_addr, iface);
              ++*(_DWORD *)(dnsmasq_daemon_0 + 496);
            }
          }
          else
          {
            v48 = 1;
            if ( (v4->hb4 & 0x20) == 0 )
              v48 = v11;
            ad_reqda = v48;
            v49 = answer_request(v4, v47, v10, s_addr);
            if ( v49 )
            {
              if ( (*dnsmasq_daemon_0 & 0x2000) != 0 )
                v50 = 1;
              else
                v50 = (*(_DWORD *)(dnsmasq_daemon_0 + 4) >> 7) & 1;
              send_from(listen->fd, v50, (char *)v4, v49, &source_addr, &dst_addr, iface);
              ++*(_DWORD *)(dnsmasq_daemon_0 + 488);
            }
            else if ( forward_query(listen->fd, &source_addr, &dst_addr, iface, v4, v10, now, 0u, ad_reqda, v55) )
            {
              ++*(_DWORD *)(dnsmasq_daemon_0 + 492);
            }
            else
            {
              ++*(_DWORD *)(dnsmasq_daemon_0 + 488);
            }
          }
          return;
        }
        if ( auth_dns )
          v40 = (int *)"auth";
        else
          v40 = &_LC5;
        v41 = querystr(v40, type);
        if ( listen->family == 2 )
          log_query(524424, *(_DWORD *)(dnsmasq_daemon_0 + 484), &source_addr.in6.sin6_flowinfo, v41);
        else
          log_query(524552, *(_DWORD *)(dnsmasq_daemon_0 + 484), &source_addr.in6.sin6_addr, v41);
        v42 = dnsmasq_daemon_0;
        if ( !auth_dns && (*dnsmasq_daemon_0 & 0x40000) == 0 )
        {
          v43 = *(_DWORD *)(dnsmasq_daemon_0 + 80);
          v44 = type;
          if ( !v43 )
          {
LABEL_70:
            if ( detect_loop(*(_DWORD *)(v42 + 484), v44) )
              return;
            goto LABEL_71;
          }
          while ( 1 )
          {
            ad_reqd = v43;
            if ( in_zone(v43, *(_DWORD *)(v42 + 484), 0) )
              break;
            v43 = *(_DWORD *)(ad_reqd + 16);
            v42 = dnsmasq_daemon_0;
            if ( !v43 )
              goto LABEL_69;
          }
          v42 = dnsmasq_daemon_0;
          auth_dns = 1;
        }
LABEL_69:
        v44 = type;
        goto LABEL_70;
      }
    }
  }
}
