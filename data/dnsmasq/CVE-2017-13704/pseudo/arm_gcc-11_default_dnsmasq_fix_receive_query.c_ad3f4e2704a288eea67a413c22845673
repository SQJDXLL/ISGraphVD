void __cdecl receive_query(listener *listen, time_t now)
{
  int v2; // r3
  cmsghdr *msg_control; // r3
  uint32_t v4; // r1
  __int64 v5; // r2
  int v6; // r3
  const char *v7; // r2
  int v8; // r1
  int v9; // r1
  unsigned __int16 type; // [sp+26h] [bp-F6h] BYREF
  unsigned __int16 udp_size; // [sp+28h] [bp-F4h]
  unsigned __int16 flags; // [sp+2Ah] [bp-F2h]
  in_addr netmask; // [sp+2Ch] [bp-F0h]
  in_addr dst_addr_4; // [sp+30h] [bp-ECh]
  int auth_dns; // [sp+34h] [bp-E8h] BYREF
  union {unsigned __int8 *c;in_pktinfo *p;} p; // [sp+38h] [bp-E4h] BYREF
  int if_index; // [sp+3Ch] [bp-E0h]
  int do_bit; // [sp+40h] [bp-DCh]
  int have_pseudoheader; // [sp+44h] [bp-D8h]
  int local_auth; // [sp+48h] [bp-D4h]
  cmsghdr *cmptr; // [sp+4Ch] [bp-D0h]
  addrlist *addr; // [sp+50h] [bp-CCh]
  irec *iface; // [sp+54h] [bp-C8h]
  auth_zone *zone; // [sp+58h] [bp-C4h]
  int ad_reqd; // [sp+5Ch] [bp-C0h]
  dns_header *header; // [sp+60h] [bp-BCh]
  int check_dst; // [sp+64h] [bp-B8h]
  ssize_t n; // [sp+68h] [bp-B4h]
  char *types; // [sp+6Ch] [bp-B0h]
  unsigned __int8 *t_cp; // [sp+70h] [bp-ACh]
  unsigned __int8 *t_cp_0; // [sp+74h] [bp-A8h]
  size_t m; // [sp+78h] [bp-A4h]
  msghdr msg; // [sp+7Ch] [bp-A0h] BYREF
  iovec iov[1]; // [sp+98h] [bp-84h] BYREF
  all_addr dst_addr; // [sp+A0h] [bp-7Ch] BYREF
  mysockaddr source_addr; // [sp+B0h] [bp-6Ch] BYREF
  union {cmsghdr align;char control6[32];char control[24];} control_u; // [sp+CCh] [bp-50h] BYREF
  ifreq ifr; // [sp+ECh] [bp-30h] BYREF

  header = *(dns_header **)(dnsmasq_daemon_0 + 476);
  udp_size = 512;
  if_index = 0;
  auth_dns = 0;
  do_bit = 0;
  have_pseudoheader = 0;
  local_auth = 0;
  v2 = (*dnsmasq_daemon_0 & 0x2000) == 0 || listen->family == 10;
  check_dst = v2;
  *(_DWORD *)(dnsmasq_daemon_0 + 528) = 0;
  dst_addr.addr.addr4.s_addr = 0;
  dst_addr_4.s_addr = 0;
  netmask.s_addr = 0;
  if ( (*dnsmasq_daemon_0 & 0x2000) != 0 )
  {
    if ( listen->iface )
    {
      auth_dns = listen->iface->dns_auth;
      if ( listen->family == 2 )
      {
        dst_addr.addr.addr4.s_addr = listen->iface->addr.in.sin_addr.s_addr;
        dst_addr_4.s_addr = dst_addr.addr.addr4.s_addr;
        netmask.s_addr = listen->iface->netmask.s_addr;
      }
    }
  }
  iov[0].iov_base = *(void **)(dnsmasq_daemon_0 + 476);
  iov[0].iov_len = *(unsigned __int16 *)(dnsmasq_daemon_0 + 0x1B0);
  msg.msg_control = &control_u;
  msg.msg_controllen = 32;
  msg.msg_flags = 0;
  msg.msg_name = &source_addr;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  msg.msg_iovlen = 1;
  n = recvmsg(listen->fd, &msg, 0);
  if ( n != -1 && n > 11 && (msg.msg_flags & 0x20) == 0 && (header->hb3 & 0x80u) == 0 )
  {
    memset((void *)(*(_DWORD *)(dnsmasq_daemon_0 + 476) + n), 0, *(unsigned __int16 *)(dnsmasq_daemon_0 + 0x1B0) - n);
    source_addr.sa.sa_family = listen->family;
    if ( listen->family == 2 )
    {
      if ( !source_addr.in.sin_port )
        return;
    }
    else
    {
      if ( !source_addr.in.sin_port )
        return;
      source_addr.in.sin_addr.s_addr = 0;
    }
    if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x20000) != 0 )
    {
      if ( listen->family == 10 )
      {
        for ( addr = *(addrlist **)(dnsmasq_daemon_0 + 1136);
              addr && ((addr->flags & 2) == 0 || !is_same_net6(addr, &source_addr.in6.sin6_addr, addr->prefixlen));
              addr = addr->next )
        {
          ;
        }
      }
      else
      {
        for ( addr = *(addrlist **)(dnsmasq_daemon_0 + 1136); addr; addr = addr->next )
        {
          p.c = (unsigned __int8 *)htonl(-1 << (0x20 - addr->prefixlen));
          if ( (addr->flags & 2) == 0 )
          {
            if ( is_same_net(addr->addr.addr.addr4.s_addr, source_addr.in.sin_addr.s_addr, p.c) )
              break;
          }
        }
      }
      if ( !addr )
      {
        if ( !warned_2 )
        {
          my_syslog(4, "Ignoring query from non-local network");
          warned_2 = 1;
        }
        return;
      }
    }
    if ( check_dst )
    {
      if ( msg.msg_controllen <= 0xB )
        return;
      if ( listen->family == 2 )
      {
        for ( cmptr = (cmsghdr *)msg.msg_control; cmptr; cmptr = _cmsg_nxthdr(&msg, cmptr) )
        {
          if ( !cmptr->cmsg_level && cmptr->cmsg_type == 8 )
          {
            p.c = cmptr->__cmsg_data;
            dst_addr.addr.addr4.s_addr = *(_DWORD *)&cmptr->__cmsg_data[4];
            dst_addr_4.s_addr = dst_addr.addr.addr4.s_addr;
            if_index = *(_DWORD *)cmptr->__cmsg_data;
          }
        }
      }
      if ( listen->family == 10 )
      {
        if ( msg.msg_controllen <= 0xB )
          msg_control = 0;
        else
          msg_control = (cmsghdr *)msg.msg_control;
        for ( cmptr = msg_control; cmptr; cmptr = _cmsg_nxthdr(&msg, cmptr) )
        {
          if ( cmptr->cmsg_level == 41 && cmptr->cmsg_type == *(_DWORD *)(dnsmasq_daemon_0 + 1132) )
          {
            p.c = cmptr->__cmsg_data;
            v4 = *(_DWORD *)&cmptr->__cmsg_data[4];
            v5 = *(_QWORD *)&cmptr->__cmsg_data[8];
            dst_addr.addr.addr4.s_addr = *(_DWORD *)cmptr->__cmsg_data;
            dst_addr.addr.addr6.__in6_u.__u6_addr32[1] = v4;
            *((_QWORD *)&dst_addr.addr.dnssec + 1) = v5;
            if_index = *(_DWORD *)&cmptr->__cmsg_data[16];
          }
        }
      }
      if ( !indextoname(listen->fd, if_index, &ifr) )
        return;
      if ( !iface_check(listen->family, &dst_addr, &ifr, &auth_dns) )
      {
        if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) == 0 )
          enumerate_interfaces(0);
        if ( !loopback_exception(listen->fd, listen->family, &dst_addr, &ifr)
          && !label_exception(if_index, listen->family, &dst_addr) )
        {
          return;
        }
      }
      if ( listen->family == 2 && (*dnsmasq_daemon_0 & 0x40000) != 0 )
      {
        for ( iface = *(irec **)(dnsmasq_daemon_0 + 508);
              iface && (iface->addr.sa.sa_family != 2 || iface->addr.in.sin_addr.s_addr != dst_addr_4.s_addr);
              iface = iface->next )
        {
          ;
        }
        if ( !iface && (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) == 0 )
          enumerate_interfaces(0);
        for ( iface = *(irec **)(dnsmasq_daemon_0 + 508);
              iface && (iface->addr.sa.sa_family != 2 || iface->addr.in.sin_addr.s_addr != dst_addr_4.s_addr);
              iface = iface->next )
        {
          ;
        }
        if ( iface )
          netmask.s_addr = iface->netmask.s_addr;
        else
          dst_addr_4.s_addr = 0;
      }
    }
    v6 = dnsmasq_daemon_0;
    ++*(_DWORD *)(dnsmasq_daemon_0 + 1140);
    *(_DWORD *)(dnsmasq_daemon_0 + 1144) = *(_DWORD *)(v6 + 1140);
    *(_DWORD *)(dnsmasq_daemon_0 + 1148) = &source_addr;
    if ( !extract_request(header, n, *(_DWORD *)(dnsmasq_daemon_0 + 484), &type) )
      goto LABEL_117;
    if ( auth_dns )
      v7 = "auth";
    else
      v7 = "query";
    types = (char *)querystr(v7, type);
    if ( listen->family == 2 )
      log_query(524424, *(_DWORD *)(dnsmasq_daemon_0 + 484), &source_addr.in6.sin6_flowinfo, types);
    else
      log_query(524552, *(_DWORD *)(dnsmasq_daemon_0 + 484), &source_addr.in6.sin6_addr, types);
    if ( !auth_dns && (*dnsmasq_daemon_0 & 0x40000) == 0 )
    {
      for ( zone = *(auth_zone **)(dnsmasq_daemon_0 + 80); zone; zone = zone->next )
      {
        if ( in_zone(zone, *(_DWORD *)(dnsmasq_daemon_0 + 484), 0) )
        {
          auth_dns = 1;
          local_auth = 1;
          break;
        }
      }
    }
    if ( !detect_loop(*(_DWORD *)(dnsmasq_daemon_0 + 484), type) )
    {
LABEL_117:
      if ( find_pseudoheader(header, n, 0, &p, 0, 0) )
      {
        have_pseudoheader = 1;
        t_cp = p.c;
        udp_size = _byteswap_ushort(*(_WORD *)p.c);
        p.c += 2;
        p.c += 2;
        t_cp_0 = p.c;
        flags = _byteswap_ushort(*(_WORD *)p.c);
        p.c += 2;
        if ( (flags & 0x8000u) != 0 )
          do_bit = 1;
        if ( udp_size > (unsigned int)*(unsigned __int16 *)(dnsmasq_daemon_0 + 0x1B0) )
          udp_size = *(_WORD *)(dnsmasq_daemon_0 + 0x1B0);
      }
      if ( auth_dns )
      {
        m = answer_auth(header, (char *)header + udp_size, n, now, &source_addr, local_auth, do_bit, have_pseudoheader);
        if ( m )
        {
          v8 = (*dnsmasq_daemon_0 & 0x2000) != 0 || (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) != 0;
          send_from(listen->fd, v8, (char *)header, m, &source_addr, &dst_addr, if_index);
          ++*(_DWORD *)(dnsmasq_daemon_0 + 496);
        }
      }
      else
      {
        ad_reqd = do_bit;
        if ( (header->hb4 & 0x20) != 0 )
          ad_reqd = 1;
        m = answer_request(
              header,
              (char *)header + udp_size,
              n,
              dst_addr_4.s_addr,
              netmask.s_addr,
              now,
              ad_reqd,
              do_bit,
              have_pseudoheader);
        if ( m )
        {
          v9 = (*dnsmasq_daemon_0 & 0x2000) != 0 || (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) != 0;
          send_from(listen->fd, v9, (char *)header, m, &source_addr, &dst_addr, if_index);
          ++*(_DWORD *)(dnsmasq_daemon_0 + 488);
        }
        else if ( forward_query(listen->fd, &source_addr, &dst_addr, if_index, header, n, now, 0u, ad_reqd, do_bit) )
        {
          ++*(_DWORD *)(dnsmasq_daemon_0 + 492);
        }
        else
        {
          ++*(_DWORD *)(dnsmasq_daemon_0 + 488);
        }
      }
    }
  }
}
