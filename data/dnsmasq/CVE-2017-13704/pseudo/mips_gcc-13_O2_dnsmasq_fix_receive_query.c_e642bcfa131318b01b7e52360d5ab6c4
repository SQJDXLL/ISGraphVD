void __fastcall receive_query(listener *listen, time_t now)
{
  int v2; // $v0
  int s_addr; // $s1
  dns_header *v4; // $s4
  unsigned int iface; // $s5
  int family; // $a0
  irec *v8; // $v1
  int fd; // $a0
  signed int v10; // $s7
  int v11; // $s6
  char *v12; // $a3
  int v13; // $v0
  int v14; // $a1
  int v15; // $a0
  int v16; // $a0
  in6_addr *p_sin6_addr; // $a1
  int v18; // $v0
  int v19; // $a0
  unsigned int *v20; // $a1
  unsigned int v21; // $v0
  unsigned int v22; // $a0
  _BOOL4 v23; // $a2
  unsigned int v24; // $v0
  uint32_t v25; // $a2
  uint32_t v26; // $a0
  uint32_t v27; // $v0
  int v28; // $v0
  unsigned int *msg_control; // $a1
  unsigned int v30; // $v0
  unsigned int v31; // $v0
  unsigned int v32; // $a0
  _BOOL4 v33; // $a2
  unsigned int v34; // $v0
  _DWORD *v35; // $v0
  int v36; // $a0
  int v37; // $a2
  const char *v38; // $a0
  int v39; // $a3
  int v40; // $v0
  int v41; // $a0
  int v42; // $a1
  unsigned int v43; // $a1
  unsigned int v44; // $s6
  char *v45; // $a1
  int v46; // $t0
  size_t v47; // $a3
  int v48; // $a1
  size_t v49; // $a3
  int v50; // $a1
  int v51; // $a0
  int v52; // $a1
  int v53; // [sp+24h] [-BCh]
  int ad_reqdb; // [sp+38h] [-A8h]
  int ad_reqdc; // [sp+38h] [-A8h]
  int ad_reqd; // [sp+38h] [-A8h]
  int ad_reqda; // [sp+38h] [-A8h]
  in6_addr *v58; // [sp+3Ch] [-A4h]
  unsigned __int16 type; // [sp+42h] [-9Eh] BYREF
  unsigned __int8 *t_cp; // [sp+44h] [-9Ch] BYREF
  int auth_dns; // [sp+48h] [-98h] BYREF
  msghdr msg; // [sp+4Ch] [-94h] BYREF
  iovec iov[1]; // [sp+68h] [-78h] BYREF
  all_addr dst_addr; // [sp+70h] [-70h] BYREF
  mysockaddr source_addr; // [sp+80h] [-60h] BYREF
  union {cmsghdr align;char control6[32];char control[24];} control_u; // [sp+9Ch] [-44h] BYREF
  ifreq ifr; // [sp+BCh] [-24h] BYREF

  v2 = dnsmasq_daemon_0;
  s_addr = *dnsmasq_daemon_0 & 0x2000;
  v4 = *(dns_header **)(dnsmasq_daemon_0 + 476);
  auth_dns = 0;
  iface = 1;
  if ( s_addr )
  {
    family = listen->family;
    v8 = listen->iface;
    iface = family == 0xA;
    *(_DWORD *)(dnsmasq_daemon_0 + 528) = 0;
    dst_addr.addr.addr4.s_addr = 0;
    if ( v8 && (auth_dns = v8->dns_auth, family == 2) )
    {
      s_addr = v8->addr.in.sin_addr.s_addr;
      dst_addr.addr.addr4.s_addr = s_addr;
    }
    else
    {
      s_addr = 0;
    }
  }
  else
  {
    *(_DWORD *)(dnsmasq_daemon_0 + 528) = 0;
    dst_addr.addr.addr4.s_addr = 0;
  }
  iov[0].iov_len = *(unsigned __int16 *)(v2 + 432);
  msg.msg_control = &control_u;
  msg.msg_controllen = 32;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  fd = listen->fd;
  iov[0].iov_base = v4;
  msg.msg_flags = 0;
  msg.msg_name = &source_addr;
  msg.msg_iovlen = 1;
  v10 = recvmsg(fd, &msg, 0);
  if ( v10 < 12 )
    return;
  v11 = msg.msg_flags & 0x20;
  if ( (msg.msg_flags & 0x20) != 0 || (v4->hb3 & 0x80u) != 0 )
    return;
  memset((void *)(*(_DWORD *)(dnsmasq_daemon_0 + 476) + v10), 0, *(unsigned __int16 *)(dnsmasq_daemon_0 + 432) - v10);
  v13 = listen->family;
  source_addr.sa.sa_family = v13;
  if ( v13 == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
    v14 = dnsmasq_daemon_0;
    if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x20000) == 0 )
      goto LABEL_18;
    goto LABEL_34;
  }
  if ( !source_addr.in.sin_port )
    return;
  v14 = dnsmasq_daemon_0;
  v15 = *(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x20000;
  source_addr.in.sin_addr.s_addr = 0;
  if ( !v15 )
    goto LABEL_18;
  v16 = *(_DWORD *)(dnsmasq_daemon_0 + 1136);
  if ( v13 != 10 )
  {
LABEL_34:
    v12 = *(char **)(v14 + 1136);
    if ( !v12 )
      goto LABEL_40;
    while ( 1 )
    {
      if ( (*((_DWORD *)v12 + 4) & 2) == 0 )
      {
        ad_reqdc = (int)v12;
        v28 = is_same_net(*(_DWORD *)v12, source_addr.in.sin_addr.s_addr, -1 << (32 - *((_DWORD *)v12 + 5)));
        v12 = (char *)ad_reqdc;
        if ( v28 )
          goto LABEL_18;
      }
      v12 = (char *)*((_DWORD *)v12 + 6);
      if ( !v12 )
        goto LABEL_40;
    }
  }
  p_sin6_addr = &source_addr.in6.sin6_addr;
  if ( !v16 )
  {
LABEL_40:
    if ( !warned_2 )
    {
      my_syslog(4, "Ignoring query from non-local network");
      warned_2 = 1;
    }
    return;
  }
  while ( 1 )
  {
    if ( (*(_DWORD *)(v16 + 16) & 2) != 0 )
    {
      v58 = p_sin6_addr;
      ad_reqdb = v16;
      v18 = is_same_net6();
      v16 = ad_reqdb;
      p_sin6_addr = v58;
      if ( v18 )
        break;
    }
    v16 = *(_DWORD *)(v16 + 24);
    if ( !v16 )
      goto LABEL_40;
  }
LABEL_18:
  if ( !iface )
  {
    v35 = (_DWORD *)dnsmasq_daemon_0;
    goto LABEL_59;
  }
  if ( msg.msg_controllen >= 0xC )
  {
    v19 = listen->family;
    if ( v19 == 2 )
    {
      msg_control = (unsigned int *)msg.msg_control;
      iface = 0;
      if ( msg.msg_control )
      {
        v12 = (char *)msg.msg_control + msg.msg_controllen;
        if ( *((_DWORD *)msg.msg_control + 1) )
          goto LABEL_47;
        v30 = *((_DWORD *)msg.msg_control + 2);
LABEL_45:
        if ( v30 == 8 )
        {
          s_addr = msg_control[4];
          iface = msg_control[3];
          dst_addr.addr.addr4.s_addr = s_addr;
        }
LABEL_47:
        while ( 1 )
        {
          v31 = *msg_control;
          v32 = (-*msg_control & 3) + 12;
          if ( *msg_control < 0xC )
            break;
          if ( v12 - (char *)msg_control < v32 )
            break;
          v33 = v12 - (char *)msg_control - v32 < v31;
          v34 = v31 + 3;
          if ( v33 )
            break;
          msg_control = (unsigned int *)((char *)msg_control + (v34 & 0xFFFFFFFC));
          if ( !msg_control[1] )
          {
            v30 = msg_control[2];
            goto LABEL_45;
          }
        }
      }
    }
    else
    {
      v20 = (unsigned int *)msg.msg_control;
      if ( v19 == 10 && (v12 = (char *)msg.msg_control + msg.msg_controllen, msg.msg_control) )
      {
        iface = 0;
        if ( *((_DWORD *)msg.msg_control + 1) == 41 )
          goto LABEL_28;
        while ( 1 )
        {
          v21 = *v20;
          v22 = (-*v20 & 3) + 12;
          if ( *v20 < 0xC )
            break;
          if ( v12 - (char *)v20 < v22 )
            break;
          v23 = v12 - (char *)v20 - v22 < v21;
          v24 = v21 + 3;
          if ( v23 )
            break;
          v20 = (unsigned int *)((char *)v20 + (v24 & 0xFFFFFFFC));
          if ( v20[1] == 41 )
          {
LABEL_28:
            if ( v20[2] == *(_DWORD *)(dnsmasq_daemon_0 + 1132) )
            {
              v25 = v20[4];
              v26 = v20[5];
              v27 = v20[6];
              iface = v20[7];
              dst_addr.addr.addr4.s_addr = v20[3];
              dst_addr.addr.addr6.__in6_u.__u6_addr32[1] = v25;
              dst_addr.addr.addr6.__in6_u.__u6_addr32[2] = v26;
              dst_addr.addr.addr6.__in6_u.__u6_addr32[3] = v27;
            }
          }
        }
      }
      else
      {
        iface = 0;
      }
    }
    if ( indextoname(listen->fd, iface, &ifr, v12) )
    {
      if ( iface_check(listen->family, &dst_addr, &ifr, &auth_dns) )
        goto LABEL_58;
      if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) == 0 )
        enumerate_interfaces(0);
      if ( loopback_exception(listen->fd, listen->family, &dst_addr, &ifr)
        || label_exception(iface, listen->family, &dst_addr) )
      {
LABEL_58:
        v35 = (_DWORD *)dnsmasq_daemon_0;
        if ( listen->family == 2 && (*dnsmasq_daemon_0 & 0x40000) != 0 )
        {
          v51 = *(_DWORD *)(dnsmasq_daemon_0 + 508);
          v52 = v51;
          if ( v51 )
          {
            while ( *(_WORD *)v52 != 2 || *(_DWORD *)(v52 + 4) != s_addr )
            {
              v52 = *(_DWORD *)(v52 + 80);
              if ( !v52 )
              {
                if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) != 0 )
                  break;
                goto LABEL_116;
              }
            }
LABEL_105:
            while ( *(_WORD *)v51 != 2 || *(_DWORD *)(v51 + 4) != s_addr )
            {
              v51 = *(_DWORD *)(v51 + 80);
              if ( !v51 )
                goto LABEL_114;
            }
          }
          else if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) != 0 )
          {
            v35 = (_DWORD *)dnsmasq_daemon_0;
LABEL_114:
            s_addr = 0;
          }
          else
          {
LABEL_116:
            enumerate_interfaces(0);
            v35 = (_DWORD *)dnsmasq_daemon_0;
            v51 = *(_DWORD *)(dnsmasq_daemon_0 + 508);
            if ( v51 )
              goto LABEL_105;
            s_addr = 0;
          }
        }
LABEL_59:
        v36 = v35[285] + 1;
        v37 = v35[121];
        v35[285] = v36;
        v35[286] = v36;
        v35[287] = &source_addr;
        if ( !extract_request(v4, v10, v37, &type) )
        {
LABEL_73:
          if ( find_pseudoheader(v4, v10, 0, &t_cp) )
          {
            v43 = *(unsigned __int16 *)(dnsmasq_daemon_0 + 432);
            v44 = t_cp[4];
            if ( (t_cp[1] | (*t_cp << 8)) < v43 )
              v43 = t_cp[1] | (*t_cp << 8);
            t_cp += 6;
            v11 = v44 >> 7;
          }
          else
          {
            v43 = 512;
          }
          v45 = (char *)v4 + v43;
          if ( auth_dns )
          {
            v49 = answer_auth(v4, v45, v10, now);
            if ( v49 )
            {
              if ( (*dnsmasq_daemon_0 & 0x2000) != 0 )
                v50 = 1;
              else
                v50 = (*(_DWORD *)(dnsmasq_daemon_0 + 4) >> 7) & 1;
              send_from(listen->fd, v50, (char *)v4, v49, &source_addr, &dst_addr, iface);
              ++*(_DWORD *)(dnsmasq_daemon_0 + 496);
            }
          }
          else
          {
            v46 = 1;
            if ( (v4->hb4 & 0x20) == 0 )
              v46 = v11;
            ad_reqda = v46;
            v47 = answer_request(v4, v45, v10, s_addr);
            if ( v47 )
            {
              if ( (*dnsmasq_daemon_0 & 0x2000) != 0 )
                v48 = 1;
              else
                v48 = (*(_DWORD *)(dnsmasq_daemon_0 + 4) >> 7) & 1;
              send_from(listen->fd, v48, (char *)v4, v47, &source_addr, &dst_addr, iface);
              ++*(_DWORD *)(dnsmasq_daemon_0 + 488);
            }
            else if ( forward_query(listen->fd, &source_addr, &dst_addr, iface, v4, v10, now, 0u, ad_reqda, v53) )
            {
              ++*(_DWORD *)(dnsmasq_daemon_0 + 492);
            }
            else
            {
              ++*(_DWORD *)(dnsmasq_daemon_0 + 488);
            }
          }
          return;
        }
        if ( auth_dns )
          v38 = "auth";
        else
          v38 = "query";
        v39 = querystr(v38, type);
        if ( listen->family == 2 )
          log_query(524424, *(_DWORD *)(dnsmasq_daemon_0 + 484), &source_addr.in6.sin6_flowinfo, v39);
        else
          log_query(524552, *(_DWORD *)(dnsmasq_daemon_0 + 484), &source_addr.in6.sin6_addr, v39);
        v40 = dnsmasq_daemon_0;
        if ( !auth_dns && (*dnsmasq_daemon_0 & 0x40000) == 0 )
        {
          v41 = *(_DWORD *)(dnsmasq_daemon_0 + 80);
          v42 = type;
          if ( !v41 )
          {
LABEL_72:
            if ( detect_loop(*(_DWORD *)(v40 + 484), v42) )
              return;
            goto LABEL_73;
          }
          while ( 1 )
          {
            ad_reqd = v41;
            if ( in_zone(v41, *(_DWORD *)(v40 + 484), 0) )
              break;
            v41 = *(_DWORD *)(ad_reqd + 16);
            v40 = dnsmasq_daemon_0;
            if ( !v41 )
              goto LABEL_71;
          }
          v40 = dnsmasq_daemon_0;
          auth_dns = 1;
        }
LABEL_71:
        v42 = type;
        goto LABEL_72;
      }
    }
  }
}
