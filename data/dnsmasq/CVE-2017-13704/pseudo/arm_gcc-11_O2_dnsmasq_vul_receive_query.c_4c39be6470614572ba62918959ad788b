void __fastcall receive_query(listener *listen, time_t now)
{
  in_addr_t v2; // r6
  int v3; // r3
  dns_header *v5; // r9
  int s_addr; // r4
  int family; // r1
  irec *iface; // r2
  unsigned int v9; // r11
  int fd; // r0
  signed int v11; // r7
  int v12; // r3
  int v13; // r2
  _DWORD *v14; // r8
  unsigned int v15; // r3
  char *v16; // r12
  char *v17; // lr
  uint32_t v18; // r1
  __int64 v19; // r2
  unsigned int v20; // r2
  _DWORD *v21; // r3
  int v22; // r2
  int v23; // r8
  char *v24; // r0
  int v25; // r0
  uint32_t *v26; // r2
  int v27; // r3
  int v28; // r0
  int v29; // r2
  int v30; // r4
  int pseudoheader; // r0
  unsigned int v32; // r1
  unsigned int v33; // r0
  unsigned int v34; // r3
  unsigned int v35; // r0
  int v36; // r3
  char *v37; // r1
  int v38; // r3
  int v39; // r4
  size_t v40; // r3
  unsigned int v41; // r1
  _DWORD *v42; // r8
  int v43; // r1
  unsigned int v44; // r2
  unsigned int *msg_control; // r1
  char *v46; // lr
  unsigned int v47; // r2
  size_t v48; // r3
  unsigned int v49; // r1
  int v50; // r2
  int v51; // r1
  int v52; // r0
  int v53; // r3
  int v54; // r3
  int nowa; // [sp+14h] [bp-DCh]
  int v57; // [sp+20h] [bp-D0h]
  int v58; // [sp+24h] [bp-CCh]
  unsigned __int16 type; // [sp+2Ah] [bp-C6h] BYREF
  unsigned __int8 *pheader; // [sp+2Ch] [bp-C4h]
  int auth_dns; // [sp+30h] [bp-C0h] BYREF
  msghdr msg; // [sp+34h] [bp-BCh] BYREF
  iovec iov[1]; // [sp+50h] [bp-A0h] BYREF
  all_addr dst_addr; // [sp+58h] [bp-98h] BYREF
  mysockaddr source_addr; // [sp+68h] [bp-88h] BYREF
  union {cmsghdr align;char control6[32];char control[24];} control_u; // [sp+84h] [bp-6Ch] BYREF
  ifreq ifr; // [sp+A4h] [bp-4Ch] BYREF

  v2 = 0;
  v3 = dnsmasq_daemon_0;
  v5 = *(dns_header **)(dnsmasq_daemon_0 + 476);
  s_addr = *dnsmasq_daemon_0 & 0x2000;
  auth_dns = 0;
  if ( s_addr )
  {
    family = listen->family;
    iface = listen->iface;
    dst_addr.addr.addr4.s_addr = 0;
    v9 = family == 0xA;
    *(_DWORD *)(dnsmasq_daemon_0 + 528) = 0;
    if ( iface && (auth_dns = iface->dns_auth, family == 2) )
    {
      s_addr = iface->addr.in.sin_addr.s_addr;
      v2 = iface->netmask.s_addr;
      dst_addr.addr.addr4.s_addr = s_addr;
    }
    else
    {
      s_addr = 0;
    }
  }
  else
  {
    v2 = 0;
    v9 = 1;
    *(_DWORD *)(dnsmasq_daemon_0 + 528) = 0;
    dst_addr.addr.addr4.s_addr = 0;
  }
  iov[0].iov_len = *(unsigned __int16 *)(v3 + 0x1B0);
  msg.msg_control = &control_u;
  msg.msg_controllen = 32;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  fd = listen->fd;
  iov[0].iov_base = v5;
  msg.msg_flags = 0;
  msg.msg_name = &source_addr;
  msg.msg_iovlen = 1;
  v11 = recvmsg(fd, &msg, 0);
  if ( v11 <= 11 )
    return;
  v57 = msg.msg_flags & 0x20;
  if ( (msg.msg_flags & 0x20) != 0 || (v5->hb3 & 0x80u) != 0 )
    return;
  v12 = listen->family;
  source_addr.sa.sa_family = v12;
  if ( v12 == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
    v13 = dnsmasq_daemon_0;
    if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x20000) == 0 )
      goto LABEL_18;
  }
  else
  {
    if ( !source_addr.in.sin_port )
      return;
    source_addr.in.sin_addr.s_addr = msg.msg_flags & 0x20;
    v13 = dnsmasq_daemon_0;
    if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x20000) == 0 )
      goto LABEL_18;
    v14 = *(_DWORD **)(dnsmasq_daemon_0 + 1136);
    if ( v12 == 10 )
    {
      if ( v14 )
      {
        while ( (v14[4] & 2) == 0 || !is_same_net6(v14, &source_addr.in6.sin6_addr, v14[5]) )
        {
          v14 = (_DWORD *)v14[6];
          if ( !v14 )
            goto LABEL_115;
        }
        goto LABEL_18;
      }
LABEL_115:
      if ( !warned_2 )
      {
        my_syslog(4, "Ignoring query from non-local network");
        warned_2 = 1;
      }
      return;
    }
  }
  v42 = *(_DWORD **)(v13 + 1136);
  if ( !v42 )
    goto LABEL_115;
  while ( 1 )
  {
    v43 = -1 << (0x20 - v42[5]);
    v44 = (((unsigned int)v43 ^ __ROR4__(v43, 0x10)) >> 8) & 0xFFFF00FF ^ __ROR4__(v43, 8);
    if ( (v42[4] & 2) == 0 )
    {
      if ( is_same_net(*v42, source_addr.in.sin_addr.s_addr, v44, -1) )
        break;
    }
    v42 = (_DWORD *)v42[6];
    if ( !v42 )
      goto LABEL_115;
  }
LABEL_18:
  if ( v9 )
  {
    if ( msg.msg_controllen <= 0xB )
      return;
    v15 = listen->family;
    if ( v15 == 2 )
    {
      msg_control = (unsigned int *)msg.msg_control;
      if ( msg.msg_control )
      {
        v46 = (char *)msg.msg_control + msg.msg_controllen;
        v9 = 0;
        if ( *((_DWORD *)msg.msg_control + 1) )
          goto LABEL_83;
LABEL_81:
        if ( msg_control[2] == 8 )
        {
          s_addr = msg_control[4];
          v9 = msg_control[3];
          dst_addr.addr.addr4.s_addr = s_addr;
        }
LABEL_83:
        while ( 1 )
        {
          v47 = *msg_control;
          v15 = (-*msg_control & 3) + 0xC;
          if ( *msg_control <= 0xB || v15 > v46 - (char *)msg_control || v47 > v46 - (char *)msg_control - v15 )
            goto LABEL_98;
          msg_control = (unsigned int *)((char *)msg_control + ((v47 + 3) & 0xFFFFFFFC));
          if ( !msg_control[1] )
            goto LABEL_81;
        }
      }
    }
    else if ( v15 == 10 )
    {
      v16 = (char *)msg.msg_control;
      if ( msg.msg_control )
      {
        v17 = (char *)msg.msg_control + msg.msg_controllen;
        v9 = 0;
        if ( *((_DWORD *)msg.msg_control + 1) != 41 )
          goto LABEL_26;
LABEL_24:
        if ( *((_DWORD *)v16 + 2) == *(_DWORD *)(dnsmasq_daemon_0 + 1132) )
        {
          v18 = *((_DWORD *)v16 + 4);
          v19 = *(_QWORD *)(v16 + 20);
          v9 = *((_DWORD *)v16 + 7);
          dst_addr.addr.addr4.s_addr = *((_DWORD *)v16 + 3);
          dst_addr.addr.addr6.__in6_u.__u6_addr32[1] = v18;
          *((_QWORD *)&dst_addr.addr.dnssec + 1) = v19;
        }
LABEL_26:
        while ( 1 )
        {
          v20 = *(_DWORD *)v16;
          v15 = (-*(_DWORD *)v16 & 3) + 0xC;
          if ( *(_DWORD *)v16 <= 0xBu || v15 > v17 - v16 || v20 > v17 - v16 - v15 )
            break;
          v16 += (v20 + 3) & 0xFFFFFFFC;
          if ( *((_DWORD *)v16 + 1) == 41 )
            goto LABEL_24;
        }
      }
      else
      {
        v9 = 0;
      }
      goto LABEL_98;
    }
    v9 = 0;
LABEL_98:
    if ( !indextoname(listen->fd, v9, &ifr, v15) )
      return;
    if ( !iface_check(listen->family, &dst_addr, &ifr, &auth_dns) )
    {
      if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) == 0 )
        ((void (*)(void))enumerate_interfaces)();
      if ( !loopback_exception(listen->fd, listen->family, &dst_addr, &ifr)
        && !label_exception(v9, listen->family, &dst_addr) )
      {
        return;
      }
    }
    v21 = (_DWORD *)dnsmasq_daemon_0;
    if ( listen->family == 2 && (*dnsmasq_daemon_0 & 0x40000) != 0 )
    {
      v50 = *(_DWORD *)(dnsmasq_daemon_0 + 508);
      if ( v50 )
      {
        v51 = *(_DWORD *)(dnsmasq_daemon_0 + 508);
        while ( *(_WORD *)v51 != 2 || *(_DWORD *)(v51 + 4) != s_addr )
        {
          v51 = *(_DWORD *)(v51 + 80);
          if ( !v51 )
          {
            if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) != 0 )
              break;
            goto LABEL_127;
          }
        }
LABEL_112:
        while ( *(_WORD *)v50 != 2 || *(_DWORD *)(v50 + 4) != s_addr )
        {
          v50 = *(_DWORD *)(v50 + 80);
          if ( !v50 )
            goto LABEL_128;
        }
        v2 = *(_DWORD *)(v50 + 28);
      }
      else
      {
        if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) == 0 )
        {
LABEL_127:
          enumerate_interfaces(0);
          v21 = (_DWORD *)dnsmasq_daemon_0;
          v50 = *(_DWORD *)(dnsmasq_daemon_0 + 508);
          if ( v50 )
            goto LABEL_112;
        }
LABEL_128:
        s_addr = v50;
      }
    }
    goto LABEL_32;
  }
  v21 = (_DWORD *)dnsmasq_daemon_0;
LABEL_32:
  v22 = v21[285];
  v21[287] = &source_addr;
  v21[285] = ++v22;
  v21[286] = v22;
  v23 = extract_request(v5, v11, v21[121], &type);
  if ( !v23 )
    goto LABEL_50;
  v24 = auth_dns ? "auth" : "query";
  v25 = querystr(v24, type);
  v26 = listen->family == 2 ? &source_addr.in6.sin6_flowinfo : (uint32_t *)&source_addr.in6.sin6_addr;
  v27 = v25;
  v28 = listen->family == 2 ? 524424 : 524552;
  log_query(v28, *(_DWORD *)(dnsmasq_daemon_0 + 484), v26, v27);
  v23 = auth_dns;
  v29 = dnsmasq_daemon_0;
  if ( auth_dns )
  {
    v23 = 0;
  }
  else if ( (*dnsmasq_daemon_0 & 0x40000) == 0 && *(_DWORD *)(dnsmasq_daemon_0 + 80) )
  {
    v58 = s_addr;
    v30 = *(_DWORD *)(dnsmasq_daemon_0 + 80);
    do
    {
      if ( in_zone(v30, *(_DWORD *)(v29 + 484), 0) )
      {
        s_addr = v58;
        v29 = dnsmasq_daemon_0;
        v23 = 1;
        auth_dns = 1;
        goto LABEL_49;
      }
      v30 = *(_DWORD *)(v30 + 16);
      v29 = dnsmasq_daemon_0;
    }
    while ( v30 );
    s_addr = v58;
    v23 = 0;
  }
LABEL_49:
  if ( !detect_loop(*(_DWORD *)(v29 + 484), type) )
  {
LABEL_50:
    pseudoheader = find_pseudoheader(v5, v11);
    if ( pseudoheader )
    {
      v32 = *(unsigned __int16 *)(dnsmasq_daemon_0 + 0x1B0);
      v33 = *pheader | (pheader[1] << 8);
      v34 = (unsigned __int16)((v33 >> 8) | ((_WORD)v33 << 8));
      v35 = pheader[4];
      if ( v32 >= v34 )
        v32 = v34;
      pheader += 6;
      v36 = v35 >> 7;
      pseudoheader = 1;
      v57 = v36;
    }
    else
    {
      v32 = 512;
    }
    v37 = (char *)v5 + v32;
    if ( auth_dns )
    {
      v48 = answer_auth(v5, v37, v11, now, &source_addr, v23, v57, pseudoheader);
      if ( v48 )
      {
        if ( (*dnsmasq_daemon_0 & 0x2000) != 0 )
          v49 = 1;
        else
          v49 = *(_DWORD *)(dnsmasq_daemon_0 + 4);
        if ( (*dnsmasq_daemon_0 & 0x2000) == 0 )
          v49 >>= 7;
        if ( (*dnsmasq_daemon_0 & 0x2000) == 0 )
          v49 &= 1u;
        send_from(listen->fd, v49, (char *)v5, v48, &source_addr, &dst_addr, v9);
        ++*(_DWORD *)(dnsmasq_daemon_0 + 496);
      }
    }
    else
    {
      v38 = s_addr;
      if ( (v5->hb4 & 0x20) != 0 )
        v39 = 1;
      else
        v39 = v57;
      v40 = answer_request(v5, v37, v11, v38, v2, now, v39, v57, pseudoheader);
      if ( v40 )
      {
        if ( (*dnsmasq_daemon_0 & 0x2000) != 0 )
          v41 = 1;
        else
          v41 = *(_DWORD *)(dnsmasq_daemon_0 + 4);
        if ( (*dnsmasq_daemon_0 & 0x2000) == 0 )
          v41 >>= 7;
        if ( (*dnsmasq_daemon_0 & 0x2000) == 0 )
          v41 &= 1u;
        send_from(listen->fd, v41, (char *)v5, v40, &source_addr, &dst_addr, v9);
        ++*(_DWORD *)(dnsmasq_daemon_0 + 488);
      }
      else
      {
        v52 = forward_query(listen->fd, &source_addr, &dst_addr, v9, v5, v11, now, 0u, v39, nowa);
        if ( v52 )
          v53 = *(_DWORD *)(dnsmasq_daemon_0 + 492);
        else
          v53 = *(_DWORD *)(dnsmasq_daemon_0 + 488);
        v54 = v53 + 1;
        if ( v52 )
          *(_DWORD *)(dnsmasq_daemon_0 + 492) = v54;
        else
          *(_DWORD *)(dnsmasq_daemon_0 + 488) = v54;
      }
    }
  }
}
