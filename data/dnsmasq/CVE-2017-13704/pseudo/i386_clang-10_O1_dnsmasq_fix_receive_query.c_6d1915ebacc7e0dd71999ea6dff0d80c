void __cdecl receive_query(listener *listen, dns_header *now)
{
  int v2; // eax
  char *v3; // ebp
  bool v4; // bl
  in_addr_t s_addr; // esi
  irec *v6; // ecx
  int v7; // ecx
  irec *iface; // ecx
  ssize_t v9; // eax
  unsigned int v10; // esi
  int family; // eax
  int v12; // ebp
  __uint32_t v13; // eax
  bool v14; // zf
  char v15; // bl
  mysockaddr *v16; // ebx
  mysockaddr *v17; // ebx
  struct cmsghdr *msg_control; // eax
  char *v19; // eax
  listener *v20; // edi
  int v21; // ecx
  in_addr_t v22; // edi
  __int64 v23; // xmm0_8
  int v24; // eax
  _DWORD *v25; // eax
  int v26; // ecx
  const char *v27; // ecx
  int v28; // eax
  int v29; // ecx
  int v30; // edi
  int v31; // eax
  int v32; // edx
  unsigned int v33; // ecx
  time_t v34; // ecx
  int v35; // eax
  int v36; // edx
  size_t v37; // eax
  int v38; // edx
  all_addr *v39; // edi
  time_t v40; // ebp
  size_t v41; // eax
  int v42; // esi
  int v43; // eax
  frec *v44; // [esp-4h] [ebp-D0h]
  int v45; // [esp+0h] [ebp-CCh]
  int v46; // [esp+4h] [ebp-C8h]
  mysockaddr *udpaddr; // [esp+8h] [ebp-C4h]
  char *v48; // [esp+Ch] [ebp-C0h]
  int v49; // [esp+Ch] [ebp-C0h]
  int dns_auth; // [esp+10h] [ebp-BCh] BYREF
  in_addr_t v51; // [esp+14h] [ebp-B8h]
  unsigned __int16 v52; // [esp+1Ah] [ebp-B2h] BYREF
  int v53; // [esp+1Ch] [ebp-B0h]
  all_addr source; // [esp+20h] [ebp-ACh] BYREF
  struct msghdr message; // [esp+30h] [ebp-9Ch] BYREF
  mysockaddr to; // [esp+50h] [ebp-7Ch] BYREF
  int v57[2]; // [esp+70h] [ebp-5Ch] BYREF
  int v58[8]; // [esp+78h] [ebp-54h] BYREF
  char v59; // [esp+98h] [ebp-34h] BYREF

  v2 = dnsmasq_daemon;
  v3 = *(char **)(dnsmasq_daemon + 476);
  dns_auth = 0;
  v4 = 1;
  if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) != 0 )
    v4 = listen->family == 10;
  *(_DWORD *)(dnsmasq_daemon + 528) = 0;
  source.addr.addr4.s_addr = 0;
  s_addr = 0;
  if ( (*(_BYTE *)(v2 + 1) & 0x20) != 0 && (v6 = listen->iface) != 0 )
  {
    dns_auth = v6->dns_auth;
    v7 = 0;
    if ( listen->family == 2 )
    {
      iface = listen->iface;
      s_addr = iface->addr.in.sin_addr.s_addr;
      source.addr.addr4.s_addr = s_addr;
      v7 = iface->netmask.s_addr;
    }
  }
  else
  {
    v7 = 0;
  }
  v53 = v7;
  v51 = s_addr;
  v57[0] = *(_DWORD *)(v2 + 476);
  v57[1] = *(unsigned __int16 *)(v2 + 432);
  message.msg_control = &v59;
  message.msg_controllen = 32;
  message.msg_flags = 0;
  message.msg_name = &to;
  message.msg_namelen = 28;
  message.msg_iov = (iovec *)v57;
  message.msg_iovlen = 1;
  v9 = recvmsg(listen->fd, &message, 0);
  if ( v9 < 12 || (message.msg_flags & 0x20) != 0 || v3[2] < 0 )
    return;
  v10 = v9;
  memset((void *)(v9 + *(_DWORD *)(dnsmasq_daemon + 476)), 0, *(unsigned __int16 *)(dnsmasq_daemon + 432) - v9);
  family = listen->family;
  to.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !to.in.sin_port )
      return;
  }
  else
  {
    if ( !to.in.sin_port )
      return;
    to.in.sin_addr.s_addr = 0;
  }
  if ( (*(_BYTE *)(dnsmasq_daemon + 6) & 2) != 0 )
  {
    v48 = v3;
    v12 = *(_DWORD *)(dnsmasq_daemon + 1136);
    if ( family == 10 )
    {
      while ( v12 )
      {
        if ( (*(_BYTE *)(v12 + 16) & 2) != 0 && is_same_net6(v12, &to.in6.sin6_addr, *(_DWORD *)(v12 + 20)) )
          goto LABEL_30;
        v12 = *(_DWORD *)(v12 + 24);
      }
      v12 = 0;
    }
    else
    {
      while ( v12 )
      {
        if ( (*(_BYTE *)(v12 + 16) & 2) == 0 )
        {
          v13 = _bswap_32(-1 << -*(_BYTE *)(v12 + 20));
          if ( is_same_net(*(_DWORD *)v12, to.in.sin_addr.s_addr, v13) )
            break;
        }
        v12 = *(_DWORD *)(v12 + 24);
      }
    }
LABEL_30:
    v14 = v12 == 0;
    v3 = v48;
    if ( v14 )
    {
      if ( !receive_query_warned )
      {
        my_syslog(4, "Ignoring query from non-local network");
        receive_query_warned = 1;
      }
      return;
    }
  }
  v49 = 0;
  if ( v4 )
  {
    v15 = 0;
    if ( message.msg_controllen >= 0xC )
    {
      v17 = 0;
      if ( listen->family == 2 )
      {
        msg_control = (struct cmsghdr *)message.msg_control;
        if ( message.msg_control )
        {
          v17 = 0;
          do
          {
            if ( !msg_control->cmsg_level && msg_control->cmsg_type == 8 )
            {
              v51 = *(_DWORD *)&msg_control->__cmsg_data[4];
              source.addr.addr4.s_addr = v51;
              v17 = *(mysockaddr **)msg_control->__cmsg_data;
            }
            msg_control = _cmsg_nxthdr(&message, msg_control);
          }
          while ( msg_control );
        }
      }
      if ( listen->family == 10 )
      {
        v19 = (char *)message.msg_control;
        if ( message.msg_control )
        {
          if ( message.msg_controllen >= 0xC )
          {
            do
            {
              if ( *((_DWORD *)v19 + 1) == 41 && *((_DWORD *)v19 + 2) == *(_DWORD *)(dnsmasq_daemon + 1132) )
              {
                v23 = *(_QWORD *)(v19 + 12);
                *((_QWORD *)&source.addr.dnssec + 1) = *(_QWORD *)(v19 + 20);
                *(_QWORD *)&source.addr.addr4.s_addr = v23;
                v17 = (mysockaddr *)*((_DWORD *)v19 + 7);
              }
              v19 = (char *)_cmsg_nxthdr(&message, (struct cmsghdr *)v19);
            }
            while ( v19 );
          }
        }
      }
      udpaddr = v17;
      v20 = listen;
      if ( !indextoname(listen->fd, v17, v58) )
        goto LABEL_71;
      if ( iface_check(listen->family, &source, v58, &dns_auth) )
        goto LABEL_51;
      if ( *(char *)(dnsmasq_daemon + 4) >= 0 )
        enumerate_interfaces(0);
      v20 = listen;
      if ( loopback_exception(listen->fd, listen->family, &source, v58) || label_exception(v17, listen->family, &source) )
      {
LABEL_51:
        v15 = 1;
        if ( v20->family == 2 && (*(_BYTE *)(dnsmasq_daemon + 2) & 4) != 0 )
        {
          v21 = *(_DWORD *)(dnsmasq_daemon + 508);
          v22 = v51;
          if ( v21 )
          {
            while ( *(_WORD *)v21 != 2 || *(_DWORD *)(v21 + 4) != v51 )
            {
              v21 = *(_DWORD *)(v21 + 80);
              if ( !v21 )
                goto LABEL_54;
            }
          }
          else
          {
LABEL_54:
            if ( *(char *)(dnsmasq_daemon + 4) >= 0 )
              enumerate_interfaces(0);
          }
          v24 = *(_DWORD *)(dnsmasq_daemon + 508);
          if ( v24 )
          {
            while ( *(_WORD *)v24 != 2 || *(_DWORD *)(v24 + 4) != v22 )
            {
              v24 = *(_DWORD *)(v24 + 80);
              if ( !v24 )
                goto LABEL_64;
            }
            v53 = *(_DWORD *)(v24 + 28);
          }
          else
          {
LABEL_64:
            v51 = 0;
          }
        }
      }
      else
      {
LABEL_71:
        v15 = 0;
      }
    }
    else
    {
      udpaddr = 0;
    }
    v14 = v15 == 0;
    v16 = udpaddr;
    if ( v14 )
      return;
  }
  else
  {
    v16 = 0;
  }
  v25 = (_DWORD *)dnsmasq_daemon;
  v26 = *(_DWORD *)(dnsmasq_daemon + 1140) + 1;
  *(_DWORD *)(dnsmasq_daemon + 1140) = v26;
  v25[286] = v26;
  v25[287] = &to;
  if ( !extract_request(v3, v10, v25[121], &v52) )
    goto LABEL_109;
  v27 = "auth";
  if ( !dns_auth )
    v27 = "query";
  v28 = querystr(v27, v52);
  v29 = *(_DWORD *)(dnsmasq_daemon + 484);
  if ( listen->family == 2 )
    log_query(524424, v29, &to.in6.sin6_flowinfo, v28);
  else
    log_query(524552, v29, &to.in6.sin6_addr, v28);
  if ( dns_auth )
  {
    v49 = 0;
  }
  else
  {
    v49 = 0;
    if ( (*(_BYTE *)(dnsmasq_daemon + 2) & 4) == 0 )
    {
      v30 = *(_DWORD *)(dnsmasq_daemon + 80);
      if ( v30 )
      {
        while ( !in_zone(v30, *(_DWORD *)(dnsmasq_daemon + 484), 0) )
        {
          v30 = *(_DWORD *)(v30 + 16);
          if ( !v30 )
            goto LABEL_87;
        }
        dns_auth = 1;
        v49 = 1;
      }
    }
  }
LABEL_87:
  if ( !detect_loop(*(_DWORD *)(dnsmasq_daemon + 484), v52) )
  {
LABEL_109:
    if ( find_pseudoheader(v3, v10, 0, v58, 0, 0) )
    {
      v31 = v58[0];
      LOWORD(v32) = __ROL2__(*(_WORD *)v58[0], 8);
      v58[0] += 4;
      v33 = *(unsigned __int8 *)v58[0];
      v58[0] = v31 + 6;
      v34 = v33 >> 7;
      if ( (unsigned __int16)v32 > (unsigned __int16)*(_DWORD *)(dnsmasq_daemon + 432) )
        v32 = *(_DWORD *)(dnsmasq_daemon + 432);
      v35 = (unsigned __int16)v32;
      v36 = 1;
    }
    else
    {
      v35 = 512;
      v36 = 0;
      v34 = 0;
    }
    if ( !dns_auth )
    {
      v14 = (v3[3] & 0x20) == 0;
      v39 = (all_addr *)v3;
      v40 = 1;
      if ( v14 )
        v40 = v34;
      v41 = answer_request(v39, (char *)v39 + v35, v10, v51, v53, now, v40, v34, v36);
      if ( v41 )
      {
        v42 = 1;
        if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
          v42 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
        send_from(listen->fd, v42, (char *)v39, v41, &to, &source, (unsigned int)v16);
        v43 = dnsmasq_daemon;
      }
      else
      {
        v14 = forward_query((int)&source, v16, v39, v10, now, 0, v40, v44, v45, v46) == 0;
        v43 = dnsmasq_daemon;
        if ( !v14 )
        {
          ++*(_DWORD *)(dnsmasq_daemon + 492);
          return;
        }
      }
      ++*(_DWORD *)(v43 + 488);
      return;
    }
    v37 = answer_auth(v3, &v3[v35], v10, now, &to, v49, v34, v36);
    if ( v37 )
    {
      v38 = 1;
      if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
        v38 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
      send_from(listen->fd, v38, v3, v37, &to, &source, (unsigned int)v16);
      ++*(_DWORD *)(dnsmasq_daemon + 496);
    }
  }
}
