void __fastcall receive_query(listener *listen, time_t now)
{
  in_addr_t s_addr; // r10
  _BOOL4 v5; // r5
  int v6; // r0
  dns_header *v7; // r11
  irec *iface; // r1
  bool v9; // zf
  in_addr_t v10; // r7
  ssize_t v11; // r0
  size_t v12; // r8
  int family; // r1
  int v14; // r0
  int v15; // r7
  int *v16; // r4
  int v17; // r0
  unsigned int v18; // r5
  struct cmsghdr *msg_control; // r1
  unsigned int v20; // r7
  char *v21; // r1
  int *v22; // lr
  uint32_t v23; // r3
  __int64 v24; // r4
  _DWORD *v25; // r0
  int v26; // r1
  int v27; // r2
  const char *v28; // r0
  int v29; // r3
  in6_addr *p_sin6_flowinfo; // r2
  int v31; // r0
  int v32; // r4
  int i; // r4
  unsigned int v34; // r1
  int v35; // r0
  int v36; // r5
  int v37; // r5
  int v38; // r1
  int v39; // r2
  unsigned int v40; // r3
  unsigned int v41; // r0
  int v42; // r1
  size_t v43; // r0
  int v44; // r2
  unsigned int v45; // r1
  int v46; // r4
  int v47; // r7
  size_t v48; // r3
  int fd; // r0
  int v50; // r1
  _DWORD *v51; // r0
  unsigned __int16 *v52; // r2
  int v53; // r3
  bool v54; // zf
  int v55; // r1
  bool v56; // zf
  int v57; // [sp+14h] [bp-CCh]
  unsigned int dst_iface; // [sp+18h] [bp-C8h]
  time_t v59; // [sp+1Ch] [bp-C4h]
  in_addr_t v60; // [sp+20h] [bp-C0h]
  int v61[8]; // [sp+24h] [bp-BCh] BYREF
  char v62; // [sp+44h] [bp-9Ch] BYREF
  struct msghdr message; // [sp+64h] [bp-7Ch] BYREF
  int v64[2]; // [sp+80h] [bp-60h] BYREF
  int dns_auth; // [sp+88h] [bp-58h] BYREF
  all_addr source; // [sp+8Ch] [bp-54h] BYREF
  unsigned __int16 v67; // [sp+9Eh] [bp-42h] BYREF
  mysockaddr udpaddr; // [sp+A0h] [bp-40h] BYREF

  s_addr = 0;
  v5 = 1;
  dns_auth = 0;
  v6 = dnsmasq_daemon;
  v7 = *(dns_header **)(dnsmasq_daemon + 476);
  if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) != 0 )
    v5 = listen->family == 0xA;
  source.addr.addr4.s_addr = 0;
  *(_DWORD *)(dnsmasq_daemon + 528) = 0;
  iface = (irec *)*(unsigned __int8 *)(v6 + 1);
  v9 = ((unsigned __int8)iface & 0x20) == 0;
  if ( ((unsigned __int8)iface & 0x20) != 0 )
  {
    iface = listen->iface;
    v9 = iface == 0;
  }
  if ( v9 )
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    dns_auth = iface->dns_auth;
    if ( listen->family == 2 )
    {
      s_addr = iface->addr.in.sin_addr.s_addr;
      v10 = iface->netmask.s_addr;
      source.addr.addr4.s_addr = s_addr;
    }
  }
  v64[0] = (int)v7;
  message.msg_controllen = 32;
  message.msg_control = &v62;
  message.msg_iovlen = 1;
  message.msg_iov = (iovec *)v64;
  message.msg_namelen = 28;
  message.msg_name = &udpaddr;
  v64[1] = *(unsigned __int16 *)(v6 + 432);
  message.msg_flags = 0;
  v11 = recvmsg(listen->fd, &message, 0);
  if ( v11 < 12 )
    return;
  v12 = v11;
  if ( (message.msg_flags & 0x20) != 0 || (v7->hb3 & 0x80u) != 0 )
    return;
  memset((void *)(*(_DWORD *)(dnsmasq_daemon + 476) + v11), 0, *(unsigned __int16 *)(dnsmasq_daemon + 432) - v11);
  family = listen->family;
  udpaddr.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !udpaddr.in.sin_port )
      return;
    v14 = dnsmasq_daemon;
    v60 = v10;
    v59 = now;
    if ( (*(_BYTE *)(dnsmasq_daemon + 6) & 2) != 0 )
    {
LABEL_49:
      for ( i = *(_DWORD *)(v14 + 1136); i; i = *(_DWORD *)(i + 24) )
      {
        if ( (*(_BYTE *)(i + 16) & 2) == 0 )
        {
          v34 = -1 << (0x20 - *(_DWORD *)(i + 20));
          if ( is_same_net(
                 *(_DWORD *)i,
                 udpaddr.in.sin_addr.s_addr,
                 (v34 << 8) & 0xFF0000 | (v34 << 24) | (v34 >> 8) & 0xFF00 | HIBYTE(v34)) )
          {
            goto LABEL_19;
          }
        }
      }
LABEL_53:
      if ( !receive_query_warned )
      {
        my_syslog(4, "Ignoring query from non-local network");
        receive_query_warned = 1;
      }
      return;
    }
  }
  else
  {
    if ( !udpaddr.in.sin_port )
      return;
    v60 = v10;
    v59 = now;
    udpaddr.in.sin_addr.s_addr = 0;
    v14 = dnsmasq_daemon;
    if ( (*(_BYTE *)(dnsmasq_daemon + 6) & 2) != 0 )
    {
      if ( family != 10 )
        goto LABEL_49;
      v32 = *(_DWORD *)(dnsmasq_daemon + 1136);
      if ( !v32 )
        goto LABEL_53;
      while ( (*(_BYTE *)(v32 + 16) & 2) == 0 || !is_same_net6(v32, &udpaddr.in6.sin6_addr, *(_DWORD *)(v32 + 20)) )
      {
        v32 = *(_DWORD *)(v32 + 24);
        if ( !v32 )
          goto LABEL_53;
      }
    }
  }
LABEL_19:
  v15 = 0;
  if ( v5 )
  {
    v16 = (int *)&dnsmasq_daemon;
    if ( message.msg_controllen < 0xC )
      return;
    v17 = listen->family;
    v18 = 0;
    if ( v17 == 2 )
    {
      msg_control = (struct cmsghdr *)message.msg_control;
      if ( !message.msg_control )
      {
        v18 = 0;
LABEL_86:
        if ( !indextoname(listen->fd, v18, v61) )
          return;
        if ( !iface_check(listen->family, &source, v61, &dns_auth) )
        {
          if ( (*(_BYTE *)(*v16 + 4) & 0x80) == 0 )
            enumerate_interfaces(0);
          if ( !loopback_exception(listen->fd, listen->family, &source, v61)
            && !label_exception(v18, listen->family, &source) )
          {
            return;
          }
        }
        if ( listen->family == 2 )
        {
          v50 = *v16;
          if ( (*(_BYTE *)(*v16 + 2) & 4) != 0 )
          {
            v51 = *(_DWORD **)(v50 + 508);
            if ( !v51 )
            {
LABEL_100:
              if ( (*(_BYTE *)(v50 + 4) & 0x80) == 0 )
              {
                enumerate_interfaces(0);
                v51 = *(_DWORD **)(*v16 + 508);
              }
              goto LABEL_106;
            }
            v52 = *(unsigned __int16 **)(v50 + 508);
            while ( 1 )
            {
              v53 = *v52;
              v54 = v53 == 2;
              if ( v53 == 2 )
                v54 = *((_DWORD *)v52 + 1) == s_addr;
              if ( v54 )
                break;
              v52 = (unsigned __int16 *)*((_DWORD *)v52 + 20);
              if ( !v52 )
                goto LABEL_100;
            }
            while ( 1 )
            {
LABEL_106:
              if ( !v51 )
              {
                s_addr = 0;
                goto LABEL_38;
              }
              v55 = *(unsigned __int16 *)v51;
              v56 = v55 == 2;
              if ( v55 == 2 )
                v56 = v51[1] == s_addr;
              if ( v56 )
                break;
              v51 = (_DWORD *)v51[20];
            }
            v60 = v51[7];
          }
        }
        goto LABEL_38;
      }
      v20 = 0;
      do
      {
        if ( !msg_control->cmsg_level && msg_control->cmsg_type == 8 )
        {
          s_addr = *(_DWORD *)&msg_control->__cmsg_data[4];
          v20 = *(_DWORD *)msg_control->__cmsg_data;
          source.addr.addr4.s_addr = s_addr;
        }
        msg_control = _cmsg_nxthdr(&message, msg_control);
      }
      while ( msg_control );
      v17 = listen->family;
      v18 = v20;
      v15 = 0;
    }
    if ( v17 == 10 && message.msg_controllen >= 0xC )
    {
      v21 = (char *)message.msg_control;
      if ( message.msg_control )
      {
        do
        {
          if ( *((_DWORD *)v21 + 1) == 41 && *((_DWORD *)v21 + 2) == *(_DWORD *)(*v16 + 1132) )
          {
            v22 = v16;
            v23 = *((_DWORD *)v21 + 4);
            v24 = *(_QWORD *)(v21 + 20);
            source.addr.addr4.s_addr = *((_DWORD *)v21 + 3);
            source.addr.addr6.__in6_u.__u6_addr32[1] = v23;
            *((_QWORD *)&source.addr.dnssec + 1) = v24;
            v16 = v22;
            v18 = *((_DWORD *)v21 + 7);
          }
          v21 = (char *)_cmsg_nxthdr(&message, (struct cmsghdr *)v21);
        }
        while ( v21 );
        v15 = 0;
      }
    }
    goto LABEL_86;
  }
  v16 = (int *)&dnsmasq_daemon;
  v18 = 0;
LABEL_38:
  v25 = (_DWORD *)*v16;
  v26 = *(_DWORD *)(*v16 + 1140);
  v27 = *(_DWORD *)(*v16 + 484);
  v25[287] = &udpaddr;
  v25[286] = ++v26;
  v25[285] = v26;
  dst_iface = v18;
  if ( !extract_request(v7, v12, v27, &v67) )
    goto LABEL_65;
  v28 = "auth";
  if ( !dns_auth )
    v28 = "query";
  v29 = querystr(v28, v67);
  if ( listen->family == 2 )
  {
    p_sin6_flowinfo = (in6_addr *)&udpaddr.in6.sin6_flowinfo;
    v31 = 524424;
  }
  else
  {
    p_sin6_flowinfo = &udpaddr.in6.sin6_addr;
    v31 = 524552;
  }
  log_query(v31, *(_DWORD *)(*v16 + 484), p_sin6_flowinfo, v29);
  v15 = 0;
  if ( !dns_auth )
  {
    v35 = *v16;
    if ( (*(_BYTE *)(*v16 + 2) & 4) == 0 )
    {
      v36 = *(_DWORD *)(v35 + 80);
      if ( v36 )
      {
        if ( in_zone(*(_DWORD *)(v35 + 80), *(_DWORD *)(v35 + 484), 0) )
        {
LABEL_63:
          v15 = 1;
          dns_auth = 1;
        }
        else
        {
          v15 = 0;
          while ( 1 )
          {
            v36 = *(_DWORD *)(v36 + 16);
            if ( !v36 )
              break;
            if ( in_zone(v36, *(_DWORD *)(*v16 + 484), 0) )
              goto LABEL_63;
          }
        }
      }
    }
  }
  if ( !detect_loop(*(_DWORD *)(*v16 + 484), v67) )
  {
LABEL_65:
    v37 = 0;
    if ( find_pseudoheader(v7, v12, 0, v61, 0, 0) )
    {
      v38 = *(unsigned __int8 *)v61[0];
      v39 = *(unsigned __int8 *)(v61[0] + 1);
      v40 = *(unsigned __int8 *)(v61[0] + 4);
      v61[0] += 6;
      v41 = v39 | (v38 << 8);
      v42 = v40 >> 7;
      if ( v41 > *(unsigned __int16 *)(*v16 + 432) )
        v41 = *(unsigned __int16 *)(*v16 + 432);
      v37 = 1;
    }
    else
    {
      v41 = 512;
      v42 = 0;
    }
    if ( dns_auth )
    {
      v43 = answer_auth(v7, (char *)v7 + v41, v12, v59, &udpaddr, v15, v42, v37);
      if ( v43 )
      {
        v44 = *v16;
        v45 = 1;
        if ( (*(_BYTE *)(*v16 + 1) & 0x20) == 0 )
        {
          v45 = *(_DWORD *)(v44 + 4);
          v44 = 1;
        }
        if ( (*(_BYTE *)(*v16 + 1) & 0x20) == 0 )
          v45 = v44 & (v45 >> 7);
        send_from(listen->fd, v45, (char *)v7, v43, &udpaddr, &source, dst_iface);
        ++*(_DWORD *)(*v16 + 496);
      }
    }
    else
    {
      v46 = 1;
      v47 = 1;
      if ( (v7->hb4 & 0x20) == 0 )
        v46 = v42;
      v48 = answer_request(v7, (char *)v7 + v41, v12, s_addr, v60, v59, v46, v42, v37);
      fd = listen->fd;
      if ( v48 )
      {
        if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
          v47 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
        send_from(fd, v47, (char *)v7, v48, &udpaddr, &source, dst_iface);
        ++*(_DWORD *)(dnsmasq_daemon + 488);
      }
      else if ( forward_query(fd, &udpaddr, &source, dst_iface, v7, v12, v59, 0u, v46, v57) )
      {
        ++*(_DWORD *)(dnsmasq_daemon + 492);
      }
      else
      {
        ++*(_DWORD *)(dnsmasq_daemon + 488);
      }
    }
  }
}
