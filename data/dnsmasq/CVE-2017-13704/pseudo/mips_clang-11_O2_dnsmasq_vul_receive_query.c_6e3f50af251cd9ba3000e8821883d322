void __fastcall receive_query(listener *listen, time_t now)
{
  int v4; // $v0
  char *v5; // $s0
  _BOOL4 v6; // $s1
  in_addr_t s_addr; // $s3
  dns_header *v8; // $s7
  irec *iface; // $v1
  int v10; // $at
  ssize_t v11; // $v0
  ssize_t v12; // $s4
  int family; // $v0
  size_t v14; // $s6
  int v15; // $v1
  unsigned int v16; // $s1
  char *msg_control; // $t0
  char *v18; // $a0
  char *v19; // $a3
  char *v20; // $a3
  char *v21; // $v0
  _DWORD *v22; // $a2
  int v23; // $a3
  int v24; // $s5
  int v25; // $v0
  int v26; // $a1
  _DWORD *v27; // $at
  int v28; // $v0
  const char *v29; // $a0
  int v30; // $v0
  int v31; // $a1
  int v32; // $s6
  int ad_reqd; // $s1
  unsigned int v34; // $v1
  __int16 v35; // $v0
  __int16 v36; // $a0
  unsigned __int16 v37; // $at
  int v38; // $v0
  frec *v39; // $v1
  size_t v40; // $v0
  int v41; // $a1
  time_t v42; // $s5
  size_t v43; // $v0
  int fd; // $a0
  int v45; // $a1
  frec *forward; // [sp+1Ch] [-BCh]
  int v47; // [sp+24h] [-B4h]
  unsigned int dst_iface; // [sp+28h] [-B0h]
  time_t v49; // [sp+2Ch] [-ACh]
  int v50[8]; // [sp+30h] [-A8h] BYREF
  char v51; // [sp+50h] [-88h] BYREF
  struct msghdr v52; // [sp+70h] [-68h] BYREF
  int v53[3]; // [sp+90h] [-48h] BYREF
  int dns_auth; // [sp+9Ch] [-3Ch] BYREF
  all_addr source; // [sp+A0h] [-38h] BYREF
  unsigned __int16 v56; // [sp+B4h] [-24h] BYREF
  mysockaddr to; // [sp+B8h] [-20h] BYREF

  v4 = dnsmasq_daemon;
  v5 = *(char **)(dnsmasq_daemon + 476);
  dns_auth = 0;
  v6 = 1;
  if ( (*(_BYTE *)(dnsmasq_daemon + 2) & 0x20) != 0 )
    v6 = listen->family == 0xA;
  *(_DWORD *)(dnsmasq_daemon + 528) = 0;
  source.addr.addr4.s_addr = 0;
  s_addr = 0;
  if ( (*(_BYTE *)(v4 + 2) & 0x20) != 0 )
  {
    iface = listen->iface;
    if ( iface )
    {
      dns_auth = iface->dns_auth;
      v8 = 0;
      if ( listen->family == 2 )
      {
        s_addr = iface->addr.in.sin_addr.s_addr;
        source.addr.addr4.s_addr = s_addr;
        v8 = (dns_header *)iface->netmask.s_addr;
      }
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v8 = 0;
  }
  v53[0] = (int)v5;
  v10 = *(unsigned __int16 *)(v4 + 432);
  v52.msg_controllen = 32;
  v52.msg_control = &v51;
  v53[1] = v10;
  v52.msg_iovlen = 1;
  v52.msg_iov = (iovec *)v53;
  v52.msg_namelen = 28;
  v52.msg_name = &to;
  v52.msg_flags = 0;
  v11 = recvmsg(listen->fd, &v52, 0);
  if ( v11 < 0xC || (v52.msg_flags & 0x20) != 0 || v5[2] < 0 )
    return;
  v12 = v11;
  family = listen->family;
  to.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !to.in.sin_port )
      return;
  }
  else
  {
    if ( !to.in.sin_port )
      return;
    to.in.sin_addr.s_addr = 0;
  }
  v49 = now;
  if ( (*(_BYTE *)(dnsmasq_daemon + 5) & 2) != 0 )
  {
    v24 = *(_DWORD *)(dnsmasq_daemon + 1136);
    if ( family == 10 )
    {
      if ( v24 )
      {
        while ( (*(_BYTE *)(v24 + 19) & 2) == 0 || !is_same_net6(v24, &to.in6.sin6_addr, *(_DWORD *)(v24 + 20)) )
        {
          v24 = *(_DWORD *)(v24 + 24);
          if ( !v24 )
            goto LABEL_55;
        }
        goto LABEL_18;
      }
    }
    else if ( v24 )
    {
      while ( (*(_BYTE *)(v24 + 19) & 2) != 0
           || !is_same_net(*(_DWORD *)v24, to.in.sin_addr.s_addr, _bswapw(-1 << (32 - *(_DWORD *)(v24 + 20)))) )
      {
        v24 = *(_DWORD *)(v24 + 24);
        if ( !v24 )
          goto LABEL_55;
      }
      goto LABEL_18;
    }
LABEL_55:
    if ( !receive_query_warned )
    {
      my_syslog(4, "Ignoring query from non-local network");
      receive_query_warned = 1;
    }
    return;
  }
LABEL_18:
  if ( v6 )
  {
    v14 = v49;
    if ( v52.msg_controllen < 0xC )
      return;
    v15 = listen->family;
    v16 = 0;
    if ( v15 == 2 )
    {
      msg_control = (char *)v52.msg_control;
      if ( !v52.msg_control )
      {
        v16 = 0;
LABEL_58:
        if ( !indextoname(listen->fd, v16, v50) )
          return;
        if ( !iface_check(listen->family, &source, v50, &dns_auth) )
        {
          if ( (*(_BYTE *)(dnsmasq_daemon + 7) & 0x80) == 0 )
            enumerate_interfaces(0);
          if ( !loopback_exception(listen->fd, listen->family, &source, v50)
            && !label_exception(v16, listen->family, &source) )
          {
            return;
          }
        }
        if ( listen->family == 2 && (*(_BYTE *)(dnsmasq_daemon + 1) & 4) != 0 )
        {
          v25 = *(_DWORD *)(dnsmasq_daemon + 508);
          if ( v25 )
          {
            v26 = *(_DWORD *)(dnsmasq_daemon + 508);
            while ( *(_WORD *)v26 != 2 || *(_DWORD *)(v26 + 4) != s_addr )
            {
              v26 = *(_DWORD *)(v26 + 80);
              if ( !v26 )
                goto LABEL_72;
            }
          }
          else
          {
LABEL_72:
            if ( (*(_BYTE *)(dnsmasq_daemon + 7) & 0x80) == 0 )
            {
              enumerate_interfaces(0);
              v25 = *(_DWORD *)(dnsmasq_daemon + 508);
            }
          }
          if ( v25 )
          {
            do
            {
              if ( *(_WORD *)v25 == 2 && *(_DWORD *)(v25 + 4) == s_addr )
              {
                v8 = *(dns_header **)(v25 + 28);
                goto LABEL_82;
              }
              v25 = *(_DWORD *)(v25 + 80);
            }
            while ( v25 );
            s_addr = 0;
          }
          else
          {
            s_addr = 0;
          }
        }
LABEL_82:
        dst_iface = v16;
        goto LABEL_83;
      }
      v18 = (char *)v52.msg_control + v52.msg_controllen;
      v16 = 0;
      do
      {
        v19 = msg_control;
        if ( !*((_DWORD *)msg_control + 1) && *((_DWORD *)msg_control + 2) == 8 )
        {
          s_addr = *((_DWORD *)msg_control + 4);
          source.addr.addr4.s_addr = s_addr;
          v16 = *((_DWORD *)msg_control + 3);
        }
        if ( *(_DWORD *)msg_control < 0xCu )
          break;
        msg_control += (*(_DWORD *)msg_control + 3) & 0xFFFFFFFC;
        if ( v18 < msg_control + 0xC )
          break;
      }
      while ( v18 >= &msg_control[(*(_DWORD *)msg_control + 3) & 0xFFFFFFFC] && v19 );
    }
    if ( v15 == 10 )
    {
      v20 = (char *)v52.msg_control;
      if ( v52.msg_control )
      {
        v21 = (char *)v52.msg_control + v52.msg_controllen;
        do
        {
          v22 = v20;
          if ( *((_DWORD *)v20 + 1) == 41 && *((_DWORD *)v20 + 2) == *(_DWORD *)(dnsmasq_daemon + 1132) )
          {
            source = *(all_addr *)(v20 + 12);
            v16 = *((_DWORD *)v20 + 7);
          }
          v23 = *(_DWORD *)v20;
          if ( *v22 < 0xCu )
            break;
          v20 = (char *)v22 + ((v23 + 3) & 0xFFFFFFFC);
          if ( v21 < v20 + 0xC )
            break;
        }
        while ( v21 >= &v20[(*(_DWORD *)v20 + 3) & 0xFFFFFFFC] && v22 );
      }
    }
    goto LABEL_58;
  }
  dst_iface = 0;
  v14 = v49;
LABEL_83:
  v27 = (_DWORD *)dnsmasq_daemon;
  *(_DWORD *)(dnsmasq_daemon + 1148) = &to;
  v28 = v27[285] + 1;
  v27[286] = v28;
  v27[285] = v28;
  if ( !extract_request(v5, v12, v27[121], &v56) )
    goto LABEL_97;
  v29 = "auth";
  if ( !dns_auth )
    v29 = "query";
  v30 = querystr(v29, v56);
  v31 = *(_DWORD *)(dnsmasq_daemon + 484);
  if ( listen->family == 2 )
    log_query(524424, v31, &to.in6.sin6_flowinfo, v30);
  else
    log_query(524552, v31, &to.in6.sin6_addr, v30);
  if ( !dns_auth && (*(_BYTE *)(dnsmasq_daemon + 1) & 4) == 0 )
  {
    v32 = *(_DWORD *)(dnsmasq_daemon + 80);
    if ( v32 )
    {
      if ( in_zone(*(_DWORD *)(dnsmasq_daemon + 80), *(_DWORD *)(dnsmasq_daemon + 484), 0) )
      {
LABEL_95:
        dns_auth = 1;
      }
      else
      {
        while ( 1 )
        {
          v32 = *(_DWORD *)(v32 + 16);
          if ( !v32 )
            break;
          if ( in_zone(v32, *(_DWORD *)(dnsmasq_daemon + 484), 0) )
            goto LABEL_95;
        }
      }
    }
  }
  v14 = v49;
  if ( !detect_loop(*(_DWORD *)(dnsmasq_daemon + 484), v56) )
  {
LABEL_97:
    ad_reqd = 0;
    if ( find_pseudoheader(v5, v12, 0, v50) )
    {
      v34 = *(unsigned __int8 *)(v50[0] + 4);
      v35 = *(unsigned __int8 *)(v50[0] + 1);
      v36 = *(unsigned __int8 *)v50[0];
      v50[0] += 6;
      v37 = (v36 << 8) | v35;
      if ( *(unsigned __int16 *)(dnsmasq_daemon + 432) < (unsigned int)v37 )
        v37 = *(_WORD *)(dnsmasq_daemon + 432);
      v38 = v37;
      v39 = (frec *)(v34 >> 7);
      ad_reqd = 1;
    }
    else
    {
      v38 = 512;
      v39 = 0;
    }
    if ( dns_auth )
    {
      v40 = answer_auth(v5, &v5[v38], v12, v14);
      if ( v40 )
      {
        v41 = 1;
        if ( (*(_BYTE *)(dnsmasq_daemon + 2) & 0x20) == 0 )
          v41 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
        send_from(listen->fd, v41, v5, v40, &to, &source, dst_iface);
        ++*(_DWORD *)(dnsmasq_daemon + 496);
      }
    }
    else
    {
      v42 = 1;
      if ( (v5[3] & 0x20) == 0 )
        v42 = (time_t)v39;
      forward = v39;
      v43 = answer_request(v5, &v5[v38], v12, s_addr);
      fd = listen->fd;
      if ( v43 )
      {
        v45 = 1;
        if ( (*(_BYTE *)(dnsmasq_daemon + 2) & 0x20) == 0 )
          v45 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
        send_from(fd, v45, v5, v43, &to, &source, dst_iface);
        ++*(_DWORD *)(dnsmasq_daemon + 488);
      }
      else if ( forward_query(fd, &to, &source, dst_iface, v8, v14, v42, forward, ad_reqd, v47) )
      {
        ++*(_DWORD *)(dnsmasq_daemon + 492);
      }
      else
      {
        ++*(_DWORD *)(dnsmasq_daemon + 488);
      }
    }
  }
}
