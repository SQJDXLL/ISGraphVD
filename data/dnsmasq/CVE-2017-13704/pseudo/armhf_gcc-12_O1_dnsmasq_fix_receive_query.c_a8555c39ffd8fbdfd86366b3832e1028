void __fastcall receive_query(listener *listen, time_t now)
{
  int v3; // r3
  dns_header *v4; // r8
  unsigned int v5; // r11
  int s_addr; // r5
  irec *iface; // r2
  ssize_t v8; // r0
  size_t v9; // r6
  int family; // r3
  int v11; // r2
  _DWORD *v12; // r9
  _DWORD *i; // r9
  int v14; // r3
  unsigned int v15; // r2
  int v16; // r3
  char *v17; // r12
  char *v18; // lr
  unsigned int *msg_control; // r1
  char *v20; // r0
  unsigned int v21; // r3
  unsigned int v22; // r2
  uint32_t v23; // r1
  __int64 v24; // r2
  unsigned int v25; // r3
  unsigned int v26; // r2
  _DWORD *v27; // r2
  int v28; // r3
  const char *v29; // r0
  int v30; // r3
  in6_addr *p_sin6_flowinfo; // r2
  int v32; // r1
  int v33; // r0
  int v34; // r9
  int v35; // r10
  int v36; // r3
  int v37; // r3
  unsigned int v38; // r2
  unsigned int v39; // r1
  int v40; // r1
  int v41; // r2
  int v42; // r9
  size_t v43; // r3
  int v44; // r1
  size_t v45; // r3
  int v46; // r1
  int ad_reqd; // [sp+1Ch] [bp-D4h]
  unsigned __int8 *t_cp; // [sp+24h] [bp-CCh]
  unsigned __int16 type; // [sp+2Ah] [bp-C6h] BYREF
  unsigned __int8 *pheader; // [sp+2Ch] [bp-C4h]
  int auth_dns; // [sp+30h] [bp-C0h] BYREF
  msghdr msg; // [sp+34h] [bp-BCh] BYREF
  iovec iov[1]; // [sp+50h] [bp-A0h] BYREF
  all_addr dst_addr; // [sp+58h] [bp-98h] BYREF
  mysockaddr source_addr; // [sp+68h] [bp-88h] BYREF
  union {cmsghdr align;char control6[32];char control[24];} control_u; // [sp+84h] [bp-6Ch] BYREF
  ifreq ifr; // [sp+A4h] [bp-4Ch] BYREF

  v3 = dnsmasq_daemon_0;
  v4 = *(dns_header **)(dnsmasq_daemon_0 + 476);
  auth_dns = 0;
  v5 = (*dnsmasq_daemon_0 & 0x2000) == 0 || listen->family == 10;
  *(_DWORD *)(dnsmasq_daemon_0 + 528) = 0;
  dst_addr.addr.addr4.s_addr = 0;
  ad_reqd = 0;
  s_addr = *(_DWORD *)v3 & 0x2000;
  if ( s_addr )
  {
    iface = listen->iface;
    if ( iface )
    {
      auth_dns = iface->dns_auth;
      if ( listen->family == 2 )
      {
        s_addr = iface->addr.in.sin_addr.s_addr;
        dst_addr.addr.addr4.s_addr = s_addr;
        ad_reqd = iface->netmask.s_addr;
      }
      else
      {
        s_addr = 0;
      }
    }
    else
    {
      s_addr = 0;
    }
  }
  iov[0].iov_base = v4;
  iov[0].iov_len = *(unsigned __int16 *)(v3 + 0x1B0);
  msg.msg_control = &control_u;
  msg.msg_controllen = 32;
  msg.msg_flags = 0;
  msg.msg_name = &source_addr;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  msg.msg_iovlen = 1;
  v8 = recvmsg(listen->fd, &msg, 0);
  v9 = v8;
  if ( v8 <= 11 )
    return;
  t_cp = (unsigned __int8 *)(msg.msg_flags & 0x20);
  if ( (msg.msg_flags & 0x20) != 0 || (v4->hb3 & 0x80u) != 0 )
    return;
  memset((void *)(*(_DWORD *)(dnsmasq_daemon_0 + 476) + v8), 0, *(unsigned __int16 *)(dnsmasq_daemon_0 + 0x1B0) - v8);
  family = listen->family;
  source_addr.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
    v11 = dnsmasq_daemon_0;
    if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x20000) == 0 )
      goto LABEL_31;
  }
  else
  {
    if ( !source_addr.in.sin_port )
      return;
    source_addr.in.sin_addr.s_addr = 0;
    v11 = dnsmasq_daemon_0;
    if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x20000) == 0 )
      goto LABEL_31;
    if ( family == 10 )
    {
      v12 = *(_DWORD **)(dnsmasq_daemon_0 + 1136);
      if ( v12 )
      {
        while ( (v12[4] & 2) == 0 || !is_same_net6(v12, &source_addr.in6.sin6_addr, v12[5]) )
        {
          v12 = (_DWORD *)v12[6];
          if ( !v12 )
            goto LABEL_37;
        }
        goto LABEL_31;
      }
LABEL_37:
      if ( !warned_2 )
      {
        my_syslog(4, "Ignoring query from non-local network");
        warned_2 = 1;
      }
      return;
    }
  }
  for ( i = *(_DWORD **)(v11 + 1136); i; i = (_DWORD *)i[6] )
  {
    v14 = -1 << (0x20 - i[5]);
    v15 = (((unsigned int)v14 ^ __ROR4__(v14, 0x10)) >> 8) & 0xFFFF00FF ^ __ROR4__(v14, 8);
    if ( (i[4] & 2) == 0 && is_same_net(*i, source_addr.in.sin_addr.s_addr, v15) )
      break;
  }
  if ( !i )
    goto LABEL_37;
LABEL_31:
  if ( v5 )
  {
    if ( msg.msg_controllen <= 0xB )
      return;
    v16 = listen->family;
    if ( v16 == 2 )
    {
      if ( msg.msg_control )
      {
        msg_control = (unsigned int *)msg.msg_control;
        v5 = (unsigned int)t_cp;
        v20 = (char *)msg.msg_control + msg.msg_controllen;
        while ( 1 )
        {
          if ( !msg_control[1] && msg_control[2] == 8 )
          {
            s_addr = msg_control[4];
            dst_addr.addr.addr4.s_addr = s_addr;
            v5 = msg_control[3];
          }
          v21 = *msg_control;
          v22 = (-*msg_control & 3) + 0xC;
          if ( *msg_control <= 0xB || v22 > v20 - (char *)msg_control || v21 > v20 - (char *)msg_control - v22 )
            break;
          msg_control = (unsigned int *)((char *)msg_control + ((v21 + 3) & 0xFFFFFFFC));
        }
      }
      else
      {
        v5 = (unsigned int)t_cp;
      }
    }
    else if ( v16 == 10 )
    {
      if ( msg.msg_control )
      {
        v17 = (char *)msg.msg_control;
        v5 = (unsigned int)t_cp;
        v18 = (char *)msg.msg_control + msg.msg_controllen;
        while ( 1 )
        {
          if ( *((_DWORD *)v17 + 1) == 41 && *((_DWORD *)v17 + 2) == *(_DWORD *)(dnsmasq_daemon_0 + 1132) )
          {
            v23 = *((_DWORD *)v17 + 4);
            v24 = *(_QWORD *)(v17 + 20);
            dst_addr.addr.addr4.s_addr = *((_DWORD *)v17 + 3);
            dst_addr.addr.addr6.__in6_u.__u6_addr32[1] = v23;
            *((_QWORD *)&dst_addr.addr.dnssec + 1) = v24;
            v5 = *((_DWORD *)v17 + 7);
          }
          v25 = *(_DWORD *)v17;
          v26 = (-*(_DWORD *)v17 & 3) + 0xC;
          if ( *(_DWORD *)v17 <= 0xBu || v26 > v18 - v17 || v25 > v18 - v17 - v26 )
            break;
          v17 += (v25 + 3) & 0xFFFFFFFC;
        }
      }
      else
      {
        v5 = (unsigned int)t_cp;
      }
    }
    else
    {
      v5 = (unsigned int)t_cp;
    }
    if ( !indextoname(listen->fd, v5, &ifr) )
      return;
    if ( !iface_check(listen->family, &dst_addr, &ifr, &auth_dns) )
    {
      if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) == 0 )
        ((void (*)(void))enumerate_interfaces)();
      if ( !loopback_exception(listen->fd, listen->family, &dst_addr, &ifr)
        && !label_exception(v5, listen->family, &dst_addr) )
      {
        return;
      }
    }
    if ( listen->family == 2 && (*dnsmasq_daemon_0 & 0x40000) != 0 )
    {
      v36 = *(_DWORD *)(dnsmasq_daemon_0 + 508);
      if ( v36 )
      {
        while ( *(_WORD *)v36 != 2 || *(_DWORD *)(v36 + 4) != s_addr )
        {
          v36 = *(_DWORD *)(v36 + 80);
          if ( !v36 )
          {
            if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) != 0 )
            {
              v37 = *(_DWORD *)(dnsmasq_daemon_0 + 508);
              goto LABEL_93;
            }
            goto LABEL_85;
          }
        }
        v37 = *(_DWORD *)(dnsmasq_daemon_0 + 508);
        do
        {
LABEL_93:
          if ( *(_WORD *)v37 == 2 && *(_DWORD *)(v37 + 4) == s_addr )
          {
            ad_reqd = *(_DWORD *)(v37 + 28);
            goto LABEL_67;
          }
          v37 = *(_DWORD *)(v37 + 80);
        }
        while ( v37 );
        s_addr = 0;
      }
      else if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) != 0 )
      {
        s_addr = 0;
      }
      else
      {
LABEL_85:
        enumerate_interfaces(0);
        v37 = *(_DWORD *)(dnsmasq_daemon_0 + 508);
        if ( v37 )
          goto LABEL_93;
        s_addr = 0;
      }
    }
  }
LABEL_67:
  v27 = (_DWORD *)dnsmasq_daemon_0;
  v28 = *(_DWORD *)(dnsmasq_daemon_0 + 1140) + 1;
  *(_DWORD *)(dnsmasq_daemon_0 + 1140) = v28;
  v27[286] = v28;
  v27[287] = &source_addr;
  if ( !extract_request(v4, v9, v27[121], &type) )
  {
    v34 = (int)t_cp;
LABEL_101:
    if ( find_pseudoheader(v4, v9) )
    {
      v38 = pheader[1] | (*pheader << 8);
      v39 = pheader[4];
      pheader += 6;
      t_cp = (unsigned __int8 *)(v39 >> 7);
      if ( *(unsigned __int16 *)(dnsmasq_daemon_0 + 0x1B0) >= v38 )
        v40 = v38;
      else
        v40 = *(unsigned __int16 *)(dnsmasq_daemon_0 + 0x1B0);
      v41 = 1;
    }
    else
    {
      v41 = (int)t_cp;
      v40 = 512;
    }
    if ( auth_dns )
    {
      v45 = answer_auth(v4, (char *)v4 + v40, v9, now, &source_addr, v34, t_cp, v41);
      if ( v45 )
      {
        v46 = (*dnsmasq_daemon_0 & 0x2000) != 0 || (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) != 0;
        send_from(listen->fd, v46, (char *)v4, v45, &source_addr, &dst_addr, v5);
        ++*(_DWORD *)(dnsmasq_daemon_0 + 496);
      }
    }
    else
    {
      if ( (v4->hb4 & 0x20) != 0 )
        v42 = 1;
      else
        v42 = (int)t_cp;
      v43 = answer_request(v4, (char *)v4 + v40, v9, s_addr, ad_reqd, now, v42, t_cp, v41);
      if ( v43 )
      {
        v44 = (*dnsmasq_daemon_0 & 0x2000) != 0 || (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) != 0;
        send_from(listen->fd, v44, (char *)v4, v43, &source_addr, &dst_addr, v5);
        ++*(_DWORD *)(dnsmasq_daemon_0 + 488);
      }
      else if ( forward_query(listen->fd, &source_addr, &dst_addr, v5, v4, v9, now, 0u, v42, (int)t_cp) )
      {
        ++*(_DWORD *)(dnsmasq_daemon_0 + 492);
      }
      else
      {
        ++*(_DWORD *)(dnsmasq_daemon_0 + 488);
      }
    }
    return;
  }
  if ( auth_dns )
    v29 = "auth";
  else
    v29 = "query";
  v30 = querystr(v29, type);
  if ( listen->family == 2 )
  {
    p_sin6_flowinfo = (in6_addr *)&source_addr.in6.sin6_flowinfo;
    v32 = *(_DWORD *)(dnsmasq_daemon_0 + 484);
    v33 = 524424;
  }
  else
  {
    p_sin6_flowinfo = &source_addr.in6.sin6_addr;
    v32 = *(_DWORD *)(dnsmasq_daemon_0 + 484);
    v33 = 524552;
  }
  log_query(v33, v32, p_sin6_flowinfo, v30);
  v34 = auth_dns;
  if ( auth_dns )
  {
    v34 = (int)t_cp;
  }
  else if ( (*dnsmasq_daemon_0 & 0x40000) == 0 )
  {
    v35 = *(_DWORD *)(dnsmasq_daemon_0 + 80);
    if ( v35 )
    {
      while ( !in_zone(v35, *(_DWORD *)(dnsmasq_daemon_0 + 484), 0) )
      {
        v35 = *(_DWORD *)(v35 + 16);
        if ( !v35 )
        {
          v34 = 0;
          goto LABEL_100;
        }
      }
      v34 = 1;
      auth_dns = 1;
    }
  }
LABEL_100:
  if ( !detect_loop(*(_DWORD *)(dnsmasq_daemon_0 + 484), type) )
    goto LABEL_101;
}
