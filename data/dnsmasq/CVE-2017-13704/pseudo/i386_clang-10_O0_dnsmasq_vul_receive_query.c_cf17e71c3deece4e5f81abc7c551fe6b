void __cdecl receive_query(listener *listen, time_t now)
{
  int v2; // ecx
  const char *v3; // ecx
  bool v4; // [esp+3Fh] [ebp-169h]
  bool v5; // [esp+57h] [ebp-151h]
  cmsghdr *msg_control; // [esp+74h] [ebp-134h]
  bool v7; // [esp+83h] [ebp-125h]
  int ad_reqd; // [esp+84h] [ebp-124h]
  unsigned __int16 flags; // [esp+92h] [ebp-116h]
  char *types; // [esp+94h] [ebp-114h]
  auth_zone *zone; // [esp+98h] [ebp-110h]
  irec *iface; // [esp+9Ch] [ebp-10Ch]
  irec *ifacea; // [esp+9Ch] [ebp-10Ch]
  ifreq ifr; // [esp+B0h] [ebp-F8h] BYREF
  in_addr netmask_0; // [esp+D0h] [ebp-D8h]
  addrlist *addr; // [esp+D8h] [ebp-D0h]
  int check_dst; // [esp+DCh] [ebp-CCh]
  union {cmsghdr align;char control6[32];char control[24];} control_u; // [esp+E0h] [ebp-C8h] BYREF
  cmsghdr *cmptr; // [esp+104h] [ebp-A4h]
  msghdr msg; // [esp+108h] [ebp-A0h] BYREF
  iovec iov[1]; // [esp+128h] [ebp-80h] BYREF
  int local_auth; // [esp+134h] [ebp-74h]
  int have_pseudoheader; // [esp+138h] [ebp-70h]
  int do_bit; // [esp+13Ch] [ebp-6Ch]
  int auth_dns; // [esp+140h] [ebp-68h] BYREF
  int if_index; // [esp+144h] [ebp-64h]
  ssize_t n; // [esp+148h] [ebp-60h]
  size_t m; // [esp+14Ch] [ebp-5Ch]
  in_addr dst_addr_4; // [esp+150h] [ebp-58h]
  in_addr netmask; // [esp+158h] [ebp-50h]
  all_addr dst_addr; // [esp+160h] [ebp-48h] BYREF
  unsigned __int16 udp_size; // [esp+170h] [ebp-38h]
  unsigned __int16 type; // [esp+172h] [ebp-36h] BYREF
  unsigned __int8 *pheader; // [esp+174h] [ebp-34h] BYREF
  mysockaddr source_addr; // [esp+178h] [ebp-30h] BYREF
  dns_header *header; // [esp+198h] [ebp-10h]

  header = *(dns_header **)(dnsmasq_daemon + 476);
  udp_size = 512;
  if_index = 0;
  auth_dns = 0;
  do_bit = 0;
  have_pseudoheader = 0;
  local_auth = 0;
  v7 = 1;
  if ( (*dnsmasq_daemon & 0x2000) != 0 )
    v7 = listen->family == 10;
  check_dst = v7;
  *(_DWORD *)(dnsmasq_daemon + 528) = 0;
  dst_addr.addr.addr4.s_addr = 0;
  dst_addr_4.s_addr = 0;
  netmask.s_addr = 0;
  if ( (*dnsmasq_daemon & 0x2000) != 0 )
  {
    if ( listen->iface )
    {
      auth_dns = listen->iface->dns_auth;
      if ( listen->family == 2 )
      {
        dst_addr.addr.addr4.s_addr = listen->iface->addr.in.sin_addr.s_addr;
        dst_addr_4.s_addr = dst_addr.addr.addr4.s_addr;
        netmask.s_addr = listen->iface->netmask.s_addr;
      }
    }
  }
  iov[0].iov_base = *(void **)(dnsmasq_daemon + 476);
  iov[0].iov_len = *(unsigned __int16 *)(dnsmasq_daemon + 432);
  msg.msg_control = &control_u;
  msg.msg_controllen = 32;
  msg.msg_flags = 0;
  msg.msg_name = &source_addr;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  msg.msg_iovlen = 1;
  n = recvmsg(listen->fd, &msg, 0);
  if ( n >= 12 && (msg.msg_flags & 0x20) == 0 && (header->hb3 & 0x80) == 0 )
  {
    source_addr.sa.sa_family = listen->family;
    if ( listen->family == 2 )
    {
      if ( !source_addr.in.sin_port )
        return;
    }
    else
    {
      if ( !source_addr.in.sin_port )
        return;
      source_addr.in.sin_addr.s_addr = 0;
    }
    if ( (*(_DWORD *)(dnsmasq_daemon + 4) & 0x20000) != 0 )
    {
      if ( listen->family == 10 )
      {
        for ( addr = *(addrlist **)(dnsmasq_daemon + 1136);
              addr && ((addr->flags & 2) == 0 || !is_same_net6(addr, &source_addr.in6.sin6_addr, addr->prefixlen));
              addr = addr->next )
        {
          ;
        }
      }
      else
      {
        for ( addr = *(addrlist **)(dnsmasq_daemon + 1136); addr; addr = addr->next )
        {
          netmask_0.s_addr = htonl(-1 << (32 - LOBYTE(addr->prefixlen)));
          if ( (addr->flags & 2) == 0 )
          {
            if ( is_same_net(addr->addr.addr.addr4.s_addr, source_addr.in.sin_addr.s_addr, netmask_0.s_addr) )
              break;
          }
        }
      }
      if ( !addr )
      {
        if ( !receive_query_warned )
        {
          my_syslog(4, "Ignoring query from non-local network");
          receive_query_warned = 1;
        }
        return;
      }
    }
    if ( check_dst )
    {
      if ( msg.msg_controllen < 0xC )
        return;
      if ( listen->family == 2 )
      {
        for ( cmptr = (cmsghdr *)msg.msg_control; cmptr; cmptr = _cmsg_nxthdr(&msg, cmptr) )
        {
          if ( !cmptr->cmsg_level && cmptr->cmsg_type == 8 )
          {
            dst_addr.addr.addr4.s_addr = *(_DWORD *)&cmptr->__cmsg_data[4];
            dst_addr_4.s_addr = dst_addr.addr.addr4.s_addr;
            if_index = *(_DWORD *)cmptr->__cmsg_data;
          }
        }
      }
      if ( listen->family == 10 )
      {
        if ( msg.msg_controllen < 0xC )
          msg_control = 0;
        else
          msg_control = (cmsghdr *)msg.msg_control;
        for ( cmptr = msg_control; cmptr; cmptr = _cmsg_nxthdr(&msg, cmptr) )
        {
          if ( cmptr->cmsg_level == 41 && cmptr->cmsg_type == *(_DWORD *)(dnsmasq_daemon + 1132) )
          {
            *(_QWORD *)&dst_addr.addr.addr4.s_addr = *(_QWORD *)cmptr->__cmsg_data;
            *((_QWORD *)&dst_addr.addr.dnssec + 1) = *(_QWORD *)&cmptr->__cmsg_data[8];
            if_index = *(_DWORD *)&cmptr->__cmsg_data[16];
          }
        }
      }
      if ( !indextoname(listen->fd, if_index, &ifr) )
        return;
      if ( !iface_check(listen->family, &dst_addr, &ifr, &auth_dns) )
      {
        if ( (*(_DWORD *)(dnsmasq_daemon + 4) & 0x80) == 0 )
          enumerate_interfaces(0);
        if ( !loopback_exception(listen->fd, listen->family, &dst_addr, &ifr)
          && !label_exception(if_index, listen->family, &dst_addr) )
        {
          return;
        }
      }
      if ( listen->family == 2 && (*dnsmasq_daemon & 0x40000) != 0 )
      {
        for ( iface = *(irec **)(dnsmasq_daemon + 508);
              iface && (iface->addr.sa.sa_family != 2 || iface->addr.in.sin_addr.s_addr != dst_addr_4.s_addr);
              iface = iface->next )
        {
          ;
        }
        if ( !iface && (*(_DWORD *)(dnsmasq_daemon + 4) & 0x80) == 0 )
          enumerate_interfaces(0);
        for ( ifacea = *(irec **)(dnsmasq_daemon + 508);
              ifacea && (ifacea->addr.sa.sa_family != 2 || ifacea->addr.in.sin_addr.s_addr != dst_addr_4.s_addr);
              ifacea = ifacea->next )
        {
          ;
        }
        if ( ifacea )
          netmask.s_addr = ifacea->netmask.s_addr;
        else
          dst_addr_4.s_addr = 0;
      }
    }
    v2 = *(_DWORD *)(dnsmasq_daemon + 1140) + 1;
    *(_DWORD *)(dnsmasq_daemon + 1140) = v2;
    *(_DWORD *)(dnsmasq_daemon + 1144) = v2;
    *(_DWORD *)(dnsmasq_daemon + 1148) = &source_addr;
    if ( !extract_request(header, n, *(_DWORD *)(dnsmasq_daemon + 484), &type) )
      goto LABEL_112;
    v3 = "query";
    if ( auth_dns )
      v3 = "auth";
    types = (char *)querystr(v3, type);
    if ( listen->family == 2 )
      log_query(524424, *(_DWORD *)(dnsmasq_daemon + 484), &source_addr.in6.sin6_flowinfo, types);
    else
      log_query(524552, *(_DWORD *)(dnsmasq_daemon + 484), &source_addr.in6.sin6_addr, types);
    if ( !auth_dns && (*dnsmasq_daemon & 0x40000) == 0 )
    {
      for ( zone = *(auth_zone **)(dnsmasq_daemon + 80); zone; zone = zone->next )
      {
        if ( in_zone(zone, *(_DWORD *)(dnsmasq_daemon + 484), 0) )
        {
          auth_dns = 1;
          local_auth = 1;
          break;
        }
      }
    }
    if ( !detect_loop(*(_DWORD *)(dnsmasq_daemon + 484), type) )
    {
LABEL_112:
      if ( find_pseudoheader(header, n, 0, &pheader, 0, 0) )
      {
        have_pseudoheader = 1;
        udp_size = _byteswap_ushort(*(_WORD *)pheader);
        pheader += 2;
        pheader += 2;
        flags = _byteswap_ushort(*(_WORD *)pheader);
        pheader += 2;
        if ( (flags & 0x8000) != 0 )
          do_bit = 1;
        if ( udp_size > (int)*(unsigned __int16 *)(dnsmasq_daemon + 432) )
          udp_size = *(_WORD *)(dnsmasq_daemon + 432);
      }
      if ( auth_dns )
      {
        m = answer_auth(header, (char *)header + udp_size, n, now, &source_addr, local_auth, do_bit, have_pseudoheader);
        if ( m )
        {
          v5 = 1;
          if ( (*dnsmasq_daemon & 0x2000) == 0 )
            v5 = (*(_DWORD *)(dnsmasq_daemon + 4) & 0x80) != 0;
          send_from(listen->fd, v5, (char *)header, m, &source_addr, &dst_addr, if_index);
          ++*(_DWORD *)(dnsmasq_daemon + 496);
        }
      }
      else
      {
        ad_reqd = do_bit;
        if ( (header->hb4 & 0x20) != 0 )
          ad_reqd = 1;
        m = answer_request(
              header,
              (char *)header + udp_size,
              n,
              dst_addr_4.s_addr,
              netmask.s_addr,
              now,
              ad_reqd,
              do_bit,
              have_pseudoheader);
        if ( m )
        {
          v4 = 1;
          if ( (*dnsmasq_daemon & 0x2000) == 0 )
            v4 = (*(_DWORD *)(dnsmasq_daemon + 4) & 0x80) != 0;
          send_from(listen->fd, v4, (char *)header, m, &source_addr, &dst_addr, if_index);
          ++*(_DWORD *)(dnsmasq_daemon + 488);
        }
        else if ( forward_query(listen->fd, &source_addr, &dst_addr, if_index, header, n, now, 0, ad_reqd, do_bit) )
        {
          ++*(_DWORD *)(dnsmasq_daemon + 492);
        }
        else
        {
          ++*(_DWORD *)(dnsmasq_daemon + 488);
        }
      }
    }
  }
}
