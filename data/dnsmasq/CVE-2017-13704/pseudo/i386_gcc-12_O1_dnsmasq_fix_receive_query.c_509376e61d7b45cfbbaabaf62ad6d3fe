void __cdecl receive_query(listener *listen, time_t now)
{
  _DWORD *v2; // eax
  irec *iface; // edx
  ssize_t v4; // esi
  int family; // eax
  _DWORD *v6; // edx
  int v7; // ebp
  int i; // ebp
  unsigned __int32 v9; // eax
  int v10; // edx
  char *v11; // ecx
  char *v12; // ebp
  unsigned int *msg_control; // ecx
  char *v14; // ebp
  unsigned int v15; // eax
  unsigned int v16; // edx
  unsigned int v17; // eax
  unsigned int v18; // edx
  int v19; // eax
  _DWORD *v20; // edx
  int v21; // eax
  const char *v22; // eax
  int v23; // eax
  int v24; // esi
  int v25; // ebp
  int v26; // eax
  int v27; // eax
  in_addr_t v28; // edx
  unsigned __int16 v29; // dx
  unsigned int v30; // ecx
  unsigned __int16 v31; // ax
  int v32; // edx
  int v33; // esi
  size_t v34; // eax
  int v35; // edx
  size_t v36; // eax
  int v37; // edx
  dns_header *header; // [esp+10h] [ebp-D8h]
  in_addr dst_addr_4; // [esp+14h] [ebp-D4h]
  int check_dst; // [esp+18h] [ebp-D0h]
  size_t n; // [esp+1Ch] [ebp-CCh]
  in_addr_t s_addr; // [esp+20h] [ebp-C8h]
  int ad_reqd; // [esp+24h] [ebp-C4h]
  unsigned __int16 type; // [esp+2Eh] [ebp-BAh] BYREF
  unsigned __int8 *t_cp; // [esp+30h] [ebp-B8h] BYREF
  int auth_dns; // [esp+34h] [ebp-B4h] BYREF
  msghdr msg; // [esp+38h] [ebp-B0h] BYREF
  iovec iov[1]; // [esp+54h] [ebp-94h] BYREF
  all_addr dst_addr; // [esp+5Ch] [ebp-8Ch] BYREF
  mysockaddr source_addr; // [esp+6Ch] [ebp-7Ch] BYREF
  union {cmsghdr align;char control6[32];char control[24];} control_u; // [esp+88h] [ebp-60h] BYREF
  ifreq ifr; // [esp+A8h] [ebp-40h] BYREF
  unsigned int v53; // [esp+C8h] [ebp-20h]

  v53 = __readgsdword(0x14u);
  v2 = dnsmasq_daemon_0;
  header = (dns_header *)dnsmasq_daemon_0[119];
  auth_dns = 0;
  check_dst = 1;
  if ( (*dnsmasq_daemon_0 & 0x2000) != 0 )
    check_dst = listen->family == 10;
  dnsmasq_daemon_0[132] = 0;
  dst_addr.addr.addr4.s_addr = 0;
  s_addr = 0;
  dst_addr_4.s_addr = *v2 & 0x2000;
  if ( dst_addr_4.s_addr )
  {
    iface = listen->iface;
    dst_addr_4.s_addr = 0;
    if ( iface )
    {
      auth_dns = iface->dns_auth;
      if ( listen->family == 2 )
      {
        dst_addr.addr.addr4.s_addr = iface->addr.in.sin_addr.s_addr;
        dst_addr_4.s_addr = dst_addr.addr.addr4.s_addr;
        s_addr = iface->netmask.s_addr;
      }
    }
  }
  iov[0].iov_base = header;
  iov[0].iov_len = *((unsigned __int16 *)v2 + 216);
  msg.msg_control = &control_u;
  msg.msg_controllen = 32;
  msg.msg_flags = 0;
  msg.msg_name = &source_addr;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  msg.msg_iovlen = 1;
  v4 = recvmsg(listen->fd, &msg, 0);
  n = v4;
  if ( v4 <= 11 )
    return;
  ad_reqd = msg.msg_flags & 0x20;
  if ( (msg.msg_flags & 0x20) != 0 || (header->hb3 & 0x80u) != 0 )
    return;
  memset((void *)(dnsmasq_daemon_0[119] + v4), 0, *((unsigned __int16 *)dnsmasq_daemon_0 + 216) - v4);
  family = listen->family;
  source_addr.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
    v6 = dnsmasq_daemon_0;
    if ( (*((_BYTE *)dnsmasq_daemon_0 + 6) & 2) != 0 )
      goto LABEL_18;
  }
  else
  {
    if ( !source_addr.in.sin_port )
      return;
    source_addr.in.sin_addr.s_addr = 0;
    v6 = dnsmasq_daemon_0;
    if ( (*((_BYTE *)dnsmasq_daemon_0 + 6) & 2) != 0 )
    {
      if ( family == 10 )
      {
        v7 = dnsmasq_daemon_0[284];
        if ( v7 )
        {
          while ( (*(_BYTE *)(v7 + 16) & 2) == 0 || !is_same_net6(v7, &source_addr.in6.sin6_addr, *(_DWORD *)(v7 + 20)) )
          {
            v7 = *(_DWORD *)(v7 + 24);
            if ( !v7 )
              goto LABEL_34;
          }
          goto LABEL_28;
        }
LABEL_34:
        if ( !warned_2 )
        {
          my_syslog(4, "Ignoring query from non-local network");
          warned_2 = 1;
        }
        return;
      }
LABEL_18:
      for ( i = v6[284]; i; i = *(_DWORD *)(i + 24) )
      {
        v9 = _byteswap_ulong(-1 << (32 - *(_BYTE *)(i + 20)));
        if ( (*(_BYTE *)(i + 16) & 2) == 0 && is_same_net(*(_DWORD *)i, source_addr.in.sin_addr.s_addr, v9) )
          break;
      }
      if ( i )
        goto LABEL_28;
      goto LABEL_34;
    }
  }
LABEL_28:
  if ( check_dst )
  {
    if ( msg.msg_controllen <= 0xB )
      return;
    v10 = listen->family;
    if ( v10 == 2 )
    {
      if ( msg.msg_control )
      {
        msg_control = (unsigned int *)msg.msg_control;
        check_dst = ad_reqd;
        v14 = (char *)msg.msg_control + msg.msg_controllen;
        while ( 1 )
        {
          if ( !msg_control[1] && msg_control[2] == 8 )
          {
            dst_addr.addr.addr4.s_addr = msg_control[4];
            dst_addr_4.s_addr = dst_addr.addr.addr4.s_addr;
            check_dst = msg_control[3];
          }
          v15 = *msg_control;
          v16 = (-*msg_control & 3) + 12;
          if ( *msg_control <= 0xB || v14 - (char *)msg_control < v16 || v14 - (char *)msg_control - v16 < v15 )
            break;
          msg_control = (unsigned int *)((char *)msg_control + ((v15 + 3) & 0xFFFFFFFC));
        }
        goto LABEL_52;
      }
    }
    else if ( v10 == 10 && msg.msg_control )
    {
      v11 = (char *)msg.msg_control;
      check_dst = ad_reqd;
      v12 = (char *)msg.msg_control + msg.msg_controllen;
      while ( 1 )
      {
        if ( *((_DWORD *)v11 + 1) == 41 && *((_DWORD *)v11 + 2) == dnsmasq_daemon_0[283] )
        {
          dst_addr = *(all_addr *)(v11 + 12);
          check_dst = *((_DWORD *)v11 + 7);
        }
        v17 = *(_DWORD *)v11;
        v18 = (-*(_DWORD *)v11 & 3) + 12;
        if ( *(_DWORD *)v11 <= 0xBu || v12 - v11 < v18 || v12 - v11 - v18 < v17 )
          break;
        v11 += (v17 + 3) & 0xFFFFFFFC;
      }
LABEL_52:
      v19 = indextoname(listen->fd, check_dst, &ifr);
      goto LABEL_53;
    }
    check_dst = ad_reqd;
    v19 = indextoname(listen->fd, ad_reqd, &ifr);
LABEL_53:
    if ( !v19 )
      return;
    if ( !iface_check(listen->family, &dst_addr, &ifr, &auth_dns) )
    {
      if ( *((char *)dnsmasq_daemon_0 + 4) >= 0 )
        enumerate_interfaces(0);
      if ( !loopback_exception(listen->fd, listen->family, &dst_addr, &ifr)
        && !label_exception(check_dst, listen->family, &dst_addr) )
      {
        return;
      }
    }
    if ( listen->family == 2 && (*dnsmasq_daemon_0 & 0x40000) != 0 )
    {
      v26 = dnsmasq_daemon_0[127];
      if ( v26 )
      {
        while ( *(_WORD *)v26 != 2 || *(_DWORD *)(v26 + 4) != dst_addr_4.s_addr )
        {
          v26 = *(_DWORD *)(v26 + 80);
          if ( !v26 )
          {
            if ( *((char *)dnsmasq_daemon_0 + 4) < 0 )
            {
              v27 = dnsmasq_daemon_0[127];
              v28 = dst_addr_4.s_addr;
              goto LABEL_84;
            }
            goto LABEL_81;
          }
        }
        v27 = dnsmasq_daemon_0[127];
        v28 = dst_addr_4.s_addr;
        do
        {
LABEL_84:
          if ( *(_WORD *)v27 == 2 && *(_DWORD *)(v27 + 4) == v28 )
          {
            s_addr = *(_DWORD *)(v27 + 28);
            goto LABEL_61;
          }
          v27 = *(_DWORD *)(v27 + 80);
        }
        while ( v27 );
        dst_addr_4.s_addr = 0;
      }
      else if ( *((char *)dnsmasq_daemon_0 + 4) >= 0 )
      {
LABEL_81:
        enumerate_interfaces(0);
        v27 = dnsmasq_daemon_0[127];
        if ( v27 )
        {
          v28 = dst_addr_4.s_addr;
          goto LABEL_84;
        }
        dst_addr_4.s_addr = 0;
      }
      else
      {
        dst_addr_4.s_addr = 0;
      }
    }
  }
LABEL_61:
  v20 = dnsmasq_daemon_0;
  v21 = dnsmasq_daemon_0[285] + 1;
  dnsmasq_daemon_0[285] = v21;
  v20[286] = v21;
  v20[287] = &source_addr;
  if ( !extract_request(header, v4, v20[121], &type) )
  {
    v24 = ad_reqd;
LABEL_93:
    if ( find_pseudoheader(header, n, 0, &t_cp, 0, 0) )
    {
      v29 = _byteswap_ushort(*(_WORD *)t_cp);
      v30 = t_cp[4];
      t_cp += 6;
      ad_reqd = v30 >> 7;
      v31 = *((_WORD *)dnsmasq_daemon_0 + 216);
      if ( v29 <= v31 )
        v31 = v29;
      v32 = 1;
    }
    else
    {
      v32 = ad_reqd;
      v31 = 512;
    }
    if ( auth_dns )
    {
      v36 = answer_auth(header, (char *)header + v31, n, now, &source_addr, v24, ad_reqd, v32);
      if ( v36 )
      {
        v37 = 1;
        if ( (*dnsmasq_daemon_0 & 0x2000) == 0 )
          v37 = (dnsmasq_daemon_0[1] >> 7) & 1;
        send_from(listen->fd, v37, (char *)header, v36, &source_addr, &dst_addr, check_dst);
        ++dnsmasq_daemon_0[124];
      }
    }
    else
    {
      v33 = 1;
      if ( (header->hb4 & 0x20) == 0 )
        v33 = ad_reqd;
      v34 = answer_request(header, (char *)header + v31, n, dst_addr_4.s_addr, s_addr, now, v33, ad_reqd, v32);
      if ( v34 )
      {
        v35 = 1;
        if ( (*dnsmasq_daemon_0 & 0x2000) == 0 )
          v35 = (dnsmasq_daemon_0[1] >> 7) & 1;
        send_from(listen->fd, v35, (char *)header, v34, &source_addr, &dst_addr, check_dst);
        ++dnsmasq_daemon_0[122];
      }
      else if ( forward_query(listen->fd, &source_addr, &dst_addr, check_dst, header, n, now, 0, v33, ad_reqd) )
      {
        ++dnsmasq_daemon_0[123];
      }
      else
      {
        ++dnsmasq_daemon_0[122];
      }
    }
    return;
  }
  v22 = "query";
  if ( auth_dns )
    v22 = "auth";
  v23 = querystr(v22, type);
  if ( listen->family == 2 )
    log_query(524424, dnsmasq_daemon_0[121], &source_addr.in6.sin6_flowinfo, v23);
  else
    log_query(524552, dnsmasq_daemon_0[121], &source_addr.in6.sin6_addr, v23);
  v24 = auth_dns;
  if ( auth_dns )
  {
    v24 = ad_reqd;
  }
  else if ( (*dnsmasq_daemon_0 & 0x40000) == 0 )
  {
    v25 = dnsmasq_daemon_0[20];
    if ( v25 )
    {
      while ( !in_zone(v25, dnsmasq_daemon_0[121], 0) )
      {
        v25 = *(_DWORD *)(v25 + 16);
        if ( !v25 )
        {
          v24 = 0;
          goto LABEL_92;
        }
      }
      auth_dns = 1;
      v24 = 1;
    }
  }
LABEL_92:
  if ( !detect_loop(dnsmasq_daemon_0[121], type) )
    goto LABEL_93;
}
