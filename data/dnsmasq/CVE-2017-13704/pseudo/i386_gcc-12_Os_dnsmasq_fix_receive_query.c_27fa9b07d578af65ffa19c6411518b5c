void __cdecl receive_query(listener *listen, time_t now)
{
  const signed __int32 *v2; // eax
  int family; // ecx
  irec *iface; // edx
  int s_addr; // edi
  size_t v6; // eax
  unsigned int v7; // ecx
  char *v8; // edi
  int v9; // ecx
  mysockaddr *p_source_addr; // edi
  int v11; // edx
  const signed __int32 *v12; // eax
  signed __int32 v13; // esi
  int i; // esi
  unsigned __int32 v15; // eax
  struct cmsghdr *j; // eax
  struct cmsghdr *k; // eax
  signed __int32 m; // eax
  signed __int32 ii; // eax
  const signed __int32 *v20; // eax
  signed __int32 v21; // edi
  int v22; // eax
  int v23; // ecx
  const char *v24; // eax
  int v25; // eax
  int v26; // edx
  int v27; // eax
  int v28; // esi
  signed __int32 jj; // esi
  __int16 v30; // dx
  __int16 v31; // ax
  char v32; // t0
  signed __int32 v33; // eax
  char v34; // t1
  int v35; // edx
  char *v36; // eax
  size_t v37; // edx
  int v38; // eax
  size_t v39; // esi
  size_t v40; // edx
  int v41; // eax
  int v42; // [esp+4h] [ebp-D4h]
  int do_bit; // [esp+8h] [ebp-D0h]
  int n; // [esp+Ch] [ebp-CCh]
  in_addr dst_addr_4; // [esp+10h] [ebp-C8h]
  int if_index; // [esp+14h] [ebp-C4h]
  mysockaddr *header; // [esp+18h] [ebp-C0h]
  unsigned __int16 type; // [esp+22h] [ebp-B6h] BYREF
  unsigned __int8 *t_cp; // [esp+24h] [ebp-B4h] BYREF
  int auth_dns; // [esp+28h] [ebp-B0h] BYREF
  msghdr msg; // [esp+2Ch] [ebp-ACh] BYREF
  iovec iov[1]; // [esp+48h] [ebp-90h] BYREF
  all_addr dst_addr; // [esp+50h] [ebp-88h] BYREF
  mysockaddr source_addr; // [esp+60h] [ebp-78h] BYREF
  union {cmsghdr align;char control6[32];char control[24];} control_u; // [esp+7Ch] [ebp-5Ch] BYREF
  ifreq ifr; // [esp+9Ch] [ebp-3Ch] BYREF
  unsigned int v57; // [esp+BCh] [ebp-1Ch]

  v57 = __readgsdword(0x14u);
  v2 = dnsmasq_daemon_0;
  header = (mysockaddr *)dnsmasq_daemon_0[119];
  auth_dns = 0;
  dst_addr_4.s_addr = *dnsmasq_daemon_0 & 0x2000;
  if ( dst_addr_4.s_addr )
  {
    family = listen->family;
    if_index = family == 10;
    iface = listen->iface;
    *((_DWORD *)dnsmasq_daemon_0 + 132) = 0;
    dst_addr.addr.addr4.s_addr = 0;
    v42 = 0;
    if ( iface )
    {
      auth_dns = iface->dns_auth;
      dst_addr_4.s_addr = 0;
      if ( family == 2 )
      {
        s_addr = iface->netmask.s_addr;
        dst_addr.addr.addr4.s_addr = iface->addr.in.sin_addr.s_addr;
        dst_addr_4.s_addr = dst_addr.addr.addr4.s_addr;
        v42 = s_addr;
      }
    }
    else
    {
      dst_addr_4.s_addr = 0;
    }
  }
  else
  {
    if_index = 1;
    *((_DWORD *)dnsmasq_daemon_0 + 132) = 0;
    dst_addr.addr.addr4.s_addr = 0;
    v42 = 0;
  }
  v6 = *((unsigned __int16 *)v2 + 216);
  msg.msg_controllen = 32;
  msg.msg_namelen = 28;
  iov[0].iov_len = v6;
  msg.msg_control = &control_u;
  iov[0].iov_base = header;
  msg.msg_name = &source_addr;
  msg.msg_iov = iov;
  msg.msg_flags = 0;
  msg.msg_iovlen = 1;
  n = recvmsg(listen->fd, &msg, 0);
  if ( n <= 11 )
    return;
  do_bit = msg.msg_flags & 0x20;
  if ( (msg.msg_flags & 0x20) != 0 || header->sa.sa_data[0] < 0 )
    return;
  v7 = *((unsigned __int16 *)dnsmasq_daemon_0 + 216) - n;
  v8 = (char *)(n + dnsmasq_daemon_0[119]);
  memset(v8, 0, v7);
  p_source_addr = (mysockaddr *)&v8[v7];
  v9 = 0;
  v11 = listen->family;
  source_addr.sa.sa_family = v11;
  if ( v11 == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
    v12 = dnsmasq_daemon_0;
    if ( (*((_BYTE *)dnsmasq_daemon_0 + 6) & 2) == 0 )
      goto LABEL_30;
    goto LABEL_22;
  }
  if ( !source_addr.in.sin_port )
    return;
  source_addr.in.sin_addr.s_addr = 0;
  v12 = dnsmasq_daemon_0;
  if ( (*((_BYTE *)dnsmasq_daemon_0 + 6) & 2) != 0 )
  {
    v13 = dnsmasq_daemon_0[284];
    if ( v11 == 10 )
    {
      while ( v13 )
      {
        if ( (*(_BYTE *)(v13 + 16) & 2) != 0 && is_same_net6(v13, &source_addr.in6.sin6_addr, *(_DWORD *)(v13 + 20), v9) )
          goto LABEL_30;
        v13 = *(_DWORD *)(v13 + 24);
      }
      goto LABEL_28;
    }
LABEL_22:
    for ( i = v12[284]; i; i = *(_DWORD *)(i + 24) )
    {
      v15 = _byteswap_ulong(-1 << (32 - *(_BYTE *)(i + 20)));
      if ( (*(_BYTE *)(i + 16) & 2) == 0 && is_same_net(*(_DWORD *)i, source_addr.in.sin_addr.s_addr, v15, v11) )
        goto LABEL_30;
    }
LABEL_28:
    if ( !warned_2 )
    {
      my_syslog(4, "Ignoring query from non-local network", p_source_addr, p_source_addr);
      warned_2 = 1;
    }
    return;
  }
LABEL_30:
  if ( if_index )
  {
    if ( msg.msg_controllen <= 0xB )
      return;
    if_index = 0;
    if ( listen->family == 2 )
    {
      for ( j = (struct cmsghdr *)msg.msg_control; j; j = _cmsg_nxthdr(&msg, j) )
      {
        if ( !j->cmsg_level && j->cmsg_type == 8 )
        {
          p_source_addr = *(mysockaddr **)j->__cmsg_data;
          dst_addr.addr.addr4.s_addr = *(_DWORD *)&j->__cmsg_data[4];
          dst_addr_4.s_addr = dst_addr.addr.addr4.s_addr;
          if_index = (int)p_source_addr;
        }
      }
    }
    k = (struct cmsghdr *)listen;
    if ( listen->family == 10 && msg.msg_controllen > 0xB )
    {
      for ( k = (struct cmsghdr *)msg.msg_control; k; k = _cmsg_nxthdr(&msg, k) )
      {
        if ( k->cmsg_level == 41 )
        {
          p_source_addr = (mysockaddr *)dnsmasq_daemon_0[283];
          if ( (mysockaddr *)k->cmsg_type == p_source_addr )
          {
            qmemcpy(&dst_addr, k->__cmsg_data, sizeof(dst_addr));
            p_source_addr = &source_addr;
            if_index = *(_DWORD *)&k->__cmsg_data[16];
          }
        }
      }
    }
    if ( !indextoname(listen->fd, if_index, &ifr, k) )
      return;
    if ( !iface_check(listen->family, &dst_addr, &ifr, &auth_dns) )
    {
      if ( *((char *)dnsmasq_daemon_0 + 4) >= 0 )
        enumerate_interfaces(0);
      if ( !loopback_exception(listen->fd, listen->family, &dst_addr, &ifr)
        && !label_exception(if_index, listen->family, &dst_addr, p_source_addr) )
      {
        return;
      }
    }
    if ( listen->family == 2 && _bittest(dnsmasq_daemon_0, 0x12u) )
    {
      for ( m = dnsmasq_daemon_0[127]; m; m = *(_DWORD *)(m + 80) )
      {
        if ( *(_WORD *)m == 2 && *(_DWORD *)(m + 4) == dst_addr_4.s_addr )
          goto LABEL_64;
      }
      if ( *((char *)dnsmasq_daemon_0 + 4) >= 0 )
        enumerate_interfaces(0);
LABEL_64:
      for ( ii = dnsmasq_daemon_0[127]; ; ii = *(_DWORD *)(ii + 80) )
      {
        if ( !ii )
        {
          dst_addr_4.s_addr = 0;
          goto LABEL_70;
        }
        if ( *(_WORD *)ii == 2 && *(_DWORD *)(ii + 4) == dst_addr_4.s_addr )
          break;
      }
      v42 = *(_DWORD *)(ii + 28);
    }
  }
LABEL_70:
  v20 = dnsmasq_daemon_0;
  v21 = dnsmasq_daemon_0[285];
  *((_DWORD *)dnsmasq_daemon_0 + 285) = v21 + 1;
  *((_DWORD *)v20 + 286) = v21 + 1;
  *((_DWORD *)v20 + 287) = &source_addr;
  v22 = extract_request(header, n, v20[121], &type);
  if ( !v22 )
  {
    v28 = 0;
LABEL_87:
    if ( find_pseudoheader(header, n, 0, &t_cp, 0, 0, v22, v22) )
    {
      v30 = *((_WORD *)t_cp + 2);
      v31 = *(_WORD *)t_cp;
      t_cp += 6;
      v32 = HIBYTE(v30);
      HIBYTE(v30) = v30;
      LOBYTE(v30) = v32;
      v34 = HIBYTE(v31);
      BYTE1(v33) = v31;
      LOBYTE(v33) = v34;
      do_bit = (unsigned int)v30 >> 31;
      if ( (unsigned __int16)v33 > (unsigned __int16)dnsmasq_daemon_0[108] )
        v33 = dnsmasq_daemon_0[108];
      v35 = 1;
    }
    else
    {
      v35 = 0;
      LOWORD(v33) = 512;
    }
    v36 = (char *)header + (unsigned __int16)v33;
    if ( auth_dns )
    {
      v37 = answer_auth(header, v36, n, now, &source_addr, v28, do_bit, v35);
      if ( v37 )
      {
        v38 = 1;
        if ( !_bittest(dnsmasq_daemon_0, 0xDu) )
          v38 = ((unsigned __int32)dnsmasq_daemon_0[1] >> 7) & 1;
        send_from(listen->fd, v38, (char *)header, v37, &source_addr, &dst_addr, if_index);
        ++dnsmasq_daemon_0[124];
      }
    }
    else
    {
      v39 = 1;
      if ( (header->sa.sa_data[1] & 0x20) == 0 )
        v39 = do_bit;
      v40 = answer_request(header, v36, n, dst_addr_4.s_addr, v42, now, v39, do_bit, v35);
      if ( v40 )
      {
        v41 = 1;
        if ( !_bittest(dnsmasq_daemon_0, 0xDu) )
          v41 = ((unsigned __int32)dnsmasq_daemon_0[1] >> 7) & 1;
        send_from(listen->fd, v41, (char *)header, v40, &source_addr, &dst_addr, if_index);
        ++dnsmasq_daemon_0[122];
      }
      else if ( forward_query(if_index, header, (all_addr *)n, now, 0, v39, 0, 0, (int)&dnsmasq_daemon_0, v42) )
      {
        ++dnsmasq_daemon_0[123];
      }
      else
      {
        ++dnsmasq_daemon_0[122];
      }
    }
    return;
  }
  v24 = "query";
  if ( auth_dns )
    v24 = "auth";
  v25 = querystr(v24, type, v23, v23);
  if ( listen->family == 2 )
    log_query(524424, dnsmasq_daemon_0[121], &source_addr.in6.sin6_flowinfo, v25);
  else
    log_query(524552, dnsmasq_daemon_0[121], &source_addr.in6.sin6_addr, v25);
  v27 = (int)dnsmasq_daemon_0;
  if ( !auth_dns && !_bittest(dnsmasq_daemon_0, 0x12u) )
  {
    for ( jj = dnsmasq_daemon_0[20]; ; jj = *(_DWORD *)(jj + 16) )
    {
      v27 = dnsmasq_daemon_0[121];
      if ( !jj )
        break;
      v27 = in_zone(jj, v27, 0, v26);
      if ( v27 )
      {
        auth_dns = 1;
        v28 = 1;
        goto LABEL_84;
      }
    }
  }
  v28 = 0;
LABEL_84:
  v22 = detect_loop(dnsmasq_daemon_0[121], type, v27, v27);
  if ( !v22 )
    goto LABEL_87;
}
