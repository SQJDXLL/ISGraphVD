void __fastcall receive_query(listener *listen, time_t now)
{
  unsigned int v2; // r13d
  __int64 v4; // rax
  dns_header *v5; // r12
  int v6; // edx
  irec *iface; // rdx
  bool v8; // zf
  in_addr_t s_addr; // edi
  size_t v10; // rax
  int fd; // edi
  int family; // eax
  __int64 v13; // rdx
  unsigned int *v14; // r15
  in6_addr *p_sin6_addr; // rcx
  __int64 v16; // r8
  int v17; // eax
  int v18; // eax
  void *i; // rsi
  void *j; // rsi
  __int64 k; // rax
  __int64 m; // rax
  __int64 v23; // rax
  int v24; // ecx
  const char *v25; // rdi
  __int64 v26; // rcx
  in6_addr *p_sin6_flowinfo; // rdx
  __int64 v28; // rdi
  unsigned int v29; // r14d
  __int64 ii; // r14
  __int64 v31; // r8
  __int16 v32; // si
  unsigned __int8 *v33; // rax
  __int16 v34; // dx
  unsigned __int16 v35; // si
  char v36; // t0
  __int64 v37; // rax
  char *v38; // rsi
  size_t v39; // rax
  __int64 v40; // r14
  size_t v41; // rcx
  in_addr dst_addr_4; // [rsp+14h] [rbp-14Ch]
  signed __int64 n; // [rsp+18h] [rbp-148h]
  unsigned int ad_reqd; // [rsp+20h] [rbp-140h]
  in_addr_t v45; // [rsp+24h] [rbp-13Ch]
  in6_addr *v47; // [rsp+30h] [rbp-130h]
  unsigned __int16 type; // [rsp+42h] [rbp-11Eh] BYREF
  int auth_dns; // [rsp+44h] [rbp-11Ch] BYREF
  unsigned __int8 *t_cp; // [rsp+48h] [rbp-118h] BYREF
  msghdr msg; // [rsp+50h] [rbp-110h] BYREF
  iovec iov[1]; // [rsp+88h] [rbp-D8h] BYREF
  all_addr dst_addr; // [rsp+9Ch] [rbp-C4h] BYREF
  mysockaddr source_addr; // [rsp+ACh] [rbp-B4h] BYREF
  ifreq ifr; // [rsp+C8h] [rbp-98h] BYREF
  union {cmsghdr align;char control6[40];char control[32];} control_u; // [rsp+F8h] [rbp-68h] BYREF
  unsigned __int64 v57; // [rsp+120h] [rbp-40h]

  v2 = 1;
  v57 = __readfsqword(0x28u);
  v4 = *(_QWORD *)&dnsmasq_daemon_0;
  auth_dns = 0;
  v5 = *(dns_header **)(*(_QWORD *)&dnsmasq_daemon_0 + 848LL);
  v6 = **(_DWORD **)&dnsmasq_daemon_0 & 0x2000;
  if ( v6 )
    v2 = listen->family == 10;
  *(_QWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 944LL) = 0LL;
  dst_addr.addr.addr4.s_addr = 0;
  v45 = 0;
  if ( v6 && (iface = listen->iface) != 0LL && (v8 = listen->family == 2, auth_dns = iface->dns_auth, v8) )
  {
    s_addr = iface->netmask.s_addr;
    dst_addr.addr.addr4.s_addr = iface->addr.in.sin_addr.s_addr;
    dst_addr_4.s_addr = dst_addr.addr.addr4.s_addr;
    v45 = s_addr;
  }
  else
  {
    dst_addr_4.s_addr = 0;
  }
  v10 = *(unsigned __int16 *)(v4 + 768);
  fd = listen->fd;
  iov[0].iov_base = v5;
  iov[0].iov_len = v10;
  msg.msg_control = &control_u;
  msg.msg_controllen = 40LL;
  msg.msg_flags = 0;
  msg.msg_name = &source_addr;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  msg.msg_iovlen = 1LL;
  n = recvmsg(fd, &msg, 0);
  if ( n <= 11 )
    return;
  ad_reqd = msg.msg_flags & 0x20;
  if ( (msg.msg_flags & 0x20) != 0 || (v5->hb3 & 0x80u) != 0 )
    return;
  family = listen->family;
  source_addr.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
  }
  else
  {
    if ( !source_addr.in.sin_port )
      return;
    source_addr.in.sin_addr.s_addr = 0;
  }
  v13 = *(_QWORD *)&dnsmasq_daemon_0;
  if ( (*(_BYTE *)(*(_QWORD *)&dnsmasq_daemon_0 + 6LL) & 2) == 0 )
  {
LABEL_31:
    if ( v2 )
    {
      if ( msg.msg_controllen <= 0xF )
        return;
      v2 = 0;
      if ( listen->family == 2 )
      {
        for ( i = msg.msg_control; i; i = _cmsg_nxthdr(&msg, (struct cmsghdr *)i) )
        {
          if ( *((_QWORD *)i + 1) == 0x800000000LL )
          {
            v2 = *((_DWORD *)i + 4);
            dst_addr.addr.addr4.s_addr = *((_DWORD *)i + 5);
            dst_addr_4.s_addr = dst_addr.addr.addr4.s_addr;
          }
        }
      }
      if ( listen->family == 10 && msg.msg_controllen > 0xF )
      {
        for ( j = msg.msg_control; j; j = _cmsg_nxthdr(&msg, (struct cmsghdr *)j) )
        {
          if ( *((_DWORD *)j + 2) == 41 && *((_DWORD *)j + 3) == *(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 1560LL) )
          {
            v2 = *((_DWORD *)j + 8);
            dst_addr = (all_addr)*((_OWORD *)j + 1);
          }
        }
      }
      if ( !(unsigned int)indextoname((unsigned int)listen->fd, v2, &ifr) )
        return;
      if ( !(unsigned int)iface_check((unsigned int)listen->family, &dst_addr, &ifr, &auth_dns) )
      {
        if ( *(char *)(*(_QWORD *)&dnsmasq_daemon_0 + 4LL) >= 0 )
          enumerate_interfaces(0LL);
        if ( !(unsigned int)loopback_exception((unsigned int)listen->fd, (unsigned int)listen->family, &dst_addr, &ifr)
          && !(unsigned int)label_exception(v2, (unsigned int)listen->family, &dst_addr) )
        {
          return;
        }
      }
      if ( listen->family == 2 && _bittest(*(const signed __int32 **)&dnsmasq_daemon_0, 0x12u) )
      {
        for ( k = *(_QWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 904LL); k; k = *(_QWORD *)(k + 88) )
        {
          if ( *(_WORD *)k == 2 && *(_DWORD *)(k + 4) == dst_addr_4.s_addr )
            goto LABEL_64;
        }
        if ( *(char *)(*(_QWORD *)&dnsmasq_daemon_0 + 4LL) >= 0 )
          enumerate_interfaces(0LL);
LABEL_64:
        for ( m = *(_QWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 904LL); ; m = *(_QWORD *)(m + 88) )
        {
          if ( !m )
          {
            dst_addr_4.s_addr = 0;
            goto LABEL_70;
          }
          if ( *(_WORD *)m == 2 && *(_DWORD *)(m + 4) == dst_addr_4.s_addr )
            break;
        }
        v45 = *(_DWORD *)(m + 28);
      }
    }
LABEL_70:
    v23 = *(_QWORD *)&dnsmasq_daemon_0;
    v24 = *(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 1576LL);
    *(_QWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 1584LL) = &source_addr;
    *(_DWORD *)(v23 + 1576) = v24 + 1;
    *(_DWORD *)(v23 + 1580) = v24 + 1;
    if ( (unsigned int)extract_request(v5, n, *(_QWORD *)(v23 + 864), &type) )
    {
      v25 = "auth";
      if ( !auth_dns )
        v25 = "query";
      v26 = querystr(v25, type);
      if ( listen->family == 2 )
      {
        p_sin6_flowinfo = (in6_addr *)&source_addr.in6.sin6_flowinfo;
        v28 = 524424LL;
      }
      else
      {
        p_sin6_flowinfo = &source_addr.in6.sin6_addr;
        v28 = 524552LL;
      }
      log_query(v28, *(_QWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 864LL), p_sin6_flowinfo, v26);
      if ( !auth_dns && !_bittest(*(const signed __int32 **)&dnsmasq_daemon_0, 0x12u) )
      {
        for ( ii = *(_QWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 144LL); ii; ii = *(_QWORD *)(ii + 32) )
        {
          if ( (unsigned int)in_zone(ii, *(_QWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 864LL), 0LL) )
          {
            auth_dns = 1;
            v29 = 1;
            goto LABEL_84;
          }
        }
      }
      v29 = 0;
LABEL_84:
      if ( (unsigned int)detect_loop(*(_QWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 864LL), type) )
        return;
    }
    else
    {
      v29 = 0;
    }
    if ( find_pseudoheader(v5, n, 0LL, &t_cp, 0LL, 0LL) )
    {
      v32 = *(_WORD *)t_cp;
      v33 = t_cp + 6;
      t_cp += 4;
      v34 = *((_WORD *)v33 - 1);
      t_cp = v33;
      v35 = __ROL2__(v32, 8);
      v36 = HIBYTE(v34);
      HIBYTE(v34) = v34;
      LOBYTE(v34) = v36;
      ad_reqd = (unsigned int)v34 >> 31;
      if ( v35 > (unsigned __int16)*(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 768LL) )
        v35 = *(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 768LL);
      v37 = 1LL;
    }
    else
    {
      v37 = 0LL;
      v35 = 512;
    }
    v38 = (char *)v5 + v35;
    if ( auth_dns )
    {
      v39 = answer_auth(v5, v38, n, now, &source_addr, v29, ad_reqd, v37);
      if ( v39 )
      {
        send_from(
          listen->fd,
          (**(_QWORD **)&dnsmasq_daemon_0 & 0x8000002000LL) != 0,
          (char *)v5,
          v39,
          &source_addr,
          &dst_addr,
          v2);
        ++*(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 880LL);
      }
    }
    else
    {
      v40 = 1LL;
      if ( (v5->hb4 & 0x20) == 0 )
        v40 = ad_reqd;
      v41 = answer_request(v5, v38, n, dst_addr_4.s_addr, v45, now, v40, ad_reqd, v37, v31);
      if ( v41 )
      {
        send_from(
          listen->fd,
          (**(_QWORD **)&dnsmasq_daemon_0 & 0x8000002000LL) != 0,
          (char *)v5,
          v41,
          &source_addr,
          &dst_addr,
          v2);
        ++*(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 872LL);
      }
      else if ( forward_query(listen->fd, &source_addr, &dst_addr, v2, v5, n, now, 0LL, v40, 0) )
      {
        ++*(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 876LL);
      }
      else
      {
        ++*(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 872LL);
      }
    }
    return;
  }
  v14 = *(unsigned int **)(*(_QWORD *)&dnsmasq_daemon_0 + 1568LL);
  p_sin6_addr = &source_addr.in6.sin6_addr;
  v16 = 32LL;
  if ( family == 10 )
  {
    while ( v14 )
    {
      if ( (v14[4] & 2) != 0 )
      {
        v47 = p_sin6_addr;
        v17 = is_same_net6(v14, p_sin6_addr, v14[5], p_sin6_addr, v16);
        p_sin6_addr = v47;
        if ( v17 )
          goto LABEL_31;
      }
      v14 = (unsigned int *)*((_QWORD *)v14 + 3);
    }
  }
  else
  {
    while ( v14 )
    {
      p_sin6_addr = (in6_addr *)(32 - v14[5]);
      v13 = _byteswap_ulong(-1 << (32 - *((_BYTE *)v14 + 20)));
      if ( (v14[4] & 2) == 0 )
      {
        v18 = is_same_net(*v14, source_addr.in.sin_addr.s_addr, v13);
        v16 = 32LL;
        if ( v18 )
          goto LABEL_31;
      }
      v14 = (unsigned int *)*((_QWORD *)v14 + 3);
    }
  }
  if ( !warned_2 )
  {
    my_syslog(4LL, "Ignoring query from non-local network", v13, p_sin6_addr, v16);
    warned_2 = 1;
  }
}
