void __fastcall receive_query(listener *listen, time_t now)
{
  __int64 v4; // rax
  dns_header *v5; // r15
  bool v6; // r13
  in_addr_t s_addr; // esi
  irec *iface; // rcx
  unsigned int v9; // edx
  ssize_t v10; // rax
  size_t v11; // r12
  int family; // eax
  time_t v13; // r14
  int v14; // eax
  __int64 v15; // r13
  struct cmsghdr *msg_control; // rax
  unsigned int *v17; // rax
  __int64 v18; // rax
  int v19; // esi
  __int64 v20; // rdx
  unsigned int *v21; // r14
  __int64 v22; // rax
  int v23; // ecx
  const char *v24; // rdi
  __int64 v25; // rax
  in6_addr *p_sin6_flowinfo; // rdx
  __int64 v27; // rdi
  __int64 v28; // rax
  __int64 v29; // r14
  __int64 v30; // rbp
  __int64 v31; // rcx
  unsigned __int16 v32; // dx
  unsigned int v33; // eax
  __int64 v34; // rax
  __int64 v35; // rsi
  size_t v36; // rax
  int v37; // esi
  time_t v38; // r9
  int v39; // r14d
  int v40; // r13d
  __int64 v41; // rcx
  size_t v42; // rax
  int fd; // edi
  int v44; // [rsp-8h] [rbp-120h]
  int dns_auth; // [rsp+0h] [rbp-118h] BYREF
  unsigned __int16 v46; // [rsp+6h] [rbp-112h] BYREF
  unsigned int dst_iface[2]; // [rsp+8h] [rbp-110h]
  time_t v48; // [rsp+10h] [rbp-108h]
  unsigned int v49; // [rsp+1Ch] [rbp-FCh]
  all_addr source; // [rsp+20h] [rbp-F8h] BYREF
  mysockaddr to; // [rsp+30h] [rbp-E8h] BYREF
  __int64 v52[5]; // [rsp+50h] [rbp-C8h] BYREF
  struct msghdr message; // [rsp+78h] [rbp-A0h] BYREF
  _QWORD v54[2]; // [rsp+B0h] [rbp-68h] BYREF
  char v55; // [rsp+C0h] [rbp-58h] BYREF

  v4 = dnsmasq_daemon;
  v5 = *(dns_header **)(dnsmasq_daemon + 848LL);
  dns_auth = 0;
  v6 = 1;
  if ( (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) != 0 )
    v6 = listen->family == 10;
  *(_QWORD *)(dnsmasq_daemon + 944LL) = 0LL;
  source.addr.addr4.s_addr = 0;
  s_addr = 0;
  if ( (*(_BYTE *)(v4 + 1) & 0x20) != 0 && (iface = listen->iface) != 0LL )
  {
    dns_auth = iface->dns_auth;
    v9 = 0;
    if ( listen->family == 2 )
    {
      s_addr = iface->addr.in.sin_addr.s_addr;
      source.addr.addr4.s_addr = s_addr;
      v9 = iface->netmask.s_addr;
    }
  }
  else
  {
    v9 = 0;
  }
  v49 = v9;
  LODWORD(v48) = s_addr;
  v54[0] = v5;
  v54[1] = *(unsigned __int16 *)(v4 + 768);
  message.msg_control = &v55;
  message.msg_controllen = 40LL;
  message.msg_flags = 0;
  message.msg_name = &to;
  message.msg_namelen = 28;
  message.msg_iov = (iovec *)v54;
  message.msg_iovlen = 1LL;
  v10 = recvmsg(listen->fd, &message, 0);
  if ( v10 < 12 || (message.msg_flags & 0x20) != 0 || (v5->hb3 & 0x80u) != 0 )
    return;
  v11 = v10;
  family = listen->family;
  to.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !to.in.sin_port )
      return;
  }
  else
  {
    if ( !to.in.sin_port )
      return;
    to.in.sin_addr.s_addr = 0;
  }
  if ( (*(_BYTE *)(dnsmasq_daemon + 6LL) & 2) != 0 )
  {
    v21 = *(unsigned int **)(dnsmasq_daemon + 1568LL);
    if ( family == 10 )
    {
      while ( v21 )
      {
        if ( (v21[4] & 2) != 0 && (unsigned int)is_same_net6(v21, &to.in6.sin6_addr, v21[5]) )
          goto LABEL_17;
        v21 = (unsigned int *)*((_QWORD *)v21 + 3);
      }
    }
    else
    {
      while ( v21 )
      {
        if ( (v21[4] & 2) == 0
          && (unsigned int)is_same_net(*v21, to.in.sin_addr.s_addr, _byteswap_ulong(-1 << -*((_BYTE *)v21 + 20))) )
        {
          goto LABEL_17;
        }
        v21 = (unsigned int *)*((_QWORD *)v21 + 3);
      }
    }
    if ( !receive_query_warned )
    {
      my_syslog(4LL, "Ignoring query from non-local network");
      receive_query_warned = 1;
    }
    return;
  }
LABEL_17:
  *(_QWORD *)dst_iface = 0LL;
  if ( !v6 )
  {
    v15 = 0LL;
    v13 = now;
    goto LABEL_66;
  }
  if ( message.msg_controllen < 0x10 )
    return;
  v13 = now;
  v14 = listen->family;
  v15 = 0LL;
  if ( v14 == 2 )
  {
    msg_control = (struct cmsghdr *)message.msg_control;
    v15 = 0LL;
    if ( !message.msg_control )
      goto LABEL_34;
    do
    {
      if ( !msg_control->cmsg_level && msg_control->cmsg_type == 8 )
      {
        LODWORD(v48) = *(_DWORD *)&msg_control->__cmsg_data[4];
        source.addr.addr4.s_addr = v48;
        v15 = *(unsigned int *)msg_control->__cmsg_data;
      }
      msg_control = _cmsg_nxthdr(&message, msg_control);
    }
    while ( msg_control );
    v14 = listen->family;
    v13 = now;
  }
  if ( v14 == 10 )
  {
    v17 = (unsigned int *)message.msg_control;
    if ( message.msg_control )
    {
      if ( message.msg_controllen >= 0x10 )
      {
        do
        {
          if ( v17[2] == 41 && v17[3] == *(_DWORD *)(dnsmasq_daemon + 1560LL) )
          {
            source = (all_addr)*((_OWORD *)v17 + 1);
            v15 = v17[8];
          }
          v17 = (unsigned int *)_cmsg_nxthdr(&message, (struct cmsghdr *)v17);
        }
        while ( v17 );
        v13 = now;
      }
    }
  }
LABEL_34:
  if ( (unsigned int)indextoname((unsigned int)listen->fd, (unsigned int)v15, v52) )
  {
    if ( (unsigned int)iface_check((unsigned int)listen->family, &source, v52, &dns_auth) )
      goto LABEL_41;
    if ( *(char *)(dnsmasq_daemon + 4LL) >= 0 )
      enumerate_interfaces(0LL);
    if ( (unsigned int)loopback_exception((unsigned int)listen->fd, (unsigned int)listen->family, &source, v52)
      || (unsigned int)label_exception((unsigned int)v15, (unsigned int)listen->family, &source) )
    {
LABEL_41:
      if ( listen->family == 2 && (*(_BYTE *)(dnsmasq_daemon + 2LL) & 4) != 0 )
      {
        v18 = *(_QWORD *)(dnsmasq_daemon + 904LL);
        v19 = v48;
        if ( v18 )
        {
          v20 = *(_QWORD *)(dnsmasq_daemon + 904LL);
          do
          {
            if ( *(_WORD *)v20 == 2 && *(_DWORD *)(v20 + 4) == (_DWORD)v48 )
              goto LABEL_63;
            v20 = *(_QWORD *)(v20 + 88);
          }
          while ( v20 );
        }
        if ( *(char *)(dnsmasq_daemon + 4LL) >= 0 )
        {
          enumerate_interfaces(0LL);
          v19 = v48;
          v18 = *(_QWORD *)(dnsmasq_daemon + 904LL);
        }
        while ( 1 )
        {
LABEL_63:
          if ( !v18 )
          {
            LODWORD(v48) = 0;
            goto LABEL_66;
          }
          if ( *(_WORD *)v18 == 2 && *(_DWORD *)(v18 + 4) == v19 )
            break;
          v18 = *(_QWORD *)(v18 + 88);
        }
        v49 = *(_DWORD *)(v18 + 28);
      }
LABEL_66:
      v22 = dnsmasq_daemon;
      v23 = *(_DWORD *)(dnsmasq_daemon + 1576LL) + 1;
      *(_DWORD *)(dnsmasq_daemon + 1576LL) = v23;
      *(_DWORD *)(v22 + 1580) = v23;
      *(_QWORD *)(v22 + 1584) = &to;
      if ( !(unsigned int)extract_request(v5, v11, *(_QWORD *)(v22 + 864), &v46) )
      {
LABEL_83:
        v30 = 0LL;
        if ( find_pseudoheader(v5, v11, 0LL, v52, 0LL, 0LL) )
        {
          v31 = v52[0];
          v32 = __ROL2__(*(_WORD *)v52[0], 8);
          v52[0] += 4LL;
          v33 = *(unsigned __int8 *)v52[0];
          v52[0] = v31 + 6;
          v34 = v33 >> 7;
          if ( v32 > (unsigned __int16)*(_DWORD *)(dnsmasq_daemon + 768LL) )
            v32 = *(_DWORD *)(dnsmasq_daemon + 768LL);
          v35 = v32;
          v30 = 1LL;
        }
        else
        {
          v35 = 512LL;
          v34 = 0LL;
        }
        if ( dns_auth )
        {
          v36 = answer_auth(v5, (char *)v5 + v35, v11, v13, &to, *(_QWORD *)dst_iface, v34, v30);
          if ( v36 )
          {
            v37 = 1;
            if ( (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) == 0 )
              v37 = (*(_DWORD *)(dnsmasq_daemon + 4LL) >> 7) & 1;
            send_from(listen->fd, v37, (char *)v5, v36, &to, &source, v15);
            ++*(_DWORD *)(dnsmasq_daemon + 880LL);
          }
        }
        else
        {
          *(_QWORD *)dst_iface = v15;
          v38 = v13;
          v39 = 1;
          v40 = 1;
          if ( (v5->hb4 & 0x20) == 0 )
            v40 = v34;
          v41 = (unsigned int)v48;
          v48 = v38;
          v42 = answer_request(v5, (char *)v5 + v35, v11, v41, v49);
          fd = listen->fd;
          if ( v42 )
          {
            if ( (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) == 0 )
              v39 = (*(_DWORD *)(dnsmasq_daemon + 4LL) >> 7) & 1;
            send_from(fd, v39, (char *)v5, v42, &to, &source, dst_iface[0]);
            ++*(_DWORD *)(dnsmasq_daemon + 872LL);
          }
          else if ( forward_query(fd, &to, &source, dst_iface[0], v5, v11, v48, 0LL, v40, v44) )
          {
            ++*(_DWORD *)(dnsmasq_daemon + 876LL);
          }
          else
          {
            ++*(_DWORD *)(dnsmasq_daemon + 872LL);
          }
        }
        return;
      }
      v24 = "auth";
      if ( !dns_auth )
        v24 = "query";
      v25 = querystr(v24, v46);
      if ( listen->family == 2 )
      {
        p_sin6_flowinfo = (in6_addr *)&to.in6.sin6_flowinfo;
        v27 = 524424LL;
      }
      else
      {
        p_sin6_flowinfo = &to.in6.sin6_addr;
        v27 = 524552LL;
      }
      log_query(v27, *(_QWORD *)(dnsmasq_daemon + 864LL), p_sin6_flowinfo, v25);
      if ( dns_auth )
      {
        v28 = 0LL;
LABEL_74:
        *(_QWORD *)dst_iface = v28;
        goto LABEL_82;
      }
      *(_QWORD *)dst_iface = 0LL;
      if ( (*(_BYTE *)(dnsmasq_daemon + 2LL) & 4) == 0 )
      {
        v29 = *(_QWORD *)(dnsmasq_daemon + 144LL);
        if ( v29 )
        {
          if ( (unsigned int)in_zone(*(_QWORD *)(dnsmasq_daemon + 144LL), *(_QWORD *)(dnsmasq_daemon + 864LL), 0LL) )
          {
LABEL_81:
            dns_auth = 1;
            v28 = 1LL;
            goto LABEL_74;
          }
          *(_QWORD *)dst_iface = 0LL;
          while ( 1 )
          {
            v29 = *(_QWORD *)(v29 + 32);
            if ( !v29 )
              break;
            if ( (unsigned int)in_zone(v29, *(_QWORD *)(dnsmasq_daemon + 864LL), 0LL) )
              goto LABEL_81;
          }
        }
      }
LABEL_82:
      v13 = now;
      if ( (unsigned int)detect_loop(*(_QWORD *)(dnsmasq_daemon + 864LL), v46) )
        return;
      goto LABEL_83;
    }
  }
}
