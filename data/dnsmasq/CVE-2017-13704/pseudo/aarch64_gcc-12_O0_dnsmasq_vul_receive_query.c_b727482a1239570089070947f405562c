void __cdecl receive_query(listener *listen, time_t now)
{
  int v2; // w0
  cmsghdr *msg_control; // x0
  __int64 v4; // x1
  __int64 v5; // x0
  const char *v6; // x0
  int v7; // w0
  int v8; // w0
  unsigned __int16 type; // [xsp+3Ah] [xbp+2Ah] BYREF
  unsigned __int16 udp_size; // [xsp+3Ch] [xbp+2Ch]
  unsigned __int16 flags; // [xsp+3Eh] [xbp+2Eh]
  in_addr netmask; // [xsp+40h] [xbp+30h]
  in_addr dst_addr_4; // [xsp+48h] [xbp+38h]
  int auth_dns; // [xsp+4Ch] [xbp+3Ch] BYREF
  int if_index; // [xsp+50h] [xbp+40h]
  int do_bit; // [xsp+54h] [xbp+44h]
  int have_pseudoheader; // [xsp+58h] [xbp+48h]
  int local_auth; // [xsp+5Ch] [xbp+4Ch]
  int ad_reqd; // [xsp+60h] [xbp+50h]
  int check_dst; // [xsp+64h] [xbp+54h]
  union {unsigned __int8 *c;in_pktinfo *p;} p; // [xsp+68h] [xbp+58h] BYREF
  cmsghdr *cmptr; // [xsp+70h] [xbp+60h]
  addrlist *addr; // [xsp+78h] [xbp+68h]
  irec *iface; // [xsp+80h] [xbp+70h]
  auth_zone *zone; // [xsp+88h] [xbp+78h]
  dns_header *header; // [xsp+90h] [xbp+80h]
  ssize_t n; // [xsp+98h] [xbp+88h]
  char *types; // [xsp+A0h] [xbp+90h]
  unsigned __int8 *t_cp; // [xsp+A8h] [xbp+98h]
  unsigned __int8 *t_cp_0; // [xsp+B0h] [xbp+A0h]
  size_t m; // [xsp+B8h] [xbp+A8h]
  msghdr msg; // [xsp+C0h] [xbp+B0h] BYREF
  all_addr dst_addr; // [xsp+F8h] [xbp+E8h] BYREF
  iovec iov[1]; // [xsp+108h] [xbp+F8h] BYREF
  mysockaddr source_addr; // [xsp+118h] [xbp+108h] BYREF
  union {cmsghdr align;char control6[40];char control[32];} control_u; // [xsp+138h] [xbp+128h] BYREF
  ifreq ifr; // [xsp+160h] [xbp+150h] BYREF

  header = *(dns_header **)(dnsmasq_daemon_0 + 848LL);
  udp_size = 512;
  if_index = 0;
  auth_dns = 0;
  do_bit = 0;
  have_pseudoheader = 0;
  local_auth = 0;
  v2 = (*dnsmasq_daemon_0 & 0x2000) == 0 || listen->family == 10;
  check_dst = v2;
  *(_QWORD *)(dnsmasq_daemon_0 + 944LL) = 0LL;
  dst_addr.addr.addr4.s_addr = 0;
  dst_addr_4.s_addr = 0;
  netmask.s_addr = 0;
  if ( (*dnsmasq_daemon_0 & 0x2000) != 0 )
  {
    if ( listen->iface )
    {
      auth_dns = listen->iface->dns_auth;
      if ( listen->family == 2 )
      {
        dst_addr.addr.addr4.s_addr = listen->iface->addr.in.sin_addr.s_addr;
        dst_addr_4.s_addr = dst_addr.addr.addr4.s_addr;
        netmask.s_addr = listen->iface->netmask.s_addr;
      }
    }
  }
  iov[0].iov_base = *(void **)(dnsmasq_daemon_0 + 848LL);
  iov[0].iov_len = *(unsigned __int16 *)(dnsmasq_daemon_0 + 768LL);
  msg.msg_control = &control_u;
  msg.msg_controllen = 40LL;
  msg.msg_flags = 0;
  msg.msg_name = &source_addr;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  msg.msg_iovlen = 1LL;
  n = recvmsg(listen->fd, &msg, 0);
  if ( n >= 12 && (msg.msg_flags & 0x20) == 0 && (header->hb3 & 0x80u) == 0 )
  {
    source_addr.sa.sa_family = listen->family;
    if ( listen->family == 2 )
    {
      if ( !source_addr.in.sin_port )
        return;
    }
    else
    {
      if ( !source_addr.in.sin_port )
        return;
      source_addr.in.sin_addr.s_addr = 0;
    }
    if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4LL) & 0x20000) != 0 )
    {
      if ( listen->family == 10 )
      {
        for ( addr = *(addrlist **)(dnsmasq_daemon_0 + 1568LL);
              addr
           && ((addr->flags & 2) == 0
            || !(unsigned int)is_same_net6(addr, &source_addr.in6.sin6_addr, (unsigned int)addr->prefixlen));
              addr = addr->next )
        {
          ;
        }
      }
      else
      {
        for ( addr = *(addrlist **)(dnsmasq_daemon_0 + 1568LL); addr; addr = addr->next )
        {
          LODWORD(p.c) = htonl(-1 << (32 - addr->prefixlen));
          if ( (addr->flags & 2) == 0 )
          {
            if ( (unsigned int)is_same_net(addr->addr.addr.addr4.s_addr, source_addr.in.sin_addr.s_addr, LODWORD(p.c)) )
              break;
          }
        }
      }
      if ( !addr )
      {
        if ( !warned_2 )
        {
          my_syslog(4LL, "Ignoring query from non-local network");
          warned_2 = 1;
        }
        return;
      }
    }
    if ( check_dst )
    {
      if ( msg.msg_controllen <= 0xF )
        return;
      if ( listen->family == 2 )
      {
        for ( cmptr = (cmsghdr *)msg.msg_control; cmptr; cmptr = _cmsg_nxthdr(&msg, cmptr) )
        {
          if ( !cmptr->cmsg_level && cmptr->cmsg_type == 8 )
          {
            p.c = cmptr->__cmsg_data;
            dst_addr.addr.addr4.s_addr = *(_DWORD *)&cmptr->__cmsg_data[4];
            dst_addr_4.s_addr = dst_addr.addr.addr4.s_addr;
            if_index = *(_DWORD *)cmptr->__cmsg_data;
          }
        }
      }
      if ( listen->family == 10 )
      {
        if ( msg.msg_controllen <= 0xF )
          msg_control = 0LL;
        else
          msg_control = (cmsghdr *)msg.msg_control;
        for ( cmptr = msg_control; cmptr; cmptr = _cmsg_nxthdr(&msg, cmptr) )
        {
          if ( cmptr->cmsg_level == 41 && cmptr->cmsg_type == *(_DWORD *)(dnsmasq_daemon_0 + 1560LL) )
          {
            p.c = cmptr->__cmsg_data;
            v4 = *(_QWORD *)&cmptr->__cmsg_data[8];
            *(_QWORD *)&dst_addr.addr.addr4.s_addr = *(_QWORD *)cmptr->__cmsg_data;
            *((_QWORD *)&dst_addr.addr.dnssec + 1) = v4;
            if_index = *(_DWORD *)&cmptr->__cmsg_data[16];
          }
        }
      }
      if ( !(unsigned int)indextoname((unsigned int)listen->fd, (unsigned int)if_index, &ifr) )
        return;
      if ( !(unsigned int)iface_check((unsigned int)listen->family, &dst_addr, &ifr, &auth_dns) )
      {
        if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4LL) & 0x80) == 0 )
          enumerate_interfaces(0LL);
        if ( !(unsigned int)loopback_exception((unsigned int)listen->fd, (unsigned int)listen->family, &dst_addr, &ifr)
          && !(unsigned int)label_exception((unsigned int)if_index, (unsigned int)listen->family, &dst_addr) )
        {
          return;
        }
      }
      if ( listen->family == 2 && (*dnsmasq_daemon_0 & 0x40000) != 0 )
      {
        for ( iface = *(irec **)(dnsmasq_daemon_0 + 904LL);
              iface && (iface->addr.sa.sa_family != 2 || iface->addr.in.sin_addr.s_addr != dst_addr_4.s_addr);
              iface = iface->next )
        {
          ;
        }
        if ( !iface && (*(_DWORD *)(dnsmasq_daemon_0 + 4LL) & 0x80) == 0 )
          enumerate_interfaces(0LL);
        for ( iface = *(irec **)(dnsmasq_daemon_0 + 904LL);
              iface && (iface->addr.sa.sa_family != 2 || iface->addr.in.sin_addr.s_addr != dst_addr_4.s_addr);
              iface = iface->next )
        {
          ;
        }
        if ( iface )
          netmask.s_addr = iface->netmask.s_addr;
        else
          dst_addr_4.s_addr = 0;
      }
    }
    v5 = dnsmasq_daemon_0;
    ++*(_DWORD *)(dnsmasq_daemon_0 + 1576LL);
    *(_DWORD *)(dnsmasq_daemon_0 + 1580LL) = *(_DWORD *)(v5 + 1576);
    *(_QWORD *)(dnsmasq_daemon_0 + 1584LL) = &source_addr;
    if ( !(unsigned int)extract_request(header, n, *(_QWORD *)(dnsmasq_daemon_0 + 864LL), &type) )
      goto LABEL_116;
    if ( auth_dns )
      v6 = "auth";
    else
      v6 = "query";
    types = (char *)querystr(v6, type);
    if ( listen->family == 2 )
      log_query(524424LL, *(_QWORD *)(dnsmasq_daemon_0 + 864LL), &source_addr.in6.sin6_flowinfo, types);
    else
      log_query(524552LL, *(_QWORD *)(dnsmasq_daemon_0 + 864LL), &source_addr.in6.sin6_addr, types);
    if ( !auth_dns && (*dnsmasq_daemon_0 & 0x40000) == 0 )
    {
      for ( zone = *(auth_zone **)(dnsmasq_daemon_0 + 144LL); zone; zone = zone->next )
      {
        if ( (unsigned int)in_zone(zone, *(_QWORD *)(dnsmasq_daemon_0 + 864LL), 0LL) )
        {
          auth_dns = 1;
          local_auth = 1;
          break;
        }
      }
    }
    if ( !(unsigned int)detect_loop(*(_QWORD *)(dnsmasq_daemon_0 + 864LL), type) )
    {
LABEL_116:
      if ( find_pseudoheader(header, n, 0LL, &p, 0LL, 0LL) )
      {
        have_pseudoheader = 1;
        t_cp = p.c;
        udp_size = _byteswap_ushort(*(_WORD *)p.c);
        p.c += 2;
        p.c += 2;
        t_cp_0 = p.c;
        flags = _byteswap_ushort(*(_WORD *)p.c);
        p.c += 2;
        if ( (flags & 0x8000u) != 0 )
          do_bit = 1;
        if ( udp_size > (unsigned int)*(unsigned __int16 *)(dnsmasq_daemon_0 + 768LL) )
          udp_size = *(_WORD *)(dnsmasq_daemon_0 + 768LL);
      }
      if ( auth_dns )
      {
        m = answer_auth(
              header,
              (char *)header + udp_size,
              n,
              now,
              &source_addr,
              (unsigned int)local_auth,
              (unsigned int)do_bit,
              (unsigned int)have_pseudoheader);
        if ( m )
        {
          v7 = (*dnsmasq_daemon_0 & 0x2000) != 0 || (*(_DWORD *)(dnsmasq_daemon_0 + 4LL) & 0x80) != 0;
          send_from(listen->fd, v7, (char *)header, m, &source_addr, &dst_addr, if_index);
          ++*(_DWORD *)(dnsmasq_daemon_0 + 880LL);
        }
      }
      else
      {
        ad_reqd = do_bit;
        if ( (header->hb4 & 0x20) != 0 )
          ad_reqd = 1;
        m = answer_request(
              header,
              (char *)header + udp_size,
              n,
              dst_addr_4.s_addr,
              netmask.s_addr,
              now,
              (unsigned int)ad_reqd,
              (unsigned int)do_bit,
              have_pseudoheader);
        if ( m )
        {
          v8 = (*dnsmasq_daemon_0 & 0x2000) != 0 || (*(_DWORD *)(dnsmasq_daemon_0 + 4LL) & 0x80) != 0;
          send_from(listen->fd, v8, (char *)header, m, &source_addr, &dst_addr, if_index);
          ++*(_DWORD *)(dnsmasq_daemon_0 + 872LL);
        }
        else if ( forward_query(listen->fd, &source_addr, &dst_addr, if_index, header, n, now, 0uLL, ad_reqd, do_bit) )
        {
          ++*(_DWORD *)(dnsmasq_daemon_0 + 876LL);
        }
        else
        {
          ++*(_DWORD *)(dnsmasq_daemon_0 + 872LL);
        }
      }
    }
  }
}
