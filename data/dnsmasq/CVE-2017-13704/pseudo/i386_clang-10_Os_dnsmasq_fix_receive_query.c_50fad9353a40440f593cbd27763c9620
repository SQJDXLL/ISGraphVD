void __cdecl receive_query(listener *listen, dns_header *now)
{
  int v2; // eax
  listener *v3; // esi
  bool v4; // cl
  all_addr *v5; // edi
  in_addr_t s_addr; // ebp
  int v7; // ebx
  irec *iface; // edx
  ssize_t v9; // eax
  unsigned int v10; // esi
  int family; // eax
  mysockaddr *v12; // edi
  int v13; // eax
  struct cmsghdr *msg_control; // eax
  char *v15; // eax
  __int64 v16; // xmm0_8
  mysockaddr *v17; // eax
  all_addr *v18; // edi
  int v19; // ebx
  int v20; // eax
  int v21; // edx
  int v22; // edi
  unsigned int v23; // ebx
  _DWORD *v24; // eax
  int v25; // ecx
  const char *v26; // ecx
  int v27; // eax
  int v28; // ecx
  int v29; // eax
  int v30; // edi
  all_addr *v31; // ecx
  int v32; // edi
  __int16 v33; // dx
  unsigned int v34; // ecx
  int v35; // edx
  time_t v36; // ecx
  int v37; // eax
  size_t v38; // eax
  int v39; // edx
  time_t v40; // ebx
  size_t v41; // eax
  int v42; // esi
  int v43; // eax
  bool v44; // zf
  frec *v45; // [esp-4h] [ebp-D0h]
  int v46; // [esp+0h] [ebp-CCh]
  int v47; // [esp+4h] [ebp-C8h]
  all_addr *packet; // [esp+8h] [ebp-C4h]
  bool udpaddr; // [esp+Ch] [ebp-C0h]
  mysockaddr *udpaddra; // [esp+Ch] [ebp-C0h]
  mysockaddr *udpaddrb; // [esp+Ch] [ebp-C0h]
  int dns_auth; // [esp+10h] [ebp-BCh] BYREF
  unsigned __int16 v53; // [esp+16h] [ebp-B6h] BYREF
  int v54; // [esp+18h] [ebp-B4h]
  int v55; // [esp+1Ch] [ebp-B0h]
  all_addr source; // [esp+20h] [ebp-ACh] BYREF
  mysockaddr to; // [esp+30h] [ebp-9Ch] BYREF
  struct msghdr message; // [esp+50h] [ebp-7Ch] BYREF
  int v59[8]; // [esp+70h] [ebp-5Ch] BYREF
  _DWORD v60[2]; // [esp+90h] [ebp-3Ch] BYREF
  char v61; // [esp+98h] [ebp-34h] BYREF

  v2 = dnsmasq_daemon;
  v3 = listen;
  v4 = 1;
  v5 = *(all_addr **)(dnsmasq_daemon + 476);
  dns_auth = 0;
  if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) != 0 )
    v4 = listen->family == 10;
  udpaddr = v4;
  s_addr = 0;
  v7 = 0;
  *(_DWORD *)(dnsmasq_daemon + 528) = 0;
  source.addr.addr4.s_addr = 0;
  if ( (*(_BYTE *)(v2 + 1) & 0x20) != 0 )
  {
    iface = listen->iface;
    s_addr = 0;
    v7 = 0;
    if ( iface )
    {
      s_addr = 0;
      v7 = 0;
      dns_auth = iface->dns_auth;
      v3 = listen;
      if ( listen->family == 2 )
      {
        s_addr = iface->addr.in.sin_addr.s_addr;
        source.addr.addr4.s_addr = s_addr;
        v7 = iface->netmask.s_addr;
      }
    }
  }
  v54 = v7;
  v60[0] = v5;
  v60[1] = *(unsigned __int16 *)(v2 + 432);
  message.msg_control = &v61;
  message.msg_controllen = 32;
  message.msg_flags = 0;
  message.msg_name = &to;
  message.msg_namelen = 28;
  message.msg_iov = (iovec *)v60;
  message.msg_iovlen = 1;
  v9 = recvmsg(v3->fd, &message, 0);
  v10 = v9;
  if ( v9 < 12 || (message.msg_flags & 0x20) != 0 || (v5->addr.addr6.__in6_u.__u6_addr8[2] & 0x80u) != 0 )
    return;
  memset((void *)(v9 + *(_DWORD *)(dnsmasq_daemon + 476)), 0, *(unsigned __int16 *)(dnsmasq_daemon + 432) - v9);
  family = listen->family;
  to.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !to.in.sin_port )
      return;
  }
  else
  {
    if ( !to.in.sin_port )
      return;
    to.in.sin_addr.s_addr = 0;
  }
  packet = v5;
  if ( (*(_BYTE *)(dnsmasq_daemon + 6) & 2) != 0 )
  {
    v22 = *(_DWORD *)(dnsmasq_daemon + 1136);
    if ( family == 10 )
    {
      while ( v22 )
      {
        if ( (*(_BYTE *)(v22 + 16) & 2) != 0 && is_same_net6(v22, &to.in6.sin6_addr, *(_DWORD *)(v22 + 20)) )
          goto LABEL_16;
        v22 = *(_DWORD *)(v22 + 24);
      }
    }
    else
    {
      while ( v22 )
      {
        if ( (*(_BYTE *)(v22 + 16) & 2) == 0
          && is_same_net(*(_DWORD *)v22, to.in.sin_addr.s_addr, _byteswap_ulong(-1 << -*(_BYTE *)(v22 + 20))) )
        {
          goto LABEL_16;
        }
        v22 = *(_DWORD *)(v22 + 24);
      }
    }
    if ( !receive_query_warned )
    {
      my_syslog(4, "Ignoring query from non-local network");
      receive_query_warned = 1;
    }
    return;
  }
LABEL_16:
  v55 = 0;
  if ( udpaddr )
  {
    if ( message.msg_controllen < 0xC )
      return;
    v12 = 0;
    v13 = listen->family;
    if ( v13 == 2 )
    {
      msg_control = (struct cmsghdr *)message.msg_control;
      if ( !message.msg_control )
      {
        v17 = 0;
LABEL_34:
        udpaddra = v17;
        if ( !indextoname(listen->fd, v17, v59) )
          return;
        if ( !iface_check(listen->family, &source, v59, &dns_auth) )
        {
          if ( *(char *)(dnsmasq_daemon + 4) >= 0 )
            enumerate_interfaces(0);
          if ( !loopback_exception(listen->fd, listen->family, &source, v59)
            && !label_exception(udpaddra, listen->family, &source) )
          {
            return;
          }
        }
        if ( listen->family == 2 )
        {
          v18 = packet;
          v19 = v54;
          if ( (*(_BYTE *)(dnsmasq_daemon + 2) & 4) != 0 )
          {
            v20 = *(_DWORD *)(dnsmasq_daemon + 508);
            if ( v20 )
            {
              v21 = *(_DWORD *)(dnsmasq_daemon + 508);
              do
              {
                if ( *(_WORD *)v21 == 2 && *(_DWORD *)(v21 + 4) == s_addr )
                  goto LABEL_63;
                v21 = *(_DWORD *)(v21 + 80);
              }
              while ( v21 );
            }
            if ( *(char *)(dnsmasq_daemon + 4) >= 0 )
            {
              enumerate_interfaces(0);
              v20 = *(_DWORD *)(dnsmasq_daemon + 508);
            }
            while ( 1 )
            {
LABEL_63:
              if ( !v20 )
              {
                s_addr = 0;
                goto LABEL_67;
              }
              if ( *(_WORD *)v20 == 2 && *(_DWORD *)(v20 + 4) == s_addr )
                break;
              v20 = *(_DWORD *)(v20 + 80);
            }
            v19 = *(_DWORD *)(v20 + 28);
          }
        }
        else
        {
          v18 = packet;
          v19 = v54;
        }
LABEL_67:
        v54 = v19;
        v23 = (unsigned int)udpaddra;
        goto LABEL_68;
      }
      v12 = 0;
      do
      {
        if ( !msg_control->cmsg_level && msg_control->cmsg_type == 8 )
        {
          s_addr = *(_DWORD *)&msg_control->__cmsg_data[4];
          source.addr.addr4.s_addr = s_addr;
          v12 = *(mysockaddr **)msg_control->__cmsg_data;
        }
        msg_control = _cmsg_nxthdr(&message, msg_control);
      }
      while ( msg_control );
      v13 = listen->family;
    }
    if ( v13 == 10 )
    {
      v15 = (char *)message.msg_control;
      if ( message.msg_control )
      {
        if ( message.msg_controllen >= 0xC )
        {
          do
          {
            if ( *((_DWORD *)v15 + 1) == 41 && *((_DWORD *)v15 + 2) == *(_DWORD *)(dnsmasq_daemon + 1132) )
            {
              v16 = *(_QWORD *)(v15 + 12);
              *((_QWORD *)&source.addr.dnssec + 1) = *(_QWORD *)(v15 + 20);
              *(_QWORD *)&source.addr.addr4.s_addr = v16;
              v12 = (mysockaddr *)*((_DWORD *)v15 + 7);
            }
            v15 = (char *)_cmsg_nxthdr(&message, (struct cmsghdr *)v15);
          }
          while ( v15 );
        }
      }
    }
    v17 = v12;
    goto LABEL_34;
  }
  v18 = packet;
  v23 = 0;
LABEL_68:
  v24 = (_DWORD *)dnsmasq_daemon;
  v25 = *(_DWORD *)(dnsmasq_daemon + 1140) + 1;
  *(_DWORD *)(dnsmasq_daemon + 1140) = v25;
  v24[286] = v25;
  v24[287] = &to;
  if ( !extract_request(v18, v10, v24[121], &v53) )
    goto LABEL_84;
  v26 = "auth";
  if ( !dns_auth )
    v26 = "query";
  v27 = querystr(v26, v53);
  v28 = *(_DWORD *)(dnsmasq_daemon + 484);
  if ( listen->family == 2 )
    log_query(524424, v28, &to.in6.sin6_flowinfo, v27);
  else
    log_query(524552, v28, &to.in6.sin6_addr, v27);
  v55 = 0;
  if ( !dns_auth )
  {
    v29 = dnsmasq_daemon;
    if ( (*(_BYTE *)(dnsmasq_daemon + 2) & 4) == 0 )
    {
      v30 = *(_DWORD *)(dnsmasq_daemon + 80);
      if ( v30 )
      {
        while ( !in_zone(v30, *(_DWORD *)(v29 + 484), 0) )
        {
          v30 = *(_DWORD *)(v30 + 16);
          if ( !v30 )
            goto LABEL_82;
          v29 = dnsmasq_daemon;
        }
        dns_auth = 1;
        v55 = 1;
      }
LABEL_82:
      v18 = packet;
    }
  }
  if ( !detect_loop(*(_DWORD *)(dnsmasq_daemon + 484), v53) )
  {
LABEL_84:
    v31 = v18;
    v32 = 0;
    if ( find_pseudoheader(v31, v10, 0, v59, 0, 0) )
    {
      v33 = *(_WORD *)v59[0];
      v34 = *(unsigned __int8 *)(v59[0] + 4);
      v59[0] += 6;
      LOWORD(v35) = __ROL2__(v33, 8);
      v36 = v34 >> 7;
      if ( (unsigned __int16)v35 > (unsigned __int16)*(_DWORD *)(dnsmasq_daemon + 432) )
        v35 = *(_DWORD *)(dnsmasq_daemon + 432);
      v37 = (unsigned __int16)v35;
      v32 = 1;
    }
    else
    {
      v37 = 512;
      v36 = 0;
    }
    if ( !dns_auth )
    {
      udpaddrb = (mysockaddr *)v23;
      v40 = 1;
      if ( (packet->addr.addr6.__in6_u.__u6_addr8[3] & 0x20) == 0 )
        v40 = v36;
      v41 = answer_request(packet, (char *)packet + v37, v10, s_addr, v54, now, v40, v36, v32);
      if ( v41 )
      {
        v42 = 1;
        if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
          v42 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
        send_from(listen->fd, v42, (char *)packet, v41, &to, &source, (unsigned int)udpaddrb);
        v43 = dnsmasq_daemon;
      }
      else
      {
        v44 = forward_query((int)&source, udpaddrb, packet, v10, now, 0, v40, v45, v46, v47) == 0;
        v43 = dnsmasq_daemon;
        if ( !v44 )
        {
          ++*(_DWORD *)(dnsmasq_daemon + 492);
          return;
        }
      }
      ++*(_DWORD *)(v43 + 488);
      return;
    }
    v38 = answer_auth(packet, (char *)packet + v37, v10, now, &to, v55, v36, v32);
    if ( v38 )
    {
      if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) != 0 )
        v39 = 1;
      else
        v39 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
      send_from(listen->fd, v39, (char *)packet, v38, &to, &source, v23);
      ++*(_DWORD *)(dnsmasq_daemon + 496);
    }
  }
}
