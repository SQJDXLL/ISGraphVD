void __fastcall receive_query(listener *listen, time_t now)
{
  in_addr_t v3; // r7
  _BOOL4 v4; // r8
  int v5; // r0
  dns_header *v6; // r10
  bool v7; // zf
  int v8; // r9
  ssize_t v9; // r0
  size_t v10; // r11
  int family; // r0
  int v12; // r4
  int v13; // r0
  unsigned int v14; // r8
  struct cmsghdr *msg_control; // r1
  char *v16; // r1
  unsigned int v17; // r4
  uint32_t v18; // r3
  __int64 v19; // r4
  _DWORD *v20; // r0
  unsigned __int16 *v21; // r2
  int v22; // r3
  bool v23; // zf
  int v24; // r4
  int v25; // r1
  bool v26; // zf
  _DWORD *v27; // r0
  int v28; // r2
  int v29; // r1
  const char *v30; // r0
  int v31; // r3
  in6_addr *p_sin6_flowinfo; // r2
  int v33; // r0
  unsigned int v34; // r1
  int v35; // r8
  int v36; // r4
  int v37; // r5
  int v38; // r1
  int v39; // r2
  unsigned int v40; // r3
  unsigned int v41; // r0
  int v42; // r1
  size_t v43; // r0
  int v44; // r2
  unsigned int v45; // r1
  int v46; // r8
  size_t v47; // r3
  int fd; // r0
  int v49; // r7
  unsigned int dst_iface; // [sp+14h] [bp-C4h]
  unsigned int dst_ifacea; // [sp+14h] [bp-C4h]
  time_t v52; // [sp+18h] [bp-C0h]
  int v53[8]; // [sp+1Ch] [bp-BCh] BYREF
  char v54; // [sp+3Ch] [bp-9Ch] BYREF
  struct msghdr message; // [sp+5Ch] [bp-7Ch] BYREF
  int v56[2]; // [sp+78h] [bp-60h] BYREF
  int v57; // [sp+80h] [bp-58h] BYREF
  all_addr source; // [sp+84h] [bp-54h] BYREF
  unsigned __int16 v59; // [sp+96h] [bp-42h] BYREF
  mysockaddr udpaddr; // [sp+98h] [bp-40h] BYREF

  v3 = 0;
  v4 = 1;
  v57 = 0;
  v5 = dnsmasq_daemon;
  v6 = *(dns_header **)(dnsmasq_daemon + 476);
  if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) != 0 )
    v4 = listen->family == 0xA;
  source.addr.addr4.s_addr = 0;
  *(_DWORD *)(dnsmasq_daemon + 528) = 0;
  v52 = now;
  v7 = (*(_BYTE *)(v5 + 1) & 0x20) == 0;
  if ( (*(_BYTE *)(v5 + 1) & 0x20) != 0 )
  {
    now = (time_t)listen->iface;
    v7 = now == 0;
  }
  if ( v7 )
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v57 = *(_DWORD *)(now + 56);
    if ( listen->family == 2 )
    {
      v3 = *(_DWORD *)(now + 4);
      v8 = *(_DWORD *)(now + 28);
      source.addr.addr4.s_addr = v3;
    }
  }
  v56[0] = (int)v6;
  message.msg_controllen = 32;
  message.msg_control = &v54;
  message.msg_iovlen = 1;
  message.msg_iov = (iovec *)v56;
  message.msg_namelen = 28;
  message.msg_name = &udpaddr;
  v56[1] = *(unsigned __int16 *)(v5 + 432);
  message.msg_flags = 0;
  v9 = recvmsg(listen->fd, &message, 0);
  if ( v9 < 12 )
    return;
  v10 = v9;
  if ( (message.msg_flags & 0x20) != 0 || (v6->hb3 & 0x80u) != 0 )
    return;
  family = listen->family;
  udpaddr.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !udpaddr.in.sin_port )
      return;
  }
  else
  {
    if ( !udpaddr.in.sin_port )
      return;
    udpaddr.in.sin_addr.s_addr = 0;
  }
  if ( (*(_BYTE *)(dnsmasq_daemon + 6) & 2) != 0 )
  {
    v24 = *(_DWORD *)(dnsmasq_daemon + 1136);
    if ( family == 10 )
    {
      if ( v24 )
      {
        while ( (*(_BYTE *)(v24 + 16) & 2) == 0 || !is_same_net6(v24, &udpaddr.in6.sin6_addr, *(_DWORD *)(v24 + 20)) )
        {
          v24 = *(_DWORD *)(v24 + 24);
          if ( !v24 )
            goto LABEL_75;
        }
        goto LABEL_19;
      }
    }
    else
    {
      for ( ; v24; v24 = *(_DWORD *)(v24 + 24) )
      {
        if ( (*(_BYTE *)(v24 + 16) & 2) == 0 )
        {
          v34 = -1 << (0x20 - *(_DWORD *)(v24 + 20));
          if ( is_same_net(
                 *(_DWORD *)v24,
                 udpaddr.in.sin_addr.s_addr,
                 (v34 << 8) & 0xFF0000 | (v34 << 24) | (v34 >> 8) & 0xFF00 | HIBYTE(v34)) )
          {
            goto LABEL_19;
          }
        }
      }
    }
LABEL_75:
    if ( !receive_query_warned )
    {
      my_syslog(4, "Ignoring query from non-local network");
      receive_query_warned = 1;
    }
    return;
  }
LABEL_19:
  v12 = 0;
  if ( v4 )
  {
    if ( message.msg_controllen < 0xC )
      return;
    v13 = listen->family;
    v14 = 0;
    if ( v13 == 2 )
    {
      msg_control = (struct cmsghdr *)message.msg_control;
      v14 = 0;
      if ( !message.msg_control )
      {
LABEL_37:
        if ( !indextoname(listen->fd, v14, v53) )
          return;
        if ( !iface_check(listen->family, &source, v53, &v57) )
        {
          if ( (*(_BYTE *)(dnsmasq_daemon + 4) & 0x80) == 0 )
            enumerate_interfaces(0);
          if ( !loopback_exception(listen->fd, listen->family, &source, v53)
            && !label_exception(v14, listen->family, &source) )
          {
            return;
          }
        }
        if ( listen->family == 2 && (*(_BYTE *)(dnsmasq_daemon + 2) & 4) != 0 )
        {
          v20 = *(_DWORD **)(dnsmasq_daemon + 508);
          if ( !v20 )
          {
LABEL_51:
            if ( (*(_BYTE *)(dnsmasq_daemon + 4) & 0x80) == 0 )
            {
              enumerate_interfaces(0);
              v20 = *(_DWORD **)(dnsmasq_daemon + 508);
            }
            goto LABEL_63;
          }
          v21 = *(unsigned __int16 **)(dnsmasq_daemon + 508);
          while ( 1 )
          {
            v22 = *v21;
            v23 = v22 == 2;
            if ( v22 == 2 )
              v23 = *((_DWORD *)v21 + 1) == v3;
            if ( v23 )
              break;
            v21 = (unsigned __int16 *)*((_DWORD *)v21 + 20);
            if ( !v21 )
              goto LABEL_51;
          }
          while ( 1 )
          {
LABEL_63:
            if ( !v20 )
            {
              v3 = 0;
              goto LABEL_66;
            }
            v25 = *(unsigned __int16 *)v20;
            v26 = v25 == 2;
            if ( v25 == 2 )
              v26 = v20[1] == v3;
            if ( v26 )
              break;
            v20 = (_DWORD *)v20[20];
          }
          v8 = v20[7];
        }
        goto LABEL_66;
      }
      do
      {
        if ( !msg_control->cmsg_level && msg_control->cmsg_type == 8 )
        {
          v3 = *(_DWORD *)&msg_control->__cmsg_data[4];
          v14 = *(_DWORD *)msg_control->__cmsg_data;
          source.addr.addr4.s_addr = v3;
        }
        msg_control = _cmsg_nxthdr(&message, msg_control);
      }
      while ( msg_control );
      v13 = listen->family;
      v12 = 0;
    }
    if ( v13 == 10 && message.msg_controllen >= 0xC )
    {
      v16 = (char *)message.msg_control;
      if ( message.msg_control )
      {
        v17 = v14;
        do
        {
          if ( *((_DWORD *)v16 + 1) == 41 && *((_DWORD *)v16 + 2) == *(_DWORD *)(dnsmasq_daemon + 1132) )
          {
            v18 = *((_DWORD *)v16 + 4);
            v19 = *(_QWORD *)(v16 + 20);
            source.addr.addr4.s_addr = *((_DWORD *)v16 + 3);
            source.addr.addr6.__in6_u.__u6_addr32[1] = v18;
            *((_QWORD *)&source.addr.dnssec + 1) = v19;
            v17 = *((_DWORD *)v16 + 7);
          }
          v16 = (char *)_cmsg_nxthdr(&message, (struct cmsghdr *)v16);
        }
        while ( v16 );
        v14 = v17;
        v12 = 0;
      }
    }
    goto LABEL_37;
  }
  v14 = 0;
LABEL_66:
  v27 = (_DWORD *)dnsmasq_daemon;
  *(_DWORD *)(dnsmasq_daemon + 1148) = &udpaddr;
  v28 = v27[121];
  v29 = v27[285] + 1;
  v27[286] = v29;
  v27[285] = v29;
  if ( !extract_request(v6, v10, v28, &v59) )
    goto LABEL_87;
  v30 = "auth";
  if ( !v57 )
    v30 = "query";
  v31 = querystr(v30, v59);
  if ( listen->family == 2 )
  {
    p_sin6_flowinfo = (in6_addr *)&udpaddr.in6.sin6_flowinfo;
    v33 = 524424;
  }
  else
  {
    p_sin6_flowinfo = &udpaddr.in6.sin6_addr;
    v33 = 524552;
  }
  log_query(v33, *(_DWORD *)(dnsmasq_daemon + 484), p_sin6_flowinfo, v31);
  dst_iface = v14;
  v35 = 0;
  if ( !v57 && (*(_BYTE *)(dnsmasq_daemon + 2) & 4) == 0 )
  {
    v36 = *(_DWORD *)(dnsmasq_daemon + 80);
    if ( v36 )
    {
      if ( in_zone(*(_DWORD *)(dnsmasq_daemon + 80), *(_DWORD *)(dnsmasq_daemon + 484), 0) )
      {
LABEL_85:
        v35 = 1;
        v57 = 1;
      }
      else
      {
        v35 = 0;
        while ( 1 )
        {
          v36 = *(_DWORD *)(v36 + 16);
          if ( !v36 )
            break;
          if ( in_zone(v36, *(_DWORD *)(dnsmasq_daemon + 484), 0) )
            goto LABEL_85;
        }
      }
    }
  }
  v12 = v35;
  v14 = dst_iface;
  if ( !detect_loop(*(_DWORD *)(dnsmasq_daemon + 484), v59) )
  {
LABEL_87:
    v37 = 0;
    if ( find_pseudoheader(v6, v10, 0, v53, 0, 0) )
    {
      v38 = *(unsigned __int8 *)v53[0];
      v39 = *(unsigned __int8 *)(v53[0] + 1);
      v40 = *(unsigned __int8 *)(v53[0] + 4);
      v53[0] += 6;
      v41 = v39 | (v38 << 8);
      v42 = v40 >> 7;
      if ( v41 > *(unsigned __int16 *)(dnsmasq_daemon + 432) )
        v41 = *(unsigned __int16 *)(dnsmasq_daemon + 432);
      v37 = 1;
    }
    else
    {
      v41 = 512;
      v42 = 0;
    }
    if ( v57 )
    {
      v43 = answer_auth(v6, (char *)v6 + v41, v10, v52, &udpaddr, v12, v42, v37);
      if ( v43 )
      {
        v44 = dnsmasq_daemon;
        v45 = 1;
        if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
        {
          v45 = *(_DWORD *)(dnsmasq_daemon + 4);
          v44 = 1;
        }
        if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
          v45 = v44 & (v45 >> 7);
        send_from(listen->fd, v45, (char *)v6, v43, &udpaddr, &source, v14);
        ++*(_DWORD *)(dnsmasq_daemon + 496);
      }
    }
    else
    {
      dst_ifacea = v14;
      v46 = 1;
      if ( (v6->hb4 & 0x20) == 0 )
        v46 = v42;
      v47 = answer_request(v6, (char *)v6 + v41, v10, v3, v8, v52, v46, v42, v37);
      fd = listen->fd;
      if ( v47 )
      {
        v49 = 1;
        if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
          v49 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
        send_from(fd, v49, (char *)v6, v47, &udpaddr, &source, dst_ifacea);
        ++*(_DWORD *)(dnsmasq_daemon + 488);
      }
      else if ( forward_query(fd, &udpaddr, &source, dst_ifacea, v6, v10, v52, 0u, v46, dst_ifacea) )
      {
        ++*(_DWORD *)(dnsmasq_daemon + 492);
      }
      else
      {
        ++*(_DWORD *)(dnsmasq_daemon + 488);
      }
    }
  }
}
