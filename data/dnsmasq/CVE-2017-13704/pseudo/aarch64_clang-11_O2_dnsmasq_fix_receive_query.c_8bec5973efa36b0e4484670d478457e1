void __fastcall receive_query(listener *listen, time_t now)
{
  __int64 v2; // x8
  dns_header *v5; // x19
  _BOOL4 v6; // w28
  in_addr_t s_addr; // w26
  in_addr_t v8; // w27
  irec *iface; // x9
  size_t v10; // x8
  ssize_t v11; // w0
  size_t v12; // x22
  int family; // w8
  int v14; // w9
  _DWORD *v15; // x12
  unsigned int v16; // w23
  char *v17; // x10
  _DWORD *v18; // x11
  unsigned int *v19; // x23
  __int64 v20; // x8
  int v21; // w9
  __int64 v22; // x2
  const char *v23; // x0
  __int64 v24; // x3
  in6_addr *p_sin6_flowinfo; // x2
  __int64 v26; // x0
  __int64 v27; // x24
  __int64 v28; // x8
  __int64 v29; // x8
  __int64 v30; // x7
  unsigned int v31; // w10
  __int64 v32; // x12
  unsigned int v33; // w10
  unsigned int v34; // w8
  __int64 v35; // x9
  size_t v36; // x0
  int v37; // w1
  unsigned int v38; // w24
  size_t v39; // x0
  int fd; // w8
  int v41; // w1
  char *msg_control; // x11
  char *v43; // x8
  char *v44; // x10
  int v45; // w0
  __int64 v46; // x8
  __int64 v47; // x8
  __int64 v48; // x10
  int v49; // [xsp+8h] [xbp-E8h]
  __int64 v50[5]; // [xsp+10h] [xbp-E0h] BYREF
  char v51; // [xsp+38h] [xbp-B8h] BYREF
  struct msghdr message; // [xsp+60h] [xbp-90h] BYREF
  iovec iov[1]; // [xsp+98h] [xbp-58h] BYREF
  int auth_dns; // [xsp+ACh] [xbp-44h] BYREF
  all_addr dst_addr; // [xsp+B0h] [xbp-40h] BYREF
  unsigned __int16 type; // [xsp+C4h] [xbp-2Ch] BYREF
  mysockaddr source_addr; // [xsp+C8h] [xbp-28h] BYREF

  v2 = dnsmasq_daemon;
  v5 = *(dns_header **)(dnsmasq_daemon + 848LL);
  auth_dns = 0;
  v6 = (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) == 0 || listen->family == 10;
  *(_QWORD *)(dnsmasq_daemon + 944LL) = 0LL;
  dst_addr.addr.addr4.s_addr = 0;
  s_addr = 0;
  v8 = 0;
  if ( (*(_BYTE *)(v2 + 1) & 0x20) != 0 )
  {
    iface = listen->iface;
    if ( iface && (auth_dns = iface->dns_auth, listen->family == 2) )
    {
      s_addr = iface->addr.in.sin_addr.s_addr;
      dst_addr.addr.addr4.s_addr = s_addr;
      v8 = iface->netmask.s_addr;
    }
    else
    {
      s_addr = 0;
      v8 = 0;
    }
  }
  v10 = *(unsigned __int16 *)(v2 + 768);
  message.msg_control = &v51;
  message.msg_controllen = 40LL;
  message.msg_name = &source_addr;
  message.msg_namelen = 28;
  iov[0].iov_base = v5;
  iov[0].iov_len = v10;
  message.msg_flags = 0;
  message.msg_iov = iov;
  message.msg_iovlen = 1LL;
  v11 = recvmsg(listen->fd, &message, 0);
  if ( v11 < 12 || (message.msg_flags & 0x20) != 0 || ((char)v5->hb3 & 0x80000000) != 0 )
    return;
  v12 = (unsigned int)v11;
  memset(
    (void *)(*(_QWORD *)(dnsmasq_daemon + 848LL) + (unsigned int)v11),
    0,
    *(unsigned __int16 *)(dnsmasq_daemon + 768LL) - (__int64)v11);
  family = listen->family;
  source_addr.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
  }
  else
  {
    if ( !source_addr.in.sin_port )
      return;
    source_addr.in.sin_addr.s_addr = 0;
  }
  if ( (*(_BYTE *)(dnsmasq_daemon + 6LL) & 2) != 0 )
  {
    v19 = *(unsigned int **)(dnsmasq_daemon + 1568LL);
    if ( family == 10 )
    {
      if ( v19 )
      {
        while ( (v19[4] & 2) == 0 || !(unsigned int)is_same_net6(v19, &source_addr.in6.sin6_addr, v19[5]) )
        {
          v19 = (unsigned int *)*((_QWORD *)v19 + 3);
          if ( !v19 )
            goto LABEL_51;
        }
        goto LABEL_18;
      }
    }
    else if ( v19 )
    {
      while ( (v19[4] & 2) != 0
           || !(unsigned int)is_same_net(*v19, source_addr.in.sin_addr.s_addr, bswap32(-1 << -*((_BYTE *)v19 + 20))) )
      {
        v19 = (unsigned int *)*((_QWORD *)v19 + 3);
        if ( !v19 )
          goto LABEL_51;
      }
      goto LABEL_18;
    }
LABEL_51:
    if ( (receive_query_warned & 1) == 0 )
    {
      my_syslog(4LL, "Ignoring query from non-local network");
      receive_query_warned = 1;
    }
    return;
  }
LABEL_18:
  if ( !v6 )
  {
    v16 = 0;
    goto LABEL_39;
  }
  if ( message.msg_controllen < 0x10 )
    return;
  v14 = listen->family;
  if ( v14 != 2 )
  {
    v16 = 0;
LABEL_79:
    if ( v14 == 10 )
    {
      msg_control = (char *)message.msg_control;
      if ( message.msg_control )
      {
        v43 = (char *)message.msg_control + message.msg_controllen;
        do
        {
          v44 = msg_control;
          if ( *((_DWORD *)msg_control + 2) == 41
            && *((_DWORD *)msg_control + 3) == *(_DWORD *)(dnsmasq_daemon + 1560LL) )
          {
            dst_addr = (all_addr)*((_OWORD *)msg_control + 1);
            v16 = *((_DWORD *)msg_control + 8);
          }
          if ( *(_QWORD *)msg_control < 0x10uLL )
            break;
          msg_control += (*(_QWORD *)msg_control + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
          if ( msg_control + 0x10 > v43 )
            break;
        }
        while ( &msg_control[(*(_QWORD *)msg_control + 7LL) & 0xFFFFFFFFFFFFFFF8LL] <= v43 && v44 );
      }
    }
    goto LABEL_95;
  }
  v15 = message.msg_control;
  if ( message.msg_control )
  {
    v16 = 0;
    v17 = (char *)message.msg_control + message.msg_controllen;
    do
    {
      v18 = v15;
      if ( !v15[2] && v15[3] == 8 )
      {
        v16 = v15[4];
        s_addr = v15[5];
        dst_addr.addr.addr4.s_addr = s_addr;
      }
      if ( *(_QWORD *)v15 < 0x10uLL )
        break;
      v15 = (_DWORD *)((char *)v15 + ((*(_QWORD *)v15 + 7LL) & 0xFFFFFFFFFFFFFFF8LL));
      if ( v15 + 4 > (_DWORD *)v17 )
        break;
    }
    while ( (char *)v15 + ((*(_QWORD *)v15 + 7LL) & 0xFFFFFFFFFFFFFFF8LL) <= v17 && v18 );
    goto LABEL_79;
  }
  v16 = 0;
LABEL_95:
  if ( !(unsigned int)indextoname((unsigned int)listen->fd, v16, v50) )
    return;
  if ( !(unsigned int)iface_check((unsigned int)listen->family, &dst_addr, v50, &auth_dns) )
  {
    if ( (*(_BYTE *)(dnsmasq_daemon + 4LL) & 0x80) == 0 )
      enumerate_interfaces(0LL);
    if ( !(unsigned int)loopback_exception((unsigned int)listen->fd, (unsigned int)listen->family, &dst_addr, v50)
      && !(unsigned int)label_exception(v16, (unsigned int)listen->family, &dst_addr) )
    {
      return;
    }
  }
  if ( listen->family == 2 && (*(_BYTE *)(dnsmasq_daemon + 2LL) & 4) != 0 )
  {
    v47 = *(_QWORD *)(dnsmasq_daemon + 904LL);
    if ( v47 )
    {
      v48 = *(_QWORD *)(dnsmasq_daemon + 904LL);
      while ( *(_WORD *)v48 != 2 || *(_DWORD *)(v48 + 4) != s_addr )
      {
        v48 = *(_QWORD *)(v48 + 88);
        if ( !v48 )
          goto LABEL_114;
      }
    }
    else
    {
LABEL_114:
      if ( (*(_BYTE *)(dnsmasq_daemon + 4LL) & 0x80) == 0 )
      {
        enumerate_interfaces(0LL);
        v47 = *(_QWORD *)(dnsmasq_daemon + 904LL);
      }
    }
    if ( v47 )
    {
      while ( *(_WORD *)v47 != 2 || *(_DWORD *)(v47 + 4) != s_addr )
      {
        v47 = *(_QWORD *)(v47 + 88);
        if ( !v47 )
          goto LABEL_117;
      }
      v8 = *(_DWORD *)(v47 + 28);
    }
    else
    {
LABEL_117:
      s_addr = 0;
    }
  }
LABEL_39:
  v20 = dnsmasq_daemon;
  v21 = *(_DWORD *)(dnsmasq_daemon + 1576LL);
  v22 = *(_QWORD *)(dnsmasq_daemon + 864LL);
  *(_QWORD *)(dnsmasq_daemon + 1584LL) = &source_addr;
  *(_DWORD *)(v20 + 1576) = ++v21;
  *(_DWORD *)(v20 + 1580) = v21;
  if ( (unsigned int)extract_request(v5, v12, v22, &type) )
  {
    if ( auth_dns )
      v23 = "auth";
    else
      v23 = "query";
    v24 = querystr(v23, type);
    if ( listen->family == 2 )
    {
      p_sin6_flowinfo = (in6_addr *)&source_addr.in6.sin6_flowinfo;
      v26 = 524424LL;
    }
    else
    {
      p_sin6_flowinfo = &source_addr.in6.sin6_addr;
      v26 = 524552LL;
    }
    log_query(v26, *(_QWORD *)(dnsmasq_daemon + 864LL), p_sin6_flowinfo, v24);
    if ( auth_dns || (v28 = dnsmasq_daemon, (*(_BYTE *)(dnsmasq_daemon + 2LL) & 4) != 0) )
    {
      LODWORD(v27) = 0;
    }
    else
    {
      v27 = *(_QWORD *)(dnsmasq_daemon + 144LL);
      if ( v27 )
      {
        while ( !(unsigned int)in_zone(v27, *(_QWORD *)(v28 + 864), 0LL) )
        {
          v27 = *(_QWORD *)(v27 + 32);
          if ( !v27 )
            goto LABEL_62;
          v28 = dnsmasq_daemon;
        }
        LODWORD(v27) = 1;
        auth_dns = 1;
      }
    }
LABEL_62:
    if ( (unsigned int)detect_loop(*(_QWORD *)(dnsmasq_daemon + 864LL), type) )
      return;
  }
  else
  {
    LODWORD(v27) = 0;
  }
  if ( find_pseudoheader(v5, v12, 0LL, v50, 0LL, 0LL) )
  {
    v29 = v50[0];
    v30 = 1LL;
    v31 = *(unsigned __int16 *)v50[0];
    v32 = v50[0] + 6;
    v50[0] += 4LL;
    LODWORD(v29) = *(unsigned __int8 *)(v29 + 4);
    v50[0] = v32;
    v33 = bswap32(v31) >> 0x10;
    v34 = (unsigned int)v29 >> 7;
    if ( v33 <= *(unsigned __int16 *)(dnsmasq_daemon + 768LL) )
      v35 = v33;
    else
      v35 = *(unsigned __int16 *)(dnsmasq_daemon + 768LL);
  }
  else
  {
    v30 = 0LL;
    v34 = 0;
    v35 = 512LL;
  }
  if ( auth_dns )
  {
    v36 = answer_auth(v5, (char *)v5 + v35, v12, now, &source_addr, (unsigned int)v27, v34, v30);
    if ( v36 )
    {
      if ( (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) != 0 )
        v37 = 1;
      else
        v37 = (*(_DWORD *)(dnsmasq_daemon + 4LL) >> 7) & 1;
      send_from(listen->fd, v37, (char *)v5, v36, &source_addr, &dst_addr, v16);
      ++*(_DWORD *)(dnsmasq_daemon + 880LL);
    }
  }
  else
  {
    if ( (v5->hb4 & 0x20) != 0 )
      v38 = 1;
    else
      v38 = v34;
    v39 = answer_request(v5, (char *)v5 + v35, v12, s_addr, v8, now, v38, v34, v30);
    fd = listen->fd;
    if ( v39 )
    {
      if ( (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) != 0 )
        v41 = 1;
      else
        v41 = (*(_DWORD *)(dnsmasq_daemon + 4LL) >> 7) & 1;
      send_from(fd, v41, (char *)v5, v39, &source_addr, &dst_addr, v16);
      v46 = dnsmasq_daemon;
    }
    else
    {
      v45 = forward_query(fd, &source_addr, &dst_addr, v16, v5, v12, now, 0uLL, v38, v49);
      v46 = dnsmasq_daemon;
      if ( v45 )
      {
        ++*(_DWORD *)(dnsmasq_daemon + 876LL);
        return;
      }
    }
    ++*(_DWORD *)(v46 + 872);
  }
}
