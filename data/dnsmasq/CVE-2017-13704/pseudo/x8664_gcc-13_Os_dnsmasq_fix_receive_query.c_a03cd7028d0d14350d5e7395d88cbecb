void __fastcall receive_query(listener *listen, time_t now)
{
  unsigned int v2; // r13d
  __int64 v4; // rax
  dns_header *v5; // r12
  int v6; // edx
  in_addr_t s_addr; // ebp
  irec *iface; // rdx
  bool v9; // zf
  in_addr_t v10; // edi
  size_t v11; // rax
  int fd; // edi
  __int64 v13; // r8
  __int64 v14; // r15
  __int64 v15; // rcx
  int family; // eax
  __int64 v17; // rdx
  unsigned int *v18; // r14
  __int64 v19; // r9
  int v20; // eax
  void *i; // rsi
  void *j; // rsi
  __int64 k; // rax
  __int64 m; // rax
  __int64 v25; // rax
  int v26; // edx
  __int64 v27; // rdx
  const char *v28; // rdi
  __int64 v29; // rcx
  in6_addr *p_sin6_flowinfo; // rdx
  __int64 v31; // rdi
  unsigned int v32; // r14d
  __int64 ii; // rcx
  __int64 v34; // r8
  __int16 v35; // si
  unsigned __int8 *v36; // rax
  __int16 v37; // dx
  unsigned __int16 v38; // si
  char v39; // t0
  __int64 v40; // rax
  char *v41; // rsi
  size_t v42; // rax
  __int64 v43; // r10
  size_t v44; // rcx
  signed __int64 n; // [rsp+0h] [rbp-158h]
  in_addr_t v46; // [rsp+14h] [rbp-144h]
  __int64 ad_reqd; // [rsp+20h] [rbp-138h]
  int ad_reqda; // [rsp+20h] [rbp-138h]
  unsigned __int16 type; // [rsp+3Ah] [rbp-11Eh] BYREF
  int auth_dns; // [rsp+3Ch] [rbp-11Ch] BYREF
  unsigned __int8 *t_cp; // [rsp+40h] [rbp-118h] BYREF
  msghdr msg; // [rsp+48h] [rbp-110h] BYREF
  iovec iov[1]; // [rsp+80h] [rbp-D8h] BYREF
  all_addr dst_addr; // [rsp+94h] [rbp-C4h] BYREF
  mysockaddr source_addr; // [rsp+A4h] [rbp-B4h] BYREF
  ifreq ifr; // [rsp+C0h] [rbp-98h] BYREF
  union {cmsghdr align;char control6[40];char control[32];} control_u; // [rsp+F0h] [rbp-68h] BYREF
  unsigned __int64 v59; // [rsp+118h] [rbp-40h]

  v2 = 1;
  v59 = __readfsqword(0x28u);
  v4 = *(_QWORD *)&dnsmasq_daemon_0;
  auth_dns = 0;
  v5 = *(dns_header **)(*(_QWORD *)&dnsmasq_daemon_0 + 848LL);
  v6 = **(_DWORD **)&dnsmasq_daemon_0 & 0x2000;
  if ( v6 )
    v2 = listen->family == 10;
  *(_QWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 944LL) = 0LL;
  dst_addr.addr.addr4.s_addr = 0;
  v46 = 0;
  if ( v6 && (iface = listen->iface) != 0LL && (v9 = listen->family == 2, auth_dns = iface->dns_auth, v9) )
  {
    s_addr = iface->addr.in.sin_addr.s_addr;
    v10 = iface->netmask.s_addr;
    dst_addr.addr.addr4.s_addr = s_addr;
    v46 = v10;
  }
  else
  {
    s_addr = 0;
  }
  v11 = *(unsigned __int16 *)(v4 + 768);
  fd = listen->fd;
  iov[0].iov_base = v5;
  iov[0].iov_len = v11;
  msg.msg_control = &control_u;
  msg.msg_name = &source_addr;
  msg.msg_iov = iov;
  msg.msg_flags = 0;
  msg.msg_controllen = 40LL;
  msg.msg_namelen = 28;
  msg.msg_iovlen = 1LL;
  n = recvmsg(fd, &msg, 0);
  if ( n <= 11 )
    return;
  v14 = msg.msg_flags & 0x20;
  if ( (msg.msg_flags & 0x20) != 0 || (v5->hb3 & 0x80u) != 0 )
    return;
  memset(
    (void *)(n + *(_QWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 848LL)),
    0,
    *(unsigned __int16 *)(*(_QWORD *)&dnsmasq_daemon_0 + 768LL) - n);
  v15 = 0LL;
  family = listen->family;
  source_addr.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
  }
  else
  {
    if ( !source_addr.in.sin_port )
      return;
    source_addr.in.sin_addr.s_addr = 0;
  }
  v17 = *(_QWORD *)&dnsmasq_daemon_0;
  if ( (*(_BYTE *)(*(_QWORD *)&dnsmasq_daemon_0 + 6LL) & 2) == 0 )
  {
LABEL_31:
    if ( v2 )
    {
      if ( msg.msg_controllen <= 0xF )
        return;
      v2 = 0;
      if ( listen->family == 2 )
      {
        for ( i = msg.msg_control; i; i = _cmsg_nxthdr(&msg, (struct cmsghdr *)i) )
        {
          if ( *((_QWORD *)i + 1) == 0x800000000LL )
          {
            s_addr = *((_DWORD *)i + 5);
            v2 = *((_DWORD *)i + 4);
            dst_addr.addr.addr4.s_addr = s_addr;
          }
        }
      }
      if ( listen->family == 10 && msg.msg_controllen > 0xF )
      {
        for ( j = msg.msg_control; j; j = _cmsg_nxthdr(&msg, (struct cmsghdr *)j) )
        {
          if ( *((_DWORD *)j + 2) == 41 && *((_DWORD *)j + 3) == *(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 1560LL) )
          {
            v2 = *((_DWORD *)j + 8);
            dst_addr = (all_addr)*((_OWORD *)j + 1);
          }
        }
      }
      if ( !(unsigned int)indextoname((unsigned int)listen->fd, v2, &ifr) )
        return;
      if ( !(unsigned int)iface_check((unsigned int)listen->family, &dst_addr, &ifr, &auth_dns) )
      {
        if ( *(char *)(*(_QWORD *)&dnsmasq_daemon_0 + 4LL) >= 0 )
          enumerate_interfaces(0LL);
        if ( !(unsigned int)loopback_exception((unsigned int)listen->fd, (unsigned int)listen->family, &dst_addr, &ifr)
          && !(unsigned int)label_exception(v2, (unsigned int)listen->family, &dst_addr) )
        {
          return;
        }
      }
      if ( listen->family == 2 && _bittest(*(const signed __int32 **)&dnsmasq_daemon_0, 0x12u) )
      {
        for ( k = *(_QWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 904LL); k; k = *(_QWORD *)(k + 88) )
        {
          if ( *(_WORD *)k == 2 && *(_DWORD *)(k + 4) == s_addr )
            goto LABEL_64;
        }
        if ( *(char *)(*(_QWORD *)&dnsmasq_daemon_0 + 4LL) >= 0 )
          enumerate_interfaces(0LL);
LABEL_64:
        for ( m = *(_QWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 904LL); ; m = *(_QWORD *)(m + 88) )
        {
          if ( !m )
          {
            s_addr = 0;
            goto LABEL_71;
          }
          if ( *(_WORD *)m == 2 && *(_DWORD *)(m + 4) == s_addr )
            break;
        }
        v46 = *(_DWORD *)(m + 28);
      }
    }
LABEL_71:
    v25 = *(_QWORD *)&dnsmasq_daemon_0;
    v26 = *(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 1576LL) + 1;
    *(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 1576LL) = v26;
    *(_DWORD *)(v25 + 1580) = v26;
    v27 = *(_QWORD *)(v25 + 864);
    *(_QWORD *)(v25 + 1584) = &source_addr;
    if ( (unsigned int)extract_request(v5, n, v27, &type) )
    {
      v28 = "query";
      if ( auth_dns )
        v28 = "auth";
      v29 = querystr(v28, type);
      if ( listen->family == 2 )
      {
        p_sin6_flowinfo = (in6_addr *)&source_addr.in6.sin6_flowinfo;
        v31 = 524424LL;
      }
      else
      {
        p_sin6_flowinfo = &source_addr.in6.sin6_addr;
        v31 = 524552LL;
      }
      log_query(v31, *(_QWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 864LL), p_sin6_flowinfo, v29);
      if ( !auth_dns && !_bittest(*(const signed __int32 **)&dnsmasq_daemon_0, 0x12u) )
      {
        for ( ii = *(_QWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 144LL); ii; ii = *(_QWORD *)(ad_reqd + 32) )
        {
          ad_reqd = ii;
          if ( (unsigned int)in_zone(ii, *(_QWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 864LL), 0LL) )
          {
            auth_dns = 1;
            v32 = 1;
            goto LABEL_85;
          }
        }
      }
      v32 = 0;
LABEL_85:
      if ( (unsigned int)detect_loop(*(_QWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 864LL), type) )
        return;
    }
    else
    {
      v32 = 0;
    }
    if ( find_pseudoheader(v5, n, 0LL, &t_cp, 0LL, 0LL) )
    {
      v35 = *(_WORD *)t_cp;
      v36 = t_cp + 6;
      t_cp += 4;
      v37 = *((_WORD *)v36 - 1);
      t_cp = v36;
      v38 = __ROL2__(v35, 8);
      v39 = HIBYTE(v37);
      HIBYTE(v37) = v37;
      LOBYTE(v37) = v39;
      v14 = (unsigned int)v37 >> 31;
      if ( v38 > (unsigned __int16)*(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 768LL) )
        v38 = *(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 768LL);
      v40 = 1LL;
    }
    else
    {
      v40 = 0LL;
      v38 = 512;
    }
    v41 = (char *)v5 + v38;
    if ( auth_dns )
    {
      v42 = answer_auth(v5, v41, n, now, &source_addr, v32, v14, v40);
      if ( v42 )
      {
        send_from(
          listen->fd,
          (**(_QWORD **)&dnsmasq_daemon_0 & 0x8000002000LL) != 0,
          (char *)v5,
          v42,
          &source_addr,
          &dst_addr,
          v2);
        ++*(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 880LL);
      }
    }
    else
    {
      v43 = 1LL;
      if ( (v5->hb4 & 0x20) == 0 )
        v43 = (unsigned int)v14;
      ad_reqda = v43;
      v44 = answer_request(v5, v41, n, s_addr, v46, now, v43, v14, v40, v34);
      if ( v44 )
      {
        send_from(
          listen->fd,
          (**(_QWORD **)&dnsmasq_daemon_0 & 0x8000002000LL) != 0,
          (char *)v5,
          v44,
          &source_addr,
          &dst_addr,
          v2);
        ++*(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 872LL);
      }
      else if ( forward_query(listen->fd, &source_addr, &dst_addr, v2, v5, n, now, 0LL, ad_reqda, 0) )
      {
        ++*(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 876LL);
      }
      else
      {
        ++*(_DWORD *)(*(_QWORD *)&dnsmasq_daemon_0 + 872LL);
      }
    }
    return;
  }
  v18 = *(unsigned int **)(*(_QWORD *)&dnsmasq_daemon_0 + 1568LL);
  v19 = 32LL;
  if ( family == 10 )
  {
    while ( v18 )
    {
      if ( (v18[4] & 2) != 0 && (unsigned int)is_same_net6(v18, &source_addr.in6.sin6_addr, v18[5], v15, v13, v19) )
        goto LABEL_31;
      v18 = (unsigned int *)*((_QWORD *)v18 + 3);
    }
  }
  else
  {
    while ( v18 )
    {
      v15 = 32 - v18[5];
      v17 = _byteswap_ulong(-1 << (32 - *((_BYTE *)v18 + 20)));
      if ( (v18[4] & 2) == 0 )
      {
        v20 = is_same_net(*v18, source_addr.in.sin_addr.s_addr, v17);
        v19 = 32LL;
        if ( v20 )
          goto LABEL_31;
      }
      v18 = (unsigned int *)*((_QWORD *)v18 + 3);
    }
  }
  if ( !warned_2 )
  {
    my_syslog(4LL, "Ignoring query from non-local network", v17, v15, v13, v19);
    warned_2 = 1;
  }
}
