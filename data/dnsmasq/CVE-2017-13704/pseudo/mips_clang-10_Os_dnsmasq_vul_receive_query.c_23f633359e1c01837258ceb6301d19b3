void __fastcall receive_query(listener *listen, time_t now)
{
  int v4; // $v0
  char *v5; // $s0
  _BOOL4 v6; // $s1
  in_addr_t s_addr; // $s3
  dns_header *v8; // $s7
  irec *iface; // $v1
  int v10; // $at
  ssize_t v11; // $v0
  ssize_t v12; // $s4
  int family; // $v0
  int v14; // $v0
  unsigned int v15; // $s5
  struct cmsghdr *msg_control; // $v0
  char *v17; // $v0
  int v18; // $s5
  time_t v19; // $s5
  _DWORD *v20; // $at
  int v21; // $v0
  const char *v22; // $a0
  int v23; // $v0
  int v24; // $a1
  int v25; // $s6
  int ad_reqd; // $s1
  unsigned int v27; // $v1
  __int16 v28; // $v0
  __int16 v29; // $a0
  unsigned __int16 v30; // $at
  int v31; // $v0
  frec *v32; // $v1
  size_t v33; // $v0
  int v34; // $a1
  size_t v35; // $s6
  time_t v36; // $s5
  size_t v37; // $v0
  int fd; // $a0
  int v39; // $a1
  int v40; // $v0
  int v41; // $a1
  frec *forward; // [sp+1Ch] [-BCh]
  int v43; // [sp+24h] [-B4h]
  unsigned int dst_iface; // [sp+28h] [-B0h]
  time_t v45; // [sp+2Ch] [-ACh]
  int v46[8]; // [sp+30h] [-A8h] BYREF
  char v47; // [sp+50h] [-88h] BYREF
  struct msghdr v48; // [sp+70h] [-68h] BYREF
  int v49[3]; // [sp+90h] [-48h] BYREF
  int dns_auth; // [sp+9Ch] [-3Ch] BYREF
  all_addr source; // [sp+A0h] [-38h] BYREF
  unsigned __int16 v52; // [sp+B4h] [-24h] BYREF
  mysockaddr to; // [sp+B8h] [-20h] BYREF

  v4 = dnsmasq_daemon;
  v5 = *(char **)(dnsmasq_daemon + 476);
  dns_auth = 0;
  v6 = 1;
  if ( (*(_BYTE *)(dnsmasq_daemon + 2) & 0x20) != 0 )
    v6 = listen->family == 0xA;
  *(_DWORD *)(dnsmasq_daemon + 528) = 0;
  source.addr.addr4.s_addr = 0;
  s_addr = 0;
  if ( (*(_BYTE *)(v4 + 2) & 0x20) != 0 )
  {
    iface = listen->iface;
    if ( iface )
    {
      dns_auth = iface->dns_auth;
      v8 = 0;
      if ( listen->family == 2 )
      {
        s_addr = iface->addr.in.sin_addr.s_addr;
        source.addr.addr4.s_addr = s_addr;
        v8 = (dns_header *)iface->netmask.s_addr;
      }
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v8 = 0;
  }
  v49[0] = (int)v5;
  v10 = *(unsigned __int16 *)(v4 + 432);
  v48.msg_controllen = 32;
  v48.msg_control = &v47;
  v49[1] = v10;
  v48.msg_iovlen = 1;
  v48.msg_iov = (iovec *)v49;
  v48.msg_namelen = 28;
  v48.msg_name = &to;
  v48.msg_flags = 0;
  v11 = recvmsg(listen->fd, &v48, 0);
  if ( v11 < 0xC || (v48.msg_flags & 0x20) != 0 || v5[2] < 0 )
    return;
  v12 = v11;
  family = listen->family;
  to.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !to.in.sin_port )
      return;
  }
  else
  {
    if ( !to.in.sin_port )
      return;
    to.in.sin_addr.s_addr = 0;
  }
  v45 = now;
  if ( (*(_BYTE *)(dnsmasq_daemon + 5) & 2) != 0 )
  {
    v18 = *(_DWORD *)(dnsmasq_daemon + 1136);
    if ( family == 10 )
    {
      if ( v18 )
      {
        while ( (*(_BYTE *)(v18 + 19) & 2) == 0 || !is_same_net6(v18, &to.in6.sin6_addr, *(_DWORD *)(v18 + 20)) )
        {
          v18 = *(_DWORD *)(v18 + 24);
          if ( !v18 )
            goto LABEL_52;
        }
        goto LABEL_18;
      }
    }
    else if ( v18 )
    {
      while ( (*(_BYTE *)(v18 + 19) & 2) != 0
           || !is_same_net(*(_DWORD *)v18, to.in.sin_addr.s_addr, _bswapw(-1 << (32 - *(_DWORD *)(v18 + 20)))) )
      {
        v18 = *(_DWORD *)(v18 + 24);
        if ( !v18 )
          goto LABEL_52;
      }
      goto LABEL_18;
    }
LABEL_52:
    if ( !receive_query_warned )
    {
      my_syslog(4, "Ignoring query from non-local network");
      receive_query_warned = 1;
    }
    return;
  }
LABEL_18:
  if ( v6 )
  {
    if ( v48.msg_controllen < 0xC )
      return;
    v14 = listen->family;
    v15 = 0;
    if ( v14 == 2 )
    {
      msg_control = (struct cmsghdr *)v48.msg_control;
      if ( !v48.msg_control )
      {
        v15 = 0;
LABEL_82:
        if ( !indextoname(listen->fd, v15, v46) )
          return;
        if ( !iface_check(listen->family, &source, v46, &dns_auth) )
        {
          if ( (*(_BYTE *)(dnsmasq_daemon + 7) & 0x80) == 0 )
            enumerate_interfaces(0);
          if ( !loopback_exception(listen->fd, listen->family, &source, v46)
            && !label_exception(v15, listen->family, &source) )
          {
            return;
          }
        }
        dst_iface = v15;
        if ( listen->family == 2 )
        {
          v19 = v45;
          if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 4) != 0 )
          {
            v40 = *(_DWORD *)(dnsmasq_daemon + 508);
            if ( v40 )
            {
              v41 = *(_DWORD *)(dnsmasq_daemon + 508);
              while ( *(_WORD *)v41 != 2 || *(_DWORD *)(v41 + 4) != s_addr )
              {
                v41 = *(_DWORD *)(v41 + 80);
                if ( !v41 )
                  goto LABEL_95;
              }
            }
            else
            {
LABEL_95:
              if ( (*(_BYTE *)(dnsmasq_daemon + 7) & 0x80) == 0 )
              {
                enumerate_interfaces(0);
                v40 = *(_DWORD *)(dnsmasq_daemon + 508);
              }
            }
            if ( v40 )
            {
              while ( *(_WORD *)v40 != 2 || *(_DWORD *)(v40 + 4) != s_addr )
              {
                v40 = *(_DWORD *)(v40 + 80);
                if ( !v40 )
                {
                  s_addr = 0;
                  goto LABEL_43;
                }
              }
              v8 = *(dns_header **)(v40 + 28);
            }
            else
            {
              s_addr = 0;
            }
          }
        }
        else
        {
          v19 = v45;
        }
        goto LABEL_43;
      }
      v15 = 0;
      do
      {
        if ( !msg_control->cmsg_level && msg_control->cmsg_type == 8 )
        {
          s_addr = *(_DWORD *)&msg_control->__cmsg_data[4];
          source.addr.addr4.s_addr = s_addr;
          v15 = *(_DWORD *)msg_control->__cmsg_data;
        }
        msg_control = _cmsg_nxthdr(&v48, msg_control);
      }
      while ( msg_control );
      v14 = listen->family;
    }
    if ( v14 == 10 )
    {
      v17 = (char *)v48.msg_control;
      if ( v48.msg_control )
      {
        if ( v48.msg_controllen >= 0xC )
        {
          do
          {
            if ( *((_DWORD *)v17 + 1) == 41 && *((_DWORD *)v17 + 2) == *(_DWORD *)(dnsmasq_daemon + 1132) )
            {
              source = *(all_addr *)(v17 + 12);
              v15 = *((_DWORD *)v17 + 7);
            }
            v17 = (char *)_cmsg_nxthdr(&v48, (struct cmsghdr *)v17);
          }
          while ( v17 );
        }
      }
    }
    goto LABEL_82;
  }
  dst_iface = 0;
  v19 = v45;
LABEL_43:
  v20 = (_DWORD *)dnsmasq_daemon;
  *(_DWORD *)(dnsmasq_daemon + 1148) = &to;
  v21 = v20[285] + 1;
  v20[286] = v21;
  v20[285] = v21;
  if ( !extract_request(v5, v12, v20[121], &v52) )
    goto LABEL_63;
  v22 = "auth";
  if ( !dns_auth )
    v22 = "query";
  v23 = querystr(v22, v52);
  v24 = *(_DWORD *)(dnsmasq_daemon + 484);
  if ( listen->family == 2 )
    log_query(524424, v24, &to.in6.sin6_flowinfo, v23);
  else
    log_query(524552, v24, &to.in6.sin6_addr, v23);
  if ( !dns_auth && (*(_BYTE *)(dnsmasq_daemon + 1) & 4) == 0 )
  {
    v25 = *(_DWORD *)(dnsmasq_daemon + 80);
    if ( v25 )
    {
      if ( in_zone(*(_DWORD *)(dnsmasq_daemon + 80), *(_DWORD *)(dnsmasq_daemon + 484), 0) )
      {
LABEL_61:
        dns_auth = 1;
      }
      else
      {
        while ( 1 )
        {
          v25 = *(_DWORD *)(v25 + 16);
          if ( !v25 )
            break;
          if ( in_zone(v25, *(_DWORD *)(dnsmasq_daemon + 484), 0) )
            goto LABEL_61;
        }
      }
    }
  }
  if ( !detect_loop(*(_DWORD *)(dnsmasq_daemon + 484), v52) )
  {
LABEL_63:
    ad_reqd = 0;
    if ( find_pseudoheader(v5, v12, 0, v46) )
    {
      v27 = *(unsigned __int8 *)(v46[0] + 4);
      v28 = *(unsigned __int8 *)(v46[0] + 1);
      v29 = *(unsigned __int8 *)v46[0];
      v46[0] += 6;
      v30 = (v29 << 8) | v28;
      if ( *(unsigned __int16 *)(dnsmasq_daemon + 432) < (unsigned int)v30 )
        v30 = *(_WORD *)(dnsmasq_daemon + 432);
      v31 = v30;
      v32 = (frec *)(v27 >> 7);
      ad_reqd = 1;
    }
    else
    {
      v31 = 512;
      v32 = 0;
    }
    if ( dns_auth )
    {
      v33 = answer_auth(v5, &v5[v31], v12, v19);
      if ( v33 )
      {
        v34 = 1;
        if ( (*(_BYTE *)(dnsmasq_daemon + 2) & 0x20) == 0 )
          v34 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
        send_from(listen->fd, v34, v5, v33, &to, &source, dst_iface);
        ++*(_DWORD *)(dnsmasq_daemon + 496);
      }
    }
    else
    {
      v35 = v19;
      v36 = 1;
      if ( (v5[3] & 0x20) == 0 )
        v36 = (time_t)v32;
      forward = v32;
      v37 = answer_request(v5, &v5[v31], v12, s_addr);
      fd = listen->fd;
      if ( v37 )
      {
        v39 = 1;
        if ( (*(_BYTE *)(dnsmasq_daemon + 2) & 0x20) == 0 )
          v39 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
        send_from(fd, v39, v5, v37, &to, &source, dst_iface);
        ++*(_DWORD *)(dnsmasq_daemon + 488);
      }
      else if ( forward_query(fd, &to, &source, dst_iface, v8, v35, v36, forward, ad_reqd, v43) )
      {
        ++*(_DWORD *)(dnsmasq_daemon + 492);
      }
      else
      {
        ++*(_DWORD *)(dnsmasq_daemon + 488);
      }
    }
  }
}
