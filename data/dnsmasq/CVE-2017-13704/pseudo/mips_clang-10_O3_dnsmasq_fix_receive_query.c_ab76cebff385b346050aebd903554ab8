void __fastcall receive_query(listener *listen, time_t now)
{
  int v4; // $v0
  char *v5; // $s0
  _BOOL4 v6; // $s1
  in_addr_t s_addr; // $s3
  in_addr_t v8; // $s6
  irec *v9; // $v1
  int v10; // $at
  ssize_t v11; // $v0
  ssize_t v12; // $s4
  int family; // $v0
  int v14; // $v1
  unsigned int iface; // $s7
  char *msg_control; // $t0
  char *v17; // $a0
  char *v18; // $a3
  char *v19; // $a3
  char *v20; // $v0
  _DWORD *v21; // $a2
  int v22; // $a3
  int v23; // $s5
  _DWORD *v24; // $at
  int v25; // $v0
  const char *v26; // $a0
  int v27; // $v0
  int v28; // $a1
  unsigned int v29; // $s1
  in_addr_t v30; // $s7
  int v31; // $s6
  int ad_reqd; // $s1
  __int16 v33; // $a0
  unsigned int v34; // $v1
  __int16 v35; // $v0
  frec *v36; // $v1
  unsigned __int16 v37; // $at
  int v38; // $v0
  size_t v39; // $v0
  int v40; // $a1
  time_t v41; // $s5
  dns_header *v42; // $a0
  int v43; // $s6
  size_t v44; // $v0
  int fd; // $a0
  int v46; // $v0
  int v47; // $a1
  dns_header *to; // [sp+10h] [-C8h]
  frec *forward; // [sp+1Ch] [-BCh]
  int v50; // [sp+24h] [-B4h]
  time_t v51; // [sp+28h] [-B0h]
  int v52[8]; // [sp+30h] [-A8h] BYREF
  char v53; // [sp+50h] [-88h] BYREF
  struct msghdr v54; // [sp+70h] [-68h] BYREF
  int v55[3]; // [sp+90h] [-48h] BYREF
  int dns_auth; // [sp+9Ch] [-3Ch] BYREF
  all_addr source; // [sp+A0h] [-38h] BYREF
  unsigned __int16 v58; // [sp+B4h] [-24h] BYREF
  mysockaddr v59; // [sp+B8h] [-20h] BYREF

  v4 = dnsmasq_daemon;
  v5 = *(char **)(dnsmasq_daemon + 476);
  dns_auth = 0;
  v6 = 1;
  if ( (*(_BYTE *)(dnsmasq_daemon + 2) & 0x20) != 0 )
    v6 = listen->family == 0xA;
  *(_DWORD *)(dnsmasq_daemon + 528) = 0;
  source.addr.addr4.s_addr = 0;
  s_addr = 0;
  if ( (*(_BYTE *)(v4 + 2) & 0x20) != 0 )
  {
    v9 = listen->iface;
    if ( v9 )
    {
      dns_auth = v9->dns_auth;
      v8 = 0;
      if ( listen->family == 2 )
      {
        s_addr = v9->addr.in.sin_addr.s_addr;
        source.addr.addr4.s_addr = s_addr;
        v8 = v9->netmask.s_addr;
      }
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v8 = 0;
  }
  v55[0] = (int)v5;
  v10 = *(unsigned __int16 *)(v4 + 432);
  v54.msg_controllen = 32;
  v54.msg_control = &v53;
  v54.msg_iovlen = 1;
  v54.msg_iov = (iovec *)v55;
  v55[1] = v10;
  v54.msg_namelen = 28;
  v54.msg_name = &v59;
  v54.msg_flags = 0;
  v11 = recvmsg(listen->fd, &v54, 0);
  if ( v11 < 0xC || (v54.msg_flags & 0x20) != 0 || v5[2] < 0 )
    return;
  v12 = v11;
  memset((void *)(*(_DWORD *)(dnsmasq_daemon + 476) + v11), 0, *(unsigned __int16 *)(dnsmasq_daemon + 432) - v11);
  family = listen->family;
  v59.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !v59.in.sin_port )
      return;
  }
  else
  {
    if ( !v59.in.sin_port )
      return;
    v59.in.sin_addr.s_addr = 0;
  }
  v51 = now;
  if ( (*(_BYTE *)(dnsmasq_daemon + 5) & 2) != 0 )
  {
    v23 = *(_DWORD *)(dnsmasq_daemon + 1136);
    if ( family == 10 )
    {
      if ( v23 )
      {
        while ( (*(_BYTE *)(v23 + 19) & 2) == 0 || !is_same_net6(v23, &v59.in6.sin6_addr, *(_DWORD *)(v23 + 20)) )
        {
          v23 = *(_DWORD *)(v23 + 24);
          if ( !v23 )
            goto LABEL_60;
        }
        goto LABEL_18;
      }
    }
    else if ( v23 )
    {
      while ( (*(_BYTE *)(v23 + 19) & 2) != 0
           || !is_same_net(*(_DWORD *)v23, v59.in.sin_addr.s_addr, _bswapw(-1 << (32 - *(_DWORD *)(v23 + 20)))) )
      {
        v23 = *(_DWORD *)(v23 + 24);
        if ( !v23 )
          goto LABEL_60;
      }
      goto LABEL_18;
    }
LABEL_60:
    if ( !receive_query_warned )
    {
      my_syslog(4, "Ignoring query from non-local network");
      receive_query_warned = 1;
    }
    return;
  }
LABEL_18:
  if ( v6 )
  {
    if ( v54.msg_controllen < 0xC )
      return;
    v14 = listen->family;
    iface = 0;
    if ( v14 == 2 )
    {
      msg_control = (char *)v54.msg_control;
      if ( !v54.msg_control )
      {
        iface = 0;
LABEL_90:
        if ( !indextoname(listen->fd, iface, v52) )
          return;
        if ( !iface_check(listen->family, &source, v52, &dns_auth) )
        {
          if ( (*(_BYTE *)(dnsmasq_daemon + 7) & 0x80) == 0 )
            enumerate_interfaces(0);
          if ( !loopback_exception(listen->fd, listen->family, &source, v52)
            && !label_exception(iface, listen->family, &source) )
          {
            return;
          }
        }
        if ( listen->family == 2 && (*(_BYTE *)(dnsmasq_daemon + 1) & 4) != 0 )
        {
          v46 = *(_DWORD *)(dnsmasq_daemon + 508);
          if ( v46 )
          {
            v47 = *(_DWORD *)(dnsmasq_daemon + 508);
            while ( *(_WORD *)v47 != 2 || *(_DWORD *)(v47 + 4) != s_addr )
            {
              v47 = *(_DWORD *)(v47 + 80);
              if ( !v47 )
                goto LABEL_104;
            }
          }
          else
          {
LABEL_104:
            if ( (*(_BYTE *)(dnsmasq_daemon + 7) & 0x80) == 0 )
            {
              enumerate_interfaces(0);
              v46 = *(_DWORD *)(dnsmasq_daemon + 508);
            }
          }
          if ( v46 )
          {
            do
            {
              if ( *(_WORD *)v46 == 2 && *(_DWORD *)(v46 + 4) == s_addr )
              {
                v8 = *(_DWORD *)(v46 + 28);
                goto LABEL_49;
              }
              v46 = *(_DWORD *)(v46 + 80);
            }
            while ( v46 );
            s_addr = 0;
          }
          else
          {
            s_addr = 0;
          }
        }
        goto LABEL_49;
      }
      v17 = (char *)v54.msg_control + v54.msg_controllen;
      iface = 0;
      do
      {
        v18 = msg_control;
        if ( !*((_DWORD *)msg_control + 1) && *((_DWORD *)msg_control + 2) == 8 )
        {
          s_addr = *((_DWORD *)msg_control + 4);
          source.addr.addr4.s_addr = s_addr;
          iface = *((_DWORD *)msg_control + 3);
        }
        if ( *(_DWORD *)msg_control < 0xCu )
          break;
        msg_control += (*(_DWORD *)msg_control + 3) & 0xFFFFFFFC;
        if ( v17 < msg_control + 0xC )
          break;
      }
      while ( v17 >= &msg_control[(*(_DWORD *)msg_control + 3) & 0xFFFFFFFC] && v18 );
    }
    if ( v14 == 10 )
    {
      v19 = (char *)v54.msg_control;
      if ( v54.msg_control )
      {
        v20 = (char *)v54.msg_control + v54.msg_controllen;
        do
        {
          v21 = v19;
          if ( *((_DWORD *)v19 + 1) == 41 && *((_DWORD *)v19 + 2) == *(_DWORD *)(dnsmasq_daemon + 1132) )
          {
            source = *(all_addr *)(v19 + 12);
            iface = *((_DWORD *)v19 + 7);
          }
          v22 = *(_DWORD *)v19;
          if ( *v21 < 0xCu )
            break;
          v19 = (char *)v21 + ((v22 + 3) & 0xFFFFFFFC);
          if ( v20 < v19 + 0xC )
            break;
        }
        while ( v20 >= &v19[(*(_DWORD *)v19 + 3) & 0xFFFFFFFC] && v21 );
      }
    }
    goto LABEL_90;
  }
  iface = 0;
LABEL_49:
  v24 = (_DWORD *)dnsmasq_daemon;
  *(_DWORD *)(dnsmasq_daemon + 1148) = &v59;
  v25 = v24[285] + 1;
  v24[286] = v25;
  v24[285] = v25;
  if ( !extract_request(v5, v12, v24[121], &v58) )
    goto LABEL_71;
  v26 = "auth";
  if ( !dns_auth )
    v26 = "query";
  v27 = querystr(v26, v58);
  v28 = *(_DWORD *)(dnsmasq_daemon + 484);
  v29 = iface;
  if ( listen->family == 2 )
    log_query(524424, v28, &v59.in6.sin6_flowinfo, v27);
  else
    log_query(524552, v28, &v59.in6.sin6_addr, v27);
  v30 = v8;
  if ( !dns_auth && (*(_BYTE *)(dnsmasq_daemon + 1) & 4) == 0 )
  {
    v31 = *(_DWORD *)(dnsmasq_daemon + 80);
    if ( v31 )
    {
      if ( in_zone(*(_DWORD *)(dnsmasq_daemon + 80), *(_DWORD *)(dnsmasq_daemon + 484), 0) )
      {
LABEL_69:
        dns_auth = 1;
      }
      else
      {
        while ( 1 )
        {
          v31 = *(_DWORD *)(v31 + 16);
          if ( !v31 )
            break;
          if ( in_zone(v31, *(_DWORD *)(dnsmasq_daemon + 484), 0) )
            goto LABEL_69;
        }
      }
    }
  }
  v8 = v30;
  iface = v29;
  if ( !detect_loop(*(_DWORD *)(dnsmasq_daemon + 484), v58) )
  {
LABEL_71:
    ad_reqd = 0;
    if ( find_pseudoheader(v5, v12, 0, v52) )
    {
      ad_reqd = 1;
      v33 = *(unsigned __int8 *)v52[0];
      v34 = *(unsigned __int8 *)(v52[0] + 4);
      v35 = *(unsigned __int8 *)(v52[0] + 1);
      v52[0] += 6;
      v36 = (frec *)(v34 >> 7);
      v37 = (v33 << 8) | v35;
      if ( *(unsigned __int16 *)(dnsmasq_daemon + 432) < (unsigned int)v37 )
        v37 = *(_WORD *)(dnsmasq_daemon + 432);
      v38 = v37;
    }
    else
    {
      v38 = 512;
      v36 = 0;
    }
    if ( dns_auth )
    {
      v39 = answer_auth(v5, &v5[v38], v12, v51);
      if ( v39 )
      {
        v40 = 1;
        if ( (*(_BYTE *)(dnsmasq_daemon + 2) & 0x20) == 0 )
          v40 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
        send_from(listen->fd, v40, v5, v39, &v59, &source, iface);
        ++*(_DWORD *)(dnsmasq_daemon + 496);
      }
    }
    else
    {
      v41 = 1;
      forward = v36;
      v42 = (dns_header *)v8;
      v43 = 1;
      if ( (v5[3] & 0x20) == 0 )
        v41 = (time_t)v36;
      to = v42;
      v44 = answer_request(v5, &v5[v38], v12, s_addr);
      fd = listen->fd;
      if ( v44 )
      {
        if ( (*(_BYTE *)(dnsmasq_daemon + 2) & 0x20) == 0 )
          v43 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
        send_from(fd, v43, v5, v44, &v59, &source, iface);
        ++*(_DWORD *)(dnsmasq_daemon + 488);
      }
      else if ( forward_query(fd, &v59, &source, iface, to, v51, v41, forward, ad_reqd, v50) )
      {
        ++*(_DWORD *)(dnsmasq_daemon + 492);
      }
      else
      {
        ++*(_DWORD *)(dnsmasq_daemon + 488);
      }
    }
  }
}
