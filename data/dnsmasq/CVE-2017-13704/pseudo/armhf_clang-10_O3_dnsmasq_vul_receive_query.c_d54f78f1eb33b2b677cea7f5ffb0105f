void __fastcall receive_query(listener *listen, time_t now)
{
  in_addr_t s_addr; // r7
  _BOOL4 v4; // r8
  int v5; // r0
  dns_header *v6; // r10
  irec *iface; // r3
  in_addr_t v8; // r1
  ssize_t v9; // r0
  size_t v10; // r9
  int family; // r0
  int v12; // r1
  int v13; // r1
  unsigned int v14; // r8
  _DWORD *msg_control; // r5
  char *v16; // r3
  _DWORD *v17; // r2
  bool v18; // cc
  _DWORD *v19; // r1
  char *v20; // r0
  in_addr_t v21; // r3
  unsigned int v22; // r4
  unsigned int v23; // r2
  _DWORD *v24; // r3
  bool v25; // cc
  int v26; // r4
  _DWORD *v27; // r0
  int v28; // r2
  int v29; // r1
  const char *v30; // r0
  int v31; // r3
  in6_addr *p_sin6_flowinfo; // r2
  int v33; // r0
  unsigned int v34; // r1
  int v35; // r4
  int v36; // r5
  int v37; // r1
  int v38; // r2
  unsigned int v39; // r3
  unsigned int v40; // r0
  int v41; // r1
  size_t v42; // r0
  int v43; // r2
  unsigned int v44; // r1
  int v45; // r4
  int v46; // r8
  size_t v47; // r3
  int fd; // r0
  _DWORD *v49; // r0
  unsigned __int16 *v50; // r2
  int v51; // r3
  bool v52; // zf
  int v53; // r1
  bool v54; // zf
  int v55; // [sp+14h] [bp-C4h]
  all_addr *v56; // [sp+18h] [bp-C0h]
  all_addr *v57; // [sp+18h] [bp-C0h]
  in_addr_t v58; // [sp+1Ch] [bp-BCh]
  int v60[8]; // [sp+24h] [bp-B4h] BYREF
  char v61; // [sp+44h] [bp-94h] BYREF
  struct msghdr message; // [sp+64h] [bp-74h] BYREF
  iovec iov[1]; // [sp+80h] [bp-58h] BYREF
  int auth_dns; // [sp+88h] [bp-50h] BYREF
  all_addr dst_addr; // [sp+8Ch] [bp-4Ch] BYREF
  unsigned __int16 type; // [sp+9Eh] [bp-3Ah] BYREF
  mysockaddr source_addr; // [sp+A0h] [bp-38h] BYREF

  s_addr = 0;
  v4 = 1;
  auth_dns = 0;
  v5 = dnsmasq_daemon;
  v6 = *(dns_header **)(dnsmasq_daemon + 476);
  if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) != 0 )
    v4 = listen->family == 0xA;
  dst_addr.addr.addr4.s_addr = 0;
  *(_DWORD *)(dnsmasq_daemon + 528) = 0;
  if ( (*(_BYTE *)(v5 + 1) & 0x20) != 0 && (iface = listen->iface) != 0 )
  {
    v8 = 0;
    auth_dns = iface->dns_auth;
    if ( listen->family == 2 )
    {
      s_addr = iface->addr.in.sin_addr.s_addr;
      v8 = iface->netmask.s_addr;
      dst_addr.addr.addr4.s_addr = s_addr;
    }
  }
  else
  {
    v8 = 0;
  }
  v58 = v8;
  iov[0].iov_base = v6;
  message.msg_controllen = 32;
  message.msg_control = &v61;
  message.msg_iovlen = 1;
  message.msg_iov = iov;
  message.msg_namelen = 28;
  message.msg_name = &source_addr;
  iov[0].iov_len = *(unsigned __int16 *)(v5 + 432);
  message.msg_flags = 0;
  v9 = recvmsg(listen->fd, &message, 0);
  if ( v9 < 12 )
    return;
  v10 = v9;
  if ( (message.msg_flags & 0x20) != 0 || (v6->hb3 & 0x80u) != 0 )
    return;
  family = listen->family;
  source_addr.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
    v12 = dnsmasq_daemon;
    if ( (*(_BYTE *)(dnsmasq_daemon + 6) & 2) == 0 )
      goto LABEL_18;
  }
  else
  {
    if ( !source_addr.in.sin_port )
      return;
    source_addr.in.sin_addr.s_addr = 0;
    v12 = dnsmasq_daemon;
    if ( (*(_BYTE *)(dnsmasq_daemon + 6) & 2) == 0 )
      goto LABEL_18;
  }
  v26 = *(_DWORD *)(v12 + 1136);
  if ( family == 10 )
  {
    if ( v26 )
    {
      while ( (*(_BYTE *)(v26 + 16) & 2) == 0 || !is_same_net6(v26, &source_addr.in6.sin6_addr, *(_DWORD *)(v26 + 20)) )
      {
        v26 = *(_DWORD *)(v26 + 24);
        if ( !v26 )
          goto LABEL_64;
      }
      goto LABEL_18;
    }
LABEL_64:
    if ( !receive_query_warned )
    {
      my_syslog(4, "Ignoring query from non-local network");
      receive_query_warned = 1;
    }
    return;
  }
  if ( !v26 )
    goto LABEL_64;
  while ( 1 )
  {
    if ( (*(_BYTE *)(v26 + 16) & 2) == 0 )
    {
      v34 = -1 << (0x20 - *(_DWORD *)(v26 + 20));
      if ( is_same_net(
             *(_DWORD *)v26,
             source_addr.in.sin_addr.s_addr,
             (v34 << 8) & 0xFF0000 | (v34 << 24) | (v34 >> 8) & 0xFF00 | HIBYTE(v34)) )
      {
        break;
      }
    }
    v26 = *(_DWORD *)(v26 + 24);
    if ( !v26 )
      goto LABEL_64;
  }
LABEL_18:
  v56 = 0;
  if ( v4 )
  {
    if ( message.msg_controllen < 0xC )
      return;
    v13 = listen->family;
    v14 = 0;
    if ( v13 == 2 )
    {
      msg_control = message.msg_control;
      if ( !message.msg_control )
      {
        v14 = 0;
LABEL_98:
        if ( !indextoname(listen->fd, v14, v60) )
          return;
        if ( !iface_check(listen->family, &dst_addr, v60, &auth_dns) )
        {
          if ( (*(_BYTE *)(dnsmasq_daemon + 4) & 0x80) == 0 )
            enumerate_interfaces(0);
          if ( !loopback_exception(listen->fd, listen->family, &dst_addr, v60)
            && !label_exception(v14, listen->family, &dst_addr) )
          {
            return;
          }
        }
        if ( listen->family == 2 && (*(_BYTE *)(dnsmasq_daemon + 2) & 4) != 0 )
        {
          v49 = *(_DWORD **)(dnsmasq_daemon + 508);
          if ( v49 )
          {
            v50 = *(unsigned __int16 **)(dnsmasq_daemon + 508);
            while ( 1 )
            {
              v51 = *v50;
              v52 = v51 == 2;
              if ( v51 == 2 )
                v52 = *((_DWORD *)v50 + 1) == s_addr;
              if ( v52 )
                break;
              v50 = (unsigned __int16 *)*((_DWORD *)v50 + 20);
              if ( !v50 )
                goto LABEL_112;
            }
          }
          else
          {
LABEL_112:
            if ( (*(_BYTE *)(dnsmasq_daemon + 4) & 0x80) == 0 )
            {
              enumerate_interfaces(0);
              v49 = *(_DWORD **)(dnsmasq_daemon + 508);
            }
          }
          if ( v49 )
          {
            while ( 1 )
            {
              v53 = *(unsigned __int16 *)v49;
              v54 = v53 == 2;
              if ( v53 == 2 )
                v54 = v49[1] == s_addr;
              if ( v54 )
                break;
              v49 = (_DWORD *)v49[20];
              if ( !v49 )
                goto LABEL_119;
            }
            v58 = v49[7];
          }
          else
          {
LABEL_119:
            s_addr = 0;
          }
        }
        goto LABEL_53;
      }
      v16 = (char *)message.msg_control + message.msg_controllen;
      v14 = 0;
      do
      {
        if ( !msg_control[1] && msg_control[2] == 8 )
        {
          s_addr = msg_control[4];
          v14 = msg_control[3];
          dst_addr.addr.addr4.s_addr = s_addr;
        }
        if ( *msg_control < 0xCu )
          break;
        v17 = (_DWORD *)((char *)msg_control + ((*msg_control + 3) & 0xFFFFFFFC));
        v18 = v17 + 3 > (_DWORD *)v16;
        if ( v17 + 3 <= (_DWORD *)v16 )
          v18 = (char *)v17 + ((*v17 + 3) & 0xFFFFFFFC) > v16;
        if ( v18 )
          break;
        v52 = msg_control == 0;
        msg_control = (_DWORD *)((char *)msg_control + ((*msg_control + 3) & 0xFFFFFFFC));
      }
      while ( !v52 );
    }
    if ( v13 == 10 )
    {
      v19 = message.msg_control;
      if ( message.msg_control )
      {
        v20 = (char *)message.msg_control + message.msg_controllen;
        do
        {
          if ( v19[1] == 41 && v19[2] == *(_DWORD *)(dnsmasq_daemon + 1132) )
          {
            v21 = v19[3];
            v22 = v19[5];
            v23 = v19[6];
            v14 = v19[7];
            dst_addr.addr.addr6.__in6_u.__u6_addr32[1] = v19[4];
            *((_QWORD *)&dst_addr.addr.dnssec + 1) = __PAIR64__(v23, v22);
            dst_addr.addr.addr4.s_addr = v21;
          }
          if ( *v19 < 0xCu )
            break;
          v24 = (_DWORD *)((char *)v19 + ((*v19 + 3) & 0xFFFFFFFC));
          v25 = v24 + 3 > (_DWORD *)v20;
          if ( v24 + 3 <= (_DWORD *)v20 )
            v25 = (char *)v24 + ((*v24 + 3) & 0xFFFFFFFC) > v20;
          if ( v25 )
            break;
          v52 = v19 == 0;
          v19 = (_DWORD *)((char *)v19 + ((*v19 + 3) & 0xFFFFFFFC));
        }
        while ( !v52 );
      }
    }
    goto LABEL_98;
  }
  v14 = 0;
LABEL_53:
  v27 = (_DWORD *)dnsmasq_daemon;
  *(_DWORD *)(dnsmasq_daemon + 1148) = &source_addr;
  v28 = v27[121];
  v29 = v27[285] + 1;
  v27[286] = v29;
  v27[285] = v29;
  if ( !extract_request(v6, v10, v28, &type) )
    goto LABEL_76;
  v30 = "auth";
  if ( !auth_dns )
    v30 = "query";
  v31 = querystr(v30, type);
  if ( listen->family == 2 )
  {
    p_sin6_flowinfo = (in6_addr *)&source_addr.in6.sin6_flowinfo;
    v33 = 524424;
  }
  else
  {
    p_sin6_flowinfo = &source_addr.in6.sin6_addr;
    v33 = 524552;
  }
  log_query(v33, *(_DWORD *)(dnsmasq_daemon + 484), p_sin6_flowinfo, v31);
  v56 = 0;
  if ( !auth_dns && (*(_BYTE *)(dnsmasq_daemon + 2) & 4) == 0 )
  {
    v35 = *(_DWORD *)(dnsmasq_daemon + 80);
    if ( v35 )
    {
      if ( in_zone(*(_DWORD *)(dnsmasq_daemon + 80), *(_DWORD *)(dnsmasq_daemon + 484), 0) )
      {
LABEL_74:
        v56 = (all_addr *)(send_from + 1);
        auth_dns = 1;
      }
      else
      {
        v56 = 0;
        while ( 1 )
        {
          v35 = *(_DWORD *)(v35 + 16);
          if ( !v35 )
            break;
          if ( in_zone(v35, *(_DWORD *)(dnsmasq_daemon + 484), 0) )
            goto LABEL_74;
        }
      }
    }
  }
  if ( !detect_loop(*(_DWORD *)(dnsmasq_daemon + 484), type) )
  {
LABEL_76:
    v36 = 0;
    if ( find_pseudoheader(v6, v10, 0, v60, 0, 0) )
    {
      v37 = *(unsigned __int8 *)v60[0];
      v38 = *(unsigned __int8 *)(v60[0] + 1);
      v39 = *(unsigned __int8 *)(v60[0] + 4);
      v60[0] += 6;
      v40 = v38 | (v37 << 8);
      v41 = v39 >> 7;
      if ( v40 > *(unsigned __int16 *)(dnsmasq_daemon + 432) )
        v40 = *(unsigned __int16 *)(dnsmasq_daemon + 432);
      v36 = 1;
    }
    else
    {
      v40 = 512;
      v41 = 0;
    }
    if ( auth_dns )
    {
      v42 = answer_auth(v6, (char *)v6 + v40, v10, now, &source_addr, v56, v41, v36);
      if ( v42 )
      {
        v43 = dnsmasq_daemon;
        v44 = 1;
        if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
        {
          v44 = *(_DWORD *)(dnsmasq_daemon + 4);
          v43 = 1;
        }
        if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
          v44 = v43 & (v44 >> 7);
        send_from(listen->fd, v44, (char *)v6, v42, &source_addr, &dst_addr, v14);
        ++*(_DWORD *)(dnsmasq_daemon + 496);
      }
    }
    else
    {
      v45 = 1;
      v57 = (all_addr *)v14;
      v46 = 1;
      if ( (v6->hb4 & 0x20) == 0 )
        v45 = v41;
      v47 = answer_request(v6, (char *)v6 + v40, v10, s_addr, v58, now, v45, v41, v36);
      fd = listen->fd;
      if ( v47 )
      {
        if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
          v46 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
        send_from(fd, v46, (char *)v6, v47, &source_addr, &dst_addr, (unsigned int)v57);
        ++*(_DWORD *)(dnsmasq_daemon + 488);
      }
      else if ( forward_query(fd, &source_addr, &dst_addr, (unsigned int)v57, v6, v10, now, 0u, v45, v55) )
      {
        ++*(_DWORD *)(dnsmasq_daemon + 492);
      }
      else
      {
        ++*(_DWORD *)(dnsmasq_daemon + 488);
      }
    }
  }
}
