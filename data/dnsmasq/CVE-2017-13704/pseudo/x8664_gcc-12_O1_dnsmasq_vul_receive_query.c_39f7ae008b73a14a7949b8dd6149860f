void __fastcall receive_query(listener *listen, time_t now)
{
  __int64 v3; // rax
  dns_header *v4; // r14
  unsigned int v5; // r15d
  unsigned int s_addr; // ebp
  irec *iface; // rdx
  signed __int64 v8; // r12
  int family; // eax
  __int64 v10; // rdx
  __int64 v11; // r13
  unsigned int *i; // r13
  __int64 v13; // rdx
  int v14; // edx
  const __m128i *v15; // rcx
  char *v16; // rsi
  _DWORD *msg_control; // rcx
  char *v18; // rsi
  unsigned __int64 v19; // rax
  unsigned __int64 v20; // rdx
  unsigned __int64 v21; // rax
  unsigned __int64 v22; // rdx
  __int64 v23; // rax
  int v24; // edx
  const char *v25; // rdi
  __int64 v26; // rcx
  __int64 v27; // r13
  __int64 v28; // rax
  __int64 v29; // rax
  unsigned __int8 *v30; // rdx
  unsigned __int16 v31; // ax
  unsigned int v32; // ecx
  __int64 v33; // rdx
  __int64 v34; // rcx
  int v35; // r13d
  size_t v36; // rcx
  size_t v37; // rcx
  in_addr_t v39; // [rsp+20h] [rbp-138h]
  unsigned int ad_reqd; // [rsp+24h] [rbp-134h]
  unsigned int local_auth; // [rsp+28h] [rbp-130h]
  unsigned __int16 type; // [rsp+32h] [rbp-126h] BYREF
  int auth_dns; // [rsp+34h] [rbp-124h] BYREF
  unsigned __int8 *pheader; // [rsp+38h] [rbp-120h] BYREF
  msghdr msg; // [rsp+40h] [rbp-118h] BYREF
  all_addr dst_addr; // [rsp+80h] [rbp-D8h] BYREF
  iovec iov[1]; // [rsp+90h] [rbp-C8h] BYREF
  mysockaddr source_addr; // [rsp+A0h] [rbp-B8h] BYREF
  union {cmsghdr align;char control6[40];char control[32];} control_u; // [rsp+C0h] [rbp-98h] BYREF
  ifreq ifr; // [rsp+F0h] [rbp-68h] BYREF
  unsigned __int64 v51; // [rsp+118h] [rbp-40h]

  v51 = __readfsqword(0x28u);
  v3 = dnsmasq_daemon_0;
  v4 = *(dns_header **)(dnsmasq_daemon_0 + 848LL);
  auth_dns = 0;
  v5 = 1;
  if ( (*dnsmasq_daemon_0 & 0x2000) != 0 )
    v5 = listen->family == 10;
  *(_QWORD *)(dnsmasq_daemon_0 + 944LL) = 0LL;
  dst_addr.addr.addr4.s_addr = 0;
  v39 = 0;
  s_addr = *(_DWORD *)v3 & 0x2000;
  if ( s_addr )
  {
    iface = listen->iface;
    s_addr = 0;
    if ( iface )
    {
      auth_dns = iface->dns_auth;
      if ( listen->family == 2 )
      {
        s_addr = iface->addr.in.sin_addr.s_addr;
        dst_addr.addr.addr4.s_addr = s_addr;
        v39 = iface->netmask.s_addr;
      }
    }
  }
  iov[0].iov_base = v4;
  iov[0].iov_len = *(unsigned __int16 *)(v3 + 768);
  msg.msg_control = &control_u;
  msg.msg_controllen = 40LL;
  msg.msg_flags = 0;
  msg.msg_name = &source_addr;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  msg.msg_iovlen = 1LL;
  v8 = recvmsg(listen->fd, &msg, 0);
  if ( v8 <= 11 )
    return;
  ad_reqd = msg.msg_flags & 0x20;
  if ( (msg.msg_flags & 0x20) != 0 || (v4->hb3 & 0x80u) != 0 )
    return;
  family = listen->family;
  source_addr.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
    v10 = dnsmasq_daemon_0;
    if ( (*(_BYTE *)(dnsmasq_daemon_0 + 6LL) & 2) == 0 )
      goto LABEL_28;
  }
  else
  {
    if ( !source_addr.in.sin_port )
      return;
    source_addr.in.sin_addr.s_addr = 0;
    v10 = dnsmasq_daemon_0;
    if ( (*(_BYTE *)(dnsmasq_daemon_0 + 6LL) & 2) == 0 )
      goto LABEL_28;
    if ( family == 10 )
    {
      v11 = *(_QWORD *)(dnsmasq_daemon_0 + 1568LL);
      if ( v11 )
      {
        while ( (*(_BYTE *)(v11 + 16) & 2) == 0
             || !(unsigned int)is_same_net6(v11, &source_addr.in6.sin6_addr, *(unsigned int *)(v11 + 20)) )
        {
          v11 = *(_QWORD *)(v11 + 24);
          if ( !v11 )
            goto LABEL_34;
        }
        goto LABEL_28;
      }
LABEL_34:
      if ( !warned_2 )
      {
        my_syslog(4LL, "Ignoring query from non-local network");
        warned_2 = 1;
      }
      return;
    }
  }
  for ( i = *(unsigned int **)(v10 + 1568); i; i = (unsigned int *)*((_QWORD *)i + 3) )
  {
    v13 = _byteswap_ulong(-1 << (32 - *((_BYTE *)i + 20)));
    if ( (i[4] & 2) == 0 && (unsigned int)is_same_net(*i, source_addr.in.sin_addr.s_addr, v13) )
      break;
  }
  if ( !i )
    goto LABEL_34;
LABEL_28:
  if ( v5 )
  {
    if ( msg.msg_controllen <= 0xF )
      return;
    v14 = listen->family;
    if ( v14 == 2 )
    {
      if ( msg.msg_control )
      {
        msg_control = msg.msg_control;
        v5 = ad_reqd;
        v18 = (char *)msg.msg_control + msg.msg_controllen;
        while ( 1 )
        {
          if ( *((_QWORD *)msg_control + 1) == 0x800000000LL )
          {
            s_addr = msg_control[5];
            dst_addr.addr.addr4.s_addr = s_addr;
            v5 = msg_control[4];
          }
          v19 = *(_QWORD *)msg_control;
          v20 = (-*msg_control & 7) + 16LL;
          if ( *(_QWORD *)msg_control <= 0xFuLL
            || v18 - (char *)msg_control < v20
            || v18 - (char *)msg_control - v20 < v19 )
          {
            break;
          }
          msg_control = (_DWORD *)((char *)msg_control + ((v19 + 7) & 0xFFFFFFFFFFFFFFF8LL));
        }
      }
      else
      {
        v5 = ad_reqd;
      }
    }
    else if ( v14 == 10 )
    {
      if ( msg.msg_control )
      {
        v15 = (const __m128i *)msg.msg_control;
        v5 = ad_reqd;
        v16 = (char *)msg.msg_control + msg.msg_controllen;
        while ( 1 )
        {
          if ( v15->m128i_i32[2] == 41 && v15->m128i_i32[3] == *(_DWORD *)(dnsmasq_daemon_0 + 1560LL) )
          {
            dst_addr = (all_addr)_mm_loadu_si128(v15 + 1);
            v5 = v15[2].m128i_u32[0];
          }
          v21 = v15->m128i_i64[0];
          v22 = (-v15->m128i_i32[0] & 7) + 16LL;
          if ( v15->m128i_i64[0] <= 0xFuLL || v16 - (char *)v15 < v22 || v16 - (char *)v15 - v22 < v21 )
            break;
          v15 = (const __m128i *)((char *)v15 + ((v21 + 7) & 0xFFFFFFFFFFFFFFF8LL));
        }
      }
      else
      {
        v5 = ad_reqd;
      }
    }
    else
    {
      v5 = ad_reqd;
    }
    if ( !(unsigned int)indextoname((unsigned int)listen->fd, v5, &ifr) )
      return;
    if ( !(unsigned int)iface_check((unsigned int)listen->family, &dst_addr, &ifr, &auth_dns) )
    {
      if ( *(char *)(dnsmasq_daemon_0 + 4LL) >= 0 )
        enumerate_interfaces(0LL);
      if ( !(unsigned int)loopback_exception((unsigned int)listen->fd, (unsigned int)listen->family, &dst_addr, &ifr)
        && !(unsigned int)label_exception(v5, (unsigned int)listen->family, &dst_addr) )
      {
        return;
      }
    }
    if ( listen->family == 2 && (*dnsmasq_daemon_0 & 0x40000) != 0 )
    {
      v28 = *(_QWORD *)(dnsmasq_daemon_0 + 904LL);
      if ( v28 )
      {
        while ( *(_WORD *)v28 != 2 || *(_DWORD *)(v28 + 4) != s_addr )
        {
          v28 = *(_QWORD *)(v28 + 88);
          if ( !v28 )
          {
            if ( *(char *)(dnsmasq_daemon_0 + 4LL) < 0 )
            {
              v29 = *(_QWORD *)(dnsmasq_daemon_0 + 904LL);
              goto LABEL_86;
            }
            goto LABEL_83;
          }
        }
        v29 = *(_QWORD *)(dnsmasq_daemon_0 + 904LL);
        do
        {
LABEL_86:
          if ( *(_WORD *)v29 == 2 && *(_DWORD *)(v29 + 4) == s_addr )
          {
            v39 = *(_DWORD *)(v29 + 28);
            goto LABEL_62;
          }
          v29 = *(_QWORD *)(v29 + 88);
        }
        while ( v29 );
        s_addr = 0;
      }
      else if ( *(char *)(dnsmasq_daemon_0 + 4LL) >= 0 )
      {
LABEL_83:
        enumerate_interfaces(0LL);
        v29 = *(_QWORD *)(dnsmasq_daemon_0 + 904LL);
        if ( v29 )
          goto LABEL_86;
        s_addr = 0;
      }
      else
      {
        s_addr = 0;
      }
    }
  }
LABEL_62:
  v23 = dnsmasq_daemon_0;
  v24 = *(_DWORD *)(dnsmasq_daemon_0 + 1576LL) + 1;
  *(_DWORD *)(dnsmasq_daemon_0 + 1576LL) = v24;
  *(_DWORD *)(v23 + 1580) = v24;
  *(_QWORD *)(v23 + 1584) = &source_addr;
  if ( !(unsigned int)extract_request(v4, v8, *(_QWORD *)(v23 + 864), &type) )
  {
    local_auth = ad_reqd;
LABEL_94:
    if ( find_pseudoheader(v4, v8, 0LL, &pheader, 0LL, 0LL) )
    {
      v30 = pheader;
      v31 = _byteswap_ushort(*(_WORD *)pheader);
      pheader += 4;
      v32 = *pheader;
      pheader = v30 + 6;
      ad_reqd = v32 >> 7;
      if ( v31 > *(_WORD *)(dnsmasq_daemon_0 + 768LL) )
        v31 = *(_WORD *)(dnsmasq_daemon_0 + 768LL);
      v33 = 1LL;
    }
    else
    {
      v33 = ad_reqd;
      v31 = 512;
    }
    if ( auth_dns )
    {
      v37 = answer_auth(v4, (char *)v4 + v31, v8, now, &source_addr, local_auth, ad_reqd, v33);
      if ( v37 )
      {
        send_from(listen->fd, (*dnsmasq_daemon_0 & 0x8000002000LL) != 0, (char *)v4, v37, &source_addr, &dst_addr, v5);
        ++*(_DWORD *)(dnsmasq_daemon_0 + 880LL);
      }
    }
    else
    {
      v34 = 1LL;
      if ( (v4->hb4 & 0x20) == 0 )
        v34 = ad_reqd;
      v35 = v34;
      v36 = answer_request(v4, (char *)v4 + v31, v8, s_addr, v39, now, v34, ad_reqd, v33);
      if ( v36 )
      {
        send_from(listen->fd, (*dnsmasq_daemon_0 & 0x8000002000LL) != 0, (char *)v4, v36, &source_addr, &dst_addr, v5);
        ++*(_DWORD *)(dnsmasq_daemon_0 + 872LL);
      }
      else if ( forward_query(listen->fd, &source_addr, &dst_addr, v5, v4, v8, now, 0LL, v35, ad_reqd) )
      {
        ++*(_DWORD *)(dnsmasq_daemon_0 + 876LL);
      }
      else
      {
        ++*(_DWORD *)(dnsmasq_daemon_0 + 872LL);
      }
    }
    return;
  }
  v25 = "query";
  if ( auth_dns )
    v25 = "auth";
  v26 = querystr(v25, type);
  if ( listen->family == 2 )
    log_query(524424LL, *(_QWORD *)(dnsmasq_daemon_0 + 864LL), &source_addr.in6.sin6_flowinfo, v26);
  else
    log_query(524552LL, *(_QWORD *)(dnsmasq_daemon_0 + 864LL), &source_addr.in6.sin6_addr, v26);
  local_auth = auth_dns;
  if ( auth_dns )
  {
    local_auth = ad_reqd;
  }
  else if ( (*dnsmasq_daemon_0 & 0x40000) == 0 )
  {
    v27 = *(_QWORD *)(dnsmasq_daemon_0 + 144LL);
    if ( v27 )
    {
      while ( 1 )
      {
        local_auth = in_zone(v27, *(_QWORD *)(dnsmasq_daemon_0 + 864LL), 0LL);
        if ( local_auth )
          break;
        v27 = *(_QWORD *)(v27 + 32);
        if ( !v27 )
          goto LABEL_93;
      }
      auth_dns = 1;
      local_auth = 1;
    }
  }
LABEL_93:
  if ( !(unsigned int)detect_loop(*(_QWORD *)(dnsmasq_daemon_0 + 864LL), type) )
    goto LABEL_94;
}
