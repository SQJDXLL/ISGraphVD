void __fastcall receive_query(listener *listen, time_t now)
{
  __int64 v3; // x0
  dns_header *v4; // x22
  unsigned int v5; // w24
  in_addr_t v6; // w25
  unsigned int s_addr; // w23
  irec *iface; // x1
  signed __int64 v9; // x20
  __int64 v10; // x26
  int family; // w0
  __int64 v12; // x1
  __int64 v13; // x21
  unsigned int *i; // x21
  __int64 v15; // x2
  int v16; // w1
  char *v17; // x2
  char *v18; // x4
  _DWORD *msg_control; // x2
  char *v20; // x4
  unsigned __int64 v21; // x0
  unsigned __int64 v22; // x1
  __int64 v23; // x1
  unsigned __int64 v24; // x0
  unsigned __int64 v25; // x1
  __int64 v26; // x0
  int v27; // w1
  const char *v28; // x0
  __int64 v29; // x3
  unsigned int v30; // w21
  __int64 v31; // x27
  __int64 v32; // x0
  __int64 v33; // x0
  unsigned __int8 *v34; // x0
  unsigned int v35; // w2
  unsigned __int64 v36; // x26
  unsigned __int16 v37; // w1
  __int64 v38; // x7
  unsigned int v39; // w21
  size_t v40; // x3
  size_t v41; // x3
  unsigned __int16 type; // [xsp+82h] [xbp+72h] BYREF
  int auth_dns; // [xsp+84h] [xbp+74h] BYREF
  unsigned __int8 *pheader; // [xsp+88h] [xbp+78h] BYREF
  msghdr msg; // [xsp+90h] [xbp+80h] BYREF
  all_addr dst_addr; // [xsp+C8h] [xbp+B8h] BYREF
  iovec iov[1]; // [xsp+D8h] [xbp+C8h] BYREF
  mysockaddr source_addr; // [xsp+E8h] [xbp+D8h] BYREF
  union {cmsghdr align;char control6[40];char control[32];} control_u; // [xsp+108h] [xbp+F8h] BYREF
  ifreq ifr; // [xsp+130h] [xbp+120h] BYREF

  v3 = dnsmasq_daemon_0;
  v4 = *(dns_header **)(dnsmasq_daemon_0 + 848LL);
  auth_dns = 0;
  v5 = 1;
  if ( (*dnsmasq_daemon_0 & 0x2000) != 0 )
    v5 = listen->family == 10;
  *(_QWORD *)(dnsmasq_daemon_0 + 944LL) = 0LL;
  dst_addr.addr.addr4.s_addr = 0;
  v6 = 0;
  s_addr = *(_DWORD *)v3 & 0x2000;
  if ( s_addr )
  {
    iface = listen->iface;
    s_addr = 0;
    if ( iface )
    {
      auth_dns = iface->dns_auth;
      if ( listen->family == 2 )
      {
        s_addr = iface->addr.in.sin_addr.s_addr;
        dst_addr.addr.addr4.s_addr = s_addr;
        v6 = iface->netmask.s_addr;
      }
    }
  }
  iov[0].iov_base = v4;
  iov[0].iov_len = *(unsigned __int16 *)(v3 + 768);
  msg.msg_control = &control_u;
  msg.msg_controllen = 40LL;
  msg.msg_flags = 0;
  msg.msg_name = &source_addr;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  msg.msg_iovlen = 1LL;
  v9 = recvmsg(listen->fd, &msg, 0);
  if ( v9 <= 11 )
    return;
  LODWORD(v10) = msg.msg_flags & 0x20;
  if ( (msg.msg_flags & 0x20) != 0 || ((char)v4->hb3 & 0x80000000) != 0 )
    return;
  family = listen->family;
  source_addr.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
    v12 = dnsmasq_daemon_0;
    if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4LL) & 0x20000) == 0 )
      goto LABEL_30;
  }
  else
  {
    if ( !source_addr.in.sin_port )
      return;
    source_addr.in.sin_addr.s_addr = 0;
    v12 = dnsmasq_daemon_0;
    if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4LL) & 0x20000) == 0 )
      goto LABEL_30;
    if ( family == 10 )
    {
      v13 = *(_QWORD *)(dnsmasq_daemon_0 + 1568LL);
      if ( v13 )
      {
        while ( (*(_DWORD *)(v13 + 16) & 2) == 0
             || !(unsigned int)is_same_net6(v13, &source_addr.in6.sin6_addr, *(unsigned int *)(v13 + 20)) )
        {
          v13 = *(_QWORD *)(v13 + 24);
          if ( !v13 )
            goto LABEL_24;
        }
        goto LABEL_30;
      }
LABEL_24:
      if ( !warned_2 )
      {
        my_syslog(4LL, "Ignoring query from non-local network");
        warned_2 = 1;
      }
      return;
    }
  }
  for ( i = *(unsigned int **)(v12 + 1568); i; i = (unsigned int *)*((_QWORD *)i + 3) )
  {
    v15 = bswap32(-1 << (32 - i[5]));
    if ( (i[4] & 2) == 0 && (unsigned int)is_same_net(*i, source_addr.in.sin_addr.s_addr, v15) )
      break;
  }
  if ( !i )
    goto LABEL_24;
LABEL_30:
  if ( v5 )
  {
    if ( msg.msg_controllen <= 0xF )
      return;
    v16 = listen->family;
    if ( v16 == 2 )
    {
      if ( msg.msg_control )
      {
        msg_control = msg.msg_control;
        v5 = 0;
        v20 = (char *)msg.msg_control + msg.msg_controllen;
        while ( 1 )
        {
          if ( *((_QWORD *)msg_control + 1) == 0x800000000LL )
          {
            s_addr = msg_control[5];
            dst_addr.addr.addr4.s_addr = s_addr;
            v5 = msg_control[4];
          }
          v21 = *(_QWORD *)msg_control;
          v22 = (-*(_QWORD *)msg_control & 7LL) + 0x10;
          if ( *(_QWORD *)msg_control <= 0xFuLL
            || v22 > v20 - (char *)msg_control
            || v21 > v20 - (char *)msg_control - v22 )
          {
            break;
          }
          msg_control = (_DWORD *)((char *)msg_control + ((v21 + 7) & 0xFFFFFFFFFFFFFFF8LL));
        }
      }
      else
      {
        v5 = 0;
      }
    }
    else if ( v16 == 10 )
    {
      if ( msg.msg_control )
      {
        v17 = (char *)msg.msg_control;
        v5 = 0;
        v18 = (char *)msg.msg_control + msg.msg_controllen;
        while ( 1 )
        {
          if ( *((_DWORD *)v17 + 2) == 41 && *((_DWORD *)v17 + 3) == *(_DWORD *)(dnsmasq_daemon_0 + 1560LL) )
          {
            v23 = *((_QWORD *)v17 + 3);
            *(_QWORD *)&dst_addr.addr.addr4.s_addr = *((_QWORD *)v17 + 2);
            *((_QWORD *)&dst_addr.addr.dnssec + 1) = v23;
            v5 = *((_DWORD *)v17 + 8);
          }
          v24 = *(_QWORD *)v17;
          v25 = (-*(_QWORD *)v17 & 7LL) + 0x10;
          if ( *(_QWORD *)v17 <= 0xFuLL || v25 > v18 - v17 || v24 > v18 - v17 - v25 )
            break;
          v17 += (v24 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        }
      }
      else
      {
        v5 = 0;
      }
    }
    else
    {
      v5 = 0;
    }
    if ( !(unsigned int)indextoname((unsigned int)listen->fd, v5, &ifr) )
      return;
    if ( !(unsigned int)iface_check((unsigned int)listen->family, &dst_addr, &ifr, &auth_dns) )
    {
      if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4LL) & 0x80) == 0 )
        enumerate_interfaces(0LL);
      if ( !(unsigned int)loopback_exception((unsigned int)listen->fd, (unsigned int)listen->family, &dst_addr, &ifr)
        && !(unsigned int)label_exception(v5, (unsigned int)listen->family, &dst_addr) )
      {
        return;
      }
    }
    if ( listen->family == 2 && (*dnsmasq_daemon_0 & 0x40000) != 0 )
    {
      v32 = *(_QWORD *)(dnsmasq_daemon_0 + 904LL);
      if ( v32 )
      {
        while ( *(_WORD *)v32 != 2 || *(_DWORD *)(v32 + 4) != s_addr )
        {
          v32 = *(_QWORD *)(v32 + 88);
          if ( !v32 )
          {
            if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4LL) & 0x80) != 0 )
            {
              v33 = *(_QWORD *)(dnsmasq_daemon_0 + 904LL);
              goto LABEL_86;
            }
            goto LABEL_83;
          }
        }
        v33 = *(_QWORD *)(dnsmasq_daemon_0 + 904LL);
        do
        {
LABEL_86:
          if ( *(_WORD *)v33 == 2 && *(_DWORD *)(v33 + 4) == s_addr )
          {
            v6 = *(_DWORD *)(v33 + 28);
            goto LABEL_62;
          }
          v33 = *(_QWORD *)(v33 + 88);
        }
        while ( v33 );
        s_addr = 0;
      }
      else if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4LL) & 0x80) != 0 )
      {
        s_addr = 0;
      }
      else
      {
LABEL_83:
        enumerate_interfaces(0LL);
        v33 = *(_QWORD *)(dnsmasq_daemon_0 + 904LL);
        if ( v33 )
          goto LABEL_86;
        s_addr = 0;
      }
    }
  }
LABEL_62:
  v26 = dnsmasq_daemon_0;
  v27 = *(_DWORD *)(dnsmasq_daemon_0 + 1576LL) + 1;
  *(_DWORD *)(dnsmasq_daemon_0 + 1576LL) = v27;
  *(_DWORD *)(v26 + 1580) = v27;
  *(_QWORD *)(v26 + 1584) = &source_addr;
  if ( !(unsigned int)extract_request(v4, v9, *(_QWORD *)(v26 + 864), &type) )
  {
    v30 = 0;
LABEL_94:
    if ( find_pseudoheader(v4, v9, 0LL, &pheader, 0LL, 0LL) )
    {
      v34 = pheader;
      v35 = pheader[1] | (*pheader << 8);
      pheader += 4;
      v36 = v34[5] | (*pheader << 8);
      pheader = v34 + 6;
      v10 = (v36 >> 15) & 1;
      if ( *(unsigned __int16 *)(dnsmasq_daemon_0 + 768LL) > v35 )
        v37 = v35;
      else
        v37 = *(_WORD *)(dnsmasq_daemon_0 + 768LL);
      v38 = 1LL;
    }
    else
    {
      v38 = 0LL;
      v37 = 512;
    }
    if ( auth_dns )
    {
      v41 = answer_auth(v4, (char *)v4 + v37, v9, now, &source_addr, v30, (unsigned int)v10, v38);
      if ( v41 )
      {
        send_from(listen->fd, (*dnsmasq_daemon_0 & 0x8000002000LL) != 0, (char *)v4, v41, &source_addr, &dst_addr, v5);
        ++*(_DWORD *)(dnsmasq_daemon_0 + 880LL);
      }
    }
    else
    {
      if ( (v4->hb4 & 0x20) != 0 )
        v39 = 1;
      else
        v39 = v10;
      v40 = answer_request(v4, (char *)v4 + v37, v9, s_addr, v6, now, v39, (unsigned int)v10, v38);
      if ( v40 )
      {
        send_from(listen->fd, (*dnsmasq_daemon_0 & 0x8000002000LL) != 0, (char *)v4, v40, &source_addr, &dst_addr, v5);
        ++*(_DWORD *)(dnsmasq_daemon_0 + 872LL);
      }
      else if ( forward_query(listen->fd, &source_addr, &dst_addr, v5, v4, v9, now, 0uLL, v39, v10) )
      {
        ++*(_DWORD *)(dnsmasq_daemon_0 + 876LL);
      }
      else
      {
        ++*(_DWORD *)(dnsmasq_daemon_0 + 872LL);
      }
    }
    return;
  }
  v28 = "query";
  if ( auth_dns )
    v28 = "auth";
  v29 = querystr(v28, type);
  if ( listen->family == 2 )
    log_query(524424LL, *(_QWORD *)(dnsmasq_daemon_0 + 864LL), &source_addr.in6.sin6_flowinfo, v29);
  else
    log_query(524552LL, *(_QWORD *)(dnsmasq_daemon_0 + 864LL), &source_addr.in6.sin6_addr, v29);
  v30 = auth_dns;
  if ( auth_dns )
  {
    v30 = 0;
  }
  else if ( (*dnsmasq_daemon_0 & 0x40000) == 0 )
  {
    v31 = *(_QWORD *)(dnsmasq_daemon_0 + 144LL);
    if ( v31 )
    {
      while ( 1 )
      {
        v30 = in_zone(v31, *(_QWORD *)(dnsmasq_daemon_0 + 864LL), 0LL);
        if ( v30 )
          break;
        v31 = *(_QWORD *)(v31 + 32);
        if ( !v31 )
          goto LABEL_93;
      }
      v30 = 1;
      auth_dns = 1;
    }
  }
LABEL_93:
  if ( !(unsigned int)detect_loop(*(_QWORD *)(dnsmasq_daemon_0 + 864LL), type) )
    goto LABEL_94;
}
