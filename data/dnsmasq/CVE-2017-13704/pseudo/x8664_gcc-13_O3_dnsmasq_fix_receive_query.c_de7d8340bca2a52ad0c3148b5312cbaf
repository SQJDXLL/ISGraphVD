void __fastcall receive_query(listener *listen, time_t now)
{
  __int64 v3; // rax
  dns_header *v4; // r12
  unsigned int s_addr; // ebx
  int family; // ecx
  irec *iface; // rdx
  unsigned int v8; // r14d
  size_t v9; // rax
  int fd; // edi
  signed __int64 v11; // rbp
  int v12; // eax
  __int64 v13; // rdx
  __int64 v14; // rbp
  int v15; // eax
  const __m128i *v16; // rcx
  char *v17; // rsi
  unsigned __int64 v18; // rax
  unsigned __int64 v19; // rdx
  in_addr_t v20; // ecx
  unsigned int *v21; // rbx
  __int64 v22; // rdx
  char *msg_control; // rcx
  char *v24; // rsi
  unsigned __int64 v25; // rax
  unsigned __int64 v26; // rdx
  __int64 v27; // rsi
  __int64 v28; // rax
  int v29; // ecx
  __int64 v30; // rdx
  const char *v31; // rdi
  __int64 v32; // rcx
  int v33; // r10d
  __int64 v34; // rax
  __int64 v35; // rdx
  __int64 v36; // rbx
  int v37; // eax
  int v38; // r10d
  __int16 v39; // ax
  unsigned __int8 *v40; // rdx
  __int16 v41; // cx
  unsigned __int16 v42; // ax
  __int64 v43; // rsi
  __int64 v44; // rax
  char *v45; // rsi
  __int64 v46; // rdx
  size_t v47; // rcx
  size_t v48; // rax
  __int64 v49; // rdx
  __int64 v50; // rcx
  __int64 v51; // [rsp-10h] [rbp-160h]
  int have_pseudoheader; // [rsp+0h] [rbp-150h]
  in_addr_t v54; // [rsp+10h] [rbp-140h]
  unsigned int ad_reqd; // [rsp+14h] [rbp-13Ch]
  int ad_reqda; // [rsp+14h] [rbp-13Ch]
  unsigned int local_auth; // [rsp+18h] [rbp-138h]
  unsigned int local_autha; // [rsp+18h] [rbp-138h]
  int local_authc; // [rsp+18h] [rbp-138h]
  unsigned int local_authb; // [rsp+18h] [rbp-138h]
  ssize_t n; // [rsp+20h] [rbp-130h]
  unsigned __int16 type; // [rsp+2Ah] [rbp-126h] BYREF
  int auth_dns; // [rsp+2Ch] [rbp-124h] BYREF
  unsigned __int8 *t_cp; // [rsp+30h] [rbp-120h] BYREF
  msghdr msg; // [rsp+38h] [rbp-118h] BYREF
  all_addr dst_addr; // [rsp+78h] [rbp-D8h] BYREF
  iovec iov[1]; // [rsp+88h] [rbp-C8h] BYREF
  mysockaddr source_addr; // [rsp+98h] [rbp-B8h] BYREF
  union {cmsghdr align;char control6[40];char control[32];} control_u; // [rsp+B8h] [rbp-98h] BYREF
  ifreq ifr; // [rsp+E8h] [rbp-68h] BYREF
  unsigned __int64 v71; // [rsp+110h] [rbp-40h]

  v71 = __readfsqword(0x28u);
  v3 = dnsmasq_daemon_0;
  auth_dns = 0;
  v4 = *(dns_header **)(dnsmasq_daemon_0 + 848LL);
  s_addr = *dnsmasq_daemon_0 & 0x2000;
  if ( s_addr )
  {
    family = listen->family;
    iface = listen->iface;
    *(_QWORD *)(dnsmasq_daemon_0 + 944LL) = 0LL;
    dst_addr.addr.addr4.s_addr = 0;
    v54 = 0;
    v8 = family == 10;
    s_addr = 0;
    if ( iface )
    {
      s_addr = 0;
      auth_dns = iface->dns_auth;
      if ( family == 2 )
      {
        s_addr = iface->addr.in.sin_addr.s_addr;
        v20 = iface->netmask.s_addr;
        dst_addr.addr.addr4.s_addr = s_addr;
        v54 = v20;
      }
    }
  }
  else
  {
    dst_addr.addr.addr4.s_addr = 0;
    v8 = 1;
    *(_QWORD *)(dnsmasq_daemon_0 + 944LL) = 0LL;
    v54 = 0;
  }
  v9 = *(unsigned __int16 *)(v3 + 768);
  fd = listen->fd;
  iov[0].iov_base = v4;
  iov[0].iov_len = v9;
  msg.msg_control = &control_u;
  msg.msg_controllen = 40LL;
  msg.msg_flags = 0;
  msg.msg_name = &source_addr;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  msg.msg_iovlen = 1LL;
  v11 = recvmsg(fd, &msg, 0);
  if ( v11 <= 11 )
    return;
  ad_reqd = msg.msg_flags & 0x20;
  if ( (msg.msg_flags & 0x20) != 0 || (v4->hb3 & 0x80u) != 0 )
    return;
  memset(
    (void *)(v11 + *(_QWORD *)(dnsmasq_daemon_0 + 848LL)),
    0,
    *(unsigned __int16 *)(dnsmasq_daemon_0 + 768LL) - v11);
  v12 = listen->family;
  source_addr.sa.sa_family = v12;
  if ( v12 == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
    v13 = dnsmasq_daemon_0;
    if ( (*(_BYTE *)(dnsmasq_daemon_0 + 6LL) & 2) == 0 )
      goto LABEL_18;
  }
  else
  {
    if ( !source_addr.in.sin_port )
      return;
    v13 = dnsmasq_daemon_0;
    source_addr.in.sin_addr.s_addr = 0;
    if ( (*(_BYTE *)(dnsmasq_daemon_0 + 6LL) & 2) == 0 )
      goto LABEL_18;
    if ( v12 == 10 )
    {
      if ( *(_QWORD *)(dnsmasq_daemon_0 + 1568LL) )
      {
        n = v11;
        v14 = *(_QWORD *)(dnsmasq_daemon_0 + 1568LL);
        while ( (*(_BYTE *)(v14 + 16) & 2) == 0
             || !(unsigned int)is_same_net6(v14, &source_addr.in6.sin6_addr, *(unsigned int *)(v14 + 20)) )
        {
          v14 = *(_QWORD *)(v14 + 24);
          if ( !v14 )
            goto LABEL_40;
        }
        v11 = n;
        goto LABEL_18;
      }
LABEL_40:
      if ( !warned_2 )
      {
        my_syslog(4LL, "Ignoring query from non-local network");
        warned_2 = 1;
      }
      return;
    }
  }
  if ( !*(_QWORD *)(v13 + 1568) )
    goto LABEL_40;
  local_auth = s_addr;
  v21 = *(unsigned int **)(v13 + 1568);
  while ( 1 )
  {
    v22 = _byteswap_ulong(-1 << (32 - *((_BYTE *)v21 + 20)));
    if ( (v21[4] & 2) == 0 )
    {
      if ( (unsigned int)is_same_net(*v21, source_addr.in.sin_addr.s_addr, v22) )
        break;
    }
    v21 = (unsigned int *)*((_QWORD *)v21 + 3);
    if ( !v21 )
      goto LABEL_40;
  }
  s_addr = local_auth;
LABEL_18:
  if ( !v8 )
  {
    v28 = dnsmasq_daemon_0;
    goto LABEL_57;
  }
  if ( msg.msg_controllen > 0xF )
  {
    v15 = listen->family;
    if ( v15 == 2 )
    {
      msg_control = (char *)msg.msg_control;
      v8 = 0;
      if ( msg.msg_control )
      {
        v24 = (char *)msg.msg_control + msg.msg_controllen;
        if ( *((_QWORD *)msg.msg_control + 1) == 0x800000000LL )
        {
LABEL_44:
          s_addr = *((_DWORD *)msg_control + 5);
          v8 = *((_DWORD *)msg_control + 4);
          dst_addr.addr.addr4.s_addr = s_addr;
        }
        while ( 1 )
        {
          v25 = *(_QWORD *)msg_control;
          v26 = (-*(_DWORD *)msg_control & 7) + 16LL;
          if ( *(_QWORD *)msg_control <= 0xFuLL || v24 - msg_control < v26 || v24 - msg_control - v26 < v25 )
            break;
          msg_control += (v25 + 7) & 0xFFFFFFFFFFFFFFF8LL;
          if ( *((_QWORD *)msg_control + 1) == 0x800000000LL )
            goto LABEL_44;
        }
      }
    }
    else if ( v15 == 10 && (v16 = (const __m128i *)msg.msg_control) != 0LL )
    {
      v8 = 0;
      v17 = (char *)msg.msg_control + msg.msg_controllen;
      if ( *((_DWORD *)msg.msg_control + 2) == 41 )
        goto LABEL_28;
      while ( 1 )
      {
        v18 = v16->m128i_i64[0];
        v19 = (-v16->m128i_i32[0] & 7) + 16LL;
        if ( v16->m128i_i64[0] <= 0xFuLL || v17 - (char *)v16 < v19 || v17 - (char *)v16 - v19 < v18 )
          break;
        v16 = (const __m128i *)((char *)v16 + ((v18 + 7) & 0xFFFFFFFFFFFFFFF8LL));
        if ( v16->m128i_i32[2] == 41 )
        {
LABEL_28:
          if ( v16->m128i_i32[3] == *(_DWORD *)(dnsmasq_daemon_0 + 1560LL) )
          {
            v8 = v16[2].m128i_u32[0];
            dst_addr = (all_addr)_mm_loadu_si128(v16 + 1);
          }
        }
      }
    }
    else
    {
      v8 = 0;
    }
    if ( (unsigned int)indextoname((unsigned int)listen->fd, v8, &ifr) )
    {
      if ( (unsigned int)iface_check((unsigned int)listen->family, &dst_addr, &ifr, &auth_dns) )
        goto LABEL_56;
      if ( *(char *)(dnsmasq_daemon_0 + 4LL) >= 0 )
        enumerate_interfaces(0LL);
      if ( (unsigned int)loopback_exception((unsigned int)listen->fd, (unsigned int)listen->family, &dst_addr, &ifr)
        || (unsigned int)label_exception(v8, (unsigned int)listen->family, &dst_addr) )
      {
LABEL_56:
        v27 = dnsmasq_daemon_0;
        v28 = dnsmasq_daemon_0;
        if ( listen->family == 2 && (*dnsmasq_daemon_0 & 0x40000) != 0 )
        {
          v49 = *(_QWORD *)(dnsmasq_daemon_0 + 904LL);
          if ( v49 )
          {
            v50 = *(_QWORD *)(dnsmasq_daemon_0 + 904LL);
            while ( *(_WORD *)v50 != 2 || *(_DWORD *)(v50 + 4) != s_addr )
            {
              v50 = *(_QWORD *)(v50 + 88);
              if ( !v50 )
              {
                if ( *(char *)(dnsmasq_daemon_0 + 4LL) < 0 )
                  break;
                goto LABEL_104;
              }
            }
LABEL_96:
            while ( *(_WORD *)v49 != 2 || *(_DWORD *)(v49 + 4) != s_addr )
            {
              v49 = *(_QWORD *)(v49 + 88);
              if ( !v49 )
                goto LABEL_106;
            }
            v54 = *(_DWORD *)(v49 + 28);
          }
          else
          {
            if ( *(char *)(dnsmasq_daemon_0 + 4LL) >= 0 )
            {
LABEL_104:
              enumerate_interfaces(0LL);
              v27 = dnsmasq_daemon_0;
              v49 = *(_QWORD *)(dnsmasq_daemon_0 + 904LL);
              v28 = dnsmasq_daemon_0;
              if ( v49 )
                goto LABEL_96;
            }
            v28 = v27;
LABEL_106:
            s_addr = 0;
          }
        }
LABEL_57:
        v29 = *(_DWORD *)(v28 + 1576);
        *(_QWORD *)(v28 + 1584) = &source_addr;
        v30 = *(_QWORD *)(v28 + 864);
        *(_QWORD *)(v28 + 1576) = _mm_shuffle_epi32(_mm_cvtsi32_si128(v29 + 1), 224).m128i_u64[0];
        if ( (unsigned int)extract_request(v4, v11, v30, &type) )
        {
          v31 = "query";
          if ( auth_dns )
            v31 = "auth";
          v32 = querystr(v31, type);
          if ( listen->family == 2 )
            log_query(524424LL, *(_QWORD *)(dnsmasq_daemon_0 + 864LL), &source_addr.in6.sin6_flowinfo, v32);
          else
            log_query(524552LL, *(_QWORD *)(dnsmasq_daemon_0 + 864LL), &source_addr.in6.sin6_addr, v32);
          v33 = auth_dns;
          v34 = dnsmasq_daemon_0;
          if ( auth_dns )
          {
            v33 = 0;
          }
          else if ( (*dnsmasq_daemon_0 & 0x40000) == 0 && *(_QWORD *)(dnsmasq_daemon_0 + 144LL) )
          {
            local_autha = s_addr;
            v35 = dnsmasq_daemon_0;
            v36 = *(_QWORD *)(dnsmasq_daemon_0 + 144LL);
            do
            {
              if ( (unsigned int)in_zone(v36, *(_QWORD *)(v35 + 864), 0LL) )
              {
                auth_dns = 1;
                s_addr = local_autha;
                v33 = 1;
                v34 = dnsmasq_daemon_0;
                goto LABEL_69;
              }
              v36 = *(_QWORD *)(v36 + 32);
              v35 = dnsmasq_daemon_0;
            }
            while ( v36 );
            v33 = 0;
            s_addr = local_autha;
            v34 = dnsmasq_daemon_0;
          }
LABEL_69:
          local_authc = v33;
          v37 = detect_loop(*(_QWORD *)(v34 + 864), type);
          v38 = local_authc;
          if ( v37 )
            return;
        }
        else
        {
          v38 = 0;
        }
        local_authb = v38;
        if ( find_pseudoheader(v4, v11, 0LL, &t_cp, 0LL, 0LL) )
        {
          v39 = *(_WORD *)t_cp;
          v40 = t_cp + 6;
          t_cp += 4;
          v41 = *((_WORD *)v40 - 1);
          t_cp = v40;
          v42 = __ROL2__(v39, 8);
          ad_reqd = (unsigned int)(__int16)__ROL2__(v41, 8) >> 31;
          LOWORD(v43) = *(_WORD *)(dnsmasq_daemon_0 + 768LL);
          if ( v42 <= (unsigned __int16)v43 )
            LOWORD(v43) = v42;
          v44 = 1LL;
          v43 = (unsigned __int16)v43;
        }
        else
        {
          v44 = 0LL;
          v43 = 512LL;
        }
        v45 = (char *)v4 + v43;
        if ( auth_dns )
        {
          v48 = answer_auth(v4, v45, v11, now, &source_addr, local_authb, ad_reqd, v44);
          if ( v48 )
          {
            send_from(
              listen->fd,
              (*dnsmasq_daemon_0 & 0x8000002000LL) != 0,
              (char *)v4,
              v48,
              &source_addr,
              &dst_addr,
              v8);
            ++*(_DWORD *)(dnsmasq_daemon_0 + 880LL);
          }
        }
        else
        {
          v46 = 1LL;
          if ( (v4->hb4 & 0x20) == 0 )
            v46 = ad_reqd;
          v51 = ad_reqd;
          ad_reqda = v46;
          v47 = answer_request(v4, v45, v11, s_addr, v54, now, v46, v51, v44);
          if ( v47 )
          {
            send_from(
              listen->fd,
              (*dnsmasq_daemon_0 & 0x8000002000LL) != 0,
              (char *)v4,
              v47,
              &source_addr,
              &dst_addr,
              v8);
            ++*(_DWORD *)(dnsmasq_daemon_0 + 872LL);
          }
          else if ( forward_query(
                      listen->fd,
                      &source_addr,
                      &dst_addr,
                      v8,
                      v4,
                      v11,
                      now,
                      0LL,
                      ad_reqda,
                      have_pseudoheader) )
          {
            ++*(_DWORD *)(dnsmasq_daemon_0 + 876LL);
          }
          else
          {
            ++*(_DWORD *)(dnsmasq_daemon_0 + 872LL);
          }
        }
      }
    }
  }
}
