void __fastcall receive_query(listener *listen, time_t now)
{
  int v2; // $v0
  int s_addr; // $s1
  dns_header *v4; // $s5
  unsigned int iface; // $s6
  int family; // $a0
  irec *v8; // $v1
  int fd; // $a0
  signed int v10; // $s2
  int v11; // $s7
  int v12; // $a1
  int v13; // $v0
  int v14; // $v1
  int v15; // $a0
  int v16; // $fp
  in6_addr *p_sin6_addr; // $a1
  unsigned int (*v18)(time_t, all_addr **, unsigned int, char *, int *, char **, int *); // $s0
  int v19; // $v0
  int v20; // $v1
  unsigned int *v21; // $a0
  char *v22; // $a2
  unsigned int v23; // $v0
  unsigned int v24; // $v1
  _BOOL4 v25; // $a1
  unsigned int v26; // $v0
  unsigned int v27; // $a1
  unsigned int v28; // $v1
  uint32_t v29; // $v0
  _DWORD *v30; // $fp
  int v31; // $v0
  unsigned int *msg_control; // $a0
  char *v33; // $a2
  unsigned int v34; // $v0
  unsigned int v35; // $v0
  unsigned int v36; // $v1
  _BOOL4 v37; // $a1
  unsigned int v38; // $v0
  _DWORD *v39; // $v0
  int v40; // $v1
  int v41; // $a2
  int *v42; // $a0
  int v43; // $a3
  int v44; // $a1
  int v45; // $v0
  int v46; // $a0
  int v47; // $a1
  unsigned int v48; // $v0
  unsigned int v49; // $a1
  unsigned int v50; // $s7
  unsigned int v51; // $v0
  char *v52; // $a1
  int v53; // $v1
  size_t v54; // $a3
  int v55; // $a1
  size_t v56; // $a3
  int v57; // $a1
  int v58; // $v1
  int v59; // $a0
  int v60; // [sp+24h] [-BCh]
  int ad_reqdb; // [sp+3Ch] [-A4h]
  int ad_reqd; // [sp+3Ch] [-A4h]
  int ad_reqda; // [sp+3Ch] [-A4h]
  unsigned __int16 type; // [sp+42h] [-9Eh] BYREF
  unsigned __int8 *t_cp; // [sp+44h] [-9Ch] BYREF
  int auth_dns; // [sp+48h] [-98h] BYREF
  msghdr msg; // [sp+4Ch] [-94h] BYREF
  iovec iov[1]; // [sp+68h] [-78h] BYREF
  all_addr dst_addr; // [sp+70h] [-70h] BYREF
  mysockaddr source_addr; // [sp+80h] [-60h] BYREF
  union {cmsghdr align;char control6[32];char control[24];} control_u; // [sp+9Ch] [-44h] BYREF
  ifreq ifr; // [sp+BCh] [-24h] BYREF

  v2 = dnsmasq_daemon_0;
  s_addr = *dnsmasq_daemon_0 & 0x2000;
  v4 = *(dns_header **)(dnsmasq_daemon_0 + 476);
  auth_dns = 0;
  iface = 1;
  if ( s_addr )
  {
    family = listen->family;
    v8 = listen->iface;
    iface = family == 0xA;
    *(_DWORD *)(dnsmasq_daemon_0 + 528) = 0;
    dst_addr.addr.addr4.s_addr = 0;
    if ( v8 && (auth_dns = v8->dns_auth, family == 2) )
    {
      s_addr = v8->addr.in.sin_addr.s_addr;
      dst_addr.addr.addr4.s_addr = s_addr;
    }
    else
    {
      s_addr = 0;
    }
  }
  else
  {
    *(_DWORD *)(dnsmasq_daemon_0 + 528) = 0;
    dst_addr.addr.addr4.s_addr = 0;
  }
  iov[0].iov_len = *(unsigned __int16 *)(v2 + 432);
  msg.msg_control = &control_u;
  msg.msg_controllen = 32;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  fd = listen->fd;
  iov[0].iov_base = v4;
  msg.msg_flags = 0;
  msg.msg_name = &source_addr;
  msg.msg_iovlen = 1;
  v10 = recvmsg(fd, &msg, 0);
  if ( v10 < 12 )
    return;
  v11 = msg.msg_flags & 0x20;
  if ( (msg.msg_flags & 0x20) != 0 || (v4->hb3 & 0x80u) != 0 )
    return;
  memset((void *)(*(_DWORD *)(dnsmasq_daemon_0 + 476) + v10), 0, *(unsigned __int16 *)(dnsmasq_daemon_0 + 432) - v10);
  v13 = listen->family;
  source_addr.sa.sa_family = v13;
  if ( v13 == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
    v14 = dnsmasq_daemon_0;
    if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x20000) == 0 )
      goto LABEL_18;
  }
  else
  {
    if ( !source_addr.in.sin_port )
      return;
    v14 = dnsmasq_daemon_0;
    v15 = *(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x20000;
    source_addr.in.sin_addr.s_addr = 0;
    if ( !v15 )
      goto LABEL_18;
    v12 = 10;
    v16 = *(_DWORD *)(dnsmasq_daemon_0 + 1136);
    if ( v13 == 10 )
    {
      p_sin6_addr = &source_addr.in6.sin6_addr;
      if ( !v16 )
      {
        v18 = search_servers;
        goto LABEL_93;
      }
      while ( 1 )
      {
        if ( (*(_DWORD *)(v16 + 16) & 2) != 0 )
        {
          ad_reqdb = (int)p_sin6_addr;
          v19 = is_same_net6(v16);
          p_sin6_addr = (in6_addr *)ad_reqdb;
          if ( v19 )
            goto LABEL_18;
        }
        v16 = *(_DWORD *)(v16 + 24);
        if ( !v16 )
          goto LABEL_92;
      }
    }
  }
  v30 = *(_DWORD **)(v14 + 1136);
  if ( !v30 )
  {
    v18 = search_servers;
LABEL_93:
    if ( !*(_DWORD *)((char *)v18 + (__int16)&warned_2) )
    {
      my_syslog(4, "Ignoring query from non-local network");
      *(_DWORD *)((char *)v18 + (__int16)&warned_2) = 1;
    }
    return;
  }
  while ( 1 )
  {
    v31 = _bswapsi2(-1 << (32 - v30[5]), v12);
    if ( (v30[4] & 2) == 0 )
    {
      if ( is_same_net(*v30, source_addr.in.sin_addr.s_addr, v31) )
        break;
    }
    v30 = (_DWORD *)v30[6];
    if ( !v30 )
    {
LABEL_92:
      v18 = (unsigned int (*)(time_t, all_addr **, unsigned int, char *, int *, char **, int *))MEMORY[0xB978];
      goto LABEL_93;
    }
  }
LABEL_18:
  if ( !iface )
  {
    v39 = (_DWORD *)dnsmasq_daemon_0;
    goto LABEL_57;
  }
  if ( msg.msg_controllen >= 0xC )
  {
    v20 = listen->family;
    if ( v20 == 2 )
    {
      msg_control = (unsigned int *)msg.msg_control;
      iface = 0;
      if ( msg.msg_control )
      {
        v33 = (char *)msg.msg_control + msg.msg_controllen;
        if ( *((_DWORD *)msg.msg_control + 1) )
          goto LABEL_45;
        v34 = *((_DWORD *)msg.msg_control + 2);
LABEL_43:
        if ( v34 == 8 )
        {
          s_addr = msg_control[4];
          iface = msg_control[3];
          dst_addr.addr.addr4.s_addr = s_addr;
        }
LABEL_45:
        while ( 1 )
        {
          v35 = *msg_control;
          v36 = (-*msg_control & 3) + 12;
          if ( *msg_control < 0xC )
            break;
          if ( v33 - (char *)msg_control < v36 )
            break;
          v37 = v33 - (char *)msg_control - v36 < v35;
          v38 = v35 + 3;
          if ( v37 )
            break;
          msg_control = (unsigned int *)((char *)msg_control + (v38 & 0xFFFFFFFC));
          if ( !msg_control[1] )
          {
            v34 = msg_control[2];
            goto LABEL_43;
          }
        }
      }
    }
    else
    {
      v21 = (unsigned int *)msg.msg_control;
      if ( v20 == 10 )
      {
        iface = 0;
        if ( msg.msg_control )
        {
          v22 = (char *)msg.msg_control + msg.msg_controllen;
          if ( *((_DWORD *)msg.msg_control + 1) == 41 )
            goto LABEL_28;
          while ( 1 )
          {
            v23 = *v21;
            v24 = (-*v21 & 3) + 12;
            if ( *v21 < 0xC )
              break;
            if ( v22 - (char *)v21 < v24 )
              break;
            v25 = v22 - (char *)v21 - v24 < v23;
            v26 = v23 + 3;
            if ( v25 )
              break;
            v21 = (unsigned int *)((char *)v21 + (v26 & 0xFFFFFFFC));
            if ( v21[1] == 41 )
            {
LABEL_28:
              if ( v21[2] == *(_DWORD *)(dnsmasq_daemon_0 + 1132) )
              {
                v27 = v21[4];
                v28 = v21[5];
                v29 = v21[6];
                iface = v21[7];
                dst_addr.addr.addr4.s_addr = v21[3];
                *(_QWORD *)(&dst_addr.addr.dnssec + 1) = __PAIR64__(v28, v27);
                dst_addr.addr.addr6.__in6_u.__u6_addr32[3] = v29;
              }
            }
          }
        }
      }
      else
      {
        iface = 0;
      }
    }
    if ( indextoname(listen->fd, iface) )
    {
      if ( iface_check(listen->family, &dst_addr, &ifr, &auth_dns) )
        goto LABEL_56;
      if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) == 0 )
        enumerate_interfaces(0);
      if ( loopback_exception(listen->fd, listen->family, &dst_addr, &ifr)
        || label_exception(iface, listen->family, &dst_addr) )
      {
LABEL_56:
        v39 = (_DWORD *)dnsmasq_daemon_0;
        if ( listen->family == 2 && (*dnsmasq_daemon_0 & 0x40000) != 0 )
        {
          v58 = *(_DWORD *)(dnsmasq_daemon_0 + 508);
          v59 = v58;
          if ( v58 )
          {
            while ( *(_WORD *)v59 != 2 || *(_DWORD *)(v59 + 4) != s_addr )
            {
              v59 = *(_DWORD *)(v59 + 80);
              if ( !v59 )
              {
                if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) != 0 )
                  break;
                goto LABEL_114;
              }
            }
LABEL_106:
            while ( *(_WORD *)v58 != 2 || *(_DWORD *)(v58 + 4) != s_addr )
            {
              v58 = *(_DWORD *)(v58 + 80);
              if ( !v58 )
                goto LABEL_115;
            }
          }
          else if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) != 0 )
          {
            s_addr = 0;
          }
          else
          {
LABEL_114:
            enumerate_interfaces(0);
            v39 = (_DWORD *)dnsmasq_daemon_0;
            v58 = *(_DWORD *)(dnsmasq_daemon_0 + 508);
            if ( v58 )
              goto LABEL_106;
LABEL_115:
            s_addr = 0;
          }
        }
LABEL_57:
        v40 = v39[285] + 1;
        v39[285] = v40;
        v39[286] = v40;
        v41 = v39[121];
        v39[287] = &source_addr;
        if ( !extract_request(v4, v10, v41, &type) )
        {
LABEL_71:
          if ( find_pseudoheader(v4, v10, 0, &t_cp) )
          {
            v48 = (t_cp[1] << 8) | *t_cp;
            v49 = *(unsigned __int16 *)(dnsmasq_daemon_0 + 432);
            v50 = t_cp[4];
            v51 = (unsigned __int16)(((_WORD)v48 << 8) | (v48 >> 8));
            t_cp += 6;
            if ( v51 < v49 )
              v49 = v51;
            v11 = v50 >> 7;
          }
          else
          {
            v49 = 512;
          }
          v52 = (char *)v4 + v49;
          if ( auth_dns )
          {
            v56 = answer_auth(v4, v52, v10, now);
            if ( v56 )
            {
              if ( (*dnsmasq_daemon_0 & 0x2000) != 0 )
                v57 = 1;
              else
                v57 = (*(_DWORD *)(dnsmasq_daemon_0 + 4) >> 7) & 1;
              send_from(listen->fd, v57, (char *)v4, v56, &source_addr, &dst_addr, iface);
              ++*(_DWORD *)(dnsmasq_daemon_0 + 496);
            }
          }
          else
          {
            v53 = 1;
            if ( (v4->hb4 & 0x20) == 0 )
              v53 = v11;
            ad_reqda = v53;
            v54 = answer_request(v4, v52, v10, s_addr);
            if ( v54 )
            {
              if ( (*dnsmasq_daemon_0 & 0x2000) != 0 )
                v55 = 1;
              else
                v55 = (*(_DWORD *)(dnsmasq_daemon_0 + 4) >> 7) & 1;
              send_from(listen->fd, v55, (char *)v4, v54, &source_addr, &dst_addr, iface);
              ++*(_DWORD *)(dnsmasq_daemon_0 + 488);
            }
            else if ( forward_query(listen->fd, &source_addr, &dst_addr, iface, v4, v10, now, 0u, ad_reqda, v60) )
            {
              ++*(_DWORD *)(dnsmasq_daemon_0 + 492);
            }
            else
            {
              ++*(_DWORD *)(dnsmasq_daemon_0 + 488);
            }
          }
          return;
        }
        if ( auth_dns )
          v42 = (int *)"auth";
        else
          v42 = &_LC5;
        v43 = querystr(v42, type);
        v44 = *(_DWORD *)(dnsmasq_daemon_0 + 484);
        if ( listen->family == 2 )
          log_query(524424, v44, &source_addr.in6.sin6_flowinfo, v43);
        else
          log_query(524552, v44, &source_addr.in6.sin6_addr, v43);
        v45 = dnsmasq_daemon_0;
        if ( !auth_dns && (*dnsmasq_daemon_0 & 0x40000) == 0 )
        {
          v46 = *(_DWORD *)(dnsmasq_daemon_0 + 80);
          v47 = type;
          if ( !v46 )
          {
LABEL_70:
            if ( detect_loop(*(_DWORD *)(v45 + 484), v47) )
              return;
            goto LABEL_71;
          }
          while ( 1 )
          {
            ad_reqd = v46;
            if ( in_zone(v46, *(_DWORD *)(v45 + 484), 0) )
              break;
            v46 = *(_DWORD *)(ad_reqd + 16);
            v45 = dnsmasq_daemon_0;
            if ( !v46 )
              goto LABEL_69;
          }
          v45 = dnsmasq_daemon_0;
          auth_dns = 1;
        }
LABEL_69:
        v47 = type;
        goto LABEL_70;
      }
    }
  }
}
