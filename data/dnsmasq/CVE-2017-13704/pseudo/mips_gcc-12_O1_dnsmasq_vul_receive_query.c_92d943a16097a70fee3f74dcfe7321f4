void __fastcall receive_query(listener *listen, time_t now)
{
  int v3; // $v0
  dns_header *v4; // $s5
  unsigned int iface; // $s4
  int s_addr; // $s1
  irec *v7; // $v1
  signed int v8; // $s2
  int do_bit; // $s6
  int family; // $v0
  int v11; // $a0
  _DWORD *v12; // $s3
  int i; // $v0
  _DWORD *v14; // $s3
  unsigned int (*v15)(time_t, all_addr **, unsigned int, char *, int *, char **, int *); // $v0
  int v16; // $v1
  char *msg_control; // $a3
  unsigned int *v18; // $a0
  unsigned int *v19; // $a0
  unsigned int v20; // $v0
  unsigned int v21; // $v1
  _BOOL4 v22; // $a1
  unsigned int v23; // $v0
  uint32_t v24; // $a1
  uint32_t v25; // $v1
  uint32_t v26; // $v0
  unsigned int v27; // $v0
  unsigned int v28; // $v1
  _BOOL4 v29; // $a1
  unsigned int v30; // $v0
  _DWORD *v31; // $v0
  int v32; // $v1
  const char *v33; // $a0
  int v34; // $a3
  int v35; // $s3
  int v36; // $v0
  unsigned __int16 *v37; // $v0
  int j; // $v1
  int v39; // $v0
  unsigned int v40; // $v1
  unsigned int v41; // $s6
  int v42; // $a1
  int ad_reqd; // $s3
  size_t v44; // $a3
  int v45; // $a1
  size_t v46; // $a3
  int v47; // $a1
  unsigned __int16 type; // [sp+3Ah] [-9Eh] BYREF
  unsigned __int8 *t_cp; // [sp+3Ch] [-9Ch] BYREF
  int auth_dns; // [sp+40h] [-98h] BYREF
  msghdr msg; // [sp+44h] [-94h] BYREF
  iovec iov[1]; // [sp+60h] [-78h] BYREF
  all_addr dst_addr; // [sp+68h] [-70h] BYREF
  mysockaddr source_addr; // [sp+78h] [-60h] BYREF
  union {cmsghdr align;char control6[32];char control[24];} control_u; // [sp+94h] [-44h] BYREF
  ifreq ifr; // [sp+B4h] [-24h] BYREF

  v3 = dnsmasq_daemon_0;
  v4 = *(dns_header **)(dnsmasq_daemon_0 + 476);
  auth_dns = 0;
  iface = (*dnsmasq_daemon_0 & 0x2000) == 0 || listen->family == 0xA;
  *(_DWORD *)(dnsmasq_daemon_0 + 528) = 0;
  dst_addr.addr.addr4.s_addr = 0;
  s_addr = *(_DWORD *)v3 & 0x2000;
  if ( s_addr )
  {
    v7 = listen->iface;
    s_addr = 0;
    if ( v7 )
    {
      auth_dns = v7->dns_auth;
      if ( listen->family == 2 )
      {
        s_addr = v7->addr.in.sin_addr.s_addr;
        dst_addr.addr.addr4.s_addr = s_addr;
      }
    }
  }
  iov[0].iov_base = v4;
  iov[0].iov_len = *(unsigned __int16 *)(v3 + 432);
  msg.msg_control = &control_u;
  msg.msg_controllen = 32;
  msg.msg_flags = 0;
  msg.msg_name = &source_addr;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  msg.msg_iovlen = 1;
  v8 = recvmsg(listen->fd, &msg, 0);
  if ( v8 < 12 )
    return;
  do_bit = msg.msg_flags & 0x20;
  if ( (msg.msg_flags & 0x20) != 0 || (v4->hb3 & 0x80u) != 0 )
    return;
  family = listen->family;
  source_addr.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
    v11 = dnsmasq_daemon_0;
    if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x20000) == 0 )
      goto LABEL_29;
    goto LABEL_19;
  }
  if ( !source_addr.in.sin_port )
    return;
  source_addr.in.sin_addr.s_addr = 0;
  v11 = dnsmasq_daemon_0;
  if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x20000) == 0 )
    goto LABEL_29;
  if ( family != 10 )
  {
LABEL_19:
    v14 = *(_DWORD **)(v11 + 1136);
    v15 = search_servers;
    if ( v14 )
    {
      while ( (v14[4] & 2) != 0 || !is_same_net(*v14, source_addr.in.sin_addr.s_addr, -1 << (32 - v14[5])) )
      {
        v14 = (_DWORD *)v14[6];
        v15 = (unsigned int (*)(time_t, all_addr **, unsigned int, char *, int *, char **, int *))MEMORY[0xBB54];
        if ( !v14 )
          goto LABEL_36;
      }
      goto LABEL_29;
    }
LABEL_36:
    if ( !*(_DWORD *)((char *)v15 + (__int16)&warned_2) )
    {
      my_syslog(4, "Ignoring query from non-local network");
      warned_2 = 1;
    }
    return;
  }
  v12 = *(_DWORD **)(dnsmasq_daemon_0 + 1136);
  if ( !v12 )
  {
    v15 = (unsigned int (*)(time_t, all_addr **, unsigned int, char *, int *, char **, int *))MEMORY[0xBB54];
    goto LABEL_36;
  }
  for ( i = v12[4]; (i & 2) == 0 || !is_same_net6(v12, &source_addr.in6.sin6_addr, v12[5]); i = v12[4] )
  {
    v12 = (_DWORD *)v12[6];
    v15 = (unsigned int (*)(time_t, all_addr **, unsigned int, char *, int *, char **, int *))MEMORY[0xBB54];
    if ( !v12 )
      goto LABEL_36;
  }
LABEL_29:
  if ( iface )
  {
    if ( msg.msg_controllen < 0xC )
      return;
    v16 = listen->family;
    if ( v16 == 2 )
    {
      msg_control = (char *)msg.msg_control;
      v19 = (unsigned int *)msg.msg_control;
      if ( msg.msg_control )
      {
        iface = do_bit;
        msg_control = (char *)msg.msg_control + msg.msg_controllen;
        while ( 1 )
        {
          if ( !v19[1] && v19[2] == 8 )
          {
            s_addr = v19[4];
            dst_addr.addr.addr4.s_addr = s_addr;
            iface = v19[3];
          }
          v20 = *v19;
          v21 = (-*v19 & 3) + 12;
          if ( *v19 < 0xC )
            break;
          if ( msg_control - (char *)v19 < v21 )
            break;
          v22 = msg_control - (char *)v19 - v21 < v20;
          v23 = v20 + 3;
          if ( v22 )
            break;
          v19 = (unsigned int *)((char *)v19 + (v23 & 0xFFFFFFFC));
        }
      }
      else
      {
        iface = do_bit;
      }
    }
    else
    {
      msg_control = (char *)msg.msg_control;
      if ( v16 == 10 )
      {
        if ( msg.msg_control )
        {
          v18 = (unsigned int *)msg.msg_control;
          iface = do_bit;
          msg_control = (char *)msg.msg_control + msg.msg_controllen;
          while ( 1 )
          {
            if ( v18[1] == 41 && v18[2] == *(_DWORD *)(dnsmasq_daemon_0 + 1132) )
            {
              v24 = v18[4];
              v25 = v18[5];
              v26 = v18[6];
              dst_addr.addr.addr4.s_addr = v18[3];
              dst_addr.addr.addr6.__in6_u.__u6_addr32[1] = v24;
              dst_addr.addr.addr6.__in6_u.__u6_addr32[2] = v25;
              dst_addr.addr.addr6.__in6_u.__u6_addr32[3] = v26;
              iface = v18[7];
            }
            v27 = *v18;
            v28 = (-*v18 & 3) + 12;
            if ( *v18 < 0xC )
              break;
            if ( msg_control - (char *)v18 < v28 )
              break;
            v29 = msg_control - (char *)v18 - v28 < v27;
            v30 = v27 + 3;
            if ( v29 )
              break;
            v18 = (unsigned int *)((char *)v18 + (v30 & 0xFFFFFFFC));
          }
        }
        else
        {
          iface = do_bit;
        }
      }
      else
      {
        iface = do_bit;
      }
    }
    if ( !indextoname(listen->fd, iface, &ifr, msg_control) )
      return;
    if ( !iface_check(listen->family, &dst_addr, &ifr, &auth_dns) )
    {
      if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) == 0 )
        enumerate_interfaces(0);
      if ( !loopback_exception(listen->fd, listen->family, &dst_addr, &ifr)
        && !label_exception(iface, listen->family, &dst_addr) )
      {
        return;
      }
    }
    if ( listen->family == 2 && (*dnsmasq_daemon_0 & 0x40000) != 0 )
    {
      v37 = *(unsigned __int16 **)(dnsmasq_daemon_0 + 508);
      if ( v37 )
      {
        for ( j = *v37; j != 2 || *((_DWORD *)v37 + 1) != s_addr; j = *v37 )
        {
          v37 = (unsigned __int16 *)*((_DWORD *)v37 + 20);
          if ( !v37 )
          {
            if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) != 0 )
            {
              v39 = *(_DWORD *)(dnsmasq_daemon_0 + 508);
              goto LABEL_88;
            }
            goto LABEL_85;
          }
        }
        v39 = *(_DWORD *)(dnsmasq_daemon_0 + 508);
LABEL_88:
        while ( *(_WORD *)v39 != 2 || *(_DWORD *)(v39 + 4) != s_addr )
        {
          v39 = *(_DWORD *)(v39 + 80);
          if ( !v39 )
          {
            s_addr = 0;
            break;
          }
        }
      }
      else if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) != 0 )
      {
        s_addr = 0;
      }
      else
      {
LABEL_85:
        enumerate_interfaces(0);
        v39 = *(_DWORD *)(dnsmasq_daemon_0 + 508);
        if ( v39 )
          goto LABEL_88;
        s_addr = 0;
      }
    }
  }
  v31 = (_DWORD *)dnsmasq_daemon_0;
  v32 = *(_DWORD *)(dnsmasq_daemon_0 + 1140) + 1;
  *(_DWORD *)(dnsmasq_daemon_0 + 1140) = v32;
  v31[286] = v32;
  v31[287] = &source_addr;
  if ( !extract_request(v4, v8, v31[121], &type) )
    goto LABEL_125;
  if ( auth_dns )
    v33 = "auth";
  else
    v33 = "query";
  v34 = querystr(v33, type);
  if ( listen->family == 2 )
    log_query(524424, *(_DWORD *)(dnsmasq_daemon_0 + 484), &source_addr.in6.sin6_flowinfo, v34);
  else
    log_query(524552, *(_DWORD *)(dnsmasq_daemon_0 + 484), &source_addr.in6.sin6_addr, v34);
  if ( !auth_dns && (*dnsmasq_daemon_0 & 0x40000) == 0 )
  {
    v35 = *(_DWORD *)(dnsmasq_daemon_0 + 80);
    if ( v35 )
    {
      while ( !in_zone(v35, *(_DWORD *)(dnsmasq_daemon_0 + 484), 0) )
      {
        v35 = *(_DWORD *)(v35 + 16);
        if ( !v35 )
        {
          v36 = dnsmasq_daemon_0;
          goto LABEL_96;
        }
      }
      auth_dns = 1;
    }
  }
  v36 = dnsmasq_daemon_0;
LABEL_96:
  if ( !detect_loop(*(_DWORD *)(v36 + 484), type) )
  {
LABEL_125:
    if ( find_pseudoheader(v4, v8, 0, &t_cp) )
    {
      v40 = (*t_cp << 8) | t_cp[1];
      v41 = t_cp[4];
      t_cp += 6;
      LOWORD(v42) = *(_WORD *)(dnsmasq_daemon_0 + 432);
      do_bit = v41 >> 7;
      if ( v40 < (unsigned __int16)v42 )
        LOWORD(v42) = v40;
      v42 = (unsigned __int16)v42;
    }
    else
    {
      v42 = 512;
    }
    ad_reqd = 1;
    if ( auth_dns )
    {
      v46 = answer_auth(v4, (char *)v4 + v42, v8, now);
      if ( v46 )
      {
        if ( (*dnsmasq_daemon_0 & 0x2000) != 0 )
          v47 = 1;
        else
          v47 = (*(_DWORD *)(dnsmasq_daemon_0 + 4) >> 7) & 1;
        send_from(listen->fd, v47, (char *)v4, v46, &source_addr, &dst_addr, iface);
        ++*(_DWORD *)(dnsmasq_daemon_0 + 496);
      }
    }
    else
    {
      if ( (v4->hb4 & 0x20) == 0 )
        ad_reqd = do_bit;
      v44 = answer_request(v4, (char *)v4 + v42, v8, s_addr);
      if ( v44 )
      {
        if ( (*dnsmasq_daemon_0 & 0x2000) != 0 )
          v45 = 1;
        else
          v45 = (*(_DWORD *)(dnsmasq_daemon_0 + 4) >> 7) & 1;
        send_from(listen->fd, v45, (char *)v4, v44, &source_addr, &dst_addr, iface);
        ++*(_DWORD *)(dnsmasq_daemon_0 + 488);
      }
      else if ( forward_query(listen->fd, &source_addr, &dst_addr, iface, v4, v8, now, 0u, ad_reqd, do_bit) )
      {
        ++*(_DWORD *)(dnsmasq_daemon_0 + 492);
      }
      else
      {
        ++*(_DWORD *)(dnsmasq_daemon_0 + 488);
      }
    }
  }
}
