void __fastcall receive_query(listener *listen, time_t now)
{
  int v4; // $v0
  char *v5; // $s0
  _BOOL4 v6; // $s1
  in_addr_t s_addr; // $s3
  dns_header *v8; // $s7
  irec *v9; // $v1
  irec *v10; // $at
  int v11; // $at
  ssize_t v12; // $v0
  ssize_t v13; // $s4
  int family; // $v0
  int v15; // $s5
  __uint32_t v16; // $v0
  int v17; // $s1
  unsigned int iface; // $s5
  struct cmsghdr *msg_control; // $v0
  char *v20; // $v0
  int v21; // $v1
  _DWORD *v22; // $at
  int v23; // $v0
  const char *v24; // $a0
  int v25; // $v0
  int v26; // $a1
  time_t v27; // $s5
  int v28; // $s6
  int v29; // $v0
  int ad_reqd; // $s1
  int v31; // $at
  __int16 v32; // $v0
  __int16 v33; // $v1
  unsigned int v34; // $a0
  unsigned __int16 v35; // $at
  int v36; // $v0
  frec *v37; // $v1
  size_t v38; // $v0
  int v39; // $a1
  time_t v40; // $s5
  size_t v41; // $v0
  int fd; // $a0
  int v43; // $a1
  frec *forward; // [sp+1Ch] [-C4h]
  int v45; // [sp+24h] [-BCh]
  unsigned int dst_iface; // [sp+2Ch] [-B4h]
  unsigned int dst_ifacea; // [sp+2Ch] [-B4h]
  int v48[8]; // [sp+38h] [-A8h] BYREF
  char v49; // [sp+58h] [-88h] BYREF
  struct msghdr v50; // [sp+78h] [-68h] BYREF
  int v51[3]; // [sp+98h] [-48h] BYREF
  int dns_auth; // [sp+A4h] [-3Ch] BYREF
  all_addr source; // [sp+A8h] [-38h] BYREF
  unsigned __int16 v54; // [sp+BCh] [-24h] BYREF
  mysockaddr to; // [sp+C0h] [-20h] BYREF

  v4 = dnsmasq_daemon;
  v5 = *(char **)(dnsmasq_daemon + 476);
  dns_auth = 0;
  v6 = 1;
  if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) != 0 )
    v6 = listen->family == 0xA;
  *(_DWORD *)(dnsmasq_daemon + 528) = 0;
  source.addr.addr4.s_addr = 0;
  s_addr = 0;
  if ( (*(_BYTE *)(v4 + 1) & 0x20) != 0 )
  {
    v9 = listen->iface;
    if ( v9 )
    {
      dns_auth = v9->dns_auth;
      v8 = 0;
      if ( listen->family == 2 )
      {
        v10 = listen->iface;
        s_addr = v10->addr.in.sin_addr.s_addr;
        source.addr.addr4.s_addr = s_addr;
        v8 = (dns_header *)v10->netmask.s_addr;
      }
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v8 = 0;
  }
  v51[0] = *(_DWORD *)(v4 + 476);
  v11 = *(unsigned __int16 *)(v4 + 432);
  v50.msg_controllen = 32;
  v50.msg_control = &v49;
  v51[1] = v11;
  v50.msg_iovlen = 1;
  v50.msg_iov = (iovec *)v51;
  v50.msg_namelen = 28;
  v50.msg_name = &to;
  v50.msg_flags = 0;
  v12 = recvmsg(listen->fd, &v50, 0);
  if ( v12 < 0xC || (v50.msg_flags & 0x20) != 0 || v5[2] < 0 )
    return;
  v13 = v12;
  memset((void *)(*(_DWORD *)(dnsmasq_daemon + 476) + v12), 0, *(unsigned __int16 *)(dnsmasq_daemon + 432) - v12);
  family = listen->family;
  to.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !to.in.sin_port )
      return;
  }
  else
  {
    if ( !to.in.sin_port )
      return;
    to.in.sin_addr.s_addr = 0;
  }
  if ( (*(_BYTE *)(dnsmasq_daemon + 6) & 2) != 0 )
  {
    v15 = *(_DWORD *)(dnsmasq_daemon + 1136);
    if ( family == 10 )
    {
      if ( v15 )
      {
        while ( (*(_BYTE *)(v15 + 16) & 2) == 0 || !is_same_net6(v15, &to.in6.sin6_addr, *(_DWORD *)(v15 + 20)) )
        {
          v15 = *(_DWORD *)(v15 + 24);
          if ( !v15 )
          {
            v15 = 0;
            break;
          }
        }
      }
      else
      {
        v15 = 0;
      }
    }
    else
    {
      for ( ; v15; v15 = *(_DWORD *)(v15 + 24) )
      {
        if ( (*(_BYTE *)(v15 + 16) & 2) == 0 )
        {
          v16 = _bswap_32(-1 << (32 - *(_BYTE *)(v15 + 20)));
          if ( is_same_net(*(_DWORD *)v15, to.in.sin_addr.s_addr, v16) )
            break;
        }
      }
    }
    if ( !v15 )
    {
      if ( !receive_query_warned )
      {
        my_syslog(4, "Ignoring query from non-local network");
        receive_query_warned = 1;
      }
      return;
    }
  }
  if ( !v6 )
  {
    iface = 0;
LABEL_70:
    v22 = (_DWORD *)dnsmasq_daemon;
    *(_DWORD *)(dnsmasq_daemon + 1148) = &to;
    v23 = v22[285] + 1;
    v22[286] = v23;
    v22[285] = v23;
    if ( !extract_request(v5, v13, v22[121], &v54) )
      goto LABEL_92;
    v24 = "auth";
    if ( !dns_auth )
      v24 = "query";
    v25 = querystr(v24, v54);
    v26 = *(_DWORD *)(dnsmasq_daemon + 484);
    dst_iface = iface;
    if ( listen->family == 2 )
      log_query(524424, v26, &to.in6.sin6_flowinfo, v25);
    else
      log_query(524552, v26, &to.in6.sin6_addr, v25);
    v27 = now;
    if ( !dns_auth && (*(_BYTE *)(dnsmasq_daemon + 2) & 4) == 0 )
    {
      v28 = *(_DWORD *)(dnsmasq_daemon + 80);
      if ( v28 )
      {
        while ( !in_zone(v28, *(_DWORD *)(dnsmasq_daemon + 484), 0) )
        {
          v28 = *(_DWORD *)(v28 + 16);
          if ( !v28 )
            goto LABEL_91;
        }
        dns_auth = 1;
      }
    }
LABEL_91:
    now = v27;
    iface = dst_iface;
    if ( !detect_loop(*(_DWORD *)(dnsmasq_daemon + 484), v54) )
    {
LABEL_92:
      ad_reqd = 0;
      if ( find_pseudoheader(v5, v13, 0, v48) )
      {
        v31 = v48[0];
        v32 = *(unsigned __int8 *)(v48[0] + 1);
        v33 = *(unsigned __int8 *)v48[0];
        v48[0] += 4;
        v34 = *(unsigned __int8 *)v48[0];
        v48[0] = v31 + 6;
        v35 = (v33 << 8) | v32;
        ad_reqd = 1;
        if ( *(unsigned __int16 *)(dnsmasq_daemon + 432) < (unsigned int)v35 )
          v35 = *(_WORD *)(dnsmasq_daemon + 432);
        v36 = v35;
        v37 = (frec *)(v34 >> 7);
      }
      else
      {
        v36 = 512;
        v37 = 0;
      }
      if ( dns_auth )
      {
        v38 = answer_auth(v5, &v5[v36], v13, now);
        if ( v38 )
        {
          v39 = 1;
          if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
            v39 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
          send_from(listen->fd, v39, v5, v38, &to, &source, iface);
          ++*(_DWORD *)(dnsmasq_daemon + 496);
        }
      }
      else
      {
        dst_ifacea = iface;
        v40 = 1;
        if ( (v5[3] & 0x20) == 0 )
          v40 = (time_t)v37;
        forward = v37;
        v41 = answer_request(v5, &v5[v36], v13, s_addr);
        fd = listen->fd;
        if ( v41 )
        {
          v43 = 1;
          if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
            v43 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
          send_from(fd, v43, v5, v41, &to, &source, dst_ifacea);
          ++*(_DWORD *)(dnsmasq_daemon + 488);
        }
        else if ( forward_query(fd, &to, &source, dst_ifacea, v8, now, v40, forward, ad_reqd, v45) )
        {
          ++*(_DWORD *)(dnsmasq_daemon + 492);
        }
        else
        {
          ++*(_DWORD *)(dnsmasq_daemon + 488);
        }
      }
    }
    return;
  }
  v17 = 0;
  if ( v50.msg_controllen >= 0xC )
  {
    iface = 0;
    if ( listen->family == 2 )
    {
      msg_control = (struct cmsghdr *)v50.msg_control;
      if ( v50.msg_control )
      {
        iface = 0;
        do
        {
          if ( !msg_control->cmsg_level && msg_control->cmsg_type == 8 )
          {
            s_addr = *(_DWORD *)&msg_control->__cmsg_data[4];
            source.addr.addr4.s_addr = s_addr;
            iface = *(_DWORD *)msg_control->__cmsg_data;
          }
          msg_control = _cmsg_nxthdr(&v50, msg_control);
        }
        while ( msg_control );
      }
    }
    if ( listen->family == 10 && v50.msg_controllen >= 0xC )
    {
      v20 = (char *)v50.msg_control;
      if ( v50.msg_control )
      {
        do
        {
          if ( *((_DWORD *)v20 + 1) == 41 && *((_DWORD *)v20 + 2) == *(_DWORD *)(dnsmasq_daemon + 1132) )
          {
            source = *(all_addr *)(v20 + 12);
            iface = *((_DWORD *)v20 + 7);
          }
          v20 = (char *)_cmsg_nxthdr(&v50, (struct cmsghdr *)v20);
        }
        while ( v20 );
      }
    }
    v17 = 0;
    if ( indextoname(listen->fd, iface, v48) )
    {
      if ( iface_check(listen->family, &source, v48, &dns_auth) )
        goto LABEL_116;
      if ( (*(_BYTE *)(dnsmasq_daemon + 4) & 0x80) == 0 )
        enumerate_interfaces(0);
      if ( loopback_exception(listen->fd, listen->family, &source, v48)
        || label_exception(iface, listen->family, &source) )
      {
LABEL_116:
        v17 = 1;
        if ( listen->family == 2 && (*(_BYTE *)(dnsmasq_daemon + 2) & 4) != 0 )
        {
          v21 = *(_DWORD *)(dnsmasq_daemon + 508);
          if ( v21 )
          {
            while ( *(_WORD *)v21 != 2 || *(_DWORD *)(v21 + 4) != s_addr )
            {
              v21 = *(_DWORD *)(v21 + 80);
              if ( !v21 )
                goto LABEL_82;
            }
          }
          else
          {
LABEL_82:
            if ( (*(_BYTE *)(dnsmasq_daemon + 4) & 0x80) == 0 )
              enumerate_interfaces(0);
          }
          v29 = *(_DWORD *)(dnsmasq_daemon + 508);
          if ( v29 )
          {
            do
            {
              if ( *(_WORD *)v29 == 2 && *(_DWORD *)(v29 + 4) == s_addr )
              {
                v8 = *(dns_header **)(v29 + 28);
                goto LABEL_69;
              }
              v29 = *(_DWORD *)(v29 + 80);
            }
            while ( v29 );
            s_addr = 0;
          }
          else
          {
            s_addr = 0;
          }
        }
      }
    }
  }
  else
  {
    iface = 0;
  }
LABEL_69:
  if ( v17 )
    goto LABEL_70;
}
