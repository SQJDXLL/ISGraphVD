void __cdecl receive_query(listener *listen, dns_header *now)
{
  int v2; // eax
  all_addr *v3; // edi
  bool v4; // bl
  in_addr_t s_addr; // esi
  irec *iface; // ecx
  int v7; // edx
  ssize_t v8; // eax
  unsigned int v9; // esi
  int family; // eax
  int v11; // ecx
  int i; // ebp
  int j; // ebp
  listener *v14; // ebp
  _DWORD *msg_control; // edx
  char *v16; // ebx
  listener *v17; // eax
  unsigned int v18; // ebp
  _DWORD *v19; // eax
  int v20; // ecx
  const char *v21; // ecx
  int v22; // eax
  int v23; // ecx
  int v24; // eax
  int v25; // ebx
  char *v26; // ecx
  listener *v27; // eax
  unsigned int v28; // ebx
  int v29; // eax
  int v30; // edx
  int v31; // edx
  unsigned int v32; // ecx
  time_t v33; // ecx
  int v34; // eax
  int v35; // edx
  size_t v36; // eax
  int v37; // edx
  time_t v38; // ebp
  size_t v39; // eax
  int v40; // esi
  frec *v41; // [esp-4h] [ebp-D0h]
  mysockaddr *udpaddr; // [esp+0h] [ebp-CCh]
  in_addr_t v43; // [esp+4h] [ebp-C8h]
  int dns_auth; // [esp+8h] [ebp-C4h] BYREF
  unsigned __int16 v45; // [esp+Eh] [ebp-BEh] BYREF
  int v46; // [esp+10h] [ebp-BCh]
  size_t msg_controllen; // [esp+14h] [ebp-B8h]
  int v48; // [esp+18h] [ebp-B4h]
  int v49; // [esp+1Ch] [ebp-B0h]
  all_addr source; // [esp+20h] [ebp-ACh] BYREF
  mysockaddr to; // [esp+30h] [ebp-9Ch] BYREF
  struct msghdr message; // [esp+50h] [ebp-7Ch] BYREF
  int v53[2]; // [esp+70h] [ebp-5Ch] BYREF
  int v54[8]; // [esp+78h] [ebp-54h] BYREF
  char v55; // [esp+98h] [ebp-34h] BYREF

  v2 = dnsmasq_daemon;
  v3 = *(all_addr **)(dnsmasq_daemon + 476);
  dns_auth = 0;
  v4 = 1;
  if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) != 0 )
    v4 = listen->family == 10;
  *(_DWORD *)(dnsmasq_daemon + 528) = 0;
  source.addr.addr4.s_addr = 0;
  s_addr = 0;
  if ( (*(_BYTE *)(v2 + 1) & 0x20) != 0 && (iface = listen->iface) != 0 )
  {
    dns_auth = iface->dns_auth;
    v7 = 0;
    if ( listen->family == 2 )
    {
      s_addr = iface->addr.in.sin_addr.s_addr;
      source.addr.addr4.s_addr = s_addr;
      v7 = iface->netmask.s_addr;
    }
  }
  else
  {
    v7 = 0;
  }
  v49 = v7;
  v43 = s_addr;
  v53[0] = (int)v3;
  v53[1] = *(unsigned __int16 *)(v2 + 432);
  message.msg_control = &v55;
  message.msg_controllen = 32;
  message.msg_flags = 0;
  message.msg_name = &to;
  message.msg_namelen = 28;
  message.msg_iov = (iovec *)v53;
  message.msg_iovlen = 1;
  v8 = recvmsg(listen->fd, &message, 0);
  if ( v8 < 12 || (message.msg_flags & 0x20) != 0 || (v3->addr.addr6.__in6_u.__u6_addr8[2] & 0x80u) != 0 )
    return;
  v9 = v8;
  memset((void *)(v8 + *(_DWORD *)(dnsmasq_daemon + 476)), 0, *(unsigned __int16 *)(dnsmasq_daemon + 432) - v8);
  family = listen->family;
  to.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !to.in.sin_port )
      return;
    v11 = dnsmasq_daemon;
    if ( (*(_BYTE *)(dnsmasq_daemon + 6) & 2) != 0 )
      goto LABEL_24;
  }
  else
  {
    if ( !to.in.sin_port )
      return;
    to.in.sin_addr.s_addr = 0;
    v11 = dnsmasq_daemon;
    if ( (*(_BYTE *)(dnsmasq_daemon + 6) & 2) != 0 )
    {
      if ( family == 10 )
      {
        for ( i = *(_DWORD *)(dnsmasq_daemon + 1136); i; i = *(_DWORD *)(i + 24) )
        {
          if ( (*(_BYTE *)(i + 16) & 2) != 0 && is_same_net6(i, &to.in6.sin6_addr, *(_DWORD *)(i + 20)) )
            goto LABEL_29;
        }
        goto LABEL_42;
      }
LABEL_24:
      for ( j = *(_DWORD *)(v11 + 1136); j; j = *(_DWORD *)(j + 24) )
      {
        if ( (*(_BYTE *)(j + 16) & 2) == 0
          && is_same_net(*(_DWORD *)j, to.in.sin_addr.s_addr, _byteswap_ulong(-1 << -*(_BYTE *)(j + 20))) )
        {
          goto LABEL_29;
        }
      }
LABEL_42:
      if ( !receive_query_warned )
      {
        my_syslog(4, "Ignoring query from non-local network");
        receive_query_warned = 1;
      }
      return;
    }
  }
LABEL_29:
  v48 = 0;
  if ( v4 )
  {
    msg_controllen = message.msg_controllen;
    v14 = listen;
    if ( message.msg_controllen < 0xC )
      return;
    udpaddr = 0;
    if ( listen->family == 2 )
    {
      msg_control = message.msg_control;
      if ( !message.msg_control )
      {
        udpaddr = 0;
LABEL_72:
        if ( !indextoname(v14->fd, udpaddr, v54) )
          return;
        if ( !iface_check(v14->family, &source, v54, &dns_auth) )
        {
          if ( *(char *)(dnsmasq_daemon + 4) >= 0 )
            enumerate_interfaces(0);
          if ( !loopback_exception(v14->fd, v14->family, &source, v54)
            && !label_exception(udpaddr, v14->family, &source) )
          {
            return;
          }
        }
        if ( v14->family == 2 && (*(_BYTE *)(dnsmasq_daemon + 2) & 4) != 0 )
        {
          v29 = *(_DWORD *)(dnsmasq_daemon + 508);
          if ( v29 )
          {
            v30 = *(_DWORD *)(dnsmasq_daemon + 508);
            while ( *(_WORD *)v30 != 2 || *(_DWORD *)(v30 + 4) != v43 )
            {
              v30 = *(_DWORD *)(v30 + 80);
              if ( !v30 )
                goto LABEL_106;
            }
          }
          else
          {
LABEL_106:
            if ( *(char *)(dnsmasq_daemon + 4) >= 0 )
            {
              enumerate_interfaces(0);
              v29 = *(_DWORD *)(dnsmasq_daemon + 508);
            }
          }
          if ( v29 )
          {
            while ( *(_WORD *)v29 != 2 || *(_DWORD *)(v29 + 4) != v43 )
            {
              v29 = *(_DWORD *)(v29 + 80);
              if ( !v29 )
                goto LABEL_114;
            }
            v49 = *(_DWORD *)(v29 + 28);
          }
          else
          {
LABEL_114:
            v43 = 0;
          }
        }
        goto LABEL_45;
      }
      v46 = 2;
      v16 = (char *)message.msg_control + msg_controllen;
      udpaddr = 0;
      while ( 1 )
      {
        if ( msg_control[1] )
        {
          v17 = v14;
        }
        else
        {
          v17 = v14;
          if ( msg_control[2] == 8 )
          {
            v43 = msg_control[4];
            source.addr.addr4.s_addr = v43;
            udpaddr = (mysockaddr *)msg_control[3];
          }
        }
        if ( *msg_control < 0xCu )
          break;
        v18 = (*msg_control + 3) & 0xFFFFFFFC;
        if ( (char *)msg_control + v18 + 12 > v16 )
          break;
        msg_control = (_DWORD *)((char *)msg_control + v18);
        v14 = v17;
        if ( (char *)msg_control + ((*msg_control + 3) & 0xFFFFFFFC) > v16 )
          goto LABEL_59;
      }
      v14 = v17;
    }
    else
    {
      v46 = listen->family;
    }
LABEL_59:
    if ( v46 == 10 )
    {
      v26 = (char *)message.msg_control;
      if ( message.msg_control )
      {
        v46 = dnsmasq_daemon;
        msg_controllen += (size_t)message.msg_control;
        while ( 1 )
        {
          if ( *((_DWORD *)v26 + 1) == 41 )
          {
            v27 = v14;
            if ( *((_DWORD *)v26 + 2) == *(_DWORD *)(v46 + 1132) )
            {
              source = *(all_addr *)(v26 + 12);
              udpaddr = (mysockaddr *)*((_DWORD *)v26 + 7);
            }
          }
          else
          {
            v27 = v14;
          }
          if ( *(_DWORD *)v26 < 0xCu )
            break;
          v28 = (*(_DWORD *)v26 + 3) & 0xFFFFFFFC;
          if ( (unsigned int)&v26[v28 + 12] > msg_controllen )
            break;
          v26 += v28;
          v14 = v27;
          if ( (unsigned int)&v26[(*(_DWORD *)v26 + 3) & 0xFFFFFFFC] > msg_controllen )
            goto LABEL_72;
        }
        v14 = v27;
      }
    }
    goto LABEL_72;
  }
  udpaddr = 0;
  v14 = listen;
LABEL_45:
  v19 = (_DWORD *)dnsmasq_daemon;
  v20 = *(_DWORD *)(dnsmasq_daemon + 1140) + 1;
  *(_DWORD *)(dnsmasq_daemon + 1140) = v20;
  v19[286] = v20;
  v19[287] = &to;
  if ( !extract_request(v3, v9, v19[121], &v45) )
    goto LABEL_118;
  v21 = "auth";
  if ( !dns_auth )
    v21 = "query";
  v22 = querystr(v21, v45);
  v23 = *(_DWORD *)(dnsmasq_daemon + 484);
  if ( v14->family == 2 )
    log_query(524424, v23, &to.in6.sin6_flowinfo, v22);
  else
    log_query(524552, v23, &to.in6.sin6_addr, v22);
  v48 = 0;
  if ( !dns_auth )
  {
    v24 = dnsmasq_daemon;
    if ( (*(_BYTE *)(dnsmasq_daemon + 2) & 4) == 0 )
    {
      v25 = *(_DWORD *)(dnsmasq_daemon + 80);
      if ( v25 )
      {
        while ( !in_zone(v25, *(_DWORD *)(v24 + 484), 0) )
        {
          v25 = *(_DWORD *)(v25 + 16);
          if ( !v25 )
            goto LABEL_87;
          v24 = dnsmasq_daemon;
        }
        dns_auth = 1;
        v48 = 1;
      }
    }
  }
LABEL_87:
  if ( !detect_loop(*(_DWORD *)(dnsmasq_daemon + 484), v45) )
  {
LABEL_118:
    if ( find_pseudoheader(v3, v9, 0, v54, 0, 0) )
    {
      LOWORD(v31) = __ROL2__(*(_WORD *)v54[0], 8);
      v32 = *(unsigned __int8 *)(v54[0] + 4);
      v54[0] += 6;
      v33 = v32 >> 7;
      if ( (unsigned __int16)v31 > (unsigned __int16)*(_DWORD *)(dnsmasq_daemon + 432) )
        v31 = *(_DWORD *)(dnsmasq_daemon + 432);
      v34 = (unsigned __int16)v31;
      v35 = 1;
    }
    else
    {
      v34 = 512;
      v35 = 0;
      v33 = 0;
    }
    if ( dns_auth )
    {
      v36 = answer_auth(v3, (char *)v3 + v34, v9, now, &to, v48, v33, v35);
      if ( v36 )
      {
        v37 = 1;
        if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
          v37 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
        send_from(v14->fd, v37, (char *)v3, v36, &to, &source, (unsigned int)udpaddr);
        ++*(_DWORD *)(dnsmasq_daemon + 496);
      }
    }
    else
    {
      v38 = 1;
      if ( (v3->addr.addr6.__in6_u.__u6_addr8[3] & 0x20) == 0 )
        v38 = v33;
      v39 = answer_request(v3, (char *)v3 + v34, v9, v43, v49, now, v38, v33, v35);
      if ( v39 )
      {
        v40 = 1;
        if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
          v40 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
        send_from(listen->fd, v40, (char *)v3, v39, &to, &source, (unsigned int)udpaddr);
        ++*(_DWORD *)(dnsmasq_daemon + 488);
      }
      else if ( forward_query((int)&source, udpaddr, v3, v9, now, 0, v38, v41, (int)udpaddr, v43) )
      {
        ++*(_DWORD *)(dnsmasq_daemon + 492);
      }
      else
      {
        ++*(_DWORD *)(dnsmasq_daemon + 488);
      }
    }
  }
}
