void __cdecl receive_query(listener *listen, time_t now)
{
  __int64 v2; // r0
  int v3; // r0
  const char *v4; // r0
  int v5; // [sp+18h] [bp-130h]
  int v6; // [sp+20h] [bp-128h]
  struct cmsghdr *msg_control; // [sp+28h] [bp-120h]
  bool v8; // [sp+30h] [bp-118h]
  int ad_reqd; // [sp+34h] [bp-114h]
  unsigned __int16 v10; // [sp+42h] [bp-106h]
  int v11; // [sp+44h] [bp-104h]
  int ii; // [sp+48h] [bp-100h]
  int j; // [sp+4Ch] [bp-FCh]
  int k; // [sp+4Ch] [bp-FCh]
  char v15[32]; // [sp+58h] [bp-F0h] BYREF
  uint32_t v16; // [sp+78h] [bp-D0h]
  int i; // [sp+7Ch] [bp-CCh]
  _BOOL4 v18; // [sp+80h] [bp-C8h]
  char v19; // [sp+84h] [bp-C4h] BYREF
  struct cmsghdr *cmsg; // [sp+A4h] [bp-A4h]
  msghdr msg; // [sp+A8h] [bp-A0h] BYREF
  iovec iov[1]; // [sp+C4h] [bp-84h] BYREF
  int local_auth; // [sp+CCh] [bp-7Ch]
  int have_pseudoheader; // [sp+D0h] [bp-78h]
  int do_bit; // [sp+D4h] [bp-74h]
  int auth_dns; // [sp+D8h] [bp-70h] BYREF
  int if_index; // [sp+DCh] [bp-6Ch]
  ssize_t n; // [sp+E0h] [bp-68h]
  size_t m; // [sp+E4h] [bp-64h]
  in_addr dst_addr_4; // [sp+E8h] [bp-60h]
  in_addr netmask; // [sp+ECh] [bp-5Ch]
  all_addr dst_addr; // [sp+F0h] [bp-58h] BYREF
  unsigned __int16 udp_size; // [sp+100h] [bp-48h]
  unsigned __int16 type; // [sp+102h] [bp-46h] BYREF
  unsigned __int8 *pheader; // [sp+104h] [bp-44h]
  mysockaddr source_addr; // [sp+108h] [bp-40h] BYREF
  dns_header *header; // [sp+124h] [bp-24h]
  time_t nowa; // [sp+128h] [bp-20h]
  listener *listena; // [sp+12Ch] [bp-1Ch]

  listena = listen;
  nowa = now;
  header = *(dns_header **)(dnsmasq_daemon + 476);
  udp_size = 512;
  if_index = 0;
  auth_dns = 0;
  do_bit = 0;
  have_pseudoheader = 0;
  local_auth = 0;
  v8 = 1;
  if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) != 0 )
    v8 = listena->family == 0xA;
  v18 = v8;
  *(_DWORD *)(dnsmasq_daemon + 528) = 0;
  dst_addr.addr.addr4.s_addr = 0;
  dst_addr_4.s_addr = 0;
  netmask.s_addr = 0;
  if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) != 0 )
  {
    if ( listena->iface )
    {
      auth_dns = listena->iface->dns_auth;
      if ( listena->family == 2 )
      {
        dst_addr.addr.addr4.s_addr = listena->iface->addr.in.sin_addr.s_addr;
        dst_addr_4.s_addr = dst_addr.addr.addr4.s_addr;
        netmask.s_addr = listena->iface->netmask.s_addr;
      }
    }
  }
  iov[0].iov_base = *(void **)(dnsmasq_daemon + 476);
  iov[0].iov_len = *(unsigned __int16 *)(dnsmasq_daemon + 432);
  msg.msg_control = &v19;
  msg.msg_controllen = 32;
  msg.msg_flags = 0;
  msg.msg_name = &source_addr;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  msg.msg_iovlen = 1;
  n = recvmsg(listena->fd, &msg, 0);
  if ( n != -1 && n >= 12 && (msg.msg_flags & 0x20) == 0 && (header->hb3 & 0x80) == 0 )
  {
    source_addr.sa.sa_family = listena->family;
    if ( listena->family == 2 )
    {
      if ( !source_addr.in.sin_port )
        return;
    }
    else
    {
      if ( !source_addr.in.sin_port )
        return;
      source_addr.in.sin_addr.s_addr = 0;
    }
    if ( (*(_BYTE *)(dnsmasq_daemon + 6) & 2) != 0 )
    {
      if ( listena->family == 10 )
      {
        for ( i = *(_DWORD *)(dnsmasq_daemon + 1136);
              i && ((*(_BYTE *)(i + 16) & 2) == 0 || !is_same_net6(i, &source_addr.in6.sin6_addr, *(_DWORD *)(i + 20)));
              i = *(_DWORD *)(i + 24) )
        {
          ;
        }
      }
      else
      {
        for ( i = *(_DWORD *)(dnsmasq_daemon + 1136); i; i = *(_DWORD *)(i + 24) )
        {
          v16 = htonl(-1 << (0x20 - *(_BYTE *)(i + 20)));
          if ( (*(_BYTE *)(i + 16) & 2) == 0 )
          {
            if ( is_same_net(*(_DWORD *)i, source_addr.in.sin_addr.s_addr, v16) )
              break;
          }
        }
      }
      if ( !i )
      {
        if ( !receive_query_warned )
        {
          my_syslog(4, "Ignoring query from non-local network");
          receive_query_warned = 1;
        }
        return;
      }
    }
    if ( v18 )
    {
      if ( msg.msg_controllen <= 0xB )
        return;
      if ( listena->family == 2 )
      {
        for ( cmsg = (struct cmsghdr *)msg.msg_control; cmsg; cmsg = _cmsg_nxthdr(&msg, cmsg) )
        {
          if ( !cmsg->cmsg_level && cmsg->cmsg_type == 8 )
          {
            dst_addr.addr.addr4.s_addr = *(_DWORD *)&cmsg->__cmsg_data[4];
            dst_addr_4.s_addr = dst_addr.addr.addr4.s_addr;
            if_index = *(_DWORD *)cmsg->__cmsg_data;
          }
        }
      }
      if ( listena->family == 10 )
      {
        if ( msg.msg_controllen < 0xC )
          msg_control = 0;
        else
          msg_control = (struct cmsghdr *)msg.msg_control;
        for ( cmsg = msg_control; cmsg; cmsg = _cmsg_nxthdr(&msg, cmsg) )
        {
          if ( cmsg->cmsg_level == 41 && cmsg->cmsg_type == *(_DWORD *)(dnsmasq_daemon + 1132) )
          {
            v2 = *(_QWORD *)cmsg->__cmsg_data;
            *((_QWORD *)&dst_addr.addr.dnssec + 1) = *(_QWORD *)&cmsg->__cmsg_data[8];
            *(_QWORD *)&dst_addr.addr.addr4.s_addr = v2;
            if_index = *(_DWORD *)&cmsg->__cmsg_data[16];
          }
        }
      }
      if ( !indextoname(listena->fd, if_index, v15) )
        return;
      if ( !iface_check(listena->family, &dst_addr, v15, &auth_dns) )
      {
        if ( (*(_BYTE *)(dnsmasq_daemon + 4) & 0x80) == 0 )
          enumerate_interfaces(0);
        if ( !loopback_exception(listena->fd, listena->family, &dst_addr, v15)
          && !label_exception(if_index, listena->family, &dst_addr) )
        {
          return;
        }
      }
      if ( listena->family == 2 && (*(_BYTE *)(dnsmasq_daemon + 2) & 4) != 0 )
      {
        for ( j = *(_DWORD *)(dnsmasq_daemon + 508);
              j && (*(_WORD *)j != 2 || *(_DWORD *)(j + 4) != dst_addr_4.s_addr);
              j = *(_DWORD *)(j + 80) )
        {
          ;
        }
        if ( !j && (*(_BYTE *)(dnsmasq_daemon + 4) & 0x80) == 0 )
          enumerate_interfaces(0);
        for ( k = *(_DWORD *)(dnsmasq_daemon + 508);
              k && (*(_WORD *)k != 2 || *(_DWORD *)(k + 4) != dst_addr_4.s_addr);
              k = *(_DWORD *)(k + 80) )
        {
          ;
        }
        if ( k )
          netmask.s_addr = *(_DWORD *)(k + 28);
        else
          dst_addr_4.s_addr = 0;
      }
    }
    v3 = *(_DWORD *)(dnsmasq_daemon + 1140) + 1;
    *(_DWORD *)(dnsmasq_daemon + 1140) = v3;
    *(_DWORD *)(dnsmasq_daemon + 1144) = v3;
    *(_DWORD *)(dnsmasq_daemon + 1148) = &source_addr;
    if ( !extract_request(header, n, *(_DWORD *)(dnsmasq_daemon + 484), &type) )
      goto LABEL_113;
    v4 = "query";
    if ( auth_dns )
      v4 = "auth";
    v11 = querystr(v4, type);
    if ( listena->family == 2 )
      log_query(524424, *(_DWORD *)(dnsmasq_daemon + 484), &source_addr.in6.sin6_flowinfo, v11);
    else
      log_query(524552, *(_DWORD *)(dnsmasq_daemon + 484), &source_addr.in6.sin6_addr, v11);
    if ( !auth_dns && (*(_BYTE *)(dnsmasq_daemon + 2) & 4) == 0 )
    {
      for ( ii = *(_DWORD *)(dnsmasq_daemon + 80); ii; ii = *(_DWORD *)(ii + 16) )
      {
        if ( in_zone(ii, *(_DWORD *)(dnsmasq_daemon + 484), 0) )
        {
          auth_dns = 1;
          local_auth = 1;
          break;
        }
      }
    }
    if ( !detect_loop(*(_DWORD *)(dnsmasq_daemon + 484), type) )
    {
LABEL_113:
      if ( find_pseudoheader(header, n) )
      {
        have_pseudoheader = 1;
        udp_size = _byteswap_ushort(*(_WORD *)pheader);
        pheader += 2;
        pheader += 2;
        v10 = _byteswap_ushort(*(_WORD *)pheader);
        pheader += 2;
        if ( (v10 & 0x8000) != 0 )
          do_bit = 1;
        if ( udp_size > (int)*(unsigned __int16 *)(dnsmasq_daemon + 432) )
          udp_size = *(_WORD *)(dnsmasq_daemon + 432);
      }
      if ( auth_dns )
      {
        m = answer_auth(header, (char *)header + udp_size, n, nowa, &source_addr, local_auth, do_bit, have_pseudoheader);
        if ( m )
        {
          LOBYTE(v6) = 1;
          if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
            v6 = *(unsigned __int8 *)(dnsmasq_daemon + 4) >> 7;
          send_from(listena->fd, v6 & 1, (char *)header, m, &source_addr, &dst_addr, if_index);
          ++*(_DWORD *)(dnsmasq_daemon + 496);
        }
      }
      else
      {
        ad_reqd = do_bit;
        if ( (header->hb4 & 0x20) != 0 )
          ad_reqd = 1;
        m = answer_request(
              header,
              (char *)header + udp_size,
              n,
              dst_addr_4.s_addr,
              netmask.s_addr,
              nowa,
              ad_reqd,
              do_bit,
              have_pseudoheader);
        if ( m )
        {
          LOBYTE(v5) = 1;
          if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
            v5 = *(unsigned __int8 *)(dnsmasq_daemon + 4) >> 7;
          send_from(listena->fd, v5 & 1, (char *)header, m, &source_addr, &dst_addr, if_index);
          ++*(_DWORD *)(dnsmasq_daemon + 488);
        }
        else if ( forward_query(listena->fd, &source_addr, &dst_addr, if_index, header, n, nowa, 0u, ad_reqd, do_bit) )
        {
          ++*(_DWORD *)(dnsmasq_daemon + 492);
        }
        else
        {
          ++*(_DWORD *)(dnsmasq_daemon + 488);
        }
      }
    }
  }
}
