void __cdecl receive_query(listener *listen, dns_header *now)
{
  listener *v2; // esi
  int v3; // eax
  char *v4; // edi
  bool v5; // cl
  in_addr_t s_addr; // ebp
  int v7; // ebx
  irec *iface; // edx
  ssize_t v9; // eax
  unsigned int v10; // esi
  int family; // eax
  int v12; // ecx
  all_addr *v13; // edi
  int v14; // eax
  struct cmsghdr *msg_control; // eax
  char *k; // eax
  int i; // edi
  int j; // edi
  int v19; // ebx
  int v20; // eax
  int v21; // edx
  _DWORD *v22; // eax
  int v23; // ecx
  const char *v24; // ecx
  int v25; // eax
  int v26; // ecx
  int v27; // eax
  all_addr *v28; // ebx
  int v29; // edi
  int v30; // ebx
  int v31; // edx
  unsigned int v32; // ecx
  int v33; // ecx
  int v34; // eax
  size_t v35; // eax
  int v36; // edx
  int v37; // edx
  time_t v38; // ebx
  size_t v39; // eax
  char *v40; // esi
  int v41; // edi
  int v42; // [esp-10h] [ebp-DCh]
  frec *v43; // [esp-4h] [ebp-D0h]
  int v44; // [esp+0h] [ebp-CCh]
  int v45; // [esp+4h] [ebp-C8h]
  bool udpaddr; // [esp+8h] [ebp-C4h]
  mysockaddr *udpaddra; // [esp+8h] [ebp-C4h]
  int dns_auth; // [esp+Ch] [ebp-C0h] BYREF
  unsigned __int16 v49; // [esp+12h] [ebp-BAh] BYREF
  int v50; // [esp+14h] [ebp-B8h]
  int v51; // [esp+18h] [ebp-B4h]
  char *packet; // [esp+1Ch] [ebp-B0h]
  all_addr source; // [esp+20h] [ebp-ACh] BYREF
  mysockaddr to; // [esp+30h] [ebp-9Ch] BYREF
  struct msghdr message; // [esp+50h] [ebp-7Ch] BYREF
  int v56[8]; // [esp+70h] [ebp-5Ch] BYREF
  _DWORD v57[2]; // [esp+90h] [ebp-3Ch] BYREF
  char v58; // [esp+98h] [ebp-34h] BYREF

  v2 = listen;
  v3 = dnsmasq_daemon;
  v4 = *(char **)(dnsmasq_daemon + 476);
  dns_auth = 0;
  v5 = 1;
  if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) != 0 )
    v5 = listen->family == 10;
  udpaddr = v5;
  *(_DWORD *)(dnsmasq_daemon + 528) = 0;
  source.addr.addr4.s_addr = 0;
  s_addr = 0;
  v7 = 0;
  if ( (*(_BYTE *)(v3 + 1) & 0x20) != 0 )
  {
    iface = listen->iface;
    s_addr = 0;
    v7 = 0;
    if ( iface )
    {
      dns_auth = iface->dns_auth;
      v2 = listen;
      s_addr = 0;
      v7 = 0;
      if ( listen->family == 2 )
      {
        s_addr = iface->addr.in.sin_addr.s_addr;
        source.addr.addr4.s_addr = s_addr;
        v7 = iface->netmask.s_addr;
      }
    }
  }
  v50 = v7;
  v57[0] = v4;
  v57[1] = *(unsigned __int16 *)(v3 + 432);
  message.msg_control = &v58;
  message.msg_controllen = 32;
  message.msg_flags = 0;
  message.msg_name = &to;
  message.msg_namelen = 28;
  message.msg_iov = (iovec *)v57;
  message.msg_iovlen = 1;
  v9 = recvmsg(v2->fd, &message, 0);
  if ( v9 < 12 || (message.msg_flags & 0x20) != 0 || v4[2] < 0 )
    return;
  v10 = v9;
  memset((void *)(v9 + *(_DWORD *)(dnsmasq_daemon + 476)), 0, *(unsigned __int16 *)(dnsmasq_daemon + 432) - v9);
  family = listen->family;
  to.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !to.in.sin_port )
      return;
    packet = v4;
    v12 = dnsmasq_daemon;
    if ( (*(_BYTE *)(dnsmasq_daemon + 6) & 2) != 0 )
      goto LABEL_41;
  }
  else
  {
    if ( !to.in.sin_port )
      return;
    packet = v4;
    to.in.sin_addr.s_addr = 0;
    v12 = dnsmasq_daemon;
    if ( (*(_BYTE *)(dnsmasq_daemon + 6) & 2) != 0 )
    {
      if ( family == 10 )
      {
        for ( i = *(_DWORD *)(dnsmasq_daemon + 1136); i; i = *(_DWORD *)(i + 24) )
        {
          if ( (*(_BYTE *)(i + 16) & 2) != 0 && is_same_net6(i, &to.in6.sin6_addr, *(_DWORD *)(i + 20)) )
            goto LABEL_16;
        }
        goto LABEL_46;
      }
LABEL_41:
      for ( j = *(_DWORD *)(v12 + 1136); j; j = *(_DWORD *)(j + 24) )
      {
        if ( (*(_BYTE *)(j + 16) & 2) == 0
          && is_same_net(*(_DWORD *)j, to.in.sin_addr.s_addr, _byteswap_ulong(-1 << -*(_BYTE *)(j + 20))) )
        {
          goto LABEL_16;
        }
      }
LABEL_46:
      if ( !receive_query_warned )
      {
        my_syslog(4, "Ignoring query from non-local network");
        receive_query_warned = 1;
      }
      return;
    }
  }
LABEL_16:
  v51 = 0;
  if ( udpaddr )
  {
    v13 = (all_addr *)packet;
    if ( message.msg_controllen < 0xC )
      return;
    v14 = listen->family;
    udpaddra = 0;
    if ( v14 == 2 )
    {
      msg_control = (struct cmsghdr *)message.msg_control;
      if ( !message.msg_control )
      {
        udpaddra = 0;
LABEL_49:
        if ( !indextoname(listen->fd, udpaddra, v56) )
          return;
        if ( !iface_check(listen->family, &source, v56, &dns_auth) )
        {
          if ( *(char *)(dnsmasq_daemon + 4) >= 0 )
            enumerate_interfaces(0);
          if ( !loopback_exception(listen->fd, listen->family, &source, v56)
            && !label_exception(udpaddra, listen->family, &source) )
          {
            return;
          }
        }
        if ( listen->family == 2 )
        {
          v19 = v50;
          if ( (*(_BYTE *)(dnsmasq_daemon + 2) & 4) != 0 )
          {
            v20 = *(_DWORD *)(dnsmasq_daemon + 508);
            if ( v20 )
            {
              v21 = *(_DWORD *)(dnsmasq_daemon + 508);
              do
              {
                if ( *(_WORD *)v21 == 2 && *(_DWORD *)(v21 + 4) == s_addr )
                  goto LABEL_67;
                v21 = *(_DWORD *)(v21 + 80);
              }
              while ( v21 );
            }
            if ( *(char *)(dnsmasq_daemon + 4) >= 0 )
            {
              enumerate_interfaces(0);
              v20 = *(_DWORD *)(dnsmasq_daemon + 508);
            }
            while ( 1 )
            {
LABEL_67:
              if ( !v20 )
              {
                s_addr = 0;
                goto LABEL_70;
              }
              if ( *(_WORD *)v20 == 2 && *(_DWORD *)(v20 + 4) == s_addr )
                break;
              v20 = *(_DWORD *)(v20 + 80);
            }
            v19 = *(_DWORD *)(v20 + 28);
          }
        }
        else
        {
          v19 = v50;
        }
LABEL_70:
        v50 = v19;
        goto LABEL_71;
      }
      udpaddra = 0;
      do
      {
        if ( !msg_control->cmsg_level && msg_control->cmsg_type == 8 )
        {
          s_addr = *(_DWORD *)&msg_control->__cmsg_data[4];
          source.addr.addr4.s_addr = s_addr;
          udpaddra = *(mysockaddr **)msg_control->__cmsg_data;
        }
        msg_control = _cmsg_nxthdr(&message, msg_control);
      }
      while ( msg_control );
      v14 = listen->family;
    }
    if ( v14 == 10 && message.msg_controllen >= 0xC )
    {
      for ( k = (char *)message.msg_control; k; k = (char *)_cmsg_nxthdr(&message, (struct cmsghdr *)k) )
      {
        if ( *((_DWORD *)k + 1) == 41 && *((_DWORD *)k + 2) == *(_DWORD *)(dnsmasq_daemon + 1132) )
        {
          source = *(all_addr *)(k + 12);
          udpaddra = (mysockaddr *)*((_DWORD *)k + 7);
        }
      }
    }
    goto LABEL_49;
  }
  udpaddra = 0;
  v13 = (all_addr *)packet;
LABEL_71:
  v22 = (_DWORD *)dnsmasq_daemon;
  v23 = *(_DWORD *)(dnsmasq_daemon + 1140) + 1;
  *(_DWORD *)(dnsmasq_daemon + 1140) = v23;
  v22[286] = v23;
  v22[287] = &to;
  if ( !extract_request(v13, v10, v22[121], &v49) )
    goto LABEL_86;
  v24 = "auth";
  if ( !dns_auth )
    v24 = "query";
  v25 = querystr(v24, v49);
  v26 = *(_DWORD *)(dnsmasq_daemon + 484);
  if ( listen->family == 2 )
    log_query(524424, v26, &to.in6.sin6_flowinfo, v25);
  else
    log_query(524552, v26, &to.in6.sin6_addr, v25);
  v51 = 0;
  if ( !dns_auth )
  {
    v27 = dnsmasq_daemon;
    if ( (*(_BYTE *)(dnsmasq_daemon + 2) & 4) == 0 )
    {
      v28 = v13;
      v29 = *(_DWORD *)(dnsmasq_daemon + 80);
      if ( v29 )
      {
        while ( !in_zone(v29, *(_DWORD *)(v27 + 484), 0) )
        {
          v29 = *(_DWORD *)(v29 + 16);
          if ( !v29 )
            goto LABEL_84;
          v27 = dnsmasq_daemon;
        }
        dns_auth = 1;
        v51 = 1;
      }
LABEL_84:
      v13 = v28;
    }
  }
  if ( !detect_loop(*(_DWORD *)(dnsmasq_daemon + 484), v49) )
  {
LABEL_86:
    v30 = 0;
    if ( find_pseudoheader(v13, v10, 0, v56, 0, 0) )
    {
      LOWORD(v31) = __ROL2__(*(_WORD *)v56[0], 8);
      v32 = *(unsigned __int8 *)(v56[0] + 4);
      v56[0] += 6;
      v33 = v32 >> 7;
      if ( (unsigned __int16)v31 > (unsigned __int16)*(_DWORD *)(dnsmasq_daemon + 432) )
        v31 = *(_DWORD *)(dnsmasq_daemon + 432);
      v34 = (unsigned __int16)v31;
      v30 = 1;
    }
    else
    {
      v34 = 512;
      v33 = 0;
    }
    if ( dns_auth )
    {
      v35 = answer_auth(v13, (char *)v13 + v34, v10, now, &to, v51, v33, v30);
      if ( v35 )
      {
        if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) != 0 )
          v36 = 1;
        else
          v36 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
        send_from(listen->fd, v36, (char *)v13, v35, &to, &source, (unsigned int)udpaddra);
        ++*(_DWORD *)(dnsmasq_daemon + 496);
      }
    }
    else
    {
      v37 = 1;
      if ( (v13->addr.addr6.__in6_u.__u6_addr8[3] & 0x20) == 0 )
        v37 = v33;
      v42 = v30;
      v38 = v37;
      v39 = answer_request(v13, (char *)v13 + v34, v10, s_addr, v50, now, v37, v33, v42);
      if ( v39 )
      {
        v40 = (char *)v13;
        v41 = 1;
        if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
          v41 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
        send_from(listen->fd, v41, v40, v39, &to, &source, (unsigned int)udpaddra);
        ++*(_DWORD *)(dnsmasq_daemon + 488);
      }
      else if ( forward_query((int)&source, udpaddra, v13, v10, now, 0, v38, v43, v44, v45) )
      {
        ++*(_DWORD *)(dnsmasq_daemon + 492);
      }
      else
      {
        ++*(_DWORD *)(dnsmasq_daemon + 488);
      }
    }
  }
}
