void __fastcall receive_query(listener *listen, time_t now)
{
  listener *v2; // rbx
  __int64 v3; // rax
  dns_header *v4; // r13
  unsigned int s_addr; // r12d
  int family; // ecx
  irec *iface; // rdx
  unsigned int v8; // r14d
  size_t v9; // rax
  int fd; // edi
  signed __int64 v11; // r15
  ifreq *p_ifr; // r8
  all_addr *p_dst_addr; // r9
  int v14; // eax
  __int64 v15; // rdx
  __int64 v16; // rbx
  int v17; // eax
  const __m128i *v18; // rcx
  char *v19; // rsi
  unsigned __int64 v20; // rax
  unsigned __int64 v21; // rdx
  in_addr_t v22; // ecx
  unsigned int *v23; // rbx
  __int64 v24; // rdx
  int v25; // eax
  char *msg_control; // rcx
  char *v27; // rsi
  unsigned __int64 v28; // rax
  unsigned __int64 v29; // rdx
  int v30; // eax
  int v31; // eax
  __int64 v32; // rax
  int v33; // ecx
  const char *v34; // rdi
  __int64 v35; // rcx
  int v36; // r11d
  __int64 v37; // rax
  __int64 v38; // rdx
  __int64 v39; // rbx
  int v40; // eax
  int v41; // r11d
  __int16 v42; // ax
  unsigned __int8 *v43; // rdx
  __int16 v44; // cx
  unsigned __int16 v45; // ax
  __int64 v46; // rsi
  __int64 v47; // rax
  char *v48; // rsi
  __int64 v49; // r11
  size_t v50; // rcx
  size_t v51; // rax
  __int64 v52; // rdx
  __int64 v53; // rcx
  __int64 v54; // [rsp-10h] [rbp-160h]
  int have_pseudoheader; // [rsp+0h] [rbp-150h]
  in_addr_t v57; // [rsp+10h] [rbp-140h]
  unsigned int ad_reqd; // [rsp+14h] [rbp-13Ch]
  int ad_reqda; // [rsp+14h] [rbp-13Ch]
  listener *local_auth; // [rsp+18h] [rbp-138h]
  listener *local_autha; // [rsp+18h] [rbp-138h]
  int local_authc; // [rsp+18h] [rbp-138h]
  unsigned int local_authb; // [rsp+18h] [rbp-138h]
  listener *listena; // [rsp+20h] [rbp-130h]
  unsigned __int16 type; // [rsp+2Ah] [rbp-126h] BYREF
  int auth_dns; // [rsp+2Ch] [rbp-124h] BYREF
  unsigned __int8 *t_cp; // [rsp+30h] [rbp-120h] BYREF
  msghdr msg; // [rsp+38h] [rbp-118h] BYREF
  all_addr dst_addr; // [rsp+78h] [rbp-D8h] BYREF
  iovec iov[1]; // [rsp+88h] [rbp-C8h] BYREF
  mysockaddr source_addr; // [rsp+98h] [rbp-B8h] BYREF
  union {cmsghdr align;char control6[40];char control[32];} control_u; // [rsp+B8h] [rbp-98h] BYREF
  ifreq ifr; // [rsp+E8h] [rbp-68h] BYREF
  unsigned __int64 v74; // [rsp+110h] [rbp-40h]

  v2 = listen;
  v74 = __readfsqword(0x28u);
  v3 = dnsmasq_daemon_0;
  auth_dns = 0;
  v4 = *(dns_header **)(dnsmasq_daemon_0 + 848LL);
  s_addr = *dnsmasq_daemon_0 & 0x2000;
  if ( s_addr )
  {
    family = listen->family;
    iface = listen->iface;
    *(_QWORD *)(dnsmasq_daemon_0 + 944LL) = 0LL;
    dst_addr.addr.addr4.s_addr = 0;
    v57 = 0;
    v8 = family == 10;
    s_addr = 0;
    if ( iface )
    {
      auth_dns = iface->dns_auth;
      if ( family == 2 )
      {
        s_addr = iface->addr.in.sin_addr.s_addr;
        v22 = iface->netmask.s_addr;
        dst_addr.addr.addr4.s_addr = s_addr;
        v57 = v22;
      }
    }
  }
  else
  {
    dst_addr.addr.addr4.s_addr = 0;
    v8 = 1;
    *(_QWORD *)(dnsmasq_daemon_0 + 944LL) = 0LL;
    v57 = 0;
  }
  v9 = *(unsigned __int16 *)(v3 + 768);
  fd = listen->fd;
  iov[0].iov_base = v4;
  iov[0].iov_len = v9;
  msg.msg_control = &control_u;
  msg.msg_controllen = 40LL;
  msg.msg_flags = 0;
  msg.msg_name = &source_addr;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  msg.msg_iovlen = 1LL;
  v11 = recvmsg(fd, &msg, 0);
  if ( v11 <= 11 )
    return;
  ad_reqd = msg.msg_flags & 0x20;
  if ( (msg.msg_flags & 0x20) != 0 || (v4->hb3 & 0x80u) != 0 )
    return;
  memset(
    (void *)(v11 + *(_QWORD *)(dnsmasq_daemon_0 + 848LL)),
    0,
    *(unsigned __int16 *)(dnsmasq_daemon_0 + 768LL) - v11);
  v14 = v2->family;
  source_addr.sa.sa_family = v14;
  if ( v14 == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
    v15 = dnsmasq_daemon_0;
    if ( (*(_BYTE *)(dnsmasq_daemon_0 + 6LL) & 2) == 0 )
      goto LABEL_18;
  }
  else
  {
    if ( !source_addr.in.sin_port )
      return;
    v15 = dnsmasq_daemon_0;
    source_addr.in.sin_addr.s_addr = 0;
    if ( (*(_BYTE *)(dnsmasq_daemon_0 + 6LL) & 2) == 0 )
      goto LABEL_18;
    if ( v14 == 10 )
    {
      if ( *(_QWORD *)(dnsmasq_daemon_0 + 1568LL) )
      {
        listena = v2;
        v16 = *(_QWORD *)(dnsmasq_daemon_0 + 1568LL);
        while ( (*(_BYTE *)(v16 + 16) & 2) == 0
             || !(unsigned int)is_same_net6(v16, &source_addr.in6.sin6_addr, *(unsigned int *)(v16 + 20)) )
        {
          v16 = *(_QWORD *)(v16 + 24);
          if ( !v16 )
            goto LABEL_86;
        }
        v2 = listena;
        goto LABEL_18;
      }
LABEL_86:
      if ( !warned_2 )
      {
        my_syslog(4LL, "Ignoring query from non-local network");
        warned_2 = 1;
      }
      return;
    }
  }
  if ( !*(_QWORD *)(v15 + 1568) )
    goto LABEL_86;
  local_auth = v2;
  v23 = *(unsigned int **)(v15 + 1568);
  while ( 1 )
  {
    v24 = _byteswap_ulong(-1 << (32 - *((_BYTE *)v23 + 20)));
    if ( (v23[4] & 2) == 0 )
    {
      v25 = is_same_net(*v23, source_addr.in.sin_addr.s_addr, v24);
      p_dst_addr = (all_addr *)(&loc_1E + 2);
      if ( v25 )
        break;
    }
    v23 = (unsigned int *)*((_QWORD *)v23 + 3);
    if ( !v23 )
      goto LABEL_86;
  }
  v2 = local_auth;
LABEL_18:
  if ( !v8 )
  {
    v32 = dnsmasq_daemon_0;
    goto LABEL_55;
  }
  if ( msg.msg_controllen > 0xF )
  {
    v17 = v2->family;
    if ( v17 == 2 )
    {
      msg_control = (char *)msg.msg_control;
      v8 = 0;
      if ( msg.msg_control )
      {
        v27 = (char *)msg.msg_control + msg.msg_controllen;
        if ( *((_QWORD *)msg.msg_control + 1) == 0x800000000LL )
        {
LABEL_42:
          s_addr = *((_DWORD *)msg_control + 5);
          v8 = *((_DWORD *)msg_control + 4);
          dst_addr.addr.addr4.s_addr = s_addr;
        }
        while ( 1 )
        {
          v28 = *(_QWORD *)msg_control;
          v29 = (-*(_DWORD *)msg_control & 7) + 16LL;
          if ( *(_QWORD *)msg_control <= 0xFuLL || v29 > v27 - msg_control || v28 > v27 - msg_control - v29 )
            break;
          msg_control += (v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
          if ( *((_QWORD *)msg_control + 1) == 0x800000000LL )
            goto LABEL_42;
        }
      }
    }
    else if ( v17 == 10 )
    {
      v18 = (const __m128i *)msg.msg_control;
      v8 = 0;
      if ( msg.msg_control )
      {
        v19 = (char *)msg.msg_control + msg.msg_controllen;
        if ( *((_DWORD *)msg.msg_control + 2) == 41 )
          goto LABEL_28;
        while ( 1 )
        {
          v20 = v18->m128i_i64[0];
          v21 = (-v18->m128i_i32[0] & 7) + 16LL;
          if ( v18->m128i_i64[0] <= 0xFuLL || v21 > v19 - (char *)v18 || v20 > v19 - (char *)v18 - v21 )
            break;
          v18 = (const __m128i *)((char *)v18 + ((v20 + 7) & 0xFFFFFFFFFFFFFFF8LL));
          if ( v18->m128i_i32[2] == 41 )
          {
LABEL_28:
            if ( v18->m128i_i32[3] == *(_DWORD *)(dnsmasq_daemon_0 + 1560LL) )
            {
              v8 = v18[2].m128i_u32[0];
              dst_addr = (all_addr)_mm_loadu_si128(v18 + 1);
            }
          }
        }
      }
    }
    else
    {
      v8 = 0;
    }
    if ( (unsigned int)indextoname((unsigned int)v2->fd, v8, &ifr) )
    {
      v30 = iface_check((unsigned int)v2->family, &dst_addr, &ifr, &auth_dns);
      p_dst_addr = &dst_addr;
      p_ifr = &ifr;
      if ( v30 )
        goto LABEL_54;
      if ( *(char *)(dnsmasq_daemon_0 + 4LL) >= 0 )
        enumerate_interfaces(0LL);
      v31 = loopback_exception((unsigned int)v2->fd, (unsigned int)v2->family, &dst_addr, &ifr);
      p_dst_addr = &dst_addr;
      if ( v31 || (unsigned int)label_exception(v8, (unsigned int)v2->family, &dst_addr) )
      {
LABEL_54:
        v32 = dnsmasq_daemon_0;
        if ( v2->family == 2 && (*dnsmasq_daemon_0 & 0x40000) != 0 )
        {
          v52 = *(_QWORD *)(dnsmasq_daemon_0 + 904LL);
          if ( v52 )
          {
            v53 = *(_QWORD *)(dnsmasq_daemon_0 + 904LL);
            while ( *(_WORD *)v53 != 2 || *(_DWORD *)(v53 + 4) != s_addr )
            {
              v53 = *(_QWORD *)(v53 + 88);
              if ( !v53 )
              {
                if ( *(char *)(dnsmasq_daemon_0 + 4LL) < 0 )
                  break;
                goto LABEL_104;
              }
            }
LABEL_97:
            while ( *(_WORD *)v52 != 2 || *(_DWORD *)(v52 + 4) != s_addr )
            {
              v52 = *(_QWORD *)(v52 + 88);
              if ( !v52 )
                goto LABEL_105;
            }
            v57 = *(_DWORD *)(v52 + 28);
          }
          else
          {
            if ( *(char *)(dnsmasq_daemon_0 + 4LL) >= 0 )
            {
LABEL_104:
              enumerate_interfaces(0LL);
              v32 = dnsmasq_daemon_0;
              v52 = *(_QWORD *)(dnsmasq_daemon_0 + 904LL);
              if ( v52 )
                goto LABEL_97;
            }
LABEL_105:
            s_addr = 0;
          }
        }
LABEL_55:
        v33 = *(_DWORD *)(v32 + 1576);
        *(_QWORD *)(v32 + 1584) = &source_addr;
        *(_DWORD *)(v32 + 1576) = v33 + 1;
        *(_DWORD *)(v32 + 1580) = v33 + 1;
        if ( (unsigned int)extract_request(v4, v11, *(_QWORD *)(v32 + 864), &type, p_ifr, p_dst_addr) )
        {
          v34 = "auth";
          if ( !auth_dns )
            v34 = "query";
          v35 = querystr(v34, type);
          if ( v2->family == 2 )
            log_query(524424LL, *(_QWORD *)(dnsmasq_daemon_0 + 864LL), &source_addr.in6.sin6_flowinfo, v35);
          else
            log_query(524552LL, *(_QWORD *)(dnsmasq_daemon_0 + 864LL), &source_addr.in6.sin6_addr, v35);
          v36 = auth_dns;
          v37 = dnsmasq_daemon_0;
          if ( auth_dns )
          {
            v36 = 0;
          }
          else if ( (*dnsmasq_daemon_0 & 0x40000) == 0 && *(_QWORD *)(dnsmasq_daemon_0 + 144LL) )
          {
            local_autha = v2;
            v38 = dnsmasq_daemon_0;
            v39 = *(_QWORD *)(dnsmasq_daemon_0 + 144LL);
            do
            {
              if ( (unsigned int)in_zone(v39, *(_QWORD *)(v38 + 864), 0LL) )
              {
                auth_dns = 1;
                v2 = local_autha;
                v36 = 1;
                v37 = dnsmasq_daemon_0;
                goto LABEL_67;
              }
              v39 = *(_QWORD *)(v39 + 32);
              v38 = dnsmasq_daemon_0;
            }
            while ( v39 );
            v36 = 0;
            v2 = local_autha;
            v37 = dnsmasq_daemon_0;
          }
LABEL_67:
          local_authc = v36;
          v40 = detect_loop(*(_QWORD *)(v37 + 864), type);
          v41 = local_authc;
          if ( v40 )
            return;
        }
        else
        {
          v41 = 0;
        }
        local_authb = v41;
        if ( find_pseudoheader(v4, v11, 0LL, &t_cp, 0LL, 0LL) )
        {
          v42 = *(_WORD *)t_cp;
          v43 = t_cp + 6;
          t_cp += 4;
          v44 = *((_WORD *)v43 - 1);
          t_cp = v43;
          v45 = __ROL2__(v42, 8);
          ad_reqd = (unsigned int)(__int16)__ROL2__(v44, 8) >> 31;
          LOWORD(v46) = *(_WORD *)(dnsmasq_daemon_0 + 768LL);
          if ( v45 <= (unsigned __int16)v46 )
            LOWORD(v46) = v45;
          v47 = 1LL;
          v46 = (unsigned __int16)v46;
        }
        else
        {
          v47 = 0LL;
          v46 = 512LL;
        }
        v48 = (char *)v4 + v46;
        if ( auth_dns )
        {
          v51 = answer_auth(v4, v48, v11, now, &source_addr, local_authb, ad_reqd, v47);
          if ( v51 )
          {
            send_from(v2->fd, (*dnsmasq_daemon_0 & 0x8000002000LL) != 0, (char *)v4, v51, &source_addr, &dst_addr, v8);
            ++*(_DWORD *)(dnsmasq_daemon_0 + 880LL);
          }
        }
        else
        {
          v49 = 1LL;
          if ( (v4->hb4 & 0x20) == 0 )
            v49 = ad_reqd;
          v54 = ad_reqd;
          ad_reqda = v49;
          v50 = answer_request(v4, v48, v11, s_addr, v57, now, v49, v54, v47);
          if ( v50 )
          {
            send_from(v2->fd, (*dnsmasq_daemon_0 & 0x8000002000LL) != 0, (char *)v4, v50, &source_addr, &dst_addr, v8);
            ++*(_DWORD *)(dnsmasq_daemon_0 + 872LL);
          }
          else if ( forward_query(v2->fd, &source_addr, &dst_addr, v8, v4, v11, now, 0LL, ad_reqda, have_pseudoheader) )
          {
            ++*(_DWORD *)(dnsmasq_daemon_0 + 876LL);
          }
          else
          {
            ++*(_DWORD *)(dnsmasq_daemon_0 + 872LL);
          }
        }
      }
    }
  }
}
