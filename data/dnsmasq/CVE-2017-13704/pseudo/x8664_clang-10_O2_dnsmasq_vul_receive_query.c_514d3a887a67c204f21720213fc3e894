void __fastcall receive_query(listener *listen, time_t now)
{
  __int64 v4; // rax
  dns_header *v5; // r15
  bool v6; // r13
  in_addr_t s_addr; // esi
  irec *iface; // rcx
  unsigned int v9; // edx
  ssize_t v10; // rax
  size_t v11; // r12
  int family; // eax
  time_t v13; // r14
  int v14; // r8d
  __int64 v15; // r13
  _DWORD *msg_control; // rdx
  char *v17; // rsi
  unsigned __int64 v18; // rdi
  _QWORD *v19; // rdi
  bool v20; // zf
  unsigned int *v21; // rcx
  char *v22; // rax
  unsigned __int64 v23; // rsi
  unsigned int *v24; // rsi
  __int64 v25; // rax
  int v26; // esi
  __int64 v27; // rdx
  unsigned int *v28; // r14
  __int64 v29; // rax
  int v30; // ecx
  const char *v31; // rdi
  __int64 v32; // rax
  in6_addr *p_sin6_flowinfo; // rdx
  __int64 v34; // rdi
  __int64 v35; // rax
  __int64 v36; // r14
  __int64 v37; // rbp
  __int64 v38; // rcx
  unsigned __int16 v39; // dx
  unsigned int v40; // eax
  __int64 v41; // rax
  __int64 v42; // rsi
  size_t v43; // rax
  int v44; // esi
  time_t v45; // r9
  int v46; // r14d
  int v47; // r13d
  __int64 v48; // rcx
  size_t v49; // rax
  int fd; // edi
  int v51; // [rsp-8h] [rbp-130h]
  int dns_auth; // [rsp+0h] [rbp-128h] BYREF
  unsigned __int16 v53; // [rsp+6h] [rbp-122h] BYREF
  unsigned int dst_iface[2]; // [rsp+8h] [rbp-120h]
  time_t v55; // [rsp+10h] [rbp-118h]
  unsigned int v56; // [rsp+1Ch] [rbp-10Ch]
  all_addr source; // [rsp+20h] [rbp-108h] BYREF
  mysockaddr to; // [rsp+38h] [rbp-F0h] BYREF
  struct msghdr message; // [rsp+58h] [rbp-D0h] BYREF
  __int64 v60[3]; // [rsp+90h] [rbp-98h] BYREF
  __int64 v61[5]; // [rsp+A8h] [rbp-80h] BYREF
  char v62; // [rsp+D0h] [rbp-58h] BYREF

  v4 = dnsmasq_daemon;
  v5 = *(dns_header **)(dnsmasq_daemon + 848LL);
  dns_auth = 0;
  v6 = 1;
  if ( (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) != 0 )
    v6 = listen->family == 10;
  *(_QWORD *)(dnsmasq_daemon + 944LL) = 0LL;
  source.addr.addr4.s_addr = 0;
  s_addr = 0;
  if ( (*(_BYTE *)(v4 + 1) & 0x20) != 0 && (iface = listen->iface) != 0LL )
  {
    dns_auth = iface->dns_auth;
    v9 = 0;
    if ( listen->family == 2 )
    {
      s_addr = iface->addr.in.sin_addr.s_addr;
      source.addr.addr4.s_addr = s_addr;
      v9 = iface->netmask.s_addr;
    }
  }
  else
  {
    v9 = 0;
  }
  v56 = v9;
  LODWORD(v55) = s_addr;
  v60[0] = (__int64)v5;
  v60[1] = *(unsigned __int16 *)(v4 + 768);
  message.msg_control = &v62;
  message.msg_controllen = 40LL;
  message.msg_flags = 0;
  message.msg_name = &to;
  message.msg_namelen = 28;
  message.msg_iov = (iovec *)v60;
  message.msg_iovlen = 1LL;
  v10 = recvmsg(listen->fd, &message, 0);
  if ( v10 < 12 || (message.msg_flags & 0x20) != 0 || (v5->hb3 & 0x80u) != 0 )
    return;
  v11 = v10;
  family = listen->family;
  to.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !to.in.sin_port )
      return;
  }
  else
  {
    if ( !to.in.sin_port )
      return;
    to.in.sin_addr.s_addr = 0;
  }
  if ( (*(_BYTE *)(dnsmasq_daemon + 6LL) & 2) != 0 )
  {
    v28 = *(unsigned int **)(dnsmasq_daemon + 1568LL);
    if ( family == 10 )
    {
      while ( v28 )
      {
        if ( (v28[4] & 2) != 0 && (unsigned int)is_same_net6(v28, &to.in6.sin6_addr, v28[5]) )
          goto LABEL_17;
        v28 = (unsigned int *)*((_QWORD *)v28 + 3);
      }
    }
    else
    {
      while ( v28 )
      {
        if ( (v28[4] & 2) == 0
          && (unsigned int)is_same_net(*v28, to.in.sin_addr.s_addr, _byteswap_ulong(-1 << -*((_BYTE *)v28 + 20))) )
        {
          goto LABEL_17;
        }
        v28 = (unsigned int *)*((_QWORD *)v28 + 3);
      }
    }
    if ( !receive_query_warned )
    {
      my_syslog(4LL, "Ignoring query from non-local network");
      receive_query_warned = 1;
    }
    return;
  }
LABEL_17:
  *(_QWORD *)dst_iface = 0LL;
  if ( !v6 )
  {
    v15 = 0LL;
    v13 = now;
    goto LABEL_64;
  }
  if ( message.msg_controllen < 0x10 )
    return;
  v13 = now;
  v14 = listen->family;
  v15 = 0LL;
  if ( v14 == 2 )
  {
    msg_control = message.msg_control;
    v15 = 0LL;
    if ( !message.msg_control )
      goto LABEL_39;
    v17 = (char *)message.msg_control + message.msg_controllen;
    do
    {
      if ( !msg_control[2] && msg_control[3] == 8 )
      {
        LODWORD(v55) = msg_control[5];
        source.addr.addr4.s_addr = v55;
        v15 = (unsigned int)msg_control[4];
      }
      if ( *(_QWORD *)msg_control < 0x10uLL )
        break;
      v18 = (*(_QWORD *)msg_control + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if ( (char *)msg_control + v18 + 16 > v17 )
        break;
      v19 = (_QWORD *)((char *)msg_control + v18);
      if ( (char *)v19 + ((*v19 + 7LL) & 0xFFFFFFFFFFFFFFF8LL) > v17 )
        break;
      v20 = msg_control == 0LL;
      msg_control = v19;
    }
    while ( !v20 );
  }
  if ( v14 == 10 )
  {
    v21 = (unsigned int *)message.msg_control;
    if ( message.msg_control )
    {
      v22 = (char *)message.msg_control + message.msg_controllen;
      do
      {
        if ( v21[2] == 41 && v21[3] == *(_DWORD *)(dnsmasq_daemon + 1560LL) )
        {
          source = (all_addr)*((_OWORD *)v21 + 1);
          v15 = v21[8];
        }
        if ( *(_QWORD *)v21 < 0x10uLL )
          break;
        v23 = (*(_QWORD *)v21 + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if ( (char *)v21 + v23 + 16 > v22 )
          break;
        v24 = (unsigned int *)((char *)v21 + v23);
        if ( (char *)v24 + ((*(_QWORD *)v24 + 7LL) & 0xFFFFFFFFFFFFFFF8LL) > v22 )
          break;
        v20 = v21 == 0LL;
        v21 = v24;
      }
      while ( !v20 );
    }
  }
LABEL_39:
  if ( (unsigned int)indextoname((unsigned int)listen->fd, (unsigned int)v15, v61) )
  {
    if ( (unsigned int)iface_check((unsigned int)listen->family, &source, v61, &dns_auth) )
      goto LABEL_46;
    if ( *(char *)(dnsmasq_daemon + 4LL) >= 0 )
      enumerate_interfaces(0LL);
    if ( (unsigned int)loopback_exception((unsigned int)listen->fd, (unsigned int)listen->family, &source, v61)
      || (unsigned int)label_exception((unsigned int)v15, (unsigned int)listen->family, &source) )
    {
LABEL_46:
      if ( listen->family == 2 && (*(_BYTE *)(dnsmasq_daemon + 2LL) & 4) != 0 )
      {
        v25 = *(_QWORD *)(dnsmasq_daemon + 904LL);
        v26 = v55;
        if ( v25 )
        {
          v27 = *(_QWORD *)(dnsmasq_daemon + 904LL);
          while ( *(_WORD *)v27 != 2 || *(_DWORD *)(v27 + 4) != (_DWORD)v55 )
          {
            v27 = *(_QWORD *)(v27 + 88);
            if ( !v27 )
              goto LABEL_103;
          }
        }
        else
        {
LABEL_103:
          if ( *(char *)(dnsmasq_daemon + 4LL) >= 0 )
          {
            enumerate_interfaces(0LL);
            v26 = v55;
            v25 = *(_QWORD *)(dnsmasq_daemon + 904LL);
          }
        }
        if ( v25 )
        {
          while ( *(_WORD *)v25 != 2 || *(_DWORD *)(v25 + 4) != v26 )
          {
            v25 = *(_QWORD *)(v25 + 88);
            if ( !v25 )
              goto LABEL_106;
          }
          v56 = *(_DWORD *)(v25 + 28);
        }
        else
        {
LABEL_106:
          LODWORD(v55) = 0;
        }
      }
LABEL_64:
      v29 = dnsmasq_daemon;
      v30 = *(_DWORD *)(dnsmasq_daemon + 1576LL) + 1;
      *(_DWORD *)(dnsmasq_daemon + 1576LL) = v30;
      *(_DWORD *)(v29 + 1580) = v30;
      *(_QWORD *)(v29 + 1584) = &to;
      if ( !(unsigned int)extract_request(v5, v11, *(_QWORD *)(v29 + 864), &v53) )
      {
LABEL_85:
        v37 = 0LL;
        if ( find_pseudoheader(v5, v11, 0LL, v61, 0LL, 0LL) )
        {
          v38 = v61[0];
          v39 = __ROL2__(*(_WORD *)v61[0], 8);
          v61[0] += 4LL;
          v40 = *(unsigned __int8 *)v61[0];
          v61[0] = v38 + 6;
          v41 = v40 >> 7;
          if ( v39 > (unsigned __int16)*(_DWORD *)(dnsmasq_daemon + 768LL) )
            v39 = *(_DWORD *)(dnsmasq_daemon + 768LL);
          v42 = v39;
          v37 = 1LL;
        }
        else
        {
          v42 = 512LL;
          v41 = 0LL;
        }
        if ( dns_auth )
        {
          v43 = answer_auth(v5, (char *)v5 + v42, v11, v13, &to, *(_QWORD *)dst_iface, v41, v37);
          if ( v43 )
          {
            v44 = 1;
            if ( (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) == 0 )
              v44 = (*(_DWORD *)(dnsmasq_daemon + 4LL) >> 7) & 1;
            send_from(listen->fd, v44, (char *)v5, v43, &to, &source, v15);
            ++*(_DWORD *)(dnsmasq_daemon + 880LL);
          }
        }
        else
        {
          *(_QWORD *)dst_iface = v15;
          v45 = v13;
          v46 = 1;
          v47 = 1;
          if ( (v5->hb4 & 0x20) == 0 )
            v47 = v41;
          v48 = (unsigned int)v55;
          v55 = v45;
          v49 = answer_request(v5, (char *)v5 + v42, v11, v48, v56);
          fd = listen->fd;
          if ( v49 )
          {
            if ( (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) == 0 )
              v46 = (*(_DWORD *)(dnsmasq_daemon + 4LL) >> 7) & 1;
            send_from(fd, v46, (char *)v5, v49, &to, &source, dst_iface[0]);
            ++*(_DWORD *)(dnsmasq_daemon + 872LL);
          }
          else if ( forward_query(fd, &to, &source, dst_iface[0], v5, v11, v55, 0LL, v47, v51) )
          {
            ++*(_DWORD *)(dnsmasq_daemon + 876LL);
          }
          else
          {
            ++*(_DWORD *)(dnsmasq_daemon + 872LL);
          }
        }
        return;
      }
      v31 = "auth";
      if ( !dns_auth )
        v31 = "query";
      v32 = querystr(v31, v53);
      if ( listen->family == 2 )
      {
        p_sin6_flowinfo = (in6_addr *)&to.in6.sin6_flowinfo;
        v34 = 524424LL;
      }
      else
      {
        p_sin6_flowinfo = &to.in6.sin6_addr;
        v34 = 524552LL;
      }
      log_query(v34, *(_QWORD *)(dnsmasq_daemon + 864LL), p_sin6_flowinfo, v32);
      if ( dns_auth )
      {
        v35 = 0LL;
LABEL_76:
        *(_QWORD *)dst_iface = v35;
        goto LABEL_84;
      }
      *(_QWORD *)dst_iface = 0LL;
      if ( (*(_BYTE *)(dnsmasq_daemon + 2LL) & 4) == 0 )
      {
        v36 = *(_QWORD *)(dnsmasq_daemon + 144LL);
        if ( v36 )
        {
          if ( (unsigned int)in_zone(*(_QWORD *)(dnsmasq_daemon + 144LL), *(_QWORD *)(dnsmasq_daemon + 864LL), 0LL) )
          {
LABEL_83:
            dns_auth = 1;
            v35 = 1LL;
            goto LABEL_76;
          }
          *(_QWORD *)dst_iface = 0LL;
          while ( 1 )
          {
            v36 = *(_QWORD *)(v36 + 32);
            if ( !v36 )
              break;
            if ( (unsigned int)in_zone(v36, *(_QWORD *)(dnsmasq_daemon + 864LL), 0LL) )
              goto LABEL_83;
          }
        }
      }
LABEL_84:
      v13 = now;
      if ( (unsigned int)detect_loop(*(_QWORD *)(dnsmasq_daemon + 864LL), v53) )
        return;
      goto LABEL_85;
    }
  }
}
