void __cdecl receive_query(listener *listen, time_t now)
{
  const signed __int32 *v2; // eax
  int v3; // edx
  irec *iface; // edx
  bool v5; // zf
  int s_addr; // edi
  size_t v7; // eax
  int v8; // ecx
  int family; // eax
  mysockaddr *p_source_addr; // edi
  const signed __int32 *v11; // edx
  signed __int32 v12; // esi
  unsigned __int32 v13; // eax
  struct cmsghdr *i; // eax
  struct cmsghdr *j; // eax
  signed __int32 k; // eax
  signed __int32 m; // eax
  const signed __int32 *v18; // eax
  signed __int32 v19; // edi
  int v20; // eax
  int v21; // ecx
  const char *v22; // eax
  int v23; // eax
  int v24; // edx
  int v25; // eax
  int v26; // esi
  signed __int32 ii; // esi
  __int16 v28; // dx
  __int16 v29; // ax
  char v30; // t0
  signed __int32 v31; // eax
  char v32; // t1
  int v33; // edx
  char *v34; // eax
  size_t v35; // edx
  int v36; // eax
  size_t v37; // esi
  size_t v38; // edx
  int v39; // eax
  int v40; // [esp+4h] [ebp-D4h]
  int do_bit; // [esp+8h] [ebp-D0h]
  int n; // [esp+Ch] [ebp-CCh]
  in_addr dst_addr_4; // [esp+10h] [ebp-C8h]
  int check_dst; // [esp+14h] [ebp-C4h]
  mysockaddr *header; // [esp+18h] [ebp-C0h]
  unsigned __int16 type; // [esp+22h] [ebp-B6h] BYREF
  unsigned __int8 *t_cp; // [esp+24h] [ebp-B4h] BYREF
  int auth_dns; // [esp+28h] [ebp-B0h] BYREF
  msghdr msg; // [esp+2Ch] [ebp-ACh] BYREF
  iovec iov[1]; // [esp+48h] [ebp-90h] BYREF
  all_addr dst_addr; // [esp+50h] [ebp-88h] BYREF
  mysockaddr source_addr; // [esp+60h] [ebp-78h] BYREF
  union {cmsghdr align;char control6[32];char control[24];} control_u; // [esp+7Ch] [ebp-5Ch] BYREF
  ifreq ifr; // [esp+9Ch] [ebp-3Ch] BYREF
  unsigned int v55; // [esp+BCh] [ebp-1Ch]

  v55 = __readgsdword(0x14u);
  auth_dns = 0;
  check_dst = 1;
  v2 = dnsmasq_daemon_0;
  header = (mysockaddr *)dnsmasq_daemon_0[119];
  v3 = *dnsmasq_daemon_0 & 0x2000;
  if ( v3 )
    check_dst = listen->family == 10;
  *((_DWORD *)dnsmasq_daemon_0 + 132) = 0;
  dst_addr.addr.addr4.s_addr = 0;
  v40 = 0;
  if ( v3 && (iface = listen->iface) != 0 && (v5 = listen->family == 2, auth_dns = iface->dns_auth, v5) )
  {
    s_addr = iface->netmask.s_addr;
    dst_addr.addr.addr4.s_addr = iface->addr.in.sin_addr.s_addr;
    dst_addr_4.s_addr = dst_addr.addr.addr4.s_addr;
    v40 = s_addr;
  }
  else
  {
    dst_addr_4.s_addr = 0;
  }
  v7 = *((unsigned __int16 *)v2 + 216);
  msg.msg_controllen = 32;
  msg.msg_namelen = 28;
  iov[0].iov_len = v7;
  msg.msg_control = &control_u;
  iov[0].iov_base = header;
  msg.msg_name = &source_addr;
  msg.msg_iov = iov;
  msg.msg_flags = 0;
  msg.msg_iovlen = 1;
  n = recvmsg(listen->fd, &msg, 0);
  if ( n <= 11 )
    return;
  do_bit = msg.msg_flags & 0x20;
  if ( (msg.msg_flags & 0x20) != 0 || header->sa.sa_data[0] < 0 )
    return;
  family = listen->family;
  source_addr.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
  }
  else
  {
    if ( !source_addr.in.sin_port )
      return;
    source_addr.in.sin_addr.s_addr = 0;
  }
  p_source_addr = (mysockaddr *)&dnsmasq_daemon_0;
  v11 = dnsmasq_daemon_0;
  if ( (*((_BYTE *)dnsmasq_daemon_0 + 6) & 2) == 0 )
  {
LABEL_31:
    if ( check_dst )
    {
      if ( msg.msg_controllen <= 0xB )
        return;
      check_dst = 0;
      if ( listen->family == 2 )
      {
        for ( i = (struct cmsghdr *)msg.msg_control; i; i = _cmsg_nxthdr(&msg, i) )
        {
          if ( !i->cmsg_level && i->cmsg_type == 8 )
          {
            p_source_addr = *(mysockaddr **)i->__cmsg_data;
            dst_addr.addr.addr4.s_addr = *(_DWORD *)&i->__cmsg_data[4];
            dst_addr_4.s_addr = dst_addr.addr.addr4.s_addr;
            check_dst = (int)p_source_addr;
          }
        }
      }
      j = (struct cmsghdr *)listen;
      if ( listen->family == 10 && msg.msg_controllen > 0xB )
      {
        for ( j = (struct cmsghdr *)msg.msg_control; j; j = _cmsg_nxthdr(&msg, j) )
        {
          if ( j->cmsg_level == 41 )
          {
            p_source_addr = (mysockaddr *)dnsmasq_daemon_0[283];
            if ( (mysockaddr *)j->cmsg_type == p_source_addr )
            {
              qmemcpy(&dst_addr, j->__cmsg_data, sizeof(dst_addr));
              p_source_addr = &source_addr;
              check_dst = *(_DWORD *)&j->__cmsg_data[16];
            }
          }
        }
      }
      if ( !indextoname(listen->fd, check_dst, &ifr, j) )
        return;
      if ( !iface_check(listen->family, &dst_addr, &ifr, &auth_dns) )
      {
        if ( *((char *)dnsmasq_daemon_0 + 4) >= 0 )
          enumerate_interfaces(0);
        if ( !loopback_exception(listen->fd, listen->family, &dst_addr, &ifr)
          && !label_exception(check_dst, listen->family, &dst_addr, p_source_addr) )
        {
          return;
        }
      }
      if ( listen->family == 2 && _bittest(dnsmasq_daemon_0, 0x12u) )
      {
        for ( k = dnsmasq_daemon_0[127]; k; k = *(_DWORD *)(k + 80) )
        {
          if ( *(_WORD *)k == 2 && *(_DWORD *)(k + 4) == dst_addr_4.s_addr )
            goto LABEL_65;
        }
        if ( *((char *)dnsmasq_daemon_0 + 4) >= 0 )
          enumerate_interfaces(0);
LABEL_65:
        for ( m = dnsmasq_daemon_0[127]; ; m = *(_DWORD *)(m + 80) )
        {
          if ( !m )
          {
            dst_addr_4.s_addr = 0;
            goto LABEL_72;
          }
          if ( *(_WORD *)m == 2 && *(_DWORD *)(m + 4) == dst_addr_4.s_addr )
            break;
        }
        v40 = *(_DWORD *)(m + 28);
      }
    }
LABEL_72:
    v18 = dnsmasq_daemon_0;
    v19 = dnsmasq_daemon_0[285];
    *((_DWORD *)dnsmasq_daemon_0 + 285) = v19 + 1;
    *((_DWORD *)v18 + 286) = v19 + 1;
    *((_DWORD *)v18 + 287) = &source_addr;
    v20 = extract_request(header, n, v18[121], &type);
    if ( v20 )
    {
      v22 = "query";
      if ( auth_dns )
        v22 = "auth";
      v23 = querystr(v22, type, v21, v21);
      if ( listen->family == 2 )
        log_query(524424, dnsmasq_daemon_0[121], &source_addr.in6.sin6_flowinfo, v23);
      else
        log_query(524552, dnsmasq_daemon_0[121], &source_addr.in6.sin6_addr, v23);
      v25 = (int)dnsmasq_daemon_0;
      if ( !auth_dns && !_bittest(dnsmasq_daemon_0, 0x12u) )
      {
        for ( ii = dnsmasq_daemon_0[20]; ; ii = *(_DWORD *)(ii + 16) )
        {
          v25 = dnsmasq_daemon_0[121];
          if ( !ii )
            break;
          v25 = in_zone(ii, v25, 0, v24);
          if ( v25 )
          {
            auth_dns = 1;
            v26 = 1;
            goto LABEL_86;
          }
        }
      }
      v26 = 0;
LABEL_86:
      v20 = detect_loop(dnsmasq_daemon_0[121], type, v25, v25);
      if ( v20 )
        return;
    }
    else
    {
      v26 = 0;
    }
    if ( find_pseudoheader(header, n, 0, &t_cp, 0, 0, v20, v20) )
    {
      v28 = *((_WORD *)t_cp + 2);
      v29 = *(_WORD *)t_cp;
      t_cp += 6;
      v30 = HIBYTE(v28);
      HIBYTE(v28) = v28;
      LOBYTE(v28) = v30;
      v32 = HIBYTE(v29);
      BYTE1(v31) = v29;
      LOBYTE(v31) = v32;
      do_bit = (unsigned int)v28 >> 31;
      if ( (unsigned __int16)v31 > (unsigned __int16)dnsmasq_daemon_0[108] )
        v31 = dnsmasq_daemon_0[108];
      v33 = 1;
    }
    else
    {
      v33 = 0;
      LOWORD(v31) = 512;
    }
    v34 = (char *)header + (unsigned __int16)v31;
    if ( auth_dns )
    {
      v35 = answer_auth(header, v34, n, now, &source_addr, v26, do_bit, v33);
      if ( v35 )
      {
        v36 = 1;
        if ( !_bittest(dnsmasq_daemon_0, 0xDu) )
          v36 = ((unsigned __int32)dnsmasq_daemon_0[1] >> 7) & 1;
        send_from(listen->fd, v36, (char *)header, v35, &source_addr, &dst_addr, check_dst);
        ++dnsmasq_daemon_0[124];
      }
    }
    else
    {
      v37 = 1;
      if ( (header->sa.sa_data[1] & 0x20) == 0 )
        v37 = do_bit;
      v38 = answer_request(header, v34, n, dst_addr_4.s_addr, v40, now, v37, do_bit, v33);
      if ( v38 )
      {
        v39 = 1;
        if ( !_bittest(dnsmasq_daemon_0, 0xDu) )
          v39 = ((unsigned __int32)dnsmasq_daemon_0[1] >> 7) & 1;
        send_from(listen->fd, v39, (char *)header, v38, &source_addr, &dst_addr, check_dst);
        ++dnsmasq_daemon_0[122];
      }
      else if ( forward_query(check_dst, header, (all_addr *)n, now, 0, v37, 0, 0, (int)&dnsmasq_daemon_0, v40) )
      {
        ++dnsmasq_daemon_0[123];
      }
      else
      {
        ++dnsmasq_daemon_0[122];
      }
    }
    return;
  }
  v12 = dnsmasq_daemon_0[284];
  if ( family == 10 )
  {
    while ( v12 )
    {
      if ( (*(_BYTE *)(v12 + 16) & 2) != 0 && is_same_net6(v12, &source_addr.in6.sin6_addr, *(_DWORD *)(v12 + 20), v8) )
        goto LABEL_31;
      v12 = *(_DWORD *)(v12 + 24);
    }
  }
  else
  {
    while ( v12 )
    {
      v13 = _byteswap_ulong(-1 << (32 - *(_BYTE *)(v12 + 20)));
      if ( (*(_BYTE *)(v12 + 16) & 2) == 0 && is_same_net(*(_DWORD *)v12, source_addr.in.sin_addr.s_addr, v13, v11) )
        goto LABEL_31;
      v12 = *(_DWORD *)(v12 + 24);
    }
  }
  if ( !warned_2 )
  {
    my_syslog(4, "Ignoring query from non-local network", &dnsmasq_daemon_0, &dnsmasq_daemon_0);
    warned_2 = 1;
  }
}
