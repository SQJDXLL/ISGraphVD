void __fastcall receive_query(listener *listen, time_t now)
{
  int v2; // $v0
  int s_addr; // $s1
  dns_header *v4; // $s4
  unsigned int iface; // $s6
  int family; // $a0
  irec *v8; // $v1
  int fd; // $a0
  int v10; // $a1
  signed int v11; // $s2
  int v12; // $s7
  int v13; // $v0
  int v14; // $v1
  int v15; // $a0
  int v16; // $fp
  in6_addr *p_sin6_addr; // $a1
  size_t (*v18)(dns_header *, time_t, server *, size_t, int, int, int, int, int, int, int, int, mysockaddr *); // $s0
  int v19; // $v0
  int v20; // $v1
  unsigned int *v21; // $a0
  char *v22; // $a2
  unsigned int v23; // $v1
  unsigned int v24; // $v0
  _BOOL4 v25; // $a1
  unsigned int v26; // $v1
  unsigned int v27; // $a1
  unsigned int v28; // $v1
  uint32_t v29; // $v0
  _DWORD *v30; // $v0
  int v31; // $v1
  int v32; // $a2
  const char *v33; // $a0
  int v34; // $a3
  int v35; // $a1
  int v36; // $v0
  int v37; // $a0
  int v38; // $a1
  unsigned int v39; // $v0
  unsigned int v40; // $a1
  unsigned int v41; // $s7
  unsigned int v42; // $v0
  char *v43; // $a1
  int v44; // $v1
  size_t v45; // $a3
  int v46; // $a1
  _DWORD *v47; // $fp
  int v48; // $v0
  unsigned int *msg_control; // $a0
  char *v50; // $a2
  unsigned int v51; // $v0
  unsigned int v52; // $v1
  unsigned int v53; // $v0
  _BOOL4 v54; // $a1
  unsigned int v55; // $v1
  int v56; // $v1
  int v57; // $a0
  size_t v58; // $a3
  int v59; // $a1
  int v60; // [sp+24h] [-BCh]
  int ad_reqdb; // [sp+3Ch] [-A4h]
  int ad_reqd; // [sp+3Ch] [-A4h]
  int ad_reqda; // [sp+3Ch] [-A4h]
  unsigned __int16 type; // [sp+42h] [-9Eh] BYREF
  unsigned __int8 *t_cp; // [sp+44h] [-9Ch] BYREF
  int auth_dns; // [sp+48h] [-98h] BYREF
  msghdr msg; // [sp+4Ch] [-94h] BYREF
  iovec iov[1]; // [sp+68h] [-78h] BYREF
  all_addr dst_addr; // [sp+70h] [-70h] BYREF
  mysockaddr source_addr; // [sp+80h] [-60h] BYREF
  union {cmsghdr align;char control6[32];char control[24];} control_u; // [sp+9Ch] [-44h] BYREF
  ifreq ifr; // [sp+BCh] [-24h] BYREF

  v2 = dnsmasq_daemon_0;
  s_addr = *dnsmasq_daemon_0 & 0x2000;
  v4 = *(dns_header **)(dnsmasq_daemon_0 + 476);
  auth_dns = 0;
  iface = 1;
  if ( s_addr )
  {
    family = listen->family;
    v8 = listen->iface;
    iface = family == 0xA;
    *(_DWORD *)(dnsmasq_daemon_0 + 528) = 0;
    dst_addr.addr.addr4.s_addr = 0;
    if ( v8 && (auth_dns = v8->dns_auth, family == 2) )
    {
      s_addr = v8->addr.in.sin_addr.s_addr;
      dst_addr.addr.addr4.s_addr = s_addr;
    }
    else
    {
      s_addr = 0;
    }
  }
  else
  {
    *(_DWORD *)(dnsmasq_daemon_0 + 528) = 0;
    dst_addr.addr.addr4.s_addr = 0;
  }
  iov[0].iov_len = *(unsigned __int16 *)(v2 + 432);
  msg.msg_control = &control_u;
  msg.msg_controllen = 32;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  fd = listen->fd;
  iov[0].iov_base = v4;
  msg.msg_flags = 0;
  msg.msg_name = &source_addr;
  msg.msg_iovlen = 1;
  v11 = recvmsg(fd, &msg, 0);
  if ( v11 < 12 )
    return;
  v12 = msg.msg_flags & 0x20;
  if ( (msg.msg_flags & 0x20) != 0 || (v4->hb3 & 0x80u) != 0 )
    return;
  v13 = listen->family;
  source_addr.sa.sa_family = v13;
  if ( v13 == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
    v14 = dnsmasq_daemon_0;
    if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x20000) == 0 )
      goto LABEL_18;
  }
  else
  {
    if ( !source_addr.in.sin_port )
      return;
    v14 = dnsmasq_daemon_0;
    v15 = *(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x20000;
    source_addr.in.sin_addr.s_addr = 0;
    if ( !v15 )
      goto LABEL_18;
    v10 = 10;
    v16 = *(_DWORD *)(dnsmasq_daemon_0 + 1136);
    if ( v13 == 10 )
    {
      p_sin6_addr = &source_addr.in6.sin6_addr;
      if ( !v16 )
      {
        v18 = process_reply;
        goto LABEL_67;
      }
      while ( 1 )
      {
        if ( (*(_DWORD *)(v16 + 16) & 2) != 0 )
        {
          ad_reqdb = (int)p_sin6_addr;
          v19 = is_same_net6(v16);
          p_sin6_addr = (in6_addr *)ad_reqdb;
          if ( v19 )
            goto LABEL_18;
        }
        v16 = *(_DWORD *)(v16 + 24);
        if ( !v16 )
          goto LABEL_66;
      }
    }
  }
  v47 = *(_DWORD **)(v14 + 1136);
  if ( !v47 )
  {
    v18 = process_reply;
LABEL_67:
    if ( !*(_DWORD *)((char *)v18 + (__int16)&warned_2) )
    {
      my_syslog(4, "Ignoring query from non-local network");
      *(_DWORD *)((char *)v18 + (__int16)&warned_2) = 1;
    }
    return;
  }
  while ( 1 )
  {
    v48 = _bswapsi2(-1 << (32 - v47[5]), v10);
    if ( (v47[4] & 2) == 0 )
    {
      if ( is_same_net(*v47, source_addr.in.sin_addr.s_addr, v48) )
        break;
    }
    v47 = (_DWORD *)v47[6];
    if ( !v47 )
    {
LABEL_66:
      v18 = (size_t (*)(dns_header *, time_t, server *, size_t, int, int, int, int, int, int, int, int, mysockaddr *))MEMORY[0xB7F4];
      goto LABEL_67;
    }
  }
LABEL_18:
  if ( !iface )
  {
    v30 = (_DWORD *)dnsmasq_daemon_0;
    goto LABEL_31;
  }
  if ( msg.msg_controllen >= 0xC )
  {
    v20 = listen->family;
    if ( v20 == 2 )
    {
      msg_control = (unsigned int *)msg.msg_control;
      iface = 0;
      if ( msg.msg_control )
      {
        v50 = (char *)msg.msg_control + msg.msg_controllen;
        if ( *((_DWORD *)msg.msg_control + 1) )
          goto LABEL_75;
        v51 = *((_DWORD *)msg.msg_control + 2);
LABEL_73:
        if ( v51 == 8 )
        {
          s_addr = msg_control[4];
          iface = msg_control[3];
          dst_addr.addr.addr4.s_addr = s_addr;
        }
LABEL_75:
        while ( 1 )
        {
          v52 = *msg_control;
          v53 = (-*msg_control & 3) + 12;
          if ( *msg_control < 0xC )
            break;
          if ( v50 - (char *)msg_control < v53 )
            break;
          v54 = v50 - (char *)msg_control - v53 < v52;
          v55 = v52 + 3;
          if ( v54 )
            break;
          msg_control = (unsigned int *)((char *)msg_control + (v55 & 0xFFFFFFFC));
          if ( !msg_control[1] )
          {
            v51 = msg_control[2];
            goto LABEL_73;
          }
        }
      }
    }
    else
    {
      v21 = (unsigned int *)msg.msg_control;
      if ( v20 == 10 && (v22 = (char *)msg.msg_control + msg.msg_controllen, msg.msg_control) )
      {
        iface = 0;
        if ( *((_DWORD *)msg.msg_control + 1) == 41 )
          goto LABEL_28;
        while ( 1 )
        {
          v23 = *v21;
          v24 = (-*v21 & 3) + 12;
          if ( *v21 < 0xC )
            break;
          if ( v22 - (char *)v21 < v24 )
            break;
          v25 = v22 - (char *)v21 - v24 < v23;
          v26 = v23 + 3;
          if ( v25 )
            break;
          v21 = (unsigned int *)((char *)v21 + (v26 & 0xFFFFFFFC));
          if ( v21[1] == 41 )
          {
LABEL_28:
            if ( v21[2] == *(_DWORD *)(dnsmasq_daemon_0 + 1132) )
            {
              v27 = v21[4];
              v28 = v21[5];
              v29 = v21[6];
              iface = v21[7];
              dst_addr.addr.addr4.s_addr = v21[3];
              *(_QWORD *)(&dst_addr.addr.dnssec + 1) = __PAIR64__(v28, v27);
              dst_addr.addr.addr6.__in6_u.__u6_addr32[3] = v29;
            }
          }
        }
      }
      else
      {
        iface = 0;
      }
    }
    if ( indextoname(listen->fd, iface, &ifr) )
    {
      if ( iface_check(listen->family, &dst_addr, &ifr, &auth_dns) )
        goto LABEL_86;
      if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) == 0 )
        enumerate_interfaces(0);
      if ( loopback_exception(listen->fd, listen->family, &dst_addr, &ifr)
        || label_exception(iface, listen->family, &dst_addr) )
      {
LABEL_86:
        v30 = (_DWORD *)dnsmasq_daemon_0;
        if ( listen->family == 2 && (*dnsmasq_daemon_0 & 0x40000) != 0 )
        {
          v56 = *(_DWORD *)(dnsmasq_daemon_0 + 508);
          v57 = v56;
          if ( v56 )
          {
            while ( *(_WORD *)v57 != 2 || *(_DWORD *)(v57 + 4) != s_addr )
            {
              v57 = *(_DWORD *)(v57 + 80);
              if ( !v57 )
              {
                if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) != 0 )
                  break;
                goto LABEL_117;
              }
            }
LABEL_95:
            while ( *(_WORD *)v56 != 2 || *(_DWORD *)(v56 + 4) != s_addr )
            {
              v56 = *(_DWORD *)(v56 + 80);
              if ( !v56 )
                goto LABEL_115;
            }
          }
          else if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) != 0 )
          {
            v30 = (_DWORD *)dnsmasq_daemon_0;
LABEL_115:
            s_addr = 0;
          }
          else
          {
LABEL_117:
            enumerate_interfaces(0);
            v30 = (_DWORD *)dnsmasq_daemon_0;
            v56 = *(_DWORD *)(dnsmasq_daemon_0 + 508);
            if ( v56 )
              goto LABEL_95;
            s_addr = 0;
          }
        }
LABEL_31:
        v31 = v30[285] + 1;
        v30[285] = v31;
        v30[286] = v31;
        v32 = v30[121];
        v30[287] = &source_addr;
        if ( !extract_request(v4, v11, v32, &type) )
        {
LABEL_45:
          if ( find_pseudoheader(v4, v11, 0, &t_cp) )
          {
            v39 = (t_cp[1] << 8) | *t_cp;
            v40 = *(unsigned __int16 *)(dnsmasq_daemon_0 + 432);
            v41 = t_cp[4];
            v42 = (unsigned __int16)(((_WORD)v39 << 8) | (v39 >> 8));
            t_cp += 6;
            if ( v42 < v40 )
              v40 = v42;
            v12 = v41 >> 7;
          }
          else
          {
            v40 = 512;
          }
          v43 = (char *)v4 + v40;
          if ( auth_dns )
          {
            v58 = answer_auth(v4, v43, v11, now);
            if ( v58 )
            {
              if ( (*dnsmasq_daemon_0 & 0x2000) != 0 )
                v59 = 1;
              else
                v59 = (*(_DWORD *)(dnsmasq_daemon_0 + 4) >> 7) & 1;
              send_from(listen->fd, v59, (char *)v4, v58, &source_addr, &dst_addr, iface);
              ++*(_DWORD *)(dnsmasq_daemon_0 + 496);
            }
          }
          else
          {
            v44 = 1;
            if ( (v4->hb4 & 0x20) == 0 )
              v44 = v12;
            ad_reqda = v44;
            v45 = answer_request(v4, v43, v11, s_addr);
            if ( v45 )
            {
              if ( (*dnsmasq_daemon_0 & 0x2000) != 0 )
                v46 = 1;
              else
                v46 = (*(_DWORD *)(dnsmasq_daemon_0 + 4) >> 7) & 1;
              send_from(listen->fd, v46, (char *)v4, v45, &source_addr, &dst_addr, iface);
              ++*(_DWORD *)(dnsmasq_daemon_0 + 488);
            }
            else if ( forward_query(listen->fd, &source_addr, &dst_addr, iface, v4, v11, now, 0u, ad_reqda, v60) )
            {
              ++*(_DWORD *)(dnsmasq_daemon_0 + 492);
            }
            else
            {
              ++*(_DWORD *)(dnsmasq_daemon_0 + 488);
            }
          }
          return;
        }
        if ( auth_dns )
          v33 = "auth";
        else
          v33 = "query";
        v34 = querystr(v33, type);
        v35 = *(_DWORD *)(dnsmasq_daemon_0 + 484);
        if ( listen->family == 2 )
          log_query(524424, v35, &source_addr.in6.sin6_flowinfo, v34);
        else
          log_query(524552, v35, &source_addr.in6.sin6_addr, v34);
        v36 = dnsmasq_daemon_0;
        if ( !auth_dns && (*dnsmasq_daemon_0 & 0x40000) == 0 )
        {
          v37 = *(_DWORD *)(dnsmasq_daemon_0 + 80);
          v38 = type;
          if ( !v37 )
          {
LABEL_44:
            if ( detect_loop(*(_DWORD *)(v36 + 484), v38) )
              return;
            goto LABEL_45;
          }
          while ( 1 )
          {
            ad_reqd = v37;
            if ( in_zone(v37, *(_DWORD *)(v36 + 484), 0) )
              break;
            v37 = *(_DWORD *)(ad_reqd + 16);
            v36 = dnsmasq_daemon_0;
            if ( !v37 )
              goto LABEL_43;
          }
          v36 = dnsmasq_daemon_0;
          auth_dns = 1;
        }
LABEL_43:
        v38 = type;
        goto LABEL_44;
      }
    }
  }
}
