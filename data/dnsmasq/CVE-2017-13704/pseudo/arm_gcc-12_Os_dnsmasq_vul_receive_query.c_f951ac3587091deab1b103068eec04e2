void __fastcall receive_query(listener *listen, time_t now)
{
  int v2; // r9
  int v4; // r3
  dns_header *v5; // r8
  int s_addr; // r4
  int family; // r1
  irec *iface; // r2
  unsigned int v9; // r7
  int fd; // r0
  int v11; // r2
  int v12; // r3
  struct cmsghdr *msg_control; // r1
  int v14; // r10
  in6_addr *p_sin6_addr; // r1
  _DWORD *i; // r10
  int v17; // r2
  int v18; // r0
  char *j; // r12
  int k; // r0
  _DWORD *v21; // r2
  int v22; // r3
  int v23; // r10
  const char *v24; // r0
  int v25; // r0
  int v26; // r2
  bool v27; // zf
  in6_addr *p_sin6_flowinfo; // r2
  int v29; // r3
  int v30; // r0
  int pseudoheader; // r0
  unsigned int v32; // r1
  unsigned int v33; // r1
  int v34; // r3
  unsigned int v35; // r1
  char *v36; // r1
  size_t v37; // r3
  unsigned int v38; // r1
  uint32_t v39; // r1
  __int64 v40; // r2
  int m; // r3
  int n; // r10
  int v43; // r10
  size_t v44; // r3
  int v45; // r12
  unsigned int v46; // r1
  int v47; // r2
  int v48; // r0
  int do_bit; // [sp+14h] [bp-DCh]
  time_t nowa; // [sp+18h] [bp-D8h]
  int v51; // [sp+1Ch] [bp-D4h]
  unsigned __int8 *t_cp; // [sp+24h] [bp-CCh]
  unsigned __int16 type; // [sp+2Ah] [bp-C6h] BYREF
  unsigned __int8 *pheader; // [sp+2Ch] [bp-C4h]
  int auth_dns; // [sp+30h] [bp-C0h] BYREF
  msghdr msg; // [sp+34h] [bp-BCh] BYREF
  iovec iov[1]; // [sp+50h] [bp-A0h] BYREF
  all_addr dst_addr; // [sp+58h] [bp-98h] BYREF
  mysockaddr source_addr; // [sp+68h] [bp-88h] BYREF
  union {cmsghdr align;char control6[32];char control[24];} control_u; // [sp+84h] [bp-6Ch] BYREF
  ifreq ifr; // [sp+A4h] [bp-4Ch] BYREF

  v2 = 0;
  v4 = dnsmasq_daemon_0;
  auth_dns = 0;
  v5 = *(dns_header **)(dnsmasq_daemon_0 + 476);
  s_addr = *dnsmasq_daemon_0 & 0x2000;
  if ( s_addr )
  {
    family = listen->family;
    iface = listen->iface;
    *(_DWORD *)(dnsmasq_daemon_0 + 528) = 0;
    v9 = family == 0xA;
    dst_addr.addr.addr4.s_addr = 0;
    if ( !iface )
      goto LABEL_3;
    if ( family == 2 )
    {
      s_addr = iface->addr.in.sin_addr.s_addr;
      v2 = iface->netmask.s_addr;
    }
    auth_dns = iface->dns_auth;
    if ( family == 2 )
      dst_addr.addr.addr4.s_addr = s_addr;
    else
LABEL_3:
      s_addr = v2;
  }
  else
  {
    v2 = 0;
    v9 = 1;
    *(_DWORD *)(dnsmasq_daemon_0 + 528) = 0;
    dst_addr.addr.addr4.s_addr = 0;
  }
  iov[0].iov_len = *(unsigned __int16 *)(v4 + 0x1B0);
  msg.msg_control = &control_u;
  msg.msg_controllen = 32;
  msg.msg_name = &source_addr;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  fd = listen->fd;
  iov[0].iov_base = v5;
  msg.msg_flags = 0;
  msg.msg_iovlen = 1;
  nowa = recvmsg(fd, &msg, 0);
  if ( nowa <= 11 )
    return;
  v51 = msg.msg_flags & 0x20;
  if ( (msg.msg_flags & 0x20) != 0 || (v5->hb3 & 0x80u) != 0 )
    return;
  v11 = listen->family;
  source_addr.sa.sa_family = v11;
  if ( v11 != 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
    source_addr.in.sin_addr.s_addr = msg.msg_flags & 0x20;
    v12 = dnsmasq_daemon_0;
    if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x20000) == 0 )
      goto LABEL_11;
    v14 = *(_DWORD *)(dnsmasq_daemon_0 + 1136);
    if ( v11 == 10 )
    {
      p_sin6_addr = &source_addr.in6.sin6_addr;
      while ( v14 )
      {
        if ( (*(_DWORD *)(v14 + 16) & 2) != 0 )
        {
          t_cp = (unsigned __int8 *)p_sin6_addr;
          v18 = is_same_net6(v14);
          p_sin6_addr = (in6_addr *)t_cp;
          if ( v18 )
            goto LABEL_11;
        }
        v14 = *(_DWORD *)(v14 + 24);
      }
      goto LABEL_32;
    }
LABEL_25:
    for ( i = *(_DWORD **)(v12 + 1136); i; i = (_DWORD *)i[6] )
    {
      v17 = _bswapsi2(-1 << (0x20 - i[5]));
      if ( (i[4] & 2) == 0 && is_same_net(*i, source_addr.in.sin_addr.s_addr, v17) )
        goto LABEL_11;
    }
LABEL_32:
    if ( !warned_2 )
    {
      my_syslog(4, "Ignoring query from non-local network");
      warned_2 = 1;
    }
    return;
  }
  if ( !source_addr.in.sin_port )
    return;
  v12 = dnsmasq_daemon_0;
  if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x20000) != 0 )
    goto LABEL_25;
LABEL_11:
  if ( v9 )
  {
    if ( msg.msg_controllen <= 0xB )
      return;
    if ( listen->family == 2 )
    {
      msg_control = (struct cmsghdr *)msg.msg_control;
      v9 = 0;
      while ( msg_control )
      {
        if ( !msg_control->cmsg_level && msg_control->cmsg_type == 8 )
        {
          s_addr = *(_DWORD *)&msg_control->__cmsg_data[4];
          v9 = *(_DWORD *)msg_control->__cmsg_data;
          dst_addr.addr.addr4.s_addr = s_addr;
        }
        msg_control = _cmsg_nxthdr(&msg, msg_control);
      }
    }
    else
    {
      v9 = 0;
    }
    if ( listen->family == 10 && msg.msg_controllen > 0xB )
    {
      for ( j = (char *)msg.msg_control; j; j = (char *)_cmsg_nxthdr(&msg, (struct cmsghdr *)j) )
      {
        if ( *((_DWORD *)j + 1) == 41 && *((_DWORD *)j + 2) == *(_DWORD *)(dnsmasq_daemon_0 + 1132) )
        {
          v39 = *((_DWORD *)j + 4);
          v40 = *(_QWORD *)(j + 20);
          v9 = *((_DWORD *)j + 7);
          dst_addr.addr.addr4.s_addr = *((_DWORD *)j + 3);
          dst_addr.addr.addr6.__in6_u.__u6_addr32[1] = v39;
          *((_QWORD *)&dst_addr.addr.dnssec + 1) = v40;
        }
      }
    }
    if ( !indextoname(listen->fd, v9, &ifr) )
      return;
    if ( !iface_check(listen->family, &dst_addr, &ifr, &auth_dns) )
    {
      if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) == 0 )
        enumerate_interfaces();
      if ( !loopback_exception(listen->fd, listen->family, &dst_addr, &ifr)
        && !label_exception(v9, listen->family, &dst_addr) )
      {
        return;
      }
    }
    if ( listen->family == 2 && (*dnsmasq_daemon_0 & 0x40000) != 0 )
    {
      for ( k = *(_DWORD *)(dnsmasq_daemon_0 + 508); k; k = *(_DWORD *)(k + 80) )
      {
        if ( *(_WORD *)k == 2 && *(_DWORD *)(k + 4) == s_addr )
          goto LABEL_96;
      }
      if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) == 0 )
        enumerate_interfaces();
LABEL_96:
      for ( m = *(_DWORD *)(dnsmasq_daemon_0 + 508); ; m = *(_DWORD *)(m + 80) )
      {
        if ( !m )
        {
          s_addr = 0;
          goto LABEL_52;
        }
        if ( *(_WORD *)m == 2 && *(_DWORD *)(m + 4) == s_addr )
          break;
      }
      v2 = *(_DWORD *)(m + 28);
    }
  }
LABEL_52:
  v21 = (_DWORD *)dnsmasq_daemon_0;
  v22 = *(_DWORD *)(dnsmasq_daemon_0 + 1140) + 1;
  *(_DWORD *)(dnsmasq_daemon_0 + 1140) = v22;
  v21[286] = v22;
  v21[287] = &source_addr;
  v23 = extract_request(v5, nowa, v21[121], &type);
  if ( !v23 )
    goto LABEL_64;
  if ( auth_dns )
    v24 = "auth";
  else
    v24 = "query";
  v25 = querystr(v24, type);
  v26 = listen->family;
  v27 = v26 == 2;
  if ( v26 == 2 )
    p_sin6_flowinfo = (in6_addr *)&source_addr.in6.sin6_flowinfo;
  else
    p_sin6_flowinfo = &source_addr.in6.sin6_addr;
  v29 = v25;
  if ( v27 )
    v30 = 524424;
  else
    v30 = 524552;
  log_query(v30, *(_DWORD *)(dnsmasq_daemon_0 + 484), p_sin6_flowinfo, v29);
  if ( !auth_dns && (*dnsmasq_daemon_0 & 0x40000) == 0 )
  {
    for ( n = *(_DWORD *)(dnsmasq_daemon_0 + 80); n; n = *(_DWORD *)(n + 16) )
    {
      if ( in_zone(n, *(_DWORD *)(dnsmasq_daemon_0 + 484), 0) )
      {
        v23 = 1;
        auth_dns = 1;
        goto LABEL_63;
      }
    }
  }
  v23 = 0;
LABEL_63:
  if ( !detect_loop(*(_DWORD *)(dnsmasq_daemon_0 + 484), type) )
  {
LABEL_64:
    pseudoheader = find_pseudoheader(v5, nowa);
    if ( pseudoheader )
    {
      pseudoheader = 1;
      v33 = *pheader | (pheader[1] << 8);
      v34 = (v33 >> 8) | (v33 << 8);
      v35 = pheader[4];
      pheader += 6;
      v51 = v35 >> 7;
      v32 = *(unsigned __int16 *)(dnsmasq_daemon_0 + 0x1B0);
      if ( v32 >= (unsigned __int16)v34 )
        v32 = (unsigned __int16)v34;
    }
    else
    {
      v32 = 512;
    }
    v36 = (char *)v5 + v32;
    if ( !auth_dns )
    {
      if ( (v5->hb4 & 0x20) != 0 )
        v43 = 1;
      else
        v43 = v51;
      v44 = answer_request(v5, v36, nowa, s_addr, v2, now, v43, v51, pseudoheader);
      if ( v44 )
      {
        v45 = *dnsmasq_daemon_0;
        if ( (*dnsmasq_daemon_0 & 0x2000) != 0 )
          v46 = 1;
        else
          v46 = *(_DWORD *)(dnsmasq_daemon_0 + 4);
        if ( (v45 & 0x2000) == 0 )
          v46 >>= 7;
        if ( (v45 & 0x2000) == 0 )
          v46 &= 1u;
        send_from(listen->fd, v46, (char *)v5, v44, &source_addr, &dst_addr, v9);
        v47 = dnsmasq_daemon_0;
      }
      else
      {
        v48 = forward_query(listen->fd, &source_addr, &dst_addr, v9, v5, nowa, now, 0u, v43, do_bit);
        v47 = dnsmasq_daemon_0;
        if ( v48 )
        {
          ++*(_DWORD *)(dnsmasq_daemon_0 + 492);
          return;
        }
      }
      ++*(_DWORD *)(v47 + 488);
      return;
    }
    v37 = answer_auth(v5, v36, nowa, now, &source_addr, v23, v51, pseudoheader);
    if ( v37 )
    {
      v38 = *dnsmasq_daemon_0;
      if ( (*dnsmasq_daemon_0 & 0x2000) == 0 )
        v38 = *(_DWORD *)(dnsmasq_daemon_0 + 4);
      if ( (*dnsmasq_daemon_0 & 0x2000) == 0 )
        v38 >>= 7;
      if ( (*dnsmasq_daemon_0 & 0x2000) == 0 )
        v38 &= 1u;
      if ( (*dnsmasq_daemon_0 & 0x2000) != 0 )
        v38 = 1;
      send_from(listen->fd, v38, (char *)v5, v37, &source_addr, &dst_addr, v9);
      ++*(_DWORD *)(dnsmasq_daemon_0 + 496);
    }
  }
}
