void __fastcall receive_query(listener *listen, time_t now)
{
  in_addr_t s_addr; // r7
  _BOOL4 v5; // r5
  int v6; // r0
  dns_header *v7; // r11
  irec *iface; // r1
  in_addr_t v9; // r2
  ssize_t v10; // r0
  size_t v11; // r8
  int family; // r1
  int v13; // r0
  int v14; // r4
  int i; // r4
  unsigned int v16; // r1
  int v17; // r6
  time_t v18; // r10
  int v19; // r6
  unsigned int v20; // r1
  _DWORD *msg_control; // r2
  char *v22; // r3
  bool v23; // cc
  _DWORD *v24; // r6
  char *v25; // r0
  unsigned int v26; // lr
  unsigned int v27; // r5
  uint32_t v28; // r2
  bool v29; // cc
  _DWORD *v30; // r0
  int v31; // r2
  int v32; // r1
  const char *v33; // r0
  int v34; // r3
  in6_addr *p_sin6_flowinfo; // r2
  int v36; // r0
  time_t v37; // r5
  int v38; // r10
  int v39; // r5
  int v40; // r1
  int v41; // r2
  unsigned int v42; // r3
  unsigned int v43; // r0
  int v44; // r1
  size_t v45; // r0
  int v46; // r2
  unsigned int v47; // r1
  int v48; // r4
  int v49; // r6
  size_t v50; // r3
  int fd; // r0
  _DWORD *v52; // r0
  unsigned __int16 *v53; // r2
  int v54; // r3
  bool v55; // zf
  int v56; // r1
  bool v57; // zf
  int v58; // [sp+14h] [bp-CCh]
  unsigned int dst_iface; // [sp+18h] [bp-C8h]
  time_t v60; // [sp+1Ch] [bp-C4h]
  in_addr_t v61; // [sp+20h] [bp-C0h]
  int v62[8]; // [sp+24h] [bp-BCh] BYREF
  char v63; // [sp+44h] [bp-9Ch] BYREF
  struct msghdr message; // [sp+64h] [bp-7Ch] BYREF
  int v65[2]; // [sp+80h] [bp-60h] BYREF
  int dns_auth; // [sp+88h] [bp-58h] BYREF
  all_addr source; // [sp+8Ch] [bp-54h] BYREF
  unsigned __int16 v68; // [sp+9Eh] [bp-42h] BYREF
  mysockaddr udpaddr; // [sp+A0h] [bp-40h] BYREF

  s_addr = 0;
  v5 = 1;
  dns_auth = 0;
  v6 = dnsmasq_daemon;
  v7 = *(dns_header **)(dnsmasq_daemon + 476);
  if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) != 0 )
    v5 = listen->family == 0xA;
  source.addr.addr4.s_addr = 0;
  *(_DWORD *)(dnsmasq_daemon + 528) = 0;
  if ( (*(_BYTE *)(v6 + 1) & 0x20) != 0 && (iface = listen->iface) != 0 )
  {
    dns_auth = iface->dns_auth;
    v9 = 0;
    if ( listen->family == 2 )
    {
      s_addr = iface->addr.in.sin_addr.s_addr;
      v9 = iface->netmask.s_addr;
      source.addr.addr4.s_addr = s_addr;
    }
  }
  else
  {
    v9 = 0;
  }
  v61 = v9;
  v65[0] = (int)v7;
  message.msg_controllen = 32;
  message.msg_control = &v63;
  message.msg_iovlen = 1;
  message.msg_iov = (iovec *)v65;
  message.msg_namelen = 28;
  message.msg_name = &udpaddr;
  v65[1] = *(unsigned __int16 *)(v6 + 432);
  message.msg_flags = 0;
  v10 = recvmsg(listen->fd, &message, 0);
  if ( v10 < 12 )
    return;
  v11 = v10;
  if ( (message.msg_flags & 0x20) != 0 || (v7->hb3 & 0x80u) != 0 )
    return;
  family = listen->family;
  udpaddr.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !udpaddr.in.sin_port )
      return;
    v13 = dnsmasq_daemon;
    v60 = now;
    if ( (*(_BYTE *)(dnsmasq_daemon + 6) & 2) != 0 )
    {
LABEL_25:
      for ( i = *(_DWORD *)(v13 + 1136); i; i = *(_DWORD *)(i + 24) )
      {
        if ( (*(_BYTE *)(i + 16) & 2) == 0 )
        {
          v16 = -1 << (0x20 - *(_DWORD *)(i + 20));
          if ( is_same_net(
                 *(_DWORD *)i,
                 udpaddr.in.sin_addr.s_addr,
                 (v16 << 8) & 0xFF0000 | (v16 << 24) | (v16 >> 8) & 0xFF00 | HIBYTE(v16)) )
          {
            goto LABEL_30;
          }
        }
      }
LABEL_55:
      if ( !receive_query_warned )
      {
        my_syslog(4, "Ignoring query from non-local network");
        receive_query_warned = 1;
      }
      return;
    }
  }
  else
  {
    if ( !udpaddr.in.sin_port )
      return;
    v60 = now;
    udpaddr.in.sin_addr.s_addr = 0;
    v13 = dnsmasq_daemon;
    if ( (*(_BYTE *)(dnsmasq_daemon + 6) & 2) != 0 )
    {
      if ( family != 10 )
        goto LABEL_25;
      v14 = *(_DWORD *)(dnsmasq_daemon + 1136);
      if ( !v14 )
        goto LABEL_55;
      while ( (*(_BYTE *)(v14 + 16) & 2) == 0 || !is_same_net6(v14, &udpaddr.in6.sin6_addr, *(_DWORD *)(v14 + 20)) )
      {
        v14 = *(_DWORD *)(v14 + 24);
        if ( !v14 )
          goto LABEL_55;
      }
    }
  }
LABEL_30:
  v17 = 0;
  if ( v5 )
  {
    v18 = v60;
    if ( message.msg_controllen < 0xC )
      return;
    v19 = listen->family;
    v20 = 0;
    if ( v19 == 2 )
    {
      msg_control = message.msg_control;
      if ( !message.msg_control )
      {
        v20 = 0;
LABEL_94:
        dst_iface = v20;
        v17 = 0;
        if ( !indextoname(listen->fd) )
          return;
        if ( !iface_check(listen->family, &source, v62, &dns_auth) )
        {
          if ( (*(_BYTE *)(dnsmasq_daemon + 4) & 0x80) == 0 )
            enumerate_interfaces(0);
          if ( !loopback_exception(listen->fd, listen->family, &source, v62)
            && !label_exception(dst_iface, listen->family, &source) )
          {
            return;
          }
        }
        if ( listen->family == 2 && (*(_BYTE *)(dnsmasq_daemon + 2) & 4) != 0 )
        {
          v52 = *(_DWORD **)(dnsmasq_daemon + 508);
          if ( v52 )
          {
            v53 = *(unsigned __int16 **)(dnsmasq_daemon + 508);
            while ( 1 )
            {
              v54 = *v53;
              v55 = v54 == 2;
              if ( v54 == 2 )
                v55 = *((_DWORD *)v53 + 1) == s_addr;
              if ( v55 )
                break;
              v53 = (unsigned __int16 *)*((_DWORD *)v53 + 20);
              if ( !v53 )
                goto LABEL_108;
            }
          }
          else
          {
LABEL_108:
            if ( (*(_BYTE *)(dnsmasq_daemon + 4) & 0x80) == 0 )
            {
              enumerate_interfaces(0);
              v52 = *(_DWORD **)(dnsmasq_daemon + 508);
            }
          }
          if ( v52 )
          {
            while ( 1 )
            {
              v56 = *(unsigned __int16 *)v52;
              v57 = v56 == 2;
              if ( v56 == 2 )
                v57 = v52[1] == s_addr;
              if ( v57 )
                break;
              v52 = (_DWORD *)v52[20];
              if ( !v52 )
                goto LABEL_115;
            }
            v61 = v52[7];
          }
          else
          {
LABEL_115:
            s_addr = 0;
          }
        }
        goto LABEL_58;
      }
      v22 = (char *)message.msg_control + message.msg_controllen;
      v20 = 0;
      do
      {
        if ( !msg_control[1] && msg_control[2] == 8 )
        {
          s_addr = msg_control[4];
          v20 = msg_control[3];
          source.addr.addr4.s_addr = s_addr;
        }
        if ( *msg_control < 0xCu )
          break;
        msg_control = (_DWORD *)((char *)msg_control + ((*msg_control + 3) & 0xFFFFFFFC));
        v23 = msg_control + 3 > (_DWORD *)v22;
        if ( msg_control + 3 <= (_DWORD *)v22 )
          v23 = (char *)msg_control + ((*msg_control + 3) & 0xFFFFFFFC) > v22;
      }
      while ( !v23 );
    }
    if ( v19 == 10 )
    {
      v24 = message.msg_control;
      if ( message.msg_control )
      {
        v25 = (char *)message.msg_control + message.msg_controllen;
        do
        {
          if ( v24[1] == 41 && v24[2] == *(_DWORD *)(dnsmasq_daemon + 1132) )
          {
            v26 = v24[3];
            v27 = v24[4];
            v28 = v24[6];
            v20 = v24[7];
            source.addr.addr6.__in6_u.__u6_addr32[2] = v24[5];
            source.addr.addr6.__in6_u.__u6_addr32[3] = v28;
            *(_QWORD *)&source.addr.addr4.s_addr = __PAIR64__(v27, v26);
          }
          if ( *v24 < 0xCu )
            break;
          v24 = (_DWORD *)((char *)v24 + ((*v24 + 3) & 0xFFFFFFFC));
          v29 = v24 + 3 > (_DWORD *)v25;
          if ( v24 + 3 <= (_DWORD *)v25 )
            v29 = (char *)v24 + ((*v24 + 3) & 0xFFFFFFFC) > v25;
        }
        while ( !v29 );
      }
    }
    goto LABEL_94;
  }
  v18 = v60;
  dst_iface = 0;
LABEL_58:
  v30 = (_DWORD *)dnsmasq_daemon;
  *(_DWORD *)(dnsmasq_daemon + 1148) = &udpaddr;
  v31 = v30[121];
  v32 = v30[285] + 1;
  v30[286] = v32;
  v30[285] = v32;
  if ( !extract_request(v7, v11, v31, &v68) )
    goto LABEL_73;
  v33 = "auth";
  if ( !dns_auth )
    v33 = "query";
  v34 = querystr(v33, v68);
  if ( listen->family == 2 )
  {
    p_sin6_flowinfo = (in6_addr *)&udpaddr.in6.sin6_flowinfo;
    v36 = 524424;
  }
  else
  {
    p_sin6_flowinfo = &udpaddr.in6.sin6_addr;
    v36 = 524552;
  }
  log_query(v36, *(_DWORD *)(dnsmasq_daemon + 484), p_sin6_flowinfo, v34);
  v37 = v18;
  v17 = 0;
  if ( !dns_auth && (*(_BYTE *)(dnsmasq_daemon + 2) & 4) == 0 )
  {
    v38 = *(_DWORD *)(dnsmasq_daemon + 80);
    if ( v38 )
    {
      if ( in_zone(*(_DWORD *)(dnsmasq_daemon + 80), *(_DWORD *)(dnsmasq_daemon + 484), 0) )
      {
LABEL_71:
        v17 = 1;
        dns_auth = 1;
      }
      else
      {
        v17 = 0;
        while ( 1 )
        {
          v38 = *(_DWORD *)(v38 + 16);
          if ( !v38 )
            break;
          if ( in_zone(v38, *(_DWORD *)(dnsmasq_daemon + 484), 0) )
            goto LABEL_71;
        }
      }
    }
  }
  v18 = v37;
  if ( !detect_loop(*(_DWORD *)(dnsmasq_daemon + 484), v68) )
  {
LABEL_73:
    v39 = 0;
    if ( find_pseudoheader(v7, v11, 0, v62, 0, 0) )
    {
      v40 = *(unsigned __int8 *)v62[0];
      v41 = *(unsigned __int8 *)(v62[0] + 1);
      v42 = *(unsigned __int8 *)(v62[0] + 4);
      v62[0] += 6;
      v43 = v41 | (v40 << 8);
      v44 = v42 >> 7;
      if ( v43 > *(unsigned __int16 *)(dnsmasq_daemon + 432) )
        v43 = *(unsigned __int16 *)(dnsmasq_daemon + 432);
      v39 = 1;
    }
    else
    {
      v43 = 512;
      v44 = 0;
    }
    if ( dns_auth )
    {
      v45 = answer_auth(v7, (char *)v7 + v43, v11, v18, &udpaddr, v17, v44, v39);
      if ( v45 )
      {
        v46 = dnsmasq_daemon;
        v47 = 1;
        if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
        {
          v47 = *(_DWORD *)(dnsmasq_daemon + 4);
          v46 = 1;
        }
        if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
          v47 = v46 & (v47 >> 7);
        send_from(listen->fd, v47, (char *)v7, v45, &udpaddr, &source, dst_iface);
        ++*(_DWORD *)(dnsmasq_daemon + 496);
      }
    }
    else
    {
      v48 = 1;
      v49 = 1;
      if ( (v7->hb4 & 0x20) == 0 )
        v48 = v44;
      v50 = answer_request(v7, (char *)v7 + v43, v11, s_addr, v61, v18, v48, v44, v39);
      fd = listen->fd;
      if ( v50 )
      {
        if ( (*(_BYTE *)(dnsmasq_daemon + 1) & 0x20) == 0 )
          v49 = (*(_DWORD *)(dnsmasq_daemon + 4) >> 7) & 1;
        send_from(fd, v49, (char *)v7, v50, &udpaddr, &source, dst_iface);
        ++*(_DWORD *)(dnsmasq_daemon + 488);
      }
      else if ( forward_query(fd, &udpaddr, &source, dst_iface, v7, v11, v18, 0u, v48, v58) )
      {
        ++*(_DWORD *)(dnsmasq_daemon + 492);
      }
      else
      {
        ++*(_DWORD *)(dnsmasq_daemon + 488);
      }
    }
  }
}
