void __fastcall receive_query(listener *listen, time_t now)
{
  int v3; // r3
  dns_header *v4; // r8
  unsigned int v5; // r11
  int s_addr; // r5
  irec *iface; // r2
  signed int v8; // r6
  int family; // r3
  int v10; // r2
  _DWORD *v11; // r9
  unsigned int v12; // r3
  char *v13; // r12
  char *v14; // lr
  unsigned int v15; // r2
  _DWORD *i; // r9
  int v17; // r3
  unsigned int v18; // r2
  unsigned int *msg_control; // r1
  char *v20; // r0
  unsigned int v21; // r2
  uint32_t v22; // r1
  __int64 v23; // r2
  _DWORD *v24; // r2
  int v25; // r3
  const char *v26; // r0
  int v27; // r3
  in6_addr *p_sin6_flowinfo; // r2
  int v29; // r1
  int v30; // r0
  int v31; // r9
  int v32; // r10
  int v33; // r3
  int v34; // r3
  unsigned int v35; // r2
  unsigned int v36; // r1
  int v37; // r1
  int v38; // r2
  int v39; // r9
  size_t v40; // r3
  int v41; // r1
  size_t v42; // r3
  int v43; // r1
  int ad_reqd; // [sp+1Ch] [bp-D4h]
  unsigned __int8 *t_cp; // [sp+24h] [bp-CCh]
  unsigned __int16 type; // [sp+2Ah] [bp-C6h] BYREF
  unsigned __int8 *pheader; // [sp+2Ch] [bp-C4h]
  int auth_dns; // [sp+30h] [bp-C0h] BYREF
  msghdr msg; // [sp+34h] [bp-BCh] BYREF
  iovec iov[1]; // [sp+50h] [bp-A0h] BYREF
  all_addr dst_addr; // [sp+58h] [bp-98h] BYREF
  mysockaddr source_addr; // [sp+68h] [bp-88h] BYREF
  union {cmsghdr align;char control6[32];char control[24];} control_u; // [sp+84h] [bp-6Ch] BYREF
  ifreq ifr; // [sp+A4h] [bp-4Ch] BYREF

  v3 = dnsmasq_daemon_0;
  v4 = *(dns_header **)(dnsmasq_daemon_0 + 476);
  auth_dns = 0;
  v5 = (*dnsmasq_daemon_0 & 0x2000) == 0 || listen->family == 10;
  *(_DWORD *)(dnsmasq_daemon_0 + 528) = 0;
  dst_addr.addr.addr4.s_addr = 0;
  ad_reqd = 0;
  s_addr = *(_DWORD *)v3 & 0x2000;
  if ( s_addr )
  {
    iface = listen->iface;
    if ( iface )
    {
      auth_dns = iface->dns_auth;
      if ( listen->family == 2 )
      {
        s_addr = iface->addr.in.sin_addr.s_addr;
        dst_addr.addr.addr4.s_addr = s_addr;
        ad_reqd = iface->netmask.s_addr;
      }
      else
      {
        s_addr = 0;
      }
    }
    else
    {
      s_addr = 0;
    }
  }
  iov[0].iov_base = v4;
  iov[0].iov_len = *(unsigned __int16 *)(v3 + 0x1B0);
  msg.msg_control = &control_u;
  msg.msg_controllen = 32;
  msg.msg_flags = 0;
  msg.msg_name = &source_addr;
  msg.msg_namelen = 28;
  msg.msg_iov = iov;
  msg.msg_iovlen = 1;
  v8 = recvmsg(listen->fd, &msg, 0);
  if ( v8 <= 11 )
    return;
  t_cp = (unsigned __int8 *)(msg.msg_flags & 0x20);
  if ( (msg.msg_flags & 0x20) != 0 || (v4->hb3 & 0x80u) != 0 )
    return;
  family = listen->family;
  source_addr.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !source_addr.in.sin_port )
      return;
    v10 = dnsmasq_daemon_0;
    if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x20000) == 0 )
      goto LABEL_21;
    goto LABEL_36;
  }
  if ( !source_addr.in.sin_port )
    return;
  source_addr.in.sin_addr.s_addr = 0;
  v10 = dnsmasq_daemon_0;
  if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x20000) == 0 )
    goto LABEL_21;
  if ( family != 10 )
  {
LABEL_36:
    for ( i = *(_DWORD **)(v10 + 1136); i; i = (_DWORD *)i[6] )
    {
      v17 = -1 << (0x20 - i[5]);
      v18 = (((unsigned int)v17 ^ __ROR4__(v17, 0x10)) >> 8) & 0xFFFF00FF ^ __ROR4__(v17, 8);
      if ( (i[4] & 2) == 0 )
      {
        if ( is_same_net(*i, source_addr.in.sin_addr.s_addr, v18) )
          goto LABEL_21;
      }
    }
LABEL_42:
    if ( !warned_2 )
    {
      my_syslog(4, "Ignoring query from non-local network");
      warned_2 = 1;
    }
    return;
  }
  v11 = *(_DWORD **)(dnsmasq_daemon_0 + 1136);
  if ( !v11 )
    goto LABEL_42;
  while ( (v11[4] & 2) == 0 || !is_same_net6(v11, &source_addr.in6.sin6_addr, v11[5]) )
  {
    v11 = (_DWORD *)v11[6];
    if ( !v11 )
      goto LABEL_42;
  }
LABEL_21:
  if ( !v5 )
    goto LABEL_66;
  if ( msg.msg_controllen <= 0xB )
    return;
  v12 = listen->family;
  if ( v12 == 2 )
  {
    if ( msg.msg_control )
    {
      msg_control = (unsigned int *)msg.msg_control;
      v5 = (unsigned int)t_cp;
      v20 = (char *)msg.msg_control + msg.msg_controllen;
      while ( 1 )
      {
        if ( !msg_control[1] && msg_control[2] == 8 )
        {
          s_addr = msg_control[4];
          dst_addr.addr.addr4.s_addr = s_addr;
          v5 = msg_control[3];
        }
        v21 = *msg_control;
        v12 = (-*msg_control & 3) + 0xC;
        if ( *msg_control <= 0xB || v12 > v20 - (char *)msg_control || v21 > v20 - (char *)msg_control - v12 )
          break;
        msg_control = (unsigned int *)((char *)msg_control + ((v21 + 3) & 0xFFFFFFFC));
      }
    }
    else
    {
      v5 = (unsigned int)t_cp;
    }
  }
  else if ( v12 == 10 )
  {
    if ( msg.msg_control )
    {
      v13 = (char *)msg.msg_control;
      v5 = (unsigned int)t_cp;
      v14 = (char *)msg.msg_control + msg.msg_controllen;
      while ( 1 )
      {
        if ( *((_DWORD *)v13 + 1) == 41 && *((_DWORD *)v13 + 2) == *(_DWORD *)(dnsmasq_daemon_0 + 1132) )
        {
          v22 = *((_DWORD *)v13 + 4);
          v23 = *(_QWORD *)(v13 + 20);
          dst_addr.addr.addr4.s_addr = *((_DWORD *)v13 + 3);
          dst_addr.addr.addr6.__in6_u.__u6_addr32[1] = v22;
          *((_QWORD *)&dst_addr.addr.dnssec + 1) = v23;
          v5 = *((_DWORD *)v13 + 7);
        }
        v15 = *(_DWORD *)v13;
        v12 = (-*(_DWORD *)v13 & 3) + 0xC;
        if ( *(_DWORD *)v13 <= 0xBu || v12 > v14 - v13 || v15 > v14 - v13 - v12 )
          break;
        v13 += (v15 + 3) & 0xFFFFFFFC;
      }
    }
    else
    {
      v5 = (unsigned int)t_cp;
    }
  }
  else
  {
    v5 = (unsigned int)t_cp;
  }
  if ( !indextoname(listen->fd, v5, &ifr, v12) )
    return;
  if ( !iface_check(listen->family, &dst_addr, &ifr, &auth_dns) )
  {
    if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) == 0 )
      ((void (*)(void))enumerate_interfaces)();
    if ( !loopback_exception(listen->fd, listen->family, &dst_addr, &ifr)
      && !label_exception(v5, listen->family, &dst_addr) )
    {
      return;
    }
  }
  if ( listen->family != 2 || (*dnsmasq_daemon_0 & 0x40000) == 0 )
    goto LABEL_66;
  v33 = *(_DWORD *)(dnsmasq_daemon_0 + 508);
  if ( v33 )
  {
    do
    {
      if ( *(_WORD *)v33 == 2 && *(_DWORD *)(v33 + 4) == s_addr )
      {
        v34 = *(_DWORD *)(dnsmasq_daemon_0 + 508);
        goto LABEL_91;
      }
      v33 = *(_DWORD *)(v33 + 80);
    }
    while ( v33 );
    if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) != 0 )
    {
      v34 = *(_DWORD *)(dnsmasq_daemon_0 + 508);
      goto LABEL_91;
    }
LABEL_84:
    enumerate_interfaces(0);
    v34 = *(_DWORD *)(dnsmasq_daemon_0 + 508);
    if ( v34 )
    {
      do
      {
LABEL_91:
        if ( *(_WORD *)v34 == 2 && *(_DWORD *)(v34 + 4) == s_addr )
        {
          ad_reqd = *(_DWORD *)(v34 + 28);
          goto LABEL_66;
        }
        v34 = *(_DWORD *)(v34 + 80);
      }
      while ( v34 );
      s_addr = 0;
    }
    else
    {
      s_addr = 0;
    }
    goto LABEL_66;
  }
  if ( (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) == 0 )
    goto LABEL_84;
  s_addr = 0;
LABEL_66:
  v24 = (_DWORD *)dnsmasq_daemon_0;
  v25 = *(_DWORD *)(dnsmasq_daemon_0 + 1140) + 1;
  *(_DWORD *)(dnsmasq_daemon_0 + 1140) = v25;
  v24[286] = v25;
  v24[287] = &source_addr;
  if ( !extract_request(v4, v8, v24[121], &type) )
  {
    v31 = (int)t_cp;
LABEL_99:
    if ( find_pseudoheader(v4, v8) )
    {
      v35 = pheader[1] | (*pheader << 8);
      v36 = pheader[4];
      pheader += 6;
      t_cp = (unsigned __int8 *)(v36 >> 7);
      if ( *(unsigned __int16 *)(dnsmasq_daemon_0 + 0x1B0) >= v35 )
        v37 = v35;
      else
        v37 = *(unsigned __int16 *)(dnsmasq_daemon_0 + 0x1B0);
      v38 = 1;
    }
    else
    {
      v38 = (int)t_cp;
      v37 = 512;
    }
    if ( auth_dns )
    {
      v42 = answer_auth(v4, (char *)v4 + v37, v8, now, &source_addr, v31, t_cp, v38);
      if ( v42 )
      {
        v43 = (*dnsmasq_daemon_0 & 0x2000) != 0 || (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) != 0;
        send_from(listen->fd, v43, (char *)v4, v42, &source_addr, &dst_addr, v5);
        ++*(_DWORD *)(dnsmasq_daemon_0 + 496);
      }
    }
    else
    {
      if ( (v4->hb4 & 0x20) != 0 )
        v39 = 1;
      else
        v39 = (int)t_cp;
      v40 = answer_request(v4, (char *)v4 + v37, v8, s_addr, ad_reqd, now, v39, t_cp, v38);
      if ( v40 )
      {
        v41 = (*dnsmasq_daemon_0 & 0x2000) != 0 || (*(_DWORD *)(dnsmasq_daemon_0 + 4) & 0x80) != 0;
        send_from(listen->fd, v41, (char *)v4, v40, &source_addr, &dst_addr, v5);
        ++*(_DWORD *)(dnsmasq_daemon_0 + 488);
      }
      else if ( forward_query(listen->fd, &source_addr, &dst_addr, v5, v4, v8, now, 0u, v39, (int)t_cp) )
      {
        ++*(_DWORD *)(dnsmasq_daemon_0 + 492);
      }
      else
      {
        ++*(_DWORD *)(dnsmasq_daemon_0 + 488);
      }
    }
    return;
  }
  if ( auth_dns )
    v26 = "auth";
  else
    v26 = "query";
  v27 = querystr(v26, type);
  if ( listen->family == 2 )
  {
    p_sin6_flowinfo = (in6_addr *)&source_addr.in6.sin6_flowinfo;
    v29 = *(_DWORD *)(dnsmasq_daemon_0 + 484);
    v30 = 524424;
  }
  else
  {
    p_sin6_flowinfo = &source_addr.in6.sin6_addr;
    v29 = *(_DWORD *)(dnsmasq_daemon_0 + 484);
    v30 = 524552;
  }
  log_query(v30, v29, p_sin6_flowinfo, v27);
  v31 = auth_dns;
  if ( auth_dns )
  {
    v31 = (int)t_cp;
  }
  else if ( (*dnsmasq_daemon_0 & 0x40000) == 0 )
  {
    v32 = *(_DWORD *)(dnsmasq_daemon_0 + 80);
    if ( v32 )
    {
      while ( !in_zone(v32, *(_DWORD *)(dnsmasq_daemon_0 + 484), 0) )
      {
        v32 = *(_DWORD *)(v32 + 16);
        if ( !v32 )
        {
          v31 = 0;
          goto LABEL_98;
        }
      }
      v31 = 1;
      auth_dns = 1;
    }
  }
LABEL_98:
  if ( !detect_loop(*(_DWORD *)(dnsmasq_daemon_0 + 484), type) )
    goto LABEL_99;
}
