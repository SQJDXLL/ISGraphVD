void __fastcall receive_query(listener *listen, time_t now)
{
  __int64 v4; // rax
  dns_header *v5; // r15
  bool v6; // r13
  in_addr_t s_addr; // esi
  irec *iface; // rcx
  unsigned int v9; // edx
  ssize_t v10; // rax
  size_t v11; // r12
  int family; // eax
  __int64 v13; // rcx
  __int64 i; // rbp
  unsigned int *j; // rbp
  int v16; // ecx
  __int64 v17; // r13
  unsigned int *msg_control; // rdx
  char *v19; // rsi
  unsigned __int64 v20; // rdi
  unsigned int *v21; // rcx
  char *v22; // rax
  unsigned __int64 v23; // rsi
  time_t v24; // r13
  __int64 v25; // rax
  int v26; // ecx
  const char *v27; // rdi
  __int64 v28; // rax
  in6_addr *p_sin6_flowinfo; // rdx
  __int64 v30; // rdi
  __int64 v31; // r14
  __int64 v32; // rbp
  __int64 v33; // rcx
  unsigned __int16 v34; // dx
  unsigned int v35; // eax
  __int64 v36; // rax
  __int64 v37; // rsi
  size_t v38; // rax
  int v39; // esi
  __int64 v40; // r14
  size_t v41; // rax
  int fd; // edi
  int v43; // esi
  __int64 v44; // rax
  in_addr_t v45; // esi
  __int64 v46; // rdx
  int v47; // [rsp-8h] [rbp-130h]
  in_addr_t v48; // [rsp+0h] [rbp-128h]
  int dns_auth; // [rsp+4h] [rbp-124h] BYREF
  unsigned __int16 v50; // [rsp+Ah] [rbp-11Eh] BYREF
  unsigned int v51; // [rsp+Ch] [rbp-11Ch]
  all_addr source; // [rsp+10h] [rbp-118h] BYREF
  unsigned int dst_iface[2]; // [rsp+20h] [rbp-108h]
  __int64 v54; // [rsp+28h] [rbp-100h]
  time_t v55; // [rsp+30h] [rbp-F8h]
  mysockaddr to; // [rsp+38h] [rbp-F0h] BYREF
  struct msghdr message; // [rsp+58h] [rbp-D0h] BYREF
  __int64 v58[3]; // [rsp+90h] [rbp-98h] BYREF
  __int64 v59[5]; // [rsp+A8h] [rbp-80h] BYREF
  char v60; // [rsp+D0h] [rbp-58h] BYREF

  v4 = dnsmasq_daemon;
  v5 = *(dns_header **)(dnsmasq_daemon + 848LL);
  dns_auth = 0;
  v6 = 1;
  if ( (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) != 0 )
    v6 = listen->family == 10;
  *(_QWORD *)(dnsmasq_daemon + 944LL) = 0LL;
  source.addr.addr4.s_addr = 0;
  s_addr = 0;
  if ( (*(_BYTE *)(v4 + 1) & 0x20) != 0 && (iface = listen->iface) != 0LL )
  {
    dns_auth = iface->dns_auth;
    v9 = 0;
    if ( listen->family == 2 )
    {
      s_addr = iface->addr.in.sin_addr.s_addr;
      source.addr.addr4.s_addr = s_addr;
      v9 = iface->netmask.s_addr;
    }
  }
  else
  {
    v9 = 0;
  }
  v51 = v9;
  v48 = s_addr;
  v58[0] = (__int64)v5;
  v58[1] = *(unsigned __int16 *)(v4 + 768);
  message.msg_control = &v60;
  message.msg_controllen = 40LL;
  message.msg_flags = 0;
  message.msg_name = &to;
  message.msg_namelen = 28;
  message.msg_iov = (iovec *)v58;
  message.msg_iovlen = 1LL;
  v10 = recvmsg(listen->fd, &message, 0);
  if ( v10 < 12 || (message.msg_flags & 0x20) != 0 || (v5->hb3 & 0x80u) != 0 )
    return;
  v11 = v10;
  family = listen->family;
  to.sa.sa_family = family;
  if ( family == 2 )
  {
    if ( !to.in.sin_port )
      return;
    v55 = now;
    v13 = dnsmasq_daemon;
    if ( (*(_BYTE *)(dnsmasq_daemon + 6LL) & 2) != 0 )
      goto LABEL_24;
  }
  else
  {
    if ( !to.in.sin_port )
      return;
    v55 = now;
    to.in.sin_addr.s_addr = 0;
    v13 = dnsmasq_daemon;
    if ( (*(_BYTE *)(dnsmasq_daemon + 6LL) & 2) != 0 )
    {
      if ( family == 10 )
      {
        for ( i = *(_QWORD *)(dnsmasq_daemon + 1568LL); i; i = *(_QWORD *)(i + 24) )
        {
          if ( (*(_BYTE *)(i + 16) & 2) != 0
            && (unsigned int)is_same_net6(i, &to.in6.sin6_addr, *(unsigned int *)(i + 20)) )
          {
            goto LABEL_29;
          }
        }
        goto LABEL_50;
      }
LABEL_24:
      for ( j = *(unsigned int **)(v13 + 1568); j; j = (unsigned int *)*((_QWORD *)j + 3) )
      {
        if ( (j[4] & 2) == 0
          && (unsigned int)is_same_net(*j, to.in.sin_addr.s_addr, _byteswap_ulong(-1 << -*((_BYTE *)j + 20))) )
        {
          goto LABEL_29;
        }
      }
LABEL_50:
      if ( !receive_query_warned )
      {
        my_syslog(4LL, "Ignoring query from non-local network");
        receive_query_warned = 1;
      }
      return;
    }
  }
LABEL_29:
  v54 = 0LL;
  if ( !v6 )
  {
    *(_QWORD *)dst_iface = 0LL;
    goto LABEL_53;
  }
  if ( message.msg_controllen < 0x10 )
    return;
  v16 = listen->family;
  v17 = 0LL;
  if ( v16 == 2 )
  {
    msg_control = (unsigned int *)message.msg_control;
    if ( !message.msg_control )
    {
      v17 = 0LL;
      goto LABEL_88;
    }
    v19 = (char *)message.msg_control + message.msg_controllen;
    v17 = 0LL;
    do
    {
      if ( !msg_control[2] && msg_control[3] == 8 )
      {
        v48 = msg_control[5];
        source.addr.addr4.s_addr = v48;
        v17 = msg_control[4];
      }
      if ( *(_QWORD *)msg_control < 0x10uLL )
        break;
      v20 = (*(_QWORD *)msg_control + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if ( (char *)msg_control + v20 + 16 > v19 )
        break;
      msg_control = (unsigned int *)((char *)msg_control + v20);
    }
    while ( (char *)msg_control + ((*(_QWORD *)msg_control + 7LL) & 0xFFFFFFFFFFFFFFF8LL) <= v19 );
  }
  if ( v16 == 10 )
  {
    v21 = (unsigned int *)message.msg_control;
    if ( message.msg_control )
    {
      v22 = (char *)message.msg_control + message.msg_controllen;
      do
      {
        if ( v21[2] == 41 && v21[3] == *(_DWORD *)(dnsmasq_daemon + 1560LL) )
        {
          source = (all_addr)*((_OWORD *)v21 + 1);
          v17 = v21[8];
        }
        if ( *(_QWORD *)v21 < 0x10uLL )
          break;
        v23 = (*(_QWORD *)v21 + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if ( (char *)v21 + v23 + 16 > v22 )
          break;
        v21 = (unsigned int *)((char *)v21 + v23);
      }
      while ( (char *)v21 + ((*(_QWORD *)v21 + 7LL) & 0xFFFFFFFFFFFFFFF8LL) <= v22 );
    }
  }
LABEL_88:
  if ( !(unsigned int)indextoname((unsigned int)listen->fd, (unsigned int)v17, v59) )
    return;
  if ( !(unsigned int)iface_check((unsigned int)listen->family, &source, v59, &dns_auth) )
  {
    if ( *(char *)(dnsmasq_daemon + 4LL) >= 0 )
      enumerate_interfaces(0LL);
    if ( !(unsigned int)loopback_exception((unsigned int)listen->fd, (unsigned int)listen->family, &source, v59)
      && !(unsigned int)label_exception((unsigned int)v17, (unsigned int)listen->family, &source) )
    {
      return;
    }
  }
  *(_QWORD *)dst_iface = v17;
  if ( listen->family == 2 )
  {
    v24 = v55;
    if ( (*(_BYTE *)(dnsmasq_daemon + 2LL) & 4) != 0 )
    {
      v44 = *(_QWORD *)(dnsmasq_daemon + 904LL);
      v45 = v48;
      if ( v44 )
      {
        v46 = *(_QWORD *)(dnsmasq_daemon + 904LL);
        while ( *(_WORD *)v46 != 2 || *(_DWORD *)(v46 + 4) != v48 )
        {
          v46 = *(_QWORD *)(v46 + 88);
          if ( !v46 )
            goto LABEL_102;
        }
      }
      else
      {
LABEL_102:
        if ( *(char *)(dnsmasq_daemon + 4LL) >= 0 )
        {
          enumerate_interfaces(0LL);
          v45 = v48;
          v44 = *(_QWORD *)(dnsmasq_daemon + 904LL);
        }
      }
      if ( v44 )
      {
        while ( *(_WORD *)v44 != 2 || *(_DWORD *)(v44 + 4) != v45 )
        {
          v44 = *(_QWORD *)(v44 + 88);
          if ( !v44 )
            goto LABEL_105;
        }
        v51 = *(_DWORD *)(v44 + 28);
      }
      else
      {
LABEL_105:
        v48 = 0;
      }
    }
    goto LABEL_54;
  }
LABEL_53:
  v24 = v55;
LABEL_54:
  v25 = dnsmasq_daemon;
  v26 = *(_DWORD *)(dnsmasq_daemon + 1576LL) + 1;
  *(_DWORD *)(dnsmasq_daemon + 1576LL) = v26;
  *(_DWORD *)(v25 + 1580) = v26;
  *(_QWORD *)(v25 + 1584) = &to;
  if ( !(unsigned int)extract_request(v5, v11, *(_QWORD *)(v25 + 864), &v50) )
    goto LABEL_69;
  v27 = "auth";
  if ( !dns_auth )
    v27 = "query";
  v28 = querystr(v27, v50);
  if ( listen->family == 2 )
  {
    p_sin6_flowinfo = (in6_addr *)&to.in6.sin6_flowinfo;
    v30 = 524424LL;
  }
  else
  {
    p_sin6_flowinfo = &to.in6.sin6_addr;
    v30 = 524552LL;
  }
  log_query(v30, *(_QWORD *)(dnsmasq_daemon + 864LL), p_sin6_flowinfo, v28);
  v54 = 0LL;
  if ( !dns_auth && (*(_BYTE *)(dnsmasq_daemon + 2LL) & 4) == 0 )
  {
    v31 = *(_QWORD *)(dnsmasq_daemon + 144LL);
    if ( v31 )
    {
      if ( (unsigned int)in_zone(*(_QWORD *)(dnsmasq_daemon + 144LL), *(_QWORD *)(dnsmasq_daemon + 864LL), 0LL) )
      {
LABEL_67:
        dns_auth = 1;
        v54 = 1LL;
      }
      else
      {
        v54 = 0LL;
        while ( 1 )
        {
          v31 = *(_QWORD *)(v31 + 32);
          if ( !v31 )
            break;
          if ( (unsigned int)in_zone(v31, *(_QWORD *)(dnsmasq_daemon + 864LL), 0LL) )
            goto LABEL_67;
        }
      }
    }
  }
  if ( !(unsigned int)detect_loop(*(_QWORD *)(dnsmasq_daemon + 864LL), v50) )
  {
LABEL_69:
    v32 = 0LL;
    if ( find_pseudoheader(v5, v11, 0LL, v59, 0LL, 0LL) )
    {
      v33 = v59[0];
      v34 = __ROL2__(*(_WORD *)v59[0], 8);
      v59[0] += 4LL;
      v35 = *(unsigned __int8 *)v59[0];
      v59[0] = v33 + 6;
      v36 = v35 >> 7;
      if ( v34 > (unsigned __int16)*(_DWORD *)(dnsmasq_daemon + 768LL) )
        v34 = *(_DWORD *)(dnsmasq_daemon + 768LL);
      v37 = v34;
      v32 = 1LL;
    }
    else
    {
      v37 = 512LL;
      v36 = 0LL;
    }
    if ( dns_auth )
    {
      v38 = answer_auth(v5, (char *)v5 + v37, v11, v24, &to, v54, v36, v32);
      if ( v38 )
      {
        v39 = 1;
        if ( (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) == 0 )
          v39 = (*(_DWORD *)(dnsmasq_daemon + 4LL) >> 7) & 1;
        send_from(listen->fd, v39, (char *)v5, v38, &to, &source, dst_iface[0]);
        ++*(_DWORD *)(dnsmasq_daemon + 880LL);
      }
    }
    else
    {
      v40 = 1LL;
      if ( (v5->hb4 & 0x20) == 0 )
        v40 = (unsigned int)v36;
      v41 = answer_request(v5, (char *)v5 + v37, v11, v48, v51, v24, v40, v36, v32);
      fd = listen->fd;
      if ( v41 )
      {
        v43 = 1;
        if ( (*(_BYTE *)(dnsmasq_daemon + 1LL) & 0x20) == 0 )
          v43 = (*(_DWORD *)(dnsmasq_daemon + 4LL) >> 7) & 1;
        send_from(fd, v43, (char *)v5, v41, &to, &source, dst_iface[0]);
        ++*(_DWORD *)(dnsmasq_daemon + 872LL);
      }
      else if ( forward_query(fd, &to, &source, dst_iface[0], v5, v11, v24, 0LL, v40, v47) )
      {
        ++*(_DWORD *)(dnsmasq_daemon + 876LL);
      }
      else
      {
        ++*(_DWORD *)(dnsmasq_daemon + 872LL);
      }
    }
  }
}
