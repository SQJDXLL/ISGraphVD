int __fastcall upnp_redirect(
        const char *rhost,
        int eport,
        const char *iaddr,
        int iport,
        const char *protocol,
        const char *desc,
        unsigned int leaseduration)
{
  int v11; // r11
  unsigned int v12; // r5
  int redirect_rule; // r0
  const char *v14; // r6
  unsigned int v16; // r10
  int v17; // r10
  bool v18; // zf
  int v19; // r0
  bool v20; // zf
  unsigned int v21; // r1
  int v22; // [sp+28h] [bp-78h]
  char *s1; // [sp+2Ch] [bp-74h]
  unsigned int v24; // [sp+30h] [bp-70h] BYREF
  struct in_addr inp; // [sp+34h] [bp-6Ch] BYREF
  unsigned __int16 v26; // [sp+3Ah] [bp-66h] BYREF
  char v27[32]; // [sp+3Ch] [bp-64h] BYREF
  char s2[68]; // [sp+5Ch] [bp-44h] BYREF

  if ( !strcasecmp(protocol, "UDP") )
  {
    v11 = 17;
  }
  else
  {
    v11 = 6;
    if ( !strcasecmp(protocol, "UDPLITE") )
      v11 = 136;
  }
  if ( inet_aton(iaddr, &inp) <= 0 )
  {
    syslog(3, "inet_aton(%s) FAILED", iaddr);
    return -1;
  }
  else if ( check_upnp_rule_against_permissions(upnppermlist, num_upnpperm, eport, inp.s_addr, iport) )
  {
    s1 = (char *)rhost;
    v12 = 0;
    v22 = iport;
    v27[0] = 0;
    redirect_rule = get_redirect_rule(ext_if_name, eport, v11, s2, 32, &v26, 0, 0, v27, 32, &v24, 0, 0);
    v14 = (const char *)&L_str_2;
    if ( desc )
      v14 = desc;
    if ( redirect_rule )
    {
      if ( leaseduration )
        v12 = upnp_time() + leaseduration;
      v24 = v12;
      syslog(6, "redirecting port %hu to %s:%hu protocol %s for: %s", eport, iaddr, v22, protocol, v14);
      if ( disable_port_forwarding )
        return -1;
      v16 = v24;
      if ( add_redirect_rule2(ext_if_name, s1, eport, iaddr, v22, v11, v14, v24) < 0
        || add_filter_rule2(ext_if_name, s1, iaddr, eport, v22, v11, v14) < 0 )
      {
        return -1;
      }
      else
      {
        if ( v16 )
        {
          if ( nextruletoclean_timestamp - 1 >= v16 )
            nextruletoclean_timestamp = v16;
        }
        upnp_event_var_change_notify(2);
        return 0;
      }
    }
    else
    {
      if ( strcmp(iaddr, s2) )
        goto LABEL_18;
      v17 = (unsigned __int8)v27[0];
      v18 = s1 == 0;
      if ( !s1 )
        v18 = v27[0] == 0;
      if ( v18 )
        goto LABEL_33;
      if ( !s1 )
        goto LABEL_18;
      v19 = strcmp(s1, "*");
      v20 = v17 == 0;
      if ( !v17 )
        v20 = v19 == 0;
      if ( v20 || !strcmp(s1, v27) )
      {
LABEL_33:
        syslog(6, "updating existing port mapping %hu %s (rhost '%s') => %s:%hu", eport, protocol, v27, s2, v26);
        if ( leaseduration )
          v21 = upnp_time() + leaseduration;
        else
          v21 = 0;
        v24 = v21;
        if ( v26 == v22 )
          return update_portmapping_desc_timestamp(ext_if_name, eport, v11, v14, v21);
        else
          return update_portmapping(ext_if_name, eport, v11);
      }
      else
      {
LABEL_18:
        syslog(6, "port %hu %s (rhost '%s') already redirected to %s:%hu", eport, protocol, v27, s2, v26);
        return -2;
      }
    }
  }
  else
  {
    syslog(6, "redirection permission check failed for %hu->%s:%hu %s", eport, iaddr, iport, protocol);
    return -3;
  }
}
