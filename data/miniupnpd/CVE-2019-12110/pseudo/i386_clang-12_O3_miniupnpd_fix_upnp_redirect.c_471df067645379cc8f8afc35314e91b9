int __cdecl upnp_redirect(
        const char *rhost,
        unsigned __int16 eport,
        const char *iaddr,
        unsigned __int16 iport,
        const char *protocol,
        const char *desc,
        in_addr leaseduration)
{
  int v7; // ebx
  const char *v8; // ecx
  int v9; // eax
  int v10; // esi
  int v11; // eax
  int v12; // eax
  unsigned __int16 v15; // [esp+Ah] [ebp-62h] BYREF
  const char *v16; // [esp+Ch] [ebp-60h]
  unsigned int v17; // [esp+10h] [ebp-5Ch]
  unsigned int v18; // [esp+14h] [ebp-58h] BYREF
  struct in_addr inp; // [esp+18h] [ebp-54h] BYREF
  char v20[32]; // [esp+1Ch] [ebp-50h] BYREF
  char s2[48]; // [esp+3Ch] [ebp-30h] BYREF

  if ( !strcasecmp(protocol, "UDP") )
  {
    v7 = 17;
  }
  else
  {
    v7 = 6;
    if ( !strcasecmp(protocol, "UDPLITE") )
      v7 = 136;
  }
  if ( inet_aton(iaddr, &inp) <= 0 )
  {
    syslog(3, "inet_aton(%s) FAILED", iaddr);
    return -1;
  }
  else if ( check_upnp_rule_against_permissions(upnppermlist, num_upnpperm, eport, inp.s_addr, iport) )
  {
    v8 = (const char *)&unk_8000B3C;
    if ( desc )
      v8 = desc;
    v16 = v8;
    v20[0] = 0;
    if ( get_redirect_rule(ext_if_name, eport, v7, s2, 32, &v15, 0, 0, v20, 32, &v18, 0, 0) )
    {
      if ( leaseduration.s_addr )
        v9 = leaseduration.s_addr + upnp_time();
      else
        v9 = 0;
      v18 = v9;
      syslog(6, "redirecting port %hu to %s:%hu protocol %s for: %s", eport, iaddr, iport, protocol, v16);
      v10 = -1;
      if ( !disable_port_forwarding )
      {
        v17 = v18;
        if ( add_redirect_rule2(ext_if_name, rhost, eport, iaddr, iport, v7, v16, v18) >= 0
          && add_filter_rule2(ext_if_name, rhost, iaddr, eport, iport, v7, v16) >= 0 )
        {
          if ( v17 && nextruletoclean_timestamp - 1 >= v17 )
            nextruletoclean_timestamp = v17;
          upnp_event_var_change_notify(2);
          return 0;
        }
      }
    }
    else if ( strcmp(iaddr, s2)
           || (rhost || v20[0])
           && (!rhost || ((LOBYTE(v17) = v20[0], v11 = strcmp(rhost, "*"), (_BYTE)v17) || v11) && strcmp(rhost, v20)) )
    {
      syslog(6, "port %hu %s (rhost '%s') already redirected to %s:%hu", eport, protocol, v20, s2, v15);
      return -2;
    }
    else
    {
      syslog(6, "updating existing port mapping %hu %s (rhost '%s') => %s:%hu", eport, protocol, v20, s2, v15);
      if ( leaseduration.s_addr )
        v12 = leaseduration.s_addr + upnp_time();
      else
        v12 = 0;
      v18 = v12;
      if ( v15 == iport )
        return update_portmapping_desc_timestamp(ext_if_name, eport, v7, v16, v12);
      else
        return update_portmapping(ext_if_name, eport, v7, iport, v16, v12);
    }
  }
  else
  {
    syslog(6, "redirection permission check failed for %hu->%s:%hu %s", eport, iaddr, iport, protocol);
    return -3;
  }
  return v10;
}
