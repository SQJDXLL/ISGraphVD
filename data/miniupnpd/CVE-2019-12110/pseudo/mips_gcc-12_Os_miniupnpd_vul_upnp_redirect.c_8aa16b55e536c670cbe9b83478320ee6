int __fastcall upnp_redirect(
        const char *rhost,
        int eport,
        const char *iaddr,
        int iport,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *protocol,
        const char *desc,
        unsigned int leaseduration)
{
  unsigned int v15; // $s1
  int proto; // $s5
  int v18; // $v0
  int (*v19)(const char *); // $a1
  unsigned __int16 iport_old; // [sp+4Ah] [-4Eh]
  in_addr address; // [sp+4Ch] [-4Ch] BYREF
  unsigned int timestamp; // [sp+50h] [-48h]
  char iaddr_old[32]; // [sp+54h] [-44h] BYREF
  char rhost_old[32]; // [sp+74h] [-24h] BYREF

  v15 = leaseduration;
  proto = ((int (__fastcall *)(const char *))(MEMORY[0x9174] + (__int16)proto_atoi))(protocol);
  if ( inet_aton(iaddr, &address) <= 0 )
  {
    syslog(3, "inet_aton(%s) FAILED", iaddr);
    return -1;
  }
  if ( !check_upnp_rule_against_permissions(upnppermlist, num_upnpperm, eport, address.s_addr) )
  {
    syslog(6, "redirection permission check failed for %hu->%s:%hu %s", eport, iaddr, iport, protocol);
    return -3;
  }
  rhost_old[0] = 0;
  if ( !get_redirect_rule(ext_if_name, eport, proto, iaddr_old) )
  {
    if ( !strcmp(iaddr, iaddr_old) )
    {
      if ( rhost )
      {
        if ( !strcmp(rhost, "*") )
        {
          v19 = (int (*)(const char *))MEMORY[0x9174];
          if ( !rhost_old[0] )
            goto LABEL_11;
        }
        v18 = strcmp(rhost, rhost_old);
      }
      else
      {
        v18 = rhost_old[0];
      }
      if ( !v18 )
      {
        v19 = proto_atoi;
LABEL_11:
        syslog(
          6,
          (const char *)v19 + (__int16)"updating existing port mapping %hu %s (rhost '%s') => %s:%hu",
          eport,
          protocol);
        if ( leaseduration )
          v15 = leaseduration + upnp_time();
        timestamp = v15;
        if ( iport_old == iport )
          return update_portmapping_desc_timestamp(ext_if_name, eport, proto, desc);
        else
          return update_portmapping(ext_if_name, eport, proto, iport);
      }
    }
    syslog(6, "port %hu %s (rhost '%s') already redirected to %s:%hu", eport, protocol, rhost_old, iaddr_old, iport_old);
    return -2;
  }
  if ( leaseduration )
    v15 = leaseduration + upnp_time();
  timestamp = v15;
  syslog(6, "redirecting port %hu to %s:%hu protocol %s for: %s", eport, iaddr, iport, protocol, desc);
  return upnp_redirect_internal(rhost, eport, iaddr, iport, proto, desc, timestamp);
}
