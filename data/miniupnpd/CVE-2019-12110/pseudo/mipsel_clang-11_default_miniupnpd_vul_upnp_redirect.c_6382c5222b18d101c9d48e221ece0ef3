int __fastcall upnp_redirect(
        const char *rhost,
        unsigned __int16 eport,
        const char *iaddr,
        unsigned __int16 iport,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *protocol,
        const char *desc,
        unsigned int leaseduration)
{
  unsigned int v12; // [sp+3Ch] [+3Ch]
  struct in_addr v13; // [sp+60h] [+60h] BYREF
  unsigned __int16 v14; // [sp+68h] [+68h]
  char v15[32]; // [sp+6Ch] [+6Ch] BYREF
  char v16[32]; // [sp+8Ch] [+8Ch] BYREF
  int v18; // [sp+B0h] [+B0h]
  unsigned __int16 v19; // [sp+B4h] [+B4h]
  char *cp; // [sp+B8h] [+B8h]
  unsigned __int16 v21; // [sp+BCh] [+BCh]
  char *rhosta; // [sp+C0h] [+C0h]

  rhosta = (char *)rhost;
  v21 = eport;
  cp = (char *)iaddr;
  v19 = iport;
  v18 = proto_atoi(protocol);
  if ( inet_aton(cp, &v13) > 0 )
  {
    if ( check_upnp_rule_against_permissions(upnppermlist, num_upnpperm, v21, v13.s_addr) )
    {
      v15[0] = 0;
      if ( get_redirect_rule(ext_if_name, v21, v18, v16) )
      {
        if ( leaseduration )
          v12 = upnp_time() + leaseduration;
        else
          v12 = 0;
        syslog(6, "redirecting port %hu to %s:%hu protocol %s for: %s", v21, cp, v19, protocol, desc);
        return upnp_redirect_internal(rhosta, v21, cp, v19, v18, desc, v12);
      }
      else if ( !strcmp(cp, v16)
             && (!rhosta && !v15[0] || rhosta && !strcmp(rhosta, "*") && !v15[0] || rhosta && !strcmp(rhosta, v15)) )
      {
        syslog(6, "updating existing port mapping %hu %s (rhost '%s') => %s:%hu", v21, protocol, v15, v16, v14);
        if ( leaseduration )
          upnp_time();
        if ( v19 == v14 )
          return update_portmapping_desc_timestamp(ext_if_name, v21, v18, desc);
        else
          return update_portmapping(ext_if_name, v21, v18, v19);
      }
      else
      {
        syslog(6, "port %hu %s (rhost '%s') already redirected to %s:%hu", v21, protocol, v15, v16, v14);
        return -2;
      }
    }
    else
    {
      syslog(6, "redirection permission check failed for %hu->%s:%hu %s", v21, cp, v19, protocol);
      return -3;
    }
  }
  else
  {
    syslog(3, "inet_aton(%s) FAILED", cp);
    return -1;
  }
}
