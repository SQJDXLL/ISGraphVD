int __fastcall upnp_redirect(
        const char *rhost,
        unsigned __int16 eport,
        const char *iaddr,
        unsigned __int16 iport,
        const char *protocol,
        const char *desc,
        unsigned int leaseduration)
{
  unsigned int v11; // w19
  unsigned int v13; // w20
  unsigned int v14; // w21
  unsigned int v15; // w8
  int v17; // w26
  int v18; // w0
  unsigned int v19; // w5
  unsigned int v20; // [xsp+2Ch] [xbp-44h] BYREF
  char v21[32]; // [xsp+30h] [xbp-40h] BYREF
  char s2[32]; // [xsp+50h] [xbp-20h] BYREF
  char iaddr_old[32]; // [xsp+70h] [xbp+0h] BYREF

  v11 = iport;
  v13 = eport;
  v14 = proto_atoi(protocol);
  if ( inet_aton(iaddr, (struct in_addr *)&iaddr_old[24]) <= 0 )
  {
    syslog(3, "inet_aton(%s) FAILED", iaddr);
    return -1;
  }
  else if ( (unsigned int)check_upnp_rule_against_permissions(
                            upnppermlist,
                            num_upnpperm,
                            v13,
                            *(unsigned int *)&iaddr_old[24],
                            v11) )
  {
    if ( !desc )
      desc = (const char *)&unk_A78;
    v21[0] = 0;
    if ( (unsigned int)get_redirect_rule(
                         ext_if_name,
                         v13,
                         v14,
                         s2,
                         32LL,
                         &iaddr_old[28],
                         0LL,
                         0LL,
                         v21,
                         32,
                         &v20,
                         0LL,
                         0LL) )
    {
      if ( leaseduration )
        v15 = upnp_time() + leaseduration;
      else
        v15 = 0;
      v20 = v15;
      syslog(
        6,
        "redirecting port %hu to %s:%hu protocol %s for: %s",
        (unsigned __int16)v13,
        iaddr,
        (unsigned __int16)v11,
        protocol,
        desc);
      return upnp_redirect_internal(rhost, v13, iaddr, v11, v14, desc, v20);
    }
    else if ( strcmp(iaddr, s2)
           || ((v17 = (unsigned __int8)v21[0], rhost) || v21[0])
           && (!rhost || ((v18 = strcmp(rhost, "*"), v17) || v18) && strcmp(rhost, v21)) )
    {
      syslog(
        6,
        "port %hu %s (rhost '%s') already redirected to %s:%hu",
        (unsigned __int16)v13,
        protocol,
        v21,
        s2,
        *(unsigned __int16 *)&iaddr_old[28]);
      return -2;
    }
    else
    {
      syslog(
        6,
        "updating existing port mapping %hu %s (rhost '%s') => %s:%hu",
        (unsigned __int16)v13,
        protocol,
        v21,
        s2,
        *(unsigned __int16 *)&iaddr_old[28]);
      if ( leaseduration )
        v19 = upnp_time() + leaseduration;
      else
        v19 = 0;
      v20 = v19;
      if ( *(unsigned __int16 *)&iaddr_old[28] == (unsigned __int16)v11 )
        return update_portmapping_desc_timestamp(ext_if_name, v13, v14, desc, v19);
      else
        return update_portmapping(ext_if_name, v13, v14, v11, desc);
    }
  }
  else
  {
    syslog(
      6,
      "redirection permission check failed for %hu->%s:%hu %s",
      (unsigned __int16)v13,
      iaddr,
      (unsigned __int16)v11,
      protocol);
    return -3;
  }
}
