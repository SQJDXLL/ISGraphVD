int __fastcall upnp_redirect(
        const char *rhost,
        unsigned __int16 eport,
        const char *iaddr,
        unsigned __int16 iport,
        const char *protocol,
        const char *desc,
        unsigned int leaseduration)
{
  unsigned int v11; // w24
  unsigned int v13; // w26
  unsigned int v14; // w25
  __int64 redirect_rule; // x0
  __int64 v16; // x1
  __int64 v17; // x2
  __int64 v18; // x3
  __int64 v19; // x4
  __int64 v20; // x0
  __int64 v21; // x1
  __int64 v22; // x2
  __int64 v23; // x3
  __int64 v24; // x4
  int v25; // w20
  unsigned int v27; // w22
  unsigned __int16 iport_old; // [xsp+AEh] [xbp+7Eh]
  in_addr address; // [xsp+B0h] [xbp+80h] BYREF
  unsigned int timestamp; // [xsp+B4h] [xbp+84h] BYREF
  char iaddr_old[32]; // [xsp+B8h] [xbp+88h] BYREF
  char rhost_old[32]; // [xsp+D8h] [xbp+A8h] BYREF

  v11 = eport;
  v13 = iport;
  v14 = 17;
  if ( strcasecmp(protocol, "UDP") )
  {
    if ( !strcasecmp(protocol, "UDPLITE") )
      v14 = 136;
    else
      v14 = 6;
  }
  if ( inet_aton(iaddr, &address) <= 0 )
  {
    v25 = -1;
    syslog(3, "inet_aton(%s) FAILED", iaddr);
    return v25;
  }
  if ( !(unsigned int)check_upnp_rule_against_permissions(upnppermlist, num_upnpperm, v11, address.s_addr, v13) )
  {
    v25 = -3;
    syslog(6, "redirection permission check failed for %hu->%s:%hu %s", v11, iaddr, v13, protocol);
    return v25;
  }
  if ( !desc )
    desc = (const char *)&unk_DD0;
  rhost_old[0] = 0;
  redirect_rule = get_redirect_rule(ext_if_name, v11, v14, iaddr_old);
  if ( !(_DWORD)redirect_rule )
  {
    if ( !strcmp(iaddr, iaddr_old) )
    {
      if ( rhost )
      {
        if ( *rhost == 42 && !rhost[1] && !rhost_old[0] || !strcmp(rhost, rhost_old) )
        {
LABEL_16:
          syslog(
            6,
            "updating existing port mapping %hu %s (rhost '%s') => %s:%hu",
            v11,
            protocol,
            rhost_old,
            iaddr_old,
            iport_old);
          if ( leaseduration )
            leaseduration += upnp_time(v20, v21, v22, v23, v24);
          timestamp = leaseduration;
          if ( iport_old == v13 )
            return update_portmapping_desc_timestamp(ext_if_name, v11, v14, desc, leaseduration);
          else
            return update_portmapping(ext_if_name, v11, v14, v13, desc, leaseduration);
        }
      }
      else if ( !rhost_old[0] )
      {
        goto LABEL_16;
      }
    }
    v25 = -2;
    syslog(6, "port %hu %s (rhost '%s') already redirected to %s:%hu", v11, protocol, rhost_old, iaddr_old, iport_old);
    return v25;
  }
  if ( leaseduration )
    leaseduration += upnp_time(redirect_rule, v16, v17, v18, v19);
  timestamp = leaseduration;
  syslog(6, "redirecting port %hu to %s:%hu protocol %s for: %s", v11, iaddr, v13, protocol, desc);
  v27 = timestamp;
  v25 = disable_port_forwarding;
  if ( disable_port_forwarding
    || (add_redirect_rule2(
          ext_if_name,
          rhost,
          v11,
          iaddr,
          v13,
          v14,
          desc,
          timestamp,
          rhost_old,
          32,
          &timestamp,
          0LL,
          0LL) & 0x80000000) != 0
    || (add_filter_rule2(ext_if_name, rhost, iaddr, v11, v13, v14, desc) & 0x80000000) != 0 )
  {
    return -1;
  }
  if ( v27 && v27 <= nextruletoclean_timestamp - 1 )
    nextruletoclean_timestamp = v27;
  upnp_event_var_change_notify(2LL);
  return v25;
}
