int __fastcall upnp_redirect(
        const char *rhost,
        unsigned __int16 eport,
        const char *iaddr,
        unsigned __int16 iport,
        const char *protocol,
        const char *desc,
        unsigned int leaseduration)
{
  unsigned int v11; // eax
  char *v13; // rbp
  char v14; // r15
  int v15; // eax
  unsigned int v16; // ebp
  __int64 v17; // [rsp+0h] [rbp-D8h]
  unsigned __int16 v18; // [rsp+3Eh] [rbp-9Ah] BYREF
  int proto; // [rsp+40h] [rbp-98h]
  unsigned int v20; // [rsp+44h] [rbp-94h] BYREF
  char *s1; // [rsp+48h] [rbp-90h]
  char *v22; // [rsp+50h] [rbp-88h]
  struct in_addr inp; // [rsp+58h] [rbp-80h] BYREF
  char v24[32]; // [rsp+60h] [rbp-78h] BYREF
  char s2[88]; // [rsp+80h] [rbp-58h] BYREF

  proto = proto_atoi(protocol);
  if ( inet_aton(iaddr, &inp) <= 0 )
  {
    syslog(3, "inet_aton(%s) FAILED", iaddr);
    return -1;
  }
  else
  {
    s1 = (char *)rhost;
    v22 = (char *)desc;
    if ( (unsigned int)check_upnp_rule_against_permissions(upnppermlist, num_upnpperm, eport, inp.s_addr, iport) )
    {
      v24[0] = 0;
      if ( (unsigned int)get_redirect_rule(
                           ext_if_name,
                           eport,
                           (unsigned int)proto,
                           s2,
                           32LL,
                           &v18,
                           0LL,
                           0,
                           v24,
                           32,
                           &v20,
                           0LL,
                           0LL) )
      {
        if ( leaseduration )
          v11 = leaseduration + upnp_time();
        else
          v11 = 0;
        v20 = v11;
        v13 = v22;
        syslog(6, "redirecting port %hu to %s:%hu protocol %s for: %s", eport, iaddr, iport, protocol, v22);
        return upnp_redirect_internal(s1, eport, iaddr, iport, proto, v13, v20);
      }
      else if ( strcmp(iaddr, s2)
             || ((v14 = v24[0], s1) || v24[0]) && (!s1 || ((v15 = strcmp(s1, "*"), v14) || v15) && strcmp(s1, v24)) )
      {
        LODWORD(v17) = v18;
        syslog(6, "port %hu %s (rhost '%s') already redirected to %s:%hu", eport, protocol, v24, s2, v17);
        return -2;
      }
      else
      {
        LODWORD(v17) = v18;
        v16 = 0;
        syslog(6, "updating existing port mapping %hu %s (rhost '%s') => %s:%hu", eport, protocol, v24, s2, v17);
        if ( leaseduration )
          v16 = leaseduration + upnp_time();
        v20 = v16;
        if ( v18 == iport )
          return update_portmapping_desc_timestamp(ext_if_name, eport, (unsigned int)proto, v22, v16);
        else
          return update_portmapping(ext_if_name, eport, (unsigned int)proto, iport, v22, v16);
      }
    }
    else
    {
      syslog(6, "redirection permission check failed for %hu->%s:%hu %s", eport, iaddr, iport, protocol);
      return -3;
    }
  }
}
