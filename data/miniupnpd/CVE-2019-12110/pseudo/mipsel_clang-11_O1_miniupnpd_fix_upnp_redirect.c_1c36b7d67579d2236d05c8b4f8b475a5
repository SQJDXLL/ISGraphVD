int __fastcall upnp_redirect(
        const char *rhost,
        int eport,
        const char *iaddr,
        int iport,
        int a5,
        int a6,
        int a7,
        int a8,
        const char *protocol,
        const char *desc,
        unsigned int leaseduration)
{
  int proto; // $s2
  const char *v16; // $s4
  int redirect_rule; // $v0
  unsigned int v18; // $v0
  int v20; // $v0
  int v21; // [sp+38h] [-50h]
  unsigned int timestamp; // [sp+3Ch] [-4Ch]
  struct in_addr v23; // [sp+40h] [-48h] BYREF
  unsigned __int16 v24; // [sp+44h] [-44h]
  char v25[32]; // [sp+48h] [-40h] BYREF
  char v26[32]; // [sp+68h] [-20h] BYREF

  proto = proto_atoi(protocol);
  if ( inet_aton(iaddr, &v23) <= 0 )
  {
    syslog(3, "inet_aton(%s) FAILED", iaddr);
    return -1;
  }
  else if ( check_upnp_rule_against_permissions(upnppermlist, num_upnpperm, eport, v23.s_addr) )
  {
    v16 = desc;
    v25[0] = 0;
    redirect_rule = get_redirect_rule(ext_if_name, eport, proto, v26);
    if ( !desc )
      v16 = (const char *)&__str_2;
    if ( redirect_rule )
    {
      if ( leaseduration )
        v18 = upnp_time() + leaseduration;
      else
        v18 = 0;
      timestamp = v18;
      syslog(6, "redirecting port %hu to %s:%hu protocol %s for: %s", eport, iaddr, iport, protocol, v16);
      return upnp_redirect_internal(rhost, eport, iaddr, iport, proto, v16, timestamp);
    }
    else if ( strcmp(iaddr, v26)
           || (rhost || v25[0])
           && (!rhost || ((v21 = (unsigned __int8)v25[0], v20 = strcmp(rhost, "*"), v21) || v20) && strcmp(rhost, v25)) )
    {
      syslog(6, "port %hu %s (rhost '%s') already redirected to %s:%hu", eport, protocol, v25, v26, v24);
      return -2;
    }
    else
    {
      syslog(6, "updating existing port mapping %hu %s (rhost '%s') => %s:%hu", eport, protocol, v25, v26, v24);
      if ( leaseduration )
        upnp_time();
      if ( v24 == iport )
        return update_portmapping_desc_timestamp(ext_if_name, eport, proto, v16);
      else
        return update_portmapping(ext_if_name, eport, proto, iport);
    }
  }
  else
  {
    syslog(6, "redirection permission check failed for %hu->%s:%hu %s", eport, iaddr, iport, protocol);
    return -3;
  }
}
