int __cdecl upnp_redirect(
        const char *rhost,
        unsigned __int16 eport,
        const char *iaddr,
        unsigned __int16 iport,
        const char *protocol,
        const char *desc,
        unsigned int leaseduration)
{
  int v7; // edi
  const char *v8; // ebp
  unsigned __int16 iport_old; // [esp+22h] [ebp-6Ah] BYREF
  in_addr address; // [esp+24h] [ebp-68h] BYREF
  unsigned int timestamp; // [esp+28h] [ebp-64h] BYREF
  char iaddr_old[32]; // [esp+2Ch] [ebp-60h] BYREF
  char rhost_old[32]; // [esp+4Ch] [ebp-40h] BYREF
  unsigned int v15; // [esp+6Ch] [ebp-20h]

  v7 = 17;
  v8 = desc;
  v15 = __readgsdword(0x14u);
  if ( strcasecmp(protocol, "UDP") )
    v7 = strcasecmp(protocol, "UDPLITE") == 0 ? 136 : 6;
  if ( inet_aton(iaddr, &address) <= 0 )
  {
    syslog(3, "inet_aton(%s) FAILED", iaddr);
    return -1;
  }
  if ( !check_upnp_rule_against_permissions(upnppermlist, num_upnpperm, eport, address.s_addr, iport) )
  {
    syslog(6, "redirection permission check failed for %hu->%s:%hu %s", eport, iaddr, iport, protocol);
    return -3;
  }
  rhost_old[0] = 0;
  if ( !desc )
    v8 = (const char *)&LC0;
  if ( !get_redirect_rule(ext_if_name, eport, v7, iaddr_old, 32, &iport_old, 0, 0, rhost_old, 32, &timestamp, 0, 0) )
  {
    if ( !strcmp(iaddr, iaddr_old) )
    {
      if ( rhost )
      {
        if ( *rhost == 42 && !rhost[1] && !rhost_old[0] || !strcmp(rhost, rhost_old) )
        {
LABEL_14:
          syslog(
            6,
            "updating existing port mapping %hu %s (rhost '%s') => %s:%hu",
            eport,
            protocol,
            rhost_old,
            iaddr_old,
            iport_old);
          if ( leaseduration )
            leaseduration += upnp_time();
          timestamp = leaseduration;
          if ( iport_old == iport )
            return update_portmapping_desc_timestamp(ext_if_name, eport, v7, v8, leaseduration);
          else
            return update_portmapping(ext_if_name, eport, v7, iport, v8, leaseduration);
        }
      }
      else if ( !rhost_old[0] )
      {
        goto LABEL_14;
      }
    }
    syslog(6, "port %hu %s (rhost '%s') already redirected to %s:%hu", eport, protocol, rhost_old, iaddr_old, iport_old);
    return -2;
  }
  if ( leaseduration )
    leaseduration += upnp_time();
  timestamp = leaseduration;
  syslog(6, "redirecting port %hu to %s:%hu protocol %s for: %s", eport, iaddr, iport, protocol, v8);
  return upnp_redirect_internal(rhost, eport, iaddr, iport, v7, v8, timestamp);
}
