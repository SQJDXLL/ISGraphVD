int __cdecl upnp_redirect(
        const char *rhost,
        unsigned __int16 eport,
        const char *iaddr,
        unsigned __int16 iport,
        const char *protocol,
        const char *desc,
        unsigned int leaseduration)
{
  unsigned int v8; // [sp+28h] [bp-98h]
  unsigned int v9; // [sp+2Ch] [bp-94h]
  unsigned int timestamp; // [sp+48h] [bp-78h] BYREF
  struct in_addr inp; // [sp+4Ch] [bp-74h] BYREF
  unsigned __int16 v12; // [sp+52h] [bp-6Eh] BYREF
  char s2[32]; // [sp+54h] [bp-6Ch] BYREF
  char iaddr_old[32]; // [sp+74h] [bp-4Ch] BYREF
  int proto; // [sp+98h] [bp-28h]
  unsigned __int16 iporta; // [sp+9Eh] [bp-22h]
  const char *iaddra; // [sp+A0h] [bp-20h]
  unsigned __int16 eporta; // [sp+A6h] [bp-1Ah]
  const char *rhosta; // [sp+A8h] [bp-18h]

  rhosta = rhost;
  eporta = eport;
  iaddra = iaddr;
  iporta = iport;
  proto = proto_atoi(protocol);
  if ( inet_aton(iaddra, &inp) > 0 )
  {
    if ( check_upnp_rule_against_permissions(upnppermlist, num_upnpperm, eporta, inp.s_addr, iporta) )
    {
      s2[0] = 0;
      if ( get_redirect_rule(ext_if_name, eporta, proto, iaddr_old, 32, &v12, 0, 0, s2, 32, &timestamp, 0, 0) )
      {
        if ( leaseduration )
          v8 = upnp_time() + leaseduration;
        else
          v8 = 0;
        timestamp = v8;
        syslog(6, "redirecting port %hu to %s:%hu protocol %s for: %s", eporta, iaddra, iporta, protocol, desc);
        return upnp_redirect_internal(rhosta, eporta, iaddra, iporta, proto, desc, timestamp);
      }
      else if ( !strcmp(iaddra, iaddr_old)
             && (!rhosta && !s2[0] || rhosta && !strcmp(rhosta, "*") && !s2[0] || rhosta && !strcmp(rhosta, s2)) )
      {
        syslog(6, "updating existing port mapping %hu %s (rhost '%s') => %s:%hu", eporta, protocol, s2, iaddr_old, v12);
        if ( leaseduration )
          v9 = upnp_time() + leaseduration;
        else
          v9 = 0;
        timestamp = v9;
        if ( iporta == v12 )
          return update_portmapping_desc_timestamp(ext_if_name, eporta, proto, desc, timestamp);
        else
          return update_portmapping(ext_if_name, eporta, proto, iporta, desc, timestamp);
      }
      else
      {
        syslog(6, "port %hu %s (rhost '%s') already redirected to %s:%hu", eporta, protocol, s2, iaddr_old, v12);
        return -2;
      }
    }
    else
    {
      syslog(6, "redirection permission check failed for %hu->%s:%hu %s", eporta, iaddra, iporta, protocol);
      return -3;
    }
  }
  else
  {
    syslog(3, "inet_aton(%s) FAILED", iaddra);
    return -1;
  }
}
