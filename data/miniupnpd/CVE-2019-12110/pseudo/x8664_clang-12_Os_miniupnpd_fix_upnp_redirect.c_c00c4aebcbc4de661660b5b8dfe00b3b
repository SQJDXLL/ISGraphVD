int __fastcall upnp_redirect(
        const char *rhost,
        unsigned __int16 eport,
        const char *iaddr,
        unsigned __int16 iport,
        const char *protocol,
        const char *desc,
        unsigned int leaseduration)
{
  int v9; // ebp
  const char *v11; // rax
  const char *v12; // r12
  unsigned int v13; // eax
  char v15; // r14
  int v16; // eax
  unsigned int v17; // r14d
  __int64 v18; // [rsp+0h] [rbp-D8h]
  unsigned __int16 v19; // [rsp+46h] [rbp-92h] BYREF
  int proto; // [rsp+48h] [rbp-90h]
  unsigned int v21; // [rsp+4Ch] [rbp-8Ch] BYREF
  char *s1; // [rsp+50h] [rbp-88h]
  struct in_addr inp; // [rsp+58h] [rbp-80h] BYREF
  int v24; // [rsp+5Ch] [rbp-7Ch]
  char v25[32]; // [rsp+60h] [rbp-78h] BYREF
  char s2[88]; // [rsp+80h] [rbp-58h] BYREF

  v9 = iport;
  proto = proto_atoi(protocol);
  if ( inet_aton(iaddr, &inp) <= 0 )
  {
    syslog(3, "inet_aton(%s) FAILED", iaddr);
    return -1;
  }
  else
  {
    s1 = (char *)rhost;
    v24 = v9;
    if ( (unsigned int)check_upnp_rule_against_permissions(
                         upnppermlist,
                         num_upnpperm,
                         eport,
                         inp.s_addr,
                         (unsigned __int16)v9) )
    {
      v11 = (const char *)&unk_9CE;
      if ( desc )
        v11 = desc;
      v12 = v11;
      v25[0] = 0;
      if ( (unsigned int)get_redirect_rule(
                           ext_if_name,
                           eport,
                           (unsigned int)proto,
                           s2,
                           32LL,
                           &v19,
                           0LL,
                           0,
                           v25,
                           32,
                           &v21,
                           0LL,
                           0LL) )
      {
        if ( leaseduration )
          v13 = leaseduration + upnp_time();
        else
          v13 = 0;
        v21 = v13;
        syslog(
          6,
          "redirecting port %hu to %s:%hu protocol %s for: %s",
          eport,
          iaddr,
          (unsigned __int16)v9,
          protocol,
          v12);
        return upnp_redirect_internal(s1, eport, iaddr, v9, proto, v12, v21);
      }
      else if ( strcmp(iaddr, s2)
             || ((v15 = v25[0], s1) || v25[0]) && (!s1 || ((v16 = strcmp(s1, "*"), v15) || v16) && strcmp(s1, v25)) )
      {
        LODWORD(v18) = v19;
        syslog(6, "port %hu %s (rhost '%s') already redirected to %s:%hu", eport, protocol, v25, s2, v18);
        return -2;
      }
      else
      {
        LODWORD(v18) = v19;
        v17 = 0;
        syslog(6, "updating existing port mapping %hu %s (rhost '%s') => %s:%hu", eport, protocol, v25, s2, v18);
        if ( leaseduration )
          v17 = leaseduration + upnp_time();
        v21 = v17;
        if ( v19 == (_WORD)v24 )
          return update_portmapping_desc_timestamp(ext_if_name, eport, (unsigned int)proto, v12, v17);
        else
          return update_portmapping(ext_if_name, eport, (unsigned int)proto, (unsigned __int16)v9, v12, v17);
      }
    }
    else
    {
      syslog(6, "redirection permission check failed for %hu->%s:%hu %s", eport, iaddr, (unsigned __int16)v9, protocol);
      return -3;
    }
  }
}
