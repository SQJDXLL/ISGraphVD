int __fastcall upnp_redirect(
        const char *rhost,
        unsigned __int16 eport,
        const char *iaddr,
        unsigned __int16 iport,
        const char *protocol,
        const char *desc,
        unsigned int leaseduration)
{
  unsigned int v8; // r14d
  __int64 v11; // rdx
  const char *v12; // rcx
  const char *v13; // r8
  const char *v14; // r9
  const char *v16; // [rsp+0h] [rbp-C8h]
  __int64 v17; // [rsp+10h] [rbp-B8h]
  unsigned __int16 iport_old; // [rsp+36h] [rbp-92h] BYREF
  in_addr address; // [rsp+38h] [rbp-90h] BYREF
  unsigned int timestamp; // [rsp+3Ch] [rbp-8Ch] BYREF
  char iaddr_old[32]; // [rsp+40h] [rbp-88h] BYREF
  char rhost_old[32]; // [rsp+60h] [rbp-68h] BYREF
  unsigned __int64 v24; // [rsp+88h] [rbp-40h]

  v8 = 17;
  v24 = __readfsqword(0x28u);
  if ( strcasecmp(protocol, "UDP") )
    v8 = strcasecmp(protocol, "UDPLITE") == 0 ? 136 : 6;
  if ( inet_aton(iaddr, &address) <= 0 )
  {
    syslog(3, "inet_aton(%s) FAILED", iaddr);
    return -1;
  }
  if ( !(unsigned int)check_upnp_rule_against_permissions(upnppermlist, num_upnpperm, eport, address.s_addr) )
  {
    syslog(6, "redirection permission check failed for %hu->%s:%hu %s", eport, iaddr, iport, protocol);
    return -3;
  }
  rhost_old[0] = 0;
  if ( !desc )
    desc = &LC0;
  if ( !(unsigned int)get_redirect_rule(
                        ext_if_name,
                        eport,
                        v8,
                        iaddr_old,
                        32LL,
                        &iport_old,
                        0LL,
                        0LL,
                        rhost_old,
                        32LL,
                        &timestamp,
                        0LL,
                        0LL) )
  {
    if ( !strcmp(iaddr, iaddr_old) )
    {
      if ( rhost )
      {
        if ( *rhost == 42 && !rhost[1] && !rhost_old[0] || !strcmp(rhost, rhost_old) )
        {
LABEL_14:
          syslog(
            6,
            "updating existing port mapping %hu %s (rhost '%s') => %s:%hu",
            eport,
            protocol,
            rhost_old,
            iaddr_old,
            iport_old);
          v14 = v16;
          if ( leaseduration )
            leaseduration += upnp_time(
                               6LL,
                               "updating existing port mapping %hu %s (rhost '%s') => %s:%hu",
                               v11,
                               v12,
                               v13,
                               v16,
                               v17);
          timestamp = leaseduration;
          if ( iport_old == iport )
            return update_portmapping_desc_timestamp(ext_if_name, eport, v8, desc, leaseduration, v14);
          else
            return update_portmapping(ext_if_name, eport, v8, iport, desc, leaseduration);
        }
      }
      else if ( !rhost_old[0] )
      {
        goto LABEL_14;
      }
    }
    syslog(6, "port %hu %s (rhost '%s') already redirected to %s:%hu", eport, protocol, rhost_old, iaddr_old, iport_old);
    return -2;
  }
  if ( leaseduration )
    leaseduration += ((__int64 (*)(void))upnp_time)();
  timestamp = leaseduration;
  syslog(6, "redirecting port %hu to %s:%hu protocol %s for: %s", eport, iaddr, iport, protocol, desc);
  return upnp_redirect_internal(rhost, eport, iaddr, iport, v8, desc, timestamp);
}
