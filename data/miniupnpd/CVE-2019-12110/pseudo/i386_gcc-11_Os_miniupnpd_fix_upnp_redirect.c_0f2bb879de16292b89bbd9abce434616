int __cdecl upnp_redirect(
        const char *rhost,
        unsigned __int16 eport,
        const char *iaddr,
        unsigned __int16 iport,
        const char *protocol,
        const char *desc,
        unsigned int leaseduration)
{
  int v7; // edx
  int v9; // eax
  int v10; // edx
  int v11; // edi
  int proto; // [esp+8h] [ebp-7Ch]
  const char *desc_0; // [esp+18h] [ebp-6Ch]
  unsigned __int16 iport_old; // [esp+1Eh] [ebp-66h] BYREF
  in_addr address; // [esp+20h] [ebp-64h] BYREF
  unsigned int timestamp; // [esp+24h] [ebp-60h] BYREF
  char iaddr_old[32]; // [esp+28h] [ebp-5Ch] BYREF
  char rhost_old[32]; // [esp+48h] [ebp-3Ch] BYREF
  unsigned int v19; // [esp+68h] [ebp-1Ch]

  desc_0 = desc;
  v19 = __readgsdword(0x14u);
  proto = proto_atoi(protocol);
  if ( inet_aton(iaddr, &address) <= 0 )
  {
    syslog(3, "inet_aton(%s) FAILED", iaddr, v7);
    return -1;
  }
  if ( !check_upnp_rule_against_permissions(upnppermlist, num_upnpperm, eport, address.s_addr, iport) )
  {
    syslog(6, "redirection permission check failed for %hu->%s:%hu %s", eport, iaddr, iport, protocol, 0, 0);
    return -3;
  }
  if ( !desc )
    desc_0 = (const char *)&LC2;
  rhost_old[0] = 0;
  if ( !get_redirect_rule(ext_if_name, eport, proto, iaddr_old, 32, &iport_old, 0, 0, rhost_old, 32, &timestamp, 0, 0) )
  {
    v9 = strcmp(iaddr, iaddr_old);
    v11 = iport_old;
    if ( !v9 )
    {
      if ( rhost )
      {
        v9 = strcmp(rhost, "*");
        if ( v9 )
          goto LABEL_13;
      }
      if ( !rhost_old[0] )
      {
LABEL_14:
        syslog(
          6,
          "updating existing port mapping %hu %s (rhost '%s') => %s:%hu",
          eport,
          protocol,
          rhost_old,
          iaddr_old,
          v11,
          v9);
        if ( leaseduration )
          leaseduration += upnp_time();
        timestamp = leaseduration;
        if ( iport_old == iport )
          return update_portmapping_desc_timestamp(ext_if_name, eport, proto, desc_0, leaseduration);
        else
          return update_portmapping(ext_if_name, eport, proto, iport, desc_0, leaseduration, iport, iport);
      }
      if ( rhost )
      {
LABEL_13:
        v9 = strcmp(rhost, rhost_old);
        if ( !v9 )
          goto LABEL_14;
      }
    }
    syslog(6, "port %hu %s (rhost '%s') already redirected to %s:%hu", eport, protocol, rhost_old, iaddr_old, v11, v10);
    return -2;
  }
  if ( leaseduration )
    leaseduration += upnp_time();
  timestamp = leaseduration;
  syslog(6, "redirecting port %hu to %s:%hu protocol %s for: %s", eport, iaddr, iport, protocol, desc_0);
  return upnp_redirect_internal(rhost, eport, iaddr, iport, proto, desc_0, timestamp);
}
