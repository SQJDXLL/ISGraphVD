int __cdecl upnp_redirect(
        const char *rhost,
        unsigned __int16 eport,
        const char *iaddr,
        unsigned __int16 iport,
        const char *protocol,
        char *desc,
        in_addr leaseduration)
{
  int v7; // ebx
  char *v8; // ecx
  int v9; // edi
  unsigned int v10; // ebx
  char *v11; // ebx
  unsigned __int16 v12; // di
  char v14; // bl
  int v15; // eax
  unsigned int v16; // eax
  unsigned __int16 v17; // [esp+6h] [ebp-66h] BYREF
  char *v18; // [esp+8h] [ebp-64h]
  unsigned __int16 v19[2]; // [esp+Ch] [ebp-60h]
  int v20; // [esp+10h] [ebp-5Ch]
  unsigned int v21; // [esp+14h] [ebp-58h] BYREF
  struct in_addr inp; // [esp+18h] [ebp-54h] BYREF
  char v23[32]; // [esp+1Ch] [ebp-50h] BYREF
  char s2[48]; // [esp+3Ch] [ebp-30h] BYREF

  v7 = proto_atoi(protocol);
  if ( inet_aton(iaddr, &inp) <= 0 )
  {
    syslog(3, "inet_aton(%s) FAILED", iaddr);
    return -1;
  }
  else if ( check_upnp_rule_against_permissions(upnppermlist, num_upnpperm, eport, inp.s_addr, iport) )
  {
    v8 = (char *)&L_str_2;
    *(_DWORD *)v19 = iport;
    v23[0] = 0;
    if ( desc )
      v8 = desc;
    v18 = v8;
    v9 = v7;
    v10 = 0;
    v20 = v9;
    if ( get_redirect_rule(ext_if_name, eport, v9, s2, 32, &v17, 0, 0, v23, 32, &v21, 0, 0) )
    {
      if ( leaseduration.s_addr )
        v10 = leaseduration.s_addr + upnp_time();
      v21 = v10;
      v11 = v18;
      v12 = v19[0];
      syslog(6, "redirecting port %hu to %s:%hu protocol %s for: %s", eport, iaddr, *(_DWORD *)v19, protocol, v18);
      return upnp_redirect_internal(rhost, eport, iaddr, v12, v20, v11, v21);
    }
    else if ( strcmp(iaddr, s2)
           || ((v14 = v23[0], rhost) || v23[0])
           && (!rhost || ((v15 = strcmp(rhost, "*"), v14) || v15) && strcmp(rhost, v23)) )
    {
      syslog(6, "port %hu %s (rhost '%s') already redirected to %s:%hu", eport, protocol, v23, s2, v17);
      return -2;
    }
    else
    {
      syslog(6, "updating existing port mapping %hu %s (rhost '%s') => %s:%hu", eport, protocol, v23, s2, v17);
      if ( leaseduration.s_addr )
        v16 = leaseduration.s_addr + upnp_time();
      else
        v16 = 0;
      v21 = v16;
      if ( v17 == iport )
        return update_portmapping_desc_timestamp(ext_if_name, eport, v20, v18, v16);
      else
        return update_portmapping(ext_if_name, eport, v20, *(_DWORD *)v19, v18, v16);
    }
  }
  else
  {
    syslog(6, "redirection permission check failed for %hu->%s:%hu %s", eport, iaddr, iport, protocol);
    return -3;
  }
}
