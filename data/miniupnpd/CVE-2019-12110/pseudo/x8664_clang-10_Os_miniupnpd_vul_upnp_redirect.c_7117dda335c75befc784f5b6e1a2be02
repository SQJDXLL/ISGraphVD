int __fastcall upnp_redirect(
        const char *rhost,
        unsigned __int16 eport,
        const char *iaddr,
        unsigned __int16 iport,
        const char *protocol,
        const char *desc,
        unsigned int leaseduration)
{
  int v9; // ebp
  unsigned int v11; // r14d
  __int64 v12; // rdx
  unsigned int v13; // r14d
  char *v14; // r14
  char v16; // r14
  int v17; // eax
  unsigned int v18; // r14d
  __int64 v19; // [rsp+0h] [rbp-D8h]
  unsigned __int16 v20; // [rsp+3Eh] [rbp-9Ah] BYREF
  int v21; // [rsp+40h] [rbp-98h]
  unsigned int v22; // [rsp+44h] [rbp-94h] BYREF
  char *s1; // [rsp+48h] [rbp-90h]
  char *v24; // [rsp+50h] [rbp-88h]
  struct in_addr inp; // [rsp+58h] [rbp-80h] BYREF
  int v26; // [rsp+5Ch] [rbp-7Ch]
  char v27[32]; // [rsp+60h] [rbp-78h] BYREF
  char s2[88]; // [rsp+80h] [rbp-58h] BYREF

  v9 = iport;
  s1 = (char *)rhost;
  v11 = proto_atoi(protocol);
  if ( inet_aton(iaddr, &inp) <= 0 )
  {
    syslog(3, "inet_aton(%s) FAILED", iaddr);
    return -1;
  }
  else
  {
    v26 = v9;
    if ( (unsigned int)check_upnp_rule_against_permissions(
                         upnppermlist,
                         num_upnpperm,
                         eport,
                         inp.s_addr,
                         (unsigned __int16)v9) )
    {
      v24 = (char *)desc;
      v27[0] = 0;
      v12 = v11;
      v13 = 0;
      v21 = v12;
      if ( (unsigned int)get_redirect_rule(ext_if_name, eport, v12, s2, 32LL, &v20, 0LL, 0, v27, 32, &v22, 0LL, 0LL) )
      {
        if ( leaseduration )
          v13 = leaseduration + upnp_time();
        v22 = v13;
        v14 = v24;
        syslog(
          6,
          "redirecting port %hu to %s:%hu protocol %s for: %s",
          eport,
          iaddr,
          (unsigned __int16)v9,
          protocol,
          v24);
        return upnp_redirect_internal(s1, eport, iaddr, v9, v21, v14, v22);
      }
      else if ( strcmp(iaddr, s2)
             || ((v16 = v27[0], s1) || v27[0]) && (!s1 || ((v17 = strcmp(s1, "*"), v16) || v17) && strcmp(s1, v27)) )
      {
        LODWORD(v19) = v20;
        syslog(6, "port %hu %s (rhost '%s') already redirected to %s:%hu", eport, protocol, v27, s2, v19);
        return -2;
      }
      else
      {
        LODWORD(v19) = v20;
        v18 = 0;
        syslog(6, "updating existing port mapping %hu %s (rhost '%s') => %s:%hu", eport, protocol, v27, s2, v19);
        if ( leaseduration )
          v18 = leaseduration + upnp_time();
        v22 = v18;
        if ( v20 == (_WORD)v26 )
          return update_portmapping_desc_timestamp(ext_if_name, eport, (unsigned int)v21, v24, v18);
        else
          return update_portmapping(ext_if_name, eport, (unsigned int)v21, (unsigned __int16)v9, v24, v18);
      }
    }
    else
    {
      syslog(6, "redirection permission check failed for %hu->%s:%hu %s", eport, iaddr, (unsigned __int16)v9, protocol);
      return -3;
    }
  }
}
