int __cdecl upnp_redirect(
        const char *rhost,
        unsigned __int16 eport,
        const char *iaddr,
        unsigned __int16 iport,
        const char *protocol,
        const char *desc,
        unsigned int leaseduration)
{
  __int64 v8; // [rsp+0h] [rbp-E0h]
  __int64 v9; // [rsp+40h] [rbp-A0h]
  __int64 v10; // [rsp+48h] [rbp-98h]
  unsigned int timestamp; // [rsp+54h] [rbp-8Ch] BYREF
  in_addr address; // [rsp+58h] [rbp-88h] BYREF
  unsigned __int16 iport_old; // [rsp+5Eh] [rbp-82h] BYREF
  char rhost_old[32]; // [rsp+60h] [rbp-80h] BYREF
  char iaddr_old[32]; // [rsp+80h] [rbp-60h] BYREF
  int proto; // [rsp+A4h] [rbp-3Ch]
  const char *desca; // [rsp+A8h] [rbp-38h]
  const char *protocola; // [rsp+B0h] [rbp-30h]
  unsigned __int16 iporta; // [rsp+BEh] [rbp-22h]
  const char *iaddra; // [rsp+C0h] [rbp-20h]
  unsigned __int16 eporta; // [rsp+CEh] [rbp-12h]
  const char *rhosta; // [rsp+D0h] [rbp-10h]

  rhosta = rhost;
  eporta = eport;
  iaddra = iaddr;
  iporta = iport;
  protocola = protocol;
  desca = desc;
  proto = proto_atoi(protocol);
  if ( inet_aton(iaddra, &address) > 0 )
  {
    if ( (unsigned int)check_upnp_rule_against_permissions(upnppermlist, num_upnpperm, eporta, address.s_addr, iporta) )
    {
      if ( !desca )
        desca = (const char *)&unk_ED6;
      rhost_old[0] = 0;
      if ( (unsigned int)get_redirect_rule(
                           ext_if_name,
                           eporta,
                           (unsigned int)proto,
                           iaddr_old,
                           32LL,
                           &iport_old,
                           0LL,
                           0,
                           rhost_old,
                           32,
                           &timestamp,
                           0LL,
                           0LL) )
      {
        if ( leaseduration )
          v9 = leaseduration + upnp_time();
        else
          LODWORD(v9) = 0;
        timestamp = v9;
        syslog(6, "redirecting port %hu to %s:%hu protocol %s for: %s", eporta, iaddra, iporta, protocola, desca);
        return upnp_redirect_internal(rhosta, eporta, iaddra, iporta, proto, desca, timestamp);
      }
      else if ( !strcmp(iaddra, iaddr_old)
             && (!rhosta && !rhost_old[0]
              || rhosta && !strcmp(rhosta, "*") && !rhost_old[0]
              || rhosta && !strcmp(rhosta, rhost_old)) )
      {
        LODWORD(v8) = iport_old;
        syslog(
          6,
          "updating existing port mapping %hu %s (rhost '%s') => %s:%hu",
          eporta,
          protocola,
          rhost_old,
          iaddr_old,
          v8);
        if ( leaseduration )
          v10 = leaseduration + upnp_time();
        else
          LODWORD(v10) = 0;
        timestamp = v10;
        if ( iporta == iport_old )
          return update_portmapping_desc_timestamp(ext_if_name, eporta, (unsigned int)proto, desca, timestamp);
        else
          return update_portmapping(ext_if_name, eporta, (unsigned int)proto, iporta, desca, timestamp);
      }
      else
      {
        LODWORD(v8) = iport_old;
        syslog(6, "port %hu %s (rhost '%s') already redirected to %s:%hu", eporta, protocola, rhost_old, iaddr_old, v8);
        return -2;
      }
    }
    else
    {
      syslog(6, "redirection permission check failed for %hu->%s:%hu %s", eporta, iaddra, iporta, protocola);
      return -3;
    }
  }
  else
  {
    syslog(3, "inet_aton(%s) FAILED", iaddra);
    return -1;
  }
}
