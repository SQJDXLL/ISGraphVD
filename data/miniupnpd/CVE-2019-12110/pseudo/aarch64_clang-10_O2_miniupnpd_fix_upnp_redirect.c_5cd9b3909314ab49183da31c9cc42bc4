int __fastcall upnp_redirect(
        const char *rhost,
        unsigned __int16 eport,
        const char *iaddr,
        unsigned __int16 iport,
        const char *protocol,
        const char *desc,
        unsigned int leaseduration)
{
  unsigned int v7; // w20
  unsigned int v12; // w19
  unsigned int v14; // w21
  unsigned int v15; // w8
  unsigned int v17; // w22
  int v18; // w26
  int v19; // w0
  unsigned int v20; // w5
  unsigned int v21; // [xsp+2Ch] [xbp-44h] BYREF
  char v22[32]; // [xsp+30h] [xbp-40h] BYREF
  char s2[32]; // [xsp+50h] [xbp-20h] BYREF
  char iaddr_old[32]; // [xsp+70h] [xbp+0h] BYREF

  v7 = eport;
  v12 = iport;
  if ( !strcasecmp(protocol, "UDP") )
  {
    v14 = 17;
  }
  else if ( !strcasecmp(protocol, "UDPLITE") )
  {
    v14 = 136;
  }
  else
  {
    v14 = 6;
  }
  if ( inet_aton(iaddr, (struct in_addr *)&iaddr_old[24]) <= 0 )
  {
    syslog(3, "inet_aton(%s) FAILED", iaddr);
    return -1;
  }
  if ( !(unsigned int)check_upnp_rule_against_permissions(
                        upnppermlist,
                        num_upnpperm,
                        v7,
                        *(unsigned int *)&iaddr_old[24],
                        v12) )
  {
    syslog(
      6,
      "redirection permission check failed for %hu->%s:%hu %s",
      (unsigned __int16)v7,
      iaddr,
      (unsigned __int16)v12,
      protocol);
    return -3;
  }
  if ( !desc )
    desc = (const char *)&unk_BF8;
  v22[0] = 0;
  if ( (unsigned int)get_redirect_rule(
                       ext_if_name,
                       v7,
                       v14,
                       s2,
                       32LL,
                       &iaddr_old[28],
                       0LL,
                       0LL,
                       v22,
                       32,
                       &v21,
                       0LL,
                       0LL) )
  {
    if ( leaseduration )
      v15 = upnp_time() + leaseduration;
    else
      v15 = 0;
    v21 = v15;
    syslog(
      6,
      "redirecting port %hu to %s:%hu protocol %s for: %s",
      (unsigned __int16)v7,
      iaddr,
      (unsigned __int16)v12,
      protocol,
      desc);
    if ( !disable_port_forwarding )
    {
      v17 = v21;
      if ( (add_redirect_rule2(ext_if_name, rhost, v7, iaddr, v12, v14, desc, v21) & 0x80000000) == 0
        && (add_filter_rule2(ext_if_name, rhost, iaddr, v7, v12, v14, desc) & 0x80000000) == 0 )
      {
        if ( v17 )
        {
          if ( nextruletoclean_timestamp - 1 >= v17 )
            nextruletoclean_timestamp = v17;
        }
        upnp_event_var_change_notify(2LL);
        return 0;
      }
    }
    return -1;
  }
  if ( strcmp(iaddr, s2)
    || ((v18 = (unsigned __int8)v22[0], rhost) || v22[0])
    && (!rhost || ((v19 = strcmp(rhost, "*"), v18) || v19) && strcmp(rhost, v22)) )
  {
    syslog(
      6,
      "port %hu %s (rhost '%s') already redirected to %s:%hu",
      (unsigned __int16)v7,
      protocol,
      v22,
      s2,
      *(unsigned __int16 *)&iaddr_old[28]);
    return -2;
  }
  else
  {
    syslog(
      6,
      "updating existing port mapping %hu %s (rhost '%s') => %s:%hu",
      (unsigned __int16)v7,
      protocol,
      v22,
      s2,
      *(unsigned __int16 *)&iaddr_old[28]);
    if ( leaseduration )
      v20 = upnp_time() + leaseduration;
    else
      v20 = 0;
    v21 = v20;
    if ( *(unsigned __int16 *)&iaddr_old[28] == (unsigned __int16)v12 )
      return update_portmapping_desc_timestamp(ext_if_name, v7, v14, desc, v20);
    else
      return update_portmapping(ext_if_name, v7, v14, v12, desc);
  }
}
