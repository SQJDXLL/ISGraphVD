int __cdecl upnp_redirect(
        const char *rhost,
        unsigned __int16 eport,
        const char *iaddr,
        unsigned __int16 iport,
        const char *protocol,
        char *desc,
        in_addr leaseduration)
{
  int v7; // edi
  char *v8; // ecx
  unsigned int v9; // eax
  unsigned __int16 v11; // bp
  char *v12; // edi
  int v13; // eax
  unsigned int v14; // eax
  unsigned __int16 v15; // [esp+4h] [ebp-68h] BYREF
  char v16; // [esp+7h] [ebp-65h]
  unsigned __int16 v17[2]; // [esp+8h] [ebp-64h]
  char *v18; // [esp+Ch] [ebp-60h]
  int v19; // [esp+10h] [ebp-5Ch]
  unsigned int v20; // [esp+14h] [ebp-58h] BYREF
  struct in_addr inp; // [esp+18h] [ebp-54h] BYREF
  char v22[32]; // [esp+1Ch] [ebp-50h] BYREF
  char s2[48]; // [esp+3Ch] [ebp-30h] BYREF

  v7 = proto_atoi(protocol);
  if ( inet_aton(iaddr, &inp) <= 0 )
  {
    syslog(3, "inet_aton(%s) FAILED", iaddr);
    return -1;
  }
  else if ( check_upnp_rule_against_permissions(upnppermlist, num_upnpperm, eport, inp.s_addr, iport) )
  {
    *(_DWORD *)v17 = iport;
    v8 = (char *)&L_str_2;
    if ( desc )
      v8 = desc;
    v18 = v8;
    v22[0] = 0;
    v19 = v7;
    if ( get_redirect_rule(ext_if_name, eport, v7, s2, 32, &v15, 0, 0, v22, 32, &v20, 0, 0) )
    {
      if ( leaseduration.s_addr )
        v9 = leaseduration.s_addr + upnp_time();
      else
        v9 = 0;
      v11 = v17[0];
      v20 = v9;
      v12 = v18;
      syslog(6, "redirecting port %hu to %s:%hu protocol %s for: %s", eport, iaddr, *(_DWORD *)v17, protocol, v18);
      return upnp_redirect_internal(rhost, eport, iaddr, v11, v19, v12, v20);
    }
    else if ( strcmp(iaddr, s2)
           || (rhost || v22[0])
           && (!rhost || ((v16 = v22[0], v13 = strcmp(rhost, "*"), v16) || v13) && strcmp(rhost, v22)) )
    {
      syslog(6, "port %hu %s (rhost '%s') already redirected to %s:%hu", eport, protocol, v22, s2, v15);
      return -2;
    }
    else
    {
      syslog(6, "updating existing port mapping %hu %s (rhost '%s') => %s:%hu", eport, protocol, v22, s2, v15);
      if ( leaseduration.s_addr )
        v14 = leaseduration.s_addr + upnp_time();
      else
        v14 = 0;
      v20 = v14;
      if ( v15 == iport )
        return update_portmapping_desc_timestamp(ext_if_name, eport, v19, v18, v14);
      else
        return update_portmapping(ext_if_name, eport, v19, *(_DWORD *)v17, v18, v14);
    }
  }
  else
  {
    syslog(6, "redirection permission check failed for %hu->%s:%hu %s", eport, iaddr, iport, protocol);
    return -3;
  }
}
