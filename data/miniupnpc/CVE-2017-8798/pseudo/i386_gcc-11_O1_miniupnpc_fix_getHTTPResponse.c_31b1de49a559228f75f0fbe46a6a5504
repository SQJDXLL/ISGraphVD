void *__cdecl getHTTPResponse(int s, int *size, int *status_code)
{
  unsigned int v3; // ebp
  int v4; // eax
  unsigned int v5; // edi
  char v6; // dl
  int v7; // esi
  int v8; // ecx
  int v9; // edi
  char *v10; // ebp
  unsigned int v11; // eax
  char v12; // dl
  char v13; // al
  char v14; // al
  const char *v15; // edi
  const char *v16; // esi
  int *v17; // ebp
  const char *v18; // edi
  bool v19; // zf
  int v20; // eax
  char v21; // al
  int v22; // edi
  int v23; // esi
  const unsigned __int16 *v24; // ecx
  char v25; // al
  unsigned int v26; // edx
  char v27; // al
  char *v28; // ecx
  char *v29; // ebp
  int v30; // eax
  char v31; // al
  unsigned int v32; // eax
  unsigned int v33; // ecx
  int v34; // eax
  char *v35; // eax
  char *v36; // edi
  unsigned int v37; // esi
  char *v38; // eax
  int v39; // eax
  size_t v40; // esi
  char *v41; // eax
  char *v42; // edi
  char *v43; // ebp
  unsigned int content_buf_used; // [esp+4h] [ebp-898h]
  unsigned int chunksize; // [esp+8h] [ebp-894h]
  unsigned int header_buf_used_0; // [esp+Ch] [ebp-890h]
  unsigned int header_buf_used_0a; // [esp+Ch] [ebp-890h]
  unsigned int header_buf_used_0b; // [esp+Ch] [ebp-890h]
  signed int header_buf_used_0c; // [esp+Ch] [ebp-890h]
  signed int chunksize_buf_index; // [esp+10h] [ebp-88Ch]
  unsigned int chunksize_buf_indexa; // [esp+10h] [ebp-88Ch]
  char *content_buf; // [esp+14h] [ebp-888h]
  unsigned int content_buf_used_0; // [esp+18h] [ebp-884h]
  unsigned int content_buf_used_0a; // [esp+18h] [ebp-884h]
  unsigned int content_buf_len; // [esp+1Ch] [ebp-880h]
  int endofheaders; // [esp+20h] [ebp-87Ch]
  int content_length; // [esp+24h] [ebp-878h]
  int valuestart; // [esp+28h] [ebp-874h]
  char *header_buf; // [esp+2Ch] [ebp-870h]
  unsigned int header_buf_len; // [esp+30h] [ebp-86Ch]
  int chunked; // [esp+34h] [ebp-868h]
  unsigned int v63; // [esp+38h] [ebp-864h]
  char *v64; // [esp+3Ch] [ebp-860h]
  int i; // [esp+40h] [ebp-85Ch]
  int *v66; // [esp+44h] [ebp-858h]
  char *s2; // [esp+48h] [ebp-854h]
  int *v68; // [esp+4Ch] [ebp-850h]
  char chunksize_buf[32]; // [esp+5Ch] [ebp-840h] BYREF
  char buf[2048]; // [esp+7Ch] [ebp-820h] BYREF
  unsigned int v71; // [esp+87Ch] [ebp-20h]

  v68 = size;
  v66 = status_code;
  v71 = __readgsdword(0x14u);
  if ( status_code )
    *status_code = -1;
  header_buf = (char *)malloc(0x800u);
  if ( header_buf )
  {
    content_buf = (char *)malloc(0x800u);
    if ( !content_buf )
    {
      free(header_buf);
      *v68 = -1;
      return content_buf;
    }
    chunksize_buf[0] = 0;
    v3 = 0;
    content_buf_used = 0;
    content_buf_len = 2048;
    valuestart = 0;
    header_buf_len = 2048;
    chunksize = 0;
    content_length = -1;
    chunked = 0;
    endofheaders = 0;
    s2 = "content-length";
LABEL_130:
    while ( 2 )
    {
      v39 = receivedata(s, buf, 2048, 5000, 0);
      v22 = v39;
      if ( v39 > 0 )
      {
        if ( endofheaders )
        {
          if ( chunked )
            goto LABEL_77;
LABEL_149:
          if ( content_length <= 0 )
          {
            header_buf_used_0b = v22;
            v37 = v22 + content_buf_used;
            if ( v22 + content_buf_used <= content_buf_len )
            {
              v36 = content_buf;
              goto LABEL_127;
            }
            if ( !content_length )
              goto LABEL_152;
          }
          else
          {
            v37 = content_length;
            if ( v22 + content_buf_used <= content_length )
            {
              header_buf_used_0b = v22;
              v37 = v22 + content_buf_used;
              v36 = content_buf;
              if ( content_buf_len < v37 )
              {
                content_buf_len = content_length;
                v38 = (char *)realloc(content_buf, content_length);
                goto LABEL_126;
              }
LABEL_127:
              memcpy(&v36[content_buf_used], buf, header_buf_used_0b);
              content_buf_used = v37;
              content_buf = v36;
              goto LABEL_128;
            }
            header_buf_used_0b = content_length - content_buf_used;
            if ( content_length <= content_buf_len )
            {
              v36 = content_buf;
              goto LABEL_127;
            }
LABEL_152:
            content_buf_len = content_length;
            if ( content_length >= v37 )
            {
LABEL_125:
              v38 = (char *)realloc(content_buf, content_buf_len);
LABEL_126:
              v36 = v38;
              if ( !v38 )
              {
LABEL_108:
                free(content_buf);
                free(header_buf);
                *v68 = -1;
                return 0;
              }
              goto LABEL_127;
            }
          }
          content_buf_len = v37;
          goto LABEL_125;
        }
        v40 = v39;
        header_buf_used_0c = valuestart + v39;
        if ( valuestart + v39 > header_buf_len )
        {
          v41 = (char *)realloc(header_buf, valuestart + v39);
          if ( !v41 )
          {
            free(header_buf);
            free(content_buf);
            *v68 = -1;
            return 0;
          }
          header_buf_len = header_buf_used_0c;
          header_buf = v41;
        }
        v42 = header_buf;
        memcpy(&header_buf[valuestart], buf, v40);
        if ( header_buf_used_0c - 1 <= 0 )
        {
          valuestart = header_buf_used_0c;
          continue;
        }
        v4 = 0;
        chunksize_buf_indexa = v3;
        v43 = v42;
        do
        {
          v6 = v43[v4];
          if ( v6 == 13 )
          {
            if ( v43[v4 + 1] == 10 )
            {
              if ( v4 + 2 >= header_buf_used_0c )
              {
                v4 += 2;
                v5 = 0;
              }
              else if ( v43[v4 + 2] == 13 )
              {
                if ( v4 + 3 >= header_buf_used_0c )
                {
                  v4 += 3;
                  v5 = 0;
                }
                else if ( v43[v4 + 3] == 10 )
                {
                  v5 = v4 + 4;
                  v4 += 3;
                }
                else
                {
                  v4 += 3;
                  v5 = 0;
                }
              }
              else
              {
                v4 += 2;
                v5 = 0;
              }
            }
            else
            {
              ++v4;
              v5 = 0;
            }
          }
          else
          {
            v5 = 0;
            if ( v6 == 10 )
            {
              if ( v43[v4 + 1] == 10 )
                v5 = v4 + 2;
              ++v4;
            }
          }
          ++v4;
        }
        while ( !v5 && v4 < header_buf_used_0c - 1 );
        content_buf_used_0 = v5;
        v3 = chunksize_buf_indexa;
        if ( !v5 )
        {
          valuestart = header_buf_used_0c;
          endofheaders = 0;
          continue;
        }
        chunksize_buf_index = v5 - 1;
        if ( (int)(v5 - 1) <= 0 )
          goto LABEL_74;
        v7 = 0;
        valuestart = 0;
        v8 = 0;
        v9 = 0;
        v64 = "transfer-encoding";
        v63 = v3;
        v10 = header_buf;
        while ( 1 )
        {
          if ( v9 <= 0 || v9 < v8 )
          {
            v13 = v10[v7];
            if ( v13 == 13 || v13 == 10 )
            {
              if ( v9 || !v66 )
              {
                if ( v9 < v8 && v8 < valuestart )
                {
                  i = v8 - v9;
                  v18 = &v10[v9];
                  if ( !strncasecmp(v18, s2, i) )
                  {
                    content_length = strtol(&v10[valuestart], 0, 10);
                  }
                  else if ( !strncasecmp(v18, v64, i) )
                  {
                    v19 = strncasecmp(&v10[valuestart], "chunked", 7u) == 0;
                    v20 = 1;
                    if ( !v19 )
                      v20 = chunked;
                    chunked = v20;
                  }
                }
              }
              else if ( v7 > 0 )
              {
                v15 = v10 + 1;
                valuestart = (int)v10;
                i = v7;
                v16 = &v10[v7 + 1];
                v17 = v66;
                do
                {
                  if ( *(v15 - 1) == 32 )
                  {
                    if ( *v17 >= 0 )
                    {
                      v10 = (char *)valuestart;
                      v7 = i;
                      goto LABEL_47;
                    }
                    *v17 = strtol(v15, 0, 10);
                  }
                  ++v15;
                }
                while ( v15 != v16 );
                v10 = (char *)valuestart;
                v7 = i;
              }
LABEL_47:
              if ( header_buf_used_0c <= v7 )
              {
                valuestart = 0;
                v8 = v7;
                v9 = v7;
              }
              else
              {
                do
                {
                  v21 = v10[v7];
                  if ( v21 != 13 && v21 != 10 )
                  {
                    valuestart = 0;
                    v8 = v7;
                    v9 = v7;
                    goto LABEL_41;
                  }
                  ++v7;
                }
                while ( v7 != header_buf_used_0c );
                valuestart = 0;
                v7 = header_buf_used_0c;
                v8 = header_buf_used_0c;
                v9 = header_buf_used_0c;
              }
            }
          }
          else
          {
            v14 = v10[v7];
            if ( v14 == 58 )
            {
              if ( chunksize_buf_index <= v7 )
              {
                v11 = v7;
              }
              else
              {
                v11 = v7;
                while ( 1 )
                {
                  v12 = v10[v11 + 1];
                  if ( v12 != 32 && v12 != 9 )
                    break;
                  if ( ++v11 == content_buf_used_0 - 1 )
                  {
                    v11 = content_buf_used_0 - 1;
                    break;
                  }
                }
              }
              valuestart = v11 + 1;
              v8 = v7;
              v7 = v11;
              goto LABEL_41;
            }
            if ( v14 == 13 || v14 == 10 )
              goto LABEL_47;
          }
LABEL_41:
          if ( ++v7 >= chunksize_buf_index )
          {
            v3 = v63;
LABEL_74:
            v22 = header_buf_used_0c - content_buf_used_0;
            memcpy(buf, &header_buf[content_buf_used_0], header_buf_used_0c - content_buf_used_0);
            valuestart = header_buf_used_0c;
            endofheaders = content_buf_used_0;
            if ( !chunked )
              goto LABEL_149;
            if ( (int)(header_buf_used_0c - content_buf_used_0) <= 0 )
            {
              valuestart = header_buf_used_0c;
              endofheaders = content_buf_used_0;
              goto LABEL_128;
            }
LABEL_77:
            v23 = 0;
            while ( 2 )
            {
              if ( chunksize )
              {
LABEL_112:
                v32 = v22 - v23;
                if ( v22 - v23 > chunksize )
                  v32 = chunksize;
                header_buf_used_0a = v32;
                v33 = content_buf_used + v32;
                content_buf_used_0a = content_buf_used + v32;
                if ( content_buf_used + v32 > content_buf_len )
                {
                  v34 = content_buf_used + v32;
                  if ( content_length >= v33 )
                    v34 = content_length;
                  if ( content_length < 0 )
                    v34 = v33;
                  content_buf_len = v34;
                  v35 = (char *)realloc(content_buf, v34);
                  if ( !v35 )
                    goto LABEL_108;
                  content_buf = v35;
                }
                memcpy(&content_buf[content_buf_used], &buf[v23], header_buf_used_0a);
                v23 += header_buf_used_0a;
                chunksize -= header_buf_used_0a;
                if ( v22 <= v23 )
                {
                  content_buf_used = content_buf_used_0a;
                  goto LABEL_128;
                }
                goto LABEL_110;
              }
              if ( v3 )
              {
LABEL_84:
                if ( v22 <= v23 )
                {
                  v26 = v3;
                  goto LABEL_145;
                }
                goto LABEL_85;
              }
              if ( buf[v23] == 13 )
                ++v23;
              if ( v22 > v23 )
              {
                if ( buf[v23] == 10 )
                {
                  ++v23;
                  goto LABEL_84;
                }
LABEL_85:
                v24 = *_ctype_b_loc();
                while ( 1 )
                {
                  v25 = buf[v23];
                  if ( (v24[v25] & 0x1000) == 0 || v3 > 0x1E )
                    break;
                  v26 = v3 + 1;
                  chunksize_buf[v3] = v25;
                  chunksize_buf[v3 + 1] = 0;
                  if ( v22 <= ++v23 )
                    goto LABEL_145;
                  ++v3;
                }
                if ( v22 <= v23 )
                  goto LABEL_128;
                while ( 1 )
                {
                  v27 = buf[v23];
                  if ( v27 == 10 || v27 == 13 )
                    break;
                  if ( v22 == ++v23 )
                    goto LABEL_128;
                }
                if ( v22 <= v23 )
                  goto LABEL_128;
                if ( buf[v23] == 13 && v22 <= ++v23 )
                  goto LABEL_128;
                content_buf_used_0a = content_buf_used;
                if ( buf[v23] == 10 )
                {
                  if ( !v3 )
                    goto end_of_stream;
                  v28 = chunksize_buf;
                  v29 = &chunksize_buf[v3];
                  header_buf_used_0 = 0;
                  do
                  {
                    v31 = *v28;
                    if ( (unsigned __int8)(*v28 - 48) > 9u )
                      v30 = 16 * header_buf_used_0 + (v31 | 0x20) - 87;
                    else
                      v30 = 16 * header_buf_used_0 + v31 - 48;
                    header_buf_used_0 = v30;
                    ++v28;
                  }
                  while ( v28 != v29 );
                  chunksize_buf[0] = 0;
                  ++v23;
                  if ( !v30 )
                    goto end_of_stream;
                  v3 = 0;
                  chunksize = v30;
                  goto LABEL_112;
                }
LABEL_110:
                content_buf_used = content_buf_used_0a;
                continue;
              }
              break;
            }
            v26 = 0;
LABEL_145:
            v3 = v26;
LABEL_128:
            if ( content_length > 0 && content_length <= content_buf_used )
              goto end_of_stream;
            goto LABEL_130;
          }
        }
      }
      break;
    }
end_of_stream:
    free(header_buf);
    *v68 = content_buf_used;
    if ( !content_buf_used )
    {
      free(content_buf);
      return 0;
    }
  }
  else
  {
    *v68 = -1;
    return header_buf;
  }
  return content_buf;
}
