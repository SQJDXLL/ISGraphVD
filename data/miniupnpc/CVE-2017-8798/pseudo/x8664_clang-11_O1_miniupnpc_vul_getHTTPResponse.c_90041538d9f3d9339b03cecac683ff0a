void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  unsigned int v3; // r14d
  char *v4; // rax
  char *v5; // r13
  char *v6; // rax
  int v7; // ecx
  unsigned int v8; // r12d
  __int64 v9; // r15
  int v10; // r15d
  int v11; // eax
  int v12; // eax
  char *v13; // rax
  bool v14; // cl
  int v15; // ebp
  int *v16; // rdi
  int v17; // edx
  int v18; // ecx
  char v19; // bl
  __int64 v20; // rcx
  int v21; // edx
  bool v22; // zf
  int v23; // edx
  int v24; // r8d
  __int64 v25; // r12
  int v26; // ebp
  int v27; // ecx
  int v28; // eax
  int v29; // r14d
  int v30; // esi
  __int64 v31; // rdx
  char v32; // dl
  __int64 v33; // rbx
  const char *v34; // rbp
  bool v35; // cl
  int v36; // edx
  const char *v37; // rbp
  size_t v38; // rbx
  int v39; // eax
  int v40; // ecx
  __int64 v41; // rcx
  char v42; // bl
  __int64 v43; // r8
  __int64 v44; // r14
  __int64 v45; // rax
  int v46; // ebx
  size_t v47; // rsi
  char *v48; // rax
  char v49; // cl
  int v50; // eax
  char v51; // cl
  unsigned int v52; // edx
  unsigned __int64 v53; // rbx
  const unsigned __int16 **v54; // rax
  const unsigned __int16 *v55; // rax
  __int64 v56; // rcx
  __int64 v57; // rdi
  __int64 v58; // rax
  bool v59; // cc
  char v60; // cl
  __int64 v61; // rcx
  int v62; // edx
  int v63; // eax
  unsigned __int8 v64; // si
  int v65; // edx
  int v66; // edi
  int v67; // eax
  unsigned int v68; // ebx
  int v69; // ecx
  size_t v70; // rsi
  char *v71; // rax
  int v73; // [rsp+8h] [rbp-8D0h]
  int v75; // [rsp+10h] [rbp-8C8h]
  unsigned int v76; // [rsp+10h] [rbp-8C8h]
  char *ptr; // [rsp+18h] [rbp-8C0h]
  int v78; // [rsp+24h] [rbp-8B4h]
  __int64 v79; // [rsp+28h] [rbp-8B0h]
  int v80; // [rsp+30h] [rbp-8A8h]
  int v81; // [rsp+3Ch] [rbp-89Ch]
  __int64 v82; // [rsp+40h] [rbp-898h]
  int v84; // [rsp+50h] [rbp-888h]
  int v86; // [rsp+60h] [rbp-878h]
  unsigned int v87; // [rsp+64h] [rbp-874h]
  unsigned int v88; // [rsp+68h] [rbp-870h]
  char v89[32]; // [rsp+80h] [rbp-858h]
  char dest[2104]; // [rsp+A0h] [rbp-838h] BYREF

  v3 = s;
  if ( status_code )
    *status_code = -1;
  v4 = (char *)malloc(0x800uLL);
  if ( !v4 )
    goto LABEL_151;
  v5 = v4;
  v6 = (char *)malloc(0x800uLL);
  if ( !v6 )
  {
    free(v5);
LABEL_151:
    *size = -1;
    return 0LL;
  }
  ptr = v6;
  v89[0] = 0;
  v87 = 2048;
  v7 = -1;
  v81 = 0;
  v82 = 0LL;
  v8 = 0;
  v88 = 2048;
  v9 = 0LL;
  v78 = 0;
  v84 = 0;
  while ( 2 )
  {
    while ( 2 )
    {
      while ( 2 )
      {
        v79 = v9;
        v73 = v7;
        while ( 1 )
        {
          v12 = receivedata(v3, dest, 2048LL, 5000LL, 0LL);
          if ( v12 <= 0 )
          {
            LODWORD(v9) = v79;
            goto end_of_stream;
          }
          v10 = v12;
          if ( v84 )
            break;
          v80 = v12 + v8;
          if ( v12 + v8 <= v87 )
            goto LABEL_14;
          v13 = (char *)realloc(v5, v12 + v8);
          if ( v13 )
          {
            v5 = v13;
            v87 = v10 + v8;
LABEL_14:
            memcpy(&v5[v8], dest, v10);
            v14 = 1;
            v15 = 0;
            v8 = v80;
            v16 = status_code;
            if ( v80 >= 2 )
            {
              v15 = 0;
              v17 = 0;
              do
              {
                v18 = v17;
                v19 = v5[v17];
                if ( v19 == 10 )
                {
                  v22 = v5[v17 + 1] == 10;
                  v23 = v17 + 2;
                  LODWORD(v20) = v18 + 1;
                  if ( v22 )
                    v15 = v23;
                }
                else if ( v19 == 13 )
                {
                  if ( v5[v17 + 1] == 10 )
                  {
                    if ( v17 + 2 < v80 && v5[v17 + 2] == 13 )
                    {
                      v20 = v17 + 3LL;
                      if ( (int)v20 < v80 )
                      {
                        v21 = v17 + 4;
                        if ( v5[v20] == 10 )
                          v15 = v21;
                      }
                    }
                    else
                    {
                      LODWORD(v20) = v17 + 2;
                    }
                  }
                  else
                  {
                    LODWORD(v20) = v17 + 1;
                  }
                }
                else
                {
                  LODWORD(v20) = v17;
                }
                v17 = v20 + 1;
                v14 = v15 == 0;
              }
              while ( v17 < v80 - 1 && !v15 );
            }
            v11 = 2;
            if ( v14 )
            {
              v84 = 0;
            }
            else
            {
              v84 = v15;
              if ( v15 >= 2 )
              {
                v24 = v15 - 1;
                v25 = v15 - 1;
                v26 = 0;
                v27 = 0;
                v28 = 0;
                v29 = 0;
                v75 = v24;
                do
                {
                  if ( v28 > 0 && v27 <= v28 && (v31 = v29, v5[v29] == 58) )
                  {
                    do
                    {
                      v35 = v31 < v25 && (v5[v31 + 1] == 32 || v5[v31 + 1] == 9);
                      ++v31;
                    }
                    while ( v35 );
                    v30 = v31 - 1;
                    v26 = v31;
                  }
                  else
                  {
                    v32 = v5[v29];
                    if ( v32 == 13 || v32 == 10 )
                    {
                      if ( !v16 || v28 )
                      {
                        v36 = v27 - v28;
                        if ( v27 > v28 && v26 > v27 )
                        {
                          v86 = v26;
                          v37 = &v5[v28];
                          v38 = v36;
                          if ( !strncasecmp(v37, "content-length", v36) )
                          {
                            v73 = atoi(&v5[v86]);
                          }
                          else if ( !strncasecmp(v37, "transfer-encoding", v38) )
                          {
                            v39 = strncasecmp(&v5[v86], "chunked", 7uLL);
                            v40 = v81;
                            if ( !v39 )
                              v40 = 1;
                            v81 = v40;
                          }
                          v16 = status_code;
LABEL_67:
                          v24 = v75;
                        }
                      }
                      else if ( v29 > 0 )
                      {
                        v33 = (unsigned int)v29;
                        v34 = v5 + 1;
                        while ( 1 )
                        {
                          if ( *(v34 - 1) == 32 )
                          {
                            if ( *v16 >= 0 )
                              goto LABEL_67;
                            v16 = status_code;
                            *status_code = atoi(v34);
                          }
                          ++v34;
                          if ( !--v33 )
                            goto LABEL_67;
                        }
                      }
                      v26 = 0;
                      if ( v29 >= v80 )
                      {
LABEL_37:
                        v30 = v29;
                        v28 = v29;
                      }
                      else
                      {
                        v41 = 0LL;
                        do
                        {
                          v42 = v5[v29 + v41];
                          if ( v42 != 13 && v42 != 10 )
                          {
                            v29 += v41;
                            goto LABEL_37;
                          }
                          ++v41;
                        }
                        while ( v80 - (__int64)v29 != v41 );
                        v30 = v80;
                        v28 = v80;
                        v29 = v80;
                      }
                    }
                    else
                    {
                      v30 = v29;
                      v29 = v27;
                    }
                  }
                  v27 = v29;
                  v29 = v30 + 1;
                }
                while ( v30 + 1 < v24 );
              }
              v8 = v80;
              v10 = v80 - v84;
              memcpy(dest, &v5[v84], v80 - v84);
              v11 = 0;
              v3 = s;
            }
            goto LABEL_8;
          }
          free(v5);
          free(ptr);
          *size = -1;
          v84 = 0;
          v11 = 1;
LABEL_8:
          if ( v11 != 2 )
          {
            if ( v11 )
              return 0LL;
            break;
          }
        }
        if ( !v84 )
        {
          v7 = v73;
          v9 = v79;
          if ( v73 <= 0 )
            continue;
LABEL_138:
          if ( (int)v9 < v7 )
            continue;
          goto end_of_stream;
        }
        break;
      }
      if ( !v81 )
      {
        v46 = v73 - v79;
        if ( v10 + (int)v79 <= v73 )
          v46 = v10;
        if ( v73 <= 0 )
          v46 = v10;
        v9 = (unsigned int)(v46 + v79);
        if ( (unsigned int)v9 > v88 )
        {
          v47 = (unsigned int)v73;
          if ( v73 < (int)v9 )
            v47 = (unsigned int)v9;
          v88 = v47;
          v48 = (char *)realloc(ptr, v47);
          if ( v48 )
          {
            v49 = 1;
            ptr = v48;
          }
          else
          {
            free(ptr);
            free(v5);
            *size = -1;
            v49 = 0;
          }
          v3 = s;
          if ( !v49 )
            return 0LL;
        }
        memcpy(&ptr[(unsigned int)v79], dest, v46);
        v7 = v73;
        if ( v73 <= 0 )
          continue;
        goto LABEL_138;
      }
      break;
    }
    if ( v10 <= 0 )
    {
      v50 = 0;
    }
    else
    {
      v43 = v10;
      LODWORD(v44) = 0;
      v45 = v82;
      while ( 2 )
      {
        v76 = v79;
        LODWORD(v53) = v78;
        while ( !(_DWORD)v45 )
        {
          if ( !(_DWORD)v53 )
          {
            LODWORD(v44) = (dest[(int)v44] == 13) + (_DWORD)v44;
            if ( (int)v44 < v10 )
              LODWORD(v44) = v44 + (dest[(int)v44] == 10);
          }
          if ( (int)v44 < v10 )
          {
            v54 = _ctype_b_loc();
            v43 = v10;
            v55 = *v54;
            v53 = (unsigned int)v53;
            v56 = 0LL;
            while ( v53 <= 0x1E )
            {
              v57 = dest[(int)v44 + v56];
              if ( (v55[v57] & 0x1000) == 0 )
                break;
              v89[v53++] = v57;
              v89[(unsigned int)v53] = 0;
              if ( v10 - (__int64)(int)v44 == ++v56 )
              {
                LODWORD(v44) = v10;
                goto LABEL_110;
              }
            }
            LODWORD(v44) = v56 + v44;
          }
LABEL_110:
          v58 = (int)v44;
          v59 = (int)v44 < v43;
          v44 = v43;
          if ( !v59 )
            v44 = v58;
          while ( v44 != v58 )
          {
            v60 = dest[v58++];
            if ( v60 == 13 || v60 == 10 )
            {
              LODWORD(v44) = v58 - 1;
              if ( v60 == 13 )
                LODWORD(v44) = v58;
              break;
            }
          }
          if ( v10 > (int)v44 && dest[(int)v44] == 10 )
          {
            v78 = 0;
            v45 = 0LL;
            if ( (_DWORD)v53 )
            {
              v61 = 0LL;
              v62 = 0;
              do
              {
                v63 = v89[v61];
                v64 = v63 - 48;
                v65 = 16 * v62;
                v66 = v63 - 48;
                v67 = (v63 | 0x20) - 87;
                if ( v64 < 0xAu )
                  v67 = v66;
                v45 = (unsigned int)(v65 + v67);
                ++v61;
                v62 = v45;
              }
              while ( (unsigned int)v53 != v61 );
            }
            v89[0] = 0;
            v52 = v79;
            if ( (_DWORD)v45 )
            {
              LODWORD(v44) = v44 + 1;
              goto LABEL_127;
            }
            v50 = 25;
            v9 = (unsigned int)v79;
            v82 = 0LL;
LABEL_135:
            v3 = s;
            v7 = v73;
            goto LABEL_136;
          }
          v45 = 0LL;
          if ( v10 <= (int)v44 )
          {
            v82 = 0LL;
            v9 = v79;
            v78 = v53;
            v50 = 0;
            goto LABEL_135;
          }
        }
        v78 = v53;
        v52 = v79;
LABEL_127:
        v68 = v10 - v44;
        v82 = v45;
        if ( (int)v45 <= v10 - (int)v44 )
          v68 = v45;
        v69 = v68 + v52;
        v79 = v68 + v52;
        if ( v68 + v52 > v88 )
        {
          v70 = (unsigned int)v73;
          if ( v73 < v69 )
            v70 = (unsigned int)v69;
          v88 = v70;
          v71 = (char *)realloc(ptr, v70);
          if ( v71 )
          {
            v51 = 1;
            ptr = v71;
          }
          else
          {
            free(ptr);
            free(v5);
            *size = -1;
            v51 = 0;
          }
          v52 = v76;
          if ( !v51 )
          {
            v50 = 1;
            v9 = v76;
            goto LABEL_135;
          }
        }
        memcpy(&ptr[v52], &dest[(int)v44], v68);
        LODWORD(v44) = v68 + v44;
        v45 = (unsigned int)v82 - v68;
        v43 = v10;
        if ( (int)v44 < v10 )
          continue;
        break;
      }
      v82 = (unsigned int)v82 - v68;
      v50 = 0;
      v3 = s;
    }
    v7 = v73;
    v9 = v79;
LABEL_136:
    if ( !v50 )
    {
      if ( v7 <= 0 )
        continue;
      goto LABEL_138;
    }
    break;
  }
  if ( v50 != 25 )
    return 0LL;
end_of_stream:
  free(v5);
  *size = v9;
  if ( (_DWORD)v9 )
    return ptr;
  free(ptr);
  return 0LL;
}
