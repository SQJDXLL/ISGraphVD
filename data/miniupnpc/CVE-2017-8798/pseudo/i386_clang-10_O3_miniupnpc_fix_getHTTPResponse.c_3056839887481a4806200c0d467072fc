char *__cdecl getHTTPResponse(int s, int *size, int *status_code)
{
  void *v3; // eax
  void *v4; // edi
  char *v5; // eax
  int v6; // esi
  unsigned int v7; // ecx
  int v8; // edi
  int v9; // ebx
  int v10; // ebp
  int v11; // eax
  size_t v12; // edx
  unsigned int v13; // ecx
  int v14; // ebx
  int v15; // esi
  char *v16; // eax
  int v17; // eax
  bool v18; // dl
  int v19; // ecx
  int v20; // eax
  char v21; // dl
  int v22; // edx
  bool v23; // zf
  char *v24; // esi
  int v25; // ebx
  char *v26; // ecx
  char *v27; // eax
  int v28; // edx
  char v29; // cl
  char *v30; // ecx
  char v31; // al
  size_t v32; // ebx
  int v33; // eax
  int v34; // ecx
  const char *v35; // esi
  int *v36; // edx
  char *v37; // ebx
  int v38; // eax
  char v39; // al
  int v40; // esi
  int v41; // eax
  int v42; // edx
  int v43; // ebx
  int v44; // ecx
  char v45; // cl
  char v46; // al
  int v47; // eax
  int v48; // ecx
  char v49; // al
  signed int v50; // edx
  signed int v51; // ebx
  void *v52; // eax
  const unsigned __int16 **v53; // eax
  const unsigned __int16 *v54; // eax
  int v55; // ecx
  char v56; // al
  char *v57; // eax
  int v58; // esi
  int v59; // edx
  int v60; // ecx
  size_t v61; // esi
  size_t v62; // ecx
  void *v63; // edx
  size_t v64; // eax
  size_t v65; // esi
  size_t v66; // eax
  char *v67; // eax
  size_t v68; // ecx
  char *v69; // ebx
  unsigned int v70; // edx
  void *v71; // eax
  const unsigned __int16 **v72; // eax
  const unsigned __int16 *v73; // eax
  int v74; // ecx
  char v75; // al
  char *v76; // eax
  int v77; // esi
  int v78; // edx
  int v79; // ecx
  size_t v80; // esi
  char *v81; // eax
  unsigned int v82; // ecx
  signed int v84; // [esp+0h] [ebp-86Ch]
  size_t v85; // [esp+0h] [ebp-86Ch]
  size_t v86; // [esp+0h] [ebp-86Ch]
  size_t v87; // [esp+0h] [ebp-86Ch]
  char *ptr; // [esp+4h] [ebp-868h]
  char *v89; // [esp+8h] [ebp-864h]
  void *v90; // [esp+Ch] [ebp-860h]
  void *v91; // [esp+Ch] [ebp-860h]
  char *v92; // [esp+10h] [ebp-85Ch]
  char *v93; // [esp+10h] [ebp-85Ch]
  char *v94; // [esp+10h] [ebp-85Ch]
  int v95; // [esp+14h] [ebp-858h]
  unsigned int v96; // [esp+18h] [ebp-854h]
  unsigned int v97; // [esp+1Ch] [ebp-850h]
  char *s1; // [esp+20h] [ebp-84Ch]
  char *s1a; // [esp+20h] [ebp-84Ch]
  char *s1b; // [esp+20h] [ebp-84Ch]
  int v101; // [esp+24h] [ebp-848h]
  unsigned int v102; // [esp+28h] [ebp-844h]
  size_t v103; // [esp+2Ch] [ebp-840h]
  size_t v104; // [esp+2Ch] [ebp-840h]
  size_t v105; // [esp+2Ch] [ebp-840h]
  int v106; // [esp+30h] [ebp-83Ch]
  unsigned int v107; // [esp+34h] [ebp-838h]
  char v108[32]; // [esp+3Ch] [ebp-830h] BYREF
  char src[2064]; // [esp+5Ch] [ebp-810h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = malloc(0x800u);
  if ( !v3 )
  {
    *size = -1;
    return 0;
  }
  v4 = v3;
  v5 = (char *)malloc(0x800u);
  if ( !v5 )
  {
    free(v4);
    *size = -1;
    return 0;
  }
  ptr = (char *)v4;
  v6 = -1;
  v7 = 0;
  v8 = 0;
  v89 = v5;
  v108[0] = 0;
  v107 = 2048;
  v106 = 0;
  v95 = 0;
  v102 = 2048;
  v96 = 0;
  v97 = 0;
  do
  {
    v9 = v8;
    v103 = v7;
    v101 = v6;
    do
    {
      v10 = v95;
      v11 = receivedata(s, src, 2048, 5000, 0);
      if ( v11 <= 0 )
        goto end_of_stream;
      v12 = v11;
      v84 = v11;
      if ( v9 )
      {
        v8 = v9;
        goto LABEL_108;
      }
      v13 = v107;
      v14 = v11 + v95;
      if ( v11 + v95 <= v107 )
      {
        v16 = ptr;
      }
      else
      {
        v15 = v11;
        v16 = (char *)realloc(ptr, v11 + v95);
        v12 = v15;
        v13 = v14;
        if ( !v16 )
        {
          free(ptr);
          free(v89);
          goto LABEL_202;
        }
      }
      ptr = v16;
      v107 = v13;
      memcpy(&v16[v95], src, v12);
      v17 = v14;
      v9 = 0;
      v18 = 1;
      v8 = 0;
      v95 = v17;
      if ( v17 >= 2 )
      {
        v19 = 0;
        v20 = v17 - 1;
        while ( 1 )
        {
          v21 = ptr[v19];
          if ( v21 == 10 )
          {
            v8 = v19 + 2;
            v23 = ptr[v19 + 1] == 10;
            v22 = v19 + 1;
LABEL_24:
            if ( !v23 )
              v8 = 0;
            goto LABEL_30;
          }
          if ( v21 != 13 )
            goto LABEL_28;
          if ( ptr[v19 + 1] != 10 )
            break;
          v22 = v19 + 2;
          if ( v19 + 2 < v95 )
          {
            v8 = 0;
            if ( ptr[v22] != 13 )
              goto LABEL_30;
            v22 = v19 + 3;
            if ( v19 + 3 < v95 )
            {
              v23 = ptr[v19 + 3] == 10;
              v8 = v19 + 4;
              goto LABEL_24;
            }
          }
LABEL_29:
          v8 = 0;
LABEL_30:
          v19 = v22 + 1;
          v18 = v8 == 0;
          if ( v19 >= v20 || v8 )
            goto LABEL_7;
        }
        ++v19;
LABEL_28:
        v22 = v19;
        goto LABEL_29;
      }
LABEL_7:
      ;
    }
    while ( v18 );
    if ( v8 >= 2 )
    {
      v90 = (void *)(v8 - 1);
      if ( status_code )
      {
        v85 = v10 + v84;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while ( 1 )
        {
          v28 = v25;
          v92 = v26;
          v29 = v26[(_DWORD)ptr];
          if ( v29 == 58 && v25 > 0 && (int)v27 <= v25 )
          {
            v30 = v92;
            if ( (int)v92 >= (int)v90 )
            {
              v24 = v92 + 1;
              v27 = v92;
            }
            else
            {
              v24 = v92 + 1;
              do
              {
                v31 = v24[(_DWORD)ptr];
                if ( v31 != 9 && v31 != 32 )
                {
                  v27 = v92;
                  v30 = v24 - 1;
                  goto LABEL_38;
                }
                ++v24;
              }
              while ( (char *)v8 != v24 );
              v27 = v92;
              v30 = (char *)(v8 - 1);
              v24 = (char *)v8;
            }
            goto LABEL_38;
          }
          if ( v29 == 13 || v29 == 10 )
            break;
          v30 = v92;
LABEL_38:
          v26 = v30 + 1;
          if ( (int)v26 >= (int)v90 )
            goto LABEL_107;
        }
        if ( v25 )
        {
          v32 = (size_t)&v27[-v25];
          v30 = v92;
          if ( (int)v27 > v28 && (int)v24 > (int)v27 )
          {
            s1 = &ptr[v28];
            if ( !strncasecmp(&ptr[v28], "content-length", v32) )
            {
              v101 = strtol(&v24[(_DWORD)ptr], 0, 10);
            }
            else if ( !strncasecmp(s1, "transfer-encoding", v32) )
            {
              v33 = strncasecmp(&v24[(_DWORD)ptr], "chunked", 7u);
              v34 = v106;
              if ( !v33 )
                v34 = 1;
              v106 = v34;
            }
            v25 = v95;
            v30 = v92;
            v24 = 0;
            if ( (int)v92 < v95 )
            {
LABEL_71:
              while ( 1 )
              {
                v39 = v30[(_DWORD)ptr];
                if ( v39 != 13 && v39 != 10 )
                  break;
                if ( (char *)v85 == ++v30 )
                {
                  v30 = (char *)v25;
                  v27 = (char *)v25;
                  goto LABEL_38;
                }
              }
            }
            goto LABEL_73;
          }
        }
        else
        {
          v30 = v92;
          v35 = ptr + 1;
          v36 = status_code;
          v37 = v92;
          if ( (int)v92 > 0 )
          {
            do
            {
              if ( *(v35 - 1) == 32 )
              {
                if ( *v36 >= 0 )
                  break;
                v38 = strtol(v35, 0, 10);
                v30 = v92;
                v36 = status_code;
                *status_code = v38;
              }
              ++v35;
              --v37;
            }
            while ( v37 );
          }
        }
        v25 = v95;
        v24 = 0;
        if ( (int)v30 < v95 )
          goto LABEL_71;
LABEL_73:
        v27 = v30;
        v25 = (int)v30;
        goto LABEL_38;
      }
      v86 = v10 + v84;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      do
      {
        v45 = ptr[v43];
        if ( v45 == 58 && v42 > 0 && v41 <= v42 )
        {
          if ( v43 >= (int)v90 )
          {
            v40 = v43 + 1;
            v44 = v43;
          }
          else
          {
            v40 = v43 + 1;
            do
            {
              v46 = ptr[v40];
              if ( v46 != 32 && v46 != 9 )
              {
                v44 = v40 - 1;
                goto LABEL_77;
              }
              ++v40;
            }
            while ( v8 != v40 );
            v44 = v8 - 1;
            v40 = v8;
          }
        }
        else if ( v45 == 13 || v45 == 10 )
        {
          if ( v41 > v42 && v40 > v41 )
          {
            v93 = &ptr[v42];
            s1a = (char *)(v41 - v42);
            if ( !strncasecmp(&ptr[v42], "content-length", v41 - v42) )
            {
              v101 = strtol(&ptr[v40], 0, 10);
            }
            else if ( !strncasecmp(v93, "transfer-encoding", (size_t)s1a) )
            {
              v47 = strncasecmp(&ptr[v40], "chunked", 7u);
              v48 = v106;
              if ( !v47 )
                v48 = 1;
              v106 = v48;
            }
          }
          v40 = 0;
          if ( v43 < v95 )
          {
            while ( 1 )
            {
              v49 = ptr[v43];
              if ( v49 != 13 && v49 != 10 )
                break;
              if ( v86 == ++v43 )
              {
                v43 = v95;
                break;
              }
            }
          }
          v44 = v43;
          v42 = v43;
        }
        else
        {
          v44 = v43;
          v43 = v41;
        }
LABEL_77:
        v41 = v43;
        v43 = v44 + 1;
      }
      while ( v44 + 1 < (int)v90 );
    }
LABEL_107:
    v10 = v95;
    v84 = v95 - v8;
    memcpy(src, &ptr[v8], v95 - v8);
LABEL_108:
    v6 = v101;
    v7 = v103;
    v95 = v10;
    if ( v106 )
    {
      v50 = v84;
      if ( v84 > 0 )
      {
        v51 = 0;
        if ( v101 >= 0 )
        {
          v52 = v89;
          while ( 1 )
          {
            v91 = v52;
            s1b = (char *)v96;
            v6 = v101;
            do
            {
              if ( v7 )
                goto LABEL_139;
              if ( !v97 )
              {
                v51 += src[v51] == 13;
                if ( v51 < v50 )
                  v51 += src[v51] == 10;
              }
              if ( v51 < v50 )
              {
                v53 = _ctype_b_loc();
                v50 = v84;
                v54 = *v53;
                while ( 1 )
                {
                  if ( v97 > 0x1E )
                    goto LABEL_125;
                  v55 = src[v51];
                  if ( (v54[v55] & 0x1000) == 0 )
                    break;
                  ++v51;
                  v108[v97] = v55;
                  v108[++v97] = 0;
                  v50 = v84;
                  if ( v84 == v51 )
                  {
                    v51 = v84;
                    goto LABEL_125;
                  }
                }
                v50 = v84;
              }
LABEL_125:
              while ( v51 < v50 )
              {
                v56 = src[v51++];
                if ( v56 == 13 || v56 == 10 )
                {
                  if ( v56 != 13 )
                    --v51;
                  break;
                }
              }
              v52 = v91;
              v7 = 0;
              if ( v51 >= v50 )
              {
                v70 = v96;
                goto LABEL_196;
              }
            }
            while ( src[v51] != 10 );
            if ( !v97 )
              break;
            v7 = 0;
            v57 = v108;
            do
            {
              v58 = 16 * v7;
              v59 = *v57;
              v60 = (v59 | 0x20) - 87;
              if ( (unsigned __int8)(v59 - 48) < 0xAu )
                v60 = v59 - 48;
              ++v57;
              v7 = v58 + v60;
              --v97;
            }
            while ( v97 );
            v108[0] = 0;
            if ( !v7 )
            {
              v52 = v91;
              goto LABEL_206;
            }
            v50 = v84;
            v52 = v91;
            ++v51;
            v97 = 0;
LABEL_139:
            v104 = v7;
            v61 = v50 - v51;
            if ( v7 < v50 - v51 )
              v61 = v7;
            v62 = v61 + v96;
            v96 += v61;
            if ( (unsigned int)&s1b[v61] > v102 )
            {
              v63 = v52;
              v64 = v101;
              if ( v101 < v62 )
                v64 = (size_t)&s1b[v61];
              v102 = v64;
              v52 = realloc(v63, v64);
              if ( !v52 )
                goto LABEL_203;
            }
            v89 = (char *)v52;
            memcpy(&s1b[(_DWORD)v52], &src[v51], v61);
            v50 = v84;
            v51 += v61;
            v52 = v89;
            v7 = v104 - v61;
            v6 = v101;
            if ( v51 >= v84 )
              goto LABEL_197;
          }
          v108[0] = 0;
LABEL_206:
          v82 = v96;
          goto LABEL_211;
        }
        v71 = v89;
LABEL_161:
        v91 = v71;
        v94 = (char *)v96;
        do
        {
          if ( v7 )
            goto LABEL_187;
          if ( !v97 )
          {
            v51 += src[v51] == 13;
            if ( v51 < v50 )
              v51 += src[v51] == 10;
          }
          if ( v51 < v50 )
          {
            v72 = _ctype_b_loc();
            v50 = v84;
            v73 = *v72;
            while ( 1 )
            {
              if ( v97 > 0x1E )
                goto LABEL_173;
              v74 = src[v51];
              if ( (v73[v74] & 0x1000) == 0 )
                break;
              ++v51;
              v108[v97] = v74;
              v108[++v97] = 0;
              v50 = v84;
              if ( v84 == v51 )
              {
                v51 = v84;
                goto LABEL_173;
              }
            }
            v50 = v84;
          }
LABEL_173:
          while ( v51 < v50 )
          {
            v75 = src[v51++];
            if ( v75 == 13 || v75 == 10 )
            {
              if ( v75 != 13 )
                --v51;
              break;
            }
          }
          v52 = v91;
          v7 = 0;
          if ( v51 >= v50 )
          {
            v70 = v96;
LABEL_196:
            v89 = (char *)v52;
            v96 = v70;
            goto LABEL_197;
          }
        }
        while ( src[v51] != 10 );
        if ( !v97 )
        {
          v108[0] = 0;
          goto LABEL_210;
        }
        v7 = 0;
        v76 = v108;
        do
        {
          v77 = 16 * v7;
          v78 = *v76;
          v79 = (v78 | 0x20) - 87;
          if ( (unsigned __int8)(v78 - 48) < 0xAu )
            v79 = v78 - 48;
          ++v76;
          v7 = v77 + v79;
          --v97;
        }
        while ( v97 );
        v108[0] = 0;
        if ( !v7 )
        {
          v52 = v91;
LABEL_210:
          v82 = v96;
LABEL_211:
          v89 = (char *)v52;
          v96 = v82;
          break;
        }
        v50 = v84;
        ++v51;
        v97 = 0;
LABEL_187:
        v105 = v7;
        v80 = v50 - v51;
        if ( v7 < v50 - v51 )
          v80 = v7;
        v96 += v80;
        if ( (unsigned int)&v94[v80] <= v102 )
        {
          v81 = (char *)v91;
        }
        else
        {
          v81 = (char *)realloc(v91, (size_t)&v94[v80]);
          v102 = (unsigned int)&v94[v80];
          if ( !v81 )
          {
LABEL_203:
            free(v91);
            goto LABEL_207;
          }
        }
        v89 = v81;
        memcpy(&v94[(_DWORD)v81], &src[v51], v80);
        v50 = v84;
        v51 += v80;
        v71 = v89;
        v7 = v105 - v80;
        v6 = v101;
        if ( v51 < v84 )
          goto LABEL_161;
      }
    }
    else
    {
      v65 = v101 - v96;
      if ( v84 + v96 <= v101 )
        v65 = v84;
      if ( v101 <= 0 )
        v65 = v84;
      if ( v65 + v96 <= v102 )
      {
        v68 = v65 + v96;
        v69 = v89;
      }
      else
      {
        v66 = v101;
        if ( v101 < v65 + v96 )
          v66 = v65 + v96;
        if ( v101 < 0 )
          v66 = v65 + v96;
        v102 = v66;
        v67 = (char *)realloc(v89, v66);
        v68 = v65 + v96;
        v69 = v67;
        if ( !v67 )
        {
          free(v89);
LABEL_207:
          free(ptr);
LABEL_202:
          *size = -1;
          return 0;
        }
      }
      v87 = v68;
      memcpy(&v69[v96], src, v65);
      v6 = v101;
      v7 = v103;
      v89 = v69;
      v96 = v87;
    }
LABEL_197:
    ;
  }
  while ( v6 <= 0 || v96 < v6 );
end_of_stream:
  free(ptr);
  *size = v96;
  if ( !v96 )
  {
    free(v89);
    return 0;
  }
  return v89;
}
