void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v4; // r0
  char *v5; // r5
  char *v6; // r0
  int v7; // r2
  signed int v8; // r3
  int v9; // r12
  unsigned int v10; // r10
  int v11; // r7
  int v12; // r0
  int v13; // r6
  signed int v14; // r9
  unsigned int v15; // r2
  char *v16; // r0
  _BOOL4 v17; // r3
  int v18; // r1
  int v19; // r2
  int v20; // r2
  int *v21; // r3
  int v22; // r4
  int v23; // r7
  int v24; // r1
  int v25; // lr
  int v26; // r8
  int v27; // r9
  int v28; // r2
  int v29; // r2
  int v30; // r1
  bool v31; // zf
  bool v32; // zf
  const char *v33; // r7
  int v34; // r9
  int v35; // r0
  bool v36; // cc
  size_t v37; // r4
  int v38; // r0
  int v39; // r0
  bool v40; // zf
  signed int v41; // r6
  const unsigned __int16 **v42; // r0
  const unsigned __int16 *v43; // r0
  int v44; // r3
  int v45; // r0
  bool v46; // zf
  char *v47; // r12
  char *v48; // r0
  signed int v49; // r7
  int v50; // t1
  int v51; // r2
  int v52; // r3
  size_t v53; // r7
  int v54; // r2
  size_t v55; // r1
  char *v56; // r0
  int v57; // r2
  size_t v58; // r7
  size_t v59; // r4
  char *v60; // r0
  char *v61; // r9
  bool v62; // cc
  char *v64; // r0
  int *v65; // [sp+10h] [bp-878h]
  int v66; // [sp+18h] [bp-870h]
  unsigned int v67; // [sp+1Ch] [bp-86Ch]
  int v68; // [sp+20h] [bp-868h]
  int v69; // [sp+24h] [bp-864h]
  char *ptr; // [sp+28h] [bp-860h]
  signed int v71; // [sp+2Ch] [bp-85Ch]
  signed int v72; // [sp+2Ch] [bp-85Ch]
  int v73; // [sp+30h] [bp-858h]
  int v76; // [sp+3Ch] [bp-84Ch]
  int v77; // [sp+3Ch] [bp-84Ch]
  unsigned int v78; // [sp+40h] [bp-848h]
  int v79; // [sp+44h] [bp-844h]
  int v80; // [sp+44h] [bp-844h]
  char v81[32]; // [sp+48h] [bp-840h] BYREF
  char src[2080]; // [sp+68h] [bp-820h] BYREF

  if ( status_code )
    *status_code = -1;
  v4 = (char *)malloc(0x800u);
  if ( !v4 )
    goto LABEL_143;
  v5 = v4;
  v6 = (char *)malloc(0x800u);
  if ( !v6 )
  {
    free(v5);
LABEL_143:
    *size = -1;
    return 0;
  }
  ptr = v6;
  v65 = size;
  v7 = -1;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v78 = 2048;
  v81[0] = 0;
  v66 = 0;
  v67 = 2048;
  v73 = 0;
  v76 = 0;
  do
  {
    v71 = v8;
    v69 = v7;
    do
    {
      v11 = v9;
      v12 = receivedata(s, src, 2048, 5000, 0);
      if ( v12 < 1 )
        goto end_of_stream;
      v13 = v76;
      v14 = v12;
      if ( v76 )
      {
        v9 = v11;
        goto LABEL_81;
      }
      v15 = v78;
      v79 = v12 + v11;
      if ( v12 + v11 <= v78 )
      {
        v16 = v5;
      }
      else
      {
        v16 = (char *)realloc(v5, v12 + v11);
        v15 = v79;
        if ( !v16 )
        {
          free(v5);
          v64 = ptr;
          goto LABEL_145;
        }
      }
      v78 = v15;
      v5 = v16;
      memcpy(&v16[v11], src, v14);
      v9 = v79;
      v17 = 1;
      v13 = 0;
      v76 = 0;
      if ( v79 >= 2 )
      {
        v18 = 0;
        do
        {
          v19 = (unsigned __int8)v5[v18];
          if ( v19 == 10 )
          {
            v20 = v18 + 1;
            v13 = 0;
            if ( v5[v18 + 1] == 10 )
              v13 = v18 + 2;
            goto LABEL_30;
          }
          if ( v19 == 13 )
          {
            v20 = v18 + 1;
            v13 = 0;
            if ( v5[v18 + 1] != 10 )
              goto LABEL_30;
            v20 = v18 + 2;
            if ( v18 + 2 < v79 )
            {
              v13 = 0;
              if ( v5[v20] != 13 )
                goto LABEL_30;
              v20 = v18 + 3;
              if ( v18 + 3 < v79 )
              {
                v13 = 0;
                if ( v5[v20] == 10 )
                  v13 = v18 + 4;
                goto LABEL_30;
              }
            }
          }
          else
          {
            v20 = v18;
          }
          v13 = 0;
LABEL_30:
          v17 = v13 == 0;
          v18 = v20 + 1;
        }
        while ( v20 + 1 < v79 - 1 && !v13 );
      }
    }
    while ( v17 );
    if ( v13 >= 2 )
    {
      v21 = status_code;
      v22 = v14 + v11;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = v13 - 1;
      v77 = v22;
      do
      {
        v29 = (unsigned __int8)v5[v26];
        if ( v29 == 58 && v25 >= 1 && v24 <= v25 )
        {
          v23 = v26 + 1;
          if ( v26 < v27 )
          {
            do
            {
              v30 = (unsigned __int8)v5[v23];
              v31 = v30 == 32;
              if ( v30 != 32 )
                v31 = v30 == 9;
              if ( !v31 )
              {
                v28 = v23 - 1;
                goto LABEL_37;
              }
              ++v23;
            }
            while ( v13 != v23 );
            v28 = v27;
            v24 = v26;
            v23 = v13;
            goto LABEL_38;
          }
          v28 = v26;
        }
        else
        {
          v32 = v29 == 13;
          if ( v29 != 13 )
            v32 = v29 == 10;
          if ( !v32 )
          {
            v28 = v26;
            goto LABEL_38;
          }
          if ( v21 && !v25 )
          {
            if ( v26 < 1 )
              goto LABEL_73;
            v33 = v5 + 1;
            v34 = v26;
            while ( 1 )
            {
              if ( *(v33 - 1) == 32 )
              {
                if ( *v21 > -1 )
                {
LABEL_70:
                  v27 = v13 - 1;
                  goto LABEL_73;
                }
                v35 = strtol(v33, 0u, 10);
                v21 = status_code;
                v22 = v77;
                v9 = v79;
                *status_code = v35;
              }
              ++v33;
              if ( !--v34 )
                goto LABEL_70;
            }
          }
          v36 = v24 <= v25;
          if ( v24 > v25 )
            v36 = v23 <= v24;
          if ( !v36 )
          {
            v37 = v24 - v25;
            if ( !strncasecmp(&v5[v25], "content-length", v24 - v25) )
            {
              v69 = strtol(&v5[v23], 0u, 10);
            }
            else if ( !strncasecmp(&v5[v25], "transfer-encoding", v37) )
            {
              v31 = strncasecmp(&v5[v23], "chunked", 7u) == 0;
              v38 = v66;
              if ( v31 )
                v38 = 1;
              v66 = v38;
            }
            v21 = status_code;
            v9 = v79;
            v22 = v77;
          }
LABEL_73:
          v23 = 0;
          if ( v26 < v9 )
          {
            while ( 1 )
            {
              v39 = (unsigned __int8)v5[v26];
              v40 = v39 == 13;
              if ( v39 != 13 )
                v40 = v39 == 10;
              if ( !v40 )
                break;
              if ( v22 == ++v26 )
              {
                v28 = v9;
                v25 = v9;
                v24 = v9;
                goto LABEL_38;
              }
            }
          }
          v28 = v26;
          v25 = v26;
        }
LABEL_37:
        v24 = v26;
LABEL_38:
        v26 = v28 + 1;
      }
      while ( v28 + 1 < v27 );
    }
    v14 = v9 - v13;
    memcpy(src, &v5[v13], v9 - v13);
    v9 = v79;
LABEL_81:
    v8 = v71;
    v80 = v9;
    v76 = v13;
    if ( v66 )
    {
      if ( v14 >= 1 )
      {
        v41 = 0;
LABEL_84:
        v68 = v73;
        do
        {
          if ( v8 )
          {
            v47 = ptr;
            goto LABEL_115;
          }
          if ( !v10 )
          {
            if ( src[v41] == 13 )
              ++v41;
            if ( v41 < v14 && src[v41] == 10 )
              ++v41;
          }
          if ( v41 < v14 )
          {
            v42 = _ctype_b_loc();
            v9 = v80;
            v43 = *v42;
            while ( v10 <= 0x1E )
            {
              v44 = (unsigned __int8)src[v41];
              if ( (v43[v44] & 0x1000) == 0 )
                break;
              ++v41;
              v81[v10 + 1] = 0;
              v81[v10++] = v44;
              if ( v14 == v41 )
              {
                v41 = v14;
                break;
              }
            }
          }
          while ( v41 < v14 )
          {
            v45 = (unsigned __int8)src[v41++];
            v46 = v45 == 13;
            if ( v45 != 13 )
              v46 = v45 == 10;
            if ( v46 )
            {
              if ( v45 != 13 )
                --v41;
              break;
            }
          }
          if ( v41 >= v14 )
          {
            v8 = 0;
            goto LABEL_138;
          }
          v8 = 0;
        }
        while ( src[v41] != 10 );
        if ( !v10 )
        {
          v81[0] = 0;
          break;
        }
        v47 = ptr;
        v8 = 0;
        v48 = v81;
        do
        {
          v49 = v8;
          v50 = (unsigned __int8)*v48++;
          v51 = v50 - 0x30;
          v52 = v50 | 0x20;
          if ( (unsigned int)(v50 - 0x30) >= 0xA )
            v51 = v52 - 0x57;
          --v10;
          v8 = v51 + 16 * v49;
        }
        while ( v10 );
        v10 = 0;
        v81[0] = 0;
        if ( !v8 )
          break;
        ++v41;
LABEL_115:
        v53 = v14 - v41;
        v72 = v8;
        if ( v8 < v14 - v41 )
          v53 = v8;
        v54 = v53 + v73;
        v73 += v53;
        if ( v53 + v68 <= v67 )
        {
          v56 = v47;
        }
        else
        {
          v55 = v69;
          if ( v69 < v54 )
            v55 = v54;
          v67 = v55;
          v56 = (char *)realloc(v47, v55);
          if ( !v56 )
            goto LABEL_146;
        }
        ptr = v56;
        memcpy(&v56[v68], &src[v41], v53);
        v9 = v80;
        v41 += v53;
        v8 = v72 - v53;
        if ( v41 < v14 )
          goto LABEL_84;
      }
    }
    else
    {
      v57 = v73;
      v58 = v14;
      v59 = v67;
      if ( v14 + v73 > v69 )
        v58 = v69 - v73;
      if ( v69 <= 0 )
        v58 = v14;
      if ( v58 + v73 <= v67 )
      {
        v61 = ptr;
      }
      else
      {
        v59 = v69;
        if ( v69 < (int)(v58 + v73) )
          v59 = v58 + v73;
        v60 = (char *)realloc(ptr, v59);
        v57 = v73;
        v61 = v60;
        if ( !v60 )
        {
LABEL_146:
          free(ptr);
          v64 = v5;
LABEL_145:
          free(v64);
          *v65 = -1;
          return 0;
        }
      }
      v67 = v59;
      memcpy(&v61[v57], src, v58);
      v9 = v80;
      v8 = v71;
      ptr = v61;
      v73 += v58;
    }
LABEL_138:
    v7 = v69;
    v62 = v69 < 1;
    if ( v69 >= 1 )
      v62 = v73 < v69;
  }
  while ( v62 );
end_of_stream:
  free(v5);
  *v65 = v73;
  if ( !v73 )
  {
    free(ptr);
    return 0;
  }
  return ptr;
}
