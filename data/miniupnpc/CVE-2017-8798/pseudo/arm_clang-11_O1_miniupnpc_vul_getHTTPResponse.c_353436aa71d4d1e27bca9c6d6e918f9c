void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  void *v4; // r0
  void *v5; // r5
  unsigned int v6; // r11
  char *v7; // r0
  int v8; // r9
  unsigned int v9; // r6
  int v10; // r6
  int v11; // r0
  signed int v12; // r4
  int v13; // r7
  int v14; // r5
  const char *v15; // r9
  void *v16; // r0
  int v17; // r5
  void *v18; // r2
  int v19; // r0
  _BOOL4 v20; // r3
  int v21; // r6
  int v22; // r2
  int v23; // r1
  int v24; // r1
  int v25; // r11
  int v26; // r10
  int v27; // r1
  int v28; // r0
  int v29; // r7
  int v30; // r5
  int v31; // r2
  _BOOL4 v32; // r1
  int v33; // r2
  bool v34; // zf
  const char *v35; // r4
  int v36; // r6
  bool v37; // cc
  int v38; // r0
  bool v39; // zf
  const char *v40; // r4
  int v41; // r0
  const char *v42; // r1
  int v43; // r6
  void *v44; // r7
  signed int v45; // r5
  signed int v46; // r0
  char *v47; // r9
  const unsigned __int16 *v48; // r0
  int v49; // r1
  signed int v50; // r0
  int v51; // r2
  bool v52; // zf
  signed int v53; // r12
  signed int v54; // r0
  char *v55; // r1
  int v56; // t1
  int v57; // r3
  int v58; // r2
  size_t v59; // r6
  int v60; // r3
  size_t v61; // r1
  char *v62; // r3
  int v63; // lr
  int v64; // r0
  int v65; // r7
  int v66; // r3
  size_t v67; // r9
  size_t v68; // r1
  char *v69; // r0
  int v70; // r2
  char *v71; // r0
  int v73; // [sp+Ch] [bp-884h]
  unsigned int v74; // [sp+10h] [bp-880h]
  signed int v75; // [sp+14h] [bp-87Ch]
  signed int v76; // [sp+14h] [bp-87Ch]
  unsigned int v77; // [sp+18h] [bp-878h]
  unsigned int v78; // [sp+18h] [bp-878h]
  int v79; // [sp+1Ch] [bp-874h]
  char *v80; // [sp+24h] [bp-86Ch]
  int v81; // [sp+28h] [bp-868h]
  int v82; // [sp+2Ch] [bp-864h]
  void *v85; // [sp+38h] [bp-858h]
  char *v86; // [sp+38h] [bp-858h]
  int v87; // [sp+3Ch] [bp-854h]
  int v88; // [sp+3Ch] [bp-854h]
  char *ptr; // [sp+40h] [bp-850h]
  void *ptra; // [sp+40h] [bp-850h]
  int v91; // [sp+44h] [bp-84Ch]
  int v92; // [sp+44h] [bp-84Ch]
  int *v93; // [sp+48h] [bp-848h]
  char v94[32]; // [sp+4Ch] [bp-844h] BYREF
  char src[2084]; // [sp+6Ch] [bp-824h] BYREF

  if ( status_code )
    *status_code = -1;
  v4 = malloc(0x800u);
  if ( !v4 )
    goto LABEL_157;
  v5 = v4;
  v6 = 2048;
  v7 = (char *)malloc(0x800u);
  if ( !v7 )
  {
    free(v5);
LABEL_157:
    *size = -1;
    return 0;
  }
  ptr = (char *)v5;
  v80 = v7;
  v94[0] = 0;
  v82 = 0;
  v81 = -1;
  v75 = 0;
  v8 = 0;
  v74 = 2048;
  v79 = 0;
  v9 = 0;
  v87 = 0;
  v93 = status_code;
  while ( 1 )
  {
    v77 = v9;
    v10 = v87;
    do
    {
      v11 = receivedata(s, src, 2048, 5000, 0);
      if ( v11 < 1 )
        goto end_of_stream;
      v12 = v11;
      if ( v10 )
        goto LABEL_82;
      v13 = v8;
      v14 = v11 + v8;
      v91 = v11 + v8;
      if ( v11 + v8 <= v6 )
      {
        v15 = ptr;
        v18 = (void *)v6;
      }
      else
      {
        v15 = (const char *)realloc(ptr, v11 + v8);
        v16 = (void *)v14;
        v17 = 1;
        v18 = v16;
        v19 = 1;
        if ( !v15 )
        {
          free(ptr);
          free(v80);
          *size = -1;
          v19 = 0;
          v15 = ptr;
          v18 = (void *)v6;
        }
        v10 = 0;
        if ( !v19 )
        {
          ptr = (char *)v15;
          v6 = (unsigned int)v18;
          v8 = v13;
          continue;
        }
      }
      v85 = v18;
      memcpy((void *)&v15[v13], src, v12);
      v20 = 1;
      v21 = 0;
      if ( v91 >= 2 )
      {
        v21 = 0;
        v22 = 0;
        do
        {
          v23 = (unsigned __int8)v15[v22];
          if ( v23 == 10 )
          {
            v24 = v22 + 1;
            if ( v15[v22 + 1] == 10 )
              v21 = v22 + 2;
          }
          else if ( v23 == 13 )
          {
            v24 = v22 + 1;
            if ( v15[v22 + 1] == 10 )
            {
              v24 = v22 + 2;
              if ( v22 + 2 < v91 && v15[v24] == 13 )
              {
                v24 = v22 + 3;
                if ( v22 + 3 < v91 && v15[v24] == 10 )
                  v21 = v22 + 4;
              }
            }
          }
          else
          {
            v24 = v22;
          }
          v20 = v21 == 0;
          v22 = v24 + 1;
        }
        while ( v24 + 1 < v91 - 1 && !v21 );
      }
      v17 = 2;
      if ( v20 )
      {
        ptr = (char *)v15;
        v6 = (unsigned int)v85;
        v8 = v91;
        v10 = 0;
        continue;
      }
      v88 = v21;
      if ( v21 >= 2 )
      {
        v25 = v21 - 1;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v30 = v91;
        while ( 1 )
        {
          if ( v28 >= 1 && v27 <= v28 && v15[v29] == 58 )
          {
            v26 = v29;
            do
            {
              v32 = 0;
              if ( v26 < v25 )
                v32 = v15[v26 + 1] == 0x20 || v15[v26 + 1] == 9;
              ++v26;
            }
            while ( v32 );
            v31 = v26 - 1;
          }
          else
          {
            v33 = (unsigned __int8)v15[v29];
            v34 = v33 == 13;
            if ( v33 != 13 )
              v34 = v33 == 10;
            if ( !v34 )
            {
              v31 = v29;
              goto LABEL_39;
            }
            if ( v93 && !v28 )
            {
              if ( v29 < 1 )
                goto LABEL_64;
              v35 = v15 + 1;
              v36 = v29;
              while ( 1 )
              {
                if ( *(v35 - 1) == 32 )
                {
                  if ( *v93 > -1 )
                  {
LABEL_59:
                    v21 = v88;
                    v30 = v91;
                    goto LABEL_64;
                  }
                  *v93 = atoi(v35);
                }
                ++v35;
                if ( !--v36 )
                  goto LABEL_59;
              }
            }
            v37 = v27 <= v28;
            if ( v27 > v28 )
              v37 = v26 <= v27;
            if ( !v37 )
            {
              v40 = &v15[v28];
              ptra = (void *)(v27 - v28);
              if ( !strncasecmp(&v15[v28], "content-length", v27 - v28) )
              {
                v81 = atoi(&v15[v26]);
              }
              else if ( !strncasecmp(v40, "transfer-encoding", (size_t)ptra) )
              {
                v34 = strncasecmp(&v15[v26], "chunked", 7u) == 0;
                v41 = v82;
                if ( v34 )
                  v41 = 1;
                v82 = v41;
              }
            }
LABEL_64:
            v26 = 0;
            if ( v29 < v30 )
            {
              while ( 1 )
              {
                v38 = (unsigned __int8)v15[v29];
                v39 = v38 == 13;
                if ( v38 != 13 )
                  v39 = v38 == 10;
                if ( !v39 )
                  break;
                if ( v30 == ++v29 )
                {
                  v31 = v30;
                  v28 = v30;
                  v27 = v30;
                  goto LABEL_39;
                }
              }
            }
            v31 = v29;
            v28 = v29;
          }
          v27 = v29;
LABEL_39:
          v29 = v31 + 1;
          if ( v31 + 1 >= v25 )
            goto LABEL_79;
        }
      }
      v30 = v91;
LABEL_79:
      v42 = &v15[v21];
      v12 = v30 - v21;
      v43 = v30;
      memcpy(src, v42, v12);
      v17 = 0;
      ptr = (char *)v15;
      v6 = (unsigned int)v85;
      v8 = v43;
      v10 = v88;
    }
    while ( v17 == 2 );
    if ( v17 )
      return 0;
LABEL_82:
    v87 = v10;
    if ( v10 )
      break;
    v9 = v77;
LABEL_152:
    if ( v81 >= 1 && v79 >= v81 )
      goto end_of_stream;
  }
  if ( !v82 )
  {
    v65 = v8;
    v66 = v79;
    v67 = v12;
    if ( v12 + v79 > v81 )
      v67 = v81 - v79;
    if ( v81 <= 0 )
      v67 = v12;
    if ( v67 + v79 <= v74 )
    {
      v69 = v80;
    }
    else
    {
      v68 = v81;
      if ( v81 < (int)(v67 + v79) )
        v68 = v67 + v79;
      v74 = v68;
      v69 = (char *)realloc(v80, v68);
      if ( v69 )
      {
        v70 = 1;
      }
      else
      {
        free(v80);
        free(ptr);
        *size = -1;
        v70 = 0;
        v69 = v80;
      }
      v66 = v79;
      if ( !v70 )
        return 0;
    }
    v80 = v69;
    memcpy(&v69[v66], src, v67);
    v79 += v67;
    v9 = v77;
    v8 = v65;
    goto LABEL_152;
  }
  v44 = 0;
  v9 = v77;
  if ( v12 < 1 )
  {
    v92 = v79;
    v53 = v75;
    v71 = v80;
    v63 = 0;
    goto LABEL_146;
  }
  v73 = v8;
  v45 = 0;
  v46 = v75;
  v47 = v80;
  while ( 1 )
  {
    v86 = v47;
    v92 = v79;
    v8 = v73;
LABEL_88:
    if ( !v46 )
      break;
    v76 = v46;
LABEL_122:
    v78 = v9;
    v59 = v12 - v45;
    if ( v76 < v12 - v45 )
      v59 = v76;
    v60 = v59 + v79;
    v79 += v59;
    if ( v59 + v92 <= v74 )
    {
      v62 = v86;
    }
    else
    {
      v61 = v81;
      if ( v81 < v60 )
        v61 = v59 + v92;
      v74 = v61;
      v62 = (char *)realloc(v86, v61);
      v63 = 1;
      v64 = 1;
      if ( !v62 )
      {
        free(v86);
        free(ptr);
        v63 = 1;
        *size = -1;
        v64 = 0;
        v62 = v86;
      }
      if ( !v64 )
      {
        v53 = v76;
        v71 = v62;
        v9 = v78;
        goto LABEL_146;
      }
    }
    v47 = v62;
    memcpy(&v62[v92], &src[v45], v59);
    v46 = v76 - v59;
    v45 += v59;
    v9 = v78;
    if ( v45 >= v12 )
    {
      v63 = 0;
      v92 = v79;
      v53 = v46;
      v71 = v47;
      v8 = v73;
      goto LABEL_146;
    }
  }
  if ( !v9 )
  {
    if ( src[v45] == 13 )
      ++v45;
    if ( v45 < v12 && src[v45] == 10 )
      ++v45;
  }
  if ( v45 < v12 )
  {
    v48 = *_ctype_b_loc();
    while ( v9 <= 0x1E )
    {
      v49 = (unsigned __int8)src[v45];
      if ( (v48[v49] & 0x1000) == 0 )
        break;
      v94[v9 + 1] = 0;
      v94[v9] = v49;
      ++v45;
      ++v9;
      if ( v12 == v45 )
      {
        v45 = v12;
        break;
      }
    }
  }
  v50 = v12;
  if ( v45 > v12 )
    v50 = v45;
  while ( 2 )
  {
    if ( v50 == v45 )
    {
      v45 = v50;
      if ( v50 < v12 )
        goto LABEL_113;
      goto LABEL_87;
    }
    v51 = (unsigned __int8)src[v45++];
    v52 = v51 == 13;
    if ( v51 != 13 )
      v52 = v51 == 10;
    if ( !v52 )
      continue;
    break;
  }
  if ( v51 != 13 )
    --v45;
  if ( v45 >= v12 )
  {
LABEL_87:
    v46 = 0;
    if ( v45 < v12 )
      goto LABEL_88;
    v53 = 0;
    v63 = 0;
    v71 = v86;
    goto LABEL_146;
  }
LABEL_113:
  if ( src[v45] != 10 )
    goto LABEL_87;
  v53 = 0;
  v54 = 0;
  if ( v9 )
  {
    v54 = 0;
    v55 = v94;
    do
    {
      v56 = (unsigned __int8)*v55++;
      v57 = v56 - 0x30;
      v58 = v56 | 0x20;
      if ( (unsigned int)(v56 - 0x30) >= 0xA )
        v57 = v58 - 0x57;
      v54 = v57 + 16 * v54;
      --v9;
    }
    while ( v9 );
  }
  v94[0] = 0;
  v76 = v54;
  if ( v54 )
  {
    ++v45;
    v9 = 0;
    goto LABEL_122;
  }
  v63 = 25;
  v9 = 0;
  v71 = v86;
LABEL_146:
  if ( !v63 )
  {
    v75 = v53;
    v80 = v71;
    v79 = v92;
    goto LABEL_152;
  }
  v80 = v71;
  v79 = v92;
  if ( v63 == 25 )
  {
end_of_stream:
    free(ptr);
    *size = v79;
    if ( v79 )
      return v80;
    free(v80);
    return 0;
  }
  return v44;
}
