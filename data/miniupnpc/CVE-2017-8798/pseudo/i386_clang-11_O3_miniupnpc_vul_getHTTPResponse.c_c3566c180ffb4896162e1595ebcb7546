char *__cdecl getHTTPResponse(int s, int *size, int *status_code)
{
  int *v3; // ebx
  char *v4; // eax
  char *v5; // esi
  char *v6; // eax
  size_t v7; // ebp
  unsigned int v8; // ecx
  int v9; // edi
  int v10; // eax
  signed int v11; // ebx
  signed int v12; // edx
  char *v13; // ebp
  int v14; // ebp
  int v15; // edi
  signed int v16; // esi
  char *v17; // eax
  int v18; // eax
  int v19; // ecx
  char v20; // dl
  int v21; // edx
  bool v22; // zf
  int v23; // ebx
  char *v24; // eax
  signed int v25; // ebp
  signed int v26; // eax
  unsigned int v27; // ebx
  const unsigned __int16 *v28; // eax
  unsigned int v29; // ecx
  int v30; // ecx
  signed int v31; // ecx
  signed int v32; // eax
  char v33; // dl
  signed int v34; // ebx
  char *v35; // eax
  int v36; // ecx
  int v37; // edx
  unsigned __int8 v38; // bl
  int v39; // ecx
  size_t v40; // ebx
  size_t v41; // eax
  char *v42; // eax
  bool v43; // cc
  int v44; // ebp
  int v45; // eax
  int v46; // edx
  int v47; // ebx
  int v48; // ecx
  char v49; // cl
  char v50; // al
  size_t v51; // ebp
  const char *v52; // ebx
  int *v53; // eax
  int v54; // eax
  int v55; // eax
  int v56; // eax
  int v57; // ecx
  char v58; // al
  int v59; // eax
  char *v60; // ebp
  char *v61; // edx
  int v62; // ebx
  int v63; // ecx
  char v64; // cl
  char v65; // al
  size_t v66; // edx
  int v67; // eax
  int v68; // ecx
  char v69; // al
  int v70; // ecx
  signed int v71; // ebx
  int v72; // edx
  size_t v73; // eax
  char *v74; // eax
  int v75; // ecx
  char *v76; // ebp
  int v77; // ebx
  size_t v79; // [esp-8h] [ebp-874h]
  char *ptr; // [esp+4h] [ebp-868h]
  char *ptra; // [esp+4h] [ebp-868h]
  const char *ptrb; // [esp+4h] [ebp-868h]
  char *ptrc; // [esp+4h] [ebp-868h]
  const char *ptrd; // [esp+4h] [ebp-868h]
  signed int v85; // [esp+8h] [ebp-864h]
  signed int v86; // [esp+8h] [ebp-864h]
  int v87; // [esp+8h] [ebp-864h]
  char *v88; // [esp+8h] [ebp-864h]
  char *v89; // [esp+Ch] [ebp-860h]
  int v90; // [esp+10h] [ebp-85Ch]
  int v91; // [esp+10h] [ebp-85Ch]
  int v92; // [esp+14h] [ebp-858h]
  int v93; // [esp+14h] [ebp-858h]
  signed int v94; // [esp+18h] [ebp-854h]
  signed int v95; // [esp+1Ch] [ebp-850h]
  size_t v96; // [esp+1Ch] [ebp-850h]
  int v97; // [esp+20h] [ebp-84Ch]
  size_t v98; // [esp+24h] [ebp-848h]
  signed int v99; // [esp+24h] [ebp-848h]
  unsigned int v100; // [esp+28h] [ebp-844h]
  unsigned int v101; // [esp+28h] [ebp-844h]
  unsigned int v102; // [esp+28h] [ebp-844h]
  int v103; // [esp+2Ch] [ebp-840h]
  unsigned int v104; // [esp+30h] [ebp-83Ch]
  unsigned int v105; // [esp+34h] [ebp-838h]
  char v106[32]; // [esp+3Ch] [ebp-830h] BYREF
  char src[2064]; // [esp+5Ch] [ebp-810h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = size;
  v4 = (char *)malloc(0x800u);
  if ( !v4 )
  {
    *size = -1;
    return 0;
  }
  v5 = v4;
  v6 = (char *)malloc(0x800u);
  if ( !v6 )
  {
    free(v5);
    *size = -1;
    return 0;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v89 = v6;
  v106[0] = 0;
  v105 = 2048;
  v97 = -1;
  v103 = 0;
  v94 = 0;
  v104 = 2048;
  v90 = 0;
  while ( 2 )
  {
    while ( 2 )
    {
      v100 = v8;
      v10 = receivedata(s, src, 2048, 5000, 0);
      if ( v10 <= 0 )
        goto end_of_stream;
      v11 = v94;
      v98 = v7;
      v12 = v10;
      v13 = v5;
      while ( 2 )
      {
        if ( v9 )
        {
          v94 = v11;
          v5 = v13;
          v8 = v100;
          v23 = v97;
          if ( v103 )
            goto LABEL_35;
          goto LABEL_158;
        }
        v15 = v12 + v11;
        if ( v12 + v11 <= v105 )
        {
          v5 = v13;
        }
        else
        {
          v16 = v12;
          v17 = (char *)realloc(v13, v12 + v11);
          v12 = v16;
          v5 = v17;
          v105 = v15;
          if ( !v17 )
          {
            free(v13);
            free(v89);
            goto LABEL_176;
          }
        }
        v85 = v12;
        memcpy(&v5[v11], src, v12);
        v14 = v15;
        if ( v15 < 2 )
          goto LABEL_9;
        v94 = v15;
        v18 = v15 - 1;
        v19 = 0;
        do
        {
          v20 = v5[v19];
          if ( v20 == 10 )
          {
            v22 = v5[v19 + 1] == 10;
            v21 = v19 + 1;
            v9 = v19 + 2;
LABEL_25:
            if ( !v22 )
              v9 = 0;
            goto LABEL_31;
          }
          if ( v20 != 13 )
            goto LABEL_29;
          if ( v5[v19 + 1] != 10 )
          {
            ++v19;
LABEL_29:
            v21 = v19;
LABEL_30:
            v9 = 0;
            goto LABEL_31;
          }
          v21 = v19 + 2;
          if ( v19 + 2 >= v94 )
            goto LABEL_30;
          v9 = 0;
          if ( v5[v21] == 13 )
          {
            v21 = v19 + 3;
            if ( v19 + 3 >= v94 )
              goto LABEL_30;
            v22 = v5[v19 + 3] == 10;
            v9 = v19 + 4;
            goto LABEL_25;
          }
LABEL_31:
          v19 = v21 + 1;
        }
        while ( v21 + 1 < v18 && !v9 );
        v14 = v94;
        if ( !v9 )
        {
LABEL_9:
          v9 = 0;
          v11 = v14;
          v12 = receivedata(s, src, 2048, 5000, 0);
          v13 = v5;
          if ( v12 <= 0 )
          {
            v3 = size;
            goto end_of_stream;
          }
          continue;
        }
        break;
      }
      if ( v9 >= 2 )
      {
        v93 = v9 - 1;
        if ( status_code )
        {
          v44 = 0;
          ptra = 0;
          v45 = 0;
          v46 = v11 + v85;
          v47 = 0;
          v87 = v46;
          while ( 1 )
          {
            v49 = v5[v44];
            if ( v49 == 58 && (int)ptra > 0 && v45 <= (int)ptra )
            {
              if ( v44 >= v93 )
              {
                v47 = v44 + 1;
                v48 = v44;
              }
              else
              {
                v47 = v44 + 1;
                do
                {
                  v50 = v5[v47];
                  if ( v50 != 9 && v50 != 32 )
                  {
                    v48 = v47 - 1;
                    goto LABEL_84;
                  }
                  ++v47;
                }
                while ( v9 != v47 );
                v48 = v9 - 1;
                v47 = v9;
              }
              goto LABEL_84;
            }
            if ( v49 == 13 || v49 == 10 )
              break;
            v48 = v44;
            v44 = v45;
LABEL_84:
            v45 = v44;
            v44 = v48 + 1;
            if ( v48 + 1 >= v93 )
              goto LABEL_157;
          }
          v95 = v44;
          if ( ptra )
          {
            v51 = v45 - (_DWORD)ptra;
            if ( v45 > (int)ptra && v47 > v45 )
            {
              ptrb = &ptra[(_DWORD)v5];
              if ( strncasecmp(ptrb, "content-length", v51) )
              {
                if ( !strncasecmp(ptrb, "transfer-encoding", v51) )
                {
                  v56 = strncasecmp(&v5[v47], "chunked", 7u);
                  v57 = v103;
                  v46 = v87;
                  if ( !v56 )
                    v57 = 1;
                  v103 = v57;
                  v44 = v95;
                  v47 = 0;
                  if ( v95 < v94 )
                  {
LABEL_120:
                    while ( 1 )
                    {
                      v58 = v5[v44];
                      if ( v58 != 13 && v58 != 10 )
                        break;
                      if ( v46 == ++v44 )
                      {
                        v44 = v94;
                        goto LABEL_124;
                      }
                    }
                  }
                }
                else
                {
                  v46 = v87;
                  v44 = v95;
                  v47 = 0;
                  if ( v95 < v94 )
                    goto LABEL_120;
                }
                goto LABEL_124;
              }
              v55 = strtol(&v5[v47], 0, 10);
              v46 = v87;
              v97 = v55;
            }
          }
          else
          {
            v52 = v5 + 1;
            v53 = status_code;
            if ( v44 > 0 )
            {
              do
              {
                if ( *(v52 - 1) == 32 )
                {
                  if ( *v53 >= 0 )
                    break;
                  v54 = strtol(v52, 0, 10);
                  v46 = v87;
                  *status_code = v54;
                  v53 = status_code;
                }
                ++v52;
                --v44;
              }
              while ( v44 );
            }
          }
          v44 = v95;
          v47 = 0;
          if ( v95 < v94 )
            goto LABEL_120;
LABEL_124:
          v48 = v44;
          ptra = (char *)v44;
          goto LABEL_84;
        }
        v59 = 0;
        v60 = 0;
        ptrc = 0;
        v61 = (char *)(v11 + v85);
        v62 = 0;
        v88 = v61;
        do
        {
          v64 = v60[(_DWORD)v5];
          if ( v64 == 58 && (int)ptrc > 0 && v59 <= (int)ptrc )
          {
            if ( (int)v60 >= v93 )
            {
              v62 = (int)(v60 + 1);
              v63 = (int)v60;
            }
            else
            {
              v62 = (int)(v60 + 1);
              do
              {
                v65 = v5[v62];
                if ( v65 != 32 && v65 != 9 )
                {
                  v63 = v62 - 1;
                  goto LABEL_127;
                }
                ++v62;
              }
              while ( v9 != v62 );
              v63 = v9 - 1;
              v62 = v9;
            }
          }
          else if ( v64 == 13 || v64 == 10 )
          {
            v66 = v59 - (_DWORD)ptrc;
            if ( v59 > (int)ptrc && v62 > v59 )
            {
              ptrd = &ptrc[(_DWORD)v5];
              v96 = v66;
              if ( !strncasecmp(ptrd, "content-length", v66) )
              {
                v97 = strtol(&v5[v62], 0, 10);
              }
              else if ( !strncasecmp(ptrd, "transfer-encoding", v96) )
              {
                v67 = strncasecmp(&v5[v62], "chunked", 7u);
                v68 = v103;
                if ( !v67 )
                  v68 = 1;
                v103 = v68;
              }
            }
            v62 = 0;
            if ( (int)v60 < v94 )
            {
              while ( 1 )
              {
                v69 = v60[(_DWORD)v5];
                if ( v69 != 13 && v69 != 10 )
                  break;
                if ( v88 == ++v60 )
                {
                  v60 = (char *)v94;
                  break;
                }
              }
            }
            v63 = (int)v60;
            ptrc = v60;
          }
          else
          {
            v63 = (int)v60;
            v60 = (char *)v59;
          }
LABEL_127:
          v59 = (int)v60;
          v60 = (char *)(v63 + 1);
        }
        while ( v63 + 1 < v93 );
      }
LABEL_157:
      memcpy(src, &v5[v9], v94 - v9);
      v12 = v94 - v9;
      v8 = v100;
      v23 = v97;
      if ( !v103 )
      {
LABEL_158:
        v70 = v23;
        v71 = v23 - v90;
        if ( v12 + v90 <= v70 )
          v71 = v12;
        if ( v70 <= 0 )
          v71 = v12;
        v72 = v90;
        if ( v71 + v90 <= v104 )
        {
          v75 = v71 + v90;
          v76 = v89;
        }
        else
        {
          v73 = v70;
          if ( v70 < v71 + v90 )
            v73 = v71 + v90;
          v104 = v73;
          v74 = (char *)realloc(v89, v73);
          v72 = v90;
          v75 = v71 + v90;
          v76 = v74;
          if ( !v74 )
          {
            free(v89);
LABEL_179:
            free(v5);
LABEL_176:
            *size = -1;
            return 0;
          }
        }
        v79 = v71;
        v77 = v75;
        memcpy(&v76[v72], src, v79);
        v90 = v77;
        v8 = v100;
        v89 = v76;
        v3 = size;
        v7 = v98;
        if ( v97 > 0 )
        {
LABEL_169:
          if ( v90 >= v97 )
            goto end_of_stream;
        }
        continue;
      }
      break;
    }
LABEL_35:
    if ( v12 <= 0 )
    {
LABEL_78:
      v43 = v23 <= 0;
      v3 = size;
      v7 = v98;
      if ( !v43 )
        goto LABEL_169;
      continue;
    }
    break;
  }
  v24 = v89;
  v25 = 0;
  v86 = v12;
  v97 = v23;
  while ( 1 )
  {
    ptr = v24;
    v92 = v90;
    v26 = v98;
LABEL_38:
    if ( !v26 )
      break;
    v99 = v26;
LABEL_66:
    v102 = v8;
    v40 = v12 - v25;
    if ( v99 <= v12 - v25 )
      v40 = v99;
    v90 = v40 + v92;
    if ( v40 + v92 <= v104 )
    {
      v42 = ptr;
    }
    else
    {
      v41 = v97;
      if ( v97 < (int)(v40 + v92) )
        v41 = v40 + v92;
      v104 = v41;
      v42 = (char *)realloc(ptr, v41);
      if ( !v42 )
      {
        free(ptr);
        goto LABEL_179;
      }
    }
    v89 = v42;
    memcpy(&v42[v92], &src[v25], v40);
    v12 = v86;
    v25 += v40;
    v98 = v99 - v40;
    v24 = v89;
    v23 = v97;
    v8 = v102;
    if ( v25 >= v86 )
      goto LABEL_78;
  }
  if ( !v8 )
  {
    v25 += src[v25] == 13;
    if ( v25 < v12 )
      v25 += src[v25] == 10;
  }
  v27 = v8;
  if ( v25 < v12 )
  {
    v28 = *_ctype_b_loc();
    v29 = v27;
    while ( 1 )
    {
      v27 = v29;
      if ( v29 > 0x1E )
        break;
      v30 = src[v25];
      if ( (v28[v30] & 0x1000) == 0 )
        break;
      ++v25;
      v106[v27] = v30;
      v106[v27 + 1] = 0;
      v29 = v27 + 1;
      if ( v86 == v25 )
      {
        ++v27;
        v12 = v86;
        v25 = v86;
        goto LABEL_49;
      }
    }
    v12 = v86;
  }
LABEL_49:
  v31 = v12;
  v32 = v25;
  if ( v25 >= v12 )
    v31 = v25;
  while ( 2 )
  {
    if ( v31 == v32 )
    {
      v98 = 0;
      goto LABEL_77;
    }
    v33 = src[v32++];
    if ( v33 != 13 && v33 != 10 )
      continue;
    break;
  }
  v22 = v33 == 13;
  v12 = v86;
  v25 = v32 - 1;
  v98 = 0;
  if ( v22 )
    v25 = v32;
  if ( v25 >= v86 )
  {
LABEL_77:
    v8 = v27;
    v23 = v97;
    v89 = ptr;
    goto LABEL_78;
  }
  v26 = 0;
  v8 = v27;
  if ( src[v25] != 10 )
    goto LABEL_38;
  if ( v27 )
  {
    v34 = 0;
    v35 = v106;
    do
    {
      v101 = v8;
      v36 = *v35;
      v91 = 16 * v34;
      v37 = v36 - 48;
      v38 = v36 - 48;
      v39 = (v36 | 0x20) - 87;
      if ( v38 < 0xAu )
        v39 = v37;
      ++v35;
      v34 = v91 + v39;
      v8 = v101 - 1;
    }
    while ( v101 != 1 );
    v106[0] = 0;
    v99 = v34;
    if ( v34 )
    {
      v12 = v86;
      ++v25;
      v8 = 0;
      goto LABEL_66;
    }
  }
  else
  {
    v106[0] = 0;
  }
  v3 = size;
  v89 = ptr;
  v90 = v92;
end_of_stream:
  free(v5);
  *v3 = v90;
  if ( v90 )
    return v89;
  free(v89);
  return 0;
}
