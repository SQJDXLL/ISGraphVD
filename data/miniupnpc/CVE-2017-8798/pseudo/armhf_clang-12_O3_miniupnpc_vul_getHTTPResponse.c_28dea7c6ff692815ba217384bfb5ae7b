void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v4; // r0
  char *v5; // r9
  char *v6; // r0
  int v7; // r2
  signed int v8; // r12
  int v9; // r10
  unsigned int v10; // r7
  int v11; // r4
  int v12; // r0
  signed int v13; // r8
  int v14; // r6
  char *v15; // r5
  int v16; // r1
  int v17; // r2
  int v18; // r2
  int *v19; // r3
  int v20; // r12
  int v21; // r7
  int v22; // r5
  int v23; // lr
  int v24; // r1
  int v25; // r0
  int v26; // r8
  int v27; // r2
  int v28; // r2
  int v29; // r1
  bool v30; // zf
  bool v31; // zf
  bool v32; // cc
  const char *v33; // r5
  int v34; // r11
  int v35; // r0
  const char *v36; // r11
  int v37; // r0
  int v38; // r0
  bool v39; // zf
  int v40; // r6
  int v41; // r3
  int v42; // r1
  int v43; // r7
  int v44; // r11
  int v45; // r2
  int v46; // r2
  int v47; // r1
  bool v48; // zf
  bool v49; // zf
  bool v50; // cc
  const char *v51; // r0
  size_t v52; // r7
  int v53; // r0
  int v54; // r0
  bool v55; // zf
  signed int v56; // r6
  const unsigned __int16 *v57; // r0
  int v58; // r1
  int v59; // r0
  int v60; // r1
  bool v61; // zf
  char *v62; // r0
  int v63; // r1
  int v64; // t1
  int v65; // r2
  size_t v66; // r7
  int v67; // r2
  size_t v68; // r1
  char *v69; // r3
  int v70; // r2
  size_t v71; // r1
  size_t v72; // r5
  char *v73; // r0
  char *v74; // r8
  bool v75; // cc
  char *v77; // r0
  int v78; // [sp+10h] [bp-880h]
  size_t v79; // [sp+14h] [bp-87Ch]
  const char *v80; // [sp+14h] [bp-87Ch]
  int *v81; // [sp+18h] [bp-878h]
  int *v82; // [sp+18h] [bp-878h]
  unsigned int v83; // [sp+20h] [bp-870h]
  int v84; // [sp+24h] [bp-86Ch]
  int v85; // [sp+28h] [bp-868h]
  unsigned int v86; // [sp+2Ch] [bp-864h]
  unsigned int v87; // [sp+2Ch] [bp-864h]
  signed int v88; // [sp+30h] [bp-860h]
  signed int v89; // [sp+30h] [bp-860h]
  int v90; // [sp+34h] [bp-85Ch]
  char *ptr; // [sp+38h] [bp-858h]
  int v92; // [sp+3Ch] [bp-854h]
  unsigned int v95; // [sp+48h] [bp-848h]
  char v96[32]; // [sp+4Ch] [bp-844h] BYREF
  char src[2084]; // [sp+6Ch] [bp-824h] BYREF

  if ( status_code )
    *status_code = -1;
  v4 = (char *)malloc(0x800u);
  if ( !v4 )
    goto LABEL_191;
  v5 = v4;
  v95 = 2048;
  v6 = (char *)malloc(0x800u);
  if ( !v6 )
    goto LABEL_189;
  ptr = v6;
  v7 = -1;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v96[0] = 0;
  v84 = 0;
  v83 = 2048;
  v92 = 0;
  do
  {
    v90 = v7;
    v86 = v10;
    v88 = v8;
    v12 = receivedata(s, src, 2048, 5000, 0);
    if ( v12 < 1 )
      break;
    v13 = v12;
    v14 = v9;
    v15 = v5;
    while ( 1 )
    {
      if ( v11 )
      {
        v9 = v14;
        v5 = v15;
        goto LABEL_125;
      }
      v9 = v13 + v14;
      if ( v13 + v14 <= v95 )
      {
        v5 = v15;
      }
      else
      {
        v5 = (char *)realloc(v15, v13 + v14);
        v95 = v13 + v14;
        if ( !v5 )
        {
          free(v15);
          v77 = ptr;
LABEL_190:
          free(v77);
LABEL_191:
          *size = -1;
          return 0;
        }
      }
      memcpy(&v5[v14], src, v13);
      if ( v9 >= 2 )
        break;
LABEL_9:
      v11 = 0;
      v13 = receivedata(s, src, 2048, 5000, 0);
      v14 = v9;
      v15 = v5;
      if ( v13 <= 0 )
        goto end_of_stream;
    }
    v16 = 0;
    do
    {
      v17 = (unsigned __int8)v5[v16];
      if ( v17 == 10 )
      {
        v18 = v16 + 1;
        v11 = 0;
        if ( v5[v16 + 1] == 10 )
          v11 = v16 + 2;
      }
      else
      {
        if ( v17 != 13 )
        {
          v18 = v16;
LABEL_30:
          v11 = 0;
          goto LABEL_31;
        }
        v18 = v16 + 1;
        v11 = 0;
        if ( v5[v16 + 1] == 10 )
        {
          v18 = v16 + 2;
          if ( v16 + 2 >= v9 )
            goto LABEL_30;
          v11 = 0;
          if ( v5[v18] == 13 )
          {
            v18 = v16 + 3;
            if ( v16 + 3 >= v9 )
              goto LABEL_30;
            v11 = 0;
            if ( v5[v18] == 10 )
              v11 = v16 + 4;
          }
        }
      }
LABEL_31:
      v16 = v18 + 1;
    }
    while ( v18 + 1 < v9 - 1 && !v11 );
    if ( !v11 )
      goto LABEL_9;
    v81 = size;
    if ( v11 >= 2 )
    {
      v19 = status_code;
      v20 = v11 - 1;
      if ( status_code )
      {
        v21 = v13 + v14;
        v22 = v11 - 1;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while ( 1 )
        {
          v27 = (unsigned __int8)v5[v26];
          if ( v25 >= 1 && v24 <= v25 && v27 == 58 )
          {
            v28 = v26;
            if ( v26 < v20 )
            {
              while ( 1 )
              {
                v29 = (unsigned __int8)v5[v28 + 1];
                v30 = v29 == 32;
                if ( v29 != 32 )
                  v30 = v29 == 9;
                if ( !v30 )
                  break;
                if ( v22 == ++v28 )
                {
                  v28 = v20;
                  break;
                }
              }
            }
            v23 = v28 + 1;
          }
          else
          {
            v31 = v27 == 13;
            if ( v27 != 13 )
              v31 = v27 == 10;
            if ( !v31 )
            {
              v28 = v26;
              goto LABEL_40;
            }
            if ( v25 )
            {
              v32 = v24 <= v25;
              if ( v24 > v25 )
                v32 = v23 <= v24;
              if ( v32 )
              {
                v23 = 0;
                if ( v26 < v9 )
                  goto LABEL_77;
              }
              else
              {
                v36 = &v5[v25];
                v79 = v24 - v25;
                if ( !strncasecmp(&v5[v25], "content-length", v24 - v25) )
                {
                  v90 = strtol(&v5[v23], 0u, 10);
                }
                else if ( !strncasecmp(v36, "transfer-encoding", v79) )
                {
                  v30 = strncasecmp(&v5[v23], "chunked", 7u) == 0;
                  v37 = v84;
                  if ( v30 )
                    v37 = 1;
                  v84 = v37;
                }
                v19 = status_code;
                v20 = v11 - 1;
                v23 = 0;
                if ( v26 < v9 )
                {
                  while ( 1 )
                  {
LABEL_77:
                    v38 = (unsigned __int8)v5[v26];
                    v39 = v38 == 13;
                    if ( v38 != 13 )
                      v39 = v38 == 10;
                    if ( !v39 )
                      break;
                    if ( v21 == ++v26 )
                    {
                      v28 = v9;
                      v25 = v9;
                      v24 = v9;
                      goto LABEL_40;
                    }
                  }
                }
              }
            }
            else
            {
              v33 = v5 + 1;
              v34 = v26;
              if ( v26 >= 1 )
              {
                do
                {
                  if ( *(v33 - 1) == 32 )
                  {
                    if ( *v19 >= 0 )
                      break;
                    v35 = strtol(v33, 0u, 10);
                    v19 = status_code;
                    v20 = v11 - 1;
                    *status_code = v35;
                  }
                  ++v33;
                  --v34;
                }
                while ( v34 );
              }
              v22 = v11 - 1;
              v23 = 0;
              if ( v26 < v9 )
                goto LABEL_77;
            }
            v28 = v26;
            v25 = v26;
          }
          v24 = v26;
LABEL_40:
          v26 = v28 + 1;
          if ( v28 + 1 >= v20 )
            goto LABEL_124;
        }
      }
      v40 = v13 + v14;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      while ( 2 )
      {
        v45 = (unsigned __int8)v5[v44];
        if ( v43 >= 1 && v42 <= v43 && v45 == 58 )
        {
          v46 = v44;
          if ( v44 < v20 )
          {
            v46 = v44;
            while ( 1 )
            {
              v47 = (unsigned __int8)v5[v46 + 1];
              v48 = v47 == 32;
              if ( v47 != 32 )
                v48 = v47 == 9;
              if ( !v48 )
                break;
              if ( v11 - 1 == ++v46 )
              {
                v46 = v20;
                break;
              }
            }
          }
          v41 = v46 + 1;
          goto LABEL_86;
        }
        v49 = v45 == 13;
        if ( v45 != 13 )
          v49 = v45 == 10;
        if ( v49 )
        {
          v50 = v42 <= v43;
          if ( v42 > v43 )
            v50 = v41 <= v42;
          if ( v50 )
          {
            v41 = 0;
            if ( v44 < v9 )
              goto LABEL_117;
          }
          else
          {
            v51 = &v5[v43];
            v78 = v41;
            v80 = &v5[v43];
            v52 = v42 - v43;
            if ( !strncasecmp(v51, "content-length", v52) )
            {
              v90 = strtol(&v5[v78], 0u, 10);
              v20 = v11 - 1;
              v41 = 0;
              if ( v44 < v9 )
                goto LABEL_117;
            }
            else
            {
              if ( !strncasecmp(v80, "transfer-encoding", v52) )
              {
                v30 = strncasecmp(&v5[v78], "chunked", 7u) == 0;
                v53 = v84;
                if ( v30 )
                  v53 = 1;
                v84 = v53;
              }
              v20 = v11 - 1;
              v41 = 0;
              if ( v44 < v9 )
              {
                while ( 1 )
                {
LABEL_117:
                  v54 = (unsigned __int8)v5[v44];
                  v55 = v54 == 13;
                  if ( v54 != 13 )
                    v55 = v54 == 10;
                  if ( !v55 )
                    break;
                  if ( v40 == ++v44 )
                  {
                    v46 = v9;
                    v43 = v9;
                    v42 = v9;
                    goto LABEL_87;
                  }
                }
              }
            }
          }
          v46 = v44;
          v43 = v44;
LABEL_86:
          v42 = v44;
        }
        else
        {
          v46 = v44;
        }
LABEL_87:
        v44 = v46 + 1;
        if ( v46 + 1 >= v20 )
          break;
        continue;
      }
    }
LABEL_124:
    v13 = v9 - v11;
    memcpy(src, &v5[v11], v9 - v11);
    size = v81;
LABEL_125:
    v8 = v88;
    v10 = v86;
    if ( !v84 )
    {
      v70 = v92;
      v71 = v90;
      v72 = v13;
      if ( v13 + v92 > v90 )
        v72 = v90 - v92;
      if ( v90 <= 0 )
        v72 = v13;
      if ( v72 + v92 <= v83 )
      {
        v74 = ptr;
      }
      else
      {
        if ( v90 < (int)(v72 + v92) )
          v71 = v72 + v92;
        v83 = v71;
        v73 = (char *)realloc(ptr, v71);
        v70 = v92;
        v74 = v73;
        if ( !v73 )
        {
          free(ptr);
LABEL_189:
          v77 = v5;
          goto LABEL_190;
        }
      }
      memcpy(&v74[v70], src, v72);
      v8 = v88;
      v10 = v86;
      ptr = v74;
      v92 += v72;
      goto LABEL_183;
    }
    if ( v13 < 1 )
      goto LABEL_183;
    v56 = 0;
    v82 = size;
    do
    {
      v85 = v92;
      do
      {
        if ( v8 )
          goto LABEL_160;
        if ( !v10 )
        {
          if ( src[v56] == 13 )
            ++v56;
          if ( v56 < v13 && src[v56] == 10 )
            ++v56;
        }
        if ( v56 < v13 )
        {
          v57 = *_ctype_b_loc();
          while ( v10 <= 0x1E )
          {
            v58 = (unsigned __int8)src[v56];
            if ( (v57[v58] & 0x1000) == 0 )
              break;
            v8 = 0;
            ++v56;
            v96[v10] = v58;
            v96[++v10] = 0;
            if ( v13 == v56 )
              goto LABEL_182;
          }
        }
        if ( v56 < v13 )
        {
          v59 = -v56;
          while ( 1 )
          {
            v60 = (unsigned __int8)src[-v59];
            v61 = v60 == 10;
            if ( v60 != 10 )
              v61 = v60 == 13;
            if ( v61 )
              break;
            if ( -v13 == --v59 )
              goto LABEL_181;
          }
          v56 = (v60 == 0xD) - v59;
        }
        if ( v56 >= v13 )
        {
LABEL_181:
          v8 = 0;
LABEL_182:
          size = v82;
          goto LABEL_183;
        }
        v8 = 0;
      }
      while ( src[v56] != 10 );
      if ( !v10 )
      {
        v96[0] = 0;
LABEL_194:
        size = v82;
        goto end_of_stream;
      }
      v62 = v96;
      v8 = 0;
      do
      {
        v64 = (unsigned __int8)*v62++;
        v63 = v64;
        v65 = 16 * v8 - 87;
        if ( (unsigned int)(v64 - 0x30) < 0xA )
          v65 = 16 * v8 - 48;
        else
          v63 |= 0x20u;
        --v10;
        v8 = v65 + v63;
      }
      while ( v10 );
      v10 = 0;
      v96[0] = 0;
      if ( !v8 )
        goto LABEL_194;
      ++v56;
LABEL_160:
      v87 = v10;
      v66 = v13 - v56;
      v89 = v8;
      if ( v8 < v13 - v56 )
        v66 = v8;
      v67 = v66 + v92;
      v92 += v66;
      if ( v66 + v85 <= v83 )
      {
        v69 = ptr;
      }
      else
      {
        v68 = v90;
        if ( v90 < v67 )
          v68 = v67;
        v83 = v68;
        v69 = (char *)realloc(ptr, v68);
        if ( !v69 )
        {
          free(ptr);
          free(v5);
          *v82 = -1;
          return 0;
        }
      }
      ptr = v69;
      memcpy(&v69[v85], &src[v56], v66);
      v56 += v66;
      size = v82;
      v8 = v89 - v66;
      v10 = v87;
    }
    while ( v56 < v13 );
LABEL_183:
    v7 = v90;
    v75 = v90 < 1;
    if ( v90 >= 1 )
      v75 = v92 < v90;
  }
  while ( v75 );
end_of_stream:
  free(v5);
  *size = v92;
  if ( v92 )
    return ptr;
  free(ptr);
  return 0;
}
