char *__cdecl getHTTPResponse(int s, int *size, int *status_code)
{
  void *v3; // eax
  void *v4; // edi
  char *v5; // eax
  int v6; // esi
  int v7; // ecx
  unsigned int v8; // ebp
  int v9; // edi
  int v10; // ebx
  int v11; // esi
  int v12; // eax
  size_t v13; // edx
  unsigned int v14; // ecx
  int v15; // ebx
  int v16; // esi
  char *v17; // eax
  int v18; // eax
  bool v19; // dl
  int v20; // ecx
  char v21; // dl
  int v22; // edx
  bool v23; // zf
  int v24; // ebx
  char *v25; // esi
  int v26; // ebx
  char *v27; // ecx
  char *v28; // eax
  int v29; // edx
  char v30; // cl
  char *v31; // ecx
  char v32; // al
  size_t v33; // ebx
  int v34; // eax
  int v35; // ecx
  const char *v36; // esi
  int *v37; // edx
  char *v38; // ebx
  int v39; // eax
  char v40; // al
  int v41; // esi
  int v42; // eax
  int v43; // edx
  int v44; // ebx
  int v45; // ecx
  char v46; // cl
  char v47; // al
  int v48; // eax
  int v49; // ecx
  char v50; // al
  signed int v51; // edx
  char *v52; // eax
  signed int v53; // ebx
  const unsigned __int16 **v54; // eax
  const unsigned __int16 *v55; // eax
  int v56; // ecx
  char v57; // al
  char *v58; // eax
  int v59; // esi
  int v60; // ecx
  int v61; // esi
  unsigned __int8 v62; // dl
  int v63; // ecx
  size_t v64; // esi
  size_t v65; // eax
  char *v66; // eax
  size_t v67; // esi
  size_t v68; // eax
  char *v69; // ebx
  char *ptr; // [esp+4h] [ebp-868h]
  int v72; // [esp+8h] [ebp-864h]
  char *v73; // [esp+Ch] [ebp-860h]
  signed int v74; // [esp+10h] [ebp-85Ch]
  size_t v75; // [esp+10h] [ebp-85Ch]
  size_t v76; // [esp+10h] [ebp-85Ch]
  size_t v77; // [esp+10h] [ebp-85Ch]
  char *v78; // [esp+14h] [ebp-858h]
  char *v79; // [esp+14h] [ebp-858h]
  char *v80; // [esp+14h] [ebp-858h]
  int v81; // [esp+18h] [ebp-854h]
  char *s1; // [esp+1Ch] [ebp-850h]
  char *s1a; // [esp+1Ch] [ebp-850h]
  char *s1b; // [esp+1Ch] [ebp-850h]
  int v85; // [esp+20h] [ebp-84Ch]
  int v86; // [esp+24h] [ebp-848h]
  unsigned int v87; // [esp+28h] [ebp-844h]
  int v88; // [esp+2Ch] [ebp-840h]
  size_t v89; // [esp+30h] [ebp-83Ch]
  size_t v90; // [esp+30h] [ebp-83Ch]
  unsigned int v91; // [esp+34h] [ebp-838h]
  char v92[32]; // [esp+3Ch] [ebp-830h] BYREF
  char src[2064]; // [esp+5Ch] [ebp-810h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = malloc(0x800u);
  if ( !v3 )
  {
    *size = -1;
    return 0;
  }
  v4 = v3;
  v5 = (char *)malloc(0x800u);
  if ( !v5 )
  {
    free(v4);
    *size = -1;
    return 0;
  }
  ptr = (char *)v4;
  v6 = -1;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v73 = v5;
  v92[0] = 0;
  v91 = 2048;
  v88 = 0;
  v72 = 0;
  v87 = 2048;
  v81 = 0;
LABEL_6:
  while ( 1 )
  {
    v10 = v9;
    v89 = v7;
    v85 = v6;
    do
    {
      v11 = v72;
      v12 = receivedata(s, src, 2048, 5000, 0);
      if ( v12 <= 0 )
        goto end_of_stream;
      v13 = v12;
      v74 = v12;
      if ( v10 )
      {
        v9 = v10;
        v24 = v72;
        goto LABEL_109;
      }
      v14 = v91;
      v15 = v12 + v72;
      if ( v12 + v72 <= v91 )
      {
        v17 = ptr;
      }
      else
      {
        v16 = v12;
        v17 = (char *)realloc(ptr, v12 + v72);
        v13 = v16;
        v11 = v72;
        v14 = v15;
        if ( !v17 )
        {
          free(ptr);
          free(v73);
          goto LABEL_166;
        }
      }
      ptr = v17;
      v91 = v14;
      memcpy(&v17[v11], src, v13);
      v18 = v15;
      v10 = 0;
      v19 = 1;
      v9 = 0;
      v72 = v18;
      if ( v18 >= 2 )
      {
        v20 = 0;
        while ( 1 )
        {
          v21 = ptr[v20];
          if ( v21 == 10 )
          {
            v9 = v20 + 2;
            v23 = ptr[v20 + 1] == 10;
            v22 = v20 + 1;
LABEL_24:
            if ( !v23 )
              v9 = 0;
            goto LABEL_30;
          }
          if ( v21 != 13 )
            goto LABEL_28;
          if ( ptr[v20 + 1] != 10 )
            break;
          v22 = v20 + 2;
          if ( v20 + 2 < v18 )
          {
            v9 = 0;
            if ( ptr[v22] != 13 )
              goto LABEL_30;
            v22 = v20 + 3;
            if ( v20 + 3 < v18 )
            {
              v23 = ptr[v20 + 3] == 10;
              v9 = v20 + 4;
              goto LABEL_24;
            }
          }
LABEL_29:
          v9 = 0;
LABEL_30:
          v20 = v22 + 1;
          v19 = v9 == 0;
          if ( v20 >= v18 - 1 || v9 )
            goto LABEL_7;
        }
        ++v20;
LABEL_28:
        v22 = v20;
        goto LABEL_29;
      }
LABEL_7:
      ;
    }
    while ( v19 );
    if ( v9 >= 2 )
    {
      v86 = v9 - 1;
      if ( status_code )
      {
        v75 = v11 + v74;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while ( 1 )
        {
          v29 = v26;
          v78 = v27;
          v30 = v27[(_DWORD)ptr];
          if ( v30 == 58 && v26 > 0 && (int)v28 <= v26 )
          {
            v31 = v78;
            if ( (int)v78 >= v86 )
            {
              v25 = v78 + 1;
              v28 = v78;
            }
            else
            {
              v25 = v78 + 1;
              do
              {
                v32 = v25[(_DWORD)ptr];
                if ( v32 != 9 && v32 != 32 )
                {
                  v28 = v78;
                  v31 = v25 - 1;
                  goto LABEL_38;
                }
                ++v25;
              }
              while ( (char *)v9 != v25 );
              v28 = v78;
              v31 = (char *)(v9 - 1);
              v25 = (char *)v9;
            }
            goto LABEL_38;
          }
          if ( v30 == 13 || v30 == 10 )
            break;
          v31 = v78;
LABEL_38:
          v27 = v31 + 1;
          if ( (int)v27 >= v86 )
            goto LABEL_108;
        }
        if ( v26 )
        {
          v33 = (size_t)&v28[-v26];
          v31 = v78;
          if ( (int)v28 > v29 && (int)v25 > (int)v28 )
          {
            s1 = &ptr[v29];
            if ( !strncasecmp(&ptr[v29], "content-length", v33) )
            {
              v85 = strtol(&v25[(_DWORD)ptr], 0, 10);
            }
            else if ( !strncasecmp(s1, "transfer-encoding", v33) )
            {
              v34 = strncasecmp(&v25[(_DWORD)ptr], "chunked", 7u);
              v35 = v88;
              if ( !v34 )
                v35 = 1;
              v88 = v35;
            }
            v26 = v72;
            v31 = v78;
            v25 = 0;
            if ( (int)v78 < v72 )
            {
LABEL_72:
              while ( 1 )
              {
                v40 = v31[(_DWORD)ptr];
                if ( v40 != 13 && v40 != 10 )
                  break;
                if ( (char *)v75 == ++v31 )
                {
                  v31 = (char *)v26;
                  v28 = (char *)v26;
                  goto LABEL_38;
                }
              }
            }
            goto LABEL_74;
          }
        }
        else
        {
          v31 = v78;
          v36 = ptr + 1;
          v37 = status_code;
          v38 = v78;
          if ( (int)v78 > 0 )
          {
            do
            {
              if ( *(v36 - 1) == 32 )
              {
                if ( *v37 >= 0 )
                  break;
                v39 = strtol(v36, 0, 10);
                v31 = v78;
                v37 = status_code;
                *status_code = v39;
              }
              ++v36;
              --v38;
            }
            while ( v38 );
          }
        }
        v26 = v72;
        v25 = 0;
        if ( (int)v31 < v72 )
          goto LABEL_72;
LABEL_74:
        v28 = v31;
        v26 = (int)v31;
        goto LABEL_38;
      }
      v76 = v11 + v74;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      do
      {
        v46 = ptr[v44];
        if ( v46 == 58 && v43 > 0 && v42 <= v43 )
        {
          if ( v44 >= v86 )
          {
            v41 = v44 + 1;
            v45 = v44;
          }
          else
          {
            v41 = v44 + 1;
            do
            {
              v47 = ptr[v41];
              if ( v47 != 32 && v47 != 9 )
              {
                v45 = v41 - 1;
                goto LABEL_78;
              }
              ++v41;
            }
            while ( v9 != v41 );
            v45 = v9 - 1;
            v41 = v9;
          }
        }
        else if ( v46 == 13 || v46 == 10 )
        {
          if ( v42 > v43 && v41 > v42 )
          {
            v79 = &ptr[v43];
            s1a = (char *)(v42 - v43);
            if ( !strncasecmp(&ptr[v43], "content-length", v42 - v43) )
            {
              v85 = strtol(&ptr[v41], 0, 10);
            }
            else if ( !strncasecmp(v79, "transfer-encoding", (size_t)s1a) )
            {
              v48 = strncasecmp(&ptr[v41], "chunked", 7u);
              v49 = v88;
              if ( !v48 )
                v49 = 1;
              v88 = v49;
            }
          }
          v41 = 0;
          if ( v44 < v72 )
          {
            while ( 1 )
            {
              v50 = ptr[v44];
              if ( v50 != 13 && v50 != 10 )
                break;
              if ( v76 == ++v44 )
              {
                v44 = v72;
                break;
              }
            }
          }
          v45 = v44;
          v43 = v44;
        }
        else
        {
          v45 = v44;
          v44 = v42;
        }
LABEL_78:
        v42 = v44;
        v44 = v45 + 1;
      }
      while ( v45 + 1 < v86 );
    }
LABEL_108:
    v24 = v72;
    v74 = v72 - v9;
    memcpy(src, &ptr[v9], v72 - v9);
LABEL_109:
    v6 = v85;
    v72 = v24;
    if ( v88 )
      break;
    v67 = v85 - v81;
    if ( v74 + v81 <= v85 )
      v67 = v74;
    if ( v85 <= 0 )
      v67 = v74;
    v77 = v67 + v81;
    if ( v67 + v81 <= v87 )
    {
      v69 = v73;
    }
    else
    {
      v68 = v85;
      if ( v85 < (int)(v67 + v81) )
        v68 = v67 + v81;
      v87 = v68;
      v69 = (char *)realloc(v73, v68);
      if ( !v69 )
      {
LABEL_167:
        free(v73);
        free(ptr);
LABEL_166:
        *size = -1;
        return 0;
      }
    }
    memcpy(&v69[v81], src, v67);
    v6 = v85;
    v73 = v69;
    v81 = v77;
LABEL_161:
    v7 = v89;
    if ( v6 > 0 )
    {
LABEL_162:
      if ( v81 >= v6 )
        goto end_of_stream;
    }
  }
  v51 = v74;
  if ( v74 <= 0 )
    goto LABEL_161;
  v52 = v73;
  v7 = v89;
  v53 = 0;
  while ( 2 )
  {
    v73 = v52;
    s1b = (char *)v81;
    do
    {
      if ( v7 )
        goto LABEL_138;
      if ( !v8 )
      {
        v53 += src[v53] == 13;
        if ( v53 < v51 )
          v53 += src[v53] == 10;
      }
      if ( v53 < v51 )
      {
        v54 = _ctype_b_loc();
        v51 = v74;
        v55 = *v54;
        while ( 1 )
        {
          if ( v8 > 0x1E )
            goto LABEL_124;
          v56 = src[v53];
          if ( (v55[v56] & 0x1000) == 0 )
            break;
          v51 = v74;
          ++v53;
          v92[v8] = v56;
          v92[++v8] = 0;
          if ( v74 == v53 )
          {
            v53 = v74;
            goto LABEL_124;
          }
        }
        v51 = v74;
      }
LABEL_124:
      while ( v53 < v51 )
      {
        v57 = src[v53++];
        if ( v57 == 13 || v57 == 10 )
        {
          if ( v57 != 13 )
            --v53;
          break;
        }
      }
      v7 = 0;
      if ( v53 >= v51 )
        goto LABEL_157;
    }
    while ( src[v53] != 10 );
    if ( !v8 )
    {
      v92[0] = 0;
      break;
    }
    v7 = 0;
    v58 = v92;
    do
    {
      v59 = v7;
      v60 = *v58;
      v61 = 16 * v59;
      v62 = v60 - 48;
      v80 = (char *)(v60 - 48);
      v63 = (v60 | 0x20) - 87;
      if ( v62 < 0xAu )
        v63 = (int)v80;
      ++v58;
      v7 = v61 + v63;
      --v8;
    }
    while ( v8 );
    v92[0] = 0;
    if ( v7 )
    {
      v51 = v74;
      ++v53;
      v8 = 0;
LABEL_138:
      v90 = v7;
      v64 = v51 - v53;
      if ( v7 <= v51 - v53 )
        v64 = v7;
      v81 += v64;
      if ( (unsigned int)&s1b[v64] <= v87 )
      {
        v66 = v73;
      }
      else
      {
        v65 = v85;
        if ( v85 < (int)&s1b[v64] )
          v65 = (size_t)&s1b[v64];
        v87 = v65;
        v66 = (char *)realloc(v73, v65);
        if ( !v66 )
          goto LABEL_167;
      }
      v73 = v66;
      memcpy(&s1b[(_DWORD)v66], &src[v53], v64);
      v51 = v74;
      v53 += v64;
      v52 = v73;
      v7 = v90 - v64;
      v6 = v85;
      if ( v53 < v74 )
        continue;
LABEL_157:
      if ( v6 > 0 )
        goto LABEL_162;
      goto LABEL_6;
    }
    break;
  }
end_of_stream:
  free(ptr);
  *size = v81;
  if ( !v81 )
  {
    free(v73);
    return 0;
  }
  return v73;
}
