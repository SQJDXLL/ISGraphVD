void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // rax
  unsigned int v4; // ebx
  unsigned int v5; // r12d
  unsigned int v6; // ebp
  signed int v7; // r15d
  int v8; // r13d
  unsigned int v9; // ecx
  char *v10; // rax
  signed int v11; // ecx
  int v12; // esi
  int v13; // eax
  int v14; // r10d
  char v15; // dl
  char v16; // dl
  int v17; // edx
  char *v18; // r12
  __int64 v19; // rax
  int v20; // r14d
  int v21; // r15d
  int v22; // ebp
  int v23; // ebx
  __int64 v24; // r13
  char *v25; // r11
  char v26; // di
  __int64 v27; // rbp
  const char *v28; // r12
  const char *v29; // rdi
  bool v30; // zf
  unsigned int v31; // edx
  int v32; // ecx
  int v33; // r14d
  __int64 v34; // rdi
  int v35; // ecx
  char *v36; // r9
  int *v37; // r14
  int v38; // r14d
  __int64 v39; // r15
  int v40; // ebx
  int v41; // ebp
  int v42; // r11d
  unsigned int v43; // r13d
  unsigned int v44; // eax
  char *v45; // rax
  __int64 v46; // rdx
  __int64 v47; // rsi
  int v48; // r13d
  __int64 v49; // rbp
  const unsigned __int16 *v50; // r8
  unsigned int v51; // edi
  char *v52; // rdx
  __int64 v53; // rcx
  char *v54; // rax
  char v55; // al
  char *v56; // rdx
  int v57; // r8d
  char *v58; // rcx
  int v59; // eax
  int v60; // r8d
  char *v61; // rax
  size_t v62; // rdx
  const char *v63; // rdi
  int v64; // eax
  int v65; // eax
  int v66; // eax
  char v67; // dl
  int v68; // eax
  char *content_buf; // [rsp+8h] [rbp-8D0h]
  char *header_buf; // [rsp+10h] [rbp-8C8h]
  int header_bufa; // [rsp+10h] [rbp-8C8h]
  unsigned int content_buf_len; // [rsp+1Ch] [rbp-8BCh]
  int chunked; // [rsp+20h] [rbp-8B8h]
  unsigned int chunkeda; // [rsp+20h] [rbp-8B8h]
  int content_length; // [rsp+24h] [rbp-8B4h]
  char *ptr; // [rsp+28h] [rbp-8B0h]
  unsigned int content_buf_used; // [rsp+30h] [rbp-8A8h]
  unsigned int content_buf_useda; // [rsp+30h] [rbp-8A8h]
  signed int header_buf_used_0; // [rsp+34h] [rbp-8A4h]
  unsigned int header_buf_used_0a; // [rsp+34h] [rbp-8A4h]
  unsigned int header_buf_used_0c; // [rsp+34h] [rbp-8A4h]
  unsigned int header_buf_used_0b; // [rsp+34h] [rbp-8A4h]
  unsigned int header_buf_len; // [rsp+3Ch] [rbp-89Ch]
  unsigned int chunksize; // [rsp+40h] [rbp-898h]
  unsigned int chunksize_buf_index; // [rsp+44h] [rbp-894h]
  size_t v88; // [rsp+50h] [rbp-888h]
  size_t v89; // [rsp+50h] [rbp-888h]
  char *v90; // [rsp+58h] [rbp-880h]
  char chunksize_buf[32]; // [rsp+70h] [rbp-868h] BYREF
  char buf[2048]; // [rsp+90h] [rbp-848h] BYREF
  unsigned __int64 v95; // [rsp+898h] [rbp-40h]

  v95 = __readfsqword(0x28u);
  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800uLL);
  if ( !v3 )
    goto LABEL_147;
  header_buf = v3;
  content_buf = (char *)malloc(0x800uLL);
  if ( !content_buf )
  {
    free(header_buf);
LABEL_147:
    *size = -1;
    return 0LL;
  }
  chunksize_buf[0] = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  content_buf_len = 2048;
  v7 = 0;
  content_buf_used = 0;
  header_buf_len = 2048;
  content_length = -1;
  chunked = 0;
  ptr = header_buf;
  while ( 1 )
  {
    while ( 1 )
    {
LABEL_6:
      v8 = receivedata((unsigned int)s, buf, 2048LL, 5000LL, 0LL);
      if ( v8 <= 0 )
      {
LABEL_138:
        v36 = ptr;
        v37 = size;
        v35 = v5;
end_of_stream:
        header_bufa = v35;
        free(v36);
        *v37 = header_bufa;
        if ( !v5 )
        {
          free(content_buf);
          return 0LL;
        }
        return content_buf;
      }
      if ( v7 )
      {
        if ( chunked )
          goto LABEL_64;
LABEL_46:
        v31 = v8 + v5;
        v32 = v8 + v5;
        if ( content_length <= 0 )
        {
          if ( content_buf_len < v31 )
          {
            if ( content_length < (int)v31 )
            {
              v33 = v8 + v5;
              goto LABEL_111;
            }
LABEL_115:
            v33 = v8 + v5;
            v31 = content_length;
            goto LABEL_111;
          }
        }
        else
        {
          if ( content_length < (int)v31 )
          {
            v32 = content_length;
            v33 = content_length;
            v8 = content_length - v5;
            if ( content_buf_len >= content_length )
            {
LABEL_49:
              v34 = v5;
              header_buf_used_0c = v32;
              v5 = v33;
              memcpy(&content_buf[v34], buf, v8);
              chunked = 0;
              v35 = header_buf_used_0c;
              goto LABEL_50;
            }
            v33 = content_length;
            v31 = content_length;
LABEL_111:
            content_buf_len = v31;
            v61 = (char *)realloc(content_buf, v31);
            if ( !v61 )
              goto LABEL_144;
            content_buf = v61;
            v32 = v33;
            goto LABEL_49;
          }
          if ( content_buf_len < v31 )
            goto LABEL_115;
        }
        v33 = v8 + v5;
        goto LABEL_49;
      }
      v9 = v8 + content_buf_used;
      if ( header_buf_len < v8 + content_buf_used )
      {
        v10 = (char *)realloc(ptr, v9);
        v9 = v8 + content_buf_used;
        if ( !v10 )
        {
          free(ptr);
          free(content_buf);
          *size = -1;
          return 0LL;
        }
        header_buf_len = v8 + content_buf_used;
        ptr = v10;
      }
      header_buf_used_0 = v9;
      memcpy(&ptr[content_buf_used], buf, v8);
      v11 = header_buf_used_0;
      v12 = header_buf_used_0 - 1;
      if ( header_buf_used_0 > 1 )
        break;
      content_buf_used = header_buf_used_0;
    }
    v13 = 0;
    do
    {
      v14 = v13 + 1;
      v16 = ptr[v13];
      if ( v16 == 13 )
      {
        if ( ptr[v14] == 10 )
        {
          if ( v13 + 2 < header_buf_used_0 && ptr[v13 + 2] == 13 )
          {
            v14 = v13 + 3;
            if ( v13 + 3 < header_buf_used_0 && ptr[v14] == 10 )
            {
              v30 = v13 == -4;
              v13 += 4;
              v15 = v30;
              v7 = v13;
            }
            else
            {
              v13 += 4;
              v7 = 0;
              v14 = -1;
              v15 = 1;
            }
          }
          else
          {
            v13 += 3;
            v7 = 0;
            v14 = -1;
            v15 = 1;
          }
LABEL_15:
          if ( v12 <= v13 )
            break;
          continue;
        }
      }
      else
      {
        if ( v16 != 10 )
        {
          ++v13;
          v7 = 0;
          v14 = -1;
          v15 = 1;
          goto LABEL_15;
        }
        if ( ptr[v14] == 10 )
        {
          v30 = v13 == -2;
          v13 += 2;
          v15 = v30;
          v7 = v13;
          goto LABEL_15;
        }
      }
      v13 += 2;
      v7 = 0;
      v14 = -1;
      v15 = 1;
      if ( v12 <= v13 )
        break;
    }
    while ( v15 );
    if ( !v7 )
    {
      content_buf_used = header_buf_used_0;
      v7 = 0;
      goto LABEL_6;
    }
    if ( v14 <= 0 )
      goto LABEL_62;
    content_buf_useda = v5;
    v17 = 0;
    v18 = ptr;
    header_buf_used_0a = v7;
    v19 = 0LL;
    v20 = 0;
    v21 = v14;
    chunksize = v6;
    v22 = 0;
    chunksize_buf_index = v4;
    v23 = v11;
    while ( 2 )
    {
      while ( 2 )
      {
        LODWORD(v24) = v20 + 1;
        v25 = &v18[v20];
        v26 = *v25;
        if ( (int)v19 > 0 && (int)v19 >= v17 )
        {
          if ( v26 == 58 )
          {
            v24 = (int)v24;
            while ( 1 )
            {
              v22 = v24;
              if ( (int)v24 - 1 >= v21 )
                break;
              v67 = v18[v24++];
              if ( v67 != 32 && v67 != 9 )
              {
                v17 = v20;
                v20 = v22;
                goto LABEL_28;
              }
            }
            v17 = v20;
            v20 = v24;
LABEL_28:
            if ( v21 <= v20 )
              goto LABEL_61;
            continue;
          }
          if ( v26 != 10 && v26 != 13 )
          {
LABEL_27:
            ++v20;
            goto LABEL_28;
          }
LABEL_41:
          if ( v23 > v20 )
            goto LABEL_58;
          goto LABEL_42;
        }
        break;
      }
      if ( v26 != 13 && v26 != 10 )
        goto LABEL_27;
      if ( !(_DWORD)v19 && status_code )
      {
        if ( v20 <= 0 )
          goto LABEL_58;
        v27 = (__int64)&v18[v20 + 1];
        v88 = (size_t)v18;
        v28 = v18 + 1;
        v90 = v25;
        do
        {
          while ( *(v28 - 1) != 32 )
          {
            if ( (const char *)v27 == ++v28 )
              goto LABEL_40;
          }
          if ( *status_code >= 0 )
            break;
          v29 = v28++;
          *status_code = strtol(v29, 0LL, 10);
        }
        while ( (const char *)v27 != v28 );
LABEL_40:
        v18 = (char *)v88;
        v25 = v90;
        goto LABEL_41;
      }
      if ( (int)v19 >= v17 || v17 >= v22 )
        goto LABEL_41;
      v62 = v17 - (int)v19;
      v89 = (int)v62;
      v63 = &v18[v19];
      if ( !strncasecmp(&v18[v19], "content-length", v62) )
      {
        v68 = strtol(&v18[v22], 0LL, 10);
        v25 = &v18[v20];
        content_length = v68;
        if ( v23 > v20 )
          goto LABEL_58;
        goto LABEL_42;
      }
      v64 = strncasecmp(v63, "transfer-encoding", v89);
      v25 = &v18[v20];
      if ( v64 )
        goto LABEL_41;
      v65 = strncasecmp(&v18[v22], "chunked", 7uLL);
      v25 = &v18[v20];
      v30 = v65 == 0;
      v66 = 1;
      if ( !v30 )
        v66 = chunked;
      chunked = v66;
      if ( v23 <= v20 )
      {
LABEL_42:
        v22 = 0;
        v17 = v20;
        v19 = v20;
        goto LABEL_27;
      }
LABEL_58:
      while ( 1 )
      {
        v19 = v20;
        v20 = v24;
        if ( *v25 != 13 && *v25 != 10 )
          break;
        ++v25;
        if ( v23 == (_DWORD)v24 )
        {
          v20 = v19 + 2;
          v22 = 0;
          v17 = v23;
          v19 = v23;
          goto LABEL_28;
        }
        LODWORD(v24) = v24 + 1;
      }
      v22 = 0;
      v17 = v19;
      if ( v21 > (int)v24 )
        continue;
      break;
    }
LABEL_61:
    v11 = v23;
    v5 = content_buf_useda;
    v7 = header_buf_used_0a;
    v6 = chunksize;
    v4 = chunksize_buf_index;
LABEL_62:
    v8 = v11 - v7;
    content_buf_used = v11;
    memcpy(buf, &ptr[v7], v11 - v7);
    if ( !chunked )
      goto LABEL_46;
    v35 = v5;
    if ( v8 > 0 )
      break;
LABEL_50:
    if ( content_length > 0 && content_length <= v35 )
    {
      v36 = ptr;
      v37 = size;
      goto end_of_stream;
    }
  }
LABEL_64:
  header_buf_used_0b = v7;
  v38 = 0;
  v39 = v4;
  v40 = v6;
  v41 = v8;
  while ( 2 )
  {
    v46 = v5;
    if ( v40 )
      goto LABEL_65;
    v48 = v41;
    while ( 2 )
    {
      if ( (_DWORD)v39 )
        goto LABEL_102;
      if ( buf[v38] == 13 )
        ++v38;
      if ( v38 >= v48 )
        goto LABEL_104;
      v49 = v38;
      if ( buf[v38] == 10 )
      {
        ++v38;
LABEL_102:
        if ( v38 >= v48 )
          goto LABEL_104;
        v49 = v38;
      }
      v50 = *_ctype_b_loc();
      v51 = v48 + v39 - v38;
      v52 = &buf[v49];
      while ( 1 )
      {
        v53 = *v52;
        if ( (v50[v53] & 0x1000) == 0 || (unsigned int)v39 > 0x1E )
          break;
        chunksize_buf[v39] = v53;
        ++v38;
        ++v52;
        chunksize_buf[(unsigned int)(v39 + 1)] = 0;
        if ( (_DWORD)v39 + 1 == v51 )
        {
          v39 = v51;
          break;
        }
        v39 = (unsigned int)(v39 + 1);
      }
      if ( v38 >= v48 )
        goto LABEL_104;
      v54 = &buf[v38];
      while ( *v54 != 13 && *v54 != 10 )
      {
        ++v38;
        ++v54;
        if ( v38 == v48 )
          goto LABEL_104;
      }
      if ( v38 >= v48 )
        goto LABEL_104;
      v55 = buf[v38];
      if ( v55 == 13 )
      {
        if ( ++v38 >= v48 )
          goto LABEL_104;
        v55 = buf[v38];
      }
      if ( v55 != 10 )
        continue;
      break;
    }
    v41 = v48;
    if ( !(_DWORD)v39 )
      goto LABEL_138;
    v56 = chunksize_buf;
    v57 = 0;
    v58 = &chunksize_buf[(unsigned int)v39];
    do
    {
      while ( 1 )
      {
        v59 = *v56;
        v60 = 16 * v57;
        if ( (unsigned __int8)(*v56 - 48) > 9u )
          break;
        ++v56;
        v57 = v60 + v59 - 48;
        if ( v58 == v56 )
          goto LABEL_98;
      }
      ++v56;
      v57 = v60 + (char)(v59 | 0x20) - 87;
    }
    while ( v58 != v56 );
LABEL_98:
    chunksize_buf[0] = 0;
    ++v38;
    if ( !v57 )
      goto LABEL_138;
    v46 = v5;
    v39 = 0LL;
    v40 = v57;
LABEL_65:
    v42 = v41 - v38;
    if ( v41 - v38 > v40 )
      v42 = v40;
    v43 = v42;
    v5 += v42;
    if ( content_buf_len >= v5 )
    {
LABEL_72:
      v47 = v38;
      v38 += v43;
      v40 -= v43;
      memcpy(&content_buf[v46], &buf[v47], v43);
      if ( v38 < v41 )
        continue;
LABEL_104:
      v6 = v40;
      chunked = 1;
      v4 = v39;
      v35 = v5;
      v7 = header_buf_used_0b;
      goto LABEL_50;
    }
    break;
  }
  v44 = content_length;
  chunkeda = v46;
  if ( content_length < (int)v5 )
    v44 = v5;
  content_buf_len = v44;
  v45 = (char *)realloc(content_buf, v44);
  v46 = chunkeda;
  if ( v45 )
  {
    content_buf = v45;
    goto LABEL_72;
  }
LABEL_144:
  free(content_buf);
  free(ptr);
  *size = -1;
  return 0LL;
}
