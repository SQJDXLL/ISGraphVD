char *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // $s0
  char *v4; // $v0
  char *v5; // $a0
  char *v6; // $s1
  int v7; // $s3
  int v8; // $s2
  int v9; // $fp
  signed int v10; // $s5
  int v11; // $v0
  int v12; // $s6
  unsigned int v13; // $v0
  char *v14; // $v0
  int v15; // $v1
  signed int v16; // $v1
  int v17; // $a3
  int v18; // $a2
  int v19; // $v0
  int v20; // $s7
  signed int v21; // $s6
  int v22; // $a2
  int v23; // $v0
  int v24; // $a0
  signed int v25; // $a0
  int v26; // $a1
  const char *v27; // $a0
  _BOOL4 v28; // $a0
  _BOOL4 v29; // $a0
  int v30; // $v0
  const char *v31; // $a0
  int v32; // $v0
  int v33; // $v0
  int v34; // $v0
  int v35; // $v1
  signed int v36; // $a2
  char *v37; // $v0
  int v38; // $v0
  _BOOL4 v39; // $v0
  bool v40; // dc
  char *v41; // $a0
  const unsigned __int16 **v42; // $v0
  int v43; // $a1
  int v44; // $v0
  int v45; // $v0
  int v46; // $a1
  signed int v47; // $t0
  int v48; // $v0
  int v49; // $t0
  int v50; // $t0
  unsigned int v51; // $t1
  size_t v52; // $v1
  char *v53; // $v0
  unsigned int v54; // $v0
  size_t v55; // $v1
  char *v56; // $s6
  unsigned int chunksize_buf_index; // [sp+20h] [-868h]
  unsigned int content_buf_len; // [sp+24h] [-864h]
  unsigned int header_buf_used; // [sp+30h] [-858h]
  signed int header_buf_useda; // [sp+30h] [-858h]
  unsigned int chunksize; // [sp+34h] [-854h]
  unsigned int chunksizea; // [sp+34h] [-854h]
  unsigned int chunksizeb; // [sp+34h] [-854h]
  int chunked; // [sp+38h] [-850h]
  unsigned int header_buf_len; // [sp+3Ch] [-84Ch]
  char *v69; // [sp+40h] [-848h] BYREF
  _DWORD *v70; // [sp+44h] [-844h]
  char *v71; // [sp+48h] [-840h]
  char *v72; // [sp+4Ch] [-83Ch]
  void *(*v73)(int, int *, int *); // [sp+50h] [-838h]
  unsigned int chunksize_0; // [sp+54h] [-834h]
  unsigned int bytestocopy; // [sp+58h] [-830h]
  int valuestart; // [sp+5Ch] [-82Ch]
  char chunksize_buf[32]; // [sp+64h] [-824h] BYREF
  char buf[2048]; // [sp+84h] [-804h] BYREF
  int v79; // [sp+884h] [-4h]

  v70 = &_stack_chk_guard;
  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800u);
  if ( !v3 )
  {
    *size = -1;
    goto LABEL_5;
  }
  v4 = (char *)malloc(0x800u);
  if ( !v4 )
  {
LABEL_8:
    v5 = v3;
    goto LABEL_9;
  }
  v6 = v3;
  v3 = v4;
  content_buf_len = 2048;
  header_buf_len = 2048;
  chunksize_buf[0] = 0;
  v71 = "content-length";
  chunksize_buf_index = 0;
  v72 = "transfer-encoding";
  v7 = 0;
  header_buf_used = 0;
  chunksize = 0;
  v8 = -1;
  chunked = 0;
  v9 = 0;
  v73 = getHTTPResponse;
  do
  {
    do
    {
      v10 = receivedata(s, buf, 2048, 5000);
      if ( v10 <= 0 )
        goto end_of_stream;
      v11 = chunked;
      if ( v9 )
        goto LABEL_25;
      v12 = v10 + header_buf_used;
      v13 = header_buf_used;
      if ( header_buf_len < v10 + header_buf_used )
      {
        v14 = (char *)realloc(v6, v10 + header_buf_used);
        if ( !v14 )
        {
          free(v6);
          goto LABEL_8;
        }
        header_buf_len = v10 + header_buf_used;
        v6 = v14;
        v13 = header_buf_used;
      }
      memcpy(&v6[v13], buf, v10);
      v15 = 0;
      v9 = 0;
      while ( v15 < v12 - 1 )
      {
        if ( v9 )
        {
          v16 = v9 - 1;
          goto LABEL_22;
        }
        v22 = v6[v15];
        v23 = v15 + 1;
        if ( v22 == 13 )
        {
          if ( v6[v23] == 10 )
          {
            v23 = v15 + 2;
            if ( v15 + 2 < v12 && v6[v23] == 13 )
            {
              v23 = v15 + 3;
              if ( v15 + 3 < v12 && v6[v23] == 10 )
                v9 = v15 + 4;
            }
          }
        }
        else if ( v22 == 10 )
        {
          if ( v6[v23] == 10 )
            v9 = v15 + 2;
        }
        else
        {
          v23 = v15;
        }
        v15 = v23 + 1;
      }
      header_buf_used += v10;
    }
    while ( !v9 );
    v16 = v9 - 1;
LABEL_22:
    header_buf_useda = v16;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v69 = (char *)v73 + (__int16)"chunked";
    while ( v20 < header_buf_useda )
    {
      v24 = v6[v20];
      if ( v19 <= 0 )
      {
        if ( v24 != 13 && v24 != 10 )
          goto LABEL_49;
        if ( !v19 )
        {
          v27 = v6 + 1;
          if ( status_code )
          {
            while ( v27 - v6 - 1 < v20 )
            {
              if ( *(v27 - 1) == 32 )
              {
                if ( *status_code >= 0 )
                  goto LABEL_65;
                chunksize_0 = (unsigned int)v27;
                v32 = atoi(v27);
                v27 = (const char *)chunksize_0;
                *status_code = v32;
              }
              ++v27;
            }
            goto LABEL_65;
          }
        }
        v28 = v19 < v18;
      }
      else
      {
        if ( v19 < v18 )
        {
          if ( v24 == 13 )
          {
            v29 = v18 < v17;
LABEL_57:
            valuestart = v17;
            if ( v29 )
            {
              bytestocopy = v18 - v19;
              chunksize_0 = (unsigned int)&v6[v19];
              v30 = strncasecmp(&v6[v19], v71, v18 - v19);
              v31 = (const char *)chunksize_0;
              if ( v30 )
              {
                chunksize_0 = valuestart;
                if ( !strncasecmp(v31, v72, bytestocopy) )
                {
                  v34 = strncasecmp(&v6[chunksize_0], v69, 7u);
                  v35 = chunked;
                  if ( !v34 )
                    v35 = 1;
                  chunked = v35;
                }
              }
              else
              {
                v8 = atoi(&v6[valuestart]);
              }
            }
            goto LABEL_65;
          }
        }
        else
        {
          if ( v24 == 58 )
          {
            v25 = v20;
            do
            {
              v26 = v6[v25 + 1];
              if ( v26 != 32 && v26 != 9 )
                break;
              ++v25;
            }
            while ( v25 < header_buf_useda );
            v18 = v20;
            v17 = v25 + 1;
            v20 = v25;
            goto LABEL_49;
          }
          if ( v24 == 13 )
            goto LABEL_65;
        }
        v40 = v24 != 10;
        v28 = v19 < v18;
        if ( v40 )
          goto LABEL_49;
      }
      if ( v28 )
      {
        v29 = v18 < v17;
        goto LABEL_57;
      }
LABEL_65:
      while ( 1 )
      {
        v17 = 0;
        if ( v20 >= v12 )
          break;
        v33 = v6[v20];
        if ( v33 != 13 && v33 != 10 )
          break;
        ++v20;
      }
      v18 = v20;
      v19 = v20;
LABEL_49:
      ++v20;
    }
    v10 = v12 - v9;
    memcpy(buf, &v6[v9], v12 - v9);
    header_buf_used = v12;
    v11 = chunked;
LABEL_25:
    if ( v11 )
    {
      v21 = 0;
      v69 = chunksize_buf;
LABEL_110:
      v39 = v21 < v10;
      while ( 1 )
      {
LABEL_111:
        v47 = chunksize;
        if ( !v39 )
          goto LABEL_112;
        v36 = v10 - v21;
        if ( chunksize )
        {
LABEL_100:
          if ( v47 < v36 )
            v36 = v47;
          v51 = v7 + v36;
          if ( content_buf_len < v7 + v36 )
          {
            v52 = v8;
            if ( v8 < v7 + v36 )
              v52 = v7 + v36;
            bytestocopy = v36;
            chunksize_0 = v47;
            chunksizea = v7 + v36;
            content_buf_len = v52;
            v53 = (char *)realloc(v3, v52);
            v51 = chunksizea;
            v47 = chunksize_0;
            v36 = bytestocopy;
            if ( !v53 )
              goto LABEL_106;
            v3 = v53;
          }
          bytestocopy = v47;
          chunksize_0 = v51;
          chunksizeb = v36;
          memcpy(&v3[v7], &buf[v21], v36);
          v21 += chunksizeb;
          chunksize = bytestocopy - chunksizeb;
          v7 = chunksize_0;
          goto LABEL_110;
        }
        v37 = v69;
        if ( !chunksize_buf_index )
        {
          v38 = v21 + 0x848;
          if ( *((_BYTE *)&v69 + v21 + 0x44) == 13 )
          {
            v39 = ++v21 < v10;
            if ( v21 >= v10 )
              continue;
            v38 = v21 + 0x848;
          }
          v40 = *((_BYTE *)&v69 + v38 - 2052) != 10;
          v37 = v69;
          if ( !v40 )
            ++v21;
        }
        v41 = &v37[chunksize_buf_index];
        while ( 1 )
        {
          v39 = v21 < v10;
          chunksize_0 = (unsigned int)v41;
          if ( v21 >= v10 )
            break;
          v42 = _ctype_b_loc();
          v43 = buf[v21];
          if ( ((*v42)[v43] & 0x10) == 0 || (v41 = (char *)(chunksize_0 + 1), chunksize_buf_index >= 0x1F) )
          {
            while ( v21 < v10 )
            {
              v44 = buf[v21];
              if ( v44 == 13 || v44 == 10 )
              {
                v45 = v21 + 0x848;
                if ( *((_BYTE *)&v69 + v21 + 0x44) == 13 )
                {
                  v45 = ++v21 + 0x848;
                  if ( v21 >= v10 )
                    goto LABEL_110;
                }
                v40 = *((_BYTE *)&v69 + v45 - 2052) != 10;
                v39 = v21 < v10;
                if ( v40 )
                  goto LABEL_111;
                v46 = 0;
                v47 = 0;
                while ( chunksize_buf_index != v46 )
                {
                  v48 = v69[v46];
                  v49 = 16 * v47;
                  if ( (unsigned __int8)(v48 - 0x30) >= 0xAu )
                  {
                    v50 = v49 - 87;
                    v48 |= 0x20u;
                  }
                  else
                  {
                    v50 = v49 - 48;
                  }
                  v47 = v50 + v48;
                  ++v46;
                }
                chunksize_buf[0] = 0;
                ++v21;
                if ( v47 )
                {
                  chunksize_buf_index = 0;
                  v36 = v10 - v21;
                  goto LABEL_100;
                }
                goto end_of_stream;
              }
              ++v21;
            }
            goto LABEL_110;
          }
          *(_BYTE *)chunksize_0 = v43;
          ++chunksize_buf_index;
          *v41 = 0;
          ++v21;
        }
      }
    }
    if ( v8 <= 0 )
    {
LABEL_119:
      v54 = content_buf_len;
    }
    else
    {
      v54 = content_buf_len;
      if ( v8 < v10 + v7 )
      {
        v10 = v8 - v7;
        goto LABEL_119;
      }
    }
    if ( v54 < v10 + v7 )
    {
      v55 = v8;
      if ( v8 < v10 + v7 )
        v55 = v10 + v7;
      content_buf_len = v55;
      v56 = (char *)realloc(v3, v55);
      if ( v56 )
        goto LABEL_124;
LABEL_106:
      free(v3);
      v5 = v6;
LABEL_9:
      free(v5);
      *size = -1;
LABEL_10:
      v3 = 0;
      goto LABEL_5;
    }
    v56 = v3;
LABEL_124:
    memcpy(&v56[v7], buf, v10);
    v7 += v10;
    v3 = v56;
LABEL_112:
    ;
  }
  while ( v8 <= 0 || v7 < v8 );
end_of_stream:
  free(v6);
  *size = v7;
  if ( !v7 )
  {
    free(v3);
    goto LABEL_10;
  }
LABEL_5:
  if ( v79 != *v70 )
    _stack_chk_fail();
  return v3;
}
