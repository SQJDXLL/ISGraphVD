void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // rax
  char *v4; // r15
  char *v5; // rax
  unsigned int v6; // edi
  int v7; // r12d
  int v8; // r13d
  int v9; // eax
  int v10; // r14d
  unsigned int v11; // ebp
  char *v12; // rbx
  int v13; // eax
  int v14; // ecx
  char v15; // bl
  __int64 v16; // rsi
  __int64 v17; // rdx
  int v18; // ecx
  int v19; // esi
  __int64 v20; // rbx
  int v21; // r9d
  int v22; // eax
  int v23; // ebp
  const unsigned __int16 **v24; // rax
  int v25; // r9d
  const unsigned __int16 *v26; // rax
  unsigned __int64 v27; // rcx
  char *v28; // rdx
  __int64 v29; // rdi
  __int64 v30; // rsi
  __int64 v31; // rbp
  __int64 v32; // rcx
  int v33; // eax
  char v34; // dl
  __int64 v35; // rcx
  int v36; // edx
  int v37; // edi
  int v38; // edi
  unsigned int v39; // ebp
  unsigned int v40; // ecx
  size_t v41; // rsi
  char *v42; // rax
  char *v43; // rbx
  int v44; // esi
  const char *v45; // r8
  int v46; // edi
  int v47; // edx
  int v48; // eax
  int v49; // ebp
  int v50; // ecx
  char v51; // cl
  __int64 v52; // rcx
  char v53; // bl
  int v54; // ecx
  const char *v55; // rbx
  size_t v56; // r14
  int v57; // eax
  int v58; // ecx
  const char *v59; // rbx
  __int64 v60; // r14
  __int64 v61; // rcx
  char v62; // bl
  int v63; // edi
  int v64; // edx
  int v65; // eax
  int v66; // r14d
  int v67; // ecx
  char v68; // cl
  __int64 v69; // rcx
  char v70; // bl
  int v71; // ecx
  const char *v72; // rbx
  int v73; // eax
  int v74; // ecx
  __int64 v75; // rcx
  char v76; // bl
  unsigned int v77; // edx
  int v78; // ebp
  unsigned int v79; // r14d
  size_t v80; // rsi
  char *v81; // rax
  char *v82; // rbx
  char *v83; // rdi
  char *v84; // rdi
  char *ptr; // [rsp+8h] [rbp-8D0h]
  char *v87; // [rsp+10h] [rbp-8C8h]
  int v88; // [rsp+10h] [rbp-8C8h]
  int v89; // [rsp+20h] [rbp-8B8h]
  unsigned int v90; // [rsp+2Ch] [rbp-8ACh]
  unsigned int v91; // [rsp+30h] [rbp-8A8h]
  unsigned int v92; // [rsp+38h] [rbp-8A0h]
  int v93; // [rsp+40h] [rbp-898h]
  unsigned int v94; // [rsp+44h] [rbp-894h]
  size_t v95; // [rsp+48h] [rbp-890h]
  __int64 v96; // [rsp+50h] [rbp-888h]
  __int64 v97; // [rsp+50h] [rbp-888h]
  unsigned int v99; // [rsp+5Ch] [rbp-87Ch]
  unsigned int v100; // [rsp+60h] [rbp-878h]
  char v103[32]; // [rsp+80h] [rbp-858h]
  char src[2104]; // [rsp+A0h] [rbp-838h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800uLL);
  if ( !v3 )
  {
    *size = -1;
    return 0LL;
  }
  v4 = v3;
  v5 = (char *)malloc(0x800uLL);
  if ( !v5 )
  {
    free(v4);
    *size = -1;
    return 0LL;
  }
  v87 = v5;
  v103[0] = 0;
  v99 = 2048;
  v89 = -1;
  v93 = 0;
  v6 = 0;
  v7 = 0;
  v100 = 2048;
  v91 = 0;
  v90 = 0;
  v8 = 0;
  do
  {
    do
    {
LABEL_6:
      v94 = v6;
      v9 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
      if ( v9 <= 0 )
        goto end_of_stream;
      v10 = v9;
      v11 = v7;
      v12 = v4;
      while ( 1 )
      {
        if ( v8 )
        {
          v7 = v11;
          v4 = v12;
          if ( !v93 )
            goto LABEL_169;
          goto LABEL_40;
        }
        v7 = v10 + v11;
        if ( v10 + v11 <= v99 )
        {
          v4 = v12;
        }
        else
        {
          v4 = (char *)realloc(v12, (unsigned int)v7);
          v99 = v10 + v11;
          if ( !v4 )
          {
            free(v12);
            v83 = v87;
LABEL_189:
            free(v83);
            *size = -1;
            return 0LL;
          }
        }
        memcpy(&v4[v11], src, (unsigned int)v10);
        if ( v7 < 2 )
          goto LABEL_9;
        v13 = v7 - 1;
        v14 = 0;
        while ( 1 )
        {
          v15 = v4[v14];
          if ( v15 == 10 )
            break;
          if ( v15 != 13 )
          {
            LODWORD(v16) = v14;
LABEL_32:
            v8 = 0;
            v14 = v16 + 1;
            if ( (int)v16 + 1 >= v13 )
              goto LABEL_8;
            goto LABEL_37;
          }
          if ( v4[v14 + 1] != 10 )
          {
            LODWORD(v17) = v14 + 1;
LABEL_35:
            LODWORD(v16) = v17;
            v8 = 0;
LABEL_36:
            v14 = v16 + 1;
            if ( (int)v16 + 1 >= v13 )
              goto LABEL_8;
            goto LABEL_37;
          }
          v16 = v14 + 2LL;
          if ( v14 + 2 >= v7 )
            goto LABEL_32;
          v8 = 0;
          if ( v4[v16] != 13 )
            goto LABEL_36;
          v17 = v14 + 3LL;
          if ( (int)v17 >= v7 )
            goto LABEL_35;
          v18 = v14 + 4;
          if ( v4[v17] != 10 )
            v18 = 0;
          v8 = v18;
          v14 = v17 + 1;
          if ( (int)v17 + 1 >= v13 )
            goto LABEL_8;
LABEL_37:
          if ( v8 )
            goto LABEL_8;
        }
        v19 = v14 + 1;
        v8 = v14 + 2;
        if ( v4[v14 + 1] != 10 )
          v8 = 0;
        v14 += 2;
        if ( v19 + 1 < v13 )
          goto LABEL_37;
LABEL_8:
        if ( v8 )
          break;
LABEL_9:
        v8 = 0;
        v10 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
        v11 = v7;
        v12 = v4;
        if ( v10 <= 0 )
          goto end_of_stream;
      }
      if ( v8 >= 2 )
      {
        v44 = v8 - 1;
        v97 = v8 - 1;
        if ( status_code )
        {
          v45 = v4 + 1;
          v46 = 0;
          v47 = 0;
          v48 = 0;
          v49 = 0;
          while ( 1 )
          {
            v51 = v4[v49];
            if ( v48 > 0 && v47 <= v48 && v51 == 58 )
            {
              v50 = v49;
              if ( v49 < v44 )
              {
                v52 = 0LL;
                while ( 1 )
                {
                  v53 = v45[v49 + v52];
                  if ( v53 != 32 && v53 != 9 )
                    break;
                  if ( v97 - v49 == ++v52 )
                  {
                    v44 = v8 - 1;
                    v50 = v8 - 1;
                    goto LABEL_90;
                  }
                }
                v50 = v49 + v52;
                v44 = v8 - 1;
              }
LABEL_90:
              v46 = v50 + 1;
            }
            else if ( v51 == 13 || v51 == 10 )
            {
              if ( !v48 )
              {
                if ( v49 <= 0 )
                  goto LABEL_119;
                v59 = v45;
                v60 = (unsigned int)v49;
                while ( 1 )
                {
                  if ( *(v59 - 1) == 32 )
                  {
                    if ( *status_code >= 0 )
                    {
LABEL_118:
                      v44 = v8 - 1;
                      v45 = v4 + 1;
                      goto LABEL_119;
                    }
                    *status_code = strtol(v59, 0LL, 10);
                  }
                  ++v59;
                  if ( !--v60 )
                    goto LABEL_118;
                }
              }
              v54 = v47 - v48;
              if ( v47 <= v48 || v46 <= v47 )
              {
LABEL_119:
                v46 = 0;
                if ( v49 < v7 )
                  goto LABEL_120;
              }
              else
              {
                v55 = &v4[v48];
                v56 = v54;
                if ( !strncasecmp(v55, "content-length", v54) )
                {
                  v89 = strtol(&v4[v46], 0LL, 10);
                }
                else if ( !strncasecmp(v55, "transfer-encoding", v56) )
                {
                  v57 = strncasecmp(&v4[v46], "chunked", 7uLL);
                  v58 = v93;
                  if ( !v57 )
                    v58 = 1;
                  v93 = v58;
                }
                v44 = v8 - 1;
                v45 = v4 + 1;
                v46 = 0;
                if ( v49 < v7 )
                {
LABEL_120:
                  v61 = 0LL;
                  do
                  {
                    v62 = v4[v49 + v61];
                    if ( v62 != 13 && v62 != 10 )
                    {
                      v49 += v61;
                      v50 = v49;
                      v48 = v49;
                      goto LABEL_126;
                    }
                    ++v61;
                  }
                  while ( v7 - (__int64)v49 != v61 );
                  v50 = v7;
                  v48 = v7;
                  v49 = v7;
LABEL_126:
                  v44 = v8 - 1;
                  goto LABEL_91;
                }
              }
              v50 = v49;
              v48 = v49;
            }
            else
            {
              v50 = v49;
              v49 = v47;
            }
LABEL_91:
            v47 = v49;
            v49 = v50 + 1;
            if ( v50 + 1 >= v44 )
              goto LABEL_168;
          }
        }
        v63 = 0;
        v64 = 0;
        v65 = 0;
        v66 = 0;
        do
        {
          v68 = v4[v66];
          if ( v65 > 0 && v64 <= v65 && v68 == 58 )
          {
            v67 = v66;
            if ( v66 < v44 )
            {
              v69 = 0LL;
              while ( 1 )
              {
                v70 = v4[v66 + 1 + v69];
                if ( v70 != 32 && v70 != 9 )
                  break;
                if ( v97 - v66 == ++v69 )
                {
                  v44 = v8 - 1;
                  v67 = v8 - 1;
                  goto LABEL_136;
                }
              }
              v67 = v66 + v69;
              v44 = v8 - 1;
            }
LABEL_136:
            v63 = v67 + 1;
          }
          else if ( v68 == 13 || v68 == 10 )
          {
            v71 = v64 - v65;
            if ( v64 > v65 && v63 > v64 )
            {
              v72 = &v4[v65];
              v95 = v71;
              if ( !strncasecmp(v72, "content-length", v71) )
              {
                v89 = strtol(&v4[v63], 0LL, 10);
              }
              else if ( !strncasecmp(v72, "transfer-encoding", v95) )
              {
                v73 = strncasecmp(&v4[v63], "chunked", 7uLL);
                v74 = v93;
                if ( !v73 )
                  v74 = 1;
                v93 = v74;
              }
              v44 = v8 - 1;
            }
            v63 = 0;
            if ( v66 >= v7 )
            {
              v67 = v66;
              v65 = v66;
            }
            else
            {
              v75 = 0LL;
              do
              {
                v76 = v4[v66 + v75];
                if ( v76 != 13 && v76 != 10 )
                {
                  v66 += v75;
                  v67 = v66;
                  v65 = v66;
                  goto LABEL_167;
                }
                ++v75;
              }
              while ( v7 - (__int64)v66 != v75 );
              v67 = v7;
              v65 = v7;
              v66 = v7;
LABEL_167:
              v44 = v8 - 1;
            }
          }
          else
          {
            v67 = v66;
            v66 = v64;
          }
          v64 = v66;
          v66 = v67 + 1;
        }
        while ( v67 + 1 < v44 );
      }
LABEL_168:
      v10 = v7 - v8;
      memcpy(src, &v4[v8], v7 - v8);
      v6 = v94;
      if ( !v93 )
      {
LABEL_169:
        v77 = v91;
        v78 = v89 - v91;
        if ( v10 + v91 <= v89 )
          v78 = v10;
        if ( v89 <= 0 )
          v78 = v10;
        v79 = v91 + v78;
        if ( v91 + v78 <= v100 )
        {
          v82 = v87;
        }
        else
        {
          v80 = (unsigned int)v89;
          if ( v89 < v79 )
            v80 = v79;
          if ( v89 < 0 )
            v80 = v79;
          v100 = v80;
          v81 = (char *)realloc(v87, v80);
          v77 = v91;
          v82 = v81;
          if ( !v81 )
          {
            v84 = v87;
LABEL_190:
            free(v84);
            v83 = v4;
            goto LABEL_189;
          }
        }
        memcpy(&v82[v77], src, v78);
        v87 = v82;
        v91 += v78;
        v22 = v89;
        v6 = v94;
        continue;
      }
LABEL_40:
      if ( v10 <= 0 )
      {
LABEL_130:
        if ( v89 > 0 )
          break;
        goto LABEL_6;
      }
      v20 = (unsigned int)v10;
      v21 = 0;
      ptr = v87;
      v22 = v89;
      while ( 2 )
      {
        v92 = v91;
        do
        {
          if ( v6 )
          {
            v96 = v20;
            goto LABEL_74;
          }
          if ( v90 )
          {
            if ( v21 >= v10 )
              goto LABEL_54;
          }
          else
          {
            v21 += src[v21] == 13;
            if ( v21 < v10 )
              v21 += src[v21] == 10;
            v22 = v89;
            if ( v21 >= v10 )
            {
LABEL_54:
              if ( v21 < v10 )
                goto LABEL_55;
              goto LABEL_61;
            }
          }
          v23 = v21;
          v24 = _ctype_b_loc();
          v25 = v23;
          v26 = *v24;
          v27 = v90;
          v28 = &src[v23];
          v29 = v20 - v23;
          v30 = 0LL;
          while ( v27 <= 0x1E )
          {
            v31 = v28[v30];
            if ( (v26[v31] & 0x1000) == 0 )
              break;
            v103[v27] = v31;
            v103[++v27] = 0;
            if ( v29 == ++v30 )
            {
              v6 = 0;
              v87 = ptr;
              v90 = v90 + v10 - v25;
              goto LABEL_130;
            }
          }
          v21 = v30 + v25;
          v90 = v27;
          v22 = v89;
          if ( v21 < v10 )
          {
LABEL_55:
            v32 = v21;
            v33 = -v21;
            do
            {
              v34 = src[v32];
              if ( v34 == 10 || v34 == 13 )
              {
                v21 = (v34 == 13) - v33;
                v22 = v89;
                if ( v21 >= v10 )
                  goto LABEL_185;
                goto LABEL_64;
              }
              ++v32;
              --v33;
            }
            while ( v20 != v32 );
            v6 = 0;
            v87 = ptr;
            if ( v89 > 0 )
              goto LABEL_183;
            goto LABEL_6;
          }
LABEL_61:
          if ( v21 >= v10 )
          {
LABEL_185:
            v6 = 0;
            v87 = ptr;
            if ( v22 > 0 )
              goto LABEL_183;
            goto LABEL_6;
          }
LABEL_64:
          v6 = 0;
          v22 = v89;
        }
        while ( src[v21] != 10 );
        if ( !v90 )
        {
          v103[0] = 0;
LABEL_192:
          v87 = ptr;
          goto end_of_stream;
        }
        v35 = 0LL;
        v6 = 0;
        do
        {
          v36 = (unsigned __int8)v103[v35];
          v38 = 16 * v6;
          if ( (unsigned __int8)(v36 - 48) > 9u )
          {
            v36 = (char)(v36 | 0x20);
            v37 = v38 - 87;
          }
          else
          {
            v37 = v38 - 48;
          }
          v6 = v37 + v36;
          ++v35;
        }
        while ( v90 != v35 );
        v103[0] = 0;
        v22 = v89;
        if ( !v6 )
          goto LABEL_192;
        v96 = v20;
        ++v21;
        v90 = 0;
LABEL_74:
        v39 = v10 - v21;
        if ( v6 < v10 - v21 )
          v39 = v6;
        v40 = v39 + v91;
        v91 += v39;
        v88 = v21;
        if ( v39 + v92 <= v100 )
        {
          v42 = ptr;
        }
        else
        {
          v41 = (unsigned int)v22;
          if ( v22 < v40 )
            v41 = v40;
          if ( v22 < 0 )
            v41 = v40;
          v100 = v41;
          v42 = (char *)realloc(ptr, v41);
          v21 = v88;
          if ( !v42 )
          {
            v84 = ptr;
            goto LABEL_190;
          }
        }
        v43 = v42;
        memcpy(&v42[v92], &src[v21], v39);
        v21 = v39 + v88;
        v6 -= v39;
        v87 = v43;
        ptr = v43;
        v22 = v89;
        v20 = v96;
        if ( v21 < v10 )
          continue;
        break;
      }
    }
    while ( v22 <= 0 );
LABEL_183:
    ;
  }
  while ( v91 < v89 );
end_of_stream:
  free(v4);
  *size = v91;
  if ( v91 )
    return v87;
  free(v87);
  return 0LL;
}
