void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v4; // rax
  char *v5; // r15
  char *v6; // rax
  __int64 v7; // r14
  __int64 v8; // rcx
  __int64 v9; // rbp
  size_t v10; // rbx
  unsigned int v11; // esi
  int v12; // r12d
  int v13; // r13d
  int v14; // eax
  unsigned int v15; // edx
  __int64 v16; // rbx
  unsigned int v17; // ecx
  int v18; // r12d
  char *v19; // rax
  bool v20; // dl
  int v21; // eax
  int v22; // ecx
  char v23; // bl
  __int64 v24; // rsi
  __int64 v25; // rdx
  int v26; // ecx
  int v27; // edi
  int v28; // ecx
  int v29; // eax
  int v30; // esi
  __int64 v31; // r14
  char v32; // dl
  char *v33; // r13
  __int64 v34; // rdx
  const char *v35; // rbp
  int *v36; // rax
  int *v37; // rbx
  int v38; // edx
  const char *v39; // rbp
  size_t v40; // rbx
  int v41; // eax
  int v42; // ecx
  __int64 v43; // rcx
  char v44; // bl
  int v45; // r10d
  __int64 v46; // r13
  char *v47; // rdi
  const unsigned __int16 **v48; // rax
  const unsigned __int16 *v49; // r8
  __int64 v50; // rax
  unsigned int v51; // r9d
  char *v52; // rsi
  __int64 v53; // rdx
  __int64 v54; // rbx
  char v55; // al
  __int64 v56; // r8
  __int64 v57; // rcx
  int v58; // ebx
  __int64 v59; // rdx
  int v60; // esi
  unsigned __int8 v61; // al
  int v62; // ebx
  int v63; // ebp
  int v64; // esi
  int v65; // esi
  int v66; // ebx
  unsigned __int8 v67; // al
  int v68; // esi
  int v69; // ebp
  int v70; // ebx
  int v71; // eax
  unsigned __int8 v72; // cl
  int v73; // edx
  int v74; // eax
  bool v75; // zf
  int v76; // r10d
  int v77; // ecx
  char *v78; // rax
  unsigned int v79; // ecx
  int v80; // ebp
  int v81; // ebx
  size_t v82; // rsi
  char *v83; // rax
  char *v84; // r13
  char *v85; // rdi
  char *v87; // rdi
  char *v88; // [rsp+0h] [rbp-8E8h]
  size_t v89; // [rsp+8h] [rbp-8E0h]
  size_t v90; // [rsp+8h] [rbp-8E0h]
  unsigned int v91; // [rsp+14h] [rbp-8D4h]
  int v92; // [rsp+18h] [rbp-8D0h]
  __int64 v93; // [rsp+20h] [rbp-8C8h]
  __int64 v94; // [rsp+20h] [rbp-8C8h]
  __int64 v95; // [rsp+28h] [rbp-8C0h]
  int v96; // [rsp+30h] [rbp-8B8h]
  int v97; // [rsp+30h] [rbp-8B8h]
  char *nptr; // [rsp+38h] [rbp-8B0h]
  unsigned int nptra; // [rsp+38h] [rbp-8B0h]
  int v100; // [rsp+44h] [rbp-8A4h]
  __int64 v101; // [rsp+50h] [rbp-898h]
  int v102; // [rsp+50h] [rbp-898h]
  char *ptr; // [rsp+58h] [rbp-890h]
  char *ptra; // [rsp+58h] [rbp-890h]
  unsigned int v105; // [rsp+64h] [rbp-884h]
  int *v106; // [rsp+68h] [rbp-880h]
  unsigned int v107; // [rsp+70h] [rbp-878h]
  __int64 v110; // [rsp+88h] [rbp-860h]
  char v111[32]; // [rsp+90h] [rbp-858h] BYREF
  char src[2104]; // [rsp+B0h] [rbp-838h] BYREF

  if ( status_code )
    *status_code = -1;
  v4 = (char *)malloc(0x800uLL);
  if ( !v4 )
  {
    *size = -1;
    return 0LL;
  }
  v5 = v4;
  v6 = (char *)malloc(0x800uLL);
  if ( !v6 )
  {
    free(v5);
    *size = -1;
    return 0LL;
  }
  v88 = v6;
  v111[0] = 0;
  v105 = 2048;
  v7 = 0xFFFFFFFFLL;
  v100 = 0;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 2048LL;
  v92 = 0;
  v11 = 0;
  v106 = size;
  v12 = 0;
  do
  {
    v101 = v8;
    v91 = v11;
    v89 = v10;
    v13 = v12;
    do
    {
      v14 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
      if ( v14 <= 0 )
        goto end_of_stream;
      v15 = v14;
      if ( v13 )
      {
        v96 = v14;
        v12 = v13;
        goto LABEL_81;
      }
      v16 = (unsigned int)(v14 + v9);
      v17 = v105;
      if ( (unsigned int)v16 <= v105 )
      {
        v19 = v5;
      }
      else
      {
        v18 = v14;
        v19 = (char *)realloc(v5, (unsigned int)v16);
        v15 = v18;
        v17 = v16;
        if ( !v19 )
        {
          free(v5);
          v85 = v88;
          goto LABEL_148;
        }
      }
      v105 = v17;
      v5 = v19;
      memcpy(&v19[(unsigned int)v9], src, v15);
      v20 = 1;
      v13 = 0;
      v12 = 0;
      v9 = v16;
      if ( (int)v16 >= 2 )
      {
        v21 = v16 - 1;
        v22 = 0;
        do
        {
          v23 = v5[v22];
          if ( v23 == 10 )
          {
            LODWORD(v24) = v22 + 1;
            v12 = v22 + 2;
            if ( v5[v22 + 1] != 10 )
              v12 = 0;
            goto LABEL_32;
          }
          if ( v23 == 13 )
          {
            if ( v5[v22 + 1] != 10 )
            {
              LODWORD(v25) = v22 + 1;
LABEL_30:
              LODWORD(v24) = v25;
              goto LABEL_31;
            }
            v24 = v22 + 2LL;
            if ( v22 + 2 < (int)v9 )
            {
              v12 = 0;
              if ( v5[v24] != 13 )
                goto LABEL_32;
              v25 = v22 + 3LL;
              if ( (int)v25 < (int)v9 )
              {
                v26 = v22 + 4;
                if ( v5[v25] != 10 )
                  v26 = 0;
                LODWORD(v24) = v25;
                v12 = v26;
                goto LABEL_32;
              }
              goto LABEL_30;
            }
          }
          else
          {
            LODWORD(v24) = v22;
          }
LABEL_31:
          v12 = 0;
LABEL_32:
          v22 = v24 + 1;
          v20 = v12 == 0;
        }
        while ( (int)v24 + 1 < v21 && !v12 );
      }
    }
    while ( v20 );
    if ( v12 >= 2 )
    {
      v97 = v12 - 1;
      v110 = (int)v9;
      nptr = v5 + 1;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v93 = v9;
      ptr = v5;
      do
      {
        v95 = v7;
        v31 = (unsigned int)v30;
        v32 = v5[v30];
        if ( v32 == 58 && v29 > 0 && v28 <= v29 )
        {
          if ( v30 < v97 )
          {
            v33 = &nptr[v30];
            v34 = 0LL;
            do
            {
              if ( *v33 != 32 && *v33 != 9 )
              {
                v30 -= v34;
                goto LABEL_38;
              }
              --v34;
              ++v33;
            }
            while ( v30 - (__int64)(v12 - 1) != v34 );
            v30 = v12 - 1;
            v28 = v31;
            v27 = v12;
            goto LABEL_40;
          }
LABEL_38:
          v27 = v30 + 1;
        }
        else
        {
          if ( v32 != 13 && v32 != 10 )
            goto LABEL_40;
          if ( status_code && !v29 )
          {
            if ( v30 <= 0 )
              goto LABEL_72;
            v35 = nptr;
            v36 = status_code;
            while ( 1 )
            {
              if ( *(v35 - 1) == 32 )
              {
                if ( *v36 >= 0 )
                {
LABEL_61:
                  v9 = v93;
                  LODWORD(v31) = v30;
                  goto LABEL_72;
                }
                v37 = v36;
                v5 = ptr;
                *v36 = strtol(v35, 0LL, 10);
                v36 = v37;
              }
              ++v35;
              if ( !--v31 )
                goto LABEL_61;
            }
          }
          v38 = v28 - v29;
          if ( v28 > v29 && v27 > v28 )
          {
            v39 = &v5[v29];
            v40 = v38;
            if ( !strncasecmp(v39, "content-length", v38) )
            {
              v95 = strtol(&v5[v27], 0LL, 10);
            }
            else if ( !strncasecmp(v39, "transfer-encoding", v40) )
            {
              v41 = strncasecmp(&v5[v27], "chunked", 7uLL);
              v42 = v100;
              if ( !v41 )
                v42 = 1;
              v100 = v42;
            }
            v9 = v93;
          }
LABEL_72:
          if ( v30 < (int)v9 )
          {
            v43 = 0LL;
            v7 = v95;
            do
            {
              v44 = v5[v30 + v43];
              if ( v44 != 13 && v44 != 10 )
              {
                v30 += v43;
                v27 = 0;
                v29 = v30;
                v28 = v30;
                goto LABEL_41;
              }
              ++v43;
            }
            while ( v110 - v30 != v43 );
            v27 = 0;
            v30 = v9;
            v29 = v9;
            v28 = v9;
            goto LABEL_41;
          }
          v27 = 0;
          v29 = v30;
        }
        v28 = v31;
LABEL_40:
        v7 = v95;
LABEL_41:
        ++v30;
      }
      while ( v30 < v97 );
    }
    v96 = v9 - v12;
    memcpy(src, &v5[v12], (int)v9 - v12);
LABEL_81:
    v11 = v91;
    v8 = v101;
    v94 = v9;
    if ( v100 )
    {
      v45 = v96;
      if ( v96 <= 0 )
      {
        v10 = v89;
      }
      else
      {
        LODWORD(v46) = 0;
        v47 = v88;
        v10 = v89;
        do
        {
          nptra = v92;
          v90 = v10;
          ptra = v47;
          do
          {
            if ( (_DWORD)v8 )
              goto LABEL_120;
            if ( !v11 )
            {
              LODWORD(v46) = (src[(int)v46] == 13) + (_DWORD)v46;
              if ( (int)v46 < v45 )
                LODWORD(v46) = v46 + (src[(int)v46] == 10);
            }
            if ( (int)v46 < v45 )
            {
              v48 = _ctype_b_loc();
              v45 = v96;
              v49 = *v48;
              v50 = v11;
              v51 = v96 + v11 - v46;
              v52 = &v111[v11 + 1];
              v53 = 0LL;
              while ( (unsigned __int64)(v50 + v53) <= 0x1E )
              {
                v54 = src[(int)v46 + v53];
                if ( (v49[v54] & 0x1000) == 0 )
                  break;
                *(_WORD *)&v52[v53++ - 1] = (unsigned __int8)v54;
                if ( (unsigned int)v96 - (__int64)(int)v46 == v53 )
                {
                  LODWORD(v46) = v96;
                  v10 = v90;
                  v9 = v94;
                  v11 = v51;
                  goto LABEL_96;
                }
              }
              LODWORD(v46) = v53 + v46;
              v11 = v53 + v50;
              v10 = v90;
              v9 = v94;
LABEL_96:
              v47 = ptra;
            }
            v46 = (int)v46;
            while ( v46 < (unsigned int)v96 )
            {
              v55 = src[v46++];
              if ( v55 == 13 || v55 == 10 )
              {
                if ( v55 != 13 )
                  LODWORD(v46) = v46 - 1;
                break;
              }
            }
            if ( v45 <= (int)v46 )
            {
              v8 = 0LL;
              v88 = v47;
              goto LABEL_143;
            }
            LODWORD(v8) = 0;
          }
          while ( src[(int)v46] != 10 );
          if ( !v11 )
          {
            v111[0] = 0;
LABEL_150:
            v88 = v47;
            goto end_of_stream;
          }
          v56 = v11 & 1;
          if ( v11 == 1 )
          {
            v57 = 0LL;
            v58 = 0;
          }
          else
          {
            v59 = v11 - v56;
            v57 = 0LL;
            v58 = 0;
            do
            {
              v60 = v111[v57];
              v61 = v60 - 48;
              v62 = 16 * v58;
              v63 = v60 + 268435408;
              v64 = (v60 | 0x20) + 268435369;
              if ( v61 < 0xAu )
                v64 = v63;
              v65 = v62 + v64;
              v66 = v111[v57 + 1];
              v67 = v66 - 48;
              v68 = 16 * v65;
              v69 = v66 - 48;
              v70 = (v66 | 0x20) - 87;
              if ( v67 < 0xAu )
                v70 = v69;
              v58 = v68 + v70;
              v57 += 2LL;
            }
            while ( v59 != v57 );
          }
          if ( v56 )
          {
            v71 = v111[v57];
            v72 = v71 - 48;
            v73 = v71 - 48;
            v74 = (v71 | 0x20) - 87;
            if ( v72 < 0xAu )
              v74 = v73;
            v58 = v74 + 16 * v58;
          }
          v111[0] = 0;
          LODWORD(v8) = v58;
          v75 = v58 == 0;
          v10 = v90;
          v9 = v94;
          if ( v75 )
            goto LABEL_150;
          LODWORD(v46) = v46 + 1;
          v11 = 0;
LABEL_120:
          v76 = v45 - v46;
          v102 = v8;
          if ( (int)v8 <= v76 )
            v76 = v8;
          v107 = v76;
          v77 = v76 + v92;
          v92 += v76;
          if ( v76 + nptra <= (unsigned int)v10 )
          {
            v78 = v47;
          }
          else
          {
            v10 = (unsigned int)v7;
            if ( (int)v7 < v77 )
              v10 = (unsigned int)v77;
            v78 = (char *)realloc(v47, v10);
            if ( !v78 )
            {
              v87 = ptra;
              goto LABEL_155;
            }
          }
          v88 = v78;
          memcpy(&v78[nptra], &src[(int)v46], v107);
          LODWORD(v46) = v107 + v46;
          v8 = v102 - v107;
          v47 = v88;
          v45 = v96;
        }
        while ( (int)v46 < v96 );
      }
    }
    else
    {
      v79 = v92;
      v80 = v7 - v92;
      if ( v96 + v92 <= (int)v7 )
        v80 = v96;
      if ( (int)v7 <= 0 )
        v80 = v96;
      v81 = v92 + v80;
      if ( v92 + v80 <= (unsigned int)v89 )
      {
        v84 = v88;
      }
      else
      {
        v82 = (unsigned int)v7;
        if ( (int)v7 < v81 )
          v82 = (unsigned int)v81;
        v89 = v82;
        v83 = (char *)realloc(v88, v82);
        v79 = v92;
        v84 = v83;
        if ( !v83 )
        {
          v87 = v88;
LABEL_155:
          free(v87);
          v85 = v5;
LABEL_148:
          free(v85);
          *v106 = -1;
          return 0LL;
        }
      }
      memcpy(&v84[v79], src, v80);
      v88 = v84;
      v92 += v80;
      v10 = v89;
      v9 = v94;
      v11 = v91;
      v8 = v101;
    }
LABEL_143:
    ;
  }
  while ( (int)v7 <= 0 || v92 < (int)v7 );
end_of_stream:
  free(v5);
  *v106 = v92;
  if ( !v92 )
  {
    free(v88);
    return 0LL;
  }
  return v88;
}
