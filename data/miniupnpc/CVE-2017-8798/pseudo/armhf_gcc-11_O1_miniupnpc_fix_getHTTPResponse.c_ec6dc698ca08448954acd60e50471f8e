void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // r9
  int *v4; // r11
  unsigned int v5; // r10
  unsigned int v6; // r8
  signed int v7; // r3
  unsigned int v8; // r5
  _BOOL4 v9; // r2
  int v10; // r2
  unsigned int v11; // r1
  signed int v12; // r4
  signed int v13; // r3
  signed int v14; // r6
  signed int v15; // r5
  signed int v16; // r8
  int *v17; // r11
  int v18; // r2
  char *v19; // r0
  int v20; // r1
  int v21; // t1
  bool v22; // zf
  int v23; // r2
  bool v24; // zf
  bool v25; // cc
  int v26; // r2
  bool v27; // zf
  char *v28; // r2
  int v29; // r3
  int v30; // t1
  bool v31; // zf
  _BOOL4 v32; // r2
  bool v33; // cc
  const char *v34; // r10
  size_t v35; // r6
  int v36; // r0
  int v37; // r3
  const char *v38; // r5
  int v39; // t1
  signed int v40; // r6
  int v41; // r4
  unsigned int v42; // r9
  const unsigned __int16 *v43; // lr
  int v44; // r0
  _BYTE *v45; // r3
  char v46; // r1
  int v47; // t1
  int v48; // r2
  int v49; // r3
  int v50; // t1
  bool v51; // zf
  unsigned int v52; // r7
  unsigned __int8 *v53; // r2
  unsigned __int8 *v54; // r11
  int v55; // r3
  int v56; // r1
  int v57; // t1
  void *v58; // r0
  size_t v59; // r5
  void *v60; // r9
  size_t v61; // r5
  unsigned int v62; // r4
  char *v63; // r6
  _BOOL4 v64; // r3
  int v65; // r0
  signed int v66; // r7
  char *v67; // r0
  int v68; // r10
  int v70[2]; // [sp+0h] [bp-8A0h] BYREF
  int endofheaders; // [sp+Ch] [bp-894h]
  int content_length; // [sp+10h] [bp-890h]
  unsigned int header_buf_used; // [sp+14h] [bp-88Ch]
  unsigned int content_buf_len; // [sp+18h] [bp-888h]
  int sa; // [sp+1Ch] [bp-884h]
  unsigned int content_buf_used; // [sp+20h] [bp-880h]
  char *header_buf; // [sp+24h] [bp-87Ch]
  unsigned int header_buf_len; // [sp+28h] [bp-878h]
  int chunked; // [sp+2Ch] [bp-874h]
  unsigned int chunksize_buf_index; // [sp+30h] [bp-870h]
  int v81; // [sp+34h] [bp-86Ch]
  int *status_codea; // [sp+38h] [bp-868h]
  char *v83; // [sp+3Ch] [bp-864h]
  int *v84; // [sp+40h] [bp-860h]
  int *sizea; // [sp+44h] [bp-85Ch]
  char *s2; // [sp+48h] [bp-858h]
  int *v87; // [sp+4Ch] [bp-854h]
  char chunksize_buf[32]; // [sp+54h] [bp-84Ch] BYREF
  char buf[2048]; // [sp+74h] [bp-82Ch] BYREF

  header_buf = (char *)s;
  v87 = size;
  v84 = status_code;
  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800u);
  if ( !v3 )
  {
    *v87 = -1;
    return 0;
  }
  content_length = (int)malloc(0x800u);
  if ( !content_length )
  {
    free(v3);
    *v87 = -1;
    return (void *)content_length;
  }
  chunksize_buf[0] = 0;
  v4 = 0;
  v5 = 0;
  content_buf_used = 2048;
  sa = 0;
  chunksize_buf_index = 2048;
  v6 = 0;
  content_buf_len = -1;
  v81 = 0;
  header_buf_used = 0;
  endofheaders = (int)buf;
  sizea = (int *)"content-length";
  s2 = "transfer-encoding";
  do
  {
    while ( 1 )
    {
      v65 = receivedata(header_buf, endofheaders, 2048, 5000, 0);
      v40 = v65;
      if ( v65 <= 0 )
      {
        v68 = v6;
        goto end_of_stream;
      }
      if ( header_buf_used )
        break;
      v66 = v65 + sa;
      if ( v65 + sa > chunksize_buf_index )
      {
        v67 = (char *)realloc(v3, v65 + sa);
        if ( !v67 )
        {
          free(v3);
          free((void *)content_length);
          *v87 = -1;
          return 0;
        }
        chunksize_buf_index = v66;
        v3 = v67;
      }
      memcpy(&v3[sa], (const void *)endofheaders, v40);
      if ( v66 - 1 <= 0 )
      {
        sa = v66;
      }
      else
      {
        v7 = header_buf_used;
        do
        {
          v10 = (unsigned __int8)v3[v7];
          if ( v10 == 13 )
          {
            if ( v3[v7 + 1] == 10 )
            {
              if ( v7 + 2 < v66 )
              {
                if ( v3[v7 + 2] == 13 )
                {
                  if ( v7 + 3 < v66 )
                  {
                    if ( v3[v7 + 3] == 10 )
                    {
                      v8 = v7 + 4;
                      v7 += 3;
                    }
                    else
                    {
                      v7 += 3;
                      v8 = header_buf_used;
                    }
                  }
                  else
                  {
                    v7 += 3;
                    v8 = header_buf_used;
                  }
                }
                else
                {
                  v7 += 2;
                  v8 = header_buf_used;
                }
              }
              else
              {
                v7 += 2;
                v8 = header_buf_used;
              }
            }
            else
            {
              ++v7;
              v8 = header_buf_used;
            }
          }
          else if ( v10 == 10 )
          {
            if ( v3[v7 + 1] == 10 )
            {
              v8 = v7 + 2;
              ++v7;
            }
            else
            {
              ++v7;
              v8 = header_buf_used;
            }
          }
          else
          {
            v8 = header_buf_used;
          }
          ++v7;
          v9 = v8 == 0;
          if ( v7 >= v66 - 1 )
            v9 = 0;
        }
        while ( v9 );
        if ( v8 )
        {
          v11 = v8 - 1;
          if ( (int)(v8 - 1) <= 0 )
            goto LABEL_86;
          v12 = header_buf_used;
          v13 = header_buf_used;
          v14 = header_buf_used;
          v83 = "chunked";
          header_buf_len = v6;
          sa = v8;
          chunked = v5;
          status_codea = v4;
          v15 = header_buf_used;
          v16 = v11;
          v17 = v84;
          while ( 1 )
          {
            v25 = v13 <= v14;
            if ( v13 >= v14 )
              v25 = v13 <= 0;
            if ( v25 )
            {
              v23 = (unsigned __int8)v3[v12];
              v24 = v23 == 10;
              if ( v23 != 10 )
                v24 = v23 == 13;
              if ( v24 )
              {
                v32 = v13 == 0;
                if ( !v17 )
                  v32 = 0;
                if ( v32 )
                {
                  if ( v12 > 0 )
                  {
                    v38 = v3;
                    do
                    {
                      v39 = *(unsigned __int8 *)v38++;
                      if ( v39 == 32 )
                      {
                        if ( *v17 >= 0 )
                          break;
                        *v17 = strtol(v38, 0u, 10);
                      }
                    }
                    while ( v38 != &v3[v12] );
                  }
                }
                else
                {
                  v33 = v13 < v14;
                  if ( v13 < v14 )
                    v33 = v14 < v15;
                  if ( v33 )
                  {
                    v34 = &v3[v13];
                    v35 = v14 - v13;
                    if ( !strncasecmp(&v3[v13], (const char *)sizea, v35) )
                    {
                      content_buf_len = strtol(&v3[v15], 0u, 10);
                    }
                    else if ( !strncasecmp(v34, s2, v35) )
                    {
                      v36 = strncasecmp(&v3[v15], v83, 7u);
                      v37 = v81;
                      if ( !v36 )
                        v37 = 1;
                      v81 = v37;
                    }
                  }
                }
LABEL_56:
                if ( v66 <= v12 )
                {
                  v15 = header_buf_used;
                  v14 = v12;
                  v13 = v12;
                }
                else
                {
                  v28 = &v3[v12 - 1];
                  do
                  {
                    v30 = (unsigned __int8)*++v28;
                    v29 = v30;
                    v31 = v30 == 10;
                    if ( v30 != 10 )
                      v31 = v29 == 13;
                    if ( !v31 )
                    {
                      v15 = header_buf_used;
                      v14 = v12;
                      v13 = v12;
                      goto LABEL_47;
                    }
                    ++v12;
                  }
                  while ( v12 != v66 );
                  v15 = header_buf_used;
                  v14 = v66;
                  v13 = v66;
                  v12 = v66;
                }
              }
            }
            else
            {
              v19 = &v3[v12];
              v26 = (unsigned __int8)v3[v12];
              if ( v26 == 58 )
              {
                if ( v16 <= v12 )
                {
                  v18 = v12;
                }
                else
                {
                  v18 = v12;
                  while ( 1 )
                  {
                    v21 = (unsigned __int8)*++v19;
                    v20 = v21;
                    v22 = v21 == 9;
                    if ( v21 != 9 )
                      v22 = v20 == 32;
                    if ( !v22 )
                      break;
                    if ( ++v18 == sa - 1 )
                    {
                      v18 = sa - 1;
                      break;
                    }
                  }
                }
                v15 = v18 + 1;
                v14 = v12;
                v12 = v18;
                goto LABEL_47;
              }
              v27 = v26 == 10;
              if ( v26 != 10 )
                v27 = v26 == 13;
              if ( v27 )
                goto LABEL_56;
            }
LABEL_47:
            if ( ++v12 >= v16 )
            {
              v6 = header_buf_len;
              v8 = sa;
              v5 = chunked;
              v4 = status_codea;
LABEL_86:
              v40 = v66 - v8;
              memcpy((void *)endofheaders, &v3[v8], v66 - v8);
              if ( !v81 )
              {
                sa = v66;
                header_buf_used = v8;
                goto LABEL_172;
              }
              if ( v40 <= 0 )
              {
                sa = v66;
                header_buf_used = v8;
                goto LABEL_144;
              }
              sa = v66;
              header_buf_used = v8;
LABEL_91:
              v41 = 0;
              header_buf_len = (unsigned int)&chunksize_buf[4];
              chunked = (int)v3;
              v42 = content_buf_used;
              while ( 2 )
              {
                if ( v5 )
                {
LABEL_129:
                  v59 = v40 - v41;
                  if ( v40 - v41 >= v5 )
                    v59 = v5;
                  v52 = v59 + v6;
                  if ( v59 + v6 > v42 )
                  {
                    if ( (content_buf_len & 0x80000000) == 0 )
                    {
                      if ( content_buf_len < v52 )
                        v42 = v59 + v6;
                      else
                        v42 = content_buf_len;
                    }
                    else
                    {
                      v42 = v59 + v6;
                    }
                    v58 = realloc((void *)content_length, v42);
                    if ( !v58 )
                    {
                      v60 = (void *)chunked;
                      free((void *)content_length);
                      free(v60);
                      *v87 = -1;
                      return 0;
                    }
                    content_length = (int)v58;
                  }
                  memcpy((void *)(content_length + v6), (const void *)(endofheaders + v41), v59);
                  v41 += v59;
                  v5 -= v59;
                  if ( v40 <= v41 )
                  {
                    content_buf_used = v42;
                    v3 = (char *)chunked;
                    v6 += v59;
                    goto LABEL_144;
                  }
                  goto LABEL_127;
                }
                if ( v4 )
                {
LABEL_98:
                  if ( v40 <= v41 )
                  {
                    content_buf_used = v42;
                    v3 = (char *)chunked;
                    goto LABEL_144;
                  }
                }
                else
                {
                  if ( *((_BYTE *)&v70[29] + v41) == 13 )
                    ++v41;
                  if ( v40 <= v41 )
                  {
                    content_buf_used = v42;
                    v3 = (char *)chunked;
                    goto LABEL_144;
                  }
                  if ( *((_BYTE *)&v70[29] + v41) == 10 )
                  {
                    ++v41;
                    goto LABEL_98;
                  }
                }
                v43 = *_ctype_b_loc();
                v44 = endofheaders + v41 - 1;
                v45 = (char *)v4 + header_buf_len - 4;
                while ( 1 )
                {
                  v47 = *(unsigned __int8 *)++v44;
                  v46 = v47;
                  if ( (((unsigned int)v4 <= 0x1E) & (v43[v47] >> 0xC)) == 0 )
                    break;
                  v4 = (int *)((char *)v4 + 1);
                  *v45 = v46;
                  *++v45 = 0;
                  if ( v40 <= ++v41 )
                  {
                    content_buf_used = v42;
                    v3 = (char *)chunked;
                    goto LABEL_144;
                  }
                }
                if ( v40 <= v41 )
                {
                  content_buf_used = v42;
                  v3 = (char *)chunked;
                  goto LABEL_144;
                }
                v48 = endofheaders + v41 - 1;
                while ( 1 )
                {
                  v50 = *(unsigned __int8 *)++v48;
                  v49 = v50;
                  v51 = v50 == 10;
                  if ( v50 != 10 )
                    v51 = v49 == 13;
                  if ( v51 )
                    break;
                  if ( v40 == ++v41 )
                  {
                    content_buf_used = v42;
                    v3 = (char *)chunked;
                    goto LABEL_144;
                  }
                }
                if ( v40 <= v41 )
                {
                  content_buf_used = v42;
                  v3 = (char *)chunked;
                  goto LABEL_144;
                }
                if ( *((_BYTE *)&v70[29] + v41) == 13 && v40 <= ++v41 )
                {
                  content_buf_used = v42;
                  v3 = (char *)chunked;
                  goto LABEL_144;
                }
                if ( *((_BYTE *)&v70[29] + v41) == 10 )
                {
                  if ( !v4 )
                  {
                    v3 = (char *)chunked;
                    v68 = v6;
                    goto end_of_stream;
                  }
                  v53 = (unsigned __int8 *)(header_buf_len - 4);
                  v54 = (unsigned __int8 *)v4 + header_buf_len - 4;
                  v55 = 0;
                  do
                  {
                    v57 = *v53++;
                    v56 = v57;
                    if ( (unsigned int)(v57 - 0x30) > 9 )
                      v55 = (v56 | 0x20) + 16 * v55 - 0x57;
                    else
                      v55 = v56 + 16 * v55 - 0x30;
                  }
                  while ( v53 != v54 );
                  chunksize_buf[0] = 0;
                  ++v41;
                  if ( !v55 )
                  {
                    v3 = (char *)chunked;
                    v68 = v6;
                    goto end_of_stream;
                  }
                  v4 = 0;
                  v5 = v55;
                  goto LABEL_129;
                }
                v52 = v6;
LABEL_127:
                v6 = v52;
                continue;
              }
            }
          }
        }
        sa = v66;
        header_buf_used = 0;
      }
    }
    if ( v81 )
      goto LABEL_91;
LABEL_172:
    if ( (int)content_buf_len <= 0 )
    {
      v61 = v40;
      v62 = v40 + v6;
      if ( v40 + v6 <= content_buf_used )
      {
        v63 = (char *)content_length;
        goto LABEL_143;
      }
      if ( content_buf_len )
      {
LABEL_141:
        content_buf_used = v62;
        goto LABEL_142;
      }
    }
    else
    {
      v62 = content_buf_len;
      if ( v40 + v6 <= content_buf_len )
      {
        v61 = v40;
        v62 = v40 + v6;
        if ( content_buf_used >= v40 + v6 )
        {
          v63 = (char *)content_length;
          goto LABEL_143;
        }
        content_buf_used = content_buf_len;
        goto LABEL_142;
      }
      v61 = content_buf_len - v6;
      if ( content_buf_len <= content_buf_used )
      {
        v63 = (char *)content_length;
        goto LABEL_143;
      }
    }
    content_buf_used = content_buf_len;
    if ( content_buf_len < v62 )
      goto LABEL_141;
LABEL_142:
    v63 = (char *)realloc((void *)content_length, content_buf_used);
    if ( !v63 )
    {
      free((void *)content_length);
      free(v3);
      *v87 = -1;
      return 0;
    }
LABEL_143:
    memcpy(&v63[v6], (const void *)endofheaders, v61);
    v6 = v62;
    content_length = (int)v63;
LABEL_144:
    v64 = (int)content_buf_len > 0;
    if ( content_buf_len > v6 )
      v64 = 0;
  }
  while ( !v64 );
  v68 = v6;
end_of_stream:
  free(v3);
  *v87 = v68;
  if ( !v68 )
  {
    free((void *)content_length);
    return 0;
  }
  return (void *)content_length;
}
