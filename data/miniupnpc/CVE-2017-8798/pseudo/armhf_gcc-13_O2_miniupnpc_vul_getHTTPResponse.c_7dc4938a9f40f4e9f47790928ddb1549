void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v4; // r11
  unsigned int v5; // r4
  signed int v6; // r6
  signed int v7; // r5
  char *v8; // r9
  int v9; // r0
  signed int v10; // r8
  signed int v11; // r10
  void *v12; // r0
  int v13; // r7
  char *v14; // r3
  bool v15; // r2
  int v17; // r2
  char *v18; // r0
  signed int v19; // r10
  unsigned int v20; // r1
  unsigned int v21; // r7
  _BOOL4 v22; // r3
  int *v23; // r7
  char *v24; // r3
  int v25; // r8
  int *v26; // r9
  int v27; // r12
  int v28; // r1
  int v29; // r7
  int v30; // r4
  int v31; // r11
  bool v32; // zf
  bool v33; // cc
  int v34; // r0
  const char *v35; // r6
  int v36; // r5
  bool v37; // zf
  _BOOL4 v38; // r2
  const char *v39; // r4
  int v40; // t1
  int v41; // r2
  int v42; // r4
  int v43; // t1
  bool v44; // zf
  unsigned int v45; // r10
  signed int v46; // r7
  size_t v47; // r9
  int v48; // r3
  char *v49; // r0
  const void *v50; // r1
  unsigned int v51; // lr
  const unsigned __int16 *v52; // r5
  int v53; // r0
  _BYTE *v54; // r1
  char v55; // r2
  int v56; // t1
  int v57; // r2
  int v58; // r3
  int v59; // t1
  bool v60; // zf
  int v61; // r3
  unsigned __int8 *v62; // r3
  unsigned __int8 *v63; // r4
  int v64; // r2
  int v65; // t1
  int v66; // r5
  int v67; // r5
  char *v69; // r0
  bool v70; // cc
  const char *v71; // r6
  int v72; // r0
  char *v73; // r3
  int v74; // r2
  int v75; // r3
  int v76; // t1
  int v77; // r4
  bool v78; // zf
  int *v79; // r7
  int *v80; // r7
  int v81; // [sp+0h] [bp-898h] BYREF
  int content_length; // [sp+8h] [bp-890h]
  int chunked; // [sp+Ch] [bp-88Ch]
  unsigned int content_buf_used; // [sp+10h] [bp-888h]
  char *header_buf; // [sp+14h] [bp-884h]
  int v86; // [sp+18h] [bp-880h]
  int sa; // [sp+1Ch] [bp-87Ch]
  unsigned int header_buf_len; // [sp+20h] [bp-878h]
  int v89; // [sp+24h] [bp-874h]
  unsigned int chunksize; // [sp+28h] [bp-870h]
  unsigned int chunksize_buf_index; // [sp+2Ch] [bp-86Ch]
  char *content_buf; // [sp+30h] [bp-868h]
  unsigned int v93; // [sp+34h] [bp-864h]
  int *status_codea; // [sp+38h] [bp-860h]
  int *sizea; // [sp+3Ch] [bp-85Ch]
  int *v96; // [sp+40h] [bp-858h]
  int *v97; // [sp+44h] [bp-854h]
  char chunksize_buf[32]; // [sp+4Ch] [bp-84Ch] BYREF
  char buf[2048]; // [sp+6Ch] [bp-82Ch] BYREF

  v89 = s;
  v96 = status_code;
  if ( status_code )
    *status_code = -1;
  sa = (int)malloc(0x800u);
  if ( !sa )
    goto LABEL_164;
  v4 = (char *)malloc(0x800u);
  if ( !v4 )
  {
    free((void *)sa);
LABEL_164:
    *size = -1;
    return 0;
  }
  chunked = 2048;
  chunksize = 2048;
  v5 = 0;
  content_buf_used = -1;
  content_length = (int)buf;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  chunksize_buf[0] = 0;
  v86 = 0;
  header_buf = 0;
  header_buf_len = (unsigned int)chunksize_buf;
  v97 = size;
  while ( 1 )
  {
LABEL_6:
    v9 = receivedata(v89, content_length, 2048, 5000, 0);
    v10 = v9;
    if ( v9 <= 0 )
      goto LABEL_115;
    if ( v8 )
    {
      if ( header_buf )
        goto LABEL_78;
      goto LABEL_26;
    }
    v11 = v9 + v86;
    if ( v9 + v86 > chunksize )
    {
      v12 = realloc((void *)sa, v9 + v86);
      if ( !v12 )
      {
        v80 = v97;
        free((void *)sa);
        free(v4);
        *v80 = -1;
        return 0;
      }
      sa = (int)v12;
      chunksize = v11;
    }
    v13 = sa;
    memcpy((void *)(sa + v86), (const void *)content_length, v10);
    if ( v11 > 1 )
      break;
LABEL_118:
    v86 = v11;
  }
  v14 = 0;
  do
  {
    v17 = (unsigned __int8)v14[v13];
    v18 = v14 + 1;
    if ( v17 == 13 )
    {
      if ( v18[v13] != 10 )
        goto LABEL_22;
      if ( (int)(v14 + 2) < v11 && v14[v13 + 2] == 13 )
      {
        if ( (int)(v14 + 3) < v11 && v14[v13 + 3] == 10 )
        {
          v14 += 4;
          v15 = v14 == 0;
          v8 = v14;
        }
        else
        {
          v14 += 4;
          v8 = 0;
          v15 = 1;
        }
      }
      else
      {
        v14 += 3;
        v8 = 0;
        v15 = 1;
      }
    }
    else
    {
      if ( v17 != 10 )
      {
        ++v14;
        v8 = 0;
        v15 = 1;
        goto LABEL_16;
      }
      if ( v18[v13] != 10 )
      {
LABEL_22:
        v14 += 2;
        v8 = 0;
        v15 = 1;
        goto LABEL_16;
      }
      v14 += 2;
      v15 = v14 == 0;
      v8 = v14;
    }
LABEL_16:
    ;
  }
  while ( v11 - 1 > (int)v14 && v15 );
  if ( !v8 )
    goto LABEL_118;
  v24 = v8 + -0x1;
  if ( (int)(v8 + -0x1) <= 0 )
    goto LABEL_75;
  chunksize_buf_index = (unsigned int)v8;
  v93 = v5;
  status_codea = (int *)v4;
  v25 = sa;
  v26 = v96;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = (int)v24;
  v86 = v6;
  content_buf = (char *)v7;
  while ( 2 )
  {
    while ( 2 )
    {
      v33 = v28 <= v27;
      if ( v28 >= v27 )
        v33 = v28 <= 0;
      v34 = *(unsigned __int8 *)(v25 + v29);
      v35 = (const char *)(v25 + v29);
      v36 = v29 + 1;
      if ( !v33 )
      {
        if ( v34 != 58 )
        {
          v32 = v34 == 13;
          if ( v34 != 13 )
            v32 = v34 == 10;
          if ( !v32 )
            goto LABEL_44;
          goto LABEL_63;
        }
        if ( v31 <= v29 )
        {
          v30 = v29 + 1;
          v27 = v29++;
        }
        else
        {
          v74 = v29;
          do
          {
            v76 = *(unsigned __int8 *)++v35;
            v75 = v76;
            v77 = v74;
            v78 = v76 == 9;
            if ( v76 != 9 )
              v78 = v75 == 32;
            ++v74;
            if ( !v78 )
            {
              v30 = v77 + 1;
              v27 = v29;
              v29 = v30;
              goto LABEL_45;
            }
          }
          while ( v31 != v74 );
          v30 = v31 + 1;
          v27 = v29;
          v29 = v31 + 1;
        }
LABEL_45:
        if ( v31 <= v29 )
          goto LABEL_74;
        continue;
      }
      break;
    }
    v37 = v34 == 10;
    if ( v34 != 10 )
      v37 = v34 == 13;
    if ( !v37 )
    {
LABEL_44:
      ++v29;
      goto LABEL_45;
    }
    v38 = v28 == 0;
    if ( !v26 )
      v38 = 0;
    if ( v38 )
    {
      if ( v29 <= 0 )
        goto LABEL_64;
      v39 = (const char *)v25;
      do
      {
        while ( 1 )
        {
          v40 = *(unsigned __int8 *)v39++;
          if ( v40 == 32 )
            break;
          if ( v35 == v39 )
            goto LABEL_63;
        }
        if ( *v26 >= 0 )
          break;
        *v26 = strtol(v39, 0u, 10);
      }
      while ( v35 != v39 );
      goto LABEL_63;
    }
    v70 = v28 < v27;
    if ( v28 < v27 )
      v70 = v27 < v30;
    if ( !v70 )
      goto LABEL_63;
    v71 = (const char *)(v25 + v28);
    sizea = (int *)(v27 - v28);
    if ( !strncasecmp((const char *)(v25 + v28), "content-length", v27 - v28) )
    {
      content_buf_used = strtol((const char *)(v25 + v30), 0u, 10);
      goto LABEL_63;
    }
    if ( strncasecmp(v71, "transfer-encoding", (size_t)sizea) )
    {
LABEL_63:
      if ( v11 > v29 )
        goto LABEL_64;
      goto LABEL_142;
    }
    v72 = strncasecmp((const char *)(v25 + v30), "chunked", 7u);
    v73 = header_buf;
    if ( !v72 )
      v73 = (_BYTE *)(getHTTPResponse + 1);
    header_buf = v73;
    if ( v11 <= v29 )
    {
LABEL_142:
      v27 = v29;
      v28 = v29;
      v30 = 0;
      ++v29;
      goto LABEL_45;
    }
LABEL_64:
    v41 = v25 + v29 - 1;
    while ( 1 )
    {
      v43 = *(unsigned __int8 *)++v41;
      v42 = v43;
      v28 = v29;
      v44 = v43 == 10;
      if ( v43 != 10 )
        v44 = v42 == 13;
      v30 = v44;
      v29 = v36;
      if ( !v44 )
        break;
      if ( v11 == v36 )
      {
        v29 = v28 + 2;
        v30 = 0;
        v27 = v11;
        v28 = v11;
        goto LABEL_45;
      }
      ++v36;
    }
    v27 = v28;
    if ( v31 > v36 )
      continue;
    break;
  }
LABEL_74:
  v6 = v86;
  v8 = (char *)chunksize_buf_index;
  v7 = (signed int)content_buf;
  v5 = v93;
  v4 = (char *)status_codea;
LABEL_75:
  v10 = v11 - (_DWORD)v8;
  memcpy((void *)content_length, &v8[sa], v11 - (_DWORD)v8);
  v86 = v11;
  if ( !header_buf )
  {
LABEL_26:
    v19 = v6 + v10;
    v20 = v6 + v10;
    if ( (int)content_buf_used <= 0 )
    {
      if ( chunked >= (unsigned int)v19 )
        goto LABEL_143;
      if ( (int)content_buf_used >= v19 )
        goto LABEL_132;
      v21 = v6 + v10;
    }
    else
    {
      if ( (int)content_buf_used >= v19 )
      {
        if ( chunked >= (unsigned int)v19 )
        {
LABEL_143:
          v21 = v6 + v10;
          goto LABEL_29;
        }
LABEL_132:
        v21 = v6 + v10;
        v20 = content_buf_used;
        goto LABEL_128;
      }
      v19 = content_buf_used;
      v21 = content_buf_used;
      v10 = content_buf_used - v6;
      if ( content_buf_used <= chunked )
        goto LABEL_29;
      v21 = content_buf_used;
      v20 = content_buf_used;
    }
LABEL_128:
    chunked = v20;
    v69 = (char *)realloc(v4, v20);
    if ( !v69 )
    {
LABEL_161:
      v79 = v97;
      free(v4);
      free((void *)sa);
      *v79 = -1;
      return 0;
    }
    v4 = v69;
    v19 = v21;
LABEL_29:
    memcpy(&v4[v6], (const void *)content_length, v10);
    v6 = v21;
    header_buf = 0;
LABEL_30:
    v22 = (int)content_buf_used > 0;
    if ( (int)content_buf_used > v19 )
      v22 = 0;
    if ( v22 )
    {
      v23 = v97;
      goto end_of_stream;
    }
    goto LABEL_6;
  }
  if ( v10 <= 0 )
  {
    v19 = v6;
    goto LABEL_30;
  }
LABEL_78:
  v45 = chunked;
  v46 = 0;
  header_buf = v8;
  while ( 2 )
  {
    if ( v7 )
    {
LABEL_79:
      v47 = v10 - v46;
      if ( v10 - v46 >= v7 )
        v47 = v7;
      v48 = v6;
      v6 += v47;
      if ( v6 > v45 )
      {
        chunked = v48;
        if ( (int)content_buf_used < v6 )
          v45 = v6;
        else
          v45 = content_buf_used;
        v49 = (char *)realloc(v4, v45);
        v48 = chunked;
        if ( !v49 )
          goto LABEL_161;
        v4 = v49;
      }
      v50 = (const void *)(content_length + v46);
      v46 += v47;
      memcpy(&v4[v48], v50, v47);
      v7 -= v47;
      if ( v46 >= v10 )
      {
        v8 = header_buf;
        chunked = v45;
        header_buf = (_BYTE *)(getHTTPResponse + 1);
        v19 = v6;
        goto LABEL_30;
      }
      continue;
    }
    break;
  }
  chunked = 0;
  while ( 2 )
  {
    if ( !v5 )
    {
      if ( *((_BYTE *)&v81 + v46 + 0x6C) == 13 )
        ++v46;
      if ( v46 >= v10 )
        goto LABEL_121;
      if ( *((_BYTE *)&v81 + v46 + 0x6C) != 10 )
        goto LABEL_95;
      ++v46;
    }
    if ( v46 >= v10 )
      goto LABEL_121;
LABEL_95:
    v51 = v10 + v5 - v46;
    v52 = *_ctype_b_loc();
    v53 = content_length + v46 - 1;
    v54 = (_BYTE *)(header_buf_len + v5);
    do
    {
      v56 = *(unsigned __int8 *)++v53;
      v55 = v56;
      if ( ((v5 <= 0x1E) & (v52[v56] >> 0xC)) == 0 )
        break;
      ++v5;
      *v54 = v55;
      ++v46;
      *++v54 = 0;
    }
    while ( v51 != v5 );
    if ( v46 >= v10 )
      goto LABEL_121;
    v57 = content_length + v46 - 1;
    while ( 1 )
    {
      v59 = *(unsigned __int8 *)++v57;
      v58 = v59;
      v60 = v59 == 13;
      if ( v59 != 13 )
        v60 = v58 == 10;
      if ( v60 )
        break;
      if ( ++v46 == v10 )
        goto LABEL_121;
    }
    if ( v46 >= v10 )
    {
LABEL_121:
      v8 = header_buf;
      v7 = chunked;
      header_buf = (_BYTE *)(getHTTPResponse + 1);
      chunked = v45;
      v19 = v6;
      goto LABEL_30;
    }
    v61 = *((unsigned __int8 *)&v81 + v46 + 0x6C);
    if ( v61 == 13 )
    {
      if ( ++v46 >= v10 )
        goto LABEL_121;
      v61 = *((unsigned __int8 *)&v81 + v46 + 0x6C);
    }
    if ( v61 != 10 )
      continue;
    break;
  }
  if ( v5 )
  {
    v62 = (unsigned __int8 *)header_buf_len;
    v7 = 0;
    v63 = (unsigned __int8 *)(header_buf_len + v5);
    do
    {
      v65 = *v62++;
      v64 = v65;
      v66 = 16 * v7;
      if ( (unsigned int)(v65 - 0x30) > 9 )
      {
        v67 = v66 - 0x57;
        v64 |= 0x20u;
      }
      else
      {
        v67 = v66 - 0x30;
      }
      v7 = v67 + v64;
    }
    while ( v62 != v63 );
    v5 = 0;
    ++v46;
    chunksize_buf[0] = 0;
    if ( v7 )
      goto LABEL_79;
  }
LABEL_115:
  v23 = v97;
  v19 = v6;
end_of_stream:
  free((void *)sa);
  *v23 = v19;
  if ( !v6 )
  {
    free(v4);
    return 0;
  }
  return v4;
}
