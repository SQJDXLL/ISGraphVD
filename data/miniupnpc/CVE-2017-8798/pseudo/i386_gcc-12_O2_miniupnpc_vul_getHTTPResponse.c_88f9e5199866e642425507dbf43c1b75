void *__cdecl getHTTPResponse(int s, int *size, int *status_code)
{
  signed int v3; // ecx
  char *v4; // eax
  char *v5; // esi
  int v6; // ebx
  int v7; // eax
  int v8; // edi
  char v9; // dl
  char v10; // dl
  char *v11; // ebp
  int v12; // edx
  int v13; // ebx
  int v14; // esi
  char v15; // al
  char *v16; // edi
  int v17; // esi
  int v18; // edi
  int v19; // esi
  int v20; // eax
  char *v21; // eax
  int v22; // edx
  char *v23; // ebp
  char *v24; // ebx
  size_t v25; // edi
  bool v26; // zf
  size_t v27; // ebp
  int v28; // esi
  int *v29; // esi
  int v30; // eax
  char *v31; // ecx
  char v32; // al
  const char *v33; // edx
  int *v34; // ebp
  const char *v35; // esi
  const char *v36; // edi
  int v37; // ecx
  const unsigned __int16 *v38; // ebp
  unsigned int v39; // eax
  unsigned int v40; // edi
  char *v41; // ebx
  char v42; // cl
  char v43; // bl
  char v44; // bl
  char *v45; // ebx
  int v46; // edx
  char *v47; // edi
  int v48; // eax
  int v49; // edx
  char *v50; // eax
  int v51; // eax
  int v52; // eax
  int v53; // edi
  char v54; // dl
  int *v56; // esi
  int *v57; // esi
  unsigned int content_buf_used; // [esp+0h] [ebp-89Ch]
  signed int chunksize; // [esp+4h] [ebp-898h]
  char *content_buf_used_0; // [esp+10h] [ebp-88Ch]
  unsigned int content_buf_used_0a; // [esp+10h] [ebp-88Ch]
  int header_buf_used_0; // [esp+18h] [ebp-884h]
  signed int header_buf_used_0a; // [esp+18h] [ebp-884h]
  unsigned int header_buf_used_0b; // [esp+18h] [ebp-884h]
  unsigned int content_buf_len; // [esp+1Ch] [ebp-880h]
  int nb; // [esp+20h] [ebp-87Ch]
  int n; // [esp+20h] [ebp-87Ch]
  int na; // [esp+20h] [ebp-87Ch]
  int content_length; // [esp+24h] [ebp-878h]
  unsigned int chunksize_buf_index; // [esp+28h] [ebp-874h]
  char *header_buf; // [esp+2Ch] [ebp-870h]
  int valuestart; // [esp+30h] [ebp-86Ch]
  int endofheaders; // [esp+34h] [ebp-868h]
  int chunked; // [esp+38h] [ebp-864h]
  unsigned int header_buf_len; // [esp+3Ch] [ebp-860h]
  int i; // [esp+40h] [ebp-85Ch]
  char *s1; // [esp+44h] [ebp-858h]
  int *v78; // [esp+48h] [ebp-854h]
  int *v79; // [esp+4Ch] [ebp-850h]
  char chunksize_buf[32]; // [esp+5Ch] [ebp-840h] BYREF
  char buf[2048]; // [esp+7Ch] [ebp-820h] BYREF
  unsigned int v83; // [esp+87Ch] [ebp-20h]

  v78 = status_code;
  v83 = __readgsdword(0x14u);
  if ( status_code )
    *status_code = -1;
  header_buf = (char *)malloc(0x800u);
  if ( !header_buf )
  {
    *size = -1;
    return 0;
  }
  content_buf_used_0 = (char *)malloc(0x800u);
  if ( !content_buf_used_0 )
  {
    free(header_buf);
    *size = -1;
    return 0;
  }
  chunksize_buf[0] = 0;
  chunksize_buf_index = 0;
  content_buf_used = 0;
  content_buf_len = 2048;
  valuestart = 0;
  header_buf_len = 2048;
  chunksize = 0;
  content_length = -1;
  chunked = 0;
  endofheaders = 0;
  v79 = size;
  do
  {
    while ( 1 )
    {
      while ( 1 )
      {
        v3 = receivedata(s, buf, 2048, 5000, 0);
        if ( v3 <= 0 )
          goto LABEL_140;
        if ( endofheaders )
        {
          if ( chunked )
            goto LABEL_33;
LABEL_47:
          v27 = content_buf_used + v3;
          v18 = content_buf_used + v3;
          if ( content_length <= 0 )
          {
            if ( content_buf_len < v27 )
            {
              if ( content_length < (int)v27 )
              {
                v28 = content_buf_used + v3;
                goto LABEL_111;
              }
LABEL_115:
              v28 = content_buf_used + v3;
              v27 = content_length;
              goto LABEL_111;
            }
          }
          else
          {
            if ( content_length < (int)v27 )
            {
              v28 = content_length;
              v18 = content_length;
              v3 = content_length - content_buf_used;
              if ( content_buf_len >= content_length )
              {
LABEL_50:
                memcpy(&content_buf_used_0[content_buf_used], buf, v3);
                content_buf_used = v28;
                chunked = 0;
                goto LABEL_51;
              }
              v28 = content_length;
              v27 = content_length;
LABEL_111:
              header_buf_used_0b = v3;
              v50 = (char *)realloc(content_buf_used_0, v27);
              if ( !v50 )
                goto LABEL_147;
              content_buf_len = v27;
              v3 = header_buf_used_0b;
              v18 = v28;
              content_buf_used_0 = v50;
              goto LABEL_50;
            }
            if ( content_buf_len < v27 )
              goto LABEL_115;
          }
          v28 = content_buf_used + v3;
          goto LABEL_50;
        }
        header_buf_used_0 = v3 + valuestart;
        if ( header_buf_len >= v3 + valuestart )
          goto LABEL_11;
        nb = v3;
        v4 = (char *)realloc(header_buf, v3 + valuestart);
        v3 = nb;
        if ( !v4 )
        {
          v57 = v79;
          free(header_buf);
          free(content_buf_used_0);
          *v57 = -1;
          return 0;
        }
        header_buf = v4;
        header_buf_len = header_buf_used_0;
LABEL_11:
        v5 = header_buf;
        memcpy(&header_buf[valuestart], buf, v3);
        v6 = header_buf_used_0 - 1;
        if ( header_buf_used_0 > 1 )
          break;
        valuestart = header_buf_used_0;
      }
      v7 = 0;
      do
      {
        v10 = v5[v7];
        if ( v10 == 13 )
        {
          if ( v5[v7 + 1] == 10 )
          {
            if ( v7 + 2 < header_buf_used_0 && v5[v7 + 2] == 13 )
            {
              if ( v7 + 3 < header_buf_used_0 && v5[v7 + 3] == 10 )
              {
                v26 = v7 == -4;
                v7 += 4;
                v9 = v26;
                v8 = v7;
              }
              else
              {
                v7 += 4;
                v8 = 0;
                v9 = 1;
              }
            }
            else
            {
              v7 += 3;
              v8 = 0;
              v9 = 1;
            }
LABEL_15:
            if ( v6 <= v7 )
              break;
            continue;
          }
        }
        else
        {
          if ( v10 != 10 )
          {
            ++v7;
            v8 = 0;
            v9 = 1;
            goto LABEL_15;
          }
          if ( v5[v7 + 1] == 10 )
          {
            v26 = v7 == -2;
            v7 += 2;
            v9 = v26;
            v8 = v7;
            goto LABEL_15;
          }
        }
        v7 += 2;
        v8 = 0;
        v9 = 1;
        if ( v6 <= v7 )
          break;
      }
      while ( v9 );
      if ( v8 )
        break;
      endofheaders = 0;
      valuestart = header_buf_used_0;
    }
    if ( v8 - 1 <= 0 )
      goto LABEL_31;
    valuestart = 0;
    v11 = header_buf;
    v12 = 0;
    v13 = 0;
    endofheaders = v8;
    v14 = 0;
    n = v8 - 1;
    while ( 2 )
    {
      v15 = v11[v14];
      v16 = (char *)(v14 + 1);
      if ( v13 <= 0 || v13 < v12 )
      {
        if ( v15 == 13 || v15 == 10 )
        {
          if ( !v13 && v78 )
          {
            if ( v14 <= 0 )
            {
              v31 = (char *)header_buf_used_0;
              goto LABEL_62;
            }
            v33 = v11 + 1;
            valuestart = (int)v11;
            v34 = v78;
            i = v14;
            s1 = (char *)(v14 + 1);
            v35 = &v33[v14];
            v36 = v33;
            while ( 1 )
            {
              if ( *(v36 - 1) == 32 )
              {
                if ( *v34 >= 0 )
                {
LABEL_57:
                  v11 = (char *)valuestart;
                  v14 = i;
                  v16 = s1;
                  goto LABEL_58;
                }
                *v34 = strtol(v36, 0, 10);
              }
              if ( v35 == ++v36 )
                goto LABEL_57;
            }
          }
          if ( v13 >= v12 || v12 >= valuestart )
            goto LABEL_58;
          s1 = &v11[v13];
          i = v12 - v13;
          if ( !strncasecmp(&v11[v13], "content-length", v12 - v13) )
          {
            content_length = strtol(&v11[valuestart], 0, 10);
            goto LABEL_58;
          }
          if ( strncasecmp(s1, "transfer-encoding", i) )
            goto LABEL_58;
          v26 = strncasecmp(&v11[valuestart], "chunked", 7u) == 0;
          v51 = 1;
          if ( !v26 )
            v51 = chunked;
          chunked = v51;
          v30 = header_buf_used_0;
          if ( header_buf_used_0 <= v14 )
            goto LABEL_123;
LABEL_59:
          v31 = (char *)v30;
          while ( 1 )
          {
LABEL_62:
            v32 = v11[v14];
            v13 = v14;
            v14 = (int)v16;
            if ( v32 != 13 && v32 != 10 )
            {
              valuestart = 0;
              v12 = v13;
              goto LABEL_29;
            }
            if ( v31 == v16 )
              break;
            ++v16;
          }
          v14 = v13 + 2;
          v13 = header_buf_used_0;
          valuestart = 0;
          v12 = header_buf_used_0;
        }
        else
        {
LABEL_28:
          v14 = (int)v16;
        }
      }
      else
      {
        if ( v15 != 58 )
        {
          if ( v15 != 10 && v15 != 13 )
            goto LABEL_28;
LABEL_58:
          v30 = header_buf_used_0;
          if ( header_buf_used_0 > v14 )
            goto LABEL_59;
LABEL_123:
          valuestart = 0;
          v12 = v14;
          v13 = v14;
          goto LABEL_28;
        }
        v52 = v14;
        v53 = v14;
        if ( n > v14 )
        {
          while ( 1 )
          {
            v54 = v11[v52 + 1];
            v53 = v52++;
            if ( v54 != 32 && v54 != 9 )
              break;
            if ( n == v52 )
            {
              v12 = v14;
              valuestart = n + 1;
              v14 = n + 1;
              goto LABEL_29;
            }
          }
        }
        v12 = v14;
        valuestart = v53 + 1;
        v14 = v53 + 1;
      }
LABEL_29:
      if ( n > v14 )
        continue;
      break;
    }
    v8 = endofheaders;
LABEL_31:
    v17 = header_buf_used_0 - v8;
    memcpy(buf, &header_buf[v8], header_buf_used_0 - v8);
    v3 = header_buf_used_0 - v8;
    valuestart = header_buf_used_0;
    endofheaders = v8;
    if ( !chunked )
      goto LABEL_47;
    v18 = content_buf_used;
    if ( v17 > 0 )
    {
LABEL_33:
      header_buf_used_0a = v3;
      v19 = 0;
      while ( 1 )
      {
        if ( chunksize )
          goto LABEL_40;
        v37 = header_buf_used_0a;
        if ( !chunksize_buf_index )
          break;
        while ( v19 < v37 )
        {
LABEL_80:
          na = v37;
          v38 = *_ctype_b_loc();
          v39 = chunksize_buf_index;
          v40 = na + chunksize_buf_index - v19;
          v41 = &buf[v19 - chunksize_buf_index];
          do
          {
            v42 = v41[v39];
            if ( (v38[v42] & 0x1000) == 0 )
              break;
            if ( v39 > 0x1E )
              break;
            ++v39;
            ++v19;
            chunksize_buf[v39 - 1] = v42;
            chunksize_buf[v39] = 0;
          }
          while ( v39 != v40 );
          v37 = na;
          if ( v19 >= na )
            goto LABEL_95;
          while ( 1 )
          {
            v43 = buf[v19];
            if ( v43 == 10 || v43 == 13 )
              break;
            if ( ++v19 == na )
              goto LABEL_106;
          }
          if ( v19 >= na )
            goto LABEL_106;
          v44 = buf[v19];
          if ( v44 == 13 )
          {
            if ( ++v19 >= na )
              goto LABEL_106;
            if ( buf[v19] == 10 )
            {
LABEL_98:
              if ( !v39 )
                goto LABEL_140;
              v45 = chunksize_buf;
              v46 = 0;
              v47 = &chunksize_buf[v39];
              do
              {
                while ( 1 )
                {
                  v48 = *v45;
                  v49 = 16 * v46;
                  if ( (unsigned __int8)(v48 - 48) > 9u )
                    break;
                  ++v45;
                  v46 = v49 + v48 - 48;
                  if ( v47 == v45 )
                    goto LABEL_103;
                }
                ++v45;
                v46 = v49 + (char)(v48 | 0x20) - 87;
              }
              while ( v47 != v45 );
LABEL_103:
              chunksize_buf[0] = 0;
              ++v19;
              if ( !v46 )
              {
LABEL_140:
                v29 = v79;
                v18 = content_buf_used;
                goto end_of_stream;
              }
              chunksize_buf_index = 0;
              chunksize = v46;
LABEL_40:
              v25 = header_buf_used_0a - v19;
              if ( header_buf_used_0a - v19 > chunksize )
                v25 = chunksize;
              v22 = content_buf_used + v25;
              if ( content_buf_len < content_buf_used + v25 )
              {
                v20 = content_length;
                if ( content_length < v22 )
                  v20 = content_buf_used + v25;
                content_buf_len = v20;
                v21 = (char *)realloc(content_buf_used_0, v20);
                v22 = content_buf_used + v25;
                v23 = v21;
                if ( !v21 )
                {
LABEL_147:
                  v56 = v79;
                  free(content_buf_used_0);
                  free(header_buf);
                  *v56 = -1;
                  return 0;
                }
              }
              else
              {
                v23 = content_buf_used_0;
              }
              content_buf_used_0a = v22;
              v24 = &buf[v19];
              v19 += v25;
              memcpy(&v23[content_buf_used], v24, v25);
              chunksize -= v25;
              content_buf_used = content_buf_used_0a;
              content_buf_used_0 = v23;
              goto LABEL_38;
            }
          }
          else if ( v44 == 10 )
          {
            goto LABEL_98;
          }
          chunksize_buf_index = v39;
          if ( !v39 )
            goto LABEL_76;
        }
LABEL_94:
        v39 = chunksize_buf_index;
LABEL_95:
        chunksize_buf_index = v39;
LABEL_38:
        if ( v19 >= header_buf_used_0a )
        {
          v39 = chunksize_buf_index;
LABEL_106:
          chunksize_buf_index = v39;
          v18 = content_buf_used;
          goto LABEL_51;
        }
      }
LABEL_76:
      if ( buf[v19] == 13 )
        ++v19;
      if ( v19 >= v37 )
      {
        chunksize = 0;
        v39 = 0;
        goto LABEL_106;
      }
      if ( buf[v19] == 10 && ++v19 >= v37 )
        goto LABEL_94;
      goto LABEL_80;
    }
LABEL_51:
    ;
  }
  while ( content_length <= 0 || content_length > v18 );
  v29 = v79;
end_of_stream:
  free(header_buf);
  *v29 = v18;
  if ( !content_buf_used )
  {
    free(content_buf_used_0);
    return 0;
  }
  return content_buf_used_0;
}
