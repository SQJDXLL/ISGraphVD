void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // rbp
  char *v4; // rdi
  int v5; // r14d
  int v6; // r13d
  int v7; // ebx
  int v8; // r12d
  char *v9; // rax
  int v10; // edx
  char v11; // cl
  int v12; // eax
  int v13; // ecx
  int v14; // r15d
  __int64 v15; // rax
  signed int j; // esi
  __int64 v17; // rbx
  char v18; // dl
  signed int v19; // edx
  char v20; // di
  const char *v21; // r15
  signed int k; // edx
  int v23; // eax
  int v24; // r15d
  const char *v25; // rdi
  bool v26; // zf
  int v27; // eax
  char v28; // al
  __int64 m; // r12
  char *v30; // r8
  unsigned int v31; // r15d
  const unsigned __int16 **v32; // rax
  const unsigned __int16 *v33; // rdx
  __int64 v34; // rax
  __int64 n; // rax
  char v36; // dl
  __int64 ii; // rdx
  int v38; // eax
  int v39; // r15d
  unsigned int v40; // edx
  unsigned int v41; // r9d
  int v42; // eax
  char *v43; // rax
  char *v44; // rax
  __int64 v45; // rsi
  unsigned int v46; // r12d
  bool v47; // cf
  int v48; // eax
  char *v49; // rax
  __int64 v50; // rax
  char *content_buf; // [rsp+8h] [rbp-8B0h]
  unsigned int content_buf_len; // [rsp+10h] [rbp-8A8h]
  unsigned int content_buf_used; // [rsp+14h] [rbp-8A4h]
  unsigned int v57; // [rsp+28h] [rbp-890h]
  unsigned int header_buf_used; // [rsp+2Ch] [rbp-88Ch]
  signed int header_buf_useda; // [rsp+2Ch] [rbp-88Ch]
  int chunked; // [rsp+30h] [rbp-888h]
  unsigned int v61; // [rsp+34h] [rbp-884h]
  unsigned int v62; // [rsp+34h] [rbp-884h]
  unsigned int header_buf_len; // [rsp+38h] [rbp-880h]
  char *i; // [rsp+40h] [rbp-878h]
  unsigned int ia; // [rsp+40h] [rbp-878h]
  signed int sp_0; // [rsp+48h] [rbp-870h]
  int sp_0a; // [rsp+48h] [rbp-870h]
  char *sp_0b; // [rsp+48h] [rbp-870h]
  char chunksize_buf[32]; // [rsp+58h] [rbp-860h]
  char buf[2048]; // [rsp+78h] [rbp-840h] BYREF
  unsigned __int64 v72; // [rsp+878h] [rbp-40h]

  v72 = __readfsqword(0x28u);
  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800uLL);
  if ( !v3 )
    goto LABEL_7;
  content_buf = (char *)malloc(0x800uLL);
  if ( !content_buf )
    goto LABEL_5;
  chunksize_buf[0] = 0;
  v5 = -1;
  v6 = 0;
  v57 = 0;
  content_buf_used = 0;
  content_buf_len = 2048;
  header_buf_used = 0;
  header_buf_len = 2048;
  v61 = 0;
  chunked = 0;
  while ( 1 )
  {
    v7 = receivedata((unsigned int)s, buf, 2048LL, 5000LL, 0LL);
    if ( v7 <= 0 )
      break;
    if ( v6 )
      goto LABEL_67;
    v8 = v7 + header_buf_used;
    if ( header_buf_len < v7 + header_buf_used )
    {
      v9 = (char *)realloc(v3, (unsigned int)v8);
      if ( !v9 )
      {
        free(v3);
        v4 = content_buf;
        goto LABEL_6;
      }
      header_buf_len = v7 + header_buf_used;
      v3 = v9;
    }
    v10 = 0;
    v6 = 0;
    qmemcpy(&v3[header_buf_used], buf, (unsigned int)v7);
    while ( v8 - 1 > v10 && !v6 )
    {
      v11 = v3[v10];
      v12 = v10 + 1;
      if ( v11 == 13 )
      {
        v6 = 0;
        if ( v3[v12] == 10 )
        {
          v12 = v10 + 2;
          if ( v8 > v10 + 2 && v3[v12] == 13 )
          {
            v12 = v10 + 3;
            if ( v8 > v10 + 3 && v3[v12] == 10 )
              v6 = v10 + 4;
          }
        }
      }
      else if ( v11 == 10 )
      {
        v6 = 0;
        if ( v3[v12] == 10 )
          v6 = v10 + 2;
      }
      else
      {
        v12 = v10;
        v6 = 0;
      }
      v10 = v12 + 1;
    }
    header_buf_used += v7;
    if ( v6 )
    {
      v13 = 0;
      v14 = 0;
      v15 = 0LL;
      header_buf_useda = v6 - 1;
      for ( j = 0; header_buf_useda > j; j = v19 + 1 )
      {
        v17 = j;
        v18 = v3[j];
        if ( (int)v15 > 0 && (int)v15 >= v14 && v18 == 58 )
        {
          do
          {
            v19 = v17;
            v13 = v17 + 1;
            if ( header_buf_useda <= (int)v17 )
              break;
            v20 = v3[++v17];
          }
          while ( v20 == 32 || v20 == 9 );
        }
        else if ( v18 == 13 || v18 == 10 )
        {
          if ( !(_DWORD)v15 && status_code )
          {
            v21 = v3 + 1;
            for ( k = 0; ; ++k )
            {
              if ( j <= k )
                goto LABEL_59;
              if ( *(v21 - 1) == 32 )
              {
                sp_0 = k;
                if ( *status_code >= 0 )
                  goto LABEL_59;
                v23 = atoi(v21);
                k = sp_0;
                *status_code = v23;
              }
              ++v21;
            }
          }
          if ( (int)v15 < v14 )
          {
            sp_0a = v13;
            if ( v14 < v13 )
            {
              v24 = v14 - v15;
              v25 = &v3[v15];
              if ( !strncasecmp(&v3[v15], "content-length", v24) )
              {
                v5 = atoi(&v3[sp_0a]);
              }
              else if ( !strncasecmp(v25, "transfer-encoding", v24) )
              {
                v26 = strncasecmp(&v3[sp_0a], "chunked", 7uLL) == 0;
                v27 = 1;
                if ( !v26 )
                  v27 = chunked;
                chunked = v27;
              }
            }
          }
LABEL_59:
          while ( 1 )
          {
            v19 = v17;
            if ( v8 <= (int)v17 )
              break;
            v28 = v3[v17++];
            if ( v28 != 13 && v28 != 10 )
            {
              v13 = 0;
              j = v19;
              v15 = v19;
              goto LABEL_65;
            }
          }
          v13 = 0;
          j = v17;
          v15 = (int)v17;
        }
        else
        {
          v19 = j;
          j = v14;
        }
LABEL_65:
        v14 = j;
      }
      header_buf_used = v8;
      v7 = v8 - v6;
      qmemcpy(buf, &v3[v6], v8 - v6);
LABEL_67:
      if ( chunked )
      {
        LODWORD(m) = 0;
        v30 = buf;
        while ( 1 )
        {
          while ( 1 )
          {
            if ( v7 <= (int)m )
              goto LABEL_123;
            v31 = v61;
            if ( !v61 )
              break;
LABEL_98:
            v40 = v7 - m;
            if ( v7 - (int)m > v31 )
              v40 = v31;
            v41 = content_buf_used + v40;
            if ( content_buf_len < content_buf_used + v40 )
            {
              content_buf_len = content_buf_used + v40;
              if ( v5 >= 0 )
              {
                v42 = content_buf_used + v40;
                if ( v5 >= v41 )
                  v42 = v5;
                content_buf_len = v42;
              }
              sp_0b = v30;
              ia = v40;
              v62 = content_buf_used + v40;
              v43 = (char *)realloc(content_buf, content_buf_len);
              v41 = v62;
              v40 = ia;
              v30 = sp_0b;
              if ( !v43 )
                goto LABEL_120;
              content_buf = v43;
            }
            v61 = v31 - v40;
            v44 = &content_buf[content_buf_used];
            v45 = (int)m;
            content_buf_used = v41;
            LODWORD(m) = v40 + m;
            qmemcpy(v44, &v30[v45], v40);
          }
          if ( !v57 )
          {
            if ( buf[(int)m] != 13 || (LODWORD(m) = m + 1, v7 > (int)m) )
            {
              if ( buf[(int)m] == 10 )
                LODWORD(m) = m + 1;
            }
          }
          for ( m = (int)m; v7 > (int)m; ++m )
          {
            i = v30;
            v32 = _ctype_b_loc();
            v30 = i;
            v33 = *v32;
            v34 = i[m];
            if ( (v33[v34] & 0x1000) == 0 || v57 > 0x1E )
              break;
            chunksize_buf[v57++] = v34;
            chunksize_buf[v57] = 0;
          }
          for ( n = (int)m; v7 > (int)n; ++n )
          {
            v36 = v30[n];
            if ( v36 == 13 || v36 == 10 )
              break;
          }
          LODWORD(m) = n;
          if ( v7 <= (int)n )
            goto LABEL_123;
          if ( buf[(int)n] == 13 )
          {
            LODWORD(m) = n + 1;
            if ( v7 <= (int)n + 1 )
              goto LABEL_123;
          }
          if ( buf[(int)m] == 10 )
          {
            v31 = 0;
            for ( ii = 0LL; (unsigned int)ii < v57; ++ii )
            {
              v38 = chunksize_buf[ii];
              v39 = 16 * v31;
              if ( (unsigned __int8)(chunksize_buf[ii] - 48) > 9u )
                v31 = v39 + (char)(v38 | 0x20) - 87;
              else
                v31 = v39 + v38 - 48;
            }
            chunksize_buf[0] = 0;
            LODWORD(m) = m + 1;
            if ( !v31 )
              goto end_of_stream;
            v57 = 0;
            goto LABEL_98;
          }
        }
      }
      v46 = v7 + content_buf_used;
      if ( v5 <= 0 )
      {
        if ( content_buf_len >= v46 )
          goto LABEL_122;
        content_buf_len = v7 + content_buf_used;
        if ( v5 )
          goto LABEL_119;
      }
      else
      {
        if ( v5 < v46 )
        {
          v46 = v5;
          v7 = v5 - content_buf_used;
          v47 = content_buf_len < v5;
        }
        else
        {
          v47 = content_buf_len < v46;
        }
        if ( !v47 )
          goto LABEL_122;
      }
      v48 = v46;
      if ( v5 >= v46 )
        v48 = v5;
      content_buf_len = v48;
LABEL_119:
      v49 = (char *)realloc(content_buf, content_buf_len);
      if ( !v49 )
      {
LABEL_120:
        free(content_buf);
LABEL_5:
        v4 = v3;
LABEL_6:
        free(v4);
LABEL_7:
        *size = -1;
        return 0LL;
      }
      content_buf = v49;
LABEL_122:
      v50 = content_buf_used;
      content_buf_used = v46;
      qmemcpy(&content_buf[v50], buf, v7);
LABEL_123:
      if ( v5 > 0 && content_buf_used >= v5 )
        break;
    }
  }
end_of_stream:
  free(v3);
  *size = content_buf_used;
  if ( !content_buf_used )
  {
    free(content_buf);
    return 0LL;
  }
  return content_buf;
}
