void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v4; // r9
  int v5; // r10
  int v6; // r6
  int *v7; // r6
  unsigned int v8; // r3
  int *v9; // r5
  _BOOL4 v10; // r2
  int v11; // r2
  char *v12; // r10
  signed int v13; // r7
  signed int v14; // r3
  signed int v15; // r4
  signed int v16; // r5
  int *v17; // r11
  char *v18; // r2
  char *v19; // r0
  int v20; // r1
  int v21; // t1
  bool v22; // zf
  int v23; // r2
  bool v24; // zf
  bool v25; // cc
  int v26; // r2
  bool v27; // zf
  char *v28; // r2
  int v29; // r3
  int v30; // t1
  bool v31; // zf
  _BOOL4 v32; // r2
  bool v33; // cc
  const char *v34; // r6
  size_t v35; // r7
  int v36; // r0
  char *v37; // r3
  const char *v38; // r5
  int v39; // t1
  signed int v40; // r7
  signed int v41; // r4
  unsigned int v42; // r5
  unsigned int v43; // r10
  int v44; // r9
  const unsigned __int16 *v45; // r8
  int v46; // r0
  _BYTE *v47; // r3
  unsigned int v48; // lr
  char v49; // r1
  int v50; // t1
  int v51; // r2
  int v52; // r3
  int v53; // t1
  bool v54; // zf
  int v55; // r8
  unsigned __int8 *v56; // r2
  unsigned __int8 *v57; // r5
  int v58; // r3
  int v59; // r1
  int v60; // t1
  int *v61; // r9
  int *v62; // r6
  size_t v63; // r11
  void *v64; // r0
  int *v65; // r6
  char *v66; // r4
  int *v67; // r6
  int v68; // r3
  size_t v70; // r5
  signed int v71; // r7
  bool v72; // cc
  int v73; // r0
  int v74; // r8
  char *v75; // r0
  int v76; // [sp+0h] [bp-898h] BYREF
  int endofheaders; // [sp+8h] [bp-890h]
  int content_length; // [sp+Ch] [bp-88Ch]
  unsigned int content_buf_used; // [sp+10h] [bp-888h]
  unsigned int content_buf_len; // [sp+14h] [bp-884h]
  int sa; // [sp+18h] [bp-880h]
  size_t v82; // [sp+1Ch] [bp-87Ch]
  unsigned int header_buf_len; // [sp+20h] [bp-878h]
  int chunked; // [sp+24h] [bp-874h]
  unsigned int chunksize_buf_index; // [sp+28h] [bp-870h]
  char *header_buf; // [sp+2Ch] [bp-86Ch]
  unsigned int header_buf_used; // [sp+30h] [bp-868h]
  int *status_codea; // [sp+34h] [bp-864h]
  int v89; // [sp+38h] [bp-860h]
  int *sizea; // [sp+3Ch] [bp-85Ch]
  char *s2; // [sp+40h] [bp-858h]
  int *v92; // [sp+44h] [bp-854h]
  char chunksize_buf[32]; // [sp+4Ch] [bp-84Ch] BYREF
  char buf[2048]; // [sp+6Ch] [bp-82Ch] BYREF

  header_buf_len = s;
  sizea = status_code;
  if ( status_code )
    *status_code = -1;
  v4 = (char *)malloc(0x800u);
  if ( !v4 )
  {
    *size = -1;
    return 0;
  }
  content_length = (int)malloc(0x800u);
  if ( !content_length )
  {
    free(v4);
    *size = -1;
    return (void *)content_length;
  }
  chunksize_buf[0] = 0;
  sa = 0;
  v82 = 2048;
  v5 = 0;
  chunksize_buf_index = 2048;
  content_buf_len = -1;
  header_buf = 0;
  content_buf_used = 0;
  endofheaders = (int)buf;
  s2 = "content-length";
  header_buf_used = 0;
  v92 = size;
  v6 = 0;
LABEL_167:
  while ( 2 )
  {
    v73 = receivedata(header_buf_len, endofheaders, 2048, 5000, 0);
    v40 = v73;
    if ( v73 > 0 )
    {
      if ( content_buf_used )
      {
        if ( !header_buf )
        {
LABEL_154:
          if ( (int)content_buf_len <= 0 )
            goto LABEL_157;
          v70 = v40;
          v71 = v40 + sa;
          if ( v71 <= (int)content_buf_len )
          {
            if ( v71 > v82 )
              goto LABEL_152;
            v66 = (char *)content_length;
          }
          else
          {
            v40 = content_buf_len - sa;
LABEL_157:
            v70 = v40;
            v71 = v40 + sa;
            if ( v71 <= v82 )
            {
              v66 = (char *)content_length;
            }
            else
            {
              if ( v71 > (int)content_buf_len )
              {
                v82 = v71;
                goto LABEL_161;
              }
LABEL_152:
              v82 = content_buf_len;
LABEL_161:
              v66 = (char *)realloc((void *)content_length, v82);
              if ( !v66 )
              {
                v65 = v92;
                free((void *)content_length);
                free(v4);
                *v65 = -1;
                return 0;
              }
            }
          }
          memcpy(&v66[sa], (const void *)endofheaders, v70);
          sa = v71;
          content_length = (int)v66;
          goto LABEL_163;
        }
LABEL_91:
        v41 = 0;
        chunked = (int)&chunksize_buf[4];
        v42 = header_buf_used;
        v89 = v5;
        v43 = v82;
        status_codea = (int *)v4;
        v44 = sa;
        while ( 2 )
        {
          if ( v6 )
          {
LABEL_128:
            v63 = v40 - v41;
            if ( v40 - v41 >= v6 )
              v63 = v6;
            v55 = v63 + v44;
            if ( v63 + v44 > v43 )
            {
              if ( (int)content_buf_len < v55 )
                v43 = v63 + v44;
              else
                v43 = content_buf_len;
              v64 = realloc((void *)content_length, v43);
              if ( !v64 )
              {
                v61 = status_codea;
                v62 = v92;
                free((void *)content_length);
                free(v61);
                *v62 = -1;
                return 0;
              }
              content_length = (int)v64;
            }
            memcpy((void *)(content_length + v44), (const void *)(endofheaders + v41), v63);
            v41 += v63;
            v6 -= v63;
            if ( v40 <= v41 )
            {
              v82 = v43;
              header_buf_used = v42;
              v5 = v89;
              v4 = (char *)status_codea;
              sa = v55;
              goto LABEL_163;
            }
            goto LABEL_126;
          }
          if ( v42 )
          {
LABEL_98:
            if ( v40 <= v41 )
            {
              v82 = v43;
              sa = v44;
              header_buf_used = v42;
              v5 = v89;
              v4 = (char *)status_codea;
              goto LABEL_163;
            }
          }
          else
          {
            if ( *((_BYTE *)&v76 + v41 + 0x6C) == 13 )
              ++v41;
            if ( v40 <= v41 )
            {
              v82 = v43;
              sa = v44;
              header_buf_used = 0;
              v5 = v89;
              v4 = (char *)status_codea;
              goto LABEL_163;
            }
            if ( *((_BYTE *)&v76 + v41 + 0x6C) == 10 )
            {
              ++v41;
              goto LABEL_98;
            }
          }
          v45 = *_ctype_b_loc();
          v46 = endofheaders + v41 - 1;
          v47 = (_BYTE *)(chunked - 4 + v42);
          v48 = v40 + v42 - v41;
          while ( 1 )
          {
            v50 = *(unsigned __int8 *)++v46;
            v49 = v50;
            if ( ((v42 <= 0x1E) & (v45[v50] >> 0xC)) == 0 )
              break;
            ++v42;
            *v47 = v49;
            *++v47 = 0;
            ++v41;
            if ( v42 == v48 )
            {
              v42 = v48;
              break;
            }
          }
          if ( v41 >= v40 )
          {
            v82 = v43;
            sa = v44;
            header_buf_used = v42;
            v5 = v89;
            v4 = (char *)status_codea;
            goto LABEL_163;
          }
          v51 = endofheaders + v41 - 1;
          while ( 1 )
          {
            v53 = *(unsigned __int8 *)++v51;
            v52 = v53;
            v54 = v53 == 10;
            if ( v53 != 10 )
              v54 = v52 == 13;
            if ( v54 )
              break;
            if ( v40 == ++v41 )
            {
              v82 = v43;
              sa = v44;
              header_buf_used = v42;
              v5 = v89;
              v4 = (char *)status_codea;
              goto LABEL_163;
            }
          }
          if ( v40 <= v41 )
          {
            v82 = v43;
            sa = v44;
            header_buf_used = v42;
            v5 = v89;
            v4 = (char *)status_codea;
            goto LABEL_163;
          }
          if ( *((_BYTE *)&v76 + v41 + 0x6C) == 13 && v40 <= ++v41 )
          {
            v82 = v43;
            sa = v44;
            header_buf_used = v42;
            v5 = v89;
            v4 = (char *)status_codea;
            goto LABEL_163;
          }
          if ( *((_BYTE *)&v76 + v41 + 0x6C) == 10 )
          {
            if ( !v42 )
            {
              sa = v44;
              v4 = (char *)status_codea;
              v67 = v92;
              goto end_of_stream;
            }
            v56 = (unsigned __int8 *)(chunked - 4);
            v57 = (unsigned __int8 *)(v42 + chunked - 4);
            v58 = 0;
            do
            {
              v60 = *v56++;
              v59 = v60;
              if ( (unsigned int)(v60 - 0x30) > 9 )
                v58 = (v59 | 0x20) + 16 * v58 - 0x57;
              else
                v58 = v59 + 16 * v58 - 0x30;
            }
            while ( v56 != v57 );
            chunksize_buf[0] = 0;
            ++v41;
            if ( !v58 )
            {
              sa = v44;
              v4 = (char *)status_codea;
              v67 = v92;
              goto end_of_stream;
            }
            v42 = 0;
            v6 = v58;
            goto LABEL_128;
          }
          v55 = v44;
LABEL_126:
          v44 = v55;
          continue;
        }
      }
      v74 = v73 + v5;
      if ( v73 + v5 > chunksize_buf_index )
      {
        v75 = (char *)realloc(v4, v73 + v5);
        if ( !v75 )
        {
          v7 = v92;
          free(v4);
          free((void *)content_length);
          *v7 = -1;
          return 0;
        }
        chunksize_buf_index = v40 + v5;
        v4 = v75;
      }
      memcpy(&v4[v5], (const void *)endofheaders, v40);
      if ( v74 <= 1 )
      {
        v5 += v40;
        continue;
      }
      v8 = content_buf_used;
      do
      {
        v11 = (unsigned __int8)v4[v8];
        if ( v11 == 13 )
        {
          if ( v4[v8 + 1] == 10 )
          {
            if ( (int)(v8 + 2) >= v74 )
            {
              v8 += 2;
              v9 = (int *)content_buf_used;
            }
            else if ( v4[v8 + 2] == 13 )
            {
              if ( (int)(v8 + 3) >= v74 )
              {
                v8 += 3;
                v9 = (int *)content_buf_used;
              }
              else if ( v4[v8 + 3] == 10 )
              {
                v9 = (int *)(v8 + 4);
                v8 += 3;
              }
              else
              {
                v8 += 3;
                v9 = (int *)content_buf_used;
              }
            }
            else
            {
              v8 += 2;
              v9 = (int *)content_buf_used;
            }
          }
          else
          {
            ++v8;
            v9 = (int *)content_buf_used;
          }
        }
        else if ( v11 == 10 )
        {
          if ( v4[v8 + 1] == 10 )
          {
            v9 = (int *)(v8 + 2);
            ++v8;
          }
          else
          {
            ++v8;
            v9 = (int *)content_buf_used;
          }
        }
        else
        {
          v9 = (int *)content_buf_used;
        }
        v10 = (int)++v8 < v74 - 1;
        if ( v9 )
          v10 = 0;
      }
      while ( v10 );
      if ( !v9 )
      {
        v5 += v40;
        content_buf_used = 0;
        continue;
      }
      v12 = (char *)v9 + -0x1;
      if ( (int)((int)v9 + -0x1) <= 0 )
        goto LABEL_86;
      v13 = content_buf_used;
      v14 = content_buf_used;
      v15 = content_buf_used;
      chunked = content_buf_used;
      status_codea = v9;
      v16 = content_buf_used;
      v89 = v6;
      v17 = sizea;
      while ( 1 )
      {
        v25 = v14 <= v13;
        if ( v14 >= v13 )
          v25 = v14 <= 0;
        if ( v25 )
        {
          v23 = (unsigned __int8)v4[v15];
          v24 = v23 == 10;
          if ( v23 != 10 )
            v24 = v23 == 13;
          if ( v24 )
          {
            v32 = v14 == 0;
            if ( !v17 )
              v32 = 0;
            if ( v32 )
            {
              if ( v15 > 0 )
              {
                v38 = v4;
                do
                {
                  v39 = *(unsigned __int8 *)v38++;
                  if ( v39 == 32 )
                  {
                    if ( *v17 >= 0 )
                      break;
                    *v17 = strtol(v38, 0u, 10);
                  }
                }
                while ( v38 != &v4[v15] );
              }
            }
            else
            {
              v33 = v14 < v13;
              if ( v14 < v13 )
                v33 = v13 < v16;
              if ( v33 )
              {
                v34 = &v4[v14];
                v35 = v13 - v14;
                if ( !strncasecmp(&v4[v14], s2, v35) )
                {
                  content_buf_len = strtol(&v4[v16], 0u, 10);
                }
                else if ( !strncasecmp(v34, "transfer-encoding", v35) )
                {
                  v36 = strncasecmp(&v4[v16], "chunked", 7u);
                  v37 = header_buf;
                  if ( !v36 )
                    v37 = (_BYTE *)(getHTTPResponse + 1);
                  header_buf = v37;
                }
              }
            }
LABEL_56:
            if ( v74 <= v15 )
            {
              v16 = content_buf_used;
              v13 = v15;
              v14 = v15;
            }
            else
            {
              v28 = &v4[v15 - 1];
              do
              {
                v30 = (unsigned __int8)*++v28;
                v29 = v30;
                v31 = v30 == 10;
                if ( v30 != 10 )
                  v31 = v29 == 13;
                if ( !v31 )
                {
                  v16 = chunked;
                  v13 = v15;
                  v14 = v15;
                  goto LABEL_47;
                }
                ++v15;
              }
              while ( v15 != v74 );
              v16 = chunked;
              v13 = v74;
              v14 = v74;
              v15 = v74;
            }
          }
        }
        else
        {
          v19 = &v4[v15];
          v26 = (unsigned __int8)v4[v15];
          if ( v26 == 58 )
          {
            if ( (int)v12 <= v15 )
            {
              v18 = (char *)v15;
            }
            else
            {
              v18 = (char *)v15;
              while ( 1 )
              {
                v21 = (unsigned __int8)*++v19;
                v20 = v21;
                v22 = v21 == 9;
                if ( v21 != 9 )
                  v22 = v20 == 32;
                if ( !v22 )
                  break;
                if ( ++v18 == (char *)status_codea + -0x1 )
                {
                  v18 = (char *)status_codea + -0x1;
                  break;
                }
              }
            }
            v16 = (signed int)(v18 + 1);
            v13 = v15;
            v15 = (signed int)v18;
            goto LABEL_47;
          }
          v27 = v26 == 10;
          if ( v26 != 10 )
            v27 = v26 == 13;
          if ( v27 )
            goto LABEL_56;
        }
LABEL_47:
        if ( ++v15 >= (int)v12 )
        {
          v9 = status_codea;
          v6 = v89;
LABEL_86:
          v40 = v74 - (_DWORD)v9;
          memcpy((void *)endofheaders, (char *)v9 + (_DWORD)v4, v74 - (_DWORD)v9);
          if ( !header_buf )
          {
            v5 = v74;
            content_buf_used = (unsigned int)v9;
            goto LABEL_154;
          }
          if ( v40 > 0 )
          {
            v5 = v74;
            content_buf_used = (unsigned int)v9;
            goto LABEL_91;
          }
          v5 = v74;
          content_buf_used = (unsigned int)v9;
LABEL_163:
          v72 = sa <= (int)content_buf_len;
          if ( sa >= (int)content_buf_len )
            v72 = (int)content_buf_len <= 0;
          if ( !v72 )
          {
            v67 = v92;
            goto end_of_stream;
          }
          goto LABEL_167;
        }
      }
    }
    break;
  }
  v67 = v92;
end_of_stream:
  free(v4);
  v68 = sa;
  *v67 = sa;
  if ( !v68 )
  {
    free((void *)content_length);
    return 0;
  }
  return (void *)content_length;
}
