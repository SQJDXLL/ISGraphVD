void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v4; // r5
  char *v5; // r0
  void *v6; // r0
  unsigned int v7; // r7
  char *v8; // r6
  signed int v9; // r10
  signed int v10; // r9
  int *v11; // r4
  int v12; // r0
  signed int v13; // r8
  signed int v14; // r11
  char *v15; // r0
  int v16; // r3
  int v17; // r4
  int v18; // r3
  signed int v19; // r2
  signed int i; // r9
  signed int v21; // r4
  int v22; // r1
  int v23; // r2
  int *v24; // r3
  bool v25; // cc
  int v26; // r0
  signed int v27; // r8
  char *v28; // r3
  signed int v29; // r1
  bool v30; // zf
  _BOOL4 v31; // r1
  const char *v32; // r4
  bool v33; // cc
  const char *v34; // r9
  int v35; // r0
  int v36; // t1
  signed int v37; // r12
  bool v38; // zf
  int v39; // t1
  int v40; // r0
  int v41; // r4
  bool v42; // zf
  int v43; // r0
  int v44; // r3
  signed int v45; // r9
  char *v46; // r9
  const unsigned __int16 **v47; // r0
  int v48; // r1
  int v49; // r3
  bool v50; // zf
  int v51; // r2
  char *v52; // r1
  bool v53; // cc
  int v54; // r3
  int v55; // t1
  int v56; // r9
  int v57; // r9
  size_t v58; // r2
  signed int v59; // r3
  int *v60; // r2
  char *v61; // r0
  unsigned int v62; // r2
  int *v63; // r3
  char *v64; // r4
  int v66; // [sp+0h] [bp-8A0h] BYREF
  unsigned int content_buf_len; // [sp+Ch] [bp-894h]
  int *sizea; // [sp+10h] [bp-890h]
  int *status_codea; // [sp+14h] [bp-88Ch]
  unsigned int chunksize; // [sp+18h] [bp-888h]
  int chunked; // [sp+1Ch] [bp-884h]
  unsigned int content_buf_used; // [sp+20h] [bp-880h]
  unsigned int header_buf_len; // [sp+24h] [bp-87Ch]
  size_t v74; // [sp+28h] [bp-878h]
  unsigned int v75; // [sp+2Ch] [bp-874h]
  char *v76; // [sp+30h] [bp-870h]
  size_t v77; // [sp+34h] [bp-86Ch]
  char chunksize_buf[32]; // [sp+3Ch] [bp-864h] BYREF
  char buf[2048]; // [sp+5Ch] [bp-844h] BYREF

  chunksize = (unsigned int)size;
  chunked = (int)status_code;
  if ( status_code )
    *status_code = -1;
  v4 = (char *)malloc(0x800u);
  if ( !v4 )
  {
    *(_DWORD *)chunksize = -1;
    return v4;
  }
  v5 = (char *)malloc(0x800u);
  if ( !v5 )
    goto LABEL_6;
  v7 = 0;
  status_codea = (_DWORD *)&loc_800;
  v75 = 2048;
  v8 = v4;
  content_buf_len = -1;
  v4 = v5;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  chunksize_buf[0] = 0;
  content_buf_used = 0;
  header_buf_len = 0;
  v76 = chunksize_buf;
  while ( 2 )
  {
    v12 = receivedata(s, buf, 2048, 5000, 0);
    v13 = v12;
    if ( v12 <= 0 )
      break;
    if ( v11 )
    {
      v14 = v10;
      sizea = v11;
      goto LABEL_22;
    }
    v14 = v12 + v10;
    if ( v12 + v10 > v75 )
    {
      v15 = (char *)realloc(v8, v12 + v10);
      if ( !v15 )
      {
        free(v8);
LABEL_6:
        v6 = v4;
LABEL_7:
        free(v6);
        v4 = 0;
        *(_DWORD *)chunksize = -1;
        return v4;
      }
      v8 = v15;
      v75 = v13 + v10;
    }
    memcpy(&v8[v10], buf, v13);
    v16 = 0;
    sizea = 0;
    while ( v14 - 1 > v16 )
    {
      if ( sizea )
        goto LABEL_19;
      v22 = (unsigned __int8)v8[v16];
      v23 = v16 + 1;
      if ( v22 == 13 )
      {
        if ( v8[v23] == 10 )
        {
          v23 = v16 + 2;
          if ( v14 > v16 + 2 && v8[v23] == 13 )
          {
            v23 = v16 + 3;
            if ( v14 > v16 + 3 && v8[v23] == 10 )
            {
              v24 = (int *)(v16 + 4);
LABEL_36:
              sizea = v24;
            }
          }
        }
      }
      else
      {
        if ( v22 != 10 )
        {
          v23 = v16;
          goto LABEL_31;
        }
        if ( v8[v23] == 10 )
        {
          v24 = (int *)(v16 + 2);
          goto LABEL_36;
        }
      }
LABEL_31:
      v16 = v23 + 1;
    }
    if ( !sizea )
      goto LABEL_38;
LABEL_19:
    v17 = 0;
    v74 = (size_t)sizea + -0x1;
    v18 = 0;
    v19 = 0;
    for ( i = 0; (int)v74 > i; ++i )
    {
      v25 = v19 <= v18;
      if ( v19 >= v18 )
        v25 = v19 <= 0;
      v26 = (unsigned __int8)v8[i];
      v27 = i;
      if ( v25 || v26 != 58 )
      {
        v30 = v26 == 10;
        if ( v26 != 10 )
          v30 = v26 == 13;
        if ( v30 )
        {
          v31 = v19 == 0;
          if ( !chunked )
            v31 = 0;
          if ( v31 )
          {
            v32 = v8;
            while ( v32 - v8 < i )
            {
              v39 = *(unsigned __int8 *)v32++;
              if ( v39 == 32 )
              {
                if ( *(int *)chunked >= 0 )
                  break;
                v40 = atoi(v32);
                *(_DWORD *)chunked = v40;
              }
            }
          }
          else
          {
            v33 = v19 < v18;
            if ( v19 < v18 )
              v33 = v18 < v17;
            if ( v33 )
            {
              v34 = &v8[v19];
              v77 = v18 - v19;
              if ( !strncasecmp(&v8[v19], "content-length", v18 - v19) )
              {
                content_buf_len = atoi(&v8[v17]);
              }
              else if ( !strncasecmp(v34, "transfer-encoding", v77) )
              {
                v43 = strncasecmp(&v8[v17], "chunked", 7u);
                v44 = header_buf_len;
                if ( !v43 )
                  v44 = 1;
                header_buf_len = v44;
              }
            }
          }
          while ( 1 )
          {
            i = v27;
            if ( v14 <= v27 )
              break;
            v41 = (unsigned __int8)v8[v27++];
            v42 = v41 == 10;
            if ( v41 != 10 )
              v42 = v41 == 13;
            v17 = v42;
            if ( !v42 )
              goto LABEL_76;
          }
          v17 = 0;
LABEL_76:
          v18 = i;
          v19 = i;
        }
      }
      else
      {
        v28 = &v8[i];
        v29 = i;
        while ( 1 )
        {
          v36 = (unsigned __int8)*++v28;
          v35 = v36;
          v37 = v29;
          v38 = v36 == 9;
          if ( v36 != 9 )
            v38 = v35 == 32;
          ++v29;
          if ( !v38 )
            break;
          if ( (int)v74 <= v29 )
            goto LABEL_63;
        }
        v29 = v37;
LABEL_63:
        v18 = i;
        v17 = v29 + 1;
        i = v29;
      }
    }
    v13 = v14 - (_DWORD)sizea;
    memcpy(buf, (char *)sizea + (_DWORD)v8, v14 - (_DWORD)sizea);
LABEL_22:
    if ( !header_buf_len )
    {
      if ( (int)content_buf_len > 0 && (int)content_buf_len < v13 + v9 )
        v13 = content_buf_len - v9;
      if ( v13 + v9 <= (unsigned int)status_codea )
      {
        v64 = v4;
      }
      else
      {
        v63 = (int *)content_buf_len;
        if ( (int)content_buf_len < v13 + v9 )
          v63 = (int *)(v13 + v9);
        status_codea = v63;
        v64 = (char *)realloc(v4, (size_t)v63);
        if ( !v64 )
        {
          free(v4);
          v6 = v8;
          goto LABEL_7;
        }
      }
      memcpy(&v64[v9], buf, v13);
      v9 += v13;
      v4 = v64;
      goto LABEL_103;
    }
    v21 = 0;
LABEL_102:
    while ( v13 > v21 )
    {
      if ( !content_buf_used )
      {
        if ( !v7 )
        {
          if ( *((_BYTE *)&v66 + v21 + 0x5C) == 13 && v13 <= ++v21 )
            break;
          if ( *((_BYTE *)&v66 + v21 + 0x5C) == 10 )
            ++v21;
        }
        v46 = &v76[v7];
        while ( v13 > v21 )
        {
          v47 = _ctype_b_loc();
          v48 = (unsigned __int8)buf[v21];
          if ( ((v7 <= 0x1E) & ((*v47)[v48] >> 0xC)) == 0 )
          {
            while ( v13 > v21 )
            {
              v49 = (unsigned __int8)buf[v21];
              v50 = v49 == 10;
              if ( v49 != 10 )
                v50 = v49 == 13;
              if ( v50 )
              {
                if ( *((_BYTE *)&v66 + v21 + 0x5C) == 13 && v13 <= ++v21 )
                  goto LABEL_103;
                if ( *((_BYTE *)&v66 + v21 + 0x5C) != 10 )
                  goto LABEL_102;
                v51 = 0;
                v52 = v76;
                v45 = 0;
                while ( v7 != v51 )
                {
                  v55 = (unsigned __int8)*v52++;
                  v54 = v55;
                  v56 = 16 * v45;
                  if ( (unsigned int)(v55 - 0x30) > 9 )
                  {
                    v54 |= 0x20u;
                    v57 = v56 - 0x57;
                  }
                  else
                  {
                    v57 = v56 - 0x30;
                  }
                  v45 = v54 + v57;
                  ++v51;
                }
                v7 = 0;
                ++v21;
                chunksize_buf[0] = 0;
                if ( !v45 )
                  goto end_of_stream;
                goto LABEL_115;
              }
              ++v21;
            }
            goto LABEL_103;
          }
          *v46 = v48;
          ++v7;
          ++v21;
          *++v46 = 0;
        }
        break;
      }
      v45 = content_buf_used;
LABEL_115:
      v58 = v13 - v21;
      if ( v13 - v21 >= v45 )
        v58 = v45;
      v59 = v9 + v58;
      if ( v9 + v58 > (unsigned int)status_codea )
      {
        v74 = v58;
        v60 = (int *)content_buf_len;
        if ( (int)content_buf_len < v59 )
          v60 = (int *)v59;
        content_buf_used = v59;
        status_codea = v60;
        v61 = (char *)realloc(v4, (size_t)v60);
        v59 = content_buf_used;
        v58 = v74;
        if ( !v61 )
        {
          content_buf_len = 0;
          free(v4);
          free(v8);
          v4 = (char *)content_buf_len;
          *(_DWORD *)chunksize = -1;
          return v4;
        }
        v4 = v61;
      }
      v74 = v59;
      content_buf_used = v58;
      memcpy(&v4[v9], &buf[v21], v58);
      v62 = content_buf_used;
      content_buf_used = v45 - content_buf_used;
      v21 += v62;
      v9 = v74;
    }
LABEL_103:
    v53 = v9 <= (int)content_buf_len;
    if ( v9 >= (int)content_buf_len )
      v53 = (int)content_buf_len <= 0;
    if ( v53 )
    {
LABEL_38:
      v11 = sizea;
      v10 = v14;
      continue;
    }
    break;
  }
end_of_stream:
  free(v8);
  *(_DWORD *)chunksize = v9;
  if ( !v9 )
  {
    free(v4);
    return 0;
  }
  return v4;
}
