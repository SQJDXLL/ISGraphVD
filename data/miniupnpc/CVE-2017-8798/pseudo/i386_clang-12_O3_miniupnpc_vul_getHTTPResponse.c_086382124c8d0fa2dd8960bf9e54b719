void *__cdecl getHTTPResponse(int s, int *size, int *status_code)
{
  int *v3; // esi
  char *v4; // eax
  char *v5; // ebx
  void *v6; // eax
  int v7; // eax
  unsigned int v8; // edx
  int v9; // edi
  int v10; // eax
  signed int v11; // ecx
  int v12; // ebp
  char *v13; // esi
  int v14; // esi
  int v15; // edi
  signed int v16; // ebx
  char *v17; // eax
  int v18; // eax
  int v19; // ecx
  char v20; // dl
  int v21; // edx
  bool v22; // zf
  signed int v23; // esi
  int v24; // ecx
  int v25; // eax
  int v26; // ebp
  char *v27; // esi
  char v28; // dl
  char v29; // cl
  size_t v30; // esi
  int v31; // ecx
  char *v32; // esi
  int *v33; // edx
  int v34; // eax
  int v35; // eax
  int v36; // ecx
  char v37; // dl
  size_t v38; // esi
  int v39; // ecx
  int v40; // eax
  int v41; // ebp
  char *v42; // edx
  char v43; // dl
  char v44; // cl
  size_t v45; // esi
  int v46; // eax
  int v47; // ecx
  char v48; // dl
  signed int v49; // esi
  int v50; // ebp
  char *v51; // esi
  unsigned int v52; // esi
  const unsigned __int16 *v53; // eax
  unsigned int v54; // esi
  int v55; // edx
  char v56; // al
  int v57; // eax
  int v58; // esi
  int v59; // ecx
  int v60; // esi
  int v61; // ecx
  int v62; // esi
  signed int v63; // ecx
  unsigned int v64; // ecx
  size_t v65; // eax
  char *v66; // eax
  size_t v67; // esi
  int v68; // edx
  size_t v69; // ebp
  char *v70; // eax
  char *v71; // esi
  bool v72; // cc
  int v73; // eax
  char *v75; // [esp+0h] [ebp-86Ch]
  int v76; // [esp+0h] [ebp-86Ch]
  char *v77; // [esp+0h] [ebp-86Ch]
  int v78; // [esp+0h] [ebp-86Ch]
  int v79; // [esp+4h] [ebp-868h]
  void *v80; // [esp+8h] [ebp-864h]
  void *ptr; // [esp+Ch] [ebp-860h]
  int v82; // [esp+10h] [ebp-85Ch]
  int v83; // [esp+14h] [ebp-858h]
  char *v84; // [esp+18h] [ebp-854h]
  size_t v85; // [esp+1Ch] [ebp-850h]
  unsigned int v86; // [esp+20h] [ebp-84Ch]
  int v87; // [esp+24h] [ebp-848h]
  int v88; // [esp+28h] [ebp-844h]
  unsigned int v89; // [esp+2Ch] [ebp-840h]
  char *s1; // [esp+30h] [ebp-83Ch]
  unsigned int v91; // [esp+34h] [ebp-838h]
  char *nptr; // [esp+38h] [ebp-834h]
  char v93[32]; // [esp+3Ch] [ebp-830h]
  char src[2064]; // [esp+5Ch] [ebp-810h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = size;
  v4 = (char *)malloc(0x800u);
  if ( !v4 )
  {
    *size = -1;
    return 0;
  }
  v5 = v4;
  v6 = malloc(0x800u);
  if ( !v6 )
  {
    free(v5);
    *size = -1;
    return 0;
  }
  v80 = v6;
  v93[0] = 0;
  v91 = 2048;
  v83 = -1;
  v88 = 0;
  v7 = 0;
  v84 = 0;
  v89 = 2048;
  v82 = 0;
  v8 = 0;
  v9 = 0;
LABEL_6:
  v87 = v7;
  v86 = v8;
  v10 = receivedata(s, src, 2048, 5000, 0);
  if ( v10 <= 0 )
    goto end_of_stream;
  v11 = v10;
  v12 = (int)v84;
  v13 = v5;
  do
  {
    if ( v9 )
    {
      v84 = (char *)v12;
      v5 = v13;
      v23 = v83;
      goto LABEL_112;
    }
    v15 = v11 + v12;
    if ( v11 + v12 <= v91 )
    {
      v5 = v13;
    }
    else
    {
      v16 = v11;
      v17 = (char *)realloc(v13, v11 + v12);
      v11 = v16;
      v5 = v17;
      v91 = v15;
      if ( !v17 )
      {
        free(v13);
        free(v80);
        goto LABEL_176;
      }
    }
    v79 = v11;
    memcpy(&v5[v12], src, v11);
    v14 = v15;
    if ( v15 >= 2 )
    {
      v84 = (char *)v15;
      v18 = v15 - 1;
      v19 = 0;
      while ( 1 )
      {
        v20 = v5[v19];
        if ( v20 == 10 )
        {
          v21 = v19 + 1;
          v9 = v19 + 2;
          v22 = v5[v19 + 1] == 10;
LABEL_25:
          if ( !v22 )
            v9 = 0;
          goto LABEL_31;
        }
        if ( v20 != 13 )
          goto LABEL_29;
        if ( v5[v19 + 1] != 10 )
          break;
        v21 = v19 + 2;
        if ( v19 + 2 < (int)v84 )
        {
          v9 = 0;
          if ( v5[v21] != 13 )
            goto LABEL_31;
          v21 = v19 + 3;
          if ( v19 + 3 < (int)v84 )
          {
            v9 = v19 + 4;
            v22 = v5[v19 + 3] == 10;
            goto LABEL_25;
          }
        }
LABEL_30:
        v9 = 0;
LABEL_31:
        v19 = v21 + 1;
        if ( v21 + 1 >= v18 || v9 )
        {
          v14 = (int)v84;
          if ( !v9 )
            goto LABEL_9;
          if ( v9 >= 2 )
          {
            ptr = (void *)(v9 - 1);
            if ( status_code )
            {
              v85 = v9 - 1;
              nptr = v5 + 1;
              v79 += v12;
              v75 = 0;
              v24 = 0;
              v25 = 0;
              v26 = 0;
              while ( 1 )
              {
                v28 = v5[v26];
                if ( v25 > 0 && v24 <= v25 && v28 == 58 )
                {
                  v27 = (char *)v26;
                  if ( v26 < (int)ptr )
                  {
                    while ( 1 )
                    {
                      v29 = v27[(_DWORD)v5 + 1];
                      if ( v29 != 32 && v29 != 9 )
                        break;
                      if ( (char *)v85 == ++v27 )
                      {
                        v27 = (char *)ptr;
                        break;
                      }
                    }
                  }
                  v75 = v27 + 1;
                  goto LABEL_40;
                }
                if ( v28 == 13 || v28 == 10 )
                  break;
                v27 = (char *)v26;
                v26 = v24;
LABEL_40:
                v24 = v26;
                v26 = (int)(v27 + 1);
                if ( (int)(v27 + 1) >= (int)ptr )
                  goto LABEL_111;
              }
              if ( v25 )
              {
                v30 = v24 - v25;
                if ( v24 <= v25 || (int)v75 <= v24 )
                  goto LABEL_57;
                s1 = &v5[v25];
                if ( !strncasecmp(&v5[v25], "content-length", v30) )
                {
                  v83 = strtol(&v75[(_DWORD)v5], 0, 10);
                  v31 = v79;
                  v75 = 0;
                  if ( v26 < (int)v84 )
                    goto LABEL_75;
                }
                else if ( !strncasecmp(s1, "transfer-encoding", v30) )
                {
                  v35 = strncasecmp(&v75[(_DWORD)v5], "chunked", 7u);
                  v36 = v88;
                  if ( !v35 )
                    v36 = 1;
                  v88 = v36;
                  v31 = v79;
                  v75 = 0;
                  if ( v26 < (int)v84 )
                  {
LABEL_75:
                    while ( 1 )
                    {
                      v37 = v5[v26];
                      if ( v37 != 13 && v37 != 10 )
                        break;
                      if ( v31 == ++v26 )
                      {
                        v27 = v84;
                        v25 = (int)v84;
                        v26 = (int)v84;
                        goto LABEL_40;
                      }
                    }
                  }
                }
                else
                {
LABEL_57:
                  v31 = v79;
                  v75 = 0;
                  if ( v26 < (int)v84 )
                    goto LABEL_75;
                }
              }
              else
              {
                v32 = nptr;
                v76 = v26;
                v31 = v79;
                v33 = status_code;
                if ( v26 > 0 )
                {
                  do
                  {
                    if ( *(v32 - 1) == 32 )
                    {
                      if ( *v33 >= 0 )
                        break;
                      v34 = strtol(v32, 0, 10);
                      v31 = v79;
                      v33 = status_code;
                      *status_code = v34;
                    }
                    ++v32;
                    --v26;
                  }
                  while ( v26 );
                }
                v26 = v76;
                v75 = 0;
                if ( v26 < (int)v84 )
                  goto LABEL_75;
              }
              v27 = (char *)v26;
              v25 = v26;
              goto LABEL_40;
            }
            v38 = v9 - 1;
            v79 += v12;
            v77 = 0;
            v39 = 0;
            v40 = 0;
            v41 = 0;
            v85 = v9 - 1;
            do
            {
              v43 = v5[v41];
              if ( v40 > 0 && v39 <= v40 && v43 == 58 )
              {
                v42 = (char *)v41;
                if ( v41 < (int)ptr )
                {
                  v42 = (char *)v41;
                  while ( 1 )
                  {
                    v44 = v42[(_DWORD)v5 + 1];
                    if ( v44 != 32 && v44 != 9 )
                      break;
                    if ( (char *)v38 == ++v42 )
                    {
                      v42 = (char *)ptr;
                      break;
                    }
                  }
                }
                v77 = v42 + 1;
              }
              else if ( v43 == 13 || v43 == 10 )
              {
                v45 = v39 - v40;
                if ( v39 > v40 && (int)v77 > v39 )
                {
                  s1 = &v5[v40];
                  if ( !strncasecmp(&v5[v40], "content-length", v45) )
                  {
                    v83 = strtol(&v77[(_DWORD)v5], 0, 10);
                  }
                  else if ( !strncasecmp(s1, "transfer-encoding", v45) )
                  {
                    v46 = strncasecmp(&v77[(_DWORD)v5], "chunked", 7u);
                    v47 = v88;
                    if ( !v46 )
                      v47 = 1;
                    v88 = v47;
                  }
                }
                v38 = v85;
                v77 = 0;
                if ( v41 < (int)v84 )
                {
                  while ( 1 )
                  {
                    v48 = v5[v41];
                    if ( v48 != 13 && v48 != 10 )
                      break;
                    if ( v79 == ++v41 )
                    {
                      v41 = (int)v84;
                      break;
                    }
                  }
                }
                v42 = (char *)v41;
                v40 = v41;
              }
              else
              {
                v42 = (char *)v41;
                v41 = v39;
              }
              v39 = v41;
              v41 = (int)(v42 + 1);
            }
            while ( (int)(v42 + 1) < (int)ptr );
          }
LABEL_111:
          v49 = (signed int)&v84[-v9];
          memcpy(src, &v5[v9], (size_t)&v84[-v9]);
          v11 = v49;
          v23 = v83;
LABEL_112:
          v8 = v86;
          v7 = v87;
          v83 = v23;
          if ( v88 )
          {
            if ( v11 > 0 )
            {
              v50 = 0;
              ptr = v80;
              v7 = v87;
              v79 = v11;
              while ( 1 )
              {
                v78 = v82;
                v51 = (char *)ptr;
                do
                {
                  if ( v7 )
                    goto LABEL_146;
                  if ( v8 )
                  {
                    v52 = v8;
                  }
                  else
                  {
                    v50 += src[v50] == 13;
                    v52 = 0;
                    if ( v50 < v11 )
                      v50 += src[v50] == 10;
                  }
                  if ( v50 < v11 )
                  {
                    v53 = *_ctype_b_loc();
                    v8 = v52;
                    do
                    {
                      if ( v8 > 0x1E )
                      {
                        v11 = v79;
                        v51 = (char *)ptr;
                        if ( v50 < v79 )
                        {
LABEL_131:
                          while ( 1 )
                          {
                            v56 = src[v50];
                            if ( v56 == 10 || v56 == 13 )
                              break;
                            if ( v11 == ++v50 )
                              goto LABEL_172;
                          }
                          v50 += v56 == 13;
                          v11 = v79;
                        }
                        goto LABEL_136;
                      }
                      v54 = v8;
                      v55 = src[v50];
                      if ( (v53[v55] & 0x1000) == 0 )
                      {
                        v8 = v54;
                        v11 = v79;
                        v51 = (char *)ptr;
                        if ( v50 < v79 )
                          goto LABEL_131;
                        goto LABEL_136;
                      }
                      v93[v54] = v55;
                      v93[v54 + 1] = 0;
                      ++v50;
                      v8 = v54 + 1;
                    }
                    while ( v79 != v50 );
                    v7 = 0;
                    v80 = ptr;
                    v82 = v78;
                    v8 = v54 + 1;
                    v3 = size;
                    if ( v83 > 0 )
                      goto LABEL_170;
                    goto LABEL_6;
                  }
                  v8 = v52;
                  v51 = (char *)ptr;
LABEL_136:
                  if ( v50 >= v11 )
                  {
LABEL_172:
                    v7 = 0;
                    v80 = v51;
                    v82 = v78;
                    v3 = size;
                    if ( v83 > 0 )
                      goto LABEL_170;
                    goto LABEL_6;
                  }
                  v7 = 0;
                }
                while ( src[v50] != 10 );
                if ( !v8 )
                  break;
                v57 = 0;
                v58 = 0;
                v86 = v8;
                do
                {
                  v59 = (unsigned __int8)v93[v57];
                  v62 = 16 * v58;
                  if ( (unsigned __int8)(v93[v57] - 48) > 9u )
                  {
                    v59 = (char)(v59 | 0x20);
                    v60 = v62 - 87;
                  }
                  else
                  {
                    v60 = v62 - 48;
                  }
                  v61 = v60 + v59;
                  v58 = v61;
                  ++v57;
                }
                while ( v86 != v57 );
                v93[0] = 0;
                if ( !v61 )
                {
                  v80 = ptr;
                  goto LABEL_180;
                }
                v7 = v61;
                ++v50;
                v8 = 0;
                v11 = v79;
                v51 = (char *)ptr;
LABEL_146:
                v86 = v8;
                v63 = v11 - v50;
                v87 = v7;
                if ( v7 < v63 )
                  v63 = v7;
                v85 = v63;
                v64 = v78 + v63;
                v82 = v64;
                if ( v64 <= v89 )
                {
                  v66 = v51;
                }
                else
                {
                  v65 = v83;
                  if ( v83 < (int)v64 )
                    v65 = v64;
                  v89 = v65;
                  v66 = (char *)realloc(v51, v65);
                  if ( !v66 )
                  {
                    free(v51);
                    goto LABEL_177;
                  }
                }
                v80 = v66;
                v67 = v85;
                memcpy(&v66[v78], &src[v50], v85);
                v50 += v67;
                v7 = v87 - v67;
                ptr = v80;
                v23 = v83;
                v11 = v79;
                v8 = v86;
                if ( v50 >= v79 )
                  goto LABEL_169;
              }
              v93[0] = 0;
              v80 = v51;
LABEL_180:
              v82 = v78;
              goto LABEL_181;
            }
          }
          else
          {
            v68 = v82;
            v69 = v23 - v82;
            if ( v11 + v82 <= v23 )
              v69 = v11;
            if ( v23 <= 0 )
              v69 = v11;
            v79 = v82 + v69;
            if ( v82 + v69 <= v89 )
            {
              v71 = (char *)v80;
            }
            else
            {
              if ( v23 < (int)(v82 + v69) )
                v23 = v82 + v69;
              v89 = v23;
              v70 = (char *)realloc(v80, v23);
              v68 = v82;
              v71 = v70;
              if ( !v70 )
              {
                free(v80);
LABEL_177:
                free(v5);
LABEL_176:
                *size = -1;
                return 0;
              }
            }
            memcpy(&v71[v68], src, v69);
            v80 = v71;
            v82 = v79;
            v23 = v83;
            v8 = v86;
            v7 = v87;
          }
LABEL_169:
          v72 = v23 <= 0;
          v3 = size;
          if ( !v72 )
          {
LABEL_170:
            if ( v82 >= v83 )
              goto end_of_stream;
          }
          goto LABEL_6;
        }
      }
      ++v19;
LABEL_29:
      v21 = v19;
      goto LABEL_30;
    }
LABEL_9:
    v11 = receivedata(s, src, 2048, 5000, 0);
    v9 = 0;
    v12 = v14;
    v13 = v5;
  }
  while ( v11 > 0 );
LABEL_181:
  v3 = size;
end_of_stream:
  free(v5);
  v73 = v82;
  *v3 = v82;
  if ( !v73 )
  {
    free(v80);
    return 0;
  }
  return v80;
}
