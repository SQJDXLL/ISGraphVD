char *__cdecl getHTTPResponse(int s, int *size, int *status_code)
{
  int *v3; // esi
  char *v4; // eax
  char *v5; // ebx
  char *v6; // eax
  signed int v7; // edx
  signed int v8; // eax
  int v9; // edi
  int v10; // eax
  signed int v11; // ecx
  int v12; // ebp
  char *v13; // esi
  int v14; // esi
  int v15; // edi
  signed int v16; // ebx
  char *v17; // eax
  int v18; // eax
  int v19; // ecx
  char v20; // dl
  int v21; // edx
  bool v22; // zf
  int v23; // esi
  int v24; // ecx
  int v25; // ebp
  int *v26; // edx
  char *v27; // eax
  char v28; // al
  char v29; // cl
  int v30; // ecx
  const char *v31; // esi
  int v32; // eax
  size_t v33; // esi
  int v34; // eax
  int v35; // ecx
  signed int v36; // ebp
  char v37; // al
  signed int v38; // ebp
  char *v39; // esi
  const unsigned __int16 *v40; // eax
  unsigned int v41; // edx
  int v42; // edx
  char v43; // al
  int v44; // eax
  int v45; // esi
  int v46; // ecx
  int v47; // esi
  signed int v48; // ecx
  int v49; // esi
  signed int v50; // ecx
  signed int v51; // eax
  char *v52; // eax
  size_t v53; // ebp
  char *v54; // eax
  signed int v55; // ecx
  char *v56; // esi
  signed int v58; // [esp+Ch] [ebp-870h]
  int v59; // [esp+Ch] [ebp-870h]
  signed int v60; // [esp+Ch] [ebp-870h]
  char *v61; // [esp+10h] [ebp-86Ch]
  char *ptr; // [esp+14h] [ebp-868h]
  char *ptra; // [esp+14h] [ebp-868h]
  signed int v64; // [esp+18h] [ebp-864h]
  int v65; // [esp+1Ch] [ebp-860h]
  int v66; // [esp+20h] [ebp-85Ch]
  signed int v67; // [esp+20h] [ebp-85Ch]
  int v68; // [esp+24h] [ebp-858h]
  unsigned int v69; // [esp+28h] [ebp-854h]
  signed int v70; // [esp+30h] [ebp-84Ch]
  size_t v71; // [esp+30h] [ebp-84Ch]
  int v72; // [esp+34h] [ebp-848h]
  signed int v73; // [esp+38h] [ebp-844h]
  signed int v74; // [esp+38h] [ebp-844h]
  unsigned int v75; // [esp+3Ch] [ebp-840h]
  int v76; // [esp+40h] [ebp-83Ch]
  unsigned int v77; // [esp+44h] [ebp-838h]
  char v78[32]; // [esp+4Ch] [ebp-830h]
  char src[2064]; // [esp+6Ch] [ebp-810h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = size;
  v4 = (char *)malloc(0x800u);
  if ( !v4 )
  {
    *size = -1;
    return 0;
  }
  v5 = v4;
  v6 = (char *)malloc(0x800u);
  if ( !v6 )
  {
    free(v5);
    *size = -1;
    return 0;
  }
  v61 = v6;
  v78[0] = 0;
  v77 = 2048;
  v7 = -1;
  v76 = 0;
  v8 = 0;
  v68 = 0;
  v75 = 2048;
  v64 = 0;
  v69 = 0;
  v9 = 0;
  do
  {
    v73 = v8;
    v65 = v7;
    v10 = receivedata(s, src, 2048, 5000, 0);
    if ( v10 <= 0 )
      break;
    v11 = v10;
    v12 = v68;
    v13 = v5;
    while ( 1 )
    {
      if ( v9 )
      {
        v68 = v12;
        v5 = v13;
        goto LABEL_80;
      }
      v15 = v11 + v12;
      if ( v11 + v12 <= v77 )
      {
        v5 = v13;
      }
      else
      {
        v16 = v11;
        v17 = (char *)realloc(v13, v11 + v12);
        v11 = v16;
        v5 = v17;
        v77 = v15;
        if ( !v17 )
        {
          free(v13);
          free(v61);
LABEL_138:
          *size = -1;
          return 0;
        }
      }
      v58 = v11;
      memcpy(&v5[v12], src, v11);
      v14 = v15;
      if ( v15 >= 2 )
        break;
LABEL_9:
      v11 = receivedata(s, src, 2048, 5000, 0);
      v9 = 0;
      v12 = v14;
      v13 = v5;
      if ( v11 <= 0 )
      {
LABEL_142:
        v3 = size;
        goto end_of_stream;
      }
    }
    v68 = v15;
    v18 = v15 - 1;
    v19 = 0;
    do
    {
      v20 = v5[v19];
      if ( v20 == 10 )
      {
        v21 = v19 + 1;
        v9 = v19 + 2;
        v22 = v5[v19 + 1] == 10;
LABEL_25:
        if ( !v22 )
          v9 = 0;
        goto LABEL_31;
      }
      if ( v20 != 13 )
        goto LABEL_29;
      if ( v5[v19 + 1] != 10 )
      {
        ++v19;
LABEL_29:
        v21 = v19;
LABEL_30:
        v9 = 0;
        goto LABEL_31;
      }
      v21 = v19 + 2;
      if ( v19 + 2 >= v68 )
        goto LABEL_30;
      v9 = 0;
      if ( v5[v21] == 13 )
      {
        v21 = v19 + 3;
        if ( v19 + 3 >= v68 )
          goto LABEL_30;
        v9 = v19 + 4;
        v22 = v5[v19 + 3] == 10;
        goto LABEL_25;
      }
LABEL_31:
      v19 = v21 + 1;
    }
    while ( v21 + 1 < v18 && !v9 );
    v14 = v68;
    if ( !v9 )
      goto LABEL_9;
    if ( v9 >= 2 )
    {
      v66 = v9 - 1;
      v23 = v9 - 1;
      v59 = v12 + v58;
      v72 = 0;
      v24 = 0;
      v70 = 0;
      v25 = 0;
      v26 = status_code;
      do
      {
        ptr = (char *)v25;
        v28 = v5[v25];
        if ( v70 > 0 && v24 <= v70 && v28 == 58 )
        {
          v27 = (char *)v25;
          if ( v25 < v66 )
          {
            v27 = (char *)v25;
            while ( 1 )
            {
              v29 = v27[(_DWORD)v5 + 1];
              if ( v29 != 32 && v29 != 9 )
                break;
              if ( (char *)v23 == ++v27 )
              {
                v27 = (char *)(v9 - 1);
                break;
              }
            }
          }
          v72 = (int)(v27 + 1);
          v24 = v25;
        }
        else if ( v28 == 13 || v28 == 10 )
        {
          if ( !v26 || v70 )
          {
            v33 = v24 - v70;
            v27 = (char *)v25;
            if ( v24 <= v70 || v72 <= v24 )
            {
              v30 = v59;
LABEL_69:
              v23 = v9 - 1;
            }
            else
            {
              if ( !strncasecmp(&v5[v70], "content-length", v33) )
              {
                v65 = strtol(&v5[v72], 0, 10);
              }
              else if ( !strncasecmp(&v5[v70], "transfer-encoding", v33) )
              {
                v34 = strncasecmp(&v5[v72], "chunked", 7u);
                v35 = v76;
                if ( !v34 )
                  v35 = 1;
                v76 = v35;
              }
              v26 = status_code;
              v30 = v59;
              v23 = v9 - 1;
              v27 = (char *)v25;
            }
          }
          else
          {
            v27 = (char *)v25;
            v30 = v59;
            if ( v25 > 0 )
            {
              v31 = v5 + 1;
              while ( 1 )
              {
                if ( *(v31 - 1) == 32 )
                {
                  if ( *v26 >= 0 )
                    goto LABEL_69;
                  v32 = strtol(v31, 0, 10);
                  v30 = v59;
                  v26 = status_code;
                  *status_code = v32;
                  v27 = ptr;
                }
                ++v31;
                if ( !--v25 )
                  goto LABEL_69;
              }
            }
          }
          v72 = 0;
          if ( (int)v27 < v68 )
          {
            do
            {
              v36 = (signed int)v27;
              v37 = v27[(_DWORD)v5];
              if ( v37 != 13 && v37 != 10 )
              {
                v24 = v36;
                v27 = (char *)v36;
                v70 = v36;
                goto LABEL_39;
              }
              v27 = (char *)(v36 + 1);
            }
            while ( v30 != v36 + 1 );
            v24 = v68;
            v27 = (char *)v68;
            v70 = v68;
          }
          else
          {
            v24 = (int)v27;
            v70 = (signed int)v27;
          }
        }
        else
        {
          v27 = (char *)v25;
        }
LABEL_39:
        v25 = (int)(v27 + 1);
      }
      while ( (int)(v27 + 1) < v66 );
    }
    memcpy(src, &v5[v9], v68 - v9);
    v11 = v68 - v9;
LABEL_80:
    v7 = v65;
    v8 = v73;
    if ( !v76 )
    {
      v53 = v65 - v64;
      if ( v11 + v64 <= v65 )
        v53 = v11;
      if ( v65 <= 0 )
        v53 = v11;
      if ( v64 + v53 <= v75 )
      {
        v55 = v64;
        v56 = v61;
      }
      else
      {
        if ( v65 < (int)(v64 + v53) )
          v7 = v64 + v53;
        v75 = v7;
        v54 = (char *)realloc(v61, v7);
        v55 = v64;
        v56 = v54;
        if ( !v54 )
        {
          free(v61);
LABEL_139:
          free(v5);
          goto LABEL_138;
        }
      }
      memcpy(&v56[v55], src, v53);
      v61 = v56;
      v64 += v53;
      v7 = v65;
      v8 = v73;
      goto LABEL_133;
    }
    if ( v11 > 0 )
    {
      v38 = 0;
      v39 = v61;
      v60 = v11;
      do
      {
        ptra = v39;
        v67 = v64;
        while ( !v8 )
        {
          if ( !v69 )
          {
            v38 += src[v38] == 13;
            if ( v38 < v11 )
              v38 += src[v38] == 10;
          }
          if ( v38 < v11 )
          {
            v40 = *_ctype_b_loc();
            v41 = v69;
            while ( 1 )
            {
              v69 = v41;
              if ( v41 > 0x1E )
                break;
              v42 = src[v38];
              if ( (v40[v42] & 0x1000) == 0 )
                break;
              v78[v69] = v42;
              v78[v69 + 1] = 0;
              v39 = ptra;
              ++v38;
              v41 = v69 + 1;
              if ( v60 == v38 )
              {
                v8 = 0;
                v61 = ptra;
                ++v69;
                v7 = v65;
                goto LABEL_133;
              }
            }
            v7 = v65;
            v11 = v60;
          }
          if ( v38 < v11 )
          {
            while ( 1 )
            {
              v43 = src[v38];
              if ( v43 == 10 || v43 == 13 )
                break;
              if ( v11 == ++v38 )
                goto LABEL_132;
            }
            v38 += v43 == 13;
            v11 = v60;
          }
          if ( v38 >= v11 )
          {
LABEL_132:
            v8 = 0;
            v61 = v39;
            goto LABEL_133;
          }
          v8 = 0;
          if ( src[v38] == 10 )
          {
            if ( !v69 )
            {
              v78[0] = 0;
              v61 = v39;
              goto LABEL_142;
            }
            v44 = 0;
            v45 = 0;
            do
            {
              v46 = (unsigned __int8)v78[v44];
              v49 = 16 * v45;
              if ( (unsigned __int8)(v78[v44] - 48) > 9u )
              {
                v46 = (char)(v46 | 0x20);
                v47 = v49 - 87;
              }
              else
              {
                v47 = v49 - 48;
              }
              v48 = v47 + v46;
              v45 = v48;
              ++v44;
            }
            while ( v69 != v44 );
            v78[0] = 0;
            if ( !v48 )
            {
              v61 = ptra;
              goto LABEL_142;
            }
            v8 = v48;
            ++v38;
            v69 = 0;
            v7 = v65;
            v11 = v60;
            v39 = ptra;
            break;
          }
        }
        v50 = v11 - v38;
        v74 = v8;
        if ( v8 < v50 )
          v50 = v8;
        v71 = v50;
        v51 = v50 + v64;
        v64 += v50;
        if ( v50 + v67 <= v75 )
        {
          v52 = v39;
        }
        else
        {
          if ( v7 < v51 )
            v7 = v50 + v67;
          v75 = v7;
          v52 = (char *)realloc(v39, v7);
          if ( !v52 )
          {
            free(v39);
            goto LABEL_139;
          }
        }
        v61 = v52;
        memcpy(&v52[v67], &src[v38], v71);
        v38 += v71;
        v8 = v74 - v71;
        v39 = v61;
        v11 = v60;
        v7 = v65;
      }
      while ( v38 < v60 );
    }
LABEL_133:
    v3 = size;
  }
  while ( v7 <= 0 || v64 < v7 );
end_of_stream:
  free(v5);
  *v3 = v64;
  if ( v64 )
    return v61;
  free(v61);
  return 0;
}
