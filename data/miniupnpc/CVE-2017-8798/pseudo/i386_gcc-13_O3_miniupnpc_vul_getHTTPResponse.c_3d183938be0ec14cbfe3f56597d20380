void *__cdecl getHTTPResponse(int s, int *size, int *status_code)
{
  unsigned int v3; // edi
  signed int v4; // edx
  char *v5; // eax
  char *v6; // esi
  int v7; // ecx
  int v8; // eax
  int v9; // ebp
  int v10; // ebx
  char v11; // dl
  char v12; // dl
  int v13; // edx
  int v14; // esi
  char *v15; // ebp
  int v16; // ebx
  char *v17; // ecx
  char v18; // al
  size_t v19; // edi
  int v20; // esi
  int v21; // ebp
  signed int v22; // ebp
  signed int v23; // esi
  size_t v24; // edi
  size_t v25; // eax
  char *v26; // eax
  int v27; // ecx
  char *v28; // eax
  int v29; // edx
  const unsigned __int16 *v30; // ebp
  unsigned int v31; // ebx
  char *v32; // ecx
  int v33; // eax
  char v34; // al
  char v35; // al
  char *v36; // ecx
  int v37; // ebx
  char *v38; // edi
  int v39; // eax
  int v40; // ebx
  bool v41; // zf
  size_t v42; // ecx
  size_t v43; // edx
  unsigned int v44; // esi
  int *v45; // esi
  char v46; // al
  const char *v47; // edx
  int *v48; // ebp
  const char *v49; // esi
  const char *v50; // edi
  char *v51; // eax
  int v52; // eax
  char *v53; // edx
  int v54; // eax
  int v55; // eax
  int v56; // eax
  int v57; // eax
  int v58; // edi
  char v59; // bl
  int *v61; // esi
  int *v62; // esi
  unsigned int content_buf_used; // [esp+0h] [ebp-8A0h]
  char *content_buf; // [esp+Ch] [ebp-894h]
  int header_buf_used_0; // [esp+14h] [ebp-88Ch]
  signed int header_buf_used_0a; // [esp+14h] [ebp-88Ch]
  unsigned int header_buf_used_0b; // [esp+14h] [ebp-88Ch]
  unsigned int content_buf_len; // [esp+18h] [ebp-888h]
  int nd; // [esp+1Ch] [ebp-884h]
  int n; // [esp+1Ch] [ebp-884h]
  int na; // [esp+1Ch] [ebp-884h]
  int nb; // [esp+1Ch] [ebp-884h]
  int nc; // [esp+1Ch] [ebp-884h]
  int content_length; // [esp+20h] [ebp-880h]
  int chunked; // [esp+24h] [ebp-87Ch]
  int valuestart; // [esp+28h] [ebp-878h]
  char *header_buf; // [esp+2Ch] [ebp-874h]
  int endofheaders; // [esp+30h] [ebp-870h]
  unsigned int chunksize_buf_index; // [esp+34h] [ebp-86Ch]
  unsigned int chunksize; // [esp+38h] [ebp-868h]
  unsigned int header_buf_len; // [esp+3Ch] [ebp-864h]
  char *s1; // [esp+40h] [ebp-860h]
  int i; // [esp+44h] [ebp-85Ch]
  size_t v84; // [esp+48h] [ebp-858h]
  int *v85; // [esp+4Ch] [ebp-854h]
  int *v86; // [esp+50h] [ebp-850h]
  char chunksize_buf[32]; // [esp+60h] [ebp-840h] BYREF
  char buf[2048]; // [esp+80h] [ebp-820h] BYREF
  unsigned int v90; // [esp+880h] [ebp-20h]

  v85 = status_code;
  v90 = __readgsdword(0x14u);
  if ( status_code )
    *status_code = -1;
  header_buf = (char *)malloc(0x800u);
  if ( !header_buf )
  {
    *size = -1;
    return 0;
  }
  content_buf = (char *)malloc(0x800u);
  if ( !content_buf )
  {
    free(header_buf);
    *size = -1;
    return 0;
  }
  chunksize_buf[0] = 0;
  v3 = 0;
  content_buf_used = 0;
  content_buf_len = 2048;
  valuestart = 0;
  header_buf_len = 2048;
  chunksize = 0;
  content_length = -1;
  chunked = 0;
  endofheaders = 0;
  v86 = size;
  while ( 1 )
  {
    while ( 1 )
    {
      while ( 1 )
      {
        v4 = receivedata(s, buf, 2048, 5000, 0);
        if ( v4 <= 0 )
          goto LABEL_136;
        if ( endofheaders )
        {
          if ( chunked )
            goto LABEL_33;
LABEL_71:
          v42 = v4;
          v43 = content_buf_used + v4;
          v21 = v43;
          if ( content_length <= 0 )
          {
            if ( content_buf_len < v43 )
            {
              if ( content_length < (int)v43 )
              {
                v44 = v43;
                goto LABEL_108;
              }
LABEL_112:
              v44 = v43;
              v43 = content_length;
              goto LABEL_108;
            }
          }
          else
          {
            if ( content_length < (int)v43 )
            {
              v44 = content_length;
              v21 = content_length;
              v42 = content_length - content_buf_used;
              if ( content_buf_len >= content_length )
                goto LABEL_74;
              v44 = content_length;
              v43 = content_length;
LABEL_108:
              nc = v42;
              header_buf_used_0b = v43;
              v51 = (char *)realloc(content_buf, v43);
              if ( !v51 )
              {
LABEL_142:
                v61 = v86;
                free(content_buf);
                free(header_buf);
                *v61 = -1;
                return 0;
              }
              v42 = nc;
              content_buf = v51;
              v21 = v44;
              content_buf_len = header_buf_used_0b;
LABEL_74:
              memcpy(&content_buf[content_buf_used], buf, v42);
              content_buf_used = v44;
              chunked = 0;
              goto LABEL_75;
            }
            if ( content_buf_len < v43 )
              goto LABEL_112;
          }
          v44 = v43;
          goto LABEL_74;
        }
        header_buf_used_0 = v4 + valuestart;
        if ( header_buf_len < v4 + valuestart )
        {
          nd = v4;
          v5 = (char *)realloc(header_buf, v4 + valuestart);
          v4 = nd;
          if ( !v5 )
          {
            v62 = v86;
            free(header_buf);
            free(content_buf);
            *v62 = -1;
            return 0;
          }
          header_buf = v5;
          header_buf_len = header_buf_used_0;
        }
        v6 = header_buf;
        memcpy(&header_buf[valuestart], buf, v4);
        v7 = header_buf_used_0 - 1;
        if ( header_buf_used_0 > 1 )
          break;
        valuestart = header_buf_used_0;
      }
      v8 = 0;
      do
      {
        v12 = v6[v8];
        v10 = v8 + 1;
        if ( v12 == 13 )
        {
          if ( v6[v8 + 1] == 10 )
          {
            if ( v8 + 2 < header_buf_used_0 && v6[v8 + 2] == 13 )
            {
              v10 = v8 + 3;
              if ( v8 + 3 < header_buf_used_0 && v6[v8 + 3] == 10 )
              {
                v41 = v8 == -4;
                v8 += 4;
                v11 = v41;
                v9 = v8;
              }
              else
              {
                v8 += 4;
                v9 = 0;
                v10 = -1;
                v11 = 1;
              }
            }
            else
            {
              v8 += 3;
              v9 = 0;
              v10 = -1;
              v11 = 1;
            }
LABEL_15:
            if ( v7 <= v8 )
              break;
            continue;
          }
        }
        else
        {
          if ( v12 != 10 )
          {
            ++v8;
            v9 = 0;
            v10 = -1;
            v11 = 1;
            goto LABEL_15;
          }
          if ( v6[v10] == 10 )
          {
            v41 = v8 == -2;
            v8 += 2;
            v11 = v41;
            v9 = v8;
            goto LABEL_15;
          }
        }
        v8 += 2;
        v9 = 0;
        v10 = -1;
        v11 = 1;
        if ( v7 <= v8 )
          break;
      }
      while ( v11 );
      if ( v9 )
        break;
      endofheaders = 0;
      valuestart = header_buf_used_0;
    }
    if ( v10 <= 0 )
      goto LABEL_31;
    valuestart = 0;
    v13 = 0;
    v14 = 0;
    chunksize_buf_index = v3;
    endofheaders = v9;
    v15 = header_buf;
    n = v10;
    v16 = 0;
    v17 = (char *)header_buf_used_0;
    while ( 2 )
    {
      v18 = v15[v14];
      v19 = v14 + 1;
      if ( v13 <= 0 || v13 < v16 )
      {
        if ( v18 != 13 && v18 != 10 )
          goto LABEL_28;
        if ( !v13 && v85 )
        {
          if ( v14 <= 0 )
            goto LABEL_86;
          v47 = v15 + 1;
          s1 = v15;
          v48 = v85;
          i = v14;
          v84 = v14 + 1;
          v49 = &v47[v14];
          v50 = v47;
          valuestart = (int)v17;
          while ( 1 )
          {
            if ( *(v50 - 1) == 32 )
            {
              if ( *v48 >= 0 )
              {
LABEL_81:
                v17 = (char *)valuestart;
                v15 = s1;
                v14 = i;
                v19 = v84;
                goto LABEL_82;
              }
              *v48 = strtol(v50, 0, 10);
            }
            if ( v49 == ++v50 )
              goto LABEL_81;
          }
        }
        if ( v13 >= v16 || v16 >= valuestart )
          goto LABEL_82;
        i = (int)v17;
        v84 = v16 - v13;
        s1 = &v15[v13];
        v52 = strncasecmp(&v15[v13], "content-length", v16 - v13);
        v53 = s1;
        s1 = (char *)i;
        if ( !v52 )
        {
          content_length = strtol(&v15[valuestart], 0, 10);
          v17 = s1;
          goto LABEL_82;
        }
        v54 = strncasecmp(v53, "transfer-encoding", v84);
        v17 = s1;
        if ( v54 )
        {
LABEL_82:
          if ( (int)v17 > v14 )
            goto LABEL_86;
        }
        else
        {
          v55 = strncasecmp(&v15[valuestart], "chunked", 7u);
          v17 = s1;
          v41 = v55 == 0;
          v56 = 1;
          if ( !v41 )
            v56 = chunked;
          chunked = v56;
          if ( (int)s1 > v14 )
          {
            while ( 1 )
            {
LABEL_86:
              v46 = v15[v14];
              v13 = v14;
              v14 = v19;
              if ( v46 != 13 && v46 != 10 )
              {
                valuestart = 0;
                v16 = v13;
                goto LABEL_29;
              }
              if ( v17 == (char *)v19 )
                break;
              ++v19;
            }
            v14 = v13 + 2;
            valuestart = 0;
            v16 = (int)v17;
            v13 = (int)v17;
            goto LABEL_29;
          }
        }
        valuestart = 0;
        v16 = v14;
        v13 = v14;
        goto LABEL_28;
      }
      if ( v18 == 58 )
      {
        v57 = v14;
        v58 = v14;
        if ( v14 < n )
        {
          valuestart = v13;
          do
          {
            v59 = v15[v57 + 1];
            v58 = v57++;
            if ( v59 != 32 && v59 != 9 )
            {
              v13 = valuestart;
              goto LABEL_128;
            }
          }
          while ( n != v57 );
          v13 = valuestart;
          v58 = n;
        }
LABEL_128:
        v16 = v14;
        valuestart = v58 + 1;
        v14 = v58 + 1;
      }
      else
      {
        if ( v18 == 10 || v18 == 13 )
          goto LABEL_82;
LABEL_28:
        v14 = v19;
      }
LABEL_29:
      if ( n > v14 )
        continue;
      break;
    }
    v9 = endofheaders;
    v3 = chunksize_buf_index;
LABEL_31:
    v20 = header_buf_used_0 - v9;
    memcpy(buf, &header_buf[v9], header_buf_used_0 - v9);
    endofheaders = v9;
    v4 = header_buf_used_0 - v9;
    valuestart = header_buf_used_0;
    if ( !chunked )
      goto LABEL_71;
    v21 = content_buf_used;
    if ( v20 <= 0 )
      goto LABEL_75;
LABEL_33:
    chunksize_buf_index = v3;
    v22 = chunksize;
    v23 = 0;
    header_buf_used_0a = v4;
LABEL_42:
    v27 = content_buf_used;
    if ( !v22 )
      break;
LABEL_34:
    v24 = header_buf_used_0a - v23;
    if ( header_buf_used_0a - v23 > v22 )
      v24 = v22;
    content_buf_used += v24;
    v25 = content_buf_used;
    if ( content_buf_len < content_buf_used )
    {
      na = v27;
      if ( content_length >= (int)content_buf_used )
        v25 = content_length;
      content_buf_len = v25;
      v26 = (char *)realloc(content_buf, v25);
      v27 = na;
      if ( !v26 )
        goto LABEL_142;
      content_buf = v26;
    }
    v22 -= v24;
    v28 = &buf[v23];
    v23 += v24;
    memcpy(&content_buf[v27], v28, v24);
    if ( v23 < header_buf_used_0a )
      goto LABEL_42;
    chunksize = v22;
    v3 = chunksize_buf_index;
    chunked = 1;
    v21 = content_buf_used;
LABEL_75:
    if ( content_length > 0 && content_length <= v21 )
    {
      v45 = v86;
      goto end_of_stream;
    }
  }
  v3 = chunksize_buf_index;
  v29 = header_buf_used_0a;
  do
  {
    if ( !v3 )
    {
      if ( buf[v23] == 13 )
        ++v23;
      if ( v23 >= v29 )
        goto LABEL_91;
      if ( buf[v23] != 10 )
        goto LABEL_49;
      ++v23;
    }
    if ( v23 >= v29 )
      goto LABEL_91;
LABEL_49:
    nb = v29;
    v30 = *_ctype_b_loc();
    v31 = nb + v3 - v23;
    v32 = &buf[v23 - v3];
    do
    {
      v33 = v32[v3];
      if ( (v30[v33] & 0x1000) == 0 )
        break;
      if ( v3 > 0x1E )
        break;
      ++v3;
      ++v23;
      chunksize_buf[v3 - 1] = v33;
      chunksize_buf[v3] = 0;
    }
    while ( v31 != v3 );
    v29 = nb;
    if ( v23 >= nb )
      goto LABEL_91;
    while ( 1 )
    {
      v34 = buf[v23];
      if ( v34 == 13 || v34 == 10 )
        break;
      if ( ++v23 == nb )
        goto LABEL_91;
    }
    if ( v23 >= nb )
    {
LABEL_91:
      v21 = content_buf_used;
      chunked = 1;
      chunksize = 0;
      goto LABEL_75;
    }
    v35 = buf[v23];
    if ( v35 == 13 )
    {
      if ( ++v23 >= nb )
        goto LABEL_91;
      v35 = buf[v23];
    }
  }
  while ( v35 != 10 );
  if ( v3 )
  {
    v36 = chunksize_buf;
    v37 = 0;
    v38 = &chunksize_buf[v3];
    do
    {
      while ( 1 )
      {
        v39 = *v36;
        v40 = 16 * v37;
        if ( (unsigned __int8)(v39 - 48) > 9u )
          break;
        ++v36;
        v37 = v40 + v39 - 48;
        if ( v38 == v36 )
          goto LABEL_66;
      }
      ++v36;
      v37 = v40 + (char)(v39 | 0x20) - 87;
    }
    while ( v38 != v36 );
LABEL_66:
    chunksize_buf[0] = 0;
    ++v23;
    if ( v37 )
    {
      chunksize_buf_index = 0;
      v27 = content_buf_used;
      v22 = v37;
      goto LABEL_34;
    }
  }
LABEL_136:
  v45 = v86;
  v21 = content_buf_used;
end_of_stream:
  free(header_buf);
  *v45 = v21;
  if ( !content_buf_used )
  {
    free(content_buf);
    return 0;
  }
  return content_buf;
}
