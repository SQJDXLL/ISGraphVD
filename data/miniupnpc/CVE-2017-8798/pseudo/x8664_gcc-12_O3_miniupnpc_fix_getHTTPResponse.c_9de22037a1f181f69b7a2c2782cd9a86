void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // rax
  __int64 v4; // rbx
  unsigned int v5; // ebp
  unsigned int v6; // r12d
  int v7; // r14d
  unsigned int v8; // ecx
  char *v9; // rax
  signed int v10; // ecx
  int v11; // esi
  int v12; // eax
  int v13; // r15d
  int v14; // r10d
  char v15; // dl
  char v16; // dl
  int v17; // edx
  __int64 v18; // rax
  int v19; // r14d
  int v20; // ebx
  int v21; // r12d
  char *v22; // rbp
  int v23; // r15d
  __int64 v24; // r13
  char *v25; // r11
  char v26; // di
  __int64 v27; // r12
  const char *v28; // rbp
  const char *v29; // rdi
  bool v30; // zf
  unsigned int v31; // r15d
  unsigned int v32; // eax
  char *v33; // rax
  bool v34; // r13
  __int64 v35; // rdi
  __int64 v37; // rdx
  int v38; // r13d
  unsigned int v39; // ebp
  unsigned int v40; // r15d
  char *v41; // rax
  unsigned int v42; // ecx
  char *v43; // r15
  unsigned int v44; // ecx
  unsigned int v45; // r12d
  unsigned int v46; // r15d
  int v47; // r12d
  __int64 v48; // r14
  const unsigned __int16 *v49; // r8
  unsigned int v50; // edi
  char *v51; // rdx
  __int64 v52; // rcx
  char *v53; // rax
  char v54; // al
  char *v55; // rcx
  int v56; // r8d
  char *v57; // rbx
  int v58; // eax
  int v59; // r8d
  size_t v60; // rdx
  const char *v61; // rdi
  int v62; // eax
  int v63; // eax
  int v64; // eax
  char v65; // dl
  unsigned int v66; // eax
  char *content_buf; // [rsp+8h] [rbp-8D0h]
  unsigned int content_bufa; // [rsp+8h] [rbp-8D0h]
  char *header_buf; // [rsp+10h] [rbp-8C8h]
  unsigned int content_buf_len; // [rsp+1Ch] [rbp-8BCh]
  signed int chunksize_buf_index; // [rsp+20h] [rbp-8B8h]
  unsigned int chunksize_buf_indexa; // [rsp+20h] [rbp-8B8h]
  unsigned int chunksize_buf_indexc; // [rsp+20h] [rbp-8B8h]
  unsigned int chunksize_buf_indexb; // [rsp+20h] [rbp-8B8h]
  unsigned int chunksize; // [rsp+24h] [rbp-8B4h]
  unsigned int chunksizea; // [rsp+24h] [rbp-8B4h]
  char *ptr; // [rsp+28h] [rbp-8B0h]
  unsigned int content_length; // [rsp+30h] [rbp-8A8h]
  unsigned int content_buf_used; // [rsp+34h] [rbp-8A4h]
  unsigned int content_buf_useda; // [rsp+34h] [rbp-8A4h]
  int endofheaders; // [rsp+38h] [rbp-8A0h]
  int endofheadersa; // [rsp+38h] [rbp-8A0h]
  int chunked; // [rsp+3Ch] [rbp-89Ch]
  unsigned int header_buf_len; // [rsp+44h] [rbp-894h]
  size_t v86; // [rsp+50h] [rbp-888h]
  size_t v87; // [rsp+50h] [rbp-888h]
  char *v88; // [rsp+58h] [rbp-880h]
  char chunksize_buf[32]; // [rsp+70h] [rbp-868h] BYREF
  char buf[2048]; // [rsp+90h] [rbp-848h] BYREF
  unsigned __int64 v93; // [rsp+898h] [rbp-40h]

  v93 = __readfsqword(0x28u);
  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800uLL);
  if ( !v3 )
    goto LABEL_152;
  header_buf = v3;
  content_buf = (char *)malloc(0x800uLL);
  if ( !content_buf )
  {
    free(header_buf);
LABEL_152:
    *size = -1;
    return 0LL;
  }
  chunksize_buf[0] = 0;
  v4 = 0LL;
  v5 = 0;
  v6 = 0;
  content_buf_len = 2048;
  content_buf_used = 0;
  header_buf_len = 2048;
  content_length = -1;
  chunked = 0;
  endofheaders = 0;
  ptr = header_buf;
  while ( 1 )
  {
    while ( 1 )
    {
      while ( 1 )
      {
        v7 = receivedata((unsigned int)s, buf, 2048LL, 5000LL, 0LL);
        if ( v7 <= 0 )
          goto end_of_stream;
        if ( endofheaders )
        {
          if ( chunked )
            goto LABEL_70;
LABEL_46:
          v31 = v7 + v5;
          if ( (int)content_length <= 0 )
          {
            if ( content_buf_len >= v31 )
            {
              v34 = v31 >= content_length;
              goto LABEL_54;
            }
            content_buf_len = v7 + v5;
            if ( content_length )
            {
LABEL_52:
              v33 = (char *)realloc(content_buf, content_buf_len);
              if ( !v33 )
              {
LABEL_149:
                free(content_buf);
                free(ptr);
                *size = -1;
                return 0LL;
              }
              content_buf = v33;
              v34 = v31 >= content_length;
LABEL_54:
              v35 = v5;
              v5 = v31;
              memcpy(&content_buf[v35], buf, v7);
              chunked = 0;
              goto LABEL_55;
            }
            v32 = v7 + v5;
          }
          else
          {
            v32 = content_length;
            if ( content_length < v31 )
            {
              v31 = content_length;
              v34 = 1;
              v7 = content_length - v5;
              if ( content_buf_len >= content_length )
                goto LABEL_54;
            }
            else
            {
              if ( content_buf_len >= v31 )
              {
                v34 = content_length == v31;
                goto LABEL_54;
              }
              if ( content_length < v31 )
                v32 = v7 + v5;
            }
          }
          content_buf_len = v32;
          goto LABEL_52;
        }
        v8 = v7 + content_buf_used;
        if ( header_buf_len < v7 + content_buf_used )
        {
          v9 = (char *)realloc(ptr, v8);
          v8 = v7 + content_buf_used;
          if ( !v9 )
          {
            free(ptr);
            free(content_buf);
            *size = -1;
            return 0LL;
          }
          header_buf_len = v7 + content_buf_used;
          ptr = v9;
        }
        chunksize_buf_index = v8;
        memcpy(&ptr[content_buf_used], buf, v7);
        v10 = chunksize_buf_index;
        v11 = chunksize_buf_index - 1;
        if ( chunksize_buf_index > 1 )
          break;
        content_buf_used = chunksize_buf_index;
      }
      v12 = 0;
      do
      {
        v14 = v12 + 1;
        v16 = ptr[v12];
        if ( v16 == 13 )
        {
          if ( ptr[v14] == 10 )
          {
            if ( v12 + 2 < chunksize_buf_index && ptr[v12 + 2] == 13 )
            {
              v14 = v12 + 3;
              if ( v12 + 3 < chunksize_buf_index && ptr[v14] == 10 )
              {
                v30 = v12 == -4;
                v12 += 4;
                v15 = v30;
                v13 = v12;
              }
              else
              {
                v12 += 4;
                v13 = 0;
                v14 = -1;
                v15 = 1;
              }
            }
            else
            {
              v12 += 3;
              v13 = 0;
              v14 = -1;
              v15 = 1;
            }
LABEL_15:
            if ( v11 <= v12 )
              break;
            continue;
          }
        }
        else
        {
          if ( v16 != 10 )
          {
            ++v12;
            v13 = 0;
            v14 = -1;
            v15 = 1;
            goto LABEL_15;
          }
          if ( ptr[v14] == 10 )
          {
            v30 = v12 == -2;
            v12 += 2;
            v15 = v30;
            v13 = v12;
            goto LABEL_15;
          }
        }
        v12 += 2;
        v13 = 0;
        v14 = -1;
        v15 = 1;
        if ( v11 <= v12 )
          break;
      }
      while ( v15 );
      if ( v13 )
        break;
      content_buf_used = chunksize_buf_index;
      endofheaders = 0;
    }
    if ( v14 <= 0 )
      goto LABEL_68;
    chunksize_buf_indexa = v4;
    v17 = 0;
    v18 = 0LL;
    chunksize = v6;
    v19 = 0;
    v20 = v10;
    v21 = 0;
    content_buf_useda = v5;
    v22 = ptr;
    endofheadersa = v13;
    v23 = v14;
    while ( 2 )
    {
      while ( 2 )
      {
        LODWORD(v24) = v19 + 1;
        v25 = &v22[v19];
        v26 = *v25;
        if ( (int)v18 > 0 && v17 <= (int)v18 )
        {
          if ( v26 == 58 )
          {
            v24 = (int)v24;
            while ( 1 )
            {
              v21 = v24;
              if ( v23 <= (int)v24 - 1 )
                break;
              v65 = v22[v24++];
              if ( v65 != 32 && v65 != 9 )
              {
                v17 = v19;
                v19 = v21;
                goto LABEL_28;
              }
            }
            v17 = v19;
            v19 = v24;
LABEL_28:
            if ( v23 <= v19 )
              goto LABEL_67;
            continue;
          }
          if ( v26 != 10 && v26 != 13 )
          {
LABEL_27:
            ++v19;
            goto LABEL_28;
          }
LABEL_41:
          if ( v20 > v19 )
            goto LABEL_64;
          goto LABEL_42;
        }
        break;
      }
      if ( v26 != 13 && v26 != 10 )
        goto LABEL_27;
      if ( !(_DWORD)v18 && status_code )
      {
        if ( v19 <= 0 )
          goto LABEL_64;
        v27 = (__int64)&v22[v19 + 1];
        v86 = (size_t)v22;
        v28 = v22 + 1;
        v88 = v25;
        do
        {
          while ( *(v28 - 1) != 32 )
          {
            if ( (const char *)v27 == ++v28 )
              goto LABEL_40;
          }
          if ( *status_code >= 0 )
            break;
          v29 = v28++;
          *status_code = strtol(v29, 0LL, 10);
        }
        while ( (const char *)v27 != v28 );
LABEL_40:
        v22 = (char *)v86;
        v25 = v88;
        goto LABEL_41;
      }
      if ( v17 <= (int)v18 || v17 >= v21 )
        goto LABEL_41;
      v60 = v17 - (int)v18;
      v87 = (int)v60;
      v61 = &v22[v18];
      if ( !strncasecmp(&v22[v18], "content-length", v60) )
      {
        v66 = strtol(&v22[v21], 0LL, 10);
        v25 = &v22[v19];
        content_length = v66;
        if ( v20 > v19 )
          goto LABEL_64;
        goto LABEL_42;
      }
      v62 = strncasecmp(v61, "transfer-encoding", v87);
      v25 = &v22[v19];
      if ( v62 )
        goto LABEL_41;
      v63 = strncasecmp(&v22[v21], "chunked", 7uLL);
      v25 = &v22[v19];
      v30 = v63 == 0;
      v64 = 1;
      if ( !v30 )
        v64 = chunked;
      chunked = v64;
      if ( v20 <= v19 )
      {
LABEL_42:
        v21 = 0;
        v17 = v19;
        v18 = v19;
        goto LABEL_27;
      }
LABEL_64:
      while ( 1 )
      {
        v18 = v19;
        v19 = v24;
        if ( *v25 != 13 && *v25 != 10 )
          break;
        ++v25;
        if ( v20 == (_DWORD)v24 )
        {
          v19 = v18 + 2;
          v21 = 0;
          v17 = v20;
          v18 = v20;
          goto LABEL_28;
        }
        LODWORD(v24) = v24 + 1;
      }
      v21 = 0;
      v17 = v18;
      if ( v23 > (int)v24 )
        continue;
      break;
    }
LABEL_67:
    v10 = v20;
    v6 = chunksize;
    v4 = chunksize_buf_indexa;
    v5 = content_buf_useda;
    v13 = endofheadersa;
LABEL_68:
    v7 = v10 - v13;
    chunksize_buf_indexc = v10;
    memcpy(buf, &ptr[v13], v10 - v13);
    endofheaders = v13;
    content_buf_used = chunksize_buf_indexc;
    if ( !chunked )
      goto LABEL_46;
    if ( v7 <= 0 )
      goto LABEL_113;
LABEL_70:
    v37 = v5;
    v38 = 0;
    v39 = v6;
LABEL_77:
    if ( !v39 )
      break;
LABEL_78:
    v42 = v7 - v38;
    if ( v7 - v38 > v39 )
      v42 = v39;
    v45 = v42 + v37;
    if ( content_buf_len < v42 + (unsigned int)v37 )
    {
      chunksizea = v37;
      chunksize_buf_indexb = v42;
      v40 = content_length;
      if ( content_length < v45 )
        v40 = v42 + v37;
      if ( (content_length & 0x80000000) != 0 )
        v40 = v42 + v37;
      content_buf_len = v40;
      v41 = (char *)realloc(content_buf, v40);
      v42 = chunksize_buf_indexb;
      v37 = chunksizea;
      v43 = v41;
      if ( !v41 )
        goto LABEL_149;
    }
    else
    {
      v43 = content_buf;
    }
    content_bufa = v42;
    memcpy(&v43[v37], &buf[v38], v42);
    v44 = content_bufa;
    v37 = v45;
    content_buf = v43;
    v38 += v44;
    v39 -= v44;
    if ( v38 < v7 )
      goto LABEL_77;
    v6 = v39;
    v5 = v37;
LABEL_113:
    v34 = v5 >= content_length;
LABEL_55:
    if ( (int)content_length > 0 && v34 )
      goto end_of_stream;
  }
  v46 = v37;
  v47 = v7;
  do
  {
    if ( !(_DWORD)v4 )
    {
      if ( buf[v38] == 13 )
        ++v38;
      if ( v38 >= v47 )
        goto LABEL_112;
      v48 = v38;
      if ( buf[v38] != 10 )
        goto LABEL_89;
      ++v38;
    }
    if ( v38 >= v47 )
      goto LABEL_112;
    v48 = v38;
LABEL_89:
    v49 = *_ctype_b_loc();
    v50 = v47 + v4 - v38;
    v51 = &buf[v48];
    while ( 1 )
    {
      v52 = *v51;
      if ( (v49[v52] & 0x1000) == 0 || (unsigned int)v4 > 0x1E )
        break;
      chunksize_buf[v4] = v52;
      ++v38;
      ++v51;
      chunksize_buf[(unsigned int)(v4 + 1)] = 0;
      if ( (_DWORD)v4 + 1 == v50 )
      {
        v4 = v50;
        break;
      }
      v4 = (unsigned int)(v4 + 1);
    }
    if ( v38 >= v47 )
      goto LABEL_112;
    v53 = &buf[v38];
    while ( *v53 != 13 && *v53 != 10 )
    {
      ++v38;
      ++v53;
      if ( v38 == v47 )
        goto LABEL_112;
    }
    if ( v38 >= v47 )
    {
LABEL_112:
      v6 = 0;
      v5 = v46;
      goto LABEL_113;
    }
    v54 = buf[v38];
    if ( v54 == 13 )
    {
      if ( ++v38 >= v47 )
        goto LABEL_112;
      v54 = buf[v38];
    }
  }
  while ( v54 != 10 );
  v37 = v46;
  v7 = v47;
  if ( (_DWORD)v4 )
  {
    v55 = chunksize_buf;
    v56 = 0;
    v57 = &chunksize_buf[v4];
    do
    {
      while ( 1 )
      {
        v58 = *v55;
        v59 = 16 * v56;
        if ( (unsigned __int8)(*v55 - 48) > 9u )
          break;
        ++v55;
        v56 = v59 + v58 - 48;
        if ( v55 == v57 )
          goto LABEL_107;
      }
      ++v55;
      v56 = v59 + (char)(v58 | 0x20) - 87;
    }
    while ( v55 != v57 );
LABEL_107:
    chunksize_buf[0] = 0;
    ++v38;
    if ( v56 )
    {
      v4 = 0LL;
      v39 = v56;
      goto LABEL_78;
    }
  }
  v5 = v46;
end_of_stream:
  free(ptr);
  *size = v5;
  if ( !v5 )
  {
    free(content_buf);
    return 0LL;
  }
  return content_buf;
}
