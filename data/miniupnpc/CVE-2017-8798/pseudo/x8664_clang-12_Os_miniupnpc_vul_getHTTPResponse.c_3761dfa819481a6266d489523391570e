void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // rax
  char *v4; // r13
  char *v5; // rax
  int v6; // eax
  int v7; // ebx
  int v8; // ebp
  unsigned int v9; // esi
  int v10; // r15d
  int v11; // eax
  int v12; // r14d
  unsigned int v13; // r12d
  char *v14; // rbx
  int v15; // ecx
  char v16; // bl
  __int64 v17; // rsi
  __int64 v18; // rdx
  int v19; // ecx
  int v20; // edi
  int v21; // r8d
  int v22; // edx
  int v23; // eax
  int v24; // r14d
  int *v25; // rsi
  char v26; // cl
  int v27; // ecx
  __int64 v28; // rcx
  char v29; // bl
  __int64 v30; // rbp
  const char *v31; // rbx
  int v32; // ecx
  const char *v33; // rbx
  int v34; // eax
  int v35; // ecx
  __int64 v36; // rcx
  char v37; // bl
  char *v38; // r9
  int v39; // r12d
  char *v40; // rdi
  char *v41; // rbp
  const unsigned __int16 **v42; // rax
  unsigned int v43; // r8d
  const unsigned __int16 *v44; // rax
  unsigned __int64 v45; // rcx
  char *v46; // rdi
  __int64 v47; // rsi
  __int64 v48; // rbp
  char *v49; // rcx
  int v50; // eax
  char v51; // dl
  __int64 v52; // rcx
  int v53; // edx
  int v54; // ebx
  int v55; // ebx
  int v56; // eax
  int v57; // ecx
  size_t v58; // rsi
  char *v59; // rax
  unsigned int v60; // edx
  int v61; // ebp
  int v62; // r14d
  size_t v63; // rsi
  char *v64; // rax
  char *v65; // rbx
  char *v67; // rdi
  char *v68; // rdi
  unsigned int v69; // [rsp+0h] [rbp-8D8h]
  char *ptr; // [rsp+8h] [rbp-8D0h]
  int v71; // [rsp+10h] [rbp-8C8h]
  int v72; // [rsp+1Ch] [rbp-8BCh]
  unsigned int v73; // [rsp+20h] [rbp-8B8h]
  unsigned int v74; // [rsp+20h] [rbp-8B8h]
  int v75; // [rsp+24h] [rbp-8B4h]
  int v76; // [rsp+28h] [rbp-8B0h]
  int v77; // [rsp+28h] [rbp-8B0h]
  int v78; // [rsp+28h] [rbp-8B0h]
  int v79; // [rsp+34h] [rbp-8A4h]
  int v81; // [rsp+44h] [rbp-894h]
  unsigned int v83; // [rsp+4Ch] [rbp-88Ch]
  unsigned int v84; // [rsp+50h] [rbp-888h]
  char *nptr; // [rsp+58h] [rbp-880h]
  unsigned int v87; // [rsp+68h] [rbp-870h]
  size_t v88; // [rsp+70h] [rbp-868h]
  __int64 v89; // [rsp+78h] [rbp-860h]
  char v90[32]; // [rsp+80h] [rbp-858h]
  char src[2104]; // [rsp+A0h] [rbp-838h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800uLL);
  if ( !v3 )
    goto LABEL_142;
  v4 = v3;
  v5 = (char *)malloc(0x800uLL);
  if ( !v5 )
  {
    free(v4);
LABEL_142:
    *size = -1;
    return 0LL;
  }
  ptr = v5;
  v90[0] = 0;
  v83 = 2048;
  v6 = -1;
  v79 = 0;
  v7 = 0;
  v8 = 0;
  v84 = 2048;
  v71 = 0;
  v9 = 0;
  v10 = 0;
  do
  {
    v72 = v7;
    v73 = v9;
    v75 = v6;
    v11 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
    if ( v11 <= 0 )
      break;
    v12 = v11;
    v13 = v8;
    v14 = v4;
LABEL_8:
    if ( v10 )
    {
      v8 = v13;
      v4 = v14;
      goto LABEL_83;
    }
    v8 = v12 + v13;
    if ( v12 + v13 <= v83 )
    {
      v4 = v14;
    }
    else
    {
      v4 = (char *)realloc(v14, (unsigned int)v8);
      v83 = v12 + v13;
      if ( !v4 )
      {
        free(v14);
        v67 = ptr;
        goto LABEL_144;
      }
    }
    memcpy(&v4[v13], src, (unsigned int)v12);
    if ( v8 < 2 )
      goto LABEL_34;
    v15 = 0;
    do
    {
      v16 = v4[v15];
      if ( v16 == 10 )
      {
        LODWORD(v17) = v15 + 1;
        v10 = v15 + 2;
        if ( v4[v15 + 1] != 10 )
          v10 = 0;
        goto LABEL_31;
      }
      if ( v16 != 13 )
      {
        LODWORD(v17) = v15;
        goto LABEL_30;
      }
      if ( v4[v15 + 1] != 10 )
      {
        LODWORD(v18) = v15 + 1;
LABEL_29:
        LODWORD(v17) = v18;
LABEL_30:
        v10 = 0;
        goto LABEL_31;
      }
      v17 = v15 + 2LL;
      if ( v15 + 2 >= v8 )
        goto LABEL_30;
      v10 = 0;
      if ( v4[v17] == 13 )
      {
        v18 = v15 + 3LL;
        if ( (int)v18 >= v8 )
          goto LABEL_29;
        v19 = v15 + 4;
        if ( v4[v18] != 10 )
          v19 = 0;
        LODWORD(v17) = v18;
        v10 = v19;
      }
LABEL_31:
      v15 = v17 + 1;
    }
    while ( (int)v17 + 1 < v8 - 1 && !v10 );
    if ( !v10 )
    {
LABEL_34:
      v10 = 0;
      v12 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
      v13 = v8;
      v14 = v4;
      if ( v12 <= 0 )
        break;
      goto LABEL_8;
    }
    if ( v10 >= 2 )
    {
      v20 = v10 - 1;
      v89 = v8;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = status_code;
      v76 = v8;
      do
      {
        v26 = v4[v24];
        if ( v23 > 0 && v22 <= v23 && v26 == 58 )
        {
          v27 = v24;
          if ( v24 < v20 )
          {
            v28 = 0LL;
            while ( 1 )
            {
              v29 = v4[v24 + 1 + v28];
              if ( v29 != 32 && v29 != 9 )
                break;
              if ( v10 - 1 - (__int64)v24 == ++v28 )
              {
                v20 = v10 - 1;
                v27 = v10 - 1;
                goto LABEL_68;
              }
            }
            v27 = v24 + v28;
            v20 = v10 - 1;
          }
LABEL_68:
          v21 = v27 + 1;
        }
        else
        {
          if ( v26 == 13 || v26 == 10 )
          {
            if ( !v25 || v23 )
            {
              v32 = v22 - v23;
              if ( v22 > v23 && v21 > v22 )
              {
                v81 = v21;
                v33 = &v4[v23];
                v88 = v32;
                if ( !strncasecmp(v33, "content-length", v32) )
                {
                  v75 = atoi(&v4[v81]);
                }
                else if ( !strncasecmp(v33, "transfer-encoding", v88) )
                {
                  v34 = strncasecmp(&v4[v81], "chunked", 7uLL);
                  v35 = v79;
                  if ( !v34 )
                    v35 = 1;
                  v79 = v35;
                }
                v25 = status_code;
                goto LABEL_71;
              }
            }
            else if ( v24 > 0 )
            {
              v30 = (unsigned int)v24;
              v31 = v4 + 1;
              do
              {
                if ( *(v31 - 1) == 32 )
                {
                  if ( *v25 >= 0 )
                    break;
                  v25 = status_code;
                  *status_code = atoi(v31);
                }
                ++v31;
                --v30;
              }
              while ( v30 );
              v8 = v76;
LABEL_71:
              v20 = v10 - 1;
            }
            v21 = 0;
            if ( v24 >= v8 )
            {
              v27 = v24;
              v23 = v24;
            }
            else
            {
              v36 = 0LL;
              while ( 1 )
              {
                v37 = v4[v24 + v36];
                if ( v37 != 13 && v37 != 10 )
                  break;
                if ( v89 - v24 == ++v36 )
                {
                  v27 = v8;
                  v23 = v8;
                  v24 = v8;
                  goto LABEL_80;
                }
              }
              v24 += v36;
              v27 = v24;
              v23 = v24;
LABEL_80:
              v20 = v10 - 1;
            }
            goto LABEL_81;
          }
          v27 = v24;
          v24 = v22;
        }
LABEL_81:
        v22 = v24;
        v24 = v27 + 1;
      }
      while ( v27 + 1 < v20 );
    }
    v12 = v8 - v10;
    memcpy(src, &v4[v10], v8 - v10);
LABEL_83:
    v9 = v73;
    v7 = v72;
    if ( v79 )
    {
      if ( v12 > 0 )
      {
        v38 = (char *)(unsigned int)v12;
        v39 = 0;
        v40 = ptr;
        v77 = v8;
        do
        {
          v69 = v71;
          ptr = v40;
          do
          {
            if ( v7 )
              goto LABEL_115;
            if ( !v9 )
            {
              v39 += src[v39] == 13;
              if ( v39 < v12 )
                v39 += src[v39] == 10;
            }
            if ( v39 < v12 )
            {
              v41 = v38;
              v42 = _ctype_b_loc();
              v38 = v41;
              v43 = v9;
              v44 = *v42;
              v45 = v9;
              v46 = &v41[-v39];
              v47 = 0LL;
              while ( v45 <= 0x1E )
              {
                v48 = src[v39 + v47];
                if ( (v44[v48] & 0x1000) == 0 )
                  break;
                v90[v45] = v48;
                v90[++v45] = 0;
                if ( v46 == (char *)++v47 )
                {
                  v7 = 0;
                  v9 = v43 + v12 - v39;
                  v8 = v77;
                  goto LABEL_137;
                }
              }
              v39 += v47;
              v9 = v45;
              v8 = v77;
              v40 = ptr;
            }
            if ( v39 < v12 )
            {
              v49 = (char *)v39;
              v50 = -v39;
              while ( 1 )
              {
                v51 = src[(_QWORD)v49];
                if ( v51 == 10 || v51 == 13 )
                  break;
                ++v49;
                --v50;
                if ( v38 == v49 )
                  goto LABEL_136;
              }
              v39 = (v51 == 13) - v50;
            }
            if ( v39 >= v12 )
            {
LABEL_136:
              v7 = 0;
              ptr = v40;
              goto LABEL_137;
            }
            v7 = 0;
          }
          while ( src[v39] != 10 );
          if ( !v9 )
          {
            v90[0] = 0;
LABEL_148:
            ptr = v40;
            goto end_of_stream;
          }
          v52 = 0LL;
          v7 = 0;
          do
          {
            v53 = (unsigned __int8)v90[v52];
            v54 = 16 * v7;
            if ( (unsigned __int8)(v53 - 48) > 9u )
            {
              v53 = (char)(v53 | 0x20);
              v55 = v54 - 87;
            }
            else
            {
              v55 = v54 - 48;
            }
            v7 = v55 + v53;
            ++v52;
          }
          while ( v9 != v52 );
          v90[0] = 0;
          if ( !v7 )
            goto LABEL_148;
          ++v39;
          v9 = 0;
LABEL_115:
          nptr = v38;
          v74 = v9;
          v56 = v12 - v39;
          if ( v7 < v12 - v39 )
            v56 = v7;
          v87 = v56;
          v57 = v56 + v71;
          v71 += v56;
          if ( v56 + v69 <= v84 )
          {
            v59 = v40;
          }
          else
          {
            v58 = (unsigned int)v75;
            if ( v75 < v57 )
              v58 = (unsigned int)v57;
            v84 = v58;
            v59 = (char *)realloc(v40, v58);
            if ( !v59 )
            {
              v68 = ptr;
              goto LABEL_146;
            }
          }
          ptr = v59;
          memcpy(&v59[v69], &src[v39], v87);
          v39 += v87;
          v7 -= v87;
          v40 = ptr;
          v9 = v74;
          v38 = nptr;
        }
        while ( v39 < v12 );
      }
    }
    else
    {
      v78 = v8;
      v60 = v71;
      v61 = v75 - v71;
      if ( v12 + v71 <= v75 )
        v61 = v12;
      if ( v75 <= 0 )
        v61 = v12;
      v62 = v71 + v61;
      if ( v71 + v61 <= v84 )
      {
        v65 = ptr;
      }
      else
      {
        v63 = (unsigned int)v75;
        if ( v75 < v62 )
          v63 = (unsigned int)v62;
        v84 = v63;
        v64 = (char *)realloc(ptr, v63);
        v60 = v71;
        v65 = v64;
        if ( !v64 )
        {
          v68 = ptr;
LABEL_146:
          free(v68);
          v67 = v4;
LABEL_144:
          free(v67);
          *size = -1;
          return 0LL;
        }
      }
      memcpy(&v65[v60], src, v61);
      ptr = v65;
      v71 += v61;
      v8 = v78;
      v9 = v73;
      v7 = v72;
    }
LABEL_137:
    v6 = v75;
  }
  while ( v75 <= 0 || v71 < v75 );
end_of_stream:
  free(v4);
  *size = v71;
  if ( !v71 )
  {
    free(ptr);
    return 0LL;
  }
  return ptr;
}
