char *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v4; // $v0
  char *v5; // $s1
  char *v6; // $v0
  unsigned int v7; // $v0
  unsigned int v8; // $v1
  int v9; // $s6
  unsigned int v10; // $a0
  unsigned int v11; // $s3
  int v12; // $v0
  int v13; // $fp
  signed int v14; // $s0
  char *v15; // $v0
  _BOOL4 v16; // $a0
  int v17; // $s7
  int v18; // $v1
  int v19; // $a0
  int v20; // $a0
  bool v21; // dc
  signed int v22; // $fp
  char *v23; // $a0
  char *v24; // $s7
  const unsigned __int16 *v25; // $v0
  int v26; // $v1
  char *v27; // $at
  signed int v28; // $v1
  char *v29; // $v0
  int v30; // $a1
  int v31; // $at
  unsigned int v32; // $a1
  int v33; // $v1
  int v34; // $at
  int v35; // $v1
  unsigned int v36; // $s6
  size_t v37; // $s7
  unsigned int v38; // $v1
  size_t v39; // $a1
  char *v40; // $v0
  int v41; // $a1
  int v42; // $fp
  int v43; // $s0
  int v44; // $v1
  int v45; // $v0
  int v46; // $s6
  int v47; // $a0
  int v48; // $a0
  int v49; // $v1
  const char *v50; // $s0
  int *v51; // $v0
  int v52; // $fp
  int v53; // $v0
  int v54; // $v0
  int v55; // $v0
  int v56; // $at
  int v57; // $v0
  int v58; // $a2
  int v59; // $s0
  int v60; // $v1
  int v61; // $v0
  int v62; // $fp
  int v63; // $a0
  int v64; // $a0
  int v65; // $v1
  int v66; // $s6
  int v67; // $v0
  int v68; // $v0
  int v69; // $at
  int v70; // $v0
  signed int v71; // $v1
  size_t v72; // $a1
  char *v73; // $v0
  unsigned int v74; // $v1
  char *v75; // $s7
  char *result; // $v0
  int v77; // [sp+1Ch] [-86Ch]
  int v78; // [sp+20h] [-868h]
  char *v79; // [sp+24h] [-864h]
  char *v80; // [sp+24h] [-864h]
  int *v81; // [sp+34h] [-854h]
  int v82; // [sp+38h] [-850h]
  size_t n; // [sp+3Ch] [-84Ch]
  size_t na; // [sp+3Ch] [-84Ch]
  size_t nb; // [sp+3Ch] [-84Ch]
  int v86; // [sp+40h] [-848h]
  char *ptr; // [sp+44h] [-844h]
  unsigned int v88; // [sp+48h] [-840h]
  unsigned int v89; // [sp+48h] [-840h]
  unsigned int v90; // [sp+4Ch] [-83Ch]
  int v91; // [sp+50h] [-838h]
  int v92; // [sp+50h] [-838h]
  void *v93; // [sp+54h] [-834h]
  void *v94; // [sp+54h] [-834h]
  char *v95; // [sp+54h] [-834h]
  unsigned int v98; // [sp+60h] [-828h]
  int v99; // [sp+64h] [-824h]
  char v100[32]; // [sp+68h] [-820h] BYREF
  char v101[2048]; // [sp+88h] [-800h] BYREF

  if ( status_code )
    *status_code = -1;
  v4 = (char *)malloc(0x800u);
  if ( !v4 )
  {
    result = 0;
    *size = -1;
    return result;
  }
  v5 = v4;
  v98 = 2048;
  v6 = (char *)malloc(0x800u);
  if ( !v6 )
  {
    free(v5);
    result = 0;
    *size = -1;
    return result;
  }
  ptr = v6;
  v7 = -1;
  v8 = 0;
  v9 = 0;
  v10 = 2048;
  v11 = 0;
  v81 = size;
  v100[0] = 0;
  v82 = 0;
  v90 = 0;
  v99 = 0;
LABEL_6:
  while ( 2 )
  {
    v88 = v8;
    v93 = (void *)v10;
    v86 = v7;
    do
    {
      v13 = v9;
      v12 = receivedata(s, v101, 2048, 5000);
      if ( v12 <= 0 )
        goto end_of_stream;
      v14 = v12;
      if ( v99 )
      {
        v10 = (unsigned int)v93;
        v8 = v88;
        if ( v82 )
          goto LABEL_35;
LABEL_169:
        v71 = v14;
        if ( v86 < v14 + v90 )
          v71 = v86 - v90;
        if ( v86 >= 1 )
          v14 = v71;
        if ( v10 >= v14 + v90 )
        {
          v75 = ptr;
          v74 = v90;
        }
        else
        {
          v72 = v86;
          if ( v86 < v14 + v90 )
            v72 = v14 + v90;
          if ( v86 < 0 )
            v72 = v14 + v90;
          v93 = (void *)v72;
          v73 = (char *)realloc(ptr, v72);
          v74 = v90;
          v75 = v73;
          if ( !v73 )
          {
            free(ptr);
            free(v5);
            *v81 = -1;
            return 0;
          }
        }
        memcpy(&v75[v74], v101, v14);
        v10 = (unsigned int)v93;
        v8 = v88;
        ptr = v75;
        v90 += v14;
        v7 = v86;
        if ( v86 > 0 )
          goto LABEL_182;
        goto LABEL_6;
      }
      v9 += v12;
      if ( v98 >= v12 + v13 )
      {
        v15 = v5;
      }
      else
      {
        v15 = (char *)realloc(v5, v12 + v13);
        v98 = v14 + v13;
        if ( !v15 )
        {
          free(v5);
          free(ptr);
          *v81 = -1;
          return 0;
        }
      }
      v5 = v15;
      memcpy(&v15[v13], v101, v14);
      v16 = 1;
      v17 = 0;
      v99 = 0;
      if ( v9 >= 2 )
      {
        v18 = 0;
        do
        {
          v19 = (unsigned __int8)v5[v18];
          if ( v19 == 10 )
          {
            v20 = v18 + 1;
            v17 = v18 + 2;
            if ( v5[v18 + 1] != 0xA )
              v17 = 0;
          }
          else if ( v19 == 13 )
          {
            v20 = v18 + 1;
            v17 = 0;
            if ( v5[v18 + 1] == 10 )
            {
              v20 = v18 + 2;
              if ( v18 + 2 >= v9 )
              {
                v17 = 0;
              }
              else
              {
                v17 = 0;
                if ( v5[v20] == 13 )
                {
                  v20 = v18 + 3;
                  if ( v18 + 3 >= v9 )
                  {
                    v17 = 0;
                  }
                  else
                  {
                    v17 = v18 + 4;
                    if ( v5[v20] != 0xA )
                      v17 = 0;
                  }
                }
              }
            }
          }
          else
          {
            v20 = v18;
            v17 = 0;
          }
          v18 = v20 + 1;
          v21 = v20 + 1 >= v9 - 1;
          v16 = v17 == 0;
        }
        while ( !v21 && !v17 );
      }
    }
    while ( v16 );
    v92 = v14 + v13;
    if ( v17 >= 2 )
    {
      v41 = v17 - 1;
      if ( status_code )
      {
        v42 = v14 + v13;
        v43 = 0;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        v77 = v42;
        while ( 1 )
        {
          v48 = (unsigned __int8)v5[v46];
          if ( v48 == 58 && v45 > 0 && v45 >= v44 )
          {
            v43 = v46 + 1;
            if ( v46 >= v41 )
            {
              v47 = v46;
              v44 = v46;
            }
            else
            {
              v43 = v46 + 1;
              do
              {
                v49 = (unsigned __int8)v5[v43];
                if ( v49 != 9 && v49 != 32 )
                {
                  v47 = v43 - 1;
                  v44 = v46;
                  goto LABEL_85;
                }
                ++v43;
              }
              while ( v17 != v43 );
              v47 = v41;
              v44 = v46;
              v43 = v17;
            }
          }
          else if ( v48 == 13 || v48 == 10 )
          {
            if ( v45 )
            {
              if ( v45 >= v44 || v44 >= v43 )
              {
LABEL_118:
                v43 = 0;
                if ( v46 < v92 )
                  goto LABEL_125;
              }
              else
              {
                v79 = &v5[v45];
                na = v44 - v45;
                if ( strncasecmp(&v5[v45], "content-length", v44 - v45) )
                {
                  if ( strncasecmp(v79, "transfer-encoding", na) )
                  {
                    v41 = v17 - 1;
                    v43 = 0;
                    if ( v46 < v92 )
                      goto LABEL_125;
                  }
                  else
                  {
                    v55 = strncasecmp(&v5[v43], "chunked", 7u);
                    v56 = v82;
                    v41 = v17 - 1;
                    if ( !v55 )
                      v56 = 1;
                    v82 = v56;
                    v43 = 0;
                    if ( v46 < v92 )
                    {
                      do
                      {
LABEL_125:
                        v57 = (unsigned __int8)v5[v46];
                        if ( v57 != 13 && v57 != 10 )
                        {
                          v47 = v46;
                          v45 = v46;
                          v44 = v46;
                          goto LABEL_85;
                        }
                        ++v46;
                      }
                      while ( v42 != v46 );
                      v44 = v92;
                      v47 = v92;
                      v45 = v92;
                      goto LABEL_85;
                    }
                  }
                }
                else
                {
                  v54 = strtol(&v5[v43], 0u, 10);
                  v41 = v17 - 1;
                  v86 = v54;
                  v43 = 0;
                  if ( v46 < v92 )
                    goto LABEL_125;
                }
              }
            }
            else
            {
              v50 = v5 + 1;
              v51 = status_code;
              v52 = v46;
              if ( v46 > 0 )
              {
                do
                {
                  if ( *(v50 - 1) == 32 )
                  {
                    if ( *v51 >= 0 )
                    {
                      v42 = v77;
                      goto LABEL_118;
                    }
                    v53 = strtol(v50, 0u, 10);
                    v41 = v17 - 1;
                    *status_code = v53;
                    v51 = status_code;
                  }
                  --v52;
                  ++v50;
                }
                while ( v52 );
                v42 = v77;
                v43 = 0;
                if ( v46 < v92 )
                  goto LABEL_125;
              }
              else
              {
                v42 = v77;
                v43 = 0;
                if ( v46 < v92 )
                  goto LABEL_125;
              }
            }
            v47 = v46;
            v45 = v46;
            v44 = v46;
          }
          else
          {
            v47 = v46;
          }
LABEL_85:
          v46 = v47 + 1;
          if ( v47 + 1 >= v41 )
            goto LABEL_168;
        }
      }
      v58 = v14 + v13;
      v59 = 0;
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v78 = v58;
      while ( 2 )
      {
        v64 = (unsigned __int8)v5[v62];
        if ( v64 == 58 && v61 > 0 && v61 >= v60 )
        {
          v59 = v62 + 1;
          if ( v62 >= v41 )
          {
            v63 = v62;
            v60 = v62;
          }
          else
          {
            v59 = v62 + 1;
            do
            {
              v65 = (unsigned __int8)v5[v59];
              if ( v65 != 32 && v65 != 9 )
              {
                v63 = v59 - 1;
                v60 = v62;
                goto LABEL_134;
              }
              ++v59;
            }
            while ( v17 != v59 );
            v63 = v41;
            v60 = v62;
            v59 = v17;
          }
          goto LABEL_134;
        }
        if ( v64 != 13 && v64 != 10 )
        {
          v63 = v62;
          goto LABEL_134;
        }
        if ( v61 >= v60 )
        {
          v66 = v92;
          v59 = 0;
          if ( v62 < v92 )
            goto LABEL_164;
          goto LABEL_158;
        }
        v66 = v92;
        if ( v60 < v59 )
        {
          v80 = &v5[v61];
          nb = v60 - v61;
          if ( strncasecmp(&v5[v61], "content-length", v60 - v61) )
          {
            if ( strncasecmp(v80, "transfer-encoding", nb) )
            {
              v41 = v17 - 1;
              v58 = v78;
              v59 = 0;
              if ( v62 < v92 )
                goto LABEL_164;
            }
            else
            {
              v68 = strncasecmp(&v5[v59], "chunked", 7u);
              v69 = v82;
              v41 = v17 - 1;
              v58 = v78;
              if ( !v68 )
                v69 = 1;
              v82 = v69;
              v59 = 0;
              if ( v62 < v92 )
              {
                do
                {
LABEL_164:
                  v70 = (unsigned __int8)v5[v62];
                  if ( v70 != 13 && v70 != 10 )
                  {
                    v63 = v62;
                    v61 = v62;
                    v60 = v62;
                    goto LABEL_134;
                  }
                  ++v62;
                }
                while ( v58 != v62 );
                v63 = v66;
                v61 = v66;
                v60 = v66;
LABEL_134:
                v62 = v63 + 1;
                if ( v63 + 1 >= v41 )
                  goto LABEL_168;
                continue;
              }
            }
LABEL_158:
            v63 = v62;
            v61 = v62;
            v60 = v62;
            goto LABEL_134;
          }
          v67 = strtol(&v5[v59], 0u, 10);
          v41 = v17 - 1;
          v58 = v78;
          v86 = v67;
        }
        break;
      }
      v59 = 0;
      if ( v62 < v92 )
        goto LABEL_164;
      goto LABEL_158;
    }
LABEL_168:
    v9 = v92;
    v14 = v92 - v17;
    memcpy(v101, &v5[v17], v92 - v17);
    v10 = (unsigned int)v93;
    v8 = v88;
    v99 = v17;
    if ( !v82 )
      goto LABEL_169;
LABEL_35:
    if ( v14 <= 0 )
    {
LABEL_130:
      v7 = v86;
      if ( v86 <= 0 )
        continue;
LABEL_182:
      if ( v90 >= v7 )
        goto end_of_stream;
      continue;
    }
    break;
  }
  v22 = 0;
  v91 = v9;
  while ( 1 )
  {
    v94 = (void *)v10;
    v23 = ptr;
    n = v90;
LABEL_38:
    if ( !v8 )
      break;
    v36 = (unsigned int)v94;
LABEL_69:
    v37 = v14 - v22;
    v89 = v8;
    if ( v8 < v14 - v22 )
      v37 = v8;
    v38 = v37 + v90;
    v90 += v37;
    if ( v36 >= v37 + n )
    {
      v40 = v23;
    }
    else
    {
      v95 = v23;
      v39 = v86;
      if ( v86 < v38 )
        v39 = v37 + n;
      if ( v86 < 0 )
        v39 = v37 + n;
      v36 = v39;
      v40 = (char *)realloc(v23, v39);
      if ( !v40 )
      {
        free(v95);
        free(v5);
        *v81 = -1;
        return 0;
      }
    }
    ptr = v40;
    memcpy(&v40[n], &v101[v22], v37);
    v22 += v37;
    v10 = v36;
    v9 = v91;
    v8 = v89 - v37;
    if ( v22 >= v14 )
      goto LABEL_130;
  }
  if ( !v11 )
  {
    v22 += v101[v22] == 0xD;
    if ( v22 < v14 )
      v22 += v101[v22] == 0xA;
  }
  if ( v22 >= v14 )
  {
    v28 = v22;
  }
  else
  {
    v24 = v23;
    v25 = *_ctype_b_loc();
    v23 = v24;
    while ( 1 )
    {
      if ( v11 >= 0x1F )
      {
        v28 = v22;
        goto LABEL_51;
      }
      v26 = v101[v22];
      if ( (v25[v26] & 0x10) == 0 )
        break;
      ++v22;
      v27 = &v100[v11++];
      v27[1] = 0;
      *v27 = v26;
      if ( v14 == v22 )
      {
        v28 = v14;
        goto LABEL_51;
      }
    }
    v28 = v22;
  }
LABEL_51:
  v29 = v100;
  while ( v28 < v14 )
  {
    v30 = (unsigned __int8)v101[v28++];
    if ( v30 == 13 || v30 == 10 )
    {
      v22 = v28 - 1;
      if ( v30 == 0xD )
        v22 = v28;
      if ( v22 >= v14 )
        goto LABEL_129;
      goto LABEL_60;
    }
  }
  v22 = v28;
  if ( v28 >= v14 )
  {
LABEL_129:
    ptr = v23;
    v10 = (unsigned int)v94;
    v8 = 0;
    goto LABEL_130;
  }
LABEL_60:
  v8 = 0;
  if ( v101[v22] != 10 )
    goto LABEL_38;
  if ( v11 )
  {
    v8 = 0;
    do
    {
      v31 = *v29;
      v32 = v8;
      ++v29;
      --v11;
      v33 = v31 | 0x20;
      v34 = v31 - 48;
      v35 = v33 - 87;
      if ( (unsigned __int8)v34 < 0xAu )
        v35 = v34;
      v8 = v35 + 16 * v32;
    }
    while ( v11 );
    v100[0] = 0;
    if ( v8 )
    {
      v36 = (unsigned int)v94;
      v11 = 0;
      ++v22;
      goto LABEL_69;
    }
    ptr = v23;
  }
  else
  {
    v100[0] = 0;
    ptr = v23;
  }
end_of_stream:
  free(v5);
  *v81 = v90;
  if ( v90 )
    return ptr;
  free(ptr);
  return 0;
}
