char *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // $s2
  unsigned int v4; // $s7
  char *v5; // $s1
  char *v6; // $s6
  signed int v7; // $fp
  signed int v8; // $s3
  unsigned int v9; // $v0
  char *v10; // $v0
  int v11; // $t2
  int v12; // $v1
  char *v13; // $v0
  int v14; // $a0
  int v15; // $v0
  int v16; // $a0
  signed int v17; // $a3
  _BOOL4 v18; // $v0
  bool v19; // dc
  size_t v20; // $s5
  unsigned int v21; // $fp
  unsigned int v22; // $v1
  char *v23; // $s3
  int v24; // $v0
  _BOOL4 v25; // $v0
  int *v26; // $fp
  int v27; // $t4
  int v28; // $s1
  int v29; // $a2
  const char *v30; // $s3
  int v31; // $a1
  int v32; // $s5
  int v33; // $s2
  const char *v34; // $s4
  int v35; // $v0
  int v36; // $s0
  _BOOL4 v37; // $v0
  unsigned int v38; // $s3
  unsigned int v39; // $s2
  unsigned int v40; // $s7
  char *v41; // $s1
  int v42; // $s6
  size_t v43; // $a2
  unsigned int v44; // $s0
  size_t v45; // $s5
  size_t v46; // $v1
  char *v47; // $v0
  char *v48; // $a1
  _BOOL4 v49; // $v0
  int v50; // $v0
  const unsigned __int16 *v51; // $a2
  unsigned int v52; // $a1
  char *v53; // $s0
  unsigned int v54; // $t3
  unsigned int v55; // $a3
  _BOOL4 v56; // $a0
  signed int v57; // $v0
  int v58; // $v1
  int v59; // $v0
  char *i; // $v0
  char *v61; // $a0
  int v62; // $v0
  _BOOL4 v63; // $v0
  int v64; // $v0
  int v65; // $v1
  int v66; // $t0
  char *v67; // $v1
  char *v68; // $a1
  int v69; // $a0
  int v70; // $t0
  const char *v71; // $s7
  int v72; // $v0
  const char *v73; // $v1
  int v74; // $v1
  char *v76; // $a0
  char *content_buf; // [sp+24h] [-874h]
  unsigned int content_buf_len; // [sp+28h] [-870h]
  int content_length; // [sp+2Ch] [-86Ch]
  unsigned int chunksize_buf_index; // [sp+30h] [-868h]
  int chunked; // [sp+34h] [-864h]
  char *header_buf; // [sp+38h] [-860h]
  char *header_bufb; // [sp+38h] [-860h]
  char *header_bufa; // [sp+38h] [-860h]
  unsigned int content_buf_used; // [sp+3Ch] [-85Ch]
  int endofheaders_0; // [sp+40h] [-858h]
  int endofheaders; // [sp+44h] [-854h]
  unsigned int header_buf_len; // [sp+48h] [-850h]
  int *status_codea; // [sp+4Ch] [-84Ch]
  int valuestart; // [sp+50h] [-848h] BYREF
  char *v91; // [sp+54h] [-844h]
  size_t n; // [sp+58h] [-840h]
  int *sizea; // [sp+5Ch] [-83Ch]
  char *v94; // [sp+60h] [-838h]
  char *v95; // [sp+64h] [-834h]
  _DWORD *v96; // [sp+68h] [-830h]
  void *(*v97)(int, int *, int *); // [sp+6Ch] [-82Ch]
  char chunksize_buf[32]; // [sp+74h] [-824h] BYREF
  char buf[2048]; // [sp+94h] [-804h] BYREF
  int v100; // [sp+894h] [-4h]

  v96 = &_stack_chk_guard;
  status_codea = status_code;
  sizea = size;
  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800u);
  if ( !v3 )
  {
    *sizea = -1;
    content_buf = 0;
    goto LABEL_148;
  }
  content_buf = (char *)malloc(0x800u);
  if ( !content_buf )
  {
    free(v3);
    *sizea = -1;
    goto LABEL_148;
  }
  chunksize_buf[0] = 0;
  v97 = getHTTPResponse;
  content_buf_len = 2048;
  header_buf_len = 2048;
  content_length = -1;
  chunksize_buf_index = 0;
  v94 = "content-length";
  v4 = 0;
  content_buf_used = 0;
  v5 = 0;
  chunked = 0;
  endofheaders = 0;
  v6 = buf;
  v95 = "transfer-encoding";
  while ( 2 )
  {
    while ( 2 )
    {
      v7 = receivedata(s, v6, 2048, 5000);
      if ( v7 <= 0 )
        goto end_of_stream;
      if ( endofheaders )
      {
        v20 = v7;
        if ( chunked )
          goto LABEL_52;
LABEL_27:
        v21 = v4 + v7;
        if ( content_length <= 0 )
        {
          if ( content_buf_len >= v21 )
          {
            v23 = content_buf;
            goto LABEL_35;
          }
          content_buf_len = v21;
          if ( content_length )
          {
LABEL_34:
            v23 = (char *)realloc(content_buf, content_buf_len);
            if ( !v23 )
            {
LABEL_151:
              free(content_buf);
              v76 = v3;
              goto LABEL_152;
            }
LABEL_35:
            memcpy(&v23[v4], v6, v20);
            v4 = v21;
            content_buf = v23;
            chunked = 0;
            goto LABEL_36;
          }
          v22 = 0;
        }
        else
        {
          v22 = content_length;
          if ( content_length < v21 )
          {
            v21 = content_length;
            v20 = content_length - v4;
          }
          v23 = content_buf;
          if ( content_buf_len >= v21 )
            goto LABEL_35;
        }
        if ( v22 < v21 )
          v22 = v21;
        content_buf_len = v22;
        goto LABEL_34;
      }
      v8 = v7 + content_buf_used;
      v9 = content_buf_used;
      if ( header_buf_len < v7 + content_buf_used )
      {
        v10 = (char *)realloc(v3, v7 + content_buf_used);
        if ( v10 )
        {
          header_buf_len = v8;
          v3 = v10;
          v9 = content_buf_used;
          goto LABEL_11;
        }
        free(v3);
        v76 = content_buf;
LABEL_152:
        free(v76);
        content_buf = 0;
        *sizea = -1;
        goto LABEL_148;
      }
LABEL_11:
      memcpy(&v3[v9], v6, v7);
      v11 = v8 - 1;
      v12 = 0;
      if ( v8 - 1 <= 0 )
      {
LABEL_25:
        content_buf_used = v8;
        continue;
      }
      break;
    }
    v13 = v3;
    while ( 1 )
    {
      while ( 1 )
      {
        v14 = *v13;
        v15 = v12 + 1;
        if ( v14 != 13 )
        {
LABEL_14:
          if ( v14 == 10 )
          {
            v12 += 2;
            if ( v3[v15] == 10 )
              goto LABEL_42;
            goto LABEL_23;
          }
          goto LABEL_15;
        }
        while ( 1 )
        {
          v16 = v3[v15];
          v15 = v12 + 2;
          if ( v16 == 10 )
            break;
LABEL_15:
          v12 = v15;
          if ( v15 >= v11 )
            goto LABEL_25;
          v14 = v3[v15++];
          if ( v14 != 13 )
            goto LABEL_14;
        }
        v17 = v12 + 3;
        if ( v15 < v8 && v3[v15] == 13 )
          break;
        v12 += 3;
        if ( v17 >= v11 )
          goto LABEL_25;
        v13 = &v3[v17];
      }
      v12 += 4;
      if ( v17 < v8 )
        break;
LABEL_23:
      v18 = v12 < v11;
LABEL_24:
      v19 = v18;
      v13 = &v3[v12];
      if ( !v19 )
        goto LABEL_25;
    }
    v18 = v12 < v11;
    if ( v3[v17] != 10 )
      goto LABEL_24;
LABEL_42:
    v26 = status_codea;
    header_buf = v5;
    v27 = 0;
    v28 = v8;
    v29 = 0;
    v30 = v3;
    v31 = 0;
    v32 = 0;
    content_buf_used = v4;
    endofheaders_0 = v12;
    v33 = v12 - 1;
    endofheaders = (int)v6;
    do
    {
      v34 = &v30[v32];
      v35 = v30[v32];
      v36 = v32 + 1;
      if ( v31 <= 0 )
      {
        if ( v35 != 13 && v35 != 10 )
          goto LABEL_48;
        if ( !v31 && v26 )
        {
          if ( v32 > 0 )
          {
            valuestart = v32 + 1;
            v71 = v30 + 1;
            while ( 1 )
            {
              if ( *(v71 - 1) == 32 )
              {
                if ( *v26 >= 0 )
                {
LABEL_86:
                  v36 = valuestart;
                  break;
                }
                *v26 = strtol(v71, 0u, 10);
              }
              if ( &v30[v32 + 1] == ++v71 )
                goto LABEL_86;
            }
          }
LABEL_87:
          v37 = v32 < v28;
          goto LABEL_88;
        }
        v37 = v32 < v28;
        if ( v31 >= v29 )
        {
LABEL_88:
          v29 = v32;
          if ( v37 )
            goto LABEL_91;
LABEL_109:
          v31 = v32;
          v27 = 0;
LABEL_48:
          v32 = v36;
          continue;
        }
        goto LABEL_101;
      }
      if ( v31 < v29 )
      {
        if ( v35 != 13 )
        {
          v19 = v35 != 10;
          v63 = v29 < v27;
          if ( v19 )
            goto LABEL_48;
LABEL_102:
          valuestart = v27;
          if ( v63 )
          {
            n = v29 - v31;
            v91 = (char *)&v30[v31];
            if ( strncasecmp(&v30[v31], v94, v29 - v31) )
            {
              if ( !strncasecmp(v91, v95, n) )
              {
                v64 = strncasecmp(&v30[valuestart], (const char *)v97 + 0x1264, 7u);
                v65 = chunked;
                if ( !v64 )
                  v65 = 1;
                chunked = v65;
                if ( v32 < v28 )
                {
LABEL_91:
                  while ( 1 )
                  {
                    v62 = *v34;
                    if ( v62 != 13 )
                    {
                      v29 = v32;
                      if ( v62 != 10 )
                        break;
                    }
                    v32 = v36;
                    if ( v36 == v28 )
                    {
                      v32 = v28 + 1;
                      v27 = 0;
                      v29 = v28;
                      v31 = v28;
                      goto LABEL_49;
                    }
                    v34 = &v30[v36++];
                  }
                }
                else
                {
                  v29 = v32;
                }
                goto LABEL_109;
              }
            }
            else
            {
              content_length = strtol(&v30[valuestart], 0u, 10);
            }
          }
          goto LABEL_87;
        }
LABEL_101:
        v63 = v29 < v27;
        goto LABEL_102;
      }
      if ( v35 != 58 )
      {
        if ( v35 == 13 )
          goto LABEL_87;
        v19 = v35 == 10;
        v37 = v32 < v28;
        if ( !v19 )
          goto LABEL_48;
        goto LABEL_88;
      }
      v72 = v32;
      v73 = &v30[v32];
      while ( 1 )
      {
        v74 = v73[1];
        if ( v74 != 32 )
        {
          v27 = v72 + 1;
          if ( v74 != 9 )
            break;
        }
        v73 = &v30[++v72];
        if ( v72 >= v33 )
        {
          v27 = v72 + 1;
          break;
        }
      }
      v29 = v32;
      v32 = v27;
LABEL_49:
      ;
    }
    while ( v32 < v33 );
    v6 = (char *)endofheaders;
    v3 = (char *)v30;
    v38 = v28;
    v7 = v28 - endofheaders_0;
    v5 = header_buf;
    header_bufb = (char *)endofheaders_0;
    v4 = content_buf_used;
    memcpy((void *)endofheaders, &v3[endofheaders_0], v7);
    v20 = v7;
    content_buf_used = v38;
    endofheaders = (int)header_bufb;
    if ( !chunked )
      goto LABEL_27;
    v24 = content_length;
    if ( v7 <= 0 )
      goto LABEL_37;
LABEL_52:
    header_bufa = v3;
    v39 = v4;
    v40 = (unsigned int)v5;
    endofheaders_0 = (int)&v6[v7];
    v41 = v6;
    v42 = 0;
    if ( v40 )
    {
LABEL_53:
      v43 = v7 - v42;
      while ( 1 )
      {
        if ( v40 < v43 )
          v43 = v40;
        v44 = v43 + v39;
        v45 = v43;
        if ( content_buf_len < v43 + v39 )
        {
          v46 = content_length;
          if ( content_length < 0 )
          {
            content_buf_len = v43 + v39;
            v47 = (char *)realloc(content_buf, v43 + v39);
          }
          else
          {
            if ( content_length < v44 )
              v46 = v43 + v39;
            content_buf_len = v46;
            v47 = (char *)realloc(content_buf, v46);
          }
          if ( !v47 )
          {
            v3 = header_bufa;
            goto LABEL_151;
          }
          content_buf = v47;
        }
        v48 = &v41[v42];
        v42 += v45;
        memcpy(&content_buf[v39], v48, v45);
        v40 -= v45;
        if ( v42 >= v7 )
          break;
        v39 = v44;
LABEL_65:
        v43 = v7 - v42;
        if ( !v40 )
          goto LABEL_66;
      }
      v6 = v41;
      v3 = header_bufa;
      v5 = (char *)v40;
      chunked = 1;
      v4 = v44;
LABEL_36:
      v24 = content_length;
LABEL_37:
      v19 = v24 <= 0;
      v25 = v4 < v24;
      if ( !v19 && !v25 )
      {
        free(v3);
        *sizea = v4;
        goto LABEL_148;
      }
      continue;
    }
    break;
  }
LABEL_66:
  v49 = v42 < v7;
  if ( chunksize_buf_index )
  {
LABEL_70:
    if ( !v49 )
    {
      v6 = v41;
      v52 = chunksize_buf_index;
      v5 = (char *)v40;
      v4 = v39;
      v3 = header_bufa;
      goto LABEL_111;
    }
  }
  else
  {
    v50 = *((char *)&valuestart + v42 + 0x44);
    if ( v50 != 13 )
    {
      if ( v50 != 10 )
        goto LABEL_69;
      goto LABEL_137;
    }
    if ( ++v42 >= v7 )
    {
      v6 = v41;
      v52 = 0;
      v5 = (char *)v40;
      v4 = v39;
      v3 = header_bufa;
LABEL_111:
      chunksize_buf_index = v52;
      chunked = 1;
      goto LABEL_36;
    }
    if ( *((_BYTE *)&valuestart + v42 + 0x44) == 10 )
    {
LABEL_137:
      ++v42;
LABEL_69:
      v49 = v42 < v7;
      goto LABEL_70;
    }
  }
  v51 = *_ctype_b_loc();
  v52 = chunksize_buf_index;
  v53 = &chunksize_buf[chunksize_buf_index];
  v54 = v7 + chunksize_buf_index - v42;
  v55 = v42 - chunksize_buf_index;
  while ( 1 )
  {
    v57 = v55 + v52;
    v58 = v41[v55 + v52];
    if ( (v51[v58] & 0x10) == 0 )
      break;
    v56 = v57 < v7;
    if ( v52 >= 0x1F )
      goto LABEL_76;
    ++v52;
    *v53 = v58;
    *++v53 = 0;
    if ( v52 == v54 )
    {
      v6 = v41;
      v52 = v54;
      v5 = (char *)v40;
      v4 = v39;
      v3 = header_bufa;
      goto LABEL_111;
    }
  }
  v56 = v57 < v7;
LABEL_76:
  v59 = v57 + 1;
  if ( !v56 )
  {
LABEL_110:
    v6 = v41;
    v5 = (char *)v40;
    v4 = v39;
    v3 = header_bufa;
    goto LABEL_111;
  }
  for ( i = &v41[v59]; ; ++i )
  {
    v61 = (char *)(i - v41);
    v42 = i - v41 - 1;
    if ( v58 == 13 )
      break;
    if ( v58 == 10 )
    {
      if ( v42 >= v7 )
        goto LABEL_110;
      goto LABEL_116;
    }
    if ( (char *)endofheaders_0 == i )
      goto LABEL_110;
    v58 = *i;
  }
  if ( v42 >= v7 )
    goto LABEL_110;
  v42 = i - v41;
  if ( (int)v61 >= v7 )
    goto LABEL_110;
  if ( *((_BYTE *)&valuestart + (_DWORD)(v61 + 0x848) - 2052) != 10 )
  {
    chunksize_buf_index = v52;
    goto LABEL_65;
  }
LABEL_116:
  if ( v52 )
  {
    v66 = 0;
    v67 = chunksize_buf;
    v68 = &chunksize_buf[v52];
    do
    {
      while ( 1 )
      {
        v69 = *v67;
        v70 = 16 * v66;
        if ( (unsigned __int8)(v69 - 0x30) >= 0xAu )
          break;
        ++v67;
        v66 = v70 - 48 + v69;
        if ( v68 == v67 )
          goto LABEL_121;
      }
      ++v67;
      v66 = (v69 | 0x20) + v70 - 87;
    }
    while ( v68 != v67 );
LABEL_121:
    chunksize_buf[0] = 0;
    ++v42;
    if ( v66 )
    {
      chunksize_buf_index = 0;
      v40 = v66;
      goto LABEL_53;
    }
  }
  v4 = v39;
  v3 = header_bufa;
end_of_stream:
  free(v3);
  *sizea = v4;
  if ( !v4 )
  {
    free(content_buf);
    content_buf = 0;
  }
LABEL_148:
  if ( v100 != *v96 )
    _stack_chk_fail();
  return content_buf;
}
