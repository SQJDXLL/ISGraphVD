void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v4; // r11
  unsigned int v5; // r4
  unsigned int v6; // r7
  char *v7; // r5
  int v8; // r0
  char *v9; // r8
  int v10; // r9
  void *v11; // r0
  unsigned int v12; // r6
  int v13; // r3
  unsigned int v14; // r10
  bool v15; // r2
  int v17; // r2
  int v18; // r0
  char *v19; // r9
  char *v20; // r3
  bool v21; // r6
  char *v22; // r0
  _DWORD *v24; // r6
  unsigned int v26; // r3
  unsigned int v27; // r8
  int *v28; // r10
  int v29; // r12
  int v30; // r1
  int v31; // r6
  int v32; // r4
  int v33; // r11
  bool v34; // zf
  bool v35; // cc
  int v36; // r0
  const char *v37; // r7
  int v38; // r5
  bool v39; // zf
  _BOOL4 v40; // r2
  const char *v41; // r4
  int v42; // t1
  unsigned int v43; // r2
  int v44; // r4
  int v45; // t1
  bool v46; // zf
  char *v47; // r10
  int v48; // r6
  size_t v49; // r9
  int v50; // r3
  char *v51; // r0
  const void *v52; // r1
  char *v53; // lr
  const unsigned __int16 *v54; // r5
  int v55; // r0
  _BYTE *v56; // r1
  char v57; // r2
  int v58; // t1
  int v59; // r2
  int v60; // r3
  int v61; // t1
  bool v62; // zf
  int v63; // r3
  unsigned __int8 *v64; // r3
  unsigned __int8 *v65; // r4
  int v66; // r2
  int v67; // t1
  int v68; // r5
  int v69; // r5
  bool v70; // cc
  const char *v71; // r7
  int v72; // r0
  int v73; // r3
  int v74; // r2
  int v75; // r3
  int v76; // t1
  int v77; // r4
  bool v78; // zf
  int *v79; // r6
  int *v80; // r6
  int v81; // [sp+0h] [bp-898h] BYREF
  int content_length; // [sp+8h] [bp-890h]
  int chunked; // [sp+Ch] [bp-88Ch]
  char *header_buf; // [sp+10h] [bp-888h]
  int v85; // [sp+14h] [bp-884h]
  unsigned int content_buf_used; // [sp+18h] [bp-880h]
  int endofheaders; // [sp+1Ch] [bp-87Ch]
  int sa; // [sp+20h] [bp-878h]
  unsigned int header_buf_len; // [sp+24h] [bp-874h]
  unsigned int chunksize; // [sp+28h] [bp-870h]
  unsigned int chunksize_buf_index; // [sp+2Ch] [bp-86Ch]
  char *content_buf; // [sp+30h] [bp-868h]
  unsigned int v93; // [sp+34h] [bp-864h]
  int *status_codea; // [sp+38h] [bp-860h]
  int *sizea; // [sp+3Ch] [bp-85Ch]
  int *v96; // [sp+40h] [bp-858h]
  int *v97; // [sp+44h] [bp-854h]
  char chunksize_buf[32]; // [sp+4Ch] [bp-84Ch] BYREF
  char buf[2048]; // [sp+6Ch] [bp-82Ch] BYREF

  chunksize = s;
  v96 = status_code;
  if ( status_code )
    *status_code = -1;
  content_buf_used = (unsigned int)malloc(0x800u);
  if ( !content_buf_used )
    goto LABEL_173;
  v4 = (char *)malloc(0x800u);
  if ( !v4 )
  {
    free((void *)content_buf_used);
LABEL_173:
    *size = -1;
    return 0;
  }
  chunked = 2048;
  chunksize_buf_index = 2048;
  v5 = 0;
  header_buf = (char *)-1;
  content_length = (int)buf;
  v6 = 0;
  v7 = 0;
  chunksize_buf[0] = 0;
  v85 = 0;
  header_buf_len = 0;
  endofheaders = (int)chunksize_buf;
  sa = 0;
  v97 = size;
  while ( 1 )
  {
LABEL_6:
    v8 = receivedata(chunksize, content_length, 2048, 5000, 0);
    v9 = (char *)v8;
    if ( v8 <= 0 )
      goto end_of_stream;
    if ( header_buf_len )
    {
      if ( v85 )
        goto LABEL_85;
      goto LABEL_26;
    }
    v10 = v8 + sa;
    if ( v8 + sa > chunksize_buf_index )
    {
      v11 = realloc((void *)content_buf_used, v8 + sa);
      if ( !v11 )
      {
        v80 = v97;
        free((void *)content_buf_used);
        free(v4);
        *v80 = -1;
        return 0;
      }
      content_buf_used = (unsigned int)v11;
      chunksize_buf_index = v10;
    }
    v12 = content_buf_used;
    memcpy((void *)(content_buf_used + sa), (const void *)content_length, (size_t)v9);
    if ( v10 > 1 )
      break;
    sa = v10;
  }
  v13 = 0;
  do
  {
    v17 = *(unsigned __int8 *)(v12 + v13);
    v18 = v13 + 1;
    if ( v17 == 13 )
    {
      if ( *(_BYTE *)(v12 + v18) != 10 )
        goto LABEL_22;
      if ( v13 + 2 < v10 && *(_BYTE *)(v12 + v13 + 2) == 13 )
      {
        if ( v13 + 3 < v10 && *(_BYTE *)(v12 + v13 + 3) == 10 )
        {
          v13 += 4;
          v15 = v13 == 0;
          v14 = v13;
        }
        else
        {
          v13 += 4;
          v14 = 0;
          v15 = 1;
        }
      }
      else
      {
        v13 += 3;
        v14 = 0;
        v15 = 1;
      }
    }
    else
    {
      if ( v17 != 10 )
      {
        ++v13;
        v14 = 0;
        v15 = 1;
        goto LABEL_16;
      }
      if ( *(_BYTE *)(v12 + v18) != 10 )
      {
LABEL_22:
        v13 += 2;
        v14 = 0;
        v15 = 1;
        goto LABEL_16;
      }
      v13 += 2;
      v15 = v13 == 0;
      v14 = v13;
    }
LABEL_16:
    ;
  }
  while ( v10 - 1 > v13 && v15 );
  if ( !v14 )
  {
    sa = v10;
    header_buf_len = 0;
    goto LABEL_6;
  }
  v26 = v14 - 1;
  if ( (int)(v14 - 1) <= 0 )
    goto LABEL_83;
  header_buf_len = v14;
  v93 = v5;
  status_codea = (int *)v4;
  v27 = content_buf_used;
  v28 = v96;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = v26;
  sa = v6;
  content_buf = v7;
  while ( 1 )
  {
LABEL_54:
    v35 = v30 <= v29;
    if ( v30 >= v29 )
      v35 = v30 <= 0;
    v36 = *(unsigned __int8 *)(v27 + v31);
    v37 = (const char *)(v27 + v31);
    v38 = v31 + 1;
    if ( v35 )
      break;
    if ( v36 == 58 )
    {
      if ( v33 <= v31 )
      {
        v32 = v31 + 1;
        v29 = v31++;
      }
      else
      {
        v74 = v31;
        do
        {
          v76 = *(unsigned __int8 *)++v37;
          v75 = v76;
          v77 = v74;
          v78 = v76 == 9;
          if ( v76 != 9 )
            v78 = v75 == 32;
          ++v74;
          if ( !v78 )
          {
            v32 = v77 + 1;
            v29 = v31;
            v31 = v32;
            goto LABEL_53;
          }
        }
        while ( v33 != v74 );
        v32 = v33 + 1;
        v29 = v31;
        v31 = v33 + 1;
      }
      goto LABEL_53;
    }
    v34 = v36 == 13;
    if ( v36 != 13 )
      v34 = v36 == 10;
    if ( v34 )
      goto LABEL_71;
LABEL_52:
    ++v31;
LABEL_53:
    if ( v33 <= v31 )
      goto LABEL_82;
  }
  v39 = v36 == 10;
  if ( v36 != 10 )
    v39 = v36 == 13;
  if ( !v39 )
    goto LABEL_52;
  v40 = v30 == 0;
  if ( !v28 )
    v40 = 0;
  if ( v40 )
  {
    if ( v31 <= 0 )
      goto LABEL_72;
    v41 = (const char *)v27;
    do
    {
      while ( 1 )
      {
        v42 = *(unsigned __int8 *)v41++;
        if ( v42 == 32 )
          break;
        if ( v37 == v41 )
          goto LABEL_71;
      }
      if ( *v28 >= 0 )
        break;
      *v28 = strtol(v41, 0u, 10);
    }
    while ( v37 != v41 );
    goto LABEL_71;
  }
  v70 = v30 < v29;
  if ( v30 < v29 )
    v70 = v29 < v32;
  if ( !v70 )
    goto LABEL_71;
  v71 = (const char *)(v27 + v30);
  sizea = (int *)(v29 - v30);
  if ( !strncasecmp((const char *)(v27 + v30), "content-length", v29 - v30) )
  {
    header_buf = (char *)strtol((const char *)(v27 + v32), 0u, 10);
    goto LABEL_71;
  }
  if ( strncasecmp(v71, "transfer-encoding", (size_t)sizea) )
  {
LABEL_71:
    if ( v10 > v31 )
      goto LABEL_72;
    goto LABEL_145;
  }
  v72 = strncasecmp((const char *)(v27 + v32), "chunked", 7u);
  v73 = v85;
  if ( !v72 )
    v73 = 1;
  v85 = v73;
  if ( v10 <= v31 )
  {
LABEL_145:
    v29 = v31;
    v30 = v31;
    v32 = 0;
    ++v31;
    goto LABEL_53;
  }
LABEL_72:
  v43 = v27 + v31 - 1;
  while ( 1 )
  {
    v45 = *(unsigned __int8 *)++v43;
    v44 = v45;
    v30 = v31;
    v46 = v45 == 10;
    if ( v45 != 10 )
      v46 = v44 == 13;
    v32 = v46;
    v31 = v38;
    if ( !v46 )
      break;
    if ( v10 == v38 )
    {
      v31 = v30 + 2;
      v32 = 0;
      v29 = v10;
      v30 = v10;
      goto LABEL_53;
    }
    ++v38;
  }
  v29 = v30;
  if ( v33 > v38 )
    goto LABEL_54;
LABEL_82:
  v6 = sa;
  v14 = header_buf_len;
  v7 = content_buf;
  v5 = v93;
  v4 = (char *)status_codea;
LABEL_83:
  v9 = (char *)(v10 - v14);
  memcpy((void *)content_length, (const void *)(content_buf_used + v14), v10 - v14);
  sa = v10;
  header_buf_len = v14;
  if ( !v85 )
  {
LABEL_26:
    v19 = &v9[v6];
    if ( (int)header_buf <= 0 )
    {
      if ( chunked >= (unsigned int)v19 )
      {
        v21 = header_buf <= v19;
        goto LABEL_34;
      }
      if ( header_buf )
      {
        chunked = (int)&v9[v6];
        goto LABEL_32;
      }
      v20 = &v9[v6];
    }
    else
    {
      v20 = header_buf;
      if ( header_buf >= v19 )
      {
        v20 = header_buf;
        if ( chunked >= (unsigned int)v19 )
        {
          v21 = header_buf == v19;
          goto LABEL_34;
        }
        if ( header_buf < v19 )
          v20 = &v9[v6];
      }
      else
      {
        v9 = &header_buf[-v6];
        if ( (unsigned int)header_buf <= chunked )
        {
          v19 = header_buf;
          v21 = 1;
          goto LABEL_34;
        }
        v19 = header_buf;
      }
    }
    chunked = (int)v20;
LABEL_32:
    v22 = (char *)realloc(v4, chunked);
    if ( !v22 )
    {
LABEL_170:
      v79 = v97;
      free(v4);
      free((void *)content_buf_used);
      *v79 = -1;
      return 0;
    }
    v4 = v22;
    v21 = v19 >= header_buf;
LABEL_34:
    memcpy(&v4[v6], (const void *)content_length, (size_t)v9);
    v6 = (unsigned int)v19;
    v85 = 0;
LABEL_35:
    if ( (int)header_buf > 0 && v21 )
      goto end_of_stream;
    goto LABEL_6;
  }
  if ( (int)v9 <= 0 )
  {
    v21 = v6 >= (unsigned int)header_buf;
    goto LABEL_35;
  }
LABEL_85:
  v47 = (char *)chunked;
  v48 = 0;
  while ( 2 )
  {
    if ( v7 )
    {
LABEL_86:
      v49 = (size_t)&v9[-v48];
      if ( &v9[-v48] >= v7 )
        v49 = (size_t)v7;
      v50 = v6;
      v6 += v49;
      if ( v6 > (unsigned int)v47 )
      {
        if ( (int)header_buf >= 0 )
        {
          if ( (unsigned int)header_buf < v6 )
            v47 = (char *)v6;
          else
            v47 = header_buf;
        }
        else
        {
          v47 = (char *)v6;
        }
        chunked = v50;
        v51 = (char *)realloc(v4, (size_t)v47);
        v50 = chunked;
        if ( !v51 )
          goto LABEL_170;
        v4 = v51;
      }
      v52 = (const void *)(content_length + v48);
      v48 += v49;
      memcpy(&v4[v50], v52, v49);
      v7 -= v49;
      if ( v48 >= (int)v9 )
      {
LABEL_128:
        chunked = (int)v47;
        v21 = v6 >= (unsigned int)header_buf;
        v85 = 1;
        goto LABEL_35;
      }
      continue;
    }
    break;
  }
  chunked = 0;
  while ( 2 )
  {
    if ( !v5 )
    {
      if ( *((_BYTE *)&v81 + v48 + 0x6C) == 13 )
        ++v48;
      if ( v48 >= (int)v9 )
        goto LABEL_127;
      if ( *((_BYTE *)&v81 + v48 + 0x6C) != 10 )
        goto LABEL_104;
      ++v48;
    }
    if ( v48 >= (int)v9 )
      goto LABEL_127;
LABEL_104:
    v53 = &v9[v5 - v48];
    v54 = *_ctype_b_loc();
    v55 = content_length + v48 - 1;
    v56 = (_BYTE *)(endofheaders + v5);
    do
    {
      v58 = *(unsigned __int8 *)++v55;
      v57 = v58;
      if ( ((v5 <= 0x1E) & (v54[v58] >> 0xC)) == 0 )
        break;
      ++v5;
      *v56 = v57;
      ++v48;
      *++v56 = 0;
    }
    while ( (char *)v5 != v53 );
    if ( v48 >= (int)v9 )
      goto LABEL_127;
    v59 = content_length + v48 - 1;
    while ( 1 )
    {
      v61 = *(unsigned __int8 *)++v59;
      v60 = v61;
      v62 = v61 == 13;
      if ( v61 != 13 )
        v62 = v60 == 10;
      if ( v62 )
        break;
      if ( (char *)++v48 == v9 )
        goto LABEL_127;
    }
    if ( v48 >= (int)v9 )
    {
LABEL_127:
      v7 = (char *)chunked;
      goto LABEL_128;
    }
    v63 = *((unsigned __int8 *)&v81 + v48 + 0x6C);
    if ( v63 == 13 )
    {
      if ( ++v48 >= (int)v9 )
        goto LABEL_127;
      v63 = *((unsigned __int8 *)&v81 + v48 + 0x6C);
    }
    if ( v63 != 10 )
      continue;
    break;
  }
  if ( v5 )
  {
    v64 = (unsigned __int8 *)endofheaders;
    v7 = 0;
    v65 = (unsigned __int8 *)(endofheaders + v5);
    do
    {
      v67 = *v64++;
      v66 = v67;
      v68 = 16 * (_DWORD)v7;
      if ( (unsigned int)(v67 - 0x30) > 9 )
      {
        v69 = v68 - 0x57;
        v66 |= 0x20u;
      }
      else
      {
        v69 = v68 - 0x30;
      }
      v7 = (char *)(v69 + v66);
    }
    while ( v64 != v65 );
    v5 = 0;
    ++v48;
    chunksize_buf[0] = 0;
    if ( v7 )
      goto LABEL_86;
  }
end_of_stream:
  v24 = v97;
  free((void *)content_buf_used);
  *v24 = v6;
  if ( !v6 )
  {
    free(v4);
    return 0;
  }
  return v4;
}
