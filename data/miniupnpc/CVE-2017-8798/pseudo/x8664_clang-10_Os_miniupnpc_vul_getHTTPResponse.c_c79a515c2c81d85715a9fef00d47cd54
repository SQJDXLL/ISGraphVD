void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // rax
  char *v4; // r13
  char *v5; // rax
  int v6; // eax
  int v7; // esi
  __int64 v8; // rbp
  __int64 v9; // rdx
  unsigned int v10; // r10d
  int v11; // r12d
  int v12; // r15d
  int v13; // eax
  int v14; // r14d
  int v15; // ebx
  unsigned int v16; // ecx
  char *v17; // rax
  bool v18; // dl
  int v19; // eax
  int v20; // ecx
  char v21; // bl
  __int64 v22; // rsi
  __int64 v23; // rdx
  int v24; // ecx
  int v25; // ebx
  int v26; // ecx
  int v27; // eax
  int v28; // esi
  int v29; // r15d
  char v30; // dl
  char *v31; // r14
  __int64 v32; // rdx
  __int64 v33; // r15
  const char *v34; // rbp
  int v35; // eax
  int v36; // edi
  const char *v37; // rbp
  int v38; // eax
  int v39; // ecx
  __int64 i; // rcx
  __int64 v41; // rbx
  char *v42; // rdi
  unsigned int v43; // ebp
  const unsigned __int16 *v44; // r8
  __int64 v45; // rdx
  __int64 v46; // rcx
  char v47; // al
  __int64 v48; // rcx
  int v49; // edx
  int v50; // esi
  unsigned __int8 v51; // al
  int v52; // edx
  int v53; // ebp
  int v54; // esi
  unsigned int v55; // ebp
  int v56; // ecx
  size_t v57; // rsi
  char *v58; // rax
  unsigned int v59; // ecx
  int v60; // ebx
  int v61; // r14d
  size_t v62; // rsi
  char *v63; // rax
  char *v64; // rbp
  char *v66; // rdi
  char *v67; // rdi
  char v68; // [rsp+Bh] [rbp-8DDh]
  char v69; // [rsp+Bh] [rbp-8DDh]
  int v70; // [rsp+Ch] [rbp-8DCh]
  int v71; // [rsp+Ch] [rbp-8DCh]
  char *v72; // [rsp+10h] [rbp-8D8h]
  int v73; // [rsp+18h] [rbp-8D0h]
  int v74; // [rsp+18h] [rbp-8D0h]
  unsigned int v75; // [rsp+1Ch] [rbp-8CCh]
  unsigned int v76; // [rsp+1Ch] [rbp-8CCh]
  int v77; // [rsp+20h] [rbp-8C8h]
  __int64 v78; // [rsp+28h] [rbp-8C0h]
  __int64 v79; // [rsp+28h] [rbp-8C0h]
  __int64 v80; // [rsp+30h] [rbp-8B8h]
  __int64 v81; // [rsp+30h] [rbp-8B8h]
  int v82; // [rsp+38h] [rbp-8B0h]
  unsigned int v83; // [rsp+38h] [rbp-8B0h]
  int ptr; // [rsp+40h] [rbp-8A8h]
  char *ptra; // [rsp+40h] [rbp-8A8h]
  int v86; // [rsp+48h] [rbp-8A0h]
  unsigned int v87; // [rsp+4Ch] [rbp-89Ch]
  char *nptr; // [rsp+60h] [rbp-888h]
  __int64 v92; // [rsp+78h] [rbp-870h]
  char *v93; // [rsp+88h] [rbp-860h]
  char v94[32]; // [rsp+90h] [rbp-858h] BYREF
  char src[2104]; // [rsp+B0h] [rbp-838h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800uLL);
  if ( !v3 )
    goto LABEL_139;
  v4 = v3;
  v5 = (char *)malloc(0x800uLL);
  if ( !v5 )
  {
    free(v4);
LABEL_139:
    *size = -1;
    return 0LL;
  }
  v72 = v5;
  v94[0] = 0;
  v87 = 2048;
  v6 = -1;
  v86 = 0;
  v7 = 0;
  v8 = 0LL;
  v9 = 2048LL;
  v77 = 0;
  v10 = 0;
  v11 = 0;
  do
  {
    v73 = v7;
    v75 = v10;
    v80 = v9;
    v70 = v6;
    v12 = v11;
    do
    {
      v13 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
      if ( v13 <= 0 )
        goto end_of_stream;
      v14 = v13;
      if ( v12 )
      {
        v11 = v12;
        v29 = v70;
        goto LABEL_82;
      }
      v15 = v13 + v8;
      v16 = v87;
      if ( v13 + (int)v8 <= v87 )
      {
        v17 = v4;
      }
      else
      {
        v17 = (char *)realloc(v4, (unsigned int)v15);
        v16 = v14 + v8;
        if ( !v17 )
        {
          free(v4);
          v66 = v72;
          goto LABEL_141;
        }
      }
      v87 = v16;
      v4 = v17;
      memcpy(&v17[(unsigned int)v8], src, (unsigned int)v14);
      v18 = 1;
      v12 = 0;
      v11 = 0;
      v8 = (unsigned int)(v14 + v8);
      if ( v15 >= 2 )
      {
        v19 = v15 - 1;
        v20 = 0;
        do
        {
          v21 = v4[v20];
          if ( v21 == 10 )
          {
            LODWORD(v22) = v20 + 1;
            v11 = v20 + 2;
            if ( v4[v20 + 1] != 10 )
              v11 = 0;
            goto LABEL_31;
          }
          if ( v21 == 13 )
          {
            if ( v4[v20 + 1] != 10 )
            {
              LODWORD(v23) = v20 + 1;
LABEL_29:
              LODWORD(v22) = v23;
              goto LABEL_30;
            }
            v22 = v20 + 2LL;
            if ( v20 + 2 < (int)v8 )
            {
              v11 = 0;
              if ( v4[v22] != 13 )
                goto LABEL_31;
              v23 = v20 + 3LL;
              if ( (int)v23 < (int)v8 )
              {
                v24 = v20 + 4;
                if ( v4[v23] != 10 )
                  v24 = 0;
                LODWORD(v22) = v23;
                v11 = v24;
                goto LABEL_31;
              }
              goto LABEL_29;
            }
          }
          else
          {
            LODWORD(v22) = v20;
          }
LABEL_30:
          v11 = 0;
LABEL_31:
          v20 = v22 + 1;
          v18 = v11 == 0;
        }
        while ( (int)v22 + 1 < v19 && !v11 );
      }
    }
    while ( v18 );
    if ( v11 >= 2 )
    {
      v82 = v11 - 1;
      nptr = v4 + 1;
      v92 = (int)v8 - 1LL;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = v70;
      v78 = v8;
      v93 = v4;
      while ( 1 )
      {
        ptr = v28;
        v30 = v4[v28];
        if ( v30 == 58 && v27 > 0 && v26 <= v27 )
        {
          if ( v28 < v82 )
          {
            v31 = &nptr[v28];
            v32 = 0LL;
            while ( *v31 == 32 || *v31 == 9 )
            {
              --v32;
              ++v31;
              if ( v28 - (__int64)(v11 - 1) == v32 )
              {
                v28 = v11 - 1;
                v26 = ptr;
                v25 = v11;
                goto LABEL_75;
              }
            }
            v28 -= v32;
          }
          v25 = v28 + 1;
        }
        else
        {
          if ( v30 != 13 && v30 != 10 )
            goto LABEL_75;
          if ( !status_code || v27 )
          {
            v36 = v26 - v27;
            if ( v26 > v27 && v25 > v26 )
            {
              v69 = v4[v28];
              v37 = &v4[v27];
              if ( !strncasecmp(v37, "content-length", v36) )
              {
                v29 = atoi(&v4[v25]);
                v8 = v78;
                v30 = v69;
              }
              else
              {
                if ( !strncasecmp(v37, "transfer-encoding", v36) )
                {
                  v38 = strncasecmp(&v4[v25], "chunked", 7uLL);
                  v39 = v86;
                  if ( !v38 )
                    v39 = 1;
                  v86 = v39;
                }
                v8 = v78;
                v30 = v69;
              }
            }
          }
          else if ( v28 > 0 )
          {
            v71 = v29;
            v33 = (unsigned int)v28;
            v34 = nptr;
            v68 = v4[v28];
            do
            {
              if ( *(v34 - 1) == 32 )
              {
                if ( *status_code >= 0 )
                  break;
                v35 = atoi(v34);
                v30 = v68;
                v4 = v93;
                *status_code = v35;
              }
              ++v34;
              --v33;
            }
            while ( v33 );
            v29 = v71;
            v8 = v78;
          }
          if ( v28 < (int)v8 )
          {
            for ( i = 0LL; ; ++i )
            {
              if ( v30 != 13 && v30 != 10 )
              {
                v28 += i;
                v25 = 0;
                v27 = v28;
                v26 = v28;
                goto LABEL_75;
              }
              if ( v92 - v28 == i )
                break;
              v30 = nptr[v28 + i];
            }
            v25 = 0;
            v28 = v8;
            v27 = v8;
            v26 = v8;
            goto LABEL_75;
          }
          v25 = 0;
          v27 = v28;
        }
        v26 = ptr;
LABEL_75:
        if ( ++v28 >= v82 )
          goto LABEL_81;
      }
    }
    v29 = v70;
LABEL_81:
    v14 = v8 - v11;
    memcpy(src, &v4[v11], (int)v8 - v11);
LABEL_82:
    v9 = v80;
    v10 = v75;
    v7 = v73;
    v79 = v8;
    if ( v86 )
    {
      if ( v14 > 0 )
      {
        LODWORD(v41) = 0;
        v42 = v72;
        do
        {
          v83 = v77;
          v81 = v9;
          ptra = v42;
          do
          {
            if ( v7 )
              goto LABEL_113;
            if ( !v10 )
            {
              LODWORD(v41) = (src[(int)v41] == 13) + (_DWORD)v41;
              if ( (int)v41 < v14 )
                LODWORD(v41) = v41 + (src[(int)v41] == 10);
            }
            if ( (int)v41 < v14 )
            {
              v43 = v10;
              v44 = *_ctype_b_loc();
              v10 = v14 + v43 - v41;
              v45 = 0LL;
              while ( (unsigned __int64)v43 + v45 <= 0x1E )
              {
                v46 = src[(int)v41 + v45];
                if ( (v44[v46] & 0x1000) == 0 )
                  break;
                *(_WORD *)&v94[v43 + v45++] = (unsigned __int8)v46;
                if ( (unsigned int)v14 - (__int64)(int)v41 == v45 )
                {
                  LODWORD(v41) = v14;
                  goto LABEL_97;
                }
              }
              LODWORD(v41) = v45 + v41;
              v10 = v45 + v43;
LABEL_97:
              v9 = v81;
              v8 = v79;
              v42 = ptra;
            }
            v41 = (int)v41;
            while ( v41 < (unsigned int)v14 )
            {
              v47 = src[v41++];
              if ( v47 == 13 || v47 == 10 )
              {
                if ( v47 != 13 )
                  LODWORD(v41) = v41 - 1;
                break;
              }
            }
            if ( v14 <= (int)v41 )
            {
              v7 = 0;
              v72 = v42;
              goto LABEL_135;
            }
            v7 = 0;
          }
          while ( src[(int)v41] != 10 );
          if ( !v10 )
          {
            v94[0] = 0;
LABEL_143:
            v72 = v42;
            goto end_of_stream;
          }
          v48 = 0LL;
          v7 = 0;
          do
          {
            v49 = v7;
            v50 = v94[v48];
            v51 = v50 - 48;
            v52 = 16 * v49;
            v53 = v50 - 48;
            v54 = (v50 | 0x20) - 87;
            if ( v51 < 0xAu )
              v54 = v53;
            v7 = v52 + v54;
            ++v48;
          }
          while ( v10 != v48 );
          v94[0] = 0;
          if ( !v7 )
            goto LABEL_143;
          LODWORD(v41) = v41 + 1;
          v10 = 0;
          LODWORD(v9) = v81;
LABEL_113:
          v76 = v10;
          v55 = v14 - v41;
          v74 = v7;
          if ( v7 <= v14 - (int)v41 )
            v55 = v7;
          v56 = v77 + v55;
          v77 += v55;
          if ( v83 + v55 <= (unsigned int)v9 )
          {
            v58 = v42;
          }
          else
          {
            v57 = (unsigned int)v29;
            if ( v29 < v56 )
              v57 = (unsigned int)v56;
            v81 = v57;
            v58 = (char *)realloc(v42, v57);
            if ( !v58 )
            {
              v67 = ptra;
              goto LABEL_147;
            }
          }
          v72 = v58;
          memcpy(&v58[v83], &src[(int)v41], v55);
          LODWORD(v41) = v55 + v41;
          v7 = v74 - v55;
          v42 = v72;
          v9 = v81;
          v8 = v79;
          v10 = v76;
        }
        while ( (int)v41 < v14 );
      }
    }
    else
    {
      v59 = v77;
      v60 = v29 - v77;
      if ( v14 + v77 <= v29 )
        v60 = v14;
      if ( v29 <= 0 )
        v60 = v14;
      v61 = v60 + v77;
      if ( v60 + v77 <= (unsigned int)v80 )
      {
        v64 = v72;
      }
      else
      {
        v62 = (unsigned int)v29;
        if ( v29 < v61 )
          v62 = (unsigned int)v61;
        v80 = v62;
        v63 = (char *)realloc(v72, v62);
        v59 = v77;
        v64 = v63;
        if ( !v63 )
        {
          v67 = v72;
LABEL_147:
          free(v67);
          v66 = v4;
LABEL_141:
          free(v66);
          *size = -1;
          return 0LL;
        }
      }
      memcpy(&v64[v59], src, v60);
      v72 = v64;
      v77 += v60;
      v9 = v80;
      v8 = v79;
      v10 = v75;
      v7 = v73;
    }
LABEL_135:
    v6 = v29;
  }
  while ( v29 <= 0 || v77 < v29 );
end_of_stream:
  free(v4);
  *size = v77;
  if ( !v77 )
  {
    free(v72);
    return 0LL;
  }
  return v72;
}
