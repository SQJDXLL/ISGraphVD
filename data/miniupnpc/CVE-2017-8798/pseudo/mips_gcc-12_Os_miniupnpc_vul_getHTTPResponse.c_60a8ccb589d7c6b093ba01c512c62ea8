char *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // $s0
  char *v4; // $s1
  void *v5; // $a0
  unsigned int v6; // $s6
  int v7; // $s4
  int v8; // $s7
  int v9; // $s3
  int v10; // $s2
  int v11; // $v0
  signed int v12; // $fp
  int v13; // $s5
  char *v14; // $v0
  int v15; // $v1
  int v16; // $a1
  char *v17; // $v0
  char *v18; // $v1
  int v19; // $t0
  char *v20; // $a2
  int v21; // $v0
  char *v22; // $s7
  signed int v23; // $s7
  int v24; // $a0
  int v25; // $v0
  int v26; // $a0
  int v27; // $a0
  int v28; // $a0
  int v29; // $v1
  int v30; // $v1
  char *v31; // $v1
  int v32; // $a0
  _BOOL4 v33; // $v1
  int v34; // $v0
  const char *v35; // $a0
  _BOOL4 v36; // $v0
  int v37; // $v0
  _BOOL4 v38; // $v1
  const char *i; // $a0
  int v40; // $v0
  bool v41; // dc
  int v42; // $v0
  int v43; // $a0
  char *v44; // $v0
  char *v45; // $a0
  _BOOL4 v46; // $v0
  const unsigned __int16 **v47; // $v0
  int v48; // $a1
  int v49; // $v0
  _BOOL4 v50; // $v0
  int v51; // $a2
  signed int v52; // $t1
  int v53; // $a0
  int v54; // $v0
  int v55; // $v0
  unsigned int v56; // $a2
  unsigned int v57; // $t0
  size_t v58; // $v1
  char *v59; // $v0
  unsigned int v60; // $v0
  size_t v61; // $v1
  char *v62; // $v0
  unsigned int content_buf_len; // [sp+24h] [-85Ch]
  unsigned int chunksize; // [sp+30h] [-850h]
  unsigned int chunksizea; // [sp+30h] [-850h]
  unsigned int chunksizeb; // [sp+30h] [-850h]
  int chunked; // [sp+34h] [-84Ch]
  unsigned int header_buf_len; // [sp+38h] [-848h] BYREF
  char *v72; // [sp+3Ch] [-844h]
  _DWORD *v73; // [sp+40h] [-840h]
  char *v74; // [sp+44h] [-83Ch]
  char *v75; // [sp+48h] [-838h]
  unsigned int chunksize_0; // [sp+4Ch] [-834h]
  unsigned int bytestocopy; // [sp+50h] [-830h]
  int valuestart; // [sp+54h] [-82Ch]
  char chunksize_buf[32]; // [sp+5Ch] [-824h] BYREF
  char buf[2048]; // [sp+7Ch] [-804h] BYREF
  int v81; // [sp+87Ch] [-4h]

  v73 = &_stack_chk_guard;
  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800u);
  if ( !v3 )
    goto LABEL_4;
  v4 = (char *)malloc(0x800u);
  if ( !v4 )
    goto LABEL_9;
  content_buf_len = 2048;
  header_buf_len = 2048;
  chunksize_buf[0] = 0;
  v74 = "content-length";
  v6 = 0;
  v7 = 0;
  v8 = 0;
  chunksize = 0;
  v9 = -1;
  chunked = 0;
  v10 = 0;
  v75 = "transfer-encoding";
  while ( 1 )
  {
    while ( 1 )
    {
      v11 = receivedata(s, buf, 2048, 5000);
      v12 = v11;
      if ( v11 <= 0 )
        goto end_of_stream;
      v13 = v8;
      if ( v10 )
        break;
      v13 = v11 + v8;
      if ( header_buf_len < v11 + v8 )
      {
        v14 = (char *)realloc(v3, v11 + v8);
        if ( !v14 )
        {
          free(v3);
          v5 = v4;
          goto LABEL_10;
        }
        header_buf_len = v12 + v8;
        v3 = v14;
      }
      memcpy(&v3[v8], buf, v12);
      v15 = 0;
      v10 = 0;
      v16 = v13 - 1;
LABEL_19:
      if ( v15 < v16 )
      {
        v17 = &v3[v15];
        if ( v10 )
        {
          v18 = (char *)(v10 - 1);
LABEL_22:
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v22 = 0;
          v72 = v18;
LABEL_23:
          if ( (int)v22 >= (int)v72 )
          {
            v12 = v13 - v10;
            memcpy(buf, &v3[v10], v13 - v10);
            break;
          }
          v30 = v22[(_DWORD)v3];
          if ( v21 <= 0 )
          {
            if ( v30 == 13 || v30 == 10 )
            {
              if ( v21 )
              {
                v38 = v21 < (int)v20;
LABEL_76:
                v41 = !v38;
                v33 = (int)v20 < v19;
                if ( v41 )
                  goto LABEL_60;
LABEL_55:
                valuestart = v19;
                if ( v33 )
                {
                  bytestocopy = (unsigned int)&v20[-v21];
                  chunksize_0 = (unsigned int)&v3[v21];
                  v34 = strncasecmp(&v3[v21], v74, (size_t)&v20[-v21]);
                  v35 = (const char *)chunksize_0;
                  if ( v34 )
                  {
                    chunksize_0 = valuestart;
                    if ( !strncasecmp(v35, v75, bytestocopy) )
                    {
                      v42 = strncasecmp(&v3[chunksize_0], "chunked", 7u);
                      v43 = chunked;
                      if ( !v42 )
                        v43 = 1;
                      chunked = v43;
                    }
                  }
                  else
                  {
                    v9 = atoi(&v3[valuestart]);
                  }
                }
                goto LABEL_60;
              }
              v38 = (int)v20 > 0;
              if ( !status_code )
                goto LABEL_76;
              for ( i = v3 + 1; ; ++i )
              {
                v36 = (int)v22 < v13;
                if ( i - v3 - 1 >= (int)v22 )
                  break;
                if ( *(i - 1) == 32 )
                {
                  if ( *status_code >= 0 )
                    goto LABEL_60;
                  chunksize_0 = (unsigned int)i;
                  v40 = atoi(i);
                  i = (const char *)chunksize_0;
                  *status_code = v40;
                }
              }
              goto LABEL_61;
            }
          }
          else if ( v21 < (int)v20 )
          {
            if ( v30 == 13 || v30 == 10 )
            {
              v33 = (int)v20 < v19;
              goto LABEL_55;
            }
          }
          else if ( v30 == 58 )
          {
            v31 = v22;
            do
            {
              v32 = v31[(_DWORD)v3 + 1];
              if ( v32 != 32 && v32 != 9 )
                break;
              ++v31;
            }
            while ( (int)v31 < (int)v72 );
            v20 = v22;
            v19 = (int)(v31 + 1);
            v22 = v31;
          }
          else if ( v30 == 13 || v30 == 10 )
          {
LABEL_60:
            while ( 1 )
            {
              v36 = (int)v22 < v13;
LABEL_61:
              if ( !v36 )
                break;
              v37 = v22[(_DWORD)v3];
              if ( v37 != 13 && v37 != 10 )
                break;
              ++v22;
            }
            v19 = 0;
            v20 = v22;
            v21 = (int)v22;
          }
          ++v22;
          goto LABEL_23;
        }
LABEL_28:
        v24 = *v17;
        v25 = v15 + 1;
        if ( v24 == 13 )
        {
          v26 = v3[v25];
          v25 = v15 + 2;
          if ( v26 == 10 )
          {
            v8 = v13;
            if ( v25 >= v13 )
              continue;
            v27 = v3[v25];
            v25 = v15 + 3;
            if ( v27 == 13 )
            {
              if ( v25 >= v13 )
                continue;
              v28 = v3[v25];
              v29 = v15 + 4;
LABEL_36:
              if ( v28 == 10 )
              {
                v10 = v29;
                v15 = v25 + 1;
                goto LABEL_19;
              }
              v25 = v29;
            }
          }
        }
        else if ( v24 == 10 )
        {
          v28 = v3[v25];
          v29 = v15 + 2;
          goto LABEL_36;
        }
        v15 = v25;
        if ( v25 >= v16 )
          goto LABEL_31;
        v17 = &v3[v25];
        goto LABEL_28;
      }
      v18 = (char *)(v10 - 1);
      if ( v10 )
        goto LABEL_22;
      v8 = v13;
    }
    if ( chunked )
    {
      v23 = 0;
      v72 = chunksize_buf;
LABEL_119:
      v50 = v23 < v12;
      while ( 1 )
      {
        v52 = chunksize;
        if ( !v50 )
          goto LABEL_121;
        if ( chunksize )
          goto LABEL_109;
        v44 = v72;
        if ( !v6 )
        {
          if ( *((_BYTE *)&header_buf_len + v23 + 0x44) != 13 || (++v23, v44 = v72, v23 < v12) )
          {
            v44 = v72;
            if ( *((_BYTE *)&header_buf_len + v23 + 0x44) == 10 )
              ++v23;
          }
        }
        v45 = &v44[v6];
        while ( 1 )
        {
          v46 = v23 < v12;
          chunksize_0 = (unsigned int)v45;
          if ( v23 >= v12 )
            break;
          v47 = _ctype_b_loc();
          v48 = buf[v23];
          if ( ((*v47)[v48] & 0x10) == 0 )
            goto LABEL_93;
          v45 = (char *)(chunksize_0 + 1);
          if ( v6 >= 0x1F )
            goto LABEL_93;
          ++v6;
          *(_BYTE *)chunksize_0 = v48;
          *v45 = 0;
          ++v23;
        }
        while ( 2 )
        {
          if ( !v46 )
            goto LABEL_119;
          v49 = buf[v23];
          if ( v49 != 13 && v49 != 10 )
          {
            ++v23;
LABEL_93:
            v46 = v23 < v12;
            continue;
          }
          break;
        }
        if ( *((_BYTE *)&header_buf_len + v23 + 0x44) == 13 )
        {
          v50 = ++v23 < v12;
          if ( v23 >= v12 )
            continue;
        }
        v51 = 0;
        if ( *((_BYTE *)&header_buf_len + v23 + 0x44) != 10 )
          goto LABEL_119;
        v52 = 0;
        while ( v6 != v51 )
        {
          v53 = v72[v51];
          v54 = 16 * v52;
          if ( (unsigned __int8)(v53 - 0x30) >= 0xAu )
          {
            v55 = v54 - 87;
            v53 |= 0x20u;
          }
          else
          {
            v55 = v54 - 48;
          }
          v52 = v55 + v53;
          ++v51;
        }
        chunksize_buf[0] = 0;
        ++v23;
        if ( !v52 )
        {
end_of_stream:
          free(v3);
          *size = v7;
          if ( !v7 )
          {
            free(v4);
            goto LABEL_5;
          }
          goto LABEL_6;
        }
        v6 = 0;
LABEL_109:
        v56 = v12 - v23;
        if ( v52 < v12 - v23 )
          v56 = v52;
        v57 = v7 + v56;
        if ( content_buf_len < v7 + v56 )
        {
          v58 = v9;
          if ( v9 < (int)(v7 + v56) )
            v58 = v7 + v56;
          bytestocopy = v56;
          chunksize_0 = v52;
          chunksizea = v7 + v56;
          content_buf_len = v58;
          v59 = (char *)realloc(v4, v58);
          v57 = chunksizea;
          v52 = chunksize_0;
          v56 = bytestocopy;
          if ( !v59 )
            goto LABEL_115;
          v4 = v59;
        }
        bytestocopy = v52;
        chunksize_0 = v57;
        chunksizeb = v56;
        memcpy(&v4[v7], &buf[v23], v56);
        v23 += chunksizeb;
        chunksize = bytestocopy - chunksizeb;
        v7 = chunksize_0;
        goto LABEL_119;
      }
    }
    if ( v9 > 0 )
    {
      v60 = content_buf_len;
      if ( v9 >= v12 + v7 )
        goto LABEL_129;
      v12 = v9 - v7;
    }
    v60 = content_buf_len;
LABEL_129:
    if ( v60 < v12 + v7 )
      break;
LABEL_134:
    memcpy(&v4[v7], buf, v12);
    v7 += v12;
LABEL_121:
    if ( v9 > 0 && v7 >= v9 )
      goto end_of_stream;
LABEL_31:
    v8 = v13;
  }
  v61 = v9;
  if ( v9 < v12 + v7 )
    v61 = v12 + v7;
  content_buf_len = v61;
  v62 = (char *)realloc(v4, v61);
  if ( v62 )
  {
    v4 = v62;
    goto LABEL_134;
  }
LABEL_115:
  free(v4);
LABEL_9:
  v5 = v3;
LABEL_10:
  free(v5);
LABEL_4:
  *size = -1;
LABEL_5:
  v4 = 0;
LABEL_6:
  if ( v81 != *v73 )
    _stack_chk_fail();
  return v4;
}
