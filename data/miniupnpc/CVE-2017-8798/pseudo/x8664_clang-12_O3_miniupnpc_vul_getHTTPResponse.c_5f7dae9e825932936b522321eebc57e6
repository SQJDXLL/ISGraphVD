void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // rax
  char *v4; // r15
  char *v5; // rax
  int v6; // edi
  int v7; // r12d
  int v8; // r13d
  int v9; // eax
  int v10; // r14d
  unsigned int v11; // ebp
  char *v12; // rbx
  int v13; // eax
  int v14; // ecx
  char v15; // bl
  __int64 v16; // rsi
  __int64 v17; // rdx
  int v18; // ecx
  int v19; // esi
  __int64 v20; // rbx
  int v21; // r9d
  size_t v22; // rsi
  int v23; // ebp
  const unsigned __int16 **v24; // rax
  int v25; // r9d
  const unsigned __int16 *v26; // rax
  unsigned __int64 v27; // rcx
  char *v28; // rdx
  __int64 v29; // rdi
  __int64 v30; // rbp
  __int64 v31; // rcx
  int v32; // eax
  char v33; // dl
  __int64 v34; // rcx
  int v35; // edx
  int v36; // edi
  int v37; // edi
  unsigned int v38; // ebp
  int v39; // eax
  char *v40; // rax
  char *v41; // rbx
  int v42; // esi
  const char *v43; // r8
  int v44; // edi
  int v45; // edx
  int v46; // eax
  int v47; // ebp
  int v48; // ecx
  char v49; // cl
  __int64 v50; // rcx
  char v51; // bl
  int v52; // ecx
  const char *v53; // rbx
  size_t v54; // r14
  int v55; // eax
  int v56; // ecx
  const char *v57; // rbx
  __int64 v58; // r14
  __int64 v59; // rcx
  char v60; // bl
  int v61; // edi
  int v62; // edx
  int v63; // eax
  int v64; // r14d
  int v65; // ecx
  char v66; // cl
  __int64 v67; // rcx
  char v68; // bl
  int v69; // ecx
  const char *v70; // rbx
  int v71; // eax
  int v72; // ecx
  __int64 v73; // rcx
  char v74; // bl
  unsigned int v75; // edx
  int v76; // ebp
  int v77; // r14d
  size_t v78; // rsi
  char *v79; // rax
  char *v80; // rbx
  char *v81; // rdi
  char *v82; // rdi
  char *ptr; // [rsp+8h] [rbp-8D0h]
  char *v85; // [rsp+10h] [rbp-8C8h]
  int v86; // [rsp+10h] [rbp-8C8h]
  __int64 v87; // [rsp+20h] [rbp-8B8h]
  unsigned int v88; // [rsp+2Ch] [rbp-8ACh]
  int v89; // [rsp+30h] [rbp-8A8h]
  unsigned int v90; // [rsp+38h] [rbp-8A0h]
  int v91; // [rsp+40h] [rbp-898h]
  int v92; // [rsp+44h] [rbp-894h]
  size_t v93; // [rsp+48h] [rbp-890h]
  __int64 v94; // [rsp+50h] [rbp-888h]
  __int64 v95; // [rsp+50h] [rbp-888h]
  unsigned int v97; // [rsp+5Ch] [rbp-87Ch]
  unsigned int v98; // [rsp+60h] [rbp-878h]
  char v101[32]; // [rsp+80h] [rbp-858h]
  char src[2104]; // [rsp+A0h] [rbp-838h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800uLL);
  if ( !v3 )
  {
    *size = -1;
    return 0LL;
  }
  v4 = v3;
  v5 = (char *)malloc(0x800uLL);
  if ( !v5 )
  {
    free(v4);
    *size = -1;
    return 0LL;
  }
  v85 = v5;
  v101[0] = 0;
  v97 = 2048;
  v87 = 0xFFFFFFFFLL;
  v91 = 0;
  v6 = 0;
  v7 = 0;
  v98 = 2048;
  v89 = 0;
  v88 = 0;
  v8 = 0;
  do
  {
    do
    {
LABEL_6:
      v92 = v6;
      v9 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
      if ( v9 <= 0 )
        goto end_of_stream;
      v10 = v9;
      v11 = v7;
      v12 = v4;
      while ( 1 )
      {
        if ( v8 )
        {
          v7 = v11;
          v4 = v12;
          if ( !v91 )
            goto LABEL_167;
          goto LABEL_40;
        }
        v7 = v10 + v11;
        if ( v10 + v11 <= v97 )
        {
          v4 = v12;
        }
        else
        {
          v4 = (char *)realloc(v12, (unsigned int)v7);
          v97 = v10 + v11;
          if ( !v4 )
          {
            free(v12);
            v81 = v85;
LABEL_185:
            free(v81);
            *size = -1;
            return 0LL;
          }
        }
        memcpy(&v4[v11], src, (unsigned int)v10);
        if ( v7 < 2 )
          goto LABEL_9;
        v13 = v7 - 1;
        v14 = 0;
        while ( 1 )
        {
          v15 = v4[v14];
          if ( v15 == 10 )
            break;
          if ( v15 != 13 )
          {
            LODWORD(v16) = v14;
LABEL_32:
            v8 = 0;
            v14 = v16 + 1;
            if ( (int)v16 + 1 >= v13 )
              goto LABEL_8;
            goto LABEL_37;
          }
          if ( v4[v14 + 1] != 10 )
          {
            LODWORD(v17) = v14 + 1;
LABEL_35:
            LODWORD(v16) = v17;
            v8 = 0;
LABEL_36:
            v14 = v16 + 1;
            if ( (int)v16 + 1 >= v13 )
              goto LABEL_8;
            goto LABEL_37;
          }
          v16 = v14 + 2LL;
          if ( v14 + 2 >= v7 )
            goto LABEL_32;
          v8 = 0;
          if ( v4[v16] != 13 )
            goto LABEL_36;
          v17 = v14 + 3LL;
          if ( (int)v17 >= v7 )
            goto LABEL_35;
          v18 = v14 + 4;
          if ( v4[v17] != 10 )
            v18 = 0;
          v8 = v18;
          v14 = v17 + 1;
          if ( (int)v17 + 1 >= v13 )
            goto LABEL_8;
LABEL_37:
          if ( v8 )
            goto LABEL_8;
        }
        v19 = v14 + 1;
        v8 = v14 + 2;
        if ( v4[v14 + 1] != 10 )
          v8 = 0;
        v14 += 2;
        if ( v19 + 1 < v13 )
          goto LABEL_37;
LABEL_8:
        if ( v8 )
          break;
LABEL_9:
        v8 = 0;
        v10 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
        v11 = v7;
        v12 = v4;
        if ( v10 <= 0 )
          goto end_of_stream;
      }
      if ( v8 >= 2 )
      {
        v42 = v8 - 1;
        v95 = v8 - 1;
        if ( status_code )
        {
          v43 = v4 + 1;
          v44 = 0;
          v45 = 0;
          v46 = 0;
          v47 = 0;
          while ( 1 )
          {
            v49 = v4[v47];
            if ( v46 > 0 && v45 <= v46 && v49 == 58 )
            {
              v48 = v47;
              if ( v47 < v42 )
              {
                v50 = 0LL;
                while ( 1 )
                {
                  v51 = v43[v47 + v50];
                  if ( v51 != 32 && v51 != 9 )
                    break;
                  if ( v95 - v47 == ++v50 )
                  {
                    v42 = v8 - 1;
                    v48 = v8 - 1;
                    goto LABEL_88;
                  }
                }
                v48 = v47 + v50;
                v42 = v8 - 1;
              }
LABEL_88:
              v44 = v48 + 1;
            }
            else if ( v49 == 13 || v49 == 10 )
            {
              if ( !v46 )
              {
                if ( v47 <= 0 )
                  goto LABEL_117;
                v57 = v43;
                v58 = (unsigned int)v47;
                while ( 1 )
                {
                  if ( *(v57 - 1) == 32 )
                  {
                    if ( *status_code >= 0 )
                    {
LABEL_116:
                      v42 = v8 - 1;
                      v43 = v4 + 1;
                      goto LABEL_117;
                    }
                    *status_code = strtol(v57, 0LL, 10);
                  }
                  ++v57;
                  if ( !--v58 )
                    goto LABEL_116;
                }
              }
              v52 = v45 - v46;
              if ( v45 <= v46 || v44 <= v45 )
              {
LABEL_117:
                v44 = 0;
                if ( v47 < v7 )
                  goto LABEL_118;
              }
              else
              {
                v53 = &v4[v46];
                v54 = v52;
                if ( !strncasecmp(v53, "content-length", v52) )
                {
                  v87 = strtol(&v4[v44], 0LL, 10);
                }
                else if ( !strncasecmp(v53, "transfer-encoding", v54) )
                {
                  v55 = strncasecmp(&v4[v44], "chunked", 7uLL);
                  v56 = v91;
                  if ( !v55 )
                    v56 = 1;
                  v91 = v56;
                }
                v42 = v8 - 1;
                v43 = v4 + 1;
                v44 = 0;
                if ( v47 < v7 )
                {
LABEL_118:
                  v59 = 0LL;
                  do
                  {
                    v60 = v4[v47 + v59];
                    if ( v60 != 13 && v60 != 10 )
                    {
                      v47 += v59;
                      v48 = v47;
                      v46 = v47;
                      goto LABEL_124;
                    }
                    ++v59;
                  }
                  while ( v7 - (__int64)v47 != v59 );
                  v48 = v7;
                  v46 = v7;
                  v47 = v7;
LABEL_124:
                  v42 = v8 - 1;
                  goto LABEL_89;
                }
              }
              v48 = v47;
              v46 = v47;
            }
            else
            {
              v48 = v47;
              v47 = v45;
            }
LABEL_89:
            v45 = v47;
            v47 = v48 + 1;
            if ( v48 + 1 >= v42 )
              goto LABEL_166;
          }
        }
        v61 = 0;
        v62 = 0;
        v63 = 0;
        v64 = 0;
        do
        {
          v66 = v4[v64];
          if ( v63 > 0 && v62 <= v63 && v66 == 58 )
          {
            v65 = v64;
            if ( v64 < v42 )
            {
              v67 = 0LL;
              while ( 1 )
              {
                v68 = v4[v64 + 1 + v67];
                if ( v68 != 32 && v68 != 9 )
                  break;
                if ( v95 - v64 == ++v67 )
                {
                  v42 = v8 - 1;
                  v65 = v8 - 1;
                  goto LABEL_134;
                }
              }
              v65 = v64 + v67;
              v42 = v8 - 1;
            }
LABEL_134:
            v61 = v65 + 1;
          }
          else if ( v66 == 13 || v66 == 10 )
          {
            v69 = v62 - v63;
            if ( v62 > v63 && v61 > v62 )
            {
              v70 = &v4[v63];
              v93 = v69;
              if ( !strncasecmp(v70, "content-length", v69) )
              {
                v87 = strtol(&v4[v61], 0LL, 10);
              }
              else if ( !strncasecmp(v70, "transfer-encoding", v93) )
              {
                v71 = strncasecmp(&v4[v61], "chunked", 7uLL);
                v72 = v91;
                if ( !v71 )
                  v72 = 1;
                v91 = v72;
              }
              v42 = v8 - 1;
            }
            v61 = 0;
            if ( v64 >= v7 )
            {
              v65 = v64;
              v63 = v64;
            }
            else
            {
              v73 = 0LL;
              do
              {
                v74 = v4[v64 + v73];
                if ( v74 != 13 && v74 != 10 )
                {
                  v64 += v73;
                  v65 = v64;
                  v63 = v64;
                  goto LABEL_165;
                }
                ++v73;
              }
              while ( v7 - (__int64)v64 != v73 );
              v65 = v7;
              v63 = v7;
              v64 = v7;
LABEL_165:
              v42 = v8 - 1;
            }
          }
          else
          {
            v65 = v64;
            v64 = v62;
          }
          v62 = v64;
          v64 = v65 + 1;
        }
        while ( v65 + 1 < v42 );
      }
LABEL_166:
      v10 = v7 - v8;
      memcpy(src, &v4[v8], v7 - v8);
      v6 = v92;
      if ( !v91 )
      {
LABEL_167:
        v75 = v89;
        v76 = v87 - v89;
        if ( v10 + v89 <= (int)v87 )
          v76 = v10;
        if ( (int)v87 <= 0 )
          v76 = v10;
        v77 = v89 + v76;
        if ( v89 + v76 <= v98 )
        {
          v80 = v85;
        }
        else
        {
          v78 = (unsigned int)v87;
          if ( (int)v87 < v77 )
            v78 = (unsigned int)v77;
          v98 = v78;
          v79 = (char *)realloc(v85, v78);
          v75 = v89;
          v80 = v79;
          if ( !v79 )
          {
            v82 = v85;
LABEL_186:
            free(v82);
            v81 = v4;
            goto LABEL_185;
          }
        }
        memcpy(&v80[v75], src, v76);
        v85 = v80;
        v89 += v76;
        LODWORD(v22) = v87;
        v6 = v92;
        continue;
      }
LABEL_40:
      if ( v10 <= 0 )
      {
LABEL_128:
        if ( (int)v87 > 0 )
          break;
        goto LABEL_6;
      }
      v20 = (unsigned int)v10;
      v21 = 0;
      ptr = v85;
      v22 = v87;
      while ( 2 )
      {
        v90 = v89;
        do
        {
          if ( v6 )
          {
            v94 = v20;
            goto LABEL_74;
          }
          if ( v88 )
          {
            if ( v21 >= v10 )
              goto LABEL_54;
          }
          else
          {
            v21 += src[v21] == 13;
            if ( v21 < v10 )
              v21 += src[v21] == 10;
            LODWORD(v22) = v87;
            if ( v21 >= v10 )
            {
LABEL_54:
              if ( v21 < v10 )
                goto LABEL_55;
              goto LABEL_61;
            }
          }
          v23 = v21;
          v24 = _ctype_b_loc();
          v25 = v23;
          v26 = *v24;
          v27 = v88;
          v28 = &src[v23];
          v29 = v20 - v23;
          v22 = 0LL;
          while ( v27 <= 0x1E )
          {
            v30 = v28[v22];
            if ( (v26[v30] & 0x1000) == 0 )
              break;
            v101[v27] = v30;
            v101[++v27] = 0;
            if ( v29 == ++v22 )
            {
              v6 = 0;
              v85 = ptr;
              v88 = v88 + v10 - v25;
              goto LABEL_128;
            }
          }
          v21 = v22 + v25;
          v88 = v27;
          LODWORD(v22) = v87;
          if ( v21 < v10 )
          {
LABEL_55:
            v31 = v21;
            v32 = -v21;
            do
            {
              v33 = src[v31];
              if ( v33 == 10 || v33 == 13 )
              {
                v21 = (v33 == 13) - v32;
                LODWORD(v22) = v87;
                if ( v21 >= v10 )
                  goto LABEL_181;
                goto LABEL_64;
              }
              ++v31;
              --v32;
            }
            while ( v20 != v31 );
            v6 = 0;
            v85 = ptr;
            if ( (int)v87 > 0 )
              goto LABEL_179;
            goto LABEL_6;
          }
LABEL_61:
          if ( v21 >= v10 )
          {
LABEL_181:
            v6 = 0;
            v85 = ptr;
            if ( (int)v22 > 0 )
              goto LABEL_179;
            goto LABEL_6;
          }
LABEL_64:
          v6 = 0;
          v22 = v87;
        }
        while ( src[v21] != 10 );
        if ( !v88 )
        {
          v101[0] = 0;
LABEL_188:
          v85 = ptr;
          goto end_of_stream;
        }
        v34 = 0LL;
        v6 = 0;
        do
        {
          v35 = (unsigned __int8)v101[v34];
          v37 = 16 * v6;
          if ( (unsigned __int8)(v35 - 48) > 9u )
          {
            v35 = (char)(v35 | 0x20);
            v36 = v37 - 87;
          }
          else
          {
            v36 = v37 - 48;
          }
          v6 = v36 + v35;
          ++v34;
        }
        while ( v88 != v34 );
        v101[0] = 0;
        v22 = v87;
        if ( !v6 )
          goto LABEL_188;
        v94 = v20;
        ++v21;
        v88 = 0;
LABEL_74:
        v38 = v10 - v21;
        if ( v6 < v10 - v21 )
          v38 = v6;
        v39 = v38 + v89;
        v89 += v38;
        v86 = v21;
        if ( v38 + v90 <= v98 )
        {
          v40 = ptr;
        }
        else
        {
          if ( (int)v22 < v39 )
            v22 = (unsigned int)v39;
          v98 = v22;
          v40 = (char *)realloc(ptr, v22);
          v21 = v86;
          if ( !v40 )
          {
            v82 = ptr;
            goto LABEL_186;
          }
        }
        v41 = v40;
        memcpy(&v40[v90], &src[v21], v38);
        v21 = v38 + v86;
        v6 -= v38;
        v85 = v41;
        ptr = v41;
        v22 = v87;
        v20 = v94;
        if ( v21 < v10 )
          continue;
        break;
      }
    }
    while ( (int)v22 <= 0 );
LABEL_179:
    ;
  }
  while ( v89 < (int)v87 );
end_of_stream:
  free(v4);
  *size = v89;
  if ( v89 )
    return v85;
  free(v85);
  return 0LL;
}
