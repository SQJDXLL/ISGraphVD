void *__cdecl getHTTPResponse(int s, int *size, int *status_code)
{
  unsigned int v3; // edi
  signed int v4; // edx
  char *v5; // eax
  char *v6; // esi
  int v7; // ebx
  int v8; // eax
  int v9; // ebp
  char v10; // dl
  char v11; // dl
  int v12; // edx
  int v13; // esi
  int v14; // ebx
  char *v15; // ecx
  char *v16; // ebp
  char v17; // al
  size_t v18; // edi
  signed int v19; // ebp
  signed int v20; // esi
  size_t v21; // edi
  size_t v22; // eax
  char *v23; // eax
  int v24; // ecx
  char *v25; // eax
  int v26; // edx
  const unsigned __int16 *v27; // ebp
  unsigned int v28; // ebx
  char *v29; // ecx
  int v30; // eax
  char v31; // al
  char v32; // al
  char *v33; // ecx
  int v34; // ebx
  char *v35; // edi
  int v36; // eax
  int v37; // ebx
  bool v38; // zf
  size_t v39; // ebp
  int v40; // esi
  unsigned int v41; // edx
  int *v42; // esi
  char v43; // al
  const char *v44; // edx
  int *v45; // ebp
  const char *v46; // esi
  const char *v47; // edi
  char *v48; // eax
  int v49; // eax
  char *v50; // edx
  int v51; // eax
  int v52; // eax
  int v53; // eax
  int v54; // eax
  int v55; // edi
  char v56; // bl
  int *v58; // esi
  int *v59; // esi
  unsigned int content_buf_used; // [esp+0h] [ebp-8A0h]
  int v61; // [esp+8h] [ebp-898h]
  char *content_buf; // [esp+Ch] [ebp-894h]
  int content_buf_used_0; // [esp+14h] [ebp-88Ch]
  signed int content_buf_used_0a; // [esp+14h] [ebp-88Ch]
  unsigned int content_buf_used_0b; // [esp+14h] [ebp-88Ch]
  unsigned int content_buf_len; // [esp+18h] [ebp-888h]
  int nd; // [esp+1Ch] [ebp-884h]
  int n; // [esp+1Ch] [ebp-884h]
  int na; // [esp+1Ch] [ebp-884h]
  int nb; // [esp+1Ch] [ebp-884h]
  int nc; // [esp+1Ch] [ebp-884h]
  int content_length; // [esp+20h] [ebp-880h]
  int chunked; // [esp+24h] [ebp-87Ch]
  int valuestart; // [esp+28h] [ebp-878h]
  char *header_buf; // [esp+2Ch] [ebp-874h]
  int endofheaders; // [esp+30h] [ebp-870h]
  unsigned int chunksize_buf_index; // [esp+34h] [ebp-86Ch]
  unsigned int chunksize; // [esp+38h] [ebp-868h]
  unsigned int header_buf_len; // [esp+3Ch] [ebp-864h]
  char *s1; // [esp+40h] [ebp-860h]
  int i; // [esp+44h] [ebp-85Ch]
  size_t v82; // [esp+48h] [ebp-858h]
  int *v83; // [esp+4Ch] [ebp-854h]
  int *v84; // [esp+50h] [ebp-850h]
  char chunksize_buf[32]; // [esp+60h] [ebp-840h] BYREF
  char buf[2048]; // [esp+80h] [ebp-820h] BYREF
  unsigned int v88; // [esp+880h] [ebp-20h]

  v83 = status_code;
  v88 = __readgsdword(0x14u);
  if ( status_code )
    *status_code = -1;
  header_buf = (char *)malloc(0x800u);
  if ( !header_buf )
  {
    *size = -1;
    return 0;
  }
  content_buf = (char *)malloc(0x800u);
  if ( !content_buf )
  {
    free(header_buf);
    *size = -1;
    return 0;
  }
  chunksize_buf[0] = 0;
  v3 = 0;
  content_buf_used = 0;
  content_buf_len = 2048;
  valuestart = 0;
  header_buf_len = 2048;
  chunksize = 0;
  content_length = -1;
  chunked = 0;
  endofheaders = 0;
  v84 = size;
  while ( 1 )
  {
    while ( 1 )
    {
      while ( 1 )
      {
        v4 = receivedata(s, buf, 2048, 5000, 0);
        if ( v4 <= 0 )
          goto LABEL_136;
        if ( endofheaders )
        {
          if ( chunked )
            goto LABEL_33;
LABEL_71:
          v39 = content_buf_used + v4;
          v40 = content_buf_used + v4;
          if ( content_length <= 0 )
          {
            if ( content_buf_len < v39 )
            {
              if ( content_length < (int)v39 )
              {
                content_buf_used_0b = content_buf_used + v4;
                goto LABEL_108;
              }
LABEL_112:
              content_buf_used_0b = content_buf_used + v4;
              v39 = content_length;
              goto LABEL_108;
            }
          }
          else
          {
            if ( content_length < (int)v39 )
            {
              content_buf_used_0b = content_length;
              v40 = content_length;
              v4 = content_length - content_buf_used;
              if ( content_buf_len >= content_length )
                goto LABEL_74;
              content_buf_used_0b = content_length;
              v39 = content_length;
LABEL_108:
              nc = v4;
              v48 = (char *)realloc(content_buf, v39);
              if ( !v48 )
              {
LABEL_143:
                v58 = v84;
                free(content_buf);
                free(header_buf);
                *v58 = -1;
                return 0;
              }
              v40 = content_buf_used_0b;
              v4 = nc;
              content_buf_len = v39;
              content_buf = v48;
LABEL_74:
              memcpy(&content_buf[content_buf_used], buf, v4);
              chunked = 0;
              content_buf_used = content_buf_used_0b;
              goto LABEL_75;
            }
            if ( content_buf_len < v39 )
              goto LABEL_112;
          }
          content_buf_used_0b = content_buf_used + v4;
          goto LABEL_74;
        }
        content_buf_used_0 = v4 + valuestart;
        if ( header_buf_len < v4 + valuestart )
        {
          nd = v4;
          v5 = (char *)realloc(header_buf, v4 + valuestart);
          v4 = nd;
          if ( !v5 )
          {
            v59 = v84;
            free(header_buf);
            free(content_buf);
            *v59 = -1;
            return 0;
          }
          header_buf = v5;
          header_buf_len = content_buf_used_0;
        }
        v6 = header_buf;
        memcpy(&header_buf[valuestart], buf, v4);
        v7 = content_buf_used_0 - 1;
        if ( content_buf_used_0 > 1 )
          break;
        valuestart = content_buf_used_0;
      }
      v8 = 0;
      do
      {
        v11 = v6[v8];
        if ( v11 == 13 )
        {
          if ( v6[v8 + 1] == 10 )
          {
            if ( v8 + 2 < content_buf_used_0 && v6[v8 + 2] == 13 )
            {
              if ( v8 + 3 < content_buf_used_0 && v6[v8 + 3] == 10 )
              {
                v38 = v8 == -4;
                v8 += 4;
                v10 = v38;
                v9 = v8;
              }
              else
              {
                v8 += 4;
                v9 = 0;
                v10 = 1;
              }
            }
            else
            {
              v8 += 3;
              v9 = 0;
              v10 = 1;
            }
LABEL_15:
            if ( v7 <= v8 )
              break;
            continue;
          }
        }
        else
        {
          if ( v11 != 10 )
          {
            ++v8;
            v9 = 0;
            v10 = 1;
            goto LABEL_15;
          }
          if ( v6[v8 + 1] == 10 )
          {
            v38 = v8 == -2;
            v8 += 2;
            v10 = v38;
            v9 = v8;
            goto LABEL_15;
          }
        }
        v8 += 2;
        v9 = 0;
        v10 = 1;
        if ( v7 <= v8 )
          break;
      }
      while ( v10 );
      if ( v9 )
        break;
      endofheaders = 0;
      valuestart = content_buf_used_0;
    }
    n = v9 - 1;
    if ( v9 - 1 <= 0 )
      goto LABEL_31;
    valuestart = 0;
    v12 = 0;
    v13 = 0;
    chunksize_buf_index = v3;
    v14 = 0;
    v15 = (char *)content_buf_used_0;
    endofheaders = v9;
    v16 = header_buf;
    while ( 2 )
    {
      v17 = v16[v13];
      v18 = v13 + 1;
      if ( v12 <= 0 || v12 < v14 )
      {
        if ( v17 != 13 && v17 != 10 )
          goto LABEL_28;
        if ( !v12 && v83 )
        {
          if ( v13 <= 0 )
            goto LABEL_86;
          v44 = v16 + 1;
          s1 = v16;
          v45 = v83;
          i = v13;
          v82 = v13 + 1;
          v46 = &v44[v13];
          v47 = v44;
          valuestart = (int)v15;
          while ( 1 )
          {
            if ( *(v47 - 1) == 32 )
            {
              if ( *v45 >= 0 )
              {
LABEL_81:
                v15 = (char *)valuestart;
                v16 = s1;
                v13 = i;
                v18 = v82;
                goto LABEL_82;
              }
              *v45 = strtol(v47, 0, 10);
            }
            if ( v46 == ++v47 )
              goto LABEL_81;
          }
        }
        if ( v12 >= v14 || v14 >= valuestart )
          goto LABEL_82;
        i = (int)v15;
        v82 = v14 - v12;
        s1 = &v16[v12];
        v49 = strncasecmp(&v16[v12], "content-length", v14 - v12);
        v50 = s1;
        s1 = (char *)i;
        if ( !v49 )
        {
          content_length = strtol(&v16[valuestart], 0, 10);
          v15 = s1;
          goto LABEL_82;
        }
        v51 = strncasecmp(v50, "transfer-encoding", v82);
        v15 = s1;
        if ( v51 )
        {
LABEL_82:
          if ( (int)v15 > v13 )
            goto LABEL_86;
        }
        else
        {
          v52 = strncasecmp(&v16[valuestart], "chunked", 7u);
          v15 = s1;
          v38 = v52 == 0;
          v53 = 1;
          if ( !v38 )
            v53 = chunked;
          chunked = v53;
          if ( (int)s1 > v13 )
          {
            while ( 1 )
            {
LABEL_86:
              v43 = v16[v13];
              v12 = v13;
              v13 = v18;
              if ( v43 != 13 && v43 != 10 )
              {
                valuestart = 0;
                v14 = v12;
                goto LABEL_29;
              }
              if ( v15 == (char *)v18 )
                break;
              ++v18;
            }
            v13 = v12 + 2;
            valuestart = 0;
            v14 = (int)v15;
            v12 = (int)v15;
            goto LABEL_29;
          }
        }
        valuestart = 0;
        v14 = v13;
        v12 = v13;
        goto LABEL_28;
      }
      if ( v17 == 58 )
      {
        v54 = v13;
        v55 = v13;
        if ( n > v13 )
        {
          valuestart = v12;
          do
          {
            v56 = v16[v54 + 1];
            v55 = v54++;
            if ( v56 != 32 && v56 != 9 )
            {
              v12 = valuestart;
              goto LABEL_128;
            }
          }
          while ( n != v54 );
          v12 = valuestart;
          v55 = n;
        }
LABEL_128:
        v14 = v13;
        valuestart = v55 + 1;
        v13 = v55 + 1;
      }
      else
      {
        if ( v17 == 10 || v17 == 13 )
          goto LABEL_82;
LABEL_28:
        v13 = v18;
      }
LABEL_29:
      if ( n > v13 )
        continue;
      break;
    }
    v9 = endofheaders;
    v3 = chunksize_buf_index;
LABEL_31:
    memcpy(buf, &header_buf[v9], content_buf_used_0 - v9);
    endofheaders = v9;
    v4 = content_buf_used_0 - v9;
    valuestart = content_buf_used_0;
    if ( !chunked )
      goto LABEL_71;
    if ( content_buf_used_0 - v9 <= 0 )
    {
      v40 = content_buf_used;
      goto LABEL_75;
    }
LABEL_33:
    chunksize_buf_index = v3;
    v19 = chunksize;
    v20 = 0;
    content_buf_used_0a = v4;
LABEL_42:
    v24 = content_buf_used;
    if ( !v19 )
      break;
LABEL_34:
    v21 = content_buf_used_0a - v20;
    if ( content_buf_used_0a - v20 > v19 )
      v21 = v19;
    content_buf_used += v21;
    v22 = content_buf_used;
    if ( content_buf_len < content_buf_used )
    {
      na = v24;
      if ( content_length >= (int)content_buf_used )
        v22 = content_length;
      content_buf_len = v22;
      v23 = (char *)realloc(content_buf, v22);
      v24 = na;
      if ( !v23 )
        goto LABEL_143;
      content_buf = v23;
    }
    v19 -= v21;
    v25 = &buf[v20];
    v20 += v21;
    memcpy(&content_buf[v24], v25, v21);
    if ( v20 < content_buf_used_0a )
      goto LABEL_42;
    v3 = chunksize_buf_index;
    v40 = content_buf_used;
    chunksize = v19;
    chunked = 1;
LABEL_75:
    if ( content_length > 0 && content_length <= v40 )
    {
      v41 = v40;
      v42 = v84;
      goto end_of_stream;
    }
  }
  v3 = chunksize_buf_index;
  v26 = content_buf_used_0a;
  do
  {
    if ( !v3 )
    {
      if ( buf[v20] == 13 )
        ++v20;
      if ( v20 >= v26 )
        goto LABEL_91;
      if ( buf[v20] != 10 )
        goto LABEL_49;
      ++v20;
    }
    if ( v20 >= v26 )
      goto LABEL_91;
LABEL_49:
    nb = v26;
    v27 = *_ctype_b_loc();
    v28 = nb + v3 - v20;
    v29 = &buf[v20 - v3];
    do
    {
      v30 = v29[v3];
      if ( (v27[v30] & 0x1000) == 0 )
        break;
      if ( v3 > 0x1E )
        break;
      ++v3;
      ++v20;
      chunksize_buf[v3 - 1] = v30;
      chunksize_buf[v3] = 0;
    }
    while ( v28 != v3 );
    v26 = nb;
    if ( v20 >= nb )
      goto LABEL_91;
    while ( 1 )
    {
      v31 = buf[v20];
      if ( v31 == 13 || v31 == 10 )
        break;
      if ( ++v20 == nb )
        goto LABEL_91;
    }
    if ( v20 >= nb )
    {
LABEL_91:
      v40 = content_buf_used;
      chunked = 1;
      chunksize = 0;
      goto LABEL_75;
    }
    v32 = buf[v20];
    if ( v32 == 13 )
    {
      if ( ++v20 >= nb )
        goto LABEL_91;
      v32 = buf[v20];
    }
  }
  while ( v32 != 10 );
  if ( v3 )
  {
    v33 = chunksize_buf;
    v34 = 0;
    v35 = &chunksize_buf[v3];
    do
    {
      while ( 1 )
      {
        v36 = *v33;
        v37 = 16 * v34;
        if ( (unsigned __int8)(v36 - 48) > 9u )
          break;
        ++v33;
        v34 = v37 + v36 - 48;
        if ( v35 == v33 )
          goto LABEL_66;
      }
      ++v33;
      v34 = v37 + (char)(v36 | 0x20) - 87;
    }
    while ( v35 != v33 );
LABEL_66:
    chunksize_buf[0] = 0;
    ++v20;
    if ( v34 )
    {
      chunksize_buf_index = 0;
      v24 = content_buf_used;
      v19 = v34;
      goto LABEL_34;
    }
  }
LABEL_136:
  v42 = v84;
  v41 = content_buf_used;
end_of_stream:
  v61 = v41;
  free(header_buf);
  *v42 = v61;
  if ( !content_buf_used )
  {
    free(content_buf);
    return 0;
  }
  return content_buf;
}
