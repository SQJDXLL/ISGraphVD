void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v5; // x0
  char *v6; // x21
  char *v7; // x28
  int v8; // w23
  int v9; // w27
  int v10; // w20
  __int64 v11; // x9
  __int64 v12; // x10
  int v13; // w22
  bool v14; // w10
  unsigned int v15; // w19
  int v16; // w0
  int v17; // w26
  unsigned int v18; // w8
  char *v19; // x0
  int v20; // w9
  int v21; // w11
  __int64 v22; // x11
  __int64 v23; // x10
  int v24; // w11
  int v25; // w9
  int v26; // w13
  int v27; // w28
  int v28; // w9
  int v29; // w8
  int v30; // w22
  const char *v31; // x26
  int v32; // w10
  __int64 v33; // x9
  int v34; // w12
  int *v35; // x10
  __int64 v36; // x28
  int v37; // w0
  int v38; // w10
  const char *v39; // x26
  int v40; // w0
  int v41; // w8
  char *v42; // x8
  __int64 v43; // x9
  int v44; // w10
  int v45; // w9
  __int64 v46; // x22
  int v48; // w22
  unsigned int v49; // w9
  int v50; // w19
  size_t v51; // x1
  char *v52; // x0
  char *v53; // x25
  unsigned int v54; // w23
  const unsigned __int16 *v55; // x10
  __int64 v56; // x8
  __int64 v57; // x14
  char *v58; // x15
  int v59; // w8
  __int64 v60; // x8
  char *v61; // x9
  int v62; // t1
  int v63; // w11
  int v64; // w10
  unsigned int v65; // w28
  int v66; // w9
  size_t v67; // x1
  char *v68; // x0
  char *v69; // x0
  void *v71; // x0
  char *v72; // [xsp+8h] [xbp-8A8h]
  int v73; // [xsp+14h] [xbp-89Ch]
  size_t v74; // [xsp+18h] [xbp-898h]
  int *v75; // [xsp+28h] [xbp-888h]
  int v76; // [xsp+44h] [xbp-86Ch]
  __int64 v77; // [xsp+50h] [xbp-860h]
  int v78; // [xsp+5Ch] [xbp-854h]
  unsigned int v79; // [xsp+5Ch] [xbp-854h]
  __int64 v80; // [xsp+68h] [xbp-848h]
  __int64 v81; // [xsp+68h] [xbp-848h]
  int v83; // [xsp+78h] [xbp-838h]
  unsigned int v84; // [xsp+78h] [xbp-838h]
  unsigned int v85; // [xsp+80h] [xbp-830h]
  unsigned int v86; // [xsp+84h] [xbp-82Ch]
  char v87[32]; // [xsp+88h] [xbp-828h] BYREF
  char src[2056]; // [xsp+A8h] [xbp-808h] BYREF

  if ( status_code )
    *status_code = -1;
  v5 = (char *)malloc(0x800uLL);
  if ( !v5 )
  {
    v7 = 0LL;
LABEL_147:
    *size = -1;
    return v7;
  }
  v6 = v5;
  v7 = (char *)malloc(0x800uLL);
  if ( !v7 )
  {
    free(v6);
    goto LABEL_147;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v85 = 0;
  v86 = 2048;
  v11 = 0xFFFFFFFFLL;
  v12 = 2048LL;
  v75 = size;
  v76 = 0;
  v78 = 0;
  v87[0] = 0;
  while ( 1 )
  {
    v13 = v10;
    v80 = v12;
    v77 = v11;
    do
    {
      v15 = v9;
      v16 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
      if ( v16 < 1 )
        goto end_of_stream;
      v17 = v16;
      if ( v13 )
      {
        v10 = v13;
        goto LABEL_80;
      }
      v18 = v86;
      v9 += v16;
      if ( v16 + v15 <= v86 )
      {
        v19 = v6;
      }
      else
      {
        v19 = (char *)realloc(v6, (unsigned int)v9);
        v18 = v9;
        if ( !v19 )
        {
          free(v6);
          v69 = v7;
          goto LABEL_148;
        }
      }
      v6 = v19;
      v86 = v18;
      memcpy(&v19[v15], src, (unsigned int)v17);
      if ( v9 >= 2 )
      {
        v20 = 0;
        while ( 1 )
        {
          v21 = (unsigned __int8)v6[v20];
          if ( v21 == 10 )
            break;
          if ( v21 == 13 )
          {
            LODWORD(v22) = v20 + 1;
            if ( v6[v20 + 1] == 10 )
            {
              v22 = v20 + 2LL;
              if ( v20 + 2 < v9 && v6[v22] == 13 )
              {
                v23 = v20 + 3LL;
                if ( (int)v23 >= v9 )
                {
                  v10 = 0;
                }
                else
                {
                  v24 = (unsigned __int8)v6[v23];
                  v25 = v20 + 4;
LABEL_25:
                  if ( v24 == 10 )
                    v10 = v25;
                  else
                    v10 = 0;
                }
                v20 = v23;
                goto LABEL_31;
              }
            }
            v10 = 0;
            v20 = v22;
          }
          else
          {
            v10 = 0;
          }
LABEL_31:
          ++v20;
          v14 = v10 == 0;
          if ( v20 >= v9 - 1 || v10 )
            goto LABEL_8;
        }
        v23 = v20 + 1LL;
        v24 = (unsigned __int8)v6[v23];
        v25 = v20 + 2;
        goto LABEL_25;
      }
      v10 = 0;
      v14 = 1;
LABEL_8:
      v13 = 0;
    }
    while ( v14 );
    v72 = v7;
    if ( v10 >= 2 )
    {
      v26 = v10 - 1;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = v6 + 1;
      do
      {
        v32 = (unsigned __int8)v6[v30];
        v83 = v30;
        if ( v32 == 58 && v29 >= 1 && v28 <= v29 )
        {
          if ( v30 < v26 )
          {
            v33 = 0LL;
            do
            {
              v34 = (unsigned __int8)v31[v30 + v33];
              if ( v34 != 32 && v34 != 9 )
              {
                v30 += v33;
                v27 = v30 + 1;
                v28 = v83;
                goto LABEL_40;
              }
              ++v33;
            }
            while ( v10 - 1 - (__int64)v30 != v33 );
            v28 = v30;
            v30 = v26;
            v27 = v10;
            goto LABEL_40;
          }
          v27 = v30 + 1;
        }
        else
        {
          if ( v32 != 13 && v32 != 10 )
            goto LABEL_40;
          v35 = status_code;
          if ( !status_code || v29 )
          {
            v38 = v28 - v29;
            if ( v28 > v29 && v27 > v28 )
            {
              v39 = &v6[v29];
              v74 = v38;
              if ( !strncasecmp(v39, "content-length", v38) )
              {
                v77 = strtol(&v6[v27], 0uLL, 10);
              }
              else if ( !strncasecmp(v39, "transfer-encoding", v74) )
              {
                v40 = strncasecmp(&v6[v27], "chunked", 7uLL);
                v41 = v76;
                if ( !v40 )
                  v41 = 1;
                v76 = v41;
              }
LABEL_70:
              v31 = v6 + 1;
              v26 = v10 - 1;
            }
          }
          else if ( v30 >= 1 )
          {
            v36 = (unsigned int)v30;
            while ( 1 )
            {
              if ( *(v31 - 1) == 32 )
              {
                if ( (*v35 & 0x80000000) == 0 )
                  goto LABEL_70;
                v37 = strtol(v31, 0uLL, 10);
                v35 = status_code;
                *status_code = v37;
              }
              --v36;
              ++v31;
              if ( !v36 )
                goto LABEL_70;
            }
          }
          if ( v30 < v9 )
          {
            v42 = &v6[v30];
            v43 = v9 - (__int64)v30;
            do
            {
              v44 = (unsigned __int8)*v42;
              if ( v44 != 13 && v44 != 10 )
              {
                v27 = 0;
                v29 = v30;
                v28 = v30;
                goto LABEL_40;
              }
              ++v30;
              --v43;
              ++v42;
            }
            while ( v43 );
            v27 = 0;
            v30 = v9;
            v29 = v9;
            v28 = v9;
            goto LABEL_40;
          }
          v27 = 0;
          v29 = v30;
        }
        v28 = v30;
LABEL_40:
        ++v30;
      }
      while ( v30 < v26 );
    }
    v17 = v9 - v10;
    memcpy(src, &v6[v10], v9 - v10);
    v7 = v72;
LABEL_80:
    v45 = v78;
    if ( v76 )
    {
      if ( v17 >= 1 )
      {
        v12 = v80;
        LODWORD(v46) = 0;
        v84 = v78;
        v73 = s;
        while ( 2 )
        {
          v81 = v12;
          do
          {
            if ( v8 )
            {
              v53 = v7;
              goto LABEL_132;
            }
            v54 = v85;
            if ( !v85 )
            {
              v46 = src[(int)v46] == 13 ? (int)v46 + 1LL : (int)v46;
              if ( (int)v46 < v17 && src[v46] == 10 )
                LODWORD(v46) = v46 + 1;
            }
            if ( (int)v46 < v17 )
            {
              v54 = v17 + v85 - v46;
              v55 = *_ctype_b_loc();
              v56 = 0LL;
              while ( (unsigned __int64)v85 + v56 <= 0x1E )
              {
                v57 = (unsigned __int8)src[(int)v46 + v56];
                if ( (v55[v57] & 0x1000) == 0 )
                  break;
                v58 = &v87[v85 + 1 + v56++];
                *(v58 - 1) = v57;
                *v58 = 0;
                if ( (unsigned int)v17 - (__int64)(int)v46 == v56 )
                {
                  LODWORD(v46) = v17;
                  goto LABEL_115;
                }
              }
              LODWORD(v46) = v46 + v56;
              v54 = v85 + v56;
LABEL_115:
              v12 = v81;
            }
            v46 = (int)v46;
            while ( v46 < (unsigned int)v17 )
            {
              v59 = (unsigned __int8)src[v46++];
              if ( v59 == 13 || v59 == 10 )
              {
                if ( v59 != 13 )
                  LODWORD(v46) = v46 - 1;
                break;
              }
            }
            v85 = v54;
            if ( v17 <= (int)v46 )
            {
              v45 = v84;
              v8 = 0;
              goto LABEL_142;
            }
            v8 = 0;
          }
          while ( src[(int)v46] != 10 );
          if ( v85 )
          {
            v8 = 0;
            v60 = v85;
            v61 = v87;
            do
            {
              v62 = (unsigned __int8)*v61++;
              v63 = v62 - 0x30;
              v64 = (v62 | 0x20) - 0x57;
              if ( (unsigned int)(v62 - 0x30) < 0xA )
                v64 = v63;
              --v60;
              v8 = v64 + 16 * v8;
            }
            while ( v60 );
            v87[0] = 0;
            if ( v8 )
            {
              LODWORD(v12) = v81;
              v53 = v7;
              LODWORD(v46) = v46 + 1;
              v85 = 0;
LABEL_132:
              if ( v8 >= v17 - (int)v46 )
                v65 = v17 - v46;
              else
                v65 = v8;
              v66 = v65 + v84;
              v79 = v65 + v84;
              if ( v65 + v84 > (unsigned int)v12 )
              {
                if ( (int)v77 >= v66 )
                  v67 = (unsigned int)v77;
                else
                  v67 = (unsigned int)v66;
                v81 = v67;
                v68 = (char *)realloc(v53, v67);
                if ( !v68 )
                {
                  v71 = v53;
                  goto LABEL_155;
                }
                v53 = v68;
              }
              memcpy(&v53[v84], &src[(int)v46], v65);
              LODWORD(v46) = v65 + v46;
              v8 -= v65;
              v45 = v65 + v84;
              v7 = v53;
              s = v73;
              v12 = v81;
              v84 = v79;
              if ( (int)v46 >= v17 )
                goto LABEL_142;
              continue;
            }
          }
          else
          {
            v87[0] = 0;
          }
          break;
        }
        v78 = v84;
end_of_stream:
        free(v6);
        *v75 = v78;
        if ( !v78 )
        {
          free(v7);
          return 0LL;
        }
        return v7;
      }
      goto LABEL_96;
    }
    if ( v17 + v78 <= (int)v77 || (int)v77 <= 0 )
      v48 = v17;
    else
      v48 = v77 - v78;
    v49 = v78;
    v50 = v48 + v78;
    if ( v48 + v78 <= (unsigned int)v80 )
      goto LABEL_95;
    v51 = (int)v77 >= v50 ? (unsigned int)v77 : (unsigned int)v50;
    v80 = v51;
    v52 = (char *)realloc(v7, v51);
    if ( !v52 )
      break;
    v49 = v78;
    v7 = v52;
LABEL_95:
    memcpy(&v7[v49], src, v48);
    v45 = v48 + v78;
LABEL_96:
    v12 = v80;
LABEL_142:
    v78 = v45;
    v11 = v77;
    if ( (int)v77 >= 1 && v78 >= (int)v77 )
      goto end_of_stream;
  }
  v71 = v7;
LABEL_155:
  free(v71);
  v69 = v6;
LABEL_148:
  free(v69);
  v7 = 0LL;
  *v75 = -1;
  return v7;
}
