void *__cdecl getHTTPResponse(int s, int *size, int *status_code)
{
  int *v3; // ebp
  int v4; // eax
  int v5; // esi
  char v6; // dl
  unsigned int v7; // edi
  int v8; // ebx
  int v9; // esi
  int v10; // ecx
  char *v11; // edi
  int v12; // eax
  char v13; // dl
  char v14; // dl
  char v15; // al
  const char *v16; // ebp
  const char *v17; // esi
  int *v18; // edi
  bool v19; // zf
  int v20; // eax
  char v21; // al
  int v22; // esi
  int v23; // edi
  signed int v24; // esi
  const unsigned __int16 *v25; // ebp
  unsigned int v26; // eax
  unsigned int v27; // ebx
  char *v28; // edi
  char v29; // cl
  char v30; // dl
  size_t v31; // ebp
  char *v32; // ecx
  char *v33; // edi
  int v34; // edx
  char v35; // al
  int *v36; // ebp
  size_t v37; // edi
  size_t v38; // eax
  char *v39; // eax
  size_t v40; // ebp
  size_t v41; // edi
  char *v42; // eax
  char *v43; // esi
  _DWORD *v44; // ebp
  size_t v46; // eax
  int v47; // eax
  size_t v48; // esi
  char *v49; // eax
  char *v50; // edi
  unsigned int content_buf_used; // [esp+0h] [ebp-89Ch]
  signed int header_buf_used_0; // [esp+4h] [ebp-898h]
  int header_buf_used_0a; // [esp+4h] [ebp-898h]
  unsigned int chunksize; // [esp+Ch] [ebp-890h]
  char *content_buf; // [esp+14h] [ebp-888h]
  unsigned int content_buf_len; // [esp+18h] [ebp-884h]
  int endofheaders; // [esp+1Ch] [ebp-880h]
  int content_length; // [esp+20h] [ebp-87Ch]
  unsigned int header_buf_used; // [esp+24h] [ebp-878h]
  unsigned int chunksize_buf_index; // [esp+28h] [ebp-874h]
  char *header_buf; // [esp+2Ch] [ebp-870h]
  int v62; // [esp+30h] [ebp-86Ch]
  int valuestart; // [esp+34h] [ebp-868h]
  unsigned int header_buf_len; // [esp+38h] [ebp-864h]
  int chunked; // [esp+3Ch] [ebp-860h]
  int v66; // [esp+40h] [ebp-85Ch]
  int i; // [esp+44h] [ebp-858h]
  int *v68; // [esp+48h] [ebp-854h]
  int *v69; // [esp+4Ch] [ebp-850h]
  char chunksize_buf[32]; // [esp+5Ch] [ebp-840h] BYREF
  char buf[2048]; // [esp+7Ch] [ebp-820h] BYREF
  unsigned int v73; // [esp+87Ch] [ebp-20h]

  v68 = status_code;
  v73 = __readgsdword(0x14u);
  if ( status_code )
    *status_code = -1;
  header_buf = (char *)malloc(0x800u);
  if ( !header_buf )
  {
    *size = -1;
    return 0;
  }
  content_buf = (char *)malloc(0x800u);
  if ( !content_buf )
  {
    free(header_buf);
    *size = -1;
    return content_buf;
  }
  chunksize_buf[0] = 0;
  chunksize_buf_index = 0;
  content_buf_used = 0;
  content_buf_len = 2048;
  header_buf_used = 0;
  header_buf_len = 2048;
  chunksize = 0;
  content_length = -1;
  chunked = 0;
  endofheaders = 0;
  v69 = size;
  do
  {
    while ( 1 )
    {
      while ( 1 )
      {
        v47 = receivedata(s, buf, 2048, 5000, 0);
        v23 = v47;
        if ( v47 <= 0 )
        {
          v44 = v69;
          goto end_of_stream;
        }
        if ( endofheaders )
        {
          if ( chunked )
            goto LABEL_77;
LABEL_138:
          if ( content_length <= 0 )
          {
            v40 = v23;
            v41 = content_buf_used + v23;
            if ( content_buf_len < v41 )
            {
              if ( content_length )
              {
                content_buf_len = v41;
                v42 = (char *)realloc(content_buf, v41);
                goto LABEL_145;
              }
LABEL_142:
              v46 = content_length;
              if ( content_length < v41 )
                v46 = v41;
              content_buf_len = v46;
              v42 = (char *)realloc(content_buf, v46);
LABEL_145:
              v43 = v42;
              if ( !v42 )
              {
LABEL_108:
                v36 = v69;
                free(content_buf);
                free(header_buf);
                *v36 = -1;
                return 0;
              }
              goto LABEL_146;
            }
            v43 = content_buf;
          }
          else
          {
            if ( content_length < v23 + content_buf_used )
              v23 = content_length - content_buf_used;
            v40 = v23;
            v41 = content_buf_used + v23;
            if ( content_buf_len < v41 )
              goto LABEL_142;
            v43 = content_buf;
          }
LABEL_146:
          memcpy(&v43[content_buf_used], buf, v40);
          content_buf_used = v41;
          content_buf = v43;
          goto LABEL_147;
        }
        v48 = v47;
        header_buf_used_0a = v47 + header_buf_used;
        if ( header_buf_len < v47 + header_buf_used )
        {
          v49 = (char *)realloc(header_buf, v47 + header_buf_used);
          if ( !v49 )
          {
            v3 = v69;
            free(header_buf);
            free(content_buf);
            *v3 = -1;
            return 0;
          }
          header_buf_len = header_buf_used_0a;
          header_buf = v49;
        }
        v50 = header_buf;
        memcpy(&header_buf[header_buf_used], buf, v48);
        if ( header_buf_used_0a > 1 )
          break;
        header_buf_used = header_buf_used_0a;
      }
      v4 = 0;
      do
      {
        v6 = v50[v4];
        if ( v6 == 13 )
        {
          if ( v50[v4 + 1] == 10 )
          {
            if ( v4 + 2 >= header_buf_used_0a )
            {
              v4 += 2;
              v5 = 0;
            }
            else if ( v50[v4 + 2] == 13 )
            {
              if ( v4 + 3 >= header_buf_used_0a )
              {
                v4 += 3;
                v5 = 0;
              }
              else if ( v50[v4 + 3] == 10 )
              {
                v5 = v4 + 4;
                v4 += 3;
              }
              else
              {
                v4 += 3;
                v5 = 0;
              }
            }
            else
            {
              v4 += 2;
              v5 = 0;
            }
          }
          else
          {
            ++v4;
            v5 = 0;
          }
        }
        else
        {
          v5 = 0;
          if ( v6 == 10 )
          {
            if ( v50[v4 + 1] == 10 )
              v5 = v4 + 2;
            ++v4;
          }
        }
        ++v4;
      }
      while ( !v5 && v4 < header_buf_used_0a - 1 );
      v62 = v5;
      if ( v5 )
        break;
      header_buf_used = header_buf_used_0a;
      endofheaders = 0;
    }
    v7 = v5 - 1;
    if ( v5 - 1 > 0 )
    {
      valuestart = 0;
      v8 = 0;
      v9 = 0;
      v66 = 0;
      v10 = 0;
      header_buf_used = v7;
      v11 = header_buf;
      do
      {
        if ( v8 <= 0 || v8 < v10 )
        {
          v14 = v11[v9];
          if ( v14 == 13 || v14 == 10 )
          {
            if ( v8 || !v68 )
            {
              if ( v8 < v10 && v10 < valuestart )
              {
                i = v10 - v8;
                if ( !strncasecmp(&v11[v8], "content-length", v10 - v8) )
                {
                  content_length = strtol(&v11[valuestart], 0, 10);
                }
                else if ( !strncasecmp(&v11[v8], "transfer-encoding", i) )
                {
                  v19 = strncasecmp(&v11[valuestart], "chunked", 7u) == 0;
                  v20 = 1;
                  if ( !v19 )
                    v20 = chunked;
                  chunked = v20;
                }
              }
            }
            else if ( v9 > 0 )
            {
              v16 = v11 + 1;
              valuestart = (int)v11;
              i = v9;
              v17 = &v11[v9 + 1];
              v18 = v68;
              do
              {
                if ( *(v16 - 1) == 32 )
                {
                  if ( *v18 >= 0 )
                  {
                    v11 = (char *)valuestart;
                    v9 = i;
                    goto LABEL_47;
                  }
                  *v18 = strtol(v16, 0, 10);
                }
                ++v16;
              }
              while ( v16 != v17 );
              v11 = (char *)valuestart;
              v9 = i;
            }
LABEL_47:
            if ( header_buf_used_0a <= v9 )
            {
              valuestart = 0;
              v10 = v9;
              v8 = v9;
            }
            else
            {
              do
              {
                v21 = v11[v9];
                if ( v21 != 13 && v21 != 10 )
                {
                  valuestart = v66;
                  v10 = v9;
                  v8 = v9;
                  goto LABEL_41;
                }
                ++v9;
              }
              while ( v9 != header_buf_used_0a );
              valuestart = v66;
              v9 = header_buf_used_0a;
              v10 = header_buf_used_0a;
              v8 = header_buf_used_0a;
            }
          }
        }
        else
        {
          v15 = v11[v9];
          if ( v15 == 58 )
          {
            if ( (int)header_buf_used <= v9 )
            {
              v12 = v9;
            }
            else
            {
              v12 = v9;
              while ( 1 )
              {
                v13 = v11[v12 + 1];
                if ( v13 != 32 && v13 != 9 )
                  break;
                if ( ++v12 == v62 - 1 )
                {
                  v12 = v62 - 1;
                  break;
                }
              }
            }
            valuestart = v12 + 1;
            v10 = v9;
            v9 = v12;
            goto LABEL_41;
          }
          if ( v15 == 10 || v15 == 13 )
            goto LABEL_47;
        }
LABEL_41:
        ++v9;
      }
      while ( v9 < (int)header_buf_used );
    }
    v22 = header_buf_used_0a - v62;
    v23 = header_buf_used_0a - v62;
    memcpy(buf, &header_buf[v62], header_buf_used_0a - v62);
    header_buf_used = header_buf_used_0a;
    endofheaders = v62;
    if ( !chunked )
      goto LABEL_138;
    if ( v22 > 0 )
    {
      header_buf_used = header_buf_used_0a;
LABEL_77:
      v24 = 0;
      header_buf_used_0 = v23;
LABEL_111:
      if ( chunksize )
      {
LABEL_112:
        v37 = header_buf_used_0 - v24;
        if ( header_buf_used_0 - v24 > chunksize )
          v37 = chunksize;
        v31 = v37 + content_buf_used;
        if ( content_buf_len < v37 + content_buf_used )
        {
          v38 = content_length;
          if ( content_length < v31 )
            v38 = v37 + content_buf_used;
          if ( content_length < 0 )
            v38 = v37 + content_buf_used;
          content_buf_len = v38;
          v39 = (char *)realloc(content_buf, v38);
          if ( !v39 )
            goto LABEL_108;
          content_buf = v39;
        }
        memcpy(&content_buf[content_buf_used], &buf[v24], v37);
        v24 += v37;
        chunksize -= v37;
        if ( v24 >= header_buf_used_0 )
        {
          content_buf_used += v37;
          continue;
        }
        goto LABEL_110;
      }
      if ( chunksize_buf_index )
      {
LABEL_84:
        if ( v24 >= header_buf_used_0 )
          goto LABEL_135;
      }
      else
      {
        if ( buf[v24] == 13 )
          ++v24;
        if ( v24 >= header_buf_used_0 )
        {
LABEL_135:
          v26 = chunksize_buf_index;
LABEL_94:
          chunksize_buf_index = v26;
          continue;
        }
        if ( buf[v24] == 10 )
        {
          ++v24;
          goto LABEL_84;
        }
      }
      v25 = *_ctype_b_loc();
      v26 = chunksize_buf_index;
      v27 = chunksize_buf_index + header_buf_used_0 - v24;
      v28 = &buf[v24 - chunksize_buf_index];
      while ( 1 )
      {
        v29 = v28[v26];
        if ( (v25[v29] & 0x1000) == 0 || v26 > 0x1E )
          break;
        chunksize_buf[v26++] = v29;
        chunksize_buf[v26] = 0;
        ++v24;
        if ( v26 == v27 )
        {
          v26 = v27;
          break;
        }
      }
      if ( v24 >= header_buf_used_0 )
        goto LABEL_94;
      while ( 1 )
      {
        v30 = buf[v24];
        if ( v30 == 10 || v30 == 13 )
          break;
        if ( ++v24 == header_buf_used_0 )
          goto LABEL_94;
      }
      if ( header_buf_used_0 <= v24 )
        goto LABEL_94;
      if ( buf[v24] == 13 && ++v24 >= header_buf_used_0 )
        goto LABEL_94;
      if ( buf[v24] == 10 )
      {
        if ( !v26 )
        {
          v44 = v69;
          goto end_of_stream;
        }
        v32 = chunksize_buf;
        v33 = &chunksize_buf[v26];
        v34 = 0;
        do
        {
          v35 = *v32;
          if ( (unsigned __int8)(*v32 - 48) > 9u )
            v34 = 16 * v34 + (v35 | 0x20) - 87;
          else
            v34 = 16 * v34 + v35 - 48;
          ++v32;
        }
        while ( v32 != v33 );
        chunksize_buf[0] = 0;
        ++v24;
        if ( !v34 )
        {
          v44 = v69;
          goto end_of_stream;
        }
        chunksize_buf_index = 0;
        chunksize = v34;
        goto LABEL_112;
      }
      chunksize_buf_index = v26;
      v31 = content_buf_used;
LABEL_110:
      content_buf_used = v31;
      goto LABEL_111;
    }
    header_buf_used = header_buf_used_0a;
    endofheaders = v62;
LABEL_147:
    ;
  }
  while ( content_length <= 0 || content_buf_used < content_length );
  v44 = v69;
end_of_stream:
  free(header_buf);
  *v44 = content_buf_used;
  if ( !content_buf_used )
  {
    free(content_buf);
    return 0;
  }
  return content_buf;
}
