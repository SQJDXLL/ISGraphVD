char *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v4; // $v0
  char *v5; // $s5
  unsigned int v6; // $s3
  char *v7; // $v0
  int v8; // $v0
  unsigned int v9; // $a3
  int v10; // $s0
  unsigned int v11; // $a2
  int v12; // $s4
  int v13; // $v0
  signed int v14; // $fp
  int v15; // $s7
  char *v16; // $s1
  int v17; // $a0
  int v18; // $v1
  int v19; // $v1
  void *v20; // $a3
  int v21; // $s1
  int v22; // $v1
  int v23; // $v0
  int v24; // $fp
  int *v25; // $a1
  int v26; // $a0
  int v27; // $v1
  int v28; // $a0
  const char *v29; // $s1
  int v30; // $s7
  int v31; // $v0
  int v32; // $v0
  int v33; // $at
  int v34; // $v0
  signed int v35; // $s1
  char *v36; // $a0
  unsigned int v37; // $t0
  const unsigned __int16 **v38; // $v0
  const unsigned __int16 *v39; // $v0
  int v40; // $v1
  char *v41; // $at
  signed int v42; // $v1
  char *v43; // $v0
  signed int v44; // $t1
  int v45; // $a1
  int v46; // $at
  int v47; // $v1
  int v48; // $at
  unsigned int v49; // $v0
  size_t v50; // $a1
  char *v51; // $v0
  unsigned int v52; // $a1
  signed int v53; // $v1
  size_t v54; // $a1
  char *v55; // $v0
  char *v56; // $s1
  char *v58; // [sp+1Ch] [-86Ch]
  size_t n; // [sp+20h] [-868h]
  size_t v60; // [sp+24h] [-864h]
  unsigned int v61; // [sp+34h] [-854h]
  int *v62; // [sp+38h] [-850h]
  int v63; // [sp+3Ch] [-84Ch]
  unsigned int v64; // [sp+40h] [-848h]
  unsigned int v65; // [sp+40h] [-848h]
  int v66; // [sp+44h] [-844h]
  char *v67; // [sp+48h] [-840h]
  unsigned int v68; // [sp+4Ch] [-83Ch]
  unsigned int v69; // [sp+50h] [-838h]
  unsigned int v70; // [sp+50h] [-838h]
  unsigned int v71; // [sp+50h] [-838h]
  void *ptr; // [sp+54h] [-834h]
  int v73; // [sp+58h] [-830h]
  unsigned int v74; // [sp+58h] [-830h]
  char v77[32]; // [sp+68h] [-820h] BYREF
  char v78[2048]; // [sp+88h] [-800h] BYREF

  if ( status_code )
    *status_code = -1;
  v4 = (char *)malloc(0x800u);
  if ( v4 )
  {
    v5 = v4;
    v6 = 2048;
    v7 = (char *)malloc(0x800u);
    if ( v7 )
    {
      v67 = v7;
      v62 = size;
      v63 = 0;
      v77[0] = 0;
      v8 = -1;
      v9 = 0;
      v10 = 0;
      v61 = 2048;
      v68 = 0;
      v11 = 0;
      v12 = 0;
      do
      {
        v64 = v9;
        v69 = v11;
        v66 = v8;
        v13 = receivedata(s, v78, 2048, 5000);
        if ( v13 <= 0 )
          break;
        v14 = v13;
        v15 = v10;
        v16 = v5;
        while ( 1 )
        {
          if ( v12 )
          {
            v10 = v15;
            v11 = v69;
            v9 = v64;
            v5 = v16;
            goto LABEL_80;
          }
          v10 = v14 + v15;
          if ( v6 >= v14 + v15 )
          {
            v5 = v16;
          }
          else
          {
            v5 = (char *)realloc(v16, v14 + v15);
            v6 = v14 + v15;
            if ( !v5 )
            {
              free(v16);
              free(v67);
              *v62 = -1;
              return 0;
            }
          }
          memcpy(&v5[v15], v78, v14);
          if ( v10 >= 2 )
          {
            v17 = 0;
            do
            {
              v18 = (unsigned __int8)v5[v17];
              if ( v18 == 10 )
              {
                v19 = v17 + 1;
                v12 = v17 + 2;
                if ( v5[v17 + 1] != 0xA )
                  v12 = 0;
              }
              else if ( v18 == 13 )
              {
                v19 = v17 + 1;
                v12 = 0;
                if ( v5[v17 + 1] == 10 )
                {
                  v19 = v17 + 2;
                  if ( v17 + 2 >= v10 )
                  {
                    v12 = 0;
                  }
                  else
                  {
                    v12 = 0;
                    if ( v5[v19] == 13 )
                    {
                      v19 = v17 + 3;
                      if ( v17 + 3 >= v10 )
                      {
                        v12 = 0;
                      }
                      else
                      {
                        v12 = v17 + 4;
                        if ( v5[v19] != 0xA )
                          v12 = 0;
                      }
                    }
                  }
                }
              }
              else
              {
                v19 = v17;
                v12 = 0;
              }
              v17 = v19 + 1;
            }
            while ( v19 + 1 < v10 - 1 && !v12 );
            if ( v12 )
              break;
          }
          v14 = receivedata(s, v78, 2048, 5000);
          v12 = 0;
          v15 = v10;
          v16 = v5;
          if ( v14 <= 0 )
            goto end_of_stream;
        }
        if ( v12 >= 2 )
        {
          v73 = v12 - 1;
          v20 = (void *)(v14 + v15);
          v21 = 0;
          v22 = 0;
          v23 = 0;
          v24 = 0;
          v25 = status_code;
          ptr = v20;
          do
          {
            v26 = (unsigned __int8)v5[v24];
            if ( v26 == 58 && v23 > 0 && v23 >= v22 )
            {
              v21 = v24 + 1;
              if ( v24 >= v73 )
              {
                v28 = v24;
                v22 = v24;
              }
              else
              {
                v21 = v24 + 1;
                while ( 1 )
                {
                  v27 = (unsigned __int8)v5[v21];
                  if ( v27 != 32 && v27 != 9 )
                    break;
                  if ( v12 == ++v21 )
                  {
                    v28 = v12 - 1;
                    v22 = v24;
                    v21 = v12;
                    goto LABEL_78;
                  }
                }
                v28 = v21 - 1;
                v22 = v24;
              }
            }
            else if ( v26 == 13 || v26 == 10 )
            {
              if ( !v25 || v23 )
              {
                if ( v23 < v22 && v22 < v21 )
                {
                  v58 = &v5[v23];
                  n = v22 - v23;
                  if ( !strncasecmp(&v5[v23], "content-length", v22 - v23) )
                  {
                    v66 = atoi(&v5[v21]);
                    v25 = status_code;
                    v20 = ptr;
                  }
                  else if ( !strncasecmp(v58, "transfer-encoding", n) )
                  {
                    v32 = strncasecmp(&v5[v21], "chunked", 7u);
                    v33 = v63;
                    if ( !v32 )
                      v33 = 1;
                    v63 = v33;
                    v25 = status_code;
                    v20 = ptr;
                  }
                  else
                  {
                    v25 = status_code;
                    v20 = ptr;
                  }
                }
              }
              else if ( v24 > 0 )
              {
                v29 = v5 + 1;
                v30 = v24;
                do
                {
                  if ( *(v29 - 1) == 32 )
                  {
                    if ( *v25 >= 0 )
                      break;
                    v31 = atoi(v29);
                    v20 = ptr;
                    v25 = status_code;
                    *status_code = v31;
                  }
                  --v30;
                  ++v29;
                }
                while ( v30 );
              }
              v21 = 0;
              if ( v24 >= v10 )
              {
                v28 = v24;
                v23 = v24;
                v22 = v24;
              }
              else
              {
                while ( 1 )
                {
                  v34 = (unsigned __int8)v5[v24];
                  if ( v34 != 13 && v34 != 10 )
                    break;
                  if ( v20 == (void *)++v24 )
                  {
                    v28 = v10;
                    v23 = v10;
                    v22 = v10;
                    goto LABEL_78;
                  }
                }
                v28 = v24;
                v23 = v24;
                v22 = v24;
              }
            }
            else
            {
              v28 = v24;
            }
LABEL_78:
            v24 = v28 + 1;
          }
          while ( v28 + 1 < v73 );
        }
        v14 = v10 - v12;
        memcpy(v78, &v5[v12], v10 - v12);
        v11 = v69;
        v9 = v64;
LABEL_80:
        if ( v63 )
        {
          if ( v14 > 0 )
          {
            v35 = 0;
            while ( 1 )
            {
              v36 = v67;
              v37 = v68;
              v74 = v68;
LABEL_84:
              if ( !v9 )
                break;
LABEL_113:
              v71 = v11;
              v49 = v14 - v35;
              v65 = v9;
              if ( v9 < v14 - v35 )
                v49 = v9;
              v60 = v49;
              v68 = v49 + v37;
              if ( v61 >= v49 + v37 )
              {
                v51 = v36;
              }
              else
              {
                v50 = v66;
                if ( v66 < v49 + v37 )
                  v50 = v49 + v37;
                if ( v66 < 0 )
                  v50 = v49 + v37;
                v61 = v50;
                v51 = (char *)realloc(v36, v50);
                v37 = v74;
                if ( !v51 )
                  goto LABEL_136;
              }
              v67 = v51;
              memcpy(&v51[v37], &v78[v35], v60);
              v9 = v65 - v60;
              v35 += v60;
              v11 = v71;
              if ( v35 >= v14 )
                goto LABEL_139;
            }
            v70 = v11;
            if ( !v11 )
            {
              v35 += v78[v35] == 0xD;
              if ( v35 < v14 )
                v35 += v78[v35] == 0xA;
            }
            if ( v35 >= v14 )
            {
              v42 = v35;
            }
            else
            {
              v38 = _ctype_b_loc();
              v36 = v67;
              v37 = v68;
              v39 = *v38;
              v11 = v70;
              while ( 1 )
              {
                if ( v11 >= 0x1F )
                {
                  v42 = v35;
                  goto LABEL_97;
                }
                v40 = v78[v35];
                if ( (v39[v40] & 0x1000) == 0 )
                  break;
                v41 = &v77[v11];
                v41[1] = 0;
                *v41 = v40;
                ++v35;
                ++v11;
                if ( v14 == v35 )
                {
                  v42 = v14;
                  goto LABEL_97;
                }
              }
              v42 = v35;
            }
LABEL_97:
            v43 = v77;
            v44 = v14;
            if ( v14 < v42 )
              v44 = v42;
            do
            {
              v9 = 0;
              if ( v44 == v42 )
              {
                v67 = v36;
                v68 = v37;
                goto LABEL_139;
              }
              v45 = (unsigned __int8)v78[v42++];
            }
            while ( v45 != 13 && v45 != 10 );
            v35 = v42 - 1;
            if ( v45 == 0xD )
              v35 = v42;
            if ( v35 < v14 )
            {
              v9 = 0;
              if ( v78[v35] != 10 )
                goto LABEL_84;
              if ( v11 )
              {
                v9 = 0;
                do
                {
                  v46 = *v43;
                  v47 = (v46 | 0x20) - 87;
                  v48 = v46 - 48;
                  if ( (unsigned __int8)v48 < 0xAu )
                    v47 = v48;
                  v9 = v47 + 16 * v9;
                  --v11;
                  ++v43;
                }
                while ( v11 );
                v77[0] = 0;
                if ( v9 )
                {
                  v11 = 0;
                  ++v35;
                  goto LABEL_113;
                }
                v67 = v36;
                v68 = v37;
              }
              else
              {
                v77[0] = 0;
                v67 = v36;
                v68 = v37;
              }
              break;
            }
            v67 = v36;
            v68 = v37;
          }
        }
        else
        {
          v52 = v68;
          v53 = v14;
          if ( v66 < v14 + v68 )
            v53 = v66 - v68;
          if ( v66 >= 1 )
            v14 = v53;
          if ( v61 >= v14 + v68 )
          {
            v56 = v67;
          }
          else
          {
            v54 = v66;
            if ( v66 < v14 + v68 )
              v54 = v14 + v68;
            if ( v66 < 0 )
              v54 = v14 + v68;
            v61 = v54;
            v55 = (char *)realloc(v67, v54);
            v52 = v68;
            v56 = v55;
            if ( !v55 )
            {
LABEL_136:
              free(v67);
              free(v5);
              *v62 = -1;
              return 0;
            }
          }
          memcpy(&v56[v52], v78, v14);
          v67 = v56;
          v68 += v14;
          v11 = v69;
          v9 = v64;
        }
LABEL_139:
        v8 = v66;
      }
      while ( v66 <= 0 || v68 < v66 );
end_of_stream:
      free(v5);
      *v62 = v68;
      if ( v68 )
      {
        return v67;
      }
      else
      {
        free(v67);
        return 0;
      }
    }
    else
    {
      free(v5);
      *size = -1;
      return 0;
    }
  }
  else
  {
    *size = -1;
    return 0;
  }
}
