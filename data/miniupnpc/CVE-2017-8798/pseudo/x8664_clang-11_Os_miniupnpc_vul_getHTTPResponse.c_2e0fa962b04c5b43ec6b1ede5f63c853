void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // rax
  char *v4; // r14
  char *v5; // rax
  int v6; // eax
  int v7; // esi
  size_t v8; // rbp
  unsigned int v9; // r9d
  int v10; // r15d
  int v11; // eax
  int v12; // r12d
  unsigned int v13; // r13d
  char *v14; // rbx
  int v15; // ebp
  int v16; // ecx
  char v17; // bl
  __int64 v18; // rsi
  __int64 v19; // rdx
  int v20; // ecx
  int v21; // edi
  int v22; // r9d
  int v23; // ecx
  int v24; // eax
  int v25; // r13d
  int *v26; // rsi
  int v27; // ebx
  char v28; // dl
  int v29; // r8d
  char *v30; // r12
  __int64 v31; // rdx
  __int64 v32; // rbp
  const char *v33; // rbx
  int v34; // edx
  const char *v35; // rbx
  int v36; // eax
  int v37; // ecx
  __int64 v38; // rcx
  char v39; // bl
  __int64 v40; // r10
  __int64 v41; // r13
  unsigned int v42; // ebx
  const unsigned __int16 **v43; // rax
  const unsigned __int16 *v44; // r8
  __int64 v45; // rax
  char *v46; // rsi
  __int64 v47; // rdx
  __int64 v48; // rbx
  __int64 v49; // rax
  bool v50; // cc
  char v51; // cl
  __int64 v52; // rcx
  char *v53; // rdi
  int v54; // edx
  int v55; // esi
  unsigned __int8 v56; // bl
  int v57; // edx
  int v58; // ebp
  int v59; // esi
  unsigned int v60; // ebx
  int v61; // ecx
  char *v62; // rax
  unsigned int v63; // edx
  int v64; // ebp
  int v65; // r12d
  size_t v66; // rsi
  char *v67; // rax
  char *v68; // rbx
  char *v70; // rdi
  int ptr; // [rsp+8h] [rbp-8E0h]
  char *ptra; // [rsp+8h] [rbp-8E0h]
  char *v73; // [rsp+10h] [rbp-8D8h]
  int v74; // [rsp+20h] [rbp-8C8h]
  unsigned int v75; // [rsp+24h] [rbp-8C4h]
  unsigned int v76; // [rsp+24h] [rbp-8C4h]
  int v77; // [rsp+28h] [rbp-8C0h]
  size_t v78; // [rsp+30h] [rbp-8B8h]
  size_t v79; // [rsp+30h] [rbp-8B8h]
  int v80; // [rsp+3Ch] [rbp-8ACh]
  unsigned int nptr; // [rsp+40h] [rbp-8A8h]
  int v82; // [rsp+4Ch] [rbp-89Ch]
  int v83; // [rsp+50h] [rbp-898h]
  int v84; // [rsp+50h] [rbp-898h]
  int v86; // [rsp+64h] [rbp-884h]
  unsigned int v88; // [rsp+6Ch] [rbp-87Ch]
  size_t v90; // [rsp+78h] [rbp-870h]
  __int64 v91; // [rsp+80h] [rbp-868h]
  char v92[32]; // [rsp+90h] [rbp-858h] BYREF
  char src[2104]; // [rsp+B0h] [rbp-838h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800uLL);
  if ( !v3 )
    goto LABEL_143;
  v4 = v3;
  v5 = (char *)malloc(0x800uLL);
  if ( !v5 )
  {
    free(v4);
LABEL_143:
    *size = -1;
    return 0LL;
  }
  v73 = v5;
  v92[0] = 0;
  v88 = 2048;
  v6 = -1;
  v82 = 0;
  v7 = 0;
  v83 = 0;
  v8 = 2048LL;
  v77 = 0;
  v9 = 0;
  v10 = 0;
  do
  {
    v74 = v7;
    v75 = v9;
    v80 = v6;
    v11 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
    if ( v11 <= 0 )
      break;
    v12 = v11;
    v78 = v8;
    v13 = v83;
    v14 = v4;
LABEL_8:
    if ( v10 )
    {
      v15 = v13;
      v4 = v14;
      goto LABEL_83;
    }
    v15 = v12 + v13;
    if ( v12 + v13 <= v88 )
    {
      v4 = v14;
    }
    else
    {
      v4 = (char *)realloc(v14, (unsigned int)v15);
      v88 = v12 + v13;
      if ( !v4 )
      {
        free(v14);
        v70 = v73;
        goto LABEL_145;
      }
    }
    memcpy(&v4[v13], src, (unsigned int)v12);
    if ( v15 < 2 )
      goto LABEL_34;
    v16 = 0;
    do
    {
      v17 = v4[v16];
      if ( v17 == 10 )
      {
        LODWORD(v18) = v16 + 1;
        v10 = v16 + 2;
        if ( v4[v16 + 1] != 10 )
          v10 = 0;
        goto LABEL_31;
      }
      if ( v17 != 13 )
      {
        LODWORD(v18) = v16;
        goto LABEL_30;
      }
      if ( v4[v16 + 1] != 10 )
      {
        LODWORD(v19) = v16 + 1;
LABEL_29:
        LODWORD(v18) = v19;
LABEL_30:
        v10 = 0;
        goto LABEL_31;
      }
      v18 = v16 + 2LL;
      if ( v16 + 2 >= v15 )
        goto LABEL_30;
      v10 = 0;
      if ( v4[v18] == 13 )
      {
        v19 = v16 + 3LL;
        if ( (int)v19 >= v15 )
          goto LABEL_29;
        v20 = v16 + 4;
        if ( v4[v19] != 10 )
          v20 = 0;
        LODWORD(v18) = v19;
        v10 = v20;
      }
LABEL_31:
      v16 = v18 + 1;
    }
    while ( (int)v18 + 1 < v15 - 1 && !v10 );
    if ( !v10 )
    {
LABEL_34:
      v10 = 0;
      v12 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
      v13 = v15;
      v14 = v4;
      if ( v12 <= 0 )
        break;
      goto LABEL_8;
    }
    if ( v10 >= 2 )
    {
      v21 = v10 - 1;
      v91 = v15;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = status_code;
      v84 = v15;
      while ( 1 )
      {
        v27 = v25;
        v28 = v4[v25];
        if ( v28 == 58 && v24 > 0 && v23 <= v24 )
        {
          if ( v25 < v21 )
          {
            v29 = v25;
            v30 = &v4[v25 + 1];
            v31 = 0LL;
            while ( *v30 == 32 || *v30 == 9 )
            {
              --v31;
              ++v30;
              if ( v25 - (__int64)(v10 - 1) == v31 )
              {
                v21 = v10 - 1;
                v25 = v10 - 1;
                v23 = v29;
                v22 = v10;
                goto LABEL_81;
              }
            }
            v25 -= v31;
            v22 = v25 + 1;
            v23 = v29;
LABEL_80:
            v21 = v10 - 1;
            goto LABEL_81;
          }
          v22 = v25 + 1;
          goto LABEL_78;
        }
        if ( v28 != 13 && v28 != 10 )
          goto LABEL_81;
        if ( !v26 || v24 )
          break;
        if ( v25 > 0 )
        {
          ptr = v25;
          v32 = (unsigned int)v25;
          v33 = v4 + 1;
          do
          {
            if ( *(v33 - 1) == 32 )
            {
              if ( *v26 >= 0 )
                break;
              v26 = status_code;
              *status_code = atoi(v33);
            }
            ++v33;
            --v32;
          }
          while ( v32 );
          v15 = v84;
LABEL_70:
          v21 = v10 - 1;
          v27 = ptr;
        }
LABEL_71:
        if ( v25 < v15 )
        {
          v38 = 0LL;
          while ( 1 )
          {
            v39 = v4[v25 + v38];
            if ( v39 != 13 && v39 != 10 )
              break;
            if ( v91 - v25 == ++v38 )
            {
              v22 = 0;
              v25 = v15;
              v24 = v15;
              v23 = v15;
              goto LABEL_80;
            }
          }
          v25 += v38;
          v22 = 0;
          v24 = v25;
          v23 = v25;
          goto LABEL_80;
        }
        v22 = 0;
        v24 = v25;
LABEL_78:
        v23 = v27;
LABEL_81:
        if ( ++v25 >= v21 )
          goto LABEL_82;
      }
      v34 = v23 - v24;
      if ( v23 <= v24 || v22 <= v23 )
        goto LABEL_71;
      v86 = v22;
      ptr = v25;
      v35 = &v4[v24];
      v90 = v34;
      if ( !strncasecmp(v35, "content-length", v34) )
      {
        v80 = atoi(&v4[v86]);
      }
      else if ( !strncasecmp(v35, "transfer-encoding", v90) )
      {
        v36 = strncasecmp(&v4[v86], "chunked", 7uLL);
        v37 = v82;
        if ( !v36 )
          v37 = 1;
        v82 = v37;
      }
      v26 = status_code;
      goto LABEL_70;
    }
LABEL_82:
    v12 = v15 - v10;
    memcpy(src, &v4[v10], v15 - v10);
LABEL_83:
    v9 = v75;
    v7 = v74;
    v83 = v15;
    if ( v82 )
    {
      if ( v12 <= 0 )
      {
        v8 = v78;
      }
      else
      {
        v40 = (unsigned int)v12;
        LODWORD(v41) = 0;
        ptra = v73;
        v8 = v78;
LABEL_86:
        nptr = v77;
        v79 = v8;
        do
        {
          if ( v7 )
          {
            v53 = ptra;
            goto LABEL_116;
          }
          if ( !v9 )
          {
            LODWORD(v41) = (src[(int)v41] == 13) + (_DWORD)v41;
            if ( (int)v41 < v12 )
              LODWORD(v41) = v41 + (src[(int)v41] == 10);
          }
          if ( (int)v41 < v12 )
          {
            v42 = v9;
            v43 = _ctype_b_loc();
            v40 = (unsigned int)v12;
            v44 = *v43;
            v45 = v42;
            v9 = v12 + v42 - v41;
            v46 = &v92[v42 + 1];
            v47 = 0LL;
            while ( (unsigned __int64)(v45 + v47) <= 0x1E )
            {
              v48 = src[(int)v41 + v47];
              if ( (v44[v48] & 0x1000) == 0 )
                break;
              *(_WORD *)&v46[v47++ - 1] = (unsigned __int8)v48;
              if ( (unsigned int)v12 - (__int64)(int)v41 == v47 )
              {
                LODWORD(v41) = v12;
                goto LABEL_98;
              }
            }
            LODWORD(v41) = v47 + v41;
            v9 = v47 + v45;
LABEL_98:
            v8 = v79;
          }
          v49 = (int)v41;
          v50 = (int)v41 < v40;
          v41 = v40;
          if ( !v50 )
            v41 = v49;
          while ( v41 != v49 )
          {
            v51 = src[v49++];
            if ( v51 == 13 || v51 == 10 )
            {
              LODWORD(v41) = v49 - 1;
              if ( v51 == 13 )
                LODWORD(v41) = v49;
              break;
            }
          }
          if ( v12 <= (int)v41 )
          {
            v7 = 0;
            v73 = ptra;
            goto LABEL_139;
          }
          v7 = 0;
        }
        while ( src[(int)v41] != 10 );
        if ( !v9 )
        {
          v92[0] = 0;
          v73 = ptra;
          break;
        }
        v52 = 0LL;
        v7 = 0;
        v53 = ptra;
        do
        {
          v54 = v7;
          v55 = v92[v52];
          v56 = v55 - 48;
          v57 = 16 * v54;
          v58 = v55 - 48;
          v59 = (v55 | 0x20) - 87;
          if ( v56 < 0xAu )
            v59 = v58;
          v7 = v57 + v59;
          ++v52;
        }
        while ( v9 != v52 );
        v92[0] = 0;
        if ( !v7 )
        {
          v73 = ptra;
          break;
        }
        LODWORD(v41) = v41 + 1;
        v9 = 0;
        v8 = v79;
LABEL_116:
        v76 = v9;
        v60 = v12 - v41;
        if ( v7 <= v12 - (int)v41 )
          v60 = v7;
        v61 = v60 + v77;
        v77 += v60;
        if ( v60 + nptr <= (unsigned int)v8 )
        {
          v62 = v53;
        }
        else
        {
          v8 = (unsigned int)v80;
          if ( v80 < v61 )
            v8 = (unsigned int)v61;
          v62 = (char *)realloc(v53, v8);
          if ( !v62 )
            goto LABEL_151;
        }
        v73 = v62;
        memcpy(&v62[nptr], &src[(int)v41], v60);
        LODWORD(v41) = v60 + v41;
        v7 -= v60;
        ptra = v73;
        v9 = v76;
        v40 = (unsigned int)v12;
        if ( (int)v41 < v12 )
          goto LABEL_86;
      }
    }
    else
    {
      v63 = v77;
      v64 = v80 - v77;
      if ( v12 + v77 <= v80 )
        v64 = v12;
      if ( v80 <= 0 )
        v64 = v12;
      v65 = v77 + v64;
      if ( v77 + v64 <= (unsigned int)v78 )
      {
        v68 = v73;
      }
      else
      {
        v66 = (unsigned int)v80;
        if ( v80 < v65 )
          v66 = (unsigned int)v65;
        v78 = v66;
        v67 = (char *)realloc(v73, v66);
        v63 = v77;
        v68 = v67;
        if ( !v67 )
        {
          v53 = v73;
LABEL_151:
          free(v53);
          v70 = v4;
LABEL_145:
          free(v70);
          *size = -1;
          return 0LL;
        }
      }
      memcpy(&v68[v63], src, v64);
      v73 = v68;
      v77 += v64;
      v8 = v78;
      v9 = v75;
      v7 = v74;
    }
LABEL_139:
    v6 = v80;
  }
  while ( v80 <= 0 || v77 < v80 );
  free(v4);
  *size = v77;
  if ( !v77 )
  {
    free(v73);
    return 0LL;
  }
  return v73;
}
