void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v4; // r0
  char *v5; // r9
  unsigned int v6; // r10
  void *v7; // r0
  int v8; // r4
  int v9; // r8
  unsigned int v10; // r7
  int v11; // r7
  signed int v12; // r4
  int v13; // r0
  int v14; // r0
  int v15; // r6
  int v16; // r5
  char *v17; // r8
  _BOOL4 v18; // r3
  int v19; // r6
  int v20; // r2
  int v21; // r1
  int v22; // r1
  int v23; // r4
  int v24; // r5
  int v25; // r9
  int v26; // r1
  int v27; // r0
  int v28; // r10
  int v29; // r2
  _BOOL4 v30; // r1
  int v31; // r2
  bool v32; // zf
  int v33; // r9
  const char *v34; // r6
  int v35; // r7
  int *v36; // r5
  bool v37; // cc
  const char *v38; // r6
  int v39; // r0
  int v40; // r0
  bool v41; // zf
  void *v42; // r8
  signed int v43; // r5
  unsigned int v44; // r0
  unsigned int v45; // r3
  size_t v46; // r8
  unsigned int v47; // r4
  size_t v48; // r1
  void *v49; // r5
  void *v50; // r0
  int v51; // r2
  int v52; // r6
  unsigned int v53; // r12
  int v54; // r2
  const unsigned __int16 *v55; // r0
  int v56; // r1
  int v57; // r0
  bool v58; // zf
  char *v59; // r1
  int v60; // t1
  int v61; // r3
  int v62; // r2
  size_t v63; // r6
  unsigned int v64; // r7
  size_t v65; // r1
  void *v66; // r0
  unsigned int v68; // r1
  unsigned int v69; // [sp+4h] [bp-87Ch]
  unsigned int v70; // [sp+8h] [bp-878h]
  unsigned int v71; // [sp+Ch] [bp-874h]
  unsigned int v72; // [sp+10h] [bp-870h]
  void *ptr; // [sp+14h] [bp-86Ch]
  int v74; // [sp+18h] [bp-868h]
  int v75; // [sp+1Ch] [bp-864h]
  int *v76; // [sp+20h] [bp-860h]
  int v77; // [sp+24h] [bp-85Ch]
  char *v78; // [sp+28h] [bp-858h]
  size_t v79; // [sp+2Ch] [bp-854h]
  int v80; // [sp+30h] [bp-850h]
  _BYTE *v81; // [sp+34h] [bp-84Ch]
  int v82; // [sp+38h] [bp-848h]
  int *v83; // [sp+3Ch] [bp-844h]
  char v84; // [sp+40h] [bp-840h] BYREF
  _BYTE v85[3]; // [sp+41h] [bp-83Fh] BYREF
  char dest[2080]; // [sp+60h] [bp-820h] BYREF

  v76 = size;
  v80 = s;
  if ( status_code )
    *status_code = -1;
  v4 = (char *)malloc(0x800u);
  if ( !v4 )
    goto LABEL_158;
  v5 = v4;
  v6 = 2048;
  v7 = malloc(0x800u);
  if ( !v7 )
  {
    free(v5);
LABEL_158:
    *v76 = -1;
    return 0;
  }
  v83 = status_code;
  ptr = v7;
  v84 = 0;
  v81 = v85;
  v74 = 0;
  v8 = -1;
  v69 = 0;
  v9 = 0;
  v70 = 2048;
  v72 = 0;
  v10 = 0;
  v82 = 0;
  while ( 2 )
  {
    while ( 2 )
    {
      v71 = v10;
      v75 = v8;
      v11 = v82;
      do
      {
        v14 = receivedata(v80, dest, 2048, 5000, 0);
        if ( v14 < 1 )
          goto end_of_stream;
        v12 = v14;
        if ( v11 )
          goto LABEL_81;
        v15 = v9;
        v16 = v14 + v9;
        v82 = v14 + v9;
        if ( v14 + v9 <= v6 )
        {
          v17 = v5;
          v16 = v6;
        }
        else
        {
          v17 = (char *)realloc(v5, v14 + v9);
          v11 = 0;
          v13 = 0;
          if ( !v17 )
          {
            free(v5);
            free(ptr);
            *v76 = -1;
            v13 = 1;
            v17 = v5;
            v16 = v6;
          }
          if ( v13 )
          {
            v5 = v17;
            v6 = v16;
            v9 = v15;
            continue;
          }
        }
        memcpy(&v17[v15], dest, v12);
        v18 = 1;
        v19 = v82;
        v11 = 0;
        if ( v82 >= 2 )
        {
          v11 = 0;
          v20 = 0;
          do
          {
            v21 = (unsigned __int8)v17[v20];
            if ( v21 == 10 )
            {
              v22 = v20 + 1;
              if ( v17[v20 + 1] == 10 )
                v11 = v20 + 2;
            }
            else if ( v21 == 13 )
            {
              v22 = v20 + 1;
              if ( v17[v20 + 1] == 10 )
              {
                v22 = v20 + 2;
                if ( v20 + 2 < v82 && v17[v22] == 13 )
                {
                  v22 = v20 + 3;
                  if ( v20 + 3 < v82 && v17[v22] == 10 )
                    v11 = v20 + 4;
                }
              }
            }
            else
            {
              v22 = v20;
            }
            v18 = v11 == 0;
            v20 = v22 + 1;
          }
          while ( v22 + 1 < v82 - 1 && !v11 );
        }
        v13 = 2;
        if ( !v18 )
        {
          v77 = v16;
          if ( v11 < 2 )
          {
LABEL_7:
            v12 = v19 - v11;
            memcpy(dest, &v17[v11], v19 - v11);
            v13 = 0;
            v5 = v17;
            v6 = v77;
            v9 = v19;
            continue;
          }
          v23 = v11 - 1;
          v24 = (int)(v17 + 1);
          v25 = 0;
          v26 = 0;
          v27 = 0;
          v28 = 0;
          v78 = v17 + 1;
          while ( 2 )
          {
            if ( v27 >= 1 && v26 <= v27 && v17[v28] == 58 )
            {
              v25 = v28;
              do
              {
                v30 = 0;
                if ( v25 < v23 )
                  v30 = *(_BYTE *)(v24 + v25) == 0x20 || *(_BYTE *)(v24 + v25) == 9;
                ++v25;
              }
              while ( v30 );
              v29 = v25 - 1;
              goto LABEL_39;
            }
            v31 = (unsigned __int8)v17[v28];
            v32 = v31 == 13;
            if ( v31 != 13 )
              v32 = v31 == 10;
            if ( v32 )
            {
              if ( v83 && !v27 )
              {
                if ( v28 < 1 )
                  goto LABEL_72;
                v33 = v11;
                v34 = (const char *)v24;
                v35 = v28;
                v36 = v83;
                while ( 1 )
                {
                  if ( *(v34 - 1) == 32 )
                  {
                    if ( *v36 > -1 )
                    {
LABEL_69:
                      v11 = v33;
                      v19 = v82;
                      v24 = (int)v78;
                      goto LABEL_72;
                    }
                    *v36 = atoi(v34);
                  }
                  ++v34;
                  if ( !--v35 )
                    goto LABEL_69;
                }
              }
              v37 = v26 <= v27;
              if ( v26 > v27 )
                v37 = v25 <= v26;
              if ( !v37 )
              {
                v38 = &v17[v27];
                v79 = v26 - v27;
                if ( !strncasecmp(&v17[v27], "content-length", v26 - v27) )
                {
                  v75 = atoi(&v17[v25]);
                }
                else if ( !strncasecmp(v38, "transfer-encoding", v79) )
                {
                  v32 = strncasecmp(&v17[v25], "chunked", 7u) == 0;
                  v39 = v74;
                  if ( v32 )
                    v39 = 1;
                  v74 = v39;
                }
                v19 = v82;
              }
LABEL_72:
              v25 = 0;
              if ( v28 < v19 )
              {
                while ( 1 )
                {
                  v40 = (unsigned __int8)v17[v28];
                  v41 = v40 == 13;
                  if ( v40 != 13 )
                    v41 = v40 == 10;
                  if ( !v41 )
                    break;
                  if ( v19 == ++v28 )
                  {
                    v29 = v19;
                    v27 = v19;
                    v26 = v19;
                    goto LABEL_40;
                  }
                }
              }
              v29 = v28;
              v27 = v28;
LABEL_39:
              v26 = v28;
            }
            else
            {
              v29 = v28;
            }
LABEL_40:
            v28 = v29 + 1;
            if ( v29 + 1 >= v23 )
              goto LABEL_7;
            continue;
          }
        }
        v5 = v17;
        v6 = v16;
        v9 = v82;
        v11 = 0;
      }
      while ( v13 == 2 );
      if ( v13 )
        return 0;
LABEL_81:
      v82 = v11;
      if ( !v11 )
      {
        v8 = v75;
        v10 = v71;
        if ( v75 >= 1 )
        {
LABEL_152:
          if ( v72 >= v8 )
            goto end_of_stream;
        }
        continue;
      }
      break;
    }
    v79 = v9;
    if ( !v74 )
    {
      v45 = v72;
      v46 = v12;
      if ( v12 + v72 > v75 )
        v46 = v75 - v72;
      if ( v75 <= 0 )
        v46 = v12;
      v47 = v46 + v72;
      if ( v46 + v72 > v70 )
      {
        v48 = v75;
        if ( v75 < v47 )
          v48 = v46 + v72;
        if ( v75 < 0 )
          v48 = v46 + v72;
        v49 = ptr;
        v70 = v48;
        v50 = realloc(ptr, v48);
        if ( v50 )
        {
          v51 = 1;
          ptr = v50;
        }
        else
        {
          free(v49);
          free(v5);
          *v76 = -1;
          v51 = 0;
        }
        v45 = v72;
        if ( !v51 )
          return 0;
      }
      memcpy((char *)ptr + v45, dest, v46);
      v72 = v47;
      v8 = v75;
      v10 = v71;
      goto LABEL_151;
    }
    v42 = 0;
    v10 = v71;
    if ( v12 < 1 )
    {
      v52 = v72;
      v53 = v69;
LABEL_144:
      v54 = 0;
    }
    else
    {
      v43 = 0;
      v44 = v69;
      while ( 2 )
      {
        v52 = v72;
        while ( 1 )
        {
          if ( v44 )
          {
            v78 = (char *)v52;
            goto LABEL_134;
          }
          if ( !v10 )
          {
            if ( dest[v43] == 13 )
              ++v43;
            if ( v43 < v12 && dest[v43] == 10 )
              ++v43;
          }
          if ( v43 < v12 )
          {
            v55 = *_ctype_b_loc();
            while ( v10 <= 0x1E )
            {
              v56 = (unsigned __int8)dest[v43];
              if ( (v55[v56] & 0x1000) == 0 )
                break;
              v81[v10] = 0;
              v85[v10 - 1] = v56;
              ++v43;
              ++v10;
              if ( v12 == v43 )
              {
                v43 = v12;
                break;
              }
            }
          }
          while ( v43 < v12 )
          {
            v57 = (unsigned __int8)dest[v43++];
            v58 = v57 == 13;
            if ( v57 != 13 )
              v58 = v57 == 10;
            if ( v58 )
            {
              if ( v57 != 13 )
                --v43;
              break;
            }
          }
          if ( v43 < v12 && dest[v43] == 10 )
            break;
          v44 = 0;
          if ( v43 >= v12 )
          {
            v53 = 0;
            goto LABEL_144;
          }
        }
        v78 = (char *)v52;
        v53 = 0;
        v44 = 0;
        if ( v10 )
        {
          v44 = 0;
          v59 = &v84;
          do
          {
            v60 = (unsigned __int8)*v59++;
            v61 = v60 - 0x30;
            v62 = v60 | 0x20;
            if ( (unsigned int)(v60 - 0x30) >= 0xA )
              v61 = v62 - 0x57;
            v44 = v61 + 16 * v44;
            --v10;
          }
          while ( v10 );
        }
        v84 = 0;
        if ( !v44 )
        {
          v54 = 25;
          v10 = 0;
          v8 = v75;
          v52 = (int)v78;
          goto LABEL_146;
        }
        ++v43;
        v10 = 0;
LABEL_134:
        v71 = v10;
        v63 = v12 - v43;
        v64 = v44;
        if ( v44 < v12 - v43 )
          v63 = v44;
        v72 = (unsigned int)&v78[v63];
        if ( (unsigned int)&v78[v63] > v70 )
        {
          v65 = v75;
          if ( v75 < (unsigned int)&v78[v63] )
            v65 = (size_t)&v78[v63];
          if ( v75 < 0 )
            v65 = (size_t)&v78[v63];
          v70 = v65;
          v66 = realloc(ptr, v65);
          if ( v66 )
          {
            v54 = 0;
            ptr = v66;
          }
          else
          {
            free(ptr);
            free(v5);
            *v76 = -1;
            v54 = 1;
          }
          if ( v54 )
          {
            v53 = v64;
            v8 = v75;
            v10 = v71;
            v52 = (int)v78;
            goto LABEL_146;
          }
        }
        memcpy(&v78[(_DWORD)ptr], &dest[v43], v63);
        v44 = v64 - v63;
        v43 += v63;
        v10 = v71;
        if ( v43 < v12 )
          continue;
        break;
      }
      v54 = 0;
      v52 = v72;
      v53 = v44;
    }
    v8 = v75;
LABEL_146:
    if ( !v54 )
    {
      v69 = v53;
      v72 = v52;
LABEL_151:
      v9 = v79;
      if ( v8 >= 1 )
        goto LABEL_152;
      continue;
    }
    break;
  }
  v72 = v52;
  if ( v54 == 25 )
  {
end_of_stream:
    free(v5);
    v68 = v72;
    *v76 = v72;
    if ( v68 )
      return ptr;
    free(ptr);
    return 0;
  }
  return v42;
}
