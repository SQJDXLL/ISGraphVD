char *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  int v4; // $fp
  unsigned int v5; // $s7
  int v6; // $v0
  char *v7; // $v1
  int v8; // $v1
  bool v9; // dc
  int v10; // $v1
  char *v11; // $a3
  char *v12; // $ra
  char *v13; // $s7
  signed int v14; // $s4
  signed int v15; // $v0
  signed int v16; // $s0
  char *v17; // $s6
  char *v18; // $a1
  char *v19; // $v1
  int v20; // $a0
  int v21; // $v1
  int v22; // $s5
  char *v23; // $v1
  int v24; // $v1
  signed int v25; // $v0
  _BOOL4 v26; // $v1
  const char *v27; // $s5
  size_t v28; // $s4
  int v29; // $v0
  int v30; // $a0
  const char *v31; // $s5
  const char *v32; // $s7
  int *v33; // $fp
  int v34; // $v0
  signed int v35; // $s1
  signed int v36; // $s0
  unsigned int v37; // $fp
  signed int v38; // $s6
  _BOOL4 v39; // $v0
  const unsigned __int16 *v40; // $t0
  unsigned int v41; // $v0
  _BYTE *v42; // $a0
  unsigned int v43; // $a2
  unsigned int v44; // $a3
  int v45; // $a1
  _BOOL4 v46; // $v1
  char *v47; // $a0
  int v48; // $v1
  int v49; // $v1
  signed int v50; // $s3
  char *v51; // $a1
  char *v52; // $v0
  int v53; // $v1
  int v54; // $a2
  char *v55; // $fp
  int *v56; // $s3
  size_t v57; // $s2
  size_t v58; // $v1
  char *v59; // $v0
  int *v60; // $s3
  char *v61; // $s0
  int *v62; // $s3
  size_t v64; // $v0
  char *v65; // $v0
  void *v66; // $v0
  int *v67; // $s3
  unsigned int v68; // $s2
  int v69; // $a1
  int v70; // $v1
  size_t v71; // $s2
  size_t v72; // $s1
  char *content_buf; // [sp+20h] [-870h]
  unsigned int content_buf_len; // [sp+24h] [-86Ch]
  char *endofheaders; // [sp+28h] [-868h]
  int content_length; // [sp+2Ch] [-864h]
  unsigned int chunksize_buf_index; // [sp+34h] [-85Ch]
  unsigned int content_buf_used; // [sp+38h] [-858h]
  char *header_buf; // [sp+3Ch] [-854h]
  unsigned int header_buf_used; // [sp+40h] [-850h]
  unsigned int header_buf_len; // [sp+44h] [-84Ch]
  int chunked; // [sp+48h] [-848h] BYREF
  char *v83; // [sp+4Ch] [-844h]
  unsigned int chunksize; // [sp+50h] [-840h]
  int *status_codea; // [sp+54h] [-83Ch]
  int v86; // [sp+58h] [-838h]
  char *v87; // [sp+5Ch] [-834h]
  char *v88; // [sp+60h] [-830h]
  int *sizea; // [sp+64h] [-82Ch]
  char chunksize_buf[32]; // [sp+6Ch] [-824h] BYREF
  char buf[2048]; // [sp+8Ch] [-804h] BYREF

  status_codea = status_code;
  if ( status_code )
    *status_code = -1;
  v4 = (int)malloc(0x800u);
  if ( !v4 )
  {
    *size = -1;
    return 0;
  }
  content_buf = (char *)malloc(0x800u);
  if ( !content_buf )
  {
    free((void *)v4);
    *size = -1;
    return content_buf;
  }
  chunksize_buf[0] = 0;
  chunksize_buf_index = 0;
  content_buf_used = 0;
  content_buf_len = 2048;
  v5 = 0;
  header_buf_len = 2048;
  chunksize = 0;
  content_length = -1;
  chunked = 0;
  endofheaders = 0;
  v87 = "content-length";
  v88 = "transfer-encoding";
  sizea = size;
  while ( 1 )
  {
    v35 = receivedata(s, buf, 2048, 5000);
    if ( v35 <= 0 )
      break;
    if ( endofheaders )
    {
      v36 = 0;
      if ( chunked )
        goto LABEL_82;
LABEL_159:
      v71 = v35;
      if ( content_length <= 0 )
      {
LABEL_162:
        v71 = v35;
        v72 = v35 + content_buf_used;
        if ( content_buf_len >= v72 )
        {
          v61 = content_buf;
        }
        else
        {
          v64 = content_length;
          if ( content_length >= (int)v72 )
            goto LABEL_142;
          content_buf_len = v72;
          v65 = (char *)realloc(content_buf, v72);
LABEL_143:
          v61 = v65;
          if ( !v65 )
          {
            v60 = sizea;
            free(content_buf);
            free((void *)v4);
            *v60 = -1;
            return 0;
          }
        }
      }
      else
      {
        v72 = v35 + content_buf_used;
        if ( content_length < (int)v72 )
        {
          v35 = content_length - content_buf_used;
          goto LABEL_162;
        }
        v64 = content_length;
        if ( content_buf_len < v72 )
        {
LABEL_142:
          content_buf_len = v64;
          v65 = (char *)realloc(content_buf, v64);
          goto LABEL_143;
        }
        v61 = content_buf;
      }
      memcpy(&v61[content_buf_used], buf, v71);
      content_buf_used = v72;
      content_buf = v61;
      goto LABEL_145;
    }
    v22 = v35 + v5;
    if ( header_buf_len < v35 + v5 )
    {
      v66 = realloc((void *)v4, v35 + v5);
      v67 = sizea;
      if ( !v66 )
      {
        free((void *)v4);
        free(content_buf);
        *v67 = -1;
        return 0;
      }
      header_buf_len = v35 + v5;
      v4 = (int)v66;
    }
    memcpy((void *)(v4 + v5), buf, v35);
    v68 = v35 + v5;
    v69 = v22 - 1;
    if ( v22 < 2 )
    {
      v5 += v35;
    }
    else
    {
      v6 = 0;
      do
      {
        v7 = (char *)(v4 + v6);
        while ( 1 )
        {
          v8 = *v7;
          if ( v8 == 13 )
            break;
          v9 = v8 != 10;
          v10 = v6 + 1;
          if ( v9 )
            goto LABEL_11;
          v11 = (char *)(v6 + 2);
          if ( *(_BYTE *)(v4 + v10) != 10 )
          {
            ++v6;
            goto LABEL_11;
          }
LABEL_23:
          v6 = v10 + 1;
          if ( v10 + 1 >= v69 )
          {
            header_buf = v11;
            goto LABEL_168;
          }
          v7 = (char *)(v4 + v6);
          if ( v11 )
          {
            header_buf = v11;
            v12 = v11 + -0x1;
            goto LABEL_26;
          }
        }
        if ( *(_BYTE *)(v4 + v6 + 1) != 10 )
        {
          ++v6;
          goto LABEL_11;
        }
        if ( v6 + 2 >= v22 )
        {
          v6 += 2;
          goto LABEL_11;
        }
        if ( *(_BYTE *)(v4 + v6 + 2) != 13 )
        {
          v6 += 2;
          goto LABEL_11;
        }
        v10 = v6 + 3;
        if ( v6 + 3 < v22 )
        {
          v11 = (char *)(v6 + 4);
          if ( *(_BYTE *)(v4 + v6 + 3) != 10 )
          {
            v6 += 3;
            goto LABEL_11;
          }
          goto LABEL_23;
        }
        v6 += 3;
LABEL_11:
        ++v6;
      }
      while ( v6 < v69 );
      header_buf = 0;
LABEL_168:
      v12 = header_buf + -0x1;
      if ( header_buf )
      {
LABEL_26:
        if ( (int)v12 > 0 )
        {
          v13 = 0;
          v14 = 0;
          v15 = 0;
          v16 = 0;
          v83 = 0;
          header_buf_used = v22;
          v17 = v12;
          do
          {
            if ( v15 <= 0 )
            {
              v21 = *(char *)(v4 + v16);
              if ( v21 != 13 && v21 != 10 )
                goto LABEL_41;
              if ( !v15 && status_codea )
              {
                v31 = (const char *)(v4 + 1);
                if ( v16 <= 0 )
                  goto LABEL_66;
                v32 = &v31[v16];
                v86 = v4;
                v33 = status_codea;
                while ( 1 )
                {
                  if ( *(v31 - 1) == 32 )
                  {
                    if ( *v33 >= 0 )
                    {
                      v4 = v86;
                      goto LABEL_66;
                    }
                    *v33 = strtol(v31, 0u, 10);
                  }
                  if ( ++v31 == v32 )
                  {
                    v4 = v86;
                    goto LABEL_66;
                  }
                }
              }
              if ( v15 >= v14 )
                goto LABEL_66;
              goto LABEL_52;
            }
            v23 = (char *)(v4 + v16);
            if ( v15 < v14 )
            {
              v70 = *v23;
              if ( v70 != 13 )
              {
                ++v16;
                if ( v70 != 10 )
                  goto LABEL_42;
                --v16;
                v26 = v14 < (int)v13;
LABEL_53:
                if ( !v26 )
                  goto LABEL_66;
                v27 = (const char *)(v4 + v15);
                v28 = v14 - v15;
                if ( !strncasecmp((const char *)(v4 + v15), v87, v28) )
                {
                  content_length = strtol(&v13[v4], 0u, 10);
                  goto LABEL_66;
                }
                v9 = strncasecmp(v27, v88, v28) != 0;
                v25 = header_buf_used;
                if ( !v9 )
                {
                  v29 = strncasecmp(&v13[v4], "chunked", 7u);
                  v30 = chunked;
                  if ( !v29 )
                    v30 = 1;
                  chunked = v30;
LABEL_66:
                  v25 = header_buf_used;
                }
LABEL_67:
                v13 = 0;
                if ( v16 < v25 )
                {
                  do
                  {
                    v34 = *(char *)(v4 + v16);
                    if ( v34 == 13 )
                    {
                      ++v16;
                    }
                    else
                    {
                      ++v16;
                      if ( v34 != 10 )
                      {
                        --v16;
                        v13 = 0;
                        v14 = v16;
                        v15 = v16;
                        goto LABEL_41;
                      }
                    }
                    v13 = v83;
                  }
                  while ( v16 != v68 );
                  v16 = header_buf_used;
                  v14 = header_buf_used;
                  v15 = header_buf_used;
                }
                else
                {
                  v14 = v16;
                  v15 = v16;
                }
                goto LABEL_41;
              }
LABEL_52:
              v26 = v14 < (int)v13;
              goto LABEL_53;
            }
            v24 = *v23;
            if ( v24 != 58 )
            {
              if ( v24 == 13 )
                goto LABEL_66;
              if ( v24 != 10 )
                goto LABEL_41;
              v25 = header_buf_used;
              goto LABEL_67;
            }
            if ( v16 >= (int)v17 )
            {
              v18 = (char *)v16;
              goto LABEL_36;
            }
            v18 = header_buf + -0x1;
            v19 = (char *)v16;
            while ( 1 )
            {
              v20 = v19[v4 + 1];
              if ( v20 != 32 )
                break;
              ++v19;
LABEL_32:
              v13 = header_buf;
              if ( v19 == v18 )
                goto LABEL_37;
            }
            ++v19;
            if ( v20 == 9 )
              goto LABEL_32;
            v18 = v19 - 1;
LABEL_36:
            v13 = v18 + 1;
LABEL_37:
            v14 = v16;
            v16 = (signed int)v18;
LABEL_41:
            ++v16;
LABEL_42:
            v22 = header_buf_used;
          }
          while ( v16 < (int)v17 );
        }
        v35 = v22 - (_DWORD)header_buf;
        memcpy(buf, &header_buf[v4], v22 - (_DWORD)header_buf);
        v5 = v22;
        if ( !chunked )
        {
          endofheaders = header_buf;
          goto LABEL_159;
        }
        if ( v35 > 0 )
        {
          v5 = v22;
          endofheaders = header_buf;
          v36 = 0;
LABEL_82:
          header_buf_used = v5;
          header_buf = (char *)v4;
          v37 = content_buf_used;
          content_buf_used = (unsigned int)chunksize_buf;
          v38 = chunksize;
          while ( 2 )
          {
            if ( v38 )
            {
LABEL_121:
              v57 = v35 - v36;
              if ( v38 < v35 - v36 )
                v57 = v38;
              v50 = v57 + v37;
              v58 = content_length;
              if ( content_buf_len < v57 + v37 )
              {
                if ( content_length < v50 )
                  v58 = v57 + v37;
                content_buf_len = v58;
                v59 = (char *)realloc(content_buf, v58);
                if ( !v59 )
                {
                  v55 = header_buf;
                  v56 = sizea;
                  free(content_buf);
                  free(v55);
                  *v56 = -1;
                  return 0;
                }
                content_buf = v59;
              }
              memcpy(&content_buf[v37], &buf[v36], v57);
              v36 += v57;
              v38 -= v57;
              if ( v36 >= v35 )
              {
                chunksize = v38;
                v5 = header_buf_used;
                v4 = (int)header_buf;
                content_buf_used = v50;
                goto LABEL_145;
              }
              goto LABEL_119;
            }
            v39 = v36 < v35;
            if ( chunksize_buf_index )
            {
LABEL_89:
              if ( !v39 )
                goto LABEL_140;
            }
            else
            {
              if ( *((_BYTE *)&chunked + v36 + 0x44) == 13 )
                ++v36;
              if ( v36 >= v35 )
              {
LABEL_140:
                content_buf_used = v37;
                chunksize = 0;
                v5 = header_buf_used;
                v4 = (int)header_buf;
                v41 = chunksize_buf_index;
                goto LABEL_102;
              }
              if ( *((_BYTE *)&chunked + v36 + 0x44) == 10 )
              {
                v39 = ++v36 < v35;
                goto LABEL_89;
              }
            }
            v40 = *_ctype_b_loc();
            v41 = chunksize_buf_index;
            v42 = (_BYTE *)(content_buf_used + chunksize_buf_index);
            v43 = v35 + chunksize_buf_index - v36;
            v44 = v36 - chunksize_buf_index;
            while ( 1 )
            {
              v45 = buf[v44 + v41];
              if ( (v40[v45] & 0x10) == 0 )
                break;
              v46 = v36 < v35;
              if ( v41 >= 0x1F )
                goto LABEL_96;
              ++v41;
              *v42 = v45;
              v42[1] = 0;
              ++v36;
              ++v42;
              if ( v41 == v43 )
              {
                v41 = v43;
                break;
              }
            }
            v46 = v36 < v35;
LABEL_96:
            if ( !v46 )
            {
              content_buf_used = v37;
              chunksize = 0;
              v5 = header_buf_used;
              v4 = (int)header_buf;
              goto LABEL_102;
            }
            v47 = &buf[v36];
            while ( 1 )
            {
              v48 = *v47;
              if ( v48 == 13 || v48 == 10 )
                break;
              ++v36;
              ++v47;
              if ( v36 == v35 )
              {
                content_buf_used = v37;
                chunksize = 0;
                v5 = header_buf_used;
                v4 = (int)header_buf;
                goto LABEL_102;
              }
            }
            if ( v36 >= v35 )
            {
              content_buf_used = v37;
              chunksize = 0;
              v5 = header_buf_used;
              v4 = (int)header_buf;
              goto LABEL_102;
            }
            v49 = v36 + 0x848;
            if ( *((_BYTE *)&chunked + v36 + 0x44) == 13 )
            {
              v49 = ++v36 + 0x848;
              if ( v36 >= v35 )
              {
                content_buf_used = v37;
                chunksize = 0;
                v5 = header_buf_used;
                v4 = (int)header_buf;
LABEL_102:
                chunksize_buf_index = v41;
                goto LABEL_145;
              }
            }
            v50 = v37;
            if ( *((_BYTE *)&chunked + v49 - 2052) == 10 )
            {
              v51 = chunksize_buf;
              if ( !v41 )
              {
                content_buf_used = v37;
                v4 = (int)header_buf;
                v62 = sizea;
                goto end_of_stream;
              }
              v52 = &chunksize_buf[v41];
              v53 = 0;
              do
              {
                v54 = *v51;
                if ( (unsigned __int8)(v54 - 0x30) >= 0xAu )
                  v53 = (v54 | 0x20) + 16 * v53 - 87;
                else
                  v53 = v54 + 16 * v53 - 48;
                ++v51;
              }
              while ( v51 != v52 );
              chunksize_buf[0] = 0;
              ++v36;
              if ( !v53 )
              {
                content_buf_used = v37;
                v4 = (int)header_buf;
                v62 = sizea;
                goto end_of_stream;
              }
              chunksize_buf_index = 0;
              v38 = v53;
              goto LABEL_121;
            }
            chunksize_buf_index = v41;
LABEL_119:
            v37 = v50;
            continue;
          }
        }
        v5 = v22;
        endofheaders = header_buf;
LABEL_145:
        if ( content_length > 0 )
        {
          v62 = sizea;
          if ( (int)content_buf_used >= content_length )
            goto end_of_stream;
        }
      }
      else
      {
        v5 += v35;
        endofheaders = 0;
      }
    }
  }
  v62 = sizea;
end_of_stream:
  free((void *)v4);
  v9 = content_buf_used == 0;
  *v62 = content_buf_used;
  if ( v9 )
  {
    free(content_buf);
    return 0;
  }
  return content_buf;
}
