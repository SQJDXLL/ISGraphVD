void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  void *result; // x0
  char *v6; // x25
  char *v7; // x0
  int v8; // w21
  int v9; // w19
  unsigned int v10; // w27
  __int64 v11; // x24
  int v12; // w0
  int v13; // w26
  unsigned int v14; // w20
  char *v15; // x22
  int v16; // w8
  int v17; // w9
  int v18; // w11
  __int64 v19; // x11
  __int64 v20; // x10
  int v21; // w11
  int v22; // w9
  int v23; // w22
  __int64 v24; // x20
  int v25; // w8
  const unsigned __int16 *v26; // x9
  unsigned __int64 v27; // x12
  __int64 v28; // x10
  char *v29; // x11
  int v30; // w8
  __int64 v31; // x13
  __int64 v32; // x10
  int v33; // w8
  char *v34; // x9
  __int64 v35; // x10
  int v36; // w11
  int v37; // w15
  __int64 v38; // x8
  char *v39; // x9
  unsigned __int8 v40; // w10
  int v41; // t1
  bool v42; // cf
  unsigned __int8 v43; // w12
  int v44; // w11
  unsigned int v45; // w28
  int v46; // w9
  size_t v47; // x1
  char *v48; // x0
  unsigned int v49; // w8
  int v50; // w13
  int v51; // w8
  int v52; // w28
  int v53; // w10
  int v54; // w8
  int v55; // w24
  int v56; // w9
  int v57; // w9
  __int64 v58; // x10
  char *v59; // x11
  int v60; // w12
  int v61; // w9
  const char *v62; // x22
  size_t v63; // x26
  int v64; // w0
  int v65; // w8
  const char *v66; // x22
  __int64 v67; // x26
  char *v68; // x8
  __int64 v69; // x9
  int v70; // w10
  int v71; // w20
  int v72; // w9
  int v73; // w9
  __int64 v74; // x10
  char *v75; // x11
  int v76; // w12
  int v77; // w9
  const char *v78; // x22
  size_t v79; // x26
  int v80; // w0
  int v81; // w8
  char *v82; // x8
  __int64 v83; // x9
  int v84; // w10
  int v85; // w10
  bool v86; // cc
  int v87; // w22
  int v88; // w20
  unsigned int v89; // w8
  int *v90; // x24
  size_t v91; // x28
  char *v92; // x0
  char *v93; // x0
  int *v94; // [xsp+8h] [xbp-888h]
  int *v95; // [xsp+8h] [xbp-888h]
  __int64 v96; // [xsp+28h] [xbp-868h]
  unsigned int v97; // [xsp+38h] [xbp-858h]
  __int64 v98; // [xsp+40h] [xbp-850h]
  int v99; // [xsp+40h] [xbp-850h]
  __int64 v100; // [xsp+48h] [xbp-848h]
  char *ptr; // [xsp+50h] [xbp-840h]
  __int64 v103; // [xsp+60h] [xbp-830h]
  char v104[32]; // [xsp+68h] [xbp-828h] BYREF
  char src[2056]; // [xsp+88h] [xbp-808h] BYREF

  if ( status_code )
    *status_code = -1;
  result = malloc(0x800uLL);
  if ( !result )
    goto LABEL_184;
  v6 = (char *)result;
  v7 = (char *)malloc(0x800uLL);
  if ( !v7 )
  {
    v93 = v6;
    goto LABEL_183;
  }
  v8 = 0;
  v9 = 0;
  v10 = 2048;
  v11 = 0xFFFFFFFFLL;
  ptr = v7;
  v103 = 0LL;
  v104[0] = 0;
  v97 = 2048;
  v98 = 0LL;
  do
  {
    v12 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
    if ( v12 < 1 )
      break;
    v13 = v12;
    v14 = v8;
    v15 = v6;
LABEL_10:
    if ( v9 )
    {
      v8 = v14;
      v6 = v15;
      v100 = v11;
      if ( !HIDWORD(v98) )
        goto LABEL_164;
      goto LABEL_36;
    }
    v8 = v13 + v14;
    if ( v13 + v14 <= v10 )
    {
      v6 = v15;
    }
    else
    {
      v6 = (char *)realloc(v15, (unsigned int)v8);
      v10 = v13 + v14;
      if ( !v6 )
      {
        free(v15);
        v93 = ptr;
LABEL_183:
        free(v93);
        result = 0LL;
LABEL_184:
        *size = -1;
        return result;
      }
    }
    memcpy(&v6[v14], src, (unsigned int)v13);
    v16 = v8 - 1;
    if ( v8 <= 1 )
      goto LABEL_9;
    v17 = 0;
    while ( 1 )
    {
      v18 = (unsigned __int8)v6[v17];
      if ( v18 == 10 )
      {
        v20 = v17 + 1LL;
        v21 = (unsigned __int8)v6[v20];
        v22 = v17 + 2;
        goto LABEL_27;
      }
      if ( v18 != 13 )
      {
        v9 = 0;
        if ( ++v17 >= v16 )
          goto LABEL_8;
        goto LABEL_18;
      }
      LODWORD(v19) = v17 + 1;
      if ( v6[v17 + 1] != 10 )
        break;
      v19 = v17 + 2LL;
      if ( v17 + 2 >= v8 || v6[v19] != 13 )
        break;
      v20 = v17 + 3LL;
      if ( (int)v20 >= v8 )
      {
        v9 = 0;
        goto LABEL_30;
      }
      v21 = (unsigned __int8)v6[v20];
      v22 = v17 + 4;
LABEL_27:
      if ( v21 == 10 )
        v9 = v22;
      else
        v9 = 0;
LABEL_30:
      v17 = v20 + 1;
      if ( (int)v20 + 1 >= v16 )
        goto LABEL_8;
LABEL_18:
      if ( v9 )
        goto LABEL_8;
    }
    v9 = 0;
    v17 = v19 + 1;
    if ( (int)v19 + 1 < v16 )
      goto LABEL_18;
LABEL_8:
    if ( !v9 )
    {
LABEL_9:
      v13 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
      v9 = 0;
      v14 = v8;
      v15 = v6;
      if ( v13 < 1 )
        break;
      goto LABEL_10;
    }
    v100 = v11;
    v95 = size;
    if ( v9 >= 2 )
    {
      v50 = v9 - 1;
      v96 = v9 - 1;
      v51 = (int)status_code;
      v52 = 0;
      v53 = 0;
      if ( status_code )
      {
        v54 = 0;
        v55 = 0;
        do
        {
          v57 = (unsigned __int8)v6[v55];
          if ( v54 >= 1 && v53 <= v54 && v57 == 58 )
          {
            v56 = v55;
            if ( v55 < v50 )
            {
              v58 = v96 - v55;
              v59 = &v6[v55 + 1];
              v56 = v55;
              while ( 1 )
              {
                v60 = (unsigned __int8)*v59;
                if ( v60 != 32 && v60 != 9 )
                  break;
                ++v56;
                --v58;
                ++v59;
                if ( !v58 )
                {
                  v56 = v50;
                  break;
                }
              }
            }
            v52 = v56 + 1;
          }
          else if ( v57 == 13 || v57 == 10 )
          {
            if ( v54 )
            {
              v61 = v53 - v54;
              if ( v53 > v54 && v52 > v53 )
              {
                v62 = &v6[v54];
                v63 = v61;
                if ( !strncasecmp(v62, "content-length", v61) )
                {
                  v100 = strtol(&v6[v52], 0uLL, 10);
                }
                else if ( !strncasecmp(v62, "transfer-encoding", v63) )
                {
                  v64 = strncasecmp(&v6[v52], "chunked", 7uLL);
                  v65 = HIDWORD(v98);
                  if ( !v64 )
                    v65 = 1;
                  HIDWORD(v98) = v65;
                }
LABEL_122:
                v50 = v9 - 1;
              }
            }
            else if ( v55 >= 1 )
            {
              v66 = v6 + 1;
              v67 = (unsigned int)v55;
              while ( 1 )
              {
                if ( *(v66 - 1) == 32 )
                {
                  if ( (*status_code & 0x80000000) == 0 )
                    goto LABEL_122;
                  *status_code = strtol(v66, 0uLL, 10);
                }
                --v67;
                ++v66;
                if ( !v67 )
                  goto LABEL_122;
              }
            }
            if ( v55 < v8 )
            {
              v68 = &v6[v55];
              v69 = v8 - (__int64)v55;
              while ( 1 )
              {
                v70 = (unsigned __int8)*v68;
                if ( v70 != 13 && v70 != 10 )
                  break;
                ++v55;
                --v69;
                ++v68;
                if ( !v69 )
                {
                  v52 = 0;
                  v56 = v8;
                  v54 = v8;
                  v55 = v8;
                  goto LABEL_93;
                }
              }
            }
            v52 = 0;
            v56 = v55;
            v54 = v55;
          }
          else
          {
            v56 = v55;
            v55 = v53;
          }
LABEL_93:
          v53 = v55;
          v55 = v56 + 1;
        }
        while ( v56 + 1 < v50 );
      }
      else
      {
        v71 = 0;
        do
        {
          v73 = (unsigned __int8)v6[v71];
          if ( v51 >= 1 && v53 <= v51 && v73 == 58 )
          {
            v72 = v71;
            if ( v71 < v50 )
            {
              v74 = v96 - v71;
              v75 = &v6[v71 + 1];
              v72 = v71;
              while ( 1 )
              {
                v76 = (unsigned __int8)*v75;
                if ( v76 != 32 && v76 != 9 )
                  break;
                ++v72;
                --v74;
                ++v75;
                if ( !v74 )
                {
                  v72 = v50;
                  break;
                }
              }
            }
            v52 = v72 + 1;
          }
          else if ( v73 == 13 || v73 == 10 )
          {
            v77 = v53 - v51;
            if ( v53 > v51 && v52 > v53 )
            {
              v78 = &v6[v51];
              v79 = v77;
              if ( !strncasecmp(v78, "content-length", v77) )
              {
                v100 = strtol(&v6[v52], 0uLL, 10);
              }
              else if ( !strncasecmp(v78, "transfer-encoding", v79) )
              {
                v80 = strncasecmp(&v6[v52], "chunked", 7uLL);
                v81 = HIDWORD(v98);
                if ( !v80 )
                  v81 = 1;
                HIDWORD(v98) = v81;
              }
              v50 = v9 - 1;
            }
            if ( v71 < v8 )
            {
              v82 = &v6[v71];
              v83 = v8 - (__int64)v71;
              while ( 1 )
              {
                v84 = (unsigned __int8)*v82;
                if ( v84 != 13 && v84 != 10 )
                  break;
                ++v71;
                --v83;
                ++v82;
                if ( !v83 )
                {
                  v52 = 0;
                  v72 = v8;
                  v51 = v8;
                  v71 = v8;
                  goto LABEL_134;
                }
              }
            }
            v52 = 0;
            v72 = v71;
            v51 = v71;
          }
          else
          {
            v72 = v71;
            v71 = v53;
          }
LABEL_134:
          v53 = v71;
          v71 = v72 + 1;
        }
        while ( v72 + 1 < v50 );
      }
    }
    v13 = v8 - v9;
    memcpy(src, &v6[v9], v8 - v9);
    size = v95;
    LODWORD(v11) = v100;
    if ( !HIDWORD(v98) )
    {
LABEL_164:
      v85 = HIDWORD(v103);
      v86 = v13 + HIDWORD(v103) <= (int)v11 || (int)v11 <= 0;
      if ( v86 )
        v87 = v13;
      else
        v87 = v11 - HIDWORD(v103);
      v88 = v87 + HIDWORD(v103);
      if ( v87 + HIDWORD(v103) <= v97 )
      {
        v92 = ptr;
      }
      else
      {
        v89 = v11;
        v86 = (int)v11 < v88;
        v90 = size;
        if ( v86 )
          v91 = (unsigned int)v88;
        else
          v91 = v89;
        v92 = (char *)realloc(ptr, v91);
        if ( !v92 )
        {
          free(ptr);
          free(v6);
          result = 0LL;
          *v90 = -1;
          return result;
        }
        v85 = HIDWORD(v103);
        v97 = v91;
        size = v90;
      }
      ptr = v92;
      memcpy(&v92[v85], src, v87);
      HIDWORD(v103) += v87;
      goto LABEL_178;
    }
LABEL_36:
    if ( v13 < 1 )
      goto LABEL_178;
    v23 = HIDWORD(v103);
    LODWORD(v24) = 0;
LABEL_38:
    v25 = v98;
LABEL_39:
    if ( !v25 )
    {
      if ( !(_DWORD)v103 )
      {
        v24 = src[(int)v24] == 13 ? (int)v24 + 1LL : (int)v24;
        if ( (int)v24 < v13 && src[v24] == 10 )
          LODWORD(v24) = v24 + 1;
      }
      if ( (int)v24 >= v13 )
      {
        v30 = v24;
        if ( (int)v24 < v13 )
          goto LABEL_54;
LABEL_60:
        LODWORD(v24) = v30;
        if ( v30 >= v13 )
          goto LABEL_130;
      }
      else
      {
        v26 = *_ctype_b_loc();
        v27 = (unsigned int)v103;
        v28 = (unsigned int)v13 - (__int64)(int)v24;
        v29 = &src[(int)v24];
        v30 = v24;
        while ( v27 <= 0x1E )
        {
          v31 = (unsigned __int8)*v29;
          if ( (v26[v31] & 0x1000) == 0 )
            break;
          v104[v27] = v31;
          v104[++v27] = 0;
          --v28;
          ++v30;
          ++v29;
          if ( !v28 )
          {
            LODWORD(v98) = 0;
            LODWORD(v103) = v13 + v103 - v24;
            HIDWORD(v103) = v23;
            goto LABEL_178;
          }
        }
        LODWORD(v103) = v27;
        if ( v30 >= v13 )
          goto LABEL_60;
LABEL_54:
        v32 = v30;
        v33 = -v30;
        v34 = &src[v32];
        v35 = (unsigned int)v13 - v32;
        while ( 1 )
        {
          v36 = (unsigned __int8)*v34;
          if ( v36 == 10 || v36 == 13 )
            break;
          --v33;
          --v35;
          ++v34;
          if ( !v35 )
            goto LABEL_130;
        }
        LODWORD(v24) = (v36 == 13) - v33;
        if ( (int)v24 >= v13 )
        {
LABEL_130:
          LODWORD(v98) = 0;
          HIDWORD(v103) = v23;
          goto LABEL_178;
        }
      }
      v25 = 0;
      if ( src[(int)v24] == 10 )
      {
        if ( (_DWORD)v103 )
        {
          v37 = 0;
          v38 = (unsigned int)v103;
          v39 = v104;
          do
          {
            v41 = (unsigned __int8)*v39++;
            v40 = v41;
            v42 = (unsigned int)(v41 - 0x30) >= 0xA;
            v43 = v41 | 0x20;
            if ( (unsigned int)(v41 - 0x30) >= 0xA )
              v44 = -87;
            else
              v44 = -48;
            if ( v42 )
              v40 = v43;
            --v38;
            v37 = v44 + 16 * v37 + v40;
          }
          while ( v38 );
          v104[0] = 0;
          if ( v37 )
          {
            LODWORD(v24) = v24 + 1;
            v99 = v37;
            v94 = size;
            LODWORD(v103) = 0;
            goto LABEL_76;
          }
        }
        else
        {
          v104[0] = 0;
        }
        HIDWORD(v103) = v23;
        break;
      }
      goto LABEL_39;
    }
    v99 = v25;
    v94 = size;
LABEL_76:
    if ( v99 >= v13 - (int)v24 )
      v45 = v13 - v24;
    else
      v45 = v99;
    v46 = v45 + v23;
    HIDWORD(v103) = v45 + v23;
    if ( v45 + v23 <= v97 )
    {
      v48 = ptr;
    }
    else
    {
      if ( (int)v100 >= v46 )
        v47 = (unsigned int)v100;
      else
        v47 = (unsigned int)v46;
      v97 = v47;
      v48 = (char *)realloc(ptr, v47);
      if ( !v48 )
      {
        free(ptr);
        free(v6);
        result = 0LL;
        *v94 = -1;
        return result;
      }
    }
    ptr = v48;
    memcpy(&v48[v23], &src[(int)v24], v45);
    LODWORD(v24) = v45 + v24;
    v23 += v45;
    v49 = v99 - v45;
    size = v94;
    LODWORD(v98) = v49;
    if ( (int)v24 < v13 )
      goto LABEL_38;
LABEL_178:
    v11 = v100;
  }
  while ( (int)v100 < 1 || SHIDWORD(v103) < (int)v100 );
  free(v6);
  *size = HIDWORD(v103);
  if ( HIDWORD(v103) )
    return ptr;
  free(ptr);
  return 0LL;
}
