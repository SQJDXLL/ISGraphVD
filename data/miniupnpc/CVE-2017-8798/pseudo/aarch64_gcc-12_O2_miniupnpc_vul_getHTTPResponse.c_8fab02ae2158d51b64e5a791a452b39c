void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // x22
  int v4; // w19
  unsigned int v5; // w23
  unsigned int v6; // w28
  int v7; // w27
  unsigned int v8; // w6
  char *v9; // x0
  int v10; // w6
  int v11; // w3
  int v12; // w0
  int v13; // w26
  _BOOL4 v14; // w1
  int v16; // w1
  int v17; // w2
  int v18; // w9
  int v19; // w10
  int v20; // w2
  int v21; // w1
  int v22; // w3
  int v23; // w0
  __int64 v24; // x27
  bool v25; // cc
  int v26; // w24
  bool v27; // zf
  int v28; // w26
  unsigned int v29; // w24
  int v30; // w25
  int v31; // w2
  size_t v32; // x1
  char *v33; // x8
  char *v34; // x1
  int v35; // w3
  unsigned int v38; // w3
  unsigned int v39; // w2
  int v40; // w6
  char *v41; // x0
  const char *v44; // x25
  size_t v45; // x2
  int v46; // w0
  int v47; // w0
  int v48; // w0
  int v49; // w0
  const unsigned __int16 *v51; // x7
  unsigned int v52; // w6
  __int64 j; // x2
  char *v55; // x2
  int v56; // w1
  int v58; // w0
  char *v59; // x6
  int v60; // t1
  int v61; // w19
  int v62; // w0
  int v63; // w0
  bool v65; // zf
  const char *v66; // x4
  __int64 v67; // x25
  int v68; // w0
  unsigned int v69; // w6
  char *v70; // x0
  int v71; // w0
  __int64 v72; // x0
  int v73; // w2
  char *v75; // x0
  char *content_buf; // [xsp+68h] [xbp+68h]
  unsigned int content_buf_len; // [xsp+74h] [xbp+74h]
  int content_buf_lena; // [xsp+74h] [xbp+74h]
  unsigned int header_buf_used; // [xsp+78h] [xbp+78h]
  size_t header_buf_useda; // [xsp+78h] [xbp+78h]
  const char *header_buf_usedb; // [xsp+78h] [xbp+78h]
  int content_length; // [xsp+80h] [xbp+80h]
  int endofheaders; // [xsp+84h] [xbp+84h]
  int endofheadersa; // [xsp+84h] [xbp+84h]
  int endofheadersb; // [xsp+84h] [xbp+84h]
  int chunked; // [xsp+90h] [xbp+90h]
  int chunkeda; // [xsp+90h] [xbp+90h]
  int i; // [xsp+98h] [xbp+98h]
  int ia; // [xsp+98h] [xbp+98h]
  int ib; // [xsp+98h] [xbp+98h]
  int ic; // [xsp+98h] [xbp+98h]
  int v94; // [xsp+9Ch] [xbp+9Ch]
  int v95; // [xsp+9Ch] [xbp+9Ch]
  unsigned int header_buf_len; // [xsp+A0h] [xbp+A0h]
  int valuestart; // [xsp+A4h] [xbp+A4h]
  char chunksize_buf[32]; // [xsp+B8h] [xbp+B8h] BYREF
  char buf[2048]; // [xsp+D8h] [xbp+D8h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800uLL);
  if ( !v3 )
    goto LABEL_183;
  content_buf = (char *)malloc(0x800uLL);
  if ( !content_buf )
  {
    free(v3);
LABEL_183:
    content_buf = 0LL;
    *size = -1;
    return content_buf;
  }
  v4 = 0;
  v5 = 0;
  v6 = 0;
  content_buf_len = 2048;
  header_buf_used = 0;
  endofheaders = 0;
  chunked = 0;
  header_buf_len = 2048;
  content_length = -1;
  chunksize_buf[0] = 0;
  while ( 1 )
  {
    v7 = receivedata((unsigned int)s, buf, 2048LL, 5000LL, 0LL);
    if ( v7 <= 0 )
      goto LABEL_177;
    if ( endofheaders )
      break;
    v8 = v7 + header_buf_used;
    if ( v7 + header_buf_used > header_buf_len )
    {
      v9 = (char *)realloc(v3, v8);
      v8 = v7 + header_buf_used;
      if ( !v9 )
      {
        free(v3);
        v75 = content_buf;
        goto LABEL_181;
      }
      v3 = v9;
      header_buf_len = v7 + header_buf_used;
    }
    i = v8;
    memcpy(&v3[header_buf_used], buf, v7);
    v10 = i;
    v11 = i - 1;
    if ( i <= 1 )
    {
      header_buf_used = i;
    }
    else
    {
      v12 = 0;
      do
      {
        while ( 1 )
        {
          v16 = (unsigned __int8)v3[v12];
          v17 = v12 + 1;
          if ( v16 != 13 )
            break;
          if ( v3[v17] == 10 )
          {
            if ( v12 + 2 < i && v3[v12 + 2] == 13 )
            {
              if ( v12 + 3 < i && v3[v12 + 3] == 10 )
              {
                v12 += 4;
                v14 = v12 == 0;
                v13 = v12;
              }
              else
              {
                v12 += 4;
                v13 = 0;
                v14 = 1;
              }
            }
            else
            {
              v12 += 3;
              v13 = 0;
              v14 = 1;
            }
            goto LABEL_15;
          }
LABEL_21:
          v12 += 2;
          v13 = 0;
          if ( v11 <= v12 )
            goto LABEL_22;
        }
        if ( v16 == 10 )
        {
          if ( v3[v17] != 10 )
            goto LABEL_21;
          v12 += 2;
          v14 = v12 == 0;
          v13 = v12;
        }
        else
        {
          ++v12;
          v13 = 0;
          v14 = 1;
        }
LABEL_15:
        ;
      }
      while ( v14 && v11 > v12 );
LABEL_22:
      if ( v13 )
      {
        v18 = v13 - 1;
        if ( v13 - 1 > 0 )
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v22 = 0;
          do
          {
            v23 = (unsigned __int8)v3[v22];
            v24 = v22;
            v25 = v21 > 0 && v20 <= v21;
            v26 = v22 + 1;
            if ( v25 )
            {
              if ( v23 == 58 )
              {
                v72 = v26;
                while ( 1 )
                {
                  v19 = v72;
                  if ( (int)v72 - 1 >= v18 )
                    break;
                  v73 = (unsigned __int8)v3[v72++];
                  if ( v73 != 32 && v73 != 9 )
                  {
                    v20 = v22;
                    v22 = v19;
                    goto LABEL_36;
                  }
                }
                v20 = v22;
                v22 = v72;
                continue;
              }
              v27 = v23 == 10 || v23 == 13;
              if ( v27 )
                goto LABEL_87;
            }
            else if ( v23 == 13 || v23 == 10 )
            {
              if ( v21 )
                v65 = 1;
              else
                v65 = status_code == 0LL;
              if ( !v65 )
              {
                if ( v22 > 0 )
                {
                  v66 = v3 + 1;
                  v67 = (__int64)&v3[v22 + 1];
                  while ( 1 )
                  {
                    if ( *(v66 - 1) == 32 )
                    {
                      if ( (*status_code & 0x80000000) == 0 )
                        goto LABEL_87;
                      header_buf_usedb = v66;
                      endofheadersb = v10;
                      ic = v22;
                      v95 = v18;
                      v68 = strtol(v66, 0uLL, 10);
                      v66 = header_buf_usedb;
                      v10 = endofheadersb;
                      v22 = ic;
                      v18 = v95;
                      *status_code = v68;
                    }
                    if ( (const char *)v67 == ++v66 )
                      goto LABEL_87;
                  }
                }
                do
                {
LABEL_90:
                  v49 = (unsigned __int8)v3[v24];
                  v21 = v24;
                  v22 = v24 + 1;
                  if ( v49 != 13 && v49 != 10 )
                  {
                    v20 = v24;
                    v19 = 0;
                    goto LABEL_36;
                  }
                  ++v24;
                }
                while ( v10 > (int)v24 );
                v71 = v21 + 2;
                v20 = v22;
                v21 = v22;
                v19 = 0;
                v22 = v71;
                continue;
              }
              valuestart = v19;
              if ( v20 > v21 && v20 < v19 )
              {
                v44 = &v3[v21];
                v45 = v20 - v21;
                header_buf_useda = (int)v45;
                endofheadersa = v10;
                ib = v22;
                v94 = v18;
                if ( strncasecmp(v44, "content-length", v45) )
                {
                  v46 = strncasecmp(v44, "transfer-encoding", header_buf_useda);
                  v10 = endofheadersa;
                  v22 = ib;
                  v18 = v94;
                  if ( !v46 )
                  {
                    v47 = strncasecmp(&v3[valuestart], "chunked", 7uLL);
                    v10 = endofheadersa;
                    v27 = v47 == 0;
                    v22 = ib;
                    v48 = chunked;
                    v18 = v94;
                    if ( v27 )
                      v48 = 1;
                    chunked = v48;
                  }
                  goto LABEL_87;
                }
                content_length = strtol(&v3[valuestart], 0uLL, 10);
                v10 = endofheadersa;
                v22 = ib;
                v18 = v94;
                if ( endofheadersa > ib )
                  goto LABEL_90;
              }
              else
              {
LABEL_87:
                if ( v10 > v22 )
                  goto LABEL_90;
              }
              v20 = v22;
              v21 = v22;
              v19 = 0;
              v22 = v26;
              continue;
            }
            ++v22;
LABEL_36:
            ;
          }
          while ( v18 > v22 );
        }
        v7 = v10 - v13;
        header_buf_used = v10;
        endofheaders = v13;
        memcpy(buf, &v3[v13], v10 - v13);
        if ( chunked )
        {
          if ( v7 > 0 )
            goto LABEL_39;
LABEL_53:
          v35 = v5;
LABEL_54:
          if ( content_length > 0 && content_length <= v35 )
          {
end_of_stream:
            content_buf_lena = v35;
            free(v3);
            *size = content_buf_lena;
            if ( v5 )
              return content_buf;
LABEL_178:
            free(content_buf);
            return 0LL;
          }
        }
        else
        {
LABEL_64:
          v38 = v7 + v5;
          v39 = v7 + v5;
          if ( content_length <= 0 )
          {
            if ( content_buf_len < v38 )
            {
              v69 = v7 + v5;
              if ( content_length >= (int)v38 )
              {
LABEL_160:
                v69 = v7 + v5;
                v39 = content_length;
              }
LABEL_156:
              content_buf_len = v39;
              chunkeda = v69;
              v70 = (char *)realloc(content_buf, v39);
              if ( !v70 )
                goto LABEL_180;
              v40 = chunkeda;
              v38 = chunkeda;
              content_buf = v70;
              goto LABEL_67;
            }
            goto LABEL_161;
          }
          if ( content_length >= (int)v38 )
          {
            if ( content_buf_len < v38 )
              goto LABEL_160;
LABEL_161:
            v40 = v7 + v5;
            goto LABEL_67;
          }
          v38 = content_length;
          v40 = content_length;
          v7 = content_length - v5;
          if ( content_length > content_buf_len )
          {
            v69 = content_length;
            v39 = content_length;
            goto LABEL_156;
          }
LABEL_67:
          chunked = 0;
          ia = v38;
          v41 = &content_buf[v5];
          v5 = v40;
          memcpy(v41, buf, v7);
          v35 = ia;
          if ( content_length > 0 && content_length <= ia )
            goto end_of_stream;
        }
      }
      else
      {
        header_buf_used = i;
        endofheaders = 0;
      }
    }
  }
  if ( !chunked )
    goto LABEL_64;
LABEL_39:
  v28 = 0;
  while ( 2 )
  {
    if ( v4 )
    {
      if ( v7 - v28 > v4 )
        v29 = v4;
      else
        v29 = v7 - v28;
      v30 = v5 + v29;
      if ( v5 + v29 <= content_buf_len )
        goto LABEL_131;
      goto LABEL_45;
    }
    while ( 2 )
    {
      if ( !v6 )
      {
        if ( buf[v28] == 13 )
          ++v28;
        if ( v28 >= v7 )
          goto LABEL_53;
        if ( buf[v28] != 10 )
          goto LABEL_96;
        ++v28;
      }
      if ( v28 >= v7 )
      {
        v35 = v5;
        goto LABEL_54;
      }
LABEL_96:
      v51 = *_ctype_b_loc();
      v52 = v7 + v6 - v28;
      for ( j = v28 + 1; ; ++j )
      {
        if ( (v51[(unsigned __int8)buf[j - 1]] & 0x1000) == 0 || v6 > 0x1E )
        {
          v28 = j - 1;
          goto LABEL_105;
        }
        chunksize_buf[v6] = buf[j - 1];
        chunksize_buf[v6 + 1] = 0;
        if ( v6 + 1 == v52 )
          break;
        ++v6;
      }
      v28 = j;
      v6 = v52;
LABEL_105:
      if ( v28 >= v7 )
        goto LABEL_53;
      v55 = &buf[v28];
      while ( 1 )
      {
        v56 = (unsigned __int8)*v55;
        if ( v56 == 10 || v56 == 13 )
          break;
        ++v28;
        ++v55;
        if ( v28 == v7 )
          goto LABEL_53;
      }
      if ( v7 <= v28 )
        goto LABEL_53;
      v58 = (unsigned __int8)buf[v28];
      if ( v58 == 13 )
      {
        if ( ++v28 >= v7 )
          goto LABEL_53;
        v58 = (unsigned __int8)buf[v28];
      }
      if ( v58 != 10 )
        continue;
      break;
    }
    if ( !v6 )
      goto LABEL_177;
    v59 = chunksize_buf;
    v4 = 0;
    do
    {
      v60 = (unsigned __int8)*v59++;
      v61 = 16 * v4;
      v62 = v61 - 0x57;
      v4 = v61 - 0x30 + v60;
      v63 = v62 + (v60 | 0x20);
      if ( (unsigned __int8)(v60 - 0x30) > 9u )
        v4 = v63;
    }
    while ( v59 != &chunksize_buf[v6] );
    chunksize_buf[0] = 0;
    ++v28;
    if ( !v4 )
    {
LABEL_177:
      free(v3);
      *size = v5;
      if ( v5 )
        return content_buf;
      goto LABEL_178;
    }
    v6 = 0;
    if ( v7 - v28 > v4 )
      v29 = v4;
    else
      v29 = v7 - v28;
    v30 = v5 + v29;
    if ( v5 + v29 <= content_buf_len )
    {
LABEL_131:
      v33 = content_buf;
      goto LABEL_52;
    }
LABEL_45:
    if ( v30 <= content_length )
      v31 = content_length;
    else
      v31 = v30;
    if ( v30 <= content_length )
      v32 = (unsigned int)content_length;
    else
      v32 = (unsigned int)v30;
    content_buf_len = v31;
    v33 = (char *)realloc(content_buf, v32);
    if ( v33 )
    {
LABEL_52:
      v34 = &buf[v28];
      v28 += v29;
      content_buf = v33;
      memcpy(&v33[v5], v34, v29);
      v4 -= v29;
      v5 = v30;
      if ( v28 >= v7 )
        goto LABEL_53;
      continue;
    }
    break;
  }
LABEL_180:
  free(content_buf);
  v75 = v3;
LABEL_181:
  free(v75);
  content_buf = 0LL;
  *size = -1;
  return content_buf;
}
