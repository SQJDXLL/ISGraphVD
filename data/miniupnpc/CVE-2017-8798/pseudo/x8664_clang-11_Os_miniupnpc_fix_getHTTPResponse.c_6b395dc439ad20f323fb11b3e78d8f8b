void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // rax
  char *v4; // r13
  char *v5; // rax
  int v6; // eax
  unsigned int v7; // esi
  int v8; // ebp
  unsigned int v9; // r9d
  int v10; // r15d
  int v11; // eax
  int v12; // r12d
  unsigned int v13; // r14d
  char *v14; // rbx
  int v15; // ecx
  char v16; // bl
  __int64 v17; // rsi
  __int64 v18; // rdx
  int v19; // ecx
  int v20; // edi
  int v21; // r9d
  int v22; // ecx
  int v23; // eax
  int v24; // r14d
  int *v25; // rsi
  int v26; // ebx
  char v27; // dl
  int v28; // r8d
  char *v29; // r12
  __int64 v30; // rdx
  __int64 v31; // rbp
  const char *v32; // rbx
  int v33; // edx
  const char *v34; // rbx
  int v35; // eax
  int v36; // ecx
  __int64 v37; // rcx
  char v38; // bl
  __int64 v39; // r10
  __int64 v40; // r14
  unsigned int v41; // ebx
  const unsigned __int16 **v42; // rax
  const unsigned __int16 *v43; // r8
  __int64 v44; // rax
  char *v45; // rsi
  __int64 v46; // rdx
  __int64 v47; // rbx
  __int64 v48; // rax
  bool v49; // cc
  char v50; // cl
  __int64 v51; // rcx
  char *v52; // rdi
  unsigned int v53; // edx
  int v54; // esi
  unsigned __int8 v55; // bl
  int v56; // edx
  int v57; // ebp
  int v58; // esi
  unsigned int v59; // ebx
  unsigned int v60; // ecx
  size_t v61; // rsi
  char *v62; // rax
  unsigned int v63; // edx
  int v64; // ebp
  unsigned int v65; // r14d
  size_t v66; // rbx
  char *v67; // rax
  char *v68; // r12
  char *v70; // rdi
  int ptr; // [rsp+8h] [rbp-8E0h]
  char *ptra; // [rsp+8h] [rbp-8E0h]
  char *v73; // [rsp+10h] [rbp-8D8h]
  unsigned int v74; // [rsp+20h] [rbp-8C8h]
  unsigned int v75; // [rsp+20h] [rbp-8C8h]
  unsigned int v76; // [rsp+24h] [rbp-8C4h]
  unsigned int v77; // [rsp+24h] [rbp-8C4h]
  unsigned int v78; // [rsp+28h] [rbp-8C0h]
  int v79; // [rsp+34h] [rbp-8B4h]
  unsigned int nptr; // [rsp+38h] [rbp-8B0h]
  int v81; // [rsp+40h] [rbp-8A8h]
  int v82; // [rsp+40h] [rbp-8A8h]
  int v83; // [rsp+4Ch] [rbp-89Ch]
  int v85; // [rsp+5Ch] [rbp-88Ch]
  unsigned int v87; // [rsp+64h] [rbp-884h]
  __int64 v89; // [rsp+70h] [rbp-878h]
  size_t v90; // [rsp+78h] [rbp-870h]
  __int64 v91; // [rsp+80h] [rbp-868h]
  char v92[32]; // [rsp+90h] [rbp-858h] BYREF
  char src[2104]; // [rsp+B0h] [rbp-838h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800uLL);
  if ( !v3 )
    goto LABEL_146;
  v4 = v3;
  v5 = (char *)malloc(0x800uLL);
  if ( !v5 )
  {
    free(v4);
LABEL_146:
    *size = -1;
    return 0LL;
  }
  v73 = v5;
  v92[0] = 0;
  v87 = 2048;
  v6 = -1;
  v83 = 0;
  v7 = 0;
  v8 = 0;
  v89 = 2048LL;
  v78 = 0;
  v9 = 0;
  v10 = 0;
  do
  {
    v74 = v7;
    v76 = v9;
    v79 = v6;
    v11 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
    if ( v11 <= 0 )
      break;
    v12 = v11;
    v13 = v8;
    v14 = v4;
LABEL_8:
    if ( v10 )
    {
      v8 = v13;
      v4 = v14;
      goto LABEL_83;
    }
    v8 = v12 + v13;
    if ( v12 + v13 <= v87 )
    {
      v4 = v14;
    }
    else
    {
      v4 = (char *)realloc(v14, (unsigned int)v8);
      v87 = v12 + v13;
      if ( !v4 )
      {
        free(v14);
        v70 = v73;
        goto LABEL_148;
      }
    }
    memcpy(&v4[v13], src, (unsigned int)v12);
    if ( v8 < 2 )
      goto LABEL_34;
    v15 = 0;
    do
    {
      v16 = v4[v15];
      if ( v16 == 10 )
      {
        LODWORD(v17) = v15 + 1;
        v10 = v15 + 2;
        if ( v4[v15 + 1] != 10 )
          v10 = 0;
        goto LABEL_31;
      }
      if ( v16 != 13 )
      {
        LODWORD(v17) = v15;
        goto LABEL_30;
      }
      if ( v4[v15 + 1] != 10 )
      {
        LODWORD(v18) = v15 + 1;
LABEL_29:
        LODWORD(v17) = v18;
LABEL_30:
        v10 = 0;
        goto LABEL_31;
      }
      v17 = v15 + 2LL;
      if ( v15 + 2 >= v8 )
        goto LABEL_30;
      v10 = 0;
      if ( v4[v17] == 13 )
      {
        v18 = v15 + 3LL;
        if ( (int)v18 >= v8 )
          goto LABEL_29;
        v19 = v15 + 4;
        if ( v4[v18] != 10 )
          v19 = 0;
        LODWORD(v17) = v18;
        v10 = v19;
      }
LABEL_31:
      v15 = v17 + 1;
    }
    while ( (int)v17 + 1 < v8 - 1 && !v10 );
    if ( !v10 )
    {
LABEL_34:
      v10 = 0;
      v12 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
      v13 = v8;
      v14 = v4;
      if ( v12 <= 0 )
        break;
      goto LABEL_8;
    }
    if ( v10 >= 2 )
    {
      v20 = v10 - 1;
      v91 = v8;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = status_code;
      v81 = v8;
      while ( 1 )
      {
        v26 = v24;
        v27 = v4[v24];
        if ( v27 == 58 && v23 > 0 && v22 <= v23 )
        {
          if ( v24 < v20 )
          {
            v28 = v24;
            v29 = &v4[v24 + 1];
            v30 = 0LL;
            while ( *v29 == 32 || *v29 == 9 )
            {
              --v30;
              ++v29;
              if ( v24 - (__int64)(v10 - 1) == v30 )
              {
                v20 = v10 - 1;
                v24 = v10 - 1;
                v22 = v28;
                v21 = v10;
                goto LABEL_81;
              }
            }
            v24 -= v30;
            v21 = v24 + 1;
            v22 = v28;
LABEL_80:
            v20 = v10 - 1;
            goto LABEL_81;
          }
          v21 = v24 + 1;
          goto LABEL_78;
        }
        if ( v27 != 13 && v27 != 10 )
          goto LABEL_81;
        if ( !v25 || v23 )
          break;
        if ( v24 > 0 )
        {
          ptr = v24;
          v31 = (unsigned int)v24;
          v32 = v4 + 1;
          do
          {
            if ( *(v32 - 1) == 32 )
            {
              if ( *v25 >= 0 )
                break;
              v25 = status_code;
              *status_code = atoi(v32);
            }
            ++v32;
            --v31;
          }
          while ( v31 );
          v8 = v81;
LABEL_70:
          v20 = v10 - 1;
          v26 = ptr;
        }
LABEL_71:
        if ( v24 < v8 )
        {
          v37 = 0LL;
          while ( 1 )
          {
            v38 = v4[v24 + v37];
            if ( v38 != 13 && v38 != 10 )
              break;
            if ( v91 - v24 == ++v37 )
            {
              v21 = 0;
              v24 = v8;
              v23 = v8;
              v22 = v8;
              goto LABEL_80;
            }
          }
          v24 += v37;
          v21 = 0;
          v23 = v24;
          v22 = v24;
          goto LABEL_80;
        }
        v21 = 0;
        v23 = v24;
LABEL_78:
        v22 = v26;
LABEL_81:
        if ( ++v24 >= v20 )
          goto LABEL_82;
      }
      v33 = v22 - v23;
      if ( v22 <= v23 || v21 <= v22 )
        goto LABEL_71;
      v85 = v21;
      ptr = v24;
      v34 = &v4[v23];
      v90 = v33;
      if ( !strncasecmp(v34, "content-length", v33) )
      {
        v79 = atoi(&v4[v85]);
      }
      else if ( !strncasecmp(v34, "transfer-encoding", v90) )
      {
        v35 = strncasecmp(&v4[v85], "chunked", 7uLL);
        v36 = v83;
        if ( !v35 )
          v36 = 1;
        v83 = v36;
      }
      v25 = status_code;
      goto LABEL_70;
    }
LABEL_82:
    v12 = v8 - v10;
    memcpy(src, &v4[v10], v8 - v10);
LABEL_83:
    v9 = v76;
    v7 = v74;
    v82 = v8;
    if ( v83 )
    {
      if ( v12 > 0 )
      {
        v39 = (unsigned int)v12;
        LODWORD(v40) = 0;
        ptra = v73;
LABEL_86:
        nptr = v78;
        do
        {
          if ( v7 )
          {
            v52 = ptra;
            goto LABEL_116;
          }
          if ( !v9 )
          {
            LODWORD(v40) = (src[(int)v40] == 13) + (_DWORD)v40;
            if ( (int)v40 < v12 )
              LODWORD(v40) = v40 + (src[(int)v40] == 10);
          }
          if ( (int)v40 < v12 )
          {
            v41 = v9;
            v42 = _ctype_b_loc();
            v39 = (unsigned int)v12;
            v43 = *v42;
            v44 = v41;
            v9 = v12 + v41 - v40;
            v45 = &v92[v41 + 1];
            v46 = 0LL;
            while ( (unsigned __int64)(v44 + v46) <= 0x1E )
            {
              v47 = src[(int)v40 + v46];
              if ( (v43[v47] & 0x1000) == 0 )
                break;
              *(_WORD *)&v45[v46++ - 1] = (unsigned __int8)v47;
              if ( (unsigned int)v12 - (__int64)(int)v40 == v46 )
              {
                LODWORD(v40) = v12;
                goto LABEL_98;
              }
            }
            LODWORD(v40) = v46 + v40;
            v9 = v46 + v44;
LABEL_98:
            v8 = v82;
          }
          v48 = (int)v40;
          v49 = (int)v40 < v39;
          v40 = v39;
          if ( !v49 )
            v40 = v48;
          while ( v40 != v48 )
          {
            v50 = src[v48++];
            if ( v50 == 13 || v50 == 10 )
            {
              LODWORD(v40) = v48 - 1;
              if ( v50 == 13 )
                LODWORD(v40) = v48;
              break;
            }
          }
          if ( v12 <= (int)v40 )
          {
            v7 = 0;
            v73 = ptra;
            goto LABEL_142;
          }
          v7 = 0;
        }
        while ( src[(int)v40] != 10 );
        if ( !v9 )
        {
          v92[0] = 0;
          v73 = ptra;
          break;
        }
        v51 = 0LL;
        v7 = 0;
        v52 = ptra;
        do
        {
          v53 = v7;
          v54 = v92[v51];
          v55 = v54 - 48;
          v56 = 16 * v53;
          v57 = v54 - 48;
          v58 = (v54 | 0x20) - 87;
          if ( v55 < 0xAu )
            v58 = v57;
          v7 = v56 + v58;
          ++v51;
        }
        while ( v9 != v51 );
        v92[0] = 0;
        if ( !v7 )
        {
          v73 = ptra;
          break;
        }
        LODWORD(v40) = v40 + 1;
        v9 = 0;
        v8 = v82;
LABEL_116:
        v77 = v9;
        v59 = v12 - v40;
        v75 = v7;
        if ( v7 < v12 - (int)v40 )
          v59 = v7;
        v60 = v59 + v78;
        v78 += v59;
        if ( v59 + nptr <= (unsigned int)v89 )
        {
          v62 = v52;
        }
        else
        {
          v61 = (unsigned int)v79;
          if ( v79 < v60 )
            v61 = v60;
          if ( v79 < 0 )
            v61 = v60;
          v89 = v61;
          v62 = (char *)realloc(v52, v61);
          if ( !v62 )
            goto LABEL_154;
        }
        v73 = v62;
        memcpy(&v62[nptr], &src[(int)v40], v59);
        LODWORD(v40) = v59 + v40;
        v7 = v75 - v59;
        ptra = v73;
        v9 = v77;
        v39 = (unsigned int)v12;
        if ( (int)v40 < v12 )
          goto LABEL_86;
      }
    }
    else
    {
      v63 = v78;
      v64 = v79 - v78;
      if ( v12 + v78 <= v79 )
        v64 = v12;
      if ( v79 <= 0 )
        v64 = v12;
      v65 = v78 + v64;
      v66 = v89;
      if ( v78 + v64 <= (unsigned int)v89 )
      {
        v68 = v73;
      }
      else
      {
        v66 = (unsigned int)v79;
        if ( v79 < v65 )
          v66 = v65;
        if ( v79 < 0 )
          v66 = v65;
        v67 = (char *)realloc(v73, v66);
        v63 = v78;
        v68 = v67;
        if ( !v67 )
        {
          v52 = v73;
LABEL_154:
          free(v52);
          v70 = v4;
LABEL_148:
          free(v70);
          *size = -1;
          return 0LL;
        }
      }
      v89 = v66;
      memcpy(&v68[v63], src, v64);
      v73 = v68;
      v78 += v64;
      v8 = v82;
      v9 = v76;
      v7 = v74;
    }
LABEL_142:
    v6 = v79;
  }
  while ( v79 <= 0 || v78 < v79 );
  free(v4);
  *size = v78;
  if ( !v78 )
  {
    free(v73);
    return 0LL;
  }
  return v73;
}
