void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  void *result; // x0
  char *v6; // x25
  char *v7; // x0
  int v8; // w21
  int v9; // w23
  unsigned int v10; // w16
  int v11; // w20
  unsigned int v12; // w27
  __int64 v13; // x19
  int v14; // w0
  int v15; // w28
  unsigned int v16; // w19
  char *v17; // x22
  int v18; // w8
  int v19; // w9
  int v20; // w11
  __int64 v21; // x11
  __int64 v22; // x10
  int v23; // w11
  int v24; // w9
  int v25; // w14
  int *v26; // x13
  int v27; // w11
  int v28; // w9
  int v29; // w8
  int v30; // w19
  const char *v31; // x22
  int v32; // w10
  __int64 v33; // x28
  __int64 v34; // x9
  int v35; // w12
  int v36; // w10
  const char *v37; // x22
  size_t v38; // x28
  int v39; // w0
  int v40; // w8
  int v41; // w0
  char *v42; // x8
  __int64 v43; // x9
  int v44; // w10
  int v45; // w28
  int v46; // w10
  int v47; // w13
  __int64 v48; // x9
  int v49; // w12
  int v50; // w10
  const char *v51; // x22
  size_t v52; // x26
  int v53; // w0
  int v54; // w8
  char *v55; // x8
  __int64 v56; // x9
  int v57; // w10
  int v58; // w22
  __int64 v59; // x26
  unsigned int v60; // w21
  const unsigned __int16 **v61; // x0
  const unsigned __int16 *v62; // x10
  __int64 v63; // x8
  __int64 v64; // x14
  char *v65; // x15
  __int64 v66; // x8
  int v67; // w9
  __int64 v68; // x8
  char *v69; // x9
  int v70; // t1
  int v71; // w11
  int v72; // w10
  unsigned int v73; // w22
  int v74; // w9
  size_t v75; // x1
  char *v76; // x0
  unsigned int v77; // w11
  int v79; // w22
  int v80; // w19
  size_t v81; // x28
  char *v82; // x0
  char *v83; // x0
  char *v84; // x0
  int v85; // [xsp+4h] [xbp-89Ch]
  int v86; // [xsp+4h] [xbp-89Ch]
  __int64 v87; // [xsp+28h] [xbp-878h]
  int v88; // [xsp+28h] [xbp-878h]
  int v89; // [xsp+34h] [xbp-86Ch]
  int *v90; // [xsp+38h] [xbp-868h]
  int v91; // [xsp+44h] [xbp-85Ch]
  unsigned int v92; // [xsp+48h] [xbp-858h]
  char *ptr; // [xsp+50h] [xbp-850h]
  unsigned int v94; // [xsp+58h] [xbp-848h]
  unsigned int v95; // [xsp+58h] [xbp-848h]
  int v96; // [xsp+5Ch] [xbp-844h]
  __int64 v97; // [xsp+60h] [xbp-840h]
  char v99[32]; // [xsp+78h] [xbp-828h] BYREF
  char src[2056]; // [xsp+98h] [xbp-808h] BYREF

  if ( status_code )
    *status_code = -1;
  result = malloc(0x800uLL);
  if ( !result )
    goto LABEL_181;
  v6 = (char *)result;
  v7 = (char *)malloc(0x800uLL);
  if ( !v7 )
  {
    free(v6);
    result = 0LL;
LABEL_181:
    *size = -1;
    return result;
  }
  v90 = size;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 2048;
  v13 = 0xFFFFFFFFLL;
  v91 = 0;
  v96 = 0;
  v99[0] = 0;
  v92 = 2048;
  ptr = v7;
  v89 = s;
  while ( 1 )
  {
    while ( 1 )
    {
      v94 = v10;
      v14 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
      if ( v14 < 1 )
        goto end_of_stream;
      v15 = v14;
      v97 = v13;
      v16 = v9;
      v17 = v6;
      while ( 2 )
      {
        if ( v11 )
        {
          v9 = v16;
          v6 = v17;
        }
        else
        {
          v9 = v15 + v16;
          if ( v15 + v16 <= v12 )
          {
            v6 = v17;
          }
          else
          {
            v6 = (char *)realloc(v17, (unsigned int)v9);
            v12 = v15 + v16;
            if ( !v6 )
            {
              free(v17);
              v83 = ptr;
LABEL_182:
              free(v83);
              result = 0LL;
              *v90 = -1;
              return result;
            }
          }
          memcpy(&v6[v16], src, (unsigned int)v15);
          v18 = v9 - 1;
          if ( v9 <= 1 )
            goto LABEL_9;
          v19 = 0;
          while ( 1 )
          {
            v20 = (unsigned __int8)v6[v19];
            if ( v20 == 10 )
            {
              v22 = v19 + 1LL;
              v23 = (unsigned __int8)v6[v22];
              v24 = v19 + 2;
              goto LABEL_27;
            }
            if ( v20 != 13 )
            {
              v11 = 0;
              if ( ++v19 >= v18 )
                goto LABEL_8;
              goto LABEL_18;
            }
            LODWORD(v21) = v19 + 1;
            if ( v6[v19 + 1] != 10 )
              break;
            v21 = v19 + 2LL;
            if ( v19 + 2 >= v9 || v6[v21] != 13 )
              break;
            v22 = v19 + 3LL;
            if ( (int)v22 >= v9 )
            {
              v11 = 0;
              goto LABEL_30;
            }
            v23 = (unsigned __int8)v6[v22];
            v24 = v19 + 4;
LABEL_27:
            if ( v23 == 10 )
              v11 = v24;
            else
              v11 = 0;
LABEL_30:
            v19 = v22 + 1;
            if ( (int)v22 + 1 >= v18 )
              goto LABEL_8;
LABEL_18:
            if ( v11 )
              goto LABEL_8;
          }
          v11 = 0;
          v19 = v21 + 1;
          if ( (int)v21 + 1 < v18 )
            goto LABEL_18;
LABEL_8:
          if ( !v11 )
          {
LABEL_9:
            v15 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
            v11 = 0;
            v16 = v9;
            v17 = v6;
            if ( v15 < 1 )
              goto end_of_stream;
            continue;
          }
          if ( v11 >= 2 )
          {
            v25 = v11 - 1;
            v26 = status_code;
            v87 = v11 - 1;
            v27 = 0;
            v28 = 0;
            v29 = 0;
            if ( status_code )
            {
              v30 = 0;
              v31 = v6 + 1;
              while ( 1 )
              {
                v32 = (unsigned __int8)v6[v30];
                v33 = (unsigned int)v30;
                if ( v32 == 58 && v29 >= 1 && v28 <= v29 )
                {
                  if ( v30 < v25 )
                  {
                    v34 = 0LL;
                    do
                    {
                      v35 = (unsigned __int8)v31[v30 + v34];
                      if ( v35 != 9 && v35 != 32 )
                      {
                        v30 += v34;
                        goto LABEL_39;
                      }
                      ++v34;
                    }
                    while ( v87 - v30 != v34 );
                    v30 = v25;
                    v28 = v33;
                    v27 = v11;
                    goto LABEL_41;
                  }
LABEL_39:
                  v27 = v30 + 1;
                }
                else
                {
                  if ( v32 != 13 && v32 != 10 )
                    goto LABEL_41;
                  if ( !v29 )
                  {
                    if ( v30 < 1 )
                      goto LABEL_69;
                    while ( 1 )
                    {
                      if ( *(v31 - 1) == 32 )
                      {
                        if ( (*v26 & 0x80000000) == 0 )
                        {
LABEL_68:
                          v25 = v11 - 1;
                          LODWORD(v33) = v30;
                          v31 = v6 + 1;
                          goto LABEL_69;
                        }
                        v41 = strtol(v31, 0uLL, 10);
                        v26 = status_code;
                        *status_code = v41;
                      }
                      --v33;
                      ++v31;
                      if ( !v33 )
                        goto LABEL_68;
                    }
                  }
                  v36 = v28 - v29;
                  if ( v28 <= v29 || v27 <= v28 )
                  {
LABEL_69:
                    if ( v30 < v9 )
                      goto LABEL_70;
                  }
                  else
                  {
                    v37 = &v6[v29];
                    v85 = v27;
                    v38 = v36;
                    if ( !strncasecmp(v37, "content-length", v36) )
                    {
                      v97 = strtol(&v6[v85], 0uLL, 10);
                    }
                    else if ( !strncasecmp(v37, "transfer-encoding", v38) )
                    {
                      v39 = strncasecmp(&v6[v85], "chunked", 7uLL);
                      v40 = v91;
                      if ( !v39 )
                        v40 = 1;
                      v91 = v40;
                    }
                    v26 = status_code;
                    v25 = v11 - 1;
                    LODWORD(v33) = v30;
                    v31 = v6 + 1;
                    if ( v30 < v9 )
                    {
LABEL_70:
                      v42 = &v6[v30];
                      v43 = v9 - (__int64)v30;
                      do
                      {
                        v44 = (unsigned __int8)*v42;
                        if ( v44 != 13 && v44 != 10 )
                        {
                          v27 = 0;
                          v29 = v30;
                          v28 = v30;
                          goto LABEL_41;
                        }
                        ++v30;
                        --v43;
                        ++v42;
                      }
                      while ( v43 );
                      v27 = 0;
                      v30 = v9;
                      v29 = v9;
                      v28 = v9;
                      goto LABEL_41;
                    }
                  }
                  v27 = 0;
                  v29 = v30;
                }
                v28 = v33;
LABEL_41:
                if ( ++v30 >= v25 )
                  goto LABEL_112;
              }
            }
            v45 = 0;
            while ( 2 )
            {
              v46 = (unsigned __int8)v6[v45];
              v47 = v45;
              if ( v46 == 58 && v29 >= 1 && v28 <= v29 )
              {
                if ( v45 < v25 )
                {
                  v48 = 0LL;
                  do
                  {
                    v49 = (unsigned __int8)v6[v45 + 1 + v48];
                    if ( v49 != 32 && v49 != 9 )
                    {
                      v45 += v48;
                      goto LABEL_80;
                    }
                    ++v48;
                  }
                  while ( v87 - v45 != v48 );
                  v45 = v25;
                  v28 = v47;
                  v27 = v11;
                  goto LABEL_82;
                }
LABEL_80:
                v27 = v45 + 1;
              }
              else
              {
                if ( v46 != 13 && v46 != 10 )
                  goto LABEL_82;
                v50 = v28 - v29;
                if ( v28 > v29 && v27 > v28 )
                {
                  v51 = &v6[v29];
                  v52 = v50;
                  v86 = v27;
                  if ( !strncasecmp(v51, "content-length", v50) )
                  {
                    v97 = strtol(&v6[v86], 0uLL, 10);
                  }
                  else if ( !strncasecmp(v51, "transfer-encoding", v52) )
                  {
                    v53 = strncasecmp(&v6[v86], "chunked", 7uLL);
                    v54 = v91;
                    if ( !v53 )
                      v54 = 1;
                    v91 = v54;
                  }
                  v25 = v11 - 1;
                  v47 = v45;
                }
                if ( v45 < v9 )
                {
                  v55 = &v6[v45];
                  v56 = v9 - (__int64)v45;
                  do
                  {
                    v57 = (unsigned __int8)*v55;
                    if ( v57 != 13 && v57 != 10 )
                    {
                      v27 = 0;
                      v29 = v45;
                      v28 = v45;
                      goto LABEL_82;
                    }
                    ++v45;
                    --v56;
                    ++v55;
                  }
                  while ( v56 );
                  v27 = 0;
                  v45 = v9;
                  v29 = v9;
                  v28 = v9;
LABEL_82:
                  if ( ++v45 >= v25 )
                    goto LABEL_112;
                  continue;
                }
                v27 = 0;
                v29 = v45;
              }
              break;
            }
            v28 = v47;
            goto LABEL_82;
          }
LABEL_112:
          v15 = v9 - v11;
          memcpy(src, &v6[v11], v9 - v11);
        }
        break;
      }
      v10 = v94;
      if ( v91 )
        break;
      v77 = v96;
      if ( v15 + v96 <= (int)v97 || (int)v97 <= 0 )
        v79 = v15;
      else
        v79 = v97 - v96;
      v80 = v79 + v96;
      if ( v79 + v96 <= v92 )
      {
        v82 = ptr;
      }
      else
      {
        if ( (int)v97 >= v80 )
          v81 = (unsigned int)v97;
        else
          v81 = (unsigned int)v80;
        v82 = (char *)realloc(ptr, v81);
        if ( !v82 )
        {
          v84 = ptr;
LABEL_189:
          free(v84);
          v83 = v6;
          goto LABEL_182;
        }
        v77 = v96;
        v92 = v81;
      }
      ptr = v82;
      memcpy(&v82[v77], src, v79);
      v10 = v94;
      v96 += v79;
      v13 = v97;
      s = v89;
      if ( (int)v97 >= 1 )
      {
LABEL_178:
        if ( v96 >= (int)v13 )
          goto end_of_stream;
      }
    }
    if ( v15 >= 1 )
      break;
LABEL_174:
    v13 = v97;
    s = v89;
    if ( (int)v97 >= 1 )
      goto LABEL_178;
  }
  v58 = v96;
  LODWORD(v59) = 0;
  while ( 1 )
  {
    do
    {
      if ( v8 )
        goto LABEL_149;
      if ( !v10 )
      {
        v59 = src[(int)v59] == 13 ? (int)v59 + 1LL : (int)v59;
        if ( (int)v59 < v15 && src[v59] == 10 )
          LODWORD(v59) = v59 + 1;
      }
      if ( (int)v59 < v15 )
      {
        v60 = v10;
        v61 = _ctype_b_loc();
        v10 = v15 + v60 - v59;
        v62 = *v61;
        v63 = 0LL;
        while ( (unsigned __int64)v60 + v63 <= 0x1E )
        {
          v64 = (unsigned __int8)src[(int)v59 + v63];
          if ( (v62[v64] & 0x1000) == 0 )
            break;
          v65 = &v99[v60 + 1 + v63++];
          *(v65 - 1) = v64;
          *v65 = 0;
          if ( (unsigned int)v15 - (__int64)(int)v59 == v63 )
          {
            LODWORD(v59) = v15;
            goto LABEL_131;
          }
        }
        LODWORD(v59) = v59 + v63;
        v10 = v60 + v63;
      }
LABEL_131:
      v66 = (int)v59;
      if ( (int)v59 <= (__int64)(unsigned int)v15 )
        v59 = (unsigned int)v15;
      else
        v59 = (int)v59;
      while ( v59 != v66 )
      {
        v67 = (unsigned __int8)src[v66++];
        if ( v67 == 13 || v67 == 10 )
        {
          if ( v67 == 13 )
            LODWORD(v59) = v66;
          else
            LODWORD(v59) = v66 - 1;
          break;
        }
      }
      if ( v15 <= (int)v59 )
      {
        v8 = 0;
        v96 = v58;
        goto LABEL_174;
      }
      v8 = 0;
    }
    while ( src[(int)v59] != 10 );
    if ( !v10 )
      break;
    v8 = 0;
    v68 = v10;
    v69 = v99;
    do
    {
      v70 = (unsigned __int8)*v69++;
      v71 = v70 - 0x30;
      v72 = (v70 | 0x20) - 0x57;
      if ( (unsigned int)(v70 - 0x30) < 0xA )
        v72 = v71;
      --v68;
      v8 = v72 + 16 * v8;
    }
    while ( v68 );
    v99[0] = 0;
    if ( !v8 )
      goto LABEL_184;
    v10 = 0;
    LODWORD(v59) = v59 + 1;
LABEL_149:
    v88 = v58;
    if ( v8 >= v15 - (int)v59 )
      v73 = v15 - v59;
    else
      v73 = v8;
    v74 = v73 + v88;
    v95 = v10;
    v96 = v73 + v88;
    if ( v73 + v88 <= v92 )
    {
      v76 = ptr;
    }
    else
    {
      if ( (int)v97 >= v74 )
        v75 = (unsigned int)v97;
      else
        v75 = (unsigned int)v74;
      v92 = v75;
      v76 = (char *)realloc(ptr, v75);
      if ( !v76 )
      {
        v84 = ptr;
        goto LABEL_189;
      }
    }
    ptr = v76;
    memcpy(&v76[v88], &src[(int)v59], v73);
    LODWORD(v59) = v73 + v59;
    v8 -= v73;
    v10 = v95;
    v58 = v73 + v88;
    if ( (int)v59 >= v15 )
      goto LABEL_174;
  }
  v99[0] = 0;
LABEL_184:
  v96 = v58;
end_of_stream:
  free(v6);
  *v90 = v96;
  if ( v96 )
    return ptr;
  free(ptr);
  return 0LL;
}
