char *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  void *v4; // $v0
  char *v5; // $t1
  unsigned int v6; // $fp
  unsigned int v7; // $t0
  unsigned int v8; // $s7
  unsigned int v9; // $s1
  char *v10; // $s2
  int v11; // $s6
  signed int v12; // $s5
  signed int v13; // $a3
  char *v14; // $v0
  signed int v15; // $a3
  int v16; // $t2
  int v17; // $s3
  char *v18; // $v0
  int v19; // $v1
  int v20; // $v0
  bool v21; // dc
  signed int v22; // $v0
  unsigned int v23; // $s3
  char *v24; // $s0
  int *v25; // $s3
  _BYTE *v26; // $v0
  signed int v27; // $v0
  int v28; // $t5
  int v29; // $t4
  int *v30; // $s6
  int v31; // $a2
  int v32; // $a1
  int v33; // $s7
  int v34; // $s1
  int v35; // $s3
  char *v36; // $s2
  char *v37; // $fp
  int v38; // $v0
  int v39; // $s0
  _BOOL4 v40; // $v0
  unsigned int v41; // $s6
  char *v42; // $fp
  signed int v43; // $s1
  signed int v44; // $s2
  size_t v45; // $s5
  char *v46; // $s4
  size_t v47; // $s7
  int v48; // $a0
  char *v49; // $v0
  unsigned int v50; // $v1
  char *v51; // $a1
  unsigned int v52; // $a2
  size_t v53; // $s0
  int v54; // $v0
  _BOOL4 v55; // $v0
  const unsigned __int16 *v56; // $t3
  unsigned int v57; // $v1
  char *v58; // $s0
  unsigned int v59; // $t4
  unsigned int v60; // $a2
  _BOOL4 v61; // $v0
  int v62; // $a1
  char *v63; // $a1
  _BOOL4 v64; // $v0
  int v65; // $v0
  int v66; // $v0
  _BOOL4 v67; // $v0
  _BOOL4 v68; // $v0
  int v69; // $v0
  int v70; // $v1
  int v71; // $a3
  char *v72; // $a0
  char *v73; // $v1
  int v74; // $a1
  int v75; // $a3
  const char *v76; // $s0
  _BYTE *v77; // $v0
  int v78; // $v0
  char *v79; // $v1
  int v80; // $v1
  int *v81; // $s3
  int *v83; // $s3
  unsigned int content_buf_used_0a; // [sp+24h] [-874h]
  unsigned int content_buf_used_0; // [sp+24h] [-874h]
  unsigned int content_buf_used_0b; // [sp+24h] [-874h]
  unsigned int content_buf_used_0c; // [sp+24h] [-874h]
  unsigned int content_buf_used_0d; // [sp+24h] [-874h]
  int content_length; // [sp+28h] [-870h]
  char *chunksize_buf_index_0; // [sp+2Ch] [-86Ch]
  unsigned int chunksize_buf_index_0a; // [sp+2Ch] [-86Ch]
  unsigned int chunksize_buf_index_0b; // [sp+2Ch] [-86Ch]
  unsigned int chunksize_buf_index_0e; // [sp+2Ch] [-86Ch]
  unsigned int chunksize_buf_index_0c; // [sp+2Ch] [-86Ch]
  unsigned int chunksize_buf_index_0f; // [sp+2Ch] [-86Ch]
  unsigned int chunksize_buf_index_0d; // [sp+2Ch] [-86Ch]
  char *content_buf; // [sp+30h] [-868h]
  int content_buf_used; // [sp+34h] [-864h]
  signed int content_buf_useda; // [sp+34h] [-864h]
  unsigned int content_buf_usedd; // [sp+34h] [-864h]
  unsigned int content_buf_usedb; // [sp+34h] [-864h]
  unsigned int content_buf_usede; // [sp+34h] [-864h]
  unsigned int content_buf_usedc; // [sp+34h] [-864h]
  unsigned int header_buf_used; // [sp+38h] [-860h]
  unsigned int header_buf_useda; // [sp+38h] [-860h]
  char *v106; // [sp+3Ch] [-85Ch]
  int endofheaders; // [sp+40h] [-858h]
  unsigned int header_buf_len; // [sp+44h] [-854h]
  unsigned int chunksize_buf_index; // [sp+48h] [-850h]
  char *v110; // [sp+4Ch] [-84Ch]
  int valuestart; // [sp+50h] [-848h] BYREF
  int *status_codea; // [sp+54h] [-844h]
  char *v113; // [sp+58h] [-840h]
  size_t n; // [sp+5Ch] [-83Ch]
  int *sizea; // [sp+60h] [-838h]
  char *v116; // [sp+64h] [-834h]
  char *v117; // [sp+68h] [-830h]
  _DWORD *v118; // [sp+6Ch] [-82Ch]
  char chunksize_buf[32]; // [sp+74h] [-824h] BYREF
  char buf[2048]; // [sp+94h] [-804h] BYREF
  int v121; // [sp+894h] [-4h]

  v118 = &_stack_chk_guard;
  status_codea = status_code;
  if ( status_code )
    *status_code = -1;
  v4 = malloc(0x800u);
  if ( !v4 )
  {
    *size = -1;
    content_buf = 0;
    goto LABEL_150;
  }
  content_buf_used_0a = (unsigned int)v4;
  content_buf = (char *)malloc(0x800u);
  v5 = (char *)content_buf_used_0a;
  if ( !content_buf )
    goto LABEL_156;
  content_buf_used_0 = 2048;
  header_buf_len = 2048;
  content_length = -1;
  v106 = chunksize_buf;
  v116 = "content-length";
  chunksize_buf[0] = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  header_buf_used = 0;
  v10 = buf;
  v117 = "transfer-encoding";
  v11 = 0;
  sizea = size;
  while ( 1 )
  {
LABEL_6:
    content_buf_used = v7;
    chunksize_buf_index_0 = v5;
    v12 = receivedata(s, v10, 2048, 5000);
    v5 = chunksize_buf_index_0;
    v7 = content_buf_used;
    if ( v12 <= 0 )
      goto end_of_stream;
    if ( v11 )
    {
      if ( header_buf_used )
        break;
LABEL_24:
      v23 = v7 + v12;
      if ( content_length <= 0 )
      {
        v24 = content_buf;
        if ( content_buf_used_0 >= v23 )
          goto LABEL_29;
        content_buf_used_0 = v7 + v12;
      }
      else
      {
        if ( content_length >= v23 )
        {
          v24 = content_buf;
          if ( content_buf_used_0 < v23 )
          {
            content_buf_used_0 = content_length;
            goto LABEL_28;
          }
LABEL_29:
          chunksize_buf_index_0e = (unsigned int)v5;
          memcpy(&v24[v7], v10, v12);
          v5 = (char *)chunksize_buf_index_0e;
          v7 = v23;
          content_buf = v24;
          header_buf_used = 0;
          goto LABEL_30;
        }
        v12 = content_length - v7;
        if ( content_buf_used_0 >= content_length )
        {
          v24 = content_buf;
          v23 = content_length;
          goto LABEL_29;
        }
        v23 = content_length;
        content_buf_used_0 = content_length;
      }
LABEL_28:
      content_buf_usedd = v7;
      chunksize_buf_index_0b = (unsigned int)v5;
      v24 = (char *)realloc(content_buf, content_buf_used_0);
      v5 = (char *)chunksize_buf_index_0b;
      v7 = content_buf_usedd;
      if ( !v24 )
      {
        size = sizea;
        free(content_buf);
        v5 = (char *)chunksize_buf_index_0b;
        goto LABEL_156;
      }
      goto LABEL_29;
    }
    v13 = v12 + v8;
    if ( header_buf_len < v12 + v8 )
    {
      endofheaders = content_buf_used;
      v14 = (char *)realloc(chunksize_buf_index_0, v12 + v8);
      v13 = v12 + v8;
      v7 = endofheaders;
      if ( !v14 )
      {
        v83 = sizea;
        free(chunksize_buf_index_0);
        free(content_buf);
        content_buf = 0;
        *v83 = -1;
        goto LABEL_150;
      }
      header_buf_len = v12 + v8;
      v5 = v14;
    }
    endofheaders = v7;
    content_buf_useda = v13;
    chunksize_buf_index_0a = (unsigned int)v5;
    memcpy(&v5[v8], v10, v12);
    v15 = content_buf_useda;
    v5 = (char *)chunksize_buf_index_0a;
    v7 = endofheaders;
    v16 = content_buf_useda - 1;
    if ( content_buf_useda < 2 )
    {
LABEL_19:
      v8 = content_buf_useda;
      continue;
    }
    v17 = 0;
    v18 = (char *)chunksize_buf_index_0a;
    while ( 1 )
    {
      while ( 1 )
      {
        v19 = *v18;
        v20 = v17 + 1;
        if ( v19 != 13 )
          break;
LABEL_17:
        v21 = *(_BYTE *)(chunksize_buf_index_0a + v20) == 10;
        v22 = v17 + 2;
        if ( v21 )
        {
          v21 = v22 >= content_buf_useda;
          v26 = (_BYTE *)(chunksize_buf_index_0a + v22);
          if ( !v21 && (v21 = *v26 == 13, v27 = v17 + 3, v21) )
          {
            v21 = v27 < content_buf_useda;
            v77 = (_BYTE *)(chunksize_buf_index_0a + v27);
            if ( v21 )
            {
              v17 += 4;
              if ( *v77 == 10 )
                goto LABEL_38;
LABEL_21:
              v18 = (char *)(chunksize_buf_index_0a + v17);
              if ( v17 >= v16 )
              {
                v8 = content_buf_useda;
                goto LABEL_6;
              }
            }
            else
            {
              v17 += 4;
              v18 = (char *)(chunksize_buf_index_0a + v17);
              if ( v17 >= v16 )
              {
                v8 = content_buf_useda;
                goto LABEL_6;
              }
            }
          }
          else
          {
            v17 += 3;
            v18 = (char *)(chunksize_buf_index_0a + v17);
            if ( v17 >= v16 )
            {
              v8 = content_buf_useda;
              goto LABEL_6;
            }
          }
        }
        else
        {
          v17 += 2;
          v18 = (char *)(chunksize_buf_index_0a + v17);
          if ( v17 >= v16 )
            goto LABEL_19;
        }
      }
      while ( v19 != 10 )
      {
        v8 = content_buf_useda;
        if ( v20 >= v16 )
          goto LABEL_6;
        v17 = v20;
        v19 = *(char *)(chunksize_buf_index_0a + v20++);
        if ( v19 == 13 )
          goto LABEL_17;
      }
      v17 += 2;
      if ( *(_BYTE *)(chunksize_buf_index_0a + v20) != 10 )
        goto LABEL_21;
LABEL_38:
      if ( v17 >= v16 )
        break;
      v18 = (char *)(chunksize_buf_index_0a + v17);
      if ( v17 )
      {
        v28 = v17 - 1;
        goto LABEL_41;
      }
    }
    v28 = v17 - 1;
    if ( !v17 )
    {
      v8 = content_buf_useda;
      v11 = 0;
      continue;
    }
LABEL_41:
    v29 = 0;
    if ( v28 <= 0 )
      goto LABEL_51;
    v30 = status_codea;
    chunksize_buf_index_0c = v9;
    endofheaders = v17;
    v110 = v10;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = content_buf_useda;
    content_buf_usedb = v7;
    v35 = v28;
    chunksize_buf_index = v6;
    v36 = v5;
    v37 = v5;
    while ( 2 )
    {
      v38 = *v37;
      v39 = v33 + 1;
      if ( v32 <= 0 )
      {
        if ( v38 != 13 && v38 != 10 )
          goto LABEL_48;
        if ( !v32 && v30 )
        {
          if ( v33 <= 0 )
            goto LABEL_71;
          valuestart = v34;
          v113 = v36;
          v76 = v36 + 1;
          while ( 1 )
          {
            if ( *(v76 - 1) == 32 )
            {
              if ( *v30 >= 0 )
              {
LABEL_66:
                v39 = v33 + 1;
                v34 = valuestart;
                v36 = v113;
                goto LABEL_67;
              }
              *v30 = strtol(v76, 0u, 10);
            }
            if ( ++v76 == &v36[v33 + 1] )
              goto LABEL_66;
          }
        }
        v40 = v33 < v34;
        if ( v32 >= v31 )
          goto LABEL_68;
LABEL_103:
        v68 = v31 < v29;
LABEL_104:
        valuestart = v29;
        if ( v68 )
        {
          n = v31 - v32;
          v113 = &v36[v32];
          if ( strncasecmp(&v36[v32], v116, v31 - v32) )
          {
            if ( !strncasecmp(v113, v117, n) )
            {
              v69 = strncasecmp(&v36[valuestart], "chunked", 7u);
              v70 = header_buf_used;
              if ( !v69 )
                v70 = 1;
              header_buf_used = v70;
              if ( v33 < v34 )
              {
LABEL_71:
                while ( 1 )
                {
                  v54 = *v37;
                  if ( v54 != 13 )
                  {
                    v31 = v33;
                    if ( v54 != 10 )
                      break;
                  }
                  v33 = v39;
                  if ( v39 == v34 )
                  {
                    v33 = v34 + 1;
                    v29 = 0;
                    v31 = v34;
                    v32 = v34;
                    goto LABEL_49;
                  }
                  v37 = &v36[v39++];
                }
              }
              else
              {
                v31 = v33;
              }
              v32 = v33;
              goto LABEL_112;
            }
          }
          else
          {
            content_length = strtol(&v36[valuestart], 0u, 10);
          }
        }
LABEL_67:
        v40 = v33 < v34;
        goto LABEL_68;
      }
      if ( v32 < v31 )
      {
        if ( v38 == 13 )
          goto LABEL_103;
        v21 = v38 != 10;
        v68 = v31 < v29;
        if ( v21 )
          goto LABEL_48;
        goto LABEL_104;
      }
      if ( v38 != 58 )
      {
        if ( v38 == 13 )
          goto LABEL_67;
        v21 = v38 == 10;
        v40 = v33 < v34;
        if ( !v21 )
        {
LABEL_48:
          v33 = v39;
          goto LABEL_49;
        }
LABEL_68:
        v31 = v33;
        if ( v40 )
          goto LABEL_71;
        v32 = v33;
LABEL_112:
        v29 = 0;
        goto LABEL_48;
      }
      v78 = v33;
      if ( v33 >= v35 )
      {
LABEL_144:
        v29 = v78 + 1;
      }
      else
      {
        v79 = &v36[v33];
        while ( 1 )
        {
          v80 = v79[1];
          if ( v80 != 32 )
          {
            v29 = v78 + 1;
            if ( v80 != 9 )
              break;
          }
          v79 = &v36[++v78];
          if ( v35 == v78 )
            goto LABEL_144;
        }
      }
      v31 = v33;
      v33 = v29;
LABEL_49:
      v37 = &v36[v33];
      if ( v33 < v35 )
        continue;
      break;
    }
    v15 = v34;
    v5 = v36;
    v9 = chunksize_buf_index_0c;
    v7 = content_buf_usedb;
    v17 = endofheaders;
    v6 = chunksize_buf_index;
    v10 = v110;
LABEL_51:
    v12 = v15 - v17;
    endofheaders = v7;
    content_buf_usede = v15;
    chunksize_buf_index_0f = (unsigned int)v5;
    memcpy(v10, &v5[v17], v15 - v17);
    v5 = (char *)chunksize_buf_index_0f;
    v7 = endofheaders;
    v8 = content_buf_usede;
    v11 = v17;
    if ( !header_buf_used )
      goto LABEL_24;
    if ( v12 > 0 )
      break;
LABEL_30:
    if ( content_length > 0 && v7 >= content_length )
    {
      content_buf_used_0b = v7;
      v25 = sizea;
      free(v5);
      *v25 = content_buf_used_0b;
      goto LABEL_150;
    }
  }
  header_buf_useda = v8;
  endofheaders = v11;
  chunksize_buf_index_0d = v6;
  v41 = v9;
  v42 = v10;
  v43 = v12;
  v44 = 0;
  v45 = content_buf_used_0;
  v46 = content_buf;
  content_buf_usedc = (unsigned int)v5;
  v47 = v7;
  while ( 2 )
  {
    v50 = v47;
    if ( v41 )
      goto LABEL_61;
    while ( 2 )
    {
      v55 = v44 < v43;
      if ( chunksize_buf_index_0d )
      {
LABEL_77:
        if ( !v55 )
          goto LABEL_97;
      }
      else
      {
        v67 = v44 < v43;
        if ( *((_BYTE *)&valuestart + v44 + 0x44) == 13 )
          v67 = ++v44 < v43;
        if ( !v67 )
          goto LABEL_97;
        if ( *((_BYTE *)&valuestart + v44 + 0x44) == 10 )
        {
          v55 = ++v44 < v43;
          goto LABEL_77;
        }
      }
      v56 = *_ctype_b_loc();
      v57 = chunksize_buf_index_0d;
      v58 = &v106[chunksize_buf_index_0d];
      v59 = v44 - chunksize_buf_index_0d;
      v60 = v43 + chunksize_buf_index_0d - v44;
      do
      {
        v62 = v42[v59 + v57];
        if ( (v56[v62] & 0x10) == 0 )
          break;
        v61 = v44 < v43;
        if ( v57 >= 0x1F )
          goto LABEL_83;
        ++v57;
        *v58 = v62;
        v58[1] = 0;
        ++v44;
        ++v58;
      }
      while ( v57 != v60 );
      v61 = v44 < v43;
LABEL_83:
      if ( !v61 )
        goto LABEL_113;
      v63 = &v42[v44];
      while ( 1 )
      {
        v65 = *v63;
        if ( v65 == 13 )
          break;
        v21 = v65 == 10;
        v64 = v44 < v43;
        if ( v21 )
          goto LABEL_89;
        ++v44;
        ++v63;
        if ( v43 == v44 )
          goto LABEL_113;
      }
      v64 = v44 < v43;
LABEL_89:
      if ( !v64 )
      {
LABEL_113:
        v9 = v41;
        v7 = v47;
        v10 = v42;
        v8 = header_buf_useda;
        v5 = (char *)content_buf_usedc;
        v11 = endofheaders;
        content_buf_used_0 = v45;
        content_buf = v46;
        v6 = v57;
        header_buf_used = 1;
        goto LABEL_30;
      }
      v66 = *((char *)&valuestart + v44 + 0x44);
      if ( v66 == 13 )
      {
        if ( ++v44 >= v43 )
          goto LABEL_113;
        v66 = *((char *)&valuestart + v44 + 0x44);
      }
      if ( v66 != 10 )
      {
        chunksize_buf_index_0d = v57;
        continue;
      }
      break;
    }
    if ( !v57 )
      goto LABEL_147;
    v71 = 0;
    v72 = v106;
    v73 = &v106[v57];
    do
    {
      while ( 1 )
      {
        v74 = *v72;
        v75 = 16 * v71;
        if ( (unsigned __int8)(v74 - 0x30) >= 0xAu )
          break;
        ++v72;
        v71 = v75 - 48 + v74;
        if ( v73 == v72 )
          goto LABEL_122;
      }
      ++v72;
      v71 = (v74 | 0x20) + v75 - 87;
    }
    while ( v73 != v72 );
LABEL_122:
    chunksize_buf[0] = 0;
    ++v44;
    if ( !v71 )
    {
LABEL_147:
      v5 = (char *)content_buf_usedc;
      v7 = v47;
      content_buf = v46;
end_of_stream:
      content_buf_used_0d = v7;
      v81 = sizea;
      free(v5);
      *v81 = content_buf_used_0d;
      if ( !content_buf_used_0d )
      {
        free(content_buf);
        content_buf = 0;
      }
      goto LABEL_150;
    }
    v50 = v47;
    chunksize_buf_index_0d = 0;
    v41 = v71;
LABEL_61:
    v52 = v43 - v44;
    if ( v41 < v43 - v44 )
      v52 = v41;
    v47 += v52;
    v53 = v52;
    if ( v45 >= v47 )
    {
LABEL_59:
      v51 = &v42[v44];
      v44 += v53;
      memcpy(&v46[v50], v51, v53);
      v41 -= v53;
      if ( v44 < v43 )
        continue;
LABEL_97:
      v9 = v41;
      v7 = v47;
      v10 = v42;
      v8 = header_buf_useda;
      v5 = (char *)content_buf_usedc;
      v11 = endofheaders;
      content_buf_used_0 = v45;
      content_buf = v46;
      v6 = chunksize_buf_index_0d;
      header_buf_used = 1;
      goto LABEL_30;
    }
    break;
  }
  v48 = content_length;
  if ( content_length >= 0 )
  {
    if ( content_length < v47 )
      v48 = v47;
    v45 = v48;
  }
  else
  {
    v45 = v47;
  }
  content_buf_used_0c = v50;
  v49 = (char *)realloc(v46, v45);
  v50 = content_buf_used_0c;
  if ( v49 )
  {
    v46 = v49;
    goto LABEL_59;
  }
  size = sizea;
  free(v46);
  v5 = (char *)content_buf_usedc;
LABEL_156:
  free(v5);
  content_buf = 0;
  *size = -1;
LABEL_150:
  if ( v121 != *v118 )
    _stack_chk_fail();
  return content_buf;
}
