void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // rax
  char *v4; // r14
  char *v5; // rax
  int v6; // ebx
  __int64 v7; // rsi
  int v8; // eax
  int v9; // r9d
  unsigned int v10; // r13d
  int v11; // r12d
  char *v12; // rbx
  unsigned int v13; // ebp
  int v14; // eax
  bool v15; // cl
  __int64 v16; // rdi
  int *v17; // r8
  int v18; // edx
  int v19; // ecx
  char v20; // bl
  __int64 v21; // rcx
  unsigned int v22; // edx
  bool v23; // zf
  unsigned int v24; // edx
  __int64 v25; // r12
  int v26; // r9d
  int v27; // ebp
  int v28; // ecx
  int v29; // eax
  int v30; // r13d
  int v31; // esi
  __int64 v32; // rdx
  char v33; // dl
  __int64 v34; // rbx
  const char *v35; // rbp
  bool v36; // cl
  int v37; // eax
  int v38; // edx
  const char *v39; // rbp
  size_t v40; // rbx
  int v41; // eax
  int v42; // ecx
  __int64 v43; // rcx
  char v44; // bl
  int v45; // ebx
  __int64 v46; // rax
  __int64 v47; // r12
  __int64 v48; // rbx
  int v49; // r14d
  unsigned int v50; // r15d
  unsigned __int64 v51; // rbp
  const unsigned __int16 **v52; // rax
  const unsigned __int16 *v53; // r8
  __int64 v54; // rcx
  __int64 v55; // rdi
  char v56; // al
  __int64 v57; // r8
  __int64 v58; // rcx
  int v59; // edx
  int v60; // eax
  unsigned __int8 v61; // bp
  int v62; // edx
  int v63; // edi
  int v64; // eax
  unsigned int v65; // ebp
  int v66; // edx
  size_t v67; // rsi
  char *v68; // rax
  int v69; // ecx
  unsigned int v70; // edx
  int v71; // r14d
  int v72; // ebp
  size_t v73; // rsi
  char *v74; // rax
  char v75; // cl
  int v77; // [rsp+0h] [rbp-8D8h]
  char *v78; // [rsp+0h] [rbp-8D8h]
  int v79; // [rsp+Ch] [rbp-8CCh]
  int v80; // [rsp+Ch] [rbp-8CCh]
  int v81; // [rsp+10h] [rbp-8C8h]
  __int64 v82; // [rsp+18h] [rbp-8C0h]
  __int64 v83; // [rsp+18h] [rbp-8C0h]
  char *ptr; // [rsp+20h] [rbp-8B8h]
  int v85; // [rsp+2Ch] [rbp-8ACh]
  unsigned int v86; // [rsp+30h] [rbp-8A8h]
  int v87; // [rsp+3Ch] [rbp-89Ch]
  __int64 v88; // [rsp+40h] [rbp-898h]
  __int64 v89; // [rsp+40h] [rbp-898h]
  unsigned int v91; // [rsp+50h] [rbp-888h]
  int v92; // [rsp+50h] [rbp-888h]
  int v94; // [rsp+64h] [rbp-874h]
  unsigned int v95; // [rsp+68h] [rbp-870h]
  unsigned int v96; // [rsp+70h] [rbp-868h]
  char v98[32]; // [rsp+80h] [rbp-858h]
  char src[2104]; // [rsp+A0h] [rbp-838h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800uLL);
  if ( !v3 )
    goto LABEL_154;
  v4 = v3;
  v5 = (char *)malloc(0x800uLL);
  if ( !v5 )
  {
    free(v4);
LABEL_154:
    *size = -1;
    return 0LL;
  }
  ptr = v5;
  v98[0] = 0;
  v86 = 2048;
  v6 = -1;
  v87 = 0;
  v88 = 0LL;
  v91 = 0;
  v95 = 2048;
  v81 = 0;
  v85 = 0;
  v7 = 0LL;
  do
  {
    do
    {
LABEL_6:
      v79 = v6;
      do
      {
        v8 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
        if ( v8 <= 0 )
          goto end_of_stream;
        v9 = v8;
        if ( (_DWORD)v7 )
        {
          v46 = v88;
          v6 = v79;
          goto LABEL_82;
        }
        v10 = v8 + v91;
        v77 = v8 + v91;
        if ( v8 + v91 <= v86 )
        {
          v13 = v86;
        }
        else
        {
          v11 = v8;
          v12 = v4;
          v4 = (char *)realloc(v4, v10);
          v7 = 0LL;
          v13 = v10;
          v14 = 0;
          if ( !v4 )
          {
            free(v12);
            free(ptr);
            v7 = 0LL;
            *size = -1;
            v14 = 1;
            v4 = v12;
            v13 = v86;
          }
          v9 = v11;
          if ( v14 )
          {
            v86 = v13;
            continue;
          }
        }
        v11 = v9;
        memcpy(&v4[v91], src, v9);
        v15 = 1;
        v16 = 0LL;
        v17 = status_code;
        if ( v77 >= 2 )
        {
          v16 = 0LL;
          v18 = 0;
          do
          {
            v19 = v18;
            v20 = v4[v18];
            if ( v20 == 10 )
            {
              v23 = v4[v18 + 1] == 10;
              v24 = v18 + 2;
              LODWORD(v21) = v19 + 1;
              if ( v23 )
                v16 = v24;
            }
            else if ( v20 == 13 )
            {
              if ( v4[v18 + 1] == 10 )
              {
                if ( v18 + 2 < v77 && v4[v18 + 2] == 13 )
                {
                  v21 = v18 + 3LL;
                  if ( (int)v21 < v77 )
                  {
                    v22 = v18 + 4;
                    if ( v4[v21] == 10 )
                      v16 = v22;
                  }
                }
                else
                {
                  LODWORD(v21) = v18 + 2;
                }
              }
              else
              {
                LODWORD(v21) = v18 + 1;
              }
            }
            else
            {
              LODWORD(v21) = v18;
            }
            v18 = v21 + 1;
            v15 = (_DWORD)v16 == 0;
          }
          while ( v18 < v77 - 1 && !(_DWORD)v16 );
        }
        v14 = 2;
        if ( v15 )
        {
          v86 = v13;
          v91 = v77;
          v7 = 0LL;
        }
        else
        {
          v96 = v13;
          v82 = v16;
          if ( (int)v16 < 2 )
          {
            v26 = v77;
          }
          else
          {
            v92 = v16 - 1;
            v25 = (int)v16 - 1;
            v26 = v77;
            v27 = 0;
            v28 = 0;
            v29 = 0;
            v30 = 0;
            do
            {
              if ( v29 > 0 && v28 <= v29 && (v32 = v30, v4[v30] == 58) )
              {
                do
                {
                  v36 = v32 < v25 && (v4[v32 + 1] == 32 || v4[v32 + 1] == 9);
                  ++v32;
                }
                while ( v36 );
                v31 = v32 - 1;
                v27 = v32;
              }
              else
              {
                v33 = v4[v30];
                if ( v33 == 13 || v33 == 10 )
                {
                  if ( !v17 || v29 )
                  {
                    v38 = v28 - v29;
                    if ( v28 > v29 && v27 > v28 )
                    {
                      v94 = v27;
                      v39 = &v4[v29];
                      v40 = v38;
                      if ( !strncasecmp(v39, "content-length", v38) )
                      {
                        v79 = atoi(&v4[v94]);
                      }
                      else if ( !strncasecmp(v39, "transfer-encoding", v40) )
                      {
                        v41 = strncasecmp(&v4[v94], "chunked", 7uLL);
                        v42 = v87;
                        if ( !v41 )
                          v42 = 1;
                        v87 = v42;
                      }
                      v17 = status_code;
                      LODWORD(v16) = v82;
LABEL_70:
                      v26 = v77;
                    }
                  }
                  else if ( v30 > 0 )
                  {
                    v34 = (unsigned int)v30;
                    v35 = v4 + 1;
                    while ( 1 )
                    {
                      if ( *(v35 - 1) == 32 )
                      {
                        if ( *v17 >= 0 )
                          goto LABEL_70;
                        v37 = atoi(v35);
                        LODWORD(v16) = v82;
                        v17 = status_code;
                        *status_code = v37;
                      }
                      ++v35;
                      if ( !--v34 )
                        goto LABEL_70;
                    }
                  }
                  v27 = 0;
                  if ( v30 >= v26 )
                  {
LABEL_39:
                    v31 = v30;
                    v29 = v30;
                  }
                  else
                  {
                    v43 = 0LL;
                    do
                    {
                      v44 = v4[v30 + v43];
                      if ( v44 != 13 && v44 != 10 )
                      {
                        v30 += v43;
                        goto LABEL_39;
                      }
                      ++v43;
                    }
                    while ( v77 - (__int64)v30 != v43 );
                    v31 = v26;
                    v29 = v26;
                    v30 = v26;
                  }
                }
                else
                {
                  v31 = v30;
                  v30 = v28;
                }
              }
              v28 = v30;
              v30 = v31 + 1;
            }
            while ( v31 + 1 < v92 );
          }
          v11 = v26 - v16;
          v45 = v26;
          memcpy(src, &v4[(int)v16], v26 - (int)v16);
          v7 = v82;
          v14 = 0;
          v86 = v96;
          v91 = v45;
        }
      }
      while ( v14 == 2 );
      v23 = v14 == 0;
      v46 = v88;
      v9 = v11;
      v6 = v79;
      if ( !v23 )
        return 0LL;
LABEL_82:
      if ( !(_DWORD)v7 )
        continue;
      v78 = v4;
      v83 = v7;
      if ( !v87 )
      {
        v70 = v81;
        v71 = v6 - v81;
        if ( v9 + v81 <= v6 )
          v71 = v9;
        if ( v6 <= 0 )
          v71 = v9;
        v72 = v71 + v81;
        if ( v71 + v81 <= v95 )
        {
          v74 = ptr;
LABEL_149:
          ptr = v74;
          memcpy(&v74[v70], src, v71);
          v81 += v71;
          v7 = v83;
          v4 = v78;
          if ( v6 > 0 )
            break;
          goto LABEL_6;
        }
        v73 = (unsigned int)v6;
        if ( v6 < v72 )
          v73 = (unsigned int)v72;
        v95 = v73;
        v74 = (char *)realloc(ptr, v73);
        if ( v74 )
        {
          v75 = 1;
          v70 = v81;
        }
        else
        {
          free(ptr);
          free(v78);
          *size = -1;
          v75 = 0;
          v70 = v81;
          v74 = ptr;
        }
        if ( v75 )
          goto LABEL_149;
        return 0LL;
      }
      if ( v9 <= 0 )
      {
        v69 = 0;
      }
      else
      {
        v80 = v6;
        v47 = v9;
        LODWORD(v48) = 0;
        v49 = v9;
        while ( 2 )
        {
          v50 = v81;
          LODWORD(v51) = v85;
          while ( !(_DWORD)v46 )
          {
            if ( !(_DWORD)v51 )
            {
              LODWORD(v48) = (src[(int)v48] == 13) + (_DWORD)v48;
              if ( (int)v48 < v9 )
                LODWORD(v48) = v48 + (src[(int)v48] == 10);
            }
            if ( (int)v48 < v9 )
            {
              v52 = _ctype_b_loc();
              v9 = v49;
              v53 = *v52;
              v51 = (unsigned int)v51;
              v54 = 0LL;
              while ( v51 <= 0x1E )
              {
                v55 = src[(int)v48 + v54];
                if ( (v53[v55] & 0x1000) == 0 )
                  break;
                v98[v51++] = v55;
                v98[(unsigned int)v51] = 0;
                if ( v47 - (int)v48 == ++v54 )
                {
                  LODWORD(v48) = v49;
                  goto LABEL_99;
                }
              }
              LODWORD(v48) = v54 + v48;
LABEL_99:
              v7 = v83;
            }
            v48 = (int)v48;
            while ( v48 < v47 )
            {
              v56 = src[v48++];
              if ( v56 == 13 || v56 == 10 )
              {
                if ( v56 != 13 )
                  LODWORD(v48) = v48 - 1;
                break;
              }
            }
            if ( v9 > (int)v48 && src[(int)v48] == 10 )
            {
              v85 = 0;
              v46 = 0LL;
              if ( (_DWORD)v51 )
              {
                v57 = (unsigned int)v51;
                v58 = 0LL;
                v59 = 0;
                do
                {
                  v60 = v98[v58];
                  v61 = v60 - 48;
                  v62 = 16 * v59;
                  v63 = v60 - 48;
                  v64 = (v60 | 0x20) - 87;
                  if ( v61 < 0xAu )
                    v64 = v63;
                  v46 = (unsigned int)(v62 + v64);
                  ++v58;
                  v59 = v46;
                }
                while ( v57 != v58 );
              }
              v98[0] = 0;
              if ( (_DWORD)v46 )
              {
                LODWORD(v48) = v48 + 1;
                goto LABEL_116;
              }
              v69 = 25;
              v46 = 0LL;
LABEL_139:
              v6 = v80;
              goto LABEL_141;
            }
            v46 = 0LL;
            if ( v9 <= (int)v48 )
            {
              v85 = v51;
LABEL_138:
              v69 = 0;
              goto LABEL_139;
            }
          }
          v85 = v51;
LABEL_116:
          v65 = v9 - v48;
          v89 = v46;
          if ( (int)v46 <= v9 - (int)v48 )
            v65 = v46;
          v66 = v81 + v65;
          v81 += v65;
          if ( v50 + v65 <= v95 )
          {
            v68 = ptr;
            goto LABEL_126;
          }
          v67 = (unsigned int)v80;
          if ( v80 < v66 )
            v67 = (unsigned int)v66;
          v95 = v67;
          v68 = (char *)realloc(ptr, v67);
          if ( v68 )
          {
            v69 = 0;
          }
          else
          {
            free(ptr);
            free(v78);
            *size = -1;
            v69 = 1;
            v68 = ptr;
          }
          if ( !v69 )
          {
LABEL_126:
            ptr = v68;
            memcpy(&v68[v50], &src[(int)v48], v65);
            LODWORD(v48) = v65 + v48;
            v46 = (unsigned int)v89 - v65;
            v9 = v49;
            v7 = v83;
            if ( (int)v48 < v49 )
              continue;
            goto LABEL_138;
          }
          break;
        }
        ptr = v68;
        v81 = v50;
        v6 = v80;
        v7 = v83;
        v46 = v89;
      }
LABEL_141:
      v4 = v78;
      if ( v69 )
      {
        if ( v69 == 25 )
          goto end_of_stream;
        return 0LL;
      }
      v88 = v46;
    }
    while ( v6 <= 0 );
  }
  while ( v81 < v6 );
end_of_stream:
  free(v4);
  *size = v81;
  if ( !v81 )
  {
    free(ptr);
    return 0LL;
  }
  return ptr;
}
