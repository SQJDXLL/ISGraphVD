char *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v4; // $v0
  char *v5; // $s6
  char *v6; // $v0
  unsigned int v7; // $s2
  int v8; // $v1
  unsigned int v9; // $a2
  int v10; // $fp
  signed int v11; // $s5
  int v12; // $s0
  int v13; // $v0
  int v14; // $s7
  char *v15; // $fp
  unsigned int v16; // $v1
  _BOOL4 v17; // $v1
  int v18; // $a0
  int v19; // $v1
  int v20; // $v1
  int v21; // $a0
  int v22; // $at
  int v23; // $a0
  bool v24; // dc
  int v25; // $s4
  int v26; // $s1
  int v27; // $v1
  int v28; // $v0
  int v29; // $s3
  int *v30; // $s5
  int v31; // $a0
  char *v32; // $a1
  _BOOL4 v33; // $v1
  int v34; // $a1
  const char *v35; // $s0
  int i; // $s1
  const char *v37; // $s5
  size_t v38; // $s0
  int v39; // $v0
  int v40; // $at
  int v41; // $v0
  signed int v42; // $s0
  signed int v43; // $v1
  char *v44; // $s6
  unsigned int v45; // $s7
  signed int v46; // $v0
  const unsigned __int16 *v47; // $v0
  int v48; // $v1
  char *v49; // $at
  char *v50; // $v1
  int v51; // $a0
  size_t v52; // $t0
  int v53; // $a3
  int v54; // $at
  int v55; // $a0
  int v56; // $at
  size_t v57; // $s7
  int v58; // $v1
  size_t v59; // $a1
  char *v60; // $v0
  int v61; // $a0
  int v62; // $v1
  int v63; // $a1
  int v64; // $v1
  size_t v65; // $a1
  char *v66; // $v0
  int v67; // $v1
  char *result; // $v0
  char *v69; // [sp+1Ch] [-864h]
  unsigned int v70; // [sp+20h] [-860h]
  signed int v71; // [sp+24h] [-85Ch]
  signed int v72; // [sp+24h] [-85Ch]
  unsigned int v73; // [sp+28h] [-858h]
  unsigned int v74; // [sp+28h] [-858h]
  int v75; // [sp+2Ch] [-854h]
  char *ptr; // [sp+34h] [-84Ch]
  char *ptra; // [sp+34h] [-84Ch]
  int v78; // [sp+3Ch] [-844h]
  int v80; // [sp+44h] [-83Ch]
  int *v81; // [sp+50h] [-830h]
  unsigned int v83; // [sp+58h] [-828h]
  int v84; // [sp+58h] [-828h]
  int v85; // [sp+5Ch] [-824h]
  char v86[32]; // [sp+60h] [-820h] BYREF
  char v87[2048]; // [sp+80h] [-800h] BYREF

  if ( status_code )
    *status_code = -1;
  v4 = (char *)malloc(0x800u);
  if ( !v4 )
  {
    *size = -1;
    return 0;
  }
  v5 = v4;
  v6 = (char *)malloc(0x800u);
  if ( !v6 )
  {
    free(v5);
    *size = -1;
    return 0;
  }
  v7 = 2048;
  ptr = v6;
  v78 = 0;
  v86[0] = 0;
  v8 = -1;
  v71 = 0;
  v85 = 0;
  v70 = 2048;
  v75 = 0;
  v9 = 0;
  v10 = 0;
  v81 = status_code;
  while ( 2 )
  {
    while ( 2 )
    {
      while ( 2 )
      {
        v73 = v9;
        v80 = v8;
        while ( 1 )
        {
          v13 = receivedata(s, v87, 2048, 5000);
          if ( v13 <= 0 )
            goto end_of_stream;
          v11 = v13;
          if ( v10 )
            break;
          v14 = v13 + v85;
          if ( v7 >= v13 + v85 )
          {
            v16 = v7;
LABEL_15:
            v83 = v16;
            memcpy(&v5[v85], v87, v11);
            v17 = 1;
            v10 = 0;
            if ( v14 >= 2 )
            {
              v10 = 0;
              v18 = 0;
              do
              {
                v19 = (unsigned __int8)v5[v18];
                if ( v19 == 10 )
                {
                  v20 = v18 + 1;
                  v22 = (unsigned __int8)v5[v18 + 1] ^ 0xA;
                  v23 = v18 + 2;
                  if ( !v22 )
                    v10 = v23;
                }
                else if ( v19 == 13 )
                {
                  v20 = v18 + 1;
                  if ( v5[v18 + 1] == 10 )
                  {
                    v20 = v18 + 2;
                    if ( v18 + 2 < v14 && v5[v20] == 13 )
                    {
                      v20 = v18 + 3;
                      if ( v18 + 3 < v14 )
                      {
                        v21 = v18 + 4;
                        if ( v5[v20] == 0xA )
                          v10 = v21;
                      }
                    }
                  }
                }
                else
                {
                  v20 = v18;
                }
                v18 = v20 + 1;
                v24 = v20 + 1 >= v14 - 1;
                v17 = v10 == 0;
              }
              while ( !v24 && !v10 );
            }
            v12 = 2;
            if ( v17 )
            {
              v7 = v83;
              v85 = v14;
              v10 = 0;
            }
            else
            {
              if ( v10 >= 2 )
              {
                v25 = v10 - 1;
                v26 = 0;
                v27 = 0;
                v28 = 0;
                v29 = 0;
                v30 = v81;
                do
                {
                  v32 = &v5[v29];
                  if ( v28 > 0 && v28 >= v27 && *v32 == 58 )
                  {
                    v26 = v29;
                    do
                    {
                      v33 = 0;
                      if ( v26 < v25 )
                        v33 = v5[v26 + 1] == 0x20 || v5[v26 + 1] == 9;
                      ++v26;
                    }
                    while ( v33 );
                    v31 = v26 - 1;
                    v27 = v29;
                  }
                  else
                  {
                    v34 = (unsigned __int8)*v32;
                    if ( v34 == 13 || v34 == 10 )
                    {
                      if ( !v30 || v28 )
                      {
                        if ( v28 < v27 && v27 < v26 )
                        {
                          v37 = &v5[v28];
                          v38 = v27 - v28;
                          if ( !strncasecmp(&v5[v28], "content-length", v27 - v28) )
                          {
                            v80 = atoi(&v5[v26]);
                            v30 = v81;
                          }
                          else if ( !strncasecmp(v37, "transfer-encoding", v38) )
                          {
                            v39 = strncasecmp(&v5[v26], "chunked", 7u);
                            v40 = v78;
                            if ( !v39 )
                              v40 = 1;
                            v78 = v40;
                            v30 = v81;
                          }
                          else
                          {
                            v30 = v81;
                          }
                        }
                      }
                      else if ( v29 > 0 )
                      {
                        v35 = v5 + 1;
                        for ( i = v29; i; --i )
                        {
                          if ( *(v35 - 1) == 32 )
                          {
                            if ( *v30 >= 0 )
                              break;
                            *v30 = atoi(v35);
                          }
                          ++v35;
                        }
                      }
                      v26 = 0;
                      if ( v29 < v14 )
                      {
                        do
                        {
                          v41 = (unsigned __int8)v5[v29];
                          if ( v41 != 13 && v41 != 10 )
                          {
                            v31 = v29;
                            v28 = v29;
                            v27 = v29;
                            goto LABEL_37;
                          }
                          ++v29;
                        }
                        while ( v14 != v29 );
                        v31 = v14;
                        v28 = v14;
                        v27 = v14;
                      }
                      else
                      {
                        v31 = v29;
                        v28 = v29;
                        v27 = v29;
                      }
                    }
                    else
                    {
                      v31 = v29;
                    }
                  }
LABEL_37:
                  v29 = v31 + 1;
                }
                while ( v31 + 1 < v25 );
              }
              v11 = v14 - v10;
              memcpy(v87, &v5[v10], v14 - v10);
              v12 = 0;
              v7 = v83;
              v85 = v14;
            }
            goto LABEL_8;
          }
          v15 = v5;
          v5 = (char *)realloc(v5, v13 + v85);
          v12 = 1;
          v16 = v14;
          if ( v5 )
            goto LABEL_15;
          free(v15);
          free(ptr);
          *size = -1;
          v5 = v15;
          v10 = 0;
LABEL_8:
          if ( v12 != 2 )
          {
            if ( v12 )
              return 0;
            break;
          }
        }
        if ( !v10 )
        {
          v8 = v80;
          v9 = v73;
          if ( v80 <= 0 )
            continue;
          goto LABEL_145;
        }
        break;
      }
      if ( !v78 )
      {
        v63 = v75;
        v64 = v11;
        if ( v80 < v11 + v75 )
          v64 = v80 - v75;
        if ( v80 >= 1 )
          v11 = v64;
        if ( v70 >= v11 + v75 )
        {
          v66 = ptr;
        }
        else
        {
          v65 = v80;
          if ( v80 < v11 + v75 )
            v65 = v11 + v75;
          v70 = v65;
          v66 = (char *)realloc(ptr, v65);
          if ( v66 )
          {
            v67 = 1;
          }
          else
          {
            free(ptr);
            free(v5);
            *size = -1;
            v67 = 0;
            v66 = ptr;
          }
          v63 = v75;
          if ( !v67 )
            return 0;
        }
        ptr = v66;
        memcpy(&v66[v63], v87, v11);
        v75 += v11;
        v8 = v80;
        v9 = v73;
        if ( v80 > 0 )
          goto LABEL_145;
        continue;
      }
      break;
    }
    v9 = v73;
    if ( v11 <= 0 )
    {
      v84 = v75;
      v52 = v71;
      v60 = ptr;
      v61 = 0;
      v8 = v80;
      goto LABEL_138;
    }
    v69 = v5;
    v42 = 0;
    v43 = v71;
    v44 = ptr;
    while ( 2 )
    {
      ptra = v44;
      v84 = v75;
      v5 = v69;
      while ( 2 )
      {
        if ( v43 )
          goto LABEL_113;
        if ( v9 )
        {
          v45 = v9;
          if ( v42 >= v11 )
          {
LABEL_88:
            v46 = v42;
            goto LABEL_97;
          }
        }
        else
        {
          v42 += v87[v42] == 0xD;
          if ( v42 >= v11 )
          {
            v45 = 0;
            if ( v42 >= v11 )
              goto LABEL_88;
          }
          else
          {
            v42 += v87[v42] == 0xA;
            v45 = 0;
            if ( v42 >= v11 )
              goto LABEL_88;
          }
        }
        v47 = *_ctype_b_loc();
        while ( 1 )
        {
          if ( v45 >= 0x1F )
          {
            v46 = v42;
            goto LABEL_97;
          }
          v48 = v87[v42];
          if ( (v47[v48] & 0x1000) == 0 )
            break;
          v49 = &v86[v45];
          v49[1] = 0;
          *v49 = v48;
          ++v42;
          ++v45;
          if ( v11 == v42 )
          {
            v46 = v11;
            goto LABEL_97;
          }
        }
        v46 = v42;
LABEL_97:
        v50 = v86;
        v42 = v11;
        if ( v11 < v46 )
          v42 = v46;
        while ( v42 != v46 )
        {
          v51 = (unsigned __int8)v87[v46++];
          if ( v51 == 13 || v51 == 10 )
          {
            v42 = v46 - 1;
            if ( v51 == 0xD )
              v42 = v46;
            break;
          }
        }
        v9 = v45;
        if ( v42 >= v11 || v87[v42] != 10 )
        {
          v43 = 0;
          if ( v42 >= v11 )
          {
            v52 = 0;
            v8 = v80;
            v60 = ptra;
            v61 = 0;
            goto LABEL_138;
          }
          continue;
        }
        break;
      }
      v52 = 0;
      v53 = 0;
      if ( v45 )
      {
        v53 = 0;
        do
        {
          v54 = *v50;
          v55 = (v54 | 0x20) - 87;
          v56 = v54 - 48;
          if ( (unsigned __int8)v56 < 0xAu )
            v55 = v56;
          v53 = v55 + 16 * v53;
          --v9;
          ++v50;
        }
        while ( v9 );
      }
      v86[0] = 0;
      ++v42;
      if ( v53 )
      {
        v43 = v53;
        v9 = 0;
LABEL_113:
        v74 = v9;
        v57 = v11 - v42;
        v72 = v43;
        if ( v43 < v11 - v42 )
          v57 = v43;
        v58 = v57 + v75;
        v75 += v57;
        if ( v70 >= v57 + v84 )
        {
          v60 = ptra;
        }
        else
        {
          v59 = v80;
          if ( v80 < v58 )
            v59 = v57 + v84;
          v70 = v59;
          v60 = (char *)realloc(ptra, v59);
          v61 = 1;
          v62 = 1;
          if ( !v60 )
          {
            free(ptra);
            free(v69);
            v61 = 1;
            *size = -1;
            v62 = 0;
            v60 = ptra;
          }
          if ( !v62 )
          {
            v52 = v72;
            v8 = v80;
            v9 = v74;
            goto LABEL_138;
          }
        }
        v44 = v60;
        memcpy(&v60[v84], &v87[v42], v57);
        v42 += v57;
        v9 = v74;
        v43 = v72 - v57;
        if ( v42 >= v11 )
        {
          v84 = v75;
          v52 = v72 - v57;
          v60 = v44;
          v8 = v80;
          v5 = v69;
          v61 = 0;
          goto LABEL_138;
        }
        continue;
      }
      break;
    }
    v61 = 25;
    v8 = v80;
    v60 = ptra;
    v9 = 0;
LABEL_138:
    if ( !v61 )
    {
      v71 = v52;
      ptr = v60;
      v75 = v84;
      if ( v8 <= 0 )
        continue;
LABEL_145:
      if ( v75 >= v8 )
      {
end_of_stream:
        free(v5);
        *size = v75;
        if ( v75 )
          return ptr;
        free(ptr);
        return 0;
      }
      continue;
    }
    break;
  }
  ptr = v60;
  v75 = v84;
  result = 0;
  if ( v61 == 25 )
    goto end_of_stream;
  return result;
}
