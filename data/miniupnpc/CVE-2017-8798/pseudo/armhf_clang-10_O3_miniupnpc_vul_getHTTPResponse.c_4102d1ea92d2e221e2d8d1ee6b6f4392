void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v4; // r0
  char *v5; // r5
  unsigned int v6; // r8
  char *v7; // r0
  signed int v8; // r2
  int v9; // r4
  unsigned int v10; // r7
  int v11; // r6
  int v12; // r0
  int v13; // r3
  signed int v14; // r9
  char *v15; // r0
  _BOOL4 v16; // r3
  int v17; // r10
  int v18; // r1
  int v19; // r2
  int v20; // r2
  int *v21; // r12
  int v22; // lr
  char *v23; // r4
  int v24; // r6
  int v25; // r1
  int v26; // r3
  int v27; // r8
  int v28; // r2
  int v29; // r2
  int v30; // r1
  bool v31; // zf
  bool v32; // zf
  bool v33; // cc
  size_t v34; // r9
  int v35; // r0
  const char *v36; // r6
  int v37; // r9
  int v38; // r0
  int v39; // r0
  bool v40; // zf
  int v41; // r6
  int v42; // r1
  int v43; // r3
  int v44; // r9
  int v45; // r2
  int v46; // r2
  int v47; // r1
  bool v48; // zf
  bool v49; // zf
  int v50; // r8
  size_t v51; // r4
  int v52; // r0
  int v53; // r0
  bool v54; // zf
  signed int v55; // r6
  const unsigned __int16 *v56; // r0
  int v57; // r3
  int v58; // r0
  bool v59; // zf
  char *v60; // r0
  int v61; // t1
  signed int v62; // r5
  int v63; // r2
  int v64; // r3
  size_t v65; // r4
  size_t v66; // r10
  int v67; // r2
  char *v68; // r0
  int v69; // r2
  size_t v70; // r6
  size_t v71; // r4
  char *v72; // r0
  char *v73; // r9
  char *v75; // r0
  int v76; // r0
  char *nptr; // [sp+4h] [bp-87Ch]
  int *v78; // [sp+8h] [bp-878h]
  int v79; // [sp+Ch] [bp-874h]
  char *s1; // [sp+14h] [bp-86Ch]
  char *s1a; // [sp+14h] [bp-86Ch]
  char *s1b; // [sp+14h] [bp-86Ch]
  unsigned int v83; // [sp+18h] [bp-868h]
  int v84; // [sp+18h] [bp-868h]
  unsigned int v85; // [sp+1Ch] [bp-864h]
  int v86; // [sp+20h] [bp-860h]
  char *ptr; // [sp+24h] [bp-85Ch]
  signed int v88; // [sp+28h] [bp-858h]
  signed int v89; // [sp+28h] [bp-858h]
  int v90; // [sp+2Ch] [bp-854h]
  int v91; // [sp+30h] [bp-850h]
  int v94; // [sp+3Ch] [bp-844h]
  char v95[32]; // [sp+40h] [bp-840h] BYREF
  char src[2080]; // [sp+60h] [bp-820h] BYREF

  if ( status_code )
    *status_code = -1;
  v4 = (char *)malloc(0x800u);
  if ( !v4 )
    goto LABEL_180;
  v5 = v4;
  v6 = 2048;
  v7 = (char *)malloc(0x800u);
  if ( !v7 )
  {
    free(v5);
LABEL_180:
    *size = -1;
    return 0;
  }
  ptr = v7;
  v78 = size;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v95[0] = 0;
  v86 = -1;
  v79 = 0;
  v85 = 2048;
  v90 = 0;
  v94 = 0;
  while ( 1 )
  {
    v88 = v8;
    do
    {
      v11 = v9;
      v12 = receivedata(s, src, 2048, 5000, 0);
      if ( v12 < 1 )
        goto end_of_stream;
      v13 = v94;
      v14 = v12;
      if ( v94 )
      {
        s1 = v5;
        v91 = v9;
        goto LABEL_119;
      }
      v9 += v12;
      if ( v12 + v11 <= v6 )
      {
        v15 = v5;
      }
      else
      {
        v15 = (char *)realloc(v5, v12 + v11);
        v6 = v14 + v11;
        if ( !v15 )
        {
          free(v5);
          v75 = ptr;
          goto LABEL_181;
        }
      }
      v5 = v15;
      memcpy(&v15[v11], src, v14);
      v16 = 1;
      v17 = 0;
      v94 = 0;
      if ( v9 >= 2 )
      {
        v18 = 0;
        do
        {
          v19 = (unsigned __int8)v5[v18];
          if ( v19 == 10 )
          {
            v20 = v18 + 1;
            v17 = 0;
            if ( v5[v18 + 1] == 10 )
              v17 = v18 + 2;
            goto LABEL_30;
          }
          if ( v19 == 13 )
          {
            v20 = v18 + 1;
            v17 = 0;
            if ( v5[v18 + 1] != 10 )
              goto LABEL_30;
            v20 = v18 + 2;
            if ( v18 + 2 < v9 )
            {
              v17 = 0;
              if ( v5[v20] != 13 )
                goto LABEL_30;
              v20 = v18 + 3;
              if ( v18 + 3 < v9 )
              {
                v17 = 0;
                if ( v5[v20] == 10 )
                  v17 = v18 + 4;
                goto LABEL_30;
              }
            }
          }
          else
          {
            v20 = v18;
          }
          v17 = 0;
LABEL_30:
          v16 = v17 == 0;
          v18 = v20 + 1;
        }
        while ( v20 + 1 < v9 - 1 && !v17 );
      }
    }
    while ( v16 );
    v91 = v14 + v11;
    v83 = v6;
    if ( v17 >= 2 )
    {
      v21 = status_code;
      v22 = v17 - 1;
      v23 = (char *)(v14 + v11);
      if ( status_code )
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while ( 1 )
        {
          v29 = (unsigned __int8)v5[v27];
          if ( v29 == 58 && v26 >= 1 && v25 <= v26 )
          {
            v24 = v27 + 1;
            if ( v27 < v22 )
            {
              do
              {
                v30 = (unsigned __int8)v5[v24];
                v31 = v30 == 9;
                if ( v30 != 9 )
                  v31 = v30 == 32;
                if ( !v31 )
                {
                  v28 = v24 - 1;
                  goto LABEL_38;
                }
                ++v24;
              }
              while ( v17 != v24 );
              v28 = v22;
              v25 = v27;
              v24 = v17;
              goto LABEL_39;
            }
            v28 = v27;
          }
          else
          {
            v32 = v29 == 13;
            if ( v29 != 13 )
              v32 = v29 == 10;
            if ( !v32 )
            {
              v28 = v27;
              goto LABEL_39;
            }
            if ( v26 )
            {
              v33 = v25 <= v26;
              if ( v25 > v26 )
                v33 = v24 <= v25;
              if ( !v33 )
              {
                v34 = v25 - v26;
                s1a = &v5[v26];
                if ( !strncasecmp(&v5[v26], "content-length", v25 - v26) )
                {
                  v86 = strtol(&v5[v24], 0u, 10);
                }
                else if ( !strncasecmp(s1a, "transfer-encoding", v34) )
                {
                  v31 = strncasecmp(&v5[v24], "chunked", 7u) == 0;
                  v35 = v79;
                  if ( v31 )
                    v35 = 1;
                  v79 = v35;
                }
                v21 = status_code;
                v22 = v17 - 1;
              }
            }
            else
            {
              v36 = v5 + 1;
              v37 = v27;
              if ( v27 >= 1 )
              {
                do
                {
                  if ( *(v36 - 1) == 32 )
                  {
                    if ( *v21 >= 0 )
                      break;
                    v38 = strtol(v36, 0u, 10);
                    v21 = status_code;
                    v22 = v17 - 1;
                    *status_code = v38;
                  }
                  ++v36;
                  --v37;
                }
                while ( v37 );
              }
            }
            v24 = 0;
            if ( v27 < v91 )
            {
              while ( 1 )
              {
                v39 = (unsigned __int8)v5[v27];
                v40 = v39 == 13;
                if ( v39 != 13 )
                  v40 = v39 == 10;
                if ( !v40 )
                  break;
                if ( v23 == (char *)++v27 )
                {
                  v25 = v91;
                  v28 = v91;
                  v26 = v91;
                  goto LABEL_39;
                }
              }
            }
            v28 = v27;
            v26 = v27;
          }
LABEL_38:
          v25 = v27;
LABEL_39:
          v27 = v28 + 1;
          if ( v28 + 1 >= v22 )
            goto LABEL_118;
        }
      }
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      nptr = v23;
      while ( 2 )
      {
        v46 = (unsigned __int8)v5[v44];
        if ( v46 == 58 && v43 >= 1 && v42 <= v43 )
        {
          v41 = v44 + 1;
          if ( v44 >= v22 )
          {
            v45 = v44;
LABEL_82:
            v42 = v44;
          }
          else
          {
            do
            {
              v47 = (unsigned __int8)v5[v41];
              v48 = v47 == 32;
              if ( v47 != 32 )
                v48 = v47 == 9;
              if ( !v48 )
              {
                v45 = v41 - 1;
                goto LABEL_82;
              }
              ++v41;
            }
            while ( v17 != v41 );
            v45 = v22;
            v42 = v44;
            v41 = v17;
          }
          goto LABEL_83;
        }
        v49 = v46 == 13;
        if ( v46 != 13 )
          v49 = v46 == 10;
        if ( !v49 )
        {
          v45 = v44;
          goto LABEL_83;
        }
        if ( v42 <= v43 )
        {
          v50 = v91;
        }
        else
        {
          v50 = v91;
          if ( v41 > v42 )
          {
            s1b = &v5[v43];
            v51 = v42 - v43;
            if ( !strncasecmp(&v5[v43], "content-length", v42 - v43) )
            {
              v86 = strtol(&v5[v41], 0u, 10);
              v23 = nptr;
              v41 = 0;
              if ( v44 < v91 )
                goto LABEL_109;
            }
            else
            {
              if ( !strncasecmp(s1b, "transfer-encoding", v51) )
              {
                v31 = strncasecmp(&v5[v41], "chunked", 7u) == 0;
                v52 = v79;
                if ( v31 )
                  v52 = 1;
                v79 = v52;
              }
              v23 = nptr;
              v41 = 0;
              if ( v44 < v91 )
              {
                while ( 1 )
                {
LABEL_109:
                  v53 = (unsigned __int8)v5[v44];
                  v54 = v53 == 13;
                  if ( v53 != 13 )
                    v54 = v53 == 10;
                  if ( !v54 )
                    break;
                  if ( v23 == (char *)++v44 )
                  {
                    v45 = v50;
                    v43 = v50;
                    v42 = v50;
                    goto LABEL_117;
                  }
                }
              }
            }
            goto LABEL_116;
          }
        }
        v41 = 0;
        if ( v44 < v50 )
          goto LABEL_109;
LABEL_116:
        v45 = v44;
        v43 = v44;
        v42 = v44;
LABEL_117:
        v22 = v17 - 1;
LABEL_83:
        v44 = v45 + 1;
        if ( v45 + 1 >= v22 )
          break;
        continue;
      }
    }
LABEL_118:
    v6 = v83;
    s1 = v5;
    v14 = v91 - v17;
    memcpy(src, &v5[v17], v91 - v17);
    v13 = v17;
LABEL_119:
    v8 = v88;
    v94 = v13;
    if ( v79 )
    {
      if ( v14 >= 1 )
      {
        v55 = 0;
        do
        {
          v84 = v90;
          while ( !v8 )
          {
            if ( !v10 )
            {
              if ( src[v55] == 13 )
                ++v55;
              if ( v55 < v14 && src[v55] == 10 )
                ++v55;
            }
            if ( v55 < v14 )
            {
              v56 = *_ctype_b_loc();
              while ( v10 <= 0x1E )
              {
                v57 = (unsigned __int8)src[v55];
                if ( (v56[v57] & 0x1000) == 0 )
                  break;
                ++v55;
                v95[v10 + 1] = 0;
                v95[v10++] = v57;
                if ( v14 == v55 )
                {
                  v55 = v14;
                  break;
                }
              }
            }
            while ( v55 < v14 )
            {
              v58 = (unsigned __int8)src[v55++];
              v59 = v58 == 13;
              if ( v58 != 13 )
                v59 = v58 == 10;
              if ( v59 )
              {
                if ( v58 != 13 )
                  --v55;
                break;
              }
            }
            if ( v55 >= v14 )
            {
              v8 = 0;
              goto LABEL_176;
            }
            v8 = 0;
            if ( src[v55] == 10 )
            {
              if ( v10 )
              {
                v8 = 0;
                v60 = v95;
                do
                {
                  v61 = (unsigned __int8)*v60++;
                  v62 = v8;
                  v63 = v61 - 0x30;
                  v64 = v61 | 0x20;
                  if ( (unsigned int)(v61 - 0x30) >= 0xA )
                    v63 = v64 - 0x57;
                  --v10;
                  v8 = v63 + 16 * v62;
                }
                while ( v10 );
                v5 = s1;
                v65 = v85;
                v10 = 0;
                v95[0] = 0;
                if ( v8 )
                {
                  ++v55;
                  goto LABEL_153;
                }
                v76 = v90;
              }
              else
              {
                v5 = s1;
                v95[0] = 0;
                v76 = v90;
              }
              v90 = v76;
              goto end_of_stream;
            }
          }
          v5 = s1;
          v65 = v85;
LABEL_153:
          v66 = v14 - v55;
          v89 = v8;
          if ( v8 < v14 - v55 )
            v66 = v8;
          v67 = v66 + v90;
          v90 += v66;
          if ( v66 + v84 <= v65 )
          {
            v68 = ptr;
          }
          else
          {
            v65 = v86;
            if ( v86 < v67 )
              v65 = v67;
            v68 = (char *)realloc(ptr, v65);
            if ( !v68 )
            {
              free(ptr);
              v75 = v5;
              goto LABEL_181;
            }
          }
          ptr = v68;
          v85 = v65;
          memcpy(&v68[v84], &src[v55], v66);
          v55 += v66;
          v8 = v89 - v66;
        }
        while ( v55 < v14 );
      }
      goto LABEL_176;
    }
    v69 = v90;
    v70 = v14;
    v71 = v85;
    if ( v14 + v90 > v86 )
      v70 = v86 - v90;
    if ( v86 <= 0 )
      v70 = v14;
    if ( v70 + v90 > v85 )
      break;
    v73 = ptr;
LABEL_175:
    v85 = v71;
    memcpy(&v73[v69], src, v70);
    v8 = v88;
    ptr = v73;
    v90 += v70;
LABEL_176:
    v5 = s1;
    v9 = v91;
    if ( v86 >= 1 && v90 >= v86 )
    {
end_of_stream:
      free(v5);
      *v78 = v90;
      if ( v90 )
        return ptr;
      free(ptr);
      return 0;
    }
  }
  v71 = v86;
  if ( v86 < (int)(v70 + v90) )
    v71 = v70 + v90;
  v72 = (char *)realloc(ptr, v71);
  v69 = v90;
  v73 = v72;
  if ( v72 )
    goto LABEL_175;
  free(ptr);
  v75 = s1;
LABEL_181:
  free(v75);
  *v78 = -1;
  return 0;
}
