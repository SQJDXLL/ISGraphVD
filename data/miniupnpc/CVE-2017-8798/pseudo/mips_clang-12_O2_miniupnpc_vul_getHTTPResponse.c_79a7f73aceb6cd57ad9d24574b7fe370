void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v4; // $v0
  char *v5; // $s1
  void *v6; // $v0
  int v7; // $v0
  char *v8; // $a1
  int v9; // $a0
  int v10; // $s7
  unsigned int v11; // $a2
  int v12; // $s4
  int v13; // $v0
  signed int v14; // $fp
  int v15; // $s0
  char *v16; // $s6
  char *v17; // $v0
  void *v18; // $a1
  int v19; // $a0
  int v20; // $v1
  int v21; // $v1
  void *v22; // $t0
  int v23; // $s6
  int v24; // $v1
  int v25; // $v0
  int v26; // $fp
  int *v27; // $a2
  int v28; // $a0
  int v29; // $a1
  int v30; // $v1
  const char *v31; // $s6
  int v32; // $s3
  int v33; // $v0
  size_t v34; // $s3
  int v35; // $v0
  int v36; // $at
  int v37; // $v0
  int v38; // $s6
  signed int v39; // $s0
  unsigned int v40; // $s3
  int v41; // $v0
  const unsigned __int16 **v42; // $v0
  const unsigned __int16 *v43; // $v0
  int v44; // $v1
  _BYTE *v45; // $at
  char *v46; // $v0
  int v47; // $a0
  int v48; // $v1
  size_t v49; // $s6
  size_t v50; // $a1
  char *v51; // $v0
  int v52; // $a1
  signed int v53; // $v1
  int v54; // $s0
  size_t v55; // $a1
  void *v56; // $s3
  char *v57; // $v0
  char *v58; // $s6
  bool v60; // dc
  char *v61; // [sp+1Ch] [-874h]
  unsigned int v62; // [sp+34h] [-85Ch]
  _BYTE *v63; // [sp+38h] [-858h]
  int v64; // [sp+3Ch] [-854h]
  int *v65; // [sp+40h] [-850h]
  int v66; // [sp+44h] [-84Ch]
  unsigned int v67; // [sp+48h] [-848h]
  int v68; // [sp+4Ch] [-844h]
  void *v69; // [sp+50h] [-840h]
  int v70; // [sp+54h] [-83Ch]
  void *ptr; // [sp+58h] [-838h]
  int v72; // [sp+5Ch] [-834h]
  int *v73; // [sp+60h] [-830h]
  void *src; // [sp+64h] [-82Ch]
  int v75; // [sp+68h] [-828h]
  unsigned int v76; // [sp+6Ch] [-824h]
  char v77; // [sp+70h] [-820h] BYREF
  _BYTE v78[3]; // [sp+71h] [-81Fh] BYREF
  char v79[2048]; // [sp+90h] [-800h] BYREF

  v75 = s;
  if ( status_code )
    *status_code = -1;
  v73 = status_code;
  v4 = (char *)malloc(0x800u);
  if ( !v4 )
  {
    *size = -1;
    return 0;
  }
  v5 = v4;
  v76 = 2048;
  v6 = malloc(0x800u);
  if ( !v6 )
  {
    free(v5);
    *size = -1;
    return 0;
  }
  v69 = v6;
  v64 = 0;
  v77 = 0;
  v7 = -1;
  v8 = v79;
  v9 = 0;
  v10 = 0;
  v62 = 2048;
  v70 = 0;
  v11 = 0;
  v12 = 0;
  v63 = v78;
  src = v79;
LABEL_6:
  while ( 1 )
  {
    v66 = v9;
    v67 = v11;
    v68 = v7;
    v13 = receivedata(v75, v8, 2048, 5000);
    if ( v13 <= 0 )
      break;
    v14 = v13;
    v15 = v10;
    v16 = v5;
    while ( 1 )
    {
      if ( v12 )
      {
        v10 = v15;
        v8 = (char *)src;
        v11 = v67;
        v9 = v66;
        v5 = v16;
        goto LABEL_80;
      }
      v10 = v14 + v15;
      if ( v76 >= v14 + v15 )
      {
        v5 = v16;
        v18 = src;
      }
      else
      {
        v17 = (char *)realloc(v16, v14 + v15);
        v76 = v14 + v15;
        v18 = src;
        v5 = v17;
        if ( !v17 )
        {
          free(v16);
          free(v69);
          *size = -1;
          return 0;
        }
      }
      memcpy(&v5[v15], v18, v14);
      if ( v10 >= 2 )
      {
        v19 = 0;
        do
        {
          v20 = (unsigned __int8)v5[v19];
          if ( v20 == 10 )
          {
            v21 = v19 + 1;
            v12 = v19 + 2;
            if ( v5[v19 + 1] != 0xA )
              v12 = 0;
          }
          else if ( v20 == 13 )
          {
            v21 = v19 + 1;
            v12 = 0;
            if ( v5[v19 + 1] == 10 )
            {
              v21 = v19 + 2;
              if ( v19 + 2 >= v10 )
              {
                v12 = 0;
              }
              else
              {
                v12 = 0;
                if ( v5[v21] == 13 )
                {
                  v21 = v19 + 3;
                  if ( v19 + 3 >= v10 )
                  {
                    v12 = 0;
                  }
                  else
                  {
                    v12 = v19 + 4;
                    if ( v5[v21] != 0xA )
                      v12 = 0;
                  }
                }
              }
            }
          }
          else
          {
            v21 = v19;
            v12 = 0;
          }
          v19 = v21 + 1;
        }
        while ( v21 + 1 < v10 - 1 && !v12 );
        if ( v12 )
          break;
      }
      v14 = receivedata(v75, v79, 2048, 5000);
      v12 = 0;
      v15 = v10;
      v16 = v5;
      if ( v14 <= 0 )
        goto end_of_stream;
    }
    if ( v12 >= 2 )
    {
      v72 = v12 - 1;
      v22 = (void *)(v14 + v15);
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = v73;
      ptr = v22;
      v65 = size;
      do
      {
        v29 = (unsigned __int8)v5[v26];
        if ( v25 > 0 && v25 >= v24 && v29 == 58 )
        {
          v28 = v26;
          if ( v26 < v72 )
          {
            v28 = v26;
            while ( 1 )
            {
              v30 = (unsigned __int8)v5[v28 + 1];
              if ( v30 != 32 && v30 != 9 )
                break;
              if ( v12 - 1 == ++v28 )
              {
                v28 = v72;
                break;
              }
            }
          }
          v23 = v28 + 1;
          v24 = v26;
        }
        else if ( v29 == 13 || v29 == 10 )
        {
          if ( !v27 || v25 )
          {
            if ( v25 < v24 && v24 < v23 )
            {
              v61 = &v5[v25];
              v34 = v24 - v25;
              if ( strncasecmp(&v5[v25], "content-length", v24 - v25) )
              {
                if ( strncasecmp(v61, "transfer-encoding", v34) )
                {
                  v27 = v73;
                  v22 = ptr;
                  size = v65;
                }
                else
                {
                  v35 = strncasecmp(&v5[v23], "chunked", 7u);
                  v36 = v64;
                  if ( !v35 )
                    v36 = 1;
                  v64 = v36;
                  v27 = v73;
                  v22 = ptr;
                  size = v65;
                }
              }
              else
              {
                v68 = strtol(&v5[v23], 0u, 10);
                v27 = v73;
                v22 = ptr;
                size = v65;
              }
            }
          }
          else if ( v26 > 0 )
          {
            v31 = v5 + 1;
            v32 = v26;
            do
            {
              if ( *(v31 - 1) == 32 )
              {
                if ( *v27 >= 0 )
                {
                  size = v65;
                  goto LABEL_72;
                }
                v33 = strtol(v31, 0u, 10);
                v22 = ptr;
                v27 = v73;
                *v73 = v33;
              }
              --v32;
              ++v31;
            }
            while ( v32 );
            size = v65;
          }
LABEL_72:
          v23 = 0;
          if ( v26 < v10 )
          {
            do
            {
              v37 = (unsigned __int8)v5[v26];
              if ( v37 != 13 && v37 != 10 )
              {
                v28 = v26;
                v25 = v26;
                v24 = v26;
                goto LABEL_40;
              }
              ++v26;
            }
            while ( v22 != (void *)v26 );
            v28 = v10;
            v25 = v10;
            v24 = v10;
          }
          else
          {
            v28 = v26;
            v25 = v26;
            v24 = v26;
          }
        }
        else
        {
          v28 = v26;
        }
LABEL_40:
        v26 = v28 + 1;
      }
      while ( v28 + 1 < v72 );
    }
    v14 = v10 - v12;
    memcpy(v79, &v5[v12], v10 - v12);
    v8 = (char *)src;
    v11 = v67;
    v9 = v66;
LABEL_80:
    v38 = (int)v63;
    if ( v64 )
    {
      if ( v14 <= 0 )
        goto LABEL_138;
      v39 = 0;
      v65 = size;
      while ( 2 )
      {
        ptr = v69;
        v72 = v70;
LABEL_84:
        if ( v9 )
        {
LABEL_114:
          v67 = v11;
          v49 = v14 - v39;
          v66 = v9;
          if ( v9 < v14 - v39 )
            v49 = v9;
          v70 = v49 + v72;
          if ( v62 >= v49 + v72 )
          {
            v51 = (char *)ptr;
          }
          else
          {
            v50 = v68;
            if ( v68 < (int)(v49 + v72) )
              v50 = v49 + v72;
            v62 = v50;
            v51 = (char *)realloc(ptr, v50);
            if ( !v51 )
            {
              free(ptr);
              free(v5);
              *size = -1;
              return 0;
            }
          }
          v69 = v51;
          memcpy(&v51[v72], (char *)src + v39, v49);
          v8 = (char *)src;
          v9 = v66 - v49;
          v39 += v49;
          v38 = (int)v63;
          v11 = v67;
          if ( v39 < v14 )
            continue;
LABEL_138:
          v7 = v68;
          if ( v68 > 0 )
          {
LABEL_139:
            if ( v70 >= v7 )
              goto end_of_stream;
          }
          goto LABEL_6;
        }
        break;
      }
      if ( v11 )
      {
        v40 = v11;
        if ( v39 >= v14 )
        {
LABEL_90:
          v11 = v40;
          size = v65;
          goto LABEL_91;
        }
      }
      else
      {
        v39 += v8[v39] == 0xD;
        if ( v39 >= v14 )
        {
          v40 = 0;
          if ( v39 >= v14 )
            goto LABEL_90;
        }
        else
        {
          v39 += v8[v39] == 0xA;
          v40 = 0;
          if ( v39 >= v14 )
            goto LABEL_90;
        }
      }
      v42 = _ctype_b_loc();
      v8 = (char *)src;
      v43 = *v42;
      v11 = v40;
      size = v65;
      while ( v11 < 0x1F )
      {
        v44 = v8[v39];
        if ( (v43[v44] & 0x10) == 0 )
          break;
        v45 = (_BYTE *)(v38 + v11);
        *v45 = 0;
        *(v45 - 1) = v44;
        ++v39;
        ++v11;
        if ( v14 == v39 )
        {
          v69 = ptr;
          v70 = v72;
          v7 = v68;
          v9 = 0;
          if ( v68 > 0 )
            goto LABEL_139;
          goto LABEL_6;
        }
      }
LABEL_91:
      if ( v39 < v14 )
      {
        while ( 1 )
        {
          v41 = (unsigned __int8)v8[v39];
          if ( v41 == 10 || v41 == 13 )
            break;
          if ( v14 == ++v39 )
          {
            v9 = 0;
            v69 = ptr;
            v70 = v72;
            goto LABEL_138;
          }
        }
        v39 += v41 == 0xD;
      }
      if ( v39 >= v14 )
      {
        v69 = ptr;
        v70 = v72;
        v7 = v68;
        v9 = 0;
        if ( v68 > 0 )
          goto LABEL_139;
        continue;
      }
      v9 = 0;
      if ( v8[v39] == 10 )
      {
        if ( !v11 )
        {
          v77 = 0;
          v69 = ptr;
          v70 = v72;
          break;
        }
        v46 = &v77;
        v9 = 0;
        do
        {
          v48 = (unsigned __int8)*v46;
          if ( (unsigned __int8)(v48 - 0x30) >= 0xAu )
          {
            v47 = 16 * v9 - 0x57;
            v48 = (char)(v48 | 0x20);
          }
          else
          {
            v47 = 16 * v9 - 0x30;
          }
          v9 = v47 + v48;
          --v11;
          ++v46;
        }
        while ( v11 );
        v77 = 0;
        if ( !v9 )
        {
          v69 = ptr;
          v70 = v72;
          break;
        }
        v11 = 0;
        ++v39;
        goto LABEL_114;
      }
      goto LABEL_84;
    }
    v65 = size;
    v52 = v70;
    v53 = v14;
    if ( v68 < v14 + v70 )
      v53 = v68 - v70;
    if ( v68 >= 1 )
      v14 = v53;
    v54 = v14 + v70;
    if ( v62 >= v14 + v70 )
    {
      v58 = (char *)v69;
    }
    else
    {
      v55 = v68;
      if ( v68 < v54 )
        v55 = v14 + v70;
      v56 = v69;
      v62 = v55;
      v57 = (char *)realloc(v69, v55);
      v52 = v70;
      v58 = v57;
      if ( !v57 )
      {
        free(v56);
        free(v5);
        *v65 = -1;
        return 0;
      }
    }
    memcpy(&v58[v52], v79, v14);
    v69 = v58;
    v70 = v54;
    v8 = (char *)src;
    v11 = v67;
    v9 = v66;
    size = v65;
    v7 = v68;
    if ( v68 > 0 )
      goto LABEL_139;
  }
end_of_stream:
  free(v5);
  v60 = v70 == 0;
  *size = v70;
  if ( !v60 )
    return v69;
  free(v69);
  return 0;
}
