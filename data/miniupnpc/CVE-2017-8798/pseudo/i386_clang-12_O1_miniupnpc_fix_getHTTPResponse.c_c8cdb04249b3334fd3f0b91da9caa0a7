void *__cdecl getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // eax
  char *v4; // ebp
  void *v5; // eax
  int v6; // ebx
  char *v7; // edi
  int v8; // eax
  int v9; // ebx
  char *v10; // ecx
  bool v11; // dl
  int v12; // edi
  int v13; // ecx
  char v14; // dl
  int v15; // edx
  bool v16; // zf
  int v17; // eax
  int v18; // ecx
  int v19; // edi
  int v20; // esi
  int *v21; // edx
  size_t v22; // eax
  char v23; // cl
  char v24; // al
  char *v25; // edi
  int v26; // ebp
  int v27; // eax
  size_t v28; // ebp
  const char *v29; // edi
  char v30; // al
  int v31; // eax
  int v32; // ecx
  signed int v33; // ebp
  char *v34; // edx
  signed int v35; // ebx
  unsigned int v36; // eax
  unsigned int v37; // edi
  size_t v38; // esi
  unsigned int v39; // edi
  char *v40; // eax
  int v41; // ecx
  char *v42; // ebx
  size_t v43; // edx
  char *v44; // ebp
  char *v45; // ebp
  unsigned int v46; // edi
  char *v47; // esi
  const unsigned __int16 *v48; // eax
  int v49; // ecx
  unsigned int v50; // edx
  char v51; // al
  unsigned int v52; // ebp
  int v53; // eax
  char v54; // cl
  int v55; // ebp
  int v56; // ebp
  size_t v57; // esi
  int v58; // ebp
  size_t v59; // ecx
  char *v60; // eax
  char *v61; // ecx
  int v62; // eax
  void *result; // eax
  unsigned int v64; // eax
  char *v65; // [esp+0h] [ebp-87Ch]
  void *ptr; // [esp+18h] [ebp-864h]
  void *v67; // [esp+1Ch] [ebp-860h]
  size_t v68; // [esp+20h] [ebp-85Ch]
  unsigned int v69; // [esp+24h] [ebp-858h]
  int v70; // [esp+28h] [ebp-854h]
  int v71; // [esp+2Ch] [ebp-850h]
  int v72; // [esp+30h] [ebp-84Ch]
  char *nptr; // [esp+34h] [ebp-848h]
  size_t v74; // [esp+38h] [ebp-844h]
  unsigned int v75; // [esp+3Ch] [ebp-840h]
  unsigned int v76; // [esp+40h] [ebp-83Ch]
  unsigned int v77; // [esp+44h] [ebp-838h]
  int v78; // [esp+48h] [ebp-834h]
  char v79[32]; // [esp+4Ch] [ebp-830h]
  char src[2064]; // [esp+6Ch] [ebp-810h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800u);
  if ( !v3 )
  {
    *size = -1;
    return 0;
  }
  v4 = v3;
  v5 = malloc(0x800u);
  if ( !v5 )
  {
    free(v4);
    *size = -1;
    return 0;
  }
  ptr = v5;
  v79[0] = 0;
  v77 = 2048;
  v6 = -1;
  v78 = 0;
  v74 = 0;
  v7 = 0;
  v75 = 2048;
  v69 = 0;
  v76 = 0;
  v8 = 0;
  while ( 2 )
  {
    v71 = v8;
    do
    {
      v68 = receivedata(s, src, 2048, 5000, 0);
      if ( (int)v68 <= 0 )
        goto end_of_stream;
      v8 = v71;
      if ( v71 )
        goto LABEL_79;
      v70 = v6;
      v9 = (int)&v7[v68];
      if ( (unsigned int)&v7[v68] > v77 )
      {
        v10 = (char *)realloc(v4, (size_t)&v7[v68]);
        if ( !v10 )
        {
          free(v4);
          free(ptr);
          *size = -1;
          v71 = 0;
          v17 = 1;
          goto LABEL_8;
        }
        v4 = v10;
        v77 = v9;
      }
      memcpy(&v7[(_DWORD)v4], src, v68);
      v11 = 1;
      v12 = 0;
      if ( v9 >= 2 )
      {
        v13 = 0;
        while ( 1 )
        {
          v14 = v4[v13];
          if ( v14 == 10 )
          {
            v15 = v13 + 1;
            v12 = v13 + 2;
            v16 = v4[v13 + 1] == 10;
LABEL_24:
            if ( !v16 )
              v12 = 0;
            goto LABEL_30;
          }
          if ( v14 != 13 )
            goto LABEL_28;
          if ( v4[v13 + 1] != 10 )
            break;
          v15 = v13 + 2;
          if ( v13 + 2 < v9 )
          {
            v12 = 0;
            if ( v4[v15] != 13 )
              goto LABEL_30;
            v15 = v13 + 3;
            if ( v13 + 3 < v9 )
            {
              v12 = v13 + 4;
              v16 = v4[v13 + 3] == 10;
              goto LABEL_24;
            }
          }
LABEL_29:
          v12 = 0;
LABEL_30:
          v13 = v15 + 1;
          v11 = v12 == 0;
          if ( v13 >= v9 - 1 || v12 )
            goto LABEL_32;
        }
        ++v13;
LABEL_28:
        v15 = v13;
        goto LABEL_29;
      }
LABEL_32:
      v71 = v12;
      v17 = 2;
      if ( v11 )
      {
        v7 = (char *)v9;
        v71 = 0;
      }
      else
      {
        if ( v71 >= 2 )
        {
          v68 = v71 - 1;
          nptr = v4 + 1;
          v72 = 0;
          v18 = 0;
          v19 = 0;
          v20 = 0;
          v21 = status_code;
          v67 = v4;
          do
          {
            if ( v19 > 0 && v18 <= v19 && v4[v20] == 58 )
            {
              v22 = v20;
              if ( v20 < (int)v68 )
              {
                v22 = v20;
                while ( 1 )
                {
                  v23 = v4[v22 + 1];
                  if ( v23 != 32 && v23 != 9 )
                    break;
                  if ( v68 == ++v22 )
                  {
                    v22 = v68;
                    break;
                  }
                }
              }
              v72 = v22 + 1;
            }
            else
            {
              v24 = v4[v20];
              if ( v24 == 13 || v24 == 10 )
              {
                if ( v21 && !v19 )
                {
                  if ( v20 > 0 )
                  {
                    v25 = nptr;
                    v26 = v20;
                    while ( 1 )
                    {
                      if ( *(v25 - 1) == 32 )
                      {
                        if ( *v21 >= 0 )
                          goto LABEL_63;
                        v27 = atoi(v25);
                        v21 = status_code;
                        *status_code = v27;
                      }
                      ++v25;
                      if ( !--v26 )
                        goto LABEL_63;
                    }
                  }
                  goto LABEL_64;
                }
                v28 = v18 - v19;
                if ( v18 <= v19 || v72 <= v18 )
                {
LABEL_63:
                  v4 = (char *)v67;
                }
                else
                {
                  v29 = (char *)v67 + v19;
                  if ( !strncasecmp(v29, "content-length", v28) )
                  {
                    v4 = (char *)v67;
                    v70 = atoi((const char *)v67 + v72);
                  }
                  else
                  {
                    if ( strncasecmp(v29, "transfer-encoding", v28) )
                    {
                      v21 = status_code;
                      goto LABEL_63;
                    }
                    v4 = (char *)v67;
                    v31 = strncasecmp((const char *)v67 + v72, "chunked", 7u);
                    v32 = v78;
                    if ( !v31 )
                      v32 = 1;
                    v78 = v32;
                  }
                  v21 = status_code;
                }
LABEL_64:
                v72 = 0;
                if ( v20 < v9 )
                {
                  while ( 1 )
                  {
                    v30 = v4[v20];
                    if ( v30 != 13 && v30 != 10 )
                      break;
                    if ( v9 == ++v20 )
                    {
                      v22 = v9;
                      v19 = v9;
                      v20 = v9;
                      goto LABEL_37;
                    }
                  }
                }
                v22 = v20;
                v19 = v20;
                goto LABEL_37;
              }
              v22 = v20;
              v20 = v18;
            }
LABEL_37:
            v18 = v20;
            v20 = v22 + 1;
          }
          while ( (int)(v22 + 1) < (int)v68 );
        }
        v68 = v9 - v71;
        memcpy(src, &v4[v71], v9 - v71);
        v17 = 0;
        v7 = (char *)v9;
      }
LABEL_8:
      v6 = v70;
    }
    while ( v17 == 2 );
    v16 = v17 == 0;
    v8 = v71;
    if ( !v16 )
      return 0;
LABEL_79:
    if ( !v8 )
      goto LABEL_144;
    v71 = v8;
    if ( !v78 )
    {
      nptr = v7;
      v38 = v6 - v69;
      if ( v68 + v69 <= v6 )
        v38 = v68;
      if ( v6 <= 0 )
        v38 = v68;
      v39 = v38 + v69;
      v40 = (char *)ptr;
      if ( v38 + v69 > v75 )
      {
        v41 = v6;
        v42 = v4;
        v43 = v41;
        if ( v41 < v39 )
          v43 = v38 + v69;
        v70 = v41;
        if ( v41 < 0 )
          v43 = v38 + v69;
        v75 = v43;
        v40 = (char *)realloc(ptr, v43);
        v44 = v40;
        if ( !v40 )
        {
          free(ptr);
          free(v42);
          *size = -1;
          v40 = (char *)ptr;
        }
        v16 = v44 == 0;
        v4 = v42;
        v6 = v70;
        if ( v16 )
          return 0;
      }
      ptr = v40;
      memcpy(&v40[v69], src, v38);
      v69 = v39;
      v8 = v71;
      v7 = nptr;
LABEL_144:
      if ( v6 > 0 && v69 >= v6 )
        goto end_of_stream;
      continue;
    }
    break;
  }
  v67 = v4;
  v33 = v68;
  v34 = (char *)ptr;
  if ( (int)v68 <= 0 )
  {
    v58 = v69;
    v62 = 0;
    goto LABEL_142;
  }
  nptr = v7;
  v70 = v6;
  v35 = 0;
  v36 = v74;
  v37 = v69;
  while ( 2 )
  {
    v72 = v37;
    v46 = v76;
    v47 = v34;
    while ( 2 )
    {
      if ( v36 )
      {
        v76 = v46;
        goto LABEL_130;
      }
      if ( !v46 )
      {
        v35 += src[v35] == 13;
        if ( v35 < v33 )
          v35 += src[v35] == 10;
      }
      if ( v35 >= v33 )
        goto LABEL_112;
      v48 = *_ctype_b_loc();
      while ( v46 <= 0x1E )
      {
        v49 = src[v35];
        if ( (v48[v49] & 0x1000) == 0 )
          break;
        v50 = v46 + 1;
        v79[v46] = v49;
        v79[v46 + 1] = 0;
        ++v35;
        ++v46;
        if ( v33 == v35 )
        {
          v46 = v50;
          v35 = v33;
          break;
        }
      }
      v34 = v47;
      if ( v35 >= v33 )
      {
LABEL_112:
        if ( v35 < v33 )
          goto LABEL_120;
LABEL_100:
        v36 = 0;
        if ( v35 < v33 )
          continue;
        v74 = 0;
        v76 = v46;
        v62 = 0;
LABEL_140:
        v6 = v70;
        v7 = nptr;
        v58 = v72;
        goto LABEL_142;
      }
      break;
    }
    while ( 1 )
    {
      v51 = src[v35];
      if ( v51 == 10 || v51 == 13 )
        break;
      if ( v33 == ++v35 )
      {
        v35 = v33;
        goto LABEL_100;
      }
    }
    v35 += v51 == 13;
    if ( v35 >= v33 )
      goto LABEL_100;
LABEL_120:
    if ( src[v35] != 10 )
      goto LABEL_100;
    v76 = 0;
    v52 = 0;
    if ( v46 )
    {
      v53 = 0;
      v52 = 0;
      do
      {
        v54 = v79[v53];
        v56 = 16 * v52;
        if ( (unsigned __int8)(v54 - 48) > 9u )
        {
          v54 |= 0x20u;
          v55 = v56 - 87;
        }
        else
        {
          v55 = v56 - 48;
        }
        v52 = v55 + v54;
        ++v53;
      }
      while ( v46 != v53 );
    }
    v79[0] = 0;
    if ( !v52 )
    {
      v62 = 25;
      v74 = 0;
      v34 = v47;
      goto LABEL_140;
    }
    v36 = v52;
    ++v35;
    v34 = v47;
    v33 = v68;
LABEL_130:
    v57 = v33 - v35;
    v74 = v36;
    if ( v36 < v33 - v35 )
      v57 = v36;
    v58 = v72;
    v37 = v57 + v72;
    if ( v57 + v72 <= v75 )
    {
LABEL_98:
      v65 = &v34[v58];
      v45 = v34;
      memcpy(v65, &src[v35], v57);
      v34 = v45;
      v35 += v57;
      v36 = v74 - v57;
      v33 = v68;
      if ( v35 < (int)v68 )
        continue;
      v74 -= v57;
      v62 = 0;
      v58 = v37;
    }
    else
    {
      v59 = v70;
      if ( v70 < v37 )
        v59 = v57 + v72;
      if ( v70 < 0 )
        v59 = v57 + v72;
      v75 = v59;
      ptr = v34;
      v60 = (char *)realloc(v34, v59);
      v61 = v60;
      if ( !v60 )
      {
        v69 = 0;
        free(ptr);
        free(v67);
        *size = -1;
        v60 = (char *)v69;
        v61 = (char *)ptr;
      }
      if ( v60 )
      {
        v34 = v61;
        goto LABEL_98;
      }
      v62 = 1;
      v34 = v61;
    }
    break;
  }
  v6 = v70;
  v7 = nptr;
LABEL_142:
  ptr = v34;
  if ( !v62 )
  {
    v69 = v58;
    v4 = (char *)v67;
    v8 = v71;
    goto LABEL_144;
  }
  v69 = v58;
  v16 = v62 == 25;
  v4 = (char *)v67;
  result = 0;
  if ( v16 )
  {
end_of_stream:
    free(v4);
    v64 = v69;
    *size = v69;
    if ( v64 )
      return ptr;
    free(ptr);
    return 0;
  }
  return result;
}
