void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v4; // r0
  void *v5; // r4
  unsigned int v6; // r11
  unsigned int v7; // r9
  unsigned int v8; // r8
  char *v9; // r10
  int v10; // r0
  signed int v11; // r6
  void *v12; // r0
  char *v13; // r3
  char *v14; // r2
  char *i; // r5
  int v16; // r3
  int v17; // r6
  int v18; // r3
  size_t v19; // r4
  unsigned int v20; // r6
  bool v21; // cf
  int v22; // r3
  size_t v23; // r1
  char *v24; // r0
  _BOOL4 v25; // r3
  int v27; // r8
  char *v28; // r11
  const char *v29; // r6
  int *v30; // r10
  char *v31; // r2
  char *v32; // r1
  int v33; // r4
  int v34; // r5
  int v35; // r5
  bool v36; // zf
  bool v37; // cc
  int v38; // r0
  const char *v39; // r9
  char *v40; // r7
  bool v41; // zf
  _BOOL4 v42; // r0
  const char *v43; // r5
  int v44; // t1
  const char *v45; // r2
  int v46; // r5
  int v47; // t1
  bool v48; // zf
  char *v49; // r5
  signed int v50; // r4
  size_t v51; // r2
  unsigned int v52; // r7
  int v53; // r3
  size_t v54; // r1
  char *v55; // r0
  const void *v56; // r1
  int v57; // r3
  const unsigned __int16 *v58; // lr
  int v59; // r0
  _BYTE *v60; // r1
  int v61; // r3
  int v62; // t1
  int v63; // r2
  int v64; // t1
  bool v65; // zf
  unsigned __int8 *v66; // r3
  unsigned __int8 *v67; // r11
  int v68; // r2
  int v69; // t1
  int v70; // r8
  int v71; // r8
  int v72; // r3
  int v73; // t1
  int v74; // r2
  bool v75; // zf
  _BOOL4 v76; // r0
  const char *v77; // r9
  int v78; // r0
  int v79; // r3
  unsigned int content_buf_len[2]; // [sp+0h] [bp-8A8h] BYREF
  unsigned int header_buf_used_0; // [sp+8h] [bp-8A0h]
  int content_length; // [sp+Ch] [bp-89Ch]
  char *header_buf; // [sp+10h] [bp-898h]
  int chunked; // [sp+14h] [bp-894h]
  void *ptr; // [sp+18h] [bp-890h]
  unsigned int content_buf_used; // [sp+1Ch] [bp-88Ch]
  unsigned int chunksize_buf_index; // [sp+20h] [bp-888h]
  unsigned int header_buf_len; // [sp+24h] [bp-884h]
  void *v89; // [sp+28h] [bp-880h]
  unsigned int chunksize; // [sp+2Ch] [bp-87Ch]
  char *content_buf; // [sp+30h] [bp-878h]
  unsigned int v92; // [sp+34h] [bp-874h]
  char *v93; // [sp+38h] [bp-870h]
  int *status_codea; // [sp+3Ch] [bp-86Ch]
  char *s2; // [sp+40h] [bp-868h]
  int *sizea; // [sp+44h] [bp-864h]
  size_t v97; // [sp+48h] [bp-860h]
  int *v98; // [sp+4Ch] [bp-85Ch]
  char chunksize_buf[32]; // [sp+54h] [bp-854h] BYREF
  char buf[2048]; // [sp+74h] [bp-834h] BYREF

  sizea = status_code;
  v98 = size;
  if ( status_code )
    *status_code = -1;
  ptr = malloc(0x800u);
  if ( !ptr )
  {
    v5 = 0;
    *v98 = -1;
    return v5;
  }
  v4 = (char *)malloc(0x800u);
  v5 = v4;
  if ( !v4 )
  {
    free(ptr);
    *v98 = -1;
    return v5;
  }
  v6 = 0;
  chunksize_buf[0] = 0;
  header_buf_used_0 = 2048;
  chunksize = 2048;
  chunked = -1;
  content_length = (int)buf;
  v7 = 0;
  v8 = 0;
  v9 = v4;
  header_buf_len = 0;
  content_buf_used = 0;
  v89 = 0;
  chunksize_buf_index = (unsigned int)chunksize_buf;
  do
  {
    while ( 1 )
    {
      v10 = receivedata(s, content_length, 2048, 5000, 0);
      v11 = v10;
      if ( v10 <= 0 )
        goto end_of_stream;
      if ( v89 )
      {
        if ( content_buf_used )
          goto LABEL_89;
        v19 = v10;
LABEL_29:
        v20 = v7 + v11;
        if ( chunked <= 0 )
        {
          if ( header_buf_used_0 >= v20 )
            goto LABEL_40;
          if ( chunked )
          {
            v23 = v20;
            header_buf_used_0 = v20;
LABEL_38:
            v24 = (char *)realloc(v9, v23);
            if ( !v24 )
            {
              free(v9);
              free(ptr);
              v5 = 0;
              *v98 = -1;
              return v5;
            }
            v9 = v24;
LABEL_40:
            memcpy(&v9[v7], (const void *)content_length, v19);
            v7 = v20;
            content_buf_used = 0;
            goto LABEL_41;
          }
        }
        else
        {
          v21 = chunked >= v20;
          if ( chunked < v20 )
            v20 = chunked;
          if ( !v21 )
            v19 = v20 - v7;
          if ( header_buf_used_0 >= v20 )
            goto LABEL_40;
        }
        v22 = chunked;
        if ( v20 >= chunked )
          v22 = v20;
        v23 = v22;
        header_buf_used_0 = v22;
        goto LABEL_38;
      }
      header_buf = (char *)(v10 + header_buf_len);
      if ( v10 + header_buf_len > chunksize )
      {
        v12 = realloc(ptr, v10 + header_buf_len);
        if ( !v12 )
        {
          free(ptr);
          free(v9);
          v5 = v89;
          *v98 = -1;
          return v5;
        }
        ptr = v12;
        chunksize = (unsigned int)header_buf;
      }
      memcpy((char *)ptr + header_buf_len, (const void *)content_length, v11);
      v13 = header_buf;
      v14 = header_buf + -0x1;
      if ( (int)(header_buf + -0x1) <= 0 )
      {
LABEL_25:
        header_buf_len = (unsigned int)v13;
        continue;
      }
      for ( i = 0; ; i += 2 )
      {
LABEL_14:
        v16 = (unsigned __int8)i[(_DWORD)ptr];
        v17 = (int)(i + 1);
        if ( v16 != 13 )
        {
LABEL_15:
          if ( v16 != 10 )
          {
            if ( (int)v14 <= v17 )
              goto LABEL_24;
            goto LABEL_17;
          }
          i += 2;
          goto LABEL_22;
        }
LABEL_18:
        v18 = (int)(i + 2);
        if ( *((_BYTE *)ptr + v17) == 10 )
          break;
        if ( (int)v14 <= v18 )
          goto LABEL_24;
      }
      v17 = (int)(i + 3);
      if ( (int)header_buf > v18 && *((_BYTE *)ptr + v18) == 13 )
        break;
      if ( (int)v14 > v17 )
      {
LABEL_17:
        i = (char *)v17;
        v16 = *((unsigned __int8 *)ptr + v17++);
        if ( v16 != 13 )
          goto LABEL_15;
        goto LABEL_18;
      }
      header_buf_len = (unsigned int)header_buf;
    }
    v13 = header_buf;
    i += 4;
    if ( (int)header_buf <= v17 )
    {
      if ( (int)v14 <= (int)i )
        goto LABEL_25;
      goto LABEL_14;
    }
LABEL_22:
    if ( *((_BYTE *)ptr + v17) != 10 )
    {
      if ( (int)v14 <= (int)i )
      {
LABEL_24:
        v13 = header_buf;
        goto LABEL_25;
      }
      goto LABEL_14;
    }
    status_codea = (int *)"transfer-encoding";
    v89 = (void *)v6;
    s2 = "chunked";
    content_buf = i;
    v92 = v8;
    v93 = v9;
    v27 = v17;
    v28 = header_buf;
    v29 = (const char *)ptr;
    v30 = sizea;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    header_buf_len = v7;
    while ( 1 )
    {
LABEL_59:
      v37 = (int)v32 <= (int)v31;
      if ( (int)v32 >= (int)v31 )
        v37 = (int)v32 <= 0;
      v38 = (unsigned __int8)v29[v33];
      v39 = &v29[v33];
      v40 = (char *)(v33 + 1);
      if ( v37 )
        break;
      if ( v38 == 58 )
      {
        v35 = v33;
        do
        {
          v73 = *(unsigned __int8 *)++v39;
          v72 = v73;
          v74 = v35;
          v75 = v73 == 9;
          if ( v73 != 9 )
            v75 = v72 == 32;
          ++v35;
          if ( !v75 )
          {
            v34 = v74 + 1;
            v31 = (char *)v33;
            v33 = v34;
            goto LABEL_58;
          }
        }
        while ( v27 > v35 );
        v34 = v35 + 1;
        v31 = (char *)v33;
        v33 = v34;
        goto LABEL_58;
      }
      v36 = v38 == 10;
      if ( v38 != 10 )
        v36 = v38 == 13;
      if ( v36 )
        goto LABEL_76;
LABEL_57:
      ++v33;
LABEL_58:
      if ( v27 <= v33 )
        goto LABEL_87;
    }
    v41 = v38 == 10;
    if ( v38 != 10 )
      v41 = v38 == 13;
    if ( !v41 )
      goto LABEL_57;
    v42 = v32 == 0;
    if ( !v30 )
      v42 = 0;
    if ( v42 )
    {
      if ( v33 > 0 )
      {
        v43 = v29;
        do
        {
          while ( 1 )
          {
            v44 = *(unsigned __int8 *)v43++;
            if ( v44 == 32 )
              break;
            if ( v39 == v43 )
              goto LABEL_76;
          }
          if ( *v30 >= 0 )
            break;
          *v30 = strtol(v43, 0u, 10);
        }
        while ( v39 != v43 );
      }
      goto LABEL_76;
    }
    v76 = (int)v32 < (int)v31;
    if ( v34 <= (int)v31 )
      v76 = 0;
    if ( !v76 )
      goto LABEL_76;
    v77 = &v32[(_DWORD)v29];
    v97 = v31 - v32;
    if ( !strncasecmp(&v32[(_DWORD)v29], "content-length", v31 - v32) )
    {
      chunked = strtol(&v29[v34], 0u, 10);
LABEL_76:
      if ( v33 < (int)v28 )
        goto LABEL_77;
      goto LABEL_153;
    }
    if ( strncasecmp(v77, (const char *)status_codea, v97) )
      goto LABEL_76;
    v78 = strncasecmp(&v29[v34], s2, 7u);
    v79 = content_buf_used;
    if ( !v78 )
      v79 = 1;
    content_buf_used = v79;
    if ( v33 >= (int)v28 )
    {
LABEL_153:
      v31 = (char *)v33;
      v32 = (char *)v33;
      v34 = 0;
      ++v33;
      goto LABEL_58;
    }
LABEL_77:
    v45 = &v29[v33 - 1];
    while ( 1 )
    {
      v47 = *(unsigned __int8 *)++v45;
      v46 = v47;
      v32 = (char *)v33;
      v48 = v47 == 10;
      if ( v47 != 10 )
        v48 = v46 == 13;
      v34 = v48;
      v33 = (int)v40;
      if ( !v48 )
        break;
      if ( v28 == v40 )
      {
        v33 = (int)(v32 + 2);
        v34 = 0;
        v31 = v28;
        v32 = v28;
        goto LABEL_58;
      }
      ++v40;
    }
    v31 = v32;
    if ( v27 > (int)v40 )
      goto LABEL_59;
LABEL_87:
    v49 = content_buf;
    v8 = v92;
    v9 = v93;
    v11 = header_buf - content_buf;
    v7 = header_buf_len;
    v6 = (unsigned int)v89;
    memcpy((void *)content_length, &content_buf[(_DWORD)ptr], header_buf - content_buf);
    v19 = v11;
    v89 = v49;
    header_buf_len = (unsigned int)header_buf;
    if ( !content_buf_used )
      goto LABEL_29;
    if ( v11 <= 0 )
      goto LABEL_41;
LABEL_89:
    v50 = 0;
    while ( 2 )
    {
      if ( !v8 )
      {
        if ( v6 )
        {
LABEL_106:
          if ( v50 >= v11 )
            goto LABEL_139;
        }
        else
        {
          v57 = *((unsigned __int8 *)&content_buf_len[29] + v50);
          if ( v57 != 13 )
          {
            if ( v57 != 10 )
              goto LABEL_106;
LABEL_155:
            ++v50;
            goto LABEL_106;
          }
          if ( ++v50 >= v11 )
            goto LABEL_139;
          if ( *((_BYTE *)&content_buf_len[29] + v50) == 10 )
            goto LABEL_155;
        }
        v58 = *_ctype_b_loc();
        v59 = content_length + v50 - 1;
        v60 = (_BYTE *)(chunksize_buf_index + v6);
        while ( 1 )
        {
          v62 = *(unsigned __int8 *)++v59;
          v61 = v62;
          if ( ((v6 <= 0x1E) & (v58[v62] >> 0xC)) == 0 )
            break;
          ++v50;
          *v60 = v61;
          ++v6;
          *++v60 = 0;
          if ( v50 >= v11 )
            goto LABEL_139;
        }
        if ( v50 >= v11 )
          goto LABEL_139;
        v63 = content_length + v50;
        while ( 1 )
        {
          v65 = v61 == 10;
          if ( v61 != 10 )
            v65 = v61 == 13;
          if ( v65 )
            break;
          if ( ++v50 == v11 )
            goto LABEL_139;
          v64 = *(unsigned __int8 *)++v63;
          v61 = v64;
        }
        if ( v50 >= v11 )
        {
LABEL_139:
          content_buf_used = 1;
          goto LABEL_41;
        }
        if ( v61 == 13 )
        {
          if ( ++v50 >= v11 )
            goto LABEL_139;
          v61 = *((unsigned __int8 *)&content_buf_len[29] + v50);
        }
        if ( v61 != 10 )
        {
          v52 = v7;
LABEL_101:
          v7 = v52;
          continue;
        }
        if ( !v6 )
          goto end_of_stream;
        v66 = (unsigned __int8 *)chunksize_buf_index;
        v8 = 0;
        v67 = (unsigned __int8 *)(chunksize_buf_index + v6);
        do
        {
          v69 = *v66++;
          v68 = v69;
          v70 = 16 * v8;
          if ( (unsigned int)(v69 - 0x30) > 9 )
          {
            v71 = v70 - 0x57;
            v68 |= 0x20u;
          }
          else
          {
            v71 = v70 - 0x30;
          }
          v8 = v71 + v68;
        }
        while ( v66 != v67 );
        ++v50;
        chunksize_buf[0] = 0;
        if ( !v8 )
          goto end_of_stream;
        v6 = 0;
      }
      break;
    }
    v51 = v11 - v50;
    if ( v11 - v50 >= v8 )
      v51 = v8;
    v52 = v51 + v7;
    if ( v51 + v7 > header_buf_used_0 )
    {
      v53 = chunked;
      if ( chunked >= 0 )
      {
        if ( chunked < v52 )
          v53 = v51 + v7;
        v54 = v53;
        header_buf_used_0 = v53;
      }
      else
      {
        v54 = v51 + v7;
        header_buf_used_0 = v51 + v7;
      }
      header_buf = (char *)v51;
      v55 = (char *)realloc(v9, v54);
      v51 = (size_t)header_buf;
      if ( !v55 )
      {
        header_buf_used_0 = 0;
        free(v9);
        free(ptr);
        v5 = (void *)header_buf_used_0;
        *v98 = -1;
        return v5;
      }
      v9 = v55;
    }
    v56 = (const void *)(content_length + v50);
    v50 += v51;
    v8 -= v51;
    memcpy(&v9[v7], v56, v51);
    if ( v50 < v11 )
      goto LABEL_101;
    v7 = v52;
    content_buf_used = 1;
LABEL_41:
    v25 = chunked > 0;
    if ( v7 < chunked )
      v25 = 0;
  }
  while ( !v25 );
end_of_stream:
  free(ptr);
  v5 = v9;
  *v98 = v7;
  if ( !v7 )
  {
    free(v9);
    return 0;
  }
  return v5;
}
