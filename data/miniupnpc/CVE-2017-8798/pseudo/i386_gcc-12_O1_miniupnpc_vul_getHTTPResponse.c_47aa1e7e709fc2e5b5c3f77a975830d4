void *__cdecl getHTTPResponse(int s, int *size, int *status_code)
{
  int *v3; // ebp
  int v4; // eax
  int v5; // esi
  char v6; // dl
  int v7; // ebx
  int v8; // esi
  int v9; // ecx
  char *v10; // edi
  int v11; // eax
  char v12; // dl
  char v13; // dl
  char v14; // al
  const char *v15; // ebp
  const char *v16; // esi
  int *v17; // edi
  bool v18; // zf
  int v19; // eax
  char v20; // al
  int v21; // ebp
  int v22; // esi
  int v23; // esi
  const unsigned __int16 *v24; // ebp
  unsigned int v25; // eax
  unsigned int v26; // ebx
  char *v27; // edi
  char v28; // cl
  char v29; // dl
  int v30; // ebp
  char *v31; // ecx
  char *v32; // edi
  int v33; // edx
  char v34; // al
  int *v35; // ebp
  size_t v36; // edi
  int v37; // eax
  char *v38; // eax
  char *v39; // esi
  int *v40; // ebp
  char *v42; // eax
  size_t v43; // edi
  int v44; // ebp
  char *v45; // eax
  char *v46; // edi
  int n; // [esp+0h] [ebp-89Ch]
  int na; // [esp+0h] [ebp-89Ch]
  int content_buf_used; // [esp+4h] [ebp-898h]
  signed int chunksize; // [esp+Ch] [ebp-890h]
  char *content_buf; // [esp+14h] [ebp-888h]
  unsigned int content_buf_len; // [esp+18h] [ebp-884h]
  int header_buf_used_0; // [esp+1Ch] [ebp-880h]
  int endofheaders; // [esp+20h] [ebp-87Ch]
  int content_length; // [esp+24h] [ebp-878h]
  unsigned int chunksize_buf_index; // [esp+28h] [ebp-874h]
  int valuestart; // [esp+2Ch] [ebp-870h]
  char *header_buf; // [esp+30h] [ebp-86Ch]
  int v59; // [esp+34h] [ebp-868h]
  unsigned int header_buf_len; // [esp+38h] [ebp-864h]
  int chunked; // [esp+3Ch] [ebp-860h]
  int v62; // [esp+40h] [ebp-85Ch]
  size_t v63; // [esp+44h] [ebp-858h]
  int *v64; // [esp+48h] [ebp-854h]
  int *v65; // [esp+4Ch] [ebp-850h]
  char chunksize_buf[32]; // [esp+5Ch] [ebp-840h] BYREF
  char buf[2048]; // [esp+7Ch] [ebp-820h] BYREF
  unsigned int v69; // [esp+87Ch] [ebp-20h]

  v64 = status_code;
  v69 = __readgsdword(0x14u);
  if ( status_code )
    *status_code = -1;
  header_buf = (char *)malloc(0x800u);
  if ( !header_buf )
  {
    *size = -1;
    return 0;
  }
  content_buf = (char *)malloc(0x800u);
  if ( !content_buf )
  {
    free(header_buf);
    *size = -1;
    return content_buf;
  }
  chunksize_buf[0] = 0;
  chunksize_buf_index = 0;
  content_buf_used = 0;
  content_buf_len = 2048;
  valuestart = 0;
  header_buf_len = 2048;
  chunksize = 0;
  content_length = -1;
  chunked = 0;
  endofheaders = 0;
  v65 = size;
  do
  {
    while ( 1 )
    {
      while ( 1 )
      {
        na = receivedata(s, buf, 2048, 5000, 0);
        if ( na <= 0 )
        {
          v40 = v65;
          goto end_of_stream;
        }
        if ( endofheaders )
        {
          if ( chunked )
            goto LABEL_77;
LABEL_134:
          if ( content_length > 0 )
          {
            v43 = na;
            v44 = content_buf_used + na;
            if ( content_buf_used + na <= content_length )
            {
              v39 = content_buf;
              if ( content_buf_len < v44 )
                goto LABEL_132;
              goto LABEL_141;
            }
            na = content_length - content_buf_used;
          }
          v43 = na;
          v44 = content_buf_used + na;
          if ( content_buf_len < content_buf_used + na )
          {
            content_buf_len = content_buf_used + na;
            if ( v44 > content_length )
            {
              v42 = (char *)realloc(content_buf, content_buf_len);
LABEL_140:
              v39 = v42;
              if ( !v42 )
              {
LABEL_108:
                v35 = v65;
                free(content_buf);
                free(header_buf);
                *v35 = -1;
                return 0;
              }
              goto LABEL_141;
            }
LABEL_132:
            content_buf_len = content_length;
            v42 = (char *)realloc(content_buf, content_length);
            goto LABEL_140;
          }
          v39 = content_buf;
LABEL_141:
          memcpy(&v39[content_buf_used], buf, v43);
          content_buf_used = v44;
          content_buf = v39;
          goto LABEL_142;
        }
        header_buf_used_0 = valuestart + na;
        if ( header_buf_len < valuestart + na )
        {
          v45 = (char *)realloc(header_buf, valuestart + na);
          if ( !v45 )
          {
            v3 = v65;
            free(header_buf);
            free(content_buf);
            *v3 = -1;
            return 0;
          }
          header_buf_len = header_buf_used_0;
          header_buf = v45;
        }
        v46 = header_buf;
        memcpy(&header_buf[valuestart], buf, na);
        if ( header_buf_used_0 > 1 )
          break;
        valuestart = header_buf_used_0;
      }
      v4 = 0;
      do
      {
        v6 = v46[v4];
        if ( v6 == 13 )
        {
          if ( v46[v4 + 1] == 10 )
          {
            if ( v4 + 2 >= header_buf_used_0 )
            {
              v4 += 2;
              v5 = 0;
            }
            else if ( v46[v4 + 2] == 13 )
            {
              if ( v4 + 3 >= header_buf_used_0 )
              {
                v4 += 3;
                v5 = 0;
              }
              else if ( v46[v4 + 3] == 10 )
              {
                v5 = v4 + 4;
                v4 += 3;
              }
              else
              {
                v4 += 3;
                v5 = 0;
              }
            }
            else
            {
              v4 += 2;
              v5 = 0;
            }
          }
          else
          {
            ++v4;
            v5 = 0;
          }
        }
        else
        {
          v5 = 0;
          if ( v6 == 10 )
          {
            if ( v46[v4 + 1] == 10 )
              v5 = v4 + 2;
            ++v4;
          }
        }
        ++v4;
      }
      while ( v4 < header_buf_used_0 - 1 && !v5 );
      v59 = v5;
      if ( v5 )
        break;
      valuestart = header_buf_used_0;
      endofheaders = 0;
    }
    n = v5 - 1;
    if ( v5 - 1 > 0 )
    {
      valuestart = 0;
      v7 = 0;
      v8 = 0;
      v62 = 0;
      v9 = 0;
      v10 = header_buf;
      do
      {
        if ( v7 <= 0 || v7 < v9 )
        {
          v13 = v10[v8];
          if ( v13 == 13 || v13 == 10 )
          {
            if ( v7 || !v64 )
            {
              if ( v7 < v9 && v9 < valuestart )
              {
                v63 = v9 - v7;
                if ( !strncasecmp(&v10[v7], "content-length", v9 - v7) )
                {
                  content_length = strtol(&v10[valuestart], 0, 10);
                }
                else if ( !strncasecmp(&v10[v7], "transfer-encoding", v63) )
                {
                  v18 = strncasecmp(&v10[valuestart], "chunked", 7u) == 0;
                  v19 = 1;
                  if ( !v18 )
                    v19 = chunked;
                  chunked = v19;
                }
              }
            }
            else if ( v8 > 0 )
            {
              v15 = v10 + 1;
              valuestart = v8;
              v63 = (size_t)v10;
              v16 = &v10[v8 + 1];
              v17 = v64;
              do
              {
                if ( *(v15 - 1) == 32 )
                {
                  if ( *v17 >= 0 )
                  {
                    v8 = valuestart;
                    v10 = (char *)v63;
                    goto LABEL_47;
                  }
                  *v17 = strtol(v15, 0, 10);
                }
                ++v15;
              }
              while ( v15 != v16 );
              v8 = valuestart;
              v10 = (char *)v63;
            }
LABEL_47:
            if ( header_buf_used_0 <= v8 )
            {
              valuestart = 0;
              v9 = v8;
              v7 = v8;
            }
            else
            {
              do
              {
                v20 = v10[v8];
                if ( v20 != 13 && v20 != 10 )
                {
                  valuestart = v62;
                  v9 = v8;
                  v7 = v8;
                  goto LABEL_41;
                }
                ++v8;
              }
              while ( v8 != header_buf_used_0 );
              valuestart = v62;
              v8 = header_buf_used_0;
              v9 = header_buf_used_0;
              v7 = header_buf_used_0;
            }
          }
        }
        else
        {
          v14 = v10[v8];
          if ( v14 == 58 )
          {
            if ( n <= v8 )
            {
              v11 = v8;
            }
            else
            {
              v11 = v8;
              while ( 1 )
              {
                v12 = v10[v11 + 1];
                if ( v12 != 32 && v12 != 9 )
                  break;
                if ( ++v11 == v59 - 1 )
                {
                  v11 = v59 - 1;
                  break;
                }
              }
            }
            valuestart = v11 + 1;
            v9 = v8;
            v8 = v11;
            goto LABEL_41;
          }
          if ( v14 == 13 || v14 == 10 )
            goto LABEL_47;
        }
LABEL_41:
        ++v8;
      }
      while ( v8 < n );
    }
    v21 = v59;
    v22 = header_buf_used_0 - v59;
    na = header_buf_used_0 - v59;
    memcpy(buf, &header_buf[v59], header_buf_used_0 - v59);
    valuestart = header_buf_used_0;
    endofheaders = v21;
    if ( !chunked )
      goto LABEL_134;
    if ( v22 > 0 )
    {
      valuestart = header_buf_used_0;
      endofheaders = v59;
LABEL_77:
      v23 = 0;
LABEL_111:
      if ( chunksize )
      {
LABEL_112:
        v36 = na - v23;
        if ( na - v23 > chunksize )
          v36 = chunksize;
        v30 = v36 + content_buf_used;
        if ( content_buf_len < v36 + content_buf_used )
        {
          v37 = content_length;
          if ( content_length < v30 )
            v37 = v36 + content_buf_used;
          content_buf_len = v37;
          v38 = (char *)realloc(content_buf, v37);
          if ( !v38 )
            goto LABEL_108;
          content_buf = v38;
        }
        memcpy(&content_buf[content_buf_used], &buf[v23], v36);
        v23 += v36;
        chunksize -= v36;
        if ( na <= v23 )
        {
          content_buf_used += v36;
          continue;
        }
        goto LABEL_110;
      }
      if ( chunksize_buf_index )
      {
LABEL_84:
        if ( na <= v23 )
          goto LABEL_130;
      }
      else
      {
        if ( buf[v23] == 13 )
          ++v23;
        if ( na <= v23 )
        {
LABEL_130:
          v25 = chunksize_buf_index;
LABEL_94:
          chunksize_buf_index = v25;
          continue;
        }
        if ( buf[v23] == 10 )
        {
          ++v23;
          goto LABEL_84;
        }
      }
      v24 = *_ctype_b_loc();
      v25 = chunksize_buf_index;
      v26 = chunksize_buf_index + na - v23;
      v27 = &buf[v23 - chunksize_buf_index];
      while ( 1 )
      {
        v28 = v27[v25];
        if ( (v24[v28] & 0x1000) == 0 || v25 > 0x1E )
          break;
        chunksize_buf[v25++] = v28;
        chunksize_buf[v25] = 0;
        ++v23;
        if ( v25 == v26 )
        {
          v25 = v26;
          break;
        }
      }
      if ( v23 >= na )
        goto LABEL_94;
      while ( 1 )
      {
        v29 = buf[v23];
        if ( v29 == 10 || v29 == 13 )
          break;
        if ( na == ++v23 )
          goto LABEL_94;
      }
      if ( na <= v23 )
        goto LABEL_94;
      if ( buf[v23] == 13 && na <= ++v23 )
        goto LABEL_94;
      if ( buf[v23] == 10 )
      {
        if ( !v25 )
        {
          v40 = v65;
          goto end_of_stream;
        }
        v31 = chunksize_buf;
        v32 = &chunksize_buf[v25];
        v33 = 0;
        do
        {
          v34 = *v31;
          if ( (unsigned __int8)(*v31 - 48) > 9u )
            v33 = 16 * v33 + (v34 | 0x20) - 87;
          else
            v33 = 16 * v33 + v34 - 48;
          ++v31;
        }
        while ( v31 != v32 );
        chunksize_buf[0] = 0;
        ++v23;
        if ( !v33 )
        {
          v40 = v65;
          goto end_of_stream;
        }
        chunksize_buf_index = 0;
        chunksize = v33;
        goto LABEL_112;
      }
      chunksize_buf_index = v25;
      v30 = content_buf_used;
LABEL_110:
      content_buf_used = v30;
      goto LABEL_111;
    }
    valuestart = header_buf_used_0;
    endofheaders = v59;
LABEL_142:
    ;
  }
  while ( content_length <= 0 || content_buf_used < content_length );
  v40 = v65;
end_of_stream:
  free(header_buf);
  *v40 = content_buf_used;
  if ( !content_buf_used )
  {
    free(content_buf);
    return 0;
  }
  return content_buf;
}
