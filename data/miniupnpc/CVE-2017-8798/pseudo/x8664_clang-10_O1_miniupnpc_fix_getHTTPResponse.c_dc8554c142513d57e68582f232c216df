void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // rax
  char *v4; // r14
  char *v5; // rax
  int v6; // ebx
  __int64 v7; // rsi
  int v8; // eax
  int v9; // r9d
  unsigned int v10; // r13d
  int v11; // r12d
  char *v12; // rbx
  unsigned int v13; // ebp
  int v14; // eax
  bool v15; // cl
  __int64 v16; // rdi
  int *v17; // r8
  int v18; // edx
  int v19; // ecx
  char v20; // bl
  __int64 v21; // rcx
  unsigned int v22; // edx
  bool v23; // zf
  unsigned int v24; // edx
  __int64 v25; // r12
  int v26; // r9d
  int v27; // ebp
  int v28; // ecx
  int v29; // eax
  int v30; // r13d
  int v31; // esi
  __int64 v32; // rdx
  char v33; // dl
  __int64 v34; // rbx
  const char *v35; // rbp
  bool v36; // cl
  int v37; // eax
  int v38; // edx
  const char *v39; // rbp
  size_t v40; // rbx
  int v41; // eax
  int v42; // ecx
  __int64 v43; // rcx
  char v44; // bl
  int v45; // ebx
  __int64 v46; // rax
  __int64 v47; // r12
  __int64 v48; // rbx
  unsigned int v49; // r15d
  unsigned __int64 v50; // rbp
  const unsigned __int16 **v51; // rax
  const unsigned __int16 *v52; // r8
  __int64 v53; // rcx
  __int64 v54; // rdi
  char v55; // al
  __int64 v56; // r8
  __int64 v57; // rcx
  int v58; // edx
  int v59; // eax
  unsigned __int8 v60; // bp
  int v61; // edx
  int v62; // edi
  int v63; // eax
  unsigned int v64; // ebp
  unsigned int v65; // edx
  size_t v66; // rsi
  char *v67; // rax
  int v68; // ecx
  unsigned int v69; // edx
  int v70; // r12d
  unsigned int v71; // r14d
  size_t v72; // rsi
  char *v73; // rax
  char v74; // cl
  int v76; // [rsp+4h] [rbp-8D4h]
  int v77; // [rsp+4h] [rbp-8D4h]
  int v78; // [rsp+8h] [rbp-8D0h]
  int v79; // [rsp+8h] [rbp-8D0h]
  unsigned int v80; // [rsp+10h] [rbp-8C8h]
  __int64 v81; // [rsp+18h] [rbp-8C0h]
  __int64 v82; // [rsp+18h] [rbp-8C0h]
  char *ptr; // [rsp+20h] [rbp-8B8h]
  int v84; // [rsp+28h] [rbp-8B0h]
  char *v85; // [rsp+28h] [rbp-8B0h]
  char *v86; // [rsp+28h] [rbp-8B0h]
  int v87; // [rsp+34h] [rbp-8A4h]
  unsigned int v88; // [rsp+38h] [rbp-8A0h]
  int v89; // [rsp+44h] [rbp-894h]
  __int64 v90; // [rsp+48h] [rbp-890h]
  int v91; // [rsp+48h] [rbp-890h]
  unsigned int v93; // [rsp+58h] [rbp-880h]
  int v94; // [rsp+58h] [rbp-880h]
  unsigned int v96; // [rsp+68h] [rbp-870h]
  unsigned int v97; // [rsp+70h] [rbp-868h]
  char v99[32]; // [rsp+80h] [rbp-858h]
  char src[2104]; // [rsp+A0h] [rbp-838h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800uLL);
  if ( !v3 )
    goto LABEL_156;
  v4 = v3;
  v5 = (char *)malloc(0x800uLL);
  if ( !v5 )
  {
    free(v4);
LABEL_156:
    *size = -1;
    return 0LL;
  }
  ptr = v5;
  v99[0] = 0;
  v88 = 2048;
  v6 = -1;
  v89 = 0;
  v90 = 0LL;
  v93 = 0;
  v96 = 2048;
  v80 = 0;
  v87 = 0;
  v7 = 0LL;
  while ( 2 )
  {
    while ( 2 )
    {
      v76 = v6;
      do
      {
        v8 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
        if ( v8 <= 0 )
          goto end_of_stream;
        v9 = v8;
        if ( (_DWORD)v7 )
        {
          v46 = v90;
          v6 = v76;
          goto LABEL_82;
        }
        v10 = v8 + v93;
        v78 = v8 + v93;
        if ( v8 + v93 <= v88 )
        {
          v13 = v88;
        }
        else
        {
          v11 = v8;
          v12 = v4;
          v4 = (char *)realloc(v4, v10);
          v7 = 0LL;
          v13 = v10;
          v14 = 0;
          if ( !v4 )
          {
            free(v12);
            free(ptr);
            v7 = 0LL;
            *size = -1;
            v14 = 1;
            v4 = v12;
            v13 = v88;
          }
          v9 = v11;
          if ( v14 )
          {
            v88 = v13;
            continue;
          }
        }
        v11 = v9;
        memcpy(&v4[v93], src, v9);
        v15 = 1;
        v16 = 0LL;
        v17 = status_code;
        if ( v78 >= 2 )
        {
          v16 = 0LL;
          v18 = 0;
          do
          {
            v19 = v18;
            v20 = v4[v18];
            if ( v20 == 10 )
            {
              v23 = v4[v18 + 1] == 10;
              v24 = v18 + 2;
              LODWORD(v21) = v19 + 1;
              if ( v23 )
                v16 = v24;
            }
            else if ( v20 == 13 )
            {
              if ( v4[v18 + 1] == 10 )
              {
                if ( v18 + 2 < v78 && v4[v18 + 2] == 13 )
                {
                  v21 = v18 + 3LL;
                  if ( (int)v21 < v78 )
                  {
                    v22 = v18 + 4;
                    if ( v4[v21] == 10 )
                      v16 = v22;
                  }
                }
                else
                {
                  LODWORD(v21) = v18 + 2;
                }
              }
              else
              {
                LODWORD(v21) = v18 + 1;
              }
            }
            else
            {
              LODWORD(v21) = v18;
            }
            v18 = v21 + 1;
            v15 = (_DWORD)v16 == 0;
          }
          while ( v18 < v78 - 1 && !(_DWORD)v16 );
        }
        v14 = 2;
        if ( v15 )
        {
          v88 = v13;
          v93 = v78;
          v7 = 0LL;
        }
        else
        {
          v97 = v13;
          v81 = v16;
          if ( (int)v16 < 2 )
          {
            v26 = v78;
          }
          else
          {
            v94 = v16 - 1;
            v25 = (int)v16 - 1;
            v26 = v78;
            v27 = 0;
            v28 = 0;
            v29 = 0;
            v30 = 0;
            do
            {
              if ( v29 > 0 && v28 <= v29 && (v32 = v30, v4[v30] == 58) )
              {
                do
                {
                  v36 = v32 < v25 && (v4[v32 + 1] == 32 || v4[v32 + 1] == 9);
                  ++v32;
                }
                while ( v36 );
                v31 = v32 - 1;
                v27 = v32;
              }
              else
              {
                v33 = v4[v30];
                if ( v33 == 13 || v33 == 10 )
                {
                  if ( !v17 || v29 )
                  {
                    v38 = v28 - v29;
                    if ( v28 > v29 && v27 > v28 )
                    {
                      v84 = v27;
                      v39 = &v4[v29];
                      v40 = v38;
                      if ( !strncasecmp(v39, "content-length", v38) )
                      {
                        v76 = atoi(&v4[v84]);
                      }
                      else if ( !strncasecmp(v39, "transfer-encoding", v40) )
                      {
                        v41 = strncasecmp(&v4[v84], "chunked", 7uLL);
                        v42 = v89;
                        if ( !v41 )
                          v42 = 1;
                        v89 = v42;
                      }
                      v17 = status_code;
                      LODWORD(v16) = v81;
LABEL_70:
                      v26 = v78;
                    }
                  }
                  else if ( v30 > 0 )
                  {
                    v34 = (unsigned int)v30;
                    v35 = v4 + 1;
                    while ( 1 )
                    {
                      if ( *(v35 - 1) == 32 )
                      {
                        if ( *v17 >= 0 )
                          goto LABEL_70;
                        v37 = atoi(v35);
                        LODWORD(v16) = v81;
                        v17 = status_code;
                        *status_code = v37;
                      }
                      ++v35;
                      if ( !--v34 )
                        goto LABEL_70;
                    }
                  }
                  v27 = 0;
                  if ( v30 >= v26 )
                  {
LABEL_39:
                    v31 = v30;
                    v29 = v30;
                  }
                  else
                  {
                    v43 = 0LL;
                    do
                    {
                      v44 = v4[v30 + v43];
                      if ( v44 != 13 && v44 != 10 )
                      {
                        v30 += v43;
                        goto LABEL_39;
                      }
                      ++v43;
                    }
                    while ( v78 - (__int64)v30 != v43 );
                    v31 = v26;
                    v29 = v26;
                    v30 = v26;
                  }
                }
                else
                {
                  v31 = v30;
                  v30 = v28;
                }
              }
              v28 = v30;
              v30 = v31 + 1;
            }
            while ( v31 + 1 < v94 );
          }
          v11 = v26 - v16;
          v45 = v26;
          memcpy(src, &v4[(int)v16], v26 - (int)v16);
          v7 = v81;
          v14 = 0;
          v88 = v97;
          v93 = v45;
        }
      }
      while ( v14 == 2 );
      v23 = v14 == 0;
      v46 = v90;
      v9 = v11;
      v6 = v76;
      if ( !v23 )
        return 0LL;
LABEL_82:
      if ( !(_DWORD)v7 )
        goto LABEL_145;
      v82 = v7;
      if ( !v89 )
      {
        v86 = v4;
        v69 = v80;
        v70 = v6 - v80;
        if ( v9 + v80 <= v6 )
          v70 = v9;
        if ( v6 <= 0 )
          v70 = v9;
        v71 = v70 + v80;
        if ( v70 + v80 <= v96 )
        {
          v73 = ptr;
LABEL_151:
          ptr = v73;
          memcpy(&v73[v69], src, v70);
          v80 += v70;
          v7 = v82;
          v4 = v86;
          if ( v6 > 0 )
            goto LABEL_146;
          continue;
        }
        v72 = (unsigned int)v6;
        if ( v6 < v71 )
          v72 = v71;
        if ( v6 < 0 )
          v72 = v71;
        v96 = v72;
        v73 = (char *)realloc(ptr, v72);
        if ( v73 )
        {
          v74 = 1;
          v69 = v80;
        }
        else
        {
          free(ptr);
          free(v86);
          *size = -1;
          v74 = 0;
          v69 = v80;
          v73 = ptr;
        }
        if ( v74 )
          goto LABEL_151;
        return 0LL;
      }
      break;
    }
    if ( v9 <= 0 )
    {
LABEL_144:
      v90 = v46;
LABEL_145:
      if ( v6 > 0 )
      {
LABEL_146:
        if ( v80 >= v6 )
          goto end_of_stream;
        continue;
      }
      continue;
    }
    break;
  }
  v77 = v6;
  v47 = v9;
  LODWORD(v48) = 0;
  v79 = v9;
  v85 = v4;
  while ( 2 )
  {
    v49 = v80;
    LODWORD(v50) = v87;
LABEL_88:
    if ( (_DWORD)v46 )
    {
      v87 = v50;
LABEL_116:
      v64 = v9 - v48;
      v91 = v46;
      if ( (unsigned int)v46 < v9 - (int)v48 )
        v64 = v46;
      v65 = v80 + v64;
      v80 += v64;
      if ( v49 + v64 <= v96 )
      {
        v67 = ptr;
      }
      else
      {
        v66 = (unsigned int)v77;
        if ( v77 < v65 )
          v66 = v65;
        if ( v77 < 0 )
          v66 = v65;
        v96 = v66;
        v67 = (char *)realloc(ptr, v66);
        if ( v67 )
        {
          v68 = 0;
        }
        else
        {
          free(ptr);
          free(v85);
          *size = -1;
          v68 = 1;
          v67 = ptr;
        }
        if ( v68 )
        {
          ptr = v67;
          v80 = v49;
          v4 = v85;
          goto LABEL_158;
        }
      }
      ptr = v67;
      memcpy(&v67[v49], &src[(int)v48], v64);
      LODWORD(v48) = v64 + v48;
      v46 = v91 - v64;
      v9 = v79;
      v7 = v82;
      v4 = v85;
      if ( (int)v48 < v79 )
        continue;
      goto LABEL_142;
    }
    break;
  }
  if ( !(_DWORD)v50 )
  {
    LODWORD(v48) = (src[(int)v48] == 13) + (_DWORD)v48;
    if ( (int)v48 < v9 )
      LODWORD(v48) = v48 + (src[(int)v48] == 10);
  }
  if ( (int)v48 < v9 )
  {
    v51 = _ctype_b_loc();
    v9 = v79;
    v52 = *v51;
    v50 = (unsigned int)v50;
    v53 = 0LL;
    while ( v50 <= 0x1E )
    {
      v54 = src[(int)v48 + v53];
      if ( (v52[v54] & 0x1000) == 0 )
        break;
      v99[v50++] = v54;
      v99[(unsigned int)v50] = 0;
      if ( v47 - (int)v48 == ++v53 )
      {
        LODWORD(v48) = v79;
        goto LABEL_99;
      }
    }
    LODWORD(v48) = v53 + v48;
LABEL_99:
    v7 = v82;
  }
  v48 = (int)v48;
  while ( v48 < v47 )
  {
    v55 = src[v48++];
    if ( v55 == 13 || v55 == 10 )
    {
      if ( v55 != 13 )
        LODWORD(v48) = v48 - 1;
      break;
    }
  }
  if ( v9 <= (int)v48 || src[(int)v48] != 10 )
  {
    v46 = 0LL;
    if ( v9 > (int)v48 )
      goto LABEL_88;
    v87 = v50;
LABEL_142:
    v68 = 0;
    goto LABEL_143;
  }
  v87 = 0;
  LODWORD(v46) = 0;
  if ( (_DWORD)v50 )
  {
    v56 = (unsigned int)v50;
    v57 = 0LL;
    v58 = 0;
    do
    {
      v59 = v99[v57];
      v60 = v59 - 48;
      v61 = 16 * v58;
      v62 = v59 - 48;
      v63 = (v59 | 0x20) - 87;
      if ( v60 < 0xAu )
        v63 = v62;
      LODWORD(v46) = v61 + v63;
      ++v57;
      v58 = v46;
    }
    while ( v56 != v57 );
  }
  v99[0] = 0;
  if ( (_DWORD)v46 )
  {
    LODWORD(v48) = v48 + 1;
    goto LABEL_116;
  }
  v68 = 25;
  v46 = 0LL;
LABEL_143:
  v6 = v77;
  if ( !v68 )
    goto LABEL_144;
LABEL_158:
  if ( v68 != 25 )
    return 0LL;
end_of_stream:
  free(v4);
  *size = v80;
  if ( !v80 )
  {
    free(ptr);
    return 0LL;
  }
  return ptr;
}
