void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // r12
  char *v4; // rax
  char *v5; // r14
  __int64 v6; // r13
  unsigned int v7; // r15d
  int v8; // ebp
  int v9; // edx
  int v10; // ebx
  int v11; // ebp
  char *v12; // rax
  char *v13; // rdi
  unsigned int v14; // ebp
  char *v15; // rax
  char v16; // cl
  int v17; // eax
  int v18; // ebx
  int v19; // ecx
  int v20; // edx
  __int64 v21; // rax
  int v22; // esi
  __int64 v23; // rbx
  char v24; // di
  char v25; // dl
  int v26; // edi
  const char *v27; // rdx
  int j; // ecx
  int v29; // eax
  size_t v30; // rdx
  const char *v31; // rdi
  bool v32; // zf
  int v33; // eax
  char v34; // al
  int v35; // ebp
  char *v36; // r9
  unsigned int v37; // edx
  __int64 v38; // rdx
  const unsigned __int16 **v39; // rax
  const unsigned __int16 *v40; // rcx
  __int64 v41; // rax
  __int64 v42; // rax
  char v43; // dl
  __int64 k; // rcx
  int v45; // eax
  int v46; // edx
  unsigned int v47; // r8d
  unsigned int v48; // r10d
  char *v49; // rax
  char *v50; // rsi
  char *v51; // rdi
  int content_length; // [rsp+8h] [rbp-8B0h]
  int endofheaders; // [rsp+Ch] [rbp-8ACh]
  unsigned int v57; // [rsp+20h] [rbp-898h]
  unsigned int header_buf_used; // [rsp+24h] [rbp-894h]
  signed int header_buf_useda; // [rsp+24h] [rbp-894h]
  unsigned int v60; // [rsp+28h] [rbp-890h]
  unsigned int v61; // [rsp+28h] [rbp-890h]
  int chunked; // [rsp+2Ch] [rbp-88Ch]
  unsigned int header_buf_len; // [rsp+30h] [rbp-888h]
  const char *chunksize; // [rsp+38h] [rbp-880h]
  char *chunksizea; // [rsp+38h] [rbp-880h]
  unsigned int chunksizeb; // [rsp+38h] [rbp-880h]
  size_t i; // [rsp+40h] [rbp-878h]
  __int64 ia; // [rsp+40h] [rbp-878h]
  unsigned int ib; // [rsp+40h] [rbp-878h]
  int sp_0; // [rsp+48h] [rbp-870h]
  int sp_0a; // [rsp+48h] [rbp-870h]
  char *sp_0b; // [rsp+48h] [rbp-870h]
  char chunksize_buf[32]; // [rsp+58h] [rbp-860h]
  char buf[2048]; // [rsp+78h] [rbp-840h] BYREF
  unsigned __int64 v76; // [rsp+878h] [rbp-40h]

  v76 = __readfsqword(0x28u);
  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800uLL);
  if ( !v3 )
  {
    *size = -1;
    return v3;
  }
  v4 = (char *)malloc(0x800uLL);
  if ( !v4 )
  {
LABEL_17:
    v13 = v3;
    goto LABEL_25;
  }
  v5 = v3;
  chunksize_buf[0] = 0;
  v3 = v4;
  v6 = 0LL;
  v57 = 0;
  v7 = 2048;
  v8 = 0;
  header_buf_used = 0;
  header_buf_len = 2048;
  v60 = 0;
  content_length = -1;
  chunked = 0;
  while ( 2 )
  {
    v10 = receivedata((unsigned int)s, buf, 2048LL, 5000LL, 0LL);
    if ( v10 <= 0 )
      break;
    if ( v8 )
    {
      endofheaders = v8;
      goto LABEL_77;
    }
    v11 = v10 + header_buf_used;
    if ( v10 + header_buf_used > header_buf_len )
    {
      v12 = (char *)realloc(v5, (unsigned int)v11);
      if ( !v12 )
      {
        free(v5);
        goto LABEL_17;
      }
      header_buf_len = v10 + header_buf_used;
      v5 = v12;
    }
    endofheaders = 0;
    v9 = 0;
    qmemcpy(&v5[header_buf_used], buf, (unsigned int)v10);
    while ( v11 - 1 > v9 )
    {
      if ( endofheaders )
        goto LABEL_40;
      v16 = v5[v9];
      v17 = v9 + 1;
      if ( v16 == 13 )
      {
        if ( v5[v17] == 10 )
        {
          v17 = v9 + 2;
          if ( v11 > v9 + 2 && v5[v17] == 13 )
          {
            v17 = v9 + 3;
            if ( v11 > v9 + 3 )
            {
              v18 = v9 + 4;
              if ( v5[v17] == 10 )
                goto LABEL_37;
            }
          }
        }
      }
      else
      {
        if ( v16 == 10 )
        {
          if ( v5[v17] != 10 )
            goto LABEL_39;
          v18 = v9 + 2;
LABEL_37:
          endofheaders = v18;
          goto LABEL_39;
        }
        v17 = v9;
      }
LABEL_39:
      v9 = v17 + 1;
    }
    header_buf_used = v11;
    if ( !endofheaders )
      goto LABEL_11;
LABEL_40:
    v19 = 0;
    v20 = 0;
    v21 = 0LL;
    v22 = 0;
    header_buf_useda = endofheaders - 1;
    while ( header_buf_useda > v22 )
    {
      v23 = v22;
      v24 = v5[v22];
      if ( (int)v21 > 0 && (int)v21 >= v20 && v24 == 58 )
      {
        while ( 1 )
        {
          v25 = v5[v23 + 1];
          v26 = v23 + 1;
          if ( v25 != 32 && v25 != 9 )
            break;
          if ( header_buf_useda <= (int)++v23 )
            goto LABEL_50;
        }
        v26 = v23;
LABEL_50:
        v20 = v22;
        v19 = v26 + 1;
        v22 = v26;
      }
      else if ( v24 == 13 || v24 == 10 )
      {
        if ( !(_DWORD)v21 && status_code )
        {
          v27 = v5 + 1;
          for ( j = 0; ; ++j )
          {
            if ( v22 <= j )
              goto LABEL_69;
            if ( *(v27 - 1) == 32 )
            {
              sp_0 = j;
              if ( *status_code >= 0 )
                goto LABEL_69;
              chunksize = v27;
              v29 = atoi(v27);
              j = sp_0;
              v27 = chunksize;
              *status_code = v29;
            }
            ++v27;
          }
        }
        if ( (int)v21 < v20 )
        {
          sp_0a = v19;
          if ( v20 < v19 )
          {
            v30 = v20 - (int)v21;
            i = (int)v30;
            v31 = &v5[v21];
            if ( !strncasecmp(&v5[v21], "content-length", v30) )
            {
              content_length = atoi(&v5[sp_0a]);
            }
            else if ( !strncasecmp(v31, "transfer-encoding", i) )
            {
              v32 = strncasecmp(&v5[sp_0a], "chunked", 7uLL) == 0;
              v33 = 1;
              if ( !v32 )
                v33 = chunked;
              chunked = v33;
            }
          }
        }
LABEL_69:
        while ( 1 )
        {
          v22 = v23;
          if ( v11 <= (int)v23 )
            break;
          v34 = v5[v23++];
          if ( v34 != 13 && v34 != 10 )
          {
            v19 = 0;
            v20 = v22;
            v21 = v22;
            goto LABEL_74;
          }
        }
        v19 = 0;
        v20 = v23;
        v21 = (int)v23;
      }
LABEL_74:
      ++v22;
    }
    v10 = v11 - endofheaders;
    header_buf_used = v11;
    qmemcpy(buf, &v5[endofheaders], v11 - endofheaders);
LABEL_77:
    if ( chunked )
    {
      v35 = 0;
      v36 = buf;
      while ( 1 )
      {
LABEL_79:
        if ( v10 <= v35 )
          goto LABEL_119;
        v37 = v60;
        if ( !v60 )
          break;
LABEL_106:
        v47 = v10 - v35;
        if ( v10 - v35 > v37 )
          v47 = v37;
        v48 = v6 + v47;
        if ( (unsigned int)v6 + v47 > v7 )
        {
          v7 = v6 + v47;
          if ( content_length >= 0 && content_length >= v48 )
            v7 = content_length;
          sp_0b = v36;
          ib = v47;
          chunksizeb = v37;
          v61 = v6 + v47;
          v49 = (char *)realloc(v3, v7);
          v48 = v61;
          v37 = chunksizeb;
          v47 = ib;
          v36 = sp_0b;
          if ( !v49 )
            goto LABEL_24;
          v3 = v49;
        }
        v50 = &v36[v35];
        v60 = v37 - v47;
        v35 += v47;
        qmemcpy(&v3[v6], v50, v47);
        v6 = v48;
      }
      if ( v57 )
      {
LABEL_86:
        v38 = v35;
        while ( 1 )
        {
          ia = v38;
          v35 = v38;
          if ( v10 <= (int)v38 )
            break;
          chunksizea = v36;
          v39 = _ctype_b_loc();
          v36 = chunksizea;
          v40 = *v39;
          v41 = chunksizea[ia];
          if ( (v40[v41] & 0x1000) == 0 || v57 > 0x1E )
            break;
          v38 = ia + 1;
          chunksize_buf[v57++] = v41;
          chunksize_buf[v57] = 0;
        }
      }
      else if ( buf[v35] != 13 || (++v35, v10 > v35) )
      {
        if ( buf[v35] == 10 )
          ++v35;
        goto LABEL_86;
      }
      v42 = v35;
      while ( 1 )
      {
        v35 = v42;
        if ( v10 <= (int)v42 )
          goto LABEL_119;
        v43 = v36[v42++];
        if ( v43 == 10 || v43 == 13 )
        {
          if ( buf[v35] == 13 && v10 <= ++v35 )
            goto LABEL_119;
          if ( buf[v35] != 10 )
            goto LABEL_79;
          v37 = 0;
          for ( k = 0LL; v57 > (unsigned int)k; ++k )
          {
            v45 = chunksize_buf[k];
            v46 = 16 * v37;
            if ( (unsigned __int8)(chunksize_buf[k] - 48) > 9u )
              v37 = v46 + (char)(v45 | 0x20) - 87;
            else
              v37 = v46 + v45 - 48;
          }
          chunksize_buf[0] = 0;
          ++v35;
          if ( v37 )
          {
            v57 = 0;
            goto LABEL_106;
          }
          goto end_of_stream;
        }
      }
    }
    if ( content_length > 0 && content_length < (unsigned int)(v10 + v6) )
      v10 = content_length - v6;
    v14 = v10 + v6;
    if ( v10 + (int)v6 <= v7 )
    {
      v15 = v3;
    }
    else
    {
      v7 = v10 + v6;
      if ( content_length >= 0 && content_length >= v14 )
        v7 = content_length;
      v15 = (char *)realloc(v3, v7);
      if ( !v15 )
      {
LABEL_24:
        free(v3);
        v13 = v5;
LABEL_25:
        free(v13);
        *size = -1;
        return 0LL;
      }
    }
    v3 = v15;
    v51 = &v15[v6];
    v6 = v14;
    qmemcpy(v51, buf, v10);
LABEL_119:
    if ( content_length <= 0 || content_length > (unsigned int)v6 )
    {
LABEL_11:
      v8 = endofheaders;
      continue;
    }
    break;
  }
end_of_stream:
  free(v5);
  *size = v6;
  if ( !(_DWORD)v6 )
  {
    free(v3);
    return 0LL;
  }
  return v3;
}
