void *__cdecl getHTTPResponse(int s, int *size, int *status_code)
{
  signed int v3; // ecx
  char *v4; // eax
  char *v5; // esi
  int v6; // ebx
  int v7; // eax
  int v8; // edi
  int v9; // ecx
  char v10; // dl
  char v11; // dl
  char *v12; // ebp
  int v13; // edx
  int v14; // ebx
  int v15; // esi
  char v16; // al
  char *v17; // edi
  int v18; // esi
  int v19; // edi
  int v20; // esi
  int v21; // eax
  char *v22; // eax
  int v23; // edx
  char *v24; // ebp
  char *v25; // ebx
  size_t v26; // edi
  bool v27; // zf
  size_t v28; // ebp
  int v29; // esi
  int *v30; // esi
  int v31; // eax
  char *v32; // ecx
  char v33; // al
  const char *v34; // edx
  int *v35; // ebp
  const char *v36; // esi
  const char *v37; // edi
  int v38; // ecx
  const unsigned __int16 *v39; // ebp
  unsigned int v40; // eax
  unsigned int v41; // edi
  char *v42; // ebx
  char v43; // cl
  char v44; // bl
  char v45; // bl
  char *v46; // ebx
  int v47; // edx
  char *v48; // edi
  int v49; // eax
  int v50; // edx
  char *v51; // eax
  int v52; // eax
  int v53; // eax
  char v54; // dl
  int v55; // edi
  int *v57; // esi
  int *v58; // esi
  unsigned int content_buf_used; // [esp+0h] [ebp-89Ch]
  signed int chunksize; // [esp+4h] [ebp-898h]
  char *content_buf_used_0; // [esp+10h] [ebp-88Ch]
  unsigned int content_buf_used_0a; // [esp+10h] [ebp-88Ch]
  int header_buf_used_0; // [esp+18h] [ebp-884h]
  signed int header_buf_used_0a; // [esp+18h] [ebp-884h]
  unsigned int header_buf_used_0b; // [esp+18h] [ebp-884h]
  unsigned int content_buf_len; // [esp+1Ch] [ebp-880h]
  int nb; // [esp+20h] [ebp-87Ch]
  int n; // [esp+20h] [ebp-87Ch]
  int na; // [esp+20h] [ebp-87Ch]
  int content_length; // [esp+24h] [ebp-878h]
  unsigned int chunksize_buf_index; // [esp+28h] [ebp-874h]
  char *header_buf; // [esp+2Ch] [ebp-870h]
  int valuestart; // [esp+30h] [ebp-86Ch]
  int endofheaders; // [esp+34h] [ebp-868h]
  int chunked; // [esp+38h] [ebp-864h]
  unsigned int header_buf_len; // [esp+3Ch] [ebp-860h]
  int i; // [esp+40h] [ebp-85Ch]
  char *s1; // [esp+44h] [ebp-858h]
  int *v79; // [esp+48h] [ebp-854h]
  int *v80; // [esp+4Ch] [ebp-850h]
  char chunksize_buf[32]; // [esp+5Ch] [ebp-840h] BYREF
  char buf[2048]; // [esp+7Ch] [ebp-820h] BYREF
  unsigned int v84; // [esp+87Ch] [ebp-20h]

  v79 = status_code;
  v84 = __readgsdword(0x14u);
  if ( status_code )
    *status_code = -1;
  header_buf = (char *)malloc(0x800u);
  if ( !header_buf )
  {
    *size = -1;
    return 0;
  }
  content_buf_used_0 = (char *)malloc(0x800u);
  if ( !content_buf_used_0 )
  {
    free(header_buf);
    *size = -1;
    return 0;
  }
  chunksize_buf[0] = 0;
  chunksize_buf_index = 0;
  content_buf_used = 0;
  content_buf_len = 2048;
  valuestart = 0;
  header_buf_len = 2048;
  chunksize = 0;
  content_length = -1;
  chunked = 0;
  endofheaders = 0;
  v80 = size;
  do
  {
    while ( 1 )
    {
      while ( 1 )
      {
        v3 = receivedata(s, buf, 2048, 5000, 0);
        if ( v3 <= 0 )
          goto LABEL_140;
        if ( endofheaders )
        {
          if ( chunked )
            goto LABEL_33;
LABEL_47:
          v28 = content_buf_used + v3;
          v19 = content_buf_used + v3;
          if ( content_length <= 0 )
          {
            if ( content_buf_len < v28 )
            {
              if ( content_length < (int)v28 )
              {
                v29 = content_buf_used + v3;
                goto LABEL_111;
              }
LABEL_115:
              v29 = content_buf_used + v3;
              v28 = content_length;
              goto LABEL_111;
            }
          }
          else
          {
            if ( content_length < (int)v28 )
            {
              v29 = content_length;
              v19 = content_length;
              v3 = content_length - content_buf_used;
              if ( content_buf_len >= content_length )
              {
LABEL_50:
                memcpy(&content_buf_used_0[content_buf_used], buf, v3);
                content_buf_used = v29;
                chunked = 0;
                goto LABEL_51;
              }
              v29 = content_length;
              v28 = content_length;
LABEL_111:
              header_buf_used_0b = v3;
              v51 = (char *)realloc(content_buf_used_0, v28);
              if ( !v51 )
                goto LABEL_147;
              content_buf_len = v28;
              v3 = header_buf_used_0b;
              v19 = v29;
              content_buf_used_0 = v51;
              goto LABEL_50;
            }
            if ( content_buf_len < v28 )
              goto LABEL_115;
          }
          v29 = content_buf_used + v3;
          goto LABEL_50;
        }
        header_buf_used_0 = v3 + valuestart;
        if ( header_buf_len >= v3 + valuestart )
          goto LABEL_11;
        nb = v3;
        v4 = (char *)realloc(header_buf, v3 + valuestart);
        v3 = nb;
        if ( !v4 )
        {
          v58 = v80;
          free(header_buf);
          free(content_buf_used_0);
          *v58 = -1;
          return 0;
        }
        header_buf = v4;
        header_buf_len = header_buf_used_0;
LABEL_11:
        v5 = header_buf;
        memcpy(&header_buf[valuestart], buf, v3);
        v6 = header_buf_used_0 - 1;
        if ( header_buf_used_0 > 1 )
          break;
        valuestart = header_buf_used_0;
      }
      v7 = 0;
      do
      {
        v11 = v5[v7];
        v9 = v7 + 1;
        if ( v11 == 13 )
        {
          if ( v5[v7 + 1] == 10 )
          {
            if ( v7 + 2 < header_buf_used_0 && v5[v7 + 2] == 13 )
            {
              v9 = v7 + 3;
              if ( v7 + 3 < header_buf_used_0 && v5[v7 + 3] == 10 )
              {
                v27 = v7 == -4;
                v7 += 4;
                v10 = v27;
                v8 = v7;
              }
              else
              {
                v7 += 4;
                v8 = 0;
                v9 = -1;
                v10 = 1;
              }
            }
            else
            {
              v7 += 3;
              v8 = 0;
              v9 = -1;
              v10 = 1;
            }
LABEL_15:
            if ( v6 <= v7 )
              break;
            continue;
          }
        }
        else
        {
          if ( v11 != 10 )
          {
            ++v7;
            v8 = 0;
            v9 = -1;
            v10 = 1;
            goto LABEL_15;
          }
          if ( v5[v9] == 10 )
          {
            v27 = v7 == -2;
            v7 += 2;
            v10 = v27;
            v8 = v7;
            goto LABEL_15;
          }
        }
        v7 += 2;
        v8 = 0;
        v9 = -1;
        v10 = 1;
        if ( v6 <= v7 )
          break;
      }
      while ( v10 );
      if ( v8 )
        break;
      endofheaders = 0;
      valuestart = header_buf_used_0;
    }
    if ( v9 <= 0 )
      goto LABEL_31;
    valuestart = 0;
    v12 = header_buf;
    v13 = 0;
    v14 = 0;
    endofheaders = v8;
    v15 = 0;
    n = v9;
    while ( 2 )
    {
      v16 = v12[v15];
      v17 = (char *)(v15 + 1);
      if ( v14 <= 0 || v14 < v13 )
      {
        if ( v16 == 13 || v16 == 10 )
        {
          if ( !v14 && v79 )
          {
            if ( v15 <= 0 )
            {
              v32 = (char *)header_buf_used_0;
              goto LABEL_62;
            }
            v34 = v12 + 1;
            valuestart = (int)v12;
            v35 = v79;
            i = v15;
            s1 = (char *)(v15 + 1);
            v36 = &v34[v15];
            v37 = v34;
            while ( 1 )
            {
              if ( *(v37 - 1) == 32 )
              {
                if ( *v35 >= 0 )
                {
LABEL_57:
                  v12 = (char *)valuestart;
                  v15 = i;
                  v17 = s1;
                  goto LABEL_58;
                }
                *v35 = strtol(v37, 0, 10);
              }
              if ( v36 == ++v37 )
                goto LABEL_57;
            }
          }
          if ( v14 >= v13 || v13 >= valuestart )
            goto LABEL_58;
          s1 = &v12[v14];
          i = v13 - v14;
          if ( !strncasecmp(&v12[v14], "content-length", v13 - v14) )
          {
            content_length = strtol(&v12[valuestart], 0, 10);
            goto LABEL_58;
          }
          if ( strncasecmp(s1, "transfer-encoding", i) )
            goto LABEL_58;
          v27 = strncasecmp(&v12[valuestart], "chunked", 7u) == 0;
          v52 = 1;
          if ( !v27 )
            v52 = chunked;
          chunked = v52;
          v31 = header_buf_used_0;
          if ( header_buf_used_0 <= v15 )
            goto LABEL_123;
LABEL_59:
          v32 = (char *)v31;
          while ( 1 )
          {
LABEL_62:
            v33 = v12[v15];
            v14 = v15;
            v15 = (int)v17;
            if ( v33 != 13 && v33 != 10 )
            {
              valuestart = 0;
              v13 = v14;
              goto LABEL_29;
            }
            if ( v32 == v17 )
              break;
            ++v17;
          }
          v15 = v14 + 2;
          v14 = header_buf_used_0;
          valuestart = 0;
          v13 = header_buf_used_0;
        }
        else
        {
LABEL_28:
          v15 = (int)v17;
        }
      }
      else
      {
        if ( v16 != 58 )
        {
          if ( v16 != 10 && v16 != 13 )
            goto LABEL_28;
LABEL_58:
          v31 = header_buf_used_0;
          if ( header_buf_used_0 > v15 )
            goto LABEL_59;
LABEL_123:
          valuestart = 0;
          v13 = v15;
          v14 = v15;
          goto LABEL_28;
        }
        v53 = v15;
        if ( v15 < n )
        {
          do
          {
            v54 = v12[v53 + 1];
            v55 = v53++;
            if ( v54 != 32 && v54 != 9 )
            {
              v13 = v15;
              valuestart = v55 + 1;
              v15 = v55 + 1;
              goto LABEL_29;
            }
          }
          while ( n != v53 );
          v13 = v15;
          valuestart = n + 1;
          v15 = n + 1;
        }
        else
        {
          v13 = v15;
          valuestart = ++v15;
        }
      }
LABEL_29:
      if ( n > v15 )
        continue;
      break;
    }
    v8 = endofheaders;
LABEL_31:
    v18 = header_buf_used_0 - v8;
    memcpy(buf, &header_buf[v8], header_buf_used_0 - v8);
    v3 = header_buf_used_0 - v8;
    valuestart = header_buf_used_0;
    endofheaders = v8;
    if ( !chunked )
      goto LABEL_47;
    v19 = content_buf_used;
    if ( v18 > 0 )
    {
LABEL_33:
      header_buf_used_0a = v3;
      v20 = 0;
      while ( 1 )
      {
        if ( chunksize )
          goto LABEL_40;
        v38 = header_buf_used_0a;
        if ( !chunksize_buf_index )
          break;
        while ( v20 < v38 )
        {
LABEL_80:
          na = v38;
          v39 = *_ctype_b_loc();
          v40 = chunksize_buf_index;
          v41 = na + chunksize_buf_index - v20;
          v42 = &buf[v20 - chunksize_buf_index];
          do
          {
            v43 = v42[v40];
            if ( (v39[v43] & 0x1000) == 0 )
              break;
            if ( v40 > 0x1E )
              break;
            ++v40;
            ++v20;
            chunksize_buf[v40 - 1] = v43;
            chunksize_buf[v40] = 0;
          }
          while ( v40 != v41 );
          v38 = na;
          if ( v20 >= na )
            goto LABEL_95;
          while ( 1 )
          {
            v44 = buf[v20];
            if ( v44 == 10 || v44 == 13 )
              break;
            if ( ++v20 == na )
              goto LABEL_106;
          }
          if ( v20 >= na )
            goto LABEL_106;
          v45 = buf[v20];
          if ( v45 == 13 )
          {
            if ( ++v20 >= na )
              goto LABEL_106;
            if ( buf[v20] == 10 )
            {
LABEL_98:
              if ( !v40 )
                goto LABEL_140;
              v46 = chunksize_buf;
              v47 = 0;
              v48 = &chunksize_buf[v40];
              do
              {
                while ( 1 )
                {
                  v49 = *v46;
                  v50 = 16 * v47;
                  if ( (unsigned __int8)(v49 - 48) > 9u )
                    break;
                  ++v46;
                  v47 = v50 + v49 - 48;
                  if ( v48 == v46 )
                    goto LABEL_103;
                }
                ++v46;
                v47 = v50 + (char)(v49 | 0x20) - 87;
              }
              while ( v48 != v46 );
LABEL_103:
              chunksize_buf[0] = 0;
              ++v20;
              if ( !v47 )
              {
LABEL_140:
                v30 = v80;
                v19 = content_buf_used;
                goto end_of_stream;
              }
              chunksize_buf_index = 0;
              chunksize = v47;
LABEL_40:
              v26 = header_buf_used_0a - v20;
              if ( header_buf_used_0a - v20 > chunksize )
                v26 = chunksize;
              v23 = v26 + content_buf_used;
              if ( content_buf_len < v26 + content_buf_used )
              {
                v21 = content_length;
                if ( content_length < v23 )
                  v21 = v26 + content_buf_used;
                content_buf_len = v21;
                v22 = (char *)realloc(content_buf_used_0, v21);
                v23 = v26 + content_buf_used;
                v24 = v22;
                if ( !v22 )
                {
LABEL_147:
                  v57 = v80;
                  free(content_buf_used_0);
                  free(header_buf);
                  *v57 = -1;
                  return 0;
                }
              }
              else
              {
                v24 = content_buf_used_0;
              }
              content_buf_used_0a = v23;
              v25 = &buf[v20];
              v20 += v26;
              memcpy(&v24[content_buf_used], v25, v26);
              chunksize -= v26;
              content_buf_used = content_buf_used_0a;
              content_buf_used_0 = v24;
              goto LABEL_38;
            }
          }
          else if ( v45 == 10 )
          {
            goto LABEL_98;
          }
          chunksize_buf_index = v40;
          if ( !v40 )
            goto LABEL_76;
        }
LABEL_94:
        v40 = chunksize_buf_index;
LABEL_95:
        chunksize_buf_index = v40;
LABEL_38:
        if ( v20 >= header_buf_used_0a )
        {
          v40 = chunksize_buf_index;
LABEL_106:
          chunksize_buf_index = v40;
          v19 = content_buf_used;
          goto LABEL_51;
        }
      }
LABEL_76:
      if ( buf[v20] == 13 )
        ++v20;
      if ( v20 >= v38 )
      {
        chunksize = 0;
        v40 = 0;
        goto LABEL_106;
      }
      if ( buf[v20] == 10 && ++v20 >= v38 )
        goto LABEL_94;
      goto LABEL_80;
    }
LABEL_51:
    ;
  }
  while ( content_length <= 0 || content_length > v19 );
  v30 = v80;
end_of_stream:
  free(header_buf);
  *v30 = v19;
  if ( !content_buf_used )
  {
    free(content_buf_used_0);
    return 0;
  }
  return content_buf_used_0;
}
