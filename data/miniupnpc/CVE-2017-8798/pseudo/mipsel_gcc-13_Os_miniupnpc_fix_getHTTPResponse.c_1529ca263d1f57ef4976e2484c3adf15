char *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // $s0
  char *v4; // $s1
  void *v5; // $a0
  unsigned int v6; // $fp
  unsigned int v7; // $s5
  size_t v8; // $s4
  int v9; // $s2
  int v10; // $s3
  signed int v11; // $s6
  int v12; // $v0
  int v13; // $s7
  unsigned int v14; // $v0
  char *v15; // $v0
  int v16; // $v1
  signed int v17; // $v1
  int v18; // $a3
  int v19; // $a2
  int v20; // $v0
  int v21; // $s6
  signed int v22; // $s7
  int v23; // $a2
  int v24; // $v0
  int v25; // $a0
  signed int v26; // $a0
  int v27; // $a1
  _BOOL4 v28; // $a0
  char *i; // $a0
  _BOOL4 v30; // $v0
  int v31; // $v0
  int v32; // $v0
  _BOOL4 v33; // $a0
  int v34; // $v0
  char *v35; // $a0
  int v36; // $v0
  int v37; // $v1
  unsigned int v38; // $a2
  char *v39; // $v0
  char *v40; // $a0
  _BOOL4 v41; // $v0
  const unsigned __int16 **v42; // $v0
  int v43; // $a1
  int v44; // $v0
  _BOOL4 v45; // $v0
  int v46; // $a1
  unsigned int v47; // $t0
  int v48; // $v0
  int v49; // $t0
  int v50; // $t0
  unsigned int v51; // $t1
  char *v52; // $v0
  unsigned int v53; // $s7
  char *v54; // $v0
  unsigned int header_buf_used; // [sp+30h] [-850h]
  signed int header_buf_useda; // [sp+30h] [-850h]
  unsigned int chunksize; // [sp+34h] [-84Ch]
  unsigned int chunksizea; // [sp+34h] [-84Ch]
  unsigned int chunksizeb; // [sp+34h] [-84Ch]
  int chunked; // [sp+38h] [-848h] BYREF
  unsigned int header_buf_len; // [sp+3Ch] [-844h]
  char *v65; // [sp+40h] [-840h]
  _DWORD *v66; // [sp+44h] [-83Ch]
  char *v67; // [sp+48h] [-838h]
  char *v68; // [sp+4Ch] [-834h]
  unsigned int chunksize_0; // [sp+50h] [-830h]
  int valuestart; // [sp+54h] [-82Ch]
  char chunksize_buf[32]; // [sp+5Ch] [-824h] BYREF
  char buf[2048]; // [sp+7Ch] [-804h] BYREF
  int v73; // [sp+87Ch] [-4h]

  v66 = &_stack_chk_guard;
  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800u);
  if ( !v3 )
    goto LABEL_4;
  v4 = (char *)malloc(0x800u);
  if ( !v4 )
    goto LABEL_9;
  header_buf_len = 2048;
  chunksize_buf[0] = 0;
  v67 = "content-length";
  v6 = 0;
  v7 = 0;
  v8 = 2048;
  header_buf_used = 0;
  chunksize = 0;
  v9 = -1;
  chunked = 0;
  v10 = 0;
  v68 = "transfer-encoding";
  while ( 1 )
  {
    while ( 1 )
    {
      v11 = receivedata(s, buf, 2048, 5000);
      if ( v11 <= 0 )
        goto end_of_stream;
      v12 = chunked;
      if ( v10 )
        break;
      v13 = v11 + header_buf_used;
      v14 = header_buf_used;
      if ( header_buf_len < v11 + header_buf_used )
      {
        v15 = (char *)realloc(v3, v11 + header_buf_used);
        if ( !v15 )
        {
          free(v3);
          v5 = v4;
          goto LABEL_10;
        }
        header_buf_len = v11 + header_buf_used;
        v3 = v15;
        v14 = header_buf_used;
      }
      memcpy(&v3[v14], buf, v11);
      v16 = 0;
      v10 = 0;
      while ( v16 < v13 - 1 )
      {
        if ( v10 )
        {
          v17 = v10 - 1;
          goto LABEL_22;
        }
        v23 = v3[v16];
        v24 = v16 + 1;
        if ( v23 == 13 )
        {
          if ( v3[v24] == 10 )
          {
            v24 = v16 + 2;
            if ( v16 + 2 < v13 && v3[v24] == 13 )
            {
              v24 = v16 + 3;
              if ( v16 + 3 < v13 && v3[v24] == 10 )
                v10 = v16 + 4;
            }
          }
        }
        else if ( v23 == 10 )
        {
          if ( v3[v24] == 10 )
            v10 = v16 + 2;
        }
        else
        {
          v24 = v16;
        }
        v16 = v24 + 1;
      }
      header_buf_used += v11;
      if ( v10 )
      {
        v17 = v10 - 1;
LABEL_22:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v21 = 0;
        header_buf_useda = v17;
LABEL_23:
        if ( v21 >= header_buf_useda )
        {
          v11 = v13 - v10;
          memcpy(buf, &v3[v10], v13 - v10);
          header_buf_used = v13;
          v12 = chunked;
          break;
        }
        v25 = v3[v21];
        if ( v20 <= 0 )
        {
          if ( v25 != 13 )
            goto LABEL_51;
          goto LABEL_52;
        }
        if ( v20 < v19 )
        {
          if ( v25 != 13 )
            goto LABEL_51;
          v33 = v19 < v18;
LABEL_68:
          valuestart = v18;
          if ( v33 )
          {
            chunksize_0 = v19 - v20;
            v65 = &v3[v20];
            v34 = strncasecmp(&v3[v20], v67, v19 - v20);
            v35 = v65;
            if ( v34 )
            {
              v65 = (char *)valuestart;
              if ( !strncasecmp(v35, v68, chunksize_0) )
              {
                v36 = strncasecmp(&v65[(_DWORD)v3], "chunked", 7u);
                v37 = chunked;
                if ( !v36 )
                  v37 = 1;
                chunked = v37;
              }
            }
            else
            {
              v9 = atoi(&v3[valuestart]);
            }
          }
        }
        else
        {
          if ( v25 == 58 )
          {
            v26 = v21;
            do
            {
              v27 = v3[v26 + 1];
              if ( v27 != 32 && v27 != 9 )
                break;
              ++v26;
            }
            while ( v26 < header_buf_useda );
            v19 = v21;
            v18 = v26 + 1;
            v21 = v26;
            goto LABEL_49;
          }
          if ( v25 == 13 )
          {
            v30 = v21 < v13;
            goto LABEL_57;
          }
LABEL_51:
          if ( v25 != 10 )
          {
LABEL_49:
            ++v21;
            goto LABEL_23;
          }
LABEL_52:
          if ( v20 )
          {
            v28 = v20 < v19;
          }
          else
          {
            v28 = v19 > 0;
            if ( status_code )
            {
              for ( i = v3 + 1; i - v3 - 1 < v21; ++i )
              {
                if ( *(i - 1) == 32 )
                {
                  if ( *status_code >= 0 )
                    goto LABEL_56;
                  v65 = i;
                  v32 = atoi(i);
                  i = v65;
                  *status_code = v32;
                }
              }
              goto LABEL_56;
            }
          }
          if ( v28 )
          {
            v33 = v19 < v18;
            goto LABEL_68;
          }
        }
LABEL_56:
        while ( 1 )
        {
          v30 = v21 < v13;
LABEL_57:
          if ( !v30 )
            break;
          v31 = v3[v21];
          if ( v31 != 13 && v31 != 10 )
            break;
          ++v21;
        }
        v18 = 0;
        v19 = v21;
        v20 = v21;
        goto LABEL_49;
      }
    }
    if ( !v12 )
      break;
    v22 = 0;
    v65 = chunksize_buf;
LABEL_113:
    v45 = v22 < v11;
    while ( 1 )
    {
      v47 = chunksize;
      if ( !v45 )
        break;
      v38 = v11 - v22;
      if ( chunksize )
        goto LABEL_102;
      v39 = v65;
      if ( !v6 )
      {
        if ( *((_BYTE *)&chunked + v22 + 0x44) != 13 || (++v22, v39 = v65, v22 < v11) )
        {
          v39 = v65;
          if ( *((_BYTE *)&chunked + v22 + 0x44) == 10 )
            ++v22;
        }
      }
      v40 = &v39[v6];
      while ( 1 )
      {
        v41 = v22 < v11;
        chunksize_0 = (unsigned int)v40;
        if ( v22 >= v11 )
          break;
        v42 = _ctype_b_loc();
        v43 = buf[v22];
        if ( ((*v42)[v43] & 0x1000) == 0 )
          goto LABEL_86;
        v40 = (char *)(chunksize_0 + 1);
        if ( v6 >= 0x1F )
          goto LABEL_86;
        ++v6;
        *(_BYTE *)chunksize_0 = v43;
        *v40 = 0;
        ++v22;
      }
      while ( 2 )
      {
        if ( !v41 )
          goto LABEL_113;
        v44 = buf[v22];
        if ( v44 != 13 && v44 != 10 )
        {
          ++v22;
LABEL_86:
          v41 = v22 < v11;
          continue;
        }
        break;
      }
      if ( *((_BYTE *)&chunked + v22 + 0x44) == 13 )
      {
        v45 = ++v22 < v11;
        if ( v22 >= v11 )
          continue;
      }
      v45 = v22 < v11;
      if ( *((_BYTE *)&chunked + v22 + 0x44) == 10 )
      {
        v46 = 0;
        v47 = 0;
        while ( v6 != v46 )
        {
          v48 = v65[v46];
          v49 = 16 * v47;
          if ( (unsigned __int8)(v48 - 0x30) >= 0xAu )
          {
            v50 = v49 - 87;
            v48 |= 0x20u;
          }
          else
          {
            v50 = v49 - 48;
          }
          v47 = v50 + v48;
          ++v46;
        }
        chunksize_buf[0] = 0;
        ++v22;
        if ( !v47 )
        {
end_of_stream:
          free(v3);
          *size = v7;
          if ( !v7 )
          {
            free(v4);
            goto LABEL_5;
          }
          goto LABEL_6;
        }
        v6 = 0;
        v38 = v11 - v22;
LABEL_102:
        if ( v47 < v38 )
          v38 = v47;
        v51 = v7 + v38;
        if ( v8 < v7 + v38 )
        {
          v8 = v7 + v38;
          if ( v9 >= 0 && v9 >= v51 )
            v8 = v9;
          valuestart = v38;
          chunksize_0 = v47;
          chunksizea = v7 + v38;
          v52 = (char *)realloc(v4, v8);
          v51 = chunksizea;
          v47 = chunksize_0;
          v38 = valuestart;
          if ( !v52 )
            goto LABEL_109;
          v4 = v52;
        }
        valuestart = v47;
        chunksize_0 = v51;
        chunksizeb = v38;
        memcpy(&v4[v7], &buf[v22], v38);
        v22 += chunksizeb;
        chunksize = valuestart - chunksizeb;
        v7 = chunksize_0;
        goto LABEL_113;
      }
    }
LABEL_115:
    if ( v9 > 0 && v7 >= v9 )
      goto end_of_stream;
  }
  if ( v9 > 0 )
  {
    v53 = v11 + v7;
    if ( v9 >= v11 + v7 )
      goto LABEL_123;
    v11 = v9 - v7;
  }
  v53 = v11 + v7;
LABEL_123:
  if ( v8 >= v53 )
  {
LABEL_129:
    memcpy(&v4[v7], buf, v11);
    v7 = v53;
    goto LABEL_115;
  }
  v8 = v53;
  if ( v9 >= 0 && v9 >= v53 )
    v8 = v9;
  v54 = (char *)realloc(v4, v8);
  if ( v54 )
  {
    v4 = v54;
    goto LABEL_129;
  }
LABEL_109:
  free(v4);
LABEL_9:
  v5 = v3;
LABEL_10:
  free(v5);
LABEL_4:
  *size = -1;
LABEL_5:
  v4 = 0;
LABEL_6:
  if ( v73 != *v66 )
    _stack_chk_fail();
  return v4;
}
