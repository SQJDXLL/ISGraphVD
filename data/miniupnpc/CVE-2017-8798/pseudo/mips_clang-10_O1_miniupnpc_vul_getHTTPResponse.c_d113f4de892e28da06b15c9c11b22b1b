char *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v5; // $v0
  char *v6; // $s7
  unsigned int v7; // $fp
  char *v8; // $v0
  signed int v9; // $a1
  size_t v10; // $v0
  signed int v11; // $s2
  int v12; // $s0
  unsigned int v13; // $s1
  int v14; // $s6
  signed int v15; // $s0
  int v16; // $v0
  int v17; // $v0
  signed int v18; // $s3
  signed int v19; // $fp
  int v20; // $s2
  char *v21; // $s4
  unsigned int v22; // $v1
  _BOOL4 v23; // $v1
  int *v24; // $fp
  int v25; // $a0
  int v26; // $v1
  int v27; // $v1
  int v28; // $a0
  int v29; // $at
  int v30; // $a0
  bool v31; // dc
  int v32; // $s5
  int v33; // $s1
  int v34; // $v1
  int v35; // $v0
  int v36; // $s4
  int v37; // $a0
  char *v38; // $a1
  _BOOL4 v39; // $v1
  int v40; // $a1
  const char *v41; // $s0
  int i; // $s1
  const char *v43; // $fp
  size_t v44; // $s0
  int v45; // $v0
  int v46; // $at
  int v47; // $v0
  int v48; // $s3
  signed int v49; // $s2
  signed int v50; // $v1
  char *v51; // $v0
  int v52; // $v1
  int v53; // $a2
  int v54; // $v1
  char *v55; // $a0
  signed int v56; // $v1
  const unsigned __int16 *v57; // $v0
  int v58; // $v1
  char *v59; // $at
  signed int v60; // $v0
  char *v61; // $v1
  int v62; // $a0
  _BOOL4 v63; // $v0
  int v64; // $a2
  int v65; // $at
  int v66; // $a0
  int v67; // $at
  char *v68; // $a0
  signed int v69; // $v0
  int v70; // $a2
  size_t v71; // $s7
  char *v72; // $v0
  char *v73; // $s1
  signed int v75; // [sp+1Ch] [-864h]
  char *v76; // [sp+20h] [-860h]
  unsigned int v77; // [sp+24h] [-85Ch]
  size_t v78; // [sp+28h] [-858h]
  signed int v79; // [sp+28h] [-858h]
  int v80; // [sp+30h] [-850h]
  char *ptr; // [sp+34h] [-84Ch]
  int v82; // [sp+3Ch] [-844h]
  int v83; // [sp+40h] [-840h]
  unsigned int v85; // [sp+48h] [-838h]
  unsigned int v86; // [sp+48h] [-838h]
  int v87; // [sp+50h] [-830h]
  int v88; // [sp+50h] [-830h]
  unsigned int v89; // [sp+58h] [-828h]
  unsigned int v90; // [sp+58h] [-828h]
  int v91; // [sp+58h] [-828h]
  int *v92; // [sp+5Ch] [-824h]
  char v93[32]; // [sp+60h] [-820h] BYREF
  char v94[2048]; // [sp+80h] [-800h] BYREF

  if ( status_code )
    *status_code = -1;
  v5 = (char *)malloc(0x800u);
  if ( !v5 )
  {
    *size = -1;
    return 0;
  }
  v6 = v5;
  v92 = status_code;
  v7 = 2048;
  v8 = (char *)malloc(0x800u);
  if ( !v8 )
  {
    free(v6);
    *size = -1;
    return 0;
  }
  ptr = v8;
  v83 = 0;
  v93[0] = 0;
  v9 = -1;
  v10 = 0;
  v11 = 0;
  v77 = 2048;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v82 = s;
  while ( 2 )
  {
    while ( 2 )
    {
      while ( 2 )
      {
        v80 = v12;
        v78 = v10;
        v87 = v9;
        v85 = v13;
        do
        {
          v17 = receivedata(s, v94, 2048, 5000);
          if ( v17 <= 0 )
          {
            v12 = v80;
            goto end_of_stream;
          }
          v15 = v17;
          if ( v14 )
          {
            v9 = v87;
            goto LABEL_78;
          }
          v18 = v17 + v11;
          if ( v7 >= v17 + v11 )
          {
            v22 = v7;
          }
          else
          {
            v89 = v7;
            v19 = v11;
            v20 = s;
            v21 = v6;
            v6 = (char *)realloc(v6, v18);
            v14 = 0;
            v22 = v18;
            v16 = 0;
            if ( !v6 )
            {
              free(v21);
              free(ptr);
              *size = -1;
              v16 = 1;
              v6 = v21;
              v22 = v89;
            }
            s = v20;
            v11 = v19;
            if ( v16 )
            {
              v7 = v22;
              continue;
            }
          }
          v90 = v22;
          memcpy(&v6[v11], v94, v15);
          v23 = 1;
          v14 = 0;
          v24 = v92;
          if ( v18 >= 2 )
          {
            v14 = 0;
            v25 = 0;
            do
            {
              v26 = (unsigned __int8)v6[v25];
              if ( v26 == 10 )
              {
                v27 = v25 + 1;
                v29 = (unsigned __int8)v6[v25 + 1] ^ 0xA;
                v30 = v25 + 2;
                if ( !v29 )
                  v14 = v30;
              }
              else if ( v26 == 13 )
              {
                v27 = v25 + 1;
                if ( v6[v25 + 1] == 10 )
                {
                  v27 = v25 + 2;
                  if ( v25 + 2 < v18 && v6[v27] == 13 )
                  {
                    v27 = v25 + 3;
                    if ( v25 + 3 < v18 )
                    {
                      v28 = v25 + 4;
                      if ( v6[v27] == 0xA )
                        v14 = v28;
                    }
                  }
                }
              }
              else
              {
                v27 = v25;
              }
              v25 = v27 + 1;
              v31 = v27 + 1 >= v18 - 1;
              v23 = v14 == 0;
            }
            while ( !v31 && !v14 );
          }
          v16 = 2;
          if ( v23 )
          {
            v7 = v90;
            v11 = v18;
            v14 = 0;
          }
          else
          {
            if ( v14 >= 2 )
            {
              v32 = v14 - 1;
              v33 = 0;
              v34 = 0;
              v35 = 0;
              v36 = 0;
              do
              {
                v38 = &v6[v36];
                if ( v35 > 0 && v35 >= v34 && *v38 == 58 )
                {
                  v33 = v36;
                  do
                  {
                    v39 = 0;
                    if ( v33 < v32 )
                      v39 = v6[v33 + 1] == 0x20 || v6[v33 + 1] == 9;
                    ++v33;
                  }
                  while ( v39 );
                  v37 = v33 - 1;
                  v34 = v36;
                }
                else
                {
                  v40 = (unsigned __int8)*v38;
                  if ( v40 == 13 || v40 == 10 )
                  {
                    if ( !v24 || v35 )
                    {
                      if ( v35 < v34 && v34 < v33 )
                      {
                        v43 = &v6[v35];
                        v44 = v34 - v35;
                        if ( strncasecmp(&v6[v35], "content-length", v34 - v35) )
                        {
                          if ( strncasecmp(v43, "transfer-encoding", v44) )
                          {
                            v24 = v92;
                          }
                          else
                          {
                            v45 = strncasecmp(&v6[v33], "chunked", 7u);
                            v46 = v83;
                            if ( !v45 )
                              v46 = 1;
                            v83 = v46;
                            v24 = v92;
                          }
                        }
                        else
                        {
                          v87 = atoi(&v6[v33]);
                          v24 = v92;
                        }
                      }
                    }
                    else if ( v36 > 0 )
                    {
                      v41 = v6 + 1;
                      for ( i = v36; i; --i )
                      {
                        if ( *(v41 - 1) == 32 )
                        {
                          if ( *v24 >= 0 )
                            break;
                          *v24 = atoi(v41);
                        }
                        ++v41;
                      }
                    }
                    v33 = 0;
                    if ( v36 < v18 )
                    {
                      do
                      {
                        v47 = (unsigned __int8)v6[v36];
                        if ( v47 != 13 && v47 != 10 )
                        {
                          v37 = v36;
                          v35 = v36;
                          v34 = v36;
                          goto LABEL_39;
                        }
                        ++v36;
                      }
                      while ( v18 != v36 );
                      v37 = v18;
                      v35 = v18;
                      v34 = v18;
                    }
                    else
                    {
                      v37 = v36;
                      v35 = v36;
                      v34 = v36;
                    }
                  }
                  else
                  {
                    v37 = v36;
                  }
                }
LABEL_39:
                v36 = v37 + 1;
              }
              while ( v37 + 1 < v32 );
            }
            v15 = v18 - v14;
            memcpy(v94, &v6[v14], v18 - v14);
            v16 = 0;
            v7 = v90;
            v11 = v18;
            s = v82;
            v13 = v85;
          }
        }
        while ( v16 == 2 );
        v9 = v87;
        if ( v16 )
          return 0;
LABEL_78:
        v10 = v78;
        if ( !v14 )
        {
          v12 = v80;
          if ( v9 <= 0 )
            continue;
LABEL_145:
          if ( v12 >= v9 )
            goto end_of_stream;
          continue;
        }
        break;
      }
      v88 = v9;
      if ( !v83 )
      {
        v50 = v15;
        if ( v9 < v15 + v80 )
          v50 = v9 - v80;
        if ( v9 >= 1 )
          v15 = v50;
        if ( v77 >= v15 + v80 )
        {
          v51 = ptr;
        }
        else
        {
          if ( v9 < v15 + v80 )
            v9 = v15 + v80;
          v77 = v9;
          v51 = (char *)realloc(ptr, v9);
          if ( v51 )
          {
            v52 = 1;
          }
          else
          {
            free(ptr);
            free(v6);
            *size = -1;
            v52 = 0;
            v51 = ptr;
          }
          if ( !v52 )
            return 0;
        }
        ptr = v51;
        memcpy(&v51[v80], v94, v15);
        v12 = v15 + v80;
        v9 = v88;
        v13 = v85;
        v10 = v78;
        if ( v88 <= 0 )
          continue;
        goto LABEL_145;
      }
      break;
    }
    v48 = 0;
    if ( v15 <= 0 )
    {
      v53 = v80;
      v54 = 0;
      goto LABEL_139;
    }
    v75 = v11;
    v49 = 0;
    v76 = v6;
    while ( 1 )
    {
      v91 = v80;
      v56 = v10;
LABEL_98:
      if ( !v56 )
        break;
      v69 = v56;
      v68 = ptr;
      v9 = v88;
      v70 = v80;
LABEL_129:
      v71 = v15 - v49;
      v79 = v69;
      if ( v69 < v15 - v49 )
        v71 = v69;
      v80 = v71 + v70;
      if ( v77 < v71 + v70 )
      {
        v86 = v13;
        if ( v9 < (int)(v71 + v70) )
          v9 = v71 + v70;
        v77 = v9;
        v73 = v68;
        v72 = (char *)realloc(v68, v9);
        if ( !v72 )
        {
          free(v73);
          free(v76);
          *size = -1;
          v54 = 1;
          v55 = v73;
          v13 = v86;
          v53 = v91;
          ptr = v55;
          v10 = v79;
          v9 = v88;
          v6 = v76;
          v11 = v75;
          goto LABEL_139;
        }
        v13 = v86;
        v70 = v91;
        v68 = v72;
      }
      ptr = v68;
      memcpy(&v68[v70], &v94[v49], v71);
      v10 = v79 - v71;
      v49 += v71;
      v6 = v76;
      if ( v49 >= v15 )
      {
        v53 = v80;
        v9 = v88;
        v11 = v75;
        v54 = 0;
        goto LABEL_139;
      }
    }
    if ( !v13 )
    {
      v49 += v94[v49] == 0xD;
      if ( v49 < v15 )
        v49 += v94[v49] == 0xA;
    }
    if ( v49 >= v15 )
    {
      v60 = v49;
    }
    else
    {
      v57 = *_ctype_b_loc();
      while ( 1 )
      {
        if ( v13 >= 0x1F )
        {
          v60 = v49;
          goto LABEL_111;
        }
        v58 = v94[v49];
        if ( (v57[v58] & 0x10) == 0 )
          break;
        v59 = &v93[v13];
        v59[1] = 0;
        *v59 = v58;
        ++v49;
        ++v13;
        if ( v15 == v49 )
        {
          v60 = v15;
          goto LABEL_111;
        }
      }
      v60 = v49;
    }
LABEL_111:
    v61 = v93;
    while ( 2 )
    {
      if ( v60 >= v15 )
      {
        v49 = v60;
        v63 = v60 < v15;
        if ( v63 )
          goto LABEL_120;
LABEL_97:
        v56 = 0;
        if ( v63 )
          goto LABEL_98;
        v10 = 0;
        v54 = 0;
        v9 = v88;
        v11 = v75;
        v53 = v80;
        goto LABEL_139;
      }
      v62 = (unsigned __int8)v94[v60++];
      if ( v62 != 13 && v62 != 10 )
        continue;
      break;
    }
    v49 = v60 - 1;
    if ( v62 == 0xD )
      v49 = v60;
    v63 = v49 < v15;
    if ( v49 >= v15 )
      goto LABEL_97;
LABEL_120:
    if ( v94[v49] != 10 )
      goto LABEL_97;
    v10 = 0;
    v64 = 0;
    if ( v13 )
    {
      v64 = 0;
      do
      {
        v65 = *v61;
        v66 = (v65 | 0x20) - 87;
        v67 = v65 - 48;
        if ( (unsigned __int8)v67 < 0xAu )
          v66 = v67;
        v64 = v66 + 16 * v64;
        --v13;
        ++v61;
      }
      while ( v13 );
    }
    v93[0] = 0;
    v9 = v88;
    ++v49;
    if ( v64 )
    {
      v68 = ptr;
      v69 = v64;
      v70 = v80;
      v13 = 0;
      goto LABEL_129;
    }
    v54 = 25;
    v11 = v75;
    v53 = v80;
    v13 = 0;
LABEL_139:
    if ( !v54 )
    {
      v12 = v53;
      if ( v9 <= 0 )
        continue;
      goto LABEL_145;
    }
    break;
  }
  v12 = v53;
  if ( v54 != 25 )
    return (char *)v48;
end_of_stream:
  free(v6);
  *size = v12;
  if ( v12 )
    return ptr;
  free(ptr);
  return 0;
}
