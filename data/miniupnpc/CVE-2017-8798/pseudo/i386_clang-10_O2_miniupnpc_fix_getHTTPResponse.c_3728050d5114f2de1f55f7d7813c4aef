char *__cdecl getHTTPResponse(int s, int *size, int *status_code)
{
  void *v3; // eax
  void *v4; // edi
  char *v5; // eax
  int v6; // esi
  unsigned int v7; // ecx
  unsigned int v8; // ebp
  int v9; // edi
  int v10; // ebx
  char *v11; // esi
  int v12; // eax
  size_t v13; // edx
  unsigned int v14; // ecx
  int v15; // ebx
  int v16; // esi
  char *v17; // eax
  int v18; // eax
  bool v19; // dl
  int v20; // ecx
  char v21; // dl
  int v22; // edx
  bool v23; // zf
  int v24; // edx
  int v25; // esi
  int v26; // ecx
  int v27; // eax
  char *v28; // ecx
  char v29; // cl
  char v30; // al
  const char *v31; // esi
  int *v32; // edx
  int v33; // ebx
  int v34; // eax
  size_t v35; // ebx
  int v36; // eax
  int v37; // ecx
  char v38; // al
  signed int v39; // edx
  char *v40; // eax
  signed int v41; // ebx
  const unsigned __int16 **v42; // eax
  const unsigned __int16 *v43; // eax
  int v44; // ecx
  char v45; // al
  char *v46; // eax
  unsigned int v47; // esi
  int v48; // ecx
  int v49; // esi
  unsigned __int8 v50; // dl
  int v51; // ecx
  size_t v52; // esi
  size_t v53; // ecx
  char *v54; // eax
  signed int v55; // esi
  unsigned int v56; // edx
  size_t v57; // eax
  char *v58; // eax
  unsigned int v59; // ecx
  char *v60; // ebx
  unsigned int v61; // esi
  size_t v63; // [esp-8h] [ebp-874h]
  char *v64; // [esp+4h] [ebp-868h]
  char *ptr; // [esp+8h] [ebp-864h]
  unsigned int v66; // [esp+Ch] [ebp-860h]
  char *v67; // [esp+10h] [ebp-85Ch]
  unsigned int v68; // [esp+14h] [ebp-858h]
  int v69; // [esp+18h] [ebp-854h]
  int v70; // [esp+18h] [ebp-854h]
  signed int v71; // [esp+1Ch] [ebp-850h]
  size_t v72; // [esp+1Ch] [ebp-850h]
  char *s1; // [esp+20h] [ebp-84Ch]
  char *s1a; // [esp+20h] [ebp-84Ch]
  int v75; // [esp+24h] [ebp-848h]
  size_t v76; // [esp+28h] [ebp-844h]
  size_t v77; // [esp+28h] [ebp-844h]
  unsigned int v78; // [esp+2Ch] [ebp-840h]
  int v79; // [esp+30h] [ebp-83Ch]
  unsigned int v80; // [esp+34h] [ebp-838h]
  char v81[32]; // [esp+3Ch] [ebp-830h] BYREF
  char src[2064]; // [esp+5Ch] [ebp-810h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = malloc(0x800u);
  if ( !v3 )
  {
    *size = -1;
    return 0;
  }
  v4 = v3;
  v5 = (char *)malloc(0x800u);
  if ( !v5 )
  {
    free(v4);
    *size = -1;
    return 0;
  }
  ptr = (char *)v4;
  v6 = -1;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v64 = v5;
  v81[0] = 0;
  v80 = 2048;
  v79 = 0;
  v67 = 0;
  v78 = 2048;
  v68 = 0;
  do
  {
    do
    {
      while ( 1 )
      {
        v10 = v9;
        v76 = v7;
        v75 = v6;
        do
        {
          v11 = v67;
          v12 = receivedata(s, src, 2048, 5000, 0);
          if ( v12 <= 0 )
            goto end_of_stream;
          v13 = v12;
          v71 = v12;
          if ( v10 )
          {
            v9 = v10;
            goto LABEL_77;
          }
          v14 = v80;
          v15 = (int)&v67[v12];
          if ( (unsigned int)&v67[v12] <= v80 )
          {
            v17 = ptr;
          }
          else
          {
            v16 = v12;
            v17 = (char *)realloc(ptr, (size_t)&v67[v12]);
            v13 = v16;
            v11 = v67;
            v14 = v15;
            if ( !v17 )
            {
              free(ptr);
              free(v64);
              goto LABEL_137;
            }
          }
          ptr = v17;
          v80 = v14;
          memcpy(&v17[(_DWORD)v11], src, v13);
          v18 = v15;
          v10 = 0;
          v19 = 1;
          v9 = 0;
          v67 = (char *)v18;
          if ( v18 >= 2 )
          {
            v20 = 0;
            while ( 1 )
            {
              v21 = ptr[v20];
              if ( v21 == 10 )
              {
                v9 = v20 + 2;
                v23 = ptr[v20 + 1] == 10;
                v22 = v20 + 1;
LABEL_24:
                if ( !v23 )
                  v9 = 0;
                goto LABEL_30;
              }
              if ( v21 != 13 )
                goto LABEL_28;
              if ( ptr[v20 + 1] != 10 )
                break;
              v22 = v20 + 2;
              if ( v20 + 2 < v18 )
              {
                v9 = 0;
                if ( ptr[v22] != 13 )
                  goto LABEL_30;
                v22 = v20 + 3;
                if ( v20 + 3 < v18 )
                {
                  v23 = ptr[v20 + 3] == 10;
                  v9 = v20 + 4;
                  goto LABEL_24;
                }
              }
LABEL_29:
              v9 = 0;
LABEL_30:
              v20 = v22 + 1;
              v19 = v9 == 0;
              if ( v20 >= v18 - 1 || v9 )
                goto LABEL_7;
            }
            ++v20;
LABEL_28:
            v22 = v20;
            goto LABEL_29;
          }
LABEL_7:
          ;
        }
        while ( v19 );
        if ( v9 >= 2 )
        {
          v72 = (size_t)&v11[v71];
          v24 = v9 - 1;
          v25 = 0;
          v26 = 0;
          s1 = 0;
          v27 = 0;
          do
          {
            v69 = v26;
            v29 = ptr[v26];
            if ( v29 == 58 && (int)s1 > 0 && v27 <= (int)s1 )
            {
              v28 = (char *)v69;
              v25 = v69 + 1;
              if ( v69 < v24 )
              {
                do
                {
                  v30 = ptr[v25];
                  if ( v30 != 32 && v30 != 9 )
                  {
                    v27 = v69;
                    v28 = (char *)(v25 - 1);
                    goto LABEL_37;
                  }
                  ++v25;
                }
                while ( v9 != v25 );
                v27 = v69;
                v28 = (char *)v24;
                v25 = v9;
              }
              else
              {
                v27 = v69;
              }
            }
            else if ( v29 == 13 || v29 == 10 )
            {
              if ( !status_code || s1 )
              {
                v35 = v27 - (_DWORD)s1;
                v28 = (char *)v69;
                if ( v27 <= (int)s1 || v25 <= v27 )
                {
LABEL_65:
                  v24 = v9 - 1;
                }
                else
                {
                  s1a = &s1[(_DWORD)ptr];
                  if ( !strncasecmp(s1a, "content-length", v35) )
                  {
                    v75 = strtol(&ptr[v25], 0, 10);
                  }
                  else if ( !strncasecmp(s1a, "transfer-encoding", v35) )
                  {
                    v36 = strncasecmp(&ptr[v25], "chunked", 7u);
                    v37 = v79;
                    if ( !v36 )
                      v37 = 1;
                    v79 = v37;
                  }
                  v24 = v9 - 1;
                  v28 = (char *)v69;
                }
              }
              else
              {
                v28 = (char *)v69;
                if ( v69 > 0 )
                {
                  v31 = ptr + 1;
                  v32 = status_code;
                  v33 = v69;
                  while ( 1 )
                  {
                    if ( *(v31 - 1) == 32 )
                    {
                      if ( *v32 >= 0 )
                        goto LABEL_65;
                      v34 = strtol(v31, 0, 10);
                      v28 = (char *)v69;
                      v32 = status_code;
                      *status_code = v34;
                    }
                    ++v31;
                    if ( !--v33 )
                      goto LABEL_65;
                  }
                }
              }
              v25 = 0;
              if ( (int)v28 < (int)v67 )
              {
                while ( 1 )
                {
                  v38 = v28[(_DWORD)ptr];
                  if ( v38 != 13 && v38 != 10 )
                    break;
                  if ( (char *)v72 == ++v28 )
                  {
                    v27 = (int)v67;
                    v28 = v67;
                    s1 = v67;
                    goto LABEL_37;
                  }
                }
              }
              v27 = (int)v28;
              s1 = v28;
            }
            else
            {
              v28 = (char *)v69;
            }
LABEL_37:
            v26 = (int)(v28 + 1);
          }
          while ( v26 < v24 );
        }
        v71 = (signed int)&v67[-v9];
        memcpy(src, &ptr[v9], (size_t)&v67[-v9]);
LABEL_77:
        v6 = v75;
        v7 = v76;
        if ( !v79 )
          break;
        v39 = v71;
        if ( v71 > 0 )
        {
          v40 = v64;
          v41 = 0;
          while ( 2 )
          {
            v64 = v40;
            v66 = v68;
            while ( !v7 )
            {
              if ( !v8 )
              {
                v41 += src[v41] == 13;
                if ( v41 < v39 )
                  v41 += src[v41] == 10;
              }
              if ( v41 < v39 )
              {
                v42 = _ctype_b_loc();
                v39 = v71;
                v43 = *v42;
                while ( 1 )
                {
                  if ( v8 > 0x1E )
                    goto LABEL_92;
                  v44 = src[v41];
                  if ( (v43[v44] & 0x1000) == 0 )
                    break;
                  v39 = v71;
                  ++v41;
                  v81[v8] = v44;
                  v81[++v8] = 0;
                  if ( v71 == v41 )
                  {
                    v41 = v71;
                    goto LABEL_92;
                  }
                }
                v39 = v71;
              }
LABEL_92:
              while ( v41 < v39 )
              {
                v45 = src[v41++];
                if ( v45 == 13 || v45 == 10 )
                {
                  if ( v45 != 13 )
                    --v41;
                  break;
                }
              }
              v7 = 0;
              if ( v41 >= v39 )
                goto LABEL_129;
              if ( src[v41] == 10 )
              {
                if ( !v8 )
                {
                  v81[0] = 0;
                  goto end_of_stream;
                }
                v7 = 0;
                v46 = v81;
                do
                {
                  v47 = v7;
                  v48 = *v46;
                  v49 = 16 * v47;
                  v50 = v48 - 48;
                  v70 = v48 - 48;
                  v51 = (v48 | 0x20) - 87;
                  if ( v50 < 0xAu )
                    v51 = v70;
                  ++v46;
                  v7 = v49 + v51;
                  --v8;
                }
                while ( v8 );
                v81[0] = 0;
                if ( !v7 )
                  goto end_of_stream;
                v39 = v71;
                ++v41;
                v8 = 0;
                break;
              }
            }
            v77 = v7;
            v52 = v39 - v41;
            if ( v7 < v39 - v41 )
              v52 = v7;
            v68 += v52;
            if ( v52 + v66 <= v78 )
            {
              v54 = v64;
            }
            else
            {
              v53 = v75;
              if ( v75 < v52 + v66 )
                v53 = v52 + v66;
              if ( v75 < 0 )
                v53 = v52 + v66;
              v78 = v53;
              v54 = (char *)realloc(v64, v53);
              if ( !v54 )
                goto LABEL_138;
            }
            v64 = v54;
            memcpy(&v54[v66], &src[v41], v52);
            v39 = v71;
            v41 += v52;
            v40 = v64;
            v7 = v77 - v52;
            v6 = v75;
            if ( v41 < v71 )
              continue;
            break;
          }
        }
LABEL_129:
        if ( v6 > 0 )
          goto LABEL_133;
      }
      v55 = v75 - v68;
      if ( v71 + v68 <= v75 )
        v55 = v71;
      if ( v75 <= 0 )
        v55 = v71;
      v56 = v68;
      if ( v55 + v68 <= v78 )
      {
        v59 = v55 + v68;
        v60 = v64;
      }
      else
      {
        v57 = v75;
        if ( v75 < v55 + v68 )
          v57 = v55 + v68;
        if ( v75 < 0 )
          v57 = v55 + v68;
        v78 = v57;
        v58 = (char *)realloc(v64, v57);
        v56 = v68;
        v59 = v55 + v68;
        v60 = v58;
        if ( !v58 )
        {
LABEL_138:
          free(v64);
          free(ptr);
LABEL_137:
          *size = -1;
          return 0;
        }
      }
      v63 = v55;
      v61 = v59;
      memcpy(&v60[v56], src, v63);
      v68 = v61;
      v6 = v75;
      v7 = v76;
      v64 = v60;
    }
    while ( v75 <= 0 );
LABEL_133:
    ;
  }
  while ( v68 < v6 );
end_of_stream:
  free(ptr);
  *size = v68;
  if ( v68 )
    return v64;
  free(v64);
  return 0;
}
