void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  void *v4; // rax
  void *v5; // r14
  char *v6; // rax
  __int64 v7; // rbx
  char *v8; // rbp
  char *v9; // r14
  int v10; // r12d
  int v11; // r13d
  int v12; // eax
  int v13; // eax
  int v14; // r8d
  unsigned int v15; // ebx
  char *v16; // rax
  bool v17; // dl
  int v18; // ecx
  char v19; // bl
  __int64 v20; // rsi
  __int64 v21; // rdx
  unsigned int v22; // ecx
  int v23; // r13d
  int v24; // edx
  int v25; // eax
  int v26; // r15d
  int v27; // ecx
  __int64 v28; // rcx
  char v29; // bl
  char v30; // cl
  __int64 v31; // rbp
  const char *v32; // rbx
  int v33; // ecx
  const char *v34; // rbx
  size_t v35; // rbp
  __int64 v36; // rcx
  char v37; // bl
  int v38; // eax
  int v39; // ecx
  char *v40; // r14
  __int64 v41; // r15
  int v42; // r13d
  int v43; // eax
  int v44; // r12d
  unsigned __int64 v45; // rbx
  const unsigned __int16 **v46; // rax
  const unsigned __int16 *v47; // rax
  __int64 v48; // rcx
  __int64 v49; // rdi
  __int64 v50; // rcx
  int v51; // eax
  char v52; // dl
  int v53; // edi
  __int64 v54; // rcx
  char v55; // dl
  int v56; // esi
  unsigned int v57; // ebx
  size_t v58; // rsi
  char *v59; // rcx
  int v60; // ebx
  unsigned int v61; // ebp
  size_t v62; // rsi
  char *v63; // rax
  char *v64; // r15
  int v65; // eax
  char *v67; // [rsp+0h] [rbp-8D8h]
  int v68; // [rsp+0h] [rbp-8D8h]
  __int64 v69; // [rsp+8h] [rbp-8D0h]
  __int64 v70; // [rsp+8h] [rbp-8D0h]
  __int64 v71; // [rsp+8h] [rbp-8D0h]
  int v72; // [rsp+14h] [rbp-8C4h]
  char *v73; // [rsp+18h] [rbp-8C0h]
  __int64 v74; // [rsp+20h] [rbp-8B8h]
  char *nptr; // [rsp+28h] [rbp-8B0h]
  char *nptra; // [rsp+28h] [rbp-8B0h]
  int v77; // [rsp+30h] [rbp-8A8h]
  __int64 v78; // [rsp+30h] [rbp-8A8h]
  int v79; // [rsp+3Ch] [rbp-89Ch]
  unsigned int v80; // [rsp+40h] [rbp-898h]
  int v81; // [rsp+44h] [rbp-894h]
  char *v82; // [rsp+48h] [rbp-890h]
  unsigned int v83; // [rsp+50h] [rbp-888h]
  int *v86; // [rsp+68h] [rbp-870h]
  __int64 v87; // [rsp+70h] [rbp-868h]
  char v88[32]; // [rsp+80h] [rbp-858h]
  char dest[2104]; // [rsp+A0h] [rbp-838h] BYREF

  if ( status_code )
    *status_code = -1;
  v4 = malloc(0x800uLL);
  if ( !v4 )
  {
    *size = -1;
    return 0LL;
  }
  v5 = v4;
  v6 = (char *)malloc(0x800uLL);
  if ( !v6 )
  {
    free(v5);
    *size = -1;
    return 0LL;
  }
  v73 = v6;
  v88[0] = 0;
  v80 = 2048;
  v81 = 0;
  v72 = 0;
  v83 = 2048;
  v74 = 0LL;
  v79 = 0;
  v7 = 0LL;
  v86 = status_code;
  v8 = (char *)v5;
  v9 = 0LL;
  v10 = -1;
  while ( 1 )
  {
LABEL_8:
    v13 = receivedata((unsigned int)s, dest, 2048LL, 5000LL, 0LL);
    if ( v13 <= 0 )
      goto end_of_stream;
    v14 = v13;
    if ( (_DWORD)v7 )
      goto LABEL_82;
    v15 = v13 + (_DWORD)v9;
    v67 = (char *)(unsigned int)(v13 + (_DWORD)v9);
    if ( v13 + (int)v9 <= v80 )
      goto LABEL_13;
    v11 = v13;
    v16 = (char *)realloc(v8, v15);
    if ( v16 )
    {
      v8 = v16;
      v80 = v15;
      v14 = v11;
LABEL_13:
      v11 = v14;
      memcpy(&v8[(unsigned int)v9], dest, v14);
      v17 = 1;
      v7 = 0LL;
      if ( (int)v67 >= 2 )
      {
        v18 = 0;
        do
        {
          v19 = v8[v18];
          if ( v19 == 10 )
          {
            LODWORD(v20) = v18 + 1;
            v7 = (unsigned int)(v18 + 2);
            if ( v8[v18 + 1] != 10 )
              v7 = 0LL;
            goto LABEL_31;
          }
          if ( v19 == 13 )
          {
            if ( v8[v18 + 1] != 10 )
            {
              LODWORD(v21) = v18 + 1;
LABEL_29:
              LODWORD(v20) = v21;
              goto LABEL_30;
            }
            v20 = v18 + 2LL;
            if ( v18 + 2 < (int)v67 )
            {
              v7 = 0LL;
              if ( v8[v20] != 13 )
                goto LABEL_31;
              v21 = v18 + 3LL;
              if ( (int)v21 < (int)v67 )
              {
                v22 = v18 + 4;
                if ( v8[v21] != 10 )
                  v22 = 0;
                LODWORD(v20) = v21;
                v7 = v22;
                goto LABEL_31;
              }
              goto LABEL_29;
            }
          }
          else
          {
            LODWORD(v20) = v18;
          }
LABEL_30:
          v7 = 0LL;
LABEL_31:
          v18 = v20 + 1;
          v17 = (_DWORD)v7 == 0;
        }
        while ( (int)v20 + 1 < (int)v67 - 1 && !(_DWORD)v7 );
      }
      v12 = 2;
      if ( v17 )
      {
        v9 = v67;
        v7 = 0LL;
      }
      else
      {
        if ( (int)v7 >= 2 )
        {
          v77 = v7 - 1;
          v87 = (int)v7 - 1;
          nptr = v8 + 1;
          v23 = 0;
          v24 = 0;
          v25 = 0;
          v26 = 0;
          v82 = v8;
          v69 = v7;
          do
          {
            if ( v25 > 0 && v24 <= v25 && v8[v26] == 58 )
            {
              v27 = v26;
              if ( v26 < v77 )
              {
                v28 = 0LL;
                while ( 1 )
                {
                  v29 = nptr[v26 + v28];
                  if ( v29 != 32 && v29 != 9 )
                    break;
                  if ( v87 - v26 == ++v28 )
                  {
                    v27 = v77;
                    goto LABEL_38;
                  }
                }
                v27 = v26 + v28;
LABEL_38:
                v7 = v69;
              }
              v23 = v27 + 1;
            }
            else
            {
              v30 = v8[v26];
              if ( v30 == 13 || v30 == 10 )
              {
                if ( !v86 || v25 )
                {
                  v33 = v24 - v25;
                  if ( v24 > v25 && v23 > v24 )
                  {
                    v34 = &v8[v25];
                    v35 = v33;
                    if ( !strncasecmp(v34, "content-length", v33) )
                    {
                      v8 = v82;
                      v10 = atoi(&v82[v23]);
                    }
                    else if ( !strncasecmp(v34, "transfer-encoding", v35) )
                    {
                      v8 = v82;
                      v38 = strncasecmp(&v82[v23], "chunked", 7uLL);
                      v39 = v81;
                      if ( !v38 )
                        v39 = 1;
                      v81 = v39;
                    }
                    else
                    {
LABEL_65:
                      v8 = v82;
                    }
                    v7 = v69;
                  }
                }
                else if ( v26 > 0 )
                {
                  v31 = (unsigned int)v26;
                  v32 = nptr;
                  while ( 1 )
                  {
                    if ( *(v32 - 1) == 32 )
                    {
                      if ( *v86 >= 0 )
                        goto LABEL_65;
                      *v86 = atoi(v32);
                    }
                    ++v32;
                    if ( !--v31 )
                      goto LABEL_65;
                  }
                }
                v23 = 0;
                if ( v26 >= (int)v67 )
                {
                  v27 = v26;
                  v25 = v26;
                }
                else
                {
                  v36 = 0LL;
                  do
                  {
                    v37 = v8[v26 + v36];
                    if ( v37 != 13 && v37 != 10 )
                    {
                      v26 += v36;
                      v27 = v26;
                      v25 = v26;
                      goto LABEL_75;
                    }
                    ++v36;
                  }
                  while ( (int)v67 - (__int64)v26 != v36 );
                  v27 = (int)v67;
                  v25 = (int)v67;
                  v26 = (int)v67;
LABEL_75:
                  v7 = v69;
                }
              }
              else
              {
                v27 = v26;
                v26 = v24;
              }
            }
            v24 = v26;
            v26 = v27 + 1;
          }
          while ( v27 + 1 < v77 );
        }
        v9 = v67;
        v11 = (_DWORD)v67 - v7;
        memcpy(dest, &v8[(int)v7], (int)v67 - (int)v7);
        v12 = 0;
      }
      goto LABEL_7;
    }
    free(v8);
    free(v73);
    *size = -1;
    v7 = 0LL;
    v12 = 1;
LABEL_7:
    if ( v12 == 2 )
      continue;
    v14 = v11;
    if ( v12 )
      return 0LL;
LABEL_82:
    if ( !(_DWORD)v7 )
      goto LABEL_145;
    nptra = v9;
    v68 = v10;
    v40 = v8;
    if ( v81 )
      break;
    v71 = v7;
    v60 = v10 - v74;
    if ( v14 + (int)v74 <= v10 )
      v60 = v14;
    if ( v10 <= 0 )
      v60 = v14;
    v61 = v60 + v74;
    if ( v60 + (int)v74 <= v83 )
    {
      v63 = v73;
    }
    else
    {
      v62 = (unsigned int)v10;
      if ( v10 < (int)v61 )
        v62 = v61;
      v83 = v62;
      v63 = (char *)realloc(v73, v62);
      v64 = v63;
      if ( !v63 )
      {
        free(v73);
        free(v40);
        *size = -1;
        v63 = v73;
      }
      if ( !v64 )
        return 0LL;
    }
    v73 = v63;
    memcpy(&v63[(unsigned int)v74], dest, v60);
    v74 = v61;
    v8 = v40;
    v7 = v71;
    v9 = nptra;
    if ( v10 > 0 )
    {
LABEL_146:
      if ( (int)v74 >= v10 )
        goto end_of_stream;
    }
  }
  if ( v14 <= 0 )
  {
    v65 = 0;
    goto LABEL_144;
  }
  v70 = v7;
  v41 = v14;
  v42 = 0;
  v43 = v72;
  v44 = v14;
  while ( 2 )
  {
    v78 = v74;
    LODWORD(v45) = v79;
    while ( 2 )
    {
      if ( v43 )
      {
        v79 = v45;
        goto LABEL_118;
      }
      if ( !(_DWORD)v45 )
      {
        v42 += dest[v42] == 13;
        if ( v42 < v14 )
          v42 += dest[v42] == 10;
      }
      if ( v42 >= v14 )
        goto LABEL_107;
      v46 = _ctype_b_loc();
      v14 = v44;
      v47 = *v46;
      v45 = (unsigned int)v45;
      v48 = 0LL;
      while ( v45 <= 0x1E )
      {
        v49 = dest[v42 + v48];
        v8 = v40;
        if ( (v47[v49] & 0x1000) == 0 )
          break;
        v88[v45++] = v49;
        v88[(unsigned int)v45] = 0;
        if ( v41 - v42 == ++v48 )
        {
          v42 = v44;
          goto LABEL_107;
        }
      }
      v42 += v48;
      if ( v42 >= v44 )
      {
LABEL_107:
        if ( v42 < v14 )
          goto LABEL_108;
LABEL_87:
        v43 = 0;
        if ( v42 >= v14 )
        {
          v72 = 0;
          v79 = v45;
          goto LABEL_141;
        }
        continue;
      }
      break;
    }
    v50 = v42;
    v51 = -v42;
    while ( 1 )
    {
      v52 = dest[v50];
      if ( v52 == 10 || v52 == 13 )
        break;
      ++v50;
      --v51;
      if ( v41 == v50 )
      {
        v42 = v44;
        goto LABEL_87;
      }
    }
    v42 = (v52 == 13) - v51;
    if ( v42 >= v44 )
      goto LABEL_87;
LABEL_108:
    if ( dest[v42] != 10 )
      goto LABEL_87;
    v79 = 0;
    v53 = 0;
    if ( (_DWORD)v45 )
    {
      v54 = 0LL;
      v53 = 0;
      do
      {
        v55 = v88[v54];
        if ( (unsigned __int8)(v55 - 48) > 9u )
        {
          v55 |= 0x20u;
          v56 = 16 * v53 - 87;
        }
        else
        {
          v56 = 16 * v53 - 48;
        }
        v53 = v56 + v55;
        ++v54;
      }
      while ( (unsigned int)v45 != v54 );
    }
    v88[0] = 0;
    if ( v53 )
    {
      v43 = v53;
      ++v42;
LABEL_118:
      v57 = v14 - v42;
      v72 = v43;
      if ( v43 < v14 - v42 )
        v57 = v43;
      v74 = v57 + (unsigned int)v74;
      if ( v57 + (unsigned int)v78 <= v83 )
      {
        v59 = v73;
      }
      else
      {
        v58 = (unsigned int)v68;
        if ( v68 < (int)(v57 + v78) )
          v58 = v57 + (unsigned int)v78;
        v83 = v58;
        v59 = (char *)realloc(v73, v58);
        if ( !v59 )
        {
          free(v73);
          free(v40);
          *size = -1;
          v65 = 1;
          v74 = v78;
          v8 = v40;
          goto LABEL_142;
        }
        v8 = v40;
      }
      v73 = v59;
      memcpy(&v59[(unsigned int)v78], &dest[v42], v57);
      v42 += v57;
      v43 = v72 - v57;
      v14 = v44;
      if ( v42 >= v44 )
      {
        v72 -= v57;
LABEL_141:
        v65 = 0;
        goto LABEL_142;
      }
      continue;
    }
    break;
  }
  v65 = 25;
  v72 = 0;
LABEL_142:
  v10 = v68;
  v7 = v70;
LABEL_144:
  v9 = nptra;
  if ( !v65 )
  {
LABEL_145:
    if ( v10 > 0 )
      goto LABEL_146;
    goto LABEL_8;
  }
  if ( v65 == 25 )
  {
end_of_stream:
    free(v8);
    *size = v74;
    if ( (_DWORD)v74 )
      return v73;
    free(v73);
  }
  return 0LL;
}
