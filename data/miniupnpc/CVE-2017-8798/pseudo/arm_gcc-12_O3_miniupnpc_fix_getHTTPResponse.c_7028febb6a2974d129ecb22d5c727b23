void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  unsigned int v4; // r9
  int *v5; // r5
  char *v6; // r8
  unsigned int v7; // r6
  int v8; // r0
  signed int v9; // r7
  signed int v10; // r11
  void *v11; // r0
  char *v12; // r2
  char *v13; // r10
  int v14; // r12
  bool v15; // r3
  int v17; // r3
  unsigned int v18; // r10
  unsigned int v19; // r3
  size_t v20; // r1
  void *v21; // r0
  bool v22; // r4
  _DWORD *v24; // r11
  int *v26; // r10
  signed int v27; // r2
  int v28; // r1
  int v29; // r4
  int v30; // r6
  int v31; // r5
  bool v32; // zf
  _BOOL4 v33; // r0
  const char *v34; // r8
  int v35; // r0
  int v36; // r7
  bool v37; // zf
  _BOOL4 v38; // r0
  const char *v39; // r6
  int v40; // t1
  char *v41; // r2
  int v42; // r6
  int v43; // t1
  bool v44; // zf
  void *v45; // r11
  unsigned int v46; // r9
  signed int v47; // r4
  void *v48; // r0
  unsigned int v49; // r3
  void *v50; // r2
  char *v51; // r0
  const void *v52; // r1
  size_t v53; // r10
  char *v54; // r3
  int *v55; // lr
  const unsigned __int16 *v56; // r6
  int v57; // r0
  _BYTE *v58; // r1
  char v59; // r2
  int v60; // t1
  int v61; // r2
  int v62; // r3
  int v63; // t1
  bool v64; // zf
  int v65; // r3
  unsigned __int8 *v66; // r3
  unsigned __int8 *v67; // r5
  int v68; // r2
  int v69; // t1
  int v70; // r6
  int v71; // r6
  _BOOL4 v72; // r0
  const char *v73; // r8
  int v74; // r0
  int v75; // r3
  int v76; // r2
  int v77; // r3
  int v78; // t1
  int v79; // r6
  bool v80; // zf
  void *v81; // r0
  int *v82; // r11
  int *v83; // r11
  int v84[2]; // [sp+0h] [bp-898h] BYREF
  int content_length; // [sp+Ch] [bp-88Ch]
  unsigned int content_buf_len; // [sp+10h] [bp-888h]
  unsigned int header_buf_used; // [sp+14h] [bp-884h]
  unsigned int v88; // [sp+18h] [bp-880h]
  unsigned int content_buf_used; // [sp+1Ch] [bp-87Ch]
  int chunked; // [sp+20h] [bp-878h]
  char *header_buf; // [sp+24h] [bp-874h]
  int sa; // [sp+28h] [bp-870h]
  unsigned int header_buf_len; // [sp+2Ch] [bp-86Ch]
  unsigned int chunksize_buf_index; // [sp+30h] [bp-868h]
  unsigned int v95; // [sp+34h] [bp-864h]
  int *status_codea; // [sp+38h] [bp-860h]
  int *sizea; // [sp+3Ch] [bp-85Ch]
  int *v98; // [sp+40h] [bp-858h]
  int *v99; // [sp+44h] [bp-854h]
  char chunksize_buf[32]; // [sp+4Ch] [bp-84Ch] BYREF
  char buf[2048]; // [sp+6Ch] [bp-82Ch] BYREF

  chunksize_buf_index = s;
  v98 = status_code;
  if ( status_code )
    *status_code = -1;
  v4 = (unsigned int)malloc(0x800u);
  if ( !v4 )
    goto LABEL_174;
  content_buf_len = (unsigned int)malloc(0x800u);
  if ( !content_buf_len )
  {
    free((void *)v4);
LABEL_174:
    *size = -1;
    return 0;
  }
  v88 = 2048;
  v95 = 2048;
  v5 = 0;
  header_buf_used = -1;
  content_length = (int)buf;
  v6 = 0;
  v7 = 0;
  chunksize_buf[0] = 0;
  content_buf_used = 0;
  sa = 0;
  header_buf = 0;
  chunked = (int)chunksize_buf;
  v99 = size;
  while ( 1 )
  {
LABEL_6:
    v8 = receivedata(chunksize_buf_index, content_length, 2048, 5000, 0);
    v9 = v8;
    if ( v8 <= 0 )
      goto end_of_stream;
    if ( header_buf )
      break;
    v10 = v8 + content_buf_used;
    if ( v8 + content_buf_used > v95 )
    {
      v11 = realloc((void *)v4, v8 + content_buf_used);
      if ( !v11 )
      {
        v83 = v99;
        free((void *)v4);
        free((void *)content_buf_len);
        *v83 = -1;
        return 0;
      }
      v4 = (unsigned int)v11;
      v95 = v10;
    }
    memcpy((void *)(v4 + content_buf_used), (const void *)content_length, v9);
    if ( v10 <= 1 )
    {
      content_buf_used = v10;
    }
    else
    {
      v12 = 0;
      do
      {
        v17 = (unsigned __int8)v12[v4];
        v14 = (int)(v12 + 1);
        if ( v17 == 13 )
        {
          if ( *(_BYTE *)(v4 + v14) != 10 )
            goto LABEL_21;
          if ( (int)(v12 + 2) < v10 && v12[v4 + 2] == 13 )
          {
            v14 = (int)(v12 + 3);
            if ( (int)(v12 + 3) < v10 && *(_BYTE *)(v4 + v14) == 10 )
            {
              v12 += 4;
              v15 = v12 == 0;
              v13 = v12;
            }
            else
            {
              v12 += 4;
              v13 = 0;
              v14 = -1;
              v15 = 1;
            }
          }
          else
          {
            v12 += 3;
            v13 = 0;
            v14 = -1;
            v15 = 1;
          }
        }
        else
        {
          if ( v17 != 10 )
          {
            ++v12;
            v13 = 0;
            v14 = -1;
            v15 = 1;
            goto LABEL_15;
          }
          if ( *(_BYTE *)(v4 + v14) != 10 )
          {
LABEL_21:
            v12 += 2;
            v13 = 0;
            v14 = -1;
            v15 = 1;
            goto LABEL_15;
          }
          v12 += 2;
          v15 = v12 == 0;
          v13 = v12;
        }
LABEL_15:
        ;
      }
      while ( v10 - 1 > (int)v12 && v15 );
      if ( v13 )
      {
        if ( v14 <= 0 )
          goto LABEL_83;
        content_buf_used = v7;
        header_buf_len = (unsigned int)v13;
        status_codea = v5;
        v26 = v98;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31 = v14;
        header_buf = v6;
        while ( 2 )
        {
          while ( 2 )
          {
            v33 = v28 > 0;
            if ( v27 > v28 )
              v33 = 0;
            v32 = !v33;
            v34 = (const char *)(v4 + v29);
            v35 = *(unsigned __int8 *)(v4 + v29);
            v36 = v29 + 1;
            if ( v32 )
            {
              v37 = v35 == 10;
              if ( v35 != 10 )
                v37 = v35 == 13;
              if ( v37 )
              {
                v38 = v28 == 0;
                if ( !v26 )
                  v38 = 0;
                if ( v38 )
                {
                  if ( v29 <= 0 )
                    goto LABEL_72;
                  v39 = (const char *)v4;
                  do
                  {
                    while ( 1 )
                    {
                      v40 = *(unsigned __int8 *)v39++;
                      if ( v40 == 32 )
                        break;
                      if ( v34 == v39 )
                        goto LABEL_71;
                    }
                    if ( *v26 >= 0 )
                      break;
                    *v26 = strtol(v39, 0u, 10);
                  }
                  while ( v34 != v39 );
                  goto LABEL_71;
                }
                v72 = v27 > v28;
                if ( v27 >= v30 )
                  v72 = 0;
                if ( !v72 )
                  goto LABEL_71;
                v73 = (const char *)(v4 + v28);
                sizea = (int *)(v27 - v28);
                if ( !strncasecmp((const char *)(v4 + v28), "content-length", v27 - v28) )
                {
                  header_buf_used = strtol((const char *)(v4 + v30), 0u, 10);
                  goto LABEL_71;
                }
                if ( !strncasecmp(v73, "transfer-encoding", (size_t)sizea) )
                {
                  v74 = strncasecmp((const char *)(v4 + v30), "chunked", 7u);
                  v75 = sa;
                  if ( !v74 )
                    v75 = 1;
                  sa = v75;
                  if ( v29 < v10 )
                  {
LABEL_72:
                    v41 = (char *)(v4 + v29 - 1);
                    while ( 1 )
                    {
                      v43 = (unsigned __int8)*++v41;
                      v42 = v43;
                      v28 = v29;
                      v44 = v43 == 10;
                      if ( v43 != 10 )
                        v44 = v42 == 13;
                      v30 = v44;
                      v29 = v36;
                      if ( !v44 )
                        break;
                      if ( v10 == v36 )
                      {
                        v29 = v28 + 2;
                        v30 = 0;
                        v27 = v10;
                        v28 = v10;
                        goto LABEL_53;
                      }
                      ++v36;
                    }
                    v27 = v28;
                    if ( v31 > v36 )
                      continue;
LABEL_82:
                    v7 = content_buf_used;
                    v6 = header_buf;
                    v13 = (char *)header_buf_len;
                    v5 = status_codea;
LABEL_83:
                    v9 = v10 - (_DWORD)v13;
                    memcpy((void *)content_length, &v13[v4], v10 - (_DWORD)v13);
                    content_buf_used = v10;
                    header_buf = v13;
                    if ( sa )
                    {
                      if ( v9 > 0 )
                        goto LABEL_85;
LABEL_106:
                      v22 = (unsigned int)v6 >= header_buf_used;
LABEL_35:
                      if ( (int)header_buf_used > 0 && v22 )
                      {
end_of_stream:
                        v24 = v99;
                        free((void *)v4);
                        *v24 = v6;
                        if ( !v6 )
                        {
                          free((void *)content_buf_len);
                          return 0;
                        }
                        return (void *)content_buf_len;
                      }
                      goto LABEL_6;
                    }
LABEL_25:
                    v18 = (unsigned int)&v6[v9];
                    if ( (int)header_buf_used <= 0 )
                    {
                      if ( v88 < v18 )
                      {
                        if ( !header_buf_used )
                        {
                          v19 = (unsigned int)&v6[v9];
                          goto LABEL_31;
                        }
                        v20 = (size_t)&v6[v9];
                        v88 = (unsigned int)&v6[v9];
                        goto LABEL_32;
                      }
                      v22 = header_buf_used <= v18;
                    }
                    else
                    {
                      v19 = header_buf_used;
                      if ( header_buf_used < v18 )
                      {
                        v18 = header_buf_used;
                        v9 = header_buf_used - (_DWORD)v6;
                        if ( header_buf_used > v88 )
                          goto LABEL_31;
                        v22 = 1;
                      }
                      else if ( v88 >= v18 )
                      {
                        v22 = header_buf_used == v18;
                      }
                      else
                      {
                        if ( header_buf_used < v18 )
                          v19 = (unsigned int)&v6[v9];
                        else
                          v19 = header_buf_used;
LABEL_31:
                        v20 = v19;
                        v88 = v19;
LABEL_32:
                        v21 = realloc((void *)content_buf_len, v20);
                        if ( !v21 )
                        {
                          v82 = v99;
                          v81 = (void *)content_buf_len;
                          goto LABEL_171;
                        }
                        content_buf_len = (unsigned int)v21;
                        v22 = v18 >= header_buf_used;
                      }
                    }
                    memcpy(&v6[content_buf_len], (const void *)content_length, v9);
                    v6 = (char *)v18;
                    sa = 0;
                    goto LABEL_35;
                  }
                }
                else
                {
LABEL_71:
                  if ( v29 < v10 )
                    goto LABEL_72;
                }
                v27 = v29;
                v28 = v29;
                v30 = 0;
                ++v29;
              }
              else
              {
LABEL_52:
                ++v29;
              }
            }
            else
            {
              if ( v35 != 58 )
              {
                v32 = v35 == 13;
                if ( v35 != 13 )
                  v32 = v35 == 10;
                if ( !v32 )
                  goto LABEL_52;
                goto LABEL_71;
              }
              if ( v29 >= v31 )
              {
                v30 = v29 + 1;
                v27 = v29++;
              }
              else
              {
                v76 = v29;
                do
                {
                  v78 = *(unsigned __int8 *)++v34;
                  v77 = v78;
                  v79 = v76;
                  v80 = v78 == 9;
                  if ( v78 != 9 )
                    v80 = v77 == 32;
                  ++v76;
                  if ( !v80 )
                  {
                    v30 = v79 + 1;
                    v27 = v29;
                    v29 = v30;
                    goto LABEL_53;
                  }
                }
                while ( v31 != v76 );
                v30 = v31 + 1;
                v27 = v29;
                v29 = v31 + 1;
              }
            }
            break;
          }
LABEL_53:
          if ( v31 <= v29 )
            goto LABEL_82;
          continue;
        }
      }
      content_buf_used = v10;
      header_buf = 0;
    }
  }
  if ( !sa )
    goto LABEL_25;
LABEL_85:
  header_buf_len = v4;
  v45 = (void *)content_buf_len;
  v46 = v88;
  v47 = 0;
  while ( 2 )
  {
    if ( v7 )
      goto LABEL_94;
    content_buf_len = 0;
    while ( 2 )
    {
      if ( v5 )
      {
LABEL_103:
        if ( v47 >= v9 )
          goto LABEL_104;
        goto LABEL_112;
      }
      v54 = (char *)&v84[0x21C] + v47;
      if ( *(v54 - 2052) == 13 )
      {
        if ( ++v47 >= v9 )
        {
LABEL_135:
          v88 = v46;
          v7 = 0;
          v4 = header_buf_len;
          content_buf_len = (unsigned int)v45;
          goto LABEL_106;
        }
        v54 = (char *)&v84[0x21C] + v47;
      }
      else if ( v47 >= v9 )
      {
        goto LABEL_135;
      }
      if ( *(v54 - 2052) == 10 )
      {
        ++v47;
        goto LABEL_103;
      }
LABEL_112:
      v55 = (int *)((char *)v5 + v9 - v47);
      v56 = *_ctype_b_loc();
      v57 = content_length + v47 - 1;
      v58 = (char *)v5 + chunked;
      do
      {
        v60 = *(unsigned __int8 *)++v57;
        v59 = v60;
        if ( (((unsigned int)v5 <= 0x1E) & (v56[v60] >> 0xC)) == 0 )
          break;
        v5 = (int *)((char *)v5 + 1);
        *v58 = v59;
        ++v47;
        *++v58 = 0;
      }
      while ( v5 != v55 );
      if ( v47 >= v9 )
        goto LABEL_104;
      v61 = content_length + v47 - 1;
      while ( 1 )
      {
        v63 = *(unsigned __int8 *)++v61;
        v62 = v63;
        v64 = v63 == 13;
        if ( v63 != 13 )
          v64 = v62 == 10;
        if ( v64 )
          break;
        if ( ++v47 == v9 )
          goto LABEL_104;
      }
      if ( v47 >= v9 )
      {
LABEL_104:
        v7 = content_buf_len;
        goto LABEL_105;
      }
      v65 = *((unsigned __int8 *)&v84[0x1B] + v47);
      if ( v65 == 13 )
      {
        if ( ++v47 >= v9 )
          goto LABEL_104;
        v65 = *((unsigned __int8 *)&v84[0x1B] + v47);
      }
      if ( v65 != 10 )
        continue;
      break;
    }
    if ( !v5 )
      goto LABEL_132;
    v66 = (unsigned __int8 *)chunked;
    v7 = 0;
    v67 = (unsigned __int8 *)v5 + chunked;
    do
    {
      v69 = *v66++;
      v68 = v69;
      v70 = 16 * v7;
      if ( (unsigned int)(v69 - 0x30) > 9 )
      {
        v71 = v70 - 0x57;
        v68 |= 0x20u;
      }
      else
      {
        v71 = v70 - 0x30;
      }
      v7 = v71 + v68;
    }
    while ( v66 != v67 );
    v5 = 0;
    ++v47;
    chunksize_buf[0] = 0;
    if ( !v7 )
    {
LABEL_132:
      v4 = header_buf_len;
      content_buf_len = (unsigned int)v45;
      goto end_of_stream;
    }
LABEL_94:
    v53 = v9 - v47;
    if ( v9 - v47 >= v7 )
      v53 = v7;
    v49 = (unsigned int)&v6[v53];
    if ( (unsigned int)&v6[v53] <= v46 )
    {
      v50 = v45;
      goto LABEL_92;
    }
    if ( (header_buf_used & 0x80000000) == 0 )
    {
      if ( header_buf_used < v49 )
        v46 = (unsigned int)&v6[v53];
      else
        v46 = header_buf_used;
    }
    else
    {
      v46 = (unsigned int)&v6[v53];
    }
    content_buf_len = (unsigned int)&v6[v53];
    v48 = realloc(v45, v46);
    v49 = content_buf_len;
    v50 = v48;
    if ( v48 )
    {
LABEL_92:
      v51 = &v6[(_DWORD)v50];
      v6 = (char *)v49;
      v45 = v50;
      v52 = (const void *)(content_length + v47);
      v47 += v53;
      memcpy(v51, v52, v53);
      v7 -= v53;
      if ( v47 >= v9 )
      {
LABEL_105:
        v88 = v46;
        v4 = header_buf_len;
        content_buf_len = (unsigned int)v45;
        goto LABEL_106;
      }
      continue;
    }
    break;
  }
  v81 = v45;
  v4 = header_buf_len;
  v82 = v99;
LABEL_171:
  free(v81);
  free((void *)v4);
  *v82 = -1;
  return 0;
}
