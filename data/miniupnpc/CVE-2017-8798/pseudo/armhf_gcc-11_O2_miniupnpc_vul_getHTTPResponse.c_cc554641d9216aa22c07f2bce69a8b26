void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v4; // r0
  void *v5; // r4
  unsigned int v6; // r8
  unsigned int v7; // r11
  signed int v8; // r10
  char *v9; // r9
  int v10; // r0
  signed int v11; // r5
  unsigned int v12; // r3
  void *v13; // r0
  unsigned int v14; // r3
  signed int v15; // r0
  signed int v16; // r6
  int v17; // r2
  signed int v18; // r1
  signed int v19; // r2
  size_t v20; // r7
  signed int v21; // r5
  int v22; // r6
  int v23; // r4
  _BOOL4 v24; // r3
  int v25; // r4
  unsigned int v26; // r11
  int *v27; // r9
  int v28; // r2
  int v29; // r1
  int v30; // r5
  signed int v31; // r10
  int v32; // r8
  int v33; // r4
  bool v34; // zf
  _BOOL4 v35; // r0
  const char *v36; // r7
  int v37; // r0
  int v38; // r6
  bool v39; // zf
  _BOOL4 v40; // r0
  const char *v41; // r4
  int v42; // t1
  unsigned int v43; // r2
  int v44; // r4
  int v45; // t1
  bool v46; // zf
  unsigned int v47; // r6
  signed int v48; // r4
  int v49; // r2
  int v50; // r7
  int v51; // r3
  char *v52; // r0
  const void *v53; // r1
  int v54; // r3
  const unsigned __int16 *v55; // lr
  unsigned int v56; // r0
  _BYTE *v57; // r1
  int v58; // r3
  int v59; // t1
  unsigned int v60; // r2
  int v61; // t1
  bool v62; // zf
  unsigned __int8 *v63; // r3
  unsigned __int8 *v64; // r8
  int v65; // r2
  int v66; // t1
  int v67; // r10
  int v68; // r10
  int v69; // r3
  int v70; // t1
  int v71; // r2
  bool v72; // zf
  char *v73; // r0
  _BOOL4 v74; // r0
  const char *v75; // r7
  int v76; // r0
  char *v77; // r3
  int v79[2]; // [sp+0h] [bp-8A8h] BYREF
  unsigned int bytestocopy; // [sp+Ch] [bp-89Ch]
  int content_length; // [sp+10h] [bp-898h]
  char *header_buf; // [sp+14h] [bp-894h]
  int v83; // [sp+18h] [bp-890h]
  unsigned int header_buf_used; // [sp+1Ch] [bp-88Ch]
  unsigned int content_buf_used; // [sp+20h] [bp-888h]
  unsigned int header_buf_used_0; // [sp+24h] [bp-884h]
  unsigned int header_buf_len; // [sp+28h] [bp-880h]
  unsigned int chunksize_buf_index; // [sp+2Ch] [bp-87Ch]
  char *content_buf; // [sp+30h] [bp-878h]
  unsigned int v90; // [sp+34h] [bp-874h]
  char *v91; // [sp+38h] [bp-870h]
  int *status_codea; // [sp+3Ch] [bp-86Ch]
  char *s2; // [sp+40h] [bp-868h]
  int *sizea; // [sp+44h] [bp-864h]
  size_t v95; // [sp+48h] [bp-860h]
  int *v96; // [sp+4Ch] [bp-85Ch]
  char chunksize_buf[32]; // [sp+54h] [bp-854h] BYREF
  char buf[2048]; // [sp+74h] [bp-834h] BYREF

  sizea = status_code;
  v96 = size;
  if ( status_code )
    *status_code = -1;
  header_buf_used = (unsigned int)malloc(0x800u);
  if ( !header_buf_used )
  {
    v5 = 0;
    *v96 = -1;
    return v5;
  }
  v4 = (char *)malloc(0x800u);
  v5 = v4;
  if ( !v4 )
  {
    free((void *)header_buf_used);
    *v96 = -1;
    return v5;
  }
  v6 = 0;
  chunksize_buf[0] = 0;
  content_length = 2048;
  content_buf = (_BYTE *)&loc_800;
  v83 = -1;
  bytestocopy = (unsigned int)buf;
  v7 = 0;
  v8 = 0;
  v9 = v4;
  header_buf_used_0 = 0;
  header_buf = 0;
  header_buf_len = 0;
  content_buf_used = (unsigned int)chunksize_buf;
  do
  {
    while ( 1 )
    {
      v10 = receivedata(s, bytestocopy, 2048, 5000, 0);
      v11 = v10;
      if ( v10 <= 0 )
      {
LABEL_151:
        v5 = v9;
        v21 = v7;
        goto end_of_stream;
      }
      if ( header_buf_len )
      {
        if ( !header_buf )
        {
          v20 = v10;
          goto LABEL_27;
        }
        goto LABEL_80;
      }
      v12 = v10 + header_buf_used_0;
      if ( v10 + header_buf_used_0 > (unsigned int)content_buf )
      {
        chunksize_buf_index = v10 + header_buf_used_0;
        v13 = realloc((void *)header_buf_used, v10 + header_buf_used_0);
        v12 = chunksize_buf_index;
        if ( !v13 )
        {
          free((void *)header_buf_used);
          free(v9);
          v5 = (void *)header_buf_len;
          *v96 = -1;
          return v5;
        }
        header_buf_used = (unsigned int)v13;
        content_buf = (char *)chunksize_buf_index;
      }
      chunksize_buf_index = v12;
      memcpy((void *)(header_buf_used + header_buf_used_0), (const void *)bytestocopy, v11);
      v14 = chunksize_buf_index;
      v15 = chunksize_buf_index - 1;
      if ( (int)(chunksize_buf_index - 1) > 0 )
        break;
LABEL_23:
      header_buf_used_0 = chunksize_buf_index;
    }
    v16 = 0;
    while ( 1 )
    {
LABEL_14:
      v17 = *(unsigned __int8 *)(header_buf_used + v16);
      v18 = v16 + 1;
      if ( v17 != 13 )
      {
LABEL_15:
        if ( v17 == 10 )
        {
          v16 += 2;
          if ( *(_BYTE *)(header_buf_used + v18) == 10 )
            break;
          goto LABEL_22;
        }
        goto LABEL_16;
      }
      while ( 1 )
      {
        v19 = v16 + 2;
        if ( *(_BYTE *)(header_buf_used + v18) != 10 )
        {
          if ( v15 <= v19 )
            goto LABEL_23;
          v16 += 2;
          goto LABEL_14;
        }
        v18 = v16 + 3;
        if ( (int)chunksize_buf_index > v19 && *(_BYTE *)(header_buf_used + v19) == 13 )
          break;
LABEL_16:
        if ( v15 <= v18 )
          goto LABEL_23;
        v16 = v18;
        v17 = *(unsigned __int8 *)(header_buf_used + v18++);
        if ( v17 != 13 )
          goto LABEL_15;
      }
      v16 += 4;
      if ( (int)chunksize_buf_index > v18 && *(_BYTE *)(header_buf_used + v18) == 10 )
        break;
LABEL_22:
      if ( v15 <= v16 )
        goto LABEL_23;
    }
    v25 = 0;
    status_codea = (int *)"transfer-encoding";
    s2 = "chunked";
    header_buf_len = v7;
    chunksize_buf_index = v8;
    v90 = v6;
    v91 = v9;
    v26 = header_buf_used;
    v27 = sizea;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = v14;
    v32 = v16 - 1;
    header_buf_used_0 = v16;
    while ( 1 )
    {
LABEL_47:
      v35 = v29 > 0;
      if ( v28 > v29 )
        v35 = 0;
      v34 = !v35;
      v36 = (const char *)(v26 + v30);
      v37 = *(unsigned __int8 *)(v26 + v30);
      v38 = v30 + 1;
      if ( v34 )
        break;
      if ( v37 == 58 )
      {
        v33 = v30;
        do
        {
          v70 = *(unsigned __int8 *)++v36;
          v69 = v70;
          v71 = v33;
          v72 = v70 == 9;
          if ( v70 != 9 )
            v72 = v69 == 32;
          ++v33;
          if ( !v72 )
          {
            v25 = v71 + 1;
            v28 = v30;
            v30 = v25;
            goto LABEL_46;
          }
        }
        while ( v32 > v33 );
        v25 = v33 + 1;
        v28 = v30;
        v30 = v25;
        goto LABEL_46;
      }
      v34 = v37 == 10;
      if ( v37 != 10 )
        v34 = v37 == 13;
      if ( v34 )
        goto LABEL_64;
LABEL_45:
      ++v30;
LABEL_46:
      if ( v32 <= v30 )
        goto LABEL_75;
    }
    v39 = v37 == 10;
    if ( v37 != 10 )
      v39 = v37 == 13;
    if ( !v39 )
      goto LABEL_45;
    v40 = v29 == 0;
    if ( !v27 )
      v40 = 0;
    if ( v40 )
    {
      if ( v30 > 0 )
      {
        v41 = (const char *)v26;
        do
        {
          while ( 1 )
          {
            v42 = *(unsigned __int8 *)v41++;
            if ( v42 == 32 )
              break;
            if ( v36 == v41 )
              goto LABEL_64;
          }
          if ( *v27 >= 0 )
            break;
          *v27 = strtol(v41, 0u, 10);
        }
        while ( v36 != v41 );
      }
      goto LABEL_64;
    }
    v74 = v28 > v29;
    if ( v28 >= v25 )
      v74 = 0;
    if ( !v74 )
      goto LABEL_64;
    v75 = (const char *)(v26 + v29);
    v95 = v28 - v29;
    if ( !strncasecmp((const char *)(v26 + v29), "content-length", v28 - v29) )
    {
      v83 = strtol((const char *)(v26 + v25), 0u, 10);
LABEL_64:
      if ( v31 > v30 )
        goto LABEL_65;
      goto LABEL_145;
    }
    if ( strncasecmp(v75, (const char *)status_codea, v95) )
      goto LABEL_64;
    v76 = strncasecmp((const char *)(v26 + v25), s2, 7u);
    v77 = header_buf;
    if ( !v76 )
      v77 = (_BYTE *)(getHTTPResponse + 1);
    header_buf = v77;
    if ( v31 <= v30 )
    {
LABEL_145:
      v28 = v30;
      v29 = v30;
      v25 = 0;
      ++v30;
      goto LABEL_46;
    }
LABEL_65:
    v43 = v26 + v30 - 1;
    while ( 1 )
    {
      v45 = *(unsigned __int8 *)++v43;
      v44 = v45;
      v29 = v30;
      v46 = v45 == 10;
      if ( v45 != 10 )
        v46 = v44 == 13;
      v25 = v46;
      v30 = v38;
      if ( !v46 )
        break;
      if ( v31 == v38 )
      {
        v30 = v29 + 2;
        v25 = 0;
        v28 = v31;
        v29 = v31;
        goto LABEL_46;
      }
      ++v38;
    }
    v28 = v29;
    if ( v32 > v38 )
      goto LABEL_47;
LABEL_75:
    v47 = header_buf_used_0;
    v11 = v31 - header_buf_used_0;
    header_buf_used_0 = v31;
    v7 = header_buf_len;
    v8 = chunksize_buf_index;
    v6 = v90;
    v9 = v91;
    memcpy((void *)bytestocopy, (const void *)(header_buf_used + v47), v11);
    v20 = v11;
    if ( !header_buf )
    {
      header_buf_len = v47;
LABEL_27:
      v21 = v7 + v11;
      v22 = v21;
      if ( v83 <= 0 )
      {
        if ( content_length < (unsigned int)v21 )
        {
          if ( v83 < v21 )
          {
            v23 = v21;
            goto LABEL_132;
          }
LABEL_136:
          v23 = v21;
          v22 = v83;
          goto LABEL_132;
        }
      }
      else
      {
        if ( v83 < v21 )
        {
          v21 = v83;
          v23 = v83;
          v20 = v83 - v7;
          if ( v83 <= (unsigned int)content_length )
            goto LABEL_30;
          v23 = v83;
          v22 = v83;
LABEL_132:
          v73 = (char *)realloc(v9, v22);
          if ( !v73 )
          {
            free(v9);
            free((void *)header_buf_used);
            v5 = 0;
            *v96 = -1;
            return v5;
          }
          v9 = v73;
          v21 = v23;
          content_length = v22;
LABEL_30:
          memcpy(&v9[v7], (const void *)bytestocopy, v20);
          v7 = v23;
          header_buf = 0;
          goto LABEL_31;
        }
        if ( content_length < (unsigned int)v21 )
          goto LABEL_136;
      }
      v23 = v21;
      goto LABEL_30;
    }
    if ( v11 <= 0 )
    {
      v21 = v7;
      header_buf_len = v47;
      goto LABEL_31;
    }
    header_buf_len = v47;
LABEL_80:
    v48 = 0;
    while ( 2 )
    {
      if ( !v8 )
      {
        if ( v6 )
        {
LABEL_94:
          if ( v48 >= v11 )
            goto LABEL_127;
        }
        else
        {
          v54 = *((unsigned __int8 *)&v79[29] + v48);
          if ( v54 != 13 )
          {
            if ( v54 != 10 )
              goto LABEL_94;
LABEL_148:
            ++v48;
            goto LABEL_94;
          }
          if ( ++v48 >= v11 )
            goto LABEL_127;
          if ( *((_BYTE *)&v79[29] + v48) == 10 )
            goto LABEL_148;
        }
        v55 = *_ctype_b_loc();
        v56 = bytestocopy + v48 - 1;
        v57 = (_BYTE *)(content_buf_used + v6);
        while ( 1 )
        {
          v59 = *(unsigned __int8 *)++v56;
          v58 = v59;
          if ( ((v6 <= 0x1E) & (v55[v59] >> 0xC)) == 0 )
            break;
          ++v48;
          *v57 = v58;
          ++v6;
          *++v57 = 0;
          if ( v48 >= v11 )
            goto LABEL_127;
        }
        if ( v48 >= v11 )
          goto LABEL_127;
        v60 = bytestocopy + v48;
        while ( 1 )
        {
          v62 = v58 == 10;
          if ( v58 != 10 )
            v62 = v58 == 13;
          if ( v62 )
            break;
          if ( ++v48 == v11 )
            goto LABEL_127;
          v61 = *(unsigned __int8 *)++v60;
          v58 = v61;
        }
        if ( v48 >= v11 )
        {
LABEL_127:
          v21 = v7;
          header_buf = (_BYTE *)(getHTTPResponse + 1);
          goto LABEL_31;
        }
        if ( v58 == 13 )
        {
          if ( ++v48 >= v11 )
            goto LABEL_127;
          v58 = *((unsigned __int8 *)&v79[29] + v48);
        }
        if ( v58 != 10 )
        {
          v50 = v7;
LABEL_89:
          v7 = v50;
          continue;
        }
        if ( !v6 )
          goto LABEL_151;
        v63 = (unsigned __int8 *)content_buf_used;
        v8 = 0;
        v64 = (unsigned __int8 *)(content_buf_used + v6);
        do
        {
          v66 = *v63++;
          v65 = v66;
          v67 = 16 * v8;
          if ( (unsigned int)(v66 - 0x30) > 9 )
          {
            v65 |= 0x20u;
            v68 = v67 - 0x57;
          }
          else
          {
            v68 = v67 - 0x30;
          }
          v8 = v65 + v68;
        }
        while ( v64 != v63 );
        ++v48;
        chunksize_buf[0] = 0;
        if ( !v8 )
          goto LABEL_151;
        v6 = 0;
      }
      break;
    }
    v49 = v11 - v48;
    if ( v11 - v48 >= v8 )
      v49 = v8;
    v50 = v49 + v7;
    if ( v49 + v7 > content_length )
    {
      v51 = v83;
      if ( v83 < v50 )
        v51 = v49 + v7;
      header_buf = (char *)v49;
      content_length = v51;
      v52 = (char *)realloc(v9, v51);
      v49 = (int)header_buf;
      if ( !v52 )
      {
        bytestocopy = 0;
        free(v9);
        free((void *)header_buf_used);
        v5 = (void *)bytestocopy;
        *v96 = -1;
        return v5;
      }
      v9 = v52;
    }
    v53 = (const void *)(bytestocopy + v48);
    v48 += v49;
    v8 -= v49;
    memcpy(&v9[v7], v53, v49);
    if ( v48 < v11 )
      goto LABEL_89;
    v7 = v50;
    v21 = v50;
    header_buf = (_BYTE *)(getHTTPResponse + 1);
LABEL_31:
    v24 = v83 > 0;
    if ( v83 > v21 )
      v24 = 0;
  }
  while ( !v24 );
  v5 = v9;
end_of_stream:
  free((void *)header_buf_used);
  *v96 = v21;
  if ( !v7 )
  {
    free(v5);
    return 0;
  }
  return v5;
}
