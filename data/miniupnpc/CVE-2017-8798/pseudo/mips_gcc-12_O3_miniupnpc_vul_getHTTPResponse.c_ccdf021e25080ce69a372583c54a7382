char *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  void *v4; // $v0
  void *v5; // $v1
  unsigned int v6; // $s3
  char *v7; // $s0
  signed int v8; // $s4
  int v9; // $s6
  unsigned int v10; // $s1
  signed int v11; // $s2
  signed int v12; // $v1
  size_t v13; // $a2
  char *v14; // $v0
  unsigned int v15; // $v1
  int v16; // $a2
  int v17; // $a3
  char *v18; // $v0
  int v19; // $v0
  int v20; // $t7
  signed int v21; // $v0
  _BOOL4 v22; // $v0
  int v23; // $t0
  int *v24; // $s3
  char *v25; // $s2
  int v26; // $a2
  int v27; // $a1
  int v28; // $fp
  int v29; // $s4
  int v30; // $s0
  char *v31; // $s5
  int v32; // $v0
  int v33; // $s1
  bool v34; // dc
  _BOOL4 v35; // $v0
  int v36; // $v1
  int v37; // $fp
  int v38; // $v0
  size_t v39; // $a1
  char *v40; // $s5
  int v41; // $v0
  _BOOL4 v42; // $v0
  int *v43; // $s1
  int v45; // $v0
  _BOOL4 v46; // $v0
  int v47; // $v0
  int v48; // $v1
  char *v49; // $v0
  int v50; // $s0
  signed int v51; // $s6
  signed int v52; // $s3
  char *v53; // $s7
  size_t v54; // $v1
  char *v55; // $s2
  _BOOL4 v56; // $v0
  unsigned int v57; // $s5
  size_t v58; // $a2
  int v59; // $s5
  size_t v60; // $fp
  char *v61; // $v0
  const unsigned __int16 *v62; // $a3
  unsigned int v63; // $t0
  char *v64; // $v0
  unsigned int v65; // $a1
  unsigned int v66; // $a2
  int v67; // $a0
  char *v68; // $v1
  _BOOL4 v69; // $v0
  int v70; // $v0
  int v71; // $v0
  int v72; // $a3
  char *v73; // $a0
  char *v74; // $t0
  int v75; // $v1
  int v76; // $a3
  const char *v77; // $s0
  int v78; // $v0
  char *v79; // $v1
  int v80; // $v1
  int *v81; // $s1
  int *v82; // $s1
  char *content_buf; // [sp+20h] [-878h]
  unsigned int content_buf_lena; // [sp+24h] [-874h]
  unsigned int content_buf_len; // [sp+24h] [-874h]
  int content_length; // [sp+28h] [-870h]
  char *header_buf_0; // [sp+2Ch] [-86Ch]
  int chunked; // [sp+34h] [-864h]
  unsigned int chunksize_buf_index; // [sp+38h] [-860h]
  signed int chunksize; // [sp+3Ch] [-85Ch]
  unsigned int chunksizea; // [sp+3Ch] [-85Ch]
  unsigned int chunksizeb; // [sp+3Ch] [-85Ch]
  unsigned int chunksizec; // [sp+3Ch] [-85Ch]
  unsigned int content_buf_used; // [sp+40h] [-858h]
  unsigned int content_buf_useda; // [sp+40h] [-858h]
  unsigned int header_buf_len; // [sp+44h] [-854h]
  int endofheaders; // [sp+48h] [-850h]
  char *v98; // [sp+4Ch] [-84Ch]
  int valuestart; // [sp+50h] [-848h] BYREF
  int *status_codea; // [sp+54h] [-844h]
  char *v101; // [sp+58h] [-840h]
  size_t n; // [sp+5Ch] [-83Ch]
  int *sizea; // [sp+60h] [-838h]
  char *v104; // [sp+64h] [-834h]
  char *v105; // [sp+68h] [-830h]
  _DWORD *v106; // [sp+6Ch] [-82Ch]
  char chunksize_buf[32]; // [sp+74h] [-824h] BYREF
  char buf[2048]; // [sp+94h] [-804h] BYREF
  int v109; // [sp+894h] [-4h]

  v106 = &_stack_chk_guard;
  status_codea = status_code;
  if ( status_code )
    *status_code = -1;
  v4 = malloc(0x800u);
  if ( !v4 )
  {
    *size = -1;
    content_buf = 0;
    goto LABEL_53;
  }
  content_buf_lena = (unsigned int)v4;
  content_buf = (char *)malloc(0x800u);
  v5 = (void *)content_buf_lena;
  if ( !content_buf )
  {
LABEL_157:
    free(v5);
    content_buf = 0;
    *size = -1;
    goto LABEL_53;
  }
  content_buf_len = 2048;
  header_buf_len = 2048;
  content_length = -1;
  v104 = "content-length";
  sizea = size;
  chunksize_buf[0] = 0;
  chunked = 0;
  v6 = 0;
  v7 = buf;
  v105 = "transfer-encoding";
  chunksize_buf_index = 0;
  v8 = 0;
  v9 = 0;
  header_buf_0 = (char *)v5;
  v10 = 0;
  do
  {
LABEL_6:
    v11 = receivedata(s, v7, 2048, 5000);
    if ( v11 <= 0 )
      break;
    if ( v6 )
    {
      v36 = content_length;
      if ( !chunked )
        goto LABEL_41;
      v15 = v10;
      goto LABEL_84;
    }
    v12 = v11 + v10;
    v13 = v11;
    if ( header_buf_len < v11 + v10 )
    {
      v14 = (char *)realloc(header_buf_0, v11 + v10);
      v12 = v11 + v10;
      if ( !v14 )
      {
        v82 = sizea;
        free(header_buf_0);
        free(content_buf);
        content_buf = 0;
        *v82 = -1;
        goto LABEL_53;
      }
      header_buf_len = v11 + v10;
      header_buf_0 = v14;
      v13 = v11;
    }
    chunksize = v12;
    memcpy(&header_buf_0[v10], v7, v13);
    v15 = chunksize;
    v16 = chunksize - 1;
    if ( chunksize < 2 )
      goto LABEL_20;
    v17 = 0;
    v18 = header_buf_0;
    do
    {
      while ( 1 )
      {
        v19 = *v18;
        v20 = v17 + 1;
        if ( v19 != 13 )
          break;
LABEL_17:
        v21 = v17 + 2;
        if ( header_buf_0[v20] != 10 )
          goto LABEL_18;
        v10 = chunksize;
        if ( v21 >= chunksize )
          goto LABEL_6;
        v20 = v17 + 3;
        if ( header_buf_0[v21] == 13 )
        {
          v10 = chunksize;
          if ( v20 >= chunksize )
            goto LABEL_6;
          v17 += 4;
          if ( header_buf_0[v20] == 10 )
          {
            v22 = v17 < v16;
            goto LABEL_27;
          }
LABEL_19:
          v18 = &header_buf_0[v17];
          if ( v17 >= v16 )
            goto LABEL_20;
        }
        else
        {
          v17 += 3;
          v18 = &header_buf_0[v17];
          if ( v17 >= v16 )
            goto LABEL_6;
        }
      }
      while ( v19 != 10 )
      {
        v17 = v20;
        if ( v20 >= v16 )
          goto LABEL_20;
        v19 = header_buf_0[v20++];
        if ( v19 == 13 )
          goto LABEL_17;
      }
      if ( header_buf_0[v20] != 10 )
      {
LABEL_18:
        v17 += 2;
        goto LABEL_19;
      }
      v17 += 2;
      v22 = v17 < v16;
LABEL_27:
      if ( !v22 )
        break;
      v18 = &header_buf_0[v17];
    }
    while ( !v17 );
    if ( v20 <= 0 )
      goto LABEL_39;
    v23 = 0;
    v24 = status_codea;
    v25 = header_buf_0;
    chunksizea = v8;
    v98 = v7;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    endofheaders = v17;
    v29 = v20;
    v30 = v15;
    while ( 2 )
    {
      v31 = &v25[v28];
      v32 = v25[v28];
      v33 = v28 + 1;
      if ( v27 <= 0 )
      {
        if ( v32 != 13 && v32 != 10 )
          goto LABEL_36;
        if ( !v27 && v24 )
        {
          if ( v28 <= 0 )
            goto LABEL_60;
          valuestart = v30;
          v101 = v25;
          v77 = v25 + 1;
          while ( 1 )
          {
            if ( *(v77 - 1) == 32 )
            {
              if ( *v24 >= 0 )
              {
LABEL_55:
                v33 = v28 + 1;
                v30 = valuestart;
                v25 = v101;
                goto LABEL_56;
              }
              *v24 = strtol(v77, 0u, 10);
            }
            if ( &v25[v28 + 1] == ++v77 )
              goto LABEL_55;
          }
        }
        v35 = v28 < v30;
        if ( v27 >= v26 )
          goto LABEL_57;
LABEL_69:
        v46 = v26 < v23;
LABEL_70:
        valuestart = v23;
        if ( v46 )
        {
          n = v26 - v27;
          v101 = &v25[v27];
          if ( strncasecmp(&v25[v27], v104, v26 - v27) )
          {
            if ( !strncasecmp(v101, v105, n) )
            {
              v47 = strncasecmp(&v25[valuestart], "chunked", 7u);
              v48 = chunked;
              if ( !v47 )
                v48 = 1;
              chunked = v48;
              if ( v28 < v30 )
              {
LABEL_60:
                while ( 1 )
                {
                  v45 = *v31;
                  if ( v45 != 13 )
                  {
                    v26 = v28;
                    if ( v45 != 10 )
                      break;
                  }
                  v28 = v33;
                  if ( v33 == v30 )
                  {
                    v28 = v30 + 1;
                    v23 = 0;
                    v26 = v30;
                    v27 = v30;
                    goto LABEL_37;
                  }
                  v31 = &v25[v33++];
                }
              }
              else
              {
                v26 = v28;
              }
              v27 = v28;
              goto LABEL_78;
            }
          }
          else
          {
            content_length = strtol(&v25[valuestart], 0u, 10);
          }
        }
LABEL_56:
        v35 = v28 < v30;
        goto LABEL_57;
      }
      if ( v27 < v26 )
      {
        if ( v32 == 13 )
          goto LABEL_69;
        v34 = v32 != 10;
        v46 = v26 < v23;
        if ( v34 )
          goto LABEL_36;
        goto LABEL_70;
      }
      if ( v32 != 58 )
      {
        if ( v32 == 13 )
          goto LABEL_56;
        v34 = v32 == 10;
        v35 = v28 < v30;
        if ( !v34 )
        {
LABEL_36:
          v28 = v33;
          goto LABEL_37;
        }
LABEL_57:
        v26 = v28;
        if ( v35 )
          goto LABEL_60;
        v27 = v28;
LABEL_78:
        v23 = 0;
        goto LABEL_36;
      }
      v78 = v28;
      if ( v28 >= v29 )
      {
LABEL_146:
        v23 = v78 + 1;
      }
      else
      {
        v79 = &v25[v28];
        while ( 1 )
        {
          v80 = v79[1];
          if ( v80 != 32 )
          {
            v23 = v78 + 1;
            if ( v80 != 9 )
              break;
          }
          v79 = &v25[++v78];
          if ( v78 == v29 )
            goto LABEL_146;
        }
      }
      v26 = v28;
      v28 = v23;
LABEL_37:
      v15 = v30;
      if ( v28 < v29 )
        continue;
      break;
    }
    v8 = chunksizea;
    v17 = endofheaders;
    v7 = v98;
LABEL_39:
    v11 = v15 - v17;
    content_buf_used = v15;
    chunksizeb = v17;
    memcpy(v7, &header_buf_0[v17], v15 - v17);
    v15 = content_buf_used;
    if ( !chunked )
    {
      v10 = content_buf_used;
      v6 = chunksizeb;
      v36 = content_length;
LABEL_41:
      v37 = v9 + v11;
      if ( v36 <= 0 )
      {
LABEL_44:
        if ( content_buf_len >= v37 )
          goto LABEL_134;
        v38 = content_length;
        if ( content_length >= v37 )
          goto LABEL_133;
        content_buf_len = v37;
        v39 = v37;
LABEL_47:
        v40 = (char *)realloc(content_buf, v39);
        if ( !v40 )
          goto LABEL_156;
      }
      else
      {
        if ( v36 < v37 )
        {
          v37 = v36;
          v11 = v36 - v9;
          goto LABEL_44;
        }
        v38 = content_length;
        if ( content_buf_len < v37 )
        {
LABEL_133:
          content_buf_len = v38;
          v39 = v38;
          goto LABEL_47;
        }
LABEL_134:
        v40 = content_buf;
      }
      memcpy(&v40[v9], v7, v11);
      v15 = v10;
      v9 = v37;
      content_buf = v40;
      chunked = 0;
      goto LABEL_49;
    }
    v6 = chunksizeb;
    if ( v11 <= 0 )
    {
      v41 = content_length;
      goto LABEL_50;
    }
LABEL_84:
    v49 = v7;
    chunksizec = v6;
    v50 = v9;
    v51 = 0;
    v52 = v11;
    content_buf_useda = v15;
    v53 = v49;
    while ( 2 )
    {
      v57 = chunksize_buf_index;
      if ( v8 )
      {
LABEL_91:
        v58 = v52 - v51;
        if ( v8 < v52 - v51 )
          v58 = v8;
        v59 = v50 + v58;
        v60 = v58;
        if ( content_buf_len < v50 + v58 )
        {
          v54 = content_length;
          if ( content_length < v59 )
            v54 = v50 + v58;
          content_buf_len = v54;
          v55 = (char *)realloc(content_buf, v54);
          if ( !v55 )
          {
LABEL_156:
            size = sizea;
            free(content_buf);
            v5 = header_buf_0;
            goto LABEL_157;
          }
        }
        else
        {
          v55 = content_buf;
        }
        memcpy(&v55[v50], &v53[v51], v60);
        v51 += v60;
        v8 -= v60;
        v50 = v59;
        content_buf = v55;
        v56 = v51 < v52;
LABEL_89:
        if ( !v56 )
        {
LABEL_96:
          v9 = v50;
          v6 = chunksizec;
          v15 = content_buf_useda;
          v7 = v53;
          goto LABEL_49;
        }
        continue;
      }
      break;
    }
    if ( chunksize_buf_index )
    {
      while ( 1 )
      {
        v56 = v51 < v52;
        if ( v51 >= v52 )
          break;
LABEL_101:
        v62 = *_ctype_b_loc();
        v63 = v57;
        v64 = &chunksize_buf[v57];
        v65 = v52 + v57 - v51;
        v66 = v51 - v57;
        do
        {
          v67 = v53[v66 + v63];
          if ( (v62[v67] & 0x10) == 0 )
            break;
          if ( v63 >= 0x1F )
            break;
          ++v63;
          *v64 = v67;
          v64[1] = 0;
          ++v51;
          ++v64;
        }
        while ( v63 != v65 );
        v56 = v51 < v52;
        if ( v51 >= v52 )
          goto LABEL_117;
        v68 = &v53[v51];
        while ( 1 )
        {
          v70 = *v68;
          if ( v70 == 13 )
            break;
          v34 = v70 == 10;
          v69 = v51 < v52;
          if ( v34 )
            goto LABEL_111;
          ++v51;
          ++v68;
          if ( v51 == v52 )
            goto LABEL_95;
        }
        v69 = v51 < v52;
LABEL_111:
        if ( !v69 )
        {
LABEL_95:
          chunksize_buf_index = v63;
          goto LABEL_96;
        }
        v71 = *((char *)&valuestart + v51 + 0x44);
        if ( v71 == 13 )
        {
          if ( ++v51 >= v52 )
            goto LABEL_95;
          v57 = v63;
          if ( *((_BYTE *)&valuestart + v51 + 0x44) == 10 )
          {
LABEL_120:
            if ( !v63 )
              goto LABEL_154;
            v72 = 0;
            v73 = chunksize_buf;
            v74 = &chunksize_buf[v63];
            do
            {
              while ( 1 )
              {
                v75 = *v73;
                v76 = 16 * v72;
                if ( (unsigned __int8)(v75 - 0x30) >= 0xAu )
                  break;
                ++v73;
                v72 = v76 - 48 + v75;
                if ( v74 == v73 )
                  goto LABEL_125;
              }
              ++v73;
              v72 = v76 - 87 + (v75 | 0x20);
            }
            while ( v74 != v73 );
LABEL_125:
            chunksize_buf[0] = 0;
            ++v51;
            if ( !v72 )
            {
LABEL_154:
              v81 = sizea;
              free(header_buf_0);
              *v81 = v50;
              if ( v50 )
                goto LABEL_53;
              goto LABEL_155;
            }
            chunksize_buf_index = 0;
            v8 = v72;
            goto LABEL_91;
          }
        }
        else
        {
          v57 = v63;
          if ( v71 == 10 )
            goto LABEL_120;
        }
        if ( !v57 )
          goto LABEL_98;
      }
      v63 = v57;
      goto LABEL_117;
    }
LABEL_98:
    v61 = (char *)&valuestart + v51 + 0x848;
    if ( *(v61 - 2052) != 13 )
    {
      if ( v51 >= v52 )
        goto LABEL_127;
      if ( *(v61 - 2052) != 10 )
        goto LABEL_101;
LABEL_130:
      v56 = ++v51 < v52;
      if ( v51 < v52 )
        goto LABEL_101;
      v63 = v57;
LABEL_117:
      chunksize_buf_index = v63;
      goto LABEL_89;
    }
    if ( ++v51 < v52 )
    {
      if ( *((_BYTE *)&valuestart + v51 + 0x44) != 10 )
        goto LABEL_101;
      goto LABEL_130;
    }
LABEL_127:
    v9 = v50;
    v6 = chunksizec;
    v15 = content_buf_useda;
    v7 = v53;
    chunksize_buf_index = 0;
    v8 = 0;
LABEL_49:
    v41 = content_length;
LABEL_50:
    v34 = v41 <= 0;
    v42 = v9 < v41;
    if ( v34 )
    {
LABEL_20:
      v10 = v15;
      goto LABEL_6;
    }
    v10 = v15;
  }
  while ( v42 );
  v43 = sizea;
  free(header_buf_0);
  *v43 = v9;
  if ( !v9 )
  {
LABEL_155:
    free(content_buf);
    content_buf = 0;
  }
LABEL_53:
  if ( v109 != *v106 )
    _stack_chk_fail();
  return content_buf;
}
