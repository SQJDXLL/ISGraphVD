void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // rbp
  char *v4; // rdi
  __int64 v5; // r12
  unsigned int v6; // r15d
  int v7; // r14d
  int v8; // ebx
  int v9; // r13d
  char *v10; // rax
  int v11; // edx
  char v12; // cl
  int v13; // eax
  int v14; // ecx
  int v15; // edx
  __int64 v16; // rax
  signed int j; // r9d
  __int64 v18; // rbx
  char v19; // si
  signed int v20; // esi
  char v21; // dl
  const char *v22; // rdx
  signed int k; // ecx
  int v24; // eax
  size_t v25; // rdx
  const char *v26; // rdi
  bool v27; // zf
  int v28; // eax
  char v29; // al
  __int64 m; // r13
  char *v31; // r9
  unsigned int v32; // edx
  const unsigned __int16 **v33; // rax
  const unsigned __int16 *v34; // rdx
  __int64 v35; // rax
  __int64 n; // rax
  char v37; // dl
  __int64 ii; // rcx
  int v39; // eax
  int v40; // edx
  unsigned int v41; // r8d
  unsigned int v42; // r10d
  char *v43; // rax
  char *v44; // rsi
  char *v45; // rdi
  unsigned int v46; // r13d
  char *v47; // rax
  char *v48; // rdi
  char *content_buf; // [rsp+0h] [rbp-8B8h]
  int content_length; // [rsp+Ch] [rbp-8ACh]
  unsigned int v54; // [rsp+20h] [rbp-898h]
  unsigned int header_buf_used; // [rsp+24h] [rbp-894h]
  signed int header_buf_useda; // [rsp+24h] [rbp-894h]
  int chunked; // [rsp+28h] [rbp-890h]
  unsigned int v58; // [rsp+2Ch] [rbp-88Ch]
  unsigned int v59; // [rsp+2Ch] [rbp-88Ch]
  unsigned int header_buf_len; // [rsp+30h] [rbp-888h]
  const char *chunksize; // [rsp+38h] [rbp-880h]
  char *chunksizea; // [rsp+38h] [rbp-880h]
  unsigned int chunksizeb; // [rsp+38h] [rbp-880h]
  signed int i; // [rsp+40h] [rbp-878h]
  size_t ia; // [rsp+40h] [rbp-878h]
  unsigned int ib; // [rsp+40h] [rbp-878h]
  signed int sp_0; // [rsp+48h] [rbp-870h]
  int sp_0a; // [rsp+48h] [rbp-870h]
  char *sp_0b; // [rsp+48h] [rbp-870h]
  char chunksize_buf[32]; // [rsp+58h] [rbp-860h]
  char buf[2048]; // [rsp+78h] [rbp-840h] BYREF
  unsigned __int64 v73; // [rsp+878h] [rbp-40h]

  v73 = __readfsqword(0x28u);
  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800uLL);
  if ( !v3 )
    goto LABEL_7;
  content_buf = (char *)malloc(0x800uLL);
  if ( !content_buf )
    goto LABEL_5;
  v54 = 0;
  v5 = 0LL;
  v6 = 2048;
  v7 = 0;
  chunksize_buf[0] = 0;
  header_buf_used = 0;
  header_buf_len = 2048;
  v58 = 0;
  content_length = -1;
  chunked = 0;
  while ( 1 )
  {
    v8 = receivedata((unsigned int)s, buf, 2048LL, 5000LL, 0LL);
    if ( v8 <= 0 )
      break;
    if ( v7 )
      goto LABEL_67;
    v9 = v8 + header_buf_used;
    if ( header_buf_len < v8 + header_buf_used )
    {
      v10 = (char *)realloc(v3, (unsigned int)v9);
      if ( !v10 )
      {
        free(v3);
        v4 = content_buf;
        goto LABEL_6;
      }
      header_buf_len = v8 + header_buf_used;
      v3 = v10;
    }
    v11 = 0;
    v7 = 0;
    qmemcpy(&v3[header_buf_used], buf, (unsigned int)v8);
    while ( v9 - 1 > v11 && !v7 )
    {
      v12 = v3[v11];
      v13 = v11 + 1;
      if ( v12 == 13 )
      {
        v7 = 0;
        if ( v3[v13] == 10 )
        {
          v13 = v11 + 2;
          if ( v9 > v11 + 2 && v3[v13] == 13 )
          {
            v13 = v11 + 3;
            if ( v9 > v11 + 3 && v3[v13] == 10 )
              v7 = v11 + 4;
          }
        }
      }
      else if ( v12 == 10 )
      {
        v7 = 0;
        if ( v3[v13] == 10 )
          v7 = v11 + 2;
      }
      else
      {
        v13 = v11;
        v7 = 0;
      }
      v11 = v13 + 1;
    }
    header_buf_used += v8;
    if ( v7 )
    {
      v14 = 0;
      v15 = 0;
      v16 = 0LL;
      header_buf_useda = v7 - 1;
      for ( j = 0; header_buf_useda > j; j = v20 + 1 )
      {
        v18 = j;
        v19 = v3[j];
        if ( (int)v16 > 0 && (int)v16 >= v15 && v19 == 58 )
        {
          do
          {
            v20 = v18;
            v14 = v18 + 1;
            if ( header_buf_useda <= (int)v18 )
              break;
            v21 = v3[++v18];
          }
          while ( v21 == 32 || v21 == 9 );
        }
        else if ( v19 == 13 || v19 == 10 )
        {
          if ( !(_DWORD)v16 && status_code )
          {
            v22 = v3 + 1;
            for ( k = 0; ; ++k )
            {
              if ( j <= k )
                goto LABEL_59;
              if ( *(v22 - 1) == 32 )
              {
                sp_0 = k;
                i = j;
                if ( *status_code >= 0 )
                  goto LABEL_59;
                chunksize = v22;
                v24 = atoi(v22);
                k = sp_0;
                j = i;
                v22 = chunksize;
                *status_code = v24;
              }
              ++v22;
            }
          }
          if ( (int)v16 < v15 )
          {
            sp_0a = v14;
            if ( v15 < v14 )
            {
              v25 = v15 - (int)v16;
              ia = (int)v25;
              v26 = &v3[v16];
              if ( !strncasecmp(&v3[v16], "content-length", v25) )
              {
                content_length = atoi(&v3[sp_0a]);
              }
              else if ( !strncasecmp(v26, "transfer-encoding", ia) )
              {
                v27 = strncasecmp(&v3[sp_0a], "chunked", 7uLL) == 0;
                v28 = 1;
                if ( !v27 )
                  v28 = chunked;
                chunked = v28;
              }
            }
          }
LABEL_59:
          while ( 1 )
          {
            v20 = v18;
            if ( v9 <= (int)v18 )
              break;
            v29 = v3[v18++];
            if ( v29 != 13 && v29 != 10 )
            {
              v14 = 0;
              j = v20;
              v16 = v20;
              goto LABEL_65;
            }
          }
          v14 = 0;
          j = v18;
          v16 = (int)v18;
        }
        else
        {
          v20 = j;
          j = v15;
        }
LABEL_65:
        v15 = j;
      }
      header_buf_used = v9;
      v8 = v9 - v7;
      qmemcpy(buf, &v3[v7], v9 - v7);
LABEL_67:
      if ( chunked )
      {
        LODWORD(m) = 0;
        v31 = buf;
        while ( 1 )
        {
          while ( 1 )
          {
            if ( v8 <= (int)m )
              goto LABEL_118;
            v32 = v58;
            if ( !v58 )
              break;
LABEL_98:
            v41 = v8 - m;
            if ( v8 - (int)m > v32 )
              v41 = v32;
            v42 = v5 + v41;
            if ( v6 < (unsigned int)v5 + v41 )
            {
              v6 = v5 + v41;
              if ( content_length >= 0 && content_length >= v42 )
                v6 = content_length;
              sp_0b = v31;
              ib = v41;
              chunksizeb = v32;
              v59 = v5 + v41;
              v43 = (char *)realloc(content_buf, v6);
              v42 = v59;
              v32 = chunksizeb;
              v41 = ib;
              v31 = sp_0b;
              if ( !v43 )
                goto LABEL_115;
              content_buf = v43;
            }
            v44 = &v31[(int)m];
            v58 = v32 - v41;
            LODWORD(m) = v41 + m;
            v45 = &content_buf[v5];
            v5 = v42;
            qmemcpy(v45, v44, v41);
          }
          if ( !v54 )
          {
            if ( buf[(int)m] != 13 || (LODWORD(m) = m + 1, v8 > (int)m) )
            {
              if ( buf[(int)m] == 10 )
                LODWORD(m) = m + 1;
            }
          }
          for ( m = (int)m; v8 > (int)m; ++m )
          {
            chunksizea = v31;
            v33 = _ctype_b_loc();
            v31 = chunksizea;
            v34 = *v33;
            v35 = chunksizea[m];
            if ( (v34[v35] & 0x1000) == 0 || v54 > 0x1E )
              break;
            chunksize_buf[v54++] = v35;
            chunksize_buf[v54] = 0;
          }
          for ( n = (int)m; v8 > (int)n; ++n )
          {
            v37 = v31[n];
            if ( v37 == 13 || v37 == 10 )
              break;
          }
          LODWORD(m) = n;
          if ( v8 <= (int)n )
            goto LABEL_118;
          if ( buf[(int)n] == 13 )
          {
            LODWORD(m) = n + 1;
            if ( v8 <= (int)n + 1 )
              goto LABEL_118;
          }
          if ( buf[(int)m] == 10 )
          {
            v32 = 0;
            for ( ii = 0LL; (unsigned int)ii < v54; ++ii )
            {
              v39 = chunksize_buf[ii];
              v40 = 16 * v32;
              if ( (unsigned __int8)(chunksize_buf[ii] - 48) > 9u )
                v32 = v40 + (char)(v39 | 0x20) - 87;
              else
                v32 = v40 + v39 - 48;
            }
            chunksize_buf[0] = 0;
            LODWORD(m) = m + 1;
            if ( !v32 )
              goto end_of_stream;
            v54 = 0;
            goto LABEL_98;
          }
        }
      }
      if ( content_length > 0 && content_length < (unsigned int)(v8 + v5) )
        v8 = content_length - v5;
      v46 = v8 + v5;
      if ( v6 < v8 + (int)v5 )
      {
        v6 = v8 + v5;
        if ( content_length >= 0 && content_length >= v46 )
          v6 = content_length;
        v47 = (char *)realloc(content_buf, v6);
        if ( !v47 )
        {
LABEL_115:
          free(content_buf);
LABEL_5:
          v4 = v3;
LABEL_6:
          free(v4);
LABEL_7:
          *size = -1;
          return 0LL;
        }
        content_buf = v47;
      }
      v48 = &content_buf[v5];
      v5 = v46;
      qmemcpy(v48, buf, v8);
LABEL_118:
      if ( content_length > 0 && (unsigned int)v5 >= content_length )
        break;
    }
  }
end_of_stream:
  free(v3);
  *size = v5;
  if ( !(_DWORD)v5 )
  {
    free(content_buf);
    return 0LL;
  }
  return content_buf;
}
