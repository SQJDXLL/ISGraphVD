void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // x22
  unsigned int v4; // w19
  unsigned int v5; // w23
  unsigned int v6; // w24
  unsigned int v7; // w28
  int v8; // w27
  unsigned int v9; // w7
  char *v10; // x0
  int v11; // w7
  int v12; // w2
  int v13; // w0
  int v14; // w25
  int v15; // w3
  _BOOL4 v16; // w1
  int v18; // w1
  int v19; // w10
  int v20; // w2
  int v21; // w1
  int v22; // w4
  int v23; // w0
  __int64 v24; // x27
  bool v25; // cc
  int v26; // w26
  bool v27; // zf
  int v28; // w25
  unsigned int v29; // w6
  unsigned int v30; // w26
  char *v31; // x7
  char *v32; // x0
  char *v33; // x1
  unsigned int v34; // w6
  int v37; // w0
  unsigned int v38; // w2
  char *v39; // x0
  _BOOL4 v40; // w3
  char *v41; // x0
  size_t v44; // x2
  int v45; // w0
  int v46; // w0
  int v47; // w0
  int v48; // w0
  const unsigned __int16 *v50; // x7
  unsigned int v51; // w6
  __int64 j; // x2
  char *v54; // x2
  int v55; // w1
  int v57; // w0
  char *v58; // x6
  int v59; // t1
  int v60; // w19
  int v61; // w0
  unsigned int v62; // w0
  bool v64; // zf
  const char *v65; // x6
  __int64 v66; // x10
  int v67; // w0
  int v68; // w0
  __int64 v69; // x0
  int v70; // w2
  char *v72; // x0
  char *content_buf; // [xsp+68h] [xbp+68h]
  unsigned int content_bufa; // [xsp+68h] [xbp+68h]
  int header_buf_used_0; // [xsp+70h] [xbp+70h]
  unsigned int header_buf_used_0e; // [xsp+70h] [xbp+70h]
  char *header_buf_used_0f; // [xsp+70h] [xbp+70h]
  unsigned int header_buf_used_0a; // [xsp+70h] [xbp+70h]
  _BOOL4 header_buf_used_0b; // [xsp+70h] [xbp+70h]
  size_t header_buf_used_0c; // [xsp+70h] [xbp+70h]
  __int64 header_buf_used_0d; // [xsp+70h] [xbp+70h]
  unsigned int header_buf_used; // [xsp+78h] [xbp+78h]
  const char *header_buf_useda; // [xsp+78h] [xbp+78h]
  const char *header_buf_usedb; // [xsp+78h] [xbp+78h]
  int content_length; // [xsp+80h] [xbp+80h]
  int endofheaders; // [xsp+84h] [xbp+84h]
  int endofheadersa; // [xsp+84h] [xbp+84h]
  int endofheadersb; // [xsp+84h] [xbp+84h]
  int chunked; // [xsp+90h] [xbp+90h]
  int i; // [xsp+98h] [xbp+98h]
  int ia; // [xsp+98h] [xbp+98h]
  int v94; // [xsp+9Ch] [xbp+9Ch]
  int v95; // [xsp+9Ch] [xbp+9Ch]
  unsigned int header_buf_len; // [xsp+A0h] [xbp+A0h]
  int valuestart; // [xsp+A4h] [xbp+A4h]
  char chunksize_buf[32]; // [xsp+B8h] [xbp+B8h] BYREF
  char buf[2048]; // [xsp+D8h] [xbp+D8h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800uLL);
  if ( !v3 )
    goto LABEL_173;
  content_buf = (char *)malloc(0x800uLL);
  if ( !content_buf )
  {
    free(v3);
LABEL_173:
    content_buf = 0LL;
    *size = -1;
    return content_buf;
  }
  v4 = 0;
  v5 = 2048;
  v6 = 0;
  v7 = 0;
  header_buf_used = 0;
  content_length = -1;
  endofheaders = 0;
  chunked = 0;
  header_buf_len = 2048;
  chunksize_buf[0] = 0;
  while ( 1 )
  {
    v8 = receivedata((unsigned int)s, buf, 2048LL, 5000LL, 0LL);
    if ( v8 <= 0 )
      goto end_of_stream;
    if ( endofheaders )
      break;
    v9 = v8 + header_buf_used;
    if ( v8 + header_buf_used > header_buf_len )
    {
      v10 = (char *)realloc(v3, v9);
      v9 = v8 + header_buf_used;
      if ( !v10 )
      {
        free(v3);
        v72 = content_buf;
        goto LABEL_171;
      }
      v3 = v10;
      header_buf_len = v8 + header_buf_used;
    }
    header_buf_used_0 = v9;
    memcpy(&v3[header_buf_used], buf, v8);
    v11 = header_buf_used_0;
    v12 = header_buf_used_0 - 1;
    if ( header_buf_used_0 <= 1 )
    {
      header_buf_used = header_buf_used_0;
    }
    else
    {
      v13 = 0;
      do
      {
        while ( 1 )
        {
          v18 = (unsigned __int8)v3[v13];
          v15 = v13 + 1;
          if ( v18 != 13 )
            break;
          if ( v3[v15] == 10 )
          {
            if ( v13 + 2 < header_buf_used_0 && v3[v13 + 2] == 13 )
            {
              v15 = v13 + 3;
              if ( v13 + 3 < header_buf_used_0 && v3[v15] == 10 )
              {
                v13 += 4;
                v16 = v13 == 0;
                v14 = v13;
              }
              else
              {
                v13 += 4;
                v14 = 0;
                v15 = -1;
                v16 = 1;
              }
            }
            else
            {
              v13 += 3;
              v14 = 0;
              v15 = -1;
              v16 = 1;
            }
            goto LABEL_15;
          }
LABEL_21:
          v13 += 2;
          v14 = 0;
          v15 = -1;
          if ( v12 <= v13 )
            goto LABEL_22;
        }
        if ( v18 == 10 )
        {
          if ( v3[v15] != 10 )
            goto LABEL_21;
          v13 += 2;
          v16 = v13 == 0;
          v14 = v13;
        }
        else
        {
          ++v13;
          v14 = 0;
          v15 = -1;
          v16 = 1;
        }
LABEL_15:
        ;
      }
      while ( v16 && v12 > v13 );
LABEL_22:
      if ( v14 )
      {
        if ( v15 > 0 )
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v22 = 0;
          do
          {
            v23 = (unsigned __int8)v3[v22];
            v24 = v22;
            v25 = v21 > 0 && v20 <= v21;
            v26 = v22 + 1;
            if ( v25 )
            {
              if ( v23 == 58 )
              {
                v69 = v26;
                while ( 1 )
                {
                  v19 = v69;
                  if ( v15 <= (int)v69 - 1 )
                    break;
                  v70 = (unsigned __int8)v3[v69++];
                  if ( v70 != 32 && v70 != 9 )
                  {
                    v20 = v22;
                    v22 = v19;
                    goto LABEL_36;
                  }
                }
                v20 = v22;
                v22 = v69;
                continue;
              }
              v27 = v23 == 10 || v23 == 13;
              if ( v27 )
                goto LABEL_90;
            }
            else if ( v23 == 13 || v23 == 10 )
            {
              if ( v21 )
                v64 = 1;
              else
                v64 = status_code == 0LL;
              if ( !v64 )
              {
                if ( v22 > 0 )
                {
                  v65 = v3 + 1;
                  v66 = (__int64)&v3[v22 + 1];
                  while ( 1 )
                  {
                    if ( *(v65 - 1) == 32 )
                    {
                      header_buf_used_0d = v66;
                      if ( (*status_code & 0x80000000) == 0 )
                        goto LABEL_90;
                      header_buf_usedb = v65;
                      endofheadersb = v11;
                      ia = v22;
                      v95 = v15;
                      v67 = strtol(v65, 0uLL, 10);
                      v66 = header_buf_used_0d;
                      v65 = header_buf_usedb;
                      v11 = endofheadersb;
                      v22 = ia;
                      v15 = v95;
                      *status_code = v67;
                    }
                    if ( (const char *)v66 == ++v65 )
                      goto LABEL_90;
                  }
                }
                do
                {
LABEL_93:
                  v48 = (unsigned __int8)v3[v24];
                  v21 = v24;
                  v22 = v24 + 1;
                  if ( v48 != 13 && v48 != 10 )
                  {
                    v20 = v24;
                    v19 = 0;
                    goto LABEL_36;
                  }
                  ++v24;
                }
                while ( v11 > (int)v24 );
                v68 = v21 + 2;
                v20 = v22;
                v21 = v22;
                v19 = 0;
                v22 = v68;
                continue;
              }
              valuestart = v19;
              if ( v20 > v21 && v20 < v19 )
              {
                v44 = v20 - v21;
                header_buf_used_0c = (int)v44;
                header_buf_useda = &v3[v21];
                endofheadersa = v11;
                i = v22;
                v94 = v15;
                if ( strncasecmp(header_buf_useda, "content-length", v44) )
                {
                  v45 = strncasecmp(header_buf_useda, "transfer-encoding", header_buf_used_0c);
                  v11 = endofheadersa;
                  v22 = i;
                  v15 = v94;
                  if ( !v45 )
                  {
                    v46 = strncasecmp(&v3[valuestart], "chunked", 7uLL);
                    v11 = endofheadersa;
                    v27 = v46 == 0;
                    v22 = i;
                    v47 = chunked;
                    v15 = v94;
                    if ( v27 )
                      v47 = 1;
                    chunked = v47;
                  }
                  goto LABEL_90;
                }
                content_length = strtol(&v3[valuestart], 0uLL, 10);
                v11 = endofheadersa;
                v22 = i;
                v15 = v94;
                if ( endofheadersa > i )
                  goto LABEL_93;
              }
              else
              {
LABEL_90:
                if ( v11 > v22 )
                  goto LABEL_93;
              }
              v20 = v22;
              v21 = v22;
              v19 = 0;
              v22 = v26;
              continue;
            }
            ++v22;
LABEL_36:
            ;
          }
          while ( v15 > v22 );
        }
        v8 = v11 - v14;
        header_buf_used = v11;
        endofheaders = v14;
        memcpy(buf, &v3[v14], v11 - v14);
        if ( chunked )
        {
          if ( v8 > 0 )
            goto LABEL_39;
LABEL_54:
          if ( content_length > 0 && v6 >= content_length )
            goto end_of_stream;
        }
        else
        {
LABEL_63:
          v37 = content_length;
          v38 = v8 + v6;
          if ( content_length <= 0 )
          {
            if ( v5 < v38 )
            {
              v5 = v8 + v6;
              if ( !content_length )
              {
                v37 = v8 + v6;
LABEL_66:
                v5 = v37;
              }
              header_buf_used_0a = v38;
              v39 = (char *)realloc(content_buf, v5);
              if ( !v39 )
                goto LABEL_170;
              v38 = header_buf_used_0a;
              content_buf = v39;
              v40 = header_buf_used_0a >= content_length;
              goto LABEL_69;
            }
            v40 = content_length <= v38;
          }
          else if ( content_length < v38 )
          {
            v38 = content_length;
            v40 = 1;
            v8 = content_length - v6;
            if ( content_length > v5 )
              goto LABEL_66;
          }
          else
          {
            if ( v5 < v38 )
              goto LABEL_66;
            v40 = content_length == v38;
          }
LABEL_69:
          header_buf_used_0b = v40;
          chunked = 0;
          v41 = &content_buf[v6];
          v6 = v38;
          memcpy(v41, buf, v8);
          if ( content_length > 0 && header_buf_used_0b )
          {
            free(v3);
            *size = v6;
            if ( v6 )
              return content_buf;
            goto LABEL_74;
          }
        }
      }
      else
      {
        header_buf_used = header_buf_used_0;
        endofheaders = 0;
      }
    }
  }
  if ( !chunked )
    goto LABEL_63;
LABEL_39:
  v28 = 0;
  if ( !v4 )
    goto LABEL_50;
  while ( 2 )
  {
    while ( 2 )
    {
      v29 = v8 - v28;
      if ( v8 - v28 > v4 )
        v29 = v4;
      v30 = v29 + v6;
      if ( v29 + v6 <= v5 )
      {
        v31 = content_buf;
      }
      else
      {
        v5 = v29 + v6;
        if ( (content_length & 0x80000000) == 0 )
        {
          if ( content_length < v30 )
            v5 = v29 + v6;
          else
            v5 = content_length;
        }
        header_buf_used_0e = v29;
        v31 = (char *)realloc(content_buf, v5);
        v29 = header_buf_used_0e;
        if ( !v31 )
        {
LABEL_170:
          free(content_buf);
          v72 = v3;
LABEL_171:
          free(v72);
          content_buf = 0LL;
          *size = -1;
          return content_buf;
        }
      }
      v32 = &v31[v6];
      v33 = &buf[v28];
      v28 += v29;
      content_bufa = v29;
      v6 = v30;
      header_buf_used_0f = v31;
      memcpy(v32, v33, v29);
      v34 = content_bufa;
      content_buf = header_buf_used_0f;
      v4 -= v34;
      if ( v28 >= v8 )
        goto LABEL_54;
      if ( v4 )
        continue;
      break;
    }
LABEL_50:
    while ( 2 )
    {
      if ( v7 )
      {
LABEL_101:
        if ( v28 >= v8 )
          goto LABEL_54;
      }
      else
      {
        if ( buf[v28] == 13 )
          ++v28;
        if ( v28 >= v8 )
          goto LABEL_54;
        if ( buf[v28] == 10 )
        {
          ++v28;
          goto LABEL_101;
        }
      }
      v50 = *_ctype_b_loc();
      v51 = v8 + v7 - v28;
      for ( j = v28 + 1; ; ++j )
      {
        if ( (v50[(unsigned __int8)buf[j - 1]] & 0x1000) == 0 || v7 > 0x1E )
        {
          v28 = j - 1;
          goto LABEL_111;
        }
        chunksize_buf[v7] = buf[j - 1];
        chunksize_buf[v7 + 1] = 0;
        if ( v7 + 1 == v51 )
          break;
        ++v7;
      }
      v28 = j;
      v7 = v51;
LABEL_111:
      if ( v28 >= v8 )
        goto LABEL_54;
      v54 = &buf[v28];
      while ( 1 )
      {
        v55 = (unsigned __int8)*v54;
        if ( v55 == 13 || v55 == 10 )
          break;
        ++v28;
        ++v54;
        if ( v28 == v8 )
          goto LABEL_54;
      }
      if ( v28 >= v8 )
        goto LABEL_54;
      v57 = (unsigned __int8)buf[v28];
      if ( v57 == 13 )
      {
        if ( ++v28 >= v8 )
          goto LABEL_54;
        v57 = (unsigned __int8)buf[v28];
      }
      if ( v57 != 10 )
        continue;
      break;
    }
    if ( v7 )
    {
      v58 = chunksize_buf;
      v4 = 0;
      do
      {
        v59 = (unsigned __int8)*v58++;
        v60 = 16 * v4;
        v61 = v60 - 0x57;
        v4 = v60 - 0x30 + v59;
        v62 = v61 + (v59 | 0x20);
        if ( (unsigned __int8)(v59 - 0x30) > 9u )
          v4 = v62;
      }
      while ( v58 != &chunksize_buf[v7] );
      chunksize_buf[0] = 0;
      ++v28;
      if ( v4 )
      {
        v7 = 0;
        continue;
      }
    }
    break;
  }
end_of_stream:
  free(v3);
  *size = v6;
  if ( !v6 )
  {
LABEL_74:
    free(content_buf);
    return 0LL;
  }
  return content_buf;
}
