void *__cdecl getHTTPResponse(int s, int *size, int *status_code)
{
  unsigned int v4; // r2
  int v5; // r3
  char *v6; // r0
  char *v7; // r0
  int n; // [sp+18h] [bp-884h]
  int endofheaders; // [sp+1Ch] [bp-880h]
  int chunked; // [sp+20h] [bp-87Ch]
  signed int content_length; // [sp+24h] [bp-878h]
  unsigned int chunksize; // [sp+28h] [bp-874h]
  char *header_buf; // [sp+2Ch] [bp-870h]
  unsigned int header_buf_len; // [sp+30h] [bp-86Ch]
  signed int header_buf_used; // [sp+34h] [bp-868h]
  char *content_buf; // [sp+38h] [bp-864h]
  unsigned int content_buf_len; // [sp+3Ch] [bp-860h]
  unsigned int content_buf_used; // [sp+40h] [bp-85Ch]
  unsigned int chunksize_buf_index; // [sp+44h] [bp-858h]
  int i; // [sp+48h] [bp-854h]
  int ia; // [sp+48h] [bp-854h]
  int linestart; // [sp+4Ch] [bp-850h]
  int colon; // [sp+50h] [bp-84Ch]
  int valuestart; // [sp+54h] [bp-848h]
  int sp; // [sp+58h] [bp-844h]
  int i_0; // [sp+5Ch] [bp-840h]
  unsigned int j; // [sp+60h] [bp-83Ch]
  unsigned int bytestocopy; // [sp+64h] [bp-838h]
  char *tmp; // [sp+68h] [bp-834h]
  char chunksize_buf[32]; // [sp+74h] [bp-828h]
  char buf[2048]; // [sp+94h] [bp-808h] BYREF

  endofheaders = 0;
  chunked = 0;
  content_length = -1;
  chunksize = 0;
  header_buf_len = 2048;
  header_buf_used = 0;
  content_buf_len = 2048;
  content_buf_used = 0;
  if ( status_code )
    *status_code = -1;
  header_buf = (char *)malloc(0x800u);
  if ( !header_buf )
  {
    *size = -1;
    return 0;
  }
  content_buf = (char *)malloc(0x800u);
  if ( !content_buf )
  {
    free(header_buf);
    *size = -1;
    return 0;
  }
  chunksize_buf[0] = 0;
  chunksize_buf_index = 0;
  while ( 1 )
  {
    n = receivedata(s, buf, 2048, 5000, 0);
    if ( n <= 0 )
      break;
    if ( endofheaders )
      goto LABEL_65;
    linestart = 0;
    colon = 0;
    valuestart = 0;
    if ( header_buf_len < n + header_buf_used )
    {
      tmp = (char *)realloc(header_buf, n + header_buf_used);
      if ( !tmp )
      {
        free(header_buf);
        free(content_buf);
        *size = -1;
        return 0;
      }
      header_buf = tmp;
      header_buf_len = header_buf_used + n;
    }
    memcpy(&header_buf[header_buf_used], buf, n);
    header_buf_used += n;
    for ( i = 0; i < header_buf_used - 1 && !endofheaders; ++i )
    {
      if ( header_buf[i] == 13 )
      {
        if ( header_buf[++i] == 10
          && ++i < header_buf_used
          && header_buf[i] == 13
          && ++i < header_buf_used
          && header_buf[i] == 10 )
        {
          endofheaders = i + 1;
        }
      }
      else if ( header_buf[i] == 10 && header_buf[++i] == 10 )
      {
        endofheaders = i + 1;
      }
    }
    if ( endofheaders )
    {
      for ( ia = 0; ia < endofheaders - 1; ++ia )
      {
        if ( linestart > 0 && colon <= linestart && header_buf[ia] == 58 )
        {
          colon = ia;
          while ( ia < endofheaders - 1 && (header_buf[ia + 1] == 32 || header_buf[ia + 1] == 9) )
            ++ia;
          valuestart = ia + 1;
        }
        else if ( header_buf[ia] == 13 || header_buf[ia] == 10 )
        {
          if ( linestart || !status_code )
          {
            if ( colon > linestart && valuestart > colon )
            {
              if ( !strncasecmp(&header_buf[linestart], "content-length", colon - linestart) )
              {
                content_length = atoi(&header_buf[valuestart]);
              }
              else if ( !strncasecmp(&header_buf[linestart], "transfer-encoding", colon - linestart)
                     && !strncasecmp(&header_buf[valuestart], "chunked", 7u) )
              {
                chunked = 1;
              }
            }
          }
          else
          {
            for ( sp = 0; sp < ia; ++sp )
            {
              if ( header_buf[sp] == 32 )
              {
                if ( *status_code >= 0 )
                  break;
                *status_code = atoi(&header_buf[sp + 1]);
              }
            }
          }
          while ( ia < header_buf_used && (header_buf[ia] == 13 || header_buf[ia] == 10) )
            ++ia;
          linestart = ia;
          colon = ia;
          valuestart = 0;
        }
      }
      n = header_buf_used - endofheaders;
      memcpy(buf, &header_buf[endofheaders], header_buf_used - endofheaders);
LABEL_65:
      if ( chunked )
      {
        i_0 = 0;
        while ( 1 )
        {
          while ( 1 )
          {
            if ( i_0 >= n )
              goto LABEL_121;
            if ( !chunksize )
              break;
LABEL_97:
            v5 = chunksize;
            if ( chunksize >= n - i_0 )
              v5 = n - i_0;
            bytestocopy = v5;
            if ( content_buf_len < content_buf_used + v5 )
            {
              if ( content_length < 0 || content_buf_used + v5 > content_length )
              {
                content_buf_len = content_buf_used + v5;
                v6 = (char *)realloc(content_buf, content_buf_used + v5);
              }
              else
              {
                content_buf_len = content_length;
                v6 = (char *)realloc(content_buf, content_length);
              }
              if ( !v6 )
                goto LABEL_105;
              content_buf = v6;
            }
            memcpy(&content_buf[content_buf_used], &buf[i_0], bytestocopy);
            content_buf_used += bytestocopy;
            i_0 += bytestocopy;
            chunksize -= bytestocopy;
          }
          if ( !chunksize_buf_index )
          {
            if ( i_0 < n && buf[i_0] == 13 )
              ++i_0;
            if ( i_0 < n && buf[i_0] == 10 )
              ++i_0;
          }
          while ( i_0 < n && ((*_ctype_b_loc())[(unsigned __int8)buf[i_0]] & 0x1000) != 0 && chunksize_buf_index <= 0x1E )
          {
            v4 = chunksize_buf_index++;
            chunksize_buf[v4] = buf[i_0];
            chunksize_buf[chunksize_buf_index] = 0;
            ++i_0;
          }
          while ( i_0 < n && buf[i_0] != 13 && buf[i_0] != 10 )
            ++i_0;
          if ( i_0 < n && buf[i_0] == 13 )
            ++i_0;
          if ( i_0 < n && buf[i_0] == 10 )
          {
            for ( j = 0; j < chunksize_buf_index; ++j )
            {
              if ( (unsigned __int8)chunksize_buf[j] <= 0x2Fu || (unsigned __int8)chunksize_buf[j] > 0x39u )
                chunksize = 16 * chunksize + ((unsigned __int8)chunksize_buf[j] | 0x20) - 0x57;
              else
                chunksize = 16 * chunksize + (unsigned __int8)chunksize_buf[j] - 0x30;
            }
            chunksize_buf[0] = 0;
            chunksize_buf_index = 0;
            ++i_0;
            if ( !chunksize )
              goto end_of_stream;
            goto LABEL_97;
          }
        }
      }
      if ( content_length > 0 && n + content_buf_used > content_length )
        n = content_length - content_buf_used;
      if ( content_buf_len < n + content_buf_used )
      {
        if ( content_length < 0 || n + content_buf_used > content_length )
        {
          content_buf_len = content_buf_used + n;
          v7 = (char *)realloc(content_buf, content_buf_used + n);
        }
        else
        {
          content_buf_len = content_length;
          v7 = (char *)realloc(content_buf, content_length);
        }
        if ( !v7 )
        {
LABEL_105:
          free(content_buf);
          free(header_buf);
          *size = -1;
          return 0;
        }
        content_buf = v7;
      }
      memcpy(&content_buf[content_buf_used], buf, n);
      content_buf_used += n;
LABEL_121:
      if ( content_length > 0 && content_buf_used >= content_length )
        break;
    }
  }
end_of_stream:
  free(header_buf);
  *size = content_buf_used;
  if ( !content_buf_used )
  {
    free(content_buf);
    return 0;
  }
  return content_buf;
}
