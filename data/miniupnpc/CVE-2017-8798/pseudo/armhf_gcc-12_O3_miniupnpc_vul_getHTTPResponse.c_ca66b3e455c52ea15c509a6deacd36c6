void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  int *v4; // r5
  size_t v5; // r10
  int v6; // r8
  signed int v7; // r6
  int v8; // r0
  signed int v9; // r7
  signed int v10; // r11
  void *v11; // r0
  _BYTE *v12; // r4
  int v13; // r2
  int v14; // r9
  int v15; // r12
  bool v16; // r3
  int v18; // r3
  signed int v19; // r4
  unsigned int v20; // r11
  unsigned int v21; // r9
  _BOOL4 v22; // r3
  int *v23; // r11
  const char *v24; // r9
  int *v25; // r10
  int v26; // r2
  int v27; // r1
  int v28; // r4
  int v29; // r6
  int v30; // r5
  bool v31; // zf
  bool v32; // cc
  int v33; // r0
  const char *v34; // r8
  int v35; // r7
  bool v36; // zf
  _BOOL4 v37; // r0
  const char *v38; // r6
  int v39; // t1
  const char *v40; // r2
  int v41; // r6
  int v42; // t1
  bool v43; // zf
  char *v44; // r11
  signed int v45; // r4
  char *v46; // r0
  char *v47; // r3
  char *v48; // r2
  char *v49; // r0
  const void *v50; // r1
  size_t v51; // r9
  char *v52; // r0
  char *v53; // r3
  int *v54; // lr
  const unsigned __int16 *v55; // r6
  int v56; // r0
  _BYTE *v57; // r1
  char v58; // r2
  int v59; // t1
  int v60; // r2
  int v61; // r3
  int v62; // t1
  bool v63; // zf
  int v64; // r3
  unsigned __int8 *v65; // r3
  unsigned __int8 *v66; // r5
  int v67; // r2
  int v68; // t1
  int v69; // r6
  int v70; // r6
  bool v72; // cc
  const char *v73; // r8
  int v74; // r0
  int v75; // r3
  int v76; // r2
  int v77; // r3
  int v78; // t1
  int v79; // r6
  bool v80; // zf
  char *v81; // r0
  int *v82; // r11
  int *v83; // r11
  int v84; // [sp+0h] [bp-898h] BYREF
  int content_length; // [sp+8h] [bp-890h]
  char *header_buf; // [sp+Ch] [bp-88Ch]
  unsigned int header_buf_used; // [sp+10h] [bp-888h]
  void *ptr; // [sp+14h] [bp-884h]
  unsigned int content_buf_used; // [sp+18h] [bp-880h]
  int chunked; // [sp+1Ch] [bp-87Ch]
  int sa; // [sp+20h] [bp-878h]
  unsigned int header_buf_len; // [sp+24h] [bp-874h]
  unsigned int content_buf_len; // [sp+28h] [bp-870h]
  unsigned int v94; // [sp+2Ch] [bp-86Ch]
  unsigned int chunksize_buf_index; // [sp+30h] [bp-868h]
  int v96; // [sp+34h] [bp-864h]
  int *status_codea; // [sp+38h] [bp-860h]
  int *sizea; // [sp+3Ch] [bp-85Ch]
  int *v99; // [sp+40h] [bp-858h]
  int *v100; // [sp+44h] [bp-854h]
  char chunksize_buf[32]; // [sp+4Ch] [bp-84Ch] BYREF
  char buf[2048]; // [sp+6Ch] [bp-82Ch] BYREF

  content_buf_len = s;
  v99 = status_code;
  if ( status_code )
    *status_code = -1;
  ptr = malloc(0x800u);
  if ( !ptr )
    goto LABEL_169;
  header_buf = (char *)malloc(0x800u);
  if ( !header_buf )
  {
    free(ptr);
LABEL_169:
    *size = -1;
    return 0;
  }
  v4 = 0;
  header_buf_used = -1;
  v5 = 2048;
  content_length = (int)buf;
  v6 = 0;
  v7 = 0;
  chunksize_buf[0] = 0;
  content_buf_used = 0;
  v94 = 2048;
  header_buf_len = 0;
  sa = 0;
  chunked = (int)chunksize_buf;
  v100 = size;
  while ( 1 )
  {
    v8 = receivedata(content_buf_len, content_length, 2048, 5000, 0);
    v9 = v8;
    if ( v8 <= 0 )
    {
      v23 = v100;
      v19 = v6;
end_of_stream:
      free(ptr);
      *v23 = v19;
      if ( !v6 )
      {
        free(header_buf);
        return 0;
      }
      return header_buf;
    }
    if ( sa )
      break;
    v10 = v8 + content_buf_used;
    if ( v8 + content_buf_used > v94 )
    {
      v11 = realloc(ptr, v8 + content_buf_used);
      if ( !v11 )
      {
        v83 = v100;
        free(ptr);
        free(header_buf);
        *v83 = -1;
        return 0;
      }
      ptr = v11;
      v94 = v10;
    }
    v12 = ptr;
    memcpy((char *)ptr + content_buf_used, (const void *)content_length, v9);
    if ( v10 <= 1 )
    {
      content_buf_used = v10;
    }
    else
    {
      v13 = 0;
      do
      {
        v18 = (unsigned __int8)v12[v13];
        v15 = v13 + 1;
        if ( v18 == 13 )
        {
          if ( v12[v15] != 10 )
            goto LABEL_21;
          if ( v13 + 2 < v10 && v12[v13 + 2] == 13 )
          {
            v15 = v13 + 3;
            if ( v13 + 3 < v10 && v12[v15] == 10 )
            {
              v13 += 4;
              v16 = v13 == 0;
              v14 = v13;
            }
            else
            {
              v13 += 4;
              v14 = 0;
              v15 = -1;
              v16 = 1;
            }
          }
          else
          {
            v13 += 3;
            v14 = 0;
            v15 = -1;
            v16 = 1;
          }
        }
        else
        {
          if ( v18 != 10 )
          {
            ++v13;
            v14 = 0;
            v15 = -1;
            v16 = 1;
            goto LABEL_15;
          }
          if ( v12[v15] != 10 )
          {
LABEL_21:
            v13 += 2;
            v14 = 0;
            v15 = -1;
            v16 = 1;
            goto LABEL_15;
          }
          v13 += 2;
          v16 = v13 == 0;
          v14 = v13;
        }
LABEL_15:
        ;
      }
      while ( v10 - 1 > v13 && v16 );
      if ( v14 )
      {
        if ( v15 <= 0 )
          goto LABEL_75;
        content_buf_used = v7;
        chunksize_buf_index = v5;
        v96 = v14;
        status_codea = v4;
        v24 = (const char *)ptr;
        v25 = v99;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v30 = v15;
        sa = v6;
        while ( 1 )
        {
LABEL_46:
          v32 = v27 <= v26;
          if ( v27 >= v26 )
            v32 = v27 <= 0;
          v33 = (unsigned __int8)v24[v28];
          v34 = &v24[v28];
          v35 = v28 + 1;
          if ( v32 )
            break;
          if ( v33 == 58 )
          {
            if ( v28 >= v30 )
            {
              v29 = v28 + 1;
              v26 = v28++;
            }
            else
            {
              v76 = v28;
              do
              {
                v78 = *(unsigned __int8 *)++v34;
                v77 = v78;
                v79 = v76;
                v80 = v78 == 9;
                if ( v78 != 9 )
                  v80 = v77 == 32;
                ++v76;
                if ( !v80 )
                {
                  v29 = v79 + 1;
                  v26 = v28;
                  v28 = v29;
                  goto LABEL_45;
                }
              }
              while ( v30 != v76 );
              v29 = v30 + 1;
              v26 = v28;
              v28 = v30 + 1;
            }
            goto LABEL_45;
          }
          v31 = v33 == 13;
          if ( v33 != 13 )
            v31 = v33 == 10;
          if ( v31 )
            goto LABEL_63;
LABEL_44:
          ++v28;
LABEL_45:
          if ( v30 <= v28 )
            goto LABEL_74;
        }
        v36 = v33 == 10;
        if ( v33 != 10 )
          v36 = v33 == 13;
        if ( !v36 )
          goto LABEL_44;
        v37 = v27 == 0;
        if ( !v25 )
          v37 = 0;
        if ( v37 )
        {
          if ( v28 <= 0 )
            goto LABEL_64;
          v38 = v24;
          do
          {
            while ( 1 )
            {
              v39 = *(unsigned __int8 *)v38++;
              if ( v39 == 32 )
                break;
              if ( v34 == v38 )
                goto LABEL_63;
            }
            if ( *v25 >= 0 )
              break;
            *v25 = strtol(v38, 0u, 10);
          }
          while ( v34 != v38 );
          goto LABEL_63;
        }
        v72 = v27 < v26;
        if ( v27 < v26 )
          v72 = v26 < v29;
        if ( !v72 )
          goto LABEL_63;
        v73 = &v24[v27];
        sizea = (int *)(v26 - v27);
        if ( !strncasecmp(&v24[v27], "content-length", v26 - v27) )
        {
          header_buf_used = strtol(&v24[v29], 0u, 10);
          goto LABEL_63;
        }
        if ( strncasecmp(v73, "transfer-encoding", (size_t)sizea) )
        {
LABEL_63:
          if ( v10 > v28 )
            goto LABEL_64;
          goto LABEL_144;
        }
        v74 = strncasecmp(&v24[v29], "chunked", 7u);
        v75 = header_buf_len;
        if ( !v74 )
          v75 = 1;
        header_buf_len = v75;
        if ( v10 <= v28 )
        {
LABEL_144:
          v26 = v28;
          v27 = v28;
          v29 = 0;
          ++v28;
          goto LABEL_45;
        }
LABEL_64:
        v40 = &v24[v28 - 1];
        while ( 1 )
        {
          v42 = *(unsigned __int8 *)++v40;
          v41 = v42;
          v27 = v28;
          v43 = v42 == 10;
          if ( v42 != 10 )
            v43 = v41 == 13;
          v29 = v43;
          v28 = v35;
          if ( !v43 )
            break;
          if ( v10 == v35 )
          {
            v28 = v27 + 2;
            v29 = 0;
            v26 = v10;
            v27 = v10;
            goto LABEL_45;
          }
          ++v35;
        }
        v26 = v27;
        if ( v30 > v35 )
          goto LABEL_46;
LABEL_74:
        v7 = content_buf_used;
        v6 = sa;
        v5 = chunksize_buf_index;
        v14 = v96;
        v4 = status_codea;
LABEL_75:
        v9 = v10 - v14;
        memcpy((void *)content_length, (char *)ptr + v14, v10 - v14);
        content_buf_used = v10;
        sa = v14;
        if ( !header_buf_len )
          goto LABEL_25;
        if ( v9 > 0 )
          goto LABEL_77;
LABEL_98:
        v19 = v6;
LABEL_29:
        v22 = (int)header_buf_used > 0;
        if ( (int)header_buf_used > v19 )
          v22 = 0;
        if ( v22 )
        {
          v23 = v100;
          goto end_of_stream;
        }
      }
      else
      {
        content_buf_used = v10;
        sa = 0;
      }
    }
  }
  if ( !header_buf_len )
  {
LABEL_25:
    v19 = v6 + v9;
    v20 = v6 + v9;
    if ( (int)header_buf_used <= 0 )
    {
      if ( v5 < v19 )
      {
        if ( (int)header_buf_used < v19 )
        {
          v21 = v6 + v9;
          goto LABEL_92;
        }
LABEL_134:
        v21 = v6 + v9;
        v20 = header_buf_used;
        goto LABEL_92;
      }
    }
    else
    {
      if ( (int)header_buf_used < v19 )
      {
        v19 = header_buf_used;
        v21 = header_buf_used;
        v9 = header_buf_used - v6;
        if ( header_buf_used <= v5 )
        {
LABEL_28:
          memcpy(&header_buf[v6], (const void *)content_length, v9);
          v6 = v21;
          header_buf_len = 0;
          goto LABEL_29;
        }
        v21 = header_buf_used;
        v20 = header_buf_used;
LABEL_92:
        v52 = (char *)realloc(header_buf, v20);
        if ( !v52 )
        {
          v82 = v100;
          v81 = header_buf;
          goto LABEL_166;
        }
        v5 = v20;
        v19 = v21;
        header_buf = v52;
        goto LABEL_28;
      }
      if ( v5 < v19 )
        goto LABEL_134;
    }
    v21 = v6 + v9;
    goto LABEL_28;
  }
LABEL_77:
  v44 = header_buf;
  v45 = 0;
  while ( 2 )
  {
    if ( v7 )
      goto LABEL_84;
    header_buf = 0;
    while ( 2 )
    {
      if ( v4 )
      {
LABEL_95:
        if ( v45 >= v9 )
          goto LABEL_96;
        goto LABEL_104;
      }
      v53 = (char *)&v84 + v45 + 0x870;
      if ( *(v53 - 2052) == 13 )
      {
        if ( ++v45 >= v9 )
        {
LABEL_129:
          v7 = 0;
          header_buf = v44;
          goto LABEL_98;
        }
        v53 = (char *)&v84 + v45 + 0x870;
      }
      else if ( v45 >= v9 )
      {
        goto LABEL_129;
      }
      if ( *(v53 - 2052) == 10 )
      {
        ++v45;
        goto LABEL_95;
      }
LABEL_104:
      v54 = (int *)((char *)v4 + v9 - v45);
      v55 = *_ctype_b_loc();
      v56 = content_length + v45 - 1;
      v57 = (char *)v4 + chunked;
      do
      {
        v59 = *(unsigned __int8 *)++v56;
        v58 = v59;
        if ( (((unsigned int)v4 <= 0x1E) & (v55[v59] >> 0xC)) == 0 )
          break;
        v4 = (int *)((char *)v4 + 1);
        *v57 = v58;
        ++v45;
        *++v57 = 0;
      }
      while ( v4 != v54 );
      if ( v45 >= v9 )
        goto LABEL_96;
      v60 = content_length + v45 - 1;
      while ( 1 )
      {
        v62 = *(unsigned __int8 *)++v60;
        v61 = v62;
        v63 = v62 == 10;
        if ( v62 != 10 )
          v63 = v61 == 13;
        if ( v63 )
          break;
        if ( ++v45 == v9 )
          goto LABEL_96;
      }
      if ( v45 >= v9 )
      {
LABEL_96:
        v7 = (signed int)header_buf;
        goto LABEL_97;
      }
      v64 = *((unsigned __int8 *)&v84 + v45 + 0x6C);
      if ( v64 == 13 )
      {
        if ( ++v45 >= v9 )
          goto LABEL_96;
        v64 = *((unsigned __int8 *)&v84 + v45 + 0x6C);
      }
      if ( v64 != 10 )
        continue;
      break;
    }
    if ( !v4 )
      goto LABEL_124;
    v65 = (unsigned __int8 *)chunked;
    v7 = 0;
    v66 = (unsigned __int8 *)v4 + chunked;
    do
    {
      v68 = *v65++;
      v67 = v68;
      v69 = 16 * v7;
      if ( (unsigned int)(v68 - 0x30) > 9 )
      {
        v70 = v69 - 0x57;
        v67 |= 0x20u;
      }
      else
      {
        v70 = v69 - 0x30;
      }
      v7 = v70 + v67;
    }
    while ( v65 != v66 );
    v4 = 0;
    ++v45;
    chunksize_buf[0] = 0;
    if ( !v7 )
    {
LABEL_124:
      header_buf = v44;
      v23 = v100;
      v19 = v6;
      goto end_of_stream;
    }
LABEL_84:
    v51 = v9 - v45;
    if ( v9 - v45 >= v7 )
      v51 = v7;
    v47 = (char *)(v51 + v6);
    if ( v51 + v6 <= v5 )
    {
      v48 = v44;
      goto LABEL_82;
    }
    if ( (int)header_buf_used >= (int)v47 )
      v5 = header_buf_used;
    else
      v5 = v51 + v6;
    header_buf = (char *)(v51 + v6);
    v46 = (char *)realloc(v44, v5);
    v47 = header_buf;
    v48 = v46;
    if ( v46 )
    {
LABEL_82:
      v49 = &v48[v6];
      v6 = (int)v47;
      v44 = v48;
      v50 = (const void *)(content_length + v45);
      v45 += v51;
      memcpy(v49, v50, v51);
      v7 -= v51;
      if ( v45 >= v9 )
      {
LABEL_97:
        header_buf = v44;
        goto LABEL_98;
      }
      continue;
    }
    break;
  }
  v81 = v44;
  v82 = v100;
LABEL_166:
  free(v81);
  free(ptr);
  *v82 = -1;
  return 0;
}
