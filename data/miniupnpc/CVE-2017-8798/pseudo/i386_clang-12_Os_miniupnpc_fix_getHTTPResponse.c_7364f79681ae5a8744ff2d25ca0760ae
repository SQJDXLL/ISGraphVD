char *__cdecl getHTTPResponse(int s, int *size, int *status_code)
{
  int *v3; // esi
  char *v4; // eax
  char *v5; // ebx
  char *v6; // eax
  int v7; // edx
  size_t v8; // eax
  int v9; // edi
  int v10; // eax
  signed int v11; // ecx
  int v12; // ebp
  char *v13; // esi
  int v14; // edi
  signed int v15; // ebx
  char *v16; // eax
  int v17; // esi
  int v18; // eax
  int v19; // ecx
  char v20; // dl
  int v21; // edx
  bool v22; // zf
  int v23; // esi
  int v24; // ecx
  int v25; // ebp
  int *v26; // edx
  char v27; // al
  char *v28; // eax
  char v29; // cl
  int v30; // ecx
  const char *v31; // esi
  int v32; // eax
  size_t v33; // esi
  int v34; // eax
  int v35; // ecx
  signed int v36; // ebp
  char v37; // al
  signed int v38; // ebp
  char *v39; // esi
  const unsigned __int16 *v40; // eax
  unsigned int v41; // edx
  int v42; // edx
  char v43; // al
  int v44; // eax
  size_t v45; // esi
  int v46; // ecx
  int v47; // esi
  int v48; // esi
  size_t v49; // ecx
  size_t v50; // ecx
  unsigned int v51; // ecx
  size_t v52; // eax
  char *v53; // eax
  signed int v54; // ebp
  unsigned int v55; // ecx
  size_t v56; // eax
  char *v57; // eax
  unsigned int v58; // edx
  char *v59; // esi
  unsigned int v60; // ebp
  size_t v62; // [esp-8h] [ebp-884h]
  char *v63; // [esp+Ch] [ebp-870h]
  char *ptr; // [esp+10h] [ebp-86Ch]
  char *ptra; // [esp+10h] [ebp-86Ch]
  signed int v66; // [esp+14h] [ebp-868h]
  int v67; // [esp+14h] [ebp-868h]
  signed int v68; // [esp+14h] [ebp-868h]
  unsigned int v69; // [esp+18h] [ebp-864h]
  int v70; // [esp+1Ch] [ebp-860h]
  int v71; // [esp+20h] [ebp-85Ch]
  unsigned int v72; // [esp+20h] [ebp-85Ch]
  int v73; // [esp+24h] [ebp-858h]
  unsigned int v74; // [esp+28h] [ebp-854h]
  signed int v75; // [esp+30h] [ebp-84Ch]
  size_t v76; // [esp+30h] [ebp-84Ch]
  int v77; // [esp+34h] [ebp-848h]
  size_t v78; // [esp+38h] [ebp-844h]
  size_t v79; // [esp+38h] [ebp-844h]
  unsigned int v80; // [esp+3Ch] [ebp-840h]
  int v81; // [esp+40h] [ebp-83Ch]
  unsigned int v82; // [esp+44h] [ebp-838h]
  char v83[32]; // [esp+4Ch] [ebp-830h]
  char src[2064]; // [esp+6Ch] [ebp-810h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = size;
  v4 = (char *)malloc(0x800u);
  if ( !v4 )
    goto LABEL_140;
  v5 = v4;
  v6 = (char *)malloc(0x800u);
  if ( !v6 )
  {
    free(v5);
LABEL_140:
    *size = -1;
    return 0;
  }
  v63 = v6;
  v83[0] = 0;
  v82 = 2048;
  v7 = -1;
  v81 = 0;
  v8 = 0;
  v73 = 0;
  v80 = 2048;
  v69 = 0;
  v74 = 0;
  v9 = 0;
  do
  {
    v78 = v8;
    v70 = v7;
    v10 = receivedata(s, src, 2048, 5000, 0);
    if ( v10 <= 0 )
      break;
    v11 = v10;
    v12 = v73;
    v13 = v5;
LABEL_8:
    if ( v9 )
    {
      v73 = v12;
      v5 = v13;
      goto LABEL_79;
    }
    v14 = v11 + v12;
    if ( v11 + v12 <= v82 )
    {
      v5 = v13;
    }
    else
    {
      v15 = v11;
      v16 = (char *)realloc(v13, v11 + v12);
      v11 = v15;
      v5 = v16;
      v82 = v14;
      if ( !v16 )
      {
        free(v13);
        free(v63);
        goto LABEL_142;
      }
    }
    v66 = v11;
    memcpy(&v5[v12], src, v11);
    v17 = v14;
    if ( v14 < 2 )
      goto LABEL_32;
    v73 = v14;
    v18 = v14 - 1;
    v19 = 0;
    do
    {
      v20 = v5[v19];
      if ( v20 == 10 )
      {
        v21 = v19 + 1;
        v9 = v19 + 2;
        v22 = v5[v19 + 1] == 10;
LABEL_23:
        if ( !v22 )
          v9 = 0;
        goto LABEL_29;
      }
      if ( v20 != 13 )
        goto LABEL_27;
      if ( v5[v19 + 1] != 10 )
      {
        ++v19;
LABEL_27:
        v21 = v19;
LABEL_28:
        v9 = 0;
        goto LABEL_29;
      }
      v21 = v19 + 2;
      if ( v19 + 2 >= v73 )
        goto LABEL_28;
      v9 = 0;
      if ( v5[v21] == 13 )
      {
        v21 = v19 + 3;
        if ( v19 + 3 >= v73 )
          goto LABEL_28;
        v9 = v19 + 4;
        v22 = v5[v19 + 3] == 10;
        goto LABEL_23;
      }
LABEL_29:
      v19 = v21 + 1;
    }
    while ( v21 + 1 < v18 && !v9 );
    v17 = v73;
    if ( !v9 )
    {
LABEL_32:
      v11 = receivedata(s, src, 2048, 5000, 0);
      v9 = 0;
      v12 = v17;
      v13 = v5;
      if ( v11 <= 0 )
      {
LABEL_146:
        v3 = size;
        break;
      }
      goto LABEL_8;
    }
    if ( v9 >= 2 )
    {
      v71 = v9 - 1;
      v23 = v9 - 1;
      v67 = v12 + v66;
      v77 = 0;
      v24 = 0;
      v75 = 0;
      v25 = 0;
      v26 = status_code;
      do
      {
        ptr = (char *)v25;
        v27 = v5[v25];
        if ( v75 > 0 && v24 <= v75 && v27 == 58 )
        {
          v28 = (char *)v25;
          if ( v25 < v71 )
          {
            v28 = (char *)v25;
            while ( 1 )
            {
              v29 = v28[(_DWORD)v5 + 1];
              if ( v29 != 32 && v29 != 9 )
                break;
              if ( (char *)v23 == ++v28 )
              {
                v28 = (char *)(v9 - 1);
                break;
              }
            }
          }
          v77 = (int)(v28 + 1);
          v24 = v25;
        }
        else
        {
          if ( v27 == 13 || v27 == 10 )
          {
            if ( !v26 || v75 )
            {
              v33 = v24 - v75;
              v28 = (char *)v25;
              if ( v24 <= v75 || v77 <= v24 )
              {
                v30 = v67;
                goto LABEL_67;
              }
              if ( !strncasecmp(&v5[v75], "content-length", v33) )
              {
                v70 = atoi(&v5[v77]);
              }
              else if ( !strncasecmp(&v5[v75], "transfer-encoding", v33) )
              {
                v34 = strncasecmp(&v5[v77], "chunked", 7u);
                v35 = v81;
                if ( !v34 )
                  v35 = 1;
                v81 = v35;
              }
              v26 = status_code;
              v30 = v67;
              v23 = v9 - 1;
              v28 = (char *)v25;
            }
            else
            {
              v28 = (char *)v25;
              v30 = v67;
              if ( v25 > 0 )
              {
                v31 = v5 + 1;
                do
                {
                  if ( *(v31 - 1) == 32 )
                  {
                    if ( *v26 >= 0 )
                      break;
                    v32 = atoi(v31);
                    v30 = v67;
                    v26 = status_code;
                    *status_code = v32;
                    v28 = ptr;
                  }
                  ++v31;
                  --v25;
                }
                while ( v25 );
LABEL_67:
                v23 = v9 - 1;
              }
            }
            v77 = 0;
            if ( (int)v28 >= v73 )
            {
              v24 = (int)v28;
              v75 = (signed int)v28;
            }
            else
            {
              while ( 1 )
              {
                v36 = (signed int)v28;
                v37 = v28[(_DWORD)v5];
                if ( v37 != 13 && v37 != 10 )
                  break;
                v28 = (char *)(v36 + 1);
                if ( v30 == v36 + 1 )
                {
                  v24 = v73;
                  v28 = (char *)v73;
                  v75 = v73;
                  goto LABEL_77;
                }
              }
              v24 = v36;
              v28 = (char *)v36;
              v75 = v36;
            }
            goto LABEL_77;
          }
          v28 = (char *)v25;
        }
LABEL_77:
        v25 = (int)(v28 + 1);
      }
      while ( (int)(v28 + 1) < v71 );
    }
    memcpy(src, &v5[v9], v73 - v9);
    v11 = v73 - v9;
LABEL_79:
    v7 = v70;
    v8 = v78;
    if ( v81 )
    {
      if ( v11 > 0 )
      {
        v38 = 0;
        v39 = v63;
        v68 = v11;
        do
        {
          ptra = v39;
          v72 = v69;
          while ( !v8 )
          {
            if ( !v74 )
            {
              v38 += src[v38] == 13;
              if ( v38 < v11 )
                v38 += src[v38] == 10;
            }
            if ( v38 < v11 )
            {
              v40 = *_ctype_b_loc();
              v41 = v74;
              while ( 1 )
              {
                v74 = v41;
                if ( v41 > 0x1E )
                  break;
                v42 = src[v38];
                if ( (v40[v42] & 0x1000) == 0 )
                  break;
                v83[v74] = v42;
                v83[v74 + 1] = 0;
                v39 = ptra;
                ++v38;
                v41 = v74 + 1;
                if ( v68 == v38 )
                {
                  v8 = 0;
                  v63 = ptra;
                  ++v74;
                  v7 = v70;
                  goto LABEL_136;
                }
              }
              v7 = v70;
              v11 = v68;
            }
            if ( v38 < v11 )
            {
              while ( 1 )
              {
                v43 = src[v38];
                if ( v43 == 10 || v43 == 13 )
                  break;
                if ( v11 == ++v38 )
                  goto LABEL_135;
              }
              v38 += v43 == 13;
              v11 = v68;
            }
            if ( v38 >= v11 )
            {
LABEL_135:
              v8 = 0;
              v63 = v39;
              goto LABEL_136;
            }
            v8 = 0;
            if ( src[v38] == 10 )
            {
              if ( !v74 )
              {
                v83[0] = 0;
                v63 = v39;
                goto LABEL_146;
              }
              v44 = 0;
              v45 = 0;
              do
              {
                v46 = (unsigned __int8)v83[v44];
                v47 = 16 * v45;
                if ( (unsigned __int8)(v83[v44] - 48) > 9u )
                {
                  v46 = (char)(v46 | 0x20);
                  v48 = v47 - 87;
                }
                else
                {
                  v48 = v47 - 48;
                }
                v49 = v48 + v46;
                v45 = v49;
                ++v44;
              }
              while ( v74 != v44 );
              v83[0] = 0;
              if ( !v49 )
              {
                v63 = ptra;
                goto LABEL_146;
              }
              v8 = v49;
              ++v38;
              v74 = 0;
              v7 = v70;
              v11 = v68;
              v39 = ptra;
              break;
            }
          }
          v50 = v11 - v38;
          v79 = v8;
          if ( v8 < v50 )
            v50 = v8;
          v76 = v50;
          v51 = v69 + v50;
          v69 = v51;
          if ( v51 <= v80 )
          {
            v53 = v39;
          }
          else
          {
            v52 = v7;
            if ( v7 < v51 )
              v52 = v51;
            if ( v7 < 0 )
              v52 = v51;
            v80 = v52;
            v53 = (char *)realloc(v39, v52);
            if ( !v53 )
            {
              free(v39);
              goto LABEL_143;
            }
          }
          v63 = v53;
          memcpy(&v53[v72], &src[v38], v76);
          v38 += v76;
          v8 = v79 - v76;
          v39 = v63;
          v11 = v68;
          v7 = v70;
        }
        while ( v38 < v68 );
      }
    }
    else
    {
      v54 = v70 - v69;
      if ( v11 + v69 <= v70 )
        v54 = v11;
      if ( v70 <= 0 )
        v54 = v11;
      v55 = v69;
      if ( v54 + v69 <= v80 )
      {
        v58 = v54 + v69;
        v59 = v63;
      }
      else
      {
        v56 = v70;
        if ( v70 < v54 + v69 )
          v56 = v54 + v69;
        if ( v70 < 0 )
          v56 = v54 + v69;
        v80 = v56;
        v57 = (char *)realloc(v63, v56);
        v55 = v69;
        v58 = v54 + v69;
        v59 = v57;
        if ( !v57 )
        {
          free(v63);
LABEL_143:
          free(v5);
LABEL_142:
          *size = -1;
          return 0;
        }
      }
      v62 = v54;
      v60 = v58;
      memcpy(&v59[v55], src, v62);
      v63 = v59;
      v69 = v60;
      v7 = v70;
      v8 = v78;
    }
LABEL_136:
    v3 = size;
  }
  while ( v7 <= 0 || v69 < v7 );
  free(v5);
  *v3 = v69;
  if ( !v69 )
  {
    free(v63);
    return 0;
  }
  return v63;
}
