void *__cdecl getHTTPResponse(int s, int *size, int *status_code)
{
  int v3; // eax
  unsigned int v4; // eax
  unsigned int v6; // [rsp+4h] [rbp-8CCh]
  bool v7; // [rsp+9h] [rbp-8C7h]
  bool v8; // [rsp+Ah] [rbp-8C6h]
  bool v9; // [rsp+Bh] [rbp-8C5h]
  bool v10; // [rsp+Ch] [rbp-8C4h]
  bool v11; // [rsp+Dh] [rbp-8C3h]
  bool v12; // [rsp+Eh] [rbp-8C2h]
  bool v13; // [rsp+Fh] [rbp-8C1h]
  char *tmp_1; // [rsp+10h] [rbp-8C0h]
  char *tmp_0; // [rsp+18h] [rbp-8B8h]
  unsigned int j; // [rsp+24h] [rbp-8ACh]
  int i_0; // [rsp+28h] [rbp-8A8h]
  int sp_0; // [rsp+2Ch] [rbp-8A4h]
  char *tmp; // [rsp+30h] [rbp-8A0h]
  int valuestart; // [rsp+3Ch] [rbp-894h]
  int colon; // [rsp+40h] [rbp-890h]
  int linestart; // [rsp+44h] [rbp-88Ch]
  int i; // [rsp+48h] [rbp-888h]
  int ia; // [rsp+48h] [rbp-888h]
  unsigned int chunksize_buf_index; // [rsp+4Ch] [rbp-884h]
  char chunksize_buf[32]; // [rsp+50h] [rbp-880h]
  unsigned int content_buf_used; // [rsp+78h] [rbp-858h]
  unsigned int content_buf_len; // [rsp+7Ch] [rbp-854h]
  char *content_buf; // [rsp+80h] [rbp-850h]
  unsigned int header_buf_used; // [rsp+88h] [rbp-848h]
  unsigned int header_buf_len; // [rsp+8Ch] [rbp-844h]
  char *header_buf; // [rsp+90h] [rbp-840h]
  unsigned int bytestocopy; // [rsp+98h] [rbp-838h]
  unsigned int chunksize; // [rsp+9Ch] [rbp-834h]
  int content_length; // [rsp+A0h] [rbp-830h]
  int chunked; // [rsp+A4h] [rbp-82Ch]
  int endofheaders; // [rsp+A8h] [rbp-828h]
  int n; // [rsp+ACh] [rbp-824h]
  char buf[2048]; // [rsp+B0h] [rbp-820h] BYREF
  int *status_codea; // [rsp+8B0h] [rbp-20h]
  int *sizea; // [rsp+8B8h] [rbp-18h]
  int sa; // [rsp+8C4h] [rbp-Ch]

  sa = s;
  sizea = size;
  status_codea = status_code;
  endofheaders = 0;
  chunked = 0;
  content_length = -1;
  chunksize = 0;
  bytestocopy = 0;
  header_buf_len = 2048;
  header_buf_used = 0;
  content_buf_len = 2048;
  content_buf_used = 0;
  if ( status_code )
    *status_codea = -1;
  header_buf = (char *)malloc(header_buf_len);
  if ( !header_buf )
  {
    *sizea = -1;
    return 0LL;
  }
  content_buf = (char *)malloc(content_buf_len);
  if ( !content_buf )
  {
    free(header_buf);
    *sizea = -1;
    return 0LL;
  }
  chunksize_buf[0] = 0;
  chunksize_buf_index = 0;
  while ( 1 )
  {
    n = receivedata((unsigned int)sa, buf, 2048LL, 5000LL, 0LL);
    if ( n <= 0 )
      break;
    if ( endofheaders )
      goto LABEL_72;
    linestart = 0;
    colon = 0;
    valuestart = 0;
    if ( n + header_buf_used > header_buf_len )
    {
      tmp = (char *)realloc(header_buf, n + header_buf_used);
      if ( !tmp )
      {
        free(header_buf);
        free(content_buf);
        *sizea = -1;
        return 0LL;
      }
      header_buf = tmp;
      header_buf_len = n + header_buf_used;
    }
    memcpy(&header_buf[header_buf_used], buf, n);
    header_buf_used += n;
    for ( i = 0; ; ++i )
    {
      v13 = 0;
      if ( i < (int)(header_buf_used - 1) )
        v13 = endofheaders == 0;
      if ( !v13 )
        break;
      if ( header_buf[i] == 13 )
      {
        if ( header_buf[++i] == 10
          && ++i < (int)header_buf_used
          && header_buf[i] == 13
          && ++i < (int)header_buf_used
          && header_buf[i] == 10 )
        {
          endofheaders = i + 1;
        }
      }
      else if ( header_buf[i] == 10 && header_buf[++i] == 10 )
      {
        endofheaders = i + 1;
      }
    }
    if ( endofheaders )
    {
      for ( ia = 0; ia < endofheaders - 1; ++ia )
      {
        if ( linestart > 0 && colon <= linestart && header_buf[ia] == 58 )
        {
          colon = ia;
          while ( 1 )
          {
            v12 = 0;
            if ( ia < endofheaders - 1 )
            {
              v11 = 1;
              if ( header_buf[ia + 1] != 32 )
                v11 = header_buf[ia + 1] == 9;
              v12 = v11;
            }
            if ( !v12 )
              break;
            ++ia;
          }
          valuestart = ia + 1;
        }
        else if ( header_buf[ia] == 13 || header_buf[ia] == 10 )
        {
          if ( linestart || !status_codea )
          {
            if ( colon > linestart && valuestart > colon )
            {
              if ( !strncasecmp(&header_buf[linestart], "content-length", colon - linestart) )
              {
                content_length = atoi(&header_buf[valuestart]);
              }
              else if ( !strncasecmp(&header_buf[linestart], "transfer-encoding", colon - linestart)
                     && !strncasecmp(&header_buf[valuestart], "chunked", 7uLL) )
              {
                chunked = 1;
              }
            }
          }
          else
          {
            for ( sp_0 = 0; sp_0 < ia; ++sp_0 )
            {
              if ( header_buf[sp_0] == 32 )
              {
                if ( *status_codea >= 0 )
                  goto LABEL_63;
                v3 = atoi(&header_buf[sp_0 + 1]);
                *status_codea = v3;
              }
            }
          }
          while ( 1 )
          {
LABEL_63:
            v10 = 0;
            if ( ia < (int)header_buf_used )
            {
              v9 = 1;
              if ( header_buf[ia] != 13 )
                v9 = header_buf[ia] == 10;
              v10 = v9;
            }
            if ( !v10 )
              break;
            ++ia;
          }
          linestart = ia;
          colon = ia;
          valuestart = 0;
        }
      }
      n = header_buf_used - endofheaders;
      memcpy(buf, &header_buf[endofheaders], (int)(header_buf_used - endofheaders));
LABEL_72:
      if ( endofheaders )
      {
        if ( chunked )
        {
          i_0 = 0;
          while ( 1 )
          {
            while ( 1 )
            {
              if ( i_0 >= n )
                goto LABEL_133;
              if ( !chunksize )
                break;
LABEL_109:
              if ( chunksize >= n - i_0 )
                v6 = n - i_0;
              else
                v6 = chunksize;
              bytestocopy = v6;
              if ( v6 + content_buf_used > content_buf_len )
              {
                if ( content_length < 0 || content_length < bytestocopy + content_buf_used )
                  content_buf_len = bytestocopy + content_buf_used;
                else
                  content_buf_len = content_length;
                tmp_0 = (char *)realloc(content_buf, content_buf_len);
                if ( !tmp_0 )
                  goto LABEL_118;
                content_buf = tmp_0;
              }
              memcpy(&content_buf[content_buf_used], &buf[i_0], bytestocopy);
              content_buf_used += bytestocopy;
              i_0 += bytestocopy;
              chunksize -= bytestocopy;
            }
            if ( !chunksize_buf_index )
            {
              if ( i_0 < n && buf[i_0] == 13 )
                ++i_0;
              if ( i_0 < n && buf[i_0] == 10 )
                ++i_0;
            }
            while ( 1 )
            {
              v8 = 0;
              if ( i_0 < n )
              {
                v8 = 0;
                if ( ((*_ctype_b_loc())[buf[i_0]] & 0x1000) != 0 )
                  v8 = chunksize_buf_index < 0x1FuLL;
              }
              if ( !v8 )
                break;
              v4 = chunksize_buf_index++;
              chunksize_buf[v4] = buf[i_0];
              chunksize_buf[chunksize_buf_index] = 0;
              ++i_0;
            }
            while ( 1 )
            {
              v7 = 0;
              if ( i_0 < n )
              {
                v7 = 0;
                if ( buf[i_0] != 13 )
                  v7 = buf[i_0] != 10;
              }
              if ( !v7 )
                break;
              ++i_0;
            }
            if ( i_0 < n && buf[i_0] == 13 )
              ++i_0;
            if ( i_0 < n && buf[i_0] == 10 )
            {
              for ( j = 0; j < chunksize_buf_index; ++j )
              {
                if ( chunksize_buf[j] < 48 || chunksize_buf[j] > 57 )
                  chunksize = (chunksize_buf[j] | 0x20) - 97 + 10 + 16 * chunksize;
                else
                  chunksize = chunksize_buf[j] - 48 + 16 * chunksize;
              }
              chunksize_buf[0] = 0;
              chunksize_buf_index = 0;
              ++i_0;
              if ( !chunksize )
                goto end_of_stream;
              goto LABEL_109;
            }
          }
        }
        if ( content_length > 0 && n + content_buf_used > content_length )
          n = content_length - content_buf_used;
        if ( n + content_buf_used > content_buf_len )
        {
          if ( content_length < 0 || content_length < n + content_buf_used )
            content_buf_len = n + content_buf_used;
          else
            content_buf_len = content_length;
          tmp_1 = (char *)realloc(content_buf, content_buf_len);
          if ( !tmp_1 )
          {
LABEL_118:
            free(content_buf);
            free(header_buf);
            *sizea = -1;
            return 0LL;
          }
          content_buf = tmp_1;
        }
        memcpy(&content_buf[content_buf_used], buf, n);
        content_buf_used += n;
      }
LABEL_133:
      if ( content_length > 0 && content_buf_used >= content_length )
        break;
    }
  }
end_of_stream:
  free(header_buf);
  header_buf = 0LL;
  *sizea = content_buf_used;
  if ( !content_buf_used )
  {
    free(content_buf);
    return 0LL;
  }
  return content_buf;
}
