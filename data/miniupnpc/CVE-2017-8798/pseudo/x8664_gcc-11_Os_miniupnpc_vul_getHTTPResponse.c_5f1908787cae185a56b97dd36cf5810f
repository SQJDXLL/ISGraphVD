void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // r12
  char *v4; // rax
  char *v5; // r14
  __int64 v6; // r13
  __int64 v7; // rbp
  int v8; // r15d
  int v9; // edx
  int v10; // ebx
  char *v11; // rax
  char *v12; // rdi
  int v13; // ebp
  unsigned int v14; // eax
  char *v15; // rax
  char v16; // cl
  int v17; // eax
  int v18; // ebx
  int v19; // edx
  __int64 v20; // rax
  int k; // esi
  __int64 v22; // rbp
  char v23; // di
  char v24; // dl
  int v25; // edi
  const char *v26; // rdx
  int m; // ebx
  int v28; // eax
  size_t v29; // rdx
  bool v30; // zf
  int v31; // eax
  char v32; // al
  int v33; // ebp
  char *v34; // r10
  int v35; // edx
  __int64 v36; // rdx
  const unsigned __int16 **v37; // rax
  const unsigned __int16 *v38; // rcx
  __int64 v39; // rax
  __int64 v40; // rax
  char v41; // dl
  __int64 j; // rcx
  int v43; // eax
  int v44; // edx
  unsigned int v45; // r8d
  int v46; // r9d
  unsigned int v47; // eax
  char *v48; // rax
  char *v49; // rsi
  char *v50; // rdi
  int content_length; // [rsp+8h] [rbp-8B0h]
  signed int header_buf_used; // [rsp+Ch] [rbp-8ACh]
  unsigned int v54; // [rsp+10h] [rbp-8A8h]
  unsigned int content_buf_len; // [rsp+14h] [rbp-8A4h]
  int v58; // [rsp+28h] [rbp-890h]
  int v59; // [rsp+28h] [rbp-890h]
  int chunked; // [rsp+2Ch] [rbp-88Ch]
  int chunksize; // [rsp+30h] [rbp-888h]
  char *chunksizeb; // [rsp+30h] [rbp-888h]
  int chunksizea; // [rsp+30h] [rbp-888h]
  unsigned int header_buf_len; // [rsp+38h] [rbp-880h]
  const char *bytestocopyb; // [rsp+40h] [rbp-878h]
  const char *bytestocopy; // [rsp+40h] [rbp-878h]
  __int64 bytestocopya; // [rsp+40h] [rbp-878h]
  unsigned int bytestocopyc; // [rsp+40h] [rbp-878h]
  size_t i; // [rsp+48h] [rbp-870h]
  char *ia; // [rsp+48h] [rbp-870h]
  char chunksize_buf[32]; // [rsp+58h] [rbp-860h]
  char buf[2048]; // [rsp+78h] [rbp-840h] BYREF
  unsigned __int64 v74; // [rsp+878h] [rbp-40h]

  v74 = __readfsqword(0x28u);
  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800uLL);
  if ( !v3 )
  {
    *size = -1;
    return v3;
  }
  v4 = (char *)malloc(0x800uLL);
  if ( !v4 )
  {
LABEL_17:
    v12 = v3;
    goto LABEL_24;
  }
  v5 = v3;
  chunksize_buf[0] = 0;
  v3 = v4;
  v6 = 0LL;
  v54 = 0;
  v7 = 0LL;
  v8 = 0;
  content_buf_len = 2048;
  header_buf_len = 2048;
  v58 = 0;
  content_length = -1;
  chunked = 0;
  while ( 1 )
  {
    v10 = receivedata((unsigned int)s, buf, 2048LL, 5000LL, 0LL);
    if ( v10 <= 0 )
      break;
    if ( v8 )
    {
      header_buf_used = v7;
LABEL_75:
      if ( chunked )
      {
        v33 = 0;
        v34 = buf;
        while ( 1 )
        {
LABEL_77:
          if ( v10 <= v33 )
            goto LABEL_116;
          v35 = v58;
          if ( !v58 )
            break;
LABEL_104:
          v45 = v10 - v33;
          if ( v10 - v33 > v35 )
            v45 = v35;
          v46 = v6 + v45;
          if ( (unsigned int)v6 + v45 > content_buf_len )
          {
            v47 = content_length;
            chunksizea = v35;
            ia = v34;
            if ( content_length < v46 )
              v47 = v6 + v45;
            bytestocopyc = v45;
            v59 = v6 + v45;
            content_buf_len = v47;
            v48 = (char *)realloc(v3, v47);
            v46 = v59;
            v35 = chunksizea;
            v45 = bytestocopyc;
            v34 = ia;
            if ( !v48 )
              goto LABEL_23;
            v3 = v48;
          }
          v49 = &v34[v33];
          v58 = v35 - v45;
          v33 += v45;
          qmemcpy(&v3[v6], v49, v45);
          v6 = (unsigned int)v46;
        }
        if ( v54 )
        {
LABEL_84:
          v36 = v33;
          while ( 1 )
          {
            bytestocopya = v36;
            v33 = v36;
            if ( v10 <= (int)v36 )
              break;
            chunksizeb = v34;
            v37 = _ctype_b_loc();
            v34 = chunksizeb;
            v38 = *v37;
            v39 = chunksizeb[bytestocopya];
            if ( (v38[v39] & 0x1000) == 0 || v54 > 0x1E )
              break;
            v36 = bytestocopya + 1;
            chunksize_buf[v54++] = v39;
            chunksize_buf[v54] = 0;
          }
        }
        else if ( buf[v33] != 13 || (++v33, v10 > v33) )
        {
          if ( buf[v33] == 10 )
            ++v33;
          goto LABEL_84;
        }
        v40 = v33;
        while ( 1 )
        {
          v33 = v40;
          if ( v10 <= (int)v40 )
            goto LABEL_116;
          v41 = v34[v40++];
          if ( v41 == 10 || v41 == 13 )
          {
            if ( buf[v33] == 13 && v10 <= ++v33 )
              goto LABEL_116;
            if ( buf[v33] != 10 )
              goto LABEL_77;
            v35 = 0;
            for ( j = 0LL; v54 > (unsigned int)j; ++j )
            {
              v43 = chunksize_buf[j];
              v44 = 16 * v35;
              if ( (unsigned __int8)(chunksize_buf[j] - 48) > 9u )
                v35 = v44 + (char)(v43 | 0x20) - 87;
              else
                v35 = v44 + v43 - 48;
            }
            chunksize_buf[0] = 0;
            ++v33;
            if ( v35 )
            {
              v54 = 0;
              goto LABEL_104;
            }
            goto end_of_stream;
          }
        }
      }
      if ( content_length > 0 && content_length < v10 + (int)v6 )
        v10 = content_length - v6;
      v13 = v10 + v6;
      if ( v10 + (int)v6 <= content_buf_len )
      {
        v15 = v3;
      }
      else
      {
        v14 = content_length;
        if ( content_length < v13 )
          v14 = v10 + v6;
        content_buf_len = v14;
        v15 = (char *)realloc(v3, v14);
        if ( !v15 )
        {
LABEL_23:
          free(v3);
          v12 = v5;
LABEL_24:
          free(v12);
          *size = -1;
          return 0LL;
        }
      }
      v3 = v15;
      v50 = &v15[v6];
      v6 = (unsigned int)v13;
      qmemcpy(v50, buf, v10);
LABEL_116:
      if ( content_length > 0 && (int)v6 >= content_length )
        break;
      goto LABEL_11;
    }
    header_buf_used = v10 + v7;
    if ( v10 + (int)v7 > header_buf_len )
    {
      v11 = (char *)realloc(v5, (unsigned int)(v10 + v7));
      if ( !v11 )
      {
        free(v5);
        goto LABEL_17;
      }
      v5 = v11;
      header_buf_len = v10 + v7;
    }
    v9 = 0;
    v8 = 0;
    qmemcpy(&v5[v7], buf, (unsigned int)v10);
    while ( header_buf_used - 1 > v9 )
    {
      if ( v8 )
        goto LABEL_38;
      v16 = v5[v9];
      v17 = v9 + 1;
      if ( v16 == 13 )
      {
        if ( v5[v17] == 10 )
        {
          v17 = v9 + 2;
          if ( header_buf_used > v9 + 2 && v5[v17] == 13 )
          {
            v17 = v9 + 3;
            if ( header_buf_used > v9 + 3 && v5[v17] == 10 )
              v8 = v9 + 4;
          }
        }
      }
      else if ( v16 == 10 )
      {
        if ( v5[v17] == 10 )
          v8 = v9 + 2;
      }
      else
      {
        v17 = v9;
      }
      v9 = v17 + 1;
    }
    if ( v8 )
    {
LABEL_38:
      v18 = 0;
      v19 = 0;
      v20 = 0LL;
      chunksize = v8 - 1;
      for ( k = 0; chunksize > k; ++k )
      {
        v22 = k;
        v23 = v5[k];
        if ( (int)v20 > 0 && (int)v20 >= v19 && v23 == 58 )
        {
          while ( 1 )
          {
            v24 = v5[v22 + 1];
            v25 = v22 + 1;
            if ( v24 != 32 && v24 != 9 )
              break;
            if ( chunksize <= (int)++v22 )
              goto LABEL_48;
          }
          v25 = v22;
LABEL_48:
          v19 = k;
          v18 = v25 + 1;
          k = v25;
        }
        else if ( v23 == 13 || v23 == 10 )
        {
          if ( !(_DWORD)v20 && status_code )
          {
            v26 = v5 + 1;
            for ( m = 0; ; ++m )
            {
              if ( k <= m )
                goto LABEL_67;
              if ( *(v26 - 1) == 32 )
              {
                if ( *status_code >= 0 )
                  goto LABEL_67;
                bytestocopyb = v26;
                v28 = atoi(v26);
                v26 = bytestocopyb;
                *status_code = v28;
              }
              ++v26;
            }
          }
          if ( (int)v20 < v19 && v19 < v18 )
          {
            v29 = v19 - (int)v20;
            bytestocopy = &v5[v20];
            i = (int)v29;
            if ( !strncasecmp(&v5[v20], "content-length", v29) )
            {
              content_length = atoi(&v5[v18]);
            }
            else if ( !strncasecmp(bytestocopy, "transfer-encoding", i) )
            {
              v30 = strncasecmp(&v5[v18], "chunked", 7uLL) == 0;
              v31 = 1;
              if ( !v30 )
                v31 = chunked;
              chunked = v31;
            }
          }
LABEL_67:
          while ( 1 )
          {
            k = v22;
            if ( header_buf_used <= (int)v22 )
              break;
            v32 = v5[v22++];
            if ( v32 != 13 && v32 != 10 )
            {
              v18 = 0;
              v19 = k;
              v20 = k;
              goto LABEL_72;
            }
          }
          v18 = 0;
          v19 = v22;
          v20 = (int)v22;
        }
LABEL_72:
        ;
      }
      v10 = header_buf_used - v8;
      qmemcpy(buf, &v5[v8], header_buf_used - v8);
      goto LABEL_75;
    }
LABEL_11:
    v7 = (unsigned int)header_buf_used;
  }
end_of_stream:
  free(v5);
  *size = v6;
  if ( !(_DWORD)v6 )
  {
    free(v3);
    return 0LL;
  }
  return v3;
}
