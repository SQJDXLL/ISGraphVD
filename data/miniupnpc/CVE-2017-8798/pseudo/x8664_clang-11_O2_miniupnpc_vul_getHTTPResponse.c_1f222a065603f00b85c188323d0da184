void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  unsigned int v4; // r13d
  char *v5; // rax
  char *v6; // r14
  char *v7; // rax
  __int64 v8; // rax
  __int64 v9; // rbx
  unsigned int v10; // r9d
  int v11; // r15d
  int v12; // eax
  int v13; // r12d
  __int64 v14; // r13
  char *v15; // rbx
  int v16; // ebp
  int v17; // ecx
  char v18; // bl
  __int64 v19; // rsi
  __int64 v20; // rdx
  int v21; // ecx
  int v22; // ebx
  int v23; // r8d
  int v24; // ecx
  int v25; // eax
  int v26; // edi
  int *v27; // rsi
  __int64 v28; // r12
  __int64 v29; // rbp
  char v30; // dl
  char *v31; // r13
  __int64 v32; // rdx
  const char *v33; // rbx
  int v34; // edx
  const char *v35; // rbx
  size_t v36; // rbp
  int v37; // eax
  int v38; // ecx
  __int64 v39; // rcx
  char v40; // bl
  __int64 v41; // r10
  __int64 v42; // r13
  unsigned int v43; // ebx
  const unsigned __int16 **v44; // rax
  const unsigned __int16 *v45; // r8
  __int64 v46; // rax
  char *v47; // rsi
  __int64 v48; // rdx
  __int64 v49; // rbx
  __int64 v50; // rax
  bool v51; // cc
  char v52; // cl
  __int64 v53; // rcx
  int v54; // esi
  unsigned __int8 v55; // di
  int v56; // ebx
  int v57; // ebp
  int v58; // esi
  int v59; // esi
  int v60; // ebx
  unsigned __int8 v61; // di
  int v62; // esi
  int v63; // ebp
  int v64; // ebx
  int v65; // eax
  unsigned __int8 v66; // cl
  int v67; // edx
  int v68; // eax
  unsigned int v69; // ecx
  unsigned int v70; // ecx
  size_t v71; // rsi
  char *v72; // rax
  unsigned int v73; // edx
  int v74; // ebp
  int v75; // r13d
  size_t v76; // rbx
  char *v77; // rax
  char *v78; // r12
  char *v79; // rdi
  char *v81; // rdi
  char *ptr; // [rsp+0h] [rbp-8E8h]
  char *v83; // [rsp+8h] [rbp-8E0h]
  unsigned int v84; // [rsp+1Ch] [rbp-8CCh]
  unsigned int v85; // [rsp+1Ch] [rbp-8CCh]
  int v86; // [rsp+20h] [rbp-8C8h]
  unsigned int v87; // [rsp+28h] [rbp-8C0h]
  unsigned int nptr; // [rsp+30h] [rbp-8B8h]
  int v89; // [rsp+3Ch] [rbp-8ACh]
  __int64 v90; // [rsp+40h] [rbp-8A8h]
  __int64 v91; // [rsp+48h] [rbp-8A0h]
  __int64 v92; // [rsp+48h] [rbp-8A0h]
  int *v93; // [rsp+50h] [rbp-898h]
  int v94; // [rsp+5Ch] [rbp-88Ch]
  unsigned int v96; // [rsp+64h] [rbp-884h]
  __int64 v98; // [rsp+70h] [rbp-878h]
  __int64 v99; // [rsp+78h] [rbp-870h]
  __int64 v100; // [rsp+80h] [rbp-868h]
  char v101[32]; // [rsp+90h] [rbp-858h] BYREF
  char src[2104]; // [rsp+B0h] [rbp-838h] BYREF

  v4 = s;
  if ( status_code )
    *status_code = -1;
  v5 = (char *)malloc(0x800uLL);
  if ( v5 )
  {
    v6 = v5;
    v7 = (char *)malloc(0x800uLL);
    if ( !v7 )
    {
      free(v6);
      *size = -1;
      return 0LL;
    }
    v83 = v7;
    v93 = status_code;
    v101[0] = 0;
    v96 = 2048;
    v8 = 0xFFFFFFFFLL;
    v89 = 0;
    v9 = 0LL;
    v91 = 0LL;
    v98 = 2048LL;
    v86 = 0;
    v10 = 0;
    v11 = 0;
LABEL_6:
    v90 = v9;
    v84 = v10;
    v99 = v8;
    v12 = receivedata(v4, src, 2048LL, 5000LL, 0LL);
    if ( v12 > 0 )
    {
      v13 = v12;
      v14 = v91;
      v15 = v6;
      while ( 1 )
      {
        if ( v11 )
        {
          v6 = v15;
          goto LABEL_82;
        }
        v16 = v13 + v14;
        if ( v13 + (int)v14 <= v96 )
        {
          v6 = v15;
        }
        else
        {
          v6 = (char *)realloc(v15, (unsigned int)v16);
          v96 = v13 + v14;
          if ( !v6 )
          {
            free(v15);
            v79 = v83;
LABEL_148:
            free(v79);
            *size = -1;
            return 0LL;
          }
        }
        memcpy(&v6[(unsigned int)v14], src, (unsigned int)v13);
        v14 = (unsigned int)(v13 + v14);
        if ( v16 >= 2 )
          break;
LABEL_9:
        v11 = 0;
        v13 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
        v15 = v6;
        if ( v13 <= 0 )
          goto end_of_stream;
      }
      v17 = 0;
      while ( 1 )
      {
        v18 = v6[v17];
        if ( v18 == 10 )
        {
          LODWORD(v19) = v17 + 1;
          v11 = v17 + 2;
          if ( v6[v17 + 1] != 10 )
            v11 = 0;
          goto LABEL_33;
        }
        if ( v18 == 13 )
        {
          if ( v6[v17 + 1] != 10 )
          {
            LODWORD(v20) = v17 + 1;
LABEL_31:
            LODWORD(v19) = v20;
            goto LABEL_32;
          }
          v19 = v17 + 2LL;
          if ( v17 + 2 < (int)v14 )
          {
            v11 = 0;
            if ( v6[v19] != 13 )
              goto LABEL_33;
            v20 = v17 + 3LL;
            if ( (int)v20 < (int)v14 )
            {
              v21 = v17 + 4;
              if ( v6[v20] != 10 )
                v21 = 0;
              LODWORD(v19) = v20;
              v11 = v21;
              goto LABEL_33;
            }
            goto LABEL_31;
          }
        }
        else
        {
          LODWORD(v19) = v17;
        }
LABEL_32:
        v11 = 0;
LABEL_33:
        v17 = v19 + 1;
        if ( (int)v19 + 1 >= v16 - 1 || v11 )
        {
          if ( !v11 )
            goto LABEL_9;
          if ( v11 >= 2 )
          {
            v22 = v11 - 1;
            v100 = (int)v14;
            v23 = 0;
            v24 = 0;
            v25 = 0;
            v26 = 0;
            v27 = v93;
            v92 = v14;
            do
            {
              v28 = v14;
              v29 = (unsigned int)v26;
              v30 = v6[v26];
              if ( v30 == 58 && v25 > 0 && v24 <= v25 )
              {
                if ( v26 < v22 )
                {
                  v31 = &v6[v26 + 1];
                  v32 = 0LL;
                  do
                  {
                    if ( *v31 != 32 && *v31 != 9 )
                    {
                      v26 -= v32;
                      v23 = v26 + 1;
                      v24 = v29;
                      v22 = v11 - 1;
                      goto LABEL_41;
                    }
                    --v32;
                    ++v31;
                  }
                  while ( v26 - (__int64)(v11 - 1) != v32 );
                  v22 = v11 - 1;
                  v26 = v11 - 1;
                  v24 = v29;
                  v23 = v11;
                  goto LABEL_41;
                }
                v23 = v26 + 1;
              }
              else
              {
                if ( v30 != 13 && v30 != 10 )
                  goto LABEL_41;
                if ( v27 && !v25 )
                {
                  if ( v26 <= 0 )
                    goto LABEL_71;
                  v33 = v6 + 1;
                  while ( 1 )
                  {
                    if ( *(v33 - 1) == 32 )
                    {
                      if ( *v27 >= 0 )
                      {
LABEL_70:
                        v28 = v92;
                        v22 = v11 - 1;
                        LODWORD(v29) = v26;
                        goto LABEL_71;
                      }
                      v27 = v93;
                      *v93 = strtol(v33, 0LL, 10);
                    }
                    ++v33;
                    if ( !--v29 )
                      goto LABEL_70;
                  }
                }
                v34 = v24 - v25;
                if ( v24 <= v25 || v23 <= v24 )
                {
LABEL_71:
                  if ( v26 < (int)v28 )
                    goto LABEL_72;
                }
                else
                {
                  v94 = v23;
                  v35 = &v6[v25];
                  v36 = v34;
                  if ( !strncasecmp(v35, "content-length", v34) )
                  {
                    v99 = strtol(&v6[v94], 0LL, 10);
                  }
                  else if ( !strncasecmp(v35, "transfer-encoding", v36) )
                  {
                    v37 = strncasecmp(&v6[v94], "chunked", 7uLL);
                    v38 = v89;
                    if ( !v37 )
                      v38 = 1;
                    v89 = v38;
                  }
                  v22 = v11 - 1;
                  LODWORD(v29) = v26;
                  v27 = v93;
                  if ( v26 < (int)v14 )
                  {
LABEL_72:
                    v39 = 0LL;
                    v14 = v28;
                    do
                    {
                      v40 = v6[v26 + v39];
                      if ( v40 != 13 && v40 != 10 )
                      {
                        v26 += v39;
                        v23 = 0;
                        v25 = v26;
                        v24 = v26;
                        v22 = v11 - 1;
                        goto LABEL_42;
                      }
                      ++v39;
                    }
                    while ( v100 - v26 != v39 );
                    v23 = 0;
                    v26 = v28;
                    v25 = v28;
                    v24 = v28;
                    v22 = v11 - 1;
                    goto LABEL_42;
                  }
                }
                v23 = 0;
                v25 = v26;
              }
              v24 = v29;
LABEL_41:
              v14 = v28;
LABEL_42:
              ++v26;
            }
            while ( v26 < v22 );
          }
          v13 = v14 - v11;
          memcpy(src, &v6[v11], (int)v14 - v11);
LABEL_82:
          v10 = v84;
          v9 = v90;
          v91 = v14;
          if ( v89 )
          {
            if ( v13 > 0 )
            {
              v41 = (unsigned int)v13;
              LODWORD(v42) = 0;
              ptr = v83;
              do
              {
                nptr = v86;
                do
                {
                  if ( (_DWORD)v9 )
                    goto LABEL_121;
                  if ( !v10 )
                  {
                    LODWORD(v42) = (src[(int)v42] == 13) + (_DWORD)v42;
                    if ( (int)v42 < v13 )
                      LODWORD(v42) = v42 + (src[(int)v42] == 10);
                  }
                  if ( (int)v42 < v13 )
                  {
                    v43 = v10;
                    v44 = _ctype_b_loc();
                    v41 = (unsigned int)v13;
                    v45 = *v44;
                    v46 = v43;
                    v10 = v13 + v43 - v42;
                    v47 = &v101[v43 + 1];
                    v48 = 0LL;
                    while ( (unsigned __int64)(v46 + v48) <= 0x1E )
                    {
                      v49 = src[(int)v42 + v48];
                      if ( (v45[v49] & 0x1000) == 0 )
                        break;
                      *(_WORD *)&v47[v48++ - 1] = (unsigned __int8)v49;
                      if ( (unsigned int)v13 - (__int64)(int)v42 == v48 )
                      {
                        LODWORD(v42) = v13;
                        goto LABEL_97;
                      }
                    }
                    LODWORD(v42) = v48 + v42;
                    v10 = v48 + v46;
                  }
LABEL_97:
                  v50 = (int)v42;
                  v51 = (int)v42 < v41;
                  v42 = v41;
                  if ( !v51 )
                    v42 = v50;
                  while ( v42 != v50 )
                  {
                    v52 = src[v50++];
                    if ( v52 == 13 || v52 == 10 )
                    {
                      LODWORD(v42) = v50 - 1;
                      if ( v52 == 13 )
                        LODWORD(v42) = v50;
                      break;
                    }
                  }
                  if ( v13 <= (int)v42 )
                  {
                    v9 = 0LL;
                    v83 = ptr;
                    goto LABEL_143;
                  }
                  LODWORD(v9) = 0;
                }
                while ( src[(int)v42] != 10 );
                if ( !v10 )
                {
                  v101[0] = 0;
LABEL_150:
                  v83 = ptr;
                  goto end_of_stream;
                }
                if ( v10 == 1 )
                {
                  v53 = 0LL;
                  LODWORD(v9) = 0;
                }
                else
                {
                  v53 = 0LL;
                  LODWORD(v9) = 0;
                  do
                  {
                    v54 = v101[v53];
                    v55 = v54 - 48;
                    v56 = 16 * v9;
                    v57 = v54 + 268435408;
                    v58 = (v54 | 0x20) + 268435369;
                    if ( v55 < 0xAu )
                      v58 = v57;
                    v59 = v56 + v58;
                    v60 = v101[v53 + 1];
                    v61 = v60 - 48;
                    v62 = 16 * v59;
                    v63 = v60 - 48;
                    v64 = (v60 | 0x20) - 87;
                    if ( v61 < 0xAu )
                      v64 = v63;
                    LODWORD(v9) = v62 + v64;
                    v53 += 2LL;
                  }
                  while ( (v10 & 0xFFFFFFFE) != v53 );
                }
                if ( (v10 & 1) != 0 )
                {
                  v65 = v101[v53];
                  v66 = v65 - 48;
                  v67 = v65 - 48;
                  v68 = (v65 | 0x20) - 87;
                  if ( v66 < 0xAu )
                    v68 = v67;
                  LODWORD(v9) = v68 + 16 * v9;
                }
                v101[0] = 0;
                if ( !(_DWORD)v9 )
                  goto LABEL_150;
                LODWORD(v42) = v42 + 1;
                v10 = 0;
LABEL_121:
                v85 = v10;
                v69 = v13 - v42;
                if ( (int)v9 <= v13 - (int)v42 )
                  v69 = v9;
                v87 = v69;
                v70 = v86 + v69;
                v86 = v70;
                if ( v70 <= (unsigned int)v98 )
                {
                  v72 = ptr;
                }
                else
                {
                  v71 = (unsigned int)v99;
                  if ( (int)v99 < (int)v70 )
                    v71 = v70;
                  v98 = v71;
                  v72 = (char *)realloc(ptr, v71);
                  if ( !v72 )
                  {
                    v81 = ptr;
                    goto LABEL_155;
                  }
                }
                v83 = v72;
                memcpy(&v72[nptr], &src[(int)v42], v87);
                LODWORD(v42) = v87 + v42;
                v9 = (unsigned int)v9 - v87;
                ptr = v83;
                v10 = v85;
                v41 = (unsigned int)v13;
              }
              while ( (int)v42 < v13 );
            }
          }
          else
          {
            v73 = v86;
            v74 = v99 - v86;
            if ( v13 + v86 <= (int)v99 )
              v74 = v13;
            if ( (int)v99 <= 0 )
              v74 = v13;
            v75 = v86 + v74;
            v76 = v98;
            if ( v86 + v74 <= (unsigned int)v98 )
            {
              v78 = v83;
            }
            else
            {
              v76 = (unsigned int)v99;
              if ( (int)v99 < v75 )
                v76 = (unsigned int)v75;
              v77 = (char *)realloc(v83, v76);
              v73 = v86;
              v78 = v77;
              if ( !v77 )
              {
                v81 = v83;
LABEL_155:
                free(v81);
                v79 = v6;
                goto LABEL_148;
              }
            }
            v98 = v76;
            memcpy(&v78[v73], src, v74);
            v83 = v78;
            v86 += v74;
            v10 = v84;
            v9 = v90;
          }
LABEL_143:
          v8 = v99;
          v4 = s;
          if ( (int)v99 > 0 && v86 >= (int)v99 )
            break;
          goto LABEL_6;
        }
      }
    }
end_of_stream:
    free(v6);
    *size = v86;
    if ( v86 )
      return v83;
    free(v83);
  }
  else
  {
    *size = -1;
  }
  return 0LL;
}
