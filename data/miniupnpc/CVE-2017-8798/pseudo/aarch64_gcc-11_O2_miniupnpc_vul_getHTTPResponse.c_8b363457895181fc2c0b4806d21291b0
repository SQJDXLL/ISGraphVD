void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // x22
  char *v4; // x21
  char *v5; // x20
  unsigned int v6; // w19
  int v7; // w26
  unsigned int v8; // w23
  int v9; // w27
  unsigned int v10; // w9
  char *v11; // x0
  int v12; // w9
  int v13; // w7
  int v14; // w2
  int v15; // w0
  signed int v16; // w1
  signed int v17; // w0
  int v18; // w24
  unsigned int v19; // w28
  int v20; // w2
  char *v21; // x0
  char *v23; // x0
  signed int v24; // w27
  int v25; // w19
  const char *v26; // x21
  int v27; // w20
  int v28; // w12
  int v29; // w2
  int v30; // w1
  int v31; // w28
  int v32; // w0
  __int64 v33; // x24
  bool v35; // zf
  signed int v36; // w7
  int v37; // w9
  const char *v38; // x1
  unsigned int v39; // w0
  char *v40; // x24
  int v41; // w28
  int v42; // w20
  int v43; // w22
  char *v44; // x27
  char *v45; // x25
  unsigned int v46; // w21
  int v47; // w2
  size_t v48; // x1
  char *v49; // x0
  char *v50; // x1
  int v51; // w19
  int v52; // w0
  __int64 v53; // x21
  const unsigned __int16 **v54; // x0
  char *v55; // x1
  const unsigned __int16 *v56; // x8
  int v57; // w0
  __int64 v59; // x1
  __int64 v60; // x2
  char *v61; // x0
  char *v63; // x3
  int v64; // t1
  int v65; // w0
  const char *v67; // x22
  int v68; // w0
  int v69; // w0
  bool v72; // zf
  const char *v73; // x22
  int v74; // w2
  char *v75; // x0
  int v76; // w0
  __int64 v77; // x0
  int v78; // w2
  int v80; // w28
  int v81; // w23
  char *v83; // x0
  char *v84; // x0
  unsigned int content_buf_len; // [xsp+60h] [xbp+60h]
  int content_length; // [xsp+64h] [xbp+64h]
  char *content_buf; // [xsp+68h] [xbp+68h]
  int header_buf; // [xsp+70h] [xbp+70h]
  char *header_bufa; // [xsp+70h] [xbp+70h]
  int header_bufb; // [xsp+70h] [xbp+70h]
  unsigned int content_buf_used; // [xsp+78h] [xbp+78h]
  signed int header_buf_used_0; // [xsp+7Ch] [xbp+7Ch]
  unsigned int header_buf_used_0a; // [xsp+7Ch] [xbp+7Ch]
  unsigned int header_buf_used_0b; // [xsp+7Ch] [xbp+7Ch]
  unsigned int chunksize_buf_index; // [xsp+80h] [xbp+80h]
  char *v97; // [xsp+88h] [xbp+88h]
  char *v98; // [xsp+90h] [xbp+90h]
  size_t v100; // [xsp+B0h] [xbp+B0h]
  unsigned int header_buf_len; // [xsp+B8h] [xbp+B8h]
  int valuestart; // [xsp+BCh] [xbp+BCh]
  char chunksize_buf[32]; // [xsp+D8h] [xbp+D8h] BYREF
  char buf[2048]; // [xsp+F8h] [xbp+F8h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800uLL);
  if ( !v3 )
  {
    content_buf = 0LL;
    *size = -1;
    return content_buf;
  }
  content_buf = (char *)malloc(0x800uLL);
  if ( !content_buf )
  {
    free(v3);
    *size = -1;
    return content_buf;
  }
  v4 = buf;
  v5 = chunksize_buf;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  content_buf_len = 2048;
  header_buf_len = 2048;
  content_length = -1;
  header_buf = 0;
  content_buf_used = 0;
  chunksize_buf_index = 0;
  chunksize_buf[0] = 0;
  while ( 1 )
  {
    while ( 1 )
    {
      v9 = receivedata((unsigned int)s, v4, 2048LL, 5000LL, 0LL);
      if ( v9 <= 0 )
      {
        v80 = v7;
        v81 = v7;
        goto end_of_stream;
      }
      if ( chunksize_buf_index )
      {
        if ( header_buf )
          goto LABEL_53;
LABEL_23:
        v18 = v7 + v9;
        v19 = v7 + v9;
        if ( content_length <= 0 )
        {
          if ( content_buf_len < v18 )
          {
            v74 = v7 + v9;
            if ( content_length < v18 )
              goto LABEL_142;
            goto LABEL_146;
          }
        }
        else
        {
          if ( content_length < v18 )
          {
            v18 = content_length;
            v20 = content_length;
            v9 = content_length - v7;
            if ( content_length <= content_buf_len )
              goto LABEL_26;
            v74 = content_length;
            v19 = content_length;
LABEL_142:
            header_bufb = v74;
            v75 = (char *)realloc(content_buf, v19);
            if ( !v75 )
            {
              v83 = content_buf;
LABEL_167:
              content_buf = 0LL;
              free(v83);
              v84 = v3;
              goto LABEL_168;
            }
            v20 = header_bufb;
            content_buf_len = v19;
            v18 = header_bufb;
            content_buf = v75;
LABEL_26:
            header_buf = 0;
            v21 = &content_buf[v7];
            v7 = v20;
            memcpy(v21, v4, v9);
            goto LABEL_27;
          }
          if ( content_buf_len < v18 )
          {
LABEL_146:
            v74 = v7 + v9;
            v19 = content_length;
            goto LABEL_142;
          }
        }
        v20 = v7 + v9;
        goto LABEL_26;
      }
      v10 = v9 + content_buf_used;
      if ( v9 + content_buf_used <= header_buf_len )
        goto LABEL_11;
      v11 = (char *)realloc(v3, v10);
      v10 = v9 + content_buf_used;
      if ( !v11 )
      {
        free(v3);
        v84 = content_buf;
        content_buf = 0LL;
LABEL_168:
        free(v84);
        *size = -1;
        return content_buf;
      }
      v3 = v11;
      header_buf_len = v9 + content_buf_used;
LABEL_11:
      header_buf_used_0 = v10;
      memcpy(&v3[content_buf_used], v4, v9);
      v12 = header_buf_used_0;
      v13 = 0;
      v14 = header_buf_used_0 - 1;
      if ( header_buf_used_0 - 1 > 0 )
        break;
LABEL_21:
      content_buf_used = header_buf_used_0;
    }
    while ( 1 )
    {
LABEL_12:
      v15 = (unsigned __int8)v3[v13];
      v16 = v13 + 1;
      if ( v15 != 13 )
      {
LABEL_13:
        if ( v15 == 10 )
        {
          v13 += 2;
          if ( v3[v16] == 10 )
            break;
          goto LABEL_20;
        }
        goto LABEL_14;
      }
      while ( 1 )
      {
        v17 = v13 + 2;
        if ( v3[v16] != 10 )
        {
          if ( v14 <= v17 )
            goto LABEL_21;
          v13 += 2;
          goto LABEL_12;
        }
        v16 = v13 + 3;
        if ( header_buf_used_0 > v17 && v3[v17] == 13 )
          break;
LABEL_14:
        if ( v14 <= v16 )
          goto LABEL_21;
        v13 = v16++;
        v15 = (unsigned __int8)v3[v13];
        if ( v15 != 13 )
          goto LABEL_13;
      }
      v13 += 4;
      if ( header_buf_used_0 > v16 && v3[v16] == 10 )
        break;
LABEL_20:
      if ( v14 <= v13 )
        goto LABEL_21;
    }
    v24 = v13;
    header_buf_used_0a = v6;
    v25 = v12;
    v97 = v4;
    v98 = v5;
    v26 = v3;
    v27 = v13 - 1;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    do
    {
      v32 = (unsigned __int8)v26[v31];
      v33 = v31;
      if ( v30 > 0 && v29 <= v30 )
      {
        if ( v32 != 58 )
        {
          v35 = v32 == 13 || v32 == 10;
          if ( !v35 )
          {
LABEL_49:
            ++v31;
            continue;
          }
          goto LABEL_110;
        }
        v77 = v31 + 1;
        while ( 1 )
        {
          v78 = (unsigned __int8)v26[v77];
          v28 = v77;
          if ( v78 != 32 && v78 != 9 )
            break;
          if ( v27 <= (int)++v77 - 1 )
          {
            ++v28;
            break;
          }
        }
        v29 = v31;
        v31 = v28;
      }
      else
      {
        if ( v32 != 13 && v32 != 10 )
          goto LABEL_49;
        if ( v30 )
          v72 = 1;
        else
          v72 = status_code == 0LL;
        if ( !v72 )
        {
          if ( v31 > 0 )
          {
            v73 = v26 + 1;
            while ( 1 )
            {
              if ( *(v73 - 1) == 32 )
              {
                if ( (*status_code & 0x80000000) == 0 )
                  goto LABEL_110;
                *status_code = strtol(v73, 0uLL, 10);
              }
              if ( &v26[v31 - 1 + 2] == ++v73 )
                goto LABEL_110;
            }
          }
          goto LABEL_110;
        }
        valuestart = v28;
        if ( v29 <= v30 || v28 <= v29 )
          goto LABEL_110;
        v67 = &v26[v30];
        v100 = v29 - v30;
        if ( strncasecmp(v67, "content-length", v100) )
        {
          if ( !strncasecmp(v67, "transfer-encoding", v100) )
          {
            v35 = strncasecmp(&v26[valuestart], "chunked", 7uLL) == 0;
            v68 = header_buf;
            if ( v35 )
              v68 = 1;
            header_buf = v68;
          }
LABEL_110:
          if ( v25 > v31 )
            goto LABEL_113;
LABEL_161:
          v29 = v31;
          v30 = v31;
          v28 = 0;
          ++v31;
          continue;
        }
        content_length = strtol(&v26[valuestart], 0uLL, 10);
        if ( v25 <= v31 )
          goto LABEL_161;
        do
        {
LABEL_113:
          v69 = (unsigned __int8)v26[v33];
          v30 = v33;
          v31 = v33 + 1;
          if ( v69 != 13 && v69 != 10 )
          {
            v29 = v33;
            v28 = 0;
            goto LABEL_50;
          }
          ++v33;
        }
        while ( v25 > (int)v33 );
        v76 = v30 + 2;
        v29 = v31;
        v30 = v31;
        v28 = 0;
        v31 = v76;
      }
LABEL_50:
      ;
    }
    while ( v27 > v31 );
    v36 = v24;
    v3 = (char *)v26;
    v37 = v25;
    v9 = v25 - v24;
    v38 = &v26[v36];
    v4 = v97;
    v5 = v98;
    v6 = header_buf_used_0a;
    content_buf_used = v37;
    chunksize_buf_index = v36;
    memcpy(v97, v38, v9);
    if ( !header_buf )
      goto LABEL_23;
    v18 = v7;
    if ( v9 <= 0 )
      goto LABEL_27;
LABEL_53:
    v39 = v9 - 1;
    v40 = v5;
    v41 = 0;
    v42 = v6;
    header_bufa = v3;
    v43 = v9;
    v44 = v4;
    header_buf_used_0b = v39;
    v45 = content_buf;
LABEL_67:
    v51 = v7;
    if ( !v42 )
      break;
LABEL_54:
    if ( v43 - v41 > v42 )
      v46 = v42;
    else
      v46 = v43 - v41;
    v7 += v46;
    if ( v46 + v51 > content_buf_len )
    {
      if ( v7 <= content_length )
        v47 = content_length;
      else
        v47 = v46 + v51;
      if ( v7 <= content_length )
        v48 = (unsigned int)content_length;
      else
        v48 = (unsigned int)v7;
      content_buf_len = v47;
      v49 = (char *)realloc(v45, v48);
      if ( !v49 )
      {
        v3 = header_bufa;
        v83 = v45;
        goto LABEL_167;
      }
      v45 = v49;
    }
    v50 = &v44[v41];
    v41 += v46;
    memcpy(&v45[v51], v50, v46);
    v42 -= v46;
    if ( v41 < v43 )
      goto LABEL_67;
    v6 = v42;
    v5 = v40;
    v4 = v44;
    v18 = v7;
    content_buf = v45;
    v3 = header_bufa;
    header_buf = 1;
LABEL_27:
    if ( content_length > 0 && content_length <= v18 )
    {
      free(v3);
      *size = v18;
      if ( v7 )
        return content_buf;
LABEL_33:
      v23 = content_buf;
      content_buf = 0LL;
      free(v23);
      return content_buf;
    }
  }
  if ( v8 )
    goto LABEL_71;
  v52 = (unsigned __int8)v44[v41];
  if ( v52 != 13 )
  {
    if ( v52 != 10 )
      goto LABEL_71;
    goto LABEL_158;
  }
  if ( ++v41 >= v43 )
  {
    v6 = 0;
    v4 = v44;
    v5 = v40;
    v8 = 0;
    content_buf = v45;
    v3 = header_bufa;
LABEL_134:
    v18 = v7;
    header_buf = 1;
    goto LABEL_27;
  }
  v53 = v41;
  if ( v44[v41] == 10 )
  {
LABEL_158:
    ++v41;
LABEL_71:
    if ( v41 >= v43 )
    {
      v4 = v44;
      v6 = 0;
      v5 = v40;
      content_buf = v45;
      v3 = header_bufa;
      goto LABEL_134;
    }
    v53 = v41;
  }
  v54 = _ctype_b_loc();
  v55 = &v44[v53];
  v56 = *v54;
  while ( 1 )
  {
    v57 = (unsigned __int8)*v55;
    if ( (v56[(unsigned __int8)*v55] & 0x1000) == 0 || v8 > 0x1E )
      break;
    v40[v8] = v57;
    ++v41;
    ++v55;
    v40[v8 + 1] = 0;
    if ( v41 >= v43 )
    {
      v4 = v44;
      v6 = 0;
      ++v8;
      v5 = v40;
      content_buf = v45;
      v3 = header_bufa;
      goto LABEL_134;
    }
    ++v8;
  }
  if ( v41 >= v43 )
    goto LABEL_133;
  v59 = v41;
  v60 = header_buf_used_0b - v41 + (__int64)v41;
  while ( 1 )
  {
    v41 = v59;
    if ( v57 == 10 || v57 == 13 )
      break;
    if ( v60 == v59 )
      goto LABEL_133;
    v61 = &v44[v59++];
    v57 = (unsigned __int8)v61[1];
  }
  if ( (int)v59 >= v43 )
    goto LABEL_133;
  if ( v57 != 13 )
    goto LABEL_92;
  v41 = v59 + 1;
  if ( (int)v59 + 1 >= v43 )
  {
LABEL_133:
    v3 = header_bufa;
    v4 = v44;
    v6 = 0;
    v5 = v40;
    content_buf = v45;
    goto LABEL_134;
  }
  v57 = (unsigned __int8)v44[v41];
LABEL_92:
  if ( v57 != 10 )
    goto LABEL_67;
  if ( v8 )
  {
    v63 = chunksize_buf;
    v42 = 0;
    do
    {
      v64 = (unsigned __int8)*v63++;
      v65 = (v64 | 0x20) + 16 * v42 - 0x57;
      v42 = 16 * v42 - 0x30 + v64;
      if ( (unsigned __int8)(v64 - 0x30) > 9u )
        v42 = v65;
    }
    while ( &chunksize_buf[v8] != v63 );
    chunksize_buf[0] = 0;
    ++v41;
    if ( v42 )
    {
      v8 = 0;
      goto LABEL_54;
    }
  }
  v3 = header_bufa;
  v80 = v7;
  v81 = v7;
  content_buf = v45;
end_of_stream:
  free(v3);
  *size = v81;
  if ( !v80 )
    goto LABEL_33;
  return content_buf;
}
