void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  unsigned int v4; // r13d
  char *v5; // rax
  char *v6; // r15
  char *v7; // rax
  __int64 v8; // rbx
  unsigned int v9; // r9d
  int v10; // r14d
  int v11; // eax
  int v12; // r12d
  __int64 v13; // r13
  char *v14; // rbx
  int v15; // ebp
  int v16; // eax
  int v17; // ecx
  char v18; // bl
  __int64 v19; // rsi
  __int64 v20; // rdx
  int v21; // ecx
  int v22; // esi
  int v23; // r8d
  int v24; // ebx
  int v25; // ecx
  int v26; // eax
  int v27; // esi
  __int64 v28; // rbp
  char v29; // dl
  char *v30; // r13
  __int64 v31; // rdx
  int v32; // edx
  const char *v33; // rbx
  int v34; // eax
  int v35; // ecx
  const char *v36; // rbx
  int v37; // eax
  __int64 v38; // rcx
  char v39; // bl
  int v40; // ebp
  int v41; // ecx
  int v42; // esi
  int v43; // r13d
  int v44; // edi
  char v45; // dl
  char *v46; // rbx
  __int64 v47; // rdx
  int v48; // edx
  const char *v49; // rdi
  size_t v50; // rbp
  int v51; // eax
  int v52; // ecx
  __int64 v53; // rcx
  char v54; // bl
  __int64 v55; // r10
  __int64 v56; // r13
  unsigned int v57; // ebx
  const unsigned __int16 **v58; // rax
  const unsigned __int16 *v59; // r8
  __int64 v60; // rax
  char *v61; // rsi
  __int64 v62; // rdx
  __int64 v63; // rbx
  __int64 v64; // rax
  bool v65; // cc
  char v66; // cl
  __int64 v67; // rcx
  int v68; // esi
  unsigned __int8 v69; // di
  int v70; // ebx
  int v71; // ebp
  int v72; // esi
  int v73; // esi
  int v74; // ebx
  unsigned __int8 v75; // di
  int v76; // esi
  int v77; // ebp
  int v78; // ebx
  int v79; // eax
  unsigned __int8 v80; // cl
  int v81; // edx
  int v82; // eax
  unsigned int v83; // ecx
  unsigned int v84; // ecx
  size_t v85; // rsi
  char *v86; // rax
  unsigned int v87; // edx
  int v88; // ebp
  int v89; // r13d
  size_t v90; // rbx
  char *v91; // rax
  char *v92; // r12
  char *v93; // rdi
  char *v95; // rdi
  char *ptr; // [rsp+8h] [rbp-8E0h]
  char *v97; // [rsp+10h] [rbp-8D8h]
  int v98; // [rsp+18h] [rbp-8D0h]
  unsigned int v99; // [rsp+1Ch] [rbp-8CCh]
  unsigned int v100; // [rsp+1Ch] [rbp-8CCh]
  int v101; // [rsp+20h] [rbp-8C8h]
  __int64 v102; // [rsp+30h] [rbp-8B8h]
  __int64 v103; // [rsp+30h] [rbp-8B8h]
  unsigned int v104; // [rsp+30h] [rbp-8B8h]
  int v105; // [rsp+38h] [rbp-8B0h]
  __int64 v106; // [rsp+40h] [rbp-8A8h]
  __int64 v107; // [rsp+40h] [rbp-8A8h]
  size_t v108; // [rsp+48h] [rbp-8A0h]
  int v109; // [rsp+48h] [rbp-8A0h]
  unsigned int nptr; // [rsp+50h] [rbp-898h]
  __int64 v111; // [rsp+58h] [rbp-890h]
  int v112; // [rsp+64h] [rbp-884h]
  unsigned int v114; // [rsp+6Ch] [rbp-87Ch]
  __int64 v116; // [rsp+78h] [rbp-870h]
  __int64 v117; // [rsp+80h] [rbp-868h]
  int *v118; // [rsp+88h] [rbp-860h]
  char v119[32]; // [rsp+90h] [rbp-858h] BYREF
  char src[2104]; // [rsp+B0h] [rbp-838h] BYREF

  v4 = s;
  if ( status_code )
    *status_code = -1;
  v5 = (char *)malloc(0x800uLL);
  if ( !v5 )
  {
    *size = -1;
    return 0LL;
  }
  v6 = v5;
  v7 = (char *)malloc(0x800uLL);
  if ( !v7 )
  {
    free(v6);
    *size = -1;
    return 0LL;
  }
  v97 = v7;
  v118 = status_code;
  v119[0] = 0;
  v114 = 2048;
  v105 = -1;
  v98 = 0;
  v8 = 0LL;
  v106 = 0LL;
  v116 = 2048LL;
  v101 = 0;
  v9 = 0;
  v10 = 0;
  while ( 1 )
  {
    v111 = v8;
    v99 = v9;
    v11 = receivedata(v4, src, 2048LL, 5000LL, 0LL);
    if ( v11 <= 0 )
      break;
    v12 = v11;
    v13 = v106;
    v14 = v6;
    while ( 1 )
    {
      if ( v10 )
      {
        v6 = v14;
        goto LABEL_118;
      }
      v15 = v12 + v13;
      if ( v12 + (int)v13 <= v114 )
      {
        v6 = v14;
      }
      else
      {
        v6 = (char *)realloc(v14, (unsigned int)v15);
        v114 = v12 + v13;
        if ( !v6 )
        {
          free(v14);
          v93 = v97;
LABEL_185:
          free(v93);
          *size = -1;
          return 0LL;
        }
      }
      memcpy(&v6[(unsigned int)v13], src, (unsigned int)v12);
      v13 = (unsigned int)(v12 + v13);
      if ( v15 >= 2 )
        break;
LABEL_9:
      v10 = 0;
      v12 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
      v14 = v6;
      if ( v12 <= 0 )
        goto end_of_stream;
    }
    v16 = v15 - 1;
    v17 = 0;
    while ( 1 )
    {
      v18 = v6[v17];
      if ( v18 == 10 )
        break;
      if ( v18 != 13 )
      {
        LODWORD(v19) = v17;
LABEL_32:
        v10 = 0;
        v17 = v19 + 1;
        if ( (int)v19 + 1 >= v16 )
          goto LABEL_8;
        goto LABEL_37;
      }
      if ( v6[v17 + 1] != 10 )
      {
        LODWORD(v20) = v17 + 1;
LABEL_35:
        LODWORD(v19) = v20;
        v10 = 0;
LABEL_36:
        v17 = v19 + 1;
        if ( (int)v19 + 1 >= v16 )
          goto LABEL_8;
        goto LABEL_37;
      }
      v19 = v17 + 2LL;
      if ( v17 + 2 >= (int)v13 )
        goto LABEL_32;
      v10 = 0;
      if ( v6[v19] != 13 )
        goto LABEL_36;
      v20 = v17 + 3LL;
      if ( (int)v20 >= (int)v13 )
        goto LABEL_35;
      v21 = v17 + 4;
      if ( v6[v20] != 10 )
        v21 = 0;
      v10 = v21;
      v17 = v20 + 1;
      if ( (int)v20 + 1 >= v16 )
        goto LABEL_8;
LABEL_37:
      if ( v10 )
        goto LABEL_8;
    }
    v22 = v17 + 1;
    v10 = v17 + 2;
    if ( v6[v17 + 1] != 10 )
      v10 = 0;
    v17 += 2;
    if ( v22 + 1 < v16 )
      goto LABEL_37;
LABEL_8:
    if ( !v10 )
      goto LABEL_9;
    v107 = v13;
    if ( v10 >= 2 )
    {
      v23 = v10 - 1;
      v117 = (int)v13;
      if ( v118 )
      {
        v102 = -(__int64)v23;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while ( 1 )
        {
          v28 = (unsigned int)v27;
          v29 = v6[v27];
          if ( v29 == 58 && v26 > 0 && v25 <= v26 )
          {
            if ( v27 < v23 )
            {
              v30 = &v6[v27 + 1];
              v31 = 0LL;
              do
              {
                if ( *v30 != 9 && *v30 != 32 )
                {
                  v27 -= v31;
                  goto LABEL_43;
                }
                --v31;
                ++v30;
              }
              while ( v27 + v102 != v31 );
              v27 = v23;
              v25 = v28;
              v24 = v10;
              goto LABEL_45;
            }
LABEL_43:
            v24 = v27 + 1;
            goto LABEL_44;
          }
          if ( v29 != 13 && v29 != 10 )
            goto LABEL_45;
          if ( !v26 )
          {
            if ( v27 <= 0 )
              goto LABEL_75;
            v36 = v6 + 1;
            while ( 1 )
            {
              if ( *(v36 - 1) == 32 )
              {
                if ( *v118 >= 0 )
                {
LABEL_74:
                  LODWORD(v28) = v27;
                  goto LABEL_75;
                }
                v37 = strtol(v36, 0LL, 10);
                v23 = v10 - 1;
                *v118 = v37;
              }
              ++v36;
              if ( !--v28 )
                goto LABEL_74;
            }
          }
          v32 = v25 - v26;
          if ( v25 <= v26 || v24 <= v25 )
          {
LABEL_75:
            if ( v27 < (int)v107 )
              goto LABEL_76;
          }
          else
          {
            v112 = v24;
            v33 = &v6[v26];
            v108 = v32;
            if ( !strncasecmp(v33, "content-length", v32) )
            {
              v105 = strtol(&v6[v112], 0LL, 10);
              v23 = v10 - 1;
              if ( v27 < (int)v107 )
                goto LABEL_76;
            }
            else
            {
              if ( !strncasecmp(v33, "transfer-encoding", v108) )
              {
                v34 = strncasecmp(&v6[v112], "chunked", 7uLL);
                v35 = v98;
                if ( !v34 )
                  v35 = 1;
                v98 = v35;
              }
              v23 = v10 - 1;
              if ( v27 < (int)v107 )
              {
LABEL_76:
                v38 = 0LL;
                LODWORD(v28) = v107;
                do
                {
                  v39 = v6[v27 + v38];
                  if ( v39 != 13 && v39 != 10 )
                  {
                    v27 += v38;
                    v24 = 0;
                    v26 = v27;
                    v25 = v27;
                    goto LABEL_45;
                  }
                  ++v38;
                }
                while ( v117 - v27 != v38 );
                v24 = 0;
                v27 = v107;
                v26 = v107;
                goto LABEL_44;
              }
            }
          }
          v24 = 0;
          v26 = v27;
LABEL_44:
          v25 = v28;
LABEL_45:
          if ( ++v27 >= v23 )
            goto LABEL_117;
        }
      }
      v103 = -(__int64)v23;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      while ( 2 )
      {
        v44 = v43;
        v45 = v6[v43];
        if ( v45 == 58 && v42 > 0 && v41 <= v42 )
        {
          if ( v43 < v23 )
          {
            v46 = &v6[v43 + 1];
            v47 = 0LL;
            do
            {
              if ( *v46 != 32 && *v46 != 9 )
              {
                v43 -= v47;
                goto LABEL_85;
              }
              --v47;
              ++v46;
            }
            while ( v103 + v43 != v47 );
            v43 = v23;
            v41 = v44;
            v40 = v10;
            goto LABEL_87;
          }
LABEL_85:
          v40 = v43 + 1;
        }
        else
        {
          if ( v45 != 13 && v45 != 10 )
            goto LABEL_87;
          v48 = v41 - v42;
          if ( v41 > v42 && v40 > v41 )
          {
            v109 = v40;
            v49 = &v6[v42];
            v50 = v48;
            if ( !strncasecmp(v49, "content-length", v48) )
            {
              v105 = strtol(&v6[v109], 0LL, 10);
            }
            else if ( !strncasecmp(v49, "transfer-encoding", v50) )
            {
              v51 = strncasecmp(&v6[v109], "chunked", 7uLL);
              v52 = v98;
              if ( !v51 )
                v52 = 1;
              v98 = v52;
            }
            v23 = v10 - 1;
            v44 = v43;
          }
          if ( v43 < (int)v107 )
          {
            v53 = 0LL;
            do
            {
              v54 = v6[v43 + v53];
              if ( v54 != 13 && v54 != 10 )
              {
                v43 += v53;
                v40 = 0;
                v42 = v43;
                v41 = v43;
                goto LABEL_87;
              }
              ++v53;
            }
            while ( v117 - v43 != v53 );
            v40 = 0;
            v43 = v107;
            v42 = v107;
            v41 = v107;
LABEL_87:
            if ( ++v43 >= v23 )
              goto LABEL_117;
            continue;
          }
          v40 = 0;
          v42 = v43;
        }
        break;
      }
      v41 = v44;
      goto LABEL_87;
    }
LABEL_117:
    v13 = v107;
    v12 = v107 - v10;
    memcpy(src, &v6[v10], (int)v107 - v10);
LABEL_118:
    v9 = v99;
    v8 = v111;
    v106 = v13;
    if ( v98 )
    {
      if ( v12 > 0 )
      {
        v55 = (unsigned int)v12;
        LODWORD(v56) = 0;
        ptr = v97;
        do
        {
          v104 = v101;
          do
          {
            if ( (_DWORD)v8 )
              goto LABEL_157;
            if ( !v9 )
            {
              LODWORD(v56) = (src[(int)v56] == 13) + (_DWORD)v56;
              if ( (int)v56 < v12 )
                LODWORD(v56) = v56 + (src[(int)v56] == 10);
            }
            if ( (int)v56 < v12 )
            {
              v57 = v9;
              v58 = _ctype_b_loc();
              v55 = (unsigned int)v12;
              v59 = *v58;
              v60 = v57;
              v9 = v12 + v57 - v56;
              v61 = &v119[v57 + 1];
              v62 = 0LL;
              while ( (unsigned __int64)(v60 + v62) <= 0x1E )
              {
                v63 = src[(int)v56 + v62];
                if ( (v59[v63] & 0x1000) == 0 )
                  break;
                *(_WORD *)&v61[v62++ - 1] = (unsigned __int8)v63;
                if ( (unsigned int)v12 - (__int64)(int)v56 == v62 )
                {
                  LODWORD(v56) = v12;
                  goto LABEL_133;
                }
              }
              LODWORD(v56) = v62 + v56;
              v9 = v62 + v60;
            }
LABEL_133:
            v64 = (int)v56;
            v65 = (int)v56 < v55;
            v56 = v55;
            if ( !v65 )
              v56 = v64;
            while ( v56 != v64 )
            {
              v66 = src[v64++];
              if ( v66 == 13 || v66 == 10 )
              {
                LODWORD(v56) = v64 - 1;
                if ( v66 == 13 )
                  LODWORD(v56) = v64;
                break;
              }
            }
            if ( v12 <= (int)v56 )
            {
              v8 = 0LL;
              v97 = ptr;
              goto LABEL_177;
            }
            LODWORD(v8) = 0;
          }
          while ( src[(int)v56] != 10 );
          if ( !v9 )
          {
            v119[0] = 0;
LABEL_187:
            v97 = ptr;
            goto end_of_stream;
          }
          if ( v9 == 1 )
          {
            v67 = 0LL;
            LODWORD(v8) = 0;
          }
          else
          {
            v67 = 0LL;
            LODWORD(v8) = 0;
            do
            {
              v68 = v119[v67];
              v69 = v68 - 48;
              v70 = 16 * v8;
              v71 = v68 + 268435408;
              v72 = (v68 | 0x20) + 268435369;
              if ( v69 < 0xAu )
                v72 = v71;
              v73 = v70 + v72;
              v74 = v119[v67 + 1];
              v75 = v74 - 48;
              v76 = 16 * v73;
              v77 = v74 - 48;
              v78 = (v74 | 0x20) - 87;
              if ( v75 < 0xAu )
                v78 = v77;
              LODWORD(v8) = v76 + v78;
              v67 += 2LL;
            }
            while ( (v9 & 0xFFFFFFFE) != v67 );
          }
          if ( (v9 & 1) != 0 )
          {
            v79 = v119[v67];
            v80 = v79 - 48;
            v81 = v79 - 48;
            v82 = (v79 | 0x20) - 87;
            if ( v80 < 0xAu )
              v82 = v81;
            LODWORD(v8) = v82 + 16 * v8;
          }
          v119[0] = 0;
          if ( !(_DWORD)v8 )
            goto LABEL_187;
          LODWORD(v56) = v56 + 1;
          v9 = 0;
LABEL_157:
          v100 = v9;
          v83 = v12 - v56;
          if ( (int)v8 <= v12 - (int)v56 )
            v83 = v8;
          nptr = v83;
          v84 = v101 + v83;
          v101 = v84;
          if ( v84 <= (unsigned int)v116 )
          {
            v86 = ptr;
          }
          else
          {
            v85 = (unsigned int)v105;
            if ( v105 < (int)v84 )
              v85 = v84;
            v116 = v85;
            v86 = (char *)realloc(ptr, v85);
            if ( !v86 )
            {
              v95 = ptr;
              goto LABEL_192;
            }
          }
          v97 = v86;
          memcpy(&v86[v104], &src[(int)v56], nptr);
          LODWORD(v56) = nptr + v56;
          v8 = (unsigned int)v8 - nptr;
          ptr = v97;
          v9 = v100;
          v55 = (unsigned int)v12;
        }
        while ( (int)v56 < v12 );
      }
LABEL_177:
      v4 = s;
      if ( v105 > 0 )
        goto LABEL_181;
    }
    else
    {
      v87 = v101;
      v88 = v105 - v101;
      if ( v12 + v101 <= v105 )
        v88 = v12;
      if ( v105 <= 0 )
        v88 = v12;
      v89 = v101 + v88;
      v90 = v116;
      if ( v101 + v88 <= (unsigned int)v116 )
      {
        v92 = v97;
      }
      else
      {
        v90 = (unsigned int)v105;
        if ( v105 < v89 )
          v90 = (unsigned int)v89;
        v91 = (char *)realloc(v97, v90);
        v87 = v101;
        v92 = v91;
        if ( !v91 )
        {
          v95 = v97;
LABEL_192:
          free(v95);
          v93 = v6;
          goto LABEL_185;
        }
      }
      v116 = v90;
      memcpy(&v92[v87], src, v88);
      v97 = v92;
      v101 += v88;
      v9 = v99;
      v8 = v111;
      v4 = s;
      if ( v105 > 0 )
      {
LABEL_181:
        if ( v101 >= v105 )
          break;
      }
    }
  }
end_of_stream:
  free(v6);
  *size = v101;
  if ( v101 )
    return v97;
  free(v97);
  return 0LL;
}
