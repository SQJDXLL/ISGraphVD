void *__cdecl getHTTPResponse(int s, int *size, int *status_code)
{
  void *v3; // eax
  void *v4; // esi
  char *v5; // eax
  unsigned int v6; // ecx
  int v7; // ebx
  unsigned int v8; // edx
  int v9; // edi
  int v10; // eax
  int v11; // ebp
  int v12; // eax
  signed int v13; // esi
  char *v14; // eax
  bool v15; // dl
  int v16; // ecx
  char v17; // dl
  int v18; // edx
  bool v19; // zf
  int v20; // eax
  int v21; // esi
  int v22; // ecx
  int v23; // eax
  int v24; // ebp
  char v25; // al
  const char *v26; // esi
  int *v27; // edx
  int v28; // ebp
  int v29; // eax
  size_t v30; // ebp
  char v31; // dl
  int v32; // eax
  int v33; // ecx
  signed int v34; // ebp
  unsigned int v35; // ebx
  const unsigned __int16 *v36; // eax
  int v37; // ecx
  char v38; // al
  char *v39; // eax
  int v40; // edx
  int v41; // ebx
  int v42; // ecx
  char *v43; // ebx
  unsigned int v44; // edx
  unsigned int v45; // edx
  size_t v46; // ecx
  char *v47; // eax
  unsigned int v48; // edx
  signed int v49; // ebp
  size_t v50; // eax
  char *v51; // eax
  unsigned int v52; // ecx
  char *v53; // esi
  unsigned int v54; // ebp
  char *v56; // eax
  size_t v57; // [esp+8h] [ebp-884h]
  char *ptr; // [esp+1Ch] [ebp-870h]
  char *v59; // [esp+20h] [ebp-86Ch]
  size_t v60; // [esp+24h] [ebp-868h]
  size_t v61; // [esp+24h] [ebp-868h]
  size_t v62; // [esp+24h] [ebp-868h]
  unsigned int v63; // [esp+28h] [ebp-864h]
  char v64; // [esp+30h] [ebp-85Ch]
  int v65; // [esp+34h] [ebp-858h]
  int v66; // [esp+34h] [ebp-858h]
  void *v67; // [esp+38h] [ebp-854h]
  char *v68; // [esp+38h] [ebp-854h]
  char *nptr; // [esp+3Ch] [ebp-850h]
  unsigned int v70; // [esp+40h] [ebp-84Ch]
  unsigned int v71; // [esp+40h] [ebp-84Ch]
  unsigned int v72; // [esp+40h] [ebp-84Ch]
  unsigned int v73; // [esp+44h] [ebp-848h]
  unsigned int v74; // [esp+44h] [ebp-848h]
  int v75; // [esp+48h] [ebp-844h]
  unsigned int v76; // [esp+4Ch] [ebp-840h]
  int v77; // [esp+50h] [ebp-83Ch]
  int v78; // [esp+54h] [ebp-838h]
  unsigned int v79; // [esp+58h] [ebp-834h]
  char v80[32]; // [esp+5Ch] [ebp-830h] BYREF
  char src[2064]; // [esp+7Ch] [ebp-810h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = malloc(0x800u);
  if ( !v3 )
    goto LABEL_137;
  v4 = v3;
  v5 = (char *)malloc(0x800u);
  if ( !v5 )
  {
    free(v4);
LABEL_137:
    *size = -1;
    return 0;
  }
  v59 = v5;
  ptr = (char *)v4;
  v79 = 2048;
  v78 = 0;
  v76 = 2048;
  v63 = 0;
  v80[0] = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = -1;
  do
  {
    v73 = v6;
    v70 = v8;
    v77 = v10;
    v60 = v9;
    do
    {
      v11 = v7;
      v12 = receivedata(s, src, 2048, 5000, 0);
      if ( v12 <= 0 )
        goto end_of_stream;
      v9 = v60;
      v13 = v12;
      if ( v60 )
        goto LABEL_76;
      v7 += v12;
      if ( v12 + v11 <= v79 )
      {
        v14 = ptr;
      }
      else
      {
        v14 = (char *)realloc(ptr, v12 + v11);
        v79 = v13 + v11;
        if ( !v14 )
        {
          free(ptr);
          v56 = v59;
          goto LABEL_139;
        }
      }
      ptr = v14;
      memcpy(&v14[v11], src, v13);
      v15 = 1;
      v9 = 0;
      v60 = 0;
      if ( v7 >= 2 )
      {
        v16 = 0;
        while ( 1 )
        {
          v17 = ptr[v16];
          if ( v17 == 10 )
          {
            v9 = v16 + 2;
            v19 = ptr[v16 + 1] == 10;
            v18 = v16 + 1;
LABEL_23:
            if ( !v19 )
              v9 = 0;
            goto LABEL_29;
          }
          if ( v17 != 13 )
            goto LABEL_27;
          if ( ptr[v16 + 1] != 10 )
            break;
          v18 = v16 + 2;
          if ( v16 + 2 < v7 )
          {
            v9 = 0;
            if ( ptr[v18] != 13 )
              goto LABEL_29;
            v18 = v16 + 3;
            if ( v16 + 3 < v7 )
            {
              v19 = ptr[v16 + 3] == 10;
              v9 = v16 + 4;
              goto LABEL_23;
            }
          }
LABEL_28:
          v9 = 0;
LABEL_29:
          v16 = v18 + 1;
          v15 = v9 == 0;
          if ( v16 >= v7 - 1 || v9 )
            goto LABEL_31;
        }
        ++v16;
LABEL_27:
        v18 = v16;
        goto LABEL_28;
      }
LABEL_31:
      ;
    }
    while ( v15 );
    if ( v9 >= 2 )
    {
      v75 = 0;
      v65 = v13 + v11;
      v20 = v13 + v11 - 1;
      v21 = 0;
      v22 = 0;
      v67 = (void *)v20;
      v23 = 0;
      do
      {
        v61 = v22;
        v64 = ptr[v22];
        if ( v64 == 58 && v75 > 0 && v23 <= v75 )
        {
          v24 = v9 - 1;
          v21 = v22 + 1;
          if ( v22 >= v9 - 1 )
          {
            v23 = v22;
          }
          else
          {
            while ( 1 )
            {
              v25 = ptr[v21];
              if ( v25 != 32 && v25 != 9 )
                break;
              if ( v9 == ++v21 )
              {
                v23 = v22;
                v22 = v9 - 1;
                v21 = v9;
                goto LABEL_74;
              }
            }
            v23 = v22;
            v22 = v21 - 1;
          }
        }
        else
        {
          if ( v64 == 13 || v64 == 10 )
          {
            if ( !status_code || v75 )
            {
              v30 = v23 - v75;
              v31 = ptr[v22];
              if ( v23 > v75 && v21 > v23 )
              {
                if ( !strncasecmp(&ptr[v75], "content-length", v30) )
                {
                  v77 = atoi(&ptr[v21]);
                }
                else if ( !strncasecmp(&ptr[v75], "transfer-encoding", v30) )
                {
                  v32 = strncasecmp(&ptr[v21], "chunked", 7u);
                  v33 = v78;
                  if ( !v32 )
                    v33 = 1;
                  v78 = v33;
                }
                v7 = v65;
                v24 = v9 - 1;
                v22 = v61;
                goto LABEL_66;
              }
              v24 = v9 - 1;
            }
            else
            {
              v24 = v9 - 1;
              if ( v22 > 0 )
              {
                v26 = ptr + 1;
                v27 = status_code;
                v28 = v22;
                do
                {
                  if ( *(v26 - 1) == 32 )
                  {
                    if ( *v27 >= 0 )
                      break;
                    v29 = atoi(v26);
                    v27 = status_code;
                    v22 = v61;
                    *status_code = v29;
                  }
                  ++v26;
                  --v28;
                }
                while ( v28 );
                v24 = v9 - 1;
              }
LABEL_66:
              v31 = v64;
            }
            v21 = 0;
            if ( v22 < v7 )
            {
              while ( v31 == 13 || v31 == 10 )
              {
                if ( v67 == (void *)v22 )
                {
                  v22 = v7;
                  v75 = v7;
                  v23 = v7;
                  goto LABEL_74;
                }
                v31 = ptr[++v22];
              }
            }
            v23 = v22;
            v75 = v22;
            goto LABEL_74;
          }
          v24 = v9 - 1;
        }
LABEL_74:
        ++v22;
      }
      while ( v22 < v24 );
    }
    v13 = v7 - v9;
    memcpy(src, &ptr[v9], v7 - v9);
LABEL_76:
    v8 = v70;
    v6 = v73;
    if ( v78 )
    {
      if ( v13 > 0 )
      {
        v34 = 0;
        v66 = v7;
        v68 = v59;
        do
        {
          nptr = (char *)v63;
          while ( !v6 )
          {
            v35 = v8;
            if ( !v8 )
            {
              v34 += src[v34] == 13;
              if ( v34 < v13 )
                v34 += src[v34] == 10;
            }
            if ( v34 >= v13 )
            {
LABEL_90:
              v8 = v35;
            }
            else
            {
              v36 = *_ctype_b_loc();
              v8 = v35;
              while ( v8 <= 0x1E )
              {
                v37 = src[v34];
                v35 = v8;
                if ( (v36[v37] & 0x1000) == 0 )
                  goto LABEL_90;
                ++v34;
                ++v8;
                v80[v35] = v37;
                v80[v35 + 1] = 0;
                if ( v13 == v34 )
                {
                  v34 = v13;
                  break;
                }
              }
            }
            v7 = v66;
            while ( v34 < v13 )
            {
              v38 = src[v34++];
              if ( v38 == 13 || v38 == 10 )
              {
                if ( v38 != 13 )
                  --v34;
                break;
              }
            }
            v6 = 0;
            if ( v34 >= v13 )
            {
              v59 = v68;
              goto LABEL_133;
            }
            if ( src[v34] == 10 )
            {
              if ( v8 )
              {
                v6 = 0;
                v39 = v80;
                do
                {
                  v71 = v8;
                  v40 = 16 * v6;
                  v41 = *v39;
                  v42 = (v41 | 0x20) - 87;
                  if ( (unsigned __int8)(v41 - 48) < 0xAu )
                    v42 = v41 - 48;
                  ++v39;
                  v6 = v40 + v42;
                  v8 = v71 - 1;
                }
                while ( v71 != 1 );
                v80[0] = 0;
                if ( v6 )
                {
                  v43 = v68;
                  ++v34;
                  v8 = 0;
                  goto LABEL_107;
                }
              }
              else
              {
                v80[0] = 0;
              }
              v59 = v68;
              goto end_of_stream;
            }
          }
          v43 = v68;
LABEL_107:
          v72 = v8;
          v74 = v6;
          v44 = v13 - v34;
          if ( v6 < v13 - v34 )
            v44 = v6;
          v62 = v44;
          v45 = v63 + v44;
          v63 = v45;
          if ( v45 <= v76 )
          {
            v47 = v43;
          }
          else
          {
            v46 = v77;
            if ( v77 < v45 )
              v46 = v45;
            if ( v77 < 0 )
              v46 = v45;
            v76 = v46;
            v47 = (char *)realloc(v43, v46);
            if ( !v47 )
            {
              free(v43);
              goto LABEL_145;
            }
          }
          v59 = v47;
          memcpy(&nptr[(_DWORD)v47], &src[v34], v62);
          v34 += v62;
          v8 = v72;
          v6 = v74 - v62;
          v7 = v66;
          v68 = v59;
        }
        while ( v34 < v13 );
      }
    }
    else
    {
      v48 = v63;
      v49 = v77 - v63;
      if ( v13 + v63 <= v77 )
        v49 = v13;
      if ( v77 <= 0 )
        v49 = v13;
      if ( v49 + v63 <= v76 )
      {
        v52 = v49 + v63;
        v53 = v59;
      }
      else
      {
        v50 = v77;
        if ( v77 < v49 + v63 )
          v50 = v49 + v63;
        if ( v77 < 0 )
          v50 = v49 + v63;
        v76 = v50;
        v51 = (char *)realloc(v59, v50);
        v48 = v63;
        v52 = v49 + v63;
        v53 = v51;
        if ( !v51 )
        {
          free(v59);
LABEL_145:
          v56 = ptr;
LABEL_139:
          free(v56);
          *size = -1;
          return 0;
        }
      }
      v57 = v49;
      v54 = v52;
      memcpy(&v53[v48], src, v57);
      v8 = v70;
      v6 = v73;
      v59 = v53;
      v63 = v54;
    }
LABEL_133:
    v10 = v77;
  }
  while ( v77 <= 0 || v63 < v77 );
end_of_stream:
  free(ptr);
  *size = v63;
  if ( !v63 )
  {
    free(v59);
    return 0;
  }
  return v59;
}
