void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  void *result; // x0
  char *v6; // x21
  char *v7; // x0
  unsigned int v8; // w23
  int v9; // w26
  int v10; // w20
  unsigned int v11; // w25
  int v12; // w9
  __int64 v13; // x10
  int v14; // w22
  unsigned int v15; // w19
  int v16; // w0
  int v17; // w27
  char *v18; // x0
  int v19; // w9
  int v20; // w11
  __int64 v21; // x11
  __int64 v22; // x10
  int v23; // w11
  int v24; // w9
  bool v25; // w10
  int v26; // w19
  int v27; // w27
  int v28; // w9
  int v29; // w8
  int v30; // w22
  int v31; // w28
  __int64 v32; // x9
  int v33; // w12
  __int64 v34; // x19
  const char *v35; // x27
  int *v36; // x9
  unsigned int v37; // w24
  int *v38; // x25
  int v39; // w10
  const char *v40; // x24
  int v41; // w0
  int v42; // w8
  char *v43; // x8
  __int64 i; // x9
  char v45; // t1
  unsigned int v46; // w9
  __int64 v47; // x22
  unsigned int v48; // w24
  unsigned int v49; // w23
  const unsigned __int16 *v50; // x10
  __int64 v51; // x8
  __int64 v52; // x15
  char *v53; // x16
  int v54; // w8
  __int64 v55; // x8
  char *v56; // x9
  int v57; // t1
  int v58; // w11
  int v59; // w10
  unsigned int v60; // w28
  unsigned int v61; // w9
  char *v62; // x25
  size_t v64; // x1
  char *v65; // x0
  int v67; // w22
  unsigned int v68; // w9
  unsigned int v69; // w19
  unsigned int v70; // w27
  size_t v72; // x1
  char *v73; // x0
  char *v74; // x0
  size_t v75; // [xsp+0h] [xbp-8B0h]
  int *v76; // [xsp+18h] [xbp-898h]
  int v77; // [xsp+24h] [xbp-88Ch]
  char *ptr; // [xsp+30h] [xbp-880h]
  char *nptr; // [xsp+38h] [xbp-878h]
  unsigned int v80; // [xsp+44h] [xbp-86Ch]
  unsigned int v81; // [xsp+48h] [xbp-868h]
  int v82; // [xsp+54h] [xbp-85Ch]
  int v84; // [xsp+6Ch] [xbp-844h]
  int v85; // [xsp+6Ch] [xbp-844h]
  __int64 v86; // [xsp+70h] [xbp-840h]
  __int64 v87; // [xsp+70h] [xbp-840h]
  int v88; // [xsp+78h] [xbp-838h]
  unsigned int v89; // [xsp+78h] [xbp-838h]
  unsigned int v90; // [xsp+84h] [xbp-82Ch]
  char v91[32]; // [xsp+88h] [xbp-828h] BYREF
  char src[2056]; // [xsp+A8h] [xbp-808h] BYREF

  if ( status_code )
    *status_code = -1;
  result = malloc(0x800uLL);
  if ( !result )
    goto LABEL_156;
  v6 = (char *)result;
  v7 = (char *)malloc(0x800uLL);
  if ( !v7 )
  {
    free(v6);
    result = 0LL;
LABEL_156:
    *size = -1;
    return result;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 2048;
  v12 = -1;
  v13 = 2048LL;
  ptr = v7;
  v76 = size;
  v77 = 0;
  v80 = 0;
  v90 = 0;
  v91[0] = 0;
  while ( 1 )
  {
    v14 = v10;
    v86 = v13;
    v82 = v12;
    do
    {
      v15 = v9;
      v16 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
      if ( v16 < 1 )
        goto end_of_stream;
      v17 = v16;
      if ( v14 )
      {
        v10 = v14;
        goto LABEL_83;
      }
      v9 += v16;
      if ( v16 + v15 <= v11 )
      {
        v18 = v6;
      }
      else
      {
        v18 = (char *)realloc(v6, (unsigned int)v9);
        v11 = v9;
        if ( !v18 )
        {
          free(v6);
          v74 = ptr;
          goto LABEL_157;
        }
      }
      v6 = v18;
      memcpy(&v18[v15], src, (unsigned int)v17);
      if ( v9 >= 2 )
      {
        v19 = 0;
        while ( 1 )
        {
          v20 = (unsigned __int8)v6[v19];
          if ( v20 == 10 )
            break;
          if ( v20 == 13 )
          {
            LODWORD(v21) = v19 + 1;
            if ( v6[v19 + 1] == 10 )
            {
              v21 = v19 + 2LL;
              if ( v19 + 2 < v9 && v6[v21] == 13 )
              {
                v22 = v19 + 3LL;
                if ( (int)v22 >= v9 )
                {
                  v10 = 0;
                }
                else
                {
                  v23 = (unsigned __int8)v6[v22];
                  v24 = v19 + 4;
LABEL_23:
                  if ( v23 == 10 )
                    v10 = v24;
                  else
                    v10 = 0;
                }
                v19 = v22;
                goto LABEL_29;
              }
            }
            v10 = 0;
            v19 = v21;
          }
          else
          {
            v10 = 0;
          }
LABEL_29:
          ++v19;
          v25 = v10 == 0;
          if ( v19 >= v9 - 1 || v10 )
            goto LABEL_34;
        }
        v22 = v19 + 1LL;
        v23 = (unsigned __int8)v6[v22];
        v24 = v19 + 2;
        goto LABEL_23;
      }
      v10 = 0;
      v25 = 1;
LABEL_34:
      v14 = 0;
    }
    while ( v25 );
    if ( v10 >= 2 )
    {
      v26 = v10 - 1;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      nptr = v6 + 1;
      v84 = s;
      do
      {
        v31 = (unsigned __int8)v6[v30];
        v88 = v30;
        if ( v31 == 58 && v29 >= 1 && v28 <= v29 )
        {
          if ( v30 < v26 )
          {
            s = v84;
            v32 = 0LL;
            while ( 1 )
            {
              v33 = (unsigned __int8)nptr[v30 + v32];
              if ( v33 != 32 && v33 != 9 )
                break;
              if ( v10 - 1 - (__int64)v30 == ++v32 )
              {
                v28 = v30;
                v30 = v26;
                v27 = v10;
                goto LABEL_77;
              }
            }
            v30 += v32;
            v27 = v30 + 1;
            v28 = v88;
            goto LABEL_77;
          }
          v27 = v30 + 1;
        }
        else
        {
          if ( v31 != 13 && v31 != 10 )
            goto LABEL_76;
          if ( !status_code || v29 )
          {
            v39 = v28 - v29;
            if ( v28 > v29 && v27 > v28 )
            {
              v40 = &v6[v29];
              v75 = v39;
              if ( !strncasecmp(v40, "content-length", v39) )
              {
                v82 = atoi(&v6[v27]);
              }
              else if ( !strncasecmp(v40, "transfer-encoding", v75) )
              {
                v41 = strncasecmp(&v6[v27], "chunked", 7uLL);
                v42 = v77;
                if ( !v41 )
                  v42 = 1;
                v77 = v42;
              }
            }
          }
          else if ( v30 >= 1 )
          {
            v34 = (unsigned int)v30;
            v35 = v6 + 1;
            v36 = status_code;
            do
            {
              if ( *(v35 - 1) == 32 )
              {
                v37 = v11;
                if ( (*v36 & 0x80000000) == 0 )
                  break;
                v38 = v36;
                *v36 = atoi(v35);
                v36 = v38;
                v11 = v37;
              }
              --v34;
              ++v35;
            }
            while ( v34 );
            v26 = v10 - 1;
          }
          if ( v30 < v9 )
          {
            v43 = &nptr[v30];
            for ( i = v9 - 1LL - v30; ; --i )
            {
              if ( (unsigned __int8)v31 != 13 && (unsigned __int8)v31 != 10 )
              {
                v27 = 0;
                v29 = v30;
                v28 = v30;
                goto LABEL_76;
              }
              if ( !i )
                break;
              v45 = *v43++;
              LOBYTE(v31) = v45;
              ++v30;
            }
            v27 = 0;
            v30 = v9;
            v29 = v9;
            v28 = v9;
            goto LABEL_76;
          }
          v27 = 0;
          v29 = v30;
        }
        v28 = v30;
LABEL_76:
        s = v84;
LABEL_77:
        ++v30;
      }
      while ( v30 < v26 );
    }
    v17 = v9 - v10;
    memcpy(src, &v6[v10], v9 - v10);
LABEL_83:
    v46 = v80;
    if ( !v77 )
      break;
    if ( v17 >= 1 )
    {
      v13 = v86;
      LODWORD(v47) = 0;
      v48 = v80;
      v85 = s;
      while ( 2 )
      {
        v87 = v13;
        do
        {
          if ( v8 )
            goto LABEL_118;
          v49 = v90;
          if ( !v90 )
          {
            v47 = src[(int)v47] == 13 ? (int)v47 + 1LL : (int)v47;
            if ( (int)v47 < v17 && src[v47] == 10 )
              LODWORD(v47) = v47 + 1;
          }
          if ( (int)v47 < v17 )
          {
            v50 = *_ctype_b_loc();
            v51 = 0LL;
            while ( (unsigned __int64)v90 + v51 <= 0x1E )
            {
              v52 = (unsigned __int8)src[(int)v47 + v51];
              if ( (v50[v52] & 0x1000) == 0 )
                break;
              v53 = &v91[v90 + 1 + v51++];
              *(v53 - 1) = v52;
              *v53 = 0;
              if ( (unsigned int)v17 - (__int64)(int)v47 == v51 )
              {
                v49 = v17 + v90 - v47;
                LODWORD(v47) = v17;
                goto LABEL_102;
              }
            }
            LODWORD(v47) = v47 + v51;
            v49 = v90 + v51;
LABEL_102:
            v13 = v87;
          }
          v47 = (int)v47;
          while ( v47 < (unsigned int)v17 )
          {
            v54 = (unsigned __int8)src[v47++];
            if ( v54 == 13 || v54 == 10 )
            {
              if ( v54 != 13 )
                LODWORD(v47) = v47 - 1;
              break;
            }
          }
          v90 = v49;
          if ( v17 <= (int)v47 )
          {
            v8 = 0;
            v46 = v48;
            goto LABEL_152;
          }
          v8 = 0;
        }
        while ( src[(int)v47] != 10 );
        if ( !v90 )
        {
          v91[0] = 0;
LABEL_160:
          v80 = v48;
          goto end_of_stream;
        }
        v8 = 0;
        v55 = v90;
        v56 = v91;
        do
        {
          v57 = (unsigned __int8)*v56++;
          v58 = v57 - 0x30;
          v59 = (v57 | 0x20) - 0x57;
          if ( (unsigned int)(v57 - 0x30) < 0xA )
            v59 = v58;
          --v55;
          v8 = v59 + 16 * v8;
        }
        while ( v55 );
        v91[0] = 0;
        if ( !v8 )
          goto LABEL_160;
        LODWORD(v13) = v87;
        LODWORD(v47) = v47 + 1;
        v90 = 0;
LABEL_118:
        if ( v8 >= v17 - (int)v47 )
          v60 = v17 - v47;
        else
          v60 = v8;
        v61 = v60 + v48;
        v89 = v48;
        if ( v60 + v48 <= (unsigned int)v13 )
        {
          v65 = ptr;
          v48 += v60;
        }
        else
        {
          v81 = v11;
          v62 = ptr;
          v48 += v60;
          if ( v82 < v61 || v82 < 0 )
            v64 = v61;
          else
            v64 = (unsigned int)v82;
          v87 = v64;
          v65 = (char *)realloc(ptr, v64);
          if ( !v65 )
            goto LABEL_158;
          v11 = v81;
        }
        ptr = v65;
        memcpy(&v65[v89], &src[(int)v47], v60);
        LODWORD(v47) = v60 + v47;
        v8 -= v60;
        s = v85;
        v13 = v87;
        v46 = v48;
        if ( (int)v47 < v17 )
          continue;
        goto LABEL_152;
      }
    }
LABEL_151:
    v13 = v86;
LABEL_152:
    v80 = v46;
    v12 = v82;
    if ( v82 >= 1 && v80 >= v82 )
    {
end_of_stream:
      free(v6);
      *v76 = v80;
      if ( v80 )
        return ptr;
      free(ptr);
      return 0LL;
    }
  }
  if ( v17 + v80 <= v82 || v82 <= 0 )
    v67 = v17;
  else
    v67 = v82 - v80;
  v68 = v80;
  v69 = v67 + v80;
  if ( v67 + v80 <= (unsigned int)v86 )
  {
    v73 = ptr;
    goto LABEL_150;
  }
  v70 = v11;
  v62 = ptr;
  if ( v82 < v69 || v82 < 0 )
    v72 = v69;
  else
    v72 = (unsigned int)v82;
  v86 = v72;
  v73 = (char *)realloc(ptr, v72);
  if ( v73 )
  {
    v68 = v80;
    v11 = v70;
LABEL_150:
    ptr = v73;
    memcpy(&v73[v68], src, v67);
    v46 = v67 + v80;
    goto LABEL_151;
  }
LABEL_158:
  free(v62);
  v74 = v6;
LABEL_157:
  free(v74);
  result = 0LL;
  *v76 = -1;
  return result;
}
