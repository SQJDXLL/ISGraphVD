char *__cdecl getHTTPResponse(int s, int *size, int *status_code)
{
  int *v3; // ebx
  char *v4; // eax
  char *v5; // esi
  char *v6; // eax
  int v7; // ecx
  size_t v8; // ebp
  int v9; // edi
  int v10; // eax
  int v11; // ebx
  signed int v12; // ecx
  char *v13; // ebp
  int v14; // ebp
  int v15; // edi
  signed int v16; // esi
  char *v17; // eax
  int v18; // eax
  int v19; // ecx
  char v20; // dl
  int v21; // edx
  bool v22; // zf
  int *v23; // edx
  int v24; // ebx
  int v25; // ecx
  int v26; // ebp
  int v27; // eax
  int v28; // ecx
  char v29; // cl
  char v30; // al
  size_t v31; // ecx
  const char *v32; // ebx
  int v33; // ebp
  int v34; // eax
  const char *v35; // ebp
  int v36; // eax
  int v37; // ecx
  signed int v38; // ebp
  char v39; // al
  size_t v40; // ebx
  char *v41; // eax
  signed int v42; // ebp
  unsigned int v43; // ebx
  size_t v44; // eax
  signed int v45; // ecx
  const unsigned __int16 **v46; // eax
  const unsigned __int16 *v47; // eax
  int v48; // ecx
  unsigned int v49; // edx
  signed int v50; // eax
  char v51; // dl
  size_t v52; // ecx
  char *v53; // eax
  size_t v54; // edx
  int v55; // ecx
  int v56; // edx
  unsigned __int8 v57; // bl
  int v58; // ecx
  size_t v59; // ebx
  size_t v60; // eax
  char *v61; // eax
  size_t v62; // ebx
  size_t v63; // eax
  char *v64; // ebp
  signed int v66; // [esp+4h] [ebp-868h]
  size_t v67; // [esp+4h] [ebp-868h]
  int v68; // [esp+8h] [ebp-864h]
  unsigned int v69; // [esp+8h] [ebp-864h]
  signed int v70; // [esp+Ch] [ebp-860h]
  size_t v71; // [esp+Ch] [ebp-860h]
  char *v72; // [esp+Ch] [ebp-860h]
  char *ptr; // [esp+10h] [ebp-85Ch]
  unsigned int v74; // [esp+14h] [ebp-858h]
  size_t v75; // [esp+1Ch] [ebp-850h]
  size_t v76; // [esp+1Ch] [ebp-850h]
  size_t v77; // [esp+1Ch] [ebp-850h]
  int v78; // [esp+20h] [ebp-84Ch]
  int v79; // [esp+24h] [ebp-848h]
  unsigned int v80; // [esp+28h] [ebp-844h]
  unsigned int v81; // [esp+28h] [ebp-844h]
  unsigned int v82; // [esp+2Ch] [ebp-840h]
  int v83; // [esp+30h] [ebp-83Ch]
  unsigned int v84; // [esp+34h] [ebp-838h]
  char v85[32]; // [esp+3Ch] [ebp-830h] BYREF
  char src[2064]; // [esp+5Ch] [ebp-810h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = size;
  v4 = (char *)malloc(0x800u);
  if ( !v4 )
  {
    *size = -1;
    return 0;
  }
  v5 = v4;
  v6 = (char *)malloc(0x800u);
  if ( !v6 )
  {
    free(v5);
    *size = -1;
    return 0;
  }
  v7 = -1;
  v8 = 0;
  v9 = 0;
  ptr = v6;
  v85[0] = 0;
  v84 = 2048;
  v83 = 0;
  v79 = 0;
  v82 = 2048;
  v74 = 0;
  v80 = 0;
  while ( 2 )
  {
    v78 = v7;
    v10 = receivedata(s, src, 2048, 5000, 0);
    if ( v10 <= 0 )
      goto end_of_stream;
    v11 = v79;
    v75 = v8;
    v12 = v10;
    v13 = v5;
    while ( 2 )
    {
      v66 = v12;
      if ( v9 )
      {
        v79 = v11;
        v5 = v13;
        goto LABEL_80;
      }
      v15 = v12 + v11;
      if ( v12 + v11 <= v84 )
      {
        v5 = v13;
      }
      else
      {
        v16 = v12;
        v17 = (char *)realloc(v13, v12 + v11);
        v12 = v16;
        v5 = v17;
        v84 = v15;
        if ( !v17 )
        {
          free(v13);
          free(ptr);
          goto LABEL_148;
        }
      }
      memcpy(&v5[v11], src, v12);
      v14 = v15;
      if ( v15 < 2 )
        goto LABEL_9;
      v79 = v15;
      v18 = v15 - 1;
      v19 = 0;
      do
      {
        v20 = v5[v19];
        if ( v20 == 10 )
        {
          v22 = v5[v19 + 1] == 10;
          v21 = v19 + 1;
          v9 = v19 + 2;
LABEL_25:
          if ( !v22 )
            v9 = 0;
          goto LABEL_31;
        }
        if ( v20 != 13 )
          goto LABEL_29;
        if ( v5[v19 + 1] != 10 )
        {
          ++v19;
LABEL_29:
          v21 = v19;
LABEL_30:
          v9 = 0;
          goto LABEL_31;
        }
        v21 = v19 + 2;
        if ( v19 + 2 >= v79 )
          goto LABEL_30;
        v9 = 0;
        if ( v5[v21] == 13 )
        {
          v21 = v19 + 3;
          if ( v19 + 3 >= v79 )
            goto LABEL_30;
          v22 = v5[v19 + 3] == 10;
          v9 = v19 + 4;
          goto LABEL_25;
        }
LABEL_31:
        v19 = v21 + 1;
      }
      while ( v21 + 1 < v18 && !v9 );
      v14 = v79;
      if ( !v9 )
      {
LABEL_9:
        v9 = 0;
        v11 = v14;
        v12 = receivedata(s, src, 2048, 5000, 0);
        v13 = v5;
        if ( v12 <= 0 )
        {
          v3 = size;
          goto end_of_stream;
        }
        continue;
      }
      break;
    }
    if ( v9 >= 2 )
    {
      v23 = status_code;
      v67 = v11 + v66;
      v24 = 0;
      v25 = 0;
      v70 = 0;
      v26 = v9 - 1;
      v27 = 0;
      do
      {
        v68 = v25;
        v29 = v5[v25];
        if ( v29 == 58 && v70 > 0 && v27 <= v70 )
        {
          v27 = v68;
          if ( v68 >= v26 )
          {
            v24 = v68 + 1;
            v28 = v68;
          }
          else
          {
            v24 = v68 + 1;
            do
            {
              v30 = v5[v24];
              if ( v30 != 32 && v30 != 9 )
              {
                v27 = v68;
                v28 = v24 - 1;
                goto LABEL_38;
              }
              ++v24;
            }
            while ( v9 != v24 );
            v27 = v68;
            v28 = v26;
            v24 = v9;
          }
        }
        else if ( v29 == 13 || v29 == 10 )
        {
          if ( !v23 || v70 )
          {
            v31 = v67;
            if ( v27 > v70 && v24 > v27 )
            {
              v35 = &v5[v70];
              v71 = v27 - v70;
              if ( !strncasecmp(v35, "content-length", v71) )
              {
                v78 = strtol(&v5[v24], 0, 10);
              }
              else if ( !strncasecmp(v35, "transfer-encoding", v71) )
              {
                v36 = strncasecmp(&v5[v24], "chunked", 7u);
                v37 = v83;
                if ( !v36 )
                  v37 = 1;
                v83 = v37;
              }
              v23 = status_code;
              v31 = v67;
            }
            v26 = v9 - 1;
            v27 = v68;
            goto LABEL_71;
          }
          v27 = v68;
          v31 = v67;
          if ( v68 > 0 )
          {
            v32 = v5 + 1;
            v33 = v68;
            while ( 1 )
            {
              if ( *(v32 - 1) == 32 )
              {
                if ( *v23 >= 0 )
                {
LABEL_58:
                  v26 = v9 - 1;
                  break;
                }
                v34 = strtol(v32, 0, 10);
                v31 = v67;
                v23 = status_code;
                *status_code = v34;
                v27 = v68;
              }
              ++v32;
              if ( !--v33 )
                goto LABEL_58;
            }
          }
LABEL_71:
          v24 = 0;
          if ( v27 < v79 )
          {
            do
            {
              v38 = v27;
              v39 = v5[v27];
              if ( v39 != 13 && v39 != 10 )
              {
                v27 = v38;
                v28 = v38;
                v70 = v38;
                goto LABEL_78;
              }
              v27 = v38 + 1;
            }
            while ( v31 != v38 + 1 );
            v27 = v79;
            v28 = v79;
            v70 = v79;
LABEL_78:
            v26 = v9 - 1;
          }
          else
          {
            v28 = v27;
            v70 = v27;
          }
        }
        else
        {
          v28 = v68;
        }
LABEL_38:
        v25 = v28 + 1;
      }
      while ( v25 < v26 );
    }
    v66 = v79 - v9;
    memcpy(src, &v5[v9], v79 - v9);
LABEL_80:
    v7 = v78;
    v40 = v74;
    if ( !v83 )
    {
      v62 = v78 - v74;
      if ( v66 + v74 <= v78 )
        v62 = v66;
      if ( v78 <= 0 )
        v62 = v66;
      if ( v62 + v74 <= v82 )
      {
        v64 = ptr;
      }
      else
      {
        v63 = v78;
        if ( v78 < v62 + v74 )
          v63 = v62 + v74;
        if ( v78 < 0 )
          v63 = v62 + v74;
        v82 = v63;
        v64 = (char *)realloc(ptr, v63);
        if ( !v64 )
        {
          free(ptr);
LABEL_151:
          free(v5);
LABEL_148:
          *size = -1;
          return 0;
        }
      }
      memcpy(&v64[v74], src, v62);
      v40 = v62 + v74;
      v7 = v78;
      ptr = v64;
LABEL_140:
      v74 = v40;
      v3 = size;
      v8 = v75;
      if ( v7 > 0 && v74 >= v7 )
        goto end_of_stream;
      continue;
    }
    break;
  }
  if ( v66 <= 0 )
    goto LABEL_140;
  v41 = ptr;
  v42 = 0;
  while ( 1 )
  {
    v72 = v41;
    v69 = v40;
    v43 = v80;
    v44 = v75;
LABEL_84:
    if ( !v44 )
      break;
    v77 = v44;
    v80 = v43;
LABEL_113:
    v59 = v66 - v42;
    if ( v77 < v66 - v42 )
      v59 = v77;
    if ( v59 + v69 <= v82 )
    {
      v61 = v72;
    }
    else
    {
      v60 = v7;
      if ( v7 < v59 + v69 )
        v60 = v59 + v69;
      if ( v7 < 0 )
        v60 = v59 + v69;
      v82 = v60;
      v61 = (char *)realloc(v72, v60);
      if ( !v61 )
      {
        free(v72);
        goto LABEL_151;
      }
    }
    ptr = v61;
    memcpy(&v61[v69], &src[v42], v59);
    v42 += v59;
    v75 = v77 - v59;
    v41 = ptr;
    v7 = v78;
    v40 = v59 + v69;
    if ( v42 >= v66 )
      goto LABEL_140;
  }
  if ( v43 )
  {
    v45 = v66;
  }
  else
  {
    v45 = v66;
    v42 += src[v42] == 13;
    if ( v42 < v66 )
      v42 += src[v42] == 10;
  }
  if ( v42 < v45 )
  {
    v46 = _ctype_b_loc();
    v45 = v66;
    v47 = *v46;
    while ( v43 <= 0x1E )
    {
      v48 = src[v42];
      if ( (v47[v48] & 0x1000) == 0 )
      {
        v45 = v66;
        break;
      }
      v85[v43] = v48;
      v45 = v66;
      ++v42;
      v49 = v43 + 1;
      v85[++v43] = 0;
      if ( v66 == v42 )
      {
        v43 = v49;
        v42 = v66;
        break;
      }
    }
  }
  v50 = v42;
  if ( v42 >= v45 )
    v45 = v42;
  while ( 2 )
  {
    if ( v45 == v50 )
    {
      v75 = 0;
      goto LABEL_126;
    }
    v51 = src[v50++];
    if ( v51 != 13 && v51 != 10 )
      continue;
    break;
  }
  v42 = v50 - 1;
  v75 = 0;
  if ( v51 == 13 )
    v42 = v50;
  if ( v42 >= v66 )
  {
LABEL_126:
    v80 = v43;
    v40 = v69;
    v7 = v78;
    ptr = v72;
    goto LABEL_140;
  }
  v44 = 0;
  v7 = v78;
  if ( src[v42] != 10 )
    goto LABEL_84;
  if ( v43 )
  {
    v52 = 0;
    v53 = v85;
    do
    {
      v54 = v52;
      v55 = *v53;
      v81 = v43;
      v76 = 16 * v54;
      v56 = v55 - 48;
      v57 = v55 - 48;
      v58 = (v55 | 0x20) - 87;
      if ( v57 < 0xAu )
        v58 = v56;
      ++v53;
      v52 = v76 + v58;
      v43 = v81 - 1;
    }
    while ( v81 != 1 );
    v85[0] = 0;
    v77 = v52;
    if ( v52 )
    {
      v7 = v78;
      ++v42;
      v80 = 0;
      goto LABEL_113;
    }
  }
  else
  {
    v85[0] = 0;
  }
  v3 = size;
  ptr = v72;
  v74 = v69;
end_of_stream:
  free(v5);
  *v3 = v74;
  if ( v74 )
    return ptr;
  free(ptr);
  return 0;
}
