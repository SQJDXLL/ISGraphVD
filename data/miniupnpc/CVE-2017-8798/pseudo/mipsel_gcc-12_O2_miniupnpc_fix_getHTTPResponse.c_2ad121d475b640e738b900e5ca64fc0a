char *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  void *v4; // $v0
  void *v5; // $t0
  unsigned int v6; // $s6
  unsigned int v7; // $s0
  unsigned int v8; // $s7
  char *v9; // $s1
  unsigned int v10; // $s5
  unsigned int v11; // $s2
  signed int v12; // $s4
  signed int v13; // $t2
  char *v14; // $s3
  char *v15; // $v0
  unsigned int v16; // $t2
  signed int v17; // $t3
  signed int v18; // $a3
  char *v19; // $v0
  int v20; // $v1
  signed int v21; // $v0
  bool v22; // dc
  signed int v23; // $v0
  int v24; // $t6
  char *v25; // $a2
  int *v26; // $s6
  int v27; // $a3
  int v28; // $a1
  int v29; // $fp
  int v30; // $s0
  char *v31; // $s1
  char *v32; // $s5
  int v33; // $v0
  int v34; // $s2
  _BOOL4 v35; // $v0
  int v36; // $a0
  size_t v37; // $a2
  unsigned int v38; // $fp
  char *v39; // $s4
  int v40; // $v0
  _BOOL4 v41; // $v0
  int *v42; // $s2
  char *v44; // $v0
  int v45; // $v0
  _BOOL4 v46; // $v0
  int v47; // $v0
  int v48; // $v1
  char *v49; // $s0
  signed int v50; // $s6
  signed int v51; // $s1
  size_t v52; // $v1
  char *v53; // $v0
  char *v54; // $s4
  _BOOL4 v55; // $v0
  unsigned int v56; // $s4
  unsigned int v57; // $a2
  unsigned int v58; // $fp
  size_t v59; // $s3
  char *v60; // $v0
  const unsigned __int16 *v61; // $t0
  unsigned int v62; // $a0
  char *v63; // $v0
  unsigned int v64; // $a2
  unsigned int v65; // $a3
  int v66; // $a1
  char *v67; // $v1
  _BOOL4 v68; // $v0
  int v69; // $v0
  int v70; // $v0
  signed int v71; // $v0
  int v72; // $a3
  char *v73; // $a1
  char *v74; // $a0
  int v75; // $v1
  int v76; // $a3
  const char *v77; // $s0
  int v78; // $v0
  char *v79; // $v1
  int v80; // $v1
  int *v81; // $s2
  unsigned int content_buf_lena; // [sp+20h] [-878h]
  unsigned int content_buf_len; // [sp+20h] [-878h]
  char *content_buf; // [sp+24h] [-874h]
  int content_length; // [sp+28h] [-870h]
  char *header_buf_0; // [sp+2Ch] [-86Ch]
  int chunked; // [sp+34h] [-864h]
  int chunkeda; // [sp+34h] [-864h]
  signed int chunksize_buf_index; // [sp+38h] [-860h]
  unsigned int chunksize_buf_indexa; // [sp+38h] [-860h]
  unsigned int chunksize_buf_indexb; // [sp+38h] [-860h]
  unsigned int chunksize_buf_indexc; // [sp+38h] [-860h]
  unsigned int header_buf_used; // [sp+3Ch] [-85Ch]
  unsigned int chunksize_buf_index_0; // [sp+40h] [-858h]
  unsigned int header_buf_len; // [sp+44h] [-854h]
  unsigned int content_buf_used; // [sp+48h] [-850h]
  char *v97; // [sp+4Ch] [-84Ch]
  int valuestart; // [sp+50h] [-848h] BYREF
  int *status_codea; // [sp+54h] [-844h]
  char *v100; // [sp+58h] [-840h]
  size_t n; // [sp+5Ch] [-83Ch]
  int *sizea; // [sp+60h] [-838h]
  char *v103; // [sp+64h] [-834h]
  char *v104; // [sp+68h] [-830h]
  _DWORD *v105; // [sp+6Ch] [-82Ch]
  char chunksize_buf[32]; // [sp+74h] [-824h] BYREF
  char buf[2048]; // [sp+94h] [-804h] BYREF
  int v108; // [sp+894h] [-4h]

  v105 = &_stack_chk_guard;
  status_codea = status_code;
  if ( status_code )
    *status_code = -1;
  v4 = malloc(0x800u);
  if ( v4 )
  {
    content_buf_lena = (unsigned int)v4;
    content_buf = (char *)malloc(0x800u);
    v5 = (void *)content_buf_lena;
    if ( !content_buf )
    {
LABEL_163:
      free(v5);
      content_buf = 0;
      *size = -1;
      goto LABEL_48;
    }
    content_buf_len = 2048;
    header_buf_len = 2048;
    content_length = -1;
    v6 = 0;
    v103 = "content-length";
    sizea = size;
    chunksize_buf[0] = 0;
    v7 = 0;
    chunked = 0;
    v8 = 0;
    v9 = buf;
    v104 = "transfer-encoding";
    v10 = 0;
    header_buf_0 = (char *)v5;
    v11 = 0;
    while ( 1 )
    {
LABEL_6:
      v12 = receivedata(s, v9, 2048, 5000);
      if ( v12 <= 0 )
        goto end_of_stream;
      if ( v6 )
      {
        v36 = content_length;
        if ( !chunked )
          goto LABEL_37;
        v16 = v11;
        goto LABEL_81;
      }
      v13 = v12 + v11;
      v14 = header_buf_0;
      if ( header_buf_len < v12 + v11 )
      {
        v15 = (char *)realloc(header_buf_0, v12 + v11);
        v13 = v12 + v11;
        if ( !v15 )
        {
          v81 = sizea;
          free(header_buf_0);
          free(content_buf);
          content_buf = 0;
          *v81 = -1;
          goto LABEL_48;
        }
        header_buf_len = v12 + v11;
        header_buf_0 = v15;
        v14 = v15;
      }
      chunksize_buf_index = v13;
      memcpy(&v14[v11], v9, v12);
      v16 = chunksize_buf_index;
      v17 = chunksize_buf_index - 1;
      if ( chunksize_buf_index < 2 )
        goto LABEL_19;
      v18 = 0;
      v19 = v14;
      do
      {
        while ( 1 )
        {
          while ( 1 )
          {
            while ( 1 )
            {
              v20 = *v19;
              v21 = v18 + 1;
              if ( v20 == 13 )
                break;
              while ( v20 != 10 )
              {
                v18 = v21;
                if ( v21 >= v17 )
                  goto LABEL_19;
                v20 = v14[v21++];
                if ( v20 == 13 )
                  goto LABEL_17;
              }
              if ( v14[v21] == 10 )
              {
                v18 += 2;
                goto LABEL_22;
              }
LABEL_18:
              v18 += 2;
              v19 = &v14[v18];
              if ( v18 >= v17 )
                goto LABEL_19;
            }
LABEL_17:
            v22 = v14[v21] == 10;
            v23 = v18 + 2;
            if ( !v22 )
              goto LABEL_18;
            v11 = chunksize_buf_index;
            if ( v23 >= chunksize_buf_index )
              goto LABEL_6;
            v22 = v14[v23] == 13;
            v71 = v18 + 3;
            if ( v22 )
              break;
            v18 += 3;
            v19 = &v14[v18];
            if ( v18 >= v17 )
              goto LABEL_6;
          }
          v11 = chunksize_buf_index;
          if ( v71 >= chunksize_buf_index )
            goto LABEL_6;
          v18 += 4;
          if ( v14[v71] == 10 )
            break;
          v19 = &v14[v18];
          if ( v18 >= v17 )
            goto LABEL_6;
        }
LABEL_22:
        v24 = v18 - 1;
        if ( v18 >= v17 )
          goto LABEL_25;
        v19 = &v14[v18];
      }
      while ( !v18 );
      v24 = v18 - 1;
LABEL_25:
      v25 = 0;
      if ( v24 > 0 )
      {
        chunksize_buf_index_0 = v18;
        v26 = status_codea;
        v27 = 0;
        chunksize_buf_indexa = v7;
        v97 = v9;
        v28 = 0;
        v29 = 0;
        header_buf_used = v8;
        content_buf_used = v10;
        v30 = v24;
        v31 = (char *)v16;
        v32 = header_buf_0;
        do
        {
          v33 = *v32;
          v34 = v29 + 1;
          if ( v28 <= 0 )
          {
            if ( v33 != 13 && v33 != 10 )
              goto LABEL_32;
            if ( v28 || !v26 )
            {
              v35 = v29 < (int)v31;
              if ( v28 >= (int)v25 )
                goto LABEL_53;
LABEL_66:
              v46 = (int)v25 < v27;
LABEL_67:
              valuestart = v27;
              if ( !v46 )
                goto LABEL_52;
              n = (size_t)&v25[-v28];
              v100 = &header_buf_0[v28];
              if ( !strncasecmp(&header_buf_0[v28], v103, (size_t)&v25[-v28]) )
              {
                content_length = strtol(&header_buf_0[valuestart], 0u, 10);
                goto LABEL_52;
              }
              if ( strncasecmp(v100, v104, n) )
                goto LABEL_52;
              v47 = strncasecmp(&header_buf_0[valuestart], "chunked", 7u);
              v48 = chunked;
              if ( !v47 )
                v48 = 1;
              chunked = v48;
              if ( v29 >= (int)v31 )
              {
                v25 = (char *)v29;
LABEL_74:
                v28 = v29;
                goto LABEL_75;
              }
              while ( 1 )
              {
LABEL_56:
                v45 = *v32;
                if ( v45 != 13 )
                {
                  v25 = (char *)v29;
                  if ( v45 != 10 )
                    goto LABEL_74;
                }
                v29 = v34;
                if ( (char *)v34 == v31 )
                  break;
                v32 = &header_buf_0[v34++];
              }
              v29 = (int)(v31 + 1);
              v27 = 0;
              v25 = v31;
              v28 = (int)v31;
              goto LABEL_33;
            }
            if ( v29 <= 0 )
              goto LABEL_56;
            valuestart = v30;
            v100 = v31;
            v77 = header_buf_0 + 1;
            while ( 1 )
            {
              if ( *(v77 - 1) == 32 )
              {
                if ( *v26 >= 0 )
                {
                  v44 = v32;
LABEL_51:
                  v30 = valuestart;
                  v31 = v100;
                  v34 = v29 + 1;
                  v32 = v44;
LABEL_52:
                  v35 = v29 < (int)v31;
LABEL_53:
                  v25 = (char *)v29;
                  if ( v35 )
                    goto LABEL_56;
                  v28 = v29;
LABEL_75:
                  v27 = 0;
LABEL_32:
                  v29 = v34;
                  goto LABEL_33;
                }
                *v26 = strtol(v77, 0u, 10);
              }
              ++v77;
              v44 = v32;
              if ( &header_buf_0[v29 + 1] == v77 )
                goto LABEL_51;
            }
          }
          if ( v28 < (int)v25 )
          {
            if ( v33 == 13 )
              goto LABEL_66;
            v22 = v33 != 10;
            v46 = (int)v25 < v27;
            if ( v22 )
              goto LABEL_32;
            goto LABEL_67;
          }
          if ( v33 != 58 )
          {
            if ( v33 == 13 )
              goto LABEL_52;
            v22 = v33 == 10;
            v35 = v29 < (int)v31;
            if ( v22 )
              goto LABEL_53;
            goto LABEL_32;
          }
          v78 = v29;
          if ( v29 >= v30 )
          {
LABEL_156:
            v27 = v78 + 1;
          }
          else
          {
            v79 = &header_buf_0[v29];
            while ( 1 )
            {
              v80 = v79[1];
              if ( v80 != 32 )
              {
                v27 = v78 + 1;
                if ( v80 != 9 )
                  break;
              }
              v79 = &header_buf_0[++v78];
              if ( v78 == v30 )
                goto LABEL_156;
            }
          }
          v25 = (char *)v29;
          v29 = v27;
LABEL_33:
          v32 = &header_buf_0[v29];
        }
        while ( v29 < v30 );
        v16 = (unsigned int)v31;
        v7 = chunksize_buf_indexa;
        v8 = header_buf_used;
        v18 = chunksize_buf_index_0;
        v10 = content_buf_used;
        v9 = v97;
      }
      v12 = v16 - v18;
      header_buf_used = v16;
      chunksize_buf_indexb = v18;
      memcpy(v9, &header_buf_0[v18], v16 - v18);
      v16 = header_buf_used;
      if ( !chunked )
      {
        v11 = header_buf_used;
        v6 = chunksize_buf_indexb;
        v36 = content_length;
LABEL_37:
        v37 = v12;
        v38 = v10 + v12;
        if ( v36 <= 0 )
        {
          if ( content_buf_len >= v38 )
          {
            v39 = content_buf;
            goto LABEL_42;
          }
          content_buf_len = v10 + v12;
          if ( !content_length )
            content_buf_len = v10 + v12;
        }
        else
        {
          if ( v36 >= v38 )
          {
            v39 = content_buf;
            if ( content_buf_len < v38 )
              goto LABEL_40;
LABEL_42:
            memcpy(&v39[v10], v9, v37);
            v16 = v11;
            v10 = v38;
            content_buf = v39;
            chunked = 0;
            goto LABEL_43;
          }
          v37 = content_length - v10;
          if ( content_buf_len >= content_length )
          {
            v39 = content_buf;
            v38 = content_length;
            goto LABEL_42;
          }
          v38 = content_length;
LABEL_40:
          content_buf_len = v36;
        }
        chunkeda = v37;
        v39 = (char *)realloc(content_buf, content_buf_len);
        v37 = chunkeda;
        if ( !v39 )
          goto LABEL_162;
        goto LABEL_42;
      }
      v6 = chunksize_buf_indexb;
      if ( v12 <= 0 )
      {
        v40 = content_length;
        goto LABEL_44;
      }
LABEL_81:
      chunksize_buf_index_0 = v7;
      chunksize_buf_indexc = v6;
      v49 = v9;
      v50 = 0;
      header_buf_used = v16;
      v51 = v12;
      while ( 2 )
      {
        v56 = chunksize_buf_index_0;
        if ( !v8 )
        {
          if ( chunksize_buf_index_0 )
            goto LABEL_113;
LABEL_96:
          v60 = (char *)&valuestart + v50 + 0x848;
          if ( *(v60 - 2052) == 13 )
          {
            if ( ++v50 >= v51 )
            {
LABEL_131:
              v9 = v49;
              v6 = chunksize_buf_indexc;
              v16 = header_buf_used;
              v7 = 0;
              v8 = 0;
              goto LABEL_43;
            }
            if ( *((_BYTE *)&valuestart + v50 + 0x44) == 10 )
              goto LABEL_134;
            do
            {
LABEL_99:
              v61 = *_ctype_b_loc();
              v62 = v56;
              v63 = &chunksize_buf[v56];
              v64 = v51 + v56 - v50;
              v65 = v50 - v56;
              do
              {
                v66 = v49[v65 + v62];
                if ( (v61[v66] & 0x1000) == 0 )
                  break;
                if ( v62 >= 0x1F )
                  break;
                ++v62;
                *v63 = v66;
                v63[1] = 0;
                ++v50;
                ++v63;
              }
              while ( v62 != v64 );
              v55 = v50 < v51;
              if ( v50 >= v51 )
                goto LABEL_116;
              v67 = &v49[v50];
              while ( 1 )
              {
                v69 = *v67;
                if ( v69 == 13 )
                  break;
                v22 = v69 == 10;
                v68 = v50 < v51;
                if ( v22 )
                  goto LABEL_109;
                ++v50;
                ++v67;
                if ( v51 == v50 )
                  goto LABEL_117;
              }
              v68 = v50 < v51;
LABEL_109:
              if ( !v68 )
              {
LABEL_117:
                v9 = v49;
                v6 = chunksize_buf_indexc;
                v16 = header_buf_used;
                v7 = v62;
                goto LABEL_43;
              }
              v70 = *((char *)&valuestart + v50 + 0x44);
              if ( v70 == 13 )
              {
                if ( ++v50 >= v51 )
                  goto LABEL_117;
                v56 = v62;
                if ( *((_BYTE *)&valuestart + v50 + 0x44) == 10 )
                {
LABEL_124:
                  if ( !v62 )
                    goto end_of_stream;
                  v72 = 0;
                  v73 = chunksize_buf;
                  v74 = &chunksize_buf[v62];
                  do
                  {
                    while ( 1 )
                    {
                      v75 = *v73;
                      v76 = 16 * v72;
                      if ( (unsigned __int8)(v75 - 0x30) >= 0xAu )
                        break;
                      ++v73;
                      v72 = v76 - 48 + v75;
                      if ( v74 == v73 )
                        goto LABEL_129;
                    }
                    ++v73;
                    v72 = v76 - 87 + (v75 | 0x20);
                  }
                  while ( v74 != v73 );
LABEL_129:
                  chunksize_buf[0] = 0;
                  ++v50;
                  if ( !v72 )
                  {
end_of_stream:
                    v42 = sizea;
                    free(header_buf_0);
                    *v42 = v10;
                    if ( !v10 )
                    {
                      free(content_buf);
                      content_buf = 0;
                    }
                    goto LABEL_48;
                  }
                  chunksize_buf_index_0 = 0;
                  v8 = v72;
                  goto LABEL_90;
                }
              }
              else
              {
                v56 = v62;
                if ( v70 == 10 )
                  goto LABEL_124;
              }
              if ( !v56 )
                goto LABEL_96;
LABEL_113:
              ;
            }
            while ( v50 < v51 );
            v62 = v56;
          }
          else
          {
            if ( v50 >= v51 )
              goto LABEL_131;
            if ( *(v60 - 2052) != 10 )
              goto LABEL_99;
LABEL_134:
            if ( ++v50 < v51 )
              goto LABEL_99;
            v62 = v56;
          }
          v55 = v50 < v51;
LABEL_116:
          chunksize_buf_index_0 = v62;
          goto LABEL_88;
        }
LABEL_90:
        v57 = v51 - v50;
        if ( v8 < v51 - v50 )
          v57 = v8;
        v58 = v57 + v10;
        v59 = v57;
        if ( content_buf_len < v57 + v10 )
        {
          v52 = content_length;
          if ( content_length < 0 )
          {
            content_buf_len = v57 + v10;
            v53 = (char *)realloc(content_buf, v57 + v10);
          }
          else
          {
            if ( content_length < v58 )
              v52 = v57 + v10;
            content_buf_len = v52;
            v53 = (char *)realloc(content_buf, v52);
          }
          v54 = v53;
          if ( !v53 )
          {
LABEL_162:
            size = sizea;
            free(content_buf);
            v5 = header_buf_0;
            goto LABEL_163;
          }
        }
        else
        {
          v54 = content_buf;
        }
        memcpy(&v54[v10], &v49[v50], v59);
        v50 += v59;
        v8 -= v59;
        v10 = v58;
        content_buf = v54;
        v55 = v50 < v51;
LABEL_88:
        if ( v55 )
          continue;
        break;
      }
      v9 = v49;
      v6 = chunksize_buf_indexc;
      v16 = header_buf_used;
      v7 = chunksize_buf_index_0;
LABEL_43:
      v40 = content_length;
LABEL_44:
      v22 = v40 <= 0;
      v41 = v10 < v40;
      if ( v22 )
      {
LABEL_19:
        v11 = v16;
        continue;
      }
      v11 = v16;
      if ( !v41 )
        goto end_of_stream;
    }
  }
  *size = -1;
  content_buf = 0;
LABEL_48:
  if ( v108 != *v105 )
    _stack_chk_fail();
  return content_buf;
}
