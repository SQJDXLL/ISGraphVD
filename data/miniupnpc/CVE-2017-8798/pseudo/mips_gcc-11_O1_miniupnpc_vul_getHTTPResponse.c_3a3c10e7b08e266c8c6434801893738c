char *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // $s2
  char *v4; // $s4
  int v5; // $v0
  unsigned int v6; // $s7
  int v7; // $v1
  bool v8; // dc
  int v9; // $v1
  int v10; // $fp
  int v11; // $s0
  signed int v12; // $s1
  signed int v13; // $a0
  int v14; // $v0
  int *v15; // $s7
  unsigned int v16; // $a1
  int v17; // $v1
  int v18; // $a0
  int v19; // $v1
  char *v20; // $v1
  int v21; // $v1
  _BOOL4 v22; // $v0
  _BOOL4 v23; // $v1
  const char *v24; // $s6
  size_t v25; // $s4
  int v26; // $v0
  int v27; // $a0
  const char *v28; // $s1
  int v29; // $v0
  signed int v30; // $s0
  signed int v31; // $s1
  unsigned int v32; // $s3
  _BOOL4 v33; // $v0
  const unsigned __int16 *v34; // $a3
  unsigned int v35; // $v1
  char *v36; // $a1
  signed int v37; // $v0
  unsigned int v38; // $s1
  int v39; // $a2
  _BOOL4 v40; // $a0
  char *v41; // $a1
  int v42; // $a0
  char *v43; // $a1
  char *v44; // $v1
  int v45; // $v0
  int v46; // $a2
  char *v47; // $s2
  size_t v48; // $s2
  int v49; // $s5
  int v50; // $v1
  char *v51; // $v0
  char *v52; // $s1
  char *v53; // $a0
  int v55; // $v0
  char *v56; // $v0
  signed int v57; // $s5
  char *v58; // $v0
  int v59; // $a1
  int v60; // $v1
  size_t v61; // $s3
  int v62; // $s0
  char *content_buf; // [sp+20h] [-868h]
  unsigned int content_buf_len; // [sp+24h] [-864h]
  int endofheaders; // [sp+28h] [-860h]
  int content_length; // [sp+2Ch] [-85Ch]
  unsigned int content_buf_used; // [sp+30h] [-858h]
  unsigned int chunksize_buf_index; // [sp+34h] [-854h]
  unsigned int header_buf_used; // [sp+38h] [-850h]
  char *header_buf; // [sp+3Ch] [-84Ch]
  unsigned int header_buf_len; // [sp+40h] [-848h] BYREF
  char *v72; // [sp+44h] [-844h]
  int chunked; // [sp+48h] [-840h]
  int *status_codea; // [sp+4Ch] [-83Ch]
  char *v75; // [sp+50h] [-838h]
  int *sizea; // [sp+54h] [-834h]
  char *v77; // [sp+58h] [-830h]
  void *(*v78)(int, int *, int *); // [sp+5Ch] [-82Ch]
  char chunksize_buf[32]; // [sp+64h] [-824h] BYREF
  char buf[2048]; // [sp+84h] [-804h] BYREF

  sizea = size;
  status_codea = status_code;
  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800u);
  if ( !v3 )
  {
    *sizea = -1;
    return 0;
  }
  content_buf = (char *)malloc(0x800u);
  if ( !content_buf )
  {
    free(v3);
    *sizea = -1;
    return content_buf;
  }
  chunksize_buf[0] = 0;
  chunksize_buf_index = 0;
  content_buf_used = 0;
  content_buf_len = 2048;
  header_buf_used = 0;
  header_buf_len = 2048;
  v4 = 0;
  content_length = -1;
  chunked = 0;
  endofheaders = 0;
  v75 = "content-length";
  v77 = "transfer-encoding";
  v78 = getHTTPResponse;
  while ( 2 )
  {
    while ( 2 )
    {
      while ( 2 )
      {
        v30 = receivedata(s, buf, 2048, 5000);
        if ( v30 <= 0 )
          goto end_of_stream;
        if ( endofheaders )
        {
          v31 = 0;
          if ( chunked )
            goto LABEL_78;
LABEL_160:
          v61 = v30;
          if ( content_length > 0 )
          {
            v62 = v30 + content_buf_used;
            if ( content_length >= v62 )
            {
              v55 = content_length;
              if ( content_buf_len < v62 )
                goto LABEL_143;
              v52 = content_buf;
              goto LABEL_145;
            }
            v30 = content_length - content_buf_used;
          }
          v61 = v30;
          v62 = v30 + content_buf_used;
          if ( content_buf_len < v62 )
          {
            v55 = content_length;
            if ( content_length < v62 )
            {
              content_buf_len = v62;
              v56 = (char *)realloc(content_buf, v62);
LABEL_144:
              v52 = v56;
              if ( !v56 )
              {
                free(content_buf);
                free(v3);
                *sizea = -1;
                return 0;
              }
              goto LABEL_145;
            }
LABEL_143:
            content_buf_len = v55;
            v56 = (char *)realloc(content_buf, v55);
            goto LABEL_144;
          }
          v52 = content_buf;
LABEL_145:
          memcpy(&v52[content_buf_used], buf, v61);
          content_buf_used = v62;
          content_buf = v52;
          goto LABEL_146;
        }
        v57 = v30 + header_buf_used;
        if ( header_buf_len < v30 + header_buf_used )
        {
          v58 = (char *)realloc(v3, v30 + header_buf_used);
          if ( !v58 )
          {
            free(v3);
            free(content_buf);
            *sizea = -1;
            return 0;
          }
          header_buf_len = v57;
          v3 = v58;
        }
        memcpy(&v3[header_buf_used], buf, v30);
        v59 = v57 - 1;
        if ( v57 - 1 <= 0 )
        {
          header_buf_used = v57;
          continue;
        }
        break;
      }
      v5 = 0;
      while ( 1 )
      {
        while ( 1 )
        {
          v7 = v3[v5];
          if ( v7 != 13 )
            break;
          if ( v3[v5 + 1] == 10 )
          {
            if ( v5 + 2 >= v57 )
            {
              v5 += 2;
              goto LABEL_11;
            }
            if ( v3[v5 + 2] != 13 )
            {
              v5 += 2;
              goto LABEL_11;
            }
            v9 = v5 + 3;
            if ( v5 + 3 >= v57 )
            {
              v5 += 3;
              goto LABEL_11;
            }
            v6 = v5 + 4;
            if ( v3[v5 + 3] != 10 )
            {
              v5 += 3;
              goto LABEL_11;
            }
            goto LABEL_22;
          }
          ++v5;
LABEL_11:
          ++v5;
          v6 = 0;
          if ( v5 >= v59 )
            goto LABEL_168;
        }
        v8 = v7 != 10;
        v9 = v5 + 1;
        if ( v8 )
          goto LABEL_11;
        v6 = v5 + 2;
        if ( v3[v9] != 10 )
        {
          ++v5;
          goto LABEL_11;
        }
LABEL_22:
        v5 = v9 + 1;
        if ( v9 + 1 >= v59 )
          break;
        v10 = v6 - 1;
        if ( v6 )
          goto LABEL_24;
      }
LABEL_168:
      v10 = v6 - 1;
      if ( !v6 )
      {
        header_buf_used = v57;
        endofheaders = 0;
        continue;
      }
      break;
    }
LABEL_24:
    v11 = 0;
    if ( v10 <= 0 )
      goto LABEL_73;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    header_buf_used = v6;
    header_buf = v4;
    v15 = status_codea;
    while ( 2 )
    {
      if ( v14 <= 0 )
      {
        v19 = v3[v11];
        if ( v19 != 13 && v19 != 10 )
          goto LABEL_38;
        if ( !v14 && v15 )
        {
          if ( v11 > 0 )
          {
            v28 = v3 + 1;
            while ( 1 )
            {
              if ( *(v28 - 1) == 32 )
              {
                if ( *v15 >= 0 )
                  break;
                *v15 = strtol(v28, 0u, 10);
              }
              ++v28;
              v22 = v11 < v57;
              if ( v28 == &v3[v11 + 1] )
                goto LABEL_46;
            }
          }
LABEL_45:
          v22 = v11 < v57;
LABEL_46:
          if ( v22 )
          {
            do
            {
              v29 = v3[v11];
              if ( v29 == 13 )
              {
                ++v11;
              }
              else
              {
                ++v11;
                if ( v29 != 10 )
                {
                  --v11;
                  v12 = 0;
                  v13 = v11;
                  v14 = v11;
                  goto LABEL_38;
                }
              }
              v12 = 0;
            }
            while ( v11 != v57 );
            v13 = v57;
            v14 = v57;
            v11 = v57;
          }
          else
          {
            v12 = 0;
            v13 = v11;
            v14 = v11;
          }
          goto LABEL_38;
        }
        if ( v14 >= v13 )
          goto LABEL_45;
        goto LABEL_51;
      }
      v20 = &v3[v11];
      if ( v14 < v13 )
      {
        v60 = *v20;
        if ( v60 != 13 )
        {
          ++v11;
          if ( v60 != 10 )
            goto LABEL_39;
          --v11;
          v23 = v13 < v12;
LABEL_52:
          v24 = &v3[v14];
          if ( !v23 )
            goto LABEL_45;
          v25 = v13 - v14;
          if ( !strncasecmp(&v3[v14], v75, v13 - v14) )
          {
            content_length = strtol(&v3[v12], 0u, 10);
            goto LABEL_45;
          }
          v8 = strncasecmp(v24, v77, v25) != 0;
          v22 = v11 < v57;
          if ( !v8 )
          {
            v26 = strncasecmp(&v3[v12], (const char *)v78 + 0x13C4, 7u);
            v27 = chunked;
            if ( !v26 )
              v27 = 1;
            chunked = v27;
            goto LABEL_45;
          }
          goto LABEL_46;
        }
LABEL_51:
        v23 = v13 < v12;
        goto LABEL_52;
      }
      v21 = *v20;
      if ( v21 != 58 )
      {
        if ( v21 != 13 && v21 != 10 )
          goto LABEL_38;
        goto LABEL_45;
      }
      if ( v11 >= v10 )
      {
        v16 = v11;
        goto LABEL_33;
      }
      v16 = header_buf_used - 1;
      v17 = v11;
      while ( 2 )
      {
        v18 = v3[v17 + 1];
        if ( v18 == 32 )
        {
          ++v17;
          goto LABEL_29;
        }
        ++v17;
        if ( v18 == 9 )
        {
LABEL_29:
          v12 = header_buf_used;
          if ( v17 == v16 )
            goto LABEL_34;
          continue;
        }
        break;
      }
      v16 = v17 - 1;
LABEL_33:
      v12 = v16 + 1;
LABEL_34:
      v13 = v11;
      v11 = v16;
LABEL_38:
      ++v11;
LABEL_39:
      v4 = header_buf;
      if ( v11 < v10 )
        continue;
      break;
    }
    v6 = header_buf_used;
LABEL_73:
    v30 = v57 - v6;
    memcpy(buf, &v3[v6], v57 - v6);
    if ( !chunked )
    {
      endofheaders = v6;
      header_buf_used = v57;
      goto LABEL_160;
    }
    v31 = 0;
    if ( v30 <= 0 )
    {
      endofheaders = v6;
      header_buf_used = v57;
LABEL_146:
      if ( content_length > 0 )
      {
        v53 = v3;
        if ( (int)content_buf_used >= content_length )
          goto LABEL_128;
      }
      continue;
    }
    break;
  }
  endofheaders = v6;
  header_buf_used = v57;
LABEL_78:
  v72 = chunksize_buf;
  header_buf = v3;
  v32 = content_buf_used;
  while ( v4 )
  {
LABEL_115:
    v48 = v30 - v31;
    if ( (int)v4 < v30 - v31 )
      v48 = (size_t)v4;
    v49 = v48 + v32;
    v50 = content_length;
    if ( content_buf_len < v48 + v32 )
    {
      if ( content_length < v49 )
        v50 = v48 + v32;
      content_buf_len = v50;
      v51 = (char *)realloc(content_buf, v50);
      if ( !v51 )
      {
        v47 = header_buf;
        free(content_buf);
        free(v47);
        *sizea = -1;
        return 0;
      }
      content_buf = v51;
    }
    memcpy(&content_buf[v32], &buf[v31], v48);
    v31 += v48;
    v4 -= v48;
    if ( v31 >= v30 )
    {
      v3 = header_buf;
      content_buf_used = v49;
      goto LABEL_146;
    }
LABEL_113:
    v32 = v49;
  }
  v33 = v31 < v30;
  if ( chunksize_buf_index )
  {
LABEL_85:
    if ( v33 )
      goto LABEL_86;
    v3 = header_buf;
    content_buf_used = v32;
    v35 = chunksize_buf_index;
LABEL_91:
    chunksize_buf_index = v35;
    goto LABEL_146;
  }
  if ( *((_BYTE *)&header_buf_len + v31 + 0x44) == 13 )
    ++v31;
  v3 = header_buf;
  if ( v31 >= v30 )
  {
    content_buf_used = v32;
    v35 = chunksize_buf_index;
    goto LABEL_91;
  }
  if ( *((_BYTE *)&header_buf_len + v31 + 0x44) == 10 )
  {
    v33 = ++v31 < v30;
    goto LABEL_85;
  }
LABEL_86:
  v34 = *_ctype_b_loc();
  v35 = chunksize_buf_index;
  v36 = &v72[chunksize_buf_index];
  v37 = v31;
  v38 = v31 - chunksize_buf_index;
  while ( 1 )
  {
    v39 = buf[v38 + v35];
    if ( (v34[v39] & 0x10) == 0 )
      break;
    v40 = v37 < v30;
    if ( v35 >= 0x1F )
      goto LABEL_94;
    ++v35;
    *v36 = v39;
    v36[1] = 0;
    ++v37;
    ++v36;
    if ( v37 >= v30 )
    {
      v3 = header_buf;
      content_buf_used = v32;
      goto LABEL_91;
    }
  }
  v40 = v37 < v30;
LABEL_94:
  v3 = header_buf;
  if ( !v40 )
  {
    content_buf_used = v32;
    goto LABEL_91;
  }
  v41 = &buf[v37];
  while ( 1 )
  {
    v42 = *v41;
    if ( v42 == 13 )
    {
      v3 = header_buf;
      if ( v37 >= v30 )
      {
        content_buf_used = v32;
        goto LABEL_91;
      }
      v31 = v37 + 1;
      goto LABEL_137;
    }
    if ( v42 == 10 )
      break;
    ++v37;
    ++v41;
    if ( v30 == v37 )
    {
      v3 = header_buf;
      content_buf_used = v32;
      goto LABEL_91;
    }
  }
  if ( v37 >= v30 )
  {
    v3 = header_buf;
    content_buf_used = v32;
    goto LABEL_91;
  }
  v31 = v37;
  if ( *((_BYTE *)&header_buf_len + v37 + 0x44) != 13 )
    goto LABEL_138;
  v31 = v37 + 1;
LABEL_137:
  v3 = header_buf;
  if ( v31 >= v30 )
  {
    content_buf_used = v32;
    goto LABEL_91;
  }
LABEL_138:
  v49 = v32;
  if ( *((_BYTE *)&header_buf_len + v31 + 0x44) != 10 )
  {
    chunksize_buf_index = v35;
    goto LABEL_113;
  }
  v43 = chunksize_buf;
  if ( v35 )
  {
    v44 = &chunksize_buf[v35];
    v45 = 0;
    do
    {
      v46 = *v43;
      if ( (unsigned __int8)(v46 - 0x30) >= 0xAu )
        v45 = (v46 | 0x20) + 16 * v45 - 87;
      else
        v45 = v46 + 16 * v45 - 48;
      ++v43;
    }
    while ( v43 != v44 );
    chunksize_buf[0] = 0;
    ++v31;
    if ( v45 )
    {
      chunksize_buf_index = 0;
      v4 = (char *)v45;
      goto LABEL_115;
    }
    v3 = header_buf;
    content_buf_used = v32;
  }
  else
  {
    v3 = header_buf;
    content_buf_used = v32;
  }
end_of_stream:
  v53 = v3;
LABEL_128:
  free(v53);
  v8 = content_buf_used == 0;
  *sizea = content_buf_used;
  if ( v8 )
  {
    free(content_buf);
    return 0;
  }
  return content_buf;
}
