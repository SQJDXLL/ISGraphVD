void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // x22
  unsigned int v4; // w19
  unsigned int v5; // w23
  unsigned int v6; // w25
  unsigned int v7; // w28
  int v8; // w27
  int v9; // w26
  char *v10; // x0
  int v11; // w3
  int v12; // w0
  int v13; // w8
  _BOOL4 v14; // w1
  int v16; // w1
  int v17; // w2
  int v18; // w10
  int v19; // w11
  int v20; // w2
  int v21; // w1
  int v22; // w3
  int v23; // w0
  __int64 v24; // x27
  bool v25; // cc
  int v26; // w24
  bool v27; // zf
  int v28; // w26
  unsigned int v29; // w24
  char *v30; // x0
  int v31; // w2
  char *v32; // x1
  unsigned int v35; // w26
  unsigned int v36; // w0
  _BOOL4 v37; // w3
  char *v38; // x0
  _BOOL4 v39; // w3
  size_t v42; // x2
  int v43; // w0
  int v44; // w0
  int v45; // w0
  int v46; // w0
  const unsigned __int16 *v48; // x8
  unsigned int v49; // w7
  __int64 j; // x2
  char *v52; // x2
  int v53; // w1
  int v55; // w0
  char *v56; // x3
  int v57; // t1
  int v58; // w19
  int v59; // w0
  unsigned int v60; // w0
  bool v62; // zf
  const char *v63; // x4
  __int64 v64; // x11
  int v65; // w0
  int v66; // w0
  __int64 v67; // x0
  int v68; // w2
  char *v70; // x0
  char *content_buf; // [xsp+68h] [xbp+68h]
  int chunked; // [xsp+70h] [xbp+70h]
  int chunkeda; // [xsp+70h] [xbp+70h]
  unsigned int content_length; // [xsp+74h] [xbp+74h]
  unsigned int header_buf_used; // [xsp+78h] [xbp+78h]
  size_t header_buf_useda; // [xsp+78h] [xbp+78h]
  __int64 header_buf_usedb; // [xsp+78h] [xbp+78h]
  int endofheaders; // [xsp+80h] [xbp+80h]
  const char *endofheadersa; // [xsp+80h] [xbp+80h]
  const char *endofheadersb; // [xsp+80h] [xbp+80h]
  _BOOL4 v83; // [xsp+94h] [xbp+94h]
  int v84; // [xsp+94h] [xbp+94h]
  int v85; // [xsp+94h] [xbp+94h]
  int v86; // [xsp+98h] [xbp+98h]
  int v87; // [xsp+98h] [xbp+98h]
  int i; // [xsp+9Ch] [xbp+9Ch]
  int ia; // [xsp+9Ch] [xbp+9Ch]
  unsigned int header_buf_len; // [xsp+A0h] [xbp+A0h]
  int valuestart; // [xsp+A4h] [xbp+A4h]
  char chunksize_buf[32]; // [xsp+B8h] [xbp+B8h] BYREF
  char buf[2048]; // [xsp+D8h] [xbp+D8h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800uLL);
  if ( !v3 )
    goto LABEL_174;
  content_buf = (char *)malloc(0x800uLL);
  if ( !content_buf )
  {
    free(v3);
LABEL_174:
    content_buf = 0LL;
    *size = -1;
    return content_buf;
  }
  v4 = 0;
  v5 = 2048;
  v6 = 0;
  v7 = 0;
  chunked = 0;
  content_length = -1;
  header_buf_used = 0;
  endofheaders = 0;
  header_buf_len = 2048;
  chunksize_buf[0] = 0;
  while ( 1 )
  {
LABEL_6:
    v8 = receivedata((unsigned int)s, buf, 2048LL, 5000LL, 0LL);
    if ( v8 <= 0 )
    {
end_of_stream:
      free(v3);
      *size = v7;
      if ( v7 )
        return content_buf;
LABEL_76:
      free(content_buf);
      return 0LL;
    }
    if ( endofheaders )
      break;
    v9 = v8 + header_buf_used;
    if ( v8 + header_buf_used > header_buf_len )
    {
      v10 = (char *)realloc(v3, (unsigned int)v9);
      if ( !v10 )
      {
        free(v3);
        v70 = content_buf;
        goto LABEL_172;
      }
      v3 = v10;
      header_buf_len = v8 + header_buf_used;
    }
    memcpy(&v3[header_buf_used], buf, v8);
    v11 = v9 - 1;
    if ( v9 <= 1 )
    {
      header_buf_used += v8;
    }
    else
    {
      v12 = 0;
      do
      {
        while ( 1 )
        {
          v16 = (unsigned __int8)v3[v12];
          v17 = v12 + 1;
          if ( v16 != 13 )
            break;
          if ( v3[v17] == 10 )
          {
            if ( v12 + 2 < v9 && v3[v12 + 2] == 13 )
            {
              if ( v12 + 3 < v9 && v3[v12 + 3] == 10 )
              {
                v12 += 4;
                v14 = v12 == 0;
                v13 = v12;
              }
              else
              {
                v12 += 4;
                v13 = 0;
                v14 = 1;
              }
            }
            else
            {
              v12 += 3;
              v13 = 0;
              v14 = 1;
            }
            goto LABEL_15;
          }
LABEL_21:
          v12 += 2;
          v13 = 0;
          if ( v11 <= v12 )
            goto LABEL_22;
        }
        if ( v16 == 10 )
        {
          if ( v3[v17] != 10 )
            goto LABEL_21;
          v12 += 2;
          v14 = v12 == 0;
          v13 = v12;
        }
        else
        {
          ++v12;
          v13 = 0;
          v14 = 1;
        }
LABEL_15:
        ;
      }
      while ( v14 && v11 > v12 );
LABEL_22:
      if ( v13 )
      {
        v18 = v13 - 1;
        if ( v13 - 1 > 0 )
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v22 = 0;
          do
          {
            v23 = (unsigned __int8)v3[v22];
            v24 = v22;
            v25 = v21 <= 0 || v21 < v20;
            v26 = v22 + 1;
            if ( v25 )
            {
              if ( v23 == 13 || v23 == 10 )
              {
                if ( v21 )
                  v62 = 1;
                else
                  v62 = status_code == 0LL;
                if ( !v62 )
                {
                  if ( v22 > 0 )
                  {
                    v63 = v3 + 1;
                    v64 = (__int64)&v3[v22 + 1];
                    while ( 1 )
                    {
                      if ( *(v63 - 1) == 32 )
                      {
                        header_buf_usedb = v64;
                        if ( (*status_code & 0x80000000) == 0 )
                          goto LABEL_91;
                        endofheadersb = v63;
                        v85 = v13;
                        v87 = v18;
                        ia = v22;
                        v65 = strtol(v63, 0uLL, 10);
                        v64 = header_buf_usedb;
                        v63 = endofheadersb;
                        v13 = v85;
                        v18 = v87;
                        *status_code = v65;
                        v22 = ia;
                      }
                      if ( ++v63 == (const char *)v64 )
                        goto LABEL_91;
                    }
                  }
                  do
                  {
LABEL_94:
                    v46 = (unsigned __int8)v3[v24];
                    v21 = v24;
                    v22 = v24 + 1;
                    if ( v46 != 13 && v46 != 10 )
                    {
                      v20 = v24;
                      v19 = 0;
                      goto LABEL_35;
                    }
                    ++v24;
                  }
                  while ( v9 > (int)v24 );
                  v66 = v21 + 2;
                  v20 = v22;
                  v21 = v22;
                  v19 = 0;
                  v22 = v66;
                  continue;
                }
                valuestart = v19;
                if ( v21 < v20 && v20 < v19 )
                {
                  v42 = v20 - v21;
                  header_buf_useda = (int)v42;
                  endofheadersa = &v3[v21];
                  v84 = v13;
                  v86 = v18;
                  i = v22;
                  if ( strncasecmp(endofheadersa, "content-length", v42) )
                  {
                    v43 = strncasecmp(endofheadersa, "transfer-encoding", header_buf_useda);
                    v13 = v84;
                    v18 = v86;
                    v22 = i;
                    if ( !v43 )
                    {
                      v44 = strncasecmp(&v3[valuestart], "chunked", 7uLL);
                      v13 = v84;
                      v27 = v44 == 0;
                      v18 = v86;
                      v45 = chunked;
                      v22 = i;
                      if ( v27 )
                        v45 = 1;
                      chunked = v45;
                    }
                    goto LABEL_91;
                  }
                  content_length = strtol(&v3[valuestart], 0uLL, 10);
                  v22 = i;
                  v13 = v84;
                  v18 = v86;
                  if ( v9 > i )
                    goto LABEL_94;
                }
                else
                {
LABEL_91:
                  if ( v9 > v22 )
                    goto LABEL_94;
                }
                v20 = v22;
                v21 = v22;
                v19 = 0;
                v22 = v26;
                continue;
              }
            }
            else
            {
              if ( v23 == 58 )
              {
                v67 = v26;
                while ( 1 )
                {
                  v19 = v67;
                  if ( v18 <= (int)v67 - 1 )
                    break;
                  v68 = (unsigned __int8)v3[v67++];
                  if ( v68 != 32 && v68 != 9 )
                  {
                    v20 = v22;
                    v22 = v19;
                    goto LABEL_35;
                  }
                }
                v20 = v22;
                v22 = v67;
                continue;
              }
              v27 = v23 == 10 || v23 == 13;
              if ( v27 )
                goto LABEL_91;
            }
            ++v22;
LABEL_35:
            ;
          }
          while ( v18 > v22 );
        }
        v8 = v9 - v13;
        endofheaders = v13;
        memcpy(buf, &v3[v13], v9 - v13);
        header_buf_used = v9;
        if ( !chunked )
        {
LABEL_64:
          v35 = v8 + v7;
          if ( (int)content_length <= 0 )
          {
            if ( v5 >= v35 )
            {
              v37 = content_length <= v35;
              goto LABEL_70;
            }
            v5 = v8 + v7;
            if ( !content_length )
            {
              v36 = v8 + v7;
              goto LABEL_67;
            }
          }
          else
          {
            v36 = content_length;
            if ( content_length < v35 )
            {
              v35 = content_length;
              v8 = content_length - v7;
              v37 = 1;
              if ( content_length > v5 )
                goto LABEL_67;
LABEL_70:
              v83 = v37;
              memcpy(&content_buf[v7], buf, v8);
              v39 = v83;
              v7 = v35;
              chunked = 0;
              goto LABEL_71;
            }
            if ( v5 >= v35 )
            {
              v37 = content_length == v35;
              goto LABEL_70;
            }
LABEL_67:
            v5 = v36;
          }
          v38 = (char *)realloc(content_buf, v5);
          if ( !v38 )
            goto LABEL_171;
          content_buf = v38;
          v37 = v35 >= content_length;
          goto LABEL_70;
        }
        if ( v8 > 0 )
          goto LABEL_38;
        v39 = v7 >= content_length;
LABEL_71:
        if ( (int)content_length > 0 && v39 )
        {
          free(v3);
          *size = v7;
          if ( v7 )
            return content_buf;
          goto LABEL_76;
        }
      }
      else
      {
        header_buf_used += v8;
        endofheaders = 0;
      }
    }
  }
  if ( !chunked )
    goto LABEL_64;
LABEL_38:
  v28 = 0;
  while ( 2 )
  {
    v31 = v7;
    if ( v4 )
      goto LABEL_39;
    while ( 2 )
    {
      if ( v6 )
      {
LABEL_101:
        if ( v28 >= v8 )
          goto LABEL_55;
      }
      else
      {
        if ( buf[v28] == 13 )
          ++v28;
        if ( v28 >= v8 )
          goto LABEL_55;
        if ( buf[v28] == 10 )
        {
          ++v28;
          goto LABEL_101;
        }
      }
      v48 = *_ctype_b_loc();
      v49 = v8 + v6 - v28;
      for ( j = v28 + 1; ; ++j )
      {
        if ( (v48[(unsigned __int8)buf[j - 1]] & 0x1000) == 0 || v6 > 0x1E )
        {
          v28 = j - 1;
          goto LABEL_111;
        }
        chunksize_buf[v6] = buf[j - 1];
        chunksize_buf[v6 + 1] = 0;
        if ( v6 + 1 == v49 )
          break;
        ++v6;
      }
      v28 = j;
      v6 = v49;
LABEL_111:
      if ( v28 >= v8 )
        goto LABEL_55;
      v52 = &buf[v28];
      while ( 1 )
      {
        v53 = (unsigned __int8)*v52;
        if ( v53 == 13 || v53 == 10 )
          break;
        ++v28;
        ++v52;
        if ( v28 == v8 )
          goto LABEL_55;
      }
      if ( v8 <= v28 )
        goto LABEL_55;
      v55 = (unsigned __int8)buf[v28];
      if ( v55 == 13 )
      {
        if ( ++v28 >= v8 )
          goto LABEL_55;
        v55 = (unsigned __int8)buf[v28];
      }
      if ( v55 != 10 )
        continue;
      break;
    }
    if ( !v6 )
      goto end_of_stream;
    v56 = chunksize_buf;
    v4 = 0;
    do
    {
      v57 = (unsigned __int8)*v56++;
      v58 = 16 * v4;
      v59 = v58 - 0x57;
      v4 = v58 - 0x30 + v57;
      v60 = v59 + (v57 | 0x20);
      if ( (unsigned __int8)(v57 - 0x30) > 9u )
        v4 = v60;
    }
    while ( v56 != &chunksize_buf[v6] );
    chunksize_buf[0] = 0;
    ++v28;
    if ( !v4 )
      goto end_of_stream;
    v31 = v7;
    v6 = 0;
LABEL_39:
    if ( v8 - v28 > v4 )
      v29 = v4;
    else
      v29 = v8 - v28;
    v7 += v29;
    if ( v7 <= v5 )
    {
LABEL_49:
      v32 = &buf[v28];
      v28 += v29;
      v4 -= v29;
      memcpy(&content_buf[v31], v32, v29);
      if ( v28 < v8 )
        continue;
LABEL_55:
      chunked = 1;
      if ( (int)content_length > 0 && v7 >= content_length )
        goto end_of_stream;
      goto LABEL_6;
    }
    break;
  }
  v5 = v7;
  if ( (content_length & 0x80000000) == 0 )
  {
    if ( content_length < v7 )
      v5 = v7;
    else
      v5 = content_length;
  }
  chunkeda = v31;
  v30 = (char *)realloc(content_buf, v5);
  v31 = chunkeda;
  if ( v30 )
  {
    content_buf = v30;
    goto LABEL_49;
  }
LABEL_171:
  free(content_buf);
  v70 = v3;
LABEL_172:
  free(v70);
  content_buf = 0LL;
  *size = -1;
  return content_buf;
}
