void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // rax
  __int64 v4; // rbx
  unsigned int v5; // r12d
  unsigned int v6; // ebp
  int v7; // r14d
  unsigned int v8; // ecx
  char *v9; // rax
  signed int v10; // ecx
  int v11; // esi
  int v12; // eax
  int v13; // r15d
  char v14; // dl
  char v15; // di
  int v16; // edx
  int v17; // edx
  char *v18; // r12
  __int64 v19; // rsi
  int v20; // r14d
  int v21; // r15d
  int v22; // ebp
  int v23; // ebx
  __int64 v24; // r13
  char *v25; // r11
  char v26; // di
  const char *v27; // rbx
  __int64 v28; // r12
  const char *v29; // rdi
  bool v30; // zf
  unsigned int v31; // r15d
  unsigned int v32; // eax
  bool v33; // r13
  char *v34; // rax
  __int64 v35; // rdi
  int v37; // r13d
  unsigned int v38; // r11d
  unsigned int v39; // r15d
  unsigned int v40; // eax
  char *v41; // rax
  __int64 v42; // rdx
  __int64 v43; // rsi
  int v44; // r15d
  __int64 v45; // r14
  const unsigned __int16 *v46; // r8
  unsigned int v47; // edi
  char *v48; // rdx
  __int64 v49; // rcx
  char *v50; // rax
  char v51; // al
  char *v52; // rdx
  int v53; // r8d
  char *v54; // rcx
  int v55; // eax
  int v56; // r8d
  int v57; // eax
  int v58; // eax
  int v59; // eax
  char v60; // al
  unsigned int v61; // eax
  char *content_buf; // [rsp+8h] [rbp-8D0h]
  char *header_buf; // [rsp+10h] [rbp-8C8h]
  unsigned int content_buf_len; // [rsp+1Ch] [rbp-8BCh]
  int chunked; // [rsp+20h] [rbp-8B8h]
  unsigned int chunkeda; // [rsp+20h] [rbp-8B8h]
  unsigned int content_length; // [rsp+24h] [rbp-8B4h]
  char *ptr; // [rsp+28h] [rbp-8B0h]
  unsigned int content_buf_used; // [rsp+30h] [rbp-8A8h]
  unsigned int content_buf_useda; // [rsp+30h] [rbp-8A8h]
  int endofheaders; // [rsp+34h] [rbp-8A4h]
  int endofheadersa; // [rsp+34h] [rbp-8A4h]
  signed int header_buf_used_0; // [rsp+3Ch] [rbp-89Ch]
  unsigned int header_buf_used_0a; // [rsp+3Ch] [rbp-89Ch]
  unsigned int header_buf_len; // [rsp+40h] [rbp-898h]
  unsigned int chunksize_buf_index; // [rsp+44h] [rbp-894h]
  int s1; // [rsp+48h] [rbp-890h]
  size_t v79; // [rsp+50h] [rbp-888h]
  size_t v80; // [rsp+50h] [rbp-888h]
  char *v81; // [rsp+58h] [rbp-880h]
  char chunksize_buf[32]; // [rsp+70h] [rbp-868h] BYREF
  char buf[2048]; // [rsp+90h] [rbp-848h] BYREF
  unsigned __int64 v86; // [rsp+898h] [rbp-40h]

  v86 = __readfsqword(0x28u);
  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800uLL);
  if ( !v3 )
    goto LABEL_148;
  header_buf = v3;
  content_buf = (char *)malloc(0x800uLL);
  if ( !content_buf )
  {
    free(header_buf);
LABEL_148:
    *size = -1;
    return 0LL;
  }
  chunksize_buf[0] = 0;
  v4 = 0LL;
  v5 = 0;
  v6 = 0;
  content_buf_len = 2048;
  content_buf_used = 0;
  header_buf_len = 2048;
  content_length = -1;
  chunked = 0;
  endofheaders = 0;
  ptr = header_buf;
  while ( 1 )
  {
LABEL_6:
    v7 = receivedata((unsigned int)s, buf, 2048LL, 5000LL, 0LL);
    if ( v7 <= 0 )
    {
end_of_stream:
      free(ptr);
      *size = v5;
      if ( !v5 )
      {
        free(content_buf);
        return 0LL;
      }
      return content_buf;
    }
    if ( endofheaders )
    {
      if ( chunked )
        goto LABEL_68;
      goto LABEL_46;
    }
    v8 = v7 + content_buf_used;
    if ( header_buf_len < v7 + content_buf_used )
    {
      v9 = (char *)realloc(ptr, v8);
      v8 = v7 + content_buf_used;
      if ( !v9 )
      {
        free(ptr);
        free(content_buf);
        *size = -1;
        return 0LL;
      }
      header_buf_len = v7 + content_buf_used;
      ptr = v9;
    }
    header_buf_used_0 = v8;
    memcpy(&ptr[content_buf_used], buf, v7);
    v10 = header_buf_used_0;
    v11 = header_buf_used_0 - 1;
    if ( header_buf_used_0 > 1 )
      break;
    content_buf_used = header_buf_used_0;
  }
  v12 = 0;
  do
  {
    v15 = ptr[v12];
    v16 = v12 + 1;
    if ( v15 == 13 )
    {
      if ( ptr[v16] == 10 )
      {
        if ( v12 + 2 < header_buf_used_0 && ptr[v12 + 2] == 13 )
        {
          if ( v12 + 3 < header_buf_used_0 && ptr[v12 + 3] == 10 )
          {
            v30 = v12 == -4;
            v12 += 4;
            v14 = v30;
            v13 = v12;
          }
          else
          {
            v12 += 4;
            v13 = 0;
            v14 = 1;
          }
        }
        else
        {
          v12 += 3;
          v13 = 0;
          v14 = 1;
        }
LABEL_15:
        if ( v11 <= v12 )
          break;
        continue;
      }
    }
    else
    {
      if ( v15 != 10 )
      {
        ++v12;
        v13 = 0;
        v14 = 1;
        goto LABEL_15;
      }
      if ( ptr[v16] == 10 )
      {
        v30 = v12 == -2;
        v12 += 2;
        v14 = v30;
        v13 = v12;
        goto LABEL_15;
      }
    }
    v12 += 2;
    v13 = 0;
    v14 = 1;
    if ( v11 <= v12 )
      break;
  }
  while ( v14 );
  if ( !v13 )
  {
    content_buf_used = header_buf_used_0;
    endofheaders = 0;
    goto LABEL_6;
  }
  if ( v13 - 1 <= 0 )
    goto LABEL_66;
  content_buf_useda = v5;
  v17 = 0;
  v18 = ptr;
  endofheadersa = v13;
  v19 = 0LL;
  v20 = 0;
  v21 = v13 - 1;
  header_buf_used_0a = v6;
  v22 = 0;
  chunksize_buf_index = v4;
  v23 = v10;
  while ( 2 )
  {
    while ( 2 )
    {
      LODWORD(v24) = v20 + 1;
      v25 = &v18[v20];
      v26 = *v25;
      if ( (int)v19 > 0 && (int)v19 >= v17 )
      {
        if ( v26 == 58 )
        {
          v24 = (int)v24;
          while ( 1 )
          {
            v22 = v24;
            if ( (int)v24 - 1 >= v21 )
              break;
            v60 = v18[v24++];
            if ( v60 != 32 && v60 != 9 )
            {
              v17 = v20;
              v20 = v22;
              goto LABEL_28;
            }
          }
          v17 = v20;
          v20 = v24;
LABEL_28:
          if ( v21 <= v20 )
            goto LABEL_65;
          continue;
        }
        if ( v26 != 10 && v26 != 13 )
        {
LABEL_27:
          ++v20;
          goto LABEL_28;
        }
LABEL_41:
        if ( v23 > v20 )
          goto LABEL_62;
        goto LABEL_42;
      }
      break;
    }
    if ( v26 != 13 && v26 != 10 )
      goto LABEL_27;
    if ( !(_DWORD)v19 && status_code )
    {
      if ( v20 <= 0 )
        goto LABEL_62;
      s1 = v23;
      v79 = (size_t)v18;
      v27 = v18 + 1;
      v28 = (__int64)&v18[v20 + 1];
      v81 = v25;
      do
      {
        while ( *(v27 - 1) != 32 )
        {
          if ( ++v27 == (const char *)v28 )
            goto LABEL_40;
        }
        if ( *status_code >= 0 )
          break;
        v29 = v27++;
        *status_code = strtol(v29, 0LL, 10);
      }
      while ( v27 != (const char *)v28 );
LABEL_40:
      v23 = s1;
      v18 = (char *)v79;
      v25 = v81;
      goto LABEL_41;
    }
    if ( (int)v19 >= v17 || v17 >= v22 )
      goto LABEL_41;
    v80 = v17 - (int)v19;
    if ( !strncasecmp(&v18[v19], "content-length", v80) )
    {
      v61 = strtol(&v18[v22], 0LL, 10);
      v25 = &v18[v20];
      content_length = v61;
      if ( v23 > v20 )
        goto LABEL_62;
      goto LABEL_42;
    }
    v57 = strncasecmp(&v18[v19], "transfer-encoding", v80);
    v25 = &v18[v20];
    if ( v57 )
      goto LABEL_41;
    v58 = strncasecmp(&v18[v22], "chunked", 7uLL);
    v25 = &v18[v20];
    v30 = v58 == 0;
    v59 = 1;
    if ( !v30 )
      v59 = chunked;
    chunked = v59;
    if ( v23 <= v20 )
    {
LABEL_42:
      v22 = 0;
      v17 = v20;
      v19 = v20;
      goto LABEL_27;
    }
LABEL_62:
    while ( 1 )
    {
      v19 = v20;
      v20 = v24;
      if ( *v25 != 13 && *v25 != 10 )
        break;
      ++v25;
      if ( v23 == (_DWORD)v24 )
      {
        v20 = v19 + 2;
        v22 = 0;
        v17 = v23;
        v19 = v23;
        goto LABEL_28;
      }
      LODWORD(v24) = v24 + 1;
    }
    v22 = 0;
    v17 = v19;
    if ( v21 > (int)v24 )
      continue;
    break;
  }
LABEL_65:
  v10 = v23;
  v5 = content_buf_useda;
  v13 = endofheadersa;
  v6 = header_buf_used_0a;
  v4 = chunksize_buf_index;
LABEL_66:
  v7 = v10 - v13;
  content_buf_used = v10;
  memcpy(buf, &ptr[v13], v10 - v13);
  endofheaders = v13;
  if ( !chunked )
  {
LABEL_46:
    v31 = v7 + v5;
    if ( (int)content_length <= 0 )
    {
      if ( content_buf_len < v31 )
      {
        content_buf_len = v7 + v5;
        if ( !content_length )
        {
          v32 = v7 + v5;
LABEL_49:
          content_buf_len = v32;
        }
        v34 = (char *)realloc(content_buf, content_buf_len);
        if ( !v34 )
          goto LABEL_145;
        content_buf = v34;
        v33 = v31 >= content_length;
        goto LABEL_52;
      }
      v33 = v31 >= content_length;
    }
    else
    {
      v32 = content_length;
      if ( content_length >= v31 )
      {
        v32 = content_length;
        if ( content_buf_len < v31 )
          goto LABEL_49;
        v33 = content_length == v31;
      }
      else
      {
        v31 = content_length;
        v33 = 1;
        v7 = content_length - v5;
        if ( content_buf_len < content_length )
          goto LABEL_49;
      }
    }
LABEL_52:
    v35 = v5;
    v5 = v31;
    memcpy(&content_buf[v35], buf, v7);
    chunked = 0;
LABEL_53:
    if ( (int)content_length > 0 && v33 )
      goto end_of_stream;
    goto LABEL_6;
  }
  if ( v7 <= 0 )
  {
    v33 = v5 >= content_length;
    goto LABEL_53;
  }
LABEL_68:
  v37 = 0;
  while ( 2 )
  {
    v42 = v5;
    if ( v6 )
      goto LABEL_69;
    v44 = v7;
    while ( 2 )
    {
      if ( (_DWORD)v4 )
      {
LABEL_89:
        if ( v37 >= v44 )
          goto LABEL_85;
        v45 = v37;
      }
      else
      {
        if ( buf[v37] == 13 )
          ++v37;
        if ( v37 >= v44 )
          goto LABEL_85;
        v45 = v37;
        if ( buf[v37] == 10 )
        {
          ++v37;
          goto LABEL_89;
        }
      }
      v46 = *_ctype_b_loc();
      v47 = v44 + v4 - v37;
      v48 = &buf[v45];
      while ( 1 )
      {
        v49 = *v48;
        if ( (v46[v49] & 0x1000) == 0 || (unsigned int)v4 > 0x1E )
          break;
        chunksize_buf[v4] = v49;
        ++v37;
        ++v48;
        chunksize_buf[(unsigned int)(v4 + 1)] = 0;
        if ( (_DWORD)v4 + 1 == v47 )
        {
          v4 = v47;
          break;
        }
        v4 = (unsigned int)(v4 + 1);
      }
      if ( v37 >= v44 )
        goto LABEL_85;
      v50 = &buf[v37];
      while ( *v50 != 13 && *v50 != 10 )
      {
        ++v37;
        ++v50;
        if ( v37 == v44 )
          goto LABEL_85;
      }
      if ( v44 <= v37 )
        goto LABEL_85;
      v51 = buf[v37];
      if ( v51 == 13 )
      {
        if ( ++v37 >= v44 )
          goto LABEL_85;
        v51 = buf[v37];
      }
      if ( v51 != 10 )
        continue;
      break;
    }
    v7 = v44;
    if ( !(_DWORD)v4 )
      goto end_of_stream;
    v52 = chunksize_buf;
    v53 = 0;
    v54 = &chunksize_buf[(unsigned int)v4];
    do
    {
      while ( 1 )
      {
        v55 = *v52;
        v56 = 16 * v53;
        if ( (unsigned __int8)(*v52 - 48) > 9u )
          break;
        ++v52;
        v53 = v56 + v55 - 48;
        if ( v54 == v52 )
          goto LABEL_109;
      }
      ++v52;
      v53 = v56 + (char)(v55 | 0x20) - 87;
    }
    while ( v54 != v52 );
LABEL_109:
    chunksize_buf[0] = 0;
    ++v37;
    if ( !v53 )
      goto end_of_stream;
    v42 = v5;
    v4 = 0LL;
    v6 = v53;
LABEL_69:
    v38 = v7 - v37;
    if ( v7 - v37 > v6 )
      v38 = v6;
    v39 = v38;
    v5 += v38;
    if ( content_buf_len >= v5 )
    {
LABEL_78:
      v43 = v37;
      v37 += v39;
      v6 -= v39;
      memcpy(&content_buf[v42], &buf[v43], v39);
      if ( v37 < v7 )
        continue;
LABEL_85:
      chunked = 1;
      v33 = v5 >= content_length;
      goto LABEL_53;
    }
    break;
  }
  chunkeda = v42;
  v40 = content_length;
  if ( content_length < v5 )
    v40 = v5;
  if ( (content_length & 0x80000000) != 0 )
    v40 = v5;
  content_buf_len = v40;
  v41 = (char *)realloc(content_buf, v40);
  v42 = chunkeda;
  if ( v41 )
  {
    content_buf = v41;
    goto LABEL_78;
  }
LABEL_145:
  free(content_buf);
  free(ptr);
  *size = -1;
  return 0LL;
}
