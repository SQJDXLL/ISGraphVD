void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  unsigned int v4; // r4
  size_t v5; // r11
  unsigned int v6; // r8
  unsigned int v7; // r5
  int v8; // r0
  signed int v9; // r7
  int v10; // r9
  void *v11; // r0
  unsigned int v12; // r6
  int *v13; // r3
  int *v14; // r10
  bool v15; // r2
  int v17; // r2
  char *v18; // r0
  unsigned int v19; // r9
  unsigned int v20; // r3
  char *v21; // r0
  bool v22; // r6
  _DWORD *v24; // r6
  unsigned int v26; // r8
  int *v27; // r11
  int v28; // r12
  int v29; // r1
  int v30; // r6
  int v31; // r4
  char *v32; // r10
  bool v33; // zf
  _BOOL4 v34; // r0
  const char *v35; // r7
  int v36; // r0
  int v37; // r5
  bool v38; // zf
  _BOOL4 v39; // r2
  const char *v40; // r4
  int v41; // t1
  unsigned int v42; // r2
  int v43; // r4
  int v44; // t1
  bool v45; // zf
  char *v46; // r10
  signed int v47; // r6
  char *v48; // r0
  char *v49; // r3
  char *v50; // r2
  char *v51; // r0
  const void *v52; // r1
  size_t v53; // r9
  char *v54; // r3
  unsigned int v55; // lr
  const unsigned __int16 *v56; // r5
  int v57; // r0
  _BYTE *v58; // r1
  char v59; // r2
  int v60; // t1
  int v61; // r2
  int v62; // r3
  int v63; // t1
  bool v64; // zf
  int v65; // r3
  unsigned __int8 *v66; // r3
  unsigned __int8 *v67; // r4
  int v68; // r2
  int v69; // t1
  int v70; // r5
  int v71; // r5
  _BOOL4 v72; // r2
  const char *v73; // r7
  int v74; // r0
  int v75; // r3
  int v76; // r2
  int v77; // r3
  int v78; // t1
  int v79; // r4
  bool v80; // zf
  int *v81; // r6
  char *v82; // r0
  int *v83; // r6
  int v84; // [sp+0h] [bp-898h] BYREF
  int content_length; // [sp+8h] [bp-890h]
  char *header_buf; // [sp+Ch] [bp-88Ch]
  unsigned int v87; // [sp+10h] [bp-888h]
  unsigned int chunksize_buf_index; // [sp+14h] [bp-884h]
  unsigned int chunksize; // [sp+18h] [bp-880h]
  int chunked; // [sp+1Ch] [bp-87Ch]
  int sa; // [sp+20h] [bp-878h]
  unsigned int header_buf_len; // [sp+24h] [bp-874h]
  unsigned int content_buf_len; // [sp+28h] [bp-870h]
  unsigned int content_buf_used; // [sp+2Ch] [bp-86Ch]
  size_t v95; // [sp+30h] [bp-868h]
  unsigned int v96; // [sp+34h] [bp-864h]
  int *status_codea; // [sp+38h] [bp-860h]
  int *sizea; // [sp+3Ch] [bp-85Ch]
  int *v99; // [sp+40h] [bp-858h]
  int *v100; // [sp+44h] [bp-854h]
  char chunksize_buf[32]; // [sp+4Ch] [bp-84Ch] BYREF
  char buf[2048]; // [sp+6Ch] [bp-82Ch] BYREF

  content_buf_len = s;
  v99 = status_code;
  if ( status_code )
    *status_code = -1;
  chunksize_buf_index = (unsigned int)malloc(0x800u);
  if ( !chunksize_buf_index )
    goto LABEL_176;
  header_buf = (char *)malloc(0x800u);
  if ( !header_buf )
  {
    free((void *)chunksize_buf_index);
LABEL_176:
    *size = -1;
    return 0;
  }
  v4 = 0;
  v87 = -1;
  v5 = 2048;
  content_length = (int)buf;
  v6 = 0;
  v7 = 0;
  chunksize_buf[0] = 0;
  content_buf_used = 2048;
  header_buf_len = 0;
  sa = 0;
  chunksize = (unsigned int)chunksize_buf;
  chunked = 0;
  v100 = size;
  while ( 1 )
  {
LABEL_6:
    v8 = receivedata(content_buf_len, content_length, 2048, 5000, 0);
    v9 = v8;
    if ( v8 <= 0 )
      goto end_of_stream;
    if ( sa )
      break;
    v10 = v8 + chunked;
    if ( v8 + chunked > content_buf_used )
    {
      v11 = realloc((void *)chunksize_buf_index, v8 + chunked);
      if ( !v11 )
      {
        v83 = v100;
        free((void *)chunksize_buf_index);
        free(header_buf);
        *v83 = -1;
        return 0;
      }
      chunksize_buf_index = (unsigned int)v11;
      content_buf_used = v10;
    }
    v12 = chunksize_buf_index;
    memcpy((void *)(chunksize_buf_index + chunked), (const void *)content_length, v9);
    if ( v10 <= 1 )
    {
      chunked = v10;
    }
    else
    {
      v13 = 0;
      do
      {
        v17 = *((unsigned __int8 *)v13 + v12);
        v18 = (char *)v13 + 1;
        if ( v17 == 13 )
        {
          if ( v18[v12] != 10 )
            goto LABEL_22;
          if ( (int)v13 + 2 < v10 && *((_BYTE *)v13 + v12 + 2) == 13 )
          {
            if ( (int)v13 + 3 < v10 && *((_BYTE *)v13 + v12 + 3) == 10 )
            {
              v15 = ++v13 == 0;
              v14 = v13;
            }
            else
            {
              ++v13;
              v14 = 0;
              v15 = 1;
            }
          }
          else
          {
            v13 = (int *)((char *)v13 + 3);
            v14 = 0;
            v15 = 1;
          }
        }
        else
        {
          if ( v17 != 10 )
          {
            v13 = (int *)((char *)v13 + 1);
            v14 = 0;
            v15 = 1;
            goto LABEL_16;
          }
          if ( v18[v12] != 10 )
          {
LABEL_22:
            v13 = (int *)((char *)v13 + 2);
            v14 = 0;
            v15 = 1;
            goto LABEL_16;
          }
          v13 = (int *)((char *)v13 + 2);
          v15 = v13 == 0;
          v14 = v13;
        }
LABEL_16:
        ;
      }
      while ( v10 - 1 > (int)v13 && v15 );
      if ( v14 )
      {
        if ( (int)((int)v14 + -0x1) <= 0 )
          goto LABEL_84;
        chunked = v4;
        v95 = v5;
        v96 = v6;
        status_codea = v14;
        v26 = chunksize_buf_index;
        v27 = v99;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = (char *)v14 + -0x1;
        sa = v7;
        while ( 2 )
        {
          while ( 2 )
          {
            v34 = v29 > 0;
            if ( v28 > v29 )
              v34 = 0;
            v33 = !v34;
            v35 = (const char *)(v26 + v30);
            v36 = *(unsigned __int8 *)(v26 + v30);
            v37 = v30 + 1;
            if ( v33 )
            {
              v38 = v36 == 10;
              if ( v36 != 10 )
                v38 = v36 == 13;
              if ( v38 )
              {
                v39 = v29 == 0;
                if ( !v27 )
                  v39 = 0;
                if ( v39 )
                {
                  if ( v30 <= 0 )
                    goto LABEL_73;
                  v40 = (const char *)v26;
                  do
                  {
                    while ( 1 )
                    {
                      v41 = *(unsigned __int8 *)v40++;
                      if ( v41 == 32 )
                        break;
                      if ( v35 == v40 )
                        goto LABEL_72;
                    }
                    if ( *v27 >= 0 )
                      break;
                    *v27 = strtol(v40, 0u, 10);
                  }
                  while ( v35 != v40 );
                  goto LABEL_72;
                }
                v72 = v28 > v29;
                if ( v28 >= v31 )
                  v72 = 0;
                if ( !v72 )
                  goto LABEL_72;
                v73 = (const char *)(v26 + v29);
                sizea = (int *)(v28 - v29);
                if ( !strncasecmp((const char *)(v26 + v29), "content-length", v28 - v29) )
                {
                  v87 = strtol((const char *)(v26 + v31), 0u, 10);
                  goto LABEL_72;
                }
                if ( !strncasecmp(v73, "transfer-encoding", (size_t)sizea) )
                {
                  v74 = strncasecmp((const char *)(v26 + v31), "chunked", 7u);
                  v75 = header_buf_len;
                  if ( !v74 )
                    v75 = 1;
                  header_buf_len = v75;
                  if ( v30 < v10 )
                  {
LABEL_73:
                    v42 = v26 + v30 - 1;
                    while ( 1 )
                    {
                      v44 = *(unsigned __int8 *)++v42;
                      v43 = v44;
                      v29 = v30;
                      v45 = v44 == 10;
                      if ( v44 != 10 )
                        v45 = v43 == 13;
                      v31 = v45;
                      v30 = v37;
                      if ( !v45 )
                        break;
                      if ( v10 == v37 )
                      {
                        v30 = v29 + 2;
                        v31 = 0;
                        v28 = v10;
                        v29 = v10;
                        goto LABEL_54;
                      }
                      ++v37;
                    }
                    v28 = v29;
                    if ( (int)v32 > v37 )
                      continue;
LABEL_83:
                    v4 = chunked;
                    v7 = sa;
                    v5 = v95;
                    v6 = v96;
                    v14 = status_codea;
LABEL_84:
                    v9 = v10 - (_DWORD)v14;
                    memcpy((void *)content_length, (char *)v14 + chunksize_buf_index, v10 - (_DWORD)v14);
                    chunked = v10;
                    sa = (int)v14;
                    if ( header_buf_len )
                    {
                      if ( v9 > 0 )
                        goto LABEL_86;
LABEL_107:
                      v22 = v6 >= v87;
LABEL_36:
                      if ( (int)v87 > 0 && v22 )
                      {
end_of_stream:
                        v24 = v100;
                        free((void *)chunksize_buf_index);
                        *v24 = v6;
                        if ( !v6 )
                        {
                          free(header_buf);
                          return 0;
                        }
                        return header_buf;
                      }
                      goto LABEL_6;
                    }
LABEL_26:
                    v19 = v6 + v9;
                    if ( (int)v87 <= 0 )
                    {
                      if ( v5 < v19 )
                      {
                        if ( !v87 )
                        {
                          v20 = v6 + v9;
                          goto LABEL_32;
                        }
                        v5 = v6 + v9;
                        goto LABEL_33;
                      }
                      v22 = v87 <= v19;
                    }
                    else
                    {
                      v20 = v87;
                      if ( v87 < v19 )
                      {
                        v9 = v87 - v6;
                        if ( v87 > v5 )
                        {
                          v19 = v87;
                          goto LABEL_32;
                        }
                        v19 = v87;
                        v22 = 1;
                      }
                      else if ( v5 >= v19 )
                      {
                        v22 = v87 == v19;
                      }
                      else
                      {
                        if ( v87 < v19 )
                          v20 = v6 + v9;
                        else
                          v20 = v87;
LABEL_32:
                        v5 = v20;
LABEL_33:
                        v21 = (char *)realloc(header_buf, v5);
                        if ( !v21 )
                        {
                          v81 = v100;
                          v82 = header_buf;
                          goto LABEL_172;
                        }
                        header_buf = v21;
                        v22 = v19 >= v87;
                      }
                    }
                    memcpy(&header_buf[v6], (const void *)content_length, v9);
                    v6 = v19;
                    header_buf_len = 0;
                    goto LABEL_36;
                  }
                }
                else
                {
LABEL_72:
                  if ( v30 < v10 )
                    goto LABEL_73;
                }
                v28 = v30;
                v29 = v30;
                v31 = 0;
                ++v30;
              }
              else
              {
LABEL_53:
                ++v30;
              }
            }
            else
            {
              if ( v36 != 58 )
              {
                v33 = v36 == 13;
                if ( v36 != 13 )
                  v33 = v36 == 10;
                if ( !v33 )
                  goto LABEL_53;
                goto LABEL_72;
              }
              if ( v30 >= (int)v32 )
              {
                v31 = v30 + 1;
                v28 = v30++;
              }
              else
              {
                v76 = v30;
                do
                {
                  v78 = *(unsigned __int8 *)++v35;
                  v77 = v78;
                  v79 = v76;
                  v80 = v78 == 9;
                  if ( v78 != 9 )
                    v80 = v77 == 32;
                  ++v76;
                  if ( !v80 )
                  {
                    v31 = v79 + 1;
                    v28 = v30;
                    v30 = v31;
                    goto LABEL_54;
                  }
                }
                while ( v32 != (char *)v76 );
                v31 = (int)(v32 + 1);
                v28 = v30;
                v30 = (int)(v32 + 1);
              }
            }
            break;
          }
LABEL_54:
          if ( (int)v32 <= v30 )
            goto LABEL_83;
          continue;
        }
      }
      chunked = v10;
      sa = 0;
    }
  }
  if ( !header_buf_len )
    goto LABEL_26;
LABEL_86:
  v46 = header_buf;
  v47 = 0;
  while ( 2 )
  {
    if ( v7 )
      goto LABEL_95;
    header_buf = 0;
    while ( 2 )
    {
      if ( v4 )
      {
LABEL_104:
        if ( v47 >= v9 )
          goto LABEL_105;
        goto LABEL_113;
      }
      v54 = (char *)&v84 + v47 + 0x870;
      if ( *(v54 - 2052) == 13 )
      {
        if ( v9 <= ++v47 )
        {
LABEL_136:
          v7 = 0;
          header_buf = v46;
          goto LABEL_107;
        }
        v54 = (char *)&v84 + v47 + 0x870;
      }
      else if ( v47 >= v9 )
      {
        goto LABEL_136;
      }
      if ( *(v54 - 2052) == 10 )
      {
        ++v47;
        goto LABEL_104;
      }
LABEL_113:
      v55 = v9 + v4 - v47;
      v56 = *_ctype_b_loc();
      v57 = content_length + v47 - 1;
      v58 = (_BYTE *)(chunksize + v4);
      do
      {
        v60 = *(unsigned __int8 *)++v57;
        v59 = v60;
        if ( ((v4 <= 0x1E) & (v56[v60] >> 0xC)) == 0 )
          break;
        ++v4;
        *v58 = v59;
        ++v47;
        *++v58 = 0;
      }
      while ( v4 != v55 );
      if ( v47 >= v9 )
        goto LABEL_105;
      v61 = content_length + v47 - 1;
      while ( 1 )
      {
        v63 = *(unsigned __int8 *)++v61;
        v62 = v63;
        v64 = v63 == 13;
        if ( v63 != 13 )
          v64 = v62 == 10;
        if ( v64 )
          break;
        if ( v9 == ++v47 )
          goto LABEL_105;
      }
      if ( v9 <= v47 )
      {
LABEL_105:
        v7 = (unsigned int)header_buf;
        goto LABEL_106;
      }
      v65 = *((unsigned __int8 *)&v84 + v47 + 0x6C);
      if ( v65 == 13 )
      {
        if ( v9 <= ++v47 )
          goto LABEL_105;
        v65 = *((unsigned __int8 *)&v84 + v47 + 0x6C);
      }
      if ( v65 != 10 )
        continue;
      break;
    }
    if ( !v4 )
      goto LABEL_133;
    v66 = (unsigned __int8 *)chunksize;
    v7 = 0;
    v67 = (unsigned __int8 *)(chunksize + v4);
    do
    {
      v69 = *v66++;
      v68 = v69;
      v70 = 16 * v7;
      if ( (unsigned int)(v69 - 0x30) > 9 )
      {
        v71 = v70 - 0x57;
        v68 |= 0x20u;
      }
      else
      {
        v71 = v70 - 0x30;
      }
      v7 = v71 + v68;
    }
    while ( v66 != v67 );
    v4 = 0;
    ++v47;
    chunksize_buf[0] = 0;
    if ( !v7 )
    {
LABEL_133:
      header_buf = v46;
      goto end_of_stream;
    }
LABEL_95:
    v53 = v9 - v47;
    if ( v9 - v47 >= v7 )
      v53 = v7;
    v49 = (char *)(v6 + v53);
    if ( v6 + v53 <= v5 )
    {
      v50 = v46;
      goto LABEL_93;
    }
    if ( (v87 & 0x80000000) == 0 )
    {
      if ( v87 < (unsigned int)v49 )
        v5 = v6 + v53;
      else
        v5 = v87;
    }
    else
    {
      v5 = v6 + v53;
    }
    header_buf = (char *)(v6 + v53);
    v48 = (char *)realloc(v46, v5);
    v49 = header_buf;
    v50 = v48;
    if ( v48 )
    {
LABEL_93:
      v51 = &v50[v6];
      v6 = (unsigned int)v49;
      v46 = v50;
      v52 = (const void *)(content_length + v47);
      v47 += v53;
      memcpy(v51, v52, v53);
      v7 -= v53;
      if ( v47 >= v9 )
      {
LABEL_106:
        header_buf = v46;
        goto LABEL_107;
      }
      continue;
    }
    break;
  }
  v81 = v100;
  v82 = v46;
LABEL_172:
  free(v82);
  free((void *)chunksize_buf_index);
  *v81 = -1;
  return 0;
}
