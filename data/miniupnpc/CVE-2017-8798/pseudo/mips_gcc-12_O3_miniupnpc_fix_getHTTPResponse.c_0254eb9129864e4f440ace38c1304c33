char *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  void *v4; // $v0
  void *v5; // $v1
  unsigned int v6; // $s3
  char *v7; // $s0
  unsigned int v8; // $s4
  unsigned int v9; // $s6
  unsigned int v10; // $s1
  int v11; // $s2
  signed int v12; // $v1
  size_t v13; // $a2
  char *v14; // $v0
  unsigned int v15; // $v1
  int v16; // $a2
  int v17; // $a3
  char *v18; // $v0
  int v19; // $v0
  int v20; // $t7
  signed int v21; // $v0
  unsigned int v22; // $a0
  size_t v23; // $s7
  unsigned int v24; // $fp
  char *v25; // $s2
  int v26; // $v0
  bool v27; // dc
  _BOOL4 v28; // $v0
  int *v29; // $s1
  int v31; // $t0
  int *v32; // $s3
  char *v33; // $s2
  int v34; // $a2
  int v35; // $a1
  int v36; // $fp
  int v37; // $s4
  int v38; // $s0
  char *v39; // $s5
  int v40; // $v0
  int v41; // $s1
  _BOOL4 v42; // $v0
  int v43; // $v0
  _BOOL4 v44; // $v0
  int v45; // $v0
  int v46; // $v1
  char *v47; // $v0
  int v48; // $s0
  int v49; // $s6
  int v50; // $s3
  char *v51; // $s7
  int v52; // $v1
  size_t v53; // $a1
  char *v54; // $s2
  _BOOL4 v55; // $v0
  unsigned int v56; // $s5
  unsigned int v57; // $a2
  unsigned int v58; // $s5
  size_t v59; // $fp
  char *v60; // $v0
  const unsigned __int16 *v61; // $a3
  unsigned int v62; // $t0
  char *v63; // $v0
  unsigned int v64; // $a1
  unsigned int v65; // $a2
  int v66; // $a0
  char *v67; // $v1
  _BOOL4 v68; // $v0
  int v69; // $v0
  int v70; // $v0
  int v71; // $a3
  char *v72; // $a0
  char *v73; // $t0
  int v74; // $v1
  int v75; // $a3
  const char *v76; // $s0
  int v77; // $v0
  char *v78; // $v1
  int v79; // $v1
  int *v80; // $s1
  int *v81; // $s1
  unsigned int content_buf_lena; // [sp+20h] [-878h]
  unsigned int content_buf_len; // [sp+20h] [-878h]
  char *content_buf; // [sp+24h] [-874h]
  int content_length; // [sp+28h] [-870h]
  char *header_buf_0; // [sp+2Ch] [-86Ch]
  int chunked; // [sp+34h] [-864h]
  unsigned int chunksize_buf_index; // [sp+38h] [-860h]
  signed int chunksize; // [sp+3Ch] [-85Ch]
  unsigned int chunksizea; // [sp+3Ch] [-85Ch]
  unsigned int chunksizeb; // [sp+3Ch] [-85Ch]
  unsigned int chunksizec; // [sp+3Ch] [-85Ch]
  unsigned int content_buf_used; // [sp+40h] [-858h]
  unsigned int content_buf_useda; // [sp+40h] [-858h]
  unsigned int header_buf_len; // [sp+44h] [-854h]
  int endofheaders; // [sp+48h] [-850h]
  char *v97; // [sp+4Ch] [-84Ch]
  int valuestart; // [sp+50h] [-848h] BYREF
  int *status_codea; // [sp+54h] [-844h]
  char *v100; // [sp+58h] [-840h]
  size_t n; // [sp+5Ch] [-83Ch]
  int *sizea; // [sp+60h] [-838h]
  char *v103; // [sp+64h] [-834h]
  char *v104; // [sp+68h] [-830h]
  _DWORD *v105; // [sp+6Ch] [-82Ch]
  char chunksize_buf[32]; // [sp+74h] [-824h] BYREF
  char buf[2048]; // [sp+94h] [-804h] BYREF
  int v108; // [sp+894h] [-4h]

  v105 = &_stack_chk_guard;
  status_codea = status_code;
  if ( status_code )
    *status_code = -1;
  v4 = malloc(0x800u);
  if ( !v4 )
  {
    *size = -1;
    content_buf = 0;
    goto LABEL_34;
  }
  content_buf_lena = (unsigned int)v4;
  content_buf = (char *)malloc(0x800u);
  v5 = (void *)content_buf_lena;
  if ( !content_buf )
  {
LABEL_161:
    free(v5);
    content_buf = 0;
    *size = -1;
    goto LABEL_34;
  }
  content_buf_len = 2048;
  header_buf_len = 2048;
  content_length = -1;
  v103 = "content-length";
  sizea = size;
  chunksize_buf[0] = 0;
  chunked = 0;
  v6 = 0;
  v7 = buf;
  v104 = "transfer-encoding";
  chunksize_buf_index = 0;
  v8 = 0;
  v9 = 0;
  header_buf_0 = (char *)v5;
  v10 = 0;
  do
  {
LABEL_6:
    v11 = receivedata(s, v7, 2048, 5000);
    if ( v11 <= 0 )
      break;
    if ( v6 )
    {
      v22 = content_length;
      if ( !chunked )
      {
        v23 = v11;
        v24 = v9 + v11;
        if ( content_length <= 0 )
          goto LABEL_56;
        goto LABEL_25;
      }
      v15 = v10;
      goto LABEL_87;
    }
    v12 = v11 + v10;
    v13 = v11;
    if ( header_buf_len < v11 + v10 )
    {
      v14 = (char *)realloc(header_buf_0, v11 + v10);
      v12 = v11 + v10;
      if ( !v14 )
      {
        v81 = sizea;
        free(header_buf_0);
        free(content_buf);
        content_buf = 0;
        *v81 = -1;
        goto LABEL_34;
      }
      header_buf_len = v11 + v10;
      header_buf_0 = v14;
      v13 = v11;
    }
    chunksize = v12;
    memcpy(&header_buf_0[v10], v7, v13);
    v15 = chunksize;
    v16 = chunksize - 1;
    if ( chunksize < 2 )
      goto LABEL_19;
    v17 = 0;
    v18 = header_buf_0;
    do
    {
      while ( 1 )
      {
        while ( 1 )
        {
          while ( 1 )
          {
            while ( 1 )
            {
              v19 = *v18;
              v20 = v17 + 1;
              if ( v19 == 13 )
                break;
              while ( v19 != 10 )
              {
                v17 = v20;
                if ( v20 >= v16 )
                  goto LABEL_19;
                v19 = header_buf_0[v20++];
                if ( v19 == 13 )
                  goto LABEL_17;
              }
              v17 += 2;
              if ( header_buf_0[v20] == 10 )
                goto LABEL_42;
              v18 = &header_buf_0[v17];
              if ( v17 >= v16 )
              {
                v10 = chunksize;
                goto LABEL_6;
              }
            }
LABEL_17:
            v21 = v17 + 2;
            if ( header_buf_0[v20] == 10 )
              break;
            v17 += 2;
            v18 = &header_buf_0[v17];
            if ( v17 >= v16 )
              goto LABEL_19;
          }
          v10 = chunksize;
          if ( v21 >= chunksize )
            goto LABEL_6;
          v20 = v17 + 3;
          if ( header_buf_0[v21] == 13 )
            break;
          v17 += 3;
          v18 = &header_buf_0[v17];
          if ( v17 >= v16 )
            goto LABEL_6;
        }
        v10 = chunksize;
        if ( v20 >= chunksize )
          goto LABEL_6;
        v17 += 4;
        if ( header_buf_0[v20] == 10 )
          break;
        v18 = &header_buf_0[v17];
        if ( v17 >= v16 )
          goto LABEL_6;
      }
LABEL_42:
      if ( v17 >= v16 )
        break;
      v18 = &header_buf_0[v17];
    }
    while ( !v17 );
    if ( v20 > 0 )
    {
      v31 = 0;
      v32 = status_codea;
      v33 = header_buf_0;
      chunksizea = v8;
      v97 = v7;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = v20;
      endofheaders = v17;
      v38 = v15;
      while ( 1 )
      {
        v39 = &v33[v36];
        v40 = v33[v36];
        v41 = v36 + 1;
        if ( v35 <= 0 )
          break;
        if ( v35 < v34 )
        {
          if ( v40 != 13 )
          {
            v27 = v40 != 10;
            v44 = v34 < v31;
            if ( v27 )
              goto LABEL_51;
LABEL_74:
            valuestart = v31;
            if ( v44 )
            {
              n = v34 - v35;
              v100 = &v33[v35];
              if ( strncasecmp(&v33[v35], v103, v34 - v35) )
              {
                if ( !strncasecmp(v100, v104, n) )
                {
                  v45 = strncasecmp(&v33[valuestart], "chunked", 7u);
                  v46 = chunked;
                  if ( !v45 )
                    v46 = 1;
                  chunked = v46;
                  if ( v36 < v38 )
                  {
LABEL_64:
                    while ( 1 )
                    {
                      v43 = *v39;
                      if ( v43 != 13 )
                      {
                        v34 = v36;
                        if ( v43 != 10 )
                          break;
                      }
                      v36 = v41;
                      if ( v41 == v38 )
                      {
                        v36 = v38 + 1;
                        v31 = 0;
                        v34 = v38;
                        v35 = v38;
                        goto LABEL_52;
                      }
                      v39 = &v33[v41++];
                    }
                  }
                  else
                  {
                    v34 = v36;
                  }
                  v35 = v36;
                  goto LABEL_82;
                }
              }
              else
              {
                content_length = strtol(&v33[valuestart], 0u, 10);
              }
            }
LABEL_60:
            v42 = v36 < v38;
LABEL_61:
            v34 = v36;
            if ( v42 )
              goto LABEL_64;
            v35 = v36;
LABEL_82:
            v31 = 0;
            goto LABEL_51;
          }
LABEL_73:
          v44 = v34 < v31;
          goto LABEL_74;
        }
        if ( v40 == 58 )
        {
          v77 = v36;
          if ( v36 >= v37 )
          {
LABEL_149:
            v31 = v77 + 1;
          }
          else
          {
            v78 = &v33[v36];
            while ( 1 )
            {
              v79 = v78[1];
              if ( v79 != 32 )
              {
                v31 = v77 + 1;
                if ( v79 != 9 )
                  break;
              }
              v78 = &v33[++v77];
              if ( v77 == v37 )
                goto LABEL_149;
            }
          }
          v34 = v36;
          v36 = v31;
          goto LABEL_52;
        }
        if ( v40 == 13 )
          goto LABEL_60;
        v27 = v40 == 10;
        v42 = v36 < v38;
        if ( v27 )
          goto LABEL_61;
LABEL_51:
        v36 = v41;
LABEL_52:
        v15 = v38;
        if ( v36 >= v37 )
        {
          v8 = chunksizea;
          v17 = endofheaders;
          v7 = v97;
          goto LABEL_54;
        }
      }
      if ( v40 != 13 && v40 != 10 )
        goto LABEL_51;
      if ( !v35 && v32 )
      {
        if ( v36 <= 0 )
          goto LABEL_64;
        valuestart = v38;
        v100 = v33;
        v76 = v33 + 1;
        while ( 1 )
        {
          if ( *(v76 - 1) == 32 )
          {
            if ( *v32 >= 0 )
            {
LABEL_59:
              v41 = v36 + 1;
              v38 = valuestart;
              v33 = v100;
              goto LABEL_60;
            }
            *v32 = strtol(v76, 0u, 10);
          }
          if ( &v33[v36 + 1] == ++v76 )
            goto LABEL_59;
        }
      }
      v42 = v36 < v38;
      if ( v35 >= v34 )
        goto LABEL_61;
      goto LABEL_73;
    }
LABEL_54:
    v11 = v15 - v17;
    content_buf_used = v15;
    chunksizeb = v17;
    memcpy(v7, &header_buf_0[v17], v15 - v17);
    v15 = content_buf_used;
    if ( !chunked )
    {
      v22 = content_length;
      v10 = content_buf_used;
      v6 = chunksizeb;
      v23 = v11;
      v24 = v9 + v11;
      if ( content_length <= 0 )
      {
LABEL_56:
        v25 = content_buf;
        if ( content_buf_len < v24 )
        {
          content_buf_len = v24;
          if ( !v22 )
          {
            v22 = v24;
LABEL_27:
            content_buf_len = v22;
          }
          v25 = (char *)realloc(content_buf, content_buf_len);
          if ( !v25 )
            goto LABEL_160;
        }
LABEL_29:
        memcpy(&v25[v9], v7, v23);
        v15 = v10;
        v9 = v24;
        content_buf = v25;
        chunked = 0;
        goto LABEL_30;
      }
LABEL_25:
      if ( v22 < v24 )
      {
        v24 = v22;
        v23 = v22 - v9;
        if ( content_buf_len < v22 )
          goto LABEL_27;
        v25 = content_buf;
      }
      else
      {
        v25 = content_buf;
        if ( content_buf_len < v24 )
          goto LABEL_27;
      }
      goto LABEL_29;
    }
    v6 = chunksizeb;
    if ( v11 <= 0 )
    {
      v26 = content_length;
      goto LABEL_31;
    }
LABEL_87:
    v47 = v7;
    chunksizec = v6;
    v48 = v9;
    v49 = 0;
    v50 = v11;
    content_buf_useda = v15;
    v51 = v47;
    while ( 2 )
    {
      v56 = chunksize_buf_index;
      if ( v8 )
      {
LABEL_96:
        v57 = v50 - v49;
        if ( v8 < v50 - v49 )
          v57 = v8;
        v58 = v57 + v48;
        v59 = v57;
        if ( content_buf_len < v57 + v48 )
        {
          v52 = content_length;
          if ( content_length < 0 )
          {
            content_buf_len = v57 + v48;
            v53 = v57 + v48;
          }
          else
          {
            if ( content_length < v58 )
              v52 = v57 + v48;
            content_buf_len = v52;
            v53 = v52;
          }
          v54 = (char *)realloc(content_buf, v53);
          if ( !v54 )
          {
LABEL_160:
            size = sizea;
            free(content_buf);
            v5 = header_buf_0;
            goto LABEL_161;
          }
        }
        else
        {
          v54 = content_buf;
        }
        memcpy(&v54[v48], &v51[v49], v59);
        v49 += v59;
        v8 -= v59;
        v48 = v58;
        content_buf = v54;
        v55 = v49 < v50;
LABEL_94:
        if ( !v55 )
        {
LABEL_102:
          v9 = v48;
          v6 = chunksizec;
          v15 = content_buf_useda;
          v7 = v51;
          goto LABEL_30;
        }
        continue;
      }
      break;
    }
    if ( chunksize_buf_index )
    {
      while ( 1 )
      {
        v55 = v49 < v50;
        if ( v49 >= v50 )
          break;
LABEL_107:
        v61 = *_ctype_b_loc();
        v62 = v56;
        v63 = &chunksize_buf[v56];
        v64 = v50 + v56 - v49;
        v65 = v49 - v56;
        do
        {
          v66 = v51[v65 + v62];
          if ( (v61[v66] & 0x10) == 0 )
            break;
          if ( v62 >= 0x1F )
            break;
          ++v62;
          *v63 = v66;
          v63[1] = 0;
          ++v49;
          ++v63;
        }
        while ( v62 != v64 );
        v55 = v49 < v50;
        if ( v49 >= v50 )
          goto LABEL_123;
        v67 = &v51[v49];
        while ( 1 )
        {
          v69 = *v67;
          if ( v69 == 13 )
            break;
          v27 = v69 == 10;
          v68 = v49 < v50;
          if ( v27 )
            goto LABEL_117;
          ++v49;
          ++v67;
          if ( v49 == v50 )
            goto LABEL_101;
        }
        v68 = v49 < v50;
LABEL_117:
        if ( !v68 )
        {
LABEL_101:
          chunksize_buf_index = v62;
          goto LABEL_102;
        }
        v70 = *((char *)&valuestart + v49 + 0x44);
        if ( v70 == 13 )
        {
          if ( ++v49 >= v50 )
            goto LABEL_101;
          v56 = v62;
          if ( *((_BYTE *)&valuestart + v49 + 0x44) == 10 )
          {
LABEL_126:
            if ( !v62 )
              goto LABEL_158;
            v71 = 0;
            v72 = chunksize_buf;
            v73 = &chunksize_buf[v62];
            do
            {
              while ( 1 )
              {
                v74 = *v72;
                v75 = 16 * v71;
                if ( (unsigned __int8)(v74 - 0x30) >= 0xAu )
                  break;
                ++v72;
                v71 = v75 - 48 + v74;
                if ( v73 == v72 )
                  goto LABEL_131;
              }
              ++v72;
              v71 = v75 - 87 + (v74 | 0x20);
            }
            while ( v73 != v72 );
LABEL_131:
            chunksize_buf[0] = 0;
            ++v49;
            if ( !v71 )
            {
LABEL_158:
              v80 = sizea;
              free(header_buf_0);
              *v80 = v48;
              if ( v48 )
                goto LABEL_34;
              goto LABEL_159;
            }
            chunksize_buf_index = 0;
            v8 = v71;
            goto LABEL_96;
          }
        }
        else
        {
          v56 = v62;
          if ( v70 == 10 )
            goto LABEL_126;
        }
        if ( !v56 )
          goto LABEL_104;
      }
      v62 = v56;
      goto LABEL_123;
    }
LABEL_104:
    v60 = (char *)&valuestart + v49 + 0x848;
    if ( *(v60 - 2052) != 13 )
    {
      if ( v49 >= v50 )
        goto LABEL_133;
      if ( *(v60 - 2052) != 10 )
        goto LABEL_107;
LABEL_136:
      v55 = ++v49 < v50;
      if ( v49 < v50 )
        goto LABEL_107;
      v62 = v56;
LABEL_123:
      chunksize_buf_index = v62;
      goto LABEL_94;
    }
    if ( ++v49 < v50 )
    {
      if ( *((_BYTE *)&valuestart + v49 + 0x44) != 10 )
        goto LABEL_107;
      goto LABEL_136;
    }
LABEL_133:
    v9 = v48;
    v6 = chunksizec;
    v15 = content_buf_useda;
    v7 = v51;
    chunksize_buf_index = 0;
    v8 = 0;
LABEL_30:
    v26 = content_length;
LABEL_31:
    v27 = v26 <= 0;
    v28 = v9 < v26;
    if ( v27 )
    {
LABEL_19:
      v10 = v15;
      goto LABEL_6;
    }
    v10 = v15;
  }
  while ( v28 );
  v29 = sizea;
  free(header_buf_0);
  *v29 = v9;
  if ( !v9 )
  {
LABEL_159:
    free(content_buf);
    content_buf = 0;
  }
LABEL_34:
  if ( v108 != *v105 )
    _stack_chk_fail();
  return content_buf;
}
