void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // rax
  __int64 v4; // rbx
  unsigned int v5; // ebp
  unsigned int v6; // r12d
  int v7; // r15d
  int v8; // r13d
  unsigned int v9; // ecx
  char *v10; // rax
  signed int v11; // ecx
  int v12; // esi
  int v13; // eax
  char v14; // dl
  char v15; // di
  int v16; // edx
  int v17; // edx
  __int64 v18; // rsi
  int v19; // r14d
  int v20; // ebx
  int v21; // r12d
  char *v22; // rbp
  int v23; // r15d
  __int64 v24; // r13
  char *v25; // r11
  char v26; // di
  __int64 v27; // r12
  const char *v28; // rbp
  const char *v29; // rdi
  bool v30; // zf
  unsigned int v31; // edx
  int v32; // ecx
  int v33; // r14d
  __int64 v34; // rdi
  int v35; // ecx
  char *v36; // r9
  int *v37; // r14
  __int64 v38; // rdx
  int v39; // ebp
  int v40; // r14d
  int v41; // r12d
  unsigned int v42; // eax
  char *v43; // rax
  unsigned int v44; // ecx
  char *v45; // r13
  unsigned int v46; // ecx
  int v47; // r15d
  unsigned int v48; // r15d
  int v49; // r13d
  __int64 v50; // r12
  const unsigned __int16 *v51; // r8
  unsigned int v52; // edi
  char *v53; // rdx
  __int64 v54; // rcx
  char *v55; // rax
  char v56; // al
  char *v57; // rcx
  int v58; // r8d
  char *v59; // rbx
  int v60; // eax
  int v61; // r8d
  char *v62; // rax
  int v63; // eax
  int v64; // eax
  int v65; // eax
  char v66; // al
  int v67; // eax
  char *content_buf; // [rsp+8h] [rbp-8D0h]
  unsigned int content_bufa; // [rsp+8h] [rbp-8D0h]
  char *header_buf; // [rsp+10h] [rbp-8C8h]
  int header_bufa; // [rsp+10h] [rbp-8C8h]
  unsigned int content_buf_len; // [rsp+1Ch] [rbp-8BCh]
  signed int chunksize_buf_index; // [rsp+20h] [rbp-8B8h]
  unsigned int chunksize_buf_indexa; // [rsp+20h] [rbp-8B8h]
  unsigned int chunksize_buf_indexc; // [rsp+20h] [rbp-8B8h]
  unsigned int chunksize_buf_indexd; // [rsp+20h] [rbp-8B8h]
  unsigned int chunksize_buf_indexb; // [rsp+20h] [rbp-8B8h]
  unsigned int chunksize; // [rsp+24h] [rbp-8B4h]
  unsigned int chunksizea; // [rsp+24h] [rbp-8B4h]
  char *ptr; // [rsp+28h] [rbp-8B0h]
  int content_length; // [rsp+30h] [rbp-8A8h]
  unsigned int content_buf_used; // [rsp+34h] [rbp-8A4h]
  unsigned int content_buf_useda; // [rsp+34h] [rbp-8A4h]
  int chunked; // [rsp+38h] [rbp-8A0h]
  int endofheaders; // [rsp+3Ch] [rbp-89Ch]
  int endofheadersa; // [rsp+3Ch] [rbp-89Ch]
  unsigned int header_buf_len; // [rsp+44h] [rbp-894h]
  size_t v90; // [rsp+50h] [rbp-888h]
  size_t v91; // [rsp+50h] [rbp-888h]
  char *v92; // [rsp+58h] [rbp-880h]
  char chunksize_buf[32]; // [rsp+70h] [rbp-868h] BYREF
  char buf[2048]; // [rsp+90h] [rbp-848h] BYREF
  unsigned __int64 v97; // [rsp+898h] [rbp-40h]

  v97 = __readfsqword(0x28u);
  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800uLL);
  if ( !v3 )
    goto LABEL_149;
  header_buf = v3;
  content_buf = (char *)malloc(0x800uLL);
  if ( !content_buf )
  {
    free(header_buf);
LABEL_149:
    *size = -1;
    return 0LL;
  }
  chunksize_buf[0] = 0;
  v4 = 0LL;
  v5 = 0;
  v6 = 0;
  content_buf_len = 2048;
  v7 = 0;
  content_buf_used = 0;
  header_buf_len = 2048;
  content_length = -1;
  chunked = 0;
  ptr = header_buf;
  while ( 1 )
  {
    while ( 1 )
    {
      while ( 1 )
      {
        v8 = receivedata((unsigned int)s, buf, 2048LL, 5000LL, 0LL);
        if ( v8 <= 0 )
        {
          v36 = ptr;
          v37 = size;
          v35 = v5;
          goto end_of_stream;
        }
        if ( v7 )
        {
          if ( chunked )
            goto LABEL_64;
LABEL_46:
          v31 = v8 + v5;
          v32 = v8 + v5;
          if ( content_length <= 0 )
          {
            if ( content_buf_len < v31 )
            {
              if ( content_length < (int)v31 )
              {
                v33 = v8 + v5;
                goto LABEL_112;
              }
LABEL_116:
              v33 = v8 + v5;
              v31 = content_length;
              goto LABEL_112;
            }
          }
          else
          {
            if ( content_length < (int)v31 )
            {
              v33 = content_length;
              v32 = content_length;
              v8 = content_length - v5;
              if ( content_buf_len >= content_length )
                goto LABEL_49;
              v33 = content_length;
              v31 = content_length;
LABEL_112:
              content_buf_len = v31;
              v62 = (char *)realloc(content_buf, v31);
              if ( !v62 )
              {
LABEL_146:
                free(content_buf);
                free(ptr);
                *size = -1;
                return 0LL;
              }
              content_buf = v62;
              v32 = v33;
LABEL_49:
              v34 = v5;
              chunksize_buf_indexc = v32;
              v5 = v33;
              memcpy(&content_buf[v34], buf, v8);
              chunked = 0;
              v35 = chunksize_buf_indexc;
              goto LABEL_50;
            }
            if ( content_buf_len < v31 )
              goto LABEL_116;
          }
          v33 = v8 + v5;
          goto LABEL_49;
        }
        v9 = v8 + content_buf_used;
        if ( header_buf_len < v8 + content_buf_used )
        {
          v10 = (char *)realloc(ptr, v9);
          v9 = v8 + content_buf_used;
          if ( !v10 )
          {
            free(ptr);
            free(content_buf);
            *size = -1;
            return 0LL;
          }
          header_buf_len = v8 + content_buf_used;
          ptr = v10;
        }
        chunksize_buf_index = v9;
        memcpy(&ptr[content_buf_used], buf, v8);
        v11 = chunksize_buf_index;
        v12 = chunksize_buf_index - 1;
        if ( chunksize_buf_index > 1 )
          break;
        content_buf_used = chunksize_buf_index;
      }
      v13 = 0;
      do
      {
        v15 = ptr[v13];
        v16 = v13 + 1;
        if ( v15 == 13 )
        {
          if ( ptr[v16] == 10 )
          {
            if ( v13 + 2 < chunksize_buf_index && ptr[v13 + 2] == 13 )
            {
              if ( v13 + 3 < chunksize_buf_index && ptr[v13 + 3] == 10 )
              {
                v30 = v13 == -4;
                v13 += 4;
                v14 = v30;
                v7 = v13;
              }
              else
              {
                v13 += 4;
                v7 = 0;
                v14 = 1;
              }
            }
            else
            {
              v13 += 3;
              v7 = 0;
              v14 = 1;
            }
LABEL_15:
            if ( v12 <= v13 )
              break;
            continue;
          }
        }
        else
        {
          if ( v15 != 10 )
          {
            ++v13;
            v7 = 0;
            v14 = 1;
            goto LABEL_15;
          }
          if ( ptr[v16] == 10 )
          {
            v30 = v13 == -2;
            v13 += 2;
            v14 = v30;
            v7 = v13;
            goto LABEL_15;
          }
        }
        v13 += 2;
        v7 = 0;
        v14 = 1;
        if ( v12 <= v13 )
          break;
      }
      while ( v14 );
      if ( v7 )
        break;
      content_buf_used = chunksize_buf_index;
      v7 = 0;
    }
    if ( v7 - 1 <= 0 )
      goto LABEL_62;
    chunksize_buf_indexa = v4;
    v17 = 0;
    v18 = 0LL;
    chunksize = v6;
    v19 = 0;
    v20 = v11;
    v21 = 0;
    content_buf_useda = v5;
    v22 = ptr;
    endofheaders = v7;
    v23 = v7 - 1;
    while ( 2 )
    {
      while ( 2 )
      {
        LODWORD(v24) = v19 + 1;
        v25 = &v22[v19];
        v26 = *v25;
        if ( (int)v18 > 0 && v17 <= (int)v18 )
        {
          if ( v26 == 58 )
          {
            v24 = (int)v24;
            while ( 1 )
            {
              v21 = v24;
              if ( (int)v24 - 1 >= v23 )
                break;
              v66 = v22[v24++];
              if ( v66 != 32 && v66 != 9 )
              {
                v17 = v19;
                v19 = v21;
                goto LABEL_28;
              }
            }
            v17 = v19;
            v19 = v24;
LABEL_28:
            if ( v23 <= v19 )
              goto LABEL_61;
            continue;
          }
          if ( v26 != 10 && v26 != 13 )
          {
LABEL_27:
            ++v19;
            goto LABEL_28;
          }
LABEL_41:
          if ( v20 > v19 )
            goto LABEL_58;
          goto LABEL_42;
        }
        break;
      }
      if ( v26 != 13 && v26 != 10 )
        goto LABEL_27;
      if ( !(_DWORD)v18 && status_code )
      {
        if ( v19 <= 0 )
          goto LABEL_58;
        v27 = (__int64)&v22[v19 + 1];
        v90 = (size_t)v22;
        v28 = v22 + 1;
        v92 = v25;
        do
        {
          while ( *(v28 - 1) != 32 )
          {
            if ( (const char *)v27 == ++v28 )
              goto LABEL_40;
          }
          if ( *status_code >= 0 )
            break;
          v29 = v28++;
          *status_code = strtol(v29, 0LL, 10);
        }
        while ( (const char *)v27 != v28 );
LABEL_40:
        v22 = (char *)v90;
        v25 = v92;
        goto LABEL_41;
      }
      if ( v17 <= (int)v18 || v17 >= v21 )
        goto LABEL_41;
      v91 = v17 - (int)v18;
      if ( !strncasecmp(&v22[v18], "content-length", v91) )
      {
        v67 = strtol(&v22[v21], 0LL, 10);
        v25 = &v22[v19];
        content_length = v67;
        if ( v20 > v19 )
          goto LABEL_58;
        goto LABEL_42;
      }
      v63 = strncasecmp(&v22[v18], "transfer-encoding", v91);
      v25 = &v22[v19];
      if ( v63 )
        goto LABEL_41;
      v64 = strncasecmp(&v22[v21], "chunked", 7uLL);
      v25 = &v22[v19];
      v30 = v64 == 0;
      v65 = 1;
      if ( !v30 )
        v65 = chunked;
      chunked = v65;
      if ( v20 <= v19 )
      {
LABEL_42:
        v21 = 0;
        v17 = v19;
        v18 = v19;
        goto LABEL_27;
      }
LABEL_58:
      while ( 1 )
      {
        v18 = v19;
        v19 = v24;
        if ( *v25 != 13 && *v25 != 10 )
          break;
        ++v25;
        if ( v20 == (_DWORD)v24 )
        {
          v19 = v18 + 2;
          v21 = 0;
          v17 = v20;
          v18 = v20;
          goto LABEL_28;
        }
        LODWORD(v24) = v24 + 1;
      }
      v21 = 0;
      v17 = v18;
      if ( v23 > (int)v24 )
        continue;
      break;
    }
LABEL_61:
    v11 = v20;
    v6 = chunksize;
    v4 = chunksize_buf_indexa;
    v5 = content_buf_useda;
    v7 = endofheaders;
LABEL_62:
    v8 = v11 - v7;
    chunksize_buf_indexd = v11;
    memcpy(buf, &ptr[v7], v11 - v7);
    content_buf_used = chunksize_buf_indexd;
    if ( !chunked )
      goto LABEL_46;
    if ( v8 <= 0 )
    {
LABEL_105:
      v35 = v5;
      goto LABEL_50;
    }
LABEL_64:
    v38 = v5;
    endofheadersa = v7;
    v39 = v6;
    v40 = 0;
    v41 = v8;
LABEL_69:
    if ( !v39 )
      break;
LABEL_70:
    v44 = v41 - v40;
    if ( v41 - v40 > v39 )
      v44 = v39;
    v47 = v38 + v44;
    if ( content_buf_len < (unsigned int)v38 + v44 )
    {
      v42 = content_length;
      chunksizea = v38;
      chunksize_buf_indexb = v44;
      if ( content_length < v47 )
        v42 = v38 + v44;
      content_buf_len = v42;
      v43 = (char *)realloc(content_buf, v42);
      v44 = chunksize_buf_indexb;
      v38 = chunksizea;
      v45 = v43;
      if ( !v43 )
        goto LABEL_146;
    }
    else
    {
      v45 = content_buf;
    }
    content_bufa = v44;
    memcpy(&v45[v38], &buf[v40], v44);
    v46 = content_bufa;
    v38 = (unsigned int)v47;
    content_buf = v45;
    v40 += v46;
    v39 -= v46;
    if ( v40 < v41 )
      goto LABEL_69;
    v6 = v39;
    v5 = v47;
    v7 = endofheadersa;
    v35 = v38;
LABEL_50:
    if ( content_length > 0 && content_length <= v35 )
    {
      v36 = ptr;
      v37 = size;
      goto end_of_stream;
    }
  }
  v48 = v38;
  v49 = v41;
  do
  {
    if ( !(_DWORD)v4 )
    {
      if ( buf[v40] == 13 )
        ++v40;
      if ( v40 >= v49 )
        goto LABEL_104;
      v50 = v40;
      if ( buf[v40] != 10 )
        goto LABEL_81;
      ++v40;
    }
    if ( v40 >= v49 )
      goto LABEL_104;
    v50 = v40;
LABEL_81:
    v51 = *_ctype_b_loc();
    v52 = v49 + v4 - v40;
    v53 = &buf[v50];
    while ( 1 )
    {
      v54 = *v53;
      if ( (v51[v54] & 0x1000) == 0 || (unsigned int)v4 > 0x1E )
        break;
      chunksize_buf[v4] = v54;
      ++v40;
      ++v53;
      chunksize_buf[(unsigned int)(v4 + 1)] = 0;
      if ( (_DWORD)v4 + 1 == v52 )
      {
        v4 = v52;
        break;
      }
      v4 = (unsigned int)(v4 + 1);
    }
    if ( v40 >= v49 )
      goto LABEL_104;
    v55 = &buf[v40];
    while ( *v55 != 10 && *v55 != 13 )
    {
      ++v40;
      ++v55;
      if ( v40 == v49 )
        goto LABEL_104;
    }
    if ( v49 <= v40 )
    {
LABEL_104:
      v6 = 0;
      v5 = v48;
      v7 = endofheadersa;
      goto LABEL_105;
    }
    v56 = buf[v40];
    if ( v56 == 13 )
    {
      if ( ++v40 >= v49 )
        goto LABEL_104;
      v56 = buf[v40];
    }
  }
  while ( v56 != 10 );
  v38 = v48;
  v41 = v49;
  if ( (_DWORD)v4 )
  {
    v57 = chunksize_buf;
    v58 = 0;
    v59 = &chunksize_buf[v4];
    do
    {
      while ( 1 )
      {
        v60 = *v57;
        v61 = 16 * v58;
        if ( (unsigned __int8)(*v57 - 48) > 9u )
          break;
        ++v57;
        v58 = v61 + v60 - 48;
        if ( v57 == v59 )
          goto LABEL_99;
      }
      ++v57;
      v58 = v61 + (char)(v60 | 0x20) - 87;
    }
    while ( v57 != v59 );
LABEL_99:
    chunksize_buf[0] = 0;
    ++v40;
    if ( v58 )
    {
      v4 = 0LL;
      v39 = v58;
      goto LABEL_70;
    }
  }
  v36 = ptr;
  v37 = size;
  v5 = v48;
  v35 = v48;
end_of_stream:
  header_bufa = v35;
  free(v36);
  *v37 = header_bufa;
  if ( !v5 )
  {
    free(content_buf);
    return 0LL;
  }
  return content_buf;
}
