char *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  void *v3; // $s2
  signed int v4; // $s7
  unsigned int v5; // $s1
  char *v6; // $s6
  signed int v7; // $fp
  signed int v8; // $s3
  unsigned int v9; // $v0
  void *v10; // $v0
  int v11; // $t2
  char *v12; // $v1
  char *v13; // $v0
  int v14; // $a0
  signed int v15; // $v0
  int v16; // $a0
  signed int v17; // $a3
  _BOOL4 v18; // $v0
  bool v19; // dc
  size_t v20; // $s5
  size_t v21; // $fp
  size_t v22; // $v0
  char *v23; // $v0
  char *v24; // $s3
  int v25; // $v0
  _BOOL4 v26; // $v0
  int *v28; // $fp
  int v29; // $t4
  int v30; // $s1
  int v31; // $a2
  const char *v32; // $s3
  int v33; // $a1
  int v34; // $s5
  int v35; // $s2
  const char *v36; // $s4
  int v37; // $v0
  int v38; // $s0
  _BOOL4 v39; // $a0
  unsigned int v40; // $s3
  size_t v41; // $a2
  signed int v42; // $s2
  char *v43; // $s1
  int v44; // $s6
  signed int v45; // $a2
  int v46; // $s0
  size_t v47; // $s5
  size_t v48; // $v1
  char *v49; // $v0
  char *v50; // $a1
  _BOOL4 v51; // $v0
  int v52; // $v0
  const unsigned __int16 *v53; // $a2
  unsigned int v54; // $a1
  char *v55; // $s0
  unsigned int v56; // $t3
  unsigned int v57; // $a3
  _BOOL4 v58; // $a0
  signed int v59; // $v0
  int v60; // $v1
  int v61; // $v0
  char *i; // $v0
  char *v63; // $a0
  _BOOL4 v64; // $v0
  int v65; // $v0
  int v66; // $v0
  int v67; // $v1
  int v68; // $t0
  char *v69; // $v1
  char *v70; // $a1
  int v71; // $a0
  int v72; // $t0
  int *v73; // $s0
  const char *v74; // $fp
  const char *v75; // $s7
  int v76; // $v0
  int v77; // $v0
  const char *v78; // $v1
  int v79; // $v1
  char *v80; // $a0
  char *content_buf; // [sp+24h] [-874h]
  unsigned int content_buf_len; // [sp+28h] [-870h]
  int content_length; // [sp+2Ch] [-86Ch]
  unsigned int chunksize_buf_index; // [sp+30h] [-868h]
  int chunked; // [sp+34h] [-864h]
  char *header_buf; // [sp+38h] [-860h]
  char *header_bufa; // [sp+38h] [-860h]
  unsigned int content_buf_used; // [sp+3Ch] [-85Ch]
  unsigned int chunksize; // [sp+40h] [-858h]
  int endofheaders; // [sp+44h] [-854h]
  unsigned int header_buf_len; // [sp+48h] [-850h]
  int *status_codea; // [sp+4Ch] [-84Ch]
  int valuestart; // [sp+50h] [-848h] BYREF
  char *v94; // [sp+54h] [-844h]
  size_t n; // [sp+58h] [-840h]
  int *sizea; // [sp+5Ch] [-83Ch]
  char *v97; // [sp+60h] [-838h]
  char *v98; // [sp+64h] [-834h]
  _DWORD *v99; // [sp+68h] [-830h]
  void *(*v100)(int, int *, int *); // [sp+6Ch] [-82Ch]
  char chunksize_buf[32]; // [sp+74h] [-824h] BYREF
  char buf[2048]; // [sp+94h] [-804h] BYREF
  int v103; // [sp+894h] [-4h]

  v99 = &_stack_chk_guard;
  status_codea = status_code;
  sizea = size;
  if ( status_code )
    *status_code = -1;
  v3 = malloc(0x800u);
  if ( !v3 )
  {
    *sizea = -1;
    content_buf = 0;
    goto LABEL_39;
  }
  content_buf = (char *)malloc(0x800u);
  if ( !content_buf )
  {
    free(v3);
    *sizea = -1;
    goto LABEL_39;
  }
  chunksize_buf[0] = 0;
  v100 = getHTTPResponse;
  content_buf_len = 2048;
  header_buf_len = 2048;
  content_length = -1;
  chunksize_buf_index = 0;
  v97 = "content-length";
  v4 = 0;
  content_buf_used = 0;
  v5 = 0;
  chunked = 0;
  endofheaders = 0;
  v6 = buf;
  v98 = "transfer-encoding";
  do
  {
    while ( 1 )
    {
      v7 = receivedata(s, v6, 2048, 5000);
      if ( v7 <= 0 )
        goto end_of_stream;
      if ( endofheaders )
      {
        v20 = v7;
        if ( chunked )
          goto LABEL_53;
LABEL_27:
        v21 = v7 + v4;
        if ( content_length > 0 )
        {
          if ( content_length >= (int)v21 )
          {
            v22 = content_length;
            if ( content_buf_len < v21 )
              goto LABEL_121;
            goto LABEL_122;
          }
          v21 = content_length;
          v20 = content_length - v4;
        }
        if ( content_buf_len < v21 )
        {
          v22 = content_length;
          if ( content_length < (int)v21 )
          {
            content_buf_len = v21;
            v23 = (char *)realloc(content_buf, v21);
            goto LABEL_33;
          }
LABEL_121:
          content_buf_len = v22;
          v23 = (char *)realloc(content_buf, v22);
LABEL_33:
          v24 = v23;
          if ( !v23 )
          {
LABEL_142:
            free(content_buf);
            v80 = (char *)v3;
LABEL_143:
            free(v80);
            content_buf = 0;
            *sizea = -1;
            goto LABEL_39;
          }
LABEL_34:
          memcpy(&v24[v4], v6, v20);
          v4 = v21;
          content_buf = v24;
          chunked = 0;
          goto LABEL_35;
        }
LABEL_122:
        v24 = content_buf;
        goto LABEL_34;
      }
      v8 = v7 + content_buf_used;
      v9 = content_buf_used;
      if ( header_buf_len >= v7 + content_buf_used )
        goto LABEL_11;
      v10 = realloc(v3, v7 + content_buf_used);
      if ( !v10 )
      {
        free(v3);
        v80 = content_buf;
        goto LABEL_143;
      }
      header_buf_len = v8;
      v3 = v10;
      v9 = content_buf_used;
LABEL_11:
      memcpy((char *)v3 + v9, v6, v7);
      v11 = v8 - 1;
      v12 = 0;
      if ( v8 - 1 > 0 )
        break;
LABEL_25:
      content_buf_used = v8;
    }
    v13 = (char *)v3;
    while ( 1 )
    {
      while ( 1 )
      {
        v14 = *v13;
        v15 = (signed int)(v12 + 1);
        if ( v14 != 13 )
        {
LABEL_14:
          if ( v14 == 10 )
          {
            v12 += 2;
            if ( *((_BYTE *)v3 + v15) == 10 )
              goto LABEL_43;
            goto LABEL_23;
          }
          goto LABEL_15;
        }
        while ( 1 )
        {
          v16 = *((char *)v3 + v15);
          v15 = (signed int)(v12 + 2);
          if ( v16 == 10 )
            break;
LABEL_15:
          v12 = (char *)v15;
          if ( v15 >= v11 )
            goto LABEL_25;
          v14 = *((char *)v3 + v15++);
          if ( v14 != 13 )
            goto LABEL_14;
        }
        v17 = (signed int)(v12 + 3);
        if ( v15 < v8 && *((_BYTE *)v3 + v15) == 13 )
          break;
        v12 += 3;
        if ( v17 >= v11 )
          goto LABEL_25;
        v13 = (char *)v3 + v17;
      }
      v12 += 4;
      if ( v17 < v8 )
        break;
LABEL_23:
      v18 = (int)v12 < v11;
LABEL_24:
      v19 = v18;
      v13 = &v12[(_DWORD)v3];
      if ( !v19 )
        goto LABEL_25;
    }
    v18 = (int)v12 < v11;
    if ( *((_BYTE *)v3 + v17) != 10 )
      goto LABEL_24;
LABEL_43:
    v28 = status_codea;
    chunksize = v5;
    v29 = 0;
    v30 = v8;
    v31 = 0;
    v32 = (const char *)v3;
    v33 = 0;
    v34 = 0;
    header_buf = v12;
    content_buf_used = v4;
    v35 = (int)(v12 + -0x1);
    endofheaders = (int)v6;
    do
    {
      v36 = &v32[v34];
      v37 = v32[v34];
      v38 = v34 + 1;
      if ( v33 <= 0 )
      {
        if ( v37 != 13 && v37 != 10 )
          goto LABEL_49;
        v39 = v33 < v31;
        if ( !v33 )
        {
          v39 = v31 > 0;
          if ( v28 )
          {
            if ( v34 > 0 )
            {
              valuestart = v34 + 1;
              v73 = v28;
              v74 = &v32[v34 + 1];
              v75 = v32 + 1;
              do
              {
                while ( *(v75 - 1) != 32 )
                {
                  if ( v74 == ++v75 )
                    goto LABEL_129;
                }
                if ( *v73 >= 0 )
                  break;
                v76 = strtol(v75++, 0u, 10);
                *v73 = v76;
              }
              while ( v74 != v75 );
LABEL_129:
              v28 = v73;
              v38 = valuestart;
            }
            goto LABEL_90;
          }
        }
LABEL_89:
        v64 = v31 < v29;
        if ( !v39 )
          goto LABEL_90;
        goto LABEL_101;
      }
      v39 = v33 < v31;
      if ( v33 < v31 )
      {
        if ( v37 == 13 )
        {
          v64 = v31 < v29;
LABEL_101:
          valuestart = v29;
          if ( v64 )
          {
            n = v31 - v33;
            v94 = (char *)&v32[v33];
            if ( strncasecmp(&v32[v33], v97, v31 - v33) )
            {
              if ( !strncasecmp(v94, v98, n) )
              {
                v66 = strncasecmp(&v32[valuestart], (const char *)v100 + 0x1234, 7u);
                v67 = chunked;
                if ( !v66 )
                  v67 = 1;
                chunked = v67;
                if ( v34 < v30 )
                {
LABEL_93:
                  while ( 1 )
                  {
                    v65 = *v36;
                    if ( v65 != 13 )
                    {
                      v31 = v34;
                      if ( v65 != 10 )
                        goto LABEL_108;
                    }
                    v34 = v38;
                    if ( v38 == v30 )
                    {
                      v34 = v30 + 1;
                      v29 = 0;
                      v31 = v30;
                      v33 = v30;
                      goto LABEL_50;
                    }
                    v36 = &v32[v38++];
                  }
                }
LABEL_107:
                v31 = v34;
LABEL_108:
                v33 = v34;
                v29 = 0;
                goto LABEL_49;
              }
            }
            else
            {
              content_length = strtol(&v32[valuestart], 0u, 10);
            }
          }
LABEL_90:
          if ( v34 < v30 )
            goto LABEL_93;
          goto LABEL_107;
        }
        goto LABEL_48;
      }
      if ( v37 != 58 )
      {
        if ( v37 == 13 )
          goto LABEL_90;
LABEL_48:
        if ( v37 != 10 )
        {
LABEL_49:
          v34 = v38;
          continue;
        }
        goto LABEL_89;
      }
      v77 = v34;
      v78 = &v32[v34];
      while ( 1 )
      {
        v79 = v78[1];
        if ( v79 != 32 )
        {
          v29 = v77 + 1;
          if ( v79 != 9 )
            break;
        }
        v78 = &v32[++v77];
        if ( v77 >= v35 )
        {
          v29 = v77 + 1;
          break;
        }
      }
      v31 = v34;
      v34 = v29;
LABEL_50:
      ;
    }
    while ( v34 < v35 );
    v6 = (char *)endofheaders;
    v3 = (void *)v32;
    v40 = v30;
    v7 = v30 - (_DWORD)header_buf;
    v41 = v30 - (_DWORD)header_buf;
    v4 = content_buf_used;
    v5 = chunksize;
    memcpy((void *)endofheaders, &header_buf[(_DWORD)v3], v41);
    v20 = v7;
    content_buf_used = v40;
    endofheaders = (int)header_buf;
    if ( !chunked )
      goto LABEL_27;
    v25 = content_length;
    if ( v7 <= 0 )
      goto LABEL_36;
LABEL_53:
    header_bufa = (char *)v3;
    v42 = v5;
    chunksize = (unsigned int)&v6[v7];
    v43 = v6;
    v44 = 0;
    if ( !v42 )
    {
LABEL_65:
      v51 = v44 < v7;
      if ( chunksize_buf_index )
      {
LABEL_69:
        if ( !v51 )
        {
          v6 = v43;
          v54 = chunksize_buf_index;
          v5 = v42;
          v3 = header_bufa;
          goto LABEL_98;
        }
      }
      else
      {
        v52 = *((char *)&valuestart + v44 + 0x44);
        if ( v52 != 13 )
        {
          if ( v52 != 10 )
            goto LABEL_68;
          goto LABEL_131;
        }
        if ( ++v44 >= v7 )
        {
          v6 = v43;
          v54 = 0;
          v5 = v42;
          v3 = header_bufa;
LABEL_98:
          chunksize_buf_index = v54;
          chunked = 1;
          goto LABEL_35;
        }
        if ( *((_BYTE *)&valuestart + v44 + 0x44) == 10 )
        {
LABEL_131:
          ++v44;
LABEL_68:
          v51 = v44 < v7;
          goto LABEL_69;
        }
      }
      v53 = *_ctype_b_loc();
      v54 = chunksize_buf_index;
      v55 = &chunksize_buf[chunksize_buf_index];
      v56 = v7 + chunksize_buf_index - v44;
      v57 = v44 - chunksize_buf_index;
      while ( 1 )
      {
        v59 = v57 + v54;
        v60 = v43[v57 + v54];
        if ( (v53[v60] & 0x10) == 0 )
          break;
        v58 = v59 < v7;
        if ( v54 >= 0x1F )
          goto LABEL_75;
        ++v54;
        *v55 = v60;
        *++v55 = 0;
        if ( v54 == v56 )
        {
          v6 = v43;
          v54 = v56;
          v5 = v42;
          v3 = header_bufa;
          goto LABEL_98;
        }
      }
      v58 = v59 < v7;
LABEL_75:
      v61 = v59 + 1;
      if ( !v58 )
      {
LABEL_97:
        v6 = v43;
        v5 = v42;
        v3 = header_bufa;
        goto LABEL_98;
      }
      for ( i = &v43[v61]; ; ++i )
      {
        v63 = (char *)(i - v43);
        v44 = i - v43 - 1;
        if ( v60 == 13 )
          break;
        if ( v60 == 10 )
        {
          if ( v44 >= v7 )
            goto LABEL_97;
          goto LABEL_110;
        }
        if ( (char *)chunksize == i )
          goto LABEL_97;
        v60 = *i;
      }
      if ( v44 >= v7 )
        goto LABEL_97;
      v44 = i - v43;
      if ( (int)v63 >= v7 )
        goto LABEL_97;
      if ( *((_BYTE *)&valuestart + (_DWORD)(v63 + 0x848) - 2052) != 10 )
      {
        chunksize_buf_index = v54;
        goto LABEL_64;
      }
LABEL_110:
      if ( v54 )
      {
        v68 = 0;
        v69 = chunksize_buf;
        v70 = &chunksize_buf[v54];
        do
        {
          while ( 1 )
          {
            v71 = *v69;
            v72 = 16 * v68;
            if ( (unsigned __int8)(v71 - 0x30) >= 0xAu )
              break;
            ++v69;
            v68 = v72 - 48 + v71;
            if ( v70 == v69 )
              goto LABEL_115;
          }
          ++v69;
          v68 = (v71 | 0x20) + v72 - 87;
        }
        while ( v70 != v69 );
LABEL_115:
        chunksize_buf[0] = 0;
        ++v44;
        if ( v68 )
        {
          chunksize_buf_index = 0;
          v42 = v68;
          goto LABEL_54;
        }
      }
      free(header_bufa);
      *sizea = v4;
      if ( !v4 )
        goto LABEL_140;
      goto LABEL_39;
    }
LABEL_54:
    v45 = v7 - v44;
    while ( 1 )
    {
      if ( v42 < v45 )
        v45 = v42;
      v46 = v45 + v4;
      v47 = v45;
      if ( content_buf_len < v45 + v4 )
      {
        v48 = content_length;
        if ( content_length < v46 )
          v48 = v45 + v4;
        content_buf_len = v48;
        v49 = (char *)realloc(content_buf, v48);
        if ( !v49 )
        {
          v3 = header_bufa;
          goto LABEL_142;
        }
        content_buf = v49;
      }
      v50 = &v43[v44];
      v44 += v47;
      memcpy(&content_buf[v4], v50, v47);
      v42 -= v47;
      if ( v44 >= v7 )
        break;
      v4 = v46;
LABEL_64:
      v45 = v7 - v44;
      if ( !v42 )
        goto LABEL_65;
    }
    v6 = v43;
    v4 = v46;
    v5 = v42;
    chunked = 1;
    v3 = header_bufa;
LABEL_35:
    v25 = content_length;
LABEL_36:
    v19 = v25 <= 0;
    v26 = v4 < v25;
  }
  while ( v19 || v26 );
end_of_stream:
  free(v3);
  *sizea = v4;
  if ( v4 )
    goto LABEL_39;
LABEL_140:
  free(content_buf);
  content_buf = 0;
LABEL_39:
  if ( v103 != *v99 )
    _stack_chk_fail();
  return content_buf;
}
