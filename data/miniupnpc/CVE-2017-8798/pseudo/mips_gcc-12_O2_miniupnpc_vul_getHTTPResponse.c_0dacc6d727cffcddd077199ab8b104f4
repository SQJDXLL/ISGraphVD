char *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  void *v4; // $v0
  void *v5; // $t0
  unsigned int v6; // $s6
  unsigned int v7; // $s0
  int v8; // $s7
  char *v9; // $s1
  signed int v10; // $s5
  unsigned int v11; // $s2
  signed int v12; // $s4
  signed int v13; // $t2
  char *v14; // $s3
  char *v15; // $v0
  char *v16; // $t2
  int v17; // $t3
  signed int v18; // $a3
  char *v19; // $v0
  int v20; // $v1
  int v21; // $v0
  bool v22; // dc
  signed int v23; // $v0
  signed int v24; // $v0
  _BOOL4 v25; // $v0
  int v26; // $t6
  char *v27; // $a2
  int *v28; // $s6
  int v29; // $s0
  int v30; // $a3
  int v31; // $a1
  int v32; // $fp
  int v33; // $s3
  char *v34; // $s1
  char *v35; // $s5
  int v36; // $v0
  char *v37; // $s2
  _BOOL4 v38; // $v0
  int v39; // $v1
  size_t v40; // $a2
  int v41; // $fp
  int v42; // $v0
  char *v43; // $s4
  int v44; // $v0
  _BOOL4 v45; // $v0
  int *v46; // $s2
  int v48; // $v0
  int v49; // $v0
  _BOOL4 v50; // $v0
  int v51; // $v0
  int v52; // $v1
  char *v53; // $s0
  int v54; // $s1
  signed int v55; // $s6
  signed int v56; // $s5
  size_t v57; // $v1
  char *v58; // $s4
  _BOOL4 v59; // $v0
  unsigned int v60; // $a0
  unsigned int v61; // $s4
  size_t v62; // $a2
  int v63; // $fp
  size_t v64; // $s3
  char *v65; // $v0
  const unsigned __int16 *v66; // $t0
  char *v67; // $v0
  unsigned int v68; // $a2
  unsigned int v69; // $a3
  int v70; // $a1
  char *v71; // $v1
  _BOOL4 v72; // $v0
  int v73; // $v0
  int v74; // $v0
  int v75; // $a3
  char *v76; // $a1
  char *v77; // $a0
  int v78; // $v1
  int v79; // $a3
  int v80; // $a0
  const char *v81; // $s0
  const char *v82; // $s1
  int v83; // $v0
  int v84; // $v1
  int v85; // $v1
  int *v86; // $s2
  int *v87; // $s2
  char *content_buf; // [sp+20h] [-878h]
  unsigned int content_buf_lena; // [sp+24h] [-874h]
  unsigned int content_buf_len; // [sp+24h] [-874h]
  int content_length; // [sp+28h] [-870h]
  char *header_buf_0; // [sp+2Ch] [-86Ch]
  int chunked; // [sp+34h] [-864h]
  int chunkeda; // [sp+34h] [-864h]
  signed int chunksize_buf_index; // [sp+38h] [-860h]
  unsigned int chunksize_buf_indexa; // [sp+38h] [-860h]
  unsigned int chunksize_buf_indexb; // [sp+38h] [-860h]
  unsigned int chunksize_buf_indexc; // [sp+38h] [-860h]
  unsigned int header_buf_used; // [sp+3Ch] [-85Ch]
  unsigned int header_buf_useda; // [sp+3Ch] [-85Ch]
  unsigned int chunksize_buf_index_0; // [sp+40h] [-858h]
  unsigned int chunksize_buf_index_0a; // [sp+40h] [-858h]
  unsigned int header_buf_len; // [sp+44h] [-854h]
  unsigned int content_buf_used; // [sp+48h] [-850h]
  char *v105; // [sp+4Ch] [-84Ch]
  int valuestart; // [sp+50h] [-848h] BYREF
  int *status_codea; // [sp+54h] [-844h]
  char *v108; // [sp+58h] [-840h]
  size_t n; // [sp+5Ch] [-83Ch]
  int *sizea; // [sp+60h] [-838h]
  char *v111; // [sp+64h] [-834h]
  char *v112; // [sp+68h] [-830h]
  _DWORD *v113; // [sp+6Ch] [-82Ch]
  char chunksize_buf[32]; // [sp+74h] [-824h] BYREF
  char buf[2048]; // [sp+94h] [-804h] BYREF
  int v116; // [sp+894h] [-4h]

  v113 = &_stack_chk_guard;
  status_codea = status_code;
  if ( status_code )
    *status_code = -1;
  v4 = malloc(0x800u);
  if ( !v4 )
  {
    *size = -1;
    content_buf = 0;
    goto LABEL_54;
  }
  content_buf_lena = (unsigned int)v4;
  content_buf = (char *)malloc(0x800u);
  v5 = (void *)content_buf_lena;
  if ( !content_buf )
  {
LABEL_159:
    free(v5);
    content_buf = 0;
    *size = -1;
    goto LABEL_54;
  }
  content_buf_len = 2048;
  header_buf_len = 2048;
  content_length = -1;
  v6 = 0;
  v111 = "content-length";
  sizea = size;
  chunksize_buf[0] = 0;
  v7 = 0;
  chunked = 0;
  v8 = 0;
  v9 = buf;
  v112 = "transfer-encoding";
  header_buf_0 = (char *)v5;
  v10 = 0;
  v11 = 0;
  do
  {
LABEL_6:
    v12 = receivedata(s, v9, 2048, "://");
    if ( v12 <= 0 )
      break;
    if ( v6 )
    {
      v39 = content_length;
      if ( !chunked )
        goto LABEL_42;
      v16 = (char *)v11;
      goto LABEL_86;
    }
    v13 = v12 + v11;
    v14 = header_buf_0;
    if ( header_buf_len < v12 + v11 )
    {
      v15 = (char *)realloc(header_buf_0, v12 + v11);
      v13 = v12 + v11;
      if ( !v15 )
      {
        v87 = sizea;
        free(header_buf_0);
        free(content_buf);
        content_buf = 0;
        *v87 = -1;
        goto LABEL_54;
      }
      header_buf_len = v12 + v11;
      header_buf_0 = v15;
      v14 = v15;
    }
    chunksize_buf_index = v13;
    memcpy(&v14[v11], v9, v12);
    v16 = (char *)chunksize_buf_index;
    v17 = chunksize_buf_index - 1;
    if ( chunksize_buf_index < 2 )
      goto LABEL_20;
    v18 = 0;
    v19 = v14;
    do
    {
      while ( 1 )
      {
        while ( 1 )
        {
          v20 = *v19;
          v21 = v18 + 1;
          if ( v20 != 13 )
          {
            while ( v20 != 10 )
            {
              v18 = v21;
              if ( v21 >= v17 )
                goto LABEL_20;
              v20 = v14[v21++];
              if ( v20 == 13 )
                goto LABEL_17;
            }
            if ( v14[v21] == 10 )
            {
              v18 += 2;
              v25 = v18 < v17;
              goto LABEL_27;
            }
LABEL_18:
            v18 += 2;
            goto LABEL_19;
          }
LABEL_17:
          v22 = v14[v21] == 10;
          v23 = v18 + 2;
          if ( !v22 )
            goto LABEL_18;
          v11 = chunksize_buf_index;
          if ( v23 >= chunksize_buf_index )
            goto LABEL_6;
          v22 = v14[v23] == 13;
          v24 = v18 + 3;
          if ( v22 )
            break;
          v18 += 3;
          v19 = &v14[v18];
          if ( v18 >= v17 )
            goto LABEL_6;
        }
        v11 = chunksize_buf_index;
        if ( v24 >= chunksize_buf_index )
          goto LABEL_6;
        v18 += 4;
        if ( v14[v24] == 10 )
          break;
LABEL_19:
        v19 = &v14[v18];
        if ( v18 >= v17 )
          goto LABEL_20;
      }
      v25 = v18 < v17;
LABEL_27:
      v26 = v18 - 1;
      if ( !v25 )
        goto LABEL_30;
      v19 = &v14[v18];
    }
    while ( !v18 );
    v26 = v18 - 1;
LABEL_30:
    v27 = 0;
    if ( v26 > 0 )
    {
      chunksize_buf_indexa = v7;
      v28 = status_codea;
      v29 = (int)header_buf_0;
      chunksize_buf_index_0 = v18;
      v105 = v9;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = v26;
      content_buf_used = v10;
      v34 = v16;
      v35 = header_buf_0;
      do
      {
        v36 = *v35;
        v37 = (char *)(v32 + 1);
        if ( v31 <= 0 )
        {
          if ( v36 != 13 && v36 != 10 )
            goto LABEL_37;
          if ( v31 || !v28 )
          {
            v38 = v32 < (int)v34;
            if ( v31 >= (int)v27 )
              goto LABEL_59;
LABEL_71:
            v50 = (int)v27 < v30;
LABEL_72:
            valuestart = v30;
            if ( !v50 )
              goto LABEL_58;
            n = (size_t)&v27[-v31];
            v108 = (char *)(v29 + v31);
            if ( !strncasecmp((const char *)(v29 + v31), v111, (size_t)&v27[-v31]) )
            {
              content_length = strtol((const char *)(v29 + valuestart), 0u, 10);
              goto LABEL_58;
            }
            if ( strncasecmp(v108, v112, n) )
              goto LABEL_58;
            v51 = strncasecmp((const char *)(v29 + valuestart), "chunked", 7u);
            v52 = chunked;
            if ( !v51 )
              v52 = 1;
            chunked = v52;
            if ( v32 < (int)v34 )
            {
LABEL_62:
              while ( 1 )
              {
                v49 = *v35;
                if ( v49 != 13 )
                {
                  v27 = (char *)v32;
                  if ( v49 != 10 )
                    break;
                }
                v32 = (int)v37;
                if ( v37 == v34 )
                {
                  v32 = (int)(v34 + 1);
                  v30 = 0;
                  v27 = v34;
                  v31 = (int)v34;
                  goto LABEL_38;
                }
                v35 = &(v37++)[v29];
              }
            }
            else
            {
              v27 = (char *)v32;
            }
            v31 = v32;
            goto LABEL_80;
          }
          v80 = v29 + 1;
          if ( v32 <= 0 )
            goto LABEL_62;
          valuestart = v29;
          v108 = v34;
          v81 = (const char *)(v29 + 1);
          v82 = (const char *)(v80 + v32);
          while ( 1 )
          {
            if ( *(v81 - 1) == 32 )
            {
              if ( *v28 >= 0 )
              {
                v48 = v32 + 1;
LABEL_57:
                v29 = valuestart;
                v34 = v108;
                v37 = (char *)v48;
LABEL_58:
                v38 = v32 < (int)v34;
LABEL_59:
                v27 = (char *)v32;
                if ( v38 )
                  goto LABEL_62;
                v31 = v32;
LABEL_80:
                v30 = 0;
                goto LABEL_37;
              }
              *v28 = strtol(v81, 0u, 10);
            }
            ++v81;
            v48 = v32 + 1;
            if ( v81 == v82 )
              goto LABEL_57;
          }
        }
        if ( v31 < (int)v27 )
        {
          if ( v36 == 13 )
            goto LABEL_71;
          v22 = v36 != 10;
          v50 = (int)v27 < v30;
          if ( !v22 )
            goto LABEL_72;
LABEL_37:
          v32 = (int)v37;
        }
        else
        {
          if ( v36 != 58 )
          {
            if ( v36 == 13 )
              goto LABEL_58;
            v22 = v36 == 10;
            v38 = v32 < (int)v34;
            if ( v22 )
              goto LABEL_59;
            goto LABEL_37;
          }
          v83 = v32;
          if ( v32 >= v33 )
          {
LABEL_148:
            v30 = v83 + 1;
          }
          else
          {
            v84 = v29 + v32;
            while ( 1 )
            {
              v85 = *(char *)(v84 + 1);
              if ( v85 != 32 )
              {
                v30 = v83 + 1;
                if ( v85 != 9 )
                  break;
              }
              ++v83;
              v84 = v29 + v83;
              if ( v83 == v33 )
                goto LABEL_148;
            }
          }
          v27 = (char *)v32;
          v32 = v30;
        }
LABEL_38:
        v35 = (char *)(v29 + v32);
      }
      while ( v32 < v33 );
      v16 = v34;
      v7 = chunksize_buf_indexa;
      v18 = chunksize_buf_index_0;
      v10 = content_buf_used;
      v9 = v105;
    }
    v12 = (signed int)&v16[-v18];
    header_buf_used = (unsigned int)v16;
    chunksize_buf_indexb = v18;
    memcpy(v9, &header_buf_0[v18], (size_t)&v16[-v18]);
    v16 = (char *)header_buf_used;
    if ( !chunked )
    {
      v11 = header_buf_used;
      v6 = chunksize_buf_indexb;
      v39 = content_length;
LABEL_42:
      v40 = v12;
      v41 = v10 + v12;
      if ( v39 <= 0 )
      {
LABEL_45:
        if ( content_buf_len >= v41 )
          goto LABEL_136;
        v42 = content_length;
        if ( content_length >= v41 )
          goto LABEL_135;
        content_buf_len = v41;
LABEL_48:
        chunkeda = v40;
        v43 = (char *)realloc(content_buf, content_buf_len);
        v40 = chunkeda;
        if ( !v43 )
          goto LABEL_158;
      }
      else
      {
        if ( v39 < v41 )
        {
          v41 = v39;
          v40 = v39 - v10;
          goto LABEL_45;
        }
        v42 = content_length;
        if ( content_buf_len < v41 )
        {
LABEL_135:
          content_buf_len = v42;
          goto LABEL_48;
        }
LABEL_136:
        v43 = content_buf;
      }
      memcpy(&v43[v10], v9, v40);
      v16 = (char *)v11;
      v10 = v41;
      content_buf = v43;
      chunked = 0;
      goto LABEL_50;
    }
    v6 = chunksize_buf_indexb;
    if ( v12 <= 0 )
    {
      v44 = content_length;
      goto LABEL_51;
    }
LABEL_86:
    chunksize_buf_index_0a = v7;
    chunksize_buf_indexc = v6;
    v53 = v9;
    v54 = v10;
    header_buf_useda = (unsigned int)v16;
    v55 = 0;
    v56 = v12;
    while ( 2 )
    {
      v61 = chunksize_buf_index_0a;
      if ( v8 )
      {
LABEL_93:
        v62 = v56 - v55;
        if ( v8 < v56 - v55 )
          v62 = v8;
        v63 = v62 + v54;
        v64 = v62;
        if ( content_buf_len < v62 + v54 )
        {
          v57 = content_length;
          if ( content_length < v63 )
            v57 = v62 + v54;
          content_buf_len = v57;
          v58 = (char *)realloc(content_buf, v57);
          if ( !v58 )
          {
LABEL_158:
            size = sizea;
            free(content_buf);
            v5 = header_buf_0;
            goto LABEL_159;
          }
        }
        else
        {
          v58 = content_buf;
        }
        memcpy(&v58[v54], &v53[v55], v64);
        v55 += v64;
        v8 -= v64;
        v54 = v63;
        content_buf = v58;
        v59 = v55 < v56;
        goto LABEL_91;
      }
      if ( chunksize_buf_index_0a )
      {
        while ( v55 < v56 )
        {
LABEL_101:
          v66 = *_ctype_b_loc();
          v60 = v61;
          v67 = &chunksize_buf[v61];
          v68 = v56 + v61 - v55;
          v69 = v55 - v61;
          do
          {
            v70 = v53[v69 + v60];
            if ( (v66[v70] & 0x10) == 0 )
              break;
            if ( v60 >= 0x1F )
              break;
            ++v60;
            *v67 = v70;
            v67[1] = 0;
            ++v55;
            ++v67;
          }
          while ( v68 != v60 );
          v59 = v55 < v56;
          if ( v55 >= v56 )
            goto LABEL_118;
          v71 = &v53[v55];
          while ( 1 )
          {
            v73 = *v71;
            if ( v73 == 13 )
              break;
            v22 = v73 == 10;
            v72 = v55 < v56;
            if ( v22 )
              goto LABEL_111;
            ++v55;
            ++v71;
            if ( v56 == v55 )
              goto LABEL_119;
          }
          v72 = v55 < v56;
LABEL_111:
          if ( !v72 )
          {
LABEL_119:
            v10 = v54;
            v6 = chunksize_buf_indexc;
            v9 = v53;
            v16 = (char *)header_buf_useda;
            v7 = v60;
            goto LABEL_50;
          }
          v74 = *((char *)&valuestart + v55 + 0x44);
          if ( v74 == 13 )
          {
            if ( ++v55 >= v56 )
              goto LABEL_119;
            v61 = v60;
            if ( *((_BYTE *)&valuestart + v55 + 0x44) == 10 )
            {
LABEL_122:
              if ( !v60 )
                goto LABEL_156;
              v75 = 0;
              v76 = chunksize_buf;
              v77 = &chunksize_buf[v60];
              do
              {
                while ( 1 )
                {
                  v78 = *v76;
                  v79 = 16 * v75;
                  if ( (unsigned __int8)(v78 - 0x30) >= 0xAu )
                    break;
                  ++v76;
                  v75 = v79 - 48 + v78;
                  if ( v77 == v76 )
                    goto LABEL_127;
                }
                ++v76;
                v75 = v79 - 87 + (v78 | 0x20);
              }
              while ( v77 != v76 );
LABEL_127:
              chunksize_buf[0] = 0;
              ++v55;
              if ( !v75 )
              {
LABEL_156:
                v86 = sizea;
                free(header_buf_0);
                *v86 = v54;
                if ( v54 )
                  goto LABEL_54;
                goto LABEL_157;
              }
              chunksize_buf_index_0a = 0;
              v8 = v75;
              goto LABEL_93;
            }
          }
          else
          {
            v61 = v60;
            if ( v74 == 10 )
              goto LABEL_122;
          }
          if ( !v61 )
            goto LABEL_98;
        }
        v60 = v61;
        goto LABEL_117;
      }
LABEL_98:
      v65 = (char *)&valuestart + v55 + 0x848;
      if ( *(v65 - 2052) != 13 )
      {
        if ( v55 >= v56 )
          goto LABEL_129;
        if ( *(v65 - 2052) != 10 )
          goto LABEL_101;
LABEL_132:
        if ( ++v55 < v56 )
          goto LABEL_101;
        v60 = v61;
LABEL_117:
        v59 = v55 < v56;
LABEL_118:
        chunksize_buf_index_0a = v60;
LABEL_91:
        v60 = chunksize_buf_index_0a;
        if ( !v59 )
          goto LABEL_119;
        continue;
      }
      break;
    }
    if ( ++v55 < v56 )
    {
      if ( *((_BYTE *)&valuestart + v55 + 0x44) != 10 )
        goto LABEL_101;
      goto LABEL_132;
    }
LABEL_129:
    v10 = v54;
    v6 = chunksize_buf_indexc;
    v9 = v53;
    v16 = (char *)header_buf_useda;
    v7 = 0;
    v8 = 0;
LABEL_50:
    v44 = content_length;
LABEL_51:
    v22 = v44 <= 0;
    v45 = v10 < v44;
    if ( v22 )
    {
LABEL_20:
      v11 = (unsigned int)v16;
      goto LABEL_6;
    }
    v11 = (unsigned int)v16;
  }
  while ( v45 );
  v46 = sizea;
  free(header_buf_0);
  *v46 = v10;
  if ( !v10 )
  {
LABEL_157:
    free(content_buf);
    content_buf = 0;
  }
LABEL_54:
  if ( v116 != *v113 )
    _stack_chk_fail();
  return content_buf;
}
