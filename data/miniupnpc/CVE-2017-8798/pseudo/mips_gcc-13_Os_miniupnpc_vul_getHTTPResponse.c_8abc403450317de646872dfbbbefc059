char *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // $s0
  char *v4; // $s1
  void *v5; // $a0
  unsigned int v6; // $s5
  int v7; // $s4
  int v8; // $s6
  int v9; // $s3
  int v10; // $s2
  signed int v11; // $fp
  int v12; // $v0
  int v13; // $s7
  char *v14; // $v0
  int v15; // $v1
  char *v16; // $v1
  int v17; // $a3
  char *v18; // $a2
  int v19; // $v0
  char *v20; // $fp
  signed int v21; // $s7
  int v22; // $a2
  int v23; // $v0
  int v24; // $a0
  char *v25; // $a0
  int v26; // $a1
  _BOOL4 v27; // $a0
  const char *i; // $a0
  _BOOL4 v29; // $v0
  int v30; // $v0
  int v31; // $v0
  _BOOL4 v32; // $a0
  int v33; // $v0
  const char *v34; // $a0
  int v35; // $v0
  int v36; // $v1
  signed int v37; // $a2
  char *v38; // $v0
  char *v39; // $a0
  _BOOL4 v40; // $v0
  const unsigned __int16 **v41; // $v0
  int v42; // $a1
  int v43; // $v0
  _BOOL4 v44; // $v0
  int v45; // $a1
  signed int v46; // $t0
  int v47; // $v0
  int v48; // $t0
  int v49; // $t0
  unsigned int v50; // $t1
  size_t v51; // $v1
  char *v52; // $v0
  unsigned int v53; // $v0
  size_t v54; // $v1
  char *v55; // $v0
  unsigned int content_buf_len; // [sp+24h] [-85Ch]
  unsigned int chunksize; // [sp+30h] [-850h]
  unsigned int chunksizea; // [sp+30h] [-850h]
  unsigned int chunksizeb; // [sp+30h] [-850h]
  int chunked; // [sp+34h] [-84Ch]
  unsigned int header_buf_len; // [sp+38h] [-848h] BYREF
  char *v65; // [sp+3Ch] [-844h]
  _DWORD *v66; // [sp+40h] [-840h]
  char *v67; // [sp+44h] [-83Ch]
  char *v68; // [sp+48h] [-838h]
  unsigned int chunksize_0; // [sp+4Ch] [-834h]
  unsigned int bytestocopy; // [sp+50h] [-830h]
  int valuestart; // [sp+54h] [-82Ch]
  char chunksize_buf[32]; // [sp+5Ch] [-824h] BYREF
  char buf[2048]; // [sp+7Ch] [-804h] BYREF
  int v74; // [sp+87Ch] [-4h]

  v66 = &_stack_chk_guard;
  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800u);
  if ( !v3 )
    goto LABEL_4;
  v4 = (char *)malloc(0x800u);
  if ( !v4 )
    goto LABEL_9;
  content_buf_len = 2048;
  header_buf_len = 2048;
  chunksize_buf[0] = 0;
  v67 = "content-length";
  v6 = 0;
  v7 = 0;
  v8 = 0;
  chunksize = 0;
  v9 = -1;
  chunked = 0;
  v10 = 0;
  v68 = "transfer-encoding";
  while ( 1 )
  {
    while ( 1 )
    {
      v11 = receivedata(s, buf, 2048, 5000);
      if ( v11 <= 0 )
        goto end_of_stream;
      v12 = chunked;
      if ( v10 )
        break;
      v13 = v11 + v8;
      if ( header_buf_len < v11 + v8 )
      {
        v14 = (char *)realloc(v3, v11 + v8);
        if ( !v14 )
        {
          free(v3);
          v5 = v4;
          goto LABEL_10;
        }
        header_buf_len = v11 + v8;
        v3 = v14;
      }
      memcpy(&v3[v8], buf, v11);
      v15 = 0;
      v10 = 0;
      while ( v15 < v13 - 1 )
      {
        if ( v10 )
        {
          v16 = (char *)(v10 - 1);
          goto LABEL_22;
        }
        v22 = v3[v15];
        v23 = v15 + 1;
        if ( v22 == 13 )
        {
          if ( v3[v23] == 10 )
          {
            v23 = v15 + 2;
            if ( v15 + 2 < v13 && v3[v23] == 13 )
            {
              v23 = v15 + 3;
              if ( v15 + 3 < v13 && v3[v23] == 10 )
                v10 = v15 + 4;
            }
          }
        }
        else if ( v22 == 10 )
        {
          if ( v3[v23] == 10 )
            v10 = v15 + 2;
        }
        else
        {
          v23 = v15;
        }
        v15 = v23 + 1;
      }
      v8 += v11;
      if ( v10 )
      {
        v16 = (char *)(v10 - 1);
LABEL_22:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v65 = v16;
LABEL_23:
        if ( (int)v20 >= (int)v65 )
        {
          v11 = v13 - v10;
          memcpy(buf, &v3[v10], v13 - v10);
          v8 = v13;
          v12 = chunked;
          break;
        }
        v24 = v20[(_DWORD)v3];
        if ( v19 <= 0 )
        {
          if ( v24 != 13 )
            goto LABEL_51;
          goto LABEL_52;
        }
        if ( v19 < (int)v18 )
        {
          if ( v24 != 13 )
            goto LABEL_51;
          v32 = (int)v18 < v17;
LABEL_68:
          valuestart = v17;
          if ( v32 )
          {
            bytestocopy = (unsigned int)&v18[-v19];
            chunksize_0 = (unsigned int)&v3[v19];
            v33 = strncasecmp(&v3[v19], v67, (size_t)&v18[-v19]);
            v34 = (const char *)chunksize_0;
            if ( v33 )
            {
              chunksize_0 = valuestart;
              if ( !strncasecmp(v34, v68, bytestocopy) )
              {
                v35 = strncasecmp(&v3[chunksize_0], "chunked", 7u);
                v36 = chunked;
                if ( !v35 )
                  v36 = 1;
                chunked = v36;
              }
            }
            else
            {
              v9 = atoi(&v3[valuestart]);
            }
          }
        }
        else
        {
          if ( v24 == 58 )
          {
            v25 = v20;
            do
            {
              v26 = v25[(_DWORD)v3 + 1];
              if ( v26 != 32 && v26 != 9 )
                break;
              ++v25;
            }
            while ( (int)v25 < (int)v65 );
            v18 = v20;
            v17 = (int)(v25 + 1);
            v20 = v25;
            goto LABEL_49;
          }
          if ( v24 == 13 )
          {
            v29 = (int)v20 < v13;
            goto LABEL_57;
          }
LABEL_51:
          if ( v24 != 10 )
          {
LABEL_49:
            ++v20;
            goto LABEL_23;
          }
LABEL_52:
          if ( v19 )
          {
            v27 = v19 < (int)v18;
          }
          else
          {
            v27 = (int)v18 > 0;
            if ( status_code )
            {
              for ( i = v3 + 1; i - v3 - 1 < (int)v20; ++i )
              {
                if ( *(i - 1) == 32 )
                {
                  if ( *status_code >= 0 )
                    goto LABEL_56;
                  chunksize_0 = (unsigned int)i;
                  v31 = atoi(i);
                  i = (const char *)chunksize_0;
                  *status_code = v31;
                }
              }
              goto LABEL_56;
            }
          }
          if ( v27 )
          {
            v32 = (int)v18 < v17;
            goto LABEL_68;
          }
        }
LABEL_56:
        while ( 1 )
        {
          v29 = (int)v20 < v13;
LABEL_57:
          if ( !v29 )
            break;
          v30 = v20[(_DWORD)v3];
          if ( v30 != 13 && v30 != 10 )
            break;
          ++v20;
        }
        v17 = 0;
        v18 = v20;
        v19 = (int)v20;
        goto LABEL_49;
      }
    }
    if ( !v12 )
      break;
    v21 = 0;
    v65 = chunksize_buf;
LABEL_112:
    v44 = v21 < v11;
    while ( 1 )
    {
      v46 = chunksize;
      if ( !v44 )
        break;
      v37 = v11 - v21;
      if ( chunksize )
        goto LABEL_102;
      v38 = v65;
      if ( !v6 )
      {
        if ( *((_BYTE *)&header_buf_len + v21 + 0x44) != 13 || (++v21, v38 = v65, v21 < v11) )
        {
          v38 = v65;
          if ( *((_BYTE *)&header_buf_len + v21 + 0x44) == 10 )
            ++v21;
        }
      }
      v39 = &v38[v6];
      while ( 1 )
      {
        v40 = v21 < v11;
        chunksize_0 = (unsigned int)v39;
        if ( v21 >= v11 )
          break;
        v41 = _ctype_b_loc();
        v42 = buf[v21];
        if ( ((*v41)[v42] & 0x10) == 0 )
          goto LABEL_86;
        v39 = (char *)(chunksize_0 + 1);
        if ( v6 >= 0x1F )
          goto LABEL_86;
        ++v6;
        *(_BYTE *)chunksize_0 = v42;
        *v39 = 0;
        ++v21;
      }
      while ( 2 )
      {
        if ( !v40 )
          goto LABEL_112;
        v43 = buf[v21];
        if ( v43 != 13 && v43 != 10 )
        {
          ++v21;
LABEL_86:
          v40 = v21 < v11;
          continue;
        }
        break;
      }
      if ( *((_BYTE *)&header_buf_len + v21 + 0x44) == 13 )
      {
        v44 = ++v21 < v11;
        if ( v21 >= v11 )
          continue;
      }
      v44 = v21 < v11;
      if ( *((_BYTE *)&header_buf_len + v21 + 0x44) == 10 )
      {
        v45 = 0;
        v46 = 0;
        while ( v6 != v45 )
        {
          v47 = v65[v45];
          v48 = 16 * v46;
          if ( (unsigned __int8)(v47 - 0x30) >= 0xAu )
          {
            v49 = v48 - 87;
            v47 |= 0x20u;
          }
          else
          {
            v49 = v48 - 48;
          }
          v46 = v49 + v47;
          ++v45;
        }
        chunksize_buf[0] = 0;
        ++v21;
        if ( !v46 )
        {
end_of_stream:
          free(v3);
          *size = v7;
          if ( !v7 )
          {
            free(v4);
            goto LABEL_5;
          }
          goto LABEL_6;
        }
        v6 = 0;
        v37 = v11 - v21;
LABEL_102:
        if ( v46 < v37 )
          v37 = v46;
        v50 = v7 + v37;
        if ( content_buf_len < v7 + v37 )
        {
          v51 = v9;
          if ( v9 < v7 + v37 )
            v51 = v7 + v37;
          bytestocopy = v37;
          chunksize_0 = v46;
          chunksizea = v7 + v37;
          content_buf_len = v51;
          v52 = (char *)realloc(v4, v51);
          v50 = chunksizea;
          v46 = chunksize_0;
          v37 = bytestocopy;
          if ( !v52 )
            goto LABEL_108;
          v4 = v52;
        }
        bytestocopy = v46;
        chunksize_0 = v50;
        chunksizeb = v37;
        memcpy(&v4[v7], &buf[v21], v37);
        v21 += chunksizeb;
        chunksize = bytestocopy - chunksizeb;
        v7 = chunksize_0;
        goto LABEL_112;
      }
    }
LABEL_114:
    if ( v9 > 0 && v7 >= v9 )
      goto end_of_stream;
  }
  if ( v9 > 0 )
  {
    v53 = content_buf_len;
    if ( v9 >= v11 + v7 )
      goto LABEL_122;
    v11 = v9 - v7;
  }
  v53 = content_buf_len;
LABEL_122:
  if ( v53 >= v11 + v7 )
  {
LABEL_127:
    memcpy(&v4[v7], buf, v11);
    v7 += v11;
    goto LABEL_114;
  }
  v54 = v9;
  if ( v9 < v11 + v7 )
    v54 = v11 + v7;
  content_buf_len = v54;
  v55 = (char *)realloc(v4, v54);
  if ( v55 )
  {
    v4 = v55;
    goto LABEL_127;
  }
LABEL_108:
  free(v4);
LABEL_9:
  v5 = v3;
LABEL_10:
  free(v5);
LABEL_4:
  *size = -1;
LABEL_5:
  v4 = 0;
LABEL_6:
  if ( v74 != *v66 )
    _stack_chk_fail();
  return v4;
}
