void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // x22
  int v4; // w19
  unsigned int v5; // w23
  unsigned int v6; // w28
  int v7; // w27
  unsigned int v8; // w7
  char *v9; // x0
  int v10; // w7
  int v11; // w2
  int v12; // w0
  int v13; // w26
  int v14; // w3
  _BOOL4 v15; // w1
  int v17; // w1
  int v18; // w10
  int v19; // w2
  int v20; // w1
  int v21; // w4
  int v22; // w0
  __int64 v23; // x27
  bool v24; // cc
  int v25; // w24
  bool v26; // zf
  int v27; // w26
  unsigned int v28; // w24
  int v29; // w25
  int v30; // w2
  size_t v31; // x1
  char *v32; // x8
  char *v33; // x1
  int v34; // w3
  unsigned int v37; // w3
  unsigned int v38; // w2
  int v39; // w6
  char *v40; // x0
  const char *v43; // x25
  size_t v44; // x2
  int v45; // w0
  int v46; // w0
  int v47; // w0
  int v48; // w0
  const unsigned __int16 *v50; // x7
  unsigned int v51; // w6
  __int64 j; // x2
  char *v54; // x2
  int v55; // w1
  int v57; // w0
  char *v58; // x6
  int v59; // t1
  int v60; // w19
  int v61; // w0
  int v62; // w0
  bool v64; // zf
  const char *v65; // x6
  __int64 v66; // x25
  int v67; // w0
  unsigned int v68; // w6
  char *v69; // x0
  int v70; // w0
  __int64 v71; // x0
  int v72; // w2
  char *v74; // x0
  char *content_buf; // [xsp+68h] [xbp+68h]
  unsigned int content_buf_len; // [xsp+74h] [xbp+74h]
  int content_buf_lena; // [xsp+74h] [xbp+74h]
  unsigned int header_buf_used; // [xsp+78h] [xbp+78h]
  size_t header_buf_useda; // [xsp+78h] [xbp+78h]
  const char *header_buf_usedb; // [xsp+78h] [xbp+78h]
  int content_length; // [xsp+80h] [xbp+80h]
  int endofheaders; // [xsp+84h] [xbp+84h]
  int endofheadersa; // [xsp+84h] [xbp+84h]
  int endofheadersb; // [xsp+84h] [xbp+84h]
  int chunked; // [xsp+90h] [xbp+90h]
  int chunkeda; // [xsp+90h] [xbp+90h]
  int i; // [xsp+98h] [xbp+98h]
  int ia; // [xsp+98h] [xbp+98h]
  int ib; // [xsp+98h] [xbp+98h]
  int ic; // [xsp+98h] [xbp+98h]
  int v93; // [xsp+9Ch] [xbp+9Ch]
  int v94; // [xsp+9Ch] [xbp+9Ch]
  unsigned int header_buf_len; // [xsp+A0h] [xbp+A0h]
  int valuestart; // [xsp+A4h] [xbp+A4h]
  char chunksize_buf[32]; // [xsp+B8h] [xbp+B8h] BYREF
  char buf[2048]; // [xsp+D8h] [xbp+D8h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800uLL);
  if ( !v3 )
    goto LABEL_183;
  content_buf = (char *)malloc(0x800uLL);
  if ( !content_buf )
  {
    free(v3);
LABEL_183:
    content_buf = 0LL;
    *size = -1;
    return content_buf;
  }
  v4 = 0;
  v5 = 0;
  v6 = 0;
  content_buf_len = 2048;
  header_buf_used = 0;
  endofheaders = 0;
  chunked = 0;
  header_buf_len = 2048;
  content_length = -1;
  chunksize_buf[0] = 0;
  while ( 1 )
  {
    v7 = receivedata((unsigned int)s, buf, 2048LL, 5000LL, 0LL);
    if ( v7 <= 0 )
      goto LABEL_177;
    if ( endofheaders )
      break;
    v8 = v7 + header_buf_used;
    if ( v7 + header_buf_used > header_buf_len )
    {
      v9 = (char *)realloc(v3, v8);
      v8 = v7 + header_buf_used;
      if ( !v9 )
      {
        free(v3);
        v74 = content_buf;
        goto LABEL_181;
      }
      v3 = v9;
      header_buf_len = v7 + header_buf_used;
    }
    i = v8;
    memcpy(&v3[header_buf_used], buf, v7);
    v10 = i;
    v11 = i - 1;
    if ( i <= 1 )
    {
      header_buf_used = i;
    }
    else
    {
      v12 = 0;
      do
      {
        while ( 1 )
        {
          v17 = (unsigned __int8)v3[v12];
          v14 = v12 + 1;
          if ( v17 != 13 )
            break;
          if ( v3[v14] == 10 )
          {
            if ( v12 + 2 < i && v3[v12 + 2] == 13 )
            {
              v14 = v12 + 3;
              if ( v12 + 3 < i && v3[v14] == 10 )
              {
                v12 += 4;
                v15 = v12 == 0;
                v13 = v12;
              }
              else
              {
                v12 += 4;
                v13 = 0;
                v14 = -1;
                v15 = 1;
              }
            }
            else
            {
              v12 += 3;
              v13 = 0;
              v14 = -1;
              v15 = 1;
            }
            goto LABEL_15;
          }
LABEL_21:
          v12 += 2;
          v13 = 0;
          v14 = -1;
          if ( v11 <= v12 )
            goto LABEL_22;
        }
        if ( v17 == 10 )
        {
          if ( v3[v14] != 10 )
            goto LABEL_21;
          v12 += 2;
          v15 = v12 == 0;
          v13 = v12;
        }
        else
        {
          ++v12;
          v13 = 0;
          v14 = -1;
          v15 = 1;
        }
LABEL_15:
        ;
      }
      while ( v15 && v11 > v12 );
LABEL_22:
      if ( v13 )
      {
        if ( v14 > 0 )
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          v21 = 0;
          do
          {
            v22 = (unsigned __int8)v3[v21];
            v23 = v21;
            v24 = v20 > 0 && v19 <= v20;
            v25 = v21 + 1;
            if ( v24 )
            {
              if ( v22 == 58 )
              {
                v71 = v25;
                while ( 1 )
                {
                  v18 = v71;
                  if ( v14 <= (int)v71 - 1 )
                    break;
                  v72 = (unsigned __int8)v3[v71++];
                  if ( v72 != 32 && v72 != 9 )
                  {
                    v19 = v21;
                    v21 = v18;
                    goto LABEL_36;
                  }
                }
                v19 = v21;
                v21 = v71;
                continue;
              }
              v26 = v22 == 10 || v22 == 13;
              if ( v26 )
                goto LABEL_87;
            }
            else if ( v22 == 13 || v22 == 10 )
            {
              if ( v20 )
                v64 = 1;
              else
                v64 = status_code == 0LL;
              if ( !v64 )
              {
                if ( v21 > 0 )
                {
                  v65 = v3 + 1;
                  v66 = (__int64)&v3[v21 + 1];
                  while ( 1 )
                  {
                    if ( *(v65 - 1) == 32 )
                    {
                      if ( (*status_code & 0x80000000) == 0 )
                        goto LABEL_87;
                      header_buf_usedb = v65;
                      endofheadersb = v10;
                      ic = v21;
                      v94 = v14;
                      v67 = strtol(v65, 0uLL, 10);
                      v65 = header_buf_usedb;
                      v10 = endofheadersb;
                      v21 = ic;
                      v14 = v94;
                      *status_code = v67;
                    }
                    if ( (const char *)v66 == ++v65 )
                      goto LABEL_87;
                  }
                }
                do
                {
LABEL_90:
                  v48 = (unsigned __int8)v3[v23];
                  v20 = v23;
                  v21 = v23 + 1;
                  if ( v48 != 13 && v48 != 10 )
                  {
                    v19 = v23;
                    v18 = 0;
                    goto LABEL_36;
                  }
                  ++v23;
                }
                while ( v10 > (int)v23 );
                v70 = v20 + 2;
                v19 = v21;
                v20 = v21;
                v18 = 0;
                v21 = v70;
                continue;
              }
              valuestart = v18;
              if ( v19 > v20 && v19 < v18 )
              {
                v43 = &v3[v20];
                v44 = v19 - v20;
                header_buf_useda = (int)v44;
                endofheadersa = v10;
                ib = v21;
                v93 = v14;
                if ( strncasecmp(v43, "content-length", v44) )
                {
                  v45 = strncasecmp(v43, "transfer-encoding", header_buf_useda);
                  v10 = endofheadersa;
                  v21 = ib;
                  v14 = v93;
                  if ( !v45 )
                  {
                    v46 = strncasecmp(&v3[valuestart], "chunked", 7uLL);
                    v10 = endofheadersa;
                    v26 = v46 == 0;
                    v21 = ib;
                    v47 = chunked;
                    v14 = v93;
                    if ( v26 )
                      v47 = 1;
                    chunked = v47;
                  }
                  goto LABEL_87;
                }
                content_length = strtol(&v3[valuestart], 0uLL, 10);
                v10 = endofheadersa;
                v21 = ib;
                v14 = v93;
                if ( endofheadersa > ib )
                  goto LABEL_90;
              }
              else
              {
LABEL_87:
                if ( v10 > v21 )
                  goto LABEL_90;
              }
              v19 = v21;
              v20 = v21;
              v18 = 0;
              v21 = v25;
              continue;
            }
            ++v21;
LABEL_36:
            ;
          }
          while ( v14 > v21 );
        }
        v7 = v10 - v13;
        header_buf_used = v10;
        endofheaders = v13;
        memcpy(buf, &v3[v13], v10 - v13);
        if ( chunked )
        {
          if ( v7 > 0 )
            goto LABEL_39;
LABEL_53:
          v34 = v5;
LABEL_54:
          if ( content_length > 0 && content_length <= v34 )
          {
end_of_stream:
            content_buf_lena = v34;
            free(v3);
            *size = content_buf_lena;
            if ( v5 )
              return content_buf;
LABEL_178:
            free(content_buf);
            return 0LL;
          }
        }
        else
        {
LABEL_64:
          v37 = v7 + v5;
          v38 = v7 + v5;
          if ( content_length <= 0 )
          {
            if ( content_buf_len < v37 )
            {
              v68 = v7 + v5;
              if ( content_length >= (int)v37 )
              {
LABEL_160:
                v68 = v7 + v5;
                v38 = content_length;
              }
LABEL_156:
              content_buf_len = v38;
              chunkeda = v68;
              v69 = (char *)realloc(content_buf, v38);
              if ( !v69 )
                goto LABEL_180;
              v39 = chunkeda;
              v37 = chunkeda;
              content_buf = v69;
              goto LABEL_67;
            }
            goto LABEL_161;
          }
          if ( content_length >= (int)v37 )
          {
            if ( content_buf_len < v37 )
              goto LABEL_160;
LABEL_161:
            v39 = v7 + v5;
            goto LABEL_67;
          }
          v37 = content_length;
          v39 = content_length;
          v7 = content_length - v5;
          if ( content_length > content_buf_len )
          {
            v68 = content_length;
            v38 = content_length;
            goto LABEL_156;
          }
LABEL_67:
          chunked = 0;
          ia = v37;
          v40 = &content_buf[v5];
          v5 = v39;
          memcpy(v40, buf, v7);
          v34 = ia;
          if ( content_length > 0 && content_length <= ia )
            goto end_of_stream;
        }
      }
      else
      {
        header_buf_used = i;
        endofheaders = 0;
      }
    }
  }
  if ( !chunked )
    goto LABEL_64;
LABEL_39:
  v27 = 0;
  while ( 2 )
  {
    if ( v4 )
    {
      if ( v7 - v27 > v4 )
        v28 = v4;
      else
        v28 = v7 - v27;
      v29 = v28 + v5;
      if ( v28 + v5 <= content_buf_len )
        goto LABEL_131;
      goto LABEL_45;
    }
    while ( 2 )
    {
      if ( !v6 )
      {
        if ( buf[v27] == 13 )
          ++v27;
        if ( v27 >= v7 )
          goto LABEL_53;
        if ( buf[v27] != 10 )
          goto LABEL_96;
        ++v27;
      }
      if ( v27 >= v7 )
      {
        v34 = v5;
        goto LABEL_54;
      }
LABEL_96:
      v50 = *_ctype_b_loc();
      v51 = v7 + v6 - v27;
      for ( j = v27 + 1; ; ++j )
      {
        if ( (v50[(unsigned __int8)buf[j - 1]] & 0x1000) == 0 || v6 > 0x1E )
        {
          v27 = j - 1;
          goto LABEL_105;
        }
        chunksize_buf[v6] = buf[j - 1];
        chunksize_buf[v6 + 1] = 0;
        if ( v6 + 1 == v51 )
          break;
        ++v6;
      }
      v27 = j;
      v6 = v51;
LABEL_105:
      if ( v27 >= v7 )
        goto LABEL_53;
      v54 = &buf[v27];
      while ( 1 )
      {
        v55 = (unsigned __int8)*v54;
        if ( v55 == 10 || v55 == 13 )
          break;
        ++v27;
        ++v54;
        if ( v27 == v7 )
          goto LABEL_53;
      }
      if ( v27 >= v7 )
        goto LABEL_53;
      v57 = (unsigned __int8)buf[v27];
      if ( v57 == 13 )
      {
        if ( ++v27 >= v7 )
          goto LABEL_53;
        v57 = (unsigned __int8)buf[v27];
      }
      if ( v57 != 10 )
        continue;
      break;
    }
    if ( !v6 )
      goto LABEL_177;
    v58 = chunksize_buf;
    v4 = 0;
    do
    {
      v59 = (unsigned __int8)*v58++;
      v60 = 16 * v4;
      v61 = v60 - 0x57;
      v4 = v60 - 0x30 + v59;
      v62 = v61 + (v59 | 0x20);
      if ( (unsigned __int8)(v59 - 0x30) > 9u )
        v4 = v62;
    }
    while ( v58 != &chunksize_buf[v6] );
    chunksize_buf[0] = 0;
    ++v27;
    if ( !v4 )
    {
LABEL_177:
      free(v3);
      *size = v5;
      if ( v5 )
        return content_buf;
      goto LABEL_178;
    }
    v6 = 0;
    if ( v7 - v27 > v4 )
      v28 = v4;
    else
      v28 = v7 - v27;
    v29 = v28 + v5;
    if ( v28 + v5 <= content_buf_len )
    {
LABEL_131:
      v32 = content_buf;
      goto LABEL_52;
    }
LABEL_45:
    if ( v29 <= content_length )
      v30 = content_length;
    else
      v30 = v29;
    if ( v29 <= content_length )
      v31 = (unsigned int)content_length;
    else
      v31 = (unsigned int)v29;
    content_buf_len = v30;
    v32 = (char *)realloc(content_buf, v31);
    if ( v32 )
    {
LABEL_52:
      v33 = &buf[v27];
      v27 += v28;
      content_buf = v32;
      memcpy(&v32[v5], v33, v28);
      v4 -= v28;
      v5 = v29;
      if ( v27 >= v7 )
        goto LABEL_53;
      continue;
    }
    break;
  }
LABEL_180:
  free(content_buf);
  v74 = v3;
LABEL_181:
  free(v74);
  content_buf = 0LL;
  *size = -1;
  return content_buf;
}
