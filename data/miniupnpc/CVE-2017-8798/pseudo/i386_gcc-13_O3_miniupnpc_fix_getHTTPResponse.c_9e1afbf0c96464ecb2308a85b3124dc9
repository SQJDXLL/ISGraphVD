void *__cdecl getHTTPResponse(int s, int *size, int *status_code)
{
  unsigned int v3; // edi
  signed int v4; // edx
  char *v5; // eax
  char *v6; // esi
  int v7; // ecx
  int v8; // eax
  int v9; // ebp
  int v10; // ebx
  char v11; // dl
  char v12; // dl
  int v13; // edx
  int v14; // esi
  char *v15; // ebp
  int v16; // ebx
  char *v17; // ecx
  char v18; // al
  size_t v19; // edi
  unsigned int v20; // ebp
  signed int v21; // esi
  size_t v22; // edi
  size_t v23; // eax
  char *v24; // eax
  int v25; // ecx
  char *v26; // eax
  int v27; // edx
  const unsigned __int16 *v28; // ebp
  unsigned int v29; // ebx
  char *v30; // ecx
  int v31; // eax
  char v32; // al
  char v33; // al
  char *v34; // ecx
  int v35; // ebx
  char *v36; // edi
  int v37; // eax
  int v38; // ebx
  bool v39; // zf
  size_t v40; // ebp
  unsigned int v41; // esi
  unsigned int v42; // eax
  char *v43; // eax
  _DWORD *v44; // edi
  char v46; // al
  const char *v47; // edx
  int *v48; // ebp
  const char *v49; // esi
  const char *v50; // edi
  int v51; // eax
  char *v52; // edx
  int v53; // eax
  int v54; // eax
  int v55; // eax
  int v56; // eax
  int v57; // edi
  char v58; // bl
  int *v59; // edi
  int *v60; // edi
  unsigned int content_buf_used; // [esp+0h] [ebp-8A0h]
  char *content_buf; // [esp+Ch] [ebp-894h]
  int header_buf_used_0; // [esp+14h] [ebp-88Ch]
  signed int header_buf_used_0a; // [esp+14h] [ebp-88Ch]
  bool header_buf_used_0b; // [esp+14h] [ebp-88Ch]
  unsigned int content_buf_len; // [esp+18h] [ebp-888h]
  int nc; // [esp+1Ch] [ebp-884h]
  int n; // [esp+1Ch] [ebp-884h]
  int na; // [esp+1Ch] [ebp-884h]
  int nb; // [esp+1Ch] [ebp-884h]
  unsigned int content_length; // [esp+20h] [ebp-880h]
  int chunked; // [esp+24h] [ebp-87Ch]
  int valuestart; // [esp+28h] [ebp-878h]
  char *header_buf; // [esp+2Ch] [ebp-874h]
  int endofheaders; // [esp+30h] [ebp-870h]
  unsigned int chunksize_buf_index; // [esp+34h] [ebp-86Ch]
  unsigned int chunksize; // [esp+38h] [ebp-868h]
  unsigned int header_buf_len; // [esp+3Ch] [ebp-864h]
  char *s1; // [esp+40h] [ebp-860h]
  int i; // [esp+44h] [ebp-85Ch]
  size_t v81; // [esp+48h] [ebp-858h]
  int *v82; // [esp+4Ch] [ebp-854h]
  int *v83; // [esp+50h] [ebp-850h]
  char chunksize_buf[32]; // [esp+60h] [ebp-840h] BYREF
  char buf[2048]; // [esp+80h] [ebp-820h] BYREF
  unsigned int v87; // [esp+880h] [ebp-20h]

  v82 = status_code;
  v87 = __readgsdword(0x14u);
  if ( status_code )
    *status_code = -1;
  header_buf = (char *)malloc(0x800u);
  if ( !header_buf )
  {
    *size = -1;
    return 0;
  }
  content_buf = (char *)malloc(0x800u);
  if ( !content_buf )
  {
    free(header_buf);
    *size = -1;
    return 0;
  }
  chunksize_buf[0] = 0;
  content_buf_used = 0;
  content_buf_len = 2048;
  valuestart = 0;
  header_buf_len = 2048;
  chunksize = 0;
  content_length = -1;
  chunked = 0;
  endofheaders = 0;
  v83 = size;
  v3 = 0;
  while ( 1 )
  {
    while ( 1 )
    {
      while ( 1 )
      {
        v4 = receivedata(s, buf, 2048, 5000, 0);
        if ( v4 <= 0 )
          goto end_of_stream;
        if ( endofheaders )
        {
          if ( chunked )
            goto LABEL_33;
LABEL_73:
          v40 = v4;
          v41 = content_buf_used + v4;
          if ( (int)content_length <= 0 )
          {
            if ( content_buf_len >= v41 )
            {
              header_buf_used_0b = v41 >= content_length;
              goto LABEL_79;
            }
            content_buf_len = content_buf_used + v4;
            if ( content_length )
              goto LABEL_77;
            v42 = content_buf_used + v4;
          }
          else
          {
            v42 = content_length;
            if ( content_length >= v41 )
            {
              if ( content_buf_len >= v41 )
              {
                header_buf_used_0b = content_length == v41;
                goto LABEL_79;
              }
            }
            else
            {
              v41 = content_length;
              v40 = content_length - content_buf_used;
              if ( content_buf_len >= content_length )
              {
                header_buf_used_0b = 1;
                goto LABEL_79;
              }
            }
          }
          content_buf_len = v42;
LABEL_77:
          v43 = (char *)realloc(content_buf, content_buf_len);
          if ( !v43 )
          {
LABEL_144:
            v59 = v83;
            free(content_buf);
            free(header_buf);
            *v59 = -1;
            return 0;
          }
          content_buf = v43;
          header_buf_used_0b = v41 >= content_length;
LABEL_79:
          memcpy(&content_buf[content_buf_used], buf, v40);
          content_buf_used = v41;
          chunked = 0;
          goto LABEL_80;
        }
        header_buf_used_0 = v4 + valuestart;
        if ( header_buf_len < v4 + valuestart )
        {
          nc = v4;
          v5 = (char *)realloc(header_buf, v4 + valuestart);
          v4 = nc;
          if ( !v5 )
          {
            v60 = v83;
            free(header_buf);
            free(content_buf);
            *v60 = -1;
            return 0;
          }
          header_buf = v5;
          header_buf_len = header_buf_used_0;
        }
        v6 = header_buf;
        memcpy(&header_buf[valuestart], buf, v4);
        v7 = header_buf_used_0 - 1;
        if ( header_buf_used_0 > 1 )
          break;
        valuestart = header_buf_used_0;
      }
      v8 = 0;
      do
      {
        v12 = v6[v8];
        v10 = v8 + 1;
        if ( v12 == 13 )
        {
          if ( v6[v8 + 1] == 10 )
          {
            if ( v8 + 2 < header_buf_used_0 && v6[v8 + 2] == 13 )
            {
              v10 = v8 + 3;
              if ( v8 + 3 < header_buf_used_0 && v6[v8 + 3] == 10 )
              {
                v39 = v8 == -4;
                v8 += 4;
                v11 = v39;
                v9 = v8;
              }
              else
              {
                v8 += 4;
                v9 = 0;
                v10 = -1;
                v11 = 1;
              }
            }
            else
            {
              v8 += 3;
              v9 = 0;
              v10 = -1;
              v11 = 1;
            }
LABEL_15:
            if ( v7 <= v8 )
              break;
            continue;
          }
        }
        else
        {
          if ( v12 != 10 )
          {
            ++v8;
            v9 = 0;
            v10 = -1;
            v11 = 1;
            goto LABEL_15;
          }
          if ( v6[v10] == 10 )
          {
            v39 = v8 == -2;
            v8 += 2;
            v11 = v39;
            v9 = v8;
            goto LABEL_15;
          }
        }
        v8 += 2;
        v9 = 0;
        v10 = -1;
        v11 = 1;
        if ( v7 <= v8 )
          break;
      }
      while ( v11 );
      if ( v9 )
        break;
      endofheaders = 0;
      valuestart = header_buf_used_0;
    }
    if ( v10 <= 0 )
      goto LABEL_31;
    valuestart = 0;
    v13 = 0;
    v14 = 0;
    chunksize_buf_index = v3;
    endofheaders = v9;
    v15 = header_buf;
    n = v10;
    v16 = 0;
    v17 = (char *)header_buf_used_0;
    while ( 2 )
    {
      v18 = v15[v14];
      v19 = v14 + 1;
      if ( v13 <= 0 || v13 < v16 )
      {
        if ( v18 != 13 && v18 != 10 )
          goto LABEL_28;
        if ( !v13 && v82 )
        {
          if ( v14 <= 0 )
            goto LABEL_92;
          v47 = v15 + 1;
          s1 = v15;
          v48 = v82;
          i = v14;
          v81 = v14 + 1;
          v49 = &v47[v14];
          v50 = v47;
          valuestart = (int)v17;
          while ( 1 )
          {
            if ( *(v50 - 1) == 32 )
            {
              if ( *v48 >= 0 )
              {
LABEL_87:
                v17 = (char *)valuestart;
                v15 = s1;
                v14 = i;
                v19 = v81;
                goto LABEL_88;
              }
              *v48 = strtol(v50, 0, 10);
            }
            if ( v49 == ++v50 )
              goto LABEL_87;
          }
        }
        if ( v13 >= v16 || v16 >= valuestart )
          goto LABEL_88;
        i = (int)v17;
        v81 = v16 - v13;
        s1 = &v15[v13];
        v51 = strncasecmp(&v15[v13], "content-length", v16 - v13);
        v52 = s1;
        s1 = (char *)i;
        if ( !v51 )
        {
          content_length = strtol(&v15[valuestart], 0, 10);
          v17 = s1;
          goto LABEL_88;
        }
        v53 = strncasecmp(v52, "transfer-encoding", v81);
        v17 = s1;
        if ( v53 )
        {
LABEL_88:
          if ( (int)v17 > v14 )
            goto LABEL_92;
        }
        else
        {
          v54 = strncasecmp(&v15[valuestart], "chunked", 7u);
          v17 = s1;
          v39 = v54 == 0;
          v55 = 1;
          if ( !v39 )
            v55 = chunked;
          chunked = v55;
          if ( (int)s1 > v14 )
          {
            while ( 1 )
            {
LABEL_92:
              v46 = v15[v14];
              v13 = v14;
              v14 = v19;
              if ( v46 != 13 && v46 != 10 )
              {
                valuestart = 0;
                v16 = v13;
                goto LABEL_29;
              }
              if ( v17 == (char *)v19 )
                break;
              ++v19;
            }
            v14 = v13 + 2;
            valuestart = 0;
            v16 = (int)v17;
            v13 = (int)v17;
            goto LABEL_29;
          }
        }
        valuestart = 0;
        v16 = v14;
        v13 = v14;
        goto LABEL_28;
      }
      if ( v18 == 58 )
      {
        v56 = v14;
        v57 = v14;
        if ( v14 < n )
        {
          valuestart = v13;
          do
          {
            v58 = v15[v56 + 1];
            v57 = v56++;
            if ( v58 != 32 && v58 != 9 )
            {
              v13 = valuestart;
              goto LABEL_131;
            }
          }
          while ( n != v56 );
          v13 = valuestart;
          v57 = n;
        }
LABEL_131:
        v16 = v14;
        valuestart = v57 + 1;
        v14 = v57 + 1;
      }
      else
      {
        if ( v18 == 10 || v18 == 13 )
          goto LABEL_88;
LABEL_28:
        v14 = v19;
      }
LABEL_29:
      if ( n > v14 )
        continue;
      break;
    }
    v9 = endofheaders;
    v3 = chunksize_buf_index;
LABEL_31:
    memcpy(buf, &header_buf[v9], header_buf_used_0 - v9);
    v4 = header_buf_used_0 - v9;
    endofheaders = v9;
    valuestart = header_buf_used_0;
    if ( !chunked )
      goto LABEL_73;
    if ( header_buf_used_0 - v9 <= 0 )
    {
      header_buf_used_0b = content_buf_used >= content_length;
      goto LABEL_80;
    }
LABEL_33:
    chunksize_buf_index = v3;
    v20 = chunksize;
    v21 = 0;
    header_buf_used_0a = v4;
LABEL_44:
    v25 = content_buf_used;
    if ( !v20 )
      break;
LABEL_34:
    v22 = header_buf_used_0a - v21;
    if ( header_buf_used_0a - v21 > v20 )
      v22 = v20;
    content_buf_used += v22;
    if ( content_buf_len < content_buf_used )
    {
      na = v25;
      v23 = content_buf_used;
      if ( content_length >= content_buf_used )
        v23 = content_length;
      if ( (content_length & 0x80000000) != 0 )
        v23 = content_buf_used;
      content_buf_len = v23;
      v24 = (char *)realloc(content_buf, v23);
      v25 = na;
      if ( !v24 )
        goto LABEL_144;
      content_buf = v24;
    }
    v20 -= v22;
    v26 = &buf[v21];
    v21 += v22;
    memcpy(&content_buf[v25], v26, v22);
    if ( v21 < header_buf_used_0a )
      goto LABEL_44;
    chunksize = v20;
    chunked = 1;
    v3 = chunksize_buf_index;
    header_buf_used_0b = content_buf_used >= content_length;
LABEL_80:
    if ( (int)content_length > 0 && header_buf_used_0b )
      goto end_of_stream;
  }
  v3 = chunksize_buf_index;
  v27 = header_buf_used_0a;
  do
  {
    if ( !v3 )
    {
      if ( buf[v21] == 13 )
        ++v21;
      if ( v21 >= v27 )
        goto LABEL_97;
      if ( buf[v21] != 10 )
        goto LABEL_51;
      ++v21;
    }
    if ( v21 >= v27 )
      goto LABEL_97;
LABEL_51:
    nb = v27;
    v28 = *_ctype_b_loc();
    v29 = nb + v3 - v21;
    v30 = &buf[v21 - v3];
    do
    {
      v31 = v30[v3];
      if ( (v28[v31] & 0x1000) == 0 )
        break;
      if ( v3 > 0x1E )
        break;
      ++v3;
      ++v21;
      chunksize_buf[v3 - 1] = v31;
      chunksize_buf[v3] = 0;
    }
    while ( v29 != v3 );
    v27 = nb;
    if ( v21 >= nb )
      goto LABEL_97;
    while ( 1 )
    {
      v32 = buf[v21];
      if ( v32 == 13 || v32 == 10 )
        break;
      if ( ++v21 == nb )
        goto LABEL_97;
    }
    if ( v21 >= nb )
    {
LABEL_97:
      chunked = 1;
      chunksize = 0;
      header_buf_used_0b = content_buf_used >= content_length;
      goto LABEL_80;
    }
    v33 = buf[v21];
    if ( v33 == 13 )
    {
      if ( ++v21 >= nb )
        goto LABEL_97;
      v33 = buf[v21];
    }
  }
  while ( v33 != 10 );
  if ( v3 )
  {
    v34 = chunksize_buf;
    v35 = 0;
    v36 = &chunksize_buf[v3];
    do
    {
      while ( 1 )
      {
        v37 = *v34;
        v38 = 16 * v35;
        if ( (unsigned __int8)(v37 - 48) > 9u )
          break;
        ++v34;
        v35 = v38 + v37 - 48;
        if ( v36 == v34 )
          goto LABEL_68;
      }
      ++v34;
      v35 = v38 + (char)(v37 | 0x20) - 87;
    }
    while ( v36 != v34 );
LABEL_68:
    chunksize_buf[0] = 0;
    ++v21;
    if ( v35 )
    {
      chunksize_buf_index = 0;
      v25 = content_buf_used;
      v20 = v35;
      goto LABEL_34;
    }
  }
end_of_stream:
  v44 = v83;
  free(header_buf);
  *v44 = content_buf_used;
  if ( !content_buf_used )
  {
    free(content_buf);
    return 0;
  }
  return content_buf;
}
