char *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  void *v4; // $v0
  unsigned int v5; // $t1
  unsigned int v6; // $fp
  signed int v7; // $t0
  char *v8; // $s7
  unsigned int v9; // $s1
  char *v10; // $s2
  unsigned int v11; // $s6
  signed int v12; // $s5
  char *v13; // $a3
  char *v14; // $v0
  char *v15; // $a3
  char *v16; // $a2
  int v17; // $s3
  char *v18; // $v0
  int v19; // $v0
  int v20; // $t5
  int v21; // $v0
  int v22; // $s3
  int v23; // $v0
  size_t v24; // $a1
  char *v25; // $s0
  int *v26; // $s3
  bool v27; // dc
  _BYTE *v28; // $v0
  int *v29; // $s6
  int v30; // $s3
  int v31; // $t4
  int v32; // $a2
  int v33; // $a1
  int v34; // $s1
  int v35; // $s7
  char *v36; // $s2
  char *v37; // $fp
  int v38; // $v0
  int v39; // $s0
  _BOOL4 v40; // $v0
  int v41; // $s6
  char *v42; // $fp
  signed int v43; // $s1
  signed int v44; // $s2
  unsigned int v45; // $s5
  char *v46; // $s4
  int v47; // $s7
  size_t v48; // $a2
  size_t v49; // $s0
  size_t v50; // $v1
  char *v51; // $v0
  unsigned int v52; // $v1
  char *v53; // $a1
  _BOOL4 v54; // $v0
  _BOOL4 v55; // $v0
  int v56; // $v0
  const unsigned __int16 *v57; // $t3
  unsigned int v58; // $v1
  char *v59; // $s0
  unsigned int v60; // $t4
  unsigned int v61; // $a2
  _BOOL4 v62; // $v0
  int v63; // $a1
  char *v64; // $a1
  _BOOL4 v65; // $v0
  int v66; // $v0
  int v67; // $v0
  _BOOL4 v68; // $v0
  int v69; // $v0
  int v70; // $v1
  int v71; // $a3
  char *v72; // $a0
  char *v73; // $v1
  int v74; // $a1
  int v75; // $a3
  const char *v76; // $s0
  int v77; // $v0
  char *v78; // $v1
  int v79; // $v1
  int *v80; // $s3
  int *v82; // $s3
  unsigned int content_buf_lenb; // [sp+24h] [-874h]
  unsigned int content_buf_len; // [sp+24h] [-874h]
  unsigned int content_buf_lenc; // [sp+24h] [-874h]
  unsigned int content_buf_lena; // [sp+24h] [-874h]
  unsigned int content_buf_lend; // [sp+24h] [-874h]
  int content_length; // [sp+28h] [-870h]
  char *chunksize_buf_index_0; // [sp+2Ch] [-86Ch]
  unsigned int chunksize_buf_index_0a; // [sp+2Ch] [-86Ch]
  unsigned int chunksize_buf_index_0b; // [sp+2Ch] [-86Ch]
  unsigned int chunksize_buf_index_0e; // [sp+2Ch] [-86Ch]
  unsigned int chunksize_buf_index_0c; // [sp+2Ch] [-86Ch]
  unsigned int chunksize_buf_index_0f; // [sp+2Ch] [-86Ch]
  unsigned int chunksize_buf_index_0d; // [sp+2Ch] [-86Ch]
  char *content_buf; // [sp+30h] [-868h]
  char *header_buf_1; // [sp+34h] [-864h]
  char *header_buf_1a; // [sp+34h] [-864h]
  char *header_buf_1d; // [sp+34h] [-864h]
  char *header_buf_1b; // [sp+34h] [-864h]
  char *header_buf_1e; // [sp+34h] [-864h]
  char *header_buf_1c; // [sp+34h] [-864h]
  unsigned int header_buf_used; // [sp+38h] [-860h]
  unsigned int header_buf_useda; // [sp+38h] [-860h]
  char *v105; // [sp+3Ch] [-85Ch]
  unsigned int chunksize_buf_index; // [sp+40h] [-858h]
  unsigned int header_buf_len; // [sp+44h] [-854h]
  int endofheaders; // [sp+48h] [-850h]
  char *v109; // [sp+4Ch] [-84Ch]
  int valuestart; // [sp+50h] [-848h] BYREF
  int *status_codea; // [sp+54h] [-844h]
  char *v112; // [sp+58h] [-840h]
  size_t n; // [sp+5Ch] [-83Ch]
  int *sizea; // [sp+60h] [-838h]
  char *v115; // [sp+64h] [-834h]
  char *v116; // [sp+68h] [-830h]
  _DWORD *v117; // [sp+6Ch] [-82Ch]
  char chunksize_buf[32]; // [sp+74h] [-824h] BYREF
  char buf[2048]; // [sp+94h] [-804h] BYREF
  int v120; // [sp+894h] [-4h]

  v117 = &_stack_chk_guard;
  status_codea = status_code;
  if ( status_code )
    *status_code = -1;
  v4 = malloc(0x800u);
  if ( !v4 )
  {
    *size = -1;
    content_buf = 0;
    goto LABEL_146;
  }
  content_buf_lenb = (unsigned int)v4;
  content_buf = (char *)malloc(0x800u);
  v5 = content_buf_lenb;
  if ( !content_buf )
    goto LABEL_152;
  content_buf_len = 2048;
  header_buf_len = 2048;
  content_length = -1;
  v105 = chunksize_buf;
  v115 = "content-length";
  chunksize_buf[0] = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  header_buf_used = 0;
  v10 = buf;
  v116 = "transfer-encoding";
  v11 = 0;
  sizea = size;
  while ( 1 )
  {
LABEL_6:
    header_buf_1 = (char *)v7;
    chunksize_buf_index_0 = (char *)v5;
    v12 = receivedata(s, v10, 2048, 5000);
    v5 = (unsigned int)chunksize_buf_index_0;
    v7 = (signed int)header_buf_1;
    if ( v12 <= 0 )
      goto end_of_stream;
    if ( v11 )
    {
      if ( header_buf_used )
        break;
LABEL_24:
      v22 = v7 + v12;
      if ( content_length > 0 )
      {
        if ( content_length >= v22 )
        {
          v23 = content_length;
          if ( content_buf_len < v22 )
            goto LABEL_125;
          goto LABEL_126;
        }
        v22 = content_length;
        v12 = content_length - v7;
      }
      if ( content_buf_len < v22 )
      {
        v23 = content_length;
        if ( content_length < v22 )
        {
          content_buf_len = v22;
          v24 = v22;
          goto LABEL_30;
        }
LABEL_125:
        content_buf_len = v23;
        v24 = v23;
LABEL_30:
        header_buf_1d = (char *)v7;
        chunksize_buf_index_0b = v5;
        v25 = (char *)realloc(content_buf, v24);
        v5 = chunksize_buf_index_0b;
        v7 = (signed int)header_buf_1d;
        if ( !v25 )
        {
          size = sizea;
          free(content_buf);
          v5 = chunksize_buf_index_0b;
          goto LABEL_152;
        }
        goto LABEL_31;
      }
LABEL_126:
      v25 = content_buf;
LABEL_31:
      chunksize_buf_index_0e = v5;
      memcpy(&v25[v7], v10, v12);
      v5 = chunksize_buf_index_0e;
      v7 = v22;
      content_buf = v25;
      header_buf_used = 0;
      goto LABEL_32;
    }
    v13 = &v8[v12];
    if ( header_buf_len < (unsigned int)&v8[v12] )
    {
      chunksize_buf_index = (unsigned int)header_buf_1;
      v14 = (char *)realloc(chunksize_buf_index_0, (size_t)&v8[v12]);
      v13 = &v8[v12];
      v7 = chunksize_buf_index;
      if ( !v14 )
      {
        v82 = sizea;
        free(chunksize_buf_index_0);
        free(content_buf);
        content_buf = 0;
        *v82 = -1;
        goto LABEL_146;
      }
      header_buf_len = (unsigned int)&v8[v12];
      v5 = (unsigned int)v14;
    }
    chunksize_buf_index = v7;
    header_buf_1a = v13;
    chunksize_buf_index_0a = v5;
    memcpy(&v8[v5], v10, v12);
    v15 = header_buf_1a;
    v5 = chunksize_buf_index_0a;
    v7 = chunksize_buf_index;
    v16 = header_buf_1a + -0x1;
    if ( (int)header_buf_1a < 2 )
    {
LABEL_19:
      v8 = header_buf_1a;
      continue;
    }
    v17 = 0;
    v18 = (char *)chunksize_buf_index_0a;
    while ( 1 )
    {
      while ( 1 )
      {
        v19 = *v18;
        v20 = v17 + 1;
        if ( v19 != 13 )
          break;
LABEL_17:
        v21 = v17 + 2;
        if ( *(_BYTE *)(chunksize_buf_index_0a + v20) == 10 )
        {
          v27 = v21 >= (int)header_buf_1a;
          v28 = (_BYTE *)(chunksize_buf_index_0a + v21);
          if ( !v27 && (v20 = v17 + 3, *v28 == 13) )
          {
            if ( v20 < (int)header_buf_1a )
            {
              v17 += 4;
              if ( *(_BYTE *)(chunksize_buf_index_0a + v20) == 10 )
                goto LABEL_40;
LABEL_21:
              v18 = (char *)(chunksize_buf_index_0a + v17);
              if ( v17 >= (int)v16 )
              {
                v8 = header_buf_1a;
                goto LABEL_6;
              }
            }
            else
            {
              v17 += 4;
              v18 = (char *)(chunksize_buf_index_0a + v17);
              if ( v17 >= (int)v16 )
              {
                v8 = header_buf_1a;
                goto LABEL_6;
              }
            }
          }
          else
          {
            v17 += 3;
            v18 = (char *)(chunksize_buf_index_0a + v17);
            if ( v17 >= (int)v16 )
            {
              v8 = header_buf_1a;
              goto LABEL_6;
            }
          }
        }
        else
        {
          v17 += 2;
          v18 = (char *)(chunksize_buf_index_0a + v17);
          if ( v17 >= (int)v16 )
            goto LABEL_19;
        }
      }
      while ( v19 != 10 )
      {
        if ( v20 >= (int)v16 )
          goto LABEL_19;
        v17 = v20;
        v19 = *(char *)(chunksize_buf_index_0a + v20++);
        if ( v19 == 13 )
          goto LABEL_17;
      }
      v17 += 2;
      if ( *(_BYTE *)(chunksize_buf_index_0a + v20) != 10 )
        goto LABEL_21;
LABEL_40:
      if ( v17 >= (int)v16 )
        break;
      v18 = (char *)(chunksize_buf_index_0a + v17);
      if ( v17 )
        goto LABEL_42;
    }
    v8 = header_buf_1a;
    if ( !v17 )
    {
      v11 = 0;
      continue;
    }
LABEL_42:
    if ( v20 <= 0 )
      goto LABEL_52;
    v29 = status_codea;
    chunksize_buf_index_0c = v9;
    endofheaders = v17;
    v109 = v10;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = (int)header_buf_1a;
    header_buf_1b = (char *)chunksize_buf_index;
    chunksize_buf_index = v6;
    v35 = v20;
    v36 = (char *)v5;
    v37 = (char *)v5;
    while ( 2 )
    {
      v38 = *v37;
      v39 = v30 + 1;
      if ( v33 <= 0 )
      {
        if ( v38 != 13 && v38 != 10 )
          goto LABEL_49;
        if ( !v33 && v29 )
        {
          if ( v30 <= 0 )
            goto LABEL_74;
          valuestart = v34;
          v112 = v36;
          v76 = v36 + 1;
          while ( 1 )
          {
            if ( *(v76 - 1) == 32 )
            {
              if ( *v29 >= 0 )
              {
LABEL_69:
                v39 = v30 + 1;
                v34 = valuestart;
                v36 = v112;
                goto LABEL_70;
              }
              *v29 = strtol(v76, 0u, 10);
            }
            if ( &v36[v30 + 1] == ++v76 )
              goto LABEL_69;
          }
        }
        v40 = v30 < v34;
        if ( v33 >= v32 )
          goto LABEL_71;
LABEL_101:
        v68 = v32 < v31;
LABEL_102:
        valuestart = v31;
        if ( v68 )
        {
          n = v32 - v33;
          v112 = &v36[v33];
          if ( strncasecmp(&v36[v33], v115, v32 - v33) )
          {
            if ( !strncasecmp(v112, v116, n) )
            {
              v69 = strncasecmp(&v36[valuestart], "chunked", 7u);
              v70 = header_buf_used;
              if ( !v69 )
                v70 = 1;
              header_buf_used = v70;
              if ( v30 < v34 )
              {
LABEL_74:
                while ( 1 )
                {
                  v56 = *v37;
                  if ( v56 != 13 )
                  {
                    v32 = v30;
                    if ( v56 != 10 )
                      break;
                  }
                  v30 = v39;
                  if ( v39 == v34 )
                  {
                    v30 = v34 + 1;
                    v31 = 0;
                    v32 = v34;
                    v33 = v34;
                    goto LABEL_50;
                  }
                  v37 = &v36[v39++];
                }
              }
              else
              {
                v32 = v30;
              }
              v33 = v30;
              goto LABEL_110;
            }
          }
          else
          {
            content_length = strtol(&v36[valuestart], 0u, 10);
          }
        }
LABEL_70:
        v40 = v30 < v34;
        goto LABEL_71;
      }
      if ( v33 < v32 )
      {
        if ( v38 == 13 )
          goto LABEL_101;
        v27 = v38 != 10;
        v68 = v32 < v31;
        if ( v27 )
          goto LABEL_49;
        goto LABEL_102;
      }
      if ( v38 != 58 )
      {
        if ( v38 == 13 )
          goto LABEL_70;
        v27 = v38 == 10;
        v40 = v30 < v34;
        if ( !v27 )
        {
LABEL_49:
          v30 = v39;
          goto LABEL_50;
        }
LABEL_71:
        v32 = v30;
        if ( v40 )
          goto LABEL_74;
        v33 = v30;
LABEL_110:
        v31 = 0;
        goto LABEL_49;
      }
      v77 = v30;
      if ( v30 >= v35 )
      {
LABEL_138:
        v31 = v77 + 1;
      }
      else
      {
        v78 = &v36[v30];
        while ( 1 )
        {
          v79 = v78[1];
          if ( v79 != 32 )
          {
            v31 = v77 + 1;
            if ( v79 != 9 )
              break;
          }
          v78 = &v36[++v77];
          if ( v77 == v35 )
            goto LABEL_138;
        }
      }
      v32 = v30;
      v30 = v31;
LABEL_50:
      v37 = &v36[v30];
      if ( v30 < v35 )
        continue;
      break;
    }
    v15 = (char *)v34;
    v5 = (unsigned int)v36;
    v9 = chunksize_buf_index_0c;
    v7 = (signed int)header_buf_1b;
    v6 = chunksize_buf_index;
    v17 = endofheaders;
    v10 = v109;
LABEL_52:
    v12 = (signed int)&v15[-v17];
    chunksize_buf_index = v7;
    header_buf_1e = v15;
    chunksize_buf_index_0f = v5;
    memcpy(v10, (const void *)(v5 + v17), (size_t)&v15[-v17]);
    v5 = chunksize_buf_index_0f;
    v7 = chunksize_buf_index;
    v8 = header_buf_1e;
    v11 = v17;
    if ( !header_buf_used )
      goto LABEL_24;
    if ( v12 > 0 )
      break;
LABEL_32:
    if ( content_length > 0 && v7 >= content_length )
    {
      content_buf_lenc = v7;
      v26 = sizea;
      free((void *)v5);
      *v26 = content_buf_lenc;
      goto LABEL_146;
    }
  }
  header_buf_useda = (unsigned int)v8;
  chunksize_buf_index = v11;
  chunksize_buf_index_0d = v6;
  v41 = v9;
  v42 = v10;
  v43 = v12;
  v44 = 0;
  v45 = content_buf_len;
  v46 = content_buf;
  header_buf_1c = (char *)v5;
  v47 = v7;
  while ( 2 )
  {
    v52 = v47;
    if ( v41 )
      goto LABEL_55;
    while ( 2 )
    {
      v54 = v44 < v43;
      if ( chunksize_buf_index_0d )
      {
LABEL_80:
        if ( !v54 )
          goto LABEL_68;
      }
      else
      {
        v55 = v44 < v43;
        if ( *((_BYTE *)&valuestart + v44 + 0x44) == 13 )
          v55 = ++v44 < v43;
        if ( !v55 )
          goto LABEL_68;
        if ( *((_BYTE *)&valuestart + v44 + 0x44) == 10 )
        {
          v54 = ++v44 < v43;
          goto LABEL_80;
        }
      }
      v57 = *_ctype_b_loc();
      v58 = chunksize_buf_index_0d;
      v59 = &v105[chunksize_buf_index_0d];
      v60 = v44 - chunksize_buf_index_0d;
      v61 = v43 + chunksize_buf_index_0d - v44;
      do
      {
        v63 = v42[v60 + v58];
        if ( (v57[v63] & 0x10) == 0 )
          break;
        v62 = v44 < v43;
        if ( v58 >= 0x1F )
          goto LABEL_86;
        ++v58;
        *v59 = v63;
        v59[1] = 0;
        ++v44;
        ++v59;
      }
      while ( v58 != v61 );
      v62 = v44 < v43;
LABEL_86:
      if ( !v62 )
        goto LABEL_111;
      v64 = &v42[v44];
      while ( 1 )
      {
        v66 = *v64;
        if ( v66 == 13 )
          break;
        v27 = v66 == 10;
        v65 = v44 < v43;
        if ( v27 )
          goto LABEL_92;
        ++v44;
        ++v64;
        if ( v44 == v43 )
          goto LABEL_111;
      }
      v65 = v44 < v43;
LABEL_92:
      if ( !v65 )
      {
LABEL_111:
        v9 = v41;
        v7 = v47;
        v10 = v42;
        v8 = (char *)header_buf_useda;
        v5 = (unsigned int)header_buf_1c;
        v11 = chunksize_buf_index;
        content_buf_len = v45;
        content_buf = v46;
        v6 = v58;
        header_buf_used = 1;
        goto LABEL_32;
      }
      v67 = *((char *)&valuestart + v44 + 0x44);
      if ( v67 == 13 )
      {
        if ( ++v44 >= v43 )
          goto LABEL_111;
        v67 = *((char *)&valuestart + v44 + 0x44);
      }
      if ( v67 != 10 )
      {
        chunksize_buf_index_0d = v58;
        continue;
      }
      break;
    }
    if ( !v58 )
      goto LABEL_143;
    v71 = 0;
    v72 = v105;
    v73 = &v105[v58];
    do
    {
      while ( 1 )
      {
        v74 = *v72;
        v75 = 16 * v71;
        if ( (unsigned __int8)(v74 - 0x30) >= 0xAu )
          break;
        ++v72;
        v71 = v75 - 48 + v74;
        if ( v73 == v72 )
          goto LABEL_120;
      }
      ++v72;
      v71 = v75 - 87 + (v74 | 0x20);
    }
    while ( v73 != v72 );
LABEL_120:
    chunksize_buf[0] = 0;
    ++v44;
    if ( !v71 )
    {
LABEL_143:
      v5 = (unsigned int)header_buf_1c;
      v7 = v47;
      content_buf = v46;
end_of_stream:
      content_buf_lend = v7;
      v80 = sizea;
      free((void *)v5);
      *v80 = content_buf_lend;
      if ( !content_buf_lend )
      {
        free(content_buf);
        content_buf = 0;
      }
      goto LABEL_146;
    }
    v52 = v47;
    chunksize_buf_index_0d = 0;
    v41 = v71;
LABEL_55:
    v48 = v43 - v44;
    if ( v41 < v43 - v44 )
      v48 = v41;
    v47 += v48;
    v49 = v48;
    if ( v45 >= v47 )
    {
LABEL_62:
      v53 = &v42[v44];
      v44 += v49;
      memcpy(&v46[v52], v53, v49);
      v41 -= v49;
      if ( v44 < v43 )
        continue;
LABEL_68:
      v9 = v41;
      v7 = v47;
      v10 = v42;
      v8 = (char *)header_buf_useda;
      v5 = (unsigned int)header_buf_1c;
      v11 = chunksize_buf_index;
      content_buf_len = v45;
      content_buf = v46;
      v6 = chunksize_buf_index_0d;
      header_buf_used = 1;
      goto LABEL_32;
    }
    break;
  }
  content_buf_lena = v52;
  v50 = content_length;
  if ( content_length < v47 )
    v50 = v47;
  v45 = v50;
  v51 = (char *)realloc(v46, v50);
  v52 = content_buf_lena;
  if ( v51 )
  {
    v46 = v51;
    goto LABEL_62;
  }
  size = sizea;
  free(v46);
  v5 = (unsigned int)header_buf_1c;
LABEL_152:
  free((void *)v5);
  content_buf = 0;
  *size = -1;
LABEL_146:
  if ( v120 != *v117 )
    _stack_chk_fail();
  return content_buf;
}
