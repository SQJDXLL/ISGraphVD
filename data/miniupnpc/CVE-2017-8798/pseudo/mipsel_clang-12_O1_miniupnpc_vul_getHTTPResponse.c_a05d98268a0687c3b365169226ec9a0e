void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v6; // $v0
  char *v7; // $s3
  unsigned int v8; // $s5
  void *v9; // $v0
  char *v10; // $s6
  int v11; // $a0
  int v12; // $v0
  int v13; // $s4
  unsigned int v14; // $a2
  int v15; // $fp
  int v16; // $s1
  signed int v17; // $s7
  int v18; // $v0
  int v19; // $v0
  int v20; // $s4
  char *v21; // $v1
  _BOOL4 v22; // $a0
  int v23; // $v1
  int v24; // $a0
  int v25; // $a0
  bool v26; // dc
  int v27; // $s2
  int v28; // $s5
  int v29; // $v1
  int v30; // $v0
  int *v31; // $s7
  int v32; // $s6
  int v33; // $a0
  char *v34; // $a1
  int v35; // $v1
  int v36; // $a1
  const char *v37; // $s0
  int i; // $s5
  const char *v39; // $s7
  size_t v40; // $s0
  int v41; // $v0
  int v42; // $at
  int v43; // $v0
  signed int v44; // $s0
  signed int v45; // $v1
  int v46; // $s0
  size_t v47; // $a1
  char *v48; // $s5
  char *v49; // $s4
  char *v50; // $s1
  int v51; // $v1
  unsigned int v52; // $s4
  const unsigned __int16 *v53; // $v0
  int v54; // $v1
  char *v55; // $at
  int v56; // $v0
  _BOOL4 v57; // $v0
  int v58; // $a1
  char *v59; // $v1
  char v60; // $a0
  int v61; // $a1
  int v62; // $a1
  char *v63; // $a0
  int v64; // $v0
  size_t v65; // $s4
  size_t v66; // $a1
  char *v67; // $v1
  int v68; // $v1
  void *result; // $v0
  unsigned int v70; // [sp+20h] [-860h]
  unsigned int v71; // [sp+24h] [-85Ch]
  unsigned int v72; // [sp+24h] [-85Ch]
  int v73; // [sp+28h] [-858h]
  int v74; // [sp+2Ch] [-854h]
  char *v75; // [sp+30h] [-850h]
  int v76; // [sp+34h] [-84Ch]
  int *v77; // [sp+38h] [-848h]
  void *ptr; // [sp+3Ch] [-844h]
  char *v79; // [sp+40h] [-840h]
  int v80; // [sp+44h] [-83Ch]
  int v81; // [sp+48h] [-838h]
  int v82; // [sp+4Ch] [-834h]
  char *v83; // [sp+50h] [-830h]
  int v84; // [sp+54h] [-82Ch]
  char *v85; // [sp+58h] [-828h]
  int *v86; // [sp+5Ch] [-824h]
  char v87[32]; // [sp+60h] [-820h] BYREF
  char v88[2048]; // [sp+80h] [-800h] BYREF

  if ( status_code )
    *status_code = -1;
  v6 = (char *)malloc(0x800u);
  if ( !v6 )
  {
    *size = -1;
    return 0;
  }
  v7 = v6;
  v8 = 2048;
  v9 = malloc(0x800u);
  if ( !v9 )
  {
    free(v7);
    *size = -1;
    return 0;
  }
  ptr = v9;
  v77 = size;
  v81 = 0;
  v87[0] = 0;
  v10 = v88;
  v85 = "content-length";
  v83 = "transfer-encoding";
  v75 = "chunked";
  v11 = -1;
  v12 = 0;
  v73 = 0;
  v70 = 2048;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v86 = status_code;
  v80 = s;
  v79 = v88;
  while ( 2 )
  {
    while ( 2 )
    {
      while ( 2 )
      {
        v76 = v13;
        v74 = v12;
        v71 = v14;
        v82 = v11;
        v16 = v73;
        while ( 1 )
        {
          v19 = receivedata(s, v10, 2048, 5000);
          if ( v19 <= 0 )
          {
            v13 = v76;
            goto end_of_stream;
          }
          v17 = v19;
          if ( v15 )
            break;
          v20 = v19 + v16;
          if ( v8 >= v19 + v16 )
            goto LABEL_14;
          v21 = (char *)realloc(v7, v19 + v16);
          if ( v21 )
          {
            v7 = v21;
            v8 = v17 + v16;
LABEL_14:
            memcpy(&v7[v16], v88, v17);
            v22 = 1;
            v15 = 0;
            if ( v20 >= 2 )
            {
              v23 = 0;
              do
              {
                v24 = (unsigned __int8)v7[v23];
                if ( v24 == 10 )
                {
                  v25 = v23 + 1;
                  v15 = v23 + 2;
                  if ( v7[v23 + 1] != 0xA )
                    v15 = 0;
                }
                else if ( v24 == 13 )
                {
                  v25 = v23 + 1;
                  v15 = 0;
                  if ( v7[v23 + 1] == 10 )
                  {
                    v25 = v23 + 2;
                    if ( v23 + 2 >= v20 )
                    {
                      v15 = 0;
                    }
                    else
                    {
                      v15 = 0;
                      if ( v7[v25] == 13 )
                      {
                        v25 = v23 + 3;
                        if ( v23 + 3 >= v20 )
                        {
                          v15 = 0;
                        }
                        else
                        {
                          v15 = v23 + 4;
                          if ( v7[v25] != 0xA )
                            v15 = 0;
                        }
                      }
                    }
                  }
                }
                else
                {
                  v25 = v23;
                  v15 = 0;
                }
                v23 = v25 + 1;
                v26 = v25 + 1 >= v20 - 1;
                v22 = v15 == 0;
              }
              while ( !v26 && !v15 );
            }
            v18 = 2;
            if ( v22 )
            {
              v16 += v17;
              v15 = 0;
            }
            else
            {
              v84 = v8;
              if ( v15 >= 2 )
              {
                v27 = v15 - 1;
                v28 = 0;
                v29 = 0;
                v30 = 0;
                v31 = v86;
                v32 = 0;
                do
                {
                  v34 = &v7[v32];
                  if ( v30 > 0 && v30 >= v29 && *v34 == 58 )
                  {
                    v33 = v32;
                    if ( v32 < v27 )
                    {
                      v33 = v32;
                      while ( 1 )
                      {
                        v35 = (unsigned __int8)v7[v33 + 1];
                        if ( v35 != 32 && v35 != 9 )
                          break;
                        if ( v27 == ++v33 )
                        {
                          v33 = v15 - 1;
                          break;
                        }
                      }
                    }
                    v28 = v33 + 1;
                    v29 = v32;
                  }
                  else
                  {
                    v36 = (unsigned __int8)*v34;
                    if ( v36 == 13 || v36 == 10 )
                    {
                      if ( !v31 || v30 )
                      {
                        if ( v30 < v29 && v29 < v28 )
                        {
                          v39 = &v7[v30];
                          v40 = v29 - v30;
                          if ( !strncasecmp(&v7[v30], v85, v29 - v30) )
                          {
                            v82 = atoi(&v7[v28]);
                            v31 = v86;
                          }
                          else if ( !strncasecmp(v39, v83, v40) )
                          {
                            v41 = strncasecmp(&v7[v28], v75, 7u);
                            v42 = v81;
                            if ( !v41 )
                              v42 = 1;
                            v81 = v42;
                            v31 = v86;
                          }
                          else
                          {
                            v31 = v86;
                          }
                        }
                      }
                      else if ( v32 > 0 )
                      {
                        v37 = v7 + 1;
                        for ( i = v32; i; --i )
                        {
                          if ( *(v37 - 1) == 32 )
                          {
                            if ( *v31 >= 0 )
                              break;
                            *v31 = atoi(v37);
                          }
                          ++v37;
                        }
                      }
                      v28 = 0;
                      if ( v32 < v20 )
                      {
                        do
                        {
                          v43 = (unsigned __int8)v7[v32];
                          if ( v43 != 13 && v43 != 10 )
                          {
                            v33 = v32;
                            v30 = v32;
                            v29 = v32;
                            goto LABEL_39;
                          }
                          ++v32;
                        }
                        while ( v20 != v32 );
                        v33 = v20;
                        v30 = v20;
                        v29 = v20;
                      }
                      else
                      {
                        v33 = v32;
                        v30 = v32;
                        v29 = v32;
                      }
                    }
                    else
                    {
                      v33 = v32;
                    }
                  }
LABEL_39:
                  v32 = v33 + 1;
                }
                while ( v33 + 1 < v27 );
              }
              v17 = v20 - v15;
              memcpy(v88, &v7[v15], v20 - v15);
              v18 = 0;
              v16 = v20;
              s = v80;
              v10 = v79;
              v8 = v84;
            }
            goto LABEL_8;
          }
          free(v7);
          free(ptr);
          *v77 = -1;
          v15 = 0;
          v18 = 1;
LABEL_8:
          if ( v18 != 2 )
          {
            if ( v18 )
              return 0;
            break;
          }
        }
        v12 = v74;
        v73 = v16;
        if ( !v15 )
        {
          v11 = v82;
          v14 = v71;
          v13 = v76;
          if ( v82 <= 0 )
            continue;
          goto LABEL_147;
        }
        break;
      }
      if ( !v81 )
      {
        v45 = v17;
        if ( v82 < v17 + v76 )
          v45 = v82 - v76;
        if ( v82 >= 1 )
          v17 = v45;
        v46 = v17 + v76;
        if ( v70 >= v17 + v76 )
        {
          v50 = (char *)ptr;
        }
        else
        {
          v84 = v8;
          v47 = v82;
          if ( v82 < v46 )
            v47 = v17 + v76;
          v48 = (char *)ptr;
          v70 = v47;
          v49 = (char *)realloc(ptr, v47);
          v50 = v49;
          if ( !v49 )
          {
            free(v48);
            free(v7);
            *v77 = -1;
            v50 = v48;
          }
          v8 = v84;
          if ( !v49 )
            return 0;
        }
        memcpy(&v50[v76], v88, v17);
        ptr = v50;
        v13 = v46;
        v11 = v82;
        v14 = v71;
        v12 = v74;
        if ( v82 > 0 )
          goto LABEL_147;
        continue;
      }
      break;
    }
    if ( v17 <= 0 )
    {
      v84 = v76;
      v68 = 0;
      v11 = v82;
      v14 = v71;
      goto LABEL_142;
    }
    v44 = 0;
    v14 = v71;
    while ( 2 )
    {
      v84 = v76;
      v51 = v12;
      while ( 2 )
      {
        if ( v51 )
        {
          v63 = (char *)ptr;
          v64 = v51;
          goto LABEL_133;
        }
        if ( v14 )
        {
          v52 = v14;
          if ( v44 < v17 )
            goto LABEL_109;
        }
        else
        {
          v44 += v10[v44] == 0xD;
          if ( v44 >= v17 )
          {
            v52 = 0;
            if ( v44 < v17 )
            {
LABEL_109:
              v53 = *_ctype_b_loc();
              while ( v52 < 0x1F )
              {
                v54 = v10[v44];
                if ( (v53[v54] & 0x1000) == 0 )
                  break;
                v55 = &v87[v52];
                v55[1] = 0;
                *v55 = v54;
                ++v44;
                ++v52;
                if ( v17 == v44 )
                {
                  v44 = v17;
                  break;
                }
              }
            }
          }
          else
          {
            v44 += v10[v44] == 0xA;
            v52 = 0;
            if ( v44 < v17 )
              goto LABEL_109;
          }
        }
        if ( v44 >= v17 )
        {
          v57 = v44 < v17;
          v14 = v52;
          if ( v44 < v17 )
            goto LABEL_123;
LABEL_100:
          v51 = 0;
          if ( !v57 )
          {
            v12 = 0;
            v68 = 0;
            v11 = v82;
            goto LABEL_142;
          }
          continue;
        }
        break;
      }
      v14 = v52;
      while ( 1 )
      {
        v56 = (unsigned __int8)v10[v44];
        if ( v56 == 10 || v56 == 13 )
          break;
        if ( v17 == ++v44 )
        {
          v44 = v17;
          v57 = 0;
          goto LABEL_100;
        }
      }
      v44 += v56 == 0xD;
      v57 = v44 < v17;
      if ( v44 >= v17 )
        goto LABEL_100;
LABEL_123:
      if ( v10[v44] != 10 )
        goto LABEL_100;
      v12 = 0;
      v58 = 0;
      if ( v14 )
      {
        v59 = v87;
        v58 = 0;
        do
        {
          v60 = *v59;
          v62 = 16 * v58;
          if ( (unsigned __int8)(*v59 - 0x30) >= 0xAu )
          {
            v60 |= 0x20u;
            v61 = v62 - 87;
          }
          else
          {
            v61 = v62 - 48;
          }
          v58 = v61 + v60;
          --v14;
          ++v59;
        }
        while ( v14 );
      }
      v87[0] = 0;
      ++v44;
      if ( !v58 )
      {
        v68 = 25;
        v14 = 0;
        v11 = v82;
        break;
      }
      v14 = 0;
      v63 = (char *)ptr;
      v64 = v58;
LABEL_133:
      v65 = v17 - v44;
      if ( v64 < v17 - v44 )
        v65 = v64;
      v72 = v14;
      v74 = v64;
      v76 = v65 + v84;
      if ( v70 >= v65 + v84 )
        goto LABEL_98;
      v66 = v82;
      if ( v82 < (int)(v65 + v84) )
        v66 = v65 + v84;
      v70 = v66;
      ptr = v63;
      v67 = (char *)realloc(v63, v66);
      v63 = v67;
      if ( !v67 )
      {
        free(ptr);
        free(v7);
        v67 = 0;
        *v77 = -1;
        v63 = (char *)ptr;
      }
      v14 = v72;
      v12 = v74;
      if ( v67 )
      {
LABEL_98:
        ptr = v63;
        memcpy(&v63[v84], &v10[v44], v65);
        v12 = v74 - v65;
        v44 += v65;
        v14 = v72;
        if ( v44 < v17 )
          continue;
        v68 = 0;
        v84 = v76;
        v11 = v82;
      }
      else
      {
        v68 = 1;
        ptr = v63;
        v11 = v82;
      }
      break;
    }
LABEL_142:
    if ( !v68 )
    {
      v13 = v84;
      if ( v11 <= 0 )
        continue;
LABEL_147:
      if ( v13 >= v11 )
      {
end_of_stream:
        free(v7);
        *v77 = v13;
        if ( v13 )
          return ptr;
        free(ptr);
        return 0;
      }
      continue;
    }
    break;
  }
  v13 = v84;
  result = 0;
  if ( v68 == 25 )
    goto end_of_stream;
  return result;
}
