void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  void *result; // x0
  char *v7; // x23
  char *v8; // x0
  unsigned int v9; // w22
  int v10; // w20
  unsigned __int64 v11; // x14
  int v12; // w27
  unsigned int v13; // w19
  size_t v14; // x28
  int v15; // w26
  int v16; // w8
  int v17; // w0
  int v18; // w20
  char *v19; // x0
  int v20; // w9
  int v21; // w11
  __int64 v22; // x11
  __int64 v23; // x10
  int v24; // w11
  int v25; // w9
  bool v26; // w10
  int v27; // w22
  int v28; // w25
  int v29; // w9
  int v30; // w8
  int v31; // w19
  int v32; // w10
  __int64 v33; // x9
  char *v34; // x11
  int v35; // w12
  int v36; // w10
  const char *v37; // x26
  __int64 i; // x25
  int v39; // w10
  const char *v40; // x26
  size_t v41; // x28
  int v42; // w0
  int v43; // w8
  char *v44; // x8
  __int64 v45; // x9
  int v46; // w10
  int v47; // w8
  __int64 v48; // x25
  unsigned __int64 v49; // x24
  const unsigned __int16 *v50; // x8
  char *v51; // x9
  __int64 v52; // x10
  __int64 v53; // x11
  int v54; // w8
  char *v55; // x9
  __int64 v56; // x10
  int v57; // w11
  int v58; // w15
  __int64 v59; // x8
  char *v60; // x9
  unsigned __int8 v61; // w10
  int v62; // t1
  bool v63; // cf
  unsigned __int8 v64; // w12
  int v65; // w11
  unsigned int v66; // w24
  int v67; // w9
  size_t v68; // x1
  char *v69; // x0
  char *v70; // x28
  int v72; // w20
  int v73; // w19
  char *v74; // x0
  char *v75; // x26
  unsigned int v76; // [xsp+8h] [xbp-888h]
  int v77; // [xsp+14h] [xbp-87Ch]
  int v78; // [xsp+14h] [xbp-87Ch]
  unsigned __int64 v79; // [xsp+18h] [xbp-878h]
  unsigned __int64 v80; // [xsp+18h] [xbp-878h]
  unsigned int v81; // [xsp+24h] [xbp-86Ch]
  int *v82; // [xsp+28h] [xbp-868h]
  char *ptr; // [xsp+30h] [xbp-860h]
  int v84; // [xsp+3Ch] [xbp-854h]
  int v85; // [xsp+40h] [xbp-850h]
  unsigned int v86; // [xsp+44h] [xbp-84Ch]
  unsigned int v87; // [xsp+44h] [xbp-84Ch]
  int v88; // [xsp+54h] [xbp-83Ch]
  int v89; // [xsp+54h] [xbp-83Ch]
  int v90; // [xsp+54h] [xbp-83Ch]
  unsigned int nptr; // [xsp+60h] [xbp-830h]
  char v92[32]; // [xsp+68h] [xbp-828h] BYREF
  char dest[2056]; // [xsp+88h] [xbp-808h] BYREF

  if ( status_code )
    *status_code = -1;
  result = malloc(0x800uLL);
  if ( !result )
    goto LABEL_168;
  v7 = (char *)result;
  v8 = (char *)malloc(0x800uLL);
  if ( !v8 )
  {
    free(v7);
    result = 0LL;
LABEL_168:
    *size = -1;
    return result;
  }
  v82 = size;
  ptr = v8;
  v9 = 0;
  v10 = 0;
  v11 = 0LL;
  v12 = 0;
  v13 = 2048;
  LODWORD(v14) = -1;
  v84 = 0;
  v85 = s;
  v77 = 0;
  v92[0] = 0;
  v76 = 2048;
  while ( 2 )
  {
    while ( 2 )
    {
      while ( 2 )
      {
        v81 = v10;
        v79 = v11;
        do
        {
          v17 = receivedata((unsigned int)s, dest, 2048LL, 5000LL, 0LL);
          if ( v17 < 1 )
          {
            v10 = v81;
end_of_stream:
            free(v7);
            *v82 = v10;
            if ( !v10 )
            {
              free(ptr);
              return 0LL;
            }
            return ptr;
          }
          v15 = v17;
          if ( v12 )
            goto LABEL_82;
          v18 = v17 + v9;
          if ( v17 + v9 > v13 )
          {
            v19 = (char *)realloc(v7, (unsigned int)v18);
            if ( !v19 )
            {
              free(v7);
              free(ptr);
              *v82 = -1;
              v12 = 0;
              v16 = 1;
              continue;
            }
            v7 = v19;
            v13 = v18;
          }
          memcpy(&v7[v9], dest, v15);
          if ( v18 >= 2 )
          {
            v20 = 0;
            while ( 1 )
            {
              v21 = (unsigned __int8)v7[v20];
              if ( v21 == 10 )
                break;
              if ( v21 == 13 )
              {
                LODWORD(v22) = v20 + 1;
                if ( v7[v20 + 1] == 10 )
                {
                  v22 = v20 + 2LL;
                  if ( v20 + 2 < v18 && v7[v22] == 13 )
                  {
                    v23 = v20 + 3LL;
                    if ( (int)v23 >= v18 )
                    {
                      v12 = 0;
                    }
                    else
                    {
                      v24 = (unsigned __int8)v7[v23];
                      v25 = v20 + 4;
LABEL_24:
                      if ( v24 == 10 )
                        v12 = v25;
                      else
                        v12 = 0;
                    }
                    v20 = v23;
                    goto LABEL_30;
                  }
                }
                v12 = 0;
                v20 = v22;
              }
              else
              {
                v12 = 0;
              }
LABEL_30:
              ++v20;
              v26 = v12 == 0;
              if ( v20 >= v18 - 1 || v12 )
                goto LABEL_35;
            }
            v23 = v20 + 1LL;
            v24 = (unsigned __int8)v7[v23];
            v25 = v20 + 2;
            goto LABEL_24;
          }
          v12 = 0;
          v26 = 1;
LABEL_35:
          if ( !v26 )
          {
            v86 = v13;
            if ( v12 < 2 )
            {
LABEL_7:
              v15 = v18 - v12;
              memcpy(dest, &v7[v12], v18 - v12);
              s = v85;
              v13 = v86;
              v16 = 0;
              v9 = v18;
              continue;
            }
            v27 = v12 - 1;
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v31 = 0;
            while ( 2 )
            {
              if ( v30 >= 1 && v29 <= v30 && v7[v31] == 58 )
              {
                v32 = v31;
                if ( v31 < v27 )
                {
                  v33 = v12 - 1 - (__int64)v31;
                  v34 = &v7[v31 + 1];
                  v32 = v31;
                  while ( 1 )
                  {
                    v35 = (unsigned __int8)*v34;
                    if ( v35 != 32 && v35 != 9 )
                      break;
                    ++v32;
                    --v33;
                    ++v34;
                    if ( !v33 )
                    {
                      v32 = v12 - 1;
                      break;
                    }
                  }
                }
                v28 = v32 + 1;
LABEL_40:
                v29 = v31;
                v31 = v32 + 1;
                if ( v32 + 1 >= v27 )
                  goto LABEL_7;
                continue;
              }
              break;
            }
            v36 = (unsigned __int8)v7[v31];
            if ( v36 != 13 && v36 != 10 )
            {
              v32 = v31;
              v31 = v29;
              goto LABEL_40;
            }
            if ( !status_code || v30 )
            {
              v39 = v29 - v30;
              if ( v29 <= v30 || v28 <= v29 )
                goto LABEL_69;
              v88 = v14;
              v40 = &v7[v30];
              v41 = v39;
              if ( strncasecmp(v40, "content-length", v39) )
              {
                if ( !strncasecmp(v40, "transfer-encoding", v41) )
                {
                  v42 = strncasecmp(&v7[v28], "chunked", 7uLL);
                  v43 = v84;
                  if ( !v42 )
                    v43 = 1;
                  v84 = v43;
                }
                LODWORD(v14) = v88;
                goto LABEL_69;
              }
              LODWORD(v14) = atoi(&v7[v28]);
              if ( v31 < v18 )
              {
LABEL_70:
                v44 = &v7[v31];
                v45 = v18 - (__int64)v31;
                while ( 1 )
                {
                  v46 = (unsigned __int8)*v44;
                  if ( v46 != 13 && v46 != 10 )
                    break;
                  ++v31;
                  --v45;
                  ++v44;
                  if ( !v45 )
                  {
                    v28 = 0;
                    v32 = v18;
                    v30 = v18;
                    v31 = v18;
                    goto LABEL_40;
                  }
                }
              }
            }
            else
            {
              if ( v31 >= 1 )
              {
                v37 = v7 + 1;
                for ( i = (unsigned int)v31; i; --i )
                {
                  if ( *(v37 - 1) == 32 )
                  {
                    if ( (*status_code & 0x80000000) == 0 )
                      break;
                    *status_code = atoi(v37);
                  }
                  ++v37;
                }
              }
LABEL_69:
              if ( v31 < v18 )
                goto LABEL_70;
            }
            v28 = 0;
            v32 = v31;
            v30 = v31;
            goto LABEL_40;
          }
          v12 = 0;
          v16 = 2;
          v9 = v18;
        }
        while ( v16 == 2 );
        if ( v16 )
          return 0LL;
LABEL_82:
        if ( !v12 )
        {
          v11 = v79;
          v10 = v81;
          if ( (int)v14 >= 1 )
          {
LABEL_160:
            if ( v10 >= (int)v14 )
              goto end_of_stream;
          }
          continue;
        }
        break;
      }
      if ( !v84 )
      {
        v87 = v13;
        if ( (int)(v15 + v81) <= (int)v14 || (int)v14 <= 0 )
          v72 = v15;
        else
          v72 = v14 - v81;
        v73 = v72 + v81;
        if ( v72 + v81 <= v76 )
        {
          v74 = ptr;
        }
        else
        {
          v90 = v14;
          if ( (int)v14 >= v73 )
            v14 = (unsigned int)v14;
          else
            v14 = (unsigned int)v73;
          v74 = (char *)realloc(ptr, v14);
          v75 = v74;
          if ( !v74 )
          {
            free(ptr);
            free(v7);
            v74 = ptr;
            *v82 = -1;
          }
          v76 = v14;
          LODWORD(v14) = v90;
          if ( !v75 )
            return 0LL;
        }
        ptr = v74;
        memcpy(&v74[v81], dest, v72);
        v10 = v72 + v81;
        v13 = v87;
        v11 = v79;
        if ( (int)v14 >= 1 )
          goto LABEL_160;
        continue;
      }
      break;
    }
    v11 = v79;
    if ( v15 < 1 )
    {
LABEL_140:
      v10 = v81;
LABEL_159:
      if ( (int)v14 >= 1 )
        goto LABEL_160;
      continue;
    }
    break;
  }
  v47 = v77;
  LODWORD(v48) = 0;
LABEL_86:
  nptr = v81;
  while ( 1 )
  {
    if ( v47 )
    {
      v78 = v47;
LABEL_126:
      v80 = v11;
      if ( v78 >= v15 - (int)v48 )
        v66 = v15 - v48;
      else
        v66 = v78;
      v67 = v66 + v81;
      v81 += v66;
      if ( v66 + nptr <= v76 )
      {
        v69 = ptr;
      }
      else
      {
        if ( (int)v14 >= v67 )
          v68 = (unsigned int)v14;
        else
          v68 = (unsigned int)v67;
        v89 = v14;
        v76 = v68;
        v69 = (char *)realloc(ptr, v68);
        v70 = v69;
        if ( !v69 )
        {
          free(ptr);
          free(v7);
          v69 = ptr;
          *v82 = -1;
        }
        if ( !v70 )
        {
          v10 = nptr;
          v47 = 1;
          ptr = v69;
          goto LABEL_174;
        }
        LODWORD(v14) = v89;
      }
      ptr = v69;
      memcpy(&v69[nptr], &dest[(int)v48], v66);
      v11 = v80;
      LODWORD(v48) = v66 + v48;
      v47 = v78 - v66;
      if ( (int)v48 < v15 )
        goto LABEL_86;
      s = v85;
      v77 = v78 - v66;
      goto LABEL_140;
    }
    if ( (_DWORD)v11 )
    {
      v49 = v11;
    }
    else
    {
      v49 = v11;
      if ( dest[(int)v48] == 13 )
        v48 = (int)v48 + 1LL;
      else
        v48 = (int)v48;
      if ( (int)v48 < v15 && dest[v48] == 10 )
        LODWORD(v48) = v48 + 1;
    }
    if ( (int)v48 >= v15 )
    {
      v11 = v49;
      if ( (int)v48 >= v15 )
        goto LABEL_112;
LABEL_106:
      v54 = -(int)v48;
      v55 = &dest[(int)v48];
      v56 = v15 - (__int64)(int)v48;
      while ( 1 )
      {
        v57 = (unsigned __int8)*v55;
        if ( v57 == 10 || v57 == 13 )
          break;
        --v54;
        --v56;
        ++v55;
        if ( !v56 )
        {
          LODWORD(v48) = v15;
          goto LABEL_112;
        }
      }
      LODWORD(v48) = (v57 == 13) - v54;
      goto LABEL_112;
    }
    v50 = *_ctype_b_loc();
    v11 = (unsigned int)v49;
    v51 = &dest[(int)v48];
    v52 = v15 - (__int64)(int)v48;
    while ( v11 <= 0x1E )
    {
      v53 = (unsigned __int8)*v51;
      if ( (v50[v53] & 0x1000) == 0 )
        break;
      v92[v11] = v53;
      LODWORD(v48) = v48 + 1;
      --v52;
      ++v11;
      ++v51;
      v92[(unsigned int)v11] = 0;
      if ( !v52 )
      {
        LODWORD(v48) = v15;
        break;
      }
    }
    if ( (int)v48 < v15 )
      goto LABEL_106;
LABEL_112:
    if ( (int)v48 < v15 && dest[(int)v48] == 10 )
      break;
    v47 = 0;
    if ( (int)v48 >= v15 )
    {
      v10 = v81;
      v77 = 0;
      goto LABEL_158;
    }
  }
  v58 = 0;
  if ( (_DWORD)v11 )
  {
    v59 = (unsigned int)v11;
    v60 = v92;
    do
    {
      v62 = (unsigned __int8)*v60++;
      v61 = v62;
      v63 = (unsigned int)(v62 - 0x30) >= 0xA;
      v64 = v62 | 0x20;
      if ( (unsigned int)(v62 - 0x30) >= 0xA )
        v65 = -87;
      else
        v65 = -48;
      if ( v63 )
        v61 = v64;
      --v59;
      v58 = v65 + 16 * v58 + v61;
    }
    while ( v59 );
  }
  v11 = 0LL;
  v92[0] = 0;
  if ( v58 )
  {
    LODWORD(v48) = v48 + 1;
    v78 = v58;
    goto LABEL_126;
  }
  v10 = v81;
  v47 = 25;
  v77 = 0;
LABEL_158:
  s = v85;
  if ( !v47 )
    goto LABEL_159;
LABEL_174:
  if ( v47 == 25 )
    goto end_of_stream;
  return 0LL;
}
