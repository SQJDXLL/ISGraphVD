char *__cdecl getHTTPResponse(int s, int *size, int *status_code)
{
  int *v3; // ebx
  char *v4; // eax
  char *v5; // esi
  char *v6; // eax
  size_t v7; // ebp
  int v8; // edi
  signed int v9; // ecx
  int v10; // eax
  int v11; // ebx
  signed int v12; // ecx
  char *v13; // ebp
  int v14; // edi
  signed int v15; // esi
  char *v16; // eax
  int v17; // ebp
  int v18; // eax
  int v19; // ecx
  char v20; // dl
  int v21; // edx
  bool v22; // zf
  int *v23; // edx
  int v24; // ebx
  int v25; // ecx
  int v26; // ebp
  int v27; // eax
  char v28; // cl
  char v29; // al
  int v30; // ecx
  size_t v31; // ecx
  const char *v32; // ebx
  int v33; // ebp
  int v34; // eax
  const char *v35; // ebp
  int v36; // eax
  int v37; // ecx
  signed int v38; // ebp
  char v39; // al
  size_t v40; // ebx
  char *v41; // eax
  signed int v42; // ebp
  unsigned int v43; // ebx
  signed int v44; // eax
  signed int v45; // ecx
  const unsigned __int16 **v46; // eax
  const unsigned __int16 *v47; // eax
  int v48; // ecx
  unsigned int v49; // edx
  signed int v50; // eax
  char v51; // dl
  signed int v52; // ecx
  char *v53; // eax
  signed int v54; // edx
  int v55; // ecx
  int v56; // edx
  unsigned __int8 v57; // bl
  int v58; // ecx
  size_t v59; // ebx
  char *v60; // eax
  size_t v61; // ebx
  char *v62; // ebp
  signed int v64; // [esp+4h] [ebp-868h]
  size_t v65; // [esp+4h] [ebp-868h]
  int v66; // [esp+8h] [ebp-864h]
  signed int v67; // [esp+8h] [ebp-864h]
  signed int v68; // [esp+Ch] [ebp-860h]
  size_t v69; // [esp+Ch] [ebp-860h]
  char *v70; // [esp+Ch] [ebp-860h]
  char *ptr; // [esp+10h] [ebp-85Ch]
  signed int v72; // [esp+14h] [ebp-858h]
  size_t v73; // [esp+1Ch] [ebp-850h]
  size_t v74; // [esp+1Ch] [ebp-850h]
  signed int v75; // [esp+1Ch] [ebp-850h]
  int v76; // [esp+20h] [ebp-84Ch]
  int v77; // [esp+24h] [ebp-848h]
  unsigned int v78; // [esp+28h] [ebp-844h]
  unsigned int v79; // [esp+28h] [ebp-844h]
  unsigned int v80; // [esp+2Ch] [ebp-840h]
  int v81; // [esp+30h] [ebp-83Ch]
  unsigned int v82; // [esp+34h] [ebp-838h]
  char v83[32]; // [esp+3Ch] [ebp-830h] BYREF
  char src[2064]; // [esp+5Ch] [ebp-810h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = size;
  v4 = (char *)malloc(0x800u);
  if ( !v4 )
    goto LABEL_141;
  v5 = v4;
  v6 = (char *)malloc(0x800u);
  if ( !v6 )
  {
    free(v5);
LABEL_141:
    *size = -1;
    return 0;
  }
  v7 = 0;
  v8 = 0;
  ptr = v6;
  v82 = 2048;
  v81 = 0;
  v77 = 0;
  v80 = 2048;
  v72 = 0;
  v78 = 0;
  v9 = -1;
  v83[0] = 0;
  while ( 2 )
  {
    v76 = v9;
    v10 = receivedata(s, src, 2048, 5000, 0);
    if ( v10 <= 0 )
      goto end_of_stream;
    v11 = v77;
    v73 = v7;
    v12 = v10;
    v13 = v5;
    while ( 1 )
    {
      v64 = v12;
      if ( v8 )
      {
        v77 = v11;
        v5 = v13;
        goto LABEL_80;
      }
      v14 = v12 + v11;
      if ( v12 + v11 <= v82 )
      {
        v5 = v13;
      }
      else
      {
        v15 = v12;
        v16 = (char *)realloc(v13, v12 + v11);
        v12 = v15;
        v5 = v16;
        v82 = v14;
        if ( !v16 )
        {
          free(v13);
          free(ptr);
          goto LABEL_143;
        }
      }
      memcpy(&v5[v11], src, v12);
      v17 = v14;
      if ( v14 >= 2 )
        break;
LABEL_32:
      v8 = 0;
      v11 = v17;
      v12 = receivedata(s, src, 2048, 5000, 0);
      v13 = v5;
      if ( v12 <= 0 )
        goto LABEL_147;
    }
    v77 = v14;
    v18 = v14 - 1;
    v19 = 0;
    do
    {
      v20 = v5[v19];
      if ( v20 == 10 )
      {
        v22 = v5[v19 + 1] == 10;
        v21 = v19 + 1;
        v8 = v19 + 2;
LABEL_23:
        if ( !v22 )
          v8 = 0;
        goto LABEL_29;
      }
      if ( v20 != 13 )
        goto LABEL_27;
      if ( v5[v19 + 1] != 10 )
      {
        ++v19;
LABEL_27:
        v21 = v19;
LABEL_28:
        v8 = 0;
        goto LABEL_29;
      }
      v21 = v19 + 2;
      if ( v19 + 2 >= v77 )
        goto LABEL_28;
      v8 = 0;
      if ( v5[v21] == 13 )
      {
        v21 = v19 + 3;
        if ( v19 + 3 >= v77 )
          goto LABEL_28;
        v22 = v5[v19 + 3] == 10;
        v8 = v19 + 4;
        goto LABEL_23;
      }
LABEL_29:
      v19 = v21 + 1;
    }
    while ( v21 + 1 < v18 && !v8 );
    v17 = v77;
    if ( !v8 )
      goto LABEL_32;
    if ( v8 >= 2 )
    {
      v23 = status_code;
      v65 = v11 + v64;
      v24 = 0;
      v25 = 0;
      v68 = 0;
      v26 = v8 - 1;
      v27 = 0;
      do
      {
        v66 = v25;
        v28 = v5[v25];
        if ( v28 == 58 && v68 > 0 && v27 <= v68 )
        {
          v27 = v66;
          if ( v66 >= v26 )
          {
            v24 = v66 + 1;
            v30 = v66;
          }
          else
          {
            v24 = v66 + 1;
            while ( 1 )
            {
              v29 = v5[v24];
              if ( v29 != 32 && v29 != 9 )
                break;
              if ( v8 == ++v24 )
              {
                v27 = v66;
                v30 = v26;
                v24 = v8;
                goto LABEL_78;
              }
            }
            v27 = v66;
            v30 = v24 - 1;
          }
        }
        else if ( v28 == 13 || v28 == 10 )
        {
          if ( !v23 || v68 )
          {
            v31 = v65;
            if ( v27 > v68 && v24 > v27 )
            {
              v35 = &v5[v68];
              v69 = v27 - v68;
              if ( !strncasecmp(v35, "content-length", v69) )
              {
                v76 = atoi(&v5[v24]);
              }
              else if ( !strncasecmp(v35, "transfer-encoding", v69) )
              {
                v36 = strncasecmp(&v5[v24], "chunked", 7u);
                v37 = v81;
                if ( !v36 )
                  v37 = 1;
                v81 = v37;
              }
              v23 = status_code;
              v31 = v65;
            }
            v26 = v8 - 1;
            v27 = v66;
          }
          else
          {
            v27 = v66;
            v31 = v65;
            if ( v66 > 0 )
            {
              v32 = v5 + 1;
              v33 = v66;
              do
              {
                if ( *(v32 - 1) == 32 )
                {
                  if ( *v23 >= 0 )
                    break;
                  v34 = atoi(v32);
                  v31 = v65;
                  v23 = status_code;
                  *status_code = v34;
                  v27 = v66;
                }
                ++v32;
                --v33;
              }
              while ( v33 );
              v26 = v8 - 1;
            }
          }
          v24 = 0;
          if ( v27 >= v77 )
          {
            v30 = v27;
            v68 = v27;
          }
          else
          {
            while ( 1 )
            {
              v38 = v27;
              v39 = v5[v27];
              if ( v39 != 13 && v39 != 10 )
                break;
              v27 = v38 + 1;
              if ( v31 == v38 + 1 )
              {
                v27 = v77;
                v30 = v77;
                v68 = v77;
                goto LABEL_77;
              }
            }
            v27 = v38;
            v30 = v38;
            v68 = v38;
LABEL_77:
            v26 = v8 - 1;
          }
        }
        else
        {
          v30 = v66;
        }
LABEL_78:
        v25 = v30 + 1;
      }
      while ( v25 < v26 );
    }
    v64 = v77 - v8;
    memcpy(src, &v5[v8], v77 - v8);
LABEL_80:
    v9 = v76;
    v40 = v72;
    if ( !v81 )
    {
      v61 = v76 - v72;
      if ( v64 + v72 <= v76 )
        v61 = v64;
      if ( v76 <= 0 )
        v61 = v64;
      if ( v61 + v72 <= v80 )
      {
        v62 = ptr;
LABEL_135:
        memcpy(&v62[v72], src, v61);
        v40 = v61 + v72;
        ptr = v62;
LABEL_136:
        v9 = v76;
LABEL_137:
        v72 = v40;
        v3 = size;
        v7 = v73;
        if ( v9 > 0 && v72 >= v9 )
          goto end_of_stream;
        continue;
      }
      if ( v76 < (int)(v61 + v72) )
        v9 = v61 + v72;
      v80 = v9;
      v62 = (char *)realloc(ptr, v9);
      if ( v62 )
        goto LABEL_135;
      free(ptr);
LABEL_144:
      free(v5);
LABEL_143:
      *size = -1;
      return 0;
    }
    break;
  }
  if ( v64 <= 0 )
    goto LABEL_137;
  v41 = ptr;
  v42 = 0;
  while ( 1 )
  {
    v70 = v41;
    v67 = v40;
    v43 = v78;
    v44 = v73;
LABEL_84:
    if ( !v44 )
      break;
    v75 = v44;
    v78 = v43;
LABEL_113:
    v59 = v64 - v42;
    if ( v75 <= v64 - v42 )
      v59 = v75;
    if ( v59 + v67 <= v80 )
    {
      v60 = v70;
    }
    else
    {
      if ( v9 < (int)(v59 + v67) )
        v9 = v59 + v67;
      v80 = v9;
      v60 = (char *)realloc(v70, v9);
      if ( !v60 )
      {
        free(v70);
        goto LABEL_144;
      }
    }
    ptr = v60;
    memcpy(&v60[v67], &src[v42], v59);
    v42 += v59;
    v73 = v75 - v59;
    v41 = ptr;
    v9 = v76;
    v40 = v59 + v67;
    if ( v42 >= v64 )
      goto LABEL_137;
  }
  if ( v43 )
  {
    v45 = v64;
  }
  else
  {
    v45 = v64;
    v42 += src[v42] == 13;
    if ( v42 < v64 )
      v42 += src[v42] == 10;
  }
  if ( v42 < v45 )
  {
    v46 = _ctype_b_loc();
    v45 = v64;
    v47 = *v46;
    while ( v43 <= 0x1E )
    {
      v48 = src[v42];
      if ( (v47[v48] & 0x1000) == 0 )
      {
        v45 = v64;
        break;
      }
      v83[v43] = v48;
      v45 = v64;
      ++v42;
      v49 = v43 + 1;
      v83[++v43] = 0;
      if ( v64 == v42 )
      {
        v43 = v49;
        v42 = v64;
        break;
      }
    }
  }
  v50 = v42;
  if ( v42 >= v45 )
    v45 = v42;
  while ( 2 )
  {
    if ( v45 == v50 )
    {
      v73 = 0;
      goto LABEL_124;
    }
    v51 = src[v50++];
    if ( v51 != 13 && v51 != 10 )
      continue;
    break;
  }
  v42 = v50 - 1;
  v73 = 0;
  if ( v51 == 13 )
    v42 = v50;
  if ( v42 >= v64 )
  {
LABEL_124:
    v78 = v43;
    v40 = v67;
    ptr = v70;
    goto LABEL_136;
  }
  v44 = 0;
  v9 = v76;
  if ( src[v42] != 10 )
    goto LABEL_84;
  if ( v43 )
  {
    v52 = 0;
    v53 = v83;
    do
    {
      v54 = v52;
      v55 = *v53;
      v79 = v43;
      v74 = 16 * v54;
      v56 = v55 - 48;
      v57 = v55 - 48;
      v58 = (v55 | 0x20) - 87;
      if ( v57 < 0xAu )
        v58 = v56;
      ++v53;
      v52 = v74 + v58;
      v43 = v79 - 1;
    }
    while ( v79 != 1 );
    v83[0] = 0;
    v75 = v52;
    if ( v52 )
    {
      v9 = v76;
      ++v42;
      v78 = 0;
      goto LABEL_113;
    }
  }
  else
  {
    v83[0] = 0;
  }
  ptr = v70;
  v72 = v67;
LABEL_147:
  v3 = size;
end_of_stream:
  free(v5);
  *v3 = v72;
  if ( !v72 )
  {
    free(ptr);
    return 0;
  }
  return ptr;
}
