void *__cdecl getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // eax
  char *v4; // ebp
  void *v5; // eax
  void *v6; // edi
  int v7; // ebx
  signed int v8; // eax
  int v9; // esi
  int v10; // edi
  int v11; // eax
  unsigned int v12; // esi
  char *v13; // eax
  unsigned int v14; // edx
  char *v15; // ecx
  bool v16; // zf
  bool v17; // dl
  int v18; // ecx
  char v19; // dl
  int v20; // edx
  int v21; // ecx
  int v22; // edi
  int v23; // ebp
  int v24; // eax
  int v25; // ecx
  int v26; // ebx
  int v27; // ecx
  int v28; // edx
  int v29; // ecx
  bool v30; // cc
  bool v31; // al
  char v32; // cl
  int *v33; // ecx
  char *v34; // ebp
  int v35; // esi
  int v36; // eax
  size_t v37; // esi
  int v38; // eax
  char v39; // al
  int v40; // eax
  int v41; // ebx
  signed int v42; // edi
  size_t v43; // ecx
  size_t v44; // esi
  int v45; // eax
  int v46; // edi
  void *v47; // ebx
  void *v48; // eax
  char v49; // cl
  int v50; // ecx
  unsigned int v51; // esi
  signed int v52; // ebx
  const unsigned __int16 *v53; // eax
  int v54; // ecx
  char v55; // al
  signed int v56; // ebx
  char *v57; // eax
  int v58; // ecx
  int v59; // ebx
  int v60; // ebp
  int v61; // ecx
  size_t v62; // esi
  signed int v63; // ebp
  size_t v64; // eax
  void *v65; // eax
  void *v66; // ebx
  void *result; // eax
  int v68; // eax
  int v69; // [esp+18h] [ebp-864h]
  int v70; // [esp+1Ch] [ebp-860h]
  char *v71; // [esp+20h] [ebp-85Ch]
  int v72; // [esp+24h] [ebp-858h]
  void *ptr; // [esp+28h] [ebp-854h]
  size_t v74; // [esp+2Ch] [ebp-850h]
  char *nptr; // [esp+30h] [ebp-84Ch]
  int v76; // [esp+34h] [ebp-848h]
  unsigned int v77; // [esp+38h] [ebp-844h]
  int v78; // [esp+3Ch] [ebp-840h]
  unsigned int v79; // [esp+40h] [ebp-83Ch]
  int v80; // [esp+44h] [ebp-838h]
  int v81; // [esp+48h] [ebp-834h]
  char v82[32]; // [esp+4Ch] [ebp-830h] BYREF
  char dest[2064]; // [esp+6Ch] [ebp-810h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800u);
  if ( !v3 )
  {
    *size = -1;
    return 0;
  }
  v4 = v3;
  v5 = malloc(0x800u);
  if ( !v5 )
  {
    free(v4);
    *size = -1;
    return 0;
  }
  v6 = v5;
  v7 = s;
  v82[0] = 0;
  v79 = 2048;
  v76 = -1;
  v80 = 0;
  v8 = 0;
  v71 = 0;
  v77 = 2048;
  v70 = 0;
  v81 = 0;
  v9 = 0;
  while ( 1 )
  {
    while ( 1 )
    {
      v78 = v8;
      ptr = v6;
      do
      {
        v74 = receivedata(v7, dest, 2048, 5000, 0);
        if ( (int)v74 <= 0 )
          goto end_of_stream;
        if ( v9 )
        {
          v40 = v70;
          goto LABEL_80;
        }
        v12 = (unsigned int)&v71[v74];
        v69 = (int)&v71[v74];
        if ( (unsigned int)&v71[v74] <= v79 )
        {
          v14 = v79;
        }
        else
        {
          v13 = (char *)realloc(v4, (size_t)&v71[v74]);
          v14 = v12;
          v9 = 0;
          v15 = v13;
          v16 = v13 == 0;
          v11 = 0;
          if ( v16 )
          {
            free(v4);
            free(v6);
            *size = -1;
            v11 = 1;
            v15 = v4;
            v14 = v79;
          }
          v4 = v15;
          if ( v11 )
          {
            v79 = v14;
            continue;
          }
        }
        v79 = v14;
        memcpy(&v71[(_DWORD)v4], dest, v74);
        v17 = 1;
        v9 = 0;
        v71 = v4;
        if ( v69 >= 2 )
        {
          v9 = 0;
          v18 = 0;
          do
          {
            v19 = v4[v18];
            if ( v19 == 10 )
            {
              v20 = v18 + 1;
              if ( v71[v18 + 1] == 10 )
                v9 = v18 + 2;
              v4 = v71;
              goto LABEL_33;
            }
            if ( v19 == 13 )
            {
              if ( v4[v18 + 1] == 10 )
              {
                v20 = v18 + 2;
                if ( v18 + 2 < v69 && v4[v20] == 13 )
                {
                  v20 = v18 + 3;
                  if ( v18 + 3 < v69 )
                  {
                    v16 = v4[v18 + 3] == 10;
                    v21 = v18 + 4;
                    if ( v16 )
                      v9 = v21;
                  }
                }
                goto LABEL_33;
              }
              ++v18;
            }
            v20 = v18;
LABEL_33:
            v18 = v20 + 1;
            v17 = v9 == 0;
          }
          while ( v18 < v69 - 1 && !v9 );
        }
        v11 = 2;
        if ( v17 )
        {
          v71 = (char *)v69;
          v9 = 0;
        }
        else
        {
          if ( v9 >= 2 )
          {
            v22 = v9 - 1;
            nptr = v4 + 1;
            v23 = 0;
            v24 = 0;
            v25 = 0;
            v26 = 0;
            v72 = v9;
            do
            {
              v28 = v25;
              if ( v25 > 0 && v24 <= v25 && v71[v26] == 58 )
              {
                v23 = v26;
                do
                {
                  v31 = v23 < v22 && (v71[v23 + 1] == 32 || v71[v23 + 1] == 9);
                  ++v23;
                }
                while ( v31 );
                v27 = v23 - 1;
              }
              else
              {
                v32 = v71[v26];
                if ( v32 == 13 || v32 == 10 )
                {
                  v33 = status_code;
                  if ( !status_code || v28 )
                  {
                    v37 = v24 - v28;
                    if ( v24 > v28 && v23 > v24 )
                    {
                      v74 = (size_t)&v71[v28];
                      if ( !strncasecmp(&v71[v28], "content-length", v37) )
                      {
                        v76 = atoi(&v71[v23]);
                      }
                      else if ( !strncasecmp((const char *)v74, "transfer-encoding", v37) )
                      {
                        v16 = strncasecmp(&v71[v23], "chunked", 7u) == 0;
                        v38 = v80;
                        if ( v16 )
                          v38 = 1;
                        v80 = v38;
                      }
                    }
LABEL_71:
                    v9 = v72;
                  }
                  else if ( v26 > 0 )
                  {
                    v34 = nptr;
                    v35 = v26;
                    while ( 1 )
                    {
                      if ( *(v34 - 1) == 32 )
                      {
                        if ( *v33 >= 0 )
                          goto LABEL_71;
                        v36 = atoi(v34);
                        v33 = status_code;
                        *status_code = v36;
                      }
                      ++v34;
                      if ( !--v35 )
                        goto LABEL_71;
                    }
                  }
                  v23 = 0;
                  if ( v26 < v69 )
                  {
                    while ( 1 )
                    {
                      v39 = v71[v26];
                      if ( v39 != 13 && v39 != 10 )
                        break;
                      if ( v69 == ++v26 )
                      {
                        v26 = v69;
                        break;
                      }
                    }
                  }
                  v27 = v26;
                  v28 = v26;
                }
                else
                {
                  v27 = v26;
                  v26 = v24;
                }
              }
              v29 = v27 + 1;
              v30 = v29 < v22;
              v24 = v26;
              v26 = v29;
              v25 = v28;
            }
            while ( v30 );
          }
          v10 = v69;
          v4 = v71;
          v74 = v69 - v9;
          memcpy(dest, &v71[v9], v69 - v9);
          v11 = 0;
          v71 = (char *)v10;
          v6 = ptr;
          v7 = s;
        }
      }
      while ( v11 == 2 );
      v16 = v11 == 0;
      v40 = v70;
      if ( !v16 )
        return 0;
LABEL_80:
      if ( v9 )
        break;
LABEL_137:
      v8 = v78;
      if ( v76 > 0 )
      {
LABEL_138:
        if ( v70 >= v76 )
          goto end_of_stream;
      }
    }
    if ( !v80 )
    {
      v72 = v9;
      v43 = v76;
      v44 = v76 - v70;
      v45 = v70;
      if ( (int)(v74 + v70) <= v76 )
        v44 = v74;
      if ( v76 <= 0 )
        v44 = v74;
      v46 = v44 + v70;
      if ( v44 + v70 > v77 )
      {
        if ( v76 < v46 )
          v43 = v44 + v70;
        v47 = ptr;
        v77 = v43;
        v48 = realloc(ptr, v43);
        if ( v48 )
        {
          v49 = 1;
          ptr = v48;
        }
        else
        {
          free(v47);
          free(v4);
          *size = -1;
          v49 = 0;
        }
        v45 = v70;
        if ( !v49 )
          return 0;
      }
      v66 = ptr;
      memcpy((char *)ptr + v45, dest, v44);
      v70 = v46;
      v6 = v66;
      v7 = s;
      v9 = v72;
      goto LABEL_137;
    }
    v41 = v81;
    if ( (int)v74 > 0 )
      break;
    v69 = v40;
    v8 = v78;
LABEL_132:
    v81 = v41;
    v70 = v69;
    v7 = s;
    if ( v76 > 0 )
      goto LABEL_138;
  }
  v72 = v9;
  v42 = 0;
  v8 = v78;
  nptr = v4;
  while ( 2 )
  {
    v69 = v70;
    v51 = v41;
    v52 = v74;
LABEL_98:
    if ( v8 )
    {
      v41 = v51;
LABEL_123:
      v62 = v74 - v42;
      v63 = v8;
      if ( v8 <= (int)(v74 - v42) )
        v62 = v8;
      v70 = v62 + v69;
      if ( v62 + v69 > v77 )
      {
        v64 = v76;
        if ( v76 < (int)(v62 + v69) )
          v64 = v62 + v69;
        v77 = v64;
        v65 = realloc(ptr, v64);
        if ( !v65 )
        {
          free(ptr);
          free(nptr);
          *size = -1;
          v50 = 1;
          v6 = ptr;
          v4 = nptr;
          goto LABEL_142;
        }
        ptr = v65;
      }
      memcpy((char *)ptr + v69, &dest[v42], v62);
      v42 += v62;
      v8 = v63 - v62;
      v4 = nptr;
      if ( v42 < (int)v74 )
        continue;
      v69 = v70;
      goto LABEL_131;
    }
    break;
  }
  if ( !v51 )
  {
    v42 += dest[v42] == 13;
    if ( v42 < v52 )
      v42 += dest[v42] == 10;
  }
  if ( v42 < v52 )
  {
    v53 = *_ctype_b_loc();
    while ( v51 <= 0x1E )
    {
      v54 = dest[v42];
      if ( (v53[v54] & 0x1000) == 0 )
        break;
      v82[v51] = v54;
      v82[++v51] = 0;
      if ( v52 == ++v42 )
      {
        v42 = v52;
        break;
      }
    }
  }
  while ( v42 < v52 )
  {
    v55 = dest[v42++];
    if ( v55 == 13 || v55 == 10 )
    {
      if ( v55 != 13 )
        --v42;
      break;
    }
  }
  if ( v42 >= v52 || dest[v42] != 10 )
  {
    v8 = 0;
    if ( v42 < v52 )
      goto LABEL_98;
    v41 = v51;
LABEL_131:
    v6 = ptr;
    v9 = v72;
    goto LABEL_132;
  }
  v56 = 0;
  if ( v51 )
  {
    v56 = 0;
    v57 = v82;
    do
    {
      v58 = *v57;
      v59 = 16 * v56;
      v60 = v58 - 48;
      v61 = (v58 | 0x20) - 87;
      if ( (unsigned __int8)(*v57 - 48) < 0xAu )
        v61 = v60;
      v56 = v61 + v59;
      ++v57;
      --v51;
    }
    while ( v51 );
  }
  v82[0] = 0;
  if ( v56 )
  {
    v8 = v56;
    ++v42;
    v41 = 0;
    goto LABEL_123;
  }
  v50 = 25;
  v6 = ptr;
  v4 = nptr;
LABEL_142:
  v70 = v69;
  result = 0;
  if ( v50 == 25 )
  {
end_of_stream:
    free(v4);
    v68 = v70;
    *size = v70;
    if ( v68 )
      return v6;
    free(v6);
    return 0;
  }
  return result;
}
