void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  unsigned int v3; // r15d
  int v4; // eax
  int v5; // r12d
  char v6; // dl
  int v7; // edx
  int v8; // edi
  int v9; // r14d
  int v10; // ebp
  int i; // ebx
  char *v12; // rdx
  int v13; // eax
  char v14; // al
  char v15; // al
  char *v16; // rax
  const char *j; // rbp
  size_t v18; // r14
  const char *v19; // rbp
  bool v20; // zf
  int v21; // eax
  int v22; // ebp
  __int64 v23; // rbx
  const unsigned __int16 *v24; // rsi
  char v25; // dl
  unsigned int v26; // eax
  __int64 v27; // rax
  char v28; // dl
  unsigned int v29; // r14d
  char *v30; // rcx
  int v31; // edx
  char v32; // al
  unsigned int v33; // r12d
  unsigned int v34; // eax
  char *v35; // rax
  unsigned int v36; // r12d
  char *v37; // rbx
  int v38; // r13d
  char *v39; // rax
  unsigned int content_buf_used; // [rsp+4h] [rbp-8B4h]
  char *content_buf; // [rsp+8h] [rbp-8B0h]
  unsigned int chunksize; // [rsp+10h] [rbp-8A8h]
  unsigned int content_buf_len; // [rsp+14h] [rbp-8A4h]
  int content_length; // [rsp+18h] [rbp-8A0h]
  int valuestart; // [rsp+1Ch] [rbp-89Ch]
  char *header_buf; // [rsp+20h] [rbp-898h]
  unsigned int header_buf_used; // [rsp+28h] [rbp-890h]
  unsigned int header_buf_len; // [rsp+30h] [rbp-888h]
  int chunked; // [rsp+34h] [rbp-884h]
  char chunksize_buf[32]; // [rsp+50h] [rbp-868h] BYREF
  char buf[2048]; // [rsp+70h] [rbp-848h] BYREF
  unsigned __int64 v56; // [rsp+878h] [rbp-40h]

  v56 = __readfsqword(0x28u);
  if ( status_code )
    *status_code = -1;
  header_buf = (char *)malloc(0x800uLL);
  if ( !header_buf )
  {
    *size = -1;
    return 0LL;
  }
  content_buf = (char *)malloc(0x800uLL);
  if ( !content_buf )
  {
    free(header_buf);
    *size = -1;
    return content_buf;
  }
  chunksize_buf[0] = 0;
  v3 = 0;
  content_buf_used = 0;
  content_buf_len = 2048;
  header_buf_used = 0;
  header_buf_len = 2048;
  chunksize = 0;
  content_length = -1;
  chunked = 0;
  valuestart = 0;
LABEL_126:
  while ( 2 )
  {
    v22 = receivedata((unsigned int)s, buf, 2048LL, 5000LL, 0LL);
    if ( v22 <= 0 )
    {
end_of_stream:
      free(header_buf);
      *size = content_buf_used;
      if ( !content_buf_used )
      {
        free(content_buf);
        return 0LL;
      }
      return content_buf;
    }
    if ( !valuestart )
    {
      v38 = v22 + header_buf_used;
      if ( v22 + header_buf_used > header_buf_len )
      {
        v39 = (char *)realloc(header_buf, (unsigned int)v38);
        if ( !v39 )
        {
          free(header_buf);
          free(content_buf);
          *size = -1;
          return 0LL;
        }
        header_buf_len = v22 + header_buf_used;
        header_buf = v39;
      }
      memcpy(&header_buf[header_buf_used], buf, v22);
      if ( v38 - 1 <= 0 )
      {
        header_buf_used += v22;
        continue;
      }
      v4 = 0;
      do
      {
        v6 = header_buf[v4];
        if ( v6 == 13 )
        {
          if ( header_buf[v4 + 1] == 10 )
          {
            if ( v4 + 2 >= v38 )
            {
              v4 += 2;
              v5 = valuestart;
            }
            else if ( header_buf[v4 + 2] == 13 )
            {
              v7 = v4 + 3;
              if ( v4 + 3 >= v38 )
              {
                v4 += 3;
                v5 = valuestart;
              }
              else
              {
                v5 = v4 + 4;
                v4 += 3;
                if ( header_buf[v7] != 10 )
                  v5 = valuestart;
              }
            }
            else
            {
              v4 += 2;
              v5 = valuestart;
            }
          }
          else
          {
            ++v4;
            v5 = valuestart;
          }
        }
        else
        {
          v5 = valuestart;
          if ( v6 == 10 )
          {
            v5 = v4 + 2;
            if ( header_buf[++v4] != 10 )
              v5 = valuestart;
          }
        }
        ++v4;
      }
      while ( !v5 && v4 < v38 - 1 );
      if ( !v5 )
      {
        header_buf_used += v22;
        valuestart = 0;
        continue;
      }
      v8 = v5 - 1;
      if ( v5 - 1 > 0 )
      {
        v9 = 0;
        v10 = 0;
        for ( i = 0; i < v8; ++i )
        {
          if ( v10 <= 0 || v10 < v9 )
          {
            v14 = header_buf[i];
            if ( v14 == 13 || v14 == 10 )
            {
              if ( v10 || !status_code )
              {
                if ( v10 < v9 && v9 < valuestart )
                {
                  v18 = v9 - v10;
                  v19 = &header_buf[v10];
                  if ( !strncasecmp(v19, "content-length", v18) )
                  {
                    content_length = strtol(&header_buf[valuestart], 0LL, 10);
                  }
                  else if ( !strncasecmp(v19, "transfer-encoding", v18) )
                  {
                    v20 = strncasecmp(&header_buf[valuestart], "chunked", 7uLL) == 0;
                    v21 = 1;
                    if ( !v20 )
                      v21 = chunked;
                    chunked = v21;
                  }
                }
              }
              else if ( i > 0 )
              {
                for ( j = header_buf + 1; j != &header_buf[i - 1 + 2]; ++j )
                {
                  if ( *(j - 1) == 32 )
                  {
                    if ( *status_code >= 0 )
                      break;
                    *status_code = strtol(j, 0LL, 10);
                  }
                }
              }
LABEL_45:
              if ( v38 <= i )
              {
                valuestart = 0;
                v9 = i;
                v10 = i;
              }
              else
              {
                v16 = &header_buf[i];
                do
                {
                  if ( *v16 != 13 && *v16 != 10 )
                  {
                    valuestart = 0;
                    v9 = i;
                    v10 = i;
                    goto LABEL_39;
                  }
                  ++i;
                  ++v16;
                }
                while ( i != v38 );
                valuestart = 0;
                v9 = v38;
                v10 = v38;
                i = v38;
              }
            }
          }
          else
          {
            v15 = header_buf[i];
            if ( v15 == 58 )
            {
              if ( v8 <= i )
              {
                v13 = i;
              }
              else
              {
                v12 = &header_buf[i + 1];
                v13 = i;
                while ( *v12 == 32 || *v12 == 9 )
                {
                  ++v13;
                  ++v12;
                  if ( v13 == v5 - 1 )
                  {
                    v13 = v5 - 1;
                    break;
                  }
                }
              }
              valuestart = v13 + 1;
              v9 = i;
              i = v13;
              continue;
            }
            if ( v15 == 13 || v15 == 10 )
              goto LABEL_45;
          }
LABEL_39:
          ;
        }
      }
      v22 = v38 - v5;
      memcpy(buf, &header_buf[v5], v38 - v5);
      header_buf_used = v38;
      valuestart = v5;
      if ( !chunked )
        goto LABEL_145;
      if ( v22 <= 0 )
      {
        header_buf_used = v38;
        valuestart = v5;
        goto LABEL_124;
      }
      goto LABEL_74;
    }
    break;
  }
  if ( chunked )
  {
LABEL_74:
    LODWORD(v23) = 0;
    while ( 1 )
    {
      if ( chunksize )
        goto LABEL_110;
      if ( !v3 )
      {
        if ( buf[(int)v23] == 13 )
          LODWORD(v23) = v23 + 1;
        if ( v22 <= (int)v23 )
        {
          v26 = 0;
LABEL_141:
          v3 = v26;
LABEL_124:
          if ( content_length > 0 && content_length <= content_buf_used )
            goto end_of_stream;
          goto LABEL_126;
        }
        if ( buf[(int)v23] != 10 )
          goto LABEL_82;
        LODWORD(v23) = v23 + 1;
      }
      if ( v22 <= (int)v23 )
      {
        v26 = v3;
        goto LABEL_141;
      }
LABEL_82:
      v24 = *_ctype_b_loc();
      v23 = (int)v23;
      while ( 1 )
      {
        v25 = buf[v23];
        if ( (v24[v25] & 0x1000) == 0 || v3 > 0x1E )
          break;
        v26 = v3 + 1;
        chunksize_buf[v3] = v25;
        chunksize_buf[v3 + 1] = 0;
        if ( v22 <= (int)++v23 )
          goto LABEL_141;
        ++v3;
      }
      if ( v22 <= (int)v23 )
        goto LABEL_124;
      v27 = (int)v23;
      while ( 1 )
      {
        LODWORD(v23) = v27;
        v28 = buf[v27];
        if ( v28 == 10 || v28 == 13 )
          break;
        if ( v22 <= (int)++v27 )
          goto LABEL_124;
      }
      if ( v22 <= (int)v27 )
        goto LABEL_124;
      if ( buf[(int)v27] == 13 )
      {
        LODWORD(v23) = v27 + 1;
        if ( v22 <= (int)v27 + 1 )
          goto LABEL_124;
      }
      v29 = content_buf_used;
      if ( buf[(int)v23] != 10 )
        goto LABEL_108;
      if ( !v3 )
        goto end_of_stream;
      v30 = chunksize_buf;
      v31 = 0;
      do
      {
        v32 = *v30;
        if ( (unsigned __int8)(*v30 - 48) > 9u )
          v31 = 16 * v31 + (v32 | 0x20) - 87;
        else
          v31 = 16 * v31 + v32 - 48;
        ++v30;
      }
      while ( v30 != &chunksize_buf[v3] );
      chunksize_buf[0] = 0;
      LODWORD(v23) = v23 + 1;
      if ( !v31 )
        goto end_of_stream;
      v3 = 0;
      chunksize = v31;
LABEL_110:
      v33 = v22 - v23;
      if ( v22 - (int)v23 > chunksize )
        v33 = chunksize;
      v29 = v33 + content_buf_used;
      if ( v33 + content_buf_used > content_buf_len )
      {
        v34 = content_length;
        if ( content_length < v29 )
          v34 = v33 + content_buf_used;
        if ( content_length < 0 )
          v34 = v33 + content_buf_used;
        content_buf_len = v34;
        v35 = (char *)realloc(content_buf, v34);
        if ( !v35 )
          goto LABEL_106;
        content_buf = v35;
      }
      memcpy(&content_buf[content_buf_used], &buf[(int)v23], v33);
      LODWORD(v23) = v23 + v33;
      chunksize -= v33;
      if ( v22 <= (int)v23 )
      {
        content_buf_used += v33;
        goto LABEL_124;
      }
LABEL_108:
      content_buf_used = v29;
    }
  }
LABEL_145:
  if ( content_length <= 0 )
  {
    v36 = v22 + content_buf_used;
    if ( v22 + content_buf_used <= content_buf_len )
    {
      v37 = content_buf;
      goto LABEL_123;
    }
    if ( !content_length )
      goto LABEL_148;
    goto LABEL_121;
  }
  v36 = content_length;
  if ( v22 + content_buf_used <= content_length )
  {
    v36 = v22 + content_buf_used;
    v37 = content_buf;
    if ( content_buf_len < v22 + content_buf_used )
    {
      content_buf_len = content_length;
      goto LABEL_122;
    }
LABEL_123:
    memcpy(&v37[content_buf_used], buf, v22);
    content_buf_used = v36;
    content_buf = v37;
    goto LABEL_124;
  }
  v22 = content_length - content_buf_used;
  v37 = content_buf;
  if ( content_length <= content_buf_len )
    goto LABEL_123;
LABEL_148:
  content_buf_len = content_length;
  if ( content_length < v36 )
LABEL_121:
    content_buf_len = v36;
LABEL_122:
  v37 = (char *)realloc(content_buf, content_buf_len);
  if ( v37 )
    goto LABEL_123;
LABEL_106:
  free(content_buf);
  free(header_buf);
  *size = -1;
  return 0LL;
}
