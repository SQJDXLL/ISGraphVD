void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // rax
  char *v4; // r12
  char *v5; // rax
  __int64 v6; // rax
  __int64 v7; // rdx
  __int64 v8; // rbp
  int v9; // r14d
  int v10; // r13d
  int v11; // eax
  int v12; // r15d
  int v13; // ebx
  unsigned int v14; // ecx
  char *v15; // rax
  bool v16; // dl
  int v17; // eax
  int v18; // ecx
  char v19; // bl
  __int64 v20; // rsi
  __int64 v21; // rdx
  int v22; // ecx
  unsigned int v23; // ebp
  __int64 v24; // r13
  char *v25; // rdi
  const unsigned __int16 *v26; // r8
  unsigned int v27; // r9d
  __int64 v28; // rdx
  __int64 v29; // rbx
  char v30; // al
  __int64 v31; // r8
  __int64 v32; // rcx
  int v33; // ebx
  __int64 v34; // rdx
  int v35; // esi
  unsigned __int8 v36; // al
  int v37; // ebx
  int v38; // ebp
  int v39; // esi
  int v40; // esi
  int v41; // ebx
  unsigned __int8 v42; // al
  int v43; // esi
  int v44; // ebp
  int v45; // ebx
  int v46; // eax
  unsigned __int8 v47; // cl
  int v48; // edx
  int v49; // eax
  unsigned int v50; // esi
  unsigned int v51; // ecx
  size_t v52; // rsi
  char *v53; // rax
  int v54; // ebx
  int v55; // edi
  int v56; // ecx
  int v57; // eax
  int v58; // esi
  __int64 v59; // r15
  char v60; // dl
  char *v61; // r13
  __int64 v62; // rdx
  int v63; // edx
  int v64; // r15d
  const char *v65; // rbp
  int v66; // eax
  int v67; // ecx
  __int64 v68; // rax
  int *v69; // rcx
  const char *v70; // rbp
  int v71; // eax
  __int64 v72; // rcx
  char v73; // bl
  unsigned int v74; // edx
  int v75; // ebp
  unsigned int v76; // r15d
  size_t v77; // rsi
  char *v78; // rax
  char *v79; // r13
  int v80; // edi
  int v81; // ecx
  int v82; // eax
  int v83; // r15d
  int v84; // esi
  char v85; // dl
  char *v86; // r13
  __int64 v87; // rdx
  int v88; // edx
  const char *v89; // rbp
  int v90; // eax
  int v91; // ecx
  __int64 v92; // rcx
  char v93; // bl
  char *v94; // rdi
  unsigned int ptr; // [rsp+8h] [rbp-8F0h]
  char *ptra; // [rsp+8h] [rbp-8F0h]
  unsigned int v98; // [rsp+10h] [rbp-8E8h]
  char *v99; // [rsp+18h] [rbp-8E0h]
  __int64 v100; // [rsp+20h] [rbp-8D8h]
  int v101; // [rsp+2Ch] [rbp-8CCh]
  char *v102; // [rsp+30h] [rbp-8C8h]
  unsigned int v103; // [rsp+38h] [rbp-8C0h]
  __int64 v104; // [rsp+40h] [rbp-8B8h]
  unsigned int v105; // [rsp+48h] [rbp-8B0h]
  __int64 v106; // [rsp+50h] [rbp-8A8h]
  int v107; // [rsp+50h] [rbp-8A8h]
  unsigned int v108; // [rsp+5Ch] [rbp-89Ch]
  size_t v109; // [rsp+60h] [rbp-898h]
  size_t nptr; // [rsp+70h] [rbp-888h]
  unsigned int v112; // [rsp+78h] [rbp-880h]
  __int64 v113; // [rsp+80h] [rbp-878h]
  __int64 v114; // [rsp+80h] [rbp-878h]
  __int64 v117; // [rsp+98h] [rbp-860h]
  char v118[32]; // [rsp+A0h] [rbp-858h] BYREF
  char src[2104]; // [rsp+C0h] [rbp-838h] BYREF

  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800uLL);
  if ( !v3 )
  {
    *size = -1;
    return 0LL;
  }
  v4 = v3;
  v5 = (char *)malloc(0x800uLL);
  if ( !v5 )
  {
    free(v4);
    *size = -1;
    return 0LL;
  }
  v99 = v5;
  v118[0] = 0;
  v108 = 2048;
  v6 = 0xFFFFFFFFLL;
  v101 = 0;
  v7 = 0LL;
  v8 = 0LL;
  v112 = 2048;
  v103 = 0;
  ptr = 0;
  v9 = 0;
  do
  {
    v106 = v7;
    v100 = v6;
    v10 = v9;
    while ( 1 )
    {
      v11 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
      if ( v11 <= 0 )
        goto end_of_stream;
      v12 = v11;
      if ( v10 )
        break;
      v13 = v11 + v8;
      v14 = v108;
      if ( v11 + (int)v8 <= v108 )
      {
        v15 = v4;
      }
      else
      {
        v15 = (char *)realloc(v4, (unsigned int)v13);
        v14 = v12 + v8;
        if ( !v15 )
        {
          free(v4);
          v94 = v99;
          goto LABEL_186;
        }
      }
      v108 = v14;
      v4 = v15;
      memcpy(&v15[(unsigned int)v8], src, (unsigned int)v12);
      v16 = 1;
      v10 = 0;
      v9 = 0;
      v8 = (unsigned int)(v12 + v8);
      if ( v13 >= 2 )
      {
        v17 = v13 - 1;
        v18 = 0;
        do
        {
          v19 = v4[v18];
          if ( v19 == 10 )
          {
            LODWORD(v20) = v18 + 1;
            v9 = v18 + 2;
            if ( v4[v18 + 1] != 10 )
              v9 = 0;
            goto LABEL_32;
          }
          if ( v19 == 13 )
          {
            if ( v4[v18 + 1] != 10 )
            {
              LODWORD(v21) = v18 + 1;
LABEL_30:
              LODWORD(v20) = v21;
              goto LABEL_31;
            }
            v20 = v18 + 2LL;
            if ( v18 + 2 < (int)v8 )
            {
              v9 = 0;
              if ( v4[v20] != 13 )
                goto LABEL_32;
              v21 = v18 + 3LL;
              if ( (int)v21 < (int)v8 )
              {
                v22 = v18 + 4;
                if ( v4[v21] != 10 )
                  v22 = 0;
                LODWORD(v20) = v21;
                v9 = v22;
                goto LABEL_32;
              }
              goto LABEL_30;
            }
          }
          else
          {
            LODWORD(v20) = v18;
          }
LABEL_31:
          v9 = 0;
LABEL_32:
          v18 = v20 + 1;
          v16 = v9 == 0;
        }
        while ( (int)v20 + 1 < v17 && !v9 );
      }
      if ( !v16 )
      {
        v104 = v8;
        if ( v9 >= 2 )
        {
          v54 = v9 - 1;
          v117 = (int)v8;
          if ( status_code )
          {
            v113 = -(__int64)v54;
            v55 = 0;
            v56 = 0;
            v57 = 0;
            v58 = 0;
            v23 = ptr;
            while ( 1 )
            {
              v59 = (unsigned int)v58;
              v60 = v4[v58];
              if ( v60 == 58 && v57 > 0 && v56 <= v57 )
              {
                if ( v58 >= v54 )
                {
                  v55 = v58 + 1;
                  v56 = v58;
                }
                else
                {
                  v61 = &v4[v58 + 1];
                  v62 = 0LL;
                  do
                  {
                    if ( *v61 != 9 && *v61 != 32 )
                    {
                      v58 -= v62;
                      v55 = v58 + 1;
                      v56 = v59;
                      v54 = v9 - 1;
                      goto LABEL_90;
                    }
                    --v62;
                    ++v61;
                  }
                  while ( v58 + v113 != v62 );
                  v54 = v9 - 1;
                  v58 = v9 - 1;
                  v56 = v59;
                  v55 = v9;
                }
              }
              else if ( v60 == 13 || v60 == 10 )
              {
                if ( v57 )
                {
                  v63 = v56 - v57;
                  v64 = v104;
                  if ( v56 <= v57 || v55 <= v56 )
                  {
                    if ( v58 < (int)v104 )
                      goto LABEL_125;
                  }
                  else
                  {
                    v65 = &v4[v57];
                    v109 = v63;
                    if ( !strncasecmp(v65, "content-length", v63) )
                    {
                      v68 = strtol(&v4[v55], 0LL, 10);
                    }
                    else
                    {
                      if ( !strncasecmp(v65, "transfer-encoding", v109) )
                      {
                        v66 = strncasecmp(&v4[v55], "chunked", 7uLL);
                        v67 = v101;
                        if ( !v66 )
                          v67 = 1;
                        v101 = v67;
                      }
                      v68 = v100;
                    }
LABEL_124:
                    v23 = ptr;
                    v100 = v68;
                    if ( v58 < v64 )
                      goto LABEL_125;
                  }
                }
                else
                {
                  v69 = status_code;
                  v68 = v100;
                  if ( v58 > 0 )
                  {
                    v70 = v4 + 1;
                    while ( 1 )
                    {
                      if ( *(v70 - 1) == 32 )
                      {
                        if ( *v69 >= 0 )
                        {
LABEL_120:
                          v64 = v104;
                          goto LABEL_124;
                        }
                        v71 = strtol(v70, 0LL, 10);
                        v69 = status_code;
                        *status_code = v71;
                        v68 = v100;
                      }
                      ++v70;
                      if ( !--v59 )
                        goto LABEL_120;
                    }
                  }
                  v64 = v104;
                  if ( v58 < (int)v104 )
                  {
LABEL_125:
                    v72 = 0LL;
                    do
                    {
                      v73 = v4[v58 + v72];
                      if ( v73 != 13 && v73 != 10 )
                      {
                        v58 += v72;
                        v55 = 0;
                        v57 = v58;
                        v56 = v58;
                        v54 = v9 - 1;
                        goto LABEL_90;
                      }
                      ++v72;
                    }
                    while ( v117 - v58 != v72 );
                    v55 = 0;
                    v57 = v64;
                    v56 = v64;
                    v58 = v64;
                    v54 = v9 - 1;
                    goto LABEL_90;
                  }
                }
                v55 = 0;
                v57 = v58;
                v56 = v58;
              }
LABEL_90:
              if ( ++v58 >= v54 )
                goto LABEL_133;
            }
          }
          v114 = -(__int64)v54;
          v80 = 0;
          v81 = 0;
          v82 = 0;
          v83 = 0;
          v23 = ptr;
          while ( 2 )
          {
            v84 = v83;
            v85 = v4[v83];
            if ( v85 == 58 && v82 > 0 && v81 <= v82 )
            {
              if ( v83 < v54 )
              {
                v86 = &v4[v83 + 1];
                v87 = 0LL;
                do
                {
                  if ( *v86 != 32 && *v86 != 9 )
                  {
                    v83 -= v87;
                    v80 = v83 + 1;
                    v81 = v84;
                    goto LABEL_152;
                  }
                  --v87;
                  ++v86;
                }
                while ( v83 + v114 != v87 );
                v54 = v9 - 1;
                v83 = v9 - 1;
                v81 = v84;
                v80 = v9;
                goto LABEL_153;
              }
              v80 = v83 + 1;
            }
            else
            {
              if ( v85 != 13 && v85 != 10 )
                goto LABEL_153;
              v88 = v81 - v82;
              if ( v81 > v82 && v80 > v81 )
              {
                v89 = &v4[v82];
                nptr = v88;
                if ( !strncasecmp(v89, "content-length", v88) )
                {
                  v100 = strtol(&v4[v80], 0LL, 10);
                }
                else if ( !strncasecmp(v89, "transfer-encoding", nptr) )
                {
                  v90 = strncasecmp(&v4[v80], "chunked", 7uLL);
                  v91 = v101;
                  if ( !v90 )
                    v91 = 1;
                  v101 = v91;
                }
                v23 = ptr;
                v84 = v83;
              }
              if ( v83 < (int)v104 )
              {
                v92 = 0LL;
                while ( 1 )
                {
                  v93 = v4[v83 + v92];
                  if ( v93 != 13 && v93 != 10 )
                    break;
                  if ( v117 - v83 == ++v92 )
                  {
                    v80 = 0;
                    v81 = v104;
                    v83 = v104;
                    v82 = v104;
                    goto LABEL_152;
                  }
                }
                v83 += v92;
                v80 = 0;
                v82 = v83;
                v81 = v83;
LABEL_152:
                v54 = v9 - 1;
LABEL_153:
                if ( ++v83 >= v54 )
                  goto LABEL_133;
                continue;
              }
              v80 = 0;
              v82 = v83;
            }
            break;
          }
          v81 = v84;
          goto LABEL_153;
        }
        v23 = ptr;
LABEL_133:
        v12 = v104 - v9;
        memcpy(src, &v4[v9], (int)v104 - v9);
        v7 = v106;
        v102 = v4;
        if ( !v101 )
          goto LABEL_134;
LABEL_36:
        if ( v12 > 0 )
        {
          LODWORD(v24) = 0;
          v25 = v99;
          do
          {
            v98 = v103;
            ptra = v25;
            do
            {
              if ( (_DWORD)v7 )
                goto LABEL_74;
              if ( !v23 )
              {
                LODWORD(v24) = (src[(int)v24] == 13) + (_DWORD)v24;
                if ( (int)v24 < v12 )
                  LODWORD(v24) = v24 + (src[(int)v24] == 10);
              }
              if ( (int)v24 < v12 )
              {
                v26 = *_ctype_b_loc();
                v27 = v12 + v23 - v24;
                v28 = 0LL;
                while ( (unsigned __int64)v23 + v28 <= 0x1E )
                {
                  v29 = src[(int)v24 + v28];
                  if ( (v26[v29] & 0x1000) == 0 )
                    break;
                  *(_WORD *)&v118[v23 + v28++] = (unsigned __int8)v29;
                  if ( (unsigned int)v12 - (__int64)(int)v24 == v28 )
                  {
                    LODWORD(v24) = v12;
                    v23 = v27;
                    goto LABEL_50;
                  }
                }
                LODWORD(v24) = v28 + v24;
                v23 += v28;
LABEL_50:
                v25 = ptra;
              }
              v24 = (int)v24;
              while ( v24 < (unsigned int)v12 )
              {
                v30 = src[v24++];
                if ( v30 == 13 || v30 == 10 )
                {
                  if ( v30 != 13 )
                    LODWORD(v24) = v24 - 1;
                  break;
                }
              }
              if ( v12 <= (int)v24 )
              {
                v7 = 0LL;
                v99 = v25;
                goto LABEL_147;
              }
              LODWORD(v7) = 0;
            }
            while ( src[(int)v24] != 10 );
            if ( !v23 )
            {
              v118[0] = 0;
LABEL_188:
              v99 = v25;
              v4 = v102;
              goto end_of_stream;
            }
            v31 = v23 & 1;
            if ( v23 == 1 )
            {
              v32 = 0LL;
              v33 = 0;
            }
            else
            {
              v34 = v23 - v31;
              v32 = 0LL;
              v33 = 0;
              do
              {
                v35 = v118[v32];
                v36 = v35 - 48;
                v37 = 16 * v33;
                v38 = v35 + 268435408;
                v39 = (v35 | 0x20) + 268435369;
                if ( v36 < 0xAu )
                  v39 = v38;
                v40 = v37 + v39;
                v41 = v118[v32 + 1];
                v42 = v41 - 48;
                v43 = 16 * v40;
                v44 = v41 - 48;
                v45 = (v41 | 0x20) - 87;
                if ( v42 < 0xAu )
                  v45 = v44;
                v33 = v43 + v45;
                v32 += 2LL;
              }
              while ( v34 != v32 );
            }
            if ( v31 )
            {
              v46 = v118[v32];
              v47 = v46 - 48;
              v48 = v46 - 48;
              v49 = (v46 | 0x20) - 87;
              if ( v47 < 0xAu )
                v49 = v48;
              v33 = v49 + 16 * v33;
            }
            v118[0] = 0;
            LODWORD(v7) = v33;
            if ( !v33 )
              goto LABEL_188;
            LODWORD(v24) = v24 + 1;
            v23 = 0;
LABEL_74:
            v50 = v12 - v24;
            v107 = v7;
            if ( (unsigned int)v7 < v12 - (int)v24 )
              v50 = v7;
            v105 = v50;
            v51 = v50 + v103;
            v103 += v50;
            if ( v50 + v98 <= v112 )
            {
              v53 = v25;
            }
            else
            {
              v52 = (unsigned int)v100;
              if ( (unsigned int)v100 < v51 )
                v52 = v51;
              if ( (int)v100 < 0 )
                v52 = v51;
              v112 = v52;
              v53 = (char *)realloc(v25, v52);
              if ( !v53 )
              {
                free(v25);
                v94 = v102;
                goto LABEL_186;
              }
            }
            v99 = v53;
            memcpy(&v53[v98], &src[(int)v24], v105);
            LODWORD(v24) = v105 + v24;
            v7 = v107 - v105;
            v25 = v99;
          }
          while ( (int)v24 < v12 );
        }
        goto LABEL_147;
      }
    }
    v9 = v10;
    v104 = v8;
    v23 = ptr;
    v7 = v106;
    v102 = v4;
    if ( v101 )
      goto LABEL_36;
LABEL_134:
    v74 = v103;
    v75 = v100 - v103;
    if ( v12 + v103 <= (unsigned int)v100 )
      v75 = v12;
    if ( (int)v100 <= 0 )
      v75 = v12;
    v76 = v103 + v75;
    if ( v103 + v75 <= v112 )
    {
      v79 = v99;
    }
    else
    {
      v77 = (unsigned int)v100;
      if ( (unsigned int)v100 < v76 )
        v77 = v76;
      if ( (int)v100 < 0 )
        v77 = v76;
      v112 = v77;
      v78 = (char *)realloc(v99, v77);
      v74 = v103;
      v79 = v78;
      if ( !v78 )
      {
        free(v99);
        v94 = v4;
LABEL_186:
        free(v94);
        *size = -1;
        return 0LL;
      }
    }
    memcpy(&v79[v74], src, v75);
    v99 = v79;
    v103 += v75;
    v23 = ptr;
    v7 = v106;
LABEL_147:
    ptr = v23;
    v6 = v100;
    v4 = v102;
    v8 = v104;
  }
  while ( (int)v100 <= 0 || v103 < (unsigned int)v100 );
end_of_stream:
  free(v4);
  *size = v103;
  if ( !v103 )
  {
    free(v99);
    return 0LL;
  }
  return v99;
}
