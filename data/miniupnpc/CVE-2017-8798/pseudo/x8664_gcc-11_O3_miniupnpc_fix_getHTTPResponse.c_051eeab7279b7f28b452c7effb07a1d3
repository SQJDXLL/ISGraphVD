void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  __int64 v3; // rbx
  unsigned int v4; // ebp
  unsigned int v5; // r12d
  char *v6; // r13
  int v7; // r14d
  unsigned int v8; // r10d
  char *v9; // rax
  signed int v10; // r10d
  int v11; // ecx
  int v12; // edx
  signed int v13; // r14d
  char v14; // al
  __int64 v15; // rax
  signed int v16; // eax
  int v17; // r15d
  unsigned int v18; // r15d
  unsigned int v19; // eax
  char *v20; // rax
  int v22; // r11d
  size_t v23; // rbp
  int v24; // edx
  __int64 v25; // rsi
  int v26; // ebx
  int v27; // r12d
  int v28; // r14d
  int v29; // r15d
  _BYTE *v30; // r13
  char v31; // al
  const char *v32; // rdi
  __int64 v33; // rbp
  const char *v34; // r12
  const char *v35; // rdi
  _BYTE *v36; // rcx
  unsigned int v37; // r10d
  int v38; // r15d
  char *v39; // rax
  unsigned int v40; // r13d
  int v41; // ebp
  char *v42; // r14
  unsigned int v43; // ecx
  unsigned int v44; // r8d
  unsigned int v45; // eax
  char *v46; // rax
  unsigned int v47; // r8d
  char v48; // al
  __int64 v49; // rsi
  const unsigned __int16 *v50; // rdi
  __int64 v51; // rax
  __int64 v52; // rcx
  char *v53; // rcx
  char *v54; // rsi
  int v55; // r9d
  int v56; // eax
  int v57; // r9d
  bool v58; // zf
  int v59; // eax
  _BYTE *v60; // rax
  int v61; // ecx
  char *content_buf; // [rsp+8h] [rbp-8D0h]
  int chunked; // [rsp+10h] [rbp-8C8h]
  unsigned int chunkeda; // [rsp+10h] [rbp-8C8h]
  unsigned int chunkedb; // [rsp+10h] [rbp-8C8h]
  signed int content_buf_used; // [rsp+18h] [rbp-8C0h]
  unsigned int content_buf_useda; // [rsp+18h] [rbp-8C0h]
  unsigned int content_buf_usedb; // [rsp+18h] [rbp-8C0h]
  unsigned int content_buf_usedc; // [rsp+18h] [rbp-8C0h]
  unsigned int content_buf_len; // [rsp+1Ch] [rbp-8BCh]
  char *header_buf; // [rsp+20h] [rbp-8B8h]
  int content_length; // [rsp+28h] [rbp-8B0h]
  unsigned int header_buf_used; // [rsp+2Ch] [rbp-8ACh]
  unsigned int header_buf_useda; // [rsp+2Ch] [rbp-8ACh]
  int endofheaders; // [rsp+30h] [rbp-8A8h]
  unsigned int v77; // [rsp+38h] [rbp-8A0h]
  char *dest; // [rsp+40h] [rbp-898h]
  size_t v79; // [rsp+50h] [rbp-888h]
  size_t v80; // [rsp+50h] [rbp-888h]
  unsigned int header_buf_len; // [rsp+58h] [rbp-880h]
  int valuestart; // [rsp+5Ch] [rbp-87Ch]
  int valuestarta; // [rsp+5Ch] [rbp-87Ch]
  char chunksize_buf[32]; // [rsp+70h] [rbp-868h] BYREF
  char buf[2048]; // [rsp+90h] [rbp-848h] BYREF
  unsigned __int64 v88; // [rsp+898h] [rbp-40h]

  v88 = __readfsqword(0x28u);
  if ( status_code )
    *status_code = -1;
  header_buf = (char *)malloc(0x800uLL);
  if ( !header_buf )
    goto LABEL_139;
  content_buf = (char *)malloc(0x800uLL);
  if ( !content_buf )
  {
    free(header_buf);
    *size = -1;
    return content_buf;
  }
  chunksize_buf[0] = 0;
  v3 = 0LL;
  v4 = 0;
  v5 = 0;
  content_buf_len = 2048;
  v6 = buf;
  header_buf_used = 0;
  header_buf_len = 2048;
  content_length = -1;
  chunked = 0;
  endofheaders = 0;
  do
  {
    while ( 1 )
    {
      v7 = receivedata((unsigned int)s, v6, 2048LL, 5000LL, 0LL);
      if ( v7 <= 0 )
        goto end_of_stream;
      if ( endofheaders )
      {
        v17 = v7;
        if ( !chunked )
        {
LABEL_23:
          v18 = v4 + v17;
          v19 = content_length;
          if ( content_length <= 0 )
          {
            if ( content_buf_len >= v18 )
              goto LABEL_32;
            if ( content_length )
            {
              content_buf_len = v18;
LABEL_30:
              v20 = (char *)realloc(content_buf, content_buf_len);
              if ( v20 )
              {
                content_buf = v20;
LABEL_32:
                memcpy(&content_buf[v4], v6, v7);
                chunked = 0;
                v4 = v18;
                goto LABEL_33;
              }
LABEL_138:
              free(content_buf);
              free(header_buf);
LABEL_139:
              content_buf = 0LL;
              *size = -1;
              return content_buf;
            }
            v19 = 0;
          }
          else
          {
            if ( content_length < v18 )
            {
              v18 = content_length;
              v7 = content_length - v4;
            }
            if ( content_buf_len >= v18 )
              goto LABEL_32;
          }
          if ( v18 >= v19 )
            v19 = v18;
          content_buf_len = v19;
          goto LABEL_30;
        }
LABEL_70:
        v38 = 0;
        v39 = v6;
        v40 = v4;
        v41 = v7;
        v42 = v39;
        while ( v5 )
        {
LABEL_71:
          v43 = v41 - v38;
          if ( v41 - v38 > v5 )
            v43 = v5;
          v44 = v43 + v40;
          if ( v43 + v40 > content_buf_len )
          {
            content_buf_usedb = v43;
            chunkeda = v43 + v40;
            v45 = content_length;
            if ( content_length < v44 )
              v45 = v43 + v40;
            if ( content_length < 0 )
              v45 = v43 + v40;
            content_buf_len = v45;
            v46 = (char *)realloc(content_buf, v45);
            v44 = chunkeda;
            v43 = content_buf_usedb;
            if ( !v46 )
              goto LABEL_138;
            content_buf = v46;
          }
          content_buf_usedc = v44;
          chunkedb = v43;
          memcpy(&content_buf[v40], &v42[v38], v43);
          v47 = content_buf_usedc;
          v38 += chunkedb;
          v5 -= chunkedb;
          if ( v38 >= v41 )
          {
            chunked = 1;
            v6 = v42;
            v4 = content_buf_usedc;
            goto LABEL_33;
          }
LABEL_81:
          v40 = v47;
        }
        if ( (_DWORD)v3 )
          goto LABEL_86;
        v48 = buf[v38];
        if ( v48 == 13 )
        {
          if ( ++v38 >= v41 )
          {
            v4 = v40;
            v6 = v42;
            v3 = 0LL;
            goto LABEL_110;
          }
          v49 = v38;
          if ( buf[v38] != 10 )
            goto LABEL_88;
        }
        else if ( v48 != 10 )
        {
LABEL_86:
          if ( v38 < v41 )
          {
            v49 = v38;
LABEL_88:
            v50 = *_ctype_b_loc();
            while ( 1 )
            {
              v51 = (int)v49;
              v52 = v42[v49];
              if ( (v50[v52] & 0x1000) == 0 || (unsigned int)v3 > 0x1E )
                break;
              ++v49;
              chunksize_buf[v3] = v52;
              chunksize_buf[(unsigned int)(v3 + 1)] = 0;
              if ( v41 <= (int)v49 )
              {
                v4 = v40;
                v3 = (unsigned int)(v3 + 1);
                v6 = v42;
                goto LABEL_110;
              }
              v3 = (unsigned int)(v3 + 1);
            }
            if ( (int)v49 < v41 )
            {
              while ( 1 )
              {
                v38 = v51;
                if ( (_BYTE)v52 == 10 || (_BYTE)v52 == 13 )
                  break;
                if ( v41 <= (int)++v51 )
                  goto LABEL_109;
                LOBYTE(v52) = v42[v51];
              }
              if ( (int)v51 < v41 )
              {
                if ( (_BYTE)v52 != 13 )
                {
LABEL_101:
                  v47 = v40;
                  if ( (_BYTE)v52 != 10 )
                    goto LABEL_81;
                  if ( (_DWORD)v3 )
                  {
                    v53 = chunksize_buf;
                    v54 = &chunksize_buf[(unsigned int)(v3 - 1) + 1];
                    v55 = 0;
                    do
                    {
                      while ( 1 )
                      {
                        v56 = *v53;
                        v57 = 16 * v55;
                        if ( (unsigned __int8)(*v53 - 48) > 9u )
                          break;
                        ++v53;
                        v55 = v57 + v56 - 48;
                        if ( v54 == v53 )
                          goto LABEL_107;
                      }
                      ++v53;
                      v55 = v57 + (char)(v56 | 0x20) - 87;
                    }
                    while ( v54 != v53 );
LABEL_107:
                    chunksize_buf[0] = 0;
                    ++v38;
                    if ( v55 )
                    {
                      v3 = 0LL;
                      v5 = v55;
                      goto LABEL_71;
                    }
                  }
                  v4 = v40;
                  goto end_of_stream;
                }
                v38 = v51 + 1;
                if ( (int)v51 + 1 < v41 )
                {
                  LOBYTE(v52) = buf[v38];
                  goto LABEL_101;
                }
              }
            }
LABEL_109:
            v4 = v40;
            v6 = v42;
            goto LABEL_110;
          }
          v4 = v40;
          v6 = v42;
          v3 = (unsigned int)v3;
LABEL_110:
          chunked = 1;
          goto LABEL_33;
        }
        ++v38;
        goto LABEL_86;
      }
      v8 = v7 + header_buf_used;
      if ( v7 + header_buf_used > header_buf_len )
      {
        v9 = (char *)realloc(header_buf, v8);
        v8 = v7 + header_buf_used;
        if ( !v9 )
        {
          free(header_buf);
          free(content_buf);
          content_buf = 0LL;
          *size = -1;
          return content_buf;
        }
        header_buf_len = v7 + header_buf_used;
        header_buf = v9;
      }
      content_buf_used = v8;
      memcpy(&header_buf[header_buf_used], v6, v7);
      v10 = content_buf_used;
      v11 = 0;
      v12 = content_buf_used - 1;
      if ( content_buf_used - 1 > 0 )
        break;
LABEL_21:
      header_buf_used = content_buf_used;
    }
    while ( 1 )
    {
LABEL_12:
      v13 = v11 + 1;
      v14 = header_buf[v11];
      if ( v14 != 13 )
      {
LABEL_13:
        if ( v14 == 10 )
        {
          v11 += 2;
          if ( header_buf[v13] == 10 )
            break;
          goto LABEL_20;
        }
        goto LABEL_14;
      }
      while ( 1 )
      {
        v16 = v11 + 2;
        if ( header_buf[v13] != 10 )
        {
          if ( v12 <= v16 )
            goto LABEL_21;
          v11 += 2;
          goto LABEL_12;
        }
        v13 = v11 + 3;
        if ( content_buf_used > v16 && header_buf[v16] == 13 )
          break;
LABEL_14:
        if ( v12 <= v13 )
          goto LABEL_21;
        v11 = v13;
        v15 = v13++;
        v14 = header_buf[v15];
        if ( v14 != 13 )
          goto LABEL_13;
      }
      v11 += 4;
      if ( content_buf_used > v13 && header_buf[v13] == 10 )
        break;
LABEL_20:
      if ( v12 <= v11 )
        goto LABEL_21;
    }
    content_buf_useda = v4;
    v22 = 0;
    v23 = (size_t)header_buf;
    header_buf_useda = v3;
    v24 = 0;
    v25 = 0LL;
    v26 = v10;
    v77 = v5;
    v27 = v13;
    v28 = 0;
    endofheaders = v11;
    dest = v6;
    while ( 2 )
    {
      while ( 1 )
      {
        v29 = v28 + 1;
        v30 = (_BYTE *)(v23 + v28);
        v31 = *v30;
        if ( (int)v25 <= 0 || v24 > (int)v25 )
          break;
        if ( v31 == 58 )
        {
          v60 = (_BYTE *)(v23 + v28 + 1);
          v22 = v28;
          while ( 1 )
          {
            v61 = v22++;
            if ( *v60 != 32 && *v60 != 9 )
              break;
            ++v60;
            if ( v27 <= v22 )
            {
              v22 = v61 + 2;
              break;
            }
          }
          v24 = v28;
          v28 = v22;
          goto LABEL_48;
        }
        if ( v31 == 13 || v31 == 10 )
          goto LABEL_61;
LABEL_47:
        ++v28;
LABEL_48:
        if ( v27 <= v28 )
          goto LABEL_68;
      }
      if ( v31 != 13 && v31 != 10 )
        goto LABEL_47;
      if ( !(_DWORD)v25 && status_code )
      {
        if ( v28 > 0 )
        {
          v32 = (const char *)(v23 + 1);
          v79 = v23;
          valuestart = v27;
          v33 = v23 + (unsigned int)(v28 - 1) + 2;
          v34 = v32;
          do
          {
            while ( *(v34 - 1) != 32 )
            {
              if ( (const char *)v33 == ++v34 )
                goto LABEL_60;
            }
            if ( *status_code >= 0 )
              break;
            v35 = v34++;
            *status_code = strtol(v35, 0LL, 10);
          }
          while ( (const char *)v33 != v34 );
LABEL_60:
          v23 = v79;
          v27 = valuestart;
        }
LABEL_61:
        if ( v28 < v26 )
          goto LABEL_62;
LABEL_127:
        v22 = 0;
        v24 = v28;
        v25 = v28;
        goto LABEL_47;
      }
      if ( v24 <= (int)v25 )
        goto LABEL_61;
      valuestarta = v22;
      if ( v24 >= v22 )
        goto LABEL_61;
      v80 = v24 - (int)v25;
      if ( !strncasecmp((const char *)(v23 + v25), "content-length", v80) )
      {
        content_length = strtol((const char *)(v23 + valuestarta), 0LL, 10);
        goto LABEL_61;
      }
      if ( strncasecmp((const char *)(v23 + v25), "transfer-encoding", v80) )
        goto LABEL_61;
      v58 = strncasecmp((const char *)(v23 + valuestarta), "chunked", 7uLL) == 0;
      v59 = 1;
      if ( !v58 )
        v59 = chunked;
      chunked = v59;
      if ( v28 >= v26 )
        goto LABEL_127;
LABEL_62:
      v36 = v30;
      while ( 1 )
      {
        v25 = v28;
        v28 = v29;
        if ( *v36 != 13 && *v36 != 10 )
          break;
        ++v36;
        if ( v26 == v29 )
        {
          v28 = v25 + 2;
          v22 = 0;
          v24 = v26;
          v25 = v26;
          goto LABEL_48;
        }
        ++v29;
      }
      v22 = 0;
      v24 = v25;
      if ( v27 > v29 )
        continue;
      break;
    }
LABEL_68:
    v37 = v26;
    v6 = dest;
    v4 = content_buf_useda;
    v3 = header_buf_useda;
    header_buf_used = v37;
    v17 = v37 - endofheaders;
    v5 = v77;
    v7 = v37 - endofheaders;
    memcpy(dest, &header_buf[endofheaders], (int)(v37 - endofheaders));
    if ( !chunked )
      goto LABEL_23;
    if ( v17 > 0 )
      goto LABEL_70;
LABEL_33:
    ;
  }
  while ( content_length <= 0 || v4 < content_length );
end_of_stream:
  free(header_buf);
  *size = v4;
  if ( !v4 )
  {
    free(content_buf);
    return 0LL;
  }
  return content_buf;
}
