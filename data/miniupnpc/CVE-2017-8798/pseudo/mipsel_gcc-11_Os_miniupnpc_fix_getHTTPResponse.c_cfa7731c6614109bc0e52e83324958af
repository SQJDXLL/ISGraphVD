char *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v3; // $s0
  char *v4; // $v0
  char *v5; // $a0
  char *v6; // $s1
  unsigned int v7; // $s4
  size_t v8; // $s3
  int v9; // $s2
  int v10; // $fp
  signed int v11; // $s5
  int v12; // $v0
  int v13; // $s6
  unsigned int v14; // $v0
  char *v15; // $v0
  int v16; // $v1
  signed int v17; // $v1
  int v18; // $a3
  int v19; // $a2
  int v20; // $v0
  int v21; // $s7
  signed int v22; // $s6
  int v23; // $a2
  int v24; // $v0
  int v25; // $a0
  signed int v26; // $a0
  int v27; // $a1
  const char *v28; // $a0
  _BOOL4 v29; // $a0
  _BOOL4 v30; // $a0
  int v31; // $v0
  const char *v32; // $a0
  int v33; // $v0
  int v34; // $v0
  int v35; // $v0
  int v36; // $v1
  unsigned int v37; // $a2
  char *v38; // $v0
  int v39; // $v0
  _BOOL4 v40; // $v0
  bool v41; // dc
  char *v42; // $a0
  const unsigned __int16 **v43; // $v0
  int v44; // $a1
  int v45; // $v0
  int v46; // $v0
  int v47; // $a1
  unsigned int v48; // $t0
  int v49; // $v0
  int v50; // $t0
  int v51; // $t0
  unsigned int v52; // $t1
  char *v53; // $v0
  unsigned int v54; // $s7
  char *v55; // $s6
  unsigned int chunksize_buf_index; // [sp+20h] [-868h]
  unsigned int header_buf_used; // [sp+30h] [-858h]
  signed int header_buf_useda; // [sp+30h] [-858h]
  unsigned int chunksize; // [sp+34h] [-854h]
  unsigned int chunksizea; // [sp+34h] [-854h]
  unsigned int chunksizeb; // [sp+34h] [-854h]
  int chunked; // [sp+38h] [-850h]
  unsigned int header_buf_len; // [sp+3Ch] [-84Ch]
  char *v67; // [sp+40h] [-848h] BYREF
  _DWORD *v68; // [sp+44h] [-844h]
  char *v69; // [sp+48h] [-840h]
  char *v70; // [sp+4Ch] [-83Ch]
  void *(*v71)(int, int *, int *); // [sp+50h] [-838h]
  unsigned int chunksize_0; // [sp+54h] [-834h]
  unsigned int bytestocopy; // [sp+58h] [-830h]
  int valuestart; // [sp+5Ch] [-82Ch]
  char chunksize_buf[32]; // [sp+64h] [-824h] BYREF
  char buf[2048]; // [sp+84h] [-804h] BYREF
  int v77; // [sp+884h] [-4h]

  v68 = &_stack_chk_guard;
  if ( status_code )
    *status_code = -1;
  v3 = (char *)malloc(0x800u);
  if ( !v3 )
  {
    *size = -1;
    goto LABEL_5;
  }
  v4 = (char *)malloc(0x800u);
  if ( !v4 )
    goto LABEL_8;
  v6 = v3;
  v3 = v4;
  header_buf_len = 2048;
  chunksize_buf[0] = 0;
  v69 = "content-length";
  chunksize_buf_index = 0;
  v70 = "transfer-encoding";
  v7 = 0;
  v8 = 2048;
  header_buf_used = 0;
  chunksize = 0;
  v9 = -1;
  chunked = 0;
  v10 = 0;
  v71 = getHTTPResponse;
  do
  {
    do
    {
      v11 = receivedata(s, buf, 2048, 5000);
      if ( v11 <= 0 )
        goto end_of_stream;
      v12 = chunked;
      if ( v10 )
        goto LABEL_25;
      v13 = v11 + header_buf_used;
      v14 = header_buf_used;
      if ( header_buf_len < v11 + header_buf_used )
      {
        v15 = (char *)realloc(v6, v11 + header_buf_used);
        if ( !v15 )
        {
          free(v6);
LABEL_8:
          v5 = v3;
LABEL_9:
          free(v5);
          *size = -1;
          goto LABEL_10;
        }
        header_buf_len = v11 + header_buf_used;
        v6 = v15;
        v14 = header_buf_used;
      }
      memcpy(&v6[v14], buf, v11);
      v16 = 0;
      v10 = 0;
      while ( v16 < v13 - 1 )
      {
        if ( v10 )
        {
          v17 = v10 - 1;
          goto LABEL_22;
        }
        v23 = v6[v16];
        v24 = v16 + 1;
        if ( v23 == 13 )
        {
          if ( v6[v24] == 10 )
          {
            v24 = v16 + 2;
            if ( v16 + 2 < v13 && v6[v24] == 13 )
            {
              v24 = v16 + 3;
              if ( v16 + 3 < v13 && v6[v24] == 10 )
                v10 = v16 + 4;
            }
          }
        }
        else if ( v23 == 10 )
        {
          if ( v6[v24] == 10 )
            v10 = v16 + 2;
        }
        else
        {
          v24 = v16;
        }
        v16 = v24 + 1;
      }
      header_buf_used += v11;
    }
    while ( !v10 );
    v17 = v10 - 1;
LABEL_22:
    header_buf_useda = v17;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v67 = (char *)v71 + (__int16)"chunked";
    while ( v21 < header_buf_useda )
    {
      v25 = v6[v21];
      if ( v20 <= 0 )
      {
        if ( v25 != 13 && v25 != 10 )
          goto LABEL_49;
        if ( !v20 )
        {
          v28 = v6 + 1;
          if ( status_code )
          {
            while ( v28 - v6 - 1 < v21 )
            {
              if ( *(v28 - 1) == 32 )
              {
                if ( *status_code >= 0 )
                  goto LABEL_65;
                chunksize_0 = (unsigned int)v28;
                v33 = atoi(v28);
                v28 = (const char *)chunksize_0;
                *status_code = v33;
              }
              ++v28;
            }
            goto LABEL_65;
          }
        }
        v29 = v20 < v19;
      }
      else
      {
        if ( v20 < v19 )
        {
          if ( v25 == 13 )
          {
            v30 = v19 < v18;
LABEL_57:
            valuestart = v18;
            if ( v30 )
            {
              bytestocopy = v19 - v20;
              chunksize_0 = (unsigned int)&v6[v20];
              v31 = strncasecmp(&v6[v20], v69, v19 - v20);
              v32 = (const char *)chunksize_0;
              if ( v31 )
              {
                chunksize_0 = valuestart;
                if ( !strncasecmp(v32, v70, bytestocopy) )
                {
                  v35 = strncasecmp(&v6[chunksize_0], v67, 7u);
                  v36 = chunked;
                  if ( !v35 )
                    v36 = 1;
                  chunked = v36;
                }
              }
              else
              {
                v9 = atoi(&v6[valuestart]);
              }
            }
            goto LABEL_65;
          }
        }
        else
        {
          if ( v25 == 58 )
          {
            v26 = v21;
            do
            {
              v27 = v6[v26 + 1];
              if ( v27 != 32 && v27 != 9 )
                break;
              ++v26;
            }
            while ( v26 < header_buf_useda );
            v19 = v21;
            v18 = v26 + 1;
            v21 = v26;
            goto LABEL_49;
          }
          if ( v25 == 13 )
            goto LABEL_65;
        }
        v41 = v25 != 10;
        v29 = v20 < v19;
        if ( v41 )
          goto LABEL_49;
      }
      if ( v29 )
      {
        v30 = v19 < v18;
        goto LABEL_57;
      }
LABEL_65:
      while ( 1 )
      {
        v18 = 0;
        if ( v21 >= v13 )
          break;
        v34 = v6[v21];
        if ( v34 != 13 && v34 != 10 )
          break;
        ++v21;
      }
      v19 = v21;
      v20 = v21;
LABEL_49:
      ++v21;
    }
    v11 = v13 - v10;
    memcpy(buf, &v6[v10], v13 - v10);
    header_buf_used = v13;
    v12 = chunked;
LABEL_25:
    if ( v12 )
    {
      v22 = 0;
      v67 = chunksize_buf;
LABEL_111:
      v40 = v22 < v11;
      while ( 1 )
      {
LABEL_112:
        v48 = chunksize;
        if ( !v40 )
          goto LABEL_113;
        v37 = v11 - v22;
        if ( chunksize )
        {
LABEL_100:
          if ( v48 < v37 )
            v37 = v48;
          v52 = v7 + v37;
          if ( v8 < v7 + v37 )
          {
            v8 = v7 + v37;
            if ( v9 >= 0 && v9 >= v52 )
              v8 = v9;
            bytestocopy = v37;
            chunksize_0 = v48;
            chunksizea = v7 + v37;
            v53 = (char *)realloc(v3, v8);
            v52 = chunksizea;
            v48 = chunksize_0;
            v37 = bytestocopy;
            if ( !v53 )
              goto LABEL_107;
            v3 = v53;
          }
          bytestocopy = v48;
          chunksize_0 = v52;
          chunksizeb = v37;
          memcpy(&v3[v7], &buf[v22], v37);
          v22 += chunksizeb;
          chunksize = bytestocopy - chunksizeb;
          v7 = chunksize_0;
          goto LABEL_111;
        }
        v38 = v67;
        if ( !chunksize_buf_index )
        {
          v39 = v22 + 0x848;
          if ( *((_BYTE *)&v67 + v22 + 0x44) == 13 )
          {
            v40 = ++v22 < v11;
            if ( v22 >= v11 )
              continue;
            v39 = v22 + 0x848;
          }
          v41 = *((_BYTE *)&v67 + v39 - 2052) != 10;
          v38 = v67;
          if ( !v41 )
            ++v22;
        }
        v42 = &v38[chunksize_buf_index];
        while ( 1 )
        {
          v40 = v22 < v11;
          chunksize_0 = (unsigned int)v42;
          if ( v22 >= v11 )
            break;
          v43 = _ctype_b_loc();
          v44 = buf[v22];
          if ( ((*v43)[v44] & 0x1000) == 0 || (v42 = (char *)(chunksize_0 + 1), chunksize_buf_index >= 0x1F) )
          {
            while ( v22 < v11 )
            {
              v45 = buf[v22];
              if ( v45 == 13 || v45 == 10 )
              {
                v46 = v22 + 0x848;
                if ( *((_BYTE *)&v67 + v22 + 0x44) == 13 )
                {
                  v46 = ++v22 + 0x848;
                  if ( v22 >= v11 )
                    goto LABEL_111;
                }
                v41 = *((_BYTE *)&v67 + v46 - 2052) != 10;
                v40 = v22 < v11;
                if ( v41 )
                  goto LABEL_112;
                v47 = 0;
                v48 = 0;
                while ( chunksize_buf_index != v47 )
                {
                  v49 = v67[v47];
                  v50 = 16 * v48;
                  if ( (unsigned __int8)(v49 - 0x30) >= 0xAu )
                  {
                    v49 |= 0x20u;
                    v51 = v50 - 87;
                  }
                  else
                  {
                    v51 = v50 - 48;
                  }
                  v48 = v49 + v51;
                  ++v47;
                }
                chunksize_buf[0] = 0;
                ++v22;
                if ( v48 )
                {
                  chunksize_buf_index = 0;
                  v37 = v11 - v22;
                  goto LABEL_100;
                }
                goto end_of_stream;
              }
              ++v22;
            }
            goto LABEL_111;
          }
          *(_BYTE *)chunksize_0 = v44;
          ++chunksize_buf_index;
          *v42 = 0;
          ++v22;
        }
      }
    }
    if ( v9 <= 0 )
    {
LABEL_120:
      v54 = v11 + v7;
    }
    else
    {
      v54 = v11 + v7;
      if ( v9 < v11 + v7 )
      {
        v11 = v9 - v7;
        goto LABEL_120;
      }
    }
    v55 = v3;
    if ( v8 < v54 )
    {
      v8 = v54;
      if ( v9 >= 0 && v9 >= v54 )
        v8 = v9;
      v55 = (char *)realloc(v3, v8);
      if ( !v55 )
      {
LABEL_107:
        free(v3);
        v5 = v6;
        goto LABEL_9;
      }
    }
    memcpy(&v55[v7], buf, v11);
    v7 = v54;
    v3 = v55;
LABEL_113:
    ;
  }
  while ( v9 <= 0 || v7 < v9 );
end_of_stream:
  free(v6);
  *size = v7;
  if ( !v7 )
  {
    free(v3);
LABEL_10:
    v3 = 0;
  }
LABEL_5:
  if ( v77 != *v68 )
    _stack_chk_fail();
  return v3;
}
