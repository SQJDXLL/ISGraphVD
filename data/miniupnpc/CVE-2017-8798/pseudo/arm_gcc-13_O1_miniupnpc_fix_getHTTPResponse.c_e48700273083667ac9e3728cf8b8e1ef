void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  char *v4; // r9
  int v5; // r10
  unsigned int v6; // r6
  int *v7; // r6
  signed int v8; // r3
  int *v9; // r5
  _BOOL4 v10; // r2
  int v11; // r2
  char *v12; // r10
  signed int v13; // r7
  signed int v14; // r3
  signed int v15; // r4
  signed int v16; // r5
  int *v17; // r11
  char *v18; // r2
  char *v19; // r0
  int v20; // r1
  int v21; // t1
  bool v22; // zf
  int v23; // r2
  bool v24; // zf
  bool v25; // cc
  int v26; // r2
  bool v27; // zf
  char *v28; // r2
  int v29; // r3
  int v30; // t1
  bool v31; // zf
  _BOOL4 v32; // r2
  bool v33; // cc
  const char *v34; // r6
  size_t v35; // r7
  int v36; // r0
  int v37; // r3
  const char *v38; // r5
  int v39; // t1
  signed int v40; // r7
  signed int v41; // r4
  int v42; // r9
  unsigned int v43; // r5
  unsigned int v44; // r10
  const unsigned __int16 *v45; // r8
  int v46; // r0
  _BYTE *v47; // r3
  unsigned int v48; // lr
  char v49; // r1
  int v50; // t1
  int v51; // r2
  int v52; // r3
  int v53; // t1
  bool v54; // zf
  unsigned int v55; // r8
  unsigned __int8 *v56; // r2
  unsigned __int8 *v57; // r5
  int v58; // r3
  int v59; // r1
  int v60; // t1
  void *v61; // r0
  size_t v62; // r11
  int *v63; // r9
  int *v64; // r6
  size_t v65; // r5
  unsigned int v66; // r7
  int *v67; // r6
  char *v68; // r4
  int *v69; // r6
  int v70; // r3
  int v72; // r3
  _BOOL4 v73; // r3
  int v74; // r0
  int v75; // r8
  char *v76; // r0
  int v77; // [sp+0h] [bp-898h] BYREF
  int endofheaders; // [sp+8h] [bp-890h]
  int content_length; // [sp+Ch] [bp-88Ch]
  unsigned int content_buf_used; // [sp+10h] [bp-888h]
  unsigned int content_buf_len; // [sp+14h] [bp-884h]
  int sa; // [sp+18h] [bp-880h]
  int chunked; // [sp+1Ch] [bp-87Ch]
  int v84; // [sp+20h] [bp-878h]
  unsigned int header_buf_len; // [sp+24h] [bp-874h]
  unsigned int chunksize_buf_index; // [sp+28h] [bp-870h]
  char *header_buf; // [sp+2Ch] [bp-86Ch]
  unsigned int header_buf_used; // [sp+30h] [bp-868h]
  int *status_codea; // [sp+34h] [bp-864h]
  unsigned int v90; // [sp+38h] [bp-860h]
  int *sizea; // [sp+3Ch] [bp-85Ch]
  char *s2; // [sp+40h] [bp-858h]
  int *v93; // [sp+44h] [bp-854h]
  char chunksize_buf[32]; // [sp+4Ch] [bp-84Ch] BYREF
  char buf[2048]; // [sp+6Ch] [bp-82Ch] BYREF

  v84 = s;
  sizea = status_code;
  if ( status_code )
    *status_code = -1;
  v4 = (char *)malloc(0x800u);
  if ( !v4 )
  {
    *size = -1;
    return 0;
  }
  content_length = (int)malloc(0x800u);
  if ( !content_length )
  {
    free(v4);
    *size = -1;
    return (void *)content_length;
  }
  chunksize_buf[0] = 0;
  sa = 0;
  chunked = 2048;
  v5 = 0;
  header_buf = (_BYTE *)&loc_800;
  content_buf_len = -1;
  header_buf_len = 0;
  content_buf_used = 0;
  endofheaders = (int)buf;
  s2 = "content-length";
  header_buf_used = 0;
  v93 = size;
  v6 = 0;
  do
  {
    while ( 1 )
    {
      v74 = receivedata(v84, endofheaders, 2048, 5000, 0);
      v40 = v74;
      if ( v74 <= 0 )
      {
        v69 = v93;
        goto end_of_stream;
      }
      if ( content_buf_used )
        break;
      v75 = v74 + v5;
      if ( v74 + v5 > (unsigned int)header_buf )
      {
        v76 = (char *)realloc(v4, v74 + v5);
        if ( !v76 )
        {
          v7 = v93;
          free(v4);
          free((void *)content_length);
          *v7 = -1;
          return 0;
        }
        header_buf = (char *)(v40 + v5);
        v4 = v76;
      }
      memcpy(&v4[v5], (const void *)endofheaders, v40);
      if ( v75 <= 1 )
      {
        v5 += v40;
      }
      else
      {
        v8 = content_buf_used;
        do
        {
          v11 = (unsigned __int8)v4[v8];
          if ( v11 == 13 )
          {
            if ( v4[v8 + 1] == 10 )
            {
              if ( v8 + 2 >= v75 )
              {
                v8 += 2;
                v9 = (int *)content_buf_used;
              }
              else if ( v4[v8 + 2] == 13 )
              {
                if ( v8 + 3 >= v75 )
                {
                  v8 += 3;
                  v9 = (int *)content_buf_used;
                }
                else if ( v4[v8 + 3] == 10 )
                {
                  v9 = (int *)(v8 + 4);
                  v8 += 3;
                }
                else
                {
                  v8 += 3;
                  v9 = (int *)content_buf_used;
                }
              }
              else
              {
                v8 += 2;
                v9 = (int *)content_buf_used;
              }
            }
            else
            {
              ++v8;
              v9 = (int *)content_buf_used;
            }
          }
          else if ( v11 == 10 )
          {
            if ( v4[v8 + 1] == 10 )
            {
              v9 = (int *)(v8 + 2);
              ++v8;
            }
            else
            {
              ++v8;
              v9 = (int *)content_buf_used;
            }
          }
          else
          {
            v9 = (int *)content_buf_used;
          }
          ++v8;
          v10 = v9 == 0;
          if ( v8 >= v75 - 1 )
            v10 = 0;
        }
        while ( v10 );
        if ( v9 )
        {
          v12 = (char *)v9 + -0x1;
          if ( (int)((int)v9 + -0x1) <= 0 )
            goto LABEL_86;
          v13 = content_buf_used;
          v14 = content_buf_used;
          v15 = content_buf_used;
          chunksize_buf_index = content_buf_used;
          status_codea = v9;
          v90 = v6;
          v16 = content_buf_used;
          v17 = sizea;
          while ( 1 )
          {
            v25 = v14 <= v13;
            if ( v14 >= v13 )
              v25 = v14 <= 0;
            if ( v25 )
            {
              v23 = (unsigned __int8)v4[v15];
              v24 = v23 == 10;
              if ( v23 != 10 )
                v24 = v23 == 13;
              if ( !v24 )
                goto LABEL_47;
              v32 = v14 == 0;
              if ( !v17 )
                v32 = 0;
              if ( v32 )
              {
                if ( v15 > 0 )
                {
                  v38 = v4;
                  while ( 1 )
                  {
                    v39 = *(unsigned __int8 *)v38++;
                    if ( v39 == 32 )
                    {
                      if ( *v17 >= 0 )
                        goto LABEL_56;
                      *v17 = strtol(v38, 0u, 10);
                    }
                    if ( v38 == &v4[v15] )
                      goto LABEL_56;
                  }
                }
LABEL_57:
                v28 = &v4[v15 - 1];
                do
                {
                  v30 = (unsigned __int8)*++v28;
                  v29 = v30;
                  v31 = v30 == 10;
                  if ( v30 != 10 )
                    v31 = v29 == 13;
                  if ( !v31 )
                  {
                    v16 = chunksize_buf_index;
                    v13 = v15;
                    v14 = v15;
                    goto LABEL_47;
                  }
                  ++v15;
                }
                while ( v15 != v75 );
                v16 = chunksize_buf_index;
                v13 = v75;
                v14 = v75;
                v15 = v75;
                goto LABEL_47;
              }
              v33 = v14 < v13;
              if ( v14 < v13 )
                v33 = v13 < v16;
              if ( v33 )
              {
                v34 = &v4[v14];
                v35 = v13 - v14;
                if ( !strncasecmp(&v4[v14], s2, v35) )
                {
                  content_buf_len = strtol(&v4[v16], 0u, 10);
                }
                else if ( !strncasecmp(v34, "transfer-encoding", v35) )
                {
                  v36 = strncasecmp(&v4[v16], "chunked", 7u);
                  v37 = header_buf_len;
                  if ( !v36 )
                    v37 = 1;
                  header_buf_len = v37;
                }
              }
            }
            else
            {
              v19 = &v4[v15];
              v26 = (unsigned __int8)v4[v15];
              if ( v26 == 58 )
              {
                if ( (int)v12 <= v15 )
                {
                  v18 = (char *)v15;
                }
                else
                {
                  v18 = (char *)v15;
                  while ( 1 )
                  {
                    v21 = (unsigned __int8)*++v19;
                    v20 = v21;
                    v22 = v21 == 9;
                    if ( v21 != 9 )
                      v22 = v20 == 32;
                    if ( !v22 )
                      break;
                    if ( ++v18 == (char *)status_codea + -0x1 )
                    {
                      v18 = (char *)status_codea + -0x1;
                      break;
                    }
                  }
                }
                v16 = (signed int)(v18 + 1);
                v13 = v15;
                v15 = (signed int)v18;
                goto LABEL_47;
              }
              v27 = v26 == 10;
              if ( v26 != 10 )
                v27 = v26 == 13;
              if ( !v27 )
                goto LABEL_47;
            }
LABEL_56:
            if ( v75 > v15 )
              goto LABEL_57;
            v16 = content_buf_used;
            v13 = v15;
            v14 = v15;
LABEL_47:
            if ( ++v15 >= (int)v12 )
            {
              v9 = status_codea;
              v6 = v90;
LABEL_86:
              v40 = v75 - (_DWORD)v9;
              memcpy((void *)endofheaders, (char *)v9 + (_DWORD)v4, v75 - (_DWORD)v9);
              if ( !header_buf_len )
              {
                v5 = v75;
                content_buf_used = (unsigned int)v9;
                goto LABEL_158;
              }
              if ( v40 <= 0 )
              {
                v5 = v75;
                content_buf_used = (unsigned int)v9;
                goto LABEL_168;
              }
              v5 = v75;
              content_buf_used = (unsigned int)v9;
LABEL_91:
              v41 = 0;
              chunksize_buf_index = (unsigned int)&chunksize_buf[4];
              status_codea = (int *)v4;
              v42 = sa;
              v43 = header_buf_used;
              v90 = v5;
              v44 = chunked;
              while ( 2 )
              {
                if ( v6 )
                {
LABEL_129:
                  v62 = v40 - v41;
                  if ( v40 - v41 >= v6 )
                    v62 = v6;
                  v55 = v62 + v42;
                  if ( v62 + v42 > v44 )
                  {
                    if ( (content_buf_len & 0x80000000) == 0 )
                    {
                      if ( content_buf_len < v55 )
                        v44 = v62 + v42;
                      else
                        v44 = content_buf_len;
                    }
                    else
                    {
                      v44 = v62 + v42;
                    }
                    v61 = realloc((void *)content_length, v44);
                    if ( !v61 )
                    {
                      v63 = status_codea;
                      v64 = v93;
                      free((void *)content_length);
                      free(v63);
                      *v64 = -1;
                      return 0;
                    }
                    content_length = (int)v61;
                  }
                  memcpy((void *)(content_length + v42), (const void *)(endofheaders + v41), v62);
                  v41 += v62;
                  v6 -= v62;
                  if ( v40 <= v41 )
                  {
                    v4 = (char *)status_codea;
                    chunked = v44;
                    header_buf_used = v43;
                    v5 = v90;
                    sa = v55;
                    goto LABEL_168;
                  }
                  goto LABEL_127;
                }
                if ( v43 )
                {
LABEL_98:
                  if ( v40 <= v41 )
                  {
                    chunked = v44;
                    sa = v42;
                    v4 = (char *)status_codea;
                    header_buf_used = v43;
                    v5 = v90;
                    goto LABEL_168;
                  }
                }
                else
                {
                  if ( *((_BYTE *)&v77 + v41 + 0x6C) == 13 )
                    ++v41;
                  if ( v41 >= v40 )
                  {
                    chunked = v44;
                    sa = v42;
                    v4 = (char *)status_codea;
                    header_buf_used = 0;
                    v5 = v90;
                    goto LABEL_168;
                  }
                  if ( *((_BYTE *)&v77 + v41 + 0x6C) == 10 )
                  {
                    ++v41;
                    goto LABEL_98;
                  }
                }
                v45 = *_ctype_b_loc();
                v46 = endofheaders + v41 - 1;
                v47 = (_BYTE *)(chunksize_buf_index - 4 + v43);
                v48 = v40 + v43 - v41;
                while ( 1 )
                {
                  v50 = *(unsigned __int8 *)++v46;
                  v49 = v50;
                  if ( ((v43 <= 0x1E) & (v45[v50] >> 0xC)) == 0 )
                    break;
                  ++v43;
                  *v47 = v49;
                  *++v47 = 0;
                  ++v41;
                  if ( v43 == v48 )
                  {
                    v43 = v48;
                    break;
                  }
                }
                if ( v41 >= v40 )
                {
                  chunked = v44;
                  sa = v42;
                  v4 = (char *)status_codea;
                  header_buf_used = v43;
                  v5 = v90;
                  goto LABEL_168;
                }
                v51 = endofheaders + v41 - 1;
                while ( 1 )
                {
                  v53 = *(unsigned __int8 *)++v51;
                  v52 = v53;
                  v54 = v53 == 10;
                  if ( v53 != 10 )
                    v54 = v52 == 13;
                  if ( v54 )
                    break;
                  if ( v40 == ++v41 )
                  {
                    chunked = v44;
                    sa = v42;
                    v4 = (char *)status_codea;
                    header_buf_used = v43;
                    v5 = v90;
                    goto LABEL_168;
                  }
                }
                if ( v40 <= v41 )
                {
                  chunked = v44;
                  sa = v42;
                  v4 = (char *)status_codea;
                  header_buf_used = v43;
                  v5 = v90;
                  goto LABEL_168;
                }
                if ( *((_BYTE *)&v77 + v41 + 0x6C) == 13 && v40 <= ++v41 )
                {
                  chunked = v44;
                  sa = v42;
                  v4 = (char *)status_codea;
                  header_buf_used = v43;
                  v5 = v90;
                  goto LABEL_168;
                }
                if ( *((_BYTE *)&v77 + v41 + 0x6C) == 10 )
                {
                  if ( !v43 )
                  {
                    sa = v42;
                    v4 = (char *)status_codea;
                    v69 = v93;
                    goto end_of_stream;
                  }
                  v56 = (unsigned __int8 *)(chunksize_buf_index - 4);
                  v57 = (unsigned __int8 *)(v43 + chunksize_buf_index - 4);
                  v58 = 0;
                  do
                  {
                    v60 = *v56++;
                    v59 = v60;
                    if ( (unsigned int)(v60 - 0x30) > 9 )
                      v58 = (v59 | 0x20) + 16 * v58 - 0x57;
                    else
                      v58 = v59 + 16 * v58 - 0x30;
                  }
                  while ( v56 != v57 );
                  chunksize_buf[0] = 0;
                  ++v41;
                  if ( !v58 )
                  {
                    sa = v42;
                    v4 = (char *)status_codea;
                    v69 = v93;
                    goto end_of_stream;
                  }
                  v43 = 0;
                  v6 = v58;
                  goto LABEL_129;
                }
                v55 = v42;
LABEL_127:
                v42 = v55;
                continue;
              }
            }
          }
        }
        v5 += v40;
        content_buf_used = 0;
      }
    }
    if ( header_buf_len )
      goto LABEL_91;
LABEL_158:
    if ( (int)content_buf_len <= 0 )
    {
      v65 = v40;
      v66 = v40 + sa;
      if ( v66 <= chunked )
      {
        v68 = (char *)content_length;
        goto LABEL_167;
      }
      if ( content_buf_len )
      {
        chunked = v66;
        goto LABEL_166;
      }
    }
    else
    {
      if ( v40 + sa > content_buf_len )
        v40 = content_buf_len - sa;
      v65 = v40;
      v66 = sa + v40;
      if ( chunked >= v66 )
      {
        v68 = (char *)content_length;
        goto LABEL_167;
      }
    }
    v72 = content_buf_len;
    if ( content_buf_len < v66 )
      v72 = v66;
    chunked = v72;
LABEL_166:
    v68 = (char *)realloc((void *)content_length, chunked);
    if ( !v68 )
    {
      v67 = v93;
      free((void *)content_length);
      free(v4);
      *v67 = -1;
      return 0;
    }
LABEL_167:
    memcpy(&v68[sa], (const void *)endofheaders, v65);
    sa = v66;
    content_length = (int)v68;
LABEL_168:
    v73 = (int)content_buf_len > 0;
    if ( content_buf_len > sa )
      v73 = 0;
  }
  while ( !v73 );
  v69 = v93;
end_of_stream:
  free(v4);
  v70 = sa;
  *v69 = sa;
  if ( !v70 )
  {
    free((void *)content_length);
    return 0;
  }
  return (void *)content_length;
}
