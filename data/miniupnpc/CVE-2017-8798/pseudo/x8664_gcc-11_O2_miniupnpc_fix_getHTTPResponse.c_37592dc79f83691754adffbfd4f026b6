void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  __int64 v3; // rbx
  unsigned int v4; // ebp
  unsigned int v5; // r12d
  char *v6; // r13
  int v7; // r15d
  unsigned int v8; // r10d
  char *v9; // rax
  int v10; // r14d
  int v11; // edx
  char v12; // cl
  signed int v13; // eax
  signed int v14; // ecx
  int v15; // r8d
  unsigned int v16; // r14d
  unsigned int v17; // eax
  char *v18; // rax
  int v20; // r11d
  int v21; // edx
  size_t v22; // r12
  __int64 v23; // rsi
  int v24; // ebx
  int v25; // r15d
  int v26; // r13d
  int v27; // ebp
  _BYTE *v28; // r14
  char v29; // al
  __int64 v30; // r11
  const char *v31; // r12
  __int64 v32; // rbp
  const char *v33; // rdi
  _BYTE *v34; // rcx
  unsigned int v35; // r10d
  int v36; // r14d
  char *v37; // rax
  unsigned int v38; // r13d
  int v39; // ebp
  char *v40; // r15
  unsigned int v41; // ecx
  unsigned int v42; // r9d
  unsigned int v43; // eax
  char *v44; // rax
  unsigned int v45; // r9d
  char v46; // al
  __int64 v47; // rsi
  const unsigned __int16 *v48; // rdi
  __int64 v49; // rax
  __int64 v50; // rcx
  char *v51; // rcx
  char *v52; // rsi
  int v53; // r8d
  int v54; // eax
  int v55; // r8d
  bool v56; // zf
  int v57; // eax
  _BYTE *v58; // rax
  int v59; // ecx
  char *content_buf; // [rsp+8h] [rbp-8D0h]
  int chunked; // [rsp+10h] [rbp-8C8h]
  unsigned int chunkeda; // [rsp+10h] [rbp-8C8h]
  unsigned int chunkedb; // [rsp+10h] [rbp-8C8h]
  signed int content_buf_used; // [rsp+18h] [rbp-8C0h]
  unsigned int content_buf_useda; // [rsp+18h] [rbp-8C0h]
  signed int content_buf_usedb; // [rsp+18h] [rbp-8C0h]
  unsigned int content_buf_usedc; // [rsp+18h] [rbp-8C0h]
  unsigned int content_buf_usedd; // [rsp+18h] [rbp-8C0h]
  unsigned int content_buf_len; // [rsp+1Ch] [rbp-8BCh]
  char *header_buf; // [rsp+20h] [rbp-8B8h]
  int content_length; // [rsp+28h] [rbp-8B0h]
  unsigned int header_buf_used; // [rsp+2Ch] [rbp-8ACh]
  unsigned int header_buf_useda; // [rsp+2Ch] [rbp-8ACh]
  int endofheaders; // [rsp+30h] [rbp-8A8h]
  unsigned int v76; // [rsp+38h] [rbp-8A0h]
  char *dest; // [rsp+40h] [rbp-898h]
  size_t n; // [rsp+50h] [rbp-888h]
  size_t na; // [rsp+50h] [rbp-888h]
  unsigned int header_buf_len; // [rsp+58h] [rbp-880h]
  int valuestart; // [rsp+5Ch] [rbp-87Ch]
  char chunksize_buf[32]; // [rsp+70h] [rbp-868h] BYREF
  char buf[2048]; // [rsp+90h] [rbp-848h] BYREF
  unsigned __int64 v86; // [rsp+898h] [rbp-40h]

  v86 = __readfsqword(0x28u);
  if ( status_code )
    *status_code = -1;
  header_buf = (char *)malloc(0x800uLL);
  if ( !header_buf )
    goto LABEL_139;
  content_buf = (char *)malloc(0x800uLL);
  if ( !content_buf )
  {
    free(header_buf);
    *size = -1;
    return content_buf;
  }
  chunksize_buf[0] = 0;
  v3 = 0LL;
  v4 = 0;
  v5 = 0;
  content_buf_len = 2048;
  v6 = buf;
  header_buf_used = 0;
  header_buf_len = 2048;
  content_length = -1;
  chunked = 0;
  endofheaders = 0;
  do
  {
    while ( 1 )
    {
      v7 = receivedata((unsigned int)s, v6, 2048LL, 5000LL, 0LL);
      if ( v7 <= 0 )
        goto end_of_stream;
      if ( endofheaders )
      {
        v15 = v7;
        if ( !chunked )
        {
LABEL_23:
          v16 = v4 + v15;
          v17 = content_length;
          if ( content_length <= 0 )
          {
            if ( content_buf_len >= v16 )
              goto LABEL_32;
            if ( content_length )
            {
              content_buf_len = v4 + v15;
LABEL_30:
              v18 = (char *)realloc(content_buf, content_buf_len);
              if ( v18 )
              {
                content_buf = v18;
LABEL_32:
                memcpy(&content_buf[v4], v6, v7);
                chunked = 0;
                v4 = v16;
                goto LABEL_33;
              }
LABEL_138:
              free(content_buf);
              free(header_buf);
LABEL_139:
              content_buf = 0LL;
              *size = -1;
              return content_buf;
            }
            v17 = 0;
          }
          else
          {
            if ( content_length < v16 )
            {
              v16 = content_length;
              v7 = content_length - v4;
            }
            if ( content_buf_len >= v16 )
              goto LABEL_32;
          }
          if ( v16 >= v17 )
            v17 = v16;
          content_buf_len = v17;
          goto LABEL_30;
        }
LABEL_70:
        v36 = 0;
        v37 = v6;
        v38 = v4;
        v39 = v7;
        v40 = v37;
        while ( v5 )
        {
LABEL_71:
          v41 = v39 - v36;
          if ( v39 - v36 > v5 )
            v41 = v5;
          v42 = v41 + v38;
          if ( v41 + v38 > content_buf_len )
          {
            content_buf_usedc = v41;
            chunkeda = v41 + v38;
            v43 = content_length;
            if ( content_length < v42 )
              v43 = v41 + v38;
            if ( content_length < 0 )
              v43 = v41 + v38;
            content_buf_len = v43;
            v44 = (char *)realloc(content_buf, v43);
            v42 = chunkeda;
            v41 = content_buf_usedc;
            if ( !v44 )
              goto LABEL_138;
            content_buf = v44;
          }
          content_buf_usedd = v42;
          chunkedb = v41;
          memcpy(&content_buf[v38], &v40[v36], v41);
          v45 = content_buf_usedd;
          v36 += chunkedb;
          v5 -= chunkedb;
          if ( v36 >= v39 )
          {
            chunked = 1;
            v6 = v40;
            v4 = content_buf_usedd;
            goto LABEL_33;
          }
LABEL_81:
          v38 = v45;
        }
        if ( (_DWORD)v3 )
          goto LABEL_86;
        v46 = buf[v36];
        if ( v46 == 13 )
        {
          if ( ++v36 >= v39 )
          {
            v4 = v38;
            v6 = v40;
            v3 = 0LL;
            goto LABEL_110;
          }
          v47 = v36;
          if ( buf[v36] != 10 )
            goto LABEL_88;
        }
        else if ( v46 != 10 )
        {
LABEL_86:
          if ( v36 < v39 )
          {
            v47 = v36;
LABEL_88:
            v48 = *_ctype_b_loc();
            while ( 1 )
            {
              v49 = (int)v47;
              v50 = v40[v47];
              if ( (v48[v50] & 0x1000) == 0 || (unsigned int)v3 > 0x1E )
                break;
              ++v47;
              chunksize_buf[v3] = v50;
              chunksize_buf[(unsigned int)(v3 + 1)] = 0;
              if ( v39 <= (int)v47 )
              {
                v4 = v38;
                v3 = (unsigned int)(v3 + 1);
                v6 = v40;
                goto LABEL_110;
              }
              v3 = (unsigned int)(v3 + 1);
            }
            if ( (int)v47 < v39 )
            {
              while ( 1 )
              {
                v36 = v49;
                if ( (_BYTE)v50 == 10 || (_BYTE)v50 == 13 )
                  break;
                if ( v39 <= (int)++v49 )
                  goto LABEL_109;
                LOBYTE(v50) = v40[v49];
              }
              if ( (int)v49 < v39 )
              {
                if ( (_BYTE)v50 != 13 )
                {
LABEL_101:
                  v45 = v38;
                  if ( (_BYTE)v50 != 10 )
                    goto LABEL_81;
                  if ( (_DWORD)v3 )
                  {
                    v51 = chunksize_buf;
                    v52 = &chunksize_buf[(unsigned int)(v3 - 1) + 1];
                    v53 = 0;
                    do
                    {
                      while ( 1 )
                      {
                        v54 = *v51;
                        v55 = 16 * v53;
                        if ( (unsigned __int8)(*v51 - 48) > 9u )
                          break;
                        ++v51;
                        v53 = v55 + v54 - 48;
                        if ( v52 == v51 )
                          goto LABEL_107;
                      }
                      ++v51;
                      v53 = v55 + (char)(v54 | 0x20) - 87;
                    }
                    while ( v52 != v51 );
LABEL_107:
                    chunksize_buf[0] = 0;
                    ++v36;
                    if ( v53 )
                    {
                      v3 = 0LL;
                      v5 = v53;
                      goto LABEL_71;
                    }
                  }
                  v4 = v38;
                  goto end_of_stream;
                }
                v36 = v49 + 1;
                if ( (int)v49 + 1 < v39 )
                {
                  LOBYTE(v50) = buf[v36];
                  goto LABEL_101;
                }
              }
            }
LABEL_109:
            v4 = v38;
            v6 = v40;
            goto LABEL_110;
          }
          v4 = v38;
          v6 = v40;
          v3 = (unsigned int)v3;
LABEL_110:
          chunked = 1;
          goto LABEL_33;
        }
        ++v36;
        goto LABEL_86;
      }
      v8 = v7 + header_buf_used;
      if ( v7 + header_buf_used > header_buf_len )
      {
        v9 = (char *)realloc(header_buf, v8);
        v8 = v7 + header_buf_used;
        if ( !v9 )
        {
          free(header_buf);
          free(content_buf);
          content_buf = 0LL;
          *size = -1;
          return content_buf;
        }
        header_buf_len = v7 + header_buf_used;
        header_buf = v9;
      }
      content_buf_used = v8;
      v10 = 0;
      memcpy(&header_buf[header_buf_used], v6, v7);
      v11 = content_buf_used - 1;
      if ( content_buf_used - 1 > 0 )
        break;
LABEL_21:
      header_buf_used = content_buf_used;
    }
    while ( 1 )
    {
LABEL_12:
      v12 = header_buf[v10];
      v13 = v10 + 1;
      if ( v12 != 13 )
      {
LABEL_13:
        if ( v12 == 10 )
        {
          v10 += 2;
          if ( header_buf[v13] == 10 )
            break;
          goto LABEL_20;
        }
        goto LABEL_14;
      }
      while ( 1 )
      {
        v14 = v10 + 2;
        if ( header_buf[v13] != 10 )
        {
          if ( v11 <= v14 )
            goto LABEL_21;
          v10 += 2;
          goto LABEL_12;
        }
        v13 = v10 + 3;
        if ( content_buf_used > v14 && header_buf[v14] == 13 )
          break;
LABEL_14:
        if ( v11 <= v13 )
          goto LABEL_21;
        v10 = v13;
        v12 = header_buf[v13++];
        if ( v12 != 13 )
          goto LABEL_13;
      }
      v10 += 4;
      if ( content_buf_used > v13 && header_buf[v13] == 10 )
        break;
LABEL_20:
      if ( v11 <= v10 )
        goto LABEL_21;
    }
    header_buf_useda = v3;
    v20 = 0;
    v76 = v5;
    v21 = 0;
    v22 = (size_t)header_buf;
    v23 = 0LL;
    dest = v6;
    v24 = content_buf_used;
    v25 = 0;
    v26 = v10 - 1;
    content_buf_useda = v4;
    endofheaders = v10;
    while ( 2 )
    {
      while ( 1 )
      {
        v27 = v25 + 1;
        v28 = (_BYTE *)(v22 + v25);
        v29 = *v28;
        if ( (int)v23 <= 0 || v21 > (int)v23 )
          break;
        if ( v29 == 58 )
        {
          v58 = (_BYTE *)(v22 + v25 + 1);
          v20 = v25;
          while ( 1 )
          {
            v59 = v20++;
            if ( *v58 != 32 && *v58 != 9 )
              break;
            ++v58;
            if ( v26 <= v20 )
            {
              v20 = v59 + 2;
              break;
            }
          }
          v21 = v25;
          v25 = v20;
          goto LABEL_48;
        }
        if ( v29 == 13 || v29 == 10 )
          goto LABEL_61;
LABEL_47:
        v25 = v27;
LABEL_48:
        if ( v26 <= v25 )
          goto LABEL_68;
      }
      if ( v29 != 13 && v29 != 10 )
        goto LABEL_47;
      if ( !(_DWORD)v23 && status_code )
      {
        if ( v25 > 0 )
        {
          v30 = v22 + (unsigned int)(v25 - 1) + 2;
          n = v22;
          v31 = (const char *)(v22 + 1);
          v32 = v30;
          do
          {
            while ( *(v31 - 1) != 32 )
            {
              if ( (const char *)v32 == ++v31 )
                goto LABEL_60;
            }
            if ( *status_code >= 0 )
              break;
            v33 = v31++;
            *status_code = strtol(v33, 0LL, 10);
          }
          while ( (const char *)v32 != v31 );
LABEL_60:
          v22 = n;
          v27 = v25 + 1;
        }
LABEL_61:
        if ( v25 < v24 )
          goto LABEL_62;
LABEL_127:
        v20 = 0;
        v21 = v25;
        v23 = v25;
        goto LABEL_47;
      }
      if ( v21 <= (int)v23 )
        goto LABEL_61;
      valuestart = v20;
      if ( v21 >= v20 )
        goto LABEL_61;
      na = v21 - (int)v23;
      if ( !strncasecmp((const char *)(v22 + v23), "content-length", na) )
      {
        content_length = strtol((const char *)(v22 + valuestart), 0LL, 10);
        goto LABEL_61;
      }
      if ( strncasecmp((const char *)(v22 + v23), "transfer-encoding", na) )
        goto LABEL_61;
      v56 = strncasecmp((const char *)(v22 + valuestart), "chunked", 7uLL) == 0;
      v57 = 1;
      if ( !v56 )
        v57 = chunked;
      chunked = v57;
      if ( v25 >= v24 )
        goto LABEL_127;
LABEL_62:
      v34 = v28;
      while ( 1 )
      {
        v23 = v25;
        v25 = v27;
        if ( *v34 != 13 && *v34 != 10 )
          break;
        ++v34;
        if ( v24 == v27 )
        {
          v25 = v23 + 2;
          v20 = 0;
          v21 = v24;
          v23 = v24;
          goto LABEL_48;
        }
        ++v27;
      }
      v20 = 0;
      v21 = v23;
      if ( v26 > v27 )
        continue;
      break;
    }
LABEL_68:
    v35 = v24;
    v6 = dest;
    v4 = content_buf_useda;
    v3 = header_buf_useda;
    header_buf_used = v35;
    content_buf_usedb = v35 - endofheaders;
    v7 = v35 - endofheaders;
    v5 = v76;
    memcpy(dest, &header_buf[endofheaders], (int)(v35 - endofheaders));
    v15 = content_buf_usedb;
    if ( !chunked )
      goto LABEL_23;
    if ( content_buf_usedb > 0 )
      goto LABEL_70;
LABEL_33:
    ;
  }
  while ( content_length <= 0 || v4 < content_length );
end_of_stream:
  free(header_buf);
  *size = v4;
  if ( !v4 )
  {
    free(content_buf);
    return 0LL;
  }
  return content_buf;
}
