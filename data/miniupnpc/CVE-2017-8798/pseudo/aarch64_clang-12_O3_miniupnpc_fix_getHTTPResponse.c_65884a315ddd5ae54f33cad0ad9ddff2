void *__fastcall getHTTPResponse(int s, int *size, int *status_code)
{
  void *result; // x0
  char *v6; // x25
  char *v7; // x0
  int v8; // w21
  int v9; // w19
  unsigned int v10; // w27
  __int64 v11; // x24
  int v12; // w0
  int v13; // w26
  unsigned int v14; // w20
  char *v15; // x22
  int v16; // w8
  int v17; // w9
  int v18; // w11
  __int64 v19; // x11
  __int64 v20; // x10
  int v21; // w11
  int v22; // w9
  int v23; // w22
  __int64 v24; // x20
  unsigned int v25; // w8
  const unsigned __int16 *v26; // x9
  unsigned __int64 v27; // x12
  __int64 v28; // x10
  char *v29; // x11
  int v30; // w8
  __int64 v31; // x13
  __int64 v32; // x10
  int v33; // w8
  char *v34; // x9
  __int64 v35; // x10
  int v36; // w11
  int v37; // w15
  __int64 v38; // x8
  char *v39; // x9
  unsigned __int8 v40; // w10
  int v41; // t1
  bool v42; // cf
  unsigned __int8 v43; // w12
  int v44; // w11
  unsigned int v45; // w28
  unsigned int v46; // w9
  size_t v48; // x1
  char *v49; // x0
  unsigned int v50; // w8
  int v51; // w13
  int v52; // w8
  int v53; // w28
  int v54; // w10
  int v55; // w8
  int v56; // w24
  int v57; // w9
  int v58; // w9
  __int64 v59; // x10
  char *v60; // x11
  int v61; // w12
  int v62; // w9
  const char *v63; // x22
  size_t v64; // x26
  int v65; // w0
  int v66; // w8
  const char *v67; // x22
  __int64 v68; // x26
  char *v69; // x8
  __int64 v70; // x9
  int v71; // w10
  int v72; // w20
  int v73; // w9
  int v74; // w9
  __int64 v75; // x10
  char *v76; // x11
  int v77; // w12
  int v78; // w9
  const char *v79; // x22
  size_t v80; // x26
  int v81; // w0
  int v82; // w8
  char *v83; // x8
  __int64 v84; // x9
  int v85; // w10
  int v86; // w10
  int v88; // w22
  unsigned int v89; // w20
  unsigned int v90; // w8
  bool v91; // nf
  int *v92; // x24
  size_t v93; // x28
  char *v94; // x0
  char *v95; // x0
  int *v96; // [xsp+8h] [xbp-888h]
  int *v97; // [xsp+8h] [xbp-888h]
  __int64 v98; // [xsp+28h] [xbp-868h]
  unsigned int v99; // [xsp+38h] [xbp-858h]
  __int64 v100; // [xsp+40h] [xbp-850h]
  unsigned int v101; // [xsp+40h] [xbp-850h]
  __int64 v102; // [xsp+48h] [xbp-848h]
  char *ptr; // [xsp+50h] [xbp-840h]
  __int64 v105; // [xsp+60h] [xbp-830h]
  char v106[32]; // [xsp+68h] [xbp-828h] BYREF
  char src[2056]; // [xsp+88h] [xbp-808h] BYREF

  if ( status_code )
    *status_code = -1;
  result = malloc(0x800uLL);
  if ( !result )
    goto LABEL_190;
  v6 = (char *)result;
  v7 = (char *)malloc(0x800uLL);
  if ( !v7 )
  {
    v95 = v6;
    goto LABEL_189;
  }
  v8 = 0;
  v9 = 0;
  v10 = 2048;
  v11 = 0xFFFFFFFFLL;
  ptr = v7;
  v105 = 0LL;
  v106[0] = 0;
  v99 = 2048;
  v100 = 0LL;
  do
  {
    v12 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
    if ( v12 < 1 )
      break;
    v13 = v12;
    v14 = v8;
    v15 = v6;
LABEL_10:
    if ( v9 )
    {
      v8 = v14;
      v6 = v15;
      v102 = v11;
      if ( !HIDWORD(v100) )
        goto LABEL_167;
      goto LABEL_36;
    }
    v8 = v13 + v14;
    if ( v13 + v14 <= v10 )
    {
      v6 = v15;
    }
    else
    {
      v6 = (char *)realloc(v15, (unsigned int)v8);
      v10 = v13 + v14;
      if ( !v6 )
      {
        free(v15);
        v95 = ptr;
LABEL_189:
        free(v95);
        result = 0LL;
LABEL_190:
        *size = -1;
        return result;
      }
    }
    memcpy(&v6[v14], src, (unsigned int)v13);
    v16 = v8 - 1;
    if ( v8 <= 1 )
      goto LABEL_9;
    v17 = 0;
    while ( 1 )
    {
      v18 = (unsigned __int8)v6[v17];
      if ( v18 == 10 )
      {
        v20 = v17 + 1LL;
        v21 = (unsigned __int8)v6[v20];
        v22 = v17 + 2;
        goto LABEL_27;
      }
      if ( v18 != 13 )
      {
        v9 = 0;
        if ( ++v17 >= v16 )
          goto LABEL_8;
        goto LABEL_18;
      }
      LODWORD(v19) = v17 + 1;
      if ( v6[v17 + 1] != 10 )
        break;
      v19 = v17 + 2LL;
      if ( v17 + 2 >= v8 || v6[v19] != 13 )
        break;
      v20 = v17 + 3LL;
      if ( (int)v20 >= v8 )
      {
        v9 = 0;
        goto LABEL_30;
      }
      v21 = (unsigned __int8)v6[v20];
      v22 = v17 + 4;
LABEL_27:
      if ( v21 == 10 )
        v9 = v22;
      else
        v9 = 0;
LABEL_30:
      v17 = v20 + 1;
      if ( (int)v20 + 1 >= v16 )
        goto LABEL_8;
LABEL_18:
      if ( v9 )
        goto LABEL_8;
    }
    v9 = 0;
    v17 = v19 + 1;
    if ( (int)v19 + 1 < v16 )
      goto LABEL_18;
LABEL_8:
    if ( !v9 )
    {
LABEL_9:
      v13 = receivedata((unsigned int)s, src, 2048LL, 5000LL, 0LL);
      v9 = 0;
      v14 = v8;
      v15 = v6;
      if ( v13 < 1 )
        break;
      goto LABEL_10;
    }
    v102 = v11;
    v97 = size;
    if ( v9 >= 2 )
    {
      v51 = v9 - 1;
      v98 = v9 - 1;
      v52 = (int)status_code;
      v53 = 0;
      v54 = 0;
      if ( status_code )
      {
        v55 = 0;
        v56 = 0;
        do
        {
          v58 = (unsigned __int8)v6[v56];
          if ( v55 >= 1 && v54 <= v55 && v58 == 58 )
          {
            v57 = v56;
            if ( v56 < v51 )
            {
              v59 = v98 - v56;
              v60 = &v6[v56 + 1];
              v57 = v56;
              while ( 1 )
              {
                v61 = (unsigned __int8)*v60;
                if ( v61 != 32 && v61 != 9 )
                  break;
                ++v57;
                --v59;
                ++v60;
                if ( !v59 )
                {
                  v57 = v51;
                  break;
                }
              }
            }
            v53 = v57 + 1;
          }
          else if ( v58 == 13 || v58 == 10 )
          {
            if ( v55 )
            {
              v62 = v54 - v55;
              if ( v54 > v55 && v53 > v54 )
              {
                v63 = &v6[v55];
                v64 = v62;
                if ( !strncasecmp(v63, "content-length", v62) )
                {
                  v102 = strtol(&v6[v53], 0uLL, 10);
                }
                else if ( !strncasecmp(v63, "transfer-encoding", v64) )
                {
                  v65 = strncasecmp(&v6[v53], "chunked", 7uLL);
                  v66 = HIDWORD(v100);
                  if ( !v65 )
                    v66 = 1;
                  HIDWORD(v100) = v66;
                }
LABEL_125:
                v51 = v9 - 1;
              }
            }
            else if ( v56 >= 1 )
            {
              v67 = v6 + 1;
              v68 = (unsigned int)v56;
              while ( 1 )
              {
                if ( *(v67 - 1) == 32 )
                {
                  if ( (*status_code & 0x80000000) == 0 )
                    goto LABEL_125;
                  *status_code = strtol(v67, 0uLL, 10);
                }
                --v68;
                ++v67;
                if ( !v68 )
                  goto LABEL_125;
              }
            }
            if ( v56 < v8 )
            {
              v69 = &v6[v56];
              v70 = v8 - (__int64)v56;
              while ( 1 )
              {
                v71 = (unsigned __int8)*v69;
                if ( v71 != 13 && v71 != 10 )
                  break;
                ++v56;
                --v70;
                ++v69;
                if ( !v70 )
                {
                  v53 = 0;
                  v57 = v8;
                  v55 = v8;
                  v56 = v8;
                  goto LABEL_96;
                }
              }
            }
            v53 = 0;
            v57 = v56;
            v55 = v56;
          }
          else
          {
            v57 = v56;
            v56 = v54;
          }
LABEL_96:
          v54 = v56;
          v56 = v57 + 1;
        }
        while ( v57 + 1 < v51 );
      }
      else
      {
        v72 = 0;
        do
        {
          v74 = (unsigned __int8)v6[v72];
          if ( v52 >= 1 && v54 <= v52 && v74 == 58 )
          {
            v73 = v72;
            if ( v72 < v51 )
            {
              v75 = v98 - v72;
              v76 = &v6[v72 + 1];
              v73 = v72;
              while ( 1 )
              {
                v77 = (unsigned __int8)*v76;
                if ( v77 != 32 && v77 != 9 )
                  break;
                ++v73;
                --v75;
                ++v76;
                if ( !v75 )
                {
                  v73 = v51;
                  break;
                }
              }
            }
            v53 = v73 + 1;
          }
          else if ( v74 == 13 || v74 == 10 )
          {
            v78 = v54 - v52;
            if ( v54 > v52 && v53 > v54 )
            {
              v79 = &v6[v52];
              v80 = v78;
              if ( !strncasecmp(v79, "content-length", v78) )
              {
                v102 = strtol(&v6[v53], 0uLL, 10);
              }
              else if ( !strncasecmp(v79, "transfer-encoding", v80) )
              {
                v81 = strncasecmp(&v6[v53], "chunked", 7uLL);
                v82 = HIDWORD(v100);
                if ( !v81 )
                  v82 = 1;
                HIDWORD(v100) = v82;
              }
              v51 = v9 - 1;
            }
            if ( v72 < v8 )
            {
              v83 = &v6[v72];
              v84 = v8 - (__int64)v72;
              while ( 1 )
              {
                v85 = (unsigned __int8)*v83;
                if ( v85 != 13 && v85 != 10 )
                  break;
                ++v72;
                --v84;
                ++v83;
                if ( !v84 )
                {
                  v53 = 0;
                  v73 = v8;
                  v52 = v8;
                  v72 = v8;
                  goto LABEL_137;
                }
              }
            }
            v53 = 0;
            v73 = v72;
            v52 = v72;
          }
          else
          {
            v73 = v72;
            v72 = v54;
          }
LABEL_137:
          v54 = v72;
          v72 = v73 + 1;
        }
        while ( v73 + 1 < v51 );
      }
    }
    v13 = v8 - v9;
    memcpy(src, &v6[v9], v8 - v9);
    size = v97;
    LODWORD(v11) = v102;
    if ( !HIDWORD(v100) )
    {
LABEL_167:
      v86 = HIDWORD(v105);
      if ( v13 + HIDWORD(v105) <= (unsigned int)v11 || (int)v11 <= 0 )
        v88 = v13;
      else
        v88 = v11 - HIDWORD(v105);
      v89 = v88 + HIDWORD(v105);
      if ( v88 + HIDWORD(v105) <= v99 )
      {
        v94 = ptr;
      }
      else
      {
        v90 = v11;
        v91 = (unsigned int)v11 < v89 || (int)v11 < 0;
        v92 = size;
        if ( v91 )
          v93 = v89;
        else
          v93 = v90;
        v94 = (char *)realloc(ptr, v93);
        if ( !v94 )
        {
          free(ptr);
          free(v6);
          result = 0LL;
          *v92 = -1;
          return result;
        }
        v86 = HIDWORD(v105);
        v99 = v93;
        size = v92;
      }
      ptr = v94;
      memcpy(&v94[v86], src, v88);
      HIDWORD(v105) += v88;
      goto LABEL_184;
    }
LABEL_36:
    if ( v13 < 1 )
      goto LABEL_184;
    v23 = HIDWORD(v105);
    LODWORD(v24) = 0;
LABEL_38:
    v25 = v100;
LABEL_39:
    if ( !v25 )
    {
      if ( !(_DWORD)v105 )
      {
        v24 = src[(int)v24] == 13 ? (int)v24 + 1LL : (int)v24;
        if ( (int)v24 < v13 && src[v24] == 10 )
          LODWORD(v24) = v24 + 1;
      }
      if ( (int)v24 >= v13 )
      {
        v30 = v24;
        if ( (int)v24 < v13 )
          goto LABEL_54;
LABEL_60:
        LODWORD(v24) = v30;
        if ( v30 >= v13 )
          goto LABEL_133;
      }
      else
      {
        v26 = *_ctype_b_loc();
        v27 = (unsigned int)v105;
        v28 = (unsigned int)v13 - (__int64)(int)v24;
        v29 = &src[(int)v24];
        v30 = v24;
        while ( v27 <= 0x1E )
        {
          v31 = (unsigned __int8)*v29;
          if ( (v26[v31] & 0x1000) == 0 )
            break;
          v106[v27] = v31;
          v106[++v27] = 0;
          --v28;
          ++v30;
          ++v29;
          if ( !v28 )
          {
            LODWORD(v100) = 0;
            LODWORD(v105) = v13 + v105 - v24;
            HIDWORD(v105) = v23;
            goto LABEL_184;
          }
        }
        LODWORD(v105) = v27;
        if ( v30 >= v13 )
          goto LABEL_60;
LABEL_54:
        v32 = v30;
        v33 = -v30;
        v34 = &src[v32];
        v35 = (unsigned int)v13 - v32;
        while ( 1 )
        {
          v36 = (unsigned __int8)*v34;
          if ( v36 == 10 || v36 == 13 )
            break;
          --v33;
          --v35;
          ++v34;
          if ( !v35 )
            goto LABEL_133;
        }
        LODWORD(v24) = (v36 == 13) - v33;
        if ( (int)v24 >= v13 )
        {
LABEL_133:
          LODWORD(v100) = 0;
          HIDWORD(v105) = v23;
          goto LABEL_184;
        }
      }
      v25 = 0;
      if ( src[(int)v24] == 10 )
      {
        if ( (_DWORD)v105 )
        {
          v37 = 0;
          v38 = (unsigned int)v105;
          v39 = v106;
          do
          {
            v41 = (unsigned __int8)*v39++;
            v40 = v41;
            v42 = (unsigned int)(v41 - 0x30) >= 0xA;
            v43 = v41 | 0x20;
            if ( (unsigned int)(v41 - 0x30) >= 0xA )
              v44 = -87;
            else
              v44 = -48;
            if ( v42 )
              v40 = v43;
            --v38;
            v37 = v44 + 16 * v37 + v40;
          }
          while ( v38 );
          v106[0] = 0;
          if ( v37 )
          {
            LODWORD(v24) = v24 + 1;
            v101 = v37;
            v96 = size;
            LODWORD(v105) = 0;
            goto LABEL_76;
          }
        }
        else
        {
          v106[0] = 0;
        }
        HIDWORD(v105) = v23;
        break;
      }
      goto LABEL_39;
    }
    v101 = v25;
    v96 = size;
LABEL_76:
    if ( v101 >= v13 - (int)v24 )
      v45 = v13 - v24;
    else
      v45 = v101;
    v46 = v45 + v23;
    HIDWORD(v105) = v45 + v23;
    if ( v45 + v23 <= v99 )
    {
      v49 = ptr;
    }
    else
    {
      if ( (unsigned int)v102 < v46 || (int)v102 < 0 )
        v48 = v46;
      else
        v48 = (unsigned int)v102;
      v99 = v48;
      v49 = (char *)realloc(ptr, v48);
      if ( !v49 )
      {
        free(ptr);
        free(v6);
        result = 0LL;
        *v96 = -1;
        return result;
      }
    }
    ptr = v49;
    memcpy(&v49[v23], &src[(int)v24], v45);
    LODWORD(v24) = v45 + v24;
    v23 += v45;
    v50 = v101 - v45;
    size = v96;
    LODWORD(v100) = v50;
    if ( (int)v24 < v13 )
      goto LABEL_38;
LABEL_184:
    v11 = v102;
  }
  while ( (int)v102 < 1 || HIDWORD(v105) < (unsigned int)v102 );
  free(v6);
  *size = HIDWORD(v105);
  if ( HIDWORD(v105) )
    return ptr;
  free(ptr);
  return 0LL;
}
